begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WIZARD
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STYLE_WINDOWSVISTA
end_ifndef
begin_include
include|#
directive|include
file|"qwizard_win_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformnativeinterface.h>
end_include
begin_include
include|#
directive|include
file|"qwizard.h"
end_include
begin_include
include|#
directive|include
file|"qpaintengine.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtGui/QMouseEvent>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QDesktopWidget>
end_include
begin_comment
comment|// Note, these tests are duplicates in qwindowsxpstyle_p.h.
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_CC_GNU
end_ifdef
begin_include
include|#
directive|include
file|<w32api.h>
end_include
begin_if
if|#
directive|if
operator|(
name|__W32API_MAJOR_VERSION
operator|>=
literal|3
operator|||
operator|(
name|__W32API_MAJOR_VERSION
operator|==
literal|2
operator|&&
name|__W32API_MINOR_VERSION
operator|>=
literal|5
operator|)
operator|)
end_if
begin_ifdef
ifdef|#
directive|ifdef
name|_WIN32_WINNT
end_ifdef
begin_undef
DECL|macro|_WIN32_WINNT
undef|#
directive|undef
name|_WIN32_WINNT
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|_WIN32_WINNT
define|#
directive|define
name|_WIN32_WINNT
value|0x0501
end_define
begin_include
include|#
directive|include
file|<commctrl.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<uxtheme.h>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QMargins
argument_list|)
end_macro
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|//DWM related
end_comment
begin_typedef
typedef|typedef
struct|struct
block|{
comment|//MARGINS
DECL|member|cxLeftWidth
name|int
name|cxLeftWidth
decl_stmt|;
comment|// width of left border that retains its size
DECL|member|cxRightWidth
name|int
name|cxRightWidth
decl_stmt|;
comment|// width of right border that retains its size
DECL|member|cyTopHeight
name|int
name|cyTopHeight
decl_stmt|;
comment|// height of top border that retains its size
DECL|member|cyBottomHeight
name|int
name|cyBottomHeight
decl_stmt|;
comment|// height of bottom border that retains its size
block|}
DECL|typedef|WIZ_MARGINS
name|WIZ_MARGINS
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
comment|//DTTOPTS
DECL|member|dwSize
name|DWORD
name|dwSize
decl_stmt|;
DECL|member|dwFlags
name|DWORD
name|dwFlags
decl_stmt|;
DECL|member|crText
name|COLORREF
name|crText
decl_stmt|;
DECL|member|crBorder
name|COLORREF
name|crBorder
decl_stmt|;
DECL|member|crShadow
name|COLORREF
name|crShadow
decl_stmt|;
DECL|member|eTextShadowType
name|int
name|eTextShadowType
decl_stmt|;
DECL|member|ptShadowOffset
name|POINT
name|ptShadowOffset
decl_stmt|;
DECL|member|iBorderSize
name|int
name|iBorderSize
decl_stmt|;
DECL|member|iFontPropId
name|int
name|iFontPropId
decl_stmt|;
DECL|member|iColorPropId
name|int
name|iColorPropId
decl_stmt|;
DECL|member|iStateId
name|int
name|iStateId
decl_stmt|;
DECL|member|fApplyOverlay
name|BOOL
name|fApplyOverlay
decl_stmt|;
DECL|member|iGlowSize
name|int
name|iGlowSize
decl_stmt|;
block|}
DECL|typedef|WIZ_DTTOPTS
name|WIZ_DTTOPTS
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|dwFlags
name|DWORD
name|dwFlags
decl_stmt|;
DECL|member|dwMask
name|DWORD
name|dwMask
decl_stmt|;
block|}
DECL|typedef|WIZ_WTA_OPTIONS
name|WIZ_WTA_OPTIONS
typedef|;
end_typedef
begin_define
DECL|macro|WIZ_WM_THEMECHANGED
define|#
directive|define
name|WIZ_WM_THEMECHANGED
value|0x031A
end_define
begin_define
DECL|macro|WIZ_WM_DWMCOMPOSITIONCHANGED
define|#
directive|define
name|WIZ_WM_DWMCOMPOSITIONCHANGED
value|0x031E
end_define
begin_enum
DECL|enum|WIZ_WINDOWTHEMEATTRIBUTETYPE
enum|enum
name|WIZ_WINDOWTHEMEATTRIBUTETYPE
block|{
DECL|enumerator|WIZ_WTA_NONCLIENT
name|WIZ_WTA_NONCLIENT
init|=
literal|1
block|}
enum|;
end_enum
begin_define
DECL|macro|WIZ_WTNCA_NODRAWCAPTION
define|#
directive|define
name|WIZ_WTNCA_NODRAWCAPTION
value|0x00000001
end_define
begin_define
DECL|macro|WIZ_WTNCA_NODRAWICON
define|#
directive|define
name|WIZ_WTNCA_NODRAWICON
value|0x00000002
end_define
begin_define
DECL|macro|WIZ_DT_CENTER
define|#
directive|define
name|WIZ_DT_CENTER
value|0x00000001
end_define
begin_comment
DECL|macro|WIZ_DT_CENTER
comment|//DT_CENTER
end_comment
begin_define
DECL|macro|WIZ_DT_VCENTER
define|#
directive|define
name|WIZ_DT_VCENTER
value|0x00000004
end_define
begin_define
DECL|macro|WIZ_DT_SINGLELINE
define|#
directive|define
name|WIZ_DT_SINGLELINE
value|0x00000020
end_define
begin_define
DECL|macro|WIZ_DT_NOPREFIX
define|#
directive|define
name|WIZ_DT_NOPREFIX
value|0x00000800
end_define
begin_enum
DECL|enum|WIZ_NAVIGATIONPARTS
enum|enum
name|WIZ_NAVIGATIONPARTS
block|{
comment|//NAVIGATIONPARTS
DECL|enumerator|WIZ_NAV_BACKBUTTON
name|WIZ_NAV_BACKBUTTON
init|=
literal|1
block|,
DECL|enumerator|WIZ_NAV_FORWARDBUTTON
name|WIZ_NAV_FORWARDBUTTON
init|=
literal|2
block|,
DECL|enumerator|WIZ_NAV_MENUBUTTON
name|WIZ_NAV_MENUBUTTON
init|=
literal|3
block|, }
enum|;
end_enum
begin_enum
DECL|enum|WIZ_NAV_BACKBUTTONSTATES
enum|enum
name|WIZ_NAV_BACKBUTTONSTATES
block|{
comment|//NAV_BACKBUTTONSTATES
DECL|enumerator|WIZ_NAV_BB_NORMAL
name|WIZ_NAV_BB_NORMAL
init|=
literal|1
block|,
DECL|enumerator|WIZ_NAV_BB_HOT
name|WIZ_NAV_BB_HOT
init|=
literal|2
block|,
DECL|enumerator|WIZ_NAV_BB_PRESSED
name|WIZ_NAV_BB_PRESSED
init|=
literal|3
block|,
DECL|enumerator|WIZ_NAV_BB_DISABLED
name|WIZ_NAV_BB_DISABLED
init|=
literal|4
block|, }
enum|;
end_enum
begin_define
DECL|macro|WIZ_TMT_CAPTIONFONT
define|#
directive|define
name|WIZ_TMT_CAPTIONFONT
value|(801)
end_define
begin_comment
DECL|macro|WIZ_TMT_CAPTIONFONT
comment|//TMT_CAPTIONFONT
end_comment
begin_define
DECL|macro|WIZ_DTT_COMPOSITED
define|#
directive|define
name|WIZ_DTT_COMPOSITED
value|(1UL<< 13)
end_define
begin_comment
DECL|macro|WIZ_DTT_COMPOSITED
comment|//DTT_COMPOSITED
end_comment
begin_define
DECL|macro|WIZ_DTT_GLOWSIZE
define|#
directive|define
name|WIZ_DTT_GLOWSIZE
value|(1UL<< 11)
end_define
begin_comment
DECL|macro|WIZ_DTT_GLOWSIZE
comment|//DTT_GLOWSIZE
end_comment
begin_define
DECL|macro|WIZ_WM_NCMOUSELEAVE
define|#
directive|define
name|WIZ_WM_NCMOUSELEAVE
value|674
end_define
begin_comment
DECL|macro|WIZ_WM_NCMOUSELEAVE
comment|//WM_NCMOUSELEAVE
end_comment
begin_define
DECL|macro|WIZ_WP_CAPTION
define|#
directive|define
name|WIZ_WP_CAPTION
value|1
end_define
begin_comment
DECL|macro|WIZ_WP_CAPTION
comment|//WP_CAPTION
end_comment
begin_define
DECL|macro|WIZ_CS_ACTIVE
define|#
directive|define
name|WIZ_CS_ACTIVE
value|1
end_define
begin_comment
DECL|macro|WIZ_CS_ACTIVE
comment|//CS_ACTIVE
end_comment
begin_define
DECL|macro|WIZ_TMT_FILLCOLORHINT
define|#
directive|define
name|WIZ_TMT_FILLCOLORHINT
value|3821
end_define
begin_comment
DECL|macro|WIZ_TMT_FILLCOLORHINT
comment|//TMT_FILLCOLORHINT
end_comment
begin_define
DECL|macro|WIZ_TMT_BORDERCOLORHINT
define|#
directive|define
name|WIZ_TMT_BORDERCOLORHINT
value|3822
end_define
begin_comment
DECL|macro|WIZ_TMT_BORDERCOLORHINT
comment|//TMT_BORDERCOLORHINT
end_comment
begin_typedef
DECL|typedef|PtrDwmDefWindowProc
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrDwmDefWindowProc
function_decl|)
parameter_list|(
name|HWND
name|hWnd
parameter_list|,
name|UINT
name|msg
parameter_list|,
name|WPARAM
name|wParam
parameter_list|,
name|LPARAM
name|lParam
parameter_list|,
name|LRESULT
modifier|*
name|plResult
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrDwmIsCompositionEnabled
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrDwmIsCompositionEnabled
function_decl|)
parameter_list|(
name|BOOL
modifier|*
name|pfEnabled
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrDwmExtendFrameIntoClientArea
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrDwmExtendFrameIntoClientArea
function_decl|)
parameter_list|(
name|HWND
name|hWnd
parameter_list|,
specifier|const
name|WIZ_MARGINS
modifier|*
name|pMarInset
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrSetWindowThemeAttribute
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrSetWindowThemeAttribute
function_decl|)
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|enum
name|WIZ_WINDOWTHEMEATTRIBUTETYPE
name|eAttribute
parameter_list|,
name|PVOID
name|pvAttribute
parameter_list|,
name|DWORD
name|cbAttribute
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|pDwmDefWindowProc
specifier|static
name|PtrDwmDefWindowProc
name|pDwmDefWindowProc
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pDwmIsCompositionEnabled
specifier|static
name|PtrDwmIsCompositionEnabled
name|pDwmIsCompositionEnabled
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pDwmExtendFrameIntoClientArea
specifier|static
name|PtrDwmExtendFrameIntoClientArea
name|pDwmExtendFrameIntoClientArea
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pSetWindowThemeAttribute
specifier|static
name|PtrSetWindowThemeAttribute
name|pSetWindowThemeAttribute
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|//Theme related
end_comment
begin_typedef
DECL|typedef|PtrIsAppThemed
typedef|typedef
name|bool
function_decl|(
name|WINAPI
modifier|*
name|PtrIsAppThemed
function_decl|)
parameter_list|()
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrIsThemeActive
typedef|typedef
name|bool
function_decl|(
name|WINAPI
modifier|*
name|PtrIsThemeActive
function_decl|)
parameter_list|()
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrOpenThemeData
typedef|typedef
name|HANDLE
function_decl|(
name|WINAPI
modifier|*
name|PtrOpenThemeData
function_decl|)
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|LPCWSTR
name|pszClassList
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrCloseThemeData
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrCloseThemeData
function_decl|)
parameter_list|(
name|HANDLE
name|hTheme
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemeSysFont
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemeSysFont
function_decl|)
parameter_list|(
name|HANDLE
name|hTheme
parameter_list|,
name|int
name|iFontId
parameter_list|,
name|LOGFONTW
modifier|*
name|plf
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrDrawThemeTextEx
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrDrawThemeTextEx
function_decl|)
parameter_list|(
name|HANDLE
name|hTheme
parameter_list|,
name|HDC
name|hdc
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|LPCWSTR
name|pszText
parameter_list|,
name|int
name|cchText
parameter_list|,
name|DWORD
name|dwTextFlags
parameter_list|,
name|LPRECT
name|pRect
parameter_list|,
specifier|const
name|WIZ_DTTOPTS
modifier|*
name|pOptions
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrDrawThemeBackground
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrDrawThemeBackground
function_decl|)
parameter_list|(
name|HANDLE
name|hTheme
parameter_list|,
name|HDC
name|hdc
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
specifier|const
name|RECT
modifier|*
name|pRect
parameter_list|,
name|OPTIONAL
specifier|const
name|RECT
modifier|*
name|pClipRect
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemePartSize
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemePartSize
function_decl|)
parameter_list|(
name|HANDLE
name|hTheme
parameter_list|,
name|HDC
name|hdc
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|OPTIONAL
name|RECT
modifier|*
name|prc
parameter_list|,
name|enum
name|THEMESIZE
name|eSize
parameter_list|,
name|OUT
name|SIZE
modifier|*
name|psz
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemeColor
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemeColor
function_decl|)
parameter_list|(
name|HANDLE
name|hTheme
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|OUT
name|COLORREF
modifier|*
name|pColor
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|pIsAppThemed
specifier|static
name|PtrIsAppThemed
name|pIsAppThemed
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pIsThemeActive
specifier|static
name|PtrIsThemeActive
name|pIsThemeActive
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pOpenThemeData
specifier|static
name|PtrOpenThemeData
name|pOpenThemeData
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pCloseThemeData
specifier|static
name|PtrCloseThemeData
name|pCloseThemeData
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemeSysFont
specifier|static
name|PtrGetThemeSysFont
name|pGetThemeSysFont
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pDrawThemeTextEx
specifier|static
name|PtrDrawThemeTextEx
name|pDrawThemeTextEx
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pDrawThemeBackground
specifier|static
name|PtrDrawThemeBackground
name|pDrawThemeBackground
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemePartSize
specifier|static
name|PtrGetThemePartSize
name|pGetThemePartSize
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemeColor
specifier|static
name|PtrGetThemeColor
name|pGetThemeColor
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|instanceCount
name|int
name|QVistaHelper
operator|::
name|instanceCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_devicePixelRatio
name|int
name|QVistaHelper
operator|::
name|m_devicePixelRatio
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|is_vista
name|bool
name|QVistaHelper
operator|::
name|is_vista
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|cachedVistaState
name|QVistaHelper
operator|::
name|VistaState
name|QVistaHelper
operator|::
name|cachedVistaState
init|=
name|QVistaHelper
operator|::
name|Dirty
decl_stmt|;
end_decl_stmt
begin_comment
comment|/****************************************************************************** ** QVistaBackButton */
end_comment
begin_constructor
DECL|function|QVistaBackButton
name|QVistaBackButton
operator|::
name|QVistaBackButton
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAbstractButton
argument_list|(
name|widget
argument_list|)
block|{
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
comment|// Native dialogs use ALT-Left even in RTL mode, so do the same, even if it might be counter-intuitive.
name|setShortcut
argument_list|(
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|Key_Left
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|sizeHint
name|QSize
name|QVistaBackButton
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|ensurePolished
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|32
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|width
init|=
name|size
decl_stmt|,
name|height
init|=
name|size
decl_stmt|;
comment|/*     HANDLE theme = pOpenThemeData(0, L"Navigation");     SIZE size;     if (pGetThemePartSize(theme, 0, WIZ_NAV_BACKBUTTON, WIZ_NAV_BB_NORMAL, 0, TS_TRUE,&size) == S_OK) {         width = size.cx;         height = size.cy;     } */
return|return
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|enterEvent
name|void
name|QVistaBackButton
operator|::
name|enterEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
name|update
argument_list|()
expr_stmt|;
name|QAbstractButton
operator|::
name|enterEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leaveEvent
name|void
name|QVistaBackButton
operator|::
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
name|update
argument_list|()
expr_stmt|;
name|QAbstractButton
operator|::
name|leaveEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|QVistaBackButton
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QRect
name|r
init|=
name|rect
argument_list|()
decl_stmt|;
name|HANDLE
name|theme
init|=
name|pOpenThemeData
argument_list|(
literal|0
argument_list|,
literal|L"Navigation"
argument_list|)
decl_stmt|;
comment|//RECT rect;
name|QPoint
name|origin
decl_stmt|;
specifier|const
name|HDC
name|hdc
init|=
name|QVistaHelper
operator|::
name|backingStoreDC
argument_list|(
name|parentWidget
argument_list|()
argument_list|,
operator|&
name|origin
argument_list|)
decl_stmt|;
name|RECT
name|clipRect
decl_stmt|;
name|int
name|xoffset
init|=
name|origin
operator|.
name|x
argument_list|()
operator|+
name|QWidget
operator|::
name|mapToParent
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|)
operator|.
name|x
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|yoffset
init|=
name|origin
operator|.
name|y
argument_list|()
operator|+
name|QWidget
operator|::
name|mapToParent
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|)
operator|.
name|y
argument_list|()
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|dpr
init|=
name|devicePixelRatio
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|rDp
init|=
name|QRect
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
operator|*
name|dpr
argument_list|,
name|r
operator|.
name|size
argument_list|()
operator|*
name|dpr
argument_list|)
decl_stmt|;
specifier|const
name|int
name|xoffsetDp
init|=
name|xoffset
operator|*
name|dpr
decl_stmt|;
specifier|const
name|int
name|yoffsetDp
init|=
name|yoffset
operator|*
name|dpr
decl_stmt|;
name|clipRect
operator|.
name|top
operator|=
name|rDp
operator|.
name|top
argument_list|()
operator|+
name|yoffsetDp
expr_stmt|;
name|clipRect
operator|.
name|bottom
operator|=
name|rDp
operator|.
name|bottom
argument_list|()
operator|+
name|yoffsetDp
expr_stmt|;
name|clipRect
operator|.
name|left
operator|=
name|rDp
operator|.
name|left
argument_list|()
operator|+
name|xoffsetDp
expr_stmt|;
name|clipRect
operator|.
name|right
operator|=
name|rDp
operator|.
name|right
argument_list|()
operator|+
name|xoffsetDp
expr_stmt|;
name|int
name|state
init|=
name|WIZ_NAV_BB_NORMAL
decl_stmt|;
if|if
condition|(
operator|!
name|isEnabled
argument_list|()
condition|)
name|state
operator|=
name|WIZ_NAV_BB_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|isDown
argument_list|()
condition|)
name|state
operator|=
name|WIZ_NAV_BB_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|underMouse
argument_list|()
condition|)
name|state
operator|=
name|WIZ_NAV_BB_HOT
expr_stmt|;
name|WIZ_NAVIGATIONPARTS
name|buttonType
init|=
operator|(
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
name|WIZ_NAV_BACKBUTTON
else|:
name|WIZ_NAV_FORWARDBUTTON
operator|)
decl_stmt|;
name|pDrawThemeBackground
argument_list|(
name|theme
argument_list|,
name|hdc
argument_list|,
name|buttonType
argument_list|,
name|state
argument_list|,
operator|&
name|clipRect
argument_list|,
operator|&
name|clipRect
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/****************************************************************************** ** QVistaHelper */
end_comment
begin_constructor
DECL|function|QVistaHelper
name|QVistaHelper
operator|::
name|QVistaHelper
parameter_list|(
name|QWizard
modifier|*
name|wizard
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|wizard
argument_list|)
member_init_list|,
name|pressed
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|wizard
argument_list|(
name|wizard
argument_list|)
member_init_list|,
name|backButton_
argument_list|(
literal|0
argument_list|)
block|{
name|QVistaHelper
operator|::
name|m_devicePixelRatio
operator|=
name|wizard
operator|->
name|devicePixelRatio
argument_list|()
expr_stmt|;
name|is_vista
operator|=
name|resolveSymbols
argument_list|()
expr_stmt|;
if|if
condition|(
name|instanceCount
operator|++
operator|==
literal|0
condition|)
name|cachedVistaState
operator|=
name|Dirty
expr_stmt|;
if|if
condition|(
name|is_vista
condition|)
block|{
name|backButton_
operator|=
operator|new
name|QVistaBackButton
argument_list|(
name|wizard
argument_list|)
expr_stmt|;
name|backButton_
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
comment|// Handle diff between Windows 7 and Vista
name|iconSpacing
operator|=
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|textSpacing
operator|=
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_WINDOWS7
condition|?
name|iconSpacing
else|:
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QVistaHelper
name|QVistaHelper
operator|::
name|~
name|QVistaHelper
parameter_list|()
block|{
operator|--
name|instanceCount
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|updateCustomMargins
name|void
name|QVistaHelper
operator|::
name|updateCustomMargins
parameter_list|(
name|bool
name|vistaMargins
parameter_list|)
block|{
if|if
condition|(
name|QWindow
modifier|*
name|window
init|=
name|wizard
operator|->
name|windowHandle
argument_list|()
condition|)
block|{
comment|// Reduce top frame to zero since we paint it ourselves. Use
comment|// device pixel to avoid rounding errors.
specifier|const
name|QMargins
name|customMarginsDp
init|=
name|vistaMargins
condition|?
name|QMargins
argument_list|(
literal|0
argument_list|,
operator|-
name|titleBarSizeDp
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|QMargins
argument_list|()
decl_stmt|;
specifier|const
name|QVariant
name|customMarginsV
init|=
name|qVariantFromValue
argument_list|(
name|customMarginsDp
argument_list|)
decl_stmt|;
comment|// The dynamic property takes effect when creating the platform window.
name|window
operator|->
name|setProperty
argument_list|(
literal|"_q_windowsCustomMargins"
argument_list|,
name|customMarginsV
argument_list|)
expr_stmt|;
comment|// If a platform window exists, change via native interface.
if|if
condition|(
name|QPlatformWindow
modifier|*
name|platformWindow
init|=
name|window
operator|->
name|handle
argument_list|()
condition|)
block|{
name|QGuiApplication
operator|::
name|platformNativeInterface
argument_list|()
operator|->
name|setWindowProperty
argument_list|(
name|platformWindow
argument_list|,
name|QStringLiteral
argument_list|(
literal|"WindowsCustomMargins"
argument_list|)
argument_list|,
name|customMarginsV
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|isCompositionEnabled
name|bool
name|QVistaHelper
operator|::
name|isCompositionEnabled
parameter_list|()
block|{
name|bool
name|value
init|=
name|is_vista
decl_stmt|;
if|if
condition|(
name|is_vista
condition|)
block|{
name|HRESULT
name|hr
decl_stmt|;
name|BOOL
name|bEnabled
decl_stmt|;
name|hr
operator|=
name|pDwmIsCompositionEnabled
argument_list|(
operator|&
name|bEnabled
argument_list|)
expr_stmt|;
name|value
operator|=
operator|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|&&
name|bEnabled
operator|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
end_function
begin_function
DECL|function|isThemeActive
name|bool
name|QVistaHelper
operator|::
name|isThemeActive
parameter_list|()
block|{
return|return
name|is_vista
operator|&&
name|pIsThemeActive
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|vistaState
name|QVistaHelper
operator|::
name|VistaState
name|QVistaHelper
operator|::
name|vistaState
parameter_list|()
block|{
if|if
condition|(
name|instanceCount
operator|==
literal|0
operator|||
name|cachedVistaState
operator|==
name|Dirty
condition|)
name|cachedVistaState
operator|=
name|isCompositionEnabled
argument_list|()
condition|?
name|VistaAero
else|:
name|isThemeActive
argument_list|()
condition|?
name|VistaBasic
else|:
name|Classic
expr_stmt|;
return|return
name|cachedVistaState
return|;
block|}
end_function
begin_function
DECL|function|disconnectBackButton
name|void
name|QVistaHelper
operator|::
name|disconnectBackButton
parameter_list|()
block|{
if|if
condition|(
name|backButton_
condition|)
comment|// Leave QStyleSheetStyle's connections on destroyed() intact.
name|backButton_
operator|->
name|disconnect
argument_list|(
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|basicWindowFrameColor
name|QColor
name|QVistaHelper
operator|::
name|basicWindowFrameColor
parameter_list|()
block|{
name|DWORD
name|rgb
decl_stmt|;
name|HWND
name|handle
init|=
name|QApplicationPrivate
operator|::
name|getHWNDForWidget
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
argument_list|)
decl_stmt|;
name|HANDLE
name|hTheme
init|=
name|pOpenThemeData
argument_list|(
name|handle
argument_list|,
literal|L"WINDOW"
argument_list|)
decl_stmt|;
name|pGetThemeColor
argument_list|(
name|hTheme
argument_list|,
name|WIZ_WP_CAPTION
argument_list|,
name|WIZ_CS_ACTIVE
argument_list|,
name|wizard
operator|->
name|isActiveWindow
argument_list|()
condition|?
name|WIZ_TMT_FILLCOLORHINT
else|:
name|WIZ_TMT_BORDERCOLORHINT
argument_list|,
operator|&
name|rgb
argument_list|)
expr_stmt|;
name|BYTE
name|r
init|=
name|GetRValue
argument_list|(
name|rgb
argument_list|)
decl_stmt|;
name|BYTE
name|g
init|=
name|GetGValue
argument_list|(
name|rgb
argument_list|)
decl_stmt|;
name|BYTE
name|b
init|=
name|GetBValue
argument_list|(
name|rgb
argument_list|)
decl_stmt|;
return|return
name|QColor
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setDWMTitleBar
name|bool
name|QVistaHelper
operator|::
name|setDWMTitleBar
parameter_list|(
name|TitleBarChangeType
name|type
parameter_list|)
block|{
name|bool
name|value
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|vistaState
argument_list|()
operator|==
name|VistaAero
condition|)
block|{
name|WIZ_MARGINS
name|mar
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|NormalTitleBar
condition|)
name|mar
operator|.
name|cyTopHeight
operator|=
literal|0
expr_stmt|;
else|else
name|mar
operator|.
name|cyTopHeight
operator|=
operator|(
name|titleBarSize
argument_list|()
operator|+
name|topOffset
argument_list|()
operator|)
operator|*
name|QVistaHelper
operator|::
name|m_devicePixelRatio
expr_stmt|;
if|if
condition|(
specifier|const
name|HWND
name|wizardHandle
init|=
name|wizardHWND
argument_list|()
condition|)
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|pDwmExtendFrameIntoClientArea
argument_list|(
name|wizardHandle
argument_list|,
operator|&
name|mar
argument_list|)
argument_list|)
condition|)
name|value
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
end_function
begin_function_decl
name|Q_GUI_EXPORT
name|HICON
name|qt_pixmapToWinHICON
parameter_list|(
specifier|const
name|QPixmap
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|getCaptionLogFont
specifier|static
name|LOGFONT
name|getCaptionLogFont
parameter_list|(
name|HANDLE
name|hTheme
parameter_list|)
block|{
name|LOGFONT
name|result
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
block|{
literal|0
block|}
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|hTheme
operator|||
name|FAILED
argument_list|(
name|pGetThemeSysFont
argument_list|(
name|hTheme
argument_list|,
name|WIZ_TMT_CAPTIONFONT
argument_list|,
operator|&
name|result
argument_list|)
argument_list|)
condition|)
block|{
name|NONCLIENTMETRICS
name|ncm
decl_stmt|;
name|ncm
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|NONCLIENTMETRICS
argument_list|)
expr_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_GETNONCLIENTMETRICS
argument_list|,
sizeof|sizeof
argument_list|(
name|NONCLIENTMETRICS
argument_list|)
argument_list|,
operator|&
name|ncm
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|ncm
operator|.
name|lfMessageFont
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|getCaptionQFont
specifier|static
name|bool
name|getCaptionQFont
parameter_list|(
name|int
name|dpi
parameter_list|,
name|QFont
modifier|*
name|result
parameter_list|)
block|{
if|if
condition|(
operator|!
name|pOpenThemeData
condition|)
return|return
literal|false
return|;
specifier|const
name|HANDLE
name|hTheme
init|=
name|pOpenThemeData
argument_list|(
name|QApplicationPrivate
operator|::
name|getHWNDForWidget
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
argument_list|)
argument_list|,
literal|L"WINDOW"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hTheme
condition|)
return|return
literal|false
return|;
comment|// Call into QWindowsNativeInterface to convert the LOGFONT into a QFont.
specifier|const
name|LOGFONT
name|logFont
init|=
name|getCaptionLogFont
argument_list|(
name|hTheme
argument_list|)
decl_stmt|;
name|QPlatformNativeInterface
modifier|*
name|ni
init|=
name|QGuiApplication
operator|::
name|platformNativeInterface
argument_list|()
decl_stmt|;
return|return
name|ni
operator|&&
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|ni
argument_list|,
literal|"logFontToQFont"
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QFont
argument_list|,
operator|*
name|result
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
specifier|const
name|void
operator|*
argument_list|,
operator|&
name|logFont
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
name|dpi
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|drawTitleBar
name|void
name|QVistaHelper
operator|::
name|drawTitleBar
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|backButton_
argument_list|)
expr_stmt|;
name|QPoint
name|origin
decl_stmt|;
specifier|const
name|bool
name|isWindow
init|=
name|wizard
operator|->
name|isWindow
argument_list|()
decl_stmt|;
specifier|const
name|HDC
name|hdc
init|=
name|QVistaHelper
operator|::
name|backingStoreDC
argument_list|(
name|wizard
argument_list|,
operator|&
name|origin
argument_list|)
decl_stmt|;
if|if
condition|(
name|vistaState
argument_list|()
operator|==
name|VistaAero
operator|&&
name|isWindow
condition|)
name|drawBlackRect
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|wizard
operator|->
name|width
argument_list|()
argument_list|,
name|titleBarSize
argument_list|()
operator|+
name|topOffset
argument_list|()
argument_list|)
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
comment|// The button is positioned in QWizardPrivate::handleAeroStyleChange(),
comment|// all calculation is relative to it.
specifier|const
name|int
name|btnTop
init|=
name|backButton_
operator|->
name|mapToParent
argument_list|(
name|QPoint
argument_list|()
argument_list|)
operator|.
name|y
argument_list|()
decl_stmt|;
specifier|const
name|int
name|btnHeight
init|=
name|backButton_
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|int
name|verticalCenter
init|=
operator|(
name|btnTop
operator|+
name|btnHeight
operator|/
literal|2
operator|)
operator|-
literal|1
decl_stmt|;
specifier|const
name|QString
name|text
init|=
name|wizard
operator|->
name|window
argument_list|()
operator|->
name|windowTitle
argument_list|()
decl_stmt|;
name|QFont
name|font
decl_stmt|;
if|if
condition|(
operator|!
name|isWindow
operator|||
operator|!
name|getCaptionQFont
argument_list|(
name|wizard
operator|->
name|logicalDpiY
argument_list|()
operator|*
name|wizard
operator|->
name|devicePixelRatio
argument_list|()
argument_list|,
operator|&
name|font
argument_list|)
condition|)
name|font
operator|=
name|QApplication
operator|::
name|font
argument_list|(
literal|"QMdiSubWindowTitleBar"
argument_list|)
expr_stmt|;
specifier|const
name|QFontMetrics
name|fontMetrics
argument_list|(
name|font
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|brect
init|=
name|fontMetrics
operator|.
name|boundingRect
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|int
name|textHeight
init|=
name|brect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|textWidth
init|=
name|brect
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|glowOffset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|vistaState
argument_list|()
operator|==
name|VistaAero
condition|)
block|{
name|textHeight
operator|+=
literal|2
operator|*
name|glowSize
argument_list|()
expr_stmt|;
name|textWidth
operator|+=
literal|2
operator|*
name|glowSize
argument_list|()
expr_stmt|;
name|glowOffset
operator|=
name|glowSize
argument_list|()
expr_stmt|;
block|}
specifier|const
name|int
name|titleLeft
init|=
operator|(
name|wizard
operator|->
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
name|titleOffset
argument_list|()
operator|-
name|glowOffset
else|:
name|wizard
operator|->
name|width
argument_list|()
operator|-
name|titleOffset
argument_list|()
operator|-
name|textWidth
operator|+
name|glowOffset
operator|)
decl_stmt|;
specifier|const
name|QRect
name|textRectangle
argument_list|(
name|titleLeft
argument_list|,
name|verticalCenter
operator|-
name|textHeight
operator|/
literal|2
argument_list|,
name|textWidth
argument_list|,
name|textHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|isWindow
condition|)
block|{
name|drawTitleText
argument_list|(
name|painter
argument_list|,
name|text
argument_list|,
name|textRectangle
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawText
argument_list|(
name|textRectangle
argument_list|,
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|AlignHCenter
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
specifier|const
name|QIcon
name|windowIcon
init|=
name|wizard
operator|->
name|windowIcon
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|windowIcon
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|int
name|size
init|=
name|QVistaHelper
operator|::
name|iconSize
argument_list|()
decl_stmt|;
specifier|const
name|int
name|iconLeft
init|=
operator|(
name|wizard
operator|->
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
name|leftMargin
argument_list|()
else|:
name|wizard
operator|->
name|width
argument_list|()
operator|-
name|leftMargin
argument_list|()
operator|-
name|size
operator|)
decl_stmt|;
specifier|const
name|QPoint
name|pos
argument_list|(
name|origin
operator|.
name|x
argument_list|()
operator|+
name|iconLeft
argument_list|,
name|origin
operator|.
name|y
argument_list|()
operator|+
name|verticalCenter
operator|-
name|size
operator|/
literal|2
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|posDp
init|=
name|pos
operator|*
name|QVistaHelper
operator|::
name|m_devicePixelRatio
decl_stmt|;
specifier|const
name|HICON
name|hIcon
init|=
name|qt_pixmapToWinHICON
argument_list|(
name|windowIcon
operator|.
name|pixmap
argument_list|(
name|size
operator|*
name|QVistaHelper
operator|::
name|m_devicePixelRatio
argument_list|)
argument_list|)
decl_stmt|;
name|DrawIconEx
argument_list|(
name|hdc
argument_list|,
name|posDp
operator|.
name|x
argument_list|()
argument_list|,
name|posDp
operator|.
name|y
argument_list|()
argument_list|,
name|hIcon
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|DI_NORMAL
operator||
name|DI_COMPAT
argument_list|)
expr_stmt|;
name|DestroyIcon
argument_list|(
name|hIcon
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setTitleBarIconAndCaptionVisible
name|void
name|QVistaHelper
operator|::
name|setTitleBarIconAndCaptionVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|if
condition|(
name|is_vista
condition|)
block|{
name|WIZ_WTA_OPTIONS
name|opt
decl_stmt|;
name|opt
operator|.
name|dwFlags
operator|=
name|WIZ_WTNCA_NODRAWICON
operator||
name|WIZ_WTNCA_NODRAWCAPTION
expr_stmt|;
if|if
condition|(
name|visible
condition|)
name|opt
operator|.
name|dwMask
operator|=
literal|0
expr_stmt|;
else|else
name|opt
operator|.
name|dwMask
operator|=
name|WIZ_WTNCA_NODRAWICON
operator||
name|WIZ_WTNCA_NODRAWCAPTION
expr_stmt|;
if|if
condition|(
specifier|const
name|HWND
name|handle
init|=
name|wizardHWND
argument_list|()
condition|)
name|pSetWindowThemeAttribute
argument_list|(
name|handle
argument_list|,
name|WIZ_WTA_NONCLIENT
argument_list|,
operator|&
name|opt
argument_list|,
sizeof|sizeof
argument_list|(
name|WIZ_WTA_OPTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|winEvent
name|bool
name|QVistaHelper
operator|::
name|winEvent
parameter_list|(
name|MSG
modifier|*
name|msg
parameter_list|,
name|long
modifier|*
name|result
parameter_list|)
block|{
switch|switch
condition|(
name|msg
operator|->
name|message
condition|)
block|{
case|case
name|WM_NCHITTEST
case|:
block|{
name|LRESULT
name|lResult
decl_stmt|;
comment|// Perform hit testing using DWM
if|if
condition|(
name|pDwmDefWindowProc
argument_list|(
name|msg
operator|->
name|hwnd
argument_list|,
name|msg
operator|->
name|message
argument_list|,
name|msg
operator|->
name|wParam
argument_list|,
name|msg
operator|->
name|lParam
argument_list|,
operator|&
name|lResult
argument_list|)
condition|)
block|{
comment|// DWM returned a hit, no further processing necessary
operator|*
name|result
operator|=
name|lResult
expr_stmt|;
block|}
else|else
block|{
comment|// DWM didn't return a hit, process using DefWindowProc
name|lResult
operator|=
name|DefWindowProc
argument_list|(
name|msg
operator|->
name|hwnd
argument_list|,
name|msg
operator|->
name|message
argument_list|,
name|msg
operator|->
name|wParam
argument_list|,
name|msg
operator|->
name|lParam
argument_list|)
expr_stmt|;
comment|// If DefWindowProc returns a window caption button, just return HTCLIENT (client area).
comment|// This avoid unnecessary hits to Windows NT style caption buttons which aren't visible but are
comment|// located just under the Aero style window close button.
if|if
condition|(
name|lResult
operator|==
name|HTCLOSE
operator|||
name|lResult
operator|==
name|HTMAXBUTTON
operator|||
name|lResult
operator|==
name|HTMINBUTTON
operator|||
name|lResult
operator|==
name|HTHELP
condition|)
operator|*
name|result
operator|=
name|HTCLIENT
expr_stmt|;
else|else
operator|*
name|result
operator|=
name|lResult
expr_stmt|;
block|}
break|break;
block|}
default|default:
name|LRESULT
name|lResult
decl_stmt|;
comment|// Pass to DWM to handle
if|if
condition|(
name|pDwmDefWindowProc
argument_list|(
name|msg
operator|->
name|hwnd
argument_list|,
name|msg
operator|->
name|message
argument_list|,
name|msg
operator|->
name|wParam
argument_list|,
name|msg
operator|->
name|lParam
argument_list|,
operator|&
name|lResult
argument_list|)
condition|)
operator|*
name|result
operator|=
name|lResult
expr_stmt|;
comment|// If the message wasn't handled by DWM, continue processing it as normal
else|else
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setMouseCursor
name|void
name|QVistaHelper
operator|::
name|setMouseCursor
parameter_list|(
name|QPoint
name|pos
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|rtTop
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
name|wizard
operator|->
name|setCursor
argument_list|(
name|Qt
operator|::
name|SizeVerCursor
argument_list|)
expr_stmt|;
else|else
name|wizard
operator|->
name|setCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|mouseEvent
name|void
name|QVistaHelper
operator|::
name|mouseEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseMove
case|:
name|mouseMoveEvent
argument_list|(
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
name|mousePressEvent
argument_list|(
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|mouseReleaseEvent
argument_list|(
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|handleWinEvent
name|bool
name|QVistaHelper
operator|::
name|handleWinEvent
parameter_list|(
name|MSG
modifier|*
name|message
parameter_list|,
name|long
modifier|*
name|result
parameter_list|)
block|{
if|if
condition|(
name|message
operator|->
name|message
operator|==
name|WIZ_WM_THEMECHANGED
operator|||
name|message
operator|->
name|message
operator|==
name|WIZ_WM_DWMCOMPOSITIONCHANGED
condition|)
name|cachedVistaState
operator|=
name|Dirty
expr_stmt|;
name|bool
name|status
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|wizard
operator|->
name|wizardStyle
argument_list|()
operator|==
name|QWizard
operator|::
name|AeroStyle
operator|&&
name|vistaState
argument_list|()
operator|==
name|VistaAero
condition|)
block|{
name|status
operator|=
name|winEvent
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|->
name|message
operator|==
name|WM_NCPAINT
condition|)
name|wizard
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|QVistaHelper
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rtTop
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|wizard
operator|->
name|width
argument_list|()
argument_list|,
name|frameSize
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|height
init|=
name|captionSize
argument_list|()
operator|+
name|topOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|vistaState
argument_list|()
operator|==
name|VistaBasic
condition|)
name|height
operator|-=
name|titleBarSize
argument_list|()
expr_stmt|;
name|rtTitle
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
name|frameSize
argument_list|()
argument_list|,
name|wizard
operator|->
name|width
argument_list|()
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|QVistaHelper
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|QPainter
name|painter
argument_list|(
name|wizard
argument_list|)
decl_stmt|;
name|drawTitleBar
argument_list|(
operator|&
name|painter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|QVistaHelper
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|wizard
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|QRect
name|rect
init|=
name|wizard
operator|->
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|pressed
condition|)
block|{
switch|switch
condition|(
name|change
condition|)
block|{
case|case
name|resizeTop
case|:
block|{
specifier|const
name|int
name|dy
init|=
name|event
operator|->
name|pos
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|pressedPos
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|dy
operator|>
literal|0
operator|&&
name|rect
operator|.
name|height
argument_list|()
operator|>
name|wizard
operator|->
name|minimumHeight
argument_list|()
operator|)
operator|||
operator|(
name|dy
operator|<
literal|0
operator|&&
name|rect
operator|.
name|height
argument_list|()
operator|<
name|wizard
operator|->
name|maximumHeight
argument_list|()
operator|)
condition|)
name|rect
operator|.
name|setTop
argument_list|(
name|rect
operator|.
name|top
argument_list|()
operator|+
name|dy
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|movePosition
case|:
block|{
name|QPoint
name|newPos
init|=
name|event
operator|->
name|pos
argument_list|()
operator|-
name|pressedPos
decl_stmt|;
name|rect
operator|.
name|moveLeft
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
name|newPos
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|rect
operator|.
name|moveTop
argument_list|(
name|rect
operator|.
name|top
argument_list|()
operator|+
name|newPos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
name|wizard
operator|->
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|vistaState
argument_list|()
operator|==
name|VistaAero
condition|)
block|{
name|setMouseCursor
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QVistaHelper
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|change
operator|=
name|noChange
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
operator|||
name|wizard
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|rtTitle
operator|.
name|contains
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
name|change
operator|=
name|movePosition
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rtTop
operator|.
name|contains
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
name|change
operator|=
operator|(
name|vistaState
argument_list|()
operator|==
name|VistaAero
operator|)
condition|?
name|resizeTop
else|:
name|movePosition
expr_stmt|;
if|if
condition|(
name|change
operator|!=
name|noChange
condition|)
block|{
if|if
condition|(
name|vistaState
argument_list|()
operator|==
name|VistaAero
condition|)
name|setMouseCursor
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|pressed
operator|=
literal|true
expr_stmt|;
name|pressedPos
operator|=
name|event
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QVistaHelper
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|change
operator|=
name|noChange
expr_stmt|;
if|if
condition|(
name|pressed
condition|)
block|{
name|pressed
operator|=
literal|false
expr_stmt|;
name|wizard
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
if|if
condition|(
name|vistaState
argument_list|()
operator|==
name|VistaAero
condition|)
name|setMouseCursor
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eventFilter
name|bool
name|QVistaHelper
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|obj
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|!=
name|wizard
condition|)
return|return
name|QObject
operator|::
name|eventFilter
argument_list|(
name|obj
argument_list|,
name|event
argument_list|)
return|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseMove
condition|)
block|{
name|QMouseEvent
modifier|*
name|mouseEvent
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|long
name|result
decl_stmt|;
name|MSG
name|msg
decl_stmt|;
name|msg
operator|.
name|message
operator|=
name|WM_NCHITTEST
expr_stmt|;
name|msg
operator|.
name|wParam
operator|=
literal|0
expr_stmt|;
name|msg
operator|.
name|lParam
operator|=
name|MAKELPARAM
argument_list|(
name|mouseEvent
operator|->
name|globalX
argument_list|()
argument_list|,
name|mouseEvent
operator|->
name|globalY
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|hwnd
operator|=
name|wizardHWND
argument_list|()
expr_stmt|;
name|winEvent
argument_list|(
operator|&
name|msg
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|msg
operator|.
name|wParam
operator|=
name|result
expr_stmt|;
name|msg
operator|.
name|message
operator|=
name|WM_NCMOUSEMOVE
expr_stmt|;
name|winEvent
argument_list|(
operator|&
name|msg
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonPress
condition|)
block|{
name|QMouseEvent
modifier|*
name|mouseEvent
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|mouseEvent
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|long
name|result
decl_stmt|;
name|MSG
name|msg
decl_stmt|;
name|msg
operator|.
name|message
operator|=
name|WM_NCHITTEST
expr_stmt|;
name|msg
operator|.
name|wParam
operator|=
literal|0
expr_stmt|;
name|msg
operator|.
name|lParam
operator|=
name|MAKELPARAM
argument_list|(
name|mouseEvent
operator|->
name|globalX
argument_list|()
argument_list|,
name|mouseEvent
operator|->
name|globalY
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|hwnd
operator|=
name|wizardHWND
argument_list|()
expr_stmt|;
name|winEvent
argument_list|(
operator|&
name|msg
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|msg
operator|.
name|wParam
operator|=
name|result
expr_stmt|;
name|msg
operator|.
name|message
operator|=
name|WM_NCLBUTTONDOWN
expr_stmt|;
name|winEvent
argument_list|(
operator|&
name|msg
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
condition|)
block|{
name|QMouseEvent
modifier|*
name|mouseEvent
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|mouseEvent
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|long
name|result
decl_stmt|;
name|MSG
name|msg
decl_stmt|;
name|msg
operator|.
name|message
operator|=
name|WM_NCHITTEST
expr_stmt|;
name|msg
operator|.
name|wParam
operator|=
literal|0
expr_stmt|;
name|msg
operator|.
name|lParam
operator|=
name|MAKELPARAM
argument_list|(
name|mouseEvent
operator|->
name|globalX
argument_list|()
argument_list|,
name|mouseEvent
operator|->
name|globalY
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|hwnd
operator|=
name|wizardHWND
argument_list|()
expr_stmt|;
name|winEvent
argument_list|(
operator|&
name|msg
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|msg
operator|.
name|wParam
operator|=
name|result
expr_stmt|;
name|msg
operator|.
name|message
operator|=
name|WM_NCLBUTTONUP
expr_stmt|;
name|winEvent
argument_list|(
operator|&
name|msg
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|// Return a HDC for the wizard along with the transformation if the
end_comment
begin_comment
comment|// wizard is a child window.
end_comment
begin_function
DECL|function|backingStoreDC
name|HDC
name|QVistaHelper
operator|::
name|backingStoreDC
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|wizard
parameter_list|,
name|QPoint
modifier|*
name|offset
parameter_list|)
block|{
name|HDC
name|hdc
init|=
cast|static_cast
argument_list|<
name|HDC
argument_list|>
argument_list|(
name|QGuiApplication
operator|::
name|platformNativeInterface
argument_list|()
operator|->
name|nativeResourceForBackingStore
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"getDC"
argument_list|)
argument_list|,
name|wizard
operator|->
name|backingStore
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|offset
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wizard
operator|->
name|windowHandle
argument_list|()
condition|)
if|if
condition|(
name|QWidget
modifier|*
name|nativeParent
init|=
name|wizard
operator|->
name|nativeParentWidget
argument_list|()
condition|)
operator|*
name|offset
operator|=
name|wizard
operator|->
name|mapTo
argument_list|(
name|nativeParent
argument_list|,
operator|*
name|offset
argument_list|)
expr_stmt|;
return|return
name|hdc
return|;
block|}
end_function
begin_function
DECL|function|wizardHWND
name|HWND
name|QVistaHelper
operator|::
name|wizardHWND
parameter_list|()
specifier|const
block|{
comment|// Obtain the HWND if the wizard is a top-level window.
comment|// Do not use winId() as this enforces native children of the parent
comment|// widget when called before show() as happens when calling setWizardStyle().
if|if
condition|(
name|QWindow
modifier|*
name|window
init|=
name|wizard
operator|->
name|windowHandle
argument_list|()
condition|)
if|if
condition|(
name|window
operator|->
name|handle
argument_list|()
condition|)
if|if
condition|(
name|void
modifier|*
name|vHwnd
init|=
name|QGuiApplication
operator|::
name|platformNativeInterface
argument_list|()
operator|->
name|nativeResourceForWindow
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"handle"
argument_list|)
argument_list|,
name|window
argument_list|)
condition|)
return|return
cast|static_cast
argument_list|<
name|HWND
argument_list|>
argument_list|(
name|vHwnd
argument_list|)
return|;
name|qWarning
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
literal|"Failed to obtain HWND for wizard."
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|drawTitleText
name|bool
name|QVistaHelper
operator|::
name|drawTitleText
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|HDC
name|hdc
parameter_list|)
block|{
name|bool
name|value
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|vistaState
argument_list|()
operator|==
name|VistaAero
condition|)
block|{
specifier|const
name|QRect
name|rectDp
init|=
name|QRect
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|*
name|QVistaHelper
operator|::
name|m_devicePixelRatio
argument_list|,
name|rect
operator|.
name|size
argument_list|()
operator|*
name|QVistaHelper
operator|::
name|m_devicePixelRatio
argument_list|)
decl_stmt|;
name|HWND
name|handle
init|=
name|QApplicationPrivate
operator|::
name|getHWNDForWidget
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
argument_list|)
decl_stmt|;
name|HANDLE
name|hTheme
init|=
name|pOpenThemeData
argument_list|(
name|handle
argument_list|,
literal|L"WINDOW"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hTheme
condition|)
return|return
literal|false
return|;
comment|// Set up a memory DC and bitmap that we'll draw into
name|HDC
name|dcMem
decl_stmt|;
name|HBITMAP
name|bmp
decl_stmt|;
name|BITMAPINFO
name|dib
decl_stmt|;
name|ZeroMemory
argument_list|(
operator|&
name|dib
argument_list|,
sizeof|sizeof
argument_list|(
name|dib
argument_list|)
argument_list|)
expr_stmt|;
name|dcMem
operator|=
name|CreateCompatibleDC
argument_list|(
name|hdc
argument_list|)
expr_stmt|;
name|dib
operator|.
name|bmiHeader
operator|.
name|biSize
operator|=
sizeof|sizeof
argument_list|(
name|BITMAPINFOHEADER
argument_list|)
expr_stmt|;
name|dib
operator|.
name|bmiHeader
operator|.
name|biWidth
operator|=
name|rectDp
operator|.
name|width
argument_list|()
expr_stmt|;
name|dib
operator|.
name|bmiHeader
operator|.
name|biHeight
operator|=
operator|-
name|rectDp
operator|.
name|height
argument_list|()
expr_stmt|;
name|dib
operator|.
name|bmiHeader
operator|.
name|biPlanes
operator|=
literal|1
expr_stmt|;
name|dib
operator|.
name|bmiHeader
operator|.
name|biBitCount
operator|=
literal|32
expr_stmt|;
name|dib
operator|.
name|bmiHeader
operator|.
name|biCompression
operator|=
name|BI_RGB
expr_stmt|;
name|bmp
operator|=
name|CreateDIBSection
argument_list|(
name|hdc
argument_list|,
operator|&
name|dib
argument_list|,
name|DIB_RGB_COLORS
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Set up the DC
specifier|const
name|LOGFONT
name|captionLogFont
init|=
name|getCaptionLogFont
argument_list|(
name|hTheme
argument_list|)
decl_stmt|;
specifier|const
name|HFONT
name|hCaptionFont
init|=
name|CreateFontIndirect
argument_list|(
operator|&
name|captionLogFont
argument_list|)
decl_stmt|;
name|HBITMAP
name|hOldBmp
init|=
operator|(
name|HBITMAP
operator|)
name|SelectObject
argument_list|(
name|dcMem
argument_list|,
operator|(
name|HGDIOBJ
operator|)
name|bmp
argument_list|)
decl_stmt|;
name|HFONT
name|hOldFont
init|=
operator|(
name|HFONT
operator|)
name|SelectObject
argument_list|(
name|dcMem
argument_list|,
operator|(
name|HGDIOBJ
operator|)
name|hCaptionFont
argument_list|)
decl_stmt|;
comment|// Draw the text!
name|WIZ_DTTOPTS
name|dto
decl_stmt|;
name|dto
operator|.
name|dwSize
operator|=
sizeof|sizeof
argument_list|(
name|WIZ_DTTOPTS
argument_list|)
expr_stmt|;
specifier|const
name|UINT
name|uFormat
init|=
name|WIZ_DT_SINGLELINE
operator||
name|WIZ_DT_CENTER
operator||
name|WIZ_DT_VCENTER
operator||
name|WIZ_DT_NOPREFIX
decl_stmt|;
name|RECT
name|rctext
init|=
block|{
literal|0
block|,
literal|0
block|,
name|rectDp
operator|.
name|width
argument_list|()
block|,
name|rectDp
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|dto
operator|.
name|dwFlags
operator|=
name|WIZ_DTT_COMPOSITED
operator||
name|WIZ_DTT_GLOWSIZE
expr_stmt|;
name|dto
operator|.
name|iGlowSize
operator|=
name|glowSize
argument_list|()
expr_stmt|;
name|pDrawThemeTextEx
argument_list|(
name|hTheme
argument_list|,
name|dcMem
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|LPCWSTR
operator|)
name|text
operator|.
name|utf16
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|uFormat
argument_list|,
operator|&
name|rctext
argument_list|,
operator|&
name|dto
argument_list|)
expr_stmt|;
name|BitBlt
argument_list|(
name|hdc
argument_list|,
name|rectDp
operator|.
name|left
argument_list|()
argument_list|,
name|rectDp
operator|.
name|top
argument_list|()
argument_list|,
name|rectDp
operator|.
name|width
argument_list|()
argument_list|,
name|rectDp
operator|.
name|height
argument_list|()
argument_list|,
name|dcMem
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SRCCOPY
argument_list|)
expr_stmt|;
name|SelectObject
argument_list|(
name|dcMem
argument_list|,
operator|(
name|HGDIOBJ
operator|)
name|hOldBmp
argument_list|)
expr_stmt|;
name|SelectObject
argument_list|(
name|dcMem
argument_list|,
operator|(
name|HGDIOBJ
operator|)
name|hOldFont
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|bmp
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|hCaptionFont
argument_list|)
expr_stmt|;
name|DeleteDC
argument_list|(
name|dcMem
argument_list|)
expr_stmt|;
comment|//ReleaseDC(hwnd, hdc);
block|}
elseif|else
if|if
condition|(
name|vistaState
argument_list|()
operator|==
name|VistaBasic
condition|)
block|{
name|painter
operator|->
name|drawText
argument_list|(
name|rect
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
end_function
begin_function
DECL|function|drawBlackRect
name|bool
name|QVistaHelper
operator|::
name|drawBlackRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|HDC
name|hdc
parameter_list|)
block|{
name|bool
name|value
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|vistaState
argument_list|()
operator|==
name|VistaAero
condition|)
block|{
comment|// Set up a memory DC and bitmap that we'll draw into
specifier|const
name|QRect
name|rectDp
init|=
name|QRect
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|*
name|QVistaHelper
operator|::
name|m_devicePixelRatio
argument_list|,
name|rect
operator|.
name|size
argument_list|()
operator|*
name|QVistaHelper
operator|::
name|m_devicePixelRatio
argument_list|)
decl_stmt|;
name|HDC
name|dcMem
decl_stmt|;
name|HBITMAP
name|bmp
decl_stmt|;
name|BITMAPINFO
name|dib
decl_stmt|;
name|ZeroMemory
argument_list|(
operator|&
name|dib
argument_list|,
sizeof|sizeof
argument_list|(
name|dib
argument_list|)
argument_list|)
expr_stmt|;
name|dcMem
operator|=
name|CreateCompatibleDC
argument_list|(
name|hdc
argument_list|)
expr_stmt|;
name|dib
operator|.
name|bmiHeader
operator|.
name|biSize
operator|=
sizeof|sizeof
argument_list|(
name|BITMAPINFOHEADER
argument_list|)
expr_stmt|;
name|dib
operator|.
name|bmiHeader
operator|.
name|biWidth
operator|=
name|rectDp
operator|.
name|width
argument_list|()
expr_stmt|;
name|dib
operator|.
name|bmiHeader
operator|.
name|biHeight
operator|=
operator|-
name|rectDp
operator|.
name|height
argument_list|()
expr_stmt|;
name|dib
operator|.
name|bmiHeader
operator|.
name|biPlanes
operator|=
literal|1
expr_stmt|;
name|dib
operator|.
name|bmiHeader
operator|.
name|biBitCount
operator|=
literal|32
expr_stmt|;
name|dib
operator|.
name|bmiHeader
operator|.
name|biCompression
operator|=
name|BI_RGB
expr_stmt|;
name|bmp
operator|=
name|CreateDIBSection
argument_list|(
name|hdc
argument_list|,
operator|&
name|dib
argument_list|,
name|DIB_RGB_COLORS
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|HBITMAP
name|hOldBmp
init|=
operator|(
name|HBITMAP
operator|)
name|SelectObject
argument_list|(
name|dcMem
argument_list|,
operator|(
name|HGDIOBJ
operator|)
name|bmp
argument_list|)
decl_stmt|;
name|BitBlt
argument_list|(
name|hdc
argument_list|,
name|rectDp
operator|.
name|left
argument_list|()
argument_list|,
name|rectDp
operator|.
name|top
argument_list|()
argument_list|,
name|rectDp
operator|.
name|width
argument_list|()
argument_list|,
name|rectDp
operator|.
name|height
argument_list|()
argument_list|,
name|dcMem
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SRCCOPY
argument_list|)
expr_stmt|;
name|SelectObject
argument_list|(
name|dcMem
argument_list|,
operator|(
name|HGDIOBJ
operator|)
name|hOldBmp
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|bmp
argument_list|)
expr_stmt|;
name|DeleteDC
argument_list|(
name|dcMem
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|||
name|_MSC_VER
operator|<
literal|1700
end_if
begin_function
DECL|function|getWindowBottomMargin
specifier|static
specifier|inline
name|int
name|getWindowBottomMargin
parameter_list|()
block|{
return|return
name|GetSystemMetrics
argument_list|(
name|SM_CYSIZEFRAME
argument_list|)
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// !_MSC_VER || _MSC_VER< 1700
end_comment
begin_comment
comment|// QTBUG-36192, GetSystemMetrics(SM_CYSIZEFRAME) returns bogus values
end_comment
begin_comment
comment|// for MSVC2012 which leads to the custom margin having no effect since
end_comment
begin_comment
comment|// that only works when removing the entire margin.
end_comment
begin_function
DECL|function|getWindowBottomMargin
specifier|static
specifier|inline
name|int
name|getWindowBottomMargin
parameter_list|()
block|{
name|RECT
name|rect
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|AdjustWindowRectEx
argument_list|(
operator|&
name|rect
argument_list|,
name|WS_POPUP
operator||
name|WS_CLIPSIBLINGS
operator||
name|WS_CLIPCHILDREN
operator||
name|WS_THICKFRAME
operator||
name|WS_DLGFRAME
argument_list|,
name|FALSE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|qAbs
argument_list|(
name|rect
operator|.
name|bottom
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// _MSC_VER>= 1700
end_comment
begin_function
DECL|function|frameSizeDp
name|int
name|QVistaHelper
operator|::
name|frameSizeDp
parameter_list|()
block|{
return|return
name|getWindowBottomMargin
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|captionSizeDp
name|int
name|QVistaHelper
operator|::
name|captionSizeDp
parameter_list|()
block|{
return|return
name|GetSystemMetrics
argument_list|(
name|SM_CYCAPTION
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|resolveSymbols
name|bool
name|QVistaHelper
operator|::
name|resolveSymbols
parameter_list|()
block|{
specifier|static
name|bool
name|tried
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|tried
condition|)
block|{
name|tried
operator|=
literal|true
expr_stmt|;
name|QSystemLibrary
name|dwmLib
argument_list|(
literal|L"dwmapi"
argument_list|)
decl_stmt|;
name|pDwmIsCompositionEnabled
operator|=
operator|(
name|PtrDwmIsCompositionEnabled
operator|)
name|dwmLib
operator|.
name|resolve
argument_list|(
literal|"DwmIsCompositionEnabled"
argument_list|)
expr_stmt|;
if|if
condition|(
name|pDwmIsCompositionEnabled
condition|)
block|{
name|pDwmDefWindowProc
operator|=
operator|(
name|PtrDwmDefWindowProc
operator|)
name|dwmLib
operator|.
name|resolve
argument_list|(
literal|"DwmDefWindowProc"
argument_list|)
expr_stmt|;
name|pDwmExtendFrameIntoClientArea
operator|=
operator|(
name|PtrDwmExtendFrameIntoClientArea
operator|)
name|dwmLib
operator|.
name|resolve
argument_list|(
literal|"DwmExtendFrameIntoClientArea"
argument_list|)
expr_stmt|;
block|}
name|QSystemLibrary
name|themeLib
argument_list|(
literal|L"uxtheme"
argument_list|)
decl_stmt|;
name|pIsAppThemed
operator|=
operator|(
name|PtrIsAppThemed
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"IsAppThemed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|pIsAppThemed
condition|)
block|{
name|pDrawThemeBackground
operator|=
operator|(
name|PtrDrawThemeBackground
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"DrawThemeBackground"
argument_list|)
expr_stmt|;
name|pGetThemePartSize
operator|=
operator|(
name|PtrGetThemePartSize
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemePartSize"
argument_list|)
expr_stmt|;
name|pGetThemeColor
operator|=
operator|(
name|PtrGetThemeColor
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeColor"
argument_list|)
expr_stmt|;
name|pIsThemeActive
operator|=
operator|(
name|PtrIsThemeActive
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"IsThemeActive"
argument_list|)
expr_stmt|;
name|pOpenThemeData
operator|=
operator|(
name|PtrOpenThemeData
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"OpenThemeData"
argument_list|)
expr_stmt|;
name|pCloseThemeData
operator|=
operator|(
name|PtrCloseThemeData
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"CloseThemeData"
argument_list|)
expr_stmt|;
name|pGetThemeSysFont
operator|=
operator|(
name|PtrGetThemeSysFont
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeSysFont"
argument_list|)
expr_stmt|;
name|pDrawThemeTextEx
operator|=
operator|(
name|PtrDrawThemeTextEx
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"DrawThemeTextEx"
argument_list|)
expr_stmt|;
name|pSetWindowThemeAttribute
operator|=
operator|(
name|PtrSetWindowThemeAttribute
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"SetWindowThemeAttribute"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|pDwmIsCompositionEnabled
operator|!=
literal|0
operator|&&
name|pDwmDefWindowProc
operator|!=
literal|0
operator|&&
name|pDwmExtendFrameIntoClientArea
operator|!=
literal|0
operator|&&
name|pIsAppThemed
operator|!=
literal|0
operator|&&
name|pDrawThemeBackground
operator|!=
literal|0
operator|&&
name|pGetThemePartSize
operator|!=
literal|0
operator|&&
name|pGetThemeColor
operator|!=
literal|0
operator|&&
name|pIsThemeActive
operator|!=
literal|0
operator|&&
name|pOpenThemeData
operator|!=
literal|0
operator|&&
name|pCloseThemeData
operator|!=
literal|0
operator|&&
name|pGetThemeSysFont
operator|!=
literal|0
operator|&&
name|pDrawThemeTextEx
operator|!=
literal|0
operator|&&
name|pSetWindowThemeAttribute
operator|!=
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|titleOffset
name|int
name|QVistaHelper
operator|::
name|titleOffset
parameter_list|()
block|{
name|int
name|iconOffset
init|=
name|wizard
operator|->
name|windowIcon
argument_list|()
operator|.
name|isNull
argument_list|()
condition|?
literal|0
else|:
name|iconSize
argument_list|()
operator|+
name|textSpacing
decl_stmt|;
return|return
name|leftMargin
argument_list|()
operator|+
name|iconOffset
return|;
block|}
end_function
begin_function
DECL|function|iconSize
name|int
name|QVistaHelper
operator|::
name|iconSize
parameter_list|()
block|{
return|return
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|16
argument_list|)
return|;
comment|// Standard Aero
block|}
end_function
begin_function
DECL|function|glowSize
name|int
name|QVistaHelper
operator|::
name|glowSize
parameter_list|()
block|{
return|return
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|10
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|topOffset
name|int
name|QVistaHelper
operator|::
name|topOffset
parameter_list|()
block|{
if|if
condition|(
name|vistaState
argument_list|()
operator|!=
name|VistaAero
condition|)
return|return
name|titleBarSize
argument_list|()
operator|+
literal|3
return|;
specifier|static
specifier|const
name|int
name|aeroOffset
init|=
name|QSysInfo
operator|::
name|WindowsVersion
operator|==
name|QSysInfo
operator|::
name|WV_WINDOWS7
condition|?
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|4
argument_list|)
else|:
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|13
argument_list|)
decl_stmt|;
return|return
name|aeroOffset
operator|+
name|titleBarSize
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STYLE_WINDOWSVISTA
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_WIZARD
end_comment
end_unit
