begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfiledialog.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FILEDIALOG
end_ifndef
begin_include
include|#
directive|include
file|<private/qfiledialog_p.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qbuffer.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|"qfiledialog_win_p.h"
end_include
begin_include
include|#
directive|include
file|"qplatformnativeinterface_qpa.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_THREAD
end_ifndef
begin_include
include|#
directive|include
file|<private/qmutexpool_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|<commdlg.h>
end_include
begin_decl_stmt
DECL|variable|qt_priv_ptr_valid
name|bool
name|qt_priv_ptr_valid
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_comment
comment|//we have to declare them here because they're not present for all SDK/compilers
end_comment
begin_decl_stmt
DECL|variable|QT_IID_IFileOpenDialog
specifier|static
specifier|const
name|IID
name|QT_IID_IFileOpenDialog
init|=
block|{
literal|0xd57c7288
block|,
literal|0xd4ad
block|,
literal|0x4768
block|,
block|{
literal|0xbe
block|,
literal|0x02
block|,
literal|0x9d
block|,
literal|0x96
block|,
literal|0x95
block|,
literal|0x32
block|,
literal|0xd9
block|,
literal|0x60
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QT_IID_IShellItem
specifier|static
specifier|const
name|IID
name|QT_IID_IShellItem
init|=
block|{
literal|0x43826d1e
block|,
literal|0xe718
block|,
literal|0x42ee
block|,
block|{
literal|0xbc
block|,
literal|0x55
block|,
literal|0xa1
block|,
literal|0xe2
block|,
literal|0x61
block|,
literal|0xc3
block|,
literal|0x7b
block|,
literal|0xfe
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QT_CLSID_FileOpenDialog
specifier|static
specifier|const
name|CLSID
name|QT_CLSID_FileOpenDialog
init|=
block|{
literal|0xdc1c5a9c
block|,
literal|0xe88a
block|,
literal|0x4dde
block|,
block|{
literal|0xa5
block|,
literal|0xa1
block|,
literal|0x60
block|,
literal|0xf8
block|,
literal|0x2a
block|,
literal|0x20
block|,
literal|0xae
block|,
literal|0xf7
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|PtrSHBrowseForFolder
typedef|typedef
name|qt_LPITEMIDLIST
function_decl|(
name|WINAPI
modifier|*
name|PtrSHBrowseForFolder
function_decl|)
parameter_list|(
name|qt_BROWSEINFO
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrSHBrowseForFolder
specifier|static
name|PtrSHBrowseForFolder
name|ptrSHBrowseForFolder
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|PtrSHGetPathFromIDList
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrSHGetPathFromIDList
function_decl|)
parameter_list|(
name|qt_LPITEMIDLIST
parameter_list|,
name|LPWSTR
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrSHGetPathFromIDList
specifier|static
name|PtrSHGetPathFromIDList
name|ptrSHGetPathFromIDList
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|PtrSHGetMalloc
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrSHGetMalloc
function_decl|)
parameter_list|(
name|LPMALLOC
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrSHGetMalloc
specifier|static
name|PtrSHGetMalloc
name|ptrSHGetMalloc
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|qt_win_resolve_libs
specifier|static
name|void
name|qt_win_resolve_libs
parameter_list|()
block|{
specifier|static
name|bool
name|triedResolve
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|triedResolve
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_THREAD
comment|// protect initialization
name|QMutexLocker
name|locker
argument_list|(
name|QMutexPool
operator|::
name|globalInstanceGet
argument_list|(
operator|&
name|triedResolve
argument_list|)
argument_list|)
decl_stmt|;
comment|// check triedResolve again, since another thread may have already
comment|// done the initialization
if|if
condition|(
name|triedResolve
condition|)
block|{
comment|// another thread did initialize the security function pointers,
comment|// so we shouldn't do it again.
return|return;
block|}
endif|#
directive|endif
name|triedResolve
operator|=
literal|true
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
name|QSystemLibrary
name|lib
argument_list|(
literal|L"shell32"
argument_list|)
decl_stmt|;
name|ptrSHBrowseForFolder
operator|=
operator|(
name|PtrSHBrowseForFolder
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"SHBrowseForFolderW"
argument_list|)
expr_stmt|;
name|ptrSHGetPathFromIDList
operator|=
operator|(
name|PtrSHGetPathFromIDList
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"SHGetPathFromIDListW"
argument_list|)
expr_stmt|;
name|ptrSHGetMalloc
operator|=
operator|(
name|PtrSHGetMalloc
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"SHGetMalloc"
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// CE stores them in a different lib and does not use unicode version
name|HINSTANCE
name|handle
init|=
name|LoadLibrary
argument_list|(
literal|L"Ceshell"
argument_list|)
decl_stmt|;
name|ptrSHBrowseForFolder
operator|=
operator|(
name|PtrSHBrowseForFolder
operator|)
name|GetProcAddress
argument_list|(
name|handle
argument_list|,
literal|L"SHBrowseForFolder"
argument_list|)
expr_stmt|;
name|ptrSHGetPathFromIDList
operator|=
operator|(
name|PtrSHGetPathFromIDList
operator|)
name|GetProcAddress
argument_list|(
name|handle
argument_list|,
literal|L"SHGetPathFromIDList"
argument_list|)
expr_stmt|;
name|ptrSHGetMalloc
operator|=
operator|(
name|PtrSHGetMalloc
operator|)
name|GetProcAddress
argument_list|(
name|handle
argument_list|,
literal|L"SHGetMalloc"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ptrSHBrowseForFolder
operator|&&
name|ptrSHGetPathFromIDList
operator|&&
name|ptrSHGetMalloc
condition|)
name|qt_priv_ptr_valid
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|qt_file_dialog_filter_reg_exp
decl_stmt|;
end_decl_stmt
begin_comment
comment|// defined in qfiledialog.cpp
end_comment
begin_function_decl
specifier|extern
name|QStringList
name|qt_make_filter_list
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|maxNameLen
specifier|const
name|int
name|maxNameLen
init|=
literal|1023
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|maxMultiLen
specifier|const
name|int
name|maxMultiLen
init|=
literal|65535
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Returns the wildcard part of a filter.
end_comment
begin_function
DECL|function|qt_win_extract_filter
specifier|static
name|QString
name|qt_win_extract_filter
parameter_list|(
specifier|const
name|QString
modifier|&
name|rawFilter
parameter_list|)
block|{
name|QString
name|result
init|=
name|rawFilter
decl_stmt|;
name|QRegExp
name|r
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qt_file_dialog_filter_reg_exp
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|r
operator|.
name|indexIn
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
name|result
operator|=
name|r
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QStringList
name|list
init|=
name|result
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|iterator
name|it
init|=
name|list
operator|.
name|begin
argument_list|()
init|;
name|it
operator|<
name|list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|*
name|it
operator|==
name|QLatin1String
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
operator|*
name|it
operator|=
name|QLatin1String
argument_list|(
literal|"*.*"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|list
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|";"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_win_make_filters_list
specifier|static
name|QStringList
name|qt_win_make_filters_list
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
block|{
name|QString
name|f
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isEmpty
argument_list|()
condition|)
name|f
operator|=
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"All Files (*.*)"
argument_list|)
expr_stmt|;
return|return
name|qt_make_filter_list
argument_list|(
name|f
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Makes a NUL-oriented Windows filter from a Qt filter.
end_comment
begin_function
DECL|function|qt_win_filter
specifier|static
name|QString
name|qt_win_filter
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|bool
name|hideFiltersDetails
parameter_list|)
block|{
name|QStringList
name|filterLst
init|=
name|qt_win_make_filters_list
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|filterLst
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QString
name|winfilters
decl_stmt|;
name|QRegExp
name|r
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qt_file_dialog_filter_reg_exp
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|filterLst
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|subfilter
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
operator|!
name|subfilter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|hideFiltersDetails
condition|)
block|{
name|int
name|index
init|=
name|r
operator|.
name|indexIn
argument_list|(
name|subfilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
name|winfilters
operator|+=
name|r
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|winfilters
operator|+=
name|subfilter
expr_stmt|;
block|}
name|winfilters
operator|+=
name|QChar
argument_list|()
expr_stmt|;
name|winfilters
operator|+=
name|qt_win_extract_filter
argument_list|(
name|subfilter
argument_list|)
expr_stmt|;
name|winfilters
operator|+=
name|QChar
argument_list|()
expr_stmt|;
block|}
block|}
name|winfilters
operator|+=
name|QChar
argument_list|()
expr_stmt|;
return|return
name|winfilters
return|;
block|}
end_function
begin_function
DECL|function|qt_win_selected_filter
specifier|static
name|QString
name|qt_win_selected_filter
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|DWORD
name|idx
parameter_list|)
block|{
return|return
name|qt_win_make_filters_list
argument_list|(
name|filter
argument_list|)
operator|.
name|at
argument_list|(
operator|(
name|int
operator|)
name|idx
operator|-
literal|1
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|tFilters
DECL|variable|tTitle
DECL|variable|tInitDir
specifier|static
name|QString
name|tFilters
decl_stmt|,
name|tTitle
decl_stmt|,
name|tInitDir
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_win_make_OFN
specifier|static
name|OPENFILENAME
modifier|*
name|qt_win_make_OFN
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|initialSelection
parameter_list|,
specifier|const
name|QString
modifier|&
name|initialDirectory
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|filters
parameter_list|,
name|QFileDialog
operator|::
name|FileMode
name|mode
parameter_list|,
name|QFileDialog
operator|::
name|Options
name|options
parameter_list|)
block|{
if|if
condition|(
name|parent
condition|)
name|parent
operator|=
name|parent
operator|->
name|window
argument_list|()
expr_stmt|;
else|else
name|parent
operator|=
name|QApplication
operator|::
name|activeWindow
argument_list|()
expr_stmt|;
name|tInitDir
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|initialDirectory
argument_list|)
expr_stmt|;
name|tFilters
operator|=
name|filters
expr_stmt|;
name|tTitle
operator|=
name|title
expr_stmt|;
name|QString
name|initSel
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|initialSelection
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|initSel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|initSel
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'<'
argument_list|)
argument_list|)
expr_stmt|;
name|initSel
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'>'
argument_list|)
argument_list|)
expr_stmt|;
name|initSel
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
argument_list|)
expr_stmt|;
name|initSel
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'|'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|maxLen
init|=
name|mode
operator|==
name|QFileDialog
operator|::
name|ExistingFiles
condition|?
name|maxMultiLen
else|:
name|maxNameLen
decl_stmt|;
name|wchar_t
modifier|*
name|tInitSel
init|=
operator|new
name|wchar_t
index|[
name|maxLen
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|initSel
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|initSel
operator|.
name|length
argument_list|()
operator|<=
name|maxLen
condition|)
name|memcpy
argument_list|(
name|tInitSel
argument_list|,
name|initSel
operator|.
name|utf16
argument_list|()
argument_list|,
operator|(
name|initSel
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|tInitSel
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|OPENFILENAME
modifier|*
name|ofn
init|=
operator|new
name|OPENFILENAME
decl_stmt|;
name|memset
argument_list|(
name|ofn
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|OPENFILENAME
argument_list|)
argument_list|)
expr_stmt|;
name|ofn
operator|->
name|lStructSize
operator|=
sizeof|sizeof
argument_list|(
name|OPENFILENAME
argument_list|)
expr_stmt|;
name|ofn
operator|->
name|hwndOwner
operator|=
name|QApplicationPrivate
operator|::
name|getHWNDForWidget
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|ofn
operator|->
name|lpstrFilter
operator|=
operator|(
name|wchar_t
operator|*
operator|)
name|tFilters
operator|.
name|utf16
argument_list|()
expr_stmt|;
name|ofn
operator|->
name|lpstrFile
operator|=
name|tInitSel
expr_stmt|;
name|ofn
operator|->
name|nMaxFile
operator|=
name|maxLen
expr_stmt|;
name|ofn
operator|->
name|lpstrInitialDir
operator|=
operator|(
name|wchar_t
operator|*
operator|)
name|tInitDir
operator|.
name|utf16
argument_list|()
expr_stmt|;
name|ofn
operator|->
name|lpstrTitle
operator|=
operator|(
name|wchar_t
operator|*
operator|)
name|tTitle
operator|.
name|utf16
argument_list|()
expr_stmt|;
name|ofn
operator|->
name|Flags
operator|=
operator|(
name|OFN_NOCHANGEDIR
operator||
name|OFN_HIDEREADONLY
operator||
name|OFN_EXPLORER
operator||
name|OFN_PATHMUSTEXIST
operator|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|QFileDialog
operator|::
name|ExistingFile
operator|||
name|mode
operator|==
name|QFileDialog
operator|::
name|ExistingFiles
condition|)
name|ofn
operator|->
name|Flags
operator||=
operator|(
name|OFN_FILEMUSTEXIST
operator|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|QFileDialog
operator|::
name|ExistingFiles
condition|)
name|ofn
operator|->
name|Flags
operator||=
operator|(
name|OFN_ALLOWMULTISELECT
operator|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|options
operator|&
name|QFileDialog
operator|::
name|DontConfirmOverwrite
operator|)
condition|)
name|ofn
operator|->
name|Flags
operator||=
name|OFN_OVERWRITEPROMPT
expr_stmt|;
return|return
name|ofn
return|;
block|}
end_function
begin_function
DECL|function|qt_win_clean_up_OFN
specifier|static
name|void
name|qt_win_clean_up_OFN
parameter_list|(
name|OPENFILENAME
modifier|*
modifier|*
name|ofn
parameter_list|)
block|{
operator|delete
index|[]
operator|(
operator|*
name|ofn
operator|)
operator|->
name|lpstrFile
expr_stmt|;
operator|delete
operator|*
name|ofn
expr_stmt|;
operator|*
name|ofn
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function_decl
specifier|extern
name|void
name|qt_win_eatMouseMove
parameter_list|()
function_decl|;
end_function_decl
begin_function
DECL|function|qt_win_get_open_file_name
name|QString
name|qt_win_get_open_file_name
parameter_list|(
specifier|const
name|QFileDialogArgs
modifier|&
name|args
parameter_list|,
name|QString
modifier|*
name|initialDirectory
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|QString
name|isel
init|=
name|args
operator|.
name|selection
decl_stmt|;
if|if
condition|(
name|initialDirectory
operator|&&
name|initialDirectory
operator|->
name|left
argument_list|(
literal|5
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"file:"
argument_list|)
condition|)
name|initialDirectory
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
operator|*
name|initialDirectory
argument_list|)
decl_stmt|;
if|if
condition|(
name|initialDirectory
operator|&&
operator|!
name|fi
operator|.
name|isDir
argument_list|()
condition|)
block|{
operator|*
name|initialDirectory
operator|=
name|fi
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
if|if
condition|(
name|isel
operator|.
name|isEmpty
argument_list|()
condition|)
name|isel
operator|=
name|fi
operator|.
name|fileName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fi
operator|.
name|exists
argument_list|()
condition|)
operator|*
name|initialDirectory
operator|=
name|QDir
operator|::
name|homePath
argument_list|()
expr_stmt|;
name|DWORD
name|selFilIdx
init|=
literal|0
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|selectedFilter
condition|)
block|{
name|QStringList
name|filterLst
init|=
name|qt_win_make_filters_list
argument_list|(
name|args
operator|.
name|filter
argument_list|)
decl_stmt|;
name|idx
operator|=
name|filterLst
operator|.
name|indexOf
argument_list|(
operator|*
name|selectedFilter
argument_list|)
expr_stmt|;
block|}
name|QDialog
name|modal_widget
decl_stmt|;
name|modal_widget
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoChildEventsForParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modal_widget
operator|.
name|setParent
argument_list|(
name|args
operator|.
name|parent
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|enterModal
argument_list|(
operator|&
name|modal_widget
argument_list|)
expr_stmt|;
name|bool
name|hideFiltersDetails
init|=
name|args
operator|.
name|options
operator|&
name|QFileDialog
operator|::
name|HideNameFilterDetails
decl_stmt|;
name|OPENFILENAME
modifier|*
name|ofn
init|=
name|qt_win_make_OFN
argument_list|(
name|args
operator|.
name|parent
argument_list|,
name|args
operator|.
name|selection
argument_list|,
name|args
operator|.
name|directory
argument_list|,
name|args
operator|.
name|caption
argument_list|,
name|qt_win_filter
argument_list|(
name|args
operator|.
name|filter
argument_list|,
name|hideFiltersDetails
argument_list|)
argument_list|,
name|QFileDialog
operator|::
name|ExistingFile
argument_list|,
name|args
operator|.
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
condition|)
name|ofn
operator|->
name|nFilterIndex
operator|=
name|idx
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|GetOpenFileName
argument_list|(
name|ofn
argument_list|)
condition|)
block|{
name|result
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|ofn
operator|->
name|lpstrFile
argument_list|)
expr_stmt|;
name|selFilIdx
operator|=
name|ofn
operator|->
name|nFilterIndex
expr_stmt|;
block|}
name|qt_win_clean_up_OFN
argument_list|(
operator|&
name|ofn
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|leaveModal
argument_list|(
operator|&
name|modal_widget
argument_list|)
expr_stmt|;
name|qt_win_eatMouseMove
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|result
return|;
name|fi
operator|=
name|result
expr_stmt|;
operator|*
name|initialDirectory
operator|=
name|fi
operator|.
name|path
argument_list|()
expr_stmt|;
if|if
condition|(
name|selectedFilter
condition|)
operator|*
name|selectedFilter
operator|=
name|qt_win_selected_filter
argument_list|(
name|args
operator|.
name|filter
argument_list|,
name|selFilIdx
argument_list|)
expr_stmt|;
return|return
name|fi
operator|.
name|absoluteFilePath
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qt_win_get_save_file_name
name|QString
name|qt_win_get_save_file_name
parameter_list|(
specifier|const
name|QFileDialogArgs
modifier|&
name|args
parameter_list|,
name|QString
modifier|*
name|initialDirectory
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|QString
name|isel
init|=
name|args
operator|.
name|selection
decl_stmt|;
if|if
condition|(
name|initialDirectory
operator|&&
name|initialDirectory
operator|->
name|left
argument_list|(
literal|5
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"file:"
argument_list|)
condition|)
name|initialDirectory
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
operator|*
name|initialDirectory
argument_list|)
decl_stmt|;
if|if
condition|(
name|initialDirectory
operator|&&
operator|!
name|fi
operator|.
name|isDir
argument_list|()
condition|)
block|{
operator|*
name|initialDirectory
operator|=
name|fi
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
if|if
condition|(
name|isel
operator|.
name|isEmpty
argument_list|()
condition|)
name|isel
operator|=
name|fi
operator|.
name|fileName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fi
operator|.
name|exists
argument_list|()
condition|)
operator|*
name|initialDirectory
operator|=
name|QDir
operator|::
name|homePath
argument_list|()
expr_stmt|;
name|DWORD
name|selFilIdx
init|=
literal|0
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|selectedFilter
condition|)
block|{
name|QStringList
name|filterLst
init|=
name|qt_win_make_filters_list
argument_list|(
name|args
operator|.
name|filter
argument_list|)
decl_stmt|;
name|idx
operator|=
name|filterLst
operator|.
name|indexOf
argument_list|(
operator|*
name|selectedFilter
argument_list|)
expr_stmt|;
block|}
name|QDialog
name|modal_widget
decl_stmt|;
name|modal_widget
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoChildEventsForParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modal_widget
operator|.
name|setParent
argument_list|(
name|args
operator|.
name|parent
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|enterModal
argument_list|(
operator|&
name|modal_widget
argument_list|)
expr_stmt|;
name|bool
name|hideFiltersDetails
init|=
name|args
operator|.
name|options
operator|&
name|QFileDialog
operator|::
name|HideNameFilterDetails
decl_stmt|;
comment|// This block is used below for the lpstrDefExt member.
comment|// Note that the current MSDN docs document this member wrong.
comment|// It should rather be documented as "the default extension if no extension was given and if the
comment|// current filter does not have a extension (e.g (*)). If the current filter have an extension, use
comment|// the extension of the current filter"
name|QString
name|defaultSaveExt
decl_stmt|;
if|if
condition|(
name|selectedFilter
operator|&&
operator|!
name|selectedFilter
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
name|defaultSaveExt
operator|=
name|qt_win_extract_filter
argument_list|(
operator|*
name|selectedFilter
argument_list|)
expr_stmt|;
comment|// make sure we only have the extension
name|int
name|firstDot
init|=
name|defaultSaveExt
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstDot
operator|!=
operator|-
literal|1
condition|)
block|{
name|defaultSaveExt
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|firstDot
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|defaultSaveExt
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|OPENFILENAME
modifier|*
name|ofn
init|=
name|qt_win_make_OFN
argument_list|(
name|args
operator|.
name|parent
argument_list|,
name|args
operator|.
name|selection
argument_list|,
name|args
operator|.
name|directory
argument_list|,
name|args
operator|.
name|caption
argument_list|,
name|qt_win_filter
argument_list|(
name|args
operator|.
name|filter
argument_list|,
name|hideFiltersDetails
argument_list|)
argument_list|,
name|QFileDialog
operator|::
name|AnyFile
argument_list|,
name|args
operator|.
name|options
argument_list|)
decl_stmt|;
name|ofn
operator|->
name|lpstrDefExt
operator|=
operator|(
name|wchar_t
operator|*
operator|)
name|defaultSaveExt
operator|.
name|utf16
argument_list|()
expr_stmt|;
if|if
condition|(
name|idx
condition|)
name|ofn
operator|->
name|nFilterIndex
operator|=
name|idx
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|GetSaveFileName
argument_list|(
name|ofn
argument_list|)
condition|)
block|{
name|result
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|ofn
operator|->
name|lpstrFile
argument_list|)
expr_stmt|;
name|selFilIdx
operator|=
name|ofn
operator|->
name|nFilterIndex
expr_stmt|;
block|}
name|qt_win_clean_up_OFN
argument_list|(
operator|&
name|ofn
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
name|int
name|semIndex
init|=
name|result
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|semIndex
operator|>=
literal|0
condition|)
name|result
operator|=
name|result
operator|.
name|left
argument_list|(
name|semIndex
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QApplicationPrivate
operator|::
name|leaveModal
argument_list|(
operator|&
name|modal_widget
argument_list|)
expr_stmt|;
name|qt_win_eatMouseMove
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|result
return|;
name|fi
operator|=
name|result
expr_stmt|;
operator|*
name|initialDirectory
operator|=
name|fi
operator|.
name|path
argument_list|()
expr_stmt|;
if|if
condition|(
name|selectedFilter
condition|)
operator|*
name|selectedFilter
operator|=
name|qt_win_selected_filter
argument_list|(
name|args
operator|.
name|filter
argument_list|,
name|selFilIdx
argument_list|)
expr_stmt|;
return|return
name|fi
operator|.
name|absoluteFilePath
argument_list|()
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_WS_WINCE
end_ifndef
begin_typedef
DECL|typedef|PtrSHCreateItemFromParsingName
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrSHCreateItemFromParsingName
function_decl|)
parameter_list|(
name|PCWSTR
name|pszPath
parameter_list|,
name|IBindCtx
modifier|*
name|pbc
parameter_list|,
name|REFIID
name|riid
parameter_list|,
name|void
modifier|*
modifier|*
name|ppv
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|pSHCreateItemFromParsingName
specifier|static
name|PtrSHCreateItemFromParsingName
name|pSHCreateItemFromParsingName
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_win_set_IFileDialogOptions
specifier|static
name|bool
name|qt_win_set_IFileDialogOptions
parameter_list|(
name|IFileDialog
modifier|*
name|pfd
parameter_list|,
specifier|const
name|QString
modifier|&
name|initialSelection
parameter_list|,
specifier|const
name|QString
modifier|&
name|initialDirectory
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|filterLst
parameter_list|,
name|QFileDialog
operator|::
name|FileMode
name|mode
parameter_list|,
name|QFileDialog
operator|::
name|Options
name|options
parameter_list|)
block|{
if|if
condition|(
operator|!
name|pSHCreateItemFromParsingName
condition|)
block|{
comment|// This function is available only in Vista& above.
name|QSystemLibrary
name|shellLib
argument_list|(
name|QLatin1String
argument_list|(
literal|"Shell32"
argument_list|)
argument_list|)
decl_stmt|;
name|pSHCreateItemFromParsingName
operator|=
operator|(
name|PtrSHCreateItemFromParsingName
operator|)
name|shellLib
operator|.
name|resolve
argument_list|(
literal|"SHCreateItemFromParsingName"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pSHCreateItemFromParsingName
condition|)
return|return
literal|false
return|;
block|}
name|HRESULT
name|hr
decl_stmt|;
name|QString
name|winfilters
decl_stmt|;
name|int
name|numFilters
init|=
literal|0
decl_stmt|;
name|quint32
name|currentOffset
init|=
literal|0
decl_stmt|;
name|QList
argument_list|<
name|quint32
argument_list|>
name|offsets
decl_stmt|;
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|filterLst
operator|.
name|begin
argument_list|()
decl_stmt|;
comment|// Create the native filter string and save offset to each entry.
for|for
control|(
init|;
name|it
operator|!=
name|filterLst
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|subfilter
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
operator|!
name|subfilter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|offsets
operator|<<
name|currentOffset
expr_stmt|;
comment|//Here the COMMON_ITEM_DIALOG API always add the details for the filter (e.g. *.txt)
comment|//so we don't need to handle the flag HideNameFilterDetails.
name|winfilters
operator|+=
name|subfilter
expr_stmt|;
comment|// The name of the filter.
name|winfilters
operator|+=
name|QChar
argument_list|()
expr_stmt|;
name|currentOffset
operator|+=
name|subfilter
operator|.
name|size
argument_list|()
operator|+
literal|1
expr_stmt|;
name|offsets
operator|<<
name|currentOffset
expr_stmt|;
name|QString
name|spec
init|=
name|qt_win_extract_filter
argument_list|(
name|subfilter
argument_list|)
decl_stmt|;
name|winfilters
operator|+=
name|spec
expr_stmt|;
comment|// The actual filter spec.
name|winfilters
operator|+=
name|QChar
argument_list|()
expr_stmt|;
name|currentOffset
operator|+=
name|spec
operator|.
name|size
argument_list|()
operator|+
literal|1
expr_stmt|;
name|numFilters
operator|++
expr_stmt|;
block|}
block|}
comment|// Add the filters to the file dialog.
if|if
condition|(
name|numFilters
condition|)
block|{
name|wchar_t
modifier|*
name|szData
init|=
operator|(
name|wchar_t
operator|*
operator|)
name|winfilters
operator|.
name|utf16
argument_list|()
decl_stmt|;
name|qt_COMDLG_FILTERSPEC
modifier|*
name|filterSpec
init|=
operator|new
name|qt_COMDLG_FILTERSPEC
index|[
name|numFilters
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFilters
condition|;
name|i
operator|++
control|)
block|{
name|filterSpec
index|[
name|i
index|]
operator|.
name|pszName
operator|=
name|szData
operator|+
name|offsets
index|[
name|i
operator|*
literal|2
index|]
expr_stmt|;
name|filterSpec
index|[
name|i
index|]
operator|.
name|pszSpec
operator|=
name|szData
operator|+
name|offsets
index|[
operator|(
name|i
operator|*
literal|2
operator|)
operator|+
literal|1
index|]
expr_stmt|;
block|}
name|hr
operator|=
name|pfd
operator|->
name|SetFileTypes
argument_list|(
name|numFilters
argument_list|,
name|filterSpec
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|filterSpec
expr_stmt|;
block|}
comment|// Set the starting folder.
name|tInitDir
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|initialDirectory
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tInitDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|IShellItem
modifier|*
name|psiDefaultFolder
decl_stmt|;
name|hr
operator|=
name|pSHCreateItemFromParsingName
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|tInitDir
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|QT_IID_IShellItem
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|psiDefaultFolder
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|hr
operator|=
name|pfd
operator|->
name|SetFolder
argument_list|(
name|psiDefaultFolder
argument_list|)
expr_stmt|;
name|psiDefaultFolder
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Set the currently selected file.
name|QString
name|initSel
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|initialSelection
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|initSel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|initSel
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'<'
argument_list|)
argument_list|)
expr_stmt|;
name|initSel
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'>'
argument_list|)
argument_list|)
expr_stmt|;
name|initSel
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
argument_list|)
expr_stmt|;
name|initSel
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'|'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|initSel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hr
operator|=
name|pfd
operator|->
name|SetFileName
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|initSel
operator|.
name|utf16
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Set the title for the file dialog.
if|if
condition|(
operator|!
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hr
operator|=
name|pfd
operator|->
name|SetTitle
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|title
operator|.
name|utf16
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Set other flags for the dialog.
name|DWORD
name|newOptions
decl_stmt|;
name|hr
operator|=
name|pfd
operator|->
name|GetOptions
argument_list|(
operator|&
name|newOptions
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|newOptions
operator||=
name|FOS_NOCHANGEDIR
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|QFileDialog
operator|::
name|ExistingFile
operator|||
name|mode
operator|==
name|QFileDialog
operator|::
name|ExistingFiles
condition|)
name|newOptions
operator||=
operator|(
name|FOS_FILEMUSTEXIST
operator||
name|FOS_PATHMUSTEXIST
operator|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|QFileDialog
operator|::
name|ExistingFiles
condition|)
name|newOptions
operator||=
name|FOS_ALLOWMULTISELECT
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|options
operator|&
name|QFileDialog
operator|::
name|DontConfirmOverwrite
operator|)
condition|)
name|newOptions
operator||=
name|FOS_OVERWRITEPROMPT
expr_stmt|;
name|hr
operator|=
name|pfd
operator|->
name|SetOptions
argument_list|(
name|newOptions
argument_list|)
expr_stmt|;
block|}
return|return
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_win_CID_get_open_file_names
specifier|static
name|QStringList
name|qt_win_CID_get_open_file_names
parameter_list|(
specifier|const
name|QFileDialogArgs
modifier|&
name|args
parameter_list|,
name|QString
modifier|*
name|initialDirectory
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|filterList
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|,
name|int
name|selectedFilterIndex
parameter_list|)
block|{
name|QStringList
name|result
decl_stmt|;
name|QDialog
name|modal_widget
decl_stmt|;
name|modal_widget
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoChildEventsForParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modal_widget
operator|.
name|setParent
argument_list|(
name|args
operator|.
name|parent
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|enterModal
argument_list|(
operator|&
name|modal_widget
argument_list|)
expr_stmt|;
comment|// Multiple selection is allowed only in IFileOpenDialog.
name|IFileOpenDialog
modifier|*
name|pfd
init|=
literal|0
decl_stmt|;
name|HRESULT
name|hr
init|=
name|CoCreateInstance
argument_list|(
name|QT_CLSID_FileOpenDialog
argument_list|,
name|NULL
argument_list|,
name|CLSCTX_INPROC_SERVER
argument_list|,
name|QT_IID_IFileOpenDialog
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|pfd
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qt_win_set_IFileDialogOptions
argument_list|(
name|pfd
argument_list|,
name|args
operator|.
name|selection
argument_list|,
name|args
operator|.
name|directory
argument_list|,
name|args
operator|.
name|caption
argument_list|,
name|filterList
argument_list|,
name|QFileDialog
operator|::
name|ExistingFiles
argument_list|,
name|args
operator|.
name|options
argument_list|)
expr_stmt|;
comment|// Set the currently selected filter (one-based index).
name|hr
operator|=
name|pfd
operator|->
name|SetFileTypeIndex
argument_list|(
name|selectedFilterIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|parentWindow
init|=
name|args
operator|.
name|parent
decl_stmt|;
if|if
condition|(
name|parentWindow
condition|)
name|parentWindow
operator|=
name|parentWindow
operator|->
name|window
argument_list|()
expr_stmt|;
else|else
name|parentWindow
operator|=
name|QApplication
operator|::
name|activeWindow
argument_list|()
expr_stmt|;
comment|// Show the file dialog.
name|hr
operator|=
name|pfd
operator|->
name|Show
argument_list|(
name|QApplicationPrivate
operator|::
name|getHWNDForWidget
argument_list|(
name|parentWindow
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
comment|// Retrieve the results.
name|IShellItemArray
modifier|*
name|psiaResults
decl_stmt|;
name|hr
operator|=
name|pfd
operator|->
name|GetResults
argument_list|(
operator|&
name|psiaResults
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|DWORD
name|numItems
init|=
literal|0
decl_stmt|;
name|psiaResults
operator|->
name|GetCount
argument_list|(
operator|&
name|numItems
argument_list|)
expr_stmt|;
for|for
control|(
name|DWORD
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numItems
condition|;
name|i
operator|++
control|)
block|{
name|IShellItem
modifier|*
name|psi
init|=
literal|0
decl_stmt|;
name|hr
operator|=
name|psiaResults
operator|->
name|GetItemAt
argument_list|(
name|i
argument_list|,
operator|&
name|psi
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
comment|// Retrieve the file name from shell item.
name|wchar_t
modifier|*
name|pszPath
decl_stmt|;
name|hr
operator|=
name|psi
operator|->
name|GetDisplayName
argument_list|(
name|SIGDN_FILESYSPATH
argument_list|,
operator|&
name|pszPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|QString
name|fileName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|pszPath
argument_list|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|CoTaskMemFree
argument_list|(
name|pszPath
argument_list|)
expr_stmt|;
block|}
name|psi
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|// Free the current item.
block|}
block|}
name|psiaResults
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|// Free the array of items.
block|}
block|}
block|}
name|QApplicationPrivate
operator|::
name|leaveModal
argument_list|(
operator|&
name|modal_widget
argument_list|)
expr_stmt|;
name|qt_win_eatMouseMove
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Retrieve the current folder name.
name|IShellItem
modifier|*
name|psi
init|=
literal|0
decl_stmt|;
name|hr
operator|=
name|pfd
operator|->
name|GetFolder
argument_list|(
operator|&
name|psi
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|wchar_t
modifier|*
name|pszPath
decl_stmt|;
name|hr
operator|=
name|psi
operator|->
name|GetDisplayName
argument_list|(
name|SIGDN_FILESYSPATH
argument_list|,
operator|&
name|pszPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
operator|*
name|initialDirectory
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|pszPath
argument_list|)
expr_stmt|;
name|CoTaskMemFree
argument_list|(
name|pszPath
argument_list|)
expr_stmt|;
block|}
name|psi
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
comment|// Retrieve the currently selected filter.
if|if
condition|(
name|selectedFilter
condition|)
block|{
name|quint32
name|filetype
init|=
literal|0
decl_stmt|;
name|hr
operator|=
name|pfd
operator|->
name|GetFileTypeIndex
argument_list|(
operator|&
name|filetype
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|&&
name|filetype
operator|&&
name|filetype
operator|<=
operator|(
name|quint32
operator|)
name|filterList
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// This is a one-based index, not zero-based.
operator|*
name|selectedFilter
operator|=
name|filterList
index|[
name|filetype
operator|-
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|pfd
condition|)
name|pfd
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|qt_win_CID_get_existing_directory
name|QString
name|qt_win_CID_get_existing_directory
parameter_list|(
specifier|const
name|QFileDialogArgs
modifier|&
name|args
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|QDialog
name|modal_widget
decl_stmt|;
name|modal_widget
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoChildEventsForParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modal_widget
operator|.
name|setParent
argument_list|(
name|args
operator|.
name|parent
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|enterModal
argument_list|(
operator|&
name|modal_widget
argument_list|)
expr_stmt|;
name|IFileOpenDialog
modifier|*
name|pfd
init|=
literal|0
decl_stmt|;
name|HRESULT
name|hr
init|=
name|CoCreateInstance
argument_list|(
name|QT_CLSID_FileOpenDialog
argument_list|,
name|NULL
argument_list|,
name|CLSCTX_INPROC_SERVER
argument_list|,
name|QT_IID_IFileOpenDialog
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|pfd
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qt_win_set_IFileDialogOptions
argument_list|(
name|pfd
argument_list|,
name|args
operator|.
name|selection
argument_list|,
name|args
operator|.
name|directory
argument_list|,
name|args
operator|.
name|caption
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QFileDialog
operator|::
name|ExistingFiles
argument_list|,
name|args
operator|.
name|options
argument_list|)
expr_stmt|;
comment|// Set the FOS_PICKFOLDERS flag
name|DWORD
name|newOptions
decl_stmt|;
name|hr
operator|=
name|pfd
operator|->
name|GetOptions
argument_list|(
operator|&
name|newOptions
argument_list|)
expr_stmt|;
name|newOptions
operator||=
operator|(
name|FOS_PICKFOLDERS
operator||
name|FOS_FORCEFILESYSTEM
operator|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|&&
name|SUCCEEDED
argument_list|(
operator|(
name|hr
operator|=
name|pfd
operator|->
name|SetOptions
argument_list|(
name|newOptions
argument_list|)
operator|)
argument_list|)
condition|)
block|{
name|QWidget
modifier|*
name|parentWindow
init|=
name|args
operator|.
name|parent
decl_stmt|;
if|if
condition|(
name|parentWindow
condition|)
name|parentWindow
operator|=
name|parentWindow
operator|->
name|window
argument_list|()
expr_stmt|;
else|else
name|parentWindow
operator|=
name|QApplication
operator|::
name|activeWindow
argument_list|()
expr_stmt|;
comment|// Show the file dialog.
name|hr
operator|=
name|pfd
operator|->
name|Show
argument_list|(
name|QApplicationPrivate
operator|::
name|getHWNDForWidget
argument_list|(
name|parentWindow
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
comment|// Retrieve the result
name|IShellItem
modifier|*
name|psi
init|=
literal|0
decl_stmt|;
name|hr
operator|=
name|pfd
operator|->
name|GetResult
argument_list|(
operator|&
name|psi
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
comment|// Retrieve the file name from shell item.
name|wchar_t
modifier|*
name|pszPath
decl_stmt|;
name|hr
operator|=
name|psi
operator|->
name|GetDisplayName
argument_list|(
name|SIGDN_FILESYSPATH
argument_list|,
operator|&
name|pszPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|result
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|pszPath
argument_list|)
expr_stmt|;
name|CoTaskMemFree
argument_list|(
name|pszPath
argument_list|)
expr_stmt|;
block|}
name|psi
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|// Free the current item.
block|}
block|}
block|}
block|}
name|QApplicationPrivate
operator|::
name|leaveModal
argument_list|(
operator|&
name|modal_widget
argument_list|)
expr_stmt|;
name|qt_win_eatMouseMove
argument_list|()
expr_stmt|;
if|if
condition|(
name|pfd
condition|)
name|pfd
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_win_get_open_file_names
name|QStringList
name|qt_win_get_open_file_names
parameter_list|(
specifier|const
name|QFileDialogArgs
modifier|&
name|args
parameter_list|,
name|QString
modifier|*
name|initialDirectory
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|)
block|{
name|QFileInfo
name|fi
decl_stmt|;
name|QDir
name|dir
decl_stmt|;
if|if
condition|(
name|initialDirectory
operator|&&
name|initialDirectory
operator|->
name|left
argument_list|(
literal|5
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"file:"
argument_list|)
condition|)
name|initialDirectory
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fi
operator|=
name|QFileInfo
argument_list|(
operator|*
name|initialDirectory
argument_list|)
expr_stmt|;
if|if
condition|(
name|initialDirectory
operator|&&
operator|!
name|fi
operator|.
name|isDir
argument_list|()
condition|)
block|{
operator|*
name|initialDirectory
operator|=
name|fi
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fi
operator|.
name|exists
argument_list|()
condition|)
operator|*
name|initialDirectory
operator|=
name|QDir
operator|::
name|homePath
argument_list|()
expr_stmt|;
name|DWORD
name|selFilIdx
init|=
literal|0
decl_stmt|;
name|QStringList
name|filterLst
init|=
name|qt_win_make_filters_list
argument_list|(
name|args
operator|.
name|filter
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|selectedFilter
condition|)
block|{
name|idx
operator|=
name|filterLst
operator|.
name|indexOf
argument_list|(
operator|*
name|selectedFilter
argument_list|)
expr_stmt|;
block|}
comment|// Windows Vista (& above) allows users to search from file dialogs. If user selects
comment|// multiple files belonging to different folders from these search results, the
comment|// GetOpenFileName() will return only one folder name for all the files. To retrieve
comment|// the correct path for all selected files, we have to use Common Item Dialog interfaces.
ifndef|#
directive|ifndef
name|Q_WS_WINCE
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
operator|&&
name|QSysInfo
operator|::
name|WindowsVersion
operator|<
name|QSysInfo
operator|::
name|WV_NT_based
condition|)
return|return
name|qt_win_CID_get_open_file_names
argument_list|(
name|args
argument_list|,
name|initialDirectory
argument_list|,
name|filterLst
argument_list|,
name|selectedFilter
argument_list|,
name|idx
argument_list|)
return|;
endif|#
directive|endif
name|QStringList
name|result
decl_stmt|;
name|QDialog
name|modal_widget
decl_stmt|;
name|modal_widget
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoChildEventsForParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modal_widget
operator|.
name|setParent
argument_list|(
name|args
operator|.
name|parent
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|enterModal
argument_list|(
operator|&
name|modal_widget
argument_list|)
expr_stmt|;
name|bool
name|hideFiltersDetails
init|=
name|args
operator|.
name|options
operator|&
name|QFileDialog
operator|::
name|HideNameFilterDetails
decl_stmt|;
name|OPENFILENAME
modifier|*
name|ofn
init|=
name|qt_win_make_OFN
argument_list|(
name|args
operator|.
name|parent
argument_list|,
name|args
operator|.
name|selection
argument_list|,
name|args
operator|.
name|directory
argument_list|,
name|args
operator|.
name|caption
argument_list|,
name|qt_win_filter
argument_list|(
name|args
operator|.
name|filter
argument_list|,
name|hideFiltersDetails
argument_list|)
argument_list|,
name|QFileDialog
operator|::
name|ExistingFiles
argument_list|,
name|args
operator|.
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
condition|)
name|ofn
operator|->
name|nFilterIndex
operator|=
name|idx
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|GetOpenFileName
argument_list|(
name|ofn
argument_list|)
condition|)
block|{
name|QString
name|fileOrDir
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|ofn
operator|->
name|lpstrFile
argument_list|)
decl_stmt|;
name|selFilIdx
operator|=
name|ofn
operator|->
name|nFilterIndex
expr_stmt|;
name|int
name|offset
init|=
name|fileOrDir
operator|.
name|length
argument_list|()
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|ofn
operator|->
name|lpstrFile
index|[
name|offset
index|]
operator|==
literal|0
condition|)
block|{
comment|// Only one file selected; has full path
name|fi
operator|.
name|setFile
argument_list|(
name|fileOrDir
argument_list|)
expr_stmt|;
name|QString
name|res
init|=
name|fi
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|.
name|append
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Several files selected; first string is path
name|dir
operator|.
name|setPath
argument_list|(
name|fileOrDir
argument_list|)
expr_stmt|;
name|QString
name|f
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|f
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|ofn
operator|->
name|lpstrFile
operator|+
name|offset
argument_list|)
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fi
operator|.
name|setFile
argument_list|(
name|dir
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|QString
name|res
init|=
name|fi
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|.
name|append
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|f
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
name|qt_win_clean_up_OFN
argument_list|(
operator|&
name|ofn
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|leaveModal
argument_list|(
operator|&
name|modal_widget
argument_list|)
expr_stmt|;
name|qt_win_eatMouseMove
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|*
name|initialDirectory
operator|=
name|fi
operator|.
name|path
argument_list|()
expr_stmt|;
comment|// only save the path if there is a result
if|if
condition|(
name|selectedFilter
condition|)
operator|*
name|selectedFilter
operator|=
name|qt_win_selected_filter
argument_list|(
name|args
operator|.
name|filter
argument_list|,
name|selFilIdx
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|// MFC Directory Dialog. Contrib: Steve Williams (minor parts from Scott Powers)
end_comment
begin_function
DECL|function|winGetExistDirCallbackProc
specifier|static
name|int
name|__stdcall
name|winGetExistDirCallbackProc
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|UINT
name|uMsg
parameter_list|,
name|LPARAM
name|lParam
parameter_list|,
name|LPARAM
name|lpData
parameter_list|)
block|{
if|if
condition|(
name|uMsg
operator|==
name|BFFM_INITIALIZED
operator|&&
name|lpData
operator|!=
literal|0
condition|)
block|{
name|QString
modifier|*
name|initDir
init|=
operator|(
name|QString
operator|*
operator|)
operator|(
name|lpData
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|initDir
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
name|SendMessage
argument_list|(
name|hwnd
argument_list|,
name|BFFM_SETSELECTION
argument_list|,
name|TRUE
argument_list|,
name|LPARAM
argument_list|(
name|initDir
operator|->
name|utf16
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|uMsg
operator|==
name|BFFM_SELCHANGED
condition|)
block|{
name|qt_win_resolve_libs
argument_list|()
expr_stmt|;
if|if
condition|(
name|ptrSHGetPathFromIDList
condition|)
block|{
name|wchar_t
name|path
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|ptrSHGetPathFromIDList
argument_list|(
name|qt_LPITEMIDLIST
argument_list|(
name|lParam
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QString
name|tmpStr
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tmpStr
operator|.
name|isEmpty
argument_list|()
condition|)
name|SendMessage
argument_list|(
name|hwnd
argument_list|,
name|BFFM_ENABLEOK
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
else|else
name|SendMessage
argument_list|(
name|hwnd
argument_list|,
name|BFFM_ENABLEOK
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SendMessage
argument_list|(
name|hwnd
argument_list|,
name|BFFM_SETSTATUSTEXT
argument_list|,
literal|1
argument_list|,
name|LPARAM
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qt_win_get_existing_directory
name|QString
name|qt_win_get_existing_directory
parameter_list|(
specifier|const
name|QFileDialogArgs
modifier|&
name|args
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_WS_WINCE
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
operator|&&
name|QSysInfo
operator|::
name|WindowsVersion
operator|<
name|QSysInfo
operator|::
name|WV_NT_based
condition|)
return|return
name|qt_win_CID_get_existing_directory
argument_list|(
name|args
argument_list|)
return|;
endif|#
directive|endif
name|QString
name|currentDir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|QString
name|result
decl_stmt|;
name|QWidget
modifier|*
name|parent
init|=
name|args
operator|.
name|parent
decl_stmt|;
if|if
condition|(
name|parent
condition|)
name|parent
operator|=
name|parent
operator|->
name|window
argument_list|()
expr_stmt|;
else|else
name|parent
operator|=
name|QApplication
operator|::
name|activeWindow
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
condition|)
name|parent
operator|->
name|createWinId
argument_list|()
expr_stmt|;
name|QDialog
name|modal_widget
decl_stmt|;
name|modal_widget
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoChildEventsForParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modal_widget
operator|.
name|setParent
argument_list|(
name|parent
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|enterModal
argument_list|(
operator|&
name|modal_widget
argument_list|)
expr_stmt|;
name|QString
name|initDir
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|args
operator|.
name|directory
argument_list|)
decl_stmt|;
name|wchar_t
name|path
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|wchar_t
name|initPath
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|initPath
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|path
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|tTitle
operator|=
name|args
operator|.
name|caption
expr_stmt|;
name|qt_BROWSEINFO
name|bi
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|parent
operator|||
name|parent
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|bi
operator|.
name|hwndOwner
operator|=
name|QApplicationPrivate
operator|::
name|getHWNDForWidget
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|bi
operator|.
name|pidlRoot
operator|=
name|NULL
expr_stmt|;
comment|//### This does not seem to be respected? - the dialog always displays "Browse for folder"
name|bi
operator|.
name|lpszTitle
operator|=
operator|(
name|wchar_t
operator|*
operator|)
name|tTitle
operator|.
name|utf16
argument_list|()
expr_stmt|;
name|bi
operator|.
name|pszDisplayName
operator|=
name|initPath
expr_stmt|;
name|bi
operator|.
name|ulFlags
operator|=
name|BIF_RETURNONLYFSDIRS
operator||
name|BIF_STATUSTEXT
operator||
name|BIF_NEWDIALOGSTYLE
expr_stmt|;
name|bi
operator|.
name|lpfn
operator|=
name|winGetExistDirCallbackProc
expr_stmt|;
name|bi
operator|.
name|lParam
operator|=
name|LPARAM
argument_list|(
operator|&
name|initDir
argument_list|)
expr_stmt|;
name|qt_win_resolve_libs
argument_list|()
expr_stmt|;
if|if
condition|(
name|ptrSHBrowseForFolder
condition|)
block|{
name|qt_LPITEMIDLIST
name|pItemIDList
init|=
name|ptrSHBrowseForFolder
argument_list|(
operator|&
name|bi
argument_list|)
decl_stmt|;
if|if
condition|(
name|pItemIDList
condition|)
block|{
name|ptrSHGetPathFromIDList
argument_list|(
name|pItemIDList
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|IMalloc
modifier|*
name|pMalloc
decl_stmt|;
if|if
condition|(
name|ptrSHGetMalloc
argument_list|(
operator|&
name|pMalloc
argument_list|)
operator|==
name|NOERROR
condition|)
block|{
name|pMalloc
operator|->
name|Free
argument_list|(
name|pItemIDList
argument_list|)
expr_stmt|;
name|pMalloc
operator|->
name|Release
argument_list|()
expr_stmt|;
name|result
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|tTitle
operator|=
name|QString
argument_list|()
expr_stmt|;
name|QApplicationPrivate
operator|::
name|leaveModal
argument_list|(
operator|&
name|modal_widget
argument_list|)
expr_stmt|;
name|qt_win_eatMouseMove
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
