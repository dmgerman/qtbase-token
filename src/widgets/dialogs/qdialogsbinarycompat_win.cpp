begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_comment
comment|// ### Qt 5: eliminate this file
end_comment
begin_comment
comment|/*     This is evil. MSVC doesn't let us remove private symbols, nor change their     visibility; yet there are some symbols we really needed to make public, e.g.,     ~QColorDialog(), and then there were some totally needless symbols in our     header files, e.g., setSelectedAlpha(). So we define a new version of     QColorDialog& Co. with only the private symbols that we removed from the     public header files. The friends are there only to prevent potential compiler     warnings.      It would have been nicer to export the missing symbols as mangled "C" symbols     instead but unfortunately MSVC uses out-of-reach characters like @ and . in     their mangled C++ symbols. */
end_comment
begin_if
if|#
directive|if
name|QT_VERSION
operator|<
literal|0x050000
operator|&&
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
end_if
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|<QtGui/QColor>
end_include
begin_include
include|#
directive|include
file|<QtGui/QFont>
end_include
begin_class_decl
class_decl|class
name|QColorDialogPrivate
class_decl|;
end_class_decl
begin_class_decl
class_decl|class
name|QFontDialogPrivate
class_decl|;
end_class_decl
begin_class_decl
class_decl|class
name|QInputDialogPrivate
class_decl|;
end_class_decl
begin_class_decl
class_decl|class
name|QWidget
class_decl|;
end_class_decl
begin_class
DECL|class|QColorDialog
class|class
name|Q_WIDGETS_EXPORT
name|QColorDialog
block|{
private|private:
specifier|explicit
name|QColorDialog
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|bool
parameter_list|)
constructor_decl|;
name|~
name|QColorDialog
parameter_list|()
destructor_decl|;
name|void
name|setColor
parameter_list|(
specifier|const
name|QColor
modifier|&
parameter_list|)
function_decl|;
name|QColor
name|color
parameter_list|()
specifier|const
function_decl|;
name|bool
name|selectColor
parameter_list|(
specifier|const
name|QColor
modifier|&
parameter_list|)
function_decl|;
name|void
name|setSelectedAlpha
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|int
name|selectedAlpha
parameter_list|()
specifier|const
function_decl|;
friend|friend
class_decl|class
name|QColorDialogPrivate
class_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QColorDialog
name|QColorDialog
operator|::
name|QColorDialog
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|bool
parameter_list|)
block|{}
end_constructor
begin_destructor
DECL|function|~QColorDialog
name|QColorDialog
operator|::
name|~
name|QColorDialog
parameter_list|()
block|{}
end_destructor
begin_function
DECL|function|setColor
name|void
name|QColorDialog
operator|::
name|setColor
parameter_list|(
specifier|const
name|QColor
modifier|&
parameter_list|)
block|{}
end_function
begin_function
DECL|function|color
name|QColor
name|QColorDialog
operator|::
name|color
parameter_list|()
specifier|const
block|{
return|return
name|QColor
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|selectColor
name|bool
name|QColorDialog
operator|::
name|selectColor
parameter_list|(
specifier|const
name|QColor
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|setSelectedAlpha
name|void
name|QColorDialog
operator|::
name|setSelectedAlpha
parameter_list|(
name|int
parameter_list|)
block|{}
end_function
begin_function
DECL|function|selectedAlpha
name|int
name|QColorDialog
operator|::
name|selectedAlpha
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_class
DECL|class|QFontDialog
class|class
name|Q_WIDGETS_EXPORT
name|QFontDialog
block|{
private|private:
specifier|explicit
name|QFontDialog
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|bool
parameter_list|,
name|Qt
operator|::
name|WindowFlags
parameter_list|)
constructor_decl|;
name|~
name|QFontDialog
parameter_list|()
destructor_decl|;
name|QFont
name|font
parameter_list|()
specifier|const
function_decl|;
name|void
name|setFont
parameter_list|(
specifier|const
name|QFont
modifier|&
parameter_list|)
function_decl|;
name|void
name|updateFamilies
parameter_list|()
function_decl|;
name|void
name|updateStyles
parameter_list|()
function_decl|;
name|void
name|updateSizes
parameter_list|()
function_decl|;
specifier|static
name|QFont
name|getFont
parameter_list|(
name|bool
modifier|*
parameter_list|,
specifier|const
name|QFont
modifier|*
parameter_list|,
name|QWidget
modifier|*
parameter_list|)
function_decl|;
friend|friend
class_decl|class
name|QFontDialogPrivate
class_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QFontDialog
name|QFontDialog
operator|::
name|QFontDialog
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|bool
parameter_list|,
name|Qt
operator|::
name|WindowFlags
parameter_list|)
block|{}
end_constructor
begin_destructor
DECL|function|~QFontDialog
name|QFontDialog
operator|::
name|~
name|QFontDialog
parameter_list|()
block|{}
end_destructor
begin_function
DECL|function|font
name|QFont
name|QFontDialog
operator|::
name|font
parameter_list|()
specifier|const
block|{
return|return
name|QFont
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setFont
name|void
name|QFontDialog
operator|::
name|setFont
parameter_list|(
specifier|const
name|QFont
modifier|&
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|updateFamilies
name|void
name|QFontDialog
operator|::
name|updateFamilies
parameter_list|()
block|{}
end_function
begin_function
DECL|function|updateStyles
name|void
name|QFontDialog
operator|::
name|updateStyles
parameter_list|()
block|{}
end_function
begin_function
DECL|function|updateSizes
name|void
name|QFontDialog
operator|::
name|updateSizes
parameter_list|()
block|{}
end_function
begin_function
DECL|function|getFont
name|QFont
name|QFontDialog
operator|::
name|getFont
parameter_list|(
name|bool
modifier|*
parameter_list|,
specifier|const
name|QFont
modifier|*
parameter_list|,
name|QWidget
modifier|*
parameter_list|)
block|{
return|return
name|QFont
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|QInputDialog
class|class
name|Q_WIDGETS_EXPORT
name|QInputDialog
block|{
private|private:
DECL|enum|Type
DECL|enumerator|LineEdit
DECL|enumerator|SpinBox
DECL|enumerator|DoubleSpinBox
DECL|enumerator|ComboBox
DECL|enumerator|EditableComboBox
enum|enum
name|Type
block|{
name|LineEdit
block|,
name|SpinBox
block|,
name|DoubleSpinBox
block|,
name|ComboBox
block|,
name|EditableComboBox
block|}
enum|;
name|QInputDialog
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
name|QWidget
modifier|*
parameter_list|,
name|Type
parameter_list|,
name|Qt
operator|::
name|WindowFlags
parameter_list|)
constructor_decl|;
name|QInputDialog
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
name|QWidget
modifier|*
parameter_list|,
name|QWidget
modifier|*
parameter_list|,
name|Qt
operator|::
name|WindowFlags
parameter_list|)
constructor_decl|;
name|~
name|QInputDialog
parameter_list|()
destructor_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QInputDialog
name|QInputDialog
operator|::
name|QInputDialog
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
name|QWidget
modifier|*
parameter_list|,
name|Type
parameter_list|,
name|Qt
operator|::
name|WindowFlags
parameter_list|)
block|{}
end_constructor
begin_constructor
DECL|function|QInputDialog
name|QInputDialog
operator|::
name|QInputDialog
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
name|QWidget
modifier|*
parameter_list|,
name|QWidget
modifier|*
parameter_list|,
name|Qt
operator|::
name|WindowFlags
parameter_list|)
block|{}
end_constructor
begin_destructor
DECL|function|~QInputDialog
name|QInputDialog
operator|::
name|~
name|QInputDialog
parameter_list|()
block|{}
end_destructor
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
