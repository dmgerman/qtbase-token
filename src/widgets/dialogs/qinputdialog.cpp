begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qinputdialog.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_INPUTDIALOG
end_ifndef
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qcombobox.h"
end_include
begin_include
include|#
directive|include
file|"qdialogbuttonbox.h"
end_include
begin_include
include|#
directive|include
file|"qlabel.h"
end_include
begin_include
include|#
directive|include
file|"qlayout.h"
end_include
begin_include
include|#
directive|include
file|"qlineedit.h"
end_include
begin_include
include|#
directive|include
file|"qlistwidget.h"
end_include
begin_include
include|#
directive|include
file|"qpushbutton.h"
end_include
begin_include
include|#
directive|include
file|"qspinbox.h"
end_include
begin_include
include|#
directive|include
file|"qstackedlayout.h"
end_include
begin_include
include|#
directive|include
file|"qvalidator.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qdialog_p.h"
end_include
begin_function
name|QT_USE_NAMESPACE
DECL|function|signalForMember
specifier|static
specifier|const
name|char
modifier|*
name|signalForMember
parameter_list|(
specifier|const
name|char
modifier|*
name|member
parameter_list|)
block|{
specifier|static
specifier|const
name|int
name|NumCandidates
init|=
literal|4
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|candidateSignals
index|[
name|NumCandidates
index|]
init|=
block|{
name|SIGNAL
argument_list|(
name|textValueSelected
argument_list|(
name|QString
argument_list|)
argument_list|)
block|,
name|SIGNAL
argument_list|(
name|intValueSelected
argument_list|(
name|int
argument_list|)
argument_list|)
block|,
name|SIGNAL
argument_list|(
name|doubleValueSelected
argument_list|(
name|double
argument_list|)
argument_list|)
block|,
name|SIGNAL
argument_list|(
argument|accepted()
argument_list|)
block|}
decl_stmt|;
name|QByteArray
name|normalizedMember
argument_list|(
name|QMetaObject
operator|::
name|normalizedSignature
argument_list|(
name|member
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|NumCandidates
operator|-
literal|1
condition|)
block|{
comment|// sic
if|if
condition|(
name|QMetaObject
operator|::
name|checkConnectArgs
argument_list|(
name|candidateSignals
index|[
name|i
index|]
argument_list|,
name|normalizedMember
argument_list|)
condition|)
break|break;
operator|++
name|i
expr_stmt|;
block|}
return|return
name|candidateSignals
index|[
name|i
index|]
return|;
block|}
end_function
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*     These internal classes add extra validation to QSpinBox and QDoubleSpinBox by emitting     textChanged(bool) after events that may potentially change the visible text. Return or     Enter key presses are not propagated if the visible text is invalid. Instead, the visible     text is modified to the last valid value. */
end_comment
begin_class
DECL|class|QInputDialogSpinBox
class|class
name|QInputDialogSpinBox
super|:
specifier|public
name|QSpinBox
block|{
name|Q_OBJECT
public|public:
DECL|function|QInputDialogSpinBox
name|QInputDialogSpinBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSpinBox
argument_list|(
name|parent
argument_list|)
block|{
name|connect
argument_list|(
name|lineEdit
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|notifyTextChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|editingFinished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|notifyTextChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
signals|signals:
name|void
name|textChanged
parameter_list|(
name|bool
parameter_list|)
function_decl|;
private|private
name|slots
private|:
DECL|function|notifyTextChanged
name|void
name|notifyTextChanged
parameter_list|()
block|{
emit|emit
name|textChanged
argument_list|(
name|hasAcceptableInput
argument_list|()
argument_list|)
emit|;
block|}
private|private:
DECL|function|keyPressEvent
name|void
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|(
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Return
operator|||
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Enter
operator|)
operator|&&
operator|!
name|hasAcceptableInput
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_PROPERTIES
name|setProperty
argument_list|(
literal|"value"
argument_list|,
name|property
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|QSpinBox
operator|::
name|keyPressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|notifyTextChanged
argument_list|()
expr_stmt|;
block|}
DECL|function|mousePressEvent
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QSpinBox
operator|::
name|mousePressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|notifyTextChanged
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QInputDialogDoubleSpinBox
class|class
name|QInputDialogDoubleSpinBox
super|:
specifier|public
name|QDoubleSpinBox
block|{
name|Q_OBJECT
public|public:
DECL|function|QInputDialogDoubleSpinBox
name|QInputDialogDoubleSpinBox
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QDoubleSpinBox
argument_list|(
name|parent
argument_list|)
block|{
name|connect
argument_list|(
name|lineEdit
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|notifyTextChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|editingFinished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|notifyTextChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
signals|signals:
name|void
name|textChanged
parameter_list|(
name|bool
parameter_list|)
function_decl|;
private|private
name|slots
private|:
DECL|function|notifyTextChanged
name|void
name|notifyTextChanged
parameter_list|()
block|{
emit|emit
name|textChanged
argument_list|(
name|hasAcceptableInput
argument_list|()
argument_list|)
emit|;
block|}
private|private:
DECL|function|keyPressEvent
name|void
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|(
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Return
operator|||
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Enter
operator|)
operator|&&
operator|!
name|hasAcceptableInput
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_PROPERTIES
name|setProperty
argument_list|(
literal|"value"
argument_list|,
name|property
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|QDoubleSpinBox
operator|::
name|keyPressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|notifyTextChanged
argument_list|()
expr_stmt|;
block|}
DECL|function|mousePressEvent
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QDoubleSpinBox
operator|::
name|mousePressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|notifyTextChanged
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_expr_stmt
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|"qinputdialog.moc"
name|QT_END_INCLUDE_NAMESPACE
DECL|class|QInputDialogPrivate
name|class
name|QInputDialogPrivate
operator|:
specifier|public
name|QDialogPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QInputDialog
argument_list|)
specifier|public
operator|:
name|QInputDialogPrivate
argument_list|()
block|;
name|void
name|ensureLayout
argument_list|()
block|;
name|void
name|ensureLineEdit
argument_list|()
block|;
name|void
name|ensureComboBox
argument_list|()
block|;
name|void
name|ensureListView
argument_list|()
block|;
name|void
name|ensureIntSpinBox
argument_list|()
block|;
name|void
name|ensureDoubleSpinBox
argument_list|()
block|;
name|void
name|ensureEnabledConnection
argument_list|(
name|QAbstractSpinBox
operator|*
name|spinBox
argument_list|)
block|;
name|void
name|setInputWidget
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
block|;
name|void
name|chooseRightTextInputWidget
argument_list|()
block|;
name|void
name|setComboBoxText
argument_list|(
specifier|const
name|QString
operator|&
name|text
argument_list|)
block|;
name|void
name|setListViewText
argument_list|(
specifier|const
name|QString
operator|&
name|text
argument_list|)
block|;
name|QString
name|listViewText
argument_list|()
specifier|const
block|;
DECL|function|ensureLayout
name|void
name|ensureLayout
argument_list|()
specifier|const
block|{
cast|const_cast
argument_list|<
name|QInputDialogPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|ensureLayout
argument_list|()
block|; }
DECL|function|useComboBoxOrListView
name|bool
name|useComboBoxOrListView
argument_list|()
specifier|const
block|{
return|return
name|comboBox
operator|&&
name|comboBox
operator|->
name|count
argument_list|()
operator|>
literal|0
return|;
block|}
name|void
name|_q_textChanged
argument_list|(
specifier|const
name|QString
operator|&
name|text
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|_q_currentRowChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|newIndex
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|oldIndex
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|member|label
specifier|mutable
name|QLabel
modifier|*
name|label
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|buttonBox
specifier|mutable
name|QDialogButtonBox
modifier|*
name|buttonBox
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|lineEdit
specifier|mutable
name|QLineEdit
modifier|*
name|lineEdit
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|intSpinBox
specifier|mutable
name|QSpinBox
modifier|*
name|intSpinBox
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|doubleSpinBox
specifier|mutable
name|QDoubleSpinBox
modifier|*
name|doubleSpinBox
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|comboBox
specifier|mutable
name|QComboBox
modifier|*
name|comboBox
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|listView
specifier|mutable
name|QListView
modifier|*
name|listView
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|inputWidget
specifier|mutable
name|QWidget
modifier|*
name|inputWidget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|mainLayout
specifier|mutable
name|QVBoxLayout
modifier|*
name|mainLayout
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|opts
name|QInputDialog
operator|::
name|InputDialogOptions
name|opts
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|textValue
name|QString
name|textValue
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|receiverToDisconnectOnClose
name|QPointer
argument_list|<
name|QObject
argument_list|>
name|receiverToDisconnectOnClose
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|memberToDisconnectOnClose
name|QByteArray
name|memberToDisconnectOnClose
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|member|memberToDisconnectOnClose
unit|};
DECL|function|QInputDialogPrivate
name|QInputDialogPrivate
operator|::
name|QInputDialogPrivate
parameter_list|()
member_init_list|:
name|label
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|buttonBox
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|lineEdit
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|intSpinBox
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|doubleSpinBox
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|comboBox
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|listView
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|inputWidget
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mainLayout
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|ensureLayout
name|void
name|QInputDialogPrivate
operator|::
name|ensureLayout
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|mainLayout
condition|)
return|return;
if|if
condition|(
operator|!
name|inputWidget
condition|)
block|{
name|ensureLineEdit
argument_list|()
expr_stmt|;
name|inputWidget
operator|=
name|lineEdit
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|label
condition|)
name|label
operator|=
operator|new
name|QLabel
argument_list|(
name|QInputDialog
operator|::
name|tr
argument_list|(
literal|"Enter a value:"
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|label
operator|->
name|setBuddy
argument_list|(
name|inputWidget
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|label
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|buttonBox
operator|=
operator|new
name|QDialogButtonBox
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
operator||
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|buttonBox
argument_list|,
name|SIGNAL
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|buttonBox
argument_list|,
name|SIGNAL
argument_list|(
name|rejected
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mainLayout
operator|=
operator|new
name|QVBoxLayout
argument_list|(
name|q
argument_list|)
expr_stmt|;
comment|//we want to let the input dialog grow to available size on Symbian.
ifndef|#
directive|ifndef
name|Q_OS_SYMBIAN
name|mainLayout
operator|->
name|setSizeConstraint
argument_list|(
name|QLayout
operator|::
name|SetMinAndMaxSize
argument_list|)
expr_stmt|;
else|#
directive|else
name|label
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|inputWidget
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|buttonBox
argument_list|)
expr_stmt|;
name|ensureEnabledConnection
argument_list|(
name|qobject_cast
argument_list|<
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|inputWidget
argument_list|)
argument_list|)
expr_stmt|;
name|inputWidget
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureLineEdit
name|void
name|QInputDialogPrivate
operator|::
name|ensureLineEdit
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lineEdit
condition|)
block|{
name|lineEdit
operator|=
operator|new
name|QLineEdit
argument_list|(
name|q
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_IM
name|qt_widget_private
argument_list|(
name|lineEdit
argument_list|)
operator|->
name|inheritsInputMethodHints
operator|=
literal|1
expr_stmt|;
endif|#
directive|endif
name|lineEdit
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|lineEdit
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ensureComboBox
name|void
name|QInputDialogPrivate
operator|::
name|ensureComboBox
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|comboBox
condition|)
block|{
name|comboBox
operator|=
operator|new
name|QComboBox
argument_list|(
name|q
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_IM
name|qt_widget_private
argument_list|(
name|comboBox
argument_list|)
operator|->
name|inheritsInputMethodHints
operator|=
literal|1
expr_stmt|;
endif|#
directive|endif
name|comboBox
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|comboBox
argument_list|,
name|SIGNAL
argument_list|(
name|editTextChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|comboBox
argument_list|,
name|SIGNAL
argument_list|(
name|currentIndexChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ensureListView
name|void
name|QInputDialogPrivate
operator|::
name|ensureListView
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|listView
condition|)
block|{
name|ensureComboBox
argument_list|()
expr_stmt|;
name|listView
operator|=
operator|new
name|QListView
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|listView
operator|->
name|hide
argument_list|()
expr_stmt|;
name|listView
operator|->
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|NoEditTriggers
argument_list|)
expr_stmt|;
name|listView
operator|->
name|setSelectionMode
argument_list|(
name|QAbstractItemView
operator|::
name|SingleSelection
argument_list|)
expr_stmt|;
name|listView
operator|->
name|setModel
argument_list|(
name|comboBox
operator|->
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|listView
operator|->
name|setCurrentIndex
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// ###
name|QObject
operator|::
name|connect
argument_list|(
name|listView
operator|->
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|currentRowChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_currentRowChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ensureIntSpinBox
name|void
name|QInputDialogPrivate
operator|::
name|ensureIntSpinBox
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|intSpinBox
condition|)
block|{
name|intSpinBox
operator|=
operator|new
name|QInputDialogSpinBox
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|intSpinBox
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|intSpinBox
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|intValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ensureDoubleSpinBox
name|void
name|QInputDialogPrivate
operator|::
name|ensureDoubleSpinBox
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|doubleSpinBox
condition|)
block|{
name|doubleSpinBox
operator|=
operator|new
name|QInputDialogDoubleSpinBox
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|doubleSpinBox
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|doubleSpinBox
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|doubleValueChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ensureEnabledConnection
name|void
name|QInputDialogPrivate
operator|::
name|ensureEnabledConnection
parameter_list|(
name|QAbstractSpinBox
modifier|*
name|spinBox
parameter_list|)
block|{
if|if
condition|(
name|spinBox
condition|)
block|{
name|QAbstractButton
modifier|*
name|okButton
init|=
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|spinBox
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|okButton
argument_list|,
name|SLOT
argument_list|(
name|setEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|UniqueConnection
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setInputWidget
name|void
name|QInputDialogPrivate
operator|::
name|setInputWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputWidget
operator|==
name|widget
condition|)
return|return;
if|if
condition|(
name|mainLayout
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|inputWidget
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|removeWidget
argument_list|(
name|inputWidget
argument_list|)
expr_stmt|;
name|inputWidget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|mainLayout
operator|->
name|insertWidget
argument_list|(
literal|1
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
comment|// disconnect old input widget
name|QAbstractButton
modifier|*
name|okButton
init|=
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|QAbstractSpinBox
modifier|*
name|spinBox
init|=
name|qobject_cast
argument_list|<
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|inputWidget
argument_list|)
condition|)
name|QObject
operator|::
name|disconnect
argument_list|(
name|spinBox
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|okButton
argument_list|,
name|SLOT
argument_list|(
name|setEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// connect new input widget and update enabled state of OK button
name|QAbstractSpinBox
modifier|*
name|spinBox
init|=
name|qobject_cast
argument_list|<
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|ensureEnabledConnection
argument_list|(
name|spinBox
argument_list|)
expr_stmt|;
name|okButton
operator|->
name|setEnabled
argument_list|(
operator|!
name|spinBox
operator|||
name|spinBox
operator|->
name|hasAcceptableInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|inputWidget
operator|=
name|widget
expr_stmt|;
comment|// synchronize the text shown in the new text editor with the current
comment|// textValue
if|if
condition|(
name|widget
operator|==
name|lineEdit
condition|)
block|{
name|lineEdit
operator|->
name|setText
argument_list|(
name|textValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|widget
operator|==
name|comboBox
condition|)
block|{
name|setComboBoxText
argument_list|(
name|textValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|widget
operator|==
name|listView
condition|)
block|{
name|setListViewText
argument_list|(
name|textValue
argument_list|)
expr_stmt|;
name|ensureLayout
argument_list|()
expr_stmt|;
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
argument_list|)
operator|->
name|setEnabled
argument_list|(
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|chooseRightTextInputWidget
name|void
name|QInputDialogPrivate
operator|::
name|chooseRightTextInputWidget
parameter_list|()
block|{
name|QWidget
modifier|*
name|widget
decl_stmt|;
if|if
condition|(
name|useComboBoxOrListView
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|opts
operator|&
name|QInputDialog
operator|::
name|UseListViewForComboBoxItems
operator|)
operator|&&
operator|!
name|comboBox
operator|->
name|isEditable
argument_list|()
condition|)
block|{
name|ensureListView
argument_list|()
expr_stmt|;
name|widget
operator|=
name|listView
expr_stmt|;
block|}
else|else
block|{
name|widget
operator|=
name|comboBox
expr_stmt|;
block|}
block|}
else|else
block|{
name|ensureLineEdit
argument_list|()
expr_stmt|;
name|widget
operator|=
name|lineEdit
expr_stmt|;
block|}
name|setInputWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputWidget
operator|==
name|comboBox
condition|)
block|{
name|_q_textChanged
argument_list|(
name|comboBox
operator|->
name|currentText
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputWidget
operator|==
name|listView
condition|)
block|{
name|_q_textChanged
argument_list|(
name|listViewText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setComboBoxText
name|void
name|QInputDialogPrivate
operator|::
name|setComboBoxText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|int
name|index
init|=
name|comboBox
operator|->
name|findText
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|comboBox
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comboBox
operator|->
name|isEditable
argument_list|()
condition|)
block|{
name|comboBox
operator|->
name|setEditText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setListViewText
name|void
name|QInputDialogPrivate
operator|::
name|setListViewText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|int
name|row
init|=
name|comboBox
operator|->
name|findText
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|!=
operator|-
literal|1
condition|)
block|{
name|QModelIndex
name|index
argument_list|(
name|comboBox
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|,
name|QItemSelectionModel
operator|::
name|Clear
operator||
name|QItemSelectionModel
operator|::
name|SelectCurrent
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|listViewText
name|QString
name|QInputDialogPrivate
operator|::
name|listViewText
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|hasSelection
argument_list|()
condition|)
block|{
name|int
name|row
init|=
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedRows
argument_list|()
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|row
argument_list|()
decl_stmt|;
return|return
name|comboBox
operator|->
name|itemText
argument_list|(
name|row
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|QString
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|_q_textChanged
name|void
name|QInputDialogPrivate
operator|::
name|_q_textChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|textValue
operator|!=
name|text
condition|)
block|{
name|textValue
operator|=
name|text
expr_stmt|;
emit|emit
name|q
operator|->
name|textValueChanged
argument_list|(
name|text
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|_q_currentRowChanged
name|void
name|QInputDialogPrivate
operator|::
name|_q_currentRowChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|newIndex
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
comment|/* oldIndex */
parameter_list|)
block|{
name|_q_textChanged
argument_list|(
name|comboBox
operator|->
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|newIndex
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
argument_list|)
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QInputDialog     \brief The QInputDialog class provides a simple convenience dialog to get a     single value from the user.     \ingroup standard-dialogs       The input value can be a string, a number or an item from a list. A label     must be set to tell the user what they should enter.      Four static convenience functions are provided: getText(), getInt(),     getDouble(), and getItem(). All the functions can be used in a similar way,     for example:      \snippet examples/dialogs/standarddialogs/dialog.cpp 3      The \c ok variable is set to true if the user clicks \gui OK; otherwise it     is set to false.      \img inputdialogs.png Input Dialogs      The \l{dialogs/standarddialogs}{Standard Dialogs} example shows how to use     QInputDialog as well as other built-in Qt dialogs.      \sa QMessageBox, {Standard Dialogs Example} */
end_comment
begin_comment
comment|/*!     \enum QInputDialog::InputMode     \since 4.5      This enum describes the different modes of input that can be selected for     the dialog.      \value TextInput   Used to input text strings.     \value IntInput    Used to input integers.     \value DoubleInput Used to input floating point numbers with double                        precision accuracy.      \sa inputMode */
end_comment
begin_comment
comment|/*!     \since 4.5      Constructs a new input dialog with the given \a parent and window \a flags. */
end_comment
begin_constructor
DECL|function|QInputDialog
name|QInputDialog
operator|::
name|QInputDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|new
name|QInputDialogPrivate
argument_list|,
name|parent
argument_list|,
name|flags
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \since 4.5      Destroys the input dialog. */
end_comment
begin_destructor
DECL|function|~QInputDialog
name|QInputDialog
operator|::
name|~
name|QInputDialog
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \since 4.5      \property QInputDialog::inputMode      \brief the mode used for input      This property help determines which widget is used for entering input into     the dialog. */
end_comment
begin_function
DECL|function|setInputMode
name|void
name|QInputDialog
operator|::
name|setInputMode
parameter_list|(
name|InputMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|widget
decl_stmt|;
comment|/*         Warning: Some functions in QInputDialog rely on implementation details         of the code below. Look for the comments that accompany the calls to         setInputMode() throughout this file before you change the code below.     */
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|IntInput
case|:
name|d
operator|->
name|ensureIntSpinBox
argument_list|()
expr_stmt|;
name|widget
operator|=
name|d
operator|->
name|intSpinBox
expr_stmt|;
break|break;
case|case
name|DoubleInput
case|:
name|d
operator|->
name|ensureDoubleSpinBox
argument_list|()
expr_stmt|;
name|widget
operator|=
name|d
operator|->
name|doubleSpinBox
expr_stmt|;
break|break;
default|default:
name|Q_ASSERT
argument_list|(
name|mode
operator|==
name|TextInput
argument_list|)
expr_stmt|;
name|d
operator|->
name|chooseRightTextInputWidget
argument_list|()
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|setInputWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputMode
name|QInputDialog
operator|::
name|InputMode
name|QInputDialog
operator|::
name|inputMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|inputWidget
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|inputWidget
operator|==
name|d
operator|->
name|intSpinBox
condition|)
block|{
return|return
name|IntInput
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|inputWidget
operator|==
name|d
operator|->
name|doubleSpinBox
condition|)
block|{
return|return
name|DoubleInput
return|;
block|}
block|}
return|return
name|TextInput
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      \property QInputDialog::labelText      \brief the text to for the label to describe what needs to be input */
end_comment
begin_function
DECL|function|setLabelText
name|void
name|QInputDialog
operator|::
name|setLabelText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|label
condition|)
block|{
name|d
operator|->
name|label
operator|=
operator|new
name|QLabel
argument_list|(
name|text
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|label
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|d
operator|->
name|label
operator|->
name|setWordWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|labelText
name|QString
name|QInputDialog
operator|::
name|labelText
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureLayout
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|label
operator|->
name|text
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \enum QInputDialog::InputDialogOption      \since 4.5      This enum specifies various options that affect the look and feel     of an input dialog.      \value NoButtons Don't display \gui{OK} and \gui{Cancel} buttons. (Useful for "live dialogs".)     \value UseListViewForComboBoxItems Use a QListView rather than a non-editable QComboBox for                                        displaying the items set with setComboBoxItems().      \sa options, setOption(), testOption() */
end_comment
begin_comment
comment|/*!     Sets the given \a option to be enabled if \a on is true;     otherwise, clears the given \a option.      \sa options, testOption() */
end_comment
begin_function
DECL|function|setOption
name|void
name|QInputDialog
operator|::
name|setOption
parameter_list|(
name|InputDialogOption
name|option
parameter_list|,
name|bool
name|on
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|opts
operator|&
name|option
operator|)
operator|!=
operator|!
name|on
condition|)
name|setOptions
argument_list|(
name|d
operator|->
name|opts
operator|^
name|option
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the given \a option is enabled; otherwise, returns     false.      \sa options, setOption() */
end_comment
begin_function
DECL|function|testOption
name|bool
name|QInputDialog
operator|::
name|testOption
parameter_list|(
name|InputDialogOption
name|option
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|opts
operator|&
name|option
operator|)
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \property QInputDialog::options     \brief the various options that affect the look and feel of the dialog     \since 4.5      By default, all options are disabled.      \sa setOption(), testOption() */
end_comment
begin_function
DECL|function|setOptions
name|void
name|QInputDialog
operator|::
name|setOptions
parameter_list|(
name|InputDialogOptions
name|options
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|InputDialogOptions
name|changed
init|=
operator|(
name|options
operator|^
name|d
operator|->
name|opts
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|changed
condition|)
return|return;
name|d
operator|->
name|opts
operator|=
name|options
expr_stmt|;
name|d
operator|->
name|ensureLayout
argument_list|()
expr_stmt|;
if|if
condition|(
name|changed
operator|&
name|NoButtons
condition|)
name|d
operator|->
name|buttonBox
operator|->
name|setVisible
argument_list|(
operator|!
operator|(
name|options
operator|&
name|NoButtons
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|changed
operator|&
name|UseListViewForComboBoxItems
operator|)
operator|&&
name|inputMode
argument_list|()
operator|==
name|TextInput
condition|)
name|d
operator|->
name|chooseRightTextInputWidget
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|options
name|QInputDialog
operator|::
name|InputDialogOptions
name|QInputDialog
operator|::
name|options
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|opts
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      \property QInputDialog::textValue      \brief the text value for the input dialog      This property is only relevant when the input dialog is used in     TextInput mode. */
end_comment
begin_function
DECL|function|setTextValue
name|void
name|QInputDialog
operator|::
name|setTextValue
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|setInputMode
argument_list|(
name|TextInput
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|inputWidget
operator|==
name|d
operator|->
name|lineEdit
condition|)
block|{
name|d
operator|->
name|lineEdit
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|inputWidget
operator|==
name|d
operator|->
name|comboBox
condition|)
block|{
name|d
operator|->
name|setComboBoxText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|setListViewText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|textValue
name|QString
name|QInputDialog
operator|::
name|textValue
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|textValue
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      \property QInputDialog::textEchoMode      \brief the echo mode for the text value      This property is only relevant when the input dialog is used in     TextInput mode. */
end_comment
begin_function
DECL|function|setTextEchoMode
name|void
name|QInputDialog
operator|::
name|setTextEchoMode
parameter_list|(
name|QLineEdit
operator|::
name|EchoMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureLineEdit
argument_list|()
expr_stmt|;
name|d
operator|->
name|lineEdit
operator|->
name|setEchoMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textEchoMode
name|QLineEdit
operator|::
name|EchoMode
name|QInputDialog
operator|::
name|textEchoMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
block|{
return|return
name|d
operator|->
name|lineEdit
operator|->
name|echoMode
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|QLineEdit
operator|::
name|Normal
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.5      \property QInputDialog::comboBoxEditable      \brief whether or not the combo box is used in the input dialog is editable */
end_comment
begin_function
DECL|function|setComboBoxEditable
name|void
name|QInputDialog
operator|::
name|setComboBoxEditable
parameter_list|(
name|bool
name|editable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureComboBox
argument_list|()
expr_stmt|;
name|d
operator|->
name|comboBox
operator|->
name|setEditable
argument_list|(
name|editable
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputMode
argument_list|()
operator|==
name|TextInput
condition|)
name|d
operator|->
name|chooseRightTextInputWidget
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isComboBoxEditable
name|bool
name|QInputDialog
operator|::
name|isComboBoxEditable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|comboBox
condition|)
block|{
return|return
name|d
operator|->
name|comboBox
operator|->
name|isEditable
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.5      \property QInputDialog::comboBoxItems      \brief the items used in the combobox for the input dialog */
end_comment
begin_function
DECL|function|setComboBoxItems
name|void
name|QInputDialog
operator|::
name|setComboBoxItems
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|items
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureComboBox
argument_list|()
expr_stmt|;
name|d
operator|->
name|comboBox
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|comboBox
operator|->
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|comboBox
operator|->
name|addItems
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|d
operator|->
name|comboBox
operator|->
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputMode
argument_list|()
operator|==
name|TextInput
condition|)
name|d
operator|->
name|chooseRightTextInputWidget
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|comboBoxItems
name|QStringList
name|QInputDialog
operator|::
name|comboBoxItems
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
name|QStringList
name|result
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|comboBox
condition|)
block|{
specifier|const
name|int
name|count
init|=
name|d
operator|->
name|comboBox
operator|->
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|result
operator|.
name|append
argument_list|(
name|d
operator|->
name|comboBox
operator|->
name|itemText
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \property QInputDialog::intValue     \since 4.5     \brief the current integer value accepted as input      This property is only relevant when the input dialog is used in     IntInput mode. */
end_comment
begin_function
DECL|function|setIntValue
name|void
name|QInputDialog
operator|::
name|setIntValue
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|setInputMode
argument_list|(
name|IntInput
argument_list|)
expr_stmt|;
name|d
operator|->
name|intSpinBox
operator|->
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|intValue
name|int
name|QInputDialog
operator|::
name|intValue
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|intSpinBox
condition|)
block|{
return|return
name|d
operator|->
name|intSpinBox
operator|->
name|value
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QInputDialog::intMinimum     \since 4.5     \brief the minimum integer value accepted as input      This property is only relevant when the input dialog is used in     IntInput mode. */
end_comment
begin_function
DECL|function|setIntMinimum
name|void
name|QInputDialog
operator|::
name|setIntMinimum
parameter_list|(
name|int
name|min
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureIntSpinBox
argument_list|()
expr_stmt|;
name|d
operator|->
name|intSpinBox
operator|->
name|setMinimum
argument_list|(
name|min
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|intMinimum
name|int
name|QInputDialog
operator|::
name|intMinimum
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|intSpinBox
condition|)
block|{
return|return
name|d
operator|->
name|intSpinBox
operator|->
name|minimum
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QInputDialog::intMaximum     \since 4.5     \brief the maximum integer value accepted as input      This property is only relevant when the input dialog is used in     IntInput mode. */
end_comment
begin_function
DECL|function|setIntMaximum
name|void
name|QInputDialog
operator|::
name|setIntMaximum
parameter_list|(
name|int
name|max
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureIntSpinBox
argument_list|()
expr_stmt|;
name|d
operator|->
name|intSpinBox
operator|->
name|setMaximum
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|intMaximum
name|int
name|QInputDialog
operator|::
name|intMaximum
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|intSpinBox
condition|)
block|{
return|return
name|d
operator|->
name|intSpinBox
operator|->
name|maximum
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|99
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     Sets the range of integer values accepted by the dialog when used in     IntInput mode, with minimum and maximum values specified by \a min and     \a max respectively. */
end_comment
begin_function
DECL|function|setIntRange
name|void
name|QInputDialog
operator|::
name|setIntRange
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureIntSpinBox
argument_list|()
expr_stmt|;
name|d
operator|->
name|intSpinBox
operator|->
name|setRange
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QInputDialog::intStep     \since 4.5     \brief the step by which the integer value is increased and decreased      This property is only relevant when the input dialog is used in     IntInput mode. */
end_comment
begin_function
DECL|function|setIntStep
name|void
name|QInputDialog
operator|::
name|setIntStep
parameter_list|(
name|int
name|step
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureIntSpinBox
argument_list|()
expr_stmt|;
name|d
operator|->
name|intSpinBox
operator|->
name|setSingleStep
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|intStep
name|int
name|QInputDialog
operator|::
name|intStep
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|intSpinBox
condition|)
block|{
return|return
name|d
operator|->
name|intSpinBox
operator|->
name|singleStep
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QInputDialog::doubleValue     \since 4.5     \brief the current double precision floating point value accepted as input      This property is only relevant when the input dialog is used in     DoubleInput mode. */
end_comment
begin_function
DECL|function|setDoubleValue
name|void
name|QInputDialog
operator|::
name|setDoubleValue
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|setInputMode
argument_list|(
name|DoubleInput
argument_list|)
expr_stmt|;
name|d
operator|->
name|doubleSpinBox
operator|->
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doubleValue
name|double
name|QInputDialog
operator|::
name|doubleValue
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleSpinBox
condition|)
block|{
return|return
name|d
operator|->
name|doubleSpinBox
operator|->
name|value
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0.0
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QInputDialog::doubleMinimum     \since 4.5     \brief the minimum double precision floating point value accepted as input      This property is only relevant when the input dialog is used in     DoubleInput mode. */
end_comment
begin_function
DECL|function|setDoubleMinimum
name|void
name|QInputDialog
operator|::
name|setDoubleMinimum
parameter_list|(
name|double
name|min
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureDoubleSpinBox
argument_list|()
expr_stmt|;
name|d
operator|->
name|doubleSpinBox
operator|->
name|setMinimum
argument_list|(
name|min
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doubleMinimum
name|double
name|QInputDialog
operator|::
name|doubleMinimum
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleSpinBox
condition|)
block|{
return|return
name|d
operator|->
name|doubleSpinBox
operator|->
name|minimum
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0.0
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QInputDialog::doubleMaximum     \since 4.5     \brief the maximum double precision floating point value accepted as input      This property is only relevant when the input dialog is used in     DoubleInput mode. */
end_comment
begin_function
DECL|function|setDoubleMaximum
name|void
name|QInputDialog
operator|::
name|setDoubleMaximum
parameter_list|(
name|double
name|max
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureDoubleSpinBox
argument_list|()
expr_stmt|;
name|d
operator|->
name|doubleSpinBox
operator|->
name|setMaximum
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doubleMaximum
name|double
name|QInputDialog
operator|::
name|doubleMaximum
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleSpinBox
condition|)
block|{
return|return
name|d
operator|->
name|doubleSpinBox
operator|->
name|maximum
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|99.99
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     Sets the range of double precision floating point values accepted by the     dialog when used in DoubleInput mode, with minimum and maximum values     specified by \a min and \a max respectively. */
end_comment
begin_function
DECL|function|setDoubleRange
name|void
name|QInputDialog
operator|::
name|setDoubleRange
parameter_list|(
name|double
name|min
parameter_list|,
name|double
name|max
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureDoubleSpinBox
argument_list|()
expr_stmt|;
name|d
operator|->
name|doubleSpinBox
operator|->
name|setRange
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      \property QInputDialog::doubleDecimals      \brief sets the percision of the double spinbox in decimals      \sa QDoubleSpinBox::setDecimals() */
end_comment
begin_function
DECL|function|setDoubleDecimals
name|void
name|QInputDialog
operator|::
name|setDoubleDecimals
parameter_list|(
name|int
name|decimals
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureDoubleSpinBox
argument_list|()
expr_stmt|;
name|d
operator|->
name|doubleSpinBox
operator|->
name|setDecimals
argument_list|(
name|decimals
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doubleDecimals
name|int
name|QInputDialog
operator|::
name|doubleDecimals
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleSpinBox
condition|)
block|{
return|return
name|d
operator|->
name|doubleSpinBox
operator|->
name|decimals
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|2
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.5      \property QInputDialog::okButtonText      \brief the text for the button used to accept the entry in the dialog */
end_comment
begin_function
DECL|function|setOkButtonText
name|void
name|QInputDialog
operator|::
name|setOkButtonText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureLayout
argument_list|()
expr_stmt|;
name|d
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
argument_list|)
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|okButtonText
name|QString
name|QInputDialog
operator|::
name|okButtonText
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureLayout
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
argument_list|)
operator|->
name|text
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      \property QInputDialog::cancelButtonText     \brief the text for the button used to cancel the dialog */
end_comment
begin_function
DECL|function|setCancelButtonText
name|void
name|QInputDialog
operator|::
name|setCancelButtonText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureLayout
argument_list|()
expr_stmt|;
name|d
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|)
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cancelButtonText
name|QString
name|QInputDialog
operator|::
name|cancelButtonText
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureLayout
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|)
operator|->
name|text
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5     \overload      This function connects one of its signals to the slot specified by \a receiver     and \a member. The specific signal depends on the arguments that are specified     in \a member. These are:      \list       \o textValueSelected() if \a member has a QString for its first argument.       \o intValueSelected() if \a member has an int for its first argument.       \o doubleValueSelected() if \a member has a double for its first argument.       \o accepted() if \a member has NO arguments.     \endlist      The signal will be disconnected from the slot when the dialog is closed. */
end_comment
begin_function
DECL|function|open
name|void
name|QInputDialog
operator|::
name|open
parameter_list|(
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|signalForMember
argument_list|(
name|member
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|)
expr_stmt|;
name|d
operator|->
name|receiverToDisconnectOnClose
operator|=
name|receiver
expr_stmt|;
name|d
operator|->
name|memberToDisconnectOnClose
operator|=
name|member
expr_stmt|;
name|QDialog
operator|::
name|open
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|minimumSizeHint
name|QSize
name|QInputDialog
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureLayout
argument_list|()
expr_stmt|;
return|return
name|QDialog
operator|::
name|minimumSizeHint
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QInputDialog
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureLayout
argument_list|()
expr_stmt|;
return|return
name|QDialog
operator|::
name|sizeHint
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setVisible
name|void
name|QInputDialog
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QInputDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|visible
condition|)
block|{
name|d
operator|->
name|ensureLayout
argument_list|()
expr_stmt|;
name|d
operator|->
name|inputWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|inputWidget
operator|==
name|d
operator|->
name|lineEdit
condition|)
block|{
name|d
operator|->
name|lineEdit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|inputWidget
operator|==
name|d
operator|->
name|intSpinBox
condition|)
block|{
name|d
operator|->
name|intSpinBox
operator|->
name|selectAll
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|inputWidget
operator|==
name|d
operator|->
name|doubleSpinBox
condition|)
block|{
name|d
operator|->
name|doubleSpinBox
operator|->
name|selectAll
argument_list|()
expr_stmt|;
block|}
block|}
name|QDialog
operator|::
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Closes the dialog and sets its result code to \a result. If this dialog   is shown with exec(), done() causes the local event loop to finish,   and exec() to return \a result.    \sa QDialog::done() */
end_comment
begin_function
DECL|function|done
name|void
name|QInputDialog
operator|::
name|done
parameter_list|(
name|int
name|result
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QInputDialog
argument_list|)
expr_stmt|;
name|QDialog
operator|::
name|done
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|InputMode
name|mode
init|=
name|inputMode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|DoubleInput
case|:
emit|emit
name|doubleValueSelected
argument_list|(
name|doubleValue
argument_list|()
argument_list|)
emit|;
break|break;
case|case
name|IntInput
case|:
emit|emit
name|intValueSelected
argument_list|(
name|intValue
argument_list|()
argument_list|)
emit|;
break|break;
default|default:
name|Q_ASSERT
argument_list|(
name|mode
operator|==
name|TextInput
argument_list|)
expr_stmt|;
emit|emit
name|textValueSelected
argument_list|(
name|textValue
argument_list|()
argument_list|)
emit|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|receiverToDisconnectOnClose
condition|)
block|{
name|disconnect
argument_list|(
name|this
argument_list|,
name|signalForMember
argument_list|(
name|d
operator|->
name|memberToDisconnectOnClose
argument_list|)
argument_list|,
name|d
operator|->
name|receiverToDisconnectOnClose
argument_list|,
name|d
operator|->
name|memberToDisconnectOnClose
argument_list|)
expr_stmt|;
name|d
operator|->
name|receiverToDisconnectOnClose
operator|=
literal|0
expr_stmt|;
block|}
name|d
operator|->
name|memberToDisconnectOnClose
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Static convenience function to get a string from the user.      \a title is the text which is displayed in the title bar of the dialog.     \a label is the text which is shown to the user (it should say what should     be entered).     \a text is the default text which is placed in the line edit.     \a mode is the echo mode the line edit will use.     \a inputMethodHints is the input method hints that will be used in the     edit widget if an input method is active.      If \a ok is nonnull \e *\a ok will be set to true if the user pressed     \gui OK and to false if the user pressed \gui Cancel. The dialog's parent     is \a parent. The dialog will be modal and uses the specified widget     \a flags.      If the dialog is accepted, this function returns the text in the dialog's     line edit. If the dialog is rejected, a null QString is returned.      Use this static function like this:      \snippet examples/dialogs/standarddialogs/dialog.cpp 3      \warning Do not delete \a parent during the execution of the dialog. If you     want to do this, you should create the dialog yourself using one of the     QInputDialog constructors.      \sa getInt(), getDouble(), getItem() */
end_comment
begin_function
DECL|function|getText
name|QString
name|QInputDialog
operator|::
name|getText
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|label
parameter_list|,
name|QLineEdit
operator|::
name|EchoMode
name|mode
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|Qt
operator|::
name|InputMethodHints
name|inputMethodHints
parameter_list|)
block|{
name|QInputDialog
name|dialog
argument_list|(
name|parent
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setWindowTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setLabelText
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setTextValue
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setTextEchoMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setInputMethodHints
argument_list|(
name|inputMethodHints
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|dialog
operator|.
name|exec
argument_list|()
decl_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|ok
operator|=
operator|!
operator|!
name|ret
expr_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
return|return
name|dialog
operator|.
name|textValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|QString
argument_list|()
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_comment
comment|// ### Qt 5: Use only the version above.
end_comment
begin_function
DECL|function|getText
name|QString
name|QInputDialog
operator|::
name|getText
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|label
parameter_list|,
name|QLineEdit
operator|::
name|EchoMode
name|mode
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
return|return
name|getText
argument_list|(
name|parent
argument_list|,
name|title
argument_list|,
name|label
argument_list|,
name|mode
argument_list|,
name|text
argument_list|,
name|ok
argument_list|,
name|flags
argument_list|,
name|Qt
operator|::
name|ImhNone
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Static convenience function to get an integer input from the user.      \a title is the text which is displayed in the title bar of the dialog.     \a label is the text which is shown to the user (it should say what should     be entered).     \a value is the default integer which the spinbox will be set to.     \a min and \a max are the minimum and maximum values the user may choose.     \a step is the amount by which the values change as the user presses the     arrow buttons to increment or decrement the value.      If \a ok is nonnull *\a ok will be set to true if the user pressed \gui OK     and to false if the user pressed \gui Cancel. The dialog's parent is     \a parent. The dialog will be modal and uses the widget \a flags.      On success, this function returns the integer which has been entered by the     user; on failure, it returns the initial \a value.      Use this static function like this:      \snippet examples/dialogs/standarddialogs/dialog.cpp 0      \warning Do not delete \a parent during the execution of the dialog. If you     want to do this, you should create the dialog yourself using one of the     QInputDialog constructors.      \sa getText(), getDouble(), getItem() */
end_comment
begin_function
DECL|function|getInt
name|int
name|QInputDialog
operator|::
name|getInt
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|label
parameter_list|,
name|int
name|value
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|int
name|step
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
name|QInputDialog
name|dialog
argument_list|(
name|parent
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setWindowTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setLabelText
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setIntRange
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setIntValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setIntStep
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|dialog
operator|.
name|exec
argument_list|()
decl_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|ok
operator|=
operator|!
operator|!
name|ret
expr_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
return|return
name|dialog
operator|.
name|intValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     Static convenience function to get a floating point number from the user.      \a title is the text which is displayed in the title bar of the dialog.     \a label is the text which is shown to the user (it should say what should     be entered).     \a value is the default floating point number that the line edit will be     set to.     \a min and \a max are the minimum and maximum values the user may choose.     \a decimals is the maximum number of decimal places the number may have.      If \a ok is nonnull, *\a ok will be set to true if the user pressed \gui OK     and to false if the user pressed \gui Cancel. The dialog's parent is     \a parent. The dialog will be modal and uses the widget \a flags.      This function returns the floating point number which has been entered by     the user.      Use this static function like this:      \snippet examples/dialogs/standarddialogs/dialog.cpp 1      \warning Do not delete \a parent during the execution of the dialog. If you     want to do this, you should create the dialog yourself using one of the     QInputDialog constructors.      \sa getText(), getInt(), getItem() */
end_comment
begin_function
DECL|function|getDouble
name|double
name|QInputDialog
operator|::
name|getDouble
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|label
parameter_list|,
name|double
name|value
parameter_list|,
name|double
name|min
parameter_list|,
name|double
name|max
parameter_list|,
name|int
name|decimals
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
name|QInputDialog
name|dialog
argument_list|(
name|parent
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setWindowTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setLabelText
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setDoubleDecimals
argument_list|(
name|decimals
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setDoubleRange
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setDoubleValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|dialog
operator|.
name|exec
argument_list|()
decl_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|ok
operator|=
operator|!
operator|!
name|ret
expr_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
return|return
name|dialog
operator|.
name|doubleValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     Static convenience function to let the user select an item from a string     list.      \a title is the text which is displayed in the title bar of the dialog.     \a label is the text which is shown to the user (it should say what should     be entered).     \a items is the string list which is inserted into the combobox.     \a current is the number  of the item which should be the current item.     \a inputMethodHints is the input method hints that will be used if the     combobox is editable and an input method is active.      If \a editable is true the user can enter their own text; otherwise the     user may only select one of the existing items.      If \a ok is nonnull \e *\a ok will be set to true if the user pressed     \gui OK and to false if the user pressed \gui Cancel. The dialog's parent     is \a parent. The dialog will be modal and uses the widget \a flags.      This function returns the text of the current item, or if \a editable is     true, the current text of the combobox.      Use this static function like this:      \snippet examples/dialogs/standarddialogs/dialog.cpp 2      \warning Do not delete \a parent during the execution of the dialog. If you     want to do this, you should create the dialog yourself using one of the     QInputDialog constructors.      \sa getText(), getInt(), getDouble() */
end_comment
begin_function
DECL|function|getItem
name|QString
name|QInputDialog
operator|::
name|getItem
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|label
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|items
parameter_list|,
name|int
name|current
parameter_list|,
name|bool
name|editable
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|Qt
operator|::
name|InputMethodHints
name|inputMethodHints
parameter_list|)
block|{
name|QString
name|text
argument_list|(
name|items
operator|.
name|value
argument_list|(
name|current
argument_list|)
argument_list|)
decl_stmt|;
name|QInputDialog
name|dialog
argument_list|(
name|parent
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setWindowTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setLabelText
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setComboBoxItems
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setTextValue
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setComboBoxEditable
argument_list|(
name|editable
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setInputMethodHints
argument_list|(
name|inputMethodHints
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|dialog
operator|.
name|exec
argument_list|()
decl_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|ok
operator|=
operator|!
operator|!
name|ret
expr_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
return|return
name|dialog
operator|.
name|textValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|text
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_comment
comment|// ### Qt 5: Use only the version above.
end_comment
begin_function
DECL|function|getItem
name|QString
name|QInputDialog
operator|::
name|getItem
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|label
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|items
parameter_list|,
name|int
name|current
parameter_list|,
name|bool
name|editable
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
return|return
name|getItem
argument_list|(
name|parent
argument_list|,
name|title
argument_list|,
name|label
argument_list|,
name|items
argument_list|,
name|current
argument_list|,
name|editable
argument_list|,
name|ok
argument_list|,
name|flags
argument_list|,
name|Qt
operator|::
name|ImhNone
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      Use getInt() instead. */
end_comment
begin_function
DECL|function|getInteger
name|int
name|QInputDialog
operator|::
name|getInteger
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|label
parameter_list|,
name|int
name|value
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|int
name|step
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
return|return
name|getInt
argument_list|(
name|parent
argument_list|,
name|title
argument_list|,
name|label
argument_list|,
name|value
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|step
argument_list|,
name|ok
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QString QInputDialog::getText(const QString&title, const QString&label,                                       QLineEdit::EchoMode echo = QLineEdit::Normal,                                       const QString&text = QString(), bool *ok = 0,                                       QWidget *parent = 0, const char *name = 0, Qt::WindowFlags flags = 0)      Call getText(\a parent, \a title, \a label, \a echo, \a text, \a     ok, \a flags) instead.      The \a name parameter is ignored. */
end_comment
begin_comment
comment|/*!     \fn int QInputDialog::getInteger(const QString&title, const QString&label, int value = 0,                                      int min = -2147483647, int max = 2147483647,                                      int step = 1, bool *ok = 0,                                      QWidget *parent = 0, const char *name = 0, Qt::WindowFlags flags = 0)       Call getInteger(\a parent, \a title, \a label, \a value, \a     min, \a max, \a step, \a ok, \a flags) instead.      The \a name parameter is ignored. */
end_comment
begin_comment
comment|/*!     \fn double QInputDialog::getDouble(const QString&title, const QString&label, double value = 0,                                        double min = -2147483647, double max = 2147483647,                                        int decimals = 1, bool *ok = 0,                                        QWidget *parent = 0, const char *name = 0, Qt::WindowFlags flags = 0)      Call getDouble(\a parent, \a title, \a label, \a value, \a     min, \a max, \a decimals, \a ok, \a flags).      The \a name parameter is ignored. */
end_comment
begin_comment
comment|/*!     \fn QString QInputDialog::getItem(const QString&title, const QString&label, const QStringList&list,                                       int current = 0, bool editable = true, bool *ok = 0,                                       QWidget *parent = 0, const char *name = 0, Qt::WindowFlags flags = 0)      Call getItem(\a parent, \a title, \a label, \a list, \a current,     \a editable, \a ok, \a flags) instead.      The \a name parameter is ignored. */
end_comment
begin_comment
comment|/*!     \fn void QInputDialog::doubleValueChanged(double value)      This signal is emitted whenever the double value changes in the dialog.     The current value is specified by \a value.      This signal is only relevant when the input dialog is used in     DoubleInput mode. */
end_comment
begin_comment
comment|/*!     \fn void QInputDialog::doubleValueSelected(double value)      This signal is emitted whenever the user selects a double value by     accepting the dialog; for example, by clicking the \gui{OK} button.     The selected value is specified by \a value.      This signal is only relevant when the input dialog is used in     DoubleInput mode. */
end_comment
begin_comment
comment|/*!     \fn void QInputDialog::intValueChanged(int value)      This signal is emitted whenever the integer value changes in the dialog.     The current value is specified by \a value.      This signal is only relevant when the input dialog is used in     IntInput mode. */
end_comment
begin_comment
comment|/*!     \fn void QInputDialog::intValueSelected(int value)      This signal is emitted whenever the user selects a integer value by     accepting the dialog; for example, by clicking the \gui{OK} button.     The selected value is specified by \a value.      This signal is only relevant when the input dialog is used in     IntInput mode. */
end_comment
begin_comment
comment|/*!     \fn void QInputDialog::textValueChanged(const QString&text)      This signal is emitted whenever the text string changes in the dialog.     The current string is specified by \a text.      This signal is only relevant when the input dialog is used in     TextInput mode. */
end_comment
begin_comment
comment|/*!     \fn void QInputDialog::textValueSelected(const QString&text)      This signal is emitted whenever the user selects a text string by     accepting the dialog; for example, by clicking the \gui{OK} button.     The selected string is specified by \a text.      This signal is only relevant when the input dialog is used in     TextInput mode. */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qinputdialog.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_INPUTDIALOG
end_comment
end_unit
