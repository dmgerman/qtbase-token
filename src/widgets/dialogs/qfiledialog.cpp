begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_define
DECL|macro|QT_NO_URL_CAST_FROM_STRING
define|#
directive|define
name|QT_NO_URL_CAST_FROM_STRING
end_define
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidgetitemdata_p.h>
end_include
begin_include
include|#
directive|include
file|"qfiledialog.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FILEDIALOG
end_ifndef
begin_include
include|#
directive|include
file|"qfiledialog_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qfontmetrics.h>
end_include
begin_include
include|#
directive|include
file|<qaction.h>
end_include
begin_include
include|#
directive|include
file|<qheaderview.h>
end_include
begin_include
include|#
directive|include
file|<qshortcut.h>
end_include
begin_include
include|#
directive|include
file|<qgridlayout.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qmessagebox.h>
end_include
begin_include
include|#
directive|include
file|<qinputdialog.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<qsettings.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qmimedatabase.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qstylepainter.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|"ui_qfiledialog.h"
end_include
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_EMBEDDED_SMALLSCREEN
define|#
directive|define
name|Q_EMBEDDED_SMALLSCREEN
end_define
begin_include
include|#
directive|include
file|"ui_qfiledialog_embedded.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_decl_stmt
specifier|extern
name|bool
name|qt_priv_ptr_valid
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<pwd.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_comment
comment|// for pathconf() on OS X
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_elif
begin_include
include|#
directive|include
file|<QtCore/qt_windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_GLOBAL_STATIC
argument_list|(
name|QUrl
argument_list|,
name|lastVisitedDir
argument_list|)
comment|/*!   \class QFileDialog   \brief The QFileDialog class provides a dialog that allow users to select files or directories.   \ingroup standard-dialogs   \inmodule QtWidgets    The QFileDialog class enables a user to traverse the file system in   order to select one or many files or a directory.    The easiest way to create a QFileDialog is to use the static functions.    \snippet code/src_gui_dialogs_qfiledialog.cpp 0    In the above example, a modal QFileDialog is created using a static   function. The dialog initially displays the contents of the "/home/jana"   directory, and displays files matching the patterns given in the   string "Image Files (*.png *.jpg *.bmp)". The parent of the file dialog   is set to \e this, and the window title is set to "Open Image".    If you want to use multiple filters, separate each one with   \e two semicolons. For example:    \snippet code/src_gui_dialogs_qfiledialog.cpp 1    You can create your own QFileDialog without using the static   functions. By calling setFileMode(), you can specify what the user must   select in the dialog:    \snippet code/src_gui_dialogs_qfiledialog.cpp 2    In the above example, the mode of the file dialog is set to   AnyFile, meaning that the user can select any file, or even specify a   file that doesn't exist. This mode is useful for creating a   "Save As" file dialog. Use ExistingFile if the user must select an   existing file, or \l Directory if only a directory may be selected.   See the \l QFileDialog::FileMode enum for the complete list of modes.    The fileMode property contains the mode of operation for the dialog;   this indicates what types of objects the user is expected to select.   Use setNameFilter() to set the dialog's file filter. For example:    \snippet code/src_gui_dialogs_qfiledialog.cpp 3    In the above example, the filter is set to \c{"Images (*.png *.xpm *.jpg)"},   this means that only files with the extension \c png, \c xpm,   or \c jpg will be shown in the QFileDialog. You can apply   several filters by using setNameFilters(). Use selectNameFilter() to select   one of the filters you've given as the file dialog's default filter.    The file dialog has two view modes: \l{QFileDialog::}{List} and   \l{QFileDialog::}{Detail}.   \l{QFileDialog::}{List} presents the contents of the current directory   as a list of file and directory names. \l{QFileDialog::}{Detail} also   displays a list of file and directory names, but provides additional   information alongside each name, such as the file size and modification   date. Set the mode with setViewMode():    \snippet code/src_gui_dialogs_qfiledialog.cpp 4    The last important function you will need to use when creating your   own file dialog is selectedFiles().    \snippet code/src_gui_dialogs_qfiledialog.cpp 5    In the above example, a modal file dialog is created and shown. If   the user clicked OK, the file they selected is put in \c fileName.    The dialog's working directory can be set with setDirectory().   Each file in the current directory can be selected using   the selectFile() function.    The \l{dialogs/standarddialogs}{Standard Dialogs} example shows   how to use QFileDialog as well as other built-in Qt dialogs.    By default, a platform-native file dialog will be used if the platform has   one. In that case, the widgets which would otherwise be used to construct the   dialog will not be instantiated, so related accessors such as layout() and   itemDelegate() will return null. You can set the \l DontUseNativeDialog option to   ensure that the widget-based implementation will be used instead of the   native dialog.    \sa QDir, QFileInfo, QFile, QColorDialog, QFontDialog, {Standard Dialogs Example},       {Application Example} */
comment|/*!     \enum QFileDialog::AcceptMode      \value AcceptOpen     \value AcceptSave */
comment|/*!     \enum QFileDialog::ViewMode      This enum describes the view mode of the file dialog; i.e. what     information about each file will be displayed.      \value Detail Displays an icon, a name, and details for each item in                   the directory.     \value List   Displays only an icon and a name for each item in the                   directory.      \sa setViewMode() */
comment|/*!     \enum QFileDialog::FileMode      This enum is used to indicate what the user may select in the file     dialog; i.e. what the dialog will return if the user clicks OK.      \value AnyFile        The name of a file, whether it exists or not.     \value ExistingFile   The name of a single existing file.     \value Directory      The name of a directory. Both files and                           directories are displayed.     \value ExistingFiles  The names of zero or more existing files.      This value is obsolete since Qt 4.5:      \value DirectoryOnly  Use \c Directory and setOption(ShowDirsOnly, true) instead.      \sa setFileMode() */
comment|/*!     \enum QFileDialog::Option      \value ShowDirsOnly Only show directories in the file dialog. By     default both files and directories are shown. (Valid only in the     \l Directory file mode.)      \value DontResolveSymlinks Don't resolve symlinks in the file     dialog. By default symlinks are resolved.      \value DontConfirmOverwrite Don't ask for confirmation if an     existing file is selected.  By default confirmation is requested.      \value DontUseNativeDialog Don't use the native file dialog. By     default, the native file dialog is used unless you use a subclass     of QFileDialog that contains the Q_OBJECT macro, or the platform     does not have a native dialog of the type that you require.      \value ReadOnly Indicates that the model is readonly.      \value HideNameFilterDetails Indicates if the file name filter details are     hidden or not.      \value DontUseSheet In previous versions of Qt, the static     functions would create a sheet by default if the static function     was given a parent. This is no longer supported and does nothing in Qt 4.5, The     static functions will always be an application modal dialog. If     you want to use sheets, use QFileDialog::open() instead.      \value DontUseCustomDirectoryIcons Always use the default directory icon.     Some platforms allow the user to set a different icon. Custom icon lookup     cause a big performance impact over network or removable drives.     Setting this will enable the QFileIconProvider::DontUseCustomDirectoryIcons     option in the icon provider. This enum value was added in Qt 5.2. */
comment|/*!   \enum QFileDialog::DialogLabel    \value LookIn   \value FileName   \value FileType   \value Accept   \value Reject */
comment|/*!     \fn void QFileDialog::filesSelected(const QStringList&selected)      When the selection changes for local operations and the dialog is     accepted, this signal is emitted with the (possibly empty) list     of \a selected files.      \sa currentChanged(), QDialog::Accepted */
comment|/*!     \fn void QFileDialog::urlsSelected(const QList<QUrl>&urls)      When the selection changes and the dialog is accepted, this signal is     emitted with the (possibly empty) list of selected \a urls.      \sa currentUrlChanged(), QDialog::Accepted     \since 5.2 */
comment|/*!     \fn void QFileDialog::fileSelected(const QString&file)      When the selection changes for local operations and the dialog is     accepted, this signal is emitted with the (possibly empty)     selected \a file.      \sa currentChanged(), QDialog::Accepted */
comment|/*!     \fn void QFileDialog::urlSelected(const QUrl&url)      When the selection changes and the dialog is accepted, this signal is     emitted with the (possibly empty) selected \a url.      \sa currentUrlChanged(), QDialog::Accepted     \since 5.2 */
comment|/*!     \fn void QFileDialog::currentChanged(const QString&path)      When the current file changes for local operations, this signal is     emitted with the new file name as the \a path parameter.      \sa filesSelected() */
comment|/*!     \fn void QFileDialog::currentUrlChanged(const QUrl&url)      When the current file changes, this signal is emitted with the     new file URL as the \a url parameter.      \sa urlsSelected()     \since 5.2 */
comment|/*!   \fn void QFileDialog::directoryEntered(const QString&directory)   \since 4.3    This signal is emitted for local operations when the user enters   a \a directory. */
comment|/*!   \fn void QFileDialog::directoryUrlEntered(const QUrl&directory)    This signal is emitted when the user enters a \a directory.    \since 5.2 */
comment|/*!   \fn void QFileDialog::filterSelected(const QString&filter)   \since 4.3    This signal is emitted when the user selects a \a filter. */
comment|//#if defined(Q_WS_WIN) || defined(Q_WS_MAC)
comment|//bool Q_WIDGETS_EXPORT qt_use_native_dialogs = true; // for the benefit of testing tools, until we have a proper API
comment|//#endif
name|QT_BEGIN_INCLUDE_NAMESPACE
ifdef|#
directive|ifdef
name|Q_WS_WIN
include|#
directive|include
file|<qwindowsstyle_p.h>
endif|#
directive|endif
include|#
directive|include
file|<qshortcut.h>
ifdef|#
directive|ifdef
name|Q_WS_MAC
include|#
directive|include
file|<qmacstyle_mac_p.h>
endif|#
directive|endif
name|QT_END_INCLUDE_NAMESPACE
comment|/*!     \fn QFileDialog::QFileDialog(QWidget *parent, Qt::WindowFlags flags)      Constructs a file dialog with the given \a parent and widget \a flags. */
DECL|function|QFileDialog
name|QFileDialog
operator|::
name|QFileDialog
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|,
name|Qt
operator|::
name|WindowFlags
name|f
argument_list|)
range|:
name|QDialog
argument_list|(
argument|*new QFileDialogPrivate
argument_list|,
argument|parent
argument_list|,
argument|f
argument_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
block|;
name|d
operator|->
name|init
argument_list|()
block|; }
comment|/*!     Constructs a file dialog with the given \a parent and \a caption that     initially displays the contents of the specified \a directory.     The contents of the directory are filtered before being shown in the     dialog, using a semicolon-separated list of filters specified by     \a filter. */
DECL|function|QFileDialog
name|QFileDialog
operator|::
name|QFileDialog
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|caption
argument_list|,
specifier|const
name|QString
operator|&
name|directory
argument_list|,
specifier|const
name|QString
operator|&
name|filter
argument_list|)
operator|:
name|QDialog
argument_list|(
argument|*new QFileDialogPrivate
argument_list|,
argument|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
block|;
name|d
operator|->
name|init
argument_list|(
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|directory
argument_list|)
argument_list|,
name|filter
argument_list|,
name|caption
argument_list|)
block|; }
comment|/*!     \internal */
DECL|function|QFileDialog
name|QFileDialog
operator|::
name|QFileDialog
argument_list|(
specifier|const
name|QFileDialogArgs
operator|&
name|args
argument_list|)
operator|:
name|QDialog
argument_list|(
argument|*new QFileDialogPrivate
argument_list|,
argument|args.parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
block|;
name|d
operator|->
name|init
argument_list|(
name|args
operator|.
name|directory
argument_list|,
name|args
operator|.
name|filter
argument_list|,
name|args
operator|.
name|caption
argument_list|)
block|;
name|setFileMode
argument_list|(
name|args
operator|.
name|mode
argument_list|)
block|;
name|setOptions
argument_list|(
name|args
operator|.
name|options
argument_list|)
block|;
name|selectFile
argument_list|(
name|args
operator|.
name|selection
argument_list|)
block|; }
comment|/*!     Destroys the file dialog. */
DECL|function|~QFileDialog
name|QFileDialog
operator|::
name|~
name|QFileDialog
operator|(
operator|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SETTINGS
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"QtProject"
argument_list|)
argument_list|)
block|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
block|;
name|settings
operator|.
name|setValue
argument_list|(
name|QLatin1String
argument_list|(
literal|"filedialog"
argument_list|)
argument_list|,
name|saveState
argument_list|()
argument_list|)
block|;
endif|#
directive|endif
block|}
comment|/*!     \since 4.3     Sets the \a urls that are located in the sidebar.      For instance:      \snippet filedialogurls.cpp 0      The file dialog will then look like this:      \image filedialogurls.png      \sa sidebarUrls() */
DECL|function|setSidebarUrls
name|void
name|QFileDialog
operator|::
name|setSidebarUrls
operator|(
specifier|const
name|QList
argument_list|<
name|QUrl
argument_list|>
operator|&
name|urls
operator|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
block|;
if|if
condition|(
operator|!
name|d
operator|->
name|nativeDialogInUse
condition|)
name|d
operator|->
name|qFileDialogUi
operator|->
name|sidebar
operator|->
name|setUrls
argument_list|(
name|urls
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_comment
comment|/*!     \since 4.3     Returns a list of urls that are currently in the sidebar */
end_comment
begin_function
DECL|function|sidebarUrls
name|QList
argument_list|<
name|QUrl
argument_list|>
name|QFileDialog
operator|::
name|sidebarUrls
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|nativeDialogInUse
condition|?
name|QList
argument_list|<
name|QUrl
argument_list|>
argument_list|()
else|:
name|d
operator|->
name|qFileDialogUi
operator|->
name|sidebar
operator|->
name|urls
argument_list|()
operator|)
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|QFileDialogMagic
specifier|static
specifier|const
name|qint32
name|QFileDialogMagic
init|=
literal|0xbe
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     \since 4.3     Saves the state of the dialog's layout, history and current directory.      Typically this is used in conjunction with QSettings to remember the size     for a future session. A version number is stored as part of the data. */
end_comment
begin_function
DECL|function|saveState
name|QByteArray
name|QFileDialog
operator|::
name|saveState
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
name|int
name|version
init|=
literal|4
decl_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|qint32
argument_list|(
name|QFileDialogMagic
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|qint32
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
block|{
name|stream
operator|<<
name|d
operator|->
name|qFileDialogUi
operator|->
name|splitter
operator|->
name|saveState
argument_list|()
expr_stmt|;
name|stream
operator|<<
name|d
operator|->
name|qFileDialogUi
operator|->
name|sidebar
operator|->
name|urls
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|stream
operator|<<
name|d
operator|->
name|splitterState
expr_stmt|;
name|stream
operator|<<
name|d
operator|->
name|sidebarUrls
expr_stmt|;
block|}
name|stream
operator|<<
name|history
argument_list|()
expr_stmt|;
name|stream
operator|<<
operator|*
name|lastVisitedDir
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
name|stream
operator|<<
name|d
operator|->
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|header
argument_list|()
operator|->
name|saveState
argument_list|()
expr_stmt|;
else|else
name|stream
operator|<<
name|d
operator|->
name|headerData
expr_stmt|;
name|stream
operator|<<
name|qint32
argument_list|(
name|viewMode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.3     Restores the dialogs's layout, history and current directory to the \a state specified.      Typically this is used in conjunction with QSettings to restore the size     from a past session.      Returns \c false if there are errors */
end_comment
begin_function
DECL|function|restoreState
name|bool
name|QFileDialog
operator|::
name|restoreState
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|state
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|QByteArray
name|sd
init|=
name|state
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|sd
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
return|return
literal|false
return|;
name|QStringList
name|history
decl_stmt|;
name|QUrl
name|currentDirectory
decl_stmt|;
name|qint32
name|marker
decl_stmt|;
name|qint32
name|v
decl_stmt|;
name|qint32
name|viewMode
decl_stmt|;
name|stream
operator|>>
name|marker
expr_stmt|;
name|stream
operator|>>
name|v
expr_stmt|;
comment|// the code below only supports versions 3 and 4
if|if
condition|(
name|marker
operator|!=
name|QFileDialogMagic
operator|||
operator|(
name|v
operator|!=
literal|3
operator|&&
name|v
operator|!=
literal|4
operator|)
condition|)
return|return
literal|false
return|;
name|stream
operator|>>
name|d
operator|->
name|splitterState
operator|>>
name|d
operator|->
name|sidebarUrls
operator|>>
name|history
expr_stmt|;
if|if
condition|(
name|v
operator|==
literal|3
condition|)
block|{
name|QString
name|currentDirectoryString
decl_stmt|;
name|stream
operator|>>
name|currentDirectoryString
expr_stmt|;
name|currentDirectory
operator|=
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|currentDirectoryString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stream
operator|>>
name|currentDirectory
expr_stmt|;
block|}
name|stream
operator|>>
name|d
operator|->
name|headerData
operator|>>
name|viewMode
expr_stmt|;
name|setDirectoryUrl
argument_list|(
name|lastVisitedDir
argument_list|()
operator|->
name|isEmpty
argument_list|()
condition|?
name|currentDirectory
else|:
operator|*
name|lastVisitedDir
argument_list|()
argument_list|)
expr_stmt|;
name|setViewMode
argument_list|(
cast|static_cast
argument_list|<
name|QFileDialog
operator|::
name|ViewMode
argument_list|>
argument_list|(
name|viewMode
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|qFileDialogUi
operator|->
name|splitter
operator|->
name|restoreState
argument_list|(
name|d
operator|->
name|splitterState
argument_list|)
condition|)
return|return
literal|false
return|;
name|QList
argument_list|<
name|int
argument_list|>
name|list
init|=
name|d
operator|->
name|qFileDialogUi
operator|->
name|splitter
operator|->
name|sizes
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|count
argument_list|()
operator|>=
literal|2
operator|&&
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
literal|0
operator|&&
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|list
index|[
name|i
index|]
operator|=
name|d
operator|->
name|qFileDialogUi
operator|->
name|splitter
operator|->
name|widget
argument_list|(
name|i
argument_list|)
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|splitter
operator|->
name|setSizes
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|qFileDialogUi
operator|->
name|sidebar
operator|->
name|setUrls
argument_list|(
name|d
operator|->
name|sidebarUrls
argument_list|)
expr_stmt|;
while|while
condition|(
name|history
operator|.
name|count
argument_list|()
operator|>
literal|5
condition|)
name|history
operator|.
name|pop_front
argument_list|()
expr_stmt|;
name|setHistory
argument_list|(
name|history
argument_list|)
expr_stmt|;
name|QHeaderView
modifier|*
name|headerView
init|=
name|d
operator|->
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|header
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|headerView
operator|->
name|restoreState
argument_list|(
name|d
operator|->
name|headerData
argument_list|)
condition|)
return|return
literal|false
return|;
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|actions
init|=
name|headerView
operator|->
name|actions
argument_list|()
decl_stmt|;
name|QAbstractItemModel
modifier|*
name|abstractModel
init|=
name|d
operator|->
name|model
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_PROXYMODEL
if|if
condition|(
name|d
operator|->
name|proxyModel
condition|)
name|abstractModel
operator|=
name|d
operator|->
name|proxyModel
expr_stmt|;
endif|#
directive|endif
name|int
name|total
init|=
name|qMin
argument_list|(
name|abstractModel
operator|->
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|actions
operator|.
name|count
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|total
condition|;
operator|++
name|i
control|)
name|actions
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|->
name|setChecked
argument_list|(
operator|!
name|headerView
operator|->
name|isSectionHidden
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QFileDialog
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LanguageChange
condition|)
block|{
name|d
operator|->
name|retranslateWindowTitle
argument_list|()
expr_stmt|;
name|d
operator|->
name|retranslateStrings
argument_list|()
expr_stmt|;
block|}
name|QDialog
operator|::
name|changeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QFileDialogPrivate
name|QFileDialogPrivate
operator|::
name|QFileDialogPrivate
parameter_list|()
member_init_list|:
ifndef|#
directive|ifndef
name|QT_NO_PROXYMODEL
name|proxyModel
argument_list|(
literal|0
argument_list|)
member_init_list|,
endif|#
directive|endif
name|model
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|currentHistoryLocation
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|renameAction
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|deleteAction
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|showHiddenAction
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|useDefaultCaption
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|defaultFileTypes
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|qFileDialogUi
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|options
argument_list|(
operator|new
name|QFileDialogOptions
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QFileDialogPrivate
name|QFileDialogPrivate
operator|::
name|~
name|QFileDialogPrivate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initHelper
name|void
name|QFileDialogPrivate
operator|::
name|initHelper
parameter_list|(
name|QPlatformDialogHelper
modifier|*
name|h
parameter_list|)
block|{
name|QFileDialog
modifier|*
name|d
init|=
name|q_func
argument_list|()
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|h
argument_list|,
name|SIGNAL
argument_list|(
name|fileSelected
argument_list|(
name|QUrl
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|SLOT
argument_list|(
name|_q_emitUrlSelected
argument_list|(
name|QUrl
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|h
argument_list|,
name|SIGNAL
argument_list|(
name|filesSelected
argument_list|(
name|QList
argument_list|<
name|QUrl
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|SLOT
argument_list|(
name|_q_emitUrlsSelected
argument_list|(
name|QList
argument_list|<
name|QUrl
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|h
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QUrl
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|SLOT
argument_list|(
name|_q_nativeCurrentChanged
argument_list|(
name|QUrl
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|h
argument_list|,
name|SIGNAL
argument_list|(
name|directoryEntered
argument_list|(
name|QUrl
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|SLOT
argument_list|(
name|_q_nativeEnterDirectory
argument_list|(
name|QUrl
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|h
argument_list|,
name|SIGNAL
argument_list|(
name|filterSelected
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|SIGNAL
argument_list|(
name|filterSelected
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QPlatformFileDialogHelper
operator|*
argument_list|>
argument_list|(
name|h
argument_list|)
operator|->
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|nativeDialogInUse
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|helperPrepareShow
name|void
name|QFileDialogPrivate
operator|::
name|helperPrepareShow
parameter_list|(
name|QPlatformDialogHelper
modifier|*
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|options
operator|->
name|setWindowTitle
argument_list|(
name|q
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|->
name|setHistory
argument_list|(
name|q
operator|->
name|history
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|usingWidgets
argument_list|()
condition|)
name|options
operator|->
name|setSidebarUrls
argument_list|(
name|qFileDialogUi
operator|->
name|sidebar
operator|->
name|urls
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QDir
name|directory
init|=
name|q
operator|->
name|directory
argument_list|()
decl_stmt|;
name|options
operator|->
name|setInitialDirectory
argument_list|(
name|directory
operator|.
name|exists
argument_list|()
condition|?
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|directory
operator|.
name|absolutePath
argument_list|()
argument_list|)
else|:
name|QUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|->
name|initiallySelectedNameFilter
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|options
operator|->
name|setInitiallySelectedNameFilter
argument_list|(
name|q
operator|->
name|selectedNameFilter
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|->
name|initiallySelectedFiles
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|options
operator|->
name|setInitiallySelectedFiles
argument_list|(
name|userSelectedFiles
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|helperDone
name|void
name|QFileDialogPrivate
operator|::
name|helperDone
parameter_list|(
name|QDialog
operator|::
name|DialogCode
name|code
parameter_list|,
name|QPlatformDialogHelper
modifier|*
parameter_list|)
block|{
if|if
condition|(
name|code
operator|==
name|QDialog
operator|::
name|Accepted
condition|)
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|q
operator|->
name|setViewMode
argument_list|(
cast|static_cast
argument_list|<
name|QFileDialog
operator|::
name|ViewMode
argument_list|>
argument_list|(
name|options
operator|->
name|viewMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSidebarUrls
argument_list|(
name|options
operator|->
name|sidebarUrls
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|setHistory
argument_list|(
name|options
operator|->
name|history
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|retranslateWindowTitle
name|void
name|QFileDialogPrivate
operator|::
name|retranslateWindowTitle
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useDefaultCaption
operator|||
name|setWindowTitle
operator|!=
name|q
operator|->
name|windowTitle
argument_list|()
condition|)
return|return;
if|if
condition|(
name|q
operator|->
name|acceptMode
argument_list|()
operator|==
name|QFileDialog
operator|::
name|AcceptOpen
condition|)
block|{
specifier|const
name|QFileDialog
operator|::
name|FileMode
name|fileMode
init|=
name|q
operator|->
name|fileMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileMode
operator|==
name|QFileDialog
operator|::
name|DirectoryOnly
operator|||
name|fileMode
operator|==
name|QFileDialog
operator|::
name|Directory
condition|)
name|q
operator|->
name|setWindowTitle
argument_list|(
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"Find Directory"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|setWindowTitle
argument_list|(
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"Open"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|q
operator|->
name|setWindowTitle
argument_list|(
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"Save As"
argument_list|)
argument_list|)
expr_stmt|;
name|setWindowTitle
operator|=
name|q
operator|->
name|windowTitle
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setLastVisitedDirectory
name|void
name|QFileDialogPrivate
operator|::
name|setLastVisitedDirectory
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|dir
parameter_list|)
block|{
operator|*
name|lastVisitedDir
argument_list|()
operator|=
name|dir
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateLookInLabel
name|void
name|QFileDialogPrivate
operator|::
name|updateLookInLabel
parameter_list|()
block|{
if|if
condition|(
name|options
operator|->
name|isLabelExplicitlySet
argument_list|(
name|QFileDialogOptions
operator|::
name|LookIn
argument_list|)
condition|)
name|setLabelTextControl
argument_list|(
name|QFileDialog
operator|::
name|LookIn
argument_list|,
name|options
operator|->
name|labelText
argument_list|(
name|QFileDialogOptions
operator|::
name|LookIn
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateFileNameLabel
name|void
name|QFileDialogPrivate
operator|::
name|updateFileNameLabel
parameter_list|()
block|{
if|if
condition|(
name|options
operator|->
name|isLabelExplicitlySet
argument_list|(
name|QFileDialogOptions
operator|::
name|FileName
argument_list|)
condition|)
block|{
name|setLabelTextControl
argument_list|(
name|QFileDialog
operator|::
name|FileName
argument_list|,
name|options
operator|->
name|labelText
argument_list|(
name|QFileDialogOptions
operator|::
name|FileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|q_func
argument_list|()
operator|->
name|fileMode
argument_list|()
condition|)
block|{
case|case
name|QFileDialog
operator|::
name|DirectoryOnly
case|:
case|case
name|QFileDialog
operator|::
name|Directory
case|:
name|setLabelTextControl
argument_list|(
name|QFileDialog
operator|::
name|FileName
argument_list|,
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"Directory:"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|setLabelTextControl
argument_list|(
name|QFileDialog
operator|::
name|FileName
argument_list|,
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"File&name:"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|updateFileTypeLabel
name|void
name|QFileDialogPrivate
operator|::
name|updateFileTypeLabel
parameter_list|()
block|{
if|if
condition|(
name|options
operator|->
name|isLabelExplicitlySet
argument_list|(
name|QFileDialogOptions
operator|::
name|FileType
argument_list|)
condition|)
name|setLabelTextControl
argument_list|(
name|QFileDialog
operator|::
name|FileType
argument_list|,
name|options
operator|->
name|labelText
argument_list|(
name|QFileDialogOptions
operator|::
name|FileType
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateOkButtonText
name|void
name|QFileDialogPrivate
operator|::
name|updateOkButtonText
parameter_list|(
name|bool
name|saveAsOnFolder
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
comment|// 'Save as' at a folder: Temporarily change to "Open".
if|if
condition|(
name|saveAsOnFolder
condition|)
block|{
name|setLabelTextControl
argument_list|(
name|QFileDialog
operator|::
name|Accept
argument_list|,
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"&Open"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|options
operator|->
name|isLabelExplicitlySet
argument_list|(
name|QFileDialogOptions
operator|::
name|Accept
argument_list|)
condition|)
block|{
name|setLabelTextControl
argument_list|(
name|QFileDialog
operator|::
name|Accept
argument_list|,
name|options
operator|->
name|labelText
argument_list|(
name|QFileDialogOptions
operator|::
name|Accept
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
switch|switch
condition|(
name|q
operator|->
name|fileMode
argument_list|()
condition|)
block|{
case|case
name|QFileDialog
operator|::
name|DirectoryOnly
case|:
case|case
name|QFileDialog
operator|::
name|Directory
case|:
name|setLabelTextControl
argument_list|(
name|QFileDialog
operator|::
name|Accept
argument_list|,
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"&Choose"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|setLabelTextControl
argument_list|(
name|QFileDialog
operator|::
name|Accept
argument_list|,
name|q
operator|->
name|acceptMode
argument_list|()
operator|==
name|QFileDialog
operator|::
name|AcceptOpen
condition|?
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"&Open"
argument_list|)
else|:
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"&Save"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|updateCancelButtonText
name|void
name|QFileDialogPrivate
operator|::
name|updateCancelButtonText
parameter_list|()
block|{
if|if
condition|(
name|options
operator|->
name|isLabelExplicitlySet
argument_list|(
name|QFileDialogOptions
operator|::
name|Reject
argument_list|)
condition|)
name|setLabelTextControl
argument_list|(
name|QFileDialog
operator|::
name|Reject
argument_list|,
name|options
operator|->
name|labelText
argument_list|(
name|QFileDialogOptions
operator|::
name|Reject
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|retranslateStrings
name|void
name|QFileDialogPrivate
operator|::
name|retranslateStrings
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
comment|/* WIDGETS */
if|if
condition|(
name|defaultFileTypes
condition|)
name|q
operator|->
name|setNameFilter
argument_list|(
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"All Files (*)"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nativeDialogInUse
condition|)
return|return;
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|actions
init|=
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|header
argument_list|()
operator|->
name|actions
argument_list|()
decl_stmt|;
name|QAbstractItemModel
modifier|*
name|abstractModel
init|=
name|model
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_PROXYMODEL
if|if
condition|(
name|proxyModel
condition|)
name|abstractModel
operator|=
name|proxyModel
expr_stmt|;
endif|#
directive|endif
name|int
name|total
init|=
name|qMin
argument_list|(
name|abstractModel
operator|->
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|actions
operator|.
name|count
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|total
condition|;
operator|++
name|i
control|)
block|{
name|actions
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|->
name|setText
argument_list|(
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"Show "
argument_list|)
operator|+
name|abstractModel
operator|->
name|headerData
argument_list|(
name|i
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* MENU ACTIONS */
name|renameAction
operator|->
name|setText
argument_list|(
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"&Rename"
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAction
operator|->
name|setText
argument_list|(
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"&Delete"
argument_list|)
argument_list|)
expr_stmt|;
name|showHiddenAction
operator|->
name|setText
argument_list|(
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"Show&hidden files"
argument_list|)
argument_list|)
expr_stmt|;
name|newFolderAction
operator|->
name|setText
argument_list|(
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"&New Folder"
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|retranslateUi
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|updateLookInLabel
argument_list|()
expr_stmt|;
name|updateFileNameLabel
argument_list|()
expr_stmt|;
name|updateFileTypeLabel
argument_list|()
expr_stmt|;
name|updateCancelButtonText
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emitFilesSelected
name|void
name|QFileDialogPrivate
operator|::
name|emitFilesSelected
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|files
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|filesSelected
argument_list|(
name|files
argument_list|)
emit|;
if|if
condition|(
name|files
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
emit|emit
name|q
operator|->
name|fileSelected
argument_list|(
name|files
operator|.
name|first
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|canBeNativeDialog
name|bool
name|QFileDialogPrivate
operator|::
name|canBeNativeDialog
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|nativeDialogInUse
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|q
operator|->
name|options
argument_list|()
operator|&
name|QFileDialog
operator|::
name|DontUseNativeDialog
condition|)
return|return
literal|false
return|;
name|QLatin1String
name|staticName
argument_list|(
name|QFileDialog
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
argument_list|)
decl_stmt|;
name|QLatin1String
name|dynamicName
argument_list|(
name|q
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|staticName
operator|==
name|dynamicName
operator|)
return|;
block|}
end_function
begin_function
DECL|function|usingWidgets
name|bool
name|QFileDialogPrivate
operator|::
name|usingWidgets
parameter_list|()
specifier|const
block|{
return|return
operator|!
name|nativeDialogInUse
operator|&&
name|qFileDialogUi
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5     Sets the given \a option to be enabled if \a on is true; otherwise,     clears the given \a option.      \sa options, testOption() */
end_comment
begin_function
DECL|function|setOption
name|void
name|QFileDialog
operator|::
name|setOption
parameter_list|(
name|Option
name|option
parameter_list|,
name|bool
name|on
parameter_list|)
block|{
specifier|const
name|QFileDialog
operator|::
name|Options
name|previousOptions
init|=
name|options
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|previousOptions
operator|&
name|option
operator|)
operator|!=
operator|!
name|on
condition|)
name|setOptions
argument_list|(
name|previousOptions
operator|^
name|option
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Returns \c true if the given \a option is enabled; otherwise, returns     false.      \sa options, setOption() */
end_comment
begin_function
DECL|function|testOption
name|bool
name|QFileDialog
operator|::
name|testOption
parameter_list|(
name|Option
name|option
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|options
operator|->
name|testOption
argument_list|(
cast|static_cast
argument_list|<
name|QFileDialogOptions
operator|::
name|FileDialogOption
argument_list|>
argument_list|(
name|option
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QFileDialog::options     \brief the various options that affect the look and feel of the dialog     \since 4.5      By default, all options are disabled.      Options should be set before showing the dialog. Setting them while the     dialog is visible is not guaranteed to have an immediate effect on the     dialog (depending on the option and on the platform).      \sa setOption(), testOption() */
end_comment
begin_function
DECL|function|setOptions
name|void
name|QFileDialog
operator|::
name|setOptions
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|Options
name|changed
init|=
operator|(
name|options
operator|^
name|QFileDialog
operator|::
name|options
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|changed
condition|)
return|return;
name|d
operator|->
name|options
operator|->
name|setOptions
argument_list|(
name|QFileDialogOptions
operator|::
name|FileDialogOptions
argument_list|(
name|int
argument_list|(
name|options
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|options
operator|&
name|DontUseNativeDialog
operator|)
operator|&&
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
name|d
operator|->
name|createWidgets
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
block|{
if|if
condition|(
name|changed
operator|&
name|DontResolveSymlinks
condition|)
name|d
operator|->
name|model
operator|->
name|setResolveSymlinks
argument_list|(
operator|!
operator|(
name|options
operator|&
name|DontResolveSymlinks
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
operator|&
name|ReadOnly
condition|)
block|{
name|bool
name|ro
init|=
operator|(
name|options
operator|&
name|ReadOnly
operator|)
decl_stmt|;
name|d
operator|->
name|model
operator|->
name|setReadOnly
argument_list|(
name|ro
argument_list|)
expr_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|newFolderButton
operator|->
name|setEnabled
argument_list|(
operator|!
name|ro
argument_list|)
expr_stmt|;
name|d
operator|->
name|renameAction
operator|->
name|setEnabled
argument_list|(
operator|!
name|ro
argument_list|)
expr_stmt|;
name|d
operator|->
name|deleteAction
operator|->
name|setEnabled
argument_list|(
operator|!
name|ro
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changed
operator|&
name|DontUseCustomDirectoryIcons
condition|)
block|{
name|QFileIconProvider
operator|::
name|Options
name|providerOptions
init|=
name|iconProvider
argument_list|()
operator|->
name|options
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|&
name|DontUseCustomDirectoryIcons
condition|)
name|providerOptions
operator||=
name|QFileIconProvider
operator|::
name|DontUseCustomDirectoryIcons
expr_stmt|;
else|else
name|providerOptions
operator|&=
operator|~
name|QFileIconProvider
operator|::
name|DontUseCustomDirectoryIcons
expr_stmt|;
name|iconProvider
argument_list|()
operator|->
name|setOptions
argument_list|(
name|providerOptions
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
operator|&
name|HideNameFilterDetails
condition|)
name|setNameFilters
argument_list|(
name|d
operator|->
name|options
operator|->
name|nameFilters
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
operator|&
name|ShowDirsOnly
condition|)
name|setFilter
argument_list|(
operator|(
name|options
operator|&
name|ShowDirsOnly
operator|)
condition|?
name|filter
argument_list|()
operator|&
operator|~
name|QDir
operator|::
name|Files
else|:
name|filter
argument_list|()
operator||
name|QDir
operator|::
name|Files
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|options
name|QFileDialog
operator|::
name|Options
name|QFileDialog
operator|::
name|options
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
return|return
name|QFileDialog
operator|::
name|Options
argument_list|(
name|int
argument_list|(
name|d
operator|->
name|options
operator|->
name|options
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      \since 4.5      This function connects one of its signals to the slot specified by \a receiver     and \a member. The specific signal depends is filesSelected() if fileMode is     ExistingFiles and fileSelected() if fileMode is anything else.      The signal will be disconnected from the slot when the dialog is closed. */
end_comment
begin_function
DECL|function|open
name|void
name|QFileDialog
operator|::
name|open
parameter_list|(
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|signal
init|=
operator|(
name|fileMode
argument_list|()
operator|==
name|ExistingFiles
operator|)
condition|?
name|SIGNAL
argument_list|(
name|filesSelected
argument_list|(
name|QStringList
argument_list|)
argument_list|)
else|:
name|SIGNAL
argument_list|(
name|fileSelected
argument_list|(
name|QString
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|signal
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|)
expr_stmt|;
name|d
operator|->
name|signalToDisconnectOnClose
operator|=
name|signal
expr_stmt|;
name|d
operator|->
name|receiverToDisconnectOnClose
operator|=
name|receiver
expr_stmt|;
name|d
operator|->
name|memberToDisconnectOnClose
operator|=
name|member
expr_stmt|;
name|QDialog
operator|::
name|open
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setVisible
name|void
name|QFileDialog
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|visible
condition|)
block|{
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
operator|&&
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
condition|)
return|return;
block|}
elseif|else
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
operator|&&
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|canBeNativeDialog
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|setNativeDialogVisible
argument_list|(
name|visible
argument_list|)
condition|)
block|{
comment|// Set WA_DontShowOnScreen so that QDialog::setVisible(visible) below
comment|// updates the state correctly, but skips showing the non-native version:
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FSCOMPLETER
comment|// So the completer doesn't try to complete and therefore show a popup
if|if
condition|(
operator|!
name|d
operator|->
name|nativeDialogInUse
condition|)
name|d
operator|->
name|completer
operator|->
name|setModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|d
operator|->
name|createWidgets
argument_list|()
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|,
literal|false
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FSCOMPLETER
if|if
condition|(
operator|!
name|d
operator|->
name|nativeDialogInUse
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|proxyModel
operator|!=
literal|0
condition|)
name|d
operator|->
name|completer
operator|->
name|setModel
argument_list|(
name|d
operator|->
name|proxyModel
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|completer
operator|->
name|setModel
argument_list|(
name|d
operator|->
name|model
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
block|}
if|if
condition|(
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileNameEdit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QDialog
operator|::
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     set the directory to url */
end_comment
begin_function
DECL|function|_q_goToUrl
name|void
name|QFileDialogPrivate
operator|::
name|_q_goToUrl
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
comment|//The shortcut in the side bar may have a parent that is not fetched yet (e.g. an hidden file)
comment|//so we force the fetching
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|node
init|=
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|node
argument_list|(
name|url
operator|.
name|toLocalFile
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|index
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|_q_enterDirectory
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QFileDialog::setDirectory(const QDir&directory)      \overload */
end_comment
begin_comment
comment|/*!     Sets the file dialog's current \a directory. */
end_comment
begin_function
DECL|function|setDirectory
name|void
name|QFileDialog
operator|::
name|setDirectory
parameter_list|(
specifier|const
name|QString
modifier|&
name|directory
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|QString
name|newDirectory
init|=
name|directory
decl_stmt|;
name|QFileInfo
name|info
argument_list|(
name|directory
argument_list|)
decl_stmt|;
comment|//we remove .. and . from the given path if exist
if|if
condition|(
operator|!
name|directory
operator|.
name|isEmpty
argument_list|()
condition|)
name|newDirectory
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|directory
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|directory
operator|.
name|isEmpty
argument_list|()
operator|&&
name|newDirectory
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QUrl
name|newDirUrl
init|=
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|newDirectory
argument_list|)
decl_stmt|;
name|d
operator|->
name|setLastVisitedDirectory
argument_list|(
name|newDirUrl
argument_list|)
expr_stmt|;
name|d
operator|->
name|options
operator|->
name|setInitialDirectory
argument_list|(
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
block|{
name|d
operator|->
name|setDirectory_sys
argument_list|(
name|newDirUrl
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|rootPath
argument_list|()
operator|==
name|newDirectory
condition|)
return|return;
name|QModelIndex
name|root
init|=
name|d
operator|->
name|model
operator|->
name|setRootPath
argument_list|(
name|newDirectory
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|nativeDialogInUse
condition|)
block|{
name|d
operator|->
name|qFileDialogUi
operator|->
name|newFolderButton
operator|->
name|setEnabled
argument_list|(
name|d
operator|->
name|model
operator|->
name|flags
argument_list|(
name|root
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|!=
name|d
operator|->
name|rootIndex
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_FSCOMPLETER
if|if
condition|(
name|directory
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|d
operator|->
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
name|newDirectory
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
name|newDirectory
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|setRootIndex
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|qFileDialogUi
operator|->
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the directory currently being displayed in the dialog. */
end_comment
begin_function
DECL|function|directory
name|QDir
name|QFileDialog
operator|::
name|directory
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|nativeDialogInUse
condition|)
block|{
name|QString
name|dir
init|=
name|d
operator|->
name|directory_sys
argument_list|()
operator|.
name|toLocalFile
argument_list|()
decl_stmt|;
return|return
name|QDir
argument_list|(
name|dir
operator|.
name|isEmpty
argument_list|()
condition|?
name|d
operator|->
name|options
operator|->
name|initialDirectory
argument_list|()
operator|.
name|toLocalFile
argument_list|()
else|:
name|dir
argument_list|)
return|;
block|}
return|return
name|d
operator|->
name|rootPath
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the file dialog's current \a directory url.      \note The non-native QFileDialog supports only local files.      \since 5.2 */
end_comment
begin_function
DECL|function|setDirectoryUrl
name|void
name|QFileDialog
operator|::
name|setDirectoryUrl
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|directory
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|directory
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|d
operator|->
name|setLastVisitedDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|d
operator|->
name|options
operator|->
name|setInitialDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|nativeDialogInUse
condition|)
name|d
operator|->
name|setDirectory_sys
argument_list|(
name|directory
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|directory
operator|.
name|isLocalFile
argument_list|()
condition|)
name|setDirectory
argument_list|(
name|directory
operator|.
name|toLocalFile
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|()
operator|<<
literal|"Non-native QFileDialog supports only local files"
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the url of the directory currently being displayed in the dialog.      \since 5.2 */
end_comment
begin_function
DECL|function|directoryUrl
name|QUrl
name|QFileDialog
operator|::
name|directoryUrl
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|nativeDialogInUse
condition|)
return|return
name|d
operator|->
name|directory_sys
argument_list|()
return|;
else|else
return|return
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// FIXME Qt 5.4: Use upcoming QVolumeInfo class to determine this information?
end_comment
begin_function
DECL|function|isCaseSensitiveFileSystem
specifier|static
specifier|inline
name|bool
name|isCaseSensitiveFileSystem
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|path
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
comment|// Return case insensitive unconditionally, even if someone has a case sensitive
comment|// file system mounted, wrongly capitalized drive letters will cause mismatches.
return|return
literal|false
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_OSX
argument_list|)
return|return
name|pathconf
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|path
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|_PC_CASE_SENSITIVE
argument_list|)
return|;
else|#
directive|else
return|return
literal|true
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// Determine the file name to be set on the line edit from the path
end_comment
begin_comment
comment|// passed to selectFile() in mode QFileDialog::AcceptSave.
end_comment
begin_function
DECL|function|fileFromPath
specifier|static
specifier|inline
name|QString
name|fileFromPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|rootPath
parameter_list|,
name|QString
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QFileInfo
argument_list|(
name|path
argument_list|)
operator|.
name|isAbsolute
argument_list|()
condition|)
return|return
name|path
return|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|rootPath
argument_list|,
name|isCaseSensitiveFileSystem
argument_list|(
name|rootPath
argument_list|)
condition|?
name|Qt
operator|::
name|CaseSensitive
else|:
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|path
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|rootPath
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|path
return|;
if|if
condition|(
name|path
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QDir
operator|::
name|separator
argument_list|()
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|//On Windows both cases can happen
operator|||
name|path
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
endif|#
directive|endif
condition|)
block|{
name|path
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
end_function
begin_comment
comment|/*!     Selects the given \a filename in the file dialog.      \sa selectedFiles() */
end_comment
begin_function
DECL|function|selectFile
name|void
name|QFileDialog
operator|::
name|selectFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|filename
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
block|{
name|QUrl
name|url
init|=
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|QFileInfo
argument_list|(
name|filename
argument_list|)
operator|.
name|isRelative
argument_list|()
condition|)
block|{
name|QDir
name|dir
argument_list|(
name|d
operator|->
name|options
operator|->
name|initialDirectory
argument_list|()
operator|.
name|toLocalFile
argument_list|()
argument_list|)
decl_stmt|;
name|url
operator|=
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|dir
operator|.
name|absoluteFilePath
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|selectFile_sys
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|d
operator|->
name|options
operator|->
name|setInitiallySelectedFiles
argument_list|(
name|QList
argument_list|<
name|QUrl
argument_list|>
argument_list|()
operator|<<
name|url
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|filename
argument_list|)
condition|)
block|{
name|QFileInfo
name|info
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QString
name|filenamePath
init|=
name|info
operator|.
name|absoluteDir
argument_list|()
operator|.
name|path
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|model
operator|->
name|rootPath
argument_list|()
operator|!=
name|filenamePath
condition|)
name|setDirectory
argument_list|(
name|filenamePath
argument_list|)
expr_stmt|;
block|}
name|QModelIndex
name|index
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|()
operator|||
operator|!
name|d
operator|->
name|lineEdit
argument_list|()
operator|->
name|hasFocus
argument_list|()
condition|)
name|d
operator|->
name|lineEdit
argument_list|()
operator|->
name|setText
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
condition|?
name|index
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|fileFromPath
argument_list|(
name|d
operator|->
name|rootPath
argument_list|()
argument_list|,
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Selects the given \a url in the file dialog.      \note The non-native QFileDialog supports only local files.      \sa selectedUrls()     \since 5.2 */
end_comment
begin_function
DECL|function|selectUrl
name|void
name|QFileDialog
operator|::
name|selectUrl
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|url
operator|.
name|isValid
argument_list|()
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|nativeDialogInUse
condition|)
name|d
operator|->
name|selectFile_sys
argument_list|(
name|url
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|url
operator|.
name|isLocalFile
argument_list|()
condition|)
name|selectFile
argument_list|(
name|url
operator|.
name|toLocalFile
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|()
operator|<<
literal|"Non-native QFileDialog supports only local files"
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_function
DECL|function|qt_tildeExpansion
name|Q_AUTOTEST_EXPORT
name|QString
name|qt_tildeExpansion
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
name|bool
modifier|*
name|expanded
init|=
literal|0
parameter_list|)
block|{
if|if
condition|(
name|expanded
operator|!=
literal|0
condition|)
operator|*
name|expanded
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'~'
argument_list|)
argument_list|)
condition|)
return|return
name|path
return|;
name|QString
name|ret
init|=
name|path
decl_stmt|;
name|QStringList
name|tokens
init|=
name|ret
operator|.
name|split
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|first
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"~"
argument_list|)
condition|)
block|{
name|ret
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|userName
init|=
name|tokens
operator|.
name|first
argument_list|()
decl_stmt|;
name|userName
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
specifier|const
name|QString
name|homePath
init|=
name|QDir
operator|::
name|homePath
argument_list|()
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|_POSIX_THREAD_SAFE_FUNCTIONS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_OPENBSD
argument_list|)
name|passwd
name|pw
decl_stmt|;
name|passwd
modifier|*
name|tmpPw
decl_stmt|;
name|char
name|buf
index|[
literal|200
index|]
decl_stmt|;
specifier|const
name|int
name|bufSize
init|=
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|int
name|err
init|=
literal|0
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SOLARIS
argument_list|)
operator|&&
operator|(
name|_POSIX_C_SOURCE
operator|-
literal|0
operator|<
literal|199506L
operator|)
name|tmpPw
operator|=
name|getpwnam_r
argument_list|(
name|userName
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|pw
argument_list|,
name|buf
argument_list|,
name|bufSize
argument_list|)
expr_stmt|;
else|#
directive|else
name|err
operator|=
name|getpwnam_r
argument_list|(
name|userName
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|pw
argument_list|,
name|buf
argument_list|,
name|bufSize
argument_list|,
operator|&
name|tmpPw
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|err
operator|||
operator|!
name|tmpPw
condition|)
return|return
name|ret
return|;
specifier|const
name|QString
name|homePath
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|pw
operator|.
name|pw_dir
argument_list|)
decl_stmt|;
else|#
directive|else
name|passwd
modifier|*
name|pw
init|=
name|getpwnam
argument_list|(
name|userName
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pw
condition|)
return|return
name|ret
return|;
specifier|const
name|QString
name|homePath
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|pw
operator|->
name|pw_dir
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|ret
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
name|tokens
operator|.
name|first
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|homePath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expanded
operator|!=
literal|0
condition|)
operator|*
name|expanded
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/**     Returns the text in the line edit which can be one or more file names   */
end_comment
begin_function
DECL|function|typedFiles
name|QStringList
name|QFileDialogPrivate
operator|::
name|typedFiles
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
name|QStringList
name|files
decl_stmt|;
name|QString
name|editText
init|=
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|editText
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_UNIX
specifier|const
name|QString
name|prefix
init|=
name|q
operator|->
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|prefix
operator|+
name|editText
argument_list|)
condition|)
name|files
operator|<<
name|editText
expr_stmt|;
else|else
name|files
operator|<<
name|qt_tildeExpansion
argument_list|(
name|editText
argument_list|)
expr_stmt|;
else|#
directive|else
name|files
operator|<<
name|editText
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|q
argument_list|)
endif|#
directive|endif
block|}
else|else
block|{
comment|// " is used to separate files like so: "file1" "file2" "file3" ...
comment|// ### need escape character for filenames with quotes (")
name|QStringList
name|tokens
init|=
name|editText
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|0
condition|)
continue|continue;
comment|// Every even token is a separator
ifdef|#
directive|ifdef
name|Q_OS_UNIX
specifier|const
name|QString
name|token
init|=
name|tokens
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|prefix
init|=
name|q
operator|->
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|prefix
operator|+
name|token
argument_list|)
condition|)
name|files
operator|<<
name|token
expr_stmt|;
else|else
name|files
operator|<<
name|qt_tildeExpansion
argument_list|(
name|token
argument_list|)
expr_stmt|;
else|#
directive|else
name|files
operator|<<
name|toInternal
argument_list|(
name|tokens
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
return|return
name|addDefaultSuffixToFiles
argument_list|(
name|files
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Return selected files without defaulting to the root of the file system model
end_comment
begin_comment
comment|// used for initializing QFileDialogOptions for native dialogs. The default is
end_comment
begin_comment
comment|// not suitable for native dialogs since it mostly equals directory().
end_comment
begin_function
DECL|function|userSelectedFiles
name|QList
argument_list|<
name|QUrl
argument_list|>
name|QFileDialogPrivate
operator|::
name|userSelectedFiles
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QUrl
argument_list|>
name|files
decl_stmt|;
if|if
condition|(
operator|!
name|usingWidgets
argument_list|()
condition|)
return|return
name|addDefaultSuffixToUrls
argument_list|(
name|selectedFiles_sys
argument_list|()
argument_list|)
return|;
foreach|foreach
control|(
specifier|const
name|QModelIndex
modifier|&
name|index
decl|,
name|qFileDialogUi
operator|->
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedRows
argument_list|()
control|)
name|files
operator|.
name|append
argument_list|(
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|index
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|path
decl|,
name|typedFiles
argument_list|()
control|)
name|files
operator|.
name|append
argument_list|(
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|files
return|;
block|}
end_function
begin_function
DECL|function|addDefaultSuffixToFiles
name|QStringList
name|QFileDialogPrivate
operator|::
name|addDefaultSuffixToFiles
parameter_list|(
specifier|const
name|QStringList
name|filesToFix
parameter_list|)
specifier|const
block|{
name|QStringList
name|files
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filesToFix
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|name
init|=
name|toInternal
argument_list|(
name|filesToFix
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QFileInfo
name|info
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// if the filename has no suffix, add the default suffix
specifier|const
name|QString
name|defaultSuffix
init|=
name|options
operator|->
name|defaultSuffix
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|defaultSuffix
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|info
operator|.
name|isDir
argument_list|()
operator|&&
name|name
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|name
operator|+=
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|defaultSuffix
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|files
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// at this point the path should only have Qt path separators.
comment|// This check is needed since we might be at the root directory
comment|// and on Windows it already ends with slash.
name|QString
name|path
init|=
name|rootPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|path
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|path
operator|+=
name|name
expr_stmt|;
name|files
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|files
return|;
block|}
end_function
begin_function
DECL|function|addDefaultSuffixToUrls
name|QList
argument_list|<
name|QUrl
argument_list|>
name|QFileDialogPrivate
operator|::
name|addDefaultSuffixToUrls
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QUrl
argument_list|>
modifier|&
name|urlsToFix
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QUrl
argument_list|>
name|urls
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|urlsToFix
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QUrl
name|url
init|=
name|urlsToFix
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// if the filename has no suffix, add the default suffix
specifier|const
name|QString
name|defaultSuffix
init|=
name|options
operator|->
name|defaultSuffix
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|defaultSuffix
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|url
operator|.
name|path
argument_list|()
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|&&
name|url
operator|.
name|path
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|url
operator|.
name|setPath
argument_list|(
name|url
operator|.
name|path
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|defaultSuffix
argument_list|)
expr_stmt|;
name|urls
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
return|return
name|urls
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of strings containing the absolute paths of the     selected files in the dialog. If no files are selected, or     the mode is not ExistingFiles or ExistingFile, selectedFiles() contains the current path in the viewport.      \sa selectedNameFilter(), selectFile() */
end_comment
begin_function
DECL|function|selectedFiles
name|QStringList
name|QFileDialog
operator|::
name|selectedFiles
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
name|QStringList
name|files
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QUrl
modifier|&
name|file
decl|,
name|d
operator|->
name|userSelectedFiles
argument_list|()
control|)
name|files
operator|.
name|append
argument_list|(
name|file
operator|.
name|toLocalFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
operator|&&
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
block|{
specifier|const
name|FileMode
name|fm
init|=
name|fileMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|fm
operator|!=
name|ExistingFile
operator|&&
name|fm
operator|!=
name|ExistingFiles
condition|)
name|files
operator|.
name|append
argument_list|(
name|d
operator|->
name|rootIndex
argument_list|()
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of urls containing the selected files in the dialog.     If no files are selected, or the mode is not ExistingFiles or     ExistingFile, selectedUrls() contains the current path in the viewport.      \sa selectedNameFilter(), selectUrl()     \since 5.2 */
end_comment
begin_function
DECL|function|selectedUrls
name|QList
argument_list|<
name|QUrl
argument_list|>
name|QFileDialog
operator|::
name|selectedUrls
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|nativeDialogInUse
condition|)
block|{
return|return
name|d
operator|->
name|userSelectedFiles
argument_list|()
return|;
block|}
else|else
block|{
name|QList
argument_list|<
name|QUrl
argument_list|>
name|urls
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|file
decl|,
name|selectedFiles
argument_list|()
control|)
name|urls
operator|.
name|append
argument_list|(
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|urls
return|;
block|}
block|}
end_function
begin_comment
comment|/*     Makes a list of filters from ;;-separated text.     Used by the mac and windows implementations */
end_comment
begin_function
DECL|function|qt_make_filter_list
name|QStringList
name|qt_make_filter_list
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
block|{
name|QString
name|f
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QStringList
argument_list|()
return|;
name|QString
name|sep
argument_list|(
name|QLatin1String
argument_list|(
literal|";;"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|f
operator|.
name|indexOf
argument_list|(
name|sep
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|f
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|,
literal|0
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|sep
operator|=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|i
operator|=
name|f
operator|.
name|indexOf
argument_list|(
name|sep
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|f
operator|.
name|split
argument_list|(
name|sep
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Sets the filter used in the file dialog to the given \a filter.      If \a filter contains a pair of parentheses containing one or more     filename-wildcard patterns, separated by spaces, then only the     text contained in the parentheses is used as the filter. This means     that these calls are all equivalent:      \snippet code/src_gui_dialogs_qfiledialog.cpp 6      \sa setMimeTypeFilters(), setNameFilters() */
end_comment
begin_function
DECL|function|setNameFilter
name|void
name|QFileDialog
operator|::
name|setNameFilter
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
block|{
name|setNameFilters
argument_list|(
name|qt_make_filter_list
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QFileDialog::nameFilterDetailsVisible     \obsolete     \brief This property holds whether the filter details is shown or not.     \since 4.4      When this property is \c true (the default), the filter details are shown     in the combo box.  When the property is set to false, these are hidden.      Use setOption(HideNameFilterDetails, !\e enabled) or     !testOption(HideNameFilterDetails). */
end_comment
begin_function
DECL|function|setNameFilterDetailsVisible
name|void
name|QFileDialog
operator|::
name|setNameFilterDetailsVisible
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|setOption
argument_list|(
name|HideNameFilterDetails
argument_list|,
operator|!
name|enabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isNameFilterDetailsVisible
name|bool
name|QFileDialog
operator|::
name|isNameFilterDetailsVisible
parameter_list|()
specifier|const
block|{
return|return
operator|!
name|testOption
argument_list|(
name|HideNameFilterDetails
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     Strip the filters by removing the details, e.g. (*.*). */
end_comment
begin_function
DECL|function|qt_strip_filters
name|QStringList
name|qt_strip_filters
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|filters
parameter_list|)
block|{
name|QStringList
name|strippedFilters
decl_stmt|;
name|QRegExp
name|r
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QPlatformFileDialogHelper
operator|::
name|filterRegExp
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filters
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|filterName
decl_stmt|;
name|int
name|index
init|=
name|r
operator|.
name|indexIn
argument_list|(
name|filters
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
name|filterName
operator|=
name|r
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|strippedFilters
operator|.
name|append
argument_list|(
name|filterName
operator|.
name|simplified
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|strippedFilters
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Sets the \a filters used in the file dialog.      Note that the filter \b{*.*} is not portable, because the historical     assumption that the file extension determines the file type is not     consistent on every operating system. It is possible to have a file with no     dot in its name (for example, \c Makefile). In a native Windows file     dialog, \b{*.*} will match such files, while in other types of file dialogs     it may not. So it is better to use \b{*} if you mean to select any file.      \snippet code/src_gui_dialogs_qfiledialog.cpp 7      \l setMimeTypeFilters() has the advantage of providing all possible name     filters for each file type. For example, JPEG images have three possible     extensions; if your application can open such files, selecting the     \c image/jpeg mime type as a filter will allow you to open all of them. */
end_comment
begin_function
DECL|function|setNameFilters
name|void
name|QFileDialog
operator|::
name|setNameFilters
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|filters
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|defaultFileTypes
operator|=
operator|(
name|filters
operator|==
name|QStringList
argument_list|(
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"All Files (*)"
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|QStringList
name|cleanedFilters
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filters
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|cleanedFilters
operator|<<
name|filters
index|[
name|i
index|]
operator|.
name|simplified
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|options
operator|->
name|setNameFilters
argument_list|(
name|cleanedFilters
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
return|return;
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|cleanedFilters
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|testOption
argument_list|(
name|HideNameFilterDetails
argument_list|)
condition|)
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|addItems
argument_list|(
name|qt_strip_filters
argument_list|(
name|cleanedFilters
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|addItems
argument_list|(
name|cleanedFilters
argument_list|)
expr_stmt|;
name|d
operator|->
name|_q_useNameFilter
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns the file type filters that are in operation on this file     dialog. */
end_comment
begin_function
DECL|function|nameFilters
name|QStringList
name|QFileDialog
operator|::
name|nameFilters
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|options
operator|->
name|nameFilters
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Sets the current file type \a filter. Multiple filters can be     passed in \a filter by separating them with semicolons or spaces.      \sa setNameFilter(), setNameFilters(), selectedNameFilter() */
end_comment
begin_function
DECL|function|selectNameFilter
name|void
name|QFileDialog
operator|::
name|selectNameFilter
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|options
operator|->
name|setInitiallySelectedNameFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
block|{
name|d
operator|->
name|selectNameFilter_sys
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|testOption
argument_list|(
name|HideNameFilterDetails
argument_list|)
condition|)
block|{
specifier|const
name|QStringList
name|filters
init|=
name|qt_strip_filters
argument_list|(
name|qt_make_filter_list
argument_list|(
name|filter
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
name|i
operator|=
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|findText
argument_list|(
name|filters
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|i
operator|=
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|findText
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|setCurrentIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|d
operator|->
name|_q_useNameFilter
argument_list|(
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns the filter that the user selected in the file dialog.      \sa selectedFiles() */
end_comment
begin_function
DECL|function|selectedNameFilter
name|QString
name|QFileDialog
operator|::
name|selectedNameFilter
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
return|return
name|d
operator|->
name|selectedNameFilter_sys
argument_list|()
return|;
return|return
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|currentText
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns the filter that is used when displaying files.      \sa setFilter() */
end_comment
begin_function
DECL|function|filter
name|QDir
operator|::
name|Filters
name|QFileDialog
operator|::
name|filter
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
return|return
name|d
operator|->
name|model
operator|->
name|filter
argument_list|()
return|;
return|return
name|d
operator|->
name|options
operator|->
name|filter
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Sets the filter used by the model to \a filters. The filter is used     to specify the kind of files that should be shown.      \sa filter() */
end_comment
begin_function
DECL|function|setFilter
name|void
name|QFileDialog
operator|::
name|setFilter
parameter_list|(
name|QDir
operator|::
name|Filters
name|filters
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|options
operator|->
name|setFilter
argument_list|(
name|filters
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
block|{
name|d
operator|->
name|setFilter_sys
argument_list|()
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|model
operator|->
name|setFilter
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|d
operator|->
name|showHiddenAction
operator|->
name|setChecked
argument_list|(
operator|(
name|filters
operator|&
name|QDir
operator|::
name|Hidden
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nameFilterForMime
specifier|static
name|QString
name|nameFilterForMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|)
block|{
name|QMimeDatabase
name|db
decl_stmt|;
name|QMimeType
name|mime
argument_list|(
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|mimeType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mime
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|mime
operator|.
name|isDefault
argument_list|()
condition|)
block|{
return|return
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"All files (*)"
argument_list|)
return|;
block|}
else|else
block|{
specifier|const
name|QString
name|patterns
init|=
name|mime
operator|.
name|globPatterns
argument_list|()
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|mime
operator|.
name|comment
argument_list|()
operator|+
name|QStringLiteral
argument_list|(
literal|" ("
argument_list|)
operator|+
name|patterns
operator|+
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
return|;
block|}
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.2      Sets the \a filters used in the file dialog, from a list of MIME types.      Convenience method for setNameFilters().     Uses QMimeType to create a name filter from the glob patterns and description     defined in each MIME type.      Use application/octet-stream for the "All files (*)" filter, since that     is the base MIME type for all files.      Calling setMimeTypeFilters overrides any previously set name filters,     and changes the return value of nameFilters().      \snippet code/src_gui_dialogs_qfiledialog.cpp 13 */
end_comment
begin_function
DECL|function|setMimeTypeFilters
name|void
name|QFileDialog
operator|::
name|setMimeTypeFilters
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|filters
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|QStringList
name|nameFilters
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|mimeType
decl|,
name|filters
control|)
block|{
specifier|const
name|QString
name|text
init|=
name|nameFilterForMime
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|nameFilters
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|setNameFilters
argument_list|(
name|nameFilters
argument_list|)
expr_stmt|;
name|d
operator|->
name|options
operator|->
name|setMimeTypeFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 5.2      Returns the MIME type filters that are in operation on this file     dialog. */
end_comment
begin_function
DECL|function|mimeTypeFilters
name|QStringList
name|QFileDialog
operator|::
name|mimeTypeFilters
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|options
operator|->
name|mimeTypeFilters
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.2      Sets the current MIME type \a filter.  */
end_comment
begin_function
DECL|function|selectMimeTypeFilter
name|void
name|QFileDialog
operator|::
name|selectMimeTypeFilter
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
block|{
specifier|const
name|QString
name|text
init|=
name|nameFilterForMime
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|selectNameFilter
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QFileDialog::viewMode     \brief the way files and directories are displayed in the dialog      By default, the \c Detail mode is used to display information about     files and directories.      \sa ViewMode */
end_comment
begin_function
DECL|function|setViewMode
name|void
name|QFileDialog
operator|::
name|setViewMode
parameter_list|(
name|QFileDialog
operator|::
name|ViewMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|options
operator|->
name|setViewMode
argument_list|(
cast|static_cast
argument_list|<
name|QFileDialogOptions
operator|::
name|ViewMode
argument_list|>
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
return|return;
if|if
condition|(
name|mode
operator|==
name|Detail
condition|)
name|d
operator|->
name|_q_showDetailsView
argument_list|()
expr_stmt|;
else|else
name|d
operator|->
name|_q_showListView
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|viewMode
name|QFileDialog
operator|::
name|ViewMode
name|QFileDialog
operator|::
name|viewMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
return|return
cast|static_cast
argument_list|<
name|QFileDialog
operator|::
name|ViewMode
argument_list|>
argument_list|(
name|d
operator|->
name|options
operator|->
name|viewMode
argument_list|()
argument_list|)
return|;
return|return
operator|(
name|d
operator|->
name|qFileDialogUi
operator|->
name|stackedWidget
operator|->
name|currentWidget
argument_list|()
operator|==
name|d
operator|->
name|qFileDialogUi
operator|->
name|listView
operator|->
name|parent
argument_list|()
condition|?
name|QFileDialog
operator|::
name|List
else|:
name|QFileDialog
operator|::
name|Detail
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QFileDialog::fileMode     \brief the file mode of the dialog      The file mode defines the number and type of items that the user is     expected to select in the dialog.      By default, this property is set to AnyFile.      This function will set the labels for the FileName and     \l{QFileDialog::}{Accept} \l{DialogLabel}s. It is possible to set     custom text after the call to setFileMode().      \sa FileMode */
end_comment
begin_function
DECL|function|setFileMode
name|void
name|QFileDialog
operator|::
name|setFileMode
parameter_list|(
name|QFileDialog
operator|::
name|FileMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|options
operator|->
name|setFileMode
argument_list|(
cast|static_cast
argument_list|<
name|QFileDialogOptions
operator|::
name|FileMode
argument_list|>
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
comment|// keep ShowDirsOnly option in sync with fileMode (BTW, DirectoryOnly is obsolete)
name|setOption
argument_list|(
name|ShowDirsOnly
argument_list|,
name|mode
operator|==
name|DirectoryOnly
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
return|return;
name|d
operator|->
name|retranslateWindowTitle
argument_list|()
expr_stmt|;
comment|// set selection mode and behavior
name|QAbstractItemView
operator|::
name|SelectionMode
name|selectionMode
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|QFileDialog
operator|::
name|ExistingFiles
condition|)
name|selectionMode
operator|=
name|QAbstractItemView
operator|::
name|ExtendedSelection
expr_stmt|;
else|else
name|selectionMode
operator|=
name|QAbstractItemView
operator|::
name|SingleSelection
expr_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|listView
operator|->
name|setSelectionMode
argument_list|(
name|selectionMode
argument_list|)
expr_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|setSelectionMode
argument_list|(
name|selectionMode
argument_list|)
expr_stmt|;
comment|// set filter
name|d
operator|->
name|model
operator|->
name|setFilter
argument_list|(
name|d
operator|->
name|filterForMode
argument_list|(
name|filter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// setup file type for directory
if|if
condition|(
name|mode
operator|==
name|DirectoryOnly
operator|||
name|mode
operator|==
name|Directory
condition|)
block|{
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Directories"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|updateFileNameLabel
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateOkButtonText
argument_list|()
expr_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|setEnabled
argument_list|(
operator|!
name|testOption
argument_list|(
name|ShowDirsOnly
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|_q_updateOkButton
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fileMode
name|QFileDialog
operator|::
name|FileMode
name|QFileDialog
operator|::
name|fileMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|FileMode
argument_list|>
argument_list|(
name|d
operator|->
name|options
operator|->
name|fileMode
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QFileDialog::acceptMode     \brief the accept mode of the dialog      The action mode defines whether the dialog is for opening or saving files.      By default, this property is set to \l{AcceptOpen}.      \sa AcceptMode */
end_comment
begin_function
DECL|function|setAcceptMode
name|void
name|QFileDialog
operator|::
name|setAcceptMode
parameter_list|(
name|QFileDialog
operator|::
name|AcceptMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|options
operator|->
name|setAcceptMode
argument_list|(
cast|static_cast
argument_list|<
name|QFileDialogOptions
operator|::
name|AcceptMode
argument_list|>
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
comment|// clear WA_DontShowOnScreen so that d->canBeNativeDialog() doesn't return false incorrectly
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
return|return;
name|QDialogButtonBox
operator|::
name|StandardButton
name|button
init|=
operator|(
name|mode
operator|==
name|AcceptOpen
condition|?
name|QDialogButtonBox
operator|::
name|Open
else|:
name|QDialogButtonBox
operator|::
name|Save
operator|)
decl_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|buttonBox
operator|->
name|setStandardButtons
argument_list|(
name|button
operator||
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
name|button
argument_list|)
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|_q_updateOkButton
argument_list|()
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|AcceptSave
condition|)
block|{
name|d
operator|->
name|qFileDialogUi
operator|->
name|lookInCombo
operator|->
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|retranslateWindowTitle
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Returns the file system model index that is the root index in the     views */
end_comment
begin_function
DECL|function|rootIndex
name|QModelIndex
name|QFileDialogPrivate
operator|::
name|rootIndex
parameter_list|()
specifier|const
block|{
return|return
name|mapToSource
argument_list|(
name|qFileDialogUi
operator|->
name|listView
operator|->
name|rootIndex
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|currentView
name|QAbstractItemView
modifier|*
name|QFileDialogPrivate
operator|::
name|currentView
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|qFileDialogUi
operator|->
name|stackedWidget
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|qFileDialogUi
operator|->
name|stackedWidget
operator|->
name|currentWidget
argument_list|()
operator|==
name|qFileDialogUi
operator|->
name|listView
operator|->
name|parent
argument_list|()
condition|)
return|return
name|qFileDialogUi
operator|->
name|listView
return|;
return|return
name|qFileDialogUi
operator|->
name|treeView
return|;
block|}
end_function
begin_function
DECL|function|lineEdit
name|QLineEdit
modifier|*
name|QFileDialogPrivate
operator|::
name|lineEdit
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|QLineEdit
operator|*
operator|)
name|qFileDialogUi
operator|->
name|fileNameEdit
return|;
block|}
end_function
begin_function
DECL|function|maxNameLength
name|int
name|QFileDialogPrivate
operator|::
name|maxNameLength
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
return|return
operator|::
name|pathconf
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|path
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
name|_PC_NAME_MAX
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
name|Q_UNUSED
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|MAX_PATH
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|DWORD
name|maxLength
decl_stmt|;
specifier|const
name|QString
name|drive
init|=
name|path
operator|.
name|left
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|::
name|GetVolumeInformation
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|drive
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
operator|&
name|maxLength
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
operator|==
literal|false
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|maxLength
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|path
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*     Sets the view root index to be the file system model index */
end_comment
begin_function
DECL|function|setRootIndex
name|void
name|QFileDialogPrivate
operator|::
name|setRootIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
condition|?
name|index
operator|.
name|model
argument_list|()
operator|==
name|model
else|:
literal|true
argument_list|)
expr_stmt|;
name|QModelIndex
name|idx
init|=
name|mapFromSource
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|setRootIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|listView
operator|->
name|setRootIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Select a file system model index     returns the index that was selected (or not depending upon sortfilterproxymodel) */
end_comment
begin_function
DECL|function|select
name|QModelIndex
name|QFileDialogPrivate
operator|::
name|select
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
condition|?
name|index
operator|.
name|model
argument_list|()
operator|==
name|model
else|:
literal|true
argument_list|)
expr_stmt|;
name|QModelIndex
name|idx
init|=
name|mapFromSource
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|qFileDialogUi
operator|->
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|isSelected
argument_list|(
name|idx
argument_list|)
condition|)
name|qFileDialogUi
operator|->
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|idx
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
operator||
name|QItemSelectionModel
operator|::
name|Rows
argument_list|)
expr_stmt|;
return|return
name|idx
return|;
block|}
end_function
begin_function
DECL|function|acceptMode
name|QFileDialog
operator|::
name|AcceptMode
name|QFileDialog
operator|::
name|acceptMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|AcceptMode
argument_list|>
argument_list|(
name|d
operator|->
name|options
operator|->
name|acceptMode
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QFileDialog::readOnly     \obsolete     \brief Whether the filedialog is read-only      If this property is set to false, the file dialog will allow renaming,     and deleting of files and directories and creating directories.      Use setOption(ReadOnly, \e enabled) or testOption(ReadOnly) instead. */
end_comment
begin_function
DECL|function|setReadOnly
name|void
name|QFileDialog
operator|::
name|setReadOnly
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|setOption
argument_list|(
name|ReadOnly
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isReadOnly
name|bool
name|QFileDialog
operator|::
name|isReadOnly
parameter_list|()
specifier|const
block|{
return|return
name|testOption
argument_list|(
name|ReadOnly
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QFileDialog::resolveSymlinks     \obsolete     \brief whether the filedialog should resolve shortcuts      If this property is set to true, the file dialog will resolve     shortcuts or symbolic links.      Use setOption(DontResolveSymlinks, !\a enabled) or     !testOption(DontResolveSymlinks). */
end_comment
begin_function
DECL|function|setResolveSymlinks
name|void
name|QFileDialog
operator|::
name|setResolveSymlinks
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|setOption
argument_list|(
name|DontResolveSymlinks
argument_list|,
operator|!
name|enabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resolveSymlinks
name|bool
name|QFileDialog
operator|::
name|resolveSymlinks
parameter_list|()
specifier|const
block|{
return|return
operator|!
name|testOption
argument_list|(
name|DontResolveSymlinks
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QFileDialog::confirmOverwrite     \obsolete     \brief whether the filedialog should ask before accepting a selected file,     when the accept mode is AcceptSave      Use setOption(DontConfirmOverwrite, !\e enabled) or     !testOption(DontConfirmOverwrite) instead. */
end_comment
begin_function
DECL|function|setConfirmOverwrite
name|void
name|QFileDialog
operator|::
name|setConfirmOverwrite
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|setOption
argument_list|(
name|DontConfirmOverwrite
argument_list|,
operator|!
name|enabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|confirmOverwrite
name|bool
name|QFileDialog
operator|::
name|confirmOverwrite
parameter_list|()
specifier|const
block|{
return|return
operator|!
name|testOption
argument_list|(
name|DontConfirmOverwrite
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QFileDialog::defaultSuffix     \brief suffix added to the filename if no other suffix was specified      This property specifies a string that will be added to the     filename if it has no suffix already. The suffix is typically     used to indicate the file type (e.g. "txt" indicates a text     file).      If the first character is a dot ('.'), it is removed. */
end_comment
begin_function
DECL|function|setDefaultSuffix
name|void
name|QFileDialog
operator|::
name|setDefaultSuffix
parameter_list|(
specifier|const
name|QString
modifier|&
name|suffix
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|options
operator|->
name|setDefaultSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultSuffix
name|QString
name|QFileDialog
operator|::
name|defaultSuffix
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|options
operator|->
name|defaultSuffix
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the browsing history of the filedialog to contain the given     \a paths. */
end_comment
begin_function
DECL|function|setHistory
name|void
name|QFileDialog
operator|::
name|setHistory
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
name|d
operator|->
name|qFileDialogUi
operator|->
name|lookInCombo
operator|->
name|setHistory
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setHistory
name|void
name|QFileDialogComboBox
operator|::
name|setHistory
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|)
block|{
name|m_history
operator|=
name|paths
expr_stmt|;
comment|// Only populate the first item, showPopup will populate the rest if needed
name|QList
argument_list|<
name|QUrl
argument_list|>
name|list
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|d_ptr
operator|->
name|model
operator|->
name|index
argument_list|(
name|d_ptr
operator|->
name|rootPath
argument_list|()
argument_list|)
decl_stmt|;
comment|//On windows the popup display the "C:\", convert to nativeSeparators
name|QUrl
name|url
init|=
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|idx
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|isValid
argument_list|()
condition|)
name|list
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|urlModel
operator|->
name|setUrls
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the browsing history of the filedialog as a list of paths. */
end_comment
begin_function
DECL|function|history
name|QStringList
name|QFileDialog
operator|::
name|history
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
return|return
name|QStringList
argument_list|()
return|;
name|QStringList
name|currentHistory
init|=
name|d
operator|->
name|qFileDialogUi
operator|->
name|lookInCombo
operator|->
name|history
argument_list|()
decl_stmt|;
comment|//On windows the popup display the "C:\", convert to nativeSeparators
name|QString
name|newHistory
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|d
operator|->
name|rootIndex
argument_list|()
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|currentHistory
operator|.
name|contains
argument_list|(
name|newHistory
argument_list|)
condition|)
name|currentHistory
operator|<<
name|newHistory
expr_stmt|;
return|return
name|currentHistory
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the item delegate used to render items in the views in the     file dialog to the given \a delegate.      \warning You should not share the same instance of a delegate between views.     Doing so can cause incorrect or unintuitive editing behavior since each     view connected to a given delegate may receive the \l{QAbstractItemDelegate::}{closeEditor()}     signal, and attempt to access, modify or close an editor that has already been closed.      Note that the model used is QFileSystemModel. It has custom item data roles, which is     described by the \l{QFileSystemModel::}{Roles} enum. You can use a QFileIconProvider if     you only want custom icons.      \sa itemDelegate(), setIconProvider(), QFileSystemModel */
end_comment
begin_function
DECL|function|setItemDelegate
name|void
name|QFileDialog
operator|::
name|setItemDelegate
parameter_list|(
name|QAbstractItemDelegate
modifier|*
name|delegate
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
return|return;
name|d
operator|->
name|qFileDialogUi
operator|->
name|listView
operator|->
name|setItemDelegate
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|setItemDelegate
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the item delegate used to render the items in the views in the filedialog. */
end_comment
begin_function
DECL|function|itemDelegate
name|QAbstractItemDelegate
modifier|*
name|QFileDialog
operator|::
name|itemDelegate
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|d
operator|->
name|qFileDialogUi
operator|->
name|listView
operator|->
name|itemDelegate
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the icon provider used by the filedialog to the specified \a provider. */
end_comment
begin_function
DECL|function|setIconProvider
name|void
name|QFileDialog
operator|::
name|setIconProvider
parameter_list|(
name|QFileIconProvider
modifier|*
name|provider
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
return|return;
name|d
operator|->
name|model
operator|->
name|setIconProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
comment|//It forces the refresh of all entries in the side bar, then we can get new icons
name|d
operator|->
name|qFileDialogUi
operator|->
name|sidebar
operator|->
name|setUrls
argument_list|(
name|d
operator|->
name|qFileDialogUi
operator|->
name|sidebar
operator|->
name|urls
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the icon provider used by the filedialog. */
end_comment
begin_function
DECL|function|iconProvider
name|QFileIconProvider
modifier|*
name|QFileDialog
operator|::
name|iconProvider
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|iconProvider
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setLabelTextControl
name|void
name|QFileDialogPrivate
operator|::
name|setLabelTextControl
parameter_list|(
name|QFileDialog
operator|::
name|DialogLabel
name|label
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
operator|!
name|qFileDialogUi
condition|)
return|return;
switch|switch
condition|(
name|label
condition|)
block|{
case|case
name|QFileDialog
operator|::
name|LookIn
case|:
name|qFileDialogUi
operator|->
name|lookInLabel
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFileDialog
operator|::
name|FileName
case|:
name|qFileDialogUi
operator|->
name|fileNameLabel
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFileDialog
operator|::
name|FileType
case|:
name|qFileDialogUi
operator|->
name|fileTypeLabel
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFileDialog
operator|::
name|Accept
case|:
if|if
condition|(
name|q_func
argument_list|()
operator|->
name|acceptMode
argument_list|()
operator|==
name|QFileDialog
operator|::
name|AcceptOpen
condition|)
block|{
if|if
condition|(
name|QPushButton
modifier|*
name|button
init|=
name|qFileDialogUi
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Open
argument_list|)
condition|)
name|button
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|QPushButton
modifier|*
name|button
init|=
name|qFileDialogUi
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Save
argument_list|)
condition|)
name|button
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QFileDialog
operator|::
name|Reject
case|:
if|if
condition|(
name|QPushButton
modifier|*
name|button
init|=
name|qFileDialogUi
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|)
condition|)
name|button
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_comment
comment|/*!     Sets the \a text shown in the filedialog in the specified \a label. */
end_comment
begin_function
DECL|function|setLabelText
name|void
name|QFileDialog
operator|::
name|setLabelText
parameter_list|(
name|DialogLabel
name|label
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|options
operator|->
name|setLabelText
argument_list|(
cast|static_cast
argument_list|<
name|QFileDialogOptions
operator|::
name|DialogLabel
argument_list|>
argument_list|(
name|label
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|d
operator|->
name|setLabelTextControl
argument_list|(
name|label
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the text shown in the filedialog in the specified \a label. */
end_comment
begin_function
DECL|function|labelText
name|QString
name|QFileDialog
operator|::
name|labelText
parameter_list|(
name|DialogLabel
name|label
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
return|return
name|d
operator|->
name|options
operator|->
name|labelText
argument_list|(
cast|static_cast
argument_list|<
name|QFileDialogOptions
operator|::
name|DialogLabel
argument_list|>
argument_list|(
name|label
argument_list|)
argument_list|)
return|;
name|QPushButton
modifier|*
name|button
decl_stmt|;
switch|switch
condition|(
name|label
condition|)
block|{
case|case
name|LookIn
case|:
return|return
name|d
operator|->
name|qFileDialogUi
operator|->
name|lookInLabel
operator|->
name|text
argument_list|()
return|;
case|case
name|FileName
case|:
return|return
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileNameLabel
operator|->
name|text
argument_list|()
return|;
case|case
name|FileType
case|:
return|return
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileTypeLabel
operator|->
name|text
argument_list|()
return|;
case|case
name|Accept
case|:
if|if
condition|(
name|acceptMode
argument_list|()
operator|==
name|AcceptOpen
condition|)
name|button
operator|=
name|d
operator|->
name|qFileDialogUi
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Open
argument_list|)
expr_stmt|;
else|else
name|button
operator|=
name|d
operator|->
name|qFileDialogUi
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Save
argument_list|)
expr_stmt|;
if|if
condition|(
name|button
condition|)
return|return
name|button
operator|->
name|text
argument_list|()
return|;
case|case
name|Reject
case|:
name|button
operator|=
name|d
operator|->
name|qFileDialogUi
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
if|if
condition|(
name|button
condition|)
return|return
name|button
operator|->
name|text
argument_list|()
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience static function that returns an existing file     selected by the user. If the user presses Cancel, it returns a null string.      \snippet code/src_gui_dialogs_qfiledialog.cpp 8      The function creates a modal file dialog with the given \a parent widget.     If \a parent is not 0, the dialog will be shown centered over the parent     widget.      The file dialog's working directory will be set to \a dir. If \a dir     includes a file name, the file will be selected. Only files that match the     given \a filter are shown. The filter selected is set to \a selectedFilter.     The parameters \a dir, \a selectedFilter, and \a filter may be empty     strings. If you want multiple filters, separate them with ';;', for     example:      \code     "Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)"     \endcode      The \a options argument holds various options about how to run the dialog,     see the QFileDialog::Option enum for more information on the flags you can     pass.      The dialog's caption is set to \a caption. If \a caption is not specified     then a default caption will be used.      On Windows, and Mac OS X, this static function will use the     native file dialog and not a QFileDialog.      On Windows the dialog will spin a blocking modal event loop that will not     dispatch any QTimers, and if \a parent is not 0 then it will position the     dialog just below the parent's title bar.      On Unix/X11, the normal behavior of the file dialog is to resolve and     follow symlinks. For example, if \c{/usr/tmp} is a symlink to \c{/var/tmp},     the file dialog will change to \c{/var/tmp} after entering \c{/usr/tmp}. If     \a options includes DontResolveSymlinks, the file dialog will treat     symlinks as regular directories.      \warning Do not delete \a parent during the execution of the dialog. If you     want to do this, you should create the dialog yourself using one of the     QFileDialog constructors.      \sa getOpenFileNames(), getSaveFileName(), getExistingDirectory() */
end_comment
begin_function
DECL|function|getOpenFileName
name|QString
name|QFileDialog
operator|::
name|getOpenFileName
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|,
name|Options
name|options
parameter_list|)
block|{
specifier|const
name|QStringList
name|schemes
init|=
name|QStringList
argument_list|(
name|QStringLiteral
argument_list|(
literal|"file"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QUrl
name|selectedUrl
init|=
name|getOpenFileUrl
argument_list|(
name|parent
argument_list|,
name|caption
argument_list|,
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|dir
argument_list|)
argument_list|,
name|filter
argument_list|,
name|selectedFilter
argument_list|,
name|options
argument_list|,
name|schemes
argument_list|)
decl_stmt|;
return|return
name|selectedUrl
operator|.
name|toLocalFile
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience static function that returns an existing file     selected by the user. If the user presses Cancel, it returns an     empty url.      The function is used similarly to QFileDialog::getOpenFileName(). In     particular \a parent, \a caption, \a dir, \a filter, \a selectedFilter     and \a options are used in the exact same way.      The main difference with QFileDialog::getOpenFileName() comes from     the ability offered to the user to select a remote file. That's why     the return type and the type of \a dir is QUrl.      The \a supportedSchemes argument allows to restrict the type of URLs the     user will be able to select. It is a way for the application to declare     the protocols it will support to fetch the file content. An empty list     means that no restriction is applied (the default).     Supported for local files ("file" scheme) is implicit and always enabled.     it is not necessary to include in the restriction.      When possible, this static function will use the native file dialog and     not a QFileDialog. On platforms which don't support selecting remote     files, Qt will allow to select only local files.      \sa getOpenFileName(), getOpenFileUrls(), getSaveFileUrl(), getExistingDirectoryUrl()     \since 5.2 */
end_comment
begin_function
DECL|function|getOpenFileUrl
name|QUrl
name|QFileDialog
operator|::
name|getOpenFileUrl
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QUrl
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|,
name|Options
name|options
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|supportedSchemes
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|supportedSchemes
argument_list|)
expr_stmt|;
comment|// TODO
name|QFileDialogArgs
name|args
decl_stmt|;
name|args
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|args
operator|.
name|caption
operator|=
name|caption
expr_stmt|;
name|args
operator|.
name|directory
operator|=
name|QFileDialogPrivate
operator|::
name|workingDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|args
operator|.
name|selection
operator|=
name|QFileDialogPrivate
operator|::
name|initialSelection
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|args
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|args
operator|.
name|mode
operator|=
name|ExistingFile
expr_stmt|;
name|args
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|QFileDialog
name|dialog
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectedFilter
operator|&&
operator|!
name|selectedFilter
operator|->
name|isEmpty
argument_list|()
condition|)
name|dialog
operator|.
name|selectNameFilter
argument_list|(
operator|*
name|selectedFilter
argument_list|)
expr_stmt|;
if|if
condition|(
name|dialog
operator|.
name|exec
argument_list|()
operator|==
name|QDialog
operator|::
name|Accepted
condition|)
block|{
if|if
condition|(
name|selectedFilter
condition|)
operator|*
name|selectedFilter
operator|=
name|dialog
operator|.
name|selectedNameFilter
argument_list|()
expr_stmt|;
return|return
name|dialog
operator|.
name|selectedUrls
argument_list|()
operator|.
name|value
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|QUrl
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience static function that will return one or more existing     files selected by the user.      \snippet code/src_gui_dialogs_qfiledialog.cpp 9      This function creates a modal file dialog with the given \a parent widget.     If \a parent is not 0, the dialog will be shown centered over the parent     widget.      The file dialog's working directory will be set to \a dir. If \a dir     includes a file name, the file will be selected. The filter is set to     \a filter so that only those files which match the filter are shown. The     filter selected is set to \a selectedFilter. The parameters \a dir,     \a selectedFilter and \a filter may be empty strings. If you need multiple     filters, separate them with ';;', for instance:      \code     "Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)"     \endcode      The dialog's caption is set to \a caption. If \a caption is not specified     then a default caption will be used.      On Windows, and Mac OS X, this static function will use the     native file dialog and not a QFileDialog.      On Windows the dialog will spin a blocking modal event loop that will not     dispatch any QTimers, and if \a parent is not 0 then it will position the     dialog just below the parent's title bar.      On Unix/X11, the normal behavior of the file dialog is to resolve and     follow symlinks. For example, if \c{/usr/tmp} is a symlink to \c{/var/tmp},     the file dialog will change to \c{/var/tmp} after entering \c{/usr/tmp}.     The \a options argument holds various options about how to run the dialog,     see the QFileDialog::Option enum for more information on the flags you can     pass.      \note If you want to iterate over the list of files, you should iterate     over a copy. For example:      \snippet code/src_gui_dialogs_qfiledialog.cpp 10      \warning Do not delete \a parent during the execution of the dialog. If you     want to do this, you should create the dialog yourself using one of the     QFileDialog constructors.      \sa getOpenFileName(), getSaveFileName(), getExistingDirectory() */
end_comment
begin_function
DECL|function|getOpenFileNames
name|QStringList
name|QFileDialog
operator|::
name|getOpenFileNames
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|,
name|Options
name|options
parameter_list|)
block|{
specifier|const
name|QStringList
name|schemes
init|=
name|QStringList
argument_list|(
name|QStringLiteral
argument_list|(
literal|"file"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QUrl
argument_list|>
name|selectedUrls
init|=
name|getOpenFileUrls
argument_list|(
name|parent
argument_list|,
name|caption
argument_list|,
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|dir
argument_list|)
argument_list|,
name|filter
argument_list|,
name|selectedFilter
argument_list|,
name|options
argument_list|,
name|schemes
argument_list|)
decl_stmt|;
name|QStringList
name|fileNames
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QUrl
modifier|&
name|url
decl|,
name|selectedUrls
control|)
name|fileNames
operator|<<
name|url
operator|.
name|toLocalFile
argument_list|()
expr_stmt|;
return|return
name|fileNames
return|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience static function that will return or or more existing     files selected by the user. If the user presses Cancel, it returns an     empty list.      The function is used similarly to QFileDialog::getOpenFileNames(). In     particular \a parent, \a caption, \a dir, \a filter, \a selectedFilter     and \a options are used in the exact same way.      The main difference with QFileDialog::getOpenFileNames() comes from     the ability offered to the user to select remote files. That's why     the return type and the type of \a dir are respectively QList<QUrl>     and QUrl.      The \a supportedSchemes argument allows to restrict the type of URLs the     user will be able to select. It is a way for the application to declare     the protocols it will support to fetch the file content. An empty list     means that no restriction is applied (the default).     Supported for local files ("file" scheme) is implicit and always enabled.     it is not necessary to include in the restriction.      When possible, this static function will use the native file dialog and     not a QFileDialog. On platforms which don't support selecting remote     files, Qt will allow to select only local files.      \sa getOpenFileNames(), getOpenFileUrl(), getSaveFileUrl(), getExistingDirectoryUrl()     \since 5.2 */
end_comment
begin_function
DECL|function|getOpenFileUrls
name|QList
argument_list|<
name|QUrl
argument_list|>
name|QFileDialog
operator|::
name|getOpenFileUrls
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QUrl
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|,
name|Options
name|options
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|supportedSchemes
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|supportedSchemes
argument_list|)
expr_stmt|;
name|QFileDialogArgs
name|args
decl_stmt|;
name|args
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|args
operator|.
name|caption
operator|=
name|caption
expr_stmt|;
name|args
operator|.
name|directory
operator|=
name|QFileDialogPrivate
operator|::
name|workingDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|args
operator|.
name|selection
operator|=
name|QFileDialogPrivate
operator|::
name|initialSelection
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|args
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|args
operator|.
name|mode
operator|=
name|ExistingFiles
expr_stmt|;
name|args
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|QFileDialog
name|dialog
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectedFilter
operator|&&
operator|!
name|selectedFilter
operator|->
name|isEmpty
argument_list|()
condition|)
name|dialog
operator|.
name|selectNameFilter
argument_list|(
operator|*
name|selectedFilter
argument_list|)
expr_stmt|;
if|if
condition|(
name|dialog
operator|.
name|exec
argument_list|()
operator|==
name|QDialog
operator|::
name|Accepted
condition|)
block|{
if|if
condition|(
name|selectedFilter
condition|)
operator|*
name|selectedFilter
operator|=
name|dialog
operator|.
name|selectedNameFilter
argument_list|()
expr_stmt|;
return|return
name|dialog
operator|.
name|selectedUrls
argument_list|()
return|;
block|}
return|return
name|QList
argument_list|<
name|QUrl
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience static function that will return a file name selected     by the user. The file does not have to exist.      It creates a modal file dialog with the given \a parent widget. If     \a parent is not 0, the dialog will be shown centered over the parent     widget.      \snippet code/src_gui_dialogs_qfiledialog.cpp 11      The file dialog's working directory will be set to \a dir. If \a dir     includes a file name, the file will be selected. Only files that match the     \a filter are shown. The filter selected is set to \a selectedFilter. The     parameters \a dir, \a selectedFilter, and \a filter may be empty strings.     Multiple filters are separated with ';;'. For instance:      \code     "Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)"     \endcode      The \a options argument holds various options about how to run the dialog,     see the QFileDialog::Option enum for more information on the flags you can     pass.      The default filter can be chosen by setting \a selectedFilter to the     desired value.      The dialog's caption is set to \a caption. If \a caption is not specified,     a default caption will be used.      On Windows, and Mac OS X, this static function will use the     native file dialog and not a QFileDialog.      On Windows the dialog will spin a blocking modal event loop that will not     dispatch any QTimers, and if \a parent is not 0 then it will position the     dialog just below the parent's title bar. On Mac OS X, with its native file     dialog, the filter argument is ignored.      On Unix/X11, the normal behavior of the file dialog is to resolve and     follow symlinks. For example, if \c{/usr/tmp} is a symlink to \c{/var/tmp},     the file dialog will change to \c{/var/tmp} after entering \c{/usr/tmp}. If     \a options includes DontResolveSymlinks the file dialog will treat symlinks     as regular directories.      \warning Do not delete \a parent during the execution of the dialog. If you     want to do this, you should create the dialog yourself using one of the     QFileDialog constructors.      \sa getOpenFileName(), getOpenFileNames(), getExistingDirectory() */
end_comment
begin_function
DECL|function|getSaveFileName
name|QString
name|QFileDialog
operator|::
name|getSaveFileName
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|,
name|Options
name|options
parameter_list|)
block|{
specifier|const
name|QStringList
name|schemes
init|=
name|QStringList
argument_list|(
name|QStringLiteral
argument_list|(
literal|"file"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QUrl
name|selectedUrl
init|=
name|getSaveFileUrl
argument_list|(
name|parent
argument_list|,
name|caption
argument_list|,
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|dir
argument_list|)
argument_list|,
name|filter
argument_list|,
name|selectedFilter
argument_list|,
name|options
argument_list|,
name|schemes
argument_list|)
decl_stmt|;
return|return
name|selectedUrl
operator|.
name|toLocalFile
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience static function that returns a file selected by     the user. The file does not have to exist. If the user presses Cancel,     it returns an empty url.      The function is used similarly to QFileDialog::getSaveFileName(). In     particular \a parent, \a caption, \a dir, \a filter, \a selectedFilter     and \a options are used in the exact same way.      The main difference with QFileDialog::getSaveFileName() comes from     the ability offered to the user to select a remote file. That's why     the return type and the type of \a dir is QUrl.      The \a supportedSchemes argument allows to restrict the type of URLs the     user will be able to select. It is a way for the application to declare     the protocols it will support to save the file content. An empty list     means that no restriction is applied (the default).     Supported for local files ("file" scheme) is implicit and always enabled.     it is not necessary to include in the restriction.      When possible, this static function will use the native file dialog and     not a QFileDialog. On platforms which don't support selecting remote     files, Qt will allow to select only local files.      \sa getSaveFileName(), getOpenFileUrl(), getOpenFileUrls(), getExistingDirectoryUrl()     \since 5.2 */
end_comment
begin_function
DECL|function|getSaveFileUrl
name|QUrl
name|QFileDialog
operator|::
name|getSaveFileUrl
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QUrl
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|,
name|Options
name|options
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|supportedSchemes
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|supportedSchemes
argument_list|)
expr_stmt|;
name|QFileDialogArgs
name|args
decl_stmt|;
name|args
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|args
operator|.
name|caption
operator|=
name|caption
expr_stmt|;
name|args
operator|.
name|directory
operator|=
name|QFileDialogPrivate
operator|::
name|workingDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|args
operator|.
name|selection
operator|=
name|QFileDialogPrivate
operator|::
name|initialSelection
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|args
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|args
operator|.
name|mode
operator|=
name|AnyFile
expr_stmt|;
name|args
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|QFileDialog
name|dialog
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setAcceptMode
argument_list|(
name|AcceptSave
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedFilter
operator|&&
operator|!
name|selectedFilter
operator|->
name|isEmpty
argument_list|()
condition|)
name|dialog
operator|.
name|selectNameFilter
argument_list|(
operator|*
name|selectedFilter
argument_list|)
expr_stmt|;
if|if
condition|(
name|dialog
operator|.
name|exec
argument_list|()
operator|==
name|QDialog
operator|::
name|Accepted
condition|)
block|{
if|if
condition|(
name|selectedFilter
condition|)
operator|*
name|selectedFilter
operator|=
name|dialog
operator|.
name|selectedNameFilter
argument_list|()
expr_stmt|;
return|return
name|dialog
operator|.
name|selectedUrls
argument_list|()
operator|.
name|value
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|QUrl
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience static function that will return an existing     directory selected by the user.      \snippet code/src_gui_dialogs_qfiledialog.cpp 12      This function creates a modal file dialog with the given \a parent widget.     If \a parent is not 0, the dialog will be shown centered over the parent     widget.      The dialog's working directory is set to \a dir, and the caption is set to     \a caption. Either of these may be an empty string in which case the     current directory and a default caption will be used respectively.      The \a options argument holds various options about how to run the dialog,     see the QFileDialog::Option enum for more information on the flags you can     pass. To ensure a native file dialog, \l{QFileDialog::}{ShowDirsOnly} must     be set.      On Windows, and Mac OS X, this static function will use the     native file dialog and not a QFileDialog. On Windows CE, if the device has     no native file dialog, a QFileDialog will be used.      On Unix/X11, the normal behavior of the file dialog is to resolve and     follow symlinks. For example, if \c{/usr/tmp} is a symlink to \c{/var/tmp},     the file dialog will change to \c{/var/tmp} after entering \c{/usr/tmp}. If     \a options includes DontResolveSymlinks, the file dialog will treat     symlinks as regular directories.      On Windows the dialog will spin a blocking modal event loop that will not     dispatch any QTimers, and if \a parent is not 0 then it will position the     dialog just below the parent's title bar.      \warning Do not delete \a parent during the execution of the dialog. If you     want to do this, you should create the dialog yourself using one of the     QFileDialog constructors.      \sa getOpenFileName(), getOpenFileNames(), getSaveFileName() */
end_comment
begin_function
DECL|function|getExistingDirectory
name|QString
name|QFileDialog
operator|::
name|getExistingDirectory
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
name|Options
name|options
parameter_list|)
block|{
specifier|const
name|QStringList
name|schemes
init|=
name|QStringList
argument_list|(
name|QStringLiteral
argument_list|(
literal|"file"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QUrl
name|selectedUrl
init|=
name|getExistingDirectoryUrl
argument_list|(
name|parent
argument_list|,
name|caption
argument_list|,
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|dir
argument_list|)
argument_list|,
name|options
argument_list|,
name|schemes
argument_list|)
decl_stmt|;
return|return
name|selectedUrl
operator|.
name|toLocalFile
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience static function that will return an existing     directory selected by the user. If the user presses Cancel, it     returns an empty url.      The function is used similarly to QFileDialog::getExistingDirectory().     In particular \a parent, \a caption, \a dir and \a options are used     in the exact same way.      The main difference with QFileDialog::getExistingDirectory() comes from     the ability offered to the user to select a remote directory. That's why     the return type and the type of \a dir is QUrl.      The \a supportedSchemes argument allows to restrict the type of URLs the     user will be able to select. It is a way for the application to declare     the protocols it will support to fetch the file content. An empty list     means that no restriction is applied (the default).     Supported for local files ("file" scheme) is implicit and always enabled.     it is not necessary to include in the restriction.      When possible, this static function will use the native file dialog and     not a QFileDialog. On platforms which don't support selecting remote     files, Qt will allow to select only local files.      \sa getExistingDirectory(), getOpenFileUrl(), getOpenFileUrls(), getSaveFileUrl()     \since 5.2 */
end_comment
begin_function
DECL|function|getExistingDirectoryUrl
name|QUrl
name|QFileDialog
operator|::
name|getExistingDirectoryUrl
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QUrl
modifier|&
name|dir
parameter_list|,
name|Options
name|options
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|supportedSchemes
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|supportedSchemes
argument_list|)
expr_stmt|;
name|QFileDialogArgs
name|args
decl_stmt|;
name|args
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|args
operator|.
name|caption
operator|=
name|caption
expr_stmt|;
name|args
operator|.
name|directory
operator|=
name|QFileDialogPrivate
operator|::
name|workingDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|args
operator|.
name|mode
operator|=
operator|(
name|options
operator|&
name|ShowDirsOnly
condition|?
name|DirectoryOnly
else|:
name|Directory
operator|)
expr_stmt|;
name|args
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|QFileDialog
name|dialog
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|dialog
operator|.
name|exec
argument_list|()
operator|==
name|QDialog
operator|::
name|Accepted
condition|)
return|return
name|dialog
operator|.
name|selectedUrls
argument_list|()
operator|.
name|value
argument_list|(
literal|0
argument_list|)
return|;
return|return
name|QUrl
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|_qt_get_directory
specifier|inline
specifier|static
name|QUrl
name|_qt_get_directory
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
if|if
condition|(
name|url
operator|.
name|isLocalFile
argument_list|()
condition|)
block|{
name|QFileInfo
name|info
init|=
name|QFileInfo
argument_list|(
name|QDir
operator|::
name|current
argument_list|()
argument_list|,
name|url
operator|.
name|toLocalFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|exists
argument_list|()
operator|&&
name|info
operator|.
name|isDir
argument_list|()
condition|)
return|return
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|QDir
operator|::
name|cleanPath
argument_list|(
name|info
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
argument_list|)
return|;
name|info
operator|.
name|setFile
argument_list|(
name|info
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|exists
argument_list|()
operator|&&
name|info
operator|.
name|isDir
argument_list|()
condition|)
return|return
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|info
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
return|;
return|return
name|QUrl
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|url
return|;
block|}
block|}
end_function
begin_comment
comment|/*     Get the initial directory URL      \sa initialSelection()  */
end_comment
begin_function
DECL|function|workingDirectory
name|QUrl
name|QFileDialogPrivate
operator|::
name|workingDirectory
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
if|if
condition|(
operator|!
name|url
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QUrl
name|directory
init|=
name|_qt_get_directory
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|directory
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|directory
return|;
block|}
name|QUrl
name|directory
init|=
name|_qt_get_directory
argument_list|(
operator|*
name|lastVisitedDir
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|directory
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|directory
return|;
return|return
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     Get the initial selection given a path.  The initial directory     can contain both the initial directory and initial selection     /home/user/foo.txt      \sa workingDirectory()  */
end_comment
begin_function
DECL|function|initialSelection
name|QString
name|QFileDialogPrivate
operator|::
name|initialSelection
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
if|if
condition|(
name|url
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|url
operator|.
name|isLocalFile
argument_list|()
condition|)
block|{
name|QFileInfo
name|info
argument_list|(
name|url
operator|.
name|toLocalFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|isDir
argument_list|()
condition|)
return|return
name|info
operator|.
name|fileName
argument_list|()
return|;
else|else
return|return
name|QString
argument_list|()
return|;
block|}
comment|// With remote URLs we can only assume.
return|return
name|url
operator|.
name|fileName
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!  \reimp */
end_comment
begin_function
DECL|function|done
name|void
name|QFileDialog
operator|::
name|done
parameter_list|(
name|int
name|result
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|QDialog
operator|::
name|done
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|receiverToDisconnectOnClose
condition|)
block|{
name|disconnect
argument_list|(
name|this
argument_list|,
name|d
operator|->
name|signalToDisconnectOnClose
argument_list|,
name|d
operator|->
name|receiverToDisconnectOnClose
argument_list|,
name|d
operator|->
name|memberToDisconnectOnClose
argument_list|)
expr_stmt|;
name|d
operator|->
name|receiverToDisconnectOnClose
operator|=
literal|0
expr_stmt|;
block|}
name|d
operator|->
name|memberToDisconnectOnClose
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|signalToDisconnectOnClose
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!  \reimp */
end_comment
begin_function
DECL|function|accept
name|void
name|QFileDialog
operator|::
name|accept
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
block|{
specifier|const
name|QList
argument_list|<
name|QUrl
argument_list|>
name|urls
init|=
name|selectedUrls
argument_list|()
decl_stmt|;
if|if
condition|(
name|urls
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|d
operator|->
name|_q_emitUrlsSelected
argument_list|(
name|urls
argument_list|)
expr_stmt|;
if|if
condition|(
name|urls
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
name|d
operator|->
name|_q_emitUrlSelected
argument_list|(
name|urls
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QDialog
operator|::
name|accept
argument_list|()
expr_stmt|;
return|return;
block|}
name|QStringList
name|files
init|=
name|selectedFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QString
name|lineEditText
init|=
name|d
operator|->
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
decl_stmt|;
comment|// "hidden feature" type .. and then enter, and it will move up a dir
comment|// special case for ".."
if|if
condition|(
name|lineEditText
operator|==
name|QLatin1String
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
name|d
operator|->
name|_q_navigateToParent
argument_list|()
expr_stmt|;
specifier|const
name|QSignalBlocker
name|blocker
argument_list|(
name|d
operator|->
name|qFileDialogUi
operator|->
name|fileNameEdit
argument_list|)
decl_stmt|;
name|d
operator|->
name|lineEdit
argument_list|()
operator|->
name|selectAll
argument_list|()
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|fileMode
argument_list|()
condition|)
block|{
case|case
name|DirectoryOnly
case|:
case|case
name|Directory
case|:
block|{
name|QString
name|fn
init|=
name|files
operator|.
name|first
argument_list|()
decl_stmt|;
name|QFileInfo
name|info
argument_list|(
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|exists
argument_list|()
condition|)
name|info
operator|=
name|QFileInfo
argument_list|(
name|d
operator|->
name|getEnvironmentVariable
argument_list|(
name|fn
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|exists
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_MESSAGEBOX
name|QString
name|message
init|=
name|tr
argument_list|(
literal|"%1\nDirectory not found.\nPlease verify the "
literal|"correct directory name was given."
argument_list|)
decl_stmt|;
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|windowTitle
argument_list|()
argument_list|,
name|message
operator|.
name|arg
argument_list|(
name|info
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_MESSAGEBOX
return|return;
block|}
if|if
condition|(
name|info
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|d
operator|->
name|emitFilesSelected
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|QDialog
operator|::
name|accept
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
case|case
name|AnyFile
case|:
block|{
name|QString
name|fn
init|=
name|files
operator|.
name|first
argument_list|()
decl_stmt|;
name|QFileInfo
name|info
argument_list|(
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|setDirectory
argument_list|(
name|info
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|info
operator|.
name|exists
argument_list|()
condition|)
block|{
name|int
name|maxNameLength
init|=
name|d
operator|->
name|maxNameLength
argument_list|(
name|info
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxNameLength
operator|>=
literal|0
operator|&&
name|info
operator|.
name|fileName
argument_list|()
operator|.
name|length
argument_list|()
operator|>
name|maxNameLength
condition|)
return|return;
block|}
comment|// check if we have to ask for permission to overwrite the file
if|if
condition|(
operator|!
name|info
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|confirmOverwrite
argument_list|()
operator|||
name|acceptMode
argument_list|()
operator|==
name|AcceptOpen
condition|)
block|{
name|d
operator|->
name|emitFilesSelected
argument_list|(
name|QStringList
argument_list|(
name|fn
argument_list|)
argument_list|)
expr_stmt|;
name|QDialog
operator|::
name|accept
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MESSAGEBOX
block|}
else|else
block|{
if|if
condition|(
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|windowTitle
argument_list|()
argument_list|,
name|tr
argument_list|(
literal|"%1 already exists.\nDo you want to replace it?"
argument_list|)
operator|.
name|arg
argument_list|(
name|info
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|)
operator|==
name|QMessageBox
operator|::
name|Yes
condition|)
block|{
name|d
operator|->
name|emitFilesSelected
argument_list|(
name|QStringList
argument_list|(
name|fn
argument_list|)
argument_list|)
expr_stmt|;
name|QDialog
operator|::
name|accept
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
return|return;
block|}
case|case
name|ExistingFile
case|:
case|case
name|ExistingFiles
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFileInfo
name|info
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|exists
argument_list|()
condition|)
name|info
operator|=
name|QFileInfo
argument_list|(
name|d
operator|->
name|getEnvironmentVariable
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|exists
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_MESSAGEBOX
name|QString
name|message
init|=
name|tr
argument_list|(
literal|"%1\nFile not found.\nPlease verify the "
literal|"correct file name was given."
argument_list|)
decl_stmt|;
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|windowTitle
argument_list|()
argument_list|,
name|message
operator|.
name|arg
argument_list|(
name|info
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_MESSAGEBOX
return|return;
block|}
if|if
condition|(
name|info
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|setDirectory
argument_list|(
name|info
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|lineEdit
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|d
operator|->
name|emitFilesSelected
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|QDialog
operator|::
name|accept
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      Create widgets, layout and set default values */
end_comment
begin_function
DECL|function|init
name|void
name|QFileDialogPrivate
operator|::
name|init
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|directory
parameter_list|,
specifier|const
name|QString
modifier|&
name|nameFilter
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|caption
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|useDefaultCaption
operator|=
literal|false
expr_stmt|;
name|setWindowTitle
operator|=
name|caption
expr_stmt|;
name|q
operator|->
name|setWindowTitle
argument_list|(
name|caption
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|setAcceptMode
argument_list|(
name|QFileDialog
operator|::
name|AcceptOpen
argument_list|)
expr_stmt|;
name|nativeDialogInUse
operator|=
operator|(
name|canBeNativeDialog
argument_list|()
operator|&&
name|platformFileDialogHelper
argument_list|()
operator|!=
literal|0
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|nativeDialogInUse
condition|)
name|createWidgets
argument_list|()
expr_stmt|;
name|q
operator|->
name|setFileMode
argument_list|(
name|QFileDialog
operator|::
name|AnyFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nameFilter
operator|.
name|isEmpty
argument_list|()
condition|)
name|q
operator|->
name|setNameFilter
argument_list|(
name|nameFilter
argument_list|)
expr_stmt|;
name|q
operator|->
name|setDirectoryUrl
argument_list|(
name|workingDirectory
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|selectFile
argument_list|(
name|initialSelection
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SETTINGS
specifier|const
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"QtProject"
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|->
name|restoreState
argument_list|(
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt/filedialog"
argument_list|)
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_EMBEDDED_SMALLSCREEN
argument_list|)
name|qFileDialogUi
operator|->
name|lookInLabel
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|fileNameLabel
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|fileTypeLabel
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|sidebar
operator|->
name|hide
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|q
operator|->
name|resize
argument_list|(
name|q
operator|->
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Create the widgets, set properties and connections */
end_comment
begin_function
DECL|function|createWidgets
name|void
name|QFileDialogPrivate
operator|::
name|createWidgets
parameter_list|()
block|{
if|if
condition|(
name|qFileDialogUi
condition|)
return|return;
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|model
operator|=
operator|new
name|QFileSystemModel
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|options
operator|->
name|setFilter
argument_list|(
name|model
operator|->
name|filter
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_filesystem_model"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QPlatformFileDialogHelper
modifier|*
name|helper
init|=
name|platformFileDialogHelper
argument_list|()
condition|)
name|model
operator|->
name|setNameFilterDisables
argument_list|(
name|helper
operator|->
name|defaultNameFilterDisables
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|model
operator|->
name|setNameFilterDisables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|nativeDialogInUse
condition|)
name|deletePlatformHelper
argument_list|()
expr_stmt|;
name|model
operator|->
name|d_func
argument_list|()
operator|->
name|disableRecursiveSort
operator|=
literal|true
expr_stmt|;
name|QFileDialog
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|fileRenamed
argument_list|(
name|QString
argument_list|,
name|QString
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_fileRenamed
argument_list|(
name|QString
argument_list|,
name|QString
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QFileDialog
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rootPathChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_pathChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QFileDialog
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_rowsInserted
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|->
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|.
name|reset
argument_list|(
operator|new
name|Ui_QFileDialog
argument_list|()
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|setupUi
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QUrl
argument_list|>
name|initialBookmarks
decl_stmt|;
name|initialBookmarks
operator|<<
name|QUrl
argument_list|(
name|QLatin1String
argument_list|(
literal|"file:"
argument_list|)
argument_list|)
operator|<<
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|sidebar
operator|->
name|setModelAndUrls
argument_list|(
name|model
argument_list|,
name|initialBookmarks
argument_list|)
expr_stmt|;
name|QFileDialog
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|sidebar
argument_list|,
name|SIGNAL
argument_list|(
name|goToUrl
argument_list|(
name|QUrl
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_goToUrl
argument_list|(
name|QUrl
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|buttonBox
argument_list|,
name|SIGNAL
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|buttonBox
argument_list|,
name|SIGNAL
argument_list|(
name|rejected
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|lookInCombo
operator|->
name|setFileDialogPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|lookInCombo
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_goToDirectory
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|lookInCombo
operator|->
name|setInsertPolicy
argument_list|(
name|QComboBox
operator|::
name|NoInsert
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|lookInCombo
operator|->
name|setDuplicatesEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// filename
name|qFileDialogUi
operator|->
name|fileNameEdit
operator|->
name|setFileDialogPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|qFileDialogUi
operator|->
name|fileNameLabel
operator|->
name|setBuddy
argument_list|(
name|qFileDialogUi
operator|->
name|fileNameEdit
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_FSCOMPLETER
name|completer
operator|=
operator|new
name|QFSCompleter
argument_list|(
name|model
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|fileNameEdit
operator|->
name|setCompleter
argument_list|(
name|completer
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_FSCOMPLETER
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|fileNameEdit
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_autoCompleteFileName
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|fileNameEdit
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_updateOkButton
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|fileNameEdit
argument_list|,
name|SIGNAL
argument_list|(
name|returnPressed
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// filetype
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|setDuplicatesEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|setSizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|AdjustToMinimumContentsLength
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|fileTypeCombo
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_useNameFilter
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|fileTypeCombo
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|filterSelected
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|listView
operator|->
name|setFileDialogPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|listView
operator|->
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|listView
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_enterDirectory
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|listView
argument_list|,
name|SIGNAL
argument_list|(
name|customContextMenuRequested
argument_list|(
name|QPoint
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_showContextMenu
argument_list|(
name|QPoint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|QShortcut
modifier|*
name|shortcut
init|=
operator|new
name|QShortcut
argument_list|(
name|qFileDialogUi
operator|->
name|listView
argument_list|)
decl_stmt|;
name|shortcut
operator|->
name|setKey
argument_list|(
name|QKeySequence
argument_list|(
name|QLatin1String
argument_list|(
literal|"Delete"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|shortcut
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_deleteCurrent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|setFileDialogPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|QHeaderView
modifier|*
name|treeHeader
init|=
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|header
argument_list|()
decl_stmt|;
name|QFontMetrics
name|fm
argument_list|(
name|q
operator|->
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|treeHeader
operator|->
name|resizeSection
argument_list|(
literal|0
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|QLatin1String
argument_list|(
literal|"wwwwwwwwwwwwwwwwwwwwwwwwww"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|treeHeader
operator|->
name|resizeSection
argument_list|(
literal|1
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|QLatin1String
argument_list|(
literal|"128.88 GB"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|treeHeader
operator|->
name|resizeSection
argument_list|(
literal|2
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|QLatin1String
argument_list|(
literal|"mp3Folder"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|treeHeader
operator|->
name|resizeSection
argument_list|(
literal|3
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|QLatin1String
argument_list|(
literal|"10/29/81 02:02PM"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|treeHeader
operator|->
name|setContextMenuPolicy
argument_list|(
name|Qt
operator|::
name|ActionsContextMenu
argument_list|)
expr_stmt|;
name|QActionGroup
modifier|*
name|showActionGroup
init|=
operator|new
name|QActionGroup
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|showActionGroup
operator|->
name|setExclusive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|showActionGroup
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_showHeader
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
empty_stmt|;
name|QAbstractItemModel
modifier|*
name|abstractModel
init|=
name|model
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_PROXYMODEL
if|if
condition|(
name|proxyModel
condition|)
name|abstractModel
operator|=
name|proxyModel
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|abstractModel
operator|->
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QAction
modifier|*
name|showHeader
init|=
operator|new
name|QAction
argument_list|(
name|showActionGroup
argument_list|)
decl_stmt|;
name|showHeader
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|showHeader
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|treeHeader
operator|->
name|addAction
argument_list|(
name|showHeader
argument_list|)
expr_stmt|;
block|}
name|QScopedPointer
argument_list|<
name|QItemSelectionModel
argument_list|>
name|selModel
argument_list|(
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|selectionModel
argument_list|()
argument_list|)
decl_stmt|;
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|setSelectionModel
argument_list|(
name|qFileDialogUi
operator|->
name|listView
operator|->
name|selectionModel
argument_list|()
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|treeView
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_enterDirectory
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|treeView
argument_list|,
name|SIGNAL
argument_list|(
name|customContextMenuRequested
argument_list|(
name|QPoint
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_showContextMenu
argument_list|(
name|QPoint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|shortcut
operator|=
operator|new
name|QShortcut
argument_list|(
name|qFileDialogUi
operator|->
name|treeView
argument_list|)
expr_stmt|;
name|shortcut
operator|->
name|setKey
argument_list|(
name|QKeySequence
argument_list|(
name|QLatin1String
argument_list|(
literal|"Delete"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|shortcut
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_deleteCurrent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Selections
name|QItemSelectionModel
modifier|*
name|selections
init|=
name|qFileDialogUi
operator|->
name|listView
operator|->
name|selectionModel
argument_list|()
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|selections
argument_list|,
name|SIGNAL
argument_list|(
name|selectionChanged
argument_list|(
name|QItemSelection
argument_list|,
name|QItemSelection
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_selectionChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|selections
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_currentChanged
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|splitter
operator|->
name|setStretchFactor
argument_list|(
name|qFileDialogUi
operator|->
name|splitter
operator|->
name|indexOf
argument_list|(
name|qFileDialogUi
operator|->
name|splitter
operator|->
name|widget
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
expr_stmt|;
name|createToolButtons
argument_list|()
expr_stmt|;
name|createMenuActions
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SETTINGS
specifier|const
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"QtProject"
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|->
name|restoreState
argument_list|(
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt/filedialog"
argument_list|)
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Initial widget states from options
name|q
operator|->
name|setFileMode
argument_list|(
cast|static_cast
argument_list|<
name|QFileDialog
operator|::
name|FileMode
argument_list|>
argument_list|(
name|options
operator|->
name|fileMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAcceptMode
argument_list|(
cast|static_cast
argument_list|<
name|QFileDialog
operator|::
name|AcceptMode
argument_list|>
argument_list|(
name|options
operator|->
name|acceptMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setViewMode
argument_list|(
cast|static_cast
argument_list|<
name|QFileDialog
operator|::
name|ViewMode
argument_list|>
argument_list|(
name|options
operator|->
name|viewMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setOptions
argument_list|(
cast|static_cast
argument_list|<
name|QFileDialog
operator|::
name|Options
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|options
operator|->
name|options
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|options
operator|->
name|sidebarUrls
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|q
operator|->
name|setSidebarUrls
argument_list|(
name|options
operator|->
name|sidebarUrls
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|setDirectoryUrl
argument_list|(
name|options
operator|->
name|initialDirectory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|options
operator|->
name|mimeTypeFilters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|q
operator|->
name|setMimeTypeFilters
argument_list|(
name|options
operator|->
name|mimeTypeFilters
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|options
operator|->
name|nameFilters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|q
operator|->
name|setNameFilters
argument_list|(
name|options
operator|->
name|nameFilters
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|selectNameFilter
argument_list|(
name|options
operator|->
name|initiallySelectedNameFilter
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|setDefaultSuffix
argument_list|(
name|options
operator|->
name|defaultSuffix
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|setHistory
argument_list|(
name|options
operator|->
name|history
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|->
name|initiallySelectedFiles
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
name|q
operator|->
name|selectFile
argument_list|(
name|options
operator|->
name|initiallySelectedFiles
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QUrl
name|url
decl|,
name|options
operator|->
name|initiallySelectedFiles
argument_list|()
control|)
name|q
operator|->
name|selectUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|lineEdit
argument_list|()
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|_q_updateOkButton
argument_list|()
expr_stmt|;
name|retranslateStrings
argument_list|()
expr_stmt|;
name|q
operator|->
name|resize
argument_list|(
name|q
operator|->
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_showHeader
name|void
name|QFileDialogPrivate
operator|::
name|_q_showHeader
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|QActionGroup
modifier|*
name|actionGroup
init|=
name|qobject_cast
argument_list|<
name|QActionGroup
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|header
argument_list|()
operator|->
name|setSectionHidden
argument_list|(
name|actionGroup
operator|->
name|actions
argument_list|()
operator|.
name|indexOf
argument_list|(
name|action
argument_list|)
operator|+
literal|1
argument_list|,
operator|!
name|action
operator|->
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PROXYMODEL
end_ifndef
begin_comment
comment|/*!     \since 4.3      Sets the model for the views to the given \a proxyModel.  This is useful if you     want to modify the underlying model; for example, to add columns, filter     data or add drives.      Any existing proxy model will be removed, but not deleted.  The file dialog     will take ownership of the \a proxyModel.      \sa proxyModel() */
end_comment
begin_function
DECL|function|setProxyModel
name|void
name|QFileDialog
operator|::
name|setProxyModel
parameter_list|(
name|QAbstractProxyModel
modifier|*
name|proxyModel
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|usingWidgets
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|(
operator|!
name|proxyModel
operator|&&
operator|!
name|d
operator|->
name|proxyModel
operator|)
operator|||
operator|(
name|proxyModel
operator|==
name|d
operator|->
name|proxyModel
operator|)
condition|)
return|return;
name|QModelIndex
name|idx
init|=
name|d
operator|->
name|rootIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|proxyModel
condition|)
block|{
name|disconnect
argument_list|(
name|d
operator|->
name|proxyModel
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_rowsInserted
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_rowsInserted
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proxyModel
operator|!=
literal|0
condition|)
block|{
name|proxyModel
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|proxyModel
operator|=
name|proxyModel
expr_stmt|;
name|proxyModel
operator|->
name|setSourceModel
argument_list|(
name|d
operator|->
name|model
argument_list|)
expr_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|listView
operator|->
name|setModel
argument_list|(
name|d
operator|->
name|proxyModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|setModel
argument_list|(
name|d
operator|->
name|proxyModel
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FSCOMPLETER
name|d
operator|->
name|completer
operator|->
name|setModel
argument_list|(
name|d
operator|->
name|proxyModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|completer
operator|->
name|proxyModel
operator|=
name|d
operator|->
name|proxyModel
expr_stmt|;
endif|#
directive|endif
name|connect
argument_list|(
name|d
operator|->
name|proxyModel
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_rowsInserted
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|proxyModel
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|listView
operator|->
name|setModel
argument_list|(
name|d
operator|->
name|model
argument_list|)
expr_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|setModel
argument_list|(
name|d
operator|->
name|model
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FSCOMPLETER
name|d
operator|->
name|completer
operator|->
name|setModel
argument_list|(
name|d
operator|->
name|model
argument_list|)
expr_stmt|;
name|d
operator|->
name|completer
operator|->
name|sourceModel
operator|=
name|d
operator|->
name|model
expr_stmt|;
name|d
operator|->
name|completer
operator|->
name|proxyModel
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_rowsInserted
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QScopedPointer
argument_list|<
name|QItemSelectionModel
argument_list|>
name|selModel
argument_list|(
name|d
operator|->
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|selectionModel
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|setSelectionModel
argument_list|(
name|d
operator|->
name|qFileDialogUi
operator|->
name|listView
operator|->
name|selectionModel
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|setRootIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
comment|// reconnect selection
name|QItemSelectionModel
modifier|*
name|selections
init|=
name|d
operator|->
name|qFileDialogUi
operator|->
name|listView
operator|->
name|selectionModel
argument_list|()
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|selections
argument_list|,
name|SIGNAL
argument_list|(
name|selectionChanged
argument_list|(
name|QItemSelection
argument_list|,
name|QItemSelection
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_selectionChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|selections
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_currentChanged
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the proxy model used by the file dialog.  By default no proxy is set.      \sa setProxyModel() */
end_comment
begin_function
DECL|function|proxyModel
name|QAbstractProxyModel
modifier|*
name|QFileDialog
operator|::
name|proxyModel
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|proxyModel
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PROXYMODEL
end_comment
begin_comment
comment|/*!     \internal      Create tool buttons, set properties and connections */
end_comment
begin_function
DECL|function|createToolButtons
name|void
name|QFileDialogPrivate
operator|::
name|createToolButtons
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|backButton
operator|->
name|setIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_ArrowBack
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|backButton
operator|->
name|setAutoRaise
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|backButton
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|backButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_navigateBackward
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|forwardButton
operator|->
name|setIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_ArrowForward
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|forwardButton
operator|->
name|setAutoRaise
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|forwardButton
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|forwardButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_navigateForward
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|toParentButton
operator|->
name|setIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_FileDialogToParent
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|toParentButton
operator|->
name|setAutoRaise
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|toParentButton
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|toParentButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_navigateToParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|listModeButton
operator|->
name|setIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_FileDialogListView
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|listModeButton
operator|->
name|setAutoRaise
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|listModeButton
operator|->
name|setDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|listModeButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_showListView
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|detailModeButton
operator|->
name|setIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_FileDialogDetailedView
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|detailModeButton
operator|->
name|setAutoRaise
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|detailModeButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_showDetailsView
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSize
name|toolSize
argument_list|(
name|qFileDialogUi
operator|->
name|fileNameEdit
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|qFileDialogUi
operator|->
name|fileNameEdit
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|qFileDialogUi
operator|->
name|backButton
operator|->
name|setFixedSize
argument_list|(
name|toolSize
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|listModeButton
operator|->
name|setFixedSize
argument_list|(
name|toolSize
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|detailModeButton
operator|->
name|setFixedSize
argument_list|(
name|toolSize
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|forwardButton
operator|->
name|setFixedSize
argument_list|(
name|toolSize
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|toParentButton
operator|->
name|setFixedSize
argument_list|(
name|toolSize
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|newFolderButton
operator|->
name|setIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_FileDialogNewFolder
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|newFolderButton
operator|->
name|setFixedSize
argument_list|(
name|toolSize
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|newFolderButton
operator|->
name|setAutoRaise
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|newFolderButton
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|qFileDialogUi
operator|->
name|newFolderButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_createDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Create actions which will be used in the right click. */
end_comment
begin_function
DECL|function|createMenuActions
name|void
name|QFileDialogPrivate
operator|::
name|createMenuActions
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|goHomeAction
init|=
operator|new
name|QAction
argument_list|(
name|q
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|goHomeAction
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_H
operator|+
name|Qt
operator|::
name|SHIFT
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QObject
operator|::
name|connect
argument_list|(
name|goHomeAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_goHome
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|addAction
argument_list|(
name|goHomeAction
argument_list|)
expr_stmt|;
comment|// ### TODO add Desktop& Computer actions
name|QAction
modifier|*
name|goToParent
init|=
operator|new
name|QAction
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|goToParent
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_goto_parent_action"
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|goToParent
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|UpArrow
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QObject
operator|::
name|connect
argument_list|(
name|goToParent
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_navigateToParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|addAction
argument_list|(
name|goToParent
argument_list|)
expr_stmt|;
name|renameAction
operator|=
operator|new
name|QAction
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|renameAction
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|renameAction
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_rename_action"
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|renameAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_renameCurrent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAction
operator|=
operator|new
name|QAction
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|deleteAction
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|deleteAction
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_delete_action"
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|deleteAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_deleteCurrent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|showHiddenAction
operator|=
operator|new
name|QAction
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|showHiddenAction
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_show_hidden_action"
argument_list|)
argument_list|)
expr_stmt|;
name|showHiddenAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|showHiddenAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_showHidden
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newFolderAction
operator|=
operator|new
name|QAction
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|newFolderAction
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_new_folder_action"
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|newFolderAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_createDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_goHome
name|void
name|QFileDialogPrivate
operator|::
name|_q_goHome
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|q
operator|->
name|setDirectory
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Update history with new path, buttons, and combo */
end_comment
begin_function
DECL|function|_q_pathChanged
name|void
name|QFileDialogPrivate
operator|::
name|_q_pathChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|newPath
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|model
operator|->
name|rootDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|qFileDialogUi
operator|->
name|toParentButton
operator|->
name|setEnabled
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|sidebar
operator|->
name|selectUrl
argument_list|(
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|newPath
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setHistory
argument_list|(
name|qFileDialogUi
operator|->
name|lookInCombo
operator|->
name|history
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentHistoryLocation
operator|<
literal|0
operator|||
name|currentHistory
operator|.
name|value
argument_list|(
name|currentHistoryLocation
argument_list|)
operator|!=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|newPath
argument_list|)
condition|)
block|{
while|while
condition|(
name|currentHistoryLocation
operator|>=
literal|0
operator|&&
name|currentHistoryLocation
operator|+
literal|1
operator|<
name|currentHistory
operator|.
name|count
argument_list|()
condition|)
block|{
name|currentHistory
operator|.
name|removeLast
argument_list|()
expr_stmt|;
block|}
name|currentHistory
operator|.
name|append
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|newPath
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|currentHistoryLocation
expr_stmt|;
block|}
name|qFileDialogUi
operator|->
name|forwardButton
operator|->
name|setEnabled
argument_list|(
name|currentHistory
operator|.
name|size
argument_list|()
operator|-
name|currentHistoryLocation
operator|>
literal|1
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|backButton
operator|->
name|setEnabled
argument_list|(
name|currentHistoryLocation
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Navigates to the last directory viewed in the dialog. */
end_comment
begin_function
DECL|function|_q_navigateBackward
name|void
name|QFileDialogPrivate
operator|::
name|_q_navigateBackward
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|currentHistory
operator|.
name|isEmpty
argument_list|()
operator|&&
name|currentHistoryLocation
operator|>
literal|0
condition|)
block|{
operator|--
name|currentHistoryLocation
expr_stmt|;
name|QString
name|previousHistory
init|=
name|currentHistory
operator|.
name|at
argument_list|(
name|currentHistoryLocation
argument_list|)
decl_stmt|;
name|q
operator|->
name|setDirectory
argument_list|(
name|previousHistory
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      Navigates to the last directory viewed in the dialog. */
end_comment
begin_function
DECL|function|_q_navigateForward
name|void
name|QFileDialogPrivate
operator|::
name|_q_navigateForward
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|currentHistory
operator|.
name|isEmpty
argument_list|()
operator|&&
name|currentHistoryLocation
operator|<
name|currentHistory
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
operator|++
name|currentHistoryLocation
expr_stmt|;
name|QString
name|nextHistory
init|=
name|currentHistory
operator|.
name|at
argument_list|(
name|currentHistoryLocation
argument_list|)
decl_stmt|;
name|q
operator|->
name|setDirectory
argument_list|(
name|nextHistory
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      Navigates to the parent directory of the currently displayed directory     in the dialog. */
end_comment
begin_function
DECL|function|_q_navigateToParent
name|void
name|QFileDialogPrivate
operator|::
name|_q_navigateToParent
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|model
operator|->
name|rootDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|newDirectory
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|newDirectory
operator|=
name|model
operator|->
name|myComputer
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
name|newDirectory
operator|=
name|dir
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
block|}
name|q
operator|->
name|setDirectory
argument_list|(
name|newDirectory
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|directoryEntered
argument_list|(
name|newDirectory
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \internal      Creates a new directory, first asking the user for a suitable name. */
end_comment
begin_function
DECL|function|_q_createDirectory
name|void
name|QFileDialogPrivate
operator|::
name|_q_createDirectory
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|listView
operator|->
name|clearSelection
argument_list|()
expr_stmt|;
name|QString
name|newFolderString
init|=
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"New Folder"
argument_list|)
decl_stmt|;
name|QString
name|folderName
init|=
name|newFolderString
decl_stmt|;
name|QString
name|prefix
init|=
name|q
operator|->
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|prefix
operator|+
name|folderName
argument_list|)
condition|)
block|{
name|qlonglong
name|suffix
init|=
literal|2
decl_stmt|;
while|while
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|prefix
operator|+
name|folderName
argument_list|)
condition|)
block|{
name|folderName
operator|=
name|newFolderString
operator|+
name|QString
operator|::
name|number
argument_list|(
name|suffix
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
name|QModelIndex
name|parent
init|=
name|rootIndex
argument_list|()
decl_stmt|;
name|QModelIndex
name|index
init|=
name|model
operator|->
name|mkdir
argument_list|(
name|parent
argument_list|,
name|folderName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|index
operator|=
name|select
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|currentView
argument_list|()
operator|->
name|edit
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_showListView
name|void
name|QFileDialogPrivate
operator|::
name|_q_showListView
parameter_list|()
block|{
name|qFileDialogUi
operator|->
name|listModeButton
operator|->
name|setDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|detailModeButton
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|hide
argument_list|()
expr_stmt|;
name|qFileDialogUi
operator|->
name|listView
operator|->
name|show
argument_list|()
expr_stmt|;
name|qFileDialogUi
operator|->
name|stackedWidget
operator|->
name|setCurrentWidget
argument_list|(
name|qFileDialogUi
operator|->
name|listView
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|listView
operator|->
name|doItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_showDetailsView
name|void
name|QFileDialogPrivate
operator|::
name|_q_showDetailsView
parameter_list|()
block|{
name|qFileDialogUi
operator|->
name|listModeButton
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|detailModeButton
operator|->
name|setDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|listView
operator|->
name|hide
argument_list|()
expr_stmt|;
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|show
argument_list|()
expr_stmt|;
name|qFileDialogUi
operator|->
name|stackedWidget
operator|->
name|setCurrentWidget
argument_list|(
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|doItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Show the context menu for the file/dir under position */
end_comment
begin_function
DECL|function|_q_showContextMenu
name|void
name|QFileDialogPrivate
operator|::
name|_q_showContextMenu
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|position
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_MENU
name|Q_UNUSED
argument_list|(
name|position
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|QAbstractItemView
modifier|*
name|view
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|viewMode
argument_list|()
operator|==
name|QFileDialog
operator|::
name|Detail
condition|)
name|view
operator|=
name|qFileDialogUi
operator|->
name|treeView
expr_stmt|;
else|else
name|view
operator|=
name|qFileDialogUi
operator|->
name|listView
expr_stmt|;
name|QModelIndex
name|index
init|=
name|view
operator|->
name|indexAt
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|index
operator|=
name|mapToSource
argument_list|(
name|index
operator|.
name|sibling
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QMenu
name|menu
argument_list|(
name|view
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// file context menu
specifier|const
name|bool
name|ro
init|=
name|model
operator|&&
name|model
operator|->
name|isReadOnly
argument_list|()
decl_stmt|;
name|QFile
operator|::
name|Permissions
name|p
argument_list|(
name|index
operator|.
name|parent
argument_list|()
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FilePermissions
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
decl_stmt|;
name|renameAction
operator|->
name|setEnabled
argument_list|(
operator|!
name|ro
operator|&&
name|p
operator|&
name|QFile
operator|::
name|WriteUser
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addAction
argument_list|(
name|renameAction
argument_list|)
expr_stmt|;
name|deleteAction
operator|->
name|setEnabled
argument_list|(
operator|!
name|ro
operator|&&
name|p
operator|&
name|QFile
operator|::
name|WriteUser
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addAction
argument_list|(
name|deleteAction
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
block|}
name|menu
operator|.
name|addAction
argument_list|(
name|showHiddenAction
argument_list|)
expr_stmt|;
if|if
condition|(
name|qFileDialogUi
operator|->
name|newFolderButton
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|newFolderAction
operator|->
name|setEnabled
argument_list|(
name|qFileDialogUi
operator|->
name|newFolderButton
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addAction
argument_list|(
name|newFolderAction
argument_list|)
expr_stmt|;
block|}
name|menu
operator|.
name|exec
argument_list|(
name|view
operator|->
name|viewport
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|position
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_MENU
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_renameCurrent
name|void
name|QFileDialogPrivate
operator|::
name|_q_renameCurrent
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|qFileDialogUi
operator|->
name|listView
operator|->
name|currentIndex
argument_list|()
decl_stmt|;
name|index
operator|=
name|index
operator|.
name|sibling
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|viewMode
argument_list|()
operator|==
name|QFileDialog
operator|::
name|List
condition|)
name|qFileDialogUi
operator|->
name|listView
operator|->
name|edit
argument_list|(
name|index
argument_list|)
expr_stmt|;
else|else
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|edit
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeDirectory
name|bool
name|QFileDialogPrivate
operator|::
name|removeDirectory
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|QModelIndex
name|modelIndex
init|=
name|model
operator|->
name|index
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|model
operator|->
name|remove
argument_list|(
name|modelIndex
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Deletes the currently selected item in the dialog. */
end_comment
begin_function
DECL|function|_q_deleteCurrent
name|void
name|QFileDialogPrivate
operator|::
name|_q_deleteCurrent
parameter_list|()
block|{
if|if
condition|(
name|model
operator|->
name|isReadOnly
argument_list|()
condition|)
return|return;
name|QModelIndexList
name|list
init|=
name|qFileDialogUi
operator|->
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedRows
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|list
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
name|qFileDialogUi
operator|->
name|listView
operator|->
name|rootIndex
argument_list|()
condition|)
continue|continue;
name|index
operator|=
name|mapToSource
argument_list|(
name|index
operator|.
name|sibling
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
name|QString
name|fileName
init|=
name|index
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FileNameRole
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QString
name|filePath
init|=
name|index
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|bool
name|isDir
init|=
name|model
operator|->
name|isDir
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|Permissions
name|p
argument_list|(
name|index
operator|.
name|parent
argument_list|()
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FilePermissions
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MESSAGEBOX
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|p
operator|&
name|QFile
operator|::
name|WriteUser
operator|)
operator|&&
operator|(
name|QMessageBox
operator|::
name|warning
argument_list|(
name|q_func
argument_list|()
argument_list|,
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"Delete"
argument_list|)
argument_list|,
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"'%1' is write protected.\nDo you want to delete it anyway?"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|)
operator|==
name|QMessageBox
operator|::
name|No
operator|)
condition|)
return|return;
elseif|else
if|if
condition|(
name|QMessageBox
operator|::
name|warning
argument_list|(
name|q_func
argument_list|()
argument_list|,
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"Delete"
argument_list|)
argument_list|,
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"Are you sure you want to delete '%1'?"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|)
operator|==
name|QMessageBox
operator|::
name|No
condition|)
return|return;
else|#
directive|else
if|if
condition|(
operator|!
operator|(
name|p
operator|&
name|QFile
operator|::
name|WriteUser
operator|)
condition|)
return|return;
endif|#
directive|endif
comment|// QT_NO_MESSAGEBOX
comment|// the event loop has run, we can NOT reuse index because the model might have removed it.
if|if
condition|(
name|isDir
condition|)
block|{
if|if
condition|(
operator|!
name|removeDirectory
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_MESSAGEBOX
name|QMessageBox
operator|::
name|warning
argument_list|(
name|q
argument_list|,
name|q
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"Could not delete directory."
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
else|else
block|{
name|model
operator|->
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|_q_autoCompleteFileName
name|void
name|QFileDialogPrivate
operator|::
name|_q_autoCompleteFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"//"
argument_list|)
argument_list|)
operator|||
name|text
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
condition|)
block|{
name|qFileDialogUi
operator|->
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|clearSelection
argument_list|()
expr_stmt|;
return|return;
block|}
name|QStringList
name|multipleFiles
init|=
name|typedFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|multipleFiles
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QModelIndexList
name|oldFiles
init|=
name|qFileDialogUi
operator|->
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedRows
argument_list|()
decl_stmt|;
name|QModelIndexList
name|newFiles
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|multipleFiles
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|idx
init|=
name|model
operator|->
name|index
argument_list|(
name|multipleFiles
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldFiles
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
name|oldFiles
operator|.
name|removeAll
argument_list|(
name|idx
argument_list|)
expr_stmt|;
else|else
name|newFiles
operator|.
name|append
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newFiles
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|select
argument_list|(
name|newFiles
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lineEdit
argument_list|()
operator|->
name|hasFocus
argument_list|()
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldFiles
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|qFileDialogUi
operator|->
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|oldFiles
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|QItemSelectionModel
operator|::
name|Toggle
operator||
name|QItemSelectionModel
operator|::
name|Rows
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_updateOkButton
name|void
name|QFileDialogPrivate
operator|::
name|_q_updateOkButton
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|button
init|=
name|qFileDialogUi
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
operator|(
name|q
operator|->
name|acceptMode
argument_list|()
operator|==
name|QFileDialog
operator|::
name|AcceptOpen
operator|)
condition|?
name|QDialogButtonBox
operator|::
name|Open
else|:
name|QDialogButtonBox
operator|::
name|Save
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|button
condition|)
return|return;
specifier|const
name|QFileDialog
operator|::
name|FileMode
name|fileMode
init|=
name|q
operator|->
name|fileMode
argument_list|()
decl_stmt|;
name|bool
name|enableButton
init|=
literal|true
decl_stmt|;
name|bool
name|isOpenDirectory
init|=
literal|false
decl_stmt|;
name|QStringList
name|files
init|=
name|q
operator|->
name|selectedFiles
argument_list|()
decl_stmt|;
name|QString
name|lineEditText
init|=
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
name|lineEditText
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"//"
argument_list|)
argument_list|)
operator|||
name|lineEditText
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
condition|)
block|{
name|button
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateOkButtonText
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|enableButton
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lineEditText
operator|==
name|QLatin1String
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
name|isOpenDirectory
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|fileMode
condition|)
block|{
case|case
name|QFileDialog
operator|::
name|DirectoryOnly
case|:
case|case
name|QFileDialog
operator|::
name|Directory
case|:
block|{
name|QString
name|fn
init|=
name|files
operator|.
name|first
argument_list|()
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|model
operator|->
name|index
argument_list|(
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
condition|)
name|idx
operator|=
name|model
operator|->
name|index
argument_list|(
name|getEnvironmentVariable
argument_list|(
name|fn
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|model
operator|->
name|isDir
argument_list|(
name|idx
argument_list|)
condition|)
name|enableButton
operator|=
literal|false
expr_stmt|;
break|break;
block|}
case|case
name|QFileDialog
operator|::
name|AnyFile
case|:
block|{
name|QString
name|fn
init|=
name|files
operator|.
name|first
argument_list|()
decl_stmt|;
name|QFileInfo
name|info
argument_list|(
name|fn
argument_list|)
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|model
operator|->
name|index
argument_list|(
name|fn
argument_list|)
decl_stmt|;
name|QString
name|fileDir
decl_stmt|;
name|QString
name|fileName
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|fileDir
operator|=
name|info
operator|.
name|canonicalFilePath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fileDir
operator|=
name|fn
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|fn
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|fn
operator|.
name|mid
argument_list|(
name|fileDir
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lineEditText
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|".."
argument_list|)
argument_list|)
condition|)
block|{
name|fileDir
operator|=
name|info
operator|.
name|canonicalFilePath
argument_list|()
expr_stmt|;
name|fileName
operator|=
name|info
operator|.
name|fileName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fileDir
operator|==
name|q
operator|->
name|directory
argument_list|()
operator|.
name|canonicalPath
argument_list|()
operator|&&
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|enableButton
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|idx
operator|.
name|isValid
argument_list|()
operator|&&
name|model
operator|->
name|isDir
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|isOpenDirectory
operator|=
literal|true
expr_stmt|;
name|enableButton
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|maxLength
init|=
name|maxNameLength
argument_list|(
name|fileDir
argument_list|)
decl_stmt|;
name|enableButton
operator|=
name|maxLength
operator|<
literal|0
operator|||
name|fileName
operator|.
name|length
argument_list|()
operator|<=
name|maxLength
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QFileDialog
operator|::
name|ExistingFile
case|:
case|case
name|QFileDialog
operator|::
name|ExistingFiles
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|idx
init|=
name|model
operator|->
name|index
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
condition|)
name|idx
operator|=
name|model
operator|->
name|index
argument_list|(
name|getEnvironmentVariable
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|enableButton
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|idx
operator|.
name|isValid
argument_list|()
operator|&&
name|model
operator|->
name|isDir
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|isOpenDirectory
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
break|break;
default|default:
break|break;
block|}
block|}
name|button
operator|->
name|setEnabled
argument_list|(
name|enableButton
argument_list|)
expr_stmt|;
name|updateOkButtonText
argument_list|(
name|isOpenDirectory
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_currentChanged
name|void
name|QFileDialogPrivate
operator|::
name|_q_currentChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|_q_updateOkButton
argument_list|()
expr_stmt|;
emit|emit
name|q_func
argument_list|()
operator|->
name|currentChanged
argument_list|(
name|index
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \internal      This is called when the user double clicks on a file with the corresponding     model item \a index. */
end_comment
begin_function
DECL|function|_q_enterDirectory
name|void
name|QFileDialogPrivate
operator|::
name|_q_enterDirectory
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
comment|// My Computer or a directory
name|QModelIndex
name|sourceIndex
init|=
name|index
operator|.
name|model
argument_list|()
operator|==
name|proxyModel
condition|?
name|mapToSource
argument_list|(
name|index
argument_list|)
else|:
name|index
decl_stmt|;
name|QString
name|path
init|=
name|sourceIndex
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
operator|||
name|model
operator|->
name|isDir
argument_list|(
name|sourceIndex
argument_list|)
condition|)
block|{
specifier|const
name|QFileDialog
operator|::
name|FileMode
name|fileMode
init|=
name|q
operator|->
name|fileMode
argument_list|()
decl_stmt|;
name|q
operator|->
name|setDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|directoryEntered
argument_list|(
name|path
argument_list|)
emit|;
if|if
condition|(
name|fileMode
operator|==
name|QFileDialog
operator|::
name|Directory
operator|||
name|fileMode
operator|==
name|QFileDialog
operator|::
name|DirectoryOnly
condition|)
block|{
comment|// ### find out why you have to do both of these.
name|lineEdit
argument_list|()
operator|->
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|lineEdit
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Do not accept when shift-clicking to multi-select a file in environments with single-click-activation (KDE)
if|if
condition|(
operator|!
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ItemView_ActivateItemOnSingleClick
argument_list|)
operator|||
name|q
operator|->
name|fileMode
argument_list|()
operator|!=
name|QFileDialog
operator|::
name|ExistingFiles
operator|||
operator|!
operator|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
operator|&
name|Qt
operator|::
name|CTRL
operator|)
condition|)
block|{
name|q
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      Changes the file dialog's current directory to the one specified     by \a path. */
end_comment
begin_function
DECL|function|_q_goToDirectory
name|void
name|QFileDialogPrivate
operator|::
name|_q_goToDirectory
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_MESSAGEBOX
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QModelIndex
name|index
init|=
name|qFileDialogUi
operator|->
name|lookInCombo
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|qFileDialogUi
operator|->
name|lookInCombo
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|qFileDialogUi
operator|->
name|lookInCombo
operator|->
name|modelColumn
argument_list|()
argument_list|,
name|qFileDialogUi
operator|->
name|lookInCombo
operator|->
name|rootModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|path2
init|=
name|path
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
name|index
operator|=
name|mapFromSource
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|getEnvironmentVariable
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|path2
operator|=
name|index
operator|.
name|data
argument_list|(
name|UrlRole
argument_list|)
operator|.
name|toUrl
argument_list|()
operator|.
name|toLocalFile
argument_list|()
expr_stmt|;
name|index
operator|=
name|mapFromSource
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|path2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QDir
name|dir
argument_list|(
name|path2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
name|dir
operator|=
name|getEnvironmentVariable
argument_list|(
name|path2
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
operator|||
name|path2
operator|.
name|isEmpty
argument_list|()
operator|||
name|path2
operator|==
name|model
operator|->
name|myComputer
argument_list|()
operator|.
name|toString
argument_list|()
condition|)
block|{
name|_q_enterDirectory
argument_list|(
name|index
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MESSAGEBOX
block|}
else|else
block|{
name|QString
name|message
init|=
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"%1\nDirectory not found.\nPlease verify the "
literal|"correct directory name was given."
argument_list|)
decl_stmt|;
name|QMessageBox
operator|::
name|warning
argument_list|(
name|q
argument_list|,
name|q
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|message
operator|.
name|arg
argument_list|(
name|path2
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_MESSAGEBOX
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      Sets the current name filter to be nameFilter and     update the qFileDialogUi->fileNameEdit when in AcceptSave mode with the new extension. */
end_comment
begin_function
DECL|function|_q_useNameFilter
name|void
name|QFileDialogPrivate
operator|::
name|_q_useNameFilter
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|QStringList
name|nameFilters
init|=
name|options
operator|->
name|nameFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|==
name|nameFilters
operator|.
name|size
argument_list|()
condition|)
block|{
name|QAbstractItemModel
modifier|*
name|comboModel
init|=
name|qFileDialogUi
operator|->
name|fileTypeCombo
operator|->
name|model
argument_list|()
decl_stmt|;
name|nameFilters
operator|.
name|append
argument_list|(
name|comboModel
operator|->
name|index
argument_list|(
name|comboModel
operator|->
name|rowCount
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|->
name|setNameFilters
argument_list|(
name|nameFilters
argument_list|)
expr_stmt|;
block|}
name|QString
name|nameFilter
init|=
name|nameFilters
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|QStringList
name|newNameFilters
init|=
name|QPlatformFileDialogHelper
operator|::
name|cleanFilterList
argument_list|(
name|nameFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|q_func
argument_list|()
operator|->
name|acceptMode
argument_list|()
operator|==
name|QFileDialog
operator|::
name|AcceptSave
condition|)
block|{
name|QString
name|newNameFilterExtension
decl_stmt|;
if|if
condition|(
name|newNameFilters
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
name|newNameFilterExtension
operator|=
name|QFileInfo
argument_list|(
name|newNameFilters
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|suffix
argument_list|()
expr_stmt|;
name|QString
name|fileName
init|=
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|fileNameExtension
init|=
name|QFileInfo
argument_list|(
name|fileName
argument_list|)
operator|.
name|suffix
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fileNameExtension
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|newNameFilterExtension
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|int
name|fileNameExtensionLength
init|=
name|fileNameExtension
operator|.
name|count
argument_list|()
decl_stmt|;
name|fileName
operator|.
name|replace
argument_list|(
name|fileName
operator|.
name|count
argument_list|()
operator|-
name|fileNameExtensionLength
argument_list|,
name|fileNameExtensionLength
argument_list|,
name|newNameFilterExtension
argument_list|)
expr_stmt|;
name|qFileDialogUi
operator|->
name|listView
operator|->
name|clearSelection
argument_list|()
expr_stmt|;
name|lineEdit
argument_list|()
operator|->
name|setText
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
name|model
operator|->
name|setNameFilters
argument_list|(
name|newNameFilters
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      This is called when the model index corresponding to the current file is changed     from \a index to \a current. */
end_comment
begin_function
DECL|function|_q_selectionChanged
name|void
name|QFileDialogPrivate
operator|::
name|_q_selectionChanged
parameter_list|()
block|{
specifier|const
name|QFileDialog
operator|::
name|FileMode
name|fileMode
init|=
name|q_func
argument_list|()
operator|->
name|fileMode
argument_list|()
decl_stmt|;
name|QModelIndexList
name|indexes
init|=
name|qFileDialogUi
operator|->
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedRows
argument_list|()
decl_stmt|;
name|bool
name|stripDirs
init|=
operator|(
name|fileMode
operator|!=
name|QFileDialog
operator|::
name|DirectoryOnly
operator|&&
name|fileMode
operator|!=
name|QFileDialog
operator|::
name|Directory
operator|)
decl_stmt|;
name|QStringList
name|allFiles
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|stripDirs
operator|&&
name|model
operator|->
name|isDir
argument_list|(
name|mapToSource
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
condition|)
continue|continue;
name|allFiles
operator|.
name|append
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allFiles
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allFiles
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|allFiles
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
operator|+
name|allFiles
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QString
name|finalFiles
init|=
name|allFiles
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|finalFiles
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|lineEdit
argument_list|()
operator|->
name|hasFocus
argument_list|()
operator|&&
name|lineEdit
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
name|lineEdit
argument_list|()
operator|->
name|setText
argument_list|(
name|finalFiles
argument_list|)
expr_stmt|;
else|else
name|_q_updateOkButton
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Includes hidden files and directories in the items displayed in the dialog. */
end_comment
begin_function
DECL|function|_q_showHidden
name|void
name|QFileDialogPrivate
operator|::
name|_q_showHidden
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
name|QDir
operator|::
name|Filters
name|dirFilters
init|=
name|q
operator|->
name|filter
argument_list|()
decl_stmt|;
if|if
condition|(
name|showHiddenAction
operator|->
name|isChecked
argument_list|()
condition|)
name|dirFilters
operator||=
name|QDir
operator|::
name|Hidden
expr_stmt|;
else|else
name|dirFilters
operator|&=
operator|~
name|QDir
operator|::
name|Hidden
expr_stmt|;
name|q
operator|->
name|setFilter
argument_list|(
name|dirFilters
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      When parent is root and rows have been inserted when none was there before     then select the first one. */
end_comment
begin_function
DECL|function|_q_rowsInserted
name|void
name|QFileDialogPrivate
operator|::
name|_q_rowsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|qFileDialogUi
operator|->
name|treeView
operator|||
name|parent
operator|!=
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|rootIndex
argument_list|()
operator|||
operator|!
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|selectionModel
argument_list|()
operator|||
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|selectionModel
argument_list|()
operator|->
name|hasSelection
argument_list|()
operator|||
name|qFileDialogUi
operator|->
name|treeView
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
operator|==
literal|0
condition|)
return|return;
block|}
end_function
begin_function
DECL|function|_q_fileRenamed
name|void
name|QFileDialogPrivate
operator|::
name|_q_fileRenamed
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QString
name|oldName
parameter_list|,
specifier|const
name|QString
name|newName
parameter_list|)
block|{
specifier|const
name|QFileDialog
operator|::
name|FileMode
name|fileMode
init|=
name|q_func
argument_list|()
operator|->
name|fileMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileMode
operator|==
name|QFileDialog
operator|::
name|Directory
operator|||
name|fileMode
operator|==
name|QFileDialog
operator|::
name|DirectoryOnly
condition|)
block|{
if|if
condition|(
name|path
operator|==
name|rootPath
argument_list|()
operator|&&
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
operator|==
name|oldName
condition|)
name|lineEdit
argument_list|()
operator|->
name|setText
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_emitUrlSelected
name|void
name|QFileDialogPrivate
operator|::
name|_q_emitUrlSelected
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|file
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|urlSelected
argument_list|(
name|file
argument_list|)
emit|;
if|if
condition|(
name|file
operator|.
name|isLocalFile
argument_list|()
condition|)
emit|emit
name|q
operator|->
name|fileSelected
argument_list|(
name|file
operator|.
name|toLocalFile
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitUrlsSelected
name|void
name|QFileDialogPrivate
operator|::
name|_q_emitUrlsSelected
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QUrl
argument_list|>
modifier|&
name|files
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|urlsSelected
argument_list|(
name|files
argument_list|)
emit|;
name|QStringList
name|localFiles
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QUrl
modifier|&
name|file
decl|,
name|files
control|)
if|if
condition|(
name|file
operator|.
name|isLocalFile
argument_list|()
condition|)
name|localFiles
operator|.
name|append
argument_list|(
name|file
operator|.
name|toLocalFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|localFiles
operator|.
name|isEmpty
argument_list|()
condition|)
emit|emit
name|q
operator|->
name|filesSelected
argument_list|(
name|localFiles
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_nativeCurrentChanged
name|void
name|QFileDialogPrivate
operator|::
name|_q_nativeCurrentChanged
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|file
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|currentUrlChanged
argument_list|(
name|file
argument_list|)
emit|;
if|if
condition|(
name|file
operator|.
name|isLocalFile
argument_list|()
condition|)
emit|emit
name|q
operator|->
name|currentChanged
argument_list|(
name|file
operator|.
name|toLocalFile
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_nativeEnterDirectory
name|void
name|QFileDialogPrivate
operator|::
name|_q_nativeEnterDirectory
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|directory
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|directoryUrlEntered
argument_list|(
name|directory
argument_list|)
emit|;
if|if
condition|(
operator|!
name|directory
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Windows native dialogs occasionally emit signals with empty strings.
operator|*
name|lastVisitedDir
argument_list|()
operator|=
name|directory
expr_stmt|;
if|if
condition|(
name|directory
operator|.
name|isLocalFile
argument_list|()
condition|)
emit|emit
name|q
operator|->
name|directoryEntered
argument_list|(
name|directory
operator|.
name|toLocalFile
argument_list|()
argument_list|)
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      For the list and tree view watch keys to goto parent and back in the history      returns \c true if handled */
end_comment
begin_function
DECL|function|itemViewKeyboardEvent
name|bool
name|QFileDialogPrivate
operator|::
name|itemViewKeyboardEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileDialog
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Backspace
case|:
name|_q_navigateToParent
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|Qt
operator|::
name|Key_Back
case|:
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
return|return
literal|false
return|;
endif|#
directive|endif
case|case
name|Qt
operator|::
name|Key_Left
case|:
if|if
condition|(
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Back
operator|||
name|event
operator|->
name|modifiers
argument_list|()
operator|==
name|Qt
operator|::
name|AltModifier
condition|)
block|{
name|_q_navigateBackward
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
case|case
name|Qt
operator|::
name|Key_Escape
case|:
name|q
operator|->
name|hide
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|getEnvironmentVariable
name|QString
name|QFileDialogPrivate
operator|::
name|getEnvironmentVariable
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_UNIX
if|if
condition|(
name|string
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|string
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'$'
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
name|string
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|#
directive|else
if|if
condition|(
name|string
operator|.
name|size
argument_list|()
operator|>
literal|2
operator|&&
name|string
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'%'
argument_list|)
argument_list|)
operator|&&
name|string
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'%'
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
name|string
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|string
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
endif|#
directive|endif
return|return
name|string
return|;
block|}
end_function
begin_function
DECL|function|setFileDialogPrivate
name|void
name|QFileDialogComboBox
operator|::
name|setFileDialogPrivate
parameter_list|(
name|QFileDialogPrivate
modifier|*
name|d_pointer
parameter_list|)
block|{
name|d_ptr
operator|=
name|d_pointer
expr_stmt|;
name|urlModel
operator|=
operator|new
name|QUrlModel
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|urlModel
operator|->
name|showFullPath
operator|=
literal|true
expr_stmt|;
name|urlModel
operator|->
name|setFileSystemModel
argument_list|(
name|d_ptr
operator|->
name|model
argument_list|)
expr_stmt|;
name|setModel
argument_list|(
name|urlModel
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showPopup
name|void
name|QFileDialogComboBox
operator|::
name|showPopup
parameter_list|()
block|{
if|if
condition|(
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
operator|>
literal|1
condition|)
name|QComboBox
operator|::
name|showPopup
argument_list|()
expr_stmt|;
name|urlModel
operator|->
name|setUrls
argument_list|(
name|QList
argument_list|<
name|QUrl
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QUrl
argument_list|>
name|list
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|d_ptr
operator|->
name|model
operator|->
name|index
argument_list|(
name|d_ptr
operator|->
name|rootPath
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|idx
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QUrl
name|url
init|=
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|idx
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|isValid
argument_list|()
condition|)
name|list
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|idx
operator|=
name|idx
operator|.
name|parent
argument_list|()
expr_stmt|;
block|}
comment|// add "my computer"
name|list
operator|.
name|append
argument_list|(
name|QUrl
argument_list|(
name|QLatin1String
argument_list|(
literal|"file:"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|urlModel
operator|->
name|addUrls
argument_list|(
name|list
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|idx
operator|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// append history
name|QList
argument_list|<
name|QUrl
argument_list|>
name|urls
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_history
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QUrl
name|path
init|=
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|m_history
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|urls
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
name|urls
operator|.
name|prepend
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|urls
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|model
argument_list|()
operator|->
name|insertRow
argument_list|(
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// ### TODO maybe add a horizontal line before this
name|model
argument_list|()
operator|->
name|setData
argument_list|(
name|idx
argument_list|,
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"Recent Places"
argument_list|)
argument_list|)
expr_stmt|;
name|QStandardItemModel
modifier|*
name|m
init|=
name|qobject_cast
argument_list|<
name|QStandardItemModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
condition|)
block|{
name|Qt
operator|::
name|ItemFlags
name|flags
init|=
name|m
operator|->
name|flags
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|flags
operator|&=
operator|~
name|Qt
operator|::
name|ItemIsEnabled
expr_stmt|;
name|m
operator|->
name|item
argument_list|(
name|idx
operator|.
name|row
argument_list|()
argument_list|,
name|idx
operator|.
name|column
argument_list|()
argument_list|)
operator|->
name|setFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
name|urlModel
operator|->
name|addUrls
argument_list|(
name|urls
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QComboBox
operator|::
name|showPopup
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// Exact same as QComboBox::paintEvent(), except we elide the text.
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QFileDialogComboBox
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QStylePainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
comment|// draw the combobox frame, focusrect and selected etc.
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QRect
name|editRect
init|=
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_ComboBoxEditField
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|editRect
operator|.
name|width
argument_list|()
operator|-
name|opt
operator|.
name|iconSize
operator|.
name|width
argument_list|()
operator|-
literal|4
decl_stmt|;
name|opt
operator|.
name|currentText
operator|=
name|opt
operator|.
name|fontMetrics
operator|.
name|elidedText
argument_list|(
name|opt
operator|.
name|currentText
argument_list|,
name|Qt
operator|::
name|ElideMiddle
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
name|opt
argument_list|)
expr_stmt|;
comment|// draw the icon and text
name|painter
operator|.
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_ComboBoxLabel
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QFileDialogListView
name|QFileDialogListView
operator|::
name|QFileDialogListView
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QListView
argument_list|(
name|parent
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|setFileDialogPrivate
name|void
name|QFileDialogListView
operator|::
name|setFileDialogPrivate
parameter_list|(
name|QFileDialogPrivate
modifier|*
name|d_pointer
parameter_list|)
block|{
name|d_ptr
operator|=
name|d_pointer
expr_stmt|;
name|setSelectionBehavior
argument_list|(
name|QAbstractItemView
operator|::
name|SelectRows
argument_list|)
expr_stmt|;
name|setWrapping
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setResizeMode
argument_list|(
name|QListView
operator|::
name|Adjust
argument_list|)
expr_stmt|;
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|EditKeyPressed
argument_list|)
expr_stmt|;
name|setContextMenuPolicy
argument_list|(
name|Qt
operator|::
name|CustomContextMenu
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|setDragDropMode
argument_list|(
name|QAbstractItemView
operator|::
name|InternalMove
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSize
name|QFileDialogListView
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|int
name|height
init|=
name|qMax
argument_list|(
literal|10
argument_list|,
name|sizeHintForRow
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QSize
argument_list|(
name|QListView
operator|::
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|*
literal|2
argument_list|,
name|height
operator|*
literal|30
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|keyPressEvent
name|void
name|QFileDialogListView
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|navigationMode
argument_list|()
operator|==
name|Qt
operator|::
name|NavigationModeKeypadDirectional
condition|)
block|{
name|QListView
operator|::
name|keyPressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
comment|// QT_KEYPAD_NAVIGATION
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|itemViewKeyboardEvent
argument_list|(
name|e
argument_list|)
condition|)
name|QListView
operator|::
name|keyPressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QFileDialogTreeView
name|QFileDialogTreeView
operator|::
name|QFileDialogTreeView
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QTreeView
argument_list|(
name|parent
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|setFileDialogPrivate
name|void
name|QFileDialogTreeView
operator|::
name|setFileDialogPrivate
parameter_list|(
name|QFileDialogPrivate
modifier|*
name|d_pointer
parameter_list|)
block|{
name|d_ptr
operator|=
name|d_pointer
expr_stmt|;
name|setSelectionBehavior
argument_list|(
name|QAbstractItemView
operator|::
name|SelectRows
argument_list|)
expr_stmt|;
name|setRootIsDecorated
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setItemsExpandable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setSortingEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|header
argument_list|()
operator|->
name|setSortIndicator
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
name|header
argument_list|()
operator|->
name|setStretchLastSection
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setTextElideMode
argument_list|(
name|Qt
operator|::
name|ElideMiddle
argument_list|)
expr_stmt|;
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|EditKeyPressed
argument_list|)
expr_stmt|;
name|setContextMenuPolicy
argument_list|(
name|Qt
operator|::
name|CustomContextMenu
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|setDragDropMode
argument_list|(
name|QAbstractItemView
operator|::
name|InternalMove
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|keyPressEvent
name|void
name|QFileDialogTreeView
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|navigationMode
argument_list|()
operator|==
name|Qt
operator|::
name|NavigationModeKeypadDirectional
condition|)
block|{
name|QTreeView
operator|::
name|keyPressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
comment|// QT_KEYPAD_NAVIGATION
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|itemViewKeyboardEvent
argument_list|(
name|e
argument_list|)
condition|)
name|QTreeView
operator|::
name|keyPressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSize
name|QFileDialogTreeView
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|int
name|height
init|=
name|qMax
argument_list|(
literal|10
argument_list|,
name|sizeHintForRow
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QSize
name|sizeHint
init|=
name|header
argument_list|()
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
return|return
name|QSize
argument_list|(
name|sizeHint
operator|.
name|width
argument_list|()
operator|*
literal|4
argument_list|,
name|height
operator|*
literal|30
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     // FIXME: this is a hack to avoid propagating key press events     // to the dialog and from there to the "Ok" button */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QFileDialogLineEdit
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|navigationMode
argument_list|()
operator|==
name|Qt
operator|::
name|NavigationModeKeypadDirectional
condition|)
block|{
name|QLineEdit
operator|::
name|keyPressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
comment|// QT_KEYPAD_NAVIGATION
name|int
name|key
init|=
name|e
operator|->
name|key
argument_list|()
decl_stmt|;
name|QLineEdit
operator|::
name|keyPressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|!=
name|Qt
operator|::
name|Key_Escape
operator|&&
name|key
operator|!=
name|Qt
operator|::
name|Key_Back
condition|)
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FSCOMPLETER
end_ifndef
begin_function
DECL|function|pathFromIndex
name|QString
name|QFSCompleter
operator|::
name|pathFromIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
specifier|const
name|QFileSystemModel
modifier|*
name|dirModel
decl_stmt|;
if|if
condition|(
name|proxyModel
condition|)
name|dirModel
operator|=
name|qobject_cast
argument_list|<
specifier|const
name|QFileSystemModel
operator|*
argument_list|>
argument_list|(
name|proxyModel
operator|->
name|sourceModel
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|dirModel
operator|=
name|sourceModel
expr_stmt|;
name|QString
name|currentLocation
init|=
name|dirModel
operator|->
name|rootPath
argument_list|()
decl_stmt|;
name|QString
name|path
init|=
name|index
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|currentLocation
operator|.
name|isEmpty
argument_list|()
operator|&&
name|path
operator|.
name|startsWith
argument_list|(
name|currentLocation
argument_list|)
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|currentLocation
operator|==
name|QDir
operator|::
name|separator
argument_list|()
condition|)
return|return
name|path
operator|.
name|mid
argument_list|(
name|currentLocation
operator|.
name|length
argument_list|()
argument_list|)
return|;
endif|#
directive|endif
if|if
condition|(
name|currentLocation
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
return|return
name|path
operator|.
name|mid
argument_list|(
name|currentLocation
operator|.
name|length
argument_list|()
argument_list|)
return|;
else|else
return|return
name|path
operator|.
name|mid
argument_list|(
name|currentLocation
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
return|return
name|index
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|splitPath
name|QStringList
name|QFSCompleter
operator|::
name|splitPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QStringList
argument_list|(
name|completionPrefix
argument_list|()
argument_list|)
return|;
name|QString
name|pathCopy
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QString
name|sep
init|=
name|QDir
operator|::
name|separator
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
if|if
condition|(
name|pathCopy
operator|==
name|QLatin1String
argument_list|(
literal|"\\"
argument_list|)
operator|||
name|pathCopy
operator|==
name|QLatin1String
argument_list|(
literal|"\\\\"
argument_list|)
condition|)
return|return
name|QStringList
argument_list|(
name|pathCopy
argument_list|)
return|;
name|QString
name|doubleSlash
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\\\"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathCopy
operator|.
name|startsWith
argument_list|(
name|doubleSlash
argument_list|)
condition|)
name|pathCopy
operator|=
name|pathCopy
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
expr_stmt|;
else|else
name|doubleSlash
operator|.
name|clear
argument_list|()
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|bool
name|expanded
decl_stmt|;
name|pathCopy
operator|=
name|qt_tildeExpansion
argument_list|(
name|pathCopy
argument_list|,
operator|&
name|expanded
argument_list|)
expr_stmt|;
if|if
condition|(
name|expanded
condition|)
block|{
name|QFileSystemModel
modifier|*
name|dirModel
decl_stmt|;
if|if
condition|(
name|proxyModel
condition|)
name|dirModel
operator|=
name|qobject_cast
argument_list|<
name|QFileSystemModel
operator|*
argument_list|>
argument_list|(
name|proxyModel
operator|->
name|sourceModel
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|dirModel
operator|=
name|sourceModel
expr_stmt|;
name|dirModel
operator|->
name|fetchMore
argument_list|(
name|dirModel
operator|->
name|index
argument_list|(
name|pathCopy
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QRegExp
name|re
argument_list|(
name|QLatin1Char
argument_list|(
literal|'['
argument_list|)
operator|+
name|QRegExp
operator|::
name|escape
argument_list|(
name|sep
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|']'
argument_list|)
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QStringList
name|parts
init|=
name|pathCopy
operator|.
name|split
argument_list|(
name|re
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|doubleSlash
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|parts
operator|.
name|isEmpty
argument_list|()
condition|)
name|parts
index|[
literal|0
index|]
operator|.
name|prepend
argument_list|(
name|doubleSlash
argument_list|)
expr_stmt|;
if|if
condition|(
name|pathCopy
operator|.
name|endsWith
argument_list|(
name|sep
argument_list|)
condition|)
name|parts
operator|.
name|append
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QStringList
name|parts
init|=
name|pathCopy
operator|.
name|split
argument_list|(
name|re
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathCopy
index|[
literal|0
index|]
operator|==
name|sep
index|[
literal|0
index|]
condition|)
comment|// read the "/" at the beginning as the split removed it
name|parts
index|[
literal|0
index|]
operator|=
name|sep
index|[
literal|0
index|]
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|bool
name|startsFromRoot
init|=
operator|!
name|parts
operator|.
name|isEmpty
argument_list|()
operator|&&
name|parts
index|[
literal|0
index|]
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
else|#
directive|else
name|bool
name|startsFromRoot
init|=
name|pathCopy
index|[
literal|0
index|]
operator|==
name|sep
index|[
literal|0
index|]
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|parts
operator|.
name|count
argument_list|()
operator|==
literal|1
operator|||
operator|(
name|parts
operator|.
name|count
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|startsFromRoot
operator|)
condition|)
block|{
specifier|const
name|QFileSystemModel
modifier|*
name|dirModel
decl_stmt|;
if|if
condition|(
name|proxyModel
condition|)
name|dirModel
operator|=
name|qobject_cast
argument_list|<
specifier|const
name|QFileSystemModel
operator|*
argument_list|>
argument_list|(
name|proxyModel
operator|->
name|sourceModel
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|dirModel
operator|=
name|sourceModel
expr_stmt|;
name|QString
name|currentLocation
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dirModel
operator|->
name|rootPath
argument_list|()
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
if|if
condition|(
name|currentLocation
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
condition|)
name|currentLocation
operator|.
name|append
argument_list|(
name|sep
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|currentLocation
operator|.
name|contains
argument_list|(
name|sep
argument_list|)
operator|&&
name|path
operator|!=
name|currentLocation
condition|)
block|{
name|QStringList
name|currentLocationList
init|=
name|splitPath
argument_list|(
name|currentLocation
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|currentLocationList
operator|.
name|isEmpty
argument_list|()
operator|&&
name|parts
operator|.
name|count
argument_list|()
operator|>
literal|0
operator|&&
name|parts
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
name|parts
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|currentLocationList
operator|.
name|removeLast
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|currentLocationList
operator|.
name|isEmpty
argument_list|()
operator|&&
name|currentLocationList
operator|.
name|last
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|currentLocationList
operator|.
name|removeLast
argument_list|()
expr_stmt|;
return|return
name|currentLocationList
operator|+
name|parts
return|;
block|}
block|}
return|return
name|parts
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_COMPLETER
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qfiledialog.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FILEDIALOG
end_comment
end_unit
