begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/qmessagebox.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MESSAGEBOX
end_ifndef
begin_include
include|#
directive|include
file|<QtGui/qdialogbuttonbox.h>
end_include
begin_include
include|#
directive|include
file|"private/qlabel_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qstyle.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qgridlayout.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qaccessible.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qicon.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qtextdocument.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qtextedit.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qtextbrowser.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qmenu.h>
end_include
begin_include
include|#
directive|include
file|"qdialog_p.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/qfont.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qfontmetrics.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qclipboard.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STYLE_S60
end_ifndef
begin_include
include|#
directive|include
file|<qs60style.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE
end_ifdef
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_mobile
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_smartphone
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_pocket_pc
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_include
include|#
directive|include
file|"qguifunctions_wince.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|enum|Button
DECL|enumerator|Old_Ok
DECL|enumerator|Old_Cancel
DECL|enumerator|Old_Yes
DECL|enumerator|Old_No
DECL|enumerator|Old_Abort
DECL|enumerator|Old_Retry
name|enum
name|Button
argument_list|{
name|Old_Ok
operator|=
literal|1
argument_list|,
name|Old_Cancel
operator|=
literal|2
argument_list|,
name|Old_Yes
operator|=
literal|3
argument_list|,
name|Old_No
operator|=
literal|4
argument_list|,
name|Old_Abort
operator|=
literal|5
argument_list|,
name|Old_Retry
operator|=
literal|6
argument_list|,
DECL|enumerator|Old_Ignore
DECL|enumerator|Old_YesAll
DECL|enumerator|Old_NoAll
DECL|enumerator|Old_ButtonMask
name|Old_Ignore
operator|=
literal|7
argument_list|,
name|Old_YesAll
operator|=
literal|8
argument_list|,
name|Old_NoAll
operator|=
literal|9
argument_list|,
name|Old_ButtonMask
operator|=
literal|0xFF
argument_list|,
DECL|enumerator|NewButtonMask
name|NewButtonMask
operator|=
literal|0xFFFFFC00
argument_list|}
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enum|DetailButtonLabel
DECL|enumerator|ShowLabel
DECL|enumerator|HideLabel
enum|enum
name|DetailButtonLabel
block|{
name|ShowLabel
init|=
literal|0
block|,
name|HideLabel
init|=
literal|1
block|}
enum|;
end_enum
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEXTEDIT
end_ifndef
begin_class
DECL|class|QMessageBoxDetailsText
class|class
name|QMessageBoxDetailsText
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|class|TextEdit
class|class
name|TextEdit
super|:
specifier|public
name|QTextEdit
block|{
public|public:
DECL|function|TextEdit
name|TextEdit
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QTextEdit
argument_list|(
name|parent
argument_list|)
block|{ }
DECL|function|contextMenuEvent
name|void
name|contextMenuEvent
parameter_list|(
name|QContextMenuEvent
modifier|*
name|e
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
name|QMenu
modifier|*
name|menu
init|=
name|createStandardContextMenu
argument_list|()
decl_stmt|;
name|menu
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|menu
operator|->
name|popup
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|e
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
class|;
DECL|function|QMessageBoxDetailsText
name|QMessageBoxDetailsText
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|QVBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|layout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QFrame
modifier|*
name|line
init|=
operator|new
name|QFrame
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|line
operator|->
name|setFrameShape
argument_list|(
name|QFrame
operator|::
name|HLine
argument_list|)
expr_stmt|;
name|line
operator|->
name|setFrameShadow
argument_list|(
name|QFrame
operator|::
name|Sunken
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|textEdit
operator|=
operator|new
name|TextEdit
argument_list|()
expr_stmt|;
name|textEdit
operator|->
name|setFixedHeight
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|textEdit
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
block|}
DECL|function|setText
name|void
name|setText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|textEdit
operator|->
name|setPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
DECL|function|text
name|QString
name|text
parameter_list|()
specifier|const
block|{
return|return
name|textEdit
operator|->
name|toPlainText
argument_list|()
return|;
block|}
private|private:
DECL|member|textEdit
name|TextEdit
modifier|*
name|textEdit
decl_stmt|;
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTEDIT
end_comment
begin_class
DECL|class|DetailButton
class|class
name|DetailButton
super|:
specifier|public
name|QPushButton
block|{
public|public:
DECL|function|DetailButton
name|DetailButton
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QPushButton
argument_list|(
name|label
argument_list|(
name|ShowLabel
argument_list|)
argument_list|,
name|parent
argument_list|)
block|{
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
block|}
DECL|function|label
name|QString
name|label
parameter_list|(
name|DetailButtonLabel
name|label
parameter_list|)
specifier|const
block|{
return|return
name|label
operator|==
name|ShowLabel
condition|?
name|QMessageBox
operator|::
name|tr
argument_list|(
literal|"Show Details..."
argument_list|)
else|:
name|QMessageBox
operator|::
name|tr
argument_list|(
literal|"Hide Details..."
argument_list|)
return|;
block|}
DECL|function|setLabel
name|void
name|setLabel
parameter_list|(
name|DetailButtonLabel
name|lbl
parameter_list|)
block|{
name|setText
argument_list|(
name|label
argument_list|(
name|lbl
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|sizeHint
name|QSize
name|sizeHint
parameter_list|()
specifier|const
block|{
name|ensurePolished
argument_list|()
expr_stmt|;
name|QStyleOptionButton
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
specifier|const
name|QFontMetrics
name|fm
init|=
name|fontMetrics
argument_list|()
decl_stmt|;
name|opt
operator|.
name|text
operator|=
name|label
argument_list|(
name|ShowLabel
argument_list|)
expr_stmt|;
name|QSize
name|sz
init|=
name|fm
operator|.
name|size
argument_list|(
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|opt
operator|.
name|text
argument_list|)
decl_stmt|;
name|QSize
name|ret
init|=
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_PushButton
argument_list|,
operator|&
name|opt
argument_list|,
name|sz
argument_list|,
name|this
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
decl_stmt|;
name|opt
operator|.
name|text
operator|=
name|label
argument_list|(
name|HideLabel
argument_list|)
expr_stmt|;
name|sz
operator|=
name|fm
operator|.
name|size
argument_list|(
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|opt
operator|.
name|text
argument_list|)
expr_stmt|;
name|ret
operator|.
name|expandedTo
argument_list|(
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_PushButton
argument_list|,
operator|&
name|opt
argument_list|,
name|sz
argument_list|,
name|this
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QMessageBoxPrivate
class|class
name|QMessageBoxPrivate
super|:
specifier|public
name|QDialogPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QMessageBox
parameter_list|)
specifier|public
private|:
DECL|function|QMessageBoxPrivate
name|QMessageBoxPrivate
parameter_list|()
member_init_list|:
name|escapeButton
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|defaultButton
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|clickedButton
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|detailsButton
argument_list|(
literal|0
argument_list|)
member_init_list|,
ifndef|#
directive|ifndef
name|QT_NO_TEXTEDIT
name|detailsText
argument_list|(
literal|0
argument_list|)
member_init_list|,
endif|#
directive|endif
name|compatMode
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|autoAddOkButton
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|detectedEscapeButton
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|informativeLabel
argument_list|(
literal|0
argument_list|)
block|{ }
name|void
name|init
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
init|=
name|QString
argument_list|()
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
init|=
name|QString
argument_list|()
parameter_list|)
function_decl|;
name|void
name|_q_buttonClicked
parameter_list|(
name|QAbstractButton
modifier|*
parameter_list|)
function_decl|;
name|QAbstractButton
modifier|*
name|findButton
parameter_list|(
name|int
name|button0
parameter_list|,
name|int
name|button1
parameter_list|,
name|int
name|button2
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|void
name|addOldButtons
parameter_list|(
name|int
name|button0
parameter_list|,
name|int
name|button1
parameter_list|,
name|int
name|button2
parameter_list|)
function_decl|;
name|QAbstractButton
modifier|*
name|abstractButtonForId
parameter_list|(
name|int
name|id
parameter_list|)
specifier|const
function_decl|;
name|int
name|execReturnCode
parameter_list|(
name|QAbstractButton
modifier|*
name|button
parameter_list|)
function_decl|;
name|void
name|detectEscapeButton
parameter_list|()
function_decl|;
name|void
name|updateSize
parameter_list|()
function_decl|;
name|int
name|layoutMinimumWidth
parameter_list|()
function_decl|;
name|void
name|retranslateStrings
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|Q_WS_WINCE
name|void
name|hideSpecial
parameter_list|()
function_decl|;
endif|#
directive|endif
specifier|static
name|int
name|showOldMessageBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|QMessageBox
operator|::
name|Icon
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|int
name|button0
parameter_list|,
name|int
name|button1
parameter_list|,
name|int
name|button2
parameter_list|)
function_decl|;
specifier|static
name|int
name|showOldMessageBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|QMessageBox
operator|::
name|Icon
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button0Text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button1Text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button2Text
parameter_list|,
name|int
name|defaultButtonNumber
parameter_list|,
name|int
name|escapeButtonNumber
parameter_list|)
function_decl|;
specifier|static
name|QMessageBox
operator|::
name|StandardButton
name|showNewMessageBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|QMessageBox
operator|::
name|Icon
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QMessageBox
operator|::
name|StandardButtons
name|buttons
parameter_list|,
name|QMessageBox
operator|::
name|StandardButton
name|defaultButton
parameter_list|)
function_decl|;
specifier|static
name|QPixmap
name|standardIcon
parameter_list|(
name|QMessageBox
operator|::
name|Icon
name|icon
parameter_list|,
name|QMessageBox
modifier|*
name|mb
parameter_list|)
function_decl|;
DECL|member|label
name|QLabel
modifier|*
name|label
decl_stmt|;
DECL|member|icon
name|QMessageBox
operator|::
name|Icon
name|icon
decl_stmt|;
DECL|member|iconLabel
name|QLabel
modifier|*
name|iconLabel
decl_stmt|;
DECL|member|buttonBox
name|QDialogButtonBox
modifier|*
name|buttonBox
decl_stmt|;
DECL|member|customButtonList
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|customButtonList
decl_stmt|;
DECL|member|escapeButton
name|QAbstractButton
modifier|*
name|escapeButton
decl_stmt|;
DECL|member|defaultButton
name|QPushButton
modifier|*
name|defaultButton
decl_stmt|;
DECL|member|clickedButton
name|QAbstractButton
modifier|*
name|clickedButton
decl_stmt|;
DECL|member|detailsButton
name|DetailButton
modifier|*
name|detailsButton
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TEXTEDIT
DECL|member|detailsText
name|QMessageBoxDetailsText
modifier|*
name|detailsText
decl_stmt|;
endif|#
directive|endif
DECL|member|compatMode
name|bool
name|compatMode
decl_stmt|;
DECL|member|autoAddOkButton
name|bool
name|autoAddOkButton
decl_stmt|;
DECL|member|detectedEscapeButton
name|QAbstractButton
modifier|*
name|detectedEscapeButton
decl_stmt|;
DECL|member|informativeLabel
name|QLabel
modifier|*
name|informativeLabel
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_MAEMO_5
argument_list|)
DECL|member|textBrowser
name|QTextBrowser
modifier|*
name|textBrowser
decl_stmt|;
endif|#
directive|endif
DECL|member|receiverToDisconnectOnClose
name|QPointer
argument_list|<
name|QObject
argument_list|>
name|receiverToDisconnectOnClose
decl_stmt|;
DECL|member|memberToDisconnectOnClose
name|QByteArray
name|memberToDisconnectOnClose
decl_stmt|;
DECL|member|signalToDisconnectOnClose
name|QByteArray
name|signalToDisconnectOnClose
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|init
name|void
name|QMessageBoxPrivate
operator|::
name|init
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|label
operator|=
operator|new
name|QLabel
expr_stmt|;
name|label
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_msgbox_label"
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|->
name|setTextInteractionFlags
argument_list|(
name|Qt
operator|::
name|TextInteractionFlags
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MessageBox_TextInteractionFlags
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|AlignLeft
argument_list|)
expr_stmt|;
name|label
operator|->
name|setOpenExternalLinks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
name|label
operator|->
name|setContentsMargins
argument_list|(
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
name|label
operator|->
name|setContentsMargins
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|label
operator|->
name|setIndent
argument_list|(
literal|9
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|icon
operator|=
name|QMessageBox
operator|::
name|NoIcon
expr_stmt|;
name|iconLabel
operator|=
operator|new
name|QLabel
expr_stmt|;
name|iconLabel
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_msgboxex_icon_label"
argument_list|)
argument_list|)
expr_stmt|;
name|iconLabel
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|buttonBox
operator|=
operator|new
name|QDialogButtonBox
expr_stmt|;
name|buttonBox
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_msgbox_buttonbox"
argument_list|)
argument_list|)
expr_stmt|;
name|buttonBox
operator|->
name|setCenterButtons
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MessageBox_CenterButtons
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|buttonBox
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|QAbstractButton
operator|*
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_buttonClicked
argument_list|(
name|QAbstractButton
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QGridLayout
modifier|*
name|grid
init|=
operator|new
name|QGridLayout
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_MAC
name|grid
operator|->
name|addWidget
argument_list|(
name|iconLabel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|grid
operator|->
name|addWidget
argument_list|(
name|label
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// -- leave space for information label --
name|grid
operator|->
name|addWidget
argument_list|(
name|buttonBox
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
else|#
directive|else
name|grid
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|grid
operator|->
name|setVerticalSpacing
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|grid
operator|->
name|setHorizontalSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|q
operator|->
name|setContentsMargins
argument_list|(
literal|24
argument_list|,
literal|15
argument_list|,
literal|24
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|grid
operator|->
name|addWidget
argument_list|(
name|iconLabel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|AlignTop
operator||
name|Qt
operator|::
name|AlignLeft
argument_list|)
expr_stmt|;
name|grid
operator|->
name|addWidget
argument_list|(
name|label
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// -- leave space for information label --
name|grid
operator|->
name|setRowStretch
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|grid
operator|->
name|setRowMinimumHeight
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|grid
operator|->
name|addWidget
argument_list|(
name|buttonBox
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|grid
operator|->
name|setSizeConstraint
argument_list|(
name|QLayout
operator|::
name|SetNoConstraint
argument_list|)
expr_stmt|;
name|q
operator|->
name|setLayout
argument_list|(
name|grid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|title
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|q
operator|->
name|setWindowTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|q
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|setModal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|QFont
name|f
init|=
name|q
operator|->
name|font
argument_list|()
decl_stmt|;
name|f
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|label
operator|->
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|retranslateStrings
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|layoutMinimumWidth
name|int
name|QMessageBoxPrivate
operator|::
name|layoutMinimumWidth
parameter_list|()
block|{
name|layout
operator|->
name|activate
argument_list|()
expr_stmt|;
return|return
name|layout
operator|->
name|totalMinimumSize
argument_list|()
operator|.
name|width
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|updateSize
name|void
name|QMessageBoxPrivate
operator|::
name|updateSize
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isVisible
argument_list|()
condition|)
return|return;
name|QSize
name|screenSize
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
comment|// the width of the screen, less the window border.
name|int
name|hardLimit
init|=
name|screenSize
operator|.
name|width
argument_list|()
operator|-
operator|(
name|q
operator|->
name|frameGeometry
argument_list|()
operator|.
name|width
argument_list|()
operator|-
name|q
operator|->
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
operator|)
decl_stmt|;
else|#
directive|else
name|int
name|hardLimit
init|=
name|qMin
argument_list|(
name|screenSize
operator|.
name|width
argument_list|()
operator|-
literal|480
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
comment|// can never get bigger than this
comment|// on small screens allows the messagebox be the same size as the screen
if|if
condition|(
name|screenSize
operator|.
name|width
argument_list|()
operator|<=
literal|1024
condition|)
name|hardLimit
operator|=
name|screenSize
operator|.
name|width
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|int
name|softLimit
init|=
name|qMin
argument_list|(
name|screenSize
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
literal|420
argument_list|)
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
name|int
name|softLimit
init|=
name|qMin
argument_list|(
name|hardLimit
argument_list|,
literal|500
argument_list|)
decl_stmt|;
else|#
directive|else
comment|// note: ideally on windows, hard and soft limits but it breaks compat
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|int
name|softLimit
init|=
name|qMin
argument_list|(
name|screenSize
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
literal|500
argument_list|)
decl_stmt|;
else|#
directive|else
name|int
name|softLimit
init|=
name|qMin
argument_list|(
name|screenSize
operator|.
name|width
argument_list|()
operator|*
literal|3
operator|/
literal|4
argument_list|,
literal|500
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|//Q_WS_WINCE
endif|#
directive|endif
if|if
condition|(
name|informativeLabel
condition|)
name|informativeLabel
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Ignored
argument_list|,
name|QSizePolicy
operator|::
name|Ignored
argument_list|)
expr_stmt|;
name|label
operator|->
name|setWordWrap
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// makes the label return min size
name|int
name|width
init|=
name|layoutMinimumWidth
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|>
name|softLimit
condition|)
block|{
name|label
operator|->
name|setWordWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|width
operator|=
name|qMax
argument_list|(
name|softLimit
argument_list|,
name|layoutMinimumWidth
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|width
operator|>
name|hardLimit
condition|)
block|{
name|label
operator|->
name|d_func
argument_list|()
operator|->
name|ensureTextControl
argument_list|()
expr_stmt|;
if|if
condition|(
name|QTextControl
modifier|*
name|control
init|=
name|label
operator|->
name|d_func
argument_list|()
operator|->
name|control
condition|)
block|{
name|QTextOption
name|opt
init|=
name|control
operator|->
name|document
argument_list|()
operator|->
name|defaultTextOption
argument_list|()
decl_stmt|;
name|opt
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WrapAnywhere
argument_list|)
expr_stmt|;
name|control
operator|->
name|document
argument_list|()
operator|->
name|setDefaultTextOption
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
name|width
operator|=
name|hardLimit
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|Q_WS_S60
comment|// in S60 portait messageBoxes should always occupy maximum width
if|if
condition|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|>
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
condition|)
block|{
name|width
operator|=
name|hardLimit
expr_stmt|;
block|}
else|else
block|{
comment|// in landscape the messageBoxes should be of same width as in portrait
name|width
operator|=
name|qMin
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|hardLimit
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|informativeLabel
condition|)
block|{
name|label
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Ignored
argument_list|,
name|QSizePolicy
operator|::
name|Ignored
argument_list|)
expr_stmt|;
name|QSizePolicy
name|policy
argument_list|(
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Preferred
argument_list|)
decl_stmt|;
name|policy
operator|.
name|setHeightForWidth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|informativeLabel
operator|->
name|setSizePolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|width
operator|=
name|qMax
argument_list|(
name|width
argument_list|,
name|layoutMinimumWidth
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|width
operator|>
name|hardLimit
condition|)
block|{
comment|// longest word is really big, so wrap anywhere
name|informativeLabel
operator|->
name|d_func
argument_list|()
operator|->
name|ensureTextControl
argument_list|()
expr_stmt|;
if|if
condition|(
name|QTextControl
modifier|*
name|control
init|=
name|informativeLabel
operator|->
name|d_func
argument_list|()
operator|->
name|control
condition|)
block|{
name|QTextOption
name|opt
init|=
name|control
operator|->
name|document
argument_list|()
operator|->
name|defaultTextOption
argument_list|()
decl_stmt|;
name|opt
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WrapAnywhere
argument_list|)
expr_stmt|;
name|control
operator|->
name|document
argument_list|()
operator|->
name|setDefaultTextOption
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
name|width
operator|=
name|hardLimit
expr_stmt|;
block|}
name|policy
operator|.
name|setHeightForWidth
argument_list|(
name|label
operator|->
name|wordWrap
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|->
name|setSizePolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
name|QFontMetrics
name|fm
argument_list|(
name|QApplication
operator|::
name|font
argument_list|(
literal|"QWorkspaceTitleBar"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|windowTitleWidth
init|=
name|qMin
argument_list|(
name|fm
operator|.
name|width
argument_list|(
name|q
operator|->
name|windowTitle
argument_list|()
argument_list|)
operator|+
literal|50
argument_list|,
name|hardLimit
argument_list|)
decl_stmt|;
if|if
condition|(
name|windowTitleWidth
operator|>
name|width
condition|)
name|width
operator|=
name|windowTitleWidth
expr_stmt|;
name|layout
operator|->
name|activate
argument_list|()
expr_stmt|;
name|int
name|height
init|=
operator|(
name|layout
operator|->
name|hasHeightForWidth
argument_list|()
operator|)
condition|?
name|layout
operator|->
name|totalHeightForWidth
argument_list|(
name|width
argument_list|)
else|:
name|layout
operator|->
name|totalMinimumSize
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_STYLE_S60
name|QS60Style
modifier|*
name|s60Style
init|=
literal|0
decl_stmt|;
name|s60Style
operator|=
name|qobject_cast
argument_list|<
name|QS60Style
operator|*
argument_list|>
argument_list|(
name|QApplication
operator|::
name|style
argument_list|()
argument_list|)
expr_stmt|;
comment|//use custom pixel metric to deduce the minimum height of the messagebox
if|if
condition|(
name|s60Style
condition|)
name|height
operator|=
name|qMax
argument_list|(
name|height
argument_list|,
name|s60Style
operator|->
name|pixelMetric
argument_list|(
operator|(
name|QStyle
operator|::
name|PixelMetric
operator|)
name|PM_MessageBoxHeight
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|q
operator|->
name|setFixedSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|removePostedEvents
argument_list|(
name|q
argument_list|,
name|QEvent
operator|::
name|LayoutRequest
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE
end_ifdef
begin_comment
comment|/*!   \internal   Hides special buttons which are rather shown in the title bar   on WinCE, to conserve screen space. */
end_comment
begin_function
DECL|function|hideSpecial
name|void
name|QMessageBoxPrivate
operator|::
name|hideSpecial
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPushButton
modifier|*
argument_list|>
name|list
init|=
name|q
operator|->
name|findChildren
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPushButton
modifier|*
name|pb
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|text
init|=
name|pb
operator|->
name|text
argument_list|()
decl_stmt|;
name|text
operator|.
name|remove
argument_list|(
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'&'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|==
name|QApplication
operator|::
name|translate
argument_list|(
literal|"QMessageBox"
argument_list|,
literal|"OK"
argument_list|)
condition|)
name|pb
operator|->
name|setFixedSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|oldButton
specifier|static
name|int
name|oldButton
parameter_list|(
name|int
name|button
parameter_list|)
block|{
switch|switch
condition|(
name|button
operator|&
name|QMessageBox
operator|::
name|ButtonMask
condition|)
block|{
case|case
name|QMessageBox
operator|::
name|Ok
case|:
return|return
name|Old_Ok
return|;
case|case
name|QMessageBox
operator|::
name|Cancel
case|:
return|return
name|Old_Cancel
return|;
case|case
name|QMessageBox
operator|::
name|Yes
case|:
return|return
name|Old_Yes
return|;
case|case
name|QMessageBox
operator|::
name|No
case|:
return|return
name|Old_No
return|;
case|case
name|QMessageBox
operator|::
name|Abort
case|:
return|return
name|Old_Abort
return|;
case|case
name|QMessageBox
operator|::
name|Retry
case|:
return|return
name|Old_Retry
return|;
case|case
name|QMessageBox
operator|::
name|Ignore
case|:
return|return
name|Old_Ignore
return|;
case|case
name|QMessageBox
operator|::
name|YesToAll
case|:
return|return
name|Old_YesAll
return|;
case|case
name|QMessageBox
operator|::
name|NoToAll
case|:
return|return
name|Old_NoAll
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
end_function
begin_function
DECL|function|execReturnCode
name|int
name|QMessageBoxPrivate
operator|::
name|execReturnCode
parameter_list|(
name|QAbstractButton
modifier|*
name|button
parameter_list|)
block|{
name|int
name|ret
init|=
name|buttonBox
operator|->
name|standardButton
argument_list|(
name|button
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
name|QMessageBox
operator|::
name|NoButton
condition|)
block|{
name|ret
operator|=
name|customButtonList
operator|.
name|indexOf
argument_list|(
name|button
argument_list|)
expr_stmt|;
comment|// if button == 0, correctly sets ret = -1
block|}
elseif|else
if|if
condition|(
name|compatMode
condition|)
block|{
name|ret
operator|=
name|oldButton
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|_q_buttonClicked
name|void
name|QMessageBoxPrivate
operator|::
name|_q_buttonClicked
parameter_list|(
name|QAbstractButton
modifier|*
name|button
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TEXTEDIT
if|if
condition|(
name|detailsButton
operator|&&
name|detailsText
operator|&&
name|button
operator|==
name|detailsButton
condition|)
block|{
name|detailsButton
operator|->
name|setLabel
argument_list|(
name|detailsText
operator|->
name|isHidden
argument_list|()
condition|?
name|HideLabel
else|:
name|ShowLabel
argument_list|)
expr_stmt|;
name|detailsText
operator|->
name|setHidden
argument_list|(
operator|!
name|detailsText
operator|->
name|isHidden
argument_list|()
argument_list|)
expr_stmt|;
name|updateSize
argument_list|()
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|clickedButton
operator|=
name|button
expr_stmt|;
name|q
operator|->
name|done
argument_list|(
name|execReturnCode
argument_list|(
name|button
argument_list|)
argument_list|)
expr_stmt|;
comment|// does not trigger closeEvent
emit|emit
name|q
operator|->
name|buttonClicked
argument_list|(
name|button
argument_list|)
emit|;
if|if
condition|(
name|receiverToDisconnectOnClose
condition|)
block|{
name|QObject
operator|::
name|disconnect
argument_list|(
name|q
argument_list|,
name|signalToDisconnectOnClose
argument_list|,
name|receiverToDisconnectOnClose
argument_list|,
name|memberToDisconnectOnClose
argument_list|)
expr_stmt|;
name|receiverToDisconnectOnClose
operator|=
literal|0
expr_stmt|;
block|}
name|signalToDisconnectOnClose
operator|.
name|clear
argument_list|()
expr_stmt|;
name|memberToDisconnectOnClose
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \class QMessageBox      \brief The QMessageBox class provides a modal dialog for informing     the user or for asking the user a question and receiving an answer.      \ingroup standard-dialogs       A message box displays a primary \l{QMessageBox::text}{text} to     alert the user to a situation, an \l{QMessageBox::informativeText}     {informative text} to further explain the alert or to ask the user     a question, and an optional \l{QMessageBox::detailedText}     {detailed text} to provide even more data if the user requests     it. A message box can also display an \l{QMessageBox::icon} {icon}     and \l{QMessageBox::standardButtons} {standard buttons} for     accepting a user response.      Two APIs for using QMessageBox are provided, the property-based     API, and the static functions. Calling one of the static functions     is the simpler approach, but it is less flexible than using the     property-based API, and the result is less informative. Using the     property-based API is recommended.      \section1 The Property-based API      To use the property-based API, construct an instance of     QMessageBox, set the desired properties, and call exec() to show     the message. The simplest configuration is to set only the     \l{QMessageBox::text} {message text} property.      \snippet doc/src/snippets/code/src_gui_dialogs_qmessagebox.cpp 5      The user must click the \gui{OK} button to dismiss the message     box. The rest of the GUI is blocked until the message box is     dismissed.      \image msgbox1.png      A better approach than just alerting the user to an event is to     also ask the user what to do about it. Store the question in the     \l{QMessageBox::informativeText} {informative text} property, and     set the \l{QMessageBox::standardButtons} {standard buttons}     property to the set of buttons you want as the set of user     responses. The buttons are specified by combining values from     StandardButtons using the bitwise OR operator. The display order     for the buttons is platform-dependent. For example, on Windows,     \gui{Save} is displayed to the left of \gui{Cancel}, whereas on     Mac OS, the order is reversed.      Mark one of your standard buttons to be your     \l{QMessageBox::defaultButton()} {default button}.      \snippet doc/src/snippets/code/src_gui_dialogs_qmessagebox.cpp 6      This is the approach recommended in the     \l{http://developer.apple.com/documentation/UserExperience/Conceptual/AppleHIGuidelines/XHIGWindows/chapter_18_section_7.html}     {Mac OS X Guidlines}. Similar guidlines apply for the other     platforms, but note the different ways the     \l{QMessageBox::informativeText} {informative text} is handled for     different platforms.      \image msgbox2.png      The exec() slot returns the StandardButtons value of the button     that was clicked.      \snippet doc/src/snippets/code/src_gui_dialogs_qmessagebox.cpp 7      To give the user more information to help him answer the question,     set the \l{QMessageBox::detailedText} {detailed text} property. If     the \l{QMessageBox::detailedText} {detailed text} property is set,     the \gui{Show Details...} button will be shown.      \image msgbox3.png      Clicking the \gui{Show Details...} button displays the detailed text.      \image msgbox4.png      \section2 Rich Text and the Text Format Property      The \l{QMessageBox::detailedText} {detailed text} property is     always interpreted as plain text. The \l{QMessageBox::text} {main     text} and \l{QMessageBox::informativeText} {informative text}     properties can be either plain text or rich text. These strings     are interpreted according to the setting of the     \l{QMessageBox::textFormat} {text format} property. The default     setting is \l{Qt::AutoText} {auto-text}.      Note that for some plain text strings containing XML     meta-characters, the auto-text \l{Qt::mightBeRichText()} {rich     text detection test} may fail causing your plain text string to be     interpreted incorrectly as rich text. In these rare cases, use     Qt::convertFromPlainText() to convert your plain text string to a     visually equivalent rich text string, or set the     \l{QMessageBox::textFormat} {text format} property explicitly with     setTextFormat().      \section2 Severity Levels and the Icon and Pixmap Properties      QMessageBox supports four predefined message severity levels, or message     types, which really only differ in the predefined icon they each show.     Specify one of the four predefined message types by setting the     \l{QMessageBox::icon}{icon} property to one of the     \l{QMessageBox::Icon}{predefined icons}. The following rules are     guidelines:      \table     \row     \o \img qmessagebox-quest.png     \o \l Question     \o For asking a question during normal operations.     \row     \o \img qmessagebox-info.png     \o \l Information     \o For reporting information about normal operations.     \row     \o \img qmessagebox-warn.png     \o \l Warning     \o For reporting non-critical errors.     \row     \o \img qmessagebox-crit.png     \o \l Critical     \o For reporting critical errors.     \endtable      \l{QMessageBox::Icon}{Predefined icons} are not defined by QMessageBox, but     provided by the style. The default value is \l{QMessageBox::NoIcon}     {No Icon}. The message boxes are otherwise the same for all cases. When     using a standard icon, use the one recommended in the table, or use the     one recommended by the style guidelines for your platform. If none of the     standard icons is right for your message box, you can use a custom icon by     setting the \l{QMessageBox::iconPixmap}{icon pixmap} property instead of     setting the \l{QMessageBox::icon}{icon} property.      In summary, to set an icon, use \e{either} setIcon() for one of the     standard icons, \e{or} setIconPixmap() for a custom icon.      \section1 The Static Functions API      Building message boxes with the static functions API, although     convenient, is less flexible than using the property-based API,     because the static function signatures lack parameters for setting     the \l{QMessageBox::informativeText} {informative text} and     \l{QMessageBox::detailedText} {detailed text} properties. One     work-around for this has been to use the \c{title} parameter as     the message box main text and the \c{text} parameter as the     message box informative text. Because this has the obvious     drawback of making a less readable message box, platform     guidelines do not recommend it. The \e{Microsoft Windows User     Interface Guidelines} recommend using the     \l{QCoreApplication::applicationName} {application name} as the     \l{QMessageBox::setWindowTitle()} {window's title}, which means     that if you have an informative text in addition to your main     text, you must concatenate it to the \c{text} parameter.      Note that the static function signatures have changed with respect     to their button parameters, which are now used to set the     \l{QMessageBox::standardButtons} {standard buttons} and the     \l{QMessageBox::defaultButton()} {default button}.      Static functions are available for creating information(),     question(), warning(), and critical() message boxes.      \snippet doc/src/snippets/code/src_gui_dialogs_qmessagebox.cpp 0      The \l{dialogs/standarddialogs}{Standard Dialogs} example shows     how to use QMessageBox and the other built-in Qt dialogs.      \section1 Advanced Usage      If the \l{QMessageBox::StandardButtons} {standard buttons} are not     flexible enough for your message box, you can use the addButton()     overload that takes a text and a ButtonRoleto to add custom     buttons. The ButtonRole is used by QMessageBox to determine the     ordering of the buttons on screen (which varies according to the     platform). You can test the value of clickedButton() after calling     exec(). For example,      \snippet doc/src/snippets/code/src_gui_dialogs_qmessagebox.cpp 2      \section1 Default and Escape Keys      The default button (i.e., the button activated when \key Enter is     pressed) can be specified using setDefaultButton(). If a default     button is not specified, QMessageBox tries to find one based on     the \l{ButtonRole} {button roles} of the buttons used in the     message box.      The escape button (the button activated when \key Esc is pressed)     can be specified using setEscapeButton().  If an escape button is     not specified, QMessageBox tries to find one using these rules:      \list 1      \o If there is only one button, it is the button activated when     \key Esc is pressed.      \o If there is a \l Cancel button, it is the button activated when     \key Esc is pressed.      \o If there is exactly one button having either        \l{QMessageBox::RejectRole} {the Reject role} or the        \l{QMessageBox::NoRole} {the No role}, it is the button        activated when \key Esc is pressed.      \endlist      When an escape button can't be determined using these rules,     pressing \key Esc has no effect.      \sa QDialogButtonBox, {fowler}{GUI Design Handbook: Message Box}, {Standard Dialogs Example}, {Application Example} */
end_comment
begin_comment
comment|/*!     \enum QMessageBox::StandardButton     \since 4.2      These enums describe flags for standard buttons. Each button has a     defined \l ButtonRole.      \value Ok An "OK" button defined with the \l AcceptRole.     \value Open A "Open" button defined with the \l AcceptRole.     \value Save A "Save" button defined with the \l AcceptRole.     \value Cancel A "Cancel" button defined with the \l RejectRole.     \value Close A "Close" button defined with the \l RejectRole.     \value Discard A "Discard" or "Don't Save" button, depending on the platform,                     defined with the \l DestructiveRole.     \value Apply An "Apply" button defined with the \l ApplyRole.     \value Reset A "Reset" button defined with the \l ResetRole.     \value RestoreDefaults A "Restore Defaults" button defined with the \l ResetRole.     \value Help A "Help" button defined with the \l HelpRole.     \value SaveAll A "Save All" button defined with the \l AcceptRole.     \value Yes A "Yes" button defined with the \l YesRole.     \value YesToAll A "Yes to All" button defined with the \l YesRole.     \value No A "No" button defined with the \l NoRole.     \value NoToAll A "No to All" button defined with the \l NoRole.     \value Abort An "Abort" button defined with the \l RejectRole.     \value Retry A "Retry" button defined with the \l AcceptRole.     \value Ignore An "Ignore" button defined with the \l AcceptRole.      \value NoButton An invalid button.      \omitvalue FirstButton     \omitvalue LastButton      The following values are obsolete:      \value YesAll Use YesToAll instead.     \value NoAll Use NoToAll instead.     \value Default Use the \c defaultButton argument of            information(), warning(), etc. instead, or call            setDefaultButton().     \value Escape Call setEscapeButton() instead.     \value FlagMask     \value ButtonMask      \sa ButtonRole, standardButtons */
end_comment
begin_comment
comment|/*!     \fn void QMessageBox::buttonClicked(QAbstractButton *button)      This signal is emitted whenever a button is clicked inside the QMessageBox.     The button that was clicked in returned in \a button. */
end_comment
begin_comment
comment|/*!     Constructs a message box with no text and no buttons. \a parent is     passed to the QDialog constructor.      On Mac OS X, if you want your message box to appear     as a Qt::Sheet of its \a parent, set the message box's     \l{setWindowModality()} {window modality} to Qt::WindowModal or use open().     Otherwise, the message box will be a standard dialog.  */
end_comment
begin_constructor
DECL|function|QMessageBox
name|QMessageBox
operator|::
name|QMessageBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|new
name|QMessageBoxPrivate
argument_list|,
name|parent
argument_list|,
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
operator||
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
argument_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a message box with the given \a icon, \a title, \a     text, and standard \a buttons. Standard or custom buttons can be     added at any time using addButton(). The \a parent and \a f     arguments are passed to the QDialog constructor.      The message box is an \l{Qt::ApplicationModal} {application modal}     dialog box.      On Mac OS X, if \a parent is not 0 and you want your message box     to appear as a Qt::Sheet of that parent, set the message box's     \l{setWindowModality()} {window modality} to Qt::WindowModal     (default). Otherwise, the message box will be a standard dialog.      \sa setWindowTitle(), setText(), setIcon(), setStandardButtons() */
end_comment
begin_constructor
DECL|function|QMessageBox
name|QMessageBox
operator|::
name|QMessageBox
parameter_list|(
name|Icon
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|StandardButtons
name|buttons
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|new
name|QMessageBoxPrivate
argument_list|,
name|parent
argument_list|,
name|f
operator||
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
operator||
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
argument_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|title
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
if|if
condition|(
name|buttons
operator|!=
name|NoButton
condition|)
name|setStandardButtons
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the message box. */
end_comment
begin_destructor
DECL|function|~QMessageBox
name|QMessageBox
operator|::
name|~
name|QMessageBox
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \since 4.2      Adds the given \a button to the message box with the specified \a     role.      \sa removeButton(), button(), setStandardButtons() */
end_comment
begin_function
DECL|function|addButton
name|void
name|QMessageBox
operator|::
name|addButton
parameter_list|(
name|QAbstractButton
modifier|*
name|button
parameter_list|,
name|ButtonRole
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|button
condition|)
return|return;
name|removeButton
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttonBox
operator|->
name|addButton
argument_list|(
name|button
argument_list|,
operator|(
name|QDialogButtonBox
operator|::
name|ButtonRole
operator|)
name|role
argument_list|)
expr_stmt|;
name|d
operator|->
name|customButtonList
operator|.
name|append
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|d
operator|->
name|autoAddOkButton
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     \overload      Creates a button with the given \a text, adds it to the message box for the     specified \a role, and returns it. */
end_comment
begin_function
DECL|function|addButton
name|QPushButton
modifier|*
name|QMessageBox
operator|::
name|addButton
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|ButtonRole
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|pushButton
init|=
operator|new
name|QPushButton
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|addButton
argument_list|(
name|pushButton
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateSize
argument_list|()
expr_stmt|;
return|return
name|pushButton
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     \overload      Adds a standard \a button to the message box if it is valid to do so, and     returns the push button.      \sa setStandardButtons() */
end_comment
begin_function
DECL|function|addButton
name|QPushButton
modifier|*
name|QMessageBox
operator|::
name|addButton
parameter_list|(
name|StandardButton
name|button
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|pushButton
init|=
name|d
operator|->
name|buttonBox
operator|->
name|addButton
argument_list|(
operator|(
name|QDialogButtonBox
operator|::
name|StandardButton
operator|)
name|button
argument_list|)
decl_stmt|;
if|if
condition|(
name|pushButton
condition|)
name|d
operator|->
name|autoAddOkButton
operator|=
literal|false
expr_stmt|;
return|return
name|pushButton
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Removes \a button from the button box without deleting it.      \sa addButton(), setStandardButtons() */
end_comment
begin_function
DECL|function|removeButton
name|void
name|QMessageBox
operator|::
name|removeButton
parameter_list|(
name|QAbstractButton
modifier|*
name|button
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|customButtonList
operator|.
name|removeAll
argument_list|(
name|button
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|escapeButton
operator|==
name|button
condition|)
name|d
operator|->
name|escapeButton
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|defaultButton
operator|==
name|button
condition|)
name|d
operator|->
name|defaultButton
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|buttonBox
operator|->
name|removeButton
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateSize
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QMessageBox::standardButtons     \brief collection of standard buttons in the message box     \since 4.2      This property controls which standard buttons are used by the message box.      By default, this property contains no standard buttons.      \sa addButton() */
end_comment
begin_function
DECL|function|setStandardButtons
name|void
name|QMessageBox
operator|::
name|setStandardButtons
parameter_list|(
name|StandardButtons
name|buttons
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttonBox
operator|->
name|setStandardButtons
argument_list|(
name|QDialogButtonBox
operator|::
name|StandardButtons
argument_list|(
name|int
argument_list|(
name|buttons
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|buttonList
init|=
name|d
operator|->
name|buttonBox
operator|->
name|buttons
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|buttonList
operator|.
name|contains
argument_list|(
name|d
operator|->
name|escapeButton
argument_list|)
condition|)
name|d
operator|->
name|escapeButton
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|buttonList
operator|.
name|contains
argument_list|(
name|d
operator|->
name|defaultButton
argument_list|)
condition|)
name|d
operator|->
name|defaultButton
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|autoAddOkButton
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|updateSize
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|standardButtons
name|QMessageBox
operator|::
name|StandardButtons
name|QMessageBox
operator|::
name|standardButtons
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
return|return
name|QMessageBox
operator|::
name|StandardButtons
argument_list|(
name|int
argument_list|(
name|d
operator|->
name|buttonBox
operator|->
name|standardButtons
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the standard button enum value corresponding to the given \a button,     or NoButton if the given \a button isn't a standard button.      \sa button(), standardButtons() */
end_comment
begin_function
DECL|function|standardButton
name|QMessageBox
operator|::
name|StandardButton
name|QMessageBox
operator|::
name|standardButton
parameter_list|(
name|QAbstractButton
modifier|*
name|button
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
return|return
operator|(
name|QMessageBox
operator|::
name|StandardButton
operator|)
name|d
operator|->
name|buttonBox
operator|->
name|standardButton
argument_list|(
name|button
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns a pointer corresponding to the standard button \a which,     or 0 if the standard button doesn't exist in this message box.      \sa standardButtons, standardButton() */
end_comment
begin_function
DECL|function|button
name|QAbstractButton
modifier|*
name|QMessageBox
operator|::
name|button
parameter_list|(
name|StandardButton
name|which
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|StandardButton
argument_list|(
name|which
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the button that is activated when escape is pressed.      By default, QMessageBox attempts to automatically detect an     escape button as follows:      \list 1     \o If there is only one button, it is made the escape button.     \o If there is a \l Cancel button, it is made the escape button.     \o On Mac OS X only, if there is exactly one button with the role        QMessageBox::RejectRole, it is made the escape button.     \endlist      When an escape button could not be automatically detected, pressing     \key Esc has no effect.      \sa addButton() */
end_comment
begin_function
DECL|function|escapeButton
name|QAbstractButton
modifier|*
name|QMessageBox
operator|::
name|escapeButton
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|escapeButton
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Sets the button that gets activated when the \key Escape key is     pressed to \a button.      \sa addButton(), clickedButton() */
end_comment
begin_function
DECL|function|setEscapeButton
name|void
name|QMessageBox
operator|::
name|setEscapeButton
parameter_list|(
name|QAbstractButton
modifier|*
name|button
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|buttonBox
operator|->
name|buttons
argument_list|()
operator|.
name|contains
argument_list|(
name|button
argument_list|)
condition|)
name|d
operator|->
name|escapeButton
operator|=
name|button
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.3      Sets the buttons that gets activated when the \key Escape key is     pressed to \a button.      \sa addButton(), clickedButton() */
end_comment
begin_function
DECL|function|setEscapeButton
name|void
name|QMessageBox
operator|::
name|setEscapeButton
parameter_list|(
name|QMessageBox
operator|::
name|StandardButton
name|button
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|setEscapeButton
argument_list|(
name|d
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|StandardButton
argument_list|(
name|button
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detectEscapeButton
name|void
name|QMessageBoxPrivate
operator|::
name|detectEscapeButton
parameter_list|()
block|{
if|if
condition|(
name|escapeButton
condition|)
block|{
comment|// escape button explicitly set
name|detectedEscapeButton
operator|=
name|escapeButton
expr_stmt|;
return|return;
block|}
comment|// Cancel button automatically becomes escape button
name|detectedEscapeButton
operator|=
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
if|if
condition|(
name|detectedEscapeButton
condition|)
return|return;
comment|// If there is only one button, make it the escape button
specifier|const
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|buttons
init|=
name|buttonBox
operator|->
name|buttons
argument_list|()
decl_stmt|;
if|if
condition|(
name|buttons
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
name|detectedEscapeButton
operator|=
name|buttons
operator|.
name|first
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// if the message box has one RejectRole button, make it the escape button
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buttons
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|buttonBox
operator|->
name|buttonRole
argument_list|(
name|buttons
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|==
name|QDialogButtonBox
operator|::
name|RejectRole
condition|)
block|{
if|if
condition|(
name|detectedEscapeButton
condition|)
block|{
comment|// already detected!
name|detectedEscapeButton
operator|=
literal|0
expr_stmt|;
break|break;
block|}
name|detectedEscapeButton
operator|=
name|buttons
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|detectedEscapeButton
condition|)
return|return;
comment|// if the message box has one NoRole button, make it the escape button
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buttons
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|buttonBox
operator|->
name|buttonRole
argument_list|(
name|buttons
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|==
name|QDialogButtonBox
operator|::
name|NoRole
condition|)
block|{
if|if
condition|(
name|detectedEscapeButton
condition|)
block|{
comment|// already detected!
name|detectedEscapeButton
operator|=
literal|0
expr_stmt|;
break|break;
block|}
name|detectedEscapeButton
operator|=
name|buttons
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the button that was clicked by the user,     or 0 if the user hit the \key Esc key and     no \l{setEscapeButton()}{escape button} was set.      If exec() hasn't been called yet, returns 0.      Example:      \snippet doc/src/snippets/code/src_gui_dialogs_qmessagebox.cpp 3      \sa standardButton(), button() */
end_comment
begin_function
DECL|function|clickedButton
name|QAbstractButton
modifier|*
name|QMessageBox
operator|::
name|clickedButton
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|clickedButton
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the button that should be the message box's     \l{QPushButton::setDefault()}{default button}. Returns 0     if no default button was set.      \sa addButton(), QPushButton::setDefault() */
end_comment
begin_function
DECL|function|defaultButton
name|QPushButton
modifier|*
name|QMessageBox
operator|::
name|defaultButton
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|defaultButton
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Sets the message box's \l{QPushButton::setDefault()}{default button}     to \a button.      \sa addButton(), QPushButton::setDefault() */
end_comment
begin_function
DECL|function|setDefaultButton
name|void
name|QMessageBox
operator|::
name|setDefaultButton
parameter_list|(
name|QPushButton
modifier|*
name|button
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|buttonBox
operator|->
name|buttons
argument_list|()
operator|.
name|contains
argument_list|(
name|button
argument_list|)
condition|)
return|return;
name|d
operator|->
name|defaultButton
operator|=
name|button
expr_stmt|;
name|button
operator|->
name|setDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|button
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.3      Sets the message box's \l{QPushButton::setDefault()}{default button}     to \a button.      \sa addButton(), QPushButton::setDefault() */
end_comment
begin_function
DECL|function|setDefaultButton
name|void
name|QMessageBox
operator|::
name|setDefaultButton
parameter_list|(
name|QMessageBox
operator|::
name|StandardButton
name|button
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|setDefaultButton
argument_list|(
name|d
operator|->
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|StandardButton
argument_list|(
name|button
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QMessageBox::text   \brief the message box text to be displayed.    The text will be interpreted either as a plain text or as rich text,   depending on the text format setting (\l QMessageBox::textFormat).   The default setting is Qt::AutoText, i.e., the message box will try   to auto-detect the format of the text.    The default value of this property is an empty string.    \sa textFormat, QMessageBox::informativeText, QMessageBox::detailedText */
end_comment
begin_function
DECL|function|text
name|QString
name|QMessageBox
operator|::
name|text
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|label
operator|->
name|text
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|QMessageBox
operator|::
name|setText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|label
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|d
operator|->
name|label
operator|->
name|setWordWrap
argument_list|(
name|d
operator|->
name|label
operator|->
name|textFormat
argument_list|()
operator|==
name|Qt
operator|::
name|RichText
operator|||
operator|(
name|d
operator|->
name|label
operator|->
name|textFormat
argument_list|()
operator|==
name|Qt
operator|::
name|AutoText
operator|&&
name|Qt
operator|::
name|mightBeRichText
argument_list|(
name|text
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateSize
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \enum QMessageBox::Icon      This enum has the following values:      \value NoIcon the message box does not have any icon.      \value Question an icon indicating that     the message is asking a question.      \value Information an icon indicating that     the message is nothing out of the ordinary.      \value Warning an icon indicating that the     message is a warning, but can be dealt with.      \value Critical an icon indicating that     the message represents a critical problem.  */
end_comment
begin_comment
comment|/*!     \property QMessageBox::icon     \brief the message box's icon      The icon of the message box can be specified with one of the     values:      \list     \o QMessageBox::NoIcon     \o QMessageBox::Question     \o QMessageBox::Information     \o QMessageBox::Warning     \o QMessageBox::Critical     \endlist      The default is QMessageBox::NoIcon.      The pixmap used to display the actual icon depends on the current     \l{QWidget::style()} {GUI style}. You can also set a custom pixmap     for the icon by setting the \l{QMessageBox::iconPixmap} {icon     pixmap} property.      \sa iconPixmap */
end_comment
begin_function
DECL|function|icon
name|QMessageBox
operator|::
name|Icon
name|QMessageBox
operator|::
name|icon
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|icon
return|;
block|}
end_function
begin_function
DECL|function|setIcon
name|void
name|QMessageBox
operator|::
name|setIcon
parameter_list|(
name|Icon
name|icon
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|setIconPixmap
argument_list|(
name|QMessageBoxPrivate
operator|::
name|standardIcon
argument_list|(
operator|(
name|QMessageBox
operator|::
name|Icon
operator|)
name|icon
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|icon
operator|=
name|icon
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QMessageBox::iconPixmap     \brief the current icon      The icon currently used by the message box. Note that it's often     hard to draw one pixmap that looks appropriate in all GUI styles;     you may want to supply a different pixmap for each platform.      By default, this property is undefined.      \sa icon */
end_comment
begin_function
DECL|function|iconPixmap
name|QPixmap
name|QMessageBox
operator|::
name|iconPixmap
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|iconLabel
operator|&&
name|d
operator|->
name|iconLabel
operator|->
name|pixmap
argument_list|()
condition|)
return|return
operator|*
name|d
operator|->
name|iconLabel
operator|->
name|pixmap
argument_list|()
return|;
return|return
name|QPixmap
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setIconPixmap
name|void
name|QMessageBox
operator|::
name|setIconPixmap
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|iconLabel
operator|->
name|setPixmap
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|icon
operator|=
name|NoIcon
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QMessageBox::textFormat     \brief the format of the text displayed by the message box      The current text format used by the message box. See the \l     Qt::TextFormat enum for an explanation of the possible options.      The default format is Qt::AutoText.      \sa setText() */
end_comment
begin_function
DECL|function|textFormat
name|Qt
operator|::
name|TextFormat
name|QMessageBox
operator|::
name|textFormat
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|label
operator|->
name|textFormat
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setTextFormat
name|void
name|QMessageBox
operator|::
name|setTextFormat
parameter_list|(
name|Qt
operator|::
name|TextFormat
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|label
operator|->
name|setTextFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|d
operator|->
name|label
operator|->
name|setWordWrap
argument_list|(
name|format
operator|==
name|Qt
operator|::
name|RichText
operator|||
operator|(
name|format
operator|==
name|Qt
operator|::
name|AutoText
operator|&&
name|Qt
operator|::
name|mightBeRichText
argument_list|(
name|d
operator|->
name|label
operator|->
name|text
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateSize
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QMessageBox
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|bool
name|result
init|=
name|QDialog
operator|::
name|event
argument_list|(
name|e
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|LayoutRequest
case|:
name|d_func
argument_list|()
operator|->
name|updateSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|LanguageChange
case|:
name|d_func
argument_list|()
operator|->
name|retranslateStrings
argument_list|()
expr_stmt|;
break|break;
ifdef|#
directive|ifdef
name|Q_WS_WINCE
case|case
name|QEvent
operator|::
name|OkRequest
case|:
case|case
name|QEvent
operator|::
name|HelpRequest
case|:
block|{
name|QString
name|bName
init|=
operator|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|OkRequest
operator|)
condition|?
name|QApplication
operator|::
name|translate
argument_list|(
literal|"QMessageBox"
argument_list|,
literal|"OK"
argument_list|)
else|:
name|QApplication
operator|::
name|translate
argument_list|(
literal|"QMessageBox"
argument_list|,
literal|"Help"
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QPushButton
modifier|*
argument_list|>
name|list
init|=
name|findChildren
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPushButton
modifier|*
name|pb
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pb
operator|->
name|text
argument_list|()
operator|==
name|bName
condition|)
block|{
if|if
condition|(
name|pb
operator|->
name|isEnabled
argument_list|()
condition|)
name|pb
operator|->
name|click
argument_list|()
expr_stmt|;
return|return
name|pb
operator|->
name|isEnabled
argument_list|()
return|;
block|}
block|}
block|}
endif|#
directive|endif
default|default:
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QMessageBox
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|event
parameter_list|)
block|{
name|QDialog
operator|::
name|resizeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|closeEvent
name|void
name|QMessageBox
operator|::
name|closeEvent
parameter_list|(
name|QCloseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|detectedEscapeButton
condition|)
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|QDialog
operator|::
name|closeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|d
operator|->
name|clickedButton
operator|=
name|d
operator|->
name|detectedEscapeButton
expr_stmt|;
name|setResult
argument_list|(
name|d
operator|->
name|execReturnCode
argument_list|(
name|d
operator|->
name|detectedEscapeButton
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QMessageBox
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|ev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ev
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|StyleChange
case|:
block|{
if|if
condition|(
name|d
operator|->
name|icon
operator|!=
name|NoIcon
condition|)
name|setIcon
argument_list|(
name|d
operator|->
name|icon
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|TextInteractionFlags
name|flags
argument_list|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MessageBox_TextInteractionFlags
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|label
operator|->
name|setTextInteractionFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttonBox
operator|->
name|setCenterButtons
argument_list|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MessageBox_CenterButtons
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|informativeLabel
condition|)
name|d
operator|->
name|informativeLabel
operator|->
name|setTextInteractionFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
comment|// intentional fall through
block|}
case|case
name|QEvent
operator|::
name|FontChange
case|:
case|case
name|QEvent
operator|::
name|ApplicationFontChange
case|:
ifdef|#
directive|ifdef
name|Q_WS_MAC
block|{
name|QFont
name|f
init|=
name|font
argument_list|()
decl_stmt|;
name|f
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|label
operator|->
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
default|default:
break|break;
block|}
name|QDialog
operator|::
name|changeEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QMessageBox
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Escape
ifdef|#
directive|ifdef
name|Q_WS_MAC
operator|||
operator|(
name|e
operator|->
name|modifiers
argument_list|()
operator|==
name|Qt
operator|::
name|ControlModifier
operator|&&
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Period
operator|)
endif|#
directive|endif
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|detectedEscapeButton
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|d
operator|->
name|detectedEscapeButton
operator|->
name|animateClick
argument_list|()
expr_stmt|;
else|#
directive|else
name|d
operator|->
name|detectedEscapeButton
operator|->
name|click
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
return|return;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_CLIPBOARD
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_SHORTCUT
argument_list|)
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|Copy
condition|)
block|{
name|QString
name|separator
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"---------------------------\n"
argument_list|)
decl_stmt|;
name|QString
name|textToCopy
init|=
name|separator
decl_stmt|;
name|separator
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
name|textToCopy
operator|+=
name|windowTitle
argument_list|()
operator|+
name|separator
expr_stmt|;
comment|// title
name|textToCopy
operator|+=
name|d
operator|->
name|label
operator|->
name|text
argument_list|()
operator|+
name|separator
expr_stmt|;
comment|// text
if|if
condition|(
name|d
operator|->
name|informativeLabel
condition|)
name|textToCopy
operator|+=
name|d
operator|->
name|informativeLabel
operator|->
name|text
argument_list|()
operator|+
name|separator
expr_stmt|;
name|QString
name|buttonTexts
decl_stmt|;
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|buttons
init|=
name|d
operator|->
name|buttonBox
operator|->
name|buttons
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buttons
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|buttonTexts
operator|+=
name|buttons
index|[
name|i
index|]
operator|->
name|text
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"   "
argument_list|)
expr_stmt|;
block|}
name|textToCopy
operator|+=
name|buttonTexts
operator|+
name|separator
expr_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|textToCopy
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
comment|//QT_NO_SHORTCUT QT_NO_CLIPBOARD Q_OS_WIN
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
if|if
condition|(
operator|!
operator|(
name|e
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|AltModifier
operator|)
condition|)
block|{
name|int
name|key
init|=
name|e
operator|->
name|key
argument_list|()
operator|&
operator|~
operator|(
operator|(
name|int
operator|)
name|Qt
operator|::
name|MODIFIER_MASK
operator||
operator|(
name|int
operator|)
name|Qt
operator|::
name|UNICODE_ACCEL
operator|)
decl_stmt|;
if|if
condition|(
name|key
condition|)
block|{
specifier|const
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|buttons
init|=
name|d
operator|->
name|buttonBox
operator|->
name|buttons
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buttons
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QAbstractButton
modifier|*
name|pb
init|=
name|buttons
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|acc
init|=
name|pb
operator|->
name|shortcut
argument_list|()
operator|&
operator|~
operator|(
operator|(
name|int
operator|)
name|Qt
operator|::
name|MODIFIER_MASK
operator||
operator|(
name|int
operator|)
name|Qt
operator|::
name|UNICODE_ACCEL
operator|)
decl_stmt|;
if|if
condition|(
name|acc
operator|==
name|key
condition|)
block|{
name|pb
operator|->
name|animateClick
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
endif|#
directive|endif
name|QDialog
operator|::
name|keyPressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE
end_ifdef
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setVisible
name|void
name|QMessageBox
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|visible
condition|)
name|d
operator|->
name|hideSpecial
argument_list|()
expr_stmt|;
name|QDialog
operator|::
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \overload      Opens the dialog and connects its finished() or buttonClicked() signal to     the slot specified by \a receiver and \a member. If the slot in \a member     has a pointer for its first parameter the connection is to buttonClicked(),     otherwise the connection is to finished().      The signal will be disconnected from the slot when the dialog is closed. */
end_comment
begin_function
DECL|function|open
name|void
name|QMessageBox
operator|::
name|open
parameter_list|(
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|signal
init|=
name|member
operator|&&
name|strchr
argument_list|(
name|member
argument_list|,
literal|'*'
argument_list|)
condition|?
name|SIGNAL
argument_list|(
name|buttonClicked
argument_list|(
name|QAbstractButton
operator|*
argument_list|)
argument_list|)
else|:
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|int
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|signal
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|)
expr_stmt|;
name|d
operator|->
name|signalToDisconnectOnClose
operator|=
name|signal
expr_stmt|;
name|d
operator|->
name|receiverToDisconnectOnClose
operator|=
name|receiver
expr_stmt|;
name|d
operator|->
name|memberToDisconnectOnClose
operator|=
name|member
expr_stmt|;
name|QDialog
operator|::
name|open
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Returns a list of all the buttons that have been added to the message box.      \sa buttonRole(), addButton(), removeButton() */
end_comment
begin_function
DECL|function|buttons
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|QMessageBox
operator|::
name|buttons
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|buttonBox
operator|->
name|buttons
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Returns the button role for the specified \a button. This function returns     \l InvalidRole if \a button is 0 or has not been added to the message box.      \sa buttons(), addButton() */
end_comment
begin_function
DECL|function|buttonRole
name|QMessageBox
operator|::
name|ButtonRole
name|QMessageBox
operator|::
name|buttonRole
parameter_list|(
name|QAbstractButton
modifier|*
name|button
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
return|return
name|QMessageBox
operator|::
name|ButtonRole
argument_list|(
name|d
operator|->
name|buttonBox
operator|->
name|buttonRole
argument_list|(
name|button
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|showEvent
name|void
name|QMessageBox
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|autoAddOkButton
condition|)
block|{
name|addButton
argument_list|(
name|Ok
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
name|d
operator|->
name|hideSpecial
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|d
operator|->
name|detailsButton
condition|)
name|addButton
argument_list|(
name|d
operator|->
name|detailsButton
argument_list|,
name|QMessageBox
operator|::
name|ActionRole
argument_list|)
expr_stmt|;
name|d
operator|->
name|detectEscapeButton
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateSize
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|QAccessible
operator|::
name|Alert
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_WIN
name|HMENU
name|systemMenu
init|=
name|GetSystemMenu
argument_list|(
operator|(
name|HWND
operator|)
name|winId
argument_list|()
argument_list|,
name|FALSE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|detectedEscapeButton
condition|)
block|{
name|EnableMenuItem
argument_list|(
name|systemMenu
argument_list|,
name|SC_CLOSE
argument_list|,
name|MF_BYCOMMAND
operator||
name|MF_GRAYED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|EnableMenuItem
argument_list|(
name|systemMenu
argument_list|,
name|SC_CLOSE
argument_list|,
name|MF_BYCOMMAND
operator||
name|MF_ENABLED
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QDialog
operator|::
name|showEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showNewMessageBox
specifier|static
name|QMessageBox
operator|::
name|StandardButton
name|showNewMessageBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|QMessageBox
operator|::
name|Icon
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QMessageBox
operator|::
name|StandardButtons
name|buttons
parameter_list|,
name|QMessageBox
operator|::
name|StandardButton
name|defaultButton
parameter_list|)
block|{
comment|// necessary for source compatibility with Qt 4.0 and 4.1
comment|// handles (Yes, No) and (Yes|Default, No)
if|if
condition|(
name|defaultButton
operator|&&
operator|!
operator|(
name|buttons
operator|&
name|defaultButton
operator|)
condition|)
return|return
operator|(
name|QMessageBox
operator|::
name|StandardButton
operator|)
name|QMessageBoxPrivate
operator|::
name|showOldMessageBox
argument_list|(
name|parent
argument_list|,
name|icon
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|int
argument_list|(
name|buttons
argument_list|)
argument_list|,
name|int
argument_list|(
name|defaultButton
argument_list|)
argument_list|,
literal|0
argument_list|)
return|;
name|QMessageBox
name|msgBox
argument_list|(
name|icon
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|QMessageBox
operator|::
name|NoButton
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QDialogButtonBox
modifier|*
name|buttonBox
init|=
name|msgBox
operator|.
name|findChild
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|buttonBox
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|uint
name|mask
init|=
name|QMessageBox
operator|::
name|FirstButton
decl_stmt|;
while|while
condition|(
name|mask
operator|<=
name|QMessageBox
operator|::
name|LastButton
condition|)
block|{
name|uint
name|sb
init|=
name|buttons
operator|&
name|mask
decl_stmt|;
name|mask
operator|<<=
literal|1
expr_stmt|;
if|if
condition|(
operator|!
name|sb
condition|)
continue|continue;
name|QPushButton
modifier|*
name|button
init|=
name|msgBox
operator|.
name|addButton
argument_list|(
operator|(
name|QMessageBox
operator|::
name|StandardButton
operator|)
name|sb
argument_list|)
decl_stmt|;
comment|// Choose the first accept role as the default
if|if
condition|(
name|msgBox
operator|.
name|defaultButton
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|(
name|defaultButton
operator|==
name|QMessageBox
operator|::
name|NoButton
operator|&&
name|buttonBox
operator|->
name|buttonRole
argument_list|(
name|button
argument_list|)
operator|==
name|QDialogButtonBox
operator|::
name|AcceptRole
operator|)
operator|||
operator|(
name|defaultButton
operator|!=
name|QMessageBox
operator|::
name|NoButton
operator|&&
name|sb
operator|==
name|uint
argument_list|(
name|defaultButton
argument_list|)
operator|)
condition|)
name|msgBox
operator|.
name|setDefaultButton
argument_list|(
name|button
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|msgBox
operator|.
name|exec
argument_list|()
operator|==
operator|-
literal|1
condition|)
return|return
name|QMessageBox
operator|::
name|Cancel
return|;
return|return
name|msgBox
operator|.
name|standardButton
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Opens an information message box with the given \a title and     \a text in front of the specified \a parent widget.      The standard \a buttons are added to the message box.     \a defaultButton specifies the button used when \key Enter is pressed.     \a defaultButton must refer to a button that was given in \a buttons.     If \a defaultButton is QMessageBox::NoButton, QMessageBox     chooses a suitable default automatically.      Returns the identity of the standard button that was clicked. If     \key Esc was pressed instead, the \l{Default and Escape Keys}     {escape button} is returned.      The message box is an \l{Qt::ApplicationModal}{application modal}     dialog box.      \warning Do not delete \a parent during the execution of the dialog.              If you want to do this, you should create the dialog              yourself using one of the QMessageBox constructors.      \sa question(), warning(), critical() */
end_comment
begin_function
DECL|function|information
name|QMessageBox
operator|::
name|StandardButton
name|QMessageBox
operator|::
name|information
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|StandardButtons
name|buttons
parameter_list|,
name|StandardButton
name|defaultButton
parameter_list|)
block|{
return|return
name|showNewMessageBox
argument_list|(
name|parent
argument_list|,
name|Information
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|buttons
argument_list|,
name|defaultButton
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Opens a question message box with the given \a title and \a     text in front of the specified \a parent widget.      The standard \a buttons are added to the message box. \a     defaultButton specifies the button used when \key Enter is     pressed. \a defaultButton must refer to a button that was given in \a buttons.     If \a defaultButton is QMessageBox::NoButton, QMessageBox     chooses a suitable default automatically.      Returns the identity of the standard button that was clicked. If     \key Esc was pressed instead, the \l{Default and Escape Keys}     {escape button} is returned.      The message box is an \l{Qt::ApplicationModal} {application modal}     dialog box.      \warning Do not delete \a parent during the execution of the dialog.              If you want to do this, you should create the dialog              yourself using one of the QMessageBox constructors.      \sa information(), warning(), critical() */
end_comment
begin_function
DECL|function|question
name|QMessageBox
operator|::
name|StandardButton
name|QMessageBox
operator|::
name|question
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|StandardButtons
name|buttons
parameter_list|,
name|StandardButton
name|defaultButton
parameter_list|)
block|{
return|return
name|showNewMessageBox
argument_list|(
name|parent
argument_list|,
name|Question
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|buttons
argument_list|,
name|defaultButton
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Opens a warning message box with the given \a title and \a     text in front of the specified \a parent widget.      The standard \a buttons are added to the message box. \a     defaultButton specifies the button used when \key Enter is     pressed. \a defaultButton must refer to a button that was given in \a buttons.     If \a defaultButton is QMessageBox::NoButton, QMessageBox     chooses a suitable default automatically.      Returns the identity of the standard button that was clicked. If     \key Esc was pressed instead, the \l{Default and Escape Keys}     {escape button} is returned.      The message box is an \l{Qt::ApplicationModal} {application modal}     dialog box.      \warning Do not delete \a parent during the execution of the dialog.              If you want to do this, you should create the dialog              yourself using one of the QMessageBox constructors.      \sa question(), information(), critical() */
end_comment
begin_function
DECL|function|warning
name|QMessageBox
operator|::
name|StandardButton
name|QMessageBox
operator|::
name|warning
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|StandardButtons
name|buttons
parameter_list|,
name|StandardButton
name|defaultButton
parameter_list|)
block|{
return|return
name|showNewMessageBox
argument_list|(
name|parent
argument_list|,
name|Warning
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|buttons
argument_list|,
name|defaultButton
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Opens a critical message box with the given \a title and \a     text in front of the specified \a parent widget.      The standard \a buttons are added to the message box. \a     defaultButton specifies the button used when \key Enter is     pressed. \a defaultButton must refer to a button that was given in \a buttons.     If \a defaultButton is QMessageBox::NoButton, QMessageBox     chooses a suitable default automatically.      Returns the identity of the standard button that was clicked. If     \key Esc was pressed instead, the \l{Default and Escape Keys}     {escape button} is returned.      The message box is an \l{Qt::ApplicationModal} {application modal}     dialog box.      \warning Do not delete \a parent during the execution of the dialog.              If you want to do this, you should create the dialog              yourself using one of the QMessageBox constructors.      \sa question(), warning(), information() */
end_comment
begin_function
DECL|function|critical
name|QMessageBox
operator|::
name|StandardButton
name|QMessageBox
operator|::
name|critical
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|StandardButtons
name|buttons
parameter_list|,
name|StandardButton
name|defaultButton
parameter_list|)
block|{
return|return
name|showNewMessageBox
argument_list|(
name|parent
argument_list|,
name|Critical
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|buttons
argument_list|,
name|defaultButton
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Displays a simple about box with title \a title and text \a     text. The about box's parent is \a parent.      about() looks for a suitable icon in four locations:      \list 1     \o It prefers \link QWidget::windowIcon() parent->icon() \endlink     if that exists.     \o If not, it tries the top-level widget containing \a parent.     \o If that fails, it tries the \link     QApplication::activeWindow() active window. \endlink     \o As a last resort it uses the Information icon.     \endlist      The about box has a single button labelled "OK". On Mac OS X, the     about box is popped up as a modeless window; on other platforms,     it is currently application modal.      \sa QWidget::windowIcon(), QApplication::activeWindow() */
end_comment
begin_function
DECL|function|about
name|void
name|QMessageBox
operator|::
name|about
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAC
specifier|static
name|QPointer
argument_list|<
name|QMessageBox
argument_list|>
name|oldMsgBox
decl_stmt|;
if|if
condition|(
name|oldMsgBox
operator|&&
name|oldMsgBox
operator|->
name|text
argument_list|()
operator|==
name|text
condition|)
block|{
name|oldMsgBox
operator|->
name|show
argument_list|()
expr_stmt|;
name|oldMsgBox
operator|->
name|raise
argument_list|()
expr_stmt|;
name|oldMsgBox
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|QMessageBox
modifier|*
name|msgBox
init|=
operator|new
name|QMessageBox
argument_list|(
name|title
argument_list|,
name|text
argument_list|,
name|Information
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|parent
ifdef|#
directive|ifdef
name|Q_WS_MAC
argument_list|,
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
endif|#
directive|endif
argument_list|)
decl_stmt|;
name|msgBox
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|QIcon
name|icon
init|=
name|msgBox
operator|->
name|windowIcon
argument_list|()
decl_stmt|;
name|QSize
name|size
init|=
name|icon
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
argument_list|)
decl_stmt|;
name|msgBox
operator|->
name|setIconPixmap
argument_list|(
name|icon
operator|.
name|pixmap
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
comment|// should perhaps be a style hint
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|oldMsgBox
operator|=
name|msgBox
expr_stmt|;
if|#
directive|if
literal|0
comment|// ### doesn't work until close button is enabled in title bar
block|msgBox->d_func()->autoAddOkButton = false;
else|#
directive|else
name|msgBox
operator|->
name|d_func
argument_list|()
operator|->
name|buttonBox
operator|->
name|setCenterButtons
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|msgBox
operator|->
name|show
argument_list|()
expr_stmt|;
else|#
directive|else
name|msgBox
operator|->
name|exec
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Displays a simple message box about Qt, with the given \a title     and centered over \a parent (if \a parent is not 0). The message     includes the version number of Qt being used by the application.      This is useful for inclusion in the \gui Help menu of an application,     as shown in the \l{mainwindows/menus}{Menus} example.      QApplication provides this functionality as a slot.      On Mac OS X, the about box is popped up as a modeless window; on     other platforms, it is currently application modal.      \sa QApplication::aboutQt() */
end_comment
begin_function
DECL|function|aboutQt
name|void
name|QMessageBox
operator|::
name|aboutQt
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAC
specifier|static
name|QPointer
argument_list|<
name|QMessageBox
argument_list|>
name|oldMsgBox
decl_stmt|;
if|if
condition|(
name|oldMsgBox
condition|)
block|{
name|oldMsgBox
operator|->
name|show
argument_list|()
expr_stmt|;
name|oldMsgBox
operator|->
name|raise
argument_list|()
expr_stmt|;
name|oldMsgBox
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|QString
name|translatedTextAboutQtCaption
decl_stmt|;
name|translatedTextAboutQtCaption
operator|=
name|QMessageBox
operator|::
name|tr
argument_list|(
literal|"<h3>About Qt</h3>"
literal|"<p>This program uses Qt version %1.</p>"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|translatedTextAboutQtText
decl_stmt|;
name|translatedTextAboutQtText
operator|=
name|QMessageBox
operator|::
name|tr
argument_list|(
literal|"<p>Qt is a C++ toolkit for cross-platform application "
literal|"development.</p>"
literal|"<p>Qt provides single-source portability across MS&nbsp;Windows, "
literal|"Mac&nbsp;OS&nbsp;X, Linux, and all major commercial Unix variants. "
literal|"Qt is also available for embedded devices as Qt for Embedded Linux "
literal|"and Qt for Windows CE.</p>"
literal|"<p>Qt is available under three different licensing options designed "
literal|"to accommodate the needs of our various users.</p>"
literal|"<p>Qt licensed under our commercial license agreement is appropriate "
literal|"for development of proprietary/commercial software where you do not "
literal|"want to share any source code with third parties or otherwise cannot "
literal|"comply with the terms of the GNU LGPL version 2.1 or GNU GPL version "
literal|"3.0.</p>"
literal|"<p>Qt licensed under the GNU LGPL version 2.1 is appropriate for the "
literal|"development of Qt applications (proprietary or open source) provided "
literal|"you can comply with the terms and conditions of the GNU LGPL version "
literal|"2.1.</p>"
literal|"<p>Qt licensed under the GNU General Public License version 3.0 is "
literal|"appropriate for the development of Qt applications where you wish to "
literal|"use such applications in combination with software subject to the "
literal|"terms of the GNU GPL version 3.0 or where you are otherwise willing "
literal|"to comply with the terms of the GNU GPL version 3.0.</p>"
literal|"<p>Please see<a href=\"http://qt.nokia.com/products/licensing\">qt.nokia.com/products/licensing</a> "
literal|"for an overview of Qt licensing.</p>"
literal|"<p>Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).</p>"
literal|"<p>Qt is a Nokia product. See<a href=\"http://qt.nokia.com/\">qt.nokia.com</a> "
literal|"for more information.</p>"
argument_list|)
expr_stmt|;
name|QMessageBox
modifier|*
name|msgBox
init|=
operator|new
name|QMessageBox
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|msgBox
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|msgBox
operator|->
name|setWindowTitle
argument_list|(
name|title
operator|.
name|isEmpty
argument_list|()
condition|?
name|tr
argument_list|(
literal|"About Qt"
argument_list|)
else|:
name|title
argument_list|)
expr_stmt|;
name|msgBox
operator|->
name|setText
argument_list|(
name|translatedTextAboutQtCaption
argument_list|)
expr_stmt|;
name|msgBox
operator|->
name|setInformativeText
argument_list|(
name|translatedTextAboutQtText
argument_list|)
expr_stmt|;
name|QPixmap
name|pm
argument_list|(
name|QLatin1String
argument_list|(
literal|":/trolltech/qmessagebox/images/qtlogo-64.png"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|)
name|msgBox
operator|->
name|setIconPixmap
argument_list|(
name|pm
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
name|msgBox
operator|->
name|setDefaultButton
argument_list|(
name|msgBox
operator|->
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// should perhaps be a style hint
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|oldMsgBox
operator|=
name|msgBox
expr_stmt|;
if|#
directive|if
literal|0
comment|// ### doesn't work until close button is enabled in title bar
block|msgBox->d_func()->autoAddOkButton = false;
else|#
directive|else
name|msgBox
operator|->
name|d_func
argument_list|()
operator|->
name|buttonBox
operator|->
name|setCenterButtons
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|msgBox
operator|->
name|show
argument_list|()
expr_stmt|;
else|#
directive|else
name|msgBox
operator|->
name|exec
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QMessageBox
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
comment|// ### Qt 5: remove
return|return
name|QDialog
operator|::
name|sizeHint
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|// Source and binary compatibility routines for 4.0 and 4.1
end_comment
begin_function
DECL|function|newButton
specifier|static
name|QMessageBox
operator|::
name|StandardButton
name|newButton
parameter_list|(
name|int
name|button
parameter_list|)
block|{
comment|// this is needed for source compatibility with Qt 4.0 and 4.1
if|if
condition|(
name|button
operator|==
name|QMessageBox
operator|::
name|NoButton
operator|||
operator|(
name|button
operator|&
name|NewButtonMask
operator|)
condition|)
return|return
name|QMessageBox
operator|::
name|StandardButton
argument_list|(
name|button
operator|&
name|QMessageBox
operator|::
name|ButtonMask
argument_list|)
return|;
if|#
directive|if
name|QT_VERSION
operator|<
literal|0x050000
comment|// this is needed for binary compatibility with Qt 4.0 and 4.1
switch|switch
condition|(
name|button
operator|&
name|Old_ButtonMask
condition|)
block|{
case|case
name|Old_Ok
case|:
return|return
name|QMessageBox
operator|::
name|Ok
return|;
case|case
name|Old_Cancel
case|:
return|return
name|QMessageBox
operator|::
name|Cancel
return|;
case|case
name|Old_Yes
case|:
return|return
name|QMessageBox
operator|::
name|Yes
return|;
case|case
name|Old_No
case|:
return|return
name|QMessageBox
operator|::
name|No
return|;
case|case
name|Old_Abort
case|:
return|return
name|QMessageBox
operator|::
name|Abort
return|;
case|case
name|Old_Retry
case|:
return|return
name|QMessageBox
operator|::
name|Retry
return|;
case|case
name|Old_Ignore
case|:
return|return
name|QMessageBox
operator|::
name|Ignore
return|;
case|case
name|Old_YesAll
case|:
return|return
name|QMessageBox
operator|::
name|YesToAll
return|;
case|case
name|Old_NoAll
case|:
return|return
name|QMessageBox
operator|::
name|NoToAll
return|;
default|default:
return|return
name|QMessageBox
operator|::
name|NoButton
return|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|detectedCompat
specifier|static
name|bool
name|detectedCompat
parameter_list|(
name|int
name|button0
parameter_list|,
name|int
name|button1
parameter_list|,
name|int
name|button2
parameter_list|)
block|{
if|if
condition|(
name|button0
operator|!=
literal|0
operator|&&
operator|!
operator|(
name|button0
operator|&
name|NewButtonMask
operator|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|button1
operator|!=
literal|0
operator|&&
operator|!
operator|(
name|button1
operator|&
name|NewButtonMask
operator|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|button2
operator|!=
literal|0
operator|&&
operator|!
operator|(
name|button2
operator|&
name|NewButtonMask
operator|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|findButton
name|QAbstractButton
modifier|*
name|QMessageBoxPrivate
operator|::
name|findButton
parameter_list|(
name|int
name|button0
parameter_list|,
name|int
name|button1
parameter_list|,
name|int
name|button2
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|int
name|button
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|button0
operator|&
name|flags
condition|)
block|{
name|button
operator|=
name|button0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|button1
operator|&
name|flags
condition|)
block|{
name|button
operator|=
name|button1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|button2
operator|&
name|flags
condition|)
block|{
name|button
operator|=
name|button2
expr_stmt|;
block|}
return|return
name|q
operator|->
name|button
argument_list|(
name|newButton
argument_list|(
name|button
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addOldButtons
name|void
name|QMessageBoxPrivate
operator|::
name|addOldButtons
parameter_list|(
name|int
name|button0
parameter_list|,
name|int
name|button1
parameter_list|,
name|int
name|button2
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|q
operator|->
name|addButton
argument_list|(
name|newButton
argument_list|(
name|button0
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|addButton
argument_list|(
name|newButton
argument_list|(
name|button1
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|addButton
argument_list|(
name|newButton
argument_list|(
name|button2
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setDefaultButton
argument_list|(
cast|static_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|findButton
argument_list|(
name|button0
argument_list|,
name|button1
argument_list|,
name|button2
argument_list|,
name|QMessageBox
operator|::
name|Default
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setEscapeButton
argument_list|(
name|findButton
argument_list|(
name|button0
argument_list|,
name|button1
argument_list|,
name|button2
argument_list|,
name|QMessageBox
operator|::
name|Escape
argument_list|)
argument_list|)
expr_stmt|;
name|compatMode
operator|=
name|detectedCompat
argument_list|(
name|button0
argument_list|,
name|button1
argument_list|,
name|button2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|abstractButtonForId
name|QAbstractButton
modifier|*
name|QMessageBoxPrivate
operator|::
name|abstractButtonForId
parameter_list|(
name|int
name|id
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
name|QAbstractButton
modifier|*
name|result
init|=
name|customButtonList
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
return|return
name|result
return|;
if|if
condition|(
name|id
operator|&
name|QMessageBox
operator|::
name|FlagMask
condition|)
comment|// for compatibility with Qt 4.0/4.1 (even if it is silly)
return|return
literal|0
return|;
return|return
name|q
operator|->
name|button
argument_list|(
name|newButton
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|showOldMessageBox
name|int
name|QMessageBoxPrivate
operator|::
name|showOldMessageBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|QMessageBox
operator|::
name|Icon
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|int
name|button0
parameter_list|,
name|int
name|button1
parameter_list|,
name|int
name|button2
parameter_list|)
block|{
name|QMessageBox
name|messageBox
argument_list|(
name|icon
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|QMessageBox
operator|::
name|NoButton
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|messageBox
operator|.
name|d_func
argument_list|()
operator|->
name|addOldButtons
argument_list|(
name|button0
argument_list|,
name|button1
argument_list|,
name|button2
argument_list|)
expr_stmt|;
return|return
name|messageBox
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|showOldMessageBox
name|int
name|QMessageBoxPrivate
operator|::
name|showOldMessageBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|QMessageBox
operator|::
name|Icon
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button0Text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button1Text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button2Text
parameter_list|,
name|int
name|defaultButtonNumber
parameter_list|,
name|int
name|escapeButtonNumber
parameter_list|)
block|{
name|QMessageBox
name|messageBox
argument_list|(
name|icon
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|QMessageBox
operator|::
name|NoButton
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QString
name|myButton0Text
init|=
name|button0Text
decl_stmt|;
if|if
condition|(
name|myButton0Text
operator|.
name|isEmpty
argument_list|()
condition|)
name|myButton0Text
operator|=
name|QDialogButtonBox
operator|::
name|tr
argument_list|(
literal|"OK"
argument_list|)
expr_stmt|;
name|messageBox
operator|.
name|addButton
argument_list|(
name|myButton0Text
argument_list|,
name|QMessageBox
operator|::
name|ActionRole
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|button1Text
operator|.
name|isEmpty
argument_list|()
condition|)
name|messageBox
operator|.
name|addButton
argument_list|(
name|button1Text
argument_list|,
name|QMessageBox
operator|::
name|ActionRole
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|button2Text
operator|.
name|isEmpty
argument_list|()
condition|)
name|messageBox
operator|.
name|addButton
argument_list|(
name|button2Text
argument_list|,
name|QMessageBox
operator|::
name|ActionRole
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
modifier|&
name|buttonList
init|=
name|messageBox
operator|.
name|d_func
argument_list|()
operator|->
name|customButtonList
decl_stmt|;
name|messageBox
operator|.
name|setDefaultButton
argument_list|(
cast|static_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|buttonList
operator|.
name|value
argument_list|(
name|defaultButtonNumber
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|messageBox
operator|.
name|setEscapeButton
argument_list|(
name|buttonList
operator|.
name|value
argument_list|(
name|escapeButtonNumber
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|messageBox
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|retranslateStrings
name|void
name|QMessageBoxPrivate
operator|::
name|retranslateStrings
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_TEXTEDIT
if|if
condition|(
name|detailsButton
condition|)
name|detailsButton
operator|->
name|setLabel
argument_list|(
name|detailsText
operator|->
name|isHidden
argument_list|()
condition|?
name|ShowLabel
else|:
name|HideLabel
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \obsolete      Constructs a message box with a \a title, a \a text, an \a icon,     and up to three buttons.      The \a icon must be one of the following:     \list     \o QMessageBox::NoIcon     \o QMessageBox::Question     \o QMessageBox::Information     \o QMessageBox::Warning     \o QMessageBox::Critical     \endlist      Each button, \a button0, \a button1 and \a button2, can have one     of the following values:     \list     \o QMessageBox::NoButton     \o QMessageBox::Ok     \o QMessageBox::Cancel     \o QMessageBox::Yes     \o QMessageBox::No     \o QMessageBox::Abort     \o QMessageBox::Retry     \o QMessageBox::Ignore     \o QMessageBox::YesAll     \o QMessageBox::NoAll     \endlist      Use QMessageBox::NoButton for the later parameters to have fewer     than three buttons in your message box. If you don't specify any     buttons at all, QMessageBox will provide an Ok button.      One of the buttons can be OR-ed with the QMessageBox::Default     flag to make it the default button (clicked when Enter is     pressed).      One of the buttons can be OR-ed with the QMessageBox::Escape flag     to make it the cancel or close button (clicked when \key Esc is     pressed).      \snippet doc/src/snippets/dialogs/dialogs.cpp 2      The message box is an \l{Qt::ApplicationModal} {application modal}     dialog box.      The \a parent and \a f arguments are passed to     the QDialog constructor.      \sa setWindowTitle(), setText(), setIcon() */
end_comment
begin_constructor
DECL|function|QMessageBox
name|QMessageBox
operator|::
name|QMessageBox
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|Icon
name|icon
parameter_list|,
name|int
name|button0
parameter_list|,
name|int
name|button1
parameter_list|,
name|int
name|button2
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|new
name|QMessageBoxPrivate
argument_list|,
name|parent
argument_list|,
name|f
comment|/*| Qt::MSWindowsFixedSizeDialogHint #### */
operator||
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
argument_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|title
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|d
operator|->
name|addOldButtons
argument_list|(
name|button0
argument_list|,
name|button1
argument_list|,
name|button2
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \obsolete      Opens an information message box with the given \a title and the     \a text. The dialog may have up to three buttons. Each of the     buttons, \a button0, \a button1 and \a button2 may be set to one     of the following values:      \list     \o QMessageBox::NoButton     \o QMessageBox::Ok     \o QMessageBox::Cancel     \o QMessageBox::Yes     \o QMessageBox::No     \o QMessageBox::Abort     \o QMessageBox::Retry     \o QMessageBox::Ignore     \o QMessageBox::YesAll     \o QMessageBox::NoAll     \endlist      If you don't want all three buttons, set the last button, or last     two buttons to QMessageBox::NoButton.      One button can be OR-ed with QMessageBox::Default, and one     button can be OR-ed with QMessageBox::Escape.      Returns the identity (QMessageBox::Ok, or QMessageBox::No, etc.)     of the button that was clicked.      The message box is an \l{Qt::ApplicationModal} {application modal}     dialog box.    \warning Do not delete \a parent during the execution of the dialog.            If you want to do this, you should create the dialog            yourself using one of the QMessageBox constructors.      \sa question(), warning(), critical() */
end_comment
begin_function
DECL|function|information
name|int
name|QMessageBox
operator|::
name|information
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|int
name|button0
parameter_list|,
name|int
name|button1
parameter_list|,
name|int
name|button2
parameter_list|)
block|{
return|return
name|QMessageBoxPrivate
operator|::
name|showOldMessageBox
argument_list|(
name|parent
argument_list|,
name|Information
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|button0
argument_list|,
name|button1
argument_list|,
name|button2
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete     \overload      Displays an information message box with the given \a title and     \a text, as well as one, two or three buttons. Returns the index     of the button that was clicked (0, 1 or 2).      \a button0Text is the text of the first button, and is optional.     If \a button0Text is not supplied, "OK" (translated) will be     used. \a button1Text is the text of the second button, and is     optional. \a button2Text is the text of the third button, and is     optional. \a defaultButtonNumber (0, 1 or 2) is the index of the     default button; pressing Return or Enter is the same as clicking     the default button. It defaults to 0 (the first button). \a     escapeButtonNumber is the index of the escape button; pressing     \key Esc is the same as clicking this button. It defaults to -1;     supply 0, 1 or 2 to make pressing \key Esc equivalent to clicking     the relevant button.      The message box is an \l{Qt::ApplicationModal} {application modal}     dialog box.    \warning Do not delete \a parent during the execution of the dialog.            If you want to do this, you should create the dialog            yourself using one of the QMessageBox constructors.      \sa question(), warning(), critical() */
end_comment
begin_function
DECL|function|information
name|int
name|QMessageBox
operator|::
name|information
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button0Text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button1Text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button2Text
parameter_list|,
name|int
name|defaultButtonNumber
parameter_list|,
name|int
name|escapeButtonNumber
parameter_list|)
block|{
return|return
name|QMessageBoxPrivate
operator|::
name|showOldMessageBox
argument_list|(
name|parent
argument_list|,
name|Information
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|button0Text
argument_list|,
name|button1Text
argument_list|,
name|button2Text
argument_list|,
name|defaultButtonNumber
argument_list|,
name|escapeButtonNumber
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      Opens a question message box with the given \a title and \a text.     The dialog may have up to three buttons. Each of the buttons, \a     button0, \a button1 and \a button2 may be set to one of the     following values:      \list     \o QMessageBox::NoButton     \o QMessageBox::Ok     \o QMessageBox::Cancel     \o QMessageBox::Yes     \o QMessageBox::No     \o QMessageBox::Abort     \o QMessageBox::Retry     \o QMessageBox::Ignore     \o QMessageBox::YesAll     \o QMessageBox::NoAll     \endlist      If you don't want all three buttons, set the last button, or last     two buttons to QMessageBox::NoButton.      One button can be OR-ed with QMessageBox::Default, and one     button can be OR-ed with QMessageBox::Escape.      Returns the identity (QMessageBox::Yes, or QMessageBox::No, etc.)     of the button that was clicked.      The message box is an \l{Qt::ApplicationModal} {application modal}     dialog box.    \warning Do not delete \a parent during the execution of the dialog.            If you want to do this, you should create the dialog            yourself using one of the QMessageBox constructors.      \sa information(), warning(), critical() */
end_comment
begin_function
DECL|function|question
name|int
name|QMessageBox
operator|::
name|question
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|int
name|button0
parameter_list|,
name|int
name|button1
parameter_list|,
name|int
name|button2
parameter_list|)
block|{
return|return
name|QMessageBoxPrivate
operator|::
name|showOldMessageBox
argument_list|(
name|parent
argument_list|,
name|Question
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|button0
argument_list|,
name|button1
argument_list|,
name|button2
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete     \overload      Displays a question message box with the given \a title and \a     text, as well as one, two or three buttons. Returns the index of     the button that was clicked (0, 1 or 2).      \a button0Text is the text of the first button, and is optional.     If \a button0Text is not supplied, "OK" (translated) will be used.     \a button1Text is the text of the second button, and is optional.     \a button2Text is the text of the third button, and is optional.     \a defaultButtonNumber (0, 1 or 2) is the index of the default     button; pressing Return or Enter is the same as clicking the     default button. It defaults to 0 (the first button). \a     escapeButtonNumber is the index of the Escape button; pressing     Escape is the same as clicking this button. It defaults to -1;     supply 0, 1 or 2 to make pressing Escape equivalent to clicking     the relevant button.      The message box is an \l{Qt::ApplicationModal} {application modal}     dialog box.    \warning Do not delete \a parent during the execution of the dialog.            If you want to do this, you should create the dialog            yourself using one of the QMessageBox constructors.      \sa information(), warning(), critical() */
end_comment
begin_function
DECL|function|question
name|int
name|QMessageBox
operator|::
name|question
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button0Text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button1Text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button2Text
parameter_list|,
name|int
name|defaultButtonNumber
parameter_list|,
name|int
name|escapeButtonNumber
parameter_list|)
block|{
return|return
name|QMessageBoxPrivate
operator|::
name|showOldMessageBox
argument_list|(
name|parent
argument_list|,
name|Question
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|button0Text
argument_list|,
name|button1Text
argument_list|,
name|button2Text
argument_list|,
name|defaultButtonNumber
argument_list|,
name|escapeButtonNumber
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      Opens a warning message box with the given \a title and \a text.     The dialog may have up to three buttons. Each of the button     parameters, \a button0, \a button1 and \a button2 may be set to     one of the following values:      \list     \o QMessageBox::NoButton     \o QMessageBox::Ok     \o QMessageBox::Cancel     \o QMessageBox::Yes     \o QMessageBox::No     \o QMessageBox::Abort     \o QMessageBox::Retry     \o QMessageBox::Ignore     \o QMessageBox::YesAll     \o QMessageBox::NoAll     \endlist      If you don't want all three buttons, set the last button, or last     two buttons to QMessageBox::NoButton.      One button can be OR-ed with QMessageBox::Default, and one     button can be OR-ed with QMessageBox::Escape.      Returns the identity (QMessageBox::Ok or QMessageBox::No or ...)     of the button that was clicked.      The message box is an \l{Qt::ApplicationModal} {application modal}     dialog box.    \warning Do not delete \a parent during the execution of the dialog.            If you want to do this, you should create the dialog            yourself using one of the QMessageBox constructors.      \sa information(), question(), critical() */
end_comment
begin_function
DECL|function|warning
name|int
name|QMessageBox
operator|::
name|warning
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|int
name|button0
parameter_list|,
name|int
name|button1
parameter_list|,
name|int
name|button2
parameter_list|)
block|{
return|return
name|QMessageBoxPrivate
operator|::
name|showOldMessageBox
argument_list|(
name|parent
argument_list|,
name|Warning
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|button0
argument_list|,
name|button1
argument_list|,
name|button2
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete     \overload      Displays a warning message box with the given \a title and \a     text, as well as one, two, or three buttons. Returns the number     of the button that was clicked (0, 1, or 2).      \a button0Text is the text of the first button, and is optional.     If \a button0Text is not supplied, "OK" (translated) will be used.     \a button1Text is the text of the second button, and is optional,     and \a button2Text is the text of the third button, and is     optional. \a defaultButtonNumber (0, 1 or 2) is the index of the     default button; pressing Return or Enter is the same as clicking     the default button. It defaults to 0 (the first button). \a     escapeButtonNumber is the index of the Escape button; pressing     Escape is the same as clicking this button. It defaults to -1;     supply 0, 1, or 2 to make pressing Escape equivalent to clicking     the relevant button.      The message box is an \l{Qt::ApplicationModal} {application modal}     dialog box.    \warning Do not delete \a parent during the execution of the dialog.            If you want to do this, you should create the dialog            yourself using one of the QMessageBox constructors.      \sa information(), question(), critical() */
end_comment
begin_function
DECL|function|warning
name|int
name|QMessageBox
operator|::
name|warning
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button0Text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button1Text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button2Text
parameter_list|,
name|int
name|defaultButtonNumber
parameter_list|,
name|int
name|escapeButtonNumber
parameter_list|)
block|{
return|return
name|QMessageBoxPrivate
operator|::
name|showOldMessageBox
argument_list|(
name|parent
argument_list|,
name|Warning
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|button0Text
argument_list|,
name|button1Text
argument_list|,
name|button2Text
argument_list|,
name|defaultButtonNumber
argument_list|,
name|escapeButtonNumber
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      Opens a critical message box with the given \a title and \a text.     The dialog may have up to three buttons. Each of the button     parameters, \a button0, \a button1 and \a button2 may be set to     one of the following values:      \list     \o QMessageBox::NoButton     \o QMessageBox::Ok     \o QMessageBox::Cancel     \o QMessageBox::Yes     \o QMessageBox::No     \o QMessageBox::Abort     \o QMessageBox::Retry     \o QMessageBox::Ignore     \o QMessageBox::YesAll     \o QMessageBox::NoAll     \endlist      If you don't want all three buttons, set the last button, or last     two buttons to QMessageBox::NoButton.      One button can be OR-ed with QMessageBox::Default, and one     button can be OR-ed with QMessageBox::Escape.      Returns the identity (QMessageBox::Ok, or QMessageBox::No, etc.)     of the button that was clicked.      The message box is an \l{Qt::ApplicationModal} {application modal}     dialog box.    \warning Do not delete \a parent during the execution of the dialog.            If you want to do this, you should create the dialog            yourself using one of the QMessageBox constructors.      \sa information(), question(), warning() */
end_comment
begin_function
DECL|function|critical
name|int
name|QMessageBox
operator|::
name|critical
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|int
name|button0
parameter_list|,
name|int
name|button1
parameter_list|,
name|int
name|button2
parameter_list|)
block|{
return|return
name|QMessageBoxPrivate
operator|::
name|showOldMessageBox
argument_list|(
name|parent
argument_list|,
name|Critical
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|button0
argument_list|,
name|button1
argument_list|,
name|button2
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete     \overload      Displays a critical error message box with the given \a title and     \a text, as well as one, two, or three buttons. Returns the     number of the button that was clicked (0, 1 or 2).      \a button0Text is the text of the first button, and is optional.     If \a button0Text is not supplied, "OK" (translated) will be used.     \a button1Text is the text of the second button, and is optional,     and \a button2Text is the text of the third button, and is     optional. \a defaultButtonNumber (0, 1 or 2) is the index of the     default button; pressing Return or Enter is the same as clicking     the default button. It defaults to 0 (the first button). \a     escapeButtonNumber is the index of the Escape button; pressing     Escape is the same as clicking this button. It defaults to -1;     supply 0, 1, or 2 to make pressing Escape equivalent to clicking     the relevant button.      The message box is an \l{Qt::ApplicationModal} {application modal}     dialog box.    \warning Do not delete \a parent during the execution of the dialog.            If you want to do this, you should create the dialog            yourself using one of the QMessageBox constructors.      \sa information(), question(), warning() */
end_comment
begin_function
DECL|function|critical
name|int
name|QMessageBox
operator|::
name|critical
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button0Text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button1Text
parameter_list|,
specifier|const
name|QString
modifier|&
name|button2Text
parameter_list|,
name|int
name|defaultButtonNumber
parameter_list|,
name|int
name|escapeButtonNumber
parameter_list|)
block|{
return|return
name|QMessageBoxPrivate
operator|::
name|showOldMessageBox
argument_list|(
name|parent
argument_list|,
name|Critical
argument_list|,
name|title
argument_list|,
name|text
argument_list|,
name|button0Text
argument_list|,
name|button1Text
argument_list|,
name|button2Text
argument_list|,
name|defaultButtonNumber
argument_list|,
name|escapeButtonNumber
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      Returns the text of the message box button \a button, or     an empty string if the message box does not contain the button.      Use button() and QPushButton::text() instead. */
end_comment
begin_function
DECL|function|buttonText
name|QString
name|QMessageBox
operator|::
name|buttonText
parameter_list|(
name|int
name|button
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAbstractButton
modifier|*
name|abstractButton
init|=
name|d
operator|->
name|abstractButtonForId
argument_list|(
name|button
argument_list|)
condition|)
block|{
return|return
name|abstractButton
operator|->
name|text
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|buttonBox
operator|->
name|buttons
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|button
operator|==
name|Ok
operator|||
name|button
operator|==
name|Old_Ok
operator|)
condition|)
block|{
comment|// for compatibility with Qt 4.0/4.1
return|return
name|QDialogButtonBox
operator|::
name|tr
argument_list|(
literal|"OK"
argument_list|)
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      Sets the text of the message box button \a button to \a text.     Setting the text of a button that is not in the message box is     silently ignored.      Use addButton() instead. */
end_comment
begin_function
DECL|function|setButtonText
name|void
name|QMessageBox
operator|::
name|setButtonText
parameter_list|(
name|int
name|button
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAbstractButton
modifier|*
name|abstractButton
init|=
name|d
operator|->
name|abstractButtonForId
argument_list|(
name|button
argument_list|)
condition|)
block|{
name|abstractButton
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|buttonBox
operator|->
name|buttons
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|button
operator|==
name|Ok
operator|||
name|button
operator|==
name|Old_Ok
operator|)
condition|)
block|{
comment|// for compatibility with Qt 4.0/4.1
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEXTEDIT
end_ifndef
begin_comment
comment|/*!   \property QMessageBox::detailedText   \brief the text to be displayed in the details area.   \since 4.2    The text will be interpreted as a plain text.    By default, this property contains an empty string.    \sa QMessageBox::text, QMessageBox::informativeText */
end_comment
begin_function
DECL|function|detailedText
name|QString
name|QMessageBox
operator|::
name|detailedText
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|detailsText
condition|?
name|d
operator|->
name|detailsText
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setDetailedText
name|void
name|QMessageBox
operator|::
name|setDetailedText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|delete
name|d
operator|->
name|detailsText
expr_stmt|;
name|d
operator|->
name|detailsText
operator|=
literal|0
expr_stmt|;
name|removeButton
argument_list|(
name|d
operator|->
name|detailsButton
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|detailsButton
expr_stmt|;
name|d
operator|->
name|detailsButton
operator|=
literal|0
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|detailsText
condition|)
block|{
name|d
operator|->
name|detailsText
operator|=
operator|new
name|QMessageBoxDetailsText
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QGridLayout
modifier|*
name|grid
init|=
name|qobject_cast
argument_list|<
name|QGridLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|grid
condition|)
name|grid
operator|->
name|addWidget
argument_list|(
name|d
operator|->
name|detailsText
argument_list|,
name|grid
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|grid
operator|->
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|detailsText
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|detailsButton
condition|)
name|d
operator|->
name|detailsButton
operator|=
operator|new
name|DetailButton
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|detailsText
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTEDIT
end_comment
begin_comment
comment|/*!   \property QMessageBox::informativeText    \brief the informative text that provides a fuller description for   the message    \since 4.2    Infromative text can be used to expand upon the text() to give more   information to the user. On the Mac, this text appears in small   system font below the text().  On other platforms, it is simply   appended to the existing text.    By default, this property contains an empty string.    \sa QMessageBox::text, QMessageBox::detailedText */
end_comment
begin_function
DECL|function|informativeText
name|QString
name|QMessageBox
operator|::
name|informativeText
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMessageBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|informativeLabel
condition|?
name|d
operator|->
name|informativeLabel
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setInformativeText
name|void
name|QMessageBox
operator|::
name|setInformativeText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|layout
argument_list|()
operator|->
name|removeWidget
argument_list|(
name|d
operator|->
name|informativeLabel
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|informativeLabel
expr_stmt|;
name|d
operator|->
name|informativeLabel
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_MAC
name|d
operator|->
name|label
operator|->
name|setContentsMargins
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|updateSize
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|informativeLabel
condition|)
block|{
name|QLabel
modifier|*
name|label
init|=
operator|new
name|QLabel
decl_stmt|;
name|label
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_msgbox_informativelabel"
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|->
name|setTextInteractionFlags
argument_list|(
name|Qt
operator|::
name|TextInteractionFlags
argument_list|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MessageBox_TextInteractionFlags
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignTop
operator||
name|Qt
operator|::
name|AlignLeft
argument_list|)
expr_stmt|;
name|label
operator|->
name|setOpenExternalLinks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|label
operator|->
name|setWordWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_MAC
name|d
operator|->
name|label
operator|->
name|setContentsMargins
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|label
operator|->
name|setContentsMargins
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|label
operator|->
name|setIndent
argument_list|(
literal|9
argument_list|)
expr_stmt|;
else|#
directive|else
name|label
operator|->
name|setContentsMargins
argument_list|(
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// apply a smaller font the information label on the mac
name|label
operator|->
name|setFont
argument_list|(
name|qt_app_fonts_hash
argument_list|()
operator|->
name|value
argument_list|(
literal|"QTipLabel"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|label
operator|->
name|setWordWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QGridLayout
modifier|*
name|grid
init|=
cast|static_cast
argument_list|<
name|QGridLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|()
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_MAEMO_5
argument_list|)
name|label
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QTextBrowser
modifier|*
name|textBrowser
init|=
operator|new
name|QTextBrowser
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|textBrowser
operator|->
name|setOpenExternalLinks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|grid
operator|->
name|addWidget
argument_list|(
name|textBrowser
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|d
operator|->
name|textBrowser
operator|=
name|textBrowser
expr_stmt|;
else|#
directive|else
name|grid
operator|->
name|addWidget
argument_list|(
name|label
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|informativeLabel
operator|=
name|label
expr_stmt|;
block|}
name|d
operator|->
name|informativeLabel
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_MAEMO_5
argument_list|)
comment|//We need to put the informative label inside textBrowser to enable scrolling of long texts.
name|d
operator|->
name|textBrowser
operator|->
name|setText
argument_list|(
name|d
operator|->
name|informativeLabel
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|updateSize
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      This function shadows QWidget::setWindowTitle().      Sets the title of the message box to \a title. On Mac OS X,     the window title is ignored (as required by the Mac OS X     Guidelines). */
end_comment
begin_function
DECL|function|setWindowTitle
name|void
name|QMessageBox
operator|::
name|setWindowTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
comment|// Message boxes on the mac do not have a title
ifndef|#
directive|ifndef
name|Q_WS_MAC
name|QDialog
operator|::
name|setWindowTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|title
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \since 4.2      This function shadows QWidget::setWindowModality().      Sets the modality of the message box to \a windowModality.      On Mac OS X, if the modality is set to Qt::WindowModal and the message box     has a parent, then the message box will be a Qt::Sheet, otherwise the     message box will be a standard dialog. */
end_comment
begin_function
DECL|function|setWindowModality
name|void
name|QMessageBox
operator|::
name|setWindowModality
parameter_list|(
name|Qt
operator|::
name|WindowModality
name|windowModality
parameter_list|)
block|{
name|QDialog
operator|::
name|setWindowModality
argument_list|(
name|windowModality
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentWidget
argument_list|()
operator|&&
name|windowModality
operator|==
name|Qt
operator|::
name|WindowModal
condition|)
name|setParent
argument_list|(
name|parentWidget
argument_list|()
argument_list|,
name|Qt
operator|::
name|Sheet
argument_list|)
expr_stmt|;
else|else
name|setParent
argument_list|(
name|parentWidget
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dialog
argument_list|)
expr_stmt|;
name|setDefaultButton
argument_list|(
name|d_func
argument_list|()
operator|->
name|defaultButton
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_comment
comment|/*!     \compat      Constructs a message box with the given \a parent, \a name, and     window flags, \a f.     The window title is specified by \a title, and the message box     displays message text and an icon specified by \a text and \a icon.      The buttons that the user can access to respond to the message are     defined by \a button0, \a button1, and \a button2. */
end_comment
begin_constructor
DECL|function|QMessageBox
name|QMessageBox
operator|::
name|QMessageBox
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|Icon
name|icon
parameter_list|,
name|int
name|button0
parameter_list|,
name|int
name|button1
parameter_list|,
name|int
name|button2
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|bool
name|modal
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|new
name|QMessageBoxPrivate
argument_list|,
name|parent
argument_list|,
name|f
operator||
name|Qt
operator|::
name|WStyle_Customize
operator||
name|Qt
operator|::
name|WStyle_DialogBorder
operator||
name|Qt
operator|::
name|WStyle_Title
operator||
name|Qt
operator|::
name|WStyle_SysMenu
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
argument_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|title
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|d
operator|->
name|addOldButtons
argument_list|(
name|button0
argument_list|,
name|button1
argument_list|,
name|button2
argument_list|)
expr_stmt|;
name|setModal
argument_list|(
name|modal
argument_list|)
expr_stmt|;
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \compat     Constructs a message box with the given \a parent and \a name. */
end_comment
begin_constructor
DECL|function|QMessageBox
name|QMessageBox
operator|::
name|QMessageBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|new
name|QMessageBoxPrivate
argument_list|,
name|parent
argument_list|,
name|Qt
operator|::
name|WStyle_Customize
operator||
name|Qt
operator|::
name|WStyle_DialogBorder
operator||
name|Qt
operator|::
name|WStyle_Title
operator||
name|Qt
operator|::
name|WStyle_SysMenu
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
argument_list|)
block|{
name|Q_D
argument_list|(
name|QMessageBox
argument_list|)
expr_stmt|;
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Returns the pixmap used for a standard icon. This   allows the pixmaps to be used in more complex message boxes.   \a icon specifies the required icon, e.g. QMessageBox::Information,   QMessageBox::Warning or QMessageBox::Critical.    \a style is unused. */
end_comment
begin_function
DECL|function|standardIcon
name|QPixmap
name|QMessageBox
operator|::
name|standardIcon
parameter_list|(
name|Icon
name|icon
parameter_list|,
name|Qt
operator|::
name|GUIStyle
name|style
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|style
argument_list|)
expr_stmt|;
return|return
name|QMessageBox
operator|::
name|standardIcon
argument_list|(
name|icon
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn int QMessageBox::message(const QString&title, const QString&text,                                  const QString&buttonText, QWidget *parent = 0,                                  const char *name = 0)      Opens a modal message box with the given \a title and showing the     given \a text. The message box has a single button which has the     given \a buttonText (or tr("OK")). The message box is centred over     its \a parent and is called \a name.      Use information(), warning(), question(), or critical() instead.      \oldcode         QMessageBox::message(tr("My App"), tr("All occurrences replaced."),                              tr("Close"), this);     \newcode         QMessageBox::information(this, tr("My App"),                                  tr("All occurrences replaced."),                                  QMessageBox::Close);     \endcode */
end_comment
begin_comment
comment|/*!     \fn bool QMessageBox::query(const QString&caption,                                 const QString& text,                                 const QString& yesButtonText,                                 const QString& noButtonText,                                 QWidget *parent, const char *name)      \obsolete      Queries the user using a modal message box with up to two buttons.     The message box has the given \a caption (although some window     managers don't show it), and shows the given \a text. The left     button has the \a yesButtonText (or tr("OK")), and the right button     has the \a noButtonText (or isn't shown). The message box is centred     over its \a parent and is called \a name.      Use information(), question(), warning(), or critical() instead. */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|standardIcon
name|QPixmap
name|QMessageBoxPrivate
operator|::
name|standardIcon
parameter_list|(
name|QMessageBox
operator|::
name|Icon
name|icon
parameter_list|,
name|QMessageBox
modifier|*
name|mb
parameter_list|)
block|{
name|QStyle
modifier|*
name|style
init|=
name|mb
condition|?
name|mb
operator|->
name|style
argument_list|()
else|:
name|QApplication
operator|::
name|style
argument_list|()
decl_stmt|;
name|int
name|iconSize
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MessageBoxIconSize
argument_list|,
literal|0
argument_list|,
name|mb
argument_list|)
decl_stmt|;
name|QIcon
name|tmpIcon
decl_stmt|;
switch|switch
condition|(
name|icon
condition|)
block|{
case|case
name|QMessageBox
operator|::
name|Information
case|:
name|tmpIcon
operator|=
name|style
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_MessageBoxInformation
argument_list|,
literal|0
argument_list|,
name|mb
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMessageBox
operator|::
name|Warning
case|:
name|tmpIcon
operator|=
name|style
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_MessageBoxWarning
argument_list|,
literal|0
argument_list|,
name|mb
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMessageBox
operator|::
name|Critical
case|:
name|tmpIcon
operator|=
name|style
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_MessageBoxCritical
argument_list|,
literal|0
argument_list|,
name|mb
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMessageBox
operator|::
name|Question
case|:
name|tmpIcon
operator|=
name|style
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_MessageBoxQuestion
argument_list|,
literal|0
argument_list|,
name|mb
argument_list|)
expr_stmt|;
default|default:
break|break;
block|}
if|if
condition|(
operator|!
name|tmpIcon
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|tmpIcon
operator|.
name|pixmap
argument_list|(
name|iconSize
argument_list|,
name|iconSize
argument_list|)
return|;
return|return
name|QPixmap
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      Returns the pixmap used for a standard icon. This allows the     pixmaps to be used in more complex message boxes. \a icon     specifies the required icon, e.g. QMessageBox::Question,     QMessageBox::Information, QMessageBox::Warning or     QMessageBox::Critical.      Call QStyle::standardIcon() with QStyle::SP_MessageBoxInformation etc.     instead. */
end_comment
begin_function
DECL|function|standardIcon
name|QPixmap
name|QMessageBox
operator|::
name|standardIcon
parameter_list|(
name|Icon
name|icon
parameter_list|)
block|{
return|return
name|QMessageBoxPrivate
operator|::
name|standardIcon
argument_list|(
name|icon
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \typedef QMessageBox::Button     \obsolete      Use QMessageBox::StandardButton instead. */
end_comment
begin_comment
comment|/*!     \fn int QMessageBox::information(QWidget *parent, const QString&title,                                      const QString& text, StandardButton button0,                                      StandardButton button1)     \fn int QMessageBox::warning(QWidget *parent, const QString&title,                                  const QString& text, StandardButton button0,                                  StandardButton button1)     \fn int QMessageBox::critical(QWidget *parent, const QString&title,                                   const QString& text, StandardButton button0,                                   StandardButton button1)     \fn int QMessageBox::question(QWidget *parent, const QString&title,                                   const QString& text, StandardButton button0,                                   StandardButton button1)     \internal      ### Needed for Qt 4 source compatibility */
end_comment
begin_comment
comment|/*!   \fn int QMessageBox::exec()    Shows the message box as a \l{QDialog#Modal Dialogs}{modal dialog},   blocking until the user closes it.    When using a QMessageBox with standard buttons, this functions returns a   \l StandardButton value indicating the standard button that was clicked.   When using QMessageBox with custom buttons, this function returns an   opaque value; use clickedButton() to determine which button was clicked.    Users cannot interact with any other window in the same   application until they close the dialog, either by clicking a   button or by using a mechanism provided by the window system.    \sa show(), result() */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qmessagebox.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MESSAGEBOX
end_comment
end_unit
