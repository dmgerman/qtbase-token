begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcolordialog.h"
end_include
begin_include
include|#
directive|include
file|"qfontdialog.h"
end_include
begin_include
include|#
directive|include
file|"qfiledialog.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qpushbutton.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qlayout.h"
end_include
begin_include
include|#
directive|include
file|"qsizegrip.h"
end_include
begin_include
include|#
directive|include
file|"qwhatsthis.h"
end_include
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qplatformtheme_qpa.h"
end_include
begin_include
include|#
directive|include
file|"private/qdialog_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qguiapplication_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qaccessible.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|themeDialogType
specifier|static
specifier|inline
name|int
name|themeDialogType
parameter_list|(
specifier|const
name|QDialog
modifier|*
name|dialog
parameter_list|)
block|{
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QFileDialog
operator|*
argument_list|>
argument_list|(
name|dialog
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|FileDialog
return|;
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QColorDialog
operator|*
argument_list|>
argument_list|(
name|dialog
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|ColorDialog
return|;
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QFontDialog
operator|*
argument_list|>
argument_list|(
name|dialog
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|FontDialog
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|platformHelper
name|QPlatformDialogHelper
modifier|*
name|QDialogPrivate
operator|::
name|platformHelper
parameter_list|()
specifier|const
block|{
comment|// Delayed creation of the platform, ensuring that
comment|// that qobject_cast<> on the dialog works in the plugin.
if|if
condition|(
operator|!
name|m_platformHelperCreated
condition|)
block|{
name|m_platformHelperCreated
operator|=
literal|true
expr_stmt|;
name|QDialogPrivate
modifier|*
name|ncThis
init|=
cast|const_cast
argument_list|<
name|QDialogPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QDialog
modifier|*
name|dialog
init|=
name|ncThis
operator|->
name|q_func
argument_list|()
decl_stmt|;
specifier|const
name|int
name|type
init|=
name|themeDialogType
argument_list|(
name|dialog
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|>=
literal|0
condition|)
block|{
name|m_platformHelper
operator|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
operator|->
name|createPlatformDialogHelper
argument_list|(
cast|static_cast
argument_list|<
name|QPlatformTheme
operator|::
name|DialogType
argument_list|>
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_platformHelper
condition|)
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|m_platformHelper
argument_list|,
name|SIGNAL
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|,
name|dialog
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|m_platformHelper
argument_list|,
name|SIGNAL
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|,
name|dialog
argument_list|,
name|SLOT
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|m_platformHelper
argument_list|,
name|SIGNAL
argument_list|(
name|launchNativeAppModalPanel
argument_list|()
argument_list|)
argument_list|,
name|dialog
argument_list|,
name|SLOT
argument_list|(
name|_q_platformRunNativeAppModalPanel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ncThis
operator|->
name|initHelper
argument_list|(
name|m_platformHelper
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|m_platformHelper
return|;
block|}
end_function
begin_function
DECL|function|parentWindow
name|QWindow
modifier|*
name|QDialogPrivate
operator|::
name|parentWindow
parameter_list|()
specifier|const
block|{
if|if
condition|(
specifier|const
name|QWidget
modifier|*
name|parent
init|=
name|q_func
argument_list|()
operator|->
name|nativeParentWidget
argument_list|()
condition|)
return|return
name|parent
operator|->
name|windowHandle
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setNativeDialogVisible
name|bool
name|QDialogPrivate
operator|::
name|setNativeDialogVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|if
condition|(
name|QPlatformDialogHelper
modifier|*
name|helper
init|=
name|platformHelper
argument_list|()
condition|)
block|{
if|if
condition|(
name|visible
condition|)
block|{
name|helperPrepareShow
argument_list|(
name|helper
argument_list|)
expr_stmt|;
name|QPlatformDialogHelper
operator|::
name|ShowFlags
name|flags
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|q_func
argument_list|()
operator|->
name|isModal
argument_list|()
condition|)
name|flags
operator||=
name|QPlatformDialogHelper
operator|::
name|ShowModal
expr_stmt|;
name|nativeDialogInUse
operator|=
name|helper
operator|->
name|show_sys
argument_list|(
name|flags
argument_list|,
name|q_func
argument_list|()
operator|->
name|windowFlags
argument_list|()
argument_list|,
name|parentWindow
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|helper
operator|->
name|hide_sys
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|nativeDialogInUse
return|;
block|}
end_function
begin_function
DECL|function|_q_platformRunNativeAppModalPanel
name|void
name|QDialogPrivate
operator|::
name|_q_platformRunNativeAppModalPanel
parameter_list|()
block|{
if|if
condition|(
name|nativeDialogInUse
condition|)
name|platformHelper
argument_list|()
operator|->
name|_q_platformRunNativeAppModalPanel
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|styleHint
name|QVariant
name|QDialogPrivate
operator|::
name|styleHint
parameter_list|(
name|QPlatformDialogHelper
operator|::
name|StyleHint
name|hint
parameter_list|)
specifier|const
block|{
if|if
condition|(
specifier|const
name|QPlatformDialogHelper
modifier|*
name|helper
init|=
name|platformHelper
argument_list|()
condition|)
return|return
name|helper
operator|->
name|styleHint
argument_list|(
name|hint
argument_list|)
return|;
return|return
name|QPlatformDialogHelper
operator|::
name|defaultStyleHint
argument_list|(
name|hint
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QDialog     \brief The QDialog class is the base class of dialog windows.      \ingroup dialog-classes     \ingroup abstractwidgets     \inmodule QtWidgets      A dialog window is a top-level window mostly used for short-term     tasks and brief communications with the user. QDialogs may be     modal or modeless. QDialogs can     provide a \link #return return     value\endlink, and they can have \link #default default     buttons\endlink. QDialogs can also have a QSizeGrip in their     lower-right corner, using setSizeGripEnabled().      Note that QDialog (an any other widget that has type Qt::Dialog) uses     the parent widget slightly differently from other classes in Qt. A     dialog is always a top-level widget, but if it has a parent, its     default location is centered on top of the parent's top-level widget     (if it is not top-level itself). It will also share the parent's     taskbar entry.      Use the overload of the QWidget::setParent() function to change     the ownership of a QDialog widget. This function allows you to     explicitly set the window flags of the reparented widget; using     the overloaded function will clear the window flags specifying the     window-system properties for the widget (in particular it will     reset the Qt::Dialog flag).      \section1 Modal Dialogs      A \bold{modal} dialog is a dialog that blocks input to other     visible windows in the same application. Dialogs that are used to     request a file name from the user or that are used to set     application preferences are usually modal. Dialogs can be     \l{Qt::ApplicationModal}{application modal} (the default) or     \l{Qt::WindowModal}{window modal}.      When an application modal dialog is opened, the user must finish     interacting with the dialog and close it before they can access     any other window in the application. Window modal dialogs only     block access to the window associated with the dialog, allowing     the user to continue to use other windows in an application.      The most common way to display a modal dialog is to call its     exec() function. When the user closes the dialog, exec() will     provide a useful \link #return return value\endlink. Typically,     to get the dialog to close and return the appropriate value, we     connect a default button, e.g. \gui OK, to the accept() slot and a     \gui Cancel button to the reject() slot.     Alternatively you can call the done() slot with \c Accepted or     \c Rejected.      An alternative is to call setModal(true) or setWindowModality(),     then show(). Unlike exec(), show() returns control to the caller     immediately. Calling setModal(true) is especially useful for     progress dialogs, where the user must have the ability to interact     with the dialog, e.g.  to cancel a long running operation. If you     use show() and setModal(true) together to perform a long operation,     you must call QApplication::processEvents() periodically during     processing to enable the user to interact with the dialog. (See     QProgressDialog.)      \section1 Modeless Dialogs      A \bold{modeless} dialog is a dialog that operates     independently of other windows in the same application. Find and     replace dialogs in word-processors are often modeless to allow the     user to interact with both the application's main window and with     the dialog.      Modeless dialogs are displayed using show(), which returns control     to the caller immediately.      If you invoke the \l{QWidget::show()}{show()} function after hiding     a dialog, the dialog will be displayed in its original position. This is     because the window manager decides the position for windows that     have not been explicitly placed by the programmer. To preserve the     position of a dialog that has been moved by the user, save its position     in your \l{QWidget::closeEvent()}{closeEvent()}  handler and then     move the dialog to that position, before showing it again.      \target default     \section1 Default Button      A dialog's \e default button is the button that's pressed when the     user presses Enter (Return). This button is used to signify that     the user accepts the dialog's settings and wants to close the     dialog. Use QPushButton::setDefault(), QPushButton::isDefault()     and QPushButton::autoDefault() to set and control the dialog's     default button.      \target escapekey     \section1 Escape Key      If the user presses the Esc key in a dialog, QDialog::reject()     will be called. This will cause the window to close: The \link     QCloseEvent close event \endlink cannot be \link     QCloseEvent::ignore() ignored \endlink.      \section1 Extensibility      Extensibility is the ability to show the dialog in two ways: a     partial dialog that shows the most commonly used options, and a     full dialog that shows all the options. Typically an extensible     dialog will initially appear as a partial dialog, but with a     \gui More toggle button. If the user presses the \gui More button down,     the dialog is expanded. The \l{Extension Example} shows how to achieve     extensible dialogs using Qt.      \target return     \section1 Return Value (Modal Dialogs)      Modal dialogs are often used in situations where a return value is     required, e.g. to indicate whether the user pressed \gui OK or     \gui Cancel. A dialog can be closed by calling the accept() or the     reject() slots, and exec() will return \c Accepted or \c Rejected     as appropriate. The exec() call returns the result of the dialog.     The result is also available from result() if the dialog has not     been destroyed.      In order to modify your dialog's close behavior, you can reimplement     the functions accept(), reject() or done(). The     \l{QWidget::closeEvent()}{closeEvent()} function should only be     reimplemented to preserve the dialog's position or to override the     standard close or reject behavior.      \target examples     \section1 Code Examples      A modal dialog:      \snippet doc/src/snippets/dialogs/dialogs.cpp 1      A modeless dialog:      \snippet doc/src/snippets/dialogs/dialogs.cpp 0      \sa QDialogButtonBox, QTabWidget, QWidget, QProgressDialog,         {fowler}{GUI Design Handbook: Dialogs, Standard}, {Extension Example},         {Standard Dialogs Example} */
end_comment
begin_comment
comment|/*! \enum QDialog::DialogCode      The value returned by a modal dialog.      \value Accepted     \value Rejected */
end_comment
begin_comment
comment|/*!   \property QDialog::sizeGripEnabled   \brief whether the size grip is enabled    A QSizeGrip is placed in the bottom-right corner of the dialog when this   property is enabled. By default, the size grip is disabled. */
end_comment
begin_comment
comment|/*!   Constructs a dialog with parent \a parent.    A dialog is always a top-level widget, but if it has a parent, its   default location is centered on top of the parent. It will also   share the parent's taskbar entry.    The widget flags \a f are passed on to the QWidget constructor.   If, for example, you don't want a What's This button in the title bar   of the dialog, pass Qt::WindowTitleHint | Qt::WindowSystemMenuHint in \a f.    \sa QWidget::setWindowFlags() */
end_comment
begin_constructor
DECL|function|QDialog
name|QDialog
operator|::
name|QDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QDialogPrivate
argument_list|,
name|parent
argument_list|,
name|f
operator||
operator|(
operator|(
name|f
operator|&
name|Qt
operator|::
name|WindowType_Mask
operator|)
operator|==
literal|0
condition|?
name|Qt
operator|::
name|Dialog
else|:
name|Qt
operator|::
name|WindowType
argument_list|(
literal|0
argument_list|)
operator|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!   \overload   \internal */
end_comment
begin_constructor
DECL|function|QDialog
name|QDialog
operator|::
name|QDialog
parameter_list|(
name|QDialogPrivate
modifier|&
name|dd
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|,
name|f
operator||
operator|(
operator|(
name|f
operator|&
name|Qt
operator|::
name|WindowType_Mask
operator|)
operator|==
literal|0
condition|?
name|Qt
operator|::
name|Dialog
else|:
name|Qt
operator|::
name|WindowType
argument_list|(
literal|0
argument_list|)
operator|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!   Destroys the QDialog, deleting all its children. */
end_comment
begin_destructor
DECL|function|~QDialog
name|QDialog
operator|::
name|~
name|QDialog
parameter_list|()
block|{
name|QT_TRY
block|{
comment|// Need to hide() here, as our (to-be) overridden hide()
comment|// will not be called in ~QWidget.
name|hide
argument_list|()
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
comment|// we're in the destructor - just swallow the exception
block|}
block|}
end_destructor
begin_comment
comment|/*!   \internal   This function is called by the push button \a pushButton when it   becomes the default button. If \a pushButton is 0, the dialogs   default default button becomes the default button. This is what a   push button calls when it loses focus. */
end_comment
begin_function
DECL|function|setDefault
name|void
name|QDialogPrivate
operator|::
name|setDefault
parameter_list|(
name|QPushButton
modifier|*
name|pushButton
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDialog
argument_list|)
expr_stmt|;
name|bool
name|hasMain
init|=
literal|false
decl_stmt|;
name|QList
argument_list|<
name|QPushButton
modifier|*
argument_list|>
name|list
init|=
name|q
operator|->
name|findChildren
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPushButton
modifier|*
name|pb
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pb
operator|->
name|window
argument_list|()
operator|==
name|q
condition|)
block|{
if|if
condition|(
name|pb
operator|==
name|mainDef
condition|)
name|hasMain
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|pb
operator|!=
name|pushButton
condition|)
name|pb
operator|->
name|setDefault
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|pushButton
operator|&&
name|hasMain
condition|)
name|mainDef
operator|->
name|setDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasMain
condition|)
name|mainDef
operator|=
name|pushButton
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal   This function sets the default default push button to \a pushButton.   This function is called by QPushButton::setDefault(). */
end_comment
begin_function
DECL|function|setMainDefault
name|void
name|QDialogPrivate
operator|::
name|setMainDefault
parameter_list|(
name|QPushButton
modifier|*
name|pushButton
parameter_list|)
block|{
name|mainDef
operator|=
literal|0
expr_stmt|;
name|setDefault
argument_list|(
name|pushButton
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal   Hides the default button indicator. Called when non auto-default   push button get focus.  */
end_comment
begin_function
DECL|function|hideDefault
name|void
name|QDialogPrivate
operator|::
name|hideDefault
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QDialog
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPushButton
modifier|*
argument_list|>
name|list
init|=
name|q
operator|->
name|findChildren
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|setDefault
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resetModalitySetByOpen
name|void
name|QDialogPrivate
operator|::
name|resetModalitySetByOpen
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|resetModalityTo
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetWindowModality
argument_list|)
condition|)
block|{
comment|// open() changed the window modality and the user didn't touch it afterwards; restore it
name|q
operator|->
name|setWindowModality
argument_list|(
name|Qt
operator|::
name|WindowModality
argument_list|(
name|resetModalityTo
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetWindowModality
argument_list|,
name|wasModalitySet
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|Q_ASSERT
argument_list|(
name|resetModalityTo
operator|!=
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
name|q
operator|->
name|setParent
argument_list|(
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dialog
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|resetModalityTo
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
end_ifdef
begin_function
DECL|function|_q_doneAction
name|void
name|QDialogPrivate
operator|::
name|_q_doneAction
parameter_list|()
block|{
comment|//Done...
name|QApplication
operator|::
name|postEvent
argument_list|(
name|q_func
argument_list|()
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|OkRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QDialog
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|bool
name|result
init|=
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|OkRequest
condition|)
block|{
name|accept
argument_list|()
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!   In general returns the modal dialog's result code, \c Accepted or   \c Rejected.    \note When called on a QMessageBox instance, the returned value is a   value of the \l QMessageBox::StandardButton enum.    Do not call this function if the dialog was constructed with the   Qt::WA_DeleteOnClose attribute. */
end_comment
begin_function
DECL|function|result
name|int
name|QDialog
operator|::
name|result
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|rescode
return|;
block|}
end_function
begin_comment
comment|/*!   \fn void QDialog::setResult(int i)    Sets the modal dialog's result code to \a i.    \note We recommend that you use one of the values defined by   QDialog::DialogCode. */
end_comment
begin_function
DECL|function|setResult
name|void
name|QDialog
operator|::
name|setResult
parameter_list|(
name|int
name|r
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|rescode
operator|=
name|r
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Shows the dialog as a \l{QDialog#Modal Dialogs}{window modal dialog},     returning immediately.      \sa exec(), show(), result(), setWindowModality() */
end_comment
begin_function
DECL|function|open
name|void
name|QDialog
operator|::
name|open
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDialog
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|WindowModality
name|modality
init|=
name|windowModality
argument_list|()
decl_stmt|;
if|if
condition|(
name|modality
operator|!=
name|Qt
operator|::
name|WindowModal
condition|)
block|{
name|d
operator|->
name|resetModalityTo
operator|=
name|modality
expr_stmt|;
name|d
operator|->
name|wasModalitySet
operator|=
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetWindowModality
argument_list|)
expr_stmt|;
name|setWindowModality
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetWindowModality
argument_list|,
literal|false
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|setParent
argument_list|(
name|parentWidget
argument_list|()
argument_list|,
name|Qt
operator|::
name|Sheet
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|setResult
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Shows the dialog as a \l{QDialog#Modal Dialogs}{modal dialog},     blocking until the user closes it. The function returns a \l     DialogCode result.      If the dialog is \l{Qt::ApplicationModal}{application modal}, users cannot     interact with any other window in the same application until they close     the dialog. If the dialog is \l{Qt::ApplicationModal}{window modal}, only     interaction with the parent window is blocked while the dialog is open.     By default, the dialog is application modal.      \sa open(), show(), result(), setWindowModality() */
end_comment
begin_function
DECL|function|exec
name|int
name|QDialog
operator|::
name|exec
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|eventLoop
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDialog::exec: Recursive call detected"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|bool
name|deleteOnClose
init|=
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
decl_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|resetModalitySetByOpen
argument_list|()
expr_stmt|;
name|bool
name|wasShowModal
init|=
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_ShowModal
argument_list|)
decl_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_ShowModal
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setResult
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bool
name|showSystemDialogFullScreen
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|showSystemDialogFullScreen
condition|)
block|{
name|setWindowFlags
argument_list|(
name|windowFlags
argument_list|()
operator||
name|Qt
operator|::
name|WindowSoftkeysVisibleHint
argument_list|)
expr_stmt|;
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowFullScreen
argument_list|)
expr_stmt|;
block|}
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|nativeDialogInUse
condition|)
name|d
operator|->
name|platformHelper
argument_list|()
operator|->
name|platformNativeDialogModalHelp
argument_list|()
expr_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|d
operator|->
name|eventLoop
operator|=
operator|&
name|eventLoop
expr_stmt|;
name|QPointer
argument_list|<
name|QDialog
argument_list|>
name|guard
init|=
name|this
decl_stmt|;
operator|(
name|void
operator|)
name|eventLoop
operator|.
name|exec
argument_list|(
name|QEventLoop
operator|::
name|DialogExec
argument_list|)
expr_stmt|;
if|if
condition|(
name|guard
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QDialog
operator|::
name|Rejected
return|;
name|d
operator|->
name|eventLoop
operator|=
literal|0
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_ShowModal
argument_list|,
name|wasShowModal
argument_list|)
expr_stmt|;
name|int
name|res
init|=
name|result
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|nativeDialogInUse
condition|)
name|d
operator|->
name|helperDone
argument_list|(
cast|static_cast
argument_list|<
name|QDialog
operator|::
name|DialogCode
argument_list|>
argument_list|(
name|res
argument_list|)
argument_list|,
name|d
operator|->
name|platformHelper
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteOnClose
condition|)
operator|delete
name|this
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_comment
comment|/*!   Closes the dialog and sets its result code to \a r. If this dialog   is shown with exec(), done() causes the local event loop to finish,   and exec() to return \a r.    As with QWidget::close(), done() deletes the dialog if the   Qt::WA_DeleteOnClose flag is set. If the dialog is the application's   main widget, the application terminates. If the dialog is the   last window closed, the QApplication::lastWindowClosed() signal is   emitted.    \sa accept(), reject(), QApplication::activeWindow(), QApplication::quit() */
end_comment
begin_function
DECL|function|done
name|void
name|QDialog
operator|::
name|done
parameter_list|(
name|int
name|r
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDialog
argument_list|)
expr_stmt|;
name|hide
argument_list|()
expr_stmt|;
name|setResult
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|d
operator|->
name|close_helper
argument_list|(
name|QWidgetPrivate
operator|::
name|CloseNoEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|resetModalitySetByOpen
argument_list|()
expr_stmt|;
emit|emit
name|finished
argument_list|(
name|r
argument_list|)
emit|;
if|if
condition|(
name|r
operator|==
name|Accepted
condition|)
emit|emit
name|accepted
argument_list|()
emit|;
elseif|else
if|if
condition|(
name|r
operator|==
name|Rejected
condition|)
emit|emit
name|rejected
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|/*!   Hides the modal dialog and sets the result code to \c Accepted.    \sa reject() done() */
end_comment
begin_function
DECL|function|accept
name|void
name|QDialog
operator|::
name|accept
parameter_list|()
block|{
name|done
argument_list|(
name|Accepted
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Hides the modal dialog and sets the result code to \c Rejected.    \sa accept() done() */
end_comment
begin_function
DECL|function|reject
name|void
name|QDialog
operator|::
name|reject
parameter_list|()
block|{
name|done
argument_list|(
name|Rejected
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|eventFilter
name|bool
name|QDialog
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
return|return
name|QWidget
operator|::
name|eventFilter
argument_list|(
name|o
argument_list|,
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   Event handlers  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|contextMenuEvent
name|void
name|QDialog
operator|::
name|contextMenuEvent
parameter_list|(
name|QContextMenuEvent
modifier|*
name|e
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_WHATSTHIS
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_NO_MENU
argument_list|)
name|Q_UNUSED
argument_list|(
name|e
argument_list|)
expr_stmt|;
else|#
directive|else
name|QWidget
modifier|*
name|w
init|=
name|childAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
block|{
name|w
operator|=
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
condition|?
name|this
else|:
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
return|return;
block|}
while|while
condition|(
name|w
operator|&&
name|w
operator|->
name|whatsThis
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_CustomWhatsThis
argument_list|)
condition|)
name|w
operator|=
name|w
operator|->
name|isWindow
argument_list|()
condition|?
literal|0
else|:
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
if|if
condition|(
name|w
condition|)
block|{
name|QWeakPointer
argument_list|<
name|QMenu
argument_list|>
name|p
init|=
operator|new
name|QMenu
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|wt
init|=
name|p
operator|.
name|data
argument_list|()
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"What's This?"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|data
argument_list|()
operator|->
name|exec
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
operator|==
name|wt
condition|)
block|{
name|QHelpEvent
name|e
argument_list|(
name|QEvent
operator|::
name|WhatsThis
argument_list|,
name|w
operator|->
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|,
name|w
operator|->
name|mapToGlobal
argument_list|(
name|w
operator|->
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|w
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
operator|delete
name|p
operator|.
name|data
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONTEXTMENU
end_comment
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QDialog
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
comment|//   Calls reject() if Escape is pressed. Simulates a button
comment|//   click for the default button if Enter is pressed. Move focus
comment|//   for the arrow keys. Ignore the rest.
ifdef|#
directive|ifdef
name|Q_OS_MAC
if|if
condition|(
name|e
operator|->
name|modifiers
argument_list|()
operator|==
name|Qt
operator|::
name|ControlModifier
operator|&&
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Period
condition|)
block|{
name|reject
argument_list|()
expr_stmt|;
block|}
elseif|else
endif|#
directive|endif
if|if
condition|(
operator|!
name|e
operator|->
name|modifiers
argument_list|()
operator|||
operator|(
name|e
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|KeypadModifier
operator|&&
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Enter
operator|)
condition|)
block|{
switch|switch
condition|(
name|e
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Enter
case|:
case|case
name|Qt
operator|::
name|Key_Return
case|:
block|{
name|QList
argument_list|<
name|QPushButton
modifier|*
argument_list|>
name|list
init|=
name|findChildren
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPushButton
modifier|*
name|pb
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pb
operator|->
name|isDefault
argument_list|()
operator|&&
name|pb
operator|->
name|isVisible
argument_list|()
condition|)
block|{
if|if
condition|(
name|pb
operator|->
name|isEnabled
argument_list|()
condition|)
name|pb
operator|->
name|click
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
break|break;
case|case
name|Qt
operator|::
name|Key_Escape
case|:
name|reject
argument_list|()
expr_stmt|;
break|break;
default|default:
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|closeEvent
name|void
name|QDialog
operator|::
name|closeEvent
parameter_list|(
name|QCloseEvent
modifier|*
name|e
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
if|if
condition|(
name|isModal
argument_list|()
operator|&&
name|QWhatsThis
operator|::
name|inWhatsThisMode
argument_list|()
condition|)
name|QWhatsThis
operator|::
name|leaveWhatsThisMode
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
name|QPointer
argument_list|<
name|QObject
argument_list|>
name|that
init|=
name|this
decl_stmt|;
name|reject
argument_list|()
expr_stmt|;
if|if
condition|(
name|that
operator|&&
name|isVisible
argument_list|()
condition|)
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*****************************************************************************   Geometry management.  *****************************************************************************/
end_comment
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|setVisible
name|void
name|QDialog
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|visible
condition|)
block|{
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
operator|&&
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
condition|)
return|return;
if|if
condition|(
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|)
condition|)
block|{
name|Qt
operator|::
name|WindowStates
name|state
init|=
name|windowState
argument_list|()
decl_stmt|;
name|adjustPosition
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// not really an explicit position
if|if
condition|(
name|state
operator|!=
name|windowState
argument_list|()
condition|)
name|setWindowState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
name|QWidget
operator|::
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
name|showExtension
argument_list|(
name|d
operator|->
name|doShowExtension
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|fw
init|=
name|window
argument_list|()
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fw
condition|)
name|fw
operator|=
name|this
expr_stmt|;
comment|/*           The following block is to handle a special case, and does not           really follow propper logic in concern of autoDefault and TAB           order. However, it's here to ease usage for the users. If a           dialog has a default QPushButton, and first widget in the TAB           order also is a QPushButton, then we give focus to the main           default QPushButton. This simplifies code for the developers,           and actually catches most cases... If not, then they simply           have to use [widget*]->setFocus() themselves...         */
if|if
condition|(
name|d
operator|->
name|mainDef
operator|&&
name|fw
operator|->
name|focusPolicy
argument_list|()
operator|==
name|Qt
operator|::
name|NoFocus
condition|)
block|{
name|QWidget
modifier|*
name|first
init|=
name|fw
decl_stmt|;
while|while
condition|(
operator|(
name|first
operator|=
name|first
operator|->
name|nextInFocusChain
argument_list|()
operator|)
operator|!=
name|fw
operator|&&
name|first
operator|->
name|focusPolicy
argument_list|()
operator|==
name|Qt
operator|::
name|NoFocus
condition|)
empty_stmt|;
if|if
condition|(
name|first
operator|!=
name|d
operator|->
name|mainDef
operator|&&
name|qobject_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|first
argument_list|)
condition|)
name|d
operator|->
name|mainDef
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|mainDef
operator|&&
name|isWindow
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|fw
decl_stmt|;
while|while
condition|(
operator|(
name|w
operator|=
name|w
operator|->
name|nextInFocusChain
argument_list|()
operator|)
operator|!=
name|fw
condition|)
block|{
name|QPushButton
modifier|*
name|pb
init|=
name|qobject_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|pb
operator|&&
name|pb
operator|->
name|autoDefault
argument_list|()
operator|&&
name|pb
operator|->
name|focusPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoFocus
condition|)
block|{
name|pb
operator|->
name|setDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|fw
operator|&&
operator|!
name|fw
operator|->
name|hasFocus
argument_list|()
condition|)
block|{
name|QFocusEvent
name|e
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|,
name|Qt
operator|::
name|TabFocusReason
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|fw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
name|QAccessibleEvent
argument_list|(
name|QAccessible
operator|::
name|DialogStart
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
operator|&&
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
condition|)
return|return;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
name|QAccessibleEvent
argument_list|(
name|QAccessible
operator|::
name|DialogEnd
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Reimplemented to exit a modal event loop when the dialog is hidden.
name|QWidget
operator|::
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|eventLoop
condition|)
name|d
operator|->
name|eventLoop
operator|->
name|exit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|mainDef
operator|&&
name|isActiveWindow
argument_list|()
operator|&&
name|d
operator|->
name|styleHint
argument_list|(
name|QPlatformDialogHelper
operator|::
name|SnapToDefaultButton
argument_list|)
operator|.
name|toBool
argument_list|()
condition|)
name|QCursor
operator|::
name|setPos
argument_list|(
name|d
operator|->
name|mainDef
operator|->
name|mapToGlobal
argument_list|(
name|d
operator|->
name|mainDef
operator|->
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!\reimp */
end_comment
begin_function
DECL|function|showEvent
name|void
name|QDialog
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
operator|->
name|spontaneous
argument_list|()
operator|&&
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|)
condition|)
block|{
name|Qt
operator|::
name|WindowStates
name|state
init|=
name|windowState
argument_list|()
decl_stmt|;
name|adjustPosition
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// not really an explicit position
if|if
condition|(
name|state
operator|!=
name|windowState
argument_list|()
condition|)
name|setWindowState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|adjustPosition
name|void
name|QDialog
operator|::
name|adjustPosition
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_X11
comment|// if the WM advertises that it will place the windows properly for us, let it do it :)
if|if
condition|(
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_FULL_PLACEMENT
argument_list|)
argument_list|)
condition|)
return|return;
endif|#
directive|endif
name|QPoint
name|p
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|extraw
init|=
literal|0
decl_stmt|,
name|extrah
init|=
literal|0
decl_stmt|,
name|scrn
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|w
condition|)
name|w
operator|=
name|w
operator|->
name|window
argument_list|()
expr_stmt|;
name|QRect
name|desk
decl_stmt|;
if|if
condition|(
name|w
condition|)
block|{
name|scrn
operator|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenNumber
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|isVirtualDesktop
argument_list|()
condition|)
block|{
name|scrn
operator|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenNumber
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scrn
operator|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenNumber
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|desk
operator|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|scrn
argument_list|)
expr_stmt|;
name|QWidgetList
name|list
init|=
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|extraw
operator|==
literal|0
operator|||
name|extrah
operator|==
literal|0
operator|)
operator|&&
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|current
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|int
name|framew
init|=
name|current
operator|->
name|geometry
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|current
operator|->
name|x
argument_list|()
decl_stmt|;
name|int
name|frameh
init|=
name|current
operator|->
name|geometry
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|current
operator|->
name|y
argument_list|()
decl_stmt|;
name|extraw
operator|=
name|qMax
argument_list|(
name|extraw
argument_list|,
name|framew
argument_list|)
expr_stmt|;
name|extrah
operator|=
name|qMax
argument_list|(
name|extrah
argument_list|,
name|frameh
argument_list|)
expr_stmt|;
block|}
block|}
comment|// sanity check for decoration frames. With embedding, we
comment|// might get extraordinary values
if|if
condition|(
name|extraw
operator|==
literal|0
operator|||
name|extrah
operator|==
literal|0
operator|||
name|extraw
operator|>=
literal|10
operator|||
name|extrah
operator|>=
literal|40
condition|)
block|{
name|extrah
operator|=
literal|40
expr_stmt|;
name|extraw
operator|=
literal|10
expr_stmt|;
block|}
if|if
condition|(
name|w
condition|)
block|{
comment|// Use mapToGlobal rather than geometry() in case w might
comment|// be embedded in another application
name|QPoint
name|pp
init|=
name|w
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|=
name|QPoint
argument_list|(
name|pp
operator|.
name|x
argument_list|()
operator|+
name|w
operator|->
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|pp
operator|.
name|y
argument_list|()
operator|+
name|w
operator|->
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// p = middle of the desktop
name|p
operator|=
name|QPoint
argument_list|(
name|desk
operator|.
name|x
argument_list|()
operator|+
name|desk
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|desk
operator|.
name|y
argument_list|()
operator|+
name|desk
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// p = origin of this
name|p
operator|=
name|QPoint
argument_list|(
name|p
operator|.
name|x
argument_list|()
operator|-
name|width
argument_list|()
operator|/
literal|2
operator|-
name|extraw
argument_list|,
name|p
operator|.
name|y
argument_list|()
operator|-
name|height
argument_list|()
operator|/
literal|2
operator|-
name|extrah
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|x
argument_list|()
operator|+
name|extraw
operator|+
name|width
argument_list|()
operator|>
name|desk
operator|.
name|x
argument_list|()
operator|+
name|desk
operator|.
name|width
argument_list|()
condition|)
name|p
operator|.
name|setX
argument_list|(
name|desk
operator|.
name|x
argument_list|()
operator|+
name|desk
operator|.
name|width
argument_list|()
operator|-
name|width
argument_list|()
operator|-
name|extraw
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|x
argument_list|()
operator|<
name|desk
operator|.
name|x
argument_list|()
condition|)
name|p
operator|.
name|setX
argument_list|(
name|desk
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|y
argument_list|()
operator|+
name|extrah
operator|+
name|height
argument_list|()
operator|>
name|desk
operator|.
name|y
argument_list|()
operator|+
name|desk
operator|.
name|height
argument_list|()
condition|)
name|p
operator|.
name|setY
argument_list|(
name|desk
operator|.
name|y
argument_list|()
operator|+
name|desk
operator|.
name|height
argument_list|()
operator|-
name|height
argument_list|()
operator|-
name|extrah
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|y
argument_list|()
operator|<
name|desk
operator|.
name|y
argument_list|()
condition|)
name|p
operator|.
name|setY
argument_list|(
name|desk
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|move
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      If \a orientation is Qt::Horizontal, the extension will be displayed     to the right of the dialog's main area. If \a orientation is     Qt::Vertical, the extension will be displayed below the dialog's main     area.      Instead of using this functionality, we recommend that you simply call     show() or hide() on the part of the dialog that you want to use as an     extension. See the \l{Extension Example} for details.      \sa setExtension() */
end_comment
begin_function
DECL|function|setOrientation
name|void
name|QDialog
operator|::
name|setOrientation
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|orientation
operator|=
name|orientation
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      Returns the dialog's extension orientation.      Instead of using this functionality, we recommend that you simply call     show() or hide() on the part of the dialog that you want to use as an     extension. See the \l{Extension Example} for details.      \sa extension() */
end_comment
begin_function
DECL|function|orientation
name|Qt
operator|::
name|Orientation
name|QDialog
operator|::
name|orientation
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|orientation
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      Sets the widget, \a extension, to be the dialog's extension,     deleting any previous extension. The dialog takes ownership of the     extension. Note that if 0 is passed any existing extension will be     deleted. This function must only be called while the dialog is hidden.      Instead of using this functionality, we recommend that you simply call     show() or hide() on the part of the dialog that you want to use as an     extension. See the \l{Extension Example} for details.      \sa showExtension(), setOrientation() */
end_comment
begin_function
DECL|function|setExtension
name|void
name|QDialog
operator|::
name|setExtension
parameter_list|(
name|QWidget
modifier|*
name|extension
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDialog
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|extension
expr_stmt|;
name|d
operator|->
name|extension
operator|=
name|extension
expr_stmt|;
if|if
condition|(
operator|!
name|extension
condition|)
return|return;
if|if
condition|(
name|extension
operator|->
name|parentWidget
argument_list|()
operator|!=
name|this
condition|)
name|extension
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|extension
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      Returns the dialog's extension or 0 if no extension has been     defined.      Instead of using this functionality, we recommend that you simply call     show() or hide() on the part of the dialog that you want to use as an     extension. See the \l{Extension Example} for details.      \sa showExtension(), setOrientation() */
end_comment
begin_function
DECL|function|extension
name|QWidget
modifier|*
name|QDialog
operator|::
name|extension
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|extension
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      If \a showIt is true, the dialog's extension is shown; otherwise the     extension is hidden.      Instead of using this functionality, we recommend that you simply call     show() or hide() on the part of the dialog that you want to use as an     extension. See the \l{Extension Example} for details.      \sa show(), setExtension(), setOrientation() */
end_comment
begin_function
DECL|function|showExtension
name|void
name|QDialog
operator|::
name|showExtension
parameter_list|(
name|bool
name|showIt
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|doShowExtension
operator|=
name|showIt
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|extension
condition|)
return|return;
if|if
condition|(
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|)
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|extension
operator|->
name|isVisible
argument_list|()
operator|==
name|showIt
condition|)
return|return;
if|if
condition|(
name|showIt
condition|)
block|{
name|d
operator|->
name|size
operator|=
name|size
argument_list|()
expr_stmt|;
name|d
operator|->
name|min
operator|=
name|minimumSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|max
operator|=
name|maximumSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|layout
argument_list|()
condition|)
name|layout
argument_list|()
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QSize
name|s
argument_list|(
name|d
operator|->
name|extension
operator|->
name|sizeHint
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|d
operator|->
name|extension
operator|->
name|minimumSize
argument_list|()
argument_list|)
operator|.
name|boundedTo
argument_list|(
name|d
operator|->
name|extension
operator|->
name|maximumSize
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|int
name|h
init|=
name|qMax
argument_list|(
name|height
argument_list|()
argument_list|,
name|s
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|extension
operator|->
name|setGeometry
argument_list|(
name|width
argument_list|()
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|setFixedSize
argument_list|(
name|width
argument_list|()
operator|+
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|w
init|=
name|qMax
argument_list|(
name|width
argument_list|()
argument_list|,
name|s
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|extension
operator|->
name|setGeometry
argument_list|(
literal|0
argument_list|,
name|height
argument_list|()
argument_list|,
name|w
argument_list|,
name|s
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|setFixedSize
argument_list|(
name|w
argument_list|,
name|height
argument_list|()
operator|+
name|s
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|extension
operator|->
name|show
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
specifier|const
name|bool
name|sizeGripEnabled
init|=
name|isSizeGripEnabled
argument_list|()
decl_stmt|;
name|setSizeGripEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|sizeGripEnabled
operator|=
name|sizeGripEnabled
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|d
operator|->
name|extension
operator|->
name|hide
argument_list|()
expr_stmt|;
comment|// workaround for CDE window manager that won't shrink with (-1,-1)
name|setMinimumSize
argument_list|(
name|d
operator|->
name|min
operator|.
name|expandedTo
argument_list|(
name|QSize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setMaximumSize
argument_list|(
name|d
operator|->
name|max
argument_list|)
expr_stmt|;
name|resize
argument_list|(
name|d
operator|->
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|layout
argument_list|()
condition|)
name|layout
argument_list|()
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
name|setSizeGripEnabled
argument_list|(
name|d
operator|->
name|sizeGripEnabled
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QDialog
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|extension
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
return|return
name|QSize
argument_list|(
name|QWidget
operator|::
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|QWidget
operator|::
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|d
operator|->
name|extension
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
return|;
else|else
return|return
name|QSize
argument_list|(
name|qMax
argument_list|(
name|QWidget
operator|::
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|extension
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|QWidget
operator|::
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
return|return
name|QWidget
operator|::
name|sizeHint
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|minimumSizeHint
name|QSize
name|QDialog
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|extension
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
return|return
name|QSize
argument_list|(
name|QWidget
operator|::
name|minimumSizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|QWidget
operator|::
name|minimumSizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|d
operator|->
name|extension
operator|->
name|minimumSizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
return|;
else|else
return|return
name|QSize
argument_list|(
name|qMax
argument_list|(
name|QWidget
operator|::
name|minimumSizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|extension
operator|->
name|minimumSizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|QWidget
operator|::
name|minimumSizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
return|return
name|QWidget
operator|::
name|minimumSizeHint
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QDialog::modal     \brief whether show() should pop up the dialog as modal or modeless      By default, this property is false and show() pops up the dialog     as modeless. Setting his property to true is equivalent to setting     QWidget::windowModality to Qt::ApplicationModal.      exec() ignores the value of this property and always pops up the     dialog as modal.      \sa QWidget::windowModality, show(), exec() */
end_comment
begin_function
DECL|function|setModal
name|void
name|QDialog
operator|::
name|setModal
parameter_list|(
name|bool
name|modal
parameter_list|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_ShowModal
argument_list|,
name|modal
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isSizeGripEnabled
name|bool
name|QDialog
operator|::
name|isSizeGripEnabled
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
name|Q_D
argument_list|(
specifier|const
name|QDialog
argument_list|)
expr_stmt|;
return|return
operator|!
operator|!
name|d
operator|->
name|resizer
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setSizeGripEnabled
name|void
name|QDialog
operator|::
name|setSizeGripEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_SIZEGRIP
name|Q_UNUSED
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_D
argument_list|(
name|QDialog
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
name|d
operator|->
name|sizeGripEnabled
operator|=
name|enabled
expr_stmt|;
if|if
condition|(
name|enabled
operator|&&
name|d
operator|->
name|doShowExtension
condition|)
return|return;
endif|#
directive|endif
if|if
condition|(
operator|!
name|enabled
operator|!=
operator|!
name|d
operator|->
name|resizer
condition|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|d
operator|->
name|resizer
operator|=
operator|new
name|QSizeGrip
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// adjustSize() processes all events, which is suboptimal
name|d
operator|->
name|resizer
operator|->
name|resize
argument_list|(
name|d
operator|->
name|resizer
operator|->
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
name|d
operator|->
name|resizer
operator|->
name|move
argument_list|(
name|rect
argument_list|()
operator|.
name|bottomLeft
argument_list|()
operator|-
name|d
operator|->
name|resizer
operator|->
name|rect
argument_list|()
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|resizer
operator|->
name|move
argument_list|(
name|rect
argument_list|()
operator|.
name|bottomRight
argument_list|()
operator|-
name|d
operator|->
name|resizer
operator|->
name|rect
argument_list|()
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|resizer
operator|->
name|raise
argument_list|()
expr_stmt|;
name|d
operator|->
name|resizer
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|delete
name|d
operator|->
name|resizer
expr_stmt|;
name|d
operator|->
name|resizer
operator|=
literal|0
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|//QT_NO_SIZEGRIP
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QDialog
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
name|Q_D
argument_list|(
name|QDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|resizer
condition|)
block|{
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
name|d
operator|->
name|resizer
operator|->
name|move
argument_list|(
name|rect
argument_list|()
operator|.
name|bottomLeft
argument_list|()
operator|-
name|d
operator|->
name|resizer
operator|->
name|rect
argument_list|()
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|resizer
operator|->
name|move
argument_list|(
name|rect
argument_list|()
operator|.
name|bottomRight
argument_list|()
operator|-
name|d
operator|->
name|resizer
operator|->
name|rect
argument_list|()
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|resizer
operator|->
name|raise
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*! \fn void QDialog::finished(int result)     \since 4.1      This signal is emitted when the dialog's \a result code has been     set, either by the user or by calling done(), accept(), or     reject().      Note that this signal is \e not emitted when hiding the dialog     with hide() or setVisible(false). This includes deleting the     dialog while it is visible.      \sa accepted(), rejected() */
end_comment
begin_comment
comment|/*! \fn void QDialog::accepted()     \since 4.1      This signal is emitted when the dialog has been accepted either by     the user or by calling accept() or done() with the     QDialog::Accepted argument.      Note that this signal is \e not emitted when hiding the dialog     with hide() or setVisible(false). This includes deleting the     dialog while it is visible.      \sa finished(), rejected() */
end_comment
begin_comment
comment|/*! \fn void QDialog::rejected()     \since 4.1      This signal is emitted when the dialog has been rejected either by     the user or by calling reject() or done() with the     QDialog::Rejected argument.      Note that this signal is \e not emitted when hiding the dialog     with hide() or setVisible(false). This includes deleting the     dialog while it is visible.      \sa finished(), accepted() */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qdialog.cpp"
end_include
end_unit
