begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTDIALOG
end_ifndef
begin_include
include|#
directive|include
file|"private/qabstractprintdialog_p.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/qmessagebox.h>
end_include
begin_include
include|#
directive|include
file|"qprintdialog.h"
end_include
begin_include
include|#
directive|include
file|"qfiledialog.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qdir.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qevent.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qfilesystemmodel.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qstyleditemdelegate.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qprinter.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qdialogbuttonbox.h>
end_include
begin_include
include|#
directive|include
file|"qfscompleter_p.h"
end_include
begin_include
include|#
directive|include
file|"ui_qprintpropertieswidget.h"
end_include
begin_include
include|#
directive|include
file|"ui_qprintsettingsoutput.h"
end_include
begin_include
include|#
directive|include
file|"ui_qprintwidget.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
end_if
begin_include
include|#
directive|include
file|<private/qcups_p.h>
end_include
begin_include
include|#
directive|include
file|<cups/cups.h>
end_include
begin_include
include|#
directive|include
file|<private/qpdf_p.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<QtCore/qlibrary.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<private/qprinterinfo_unix_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class_decl
class_decl|class
name|QOptionTreeItem
class_decl|;
end_class_decl
begin_class_decl
class_decl|class
name|QPPDOptionsModel
class_decl|;
end_class_decl
begin_class
DECL|class|QPrintPropertiesDialog
class|class
name|QPrintPropertiesDialog
super|:
specifier|public
name|QDialog
block|{
name|Q_OBJECT
public|public:
name|QPrintPropertiesDialog
parameter_list|(
name|QAbstractPrintDialog
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|~
name|QPrintPropertiesDialog
parameter_list|()
destructor_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
DECL|function|setCups
name|void
name|setCups
parameter_list|(
name|QCUPSSupport
modifier|*
name|cups
parameter_list|)
block|{
name|m_cups
operator|=
name|cups
expr_stmt|;
block|}
name|void
name|addItemToOptions
parameter_list|(
name|QOptionTreeItem
modifier|*
name|parent
parameter_list|,
name|QList
argument_list|<
specifier|const
name|ppd_option_t
modifier|*
argument_list|>
modifier|&
name|options
parameter_list|,
name|QList
argument_list|<
specifier|const
name|char
modifier|*
argument_list|>
modifier|&
name|markedOptions
parameter_list|)
specifier|const
function_decl|;
endif|#
directive|endif
name|void
name|selectPrinter
parameter_list|()
function_decl|;
name|void
name|selectPdfPsPrinter
parameter_list|(
specifier|const
name|QPrinter
modifier|*
name|p
parameter_list|)
function_decl|;
comment|/// copy printer properties to the widget
name|void
name|applyPrinterProperties
parameter_list|(
name|QPrinter
modifier|*
name|p
parameter_list|)
function_decl|;
name|void
name|setupPrinter
parameter_list|()
specifier|const
function_decl|;
protected|protected:
name|void
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
name|event
parameter_list|)
function_decl|;
private|private:
DECL|member|widget
name|Ui
operator|::
name|QPrintPropertiesWidget
name|widget
decl_stmt|;
DECL|member|m_buttons
name|QDialogButtonBox
modifier|*
name|m_buttons
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
DECL|member|m_cups
name|QCUPSSupport
modifier|*
name|m_cups
decl_stmt|;
DECL|member|m_cupsOptionsModel
name|QPPDOptionsModel
modifier|*
name|m_cupsOptionsModel
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_class
DECL|class|QPrintDialogPrivate
class|class
name|QPrintDialogPrivate
super|:
specifier|public
name|QAbstractPrintDialogPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QPrintDialog
argument_list|)
name|Q_DECLARE_TR_FUNCTIONS
parameter_list|(
name|QPrintDialog
parameter_list|)
specifier|public
private|:
name|QPrintDialogPrivate
parameter_list|()
constructor_decl|;
name|~
name|QPrintDialogPrivate
parameter_list|()
destructor_decl|;
name|void
name|init
parameter_list|()
function_decl|;
comment|/// copy printer properties to the widget
name|void
name|applyPrinterProperties
parameter_list|(
name|QPrinter
modifier|*
name|p
parameter_list|)
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
name|void
name|selectPrinter
parameter_list|(
name|QCUPSSupport
modifier|*
name|cups
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|_q_chbPrintLastFirstToggled
parameter_list|(
name|bool
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_MESSAGEBOX
name|void
name|_q_checkFields
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|_q_collapseOrExpandDialog
parameter_list|()
function_decl|;
name|void
name|setupPrinter
parameter_list|()
function_decl|;
name|void
name|updateWidgets
parameter_list|()
function_decl|;
specifier|virtual
name|void
name|setTabs
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
modifier|&
name|tabs
parameter_list|)
function_decl|;
DECL|member|options
name|Ui
operator|::
name|QPrintSettingsOutput
name|options
decl_stmt|;
DECL|member|top
name|QUnixPrintWidget
modifier|*
name|top
decl_stmt|;
DECL|member|bottom
name|QWidget
modifier|*
name|bottom
decl_stmt|;
DECL|member|buttons
name|QDialogButtonBox
modifier|*
name|buttons
decl_stmt|;
DECL|member|collapseButton
name|QPushButton
modifier|*
name|collapseButton
decl_stmt|;
block|}
class|;
end_class
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_class
DECL|class|QUnixPrintWidgetPrivate
class|class
name|QUnixPrintWidgetPrivate
block|{
public|public:
name|QUnixPrintWidgetPrivate
parameter_list|(
name|QUnixPrintWidget
modifier|*
name|q
parameter_list|)
constructor_decl|;
name|~
name|QUnixPrintWidgetPrivate
parameter_list|()
destructor_decl|;
comment|/// copy printer properties to the widget
name|void
name|applyPrinterProperties
parameter_list|(
name|QPrinter
modifier|*
name|p
parameter_list|)
function_decl|;
name|bool
name|checkFields
parameter_list|()
function_decl|;
name|void
name|setupPrinter
parameter_list|()
function_decl|;
name|void
name|setOptionsPane
parameter_list|(
name|QPrintDialogPrivate
modifier|*
name|pane
parameter_list|)
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
name|void
name|setCupsProperties
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|// slots
name|void
name|_q_printerChanged
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
name|void
name|_q_btnPropertiesClicked
parameter_list|()
function_decl|;
name|void
name|_q_btnBrowseClicked
parameter_list|()
function_decl|;
DECL|member|parent
name|QUnixPrintWidget
modifier|*
specifier|const
name|parent
decl_stmt|;
DECL|member|propertiesDialog
name|QPrintPropertiesDialog
modifier|*
name|propertiesDialog
decl_stmt|;
DECL|member|widget
name|Ui
operator|::
name|QPrintWidget
name|widget
decl_stmt|;
DECL|member|q
name|QAbstractPrintDialog
modifier|*
name|q
decl_stmt|;
DECL|member|printer
name|QPrinter
modifier|*
name|printer
decl_stmt|;
DECL|member|lprPrinters
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
name|lprPrinters
decl_stmt|;
name|void
name|updateWidget
parameter_list|()
function_decl|;
private|private:
DECL|member|optionsPane
name|QPrintDialogPrivate
modifier|*
name|optionsPane
decl_stmt|;
DECL|member|filePrintersAdded
name|bool
name|filePrintersAdded
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
DECL|member|cups
name|QCUPSSupport
modifier|*
name|cups
decl_stmt|;
DECL|member|cupsPrinterCount
name|int
name|cupsPrinterCount
decl_stmt|;
DECL|member|cupsPrinters
specifier|const
name|cups_dest_t
modifier|*
name|cupsPrinters
decl_stmt|;
DECL|member|cupsPPD
specifier|const
name|ppd_file_t
modifier|*
name|cupsPPD
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
end_if
begin_class
DECL|class|QOptionTreeItem
class|class
name|QOptionTreeItem
block|{
public|public:
DECL|enum|ItemType
DECL|enumerator|Root
DECL|enumerator|Group
DECL|enumerator|Option
DECL|enumerator|Choice
enum|enum
name|ItemType
block|{
name|Root
block|,
name|Group
block|,
name|Option
block|,
name|Choice
block|}
enum|;
DECL|function|QOptionTreeItem
name|QOptionTreeItem
parameter_list|(
name|ItemType
name|t
parameter_list|,
name|int
name|i
parameter_list|,
specifier|const
name|void
modifier|*
name|p
parameter_list|,
specifier|const
name|char
modifier|*
name|desc
parameter_list|,
name|QOptionTreeItem
modifier|*
name|pi
parameter_list|)
member_init_list|:
name|type
argument_list|(
name|t
argument_list|)
member_init_list|,
name|index
argument_list|(
name|i
argument_list|)
member_init_list|,
name|ptr
argument_list|(
name|p
argument_list|)
member_init_list|,
name|description
argument_list|(
name|desc
argument_list|)
member_init_list|,
name|selected
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|selDescription
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|parentItem
argument_list|(
name|pi
argument_list|)
block|{}
DECL|function|~QOptionTreeItem
name|~
name|QOptionTreeItem
parameter_list|()
block|{
while|while
condition|(
operator|!
name|childItems
operator|.
name|isEmpty
argument_list|()
condition|)
operator|delete
name|childItems
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
block|}
DECL|member|type
name|ItemType
name|type
decl_stmt|;
DECL|member|index
name|int
name|index
decl_stmt|;
DECL|member|ptr
specifier|const
name|void
modifier|*
name|ptr
decl_stmt|;
DECL|member|description
specifier|const
name|char
modifier|*
name|description
decl_stmt|;
DECL|member|selected
name|int
name|selected
decl_stmt|;
DECL|member|selDescription
specifier|const
name|char
modifier|*
name|selDescription
decl_stmt|;
DECL|member|parentItem
name|QOptionTreeItem
modifier|*
name|parentItem
decl_stmt|;
DECL|member|childItems
name|QList
argument_list|<
name|QOptionTreeItem
modifier|*
argument_list|>
name|childItems
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QPPDOptionsModel
class|class
name|QPPDOptionsModel
super|:
specifier|public
name|QAbstractItemModel
block|{
friend|friend
class_decl|class
name|QPPDOptionsEditor
class_decl|;
public|public:
name|QPPDOptionsModel
parameter_list|(
name|QCUPSSupport
modifier|*
name|cups
parameter_list|,
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|~
name|QPPDOptionsModel
parameter_list|()
destructor_decl|;
name|int
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
specifier|const
function_decl|;
name|int
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
specifier|const
function_decl|;
name|QVariant
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
init|=
name|Qt
operator|::
name|DisplayRole
parameter_list|)
specifier|const
function_decl|;
name|QModelIndex
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
specifier|const
function_decl|;
name|QModelIndex
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
function_decl|;
name|Qt
operator|::
name|ItemFlags
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
function_decl|;
name|QVariant
name|headerData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|role
init|=
name|Qt
operator|::
name|DisplayRole
parameter_list|)
specifier|const
function_decl|;
DECL|member|rootItem
name|QOptionTreeItem
modifier|*
name|rootItem
decl_stmt|;
DECL|member|cups
name|QCUPSSupport
modifier|*
name|cups
decl_stmt|;
DECL|member|ppd
specifier|const
name|ppd_file_t
modifier|*
name|ppd
decl_stmt|;
name|void
name|parseItems
parameter_list|()
function_decl|;
name|void
name|parseGroups
parameter_list|(
name|QOptionTreeItem
modifier|*
name|parent
parameter_list|)
function_decl|;
name|void
name|parseOptions
parameter_list|(
name|QOptionTreeItem
modifier|*
name|parent
parameter_list|)
function_decl|;
name|void
name|parseChoices
parameter_list|(
name|QOptionTreeItem
modifier|*
name|parent
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|QPPDOptionsEditor
class|class
name|QPPDOptionsEditor
super|:
specifier|public
name|QStyledItemDelegate
block|{
name|Q_OBJECT
public|public:
DECL|function|QPPDOptionsEditor
name|QPPDOptionsEditor
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QStyledItemDelegate
argument_list|(
name|parent
argument_list|)
block|{}
DECL|function|~QPPDOptionsEditor
name|~
name|QPPDOptionsEditor
parameter_list|()
block|{}
name|QWidget
modifier|*
name|createEditor
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
function_decl|;
name|void
name|setEditorData
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
function_decl|;
name|void
name|setModelData
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|,
name|QAbstractItemModel
modifier|*
name|model
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
function_decl|;
private|private
name|slots
private|:
name|void
name|cbChanged
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_constructor
DECL|function|QPrintPropertiesDialog
name|QPrintPropertiesDialog
operator|::
name|QPrintPropertiesDialog
parameter_list|(
name|QAbstractPrintDialog
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
name|parent
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
member_init_list|,
name|m_cups
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_cupsOptionsModel
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
block|{
name|QVBoxLayout
modifier|*
name|lay
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|this
operator|->
name|setLayout
argument_list|(
name|lay
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|content
init|=
operator|new
name|QWidget
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|widget
operator|.
name|setupUi
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|m_buttons
operator|=
operator|new
name|QDialogButtonBox
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
operator||
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|m_buttons
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_buttons
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
argument_list|)
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_buttons
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|)
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QPrintPropertiesDialog
name|QPrintPropertiesDialog
operator|::
name|~
name|QPrintPropertiesDialog
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
operator|delete
name|m_cupsOptionsModel
expr_stmt|;
else|#
directive|else
operator|delete
name|widget
operator|.
name|cupsPropertiesPage
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|applyPrinterProperties
name|void
name|QPrintPropertiesDialog
operator|::
name|applyPrinterProperties
parameter_list|(
name|QPrinter
modifier|*
name|p
parameter_list|)
block|{
name|widget
operator|.
name|pageSetup
operator|->
name|setPrinter
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setupPrinter
name|void
name|QPrintPropertiesDialog
operator|::
name|setupPrinter
parameter_list|()
specifier|const
block|{
name|widget
operator|.
name|pageSetup
operator|->
name|setupPrinter
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
name|QPPDOptionsModel
modifier|*
name|model
init|=
cast|static_cast
argument_list|<
name|QPPDOptionsModel
operator|*
argument_list|>
argument_list|(
name|widget
operator|.
name|treeView
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
condition|)
block|{
name|QOptionTreeItem
modifier|*
name|rootItem
init|=
name|model
operator|->
name|rootItem
decl_stmt|;
name|QList
argument_list|<
specifier|const
name|ppd_option_t
modifier|*
argument_list|>
name|options
decl_stmt|;
name|QList
argument_list|<
specifier|const
name|char
modifier|*
argument_list|>
name|markedOptions
decl_stmt|;
name|addItemToOptions
argument_list|(
name|rootItem
argument_list|,
name|options
argument_list|,
name|markedOptions
argument_list|)
expr_stmt|;
name|model
operator|->
name|cups
operator|->
name|saveOptions
argument_list|(
name|options
argument_list|,
name|markedOptions
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|selectPrinter
name|void
name|QPrintPropertiesDialog
operator|::
name|selectPrinter
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
name|widget
operator|.
name|pageSetup
operator|->
name|selectPrinter
argument_list|(
name|m_cups
argument_list|)
expr_stmt|;
name|widget
operator|.
name|treeView
operator|->
name|setModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_cups
operator|&&
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
condition|)
block|{
if|if
condition|(
name|m_cupsOptionsModel
operator|==
literal|0
condition|)
block|{
name|m_cupsOptionsModel
operator|=
operator|new
name|QPPDOptionsModel
argument_list|(
name|m_cups
argument_list|)
expr_stmt|;
name|widget
operator|.
name|treeView
operator|->
name|setItemDelegate
argument_list|(
operator|new
name|QPPDOptionsEditor
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// update the model
name|m_cupsOptionsModel
operator|->
name|parseItems
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|m_cupsOptionsModel
operator|->
name|rowCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|widget
operator|.
name|treeView
operator|->
name|setModel
argument_list|(
name|m_cupsOptionsModel
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_cupsOptionsModel
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
name|widget
operator|.
name|treeView
operator|->
name|expand
argument_list|(
name|m_cupsOptionsModel
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|tabs
operator|->
name|setTabEnabled
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// enable the advanced tab
block|}
else|else
block|{
name|widget
operator|.
name|tabs
operator|->
name|setTabEnabled
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
endif|#
directive|endif
block|{
name|widget
operator|.
name|cupsPropertiesPage
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pageSetup
operator|->
name|selectPrinter
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|selectPdfPsPrinter
name|void
name|QPrintPropertiesDialog
operator|::
name|selectPdfPsPrinter
parameter_list|(
specifier|const
name|QPrinter
modifier|*
name|p
parameter_list|)
block|{
name|widget
operator|.
name|treeView
operator|->
name|setModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pageSetup
operator|->
name|selectPdfPsPrinter
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|widget
operator|.
name|tabs
operator|->
name|setTabEnabled
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// disable the advanced tab
block|}
end_function
begin_function
DECL|function|showEvent
name|void
name|QPrintPropertiesDialog
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
name|event
parameter_list|)
block|{
name|widget
operator|.
name|treeView
operator|->
name|resizeColumnToContents
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
end_if
begin_function
DECL|function|addItemToOptions
name|void
name|QPrintPropertiesDialog
operator|::
name|addItemToOptions
parameter_list|(
name|QOptionTreeItem
modifier|*
name|parent
parameter_list|,
name|QList
argument_list|<
specifier|const
name|ppd_option_t
modifier|*
argument_list|>
modifier|&
name|options
parameter_list|,
name|QList
argument_list|<
specifier|const
name|char
modifier|*
argument_list|>
modifier|&
name|markedOptions
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parent
operator|->
name|childItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QOptionTreeItem
modifier|*
name|itm
init|=
name|parent
operator|->
name|childItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
operator|->
name|type
operator|==
name|QOptionTreeItem
operator|::
name|Option
condition|)
block|{
specifier|const
name|ppd_option_t
modifier|*
name|opt
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ppd_option_t
operator|*
argument_list|>
argument_list|(
name|itm
operator|->
name|ptr
argument_list|)
decl_stmt|;
name|options
operator|<<
name|opt
expr_stmt|;
if|if
condition|(
name|qstrcmp
argument_list|(
name|opt
operator|->
name|defchoice
argument_list|,
name|opt
operator|->
name|choices
index|[
name|itm
operator|->
name|selected
index|]
operator|.
name|choice
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|markedOptions
operator|<<
name|opt
operator|->
name|keyword
operator|<<
name|opt
operator|->
name|choices
index|[
name|itm
operator|->
name|selected
index|]
operator|.
name|choice
expr_stmt|;
block|}
block|}
else|else
block|{
name|addItemToOptions
argument_list|(
name|itm
argument_list|,
name|options
argument_list|,
name|markedOptions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QPrintDialogPrivate
name|QPrintDialogPrivate
operator|::
name|QPrintDialogPrivate
parameter_list|()
member_init_list|:
name|top
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bottom
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|buttons
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|collapseButton
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QPrintDialogPrivate
name|QPrintDialogPrivate
operator|::
name|~
name|QPrintDialogPrivate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|QPrintDialogPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPrintDialog
argument_list|)
expr_stmt|;
name|top
operator|=
operator|new
name|QUnixPrintWidget
argument_list|(
literal|0
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|bottom
operator|=
operator|new
name|QWidget
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|options
operator|.
name|setupUi
argument_list|(
name|bottom
argument_list|)
expr_stmt|;
name|options
operator|.
name|color
operator|->
name|setIconSize
argument_list|(
name|QSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|color
operator|->
name|setIcon
argument_list|(
name|QIcon
argument_list|(
name|QLatin1String
argument_list|(
literal|":/trolltech/dialogs/qprintdialog/images/status-color.png"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|grayscale
operator|->
name|setIconSize
argument_list|(
name|QSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|grayscale
operator|->
name|setIcon
argument_list|(
name|QIcon
argument_list|(
name|QLatin1String
argument_list|(
literal|":/trolltech/dialogs/qprintdialog/images/status-gray-scale.png"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|top
operator|->
name|d
operator|->
name|setOptionsPane
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|buttons
operator|=
operator|new
name|QDialogButtonBox
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
operator||
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|collapseButton
operator|=
operator|new
name|QPushButton
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"&Options>>"
argument_list|)
argument_list|,
name|buttons
argument_list|)
expr_stmt|;
name|buttons
operator|->
name|addButton
argument_list|(
name|collapseButton
argument_list|,
name|QDialogButtonBox
operator|::
name|ResetRole
argument_list|)
expr_stmt|;
name|bottom
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|printButton
init|=
name|buttons
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
argument_list|)
decl_stmt|;
name|printButton
operator|->
name|setText
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"&Print"
argument_list|)
argument_list|)
expr_stmt|;
name|printButton
operator|->
name|setDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|lay
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|q
operator|->
name|setLayout
argument_list|(
name|lay
argument_list|)
expr_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|top
argument_list|)
expr_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|bottom
argument_list|)
expr_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
name|QPrinter
modifier|*
name|p
init|=
name|q
operator|->
name|printer
argument_list|()
decl_stmt|;
name|applyPrinterProperties
argument_list|(
name|p
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_MESSAGEBOX
name|QObject
operator|::
name|connect
argument_list|(
name|buttons
argument_list|,
name|SIGNAL
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QObject
operator|::
name|connect
argument_list|(
name|buttons
argument_list|,
name|SIGNAL
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_checkFields
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QObject
operator|::
name|connect
argument_list|(
name|buttons
argument_list|,
name|SIGNAL
argument_list|(
name|rejected
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|options
operator|.
name|reverse
argument_list|,
name|SIGNAL
argument_list|(
name|toggled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_chbPrintLastFirstToggled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|collapseButton
argument_list|,
name|SIGNAL
argument_list|(
name|released
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_collapseOrExpandDialog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|applyPrinterProperties
name|void
name|QPrintDialogPrivate
operator|::
name|applyPrinterProperties
parameter_list|(
name|QPrinter
modifier|*
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|->
name|colorMode
argument_list|()
operator|==
name|QPrinter
operator|::
name|Color
condition|)
name|options
operator|.
name|color
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
name|options
operator|.
name|grayscale
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|p
operator|->
name|duplex
argument_list|()
condition|)
block|{
case|case
name|QPrinter
operator|::
name|DuplexNone
case|:
name|options
operator|.
name|noDuplex
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPrinter
operator|::
name|DuplexLongSide
case|:
case|case
name|QPrinter
operator|::
name|DuplexAuto
case|:
name|options
operator|.
name|duplexLong
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPrinter
operator|::
name|DuplexShortSide
case|:
name|options
operator|.
name|duplexShort
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
name|options
operator|.
name|copies
operator|->
name|setValue
argument_list|(
name|p
operator|->
name|copyCount
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|collate
operator|->
name|setChecked
argument_list|(
name|p
operator|->
name|collateCopies
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|reverse
operator|->
name|setChecked
argument_list|(
name|p
operator|->
name|pageOrder
argument_list|()
operator|==
name|QPrinter
operator|::
name|LastPageFirst
argument_list|)
expr_stmt|;
name|top
operator|->
name|d
operator|->
name|applyPrinterProperties
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_chbPrintLastFirstToggled
name|void
name|QPrintDialogPrivate
operator|::
name|_q_chbPrintLastFirstToggled
parameter_list|(
name|bool
name|checked
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QPrintDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|checked
condition|)
name|q
operator|->
name|printer
argument_list|()
operator|->
name|setPageOrder
argument_list|(
name|QPrinter
operator|::
name|LastPageFirst
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|printer
argument_list|()
operator|->
name|setPageOrder
argument_list|(
name|QPrinter
operator|::
name|FirstPageFirst
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_collapseOrExpandDialog
name|void
name|QPrintDialogPrivate
operator|::
name|_q_collapseOrExpandDialog
parameter_list|()
block|{
name|int
name|collapseHeight
init|=
literal|0
decl_stmt|;
name|Q_Q
argument_list|(
name|QPrintDialog
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|widgetToHide
init|=
name|bottom
decl_stmt|;
if|if
condition|(
name|widgetToHide
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|collapseButton
operator|->
name|setText
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"&Options>>"
argument_list|)
argument_list|)
expr_stmt|;
name|collapseHeight
operator|=
name|widgetToHide
operator|->
name|y
argument_list|()
operator|+
name|widgetToHide
operator|->
name|height
argument_list|()
operator|-
operator|(
name|top
operator|->
name|y
argument_list|()
operator|+
name|top
operator|->
name|height
argument_list|()
operator|)
expr_stmt|;
block|}
else|else
name|collapseButton
operator|->
name|setText
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"&Options<<"
argument_list|)
argument_list|)
expr_stmt|;
name|widgetToHide
operator|->
name|setVisible
argument_list|(
operator|!
name|widgetToHide
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|widgetToHide
operator|->
name|isVisible
argument_list|()
condition|)
block|{
comment|// make it shrink
name|q
operator|->
name|layout
argument_list|()
operator|->
name|activate
argument_list|()
expr_stmt|;
name|q
operator|->
name|resize
argument_list|(
name|QSize
argument_list|(
name|q
operator|->
name|width
argument_list|()
argument_list|,
name|q
operator|->
name|height
argument_list|()
operator|-
name|collapseHeight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MESSAGEBOX
end_ifndef
begin_function
DECL|function|_q_checkFields
name|void
name|QPrintDialogPrivate
operator|::
name|_q_checkFields
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPrintDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|top
operator|->
name|d
operator|->
name|checkFields
argument_list|()
condition|)
name|q
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MESSAGEBOX
end_comment
begin_function
DECL|function|setupPrinter
name|void
name|QPrintDialogPrivate
operator|::
name|setupPrinter
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPrintDialog
argument_list|)
expr_stmt|;
name|QPrinter
modifier|*
name|p
init|=
name|q
operator|->
name|printer
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|duplex
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|noDuplex
operator|->
name|isChecked
argument_list|()
condition|)
name|p
operator|->
name|setDuplex
argument_list|(
name|QPrinter
operator|::
name|DuplexNone
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|options
operator|.
name|duplexLong
operator|->
name|isChecked
argument_list|()
condition|)
name|p
operator|->
name|setDuplex
argument_list|(
name|QPrinter
operator|::
name|DuplexLongSide
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|setDuplex
argument_list|(
name|QPrinter
operator|::
name|DuplexShortSide
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|setColorMode
argument_list|(
name|options
operator|.
name|color
operator|->
name|isChecked
argument_list|()
condition|?
name|QPrinter
operator|::
name|Color
else|:
name|QPrinter
operator|::
name|GrayScale
argument_list|)
expr_stmt|;
comment|// print range
if|if
condition|(
name|options
operator|.
name|printAll
operator|->
name|isChecked
argument_list|()
condition|)
block|{
name|p
operator|->
name|setPrintRange
argument_list|(
name|QPrinter
operator|::
name|AllPages
argument_list|)
expr_stmt|;
name|p
operator|->
name|setFromTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|printSelection
operator|->
name|isChecked
argument_list|()
condition|)
block|{
name|p
operator|->
name|setPrintRange
argument_list|(
name|QPrinter
operator|::
name|Selection
argument_list|)
expr_stmt|;
name|p
operator|->
name|setFromTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|printCurrentPage
operator|->
name|isChecked
argument_list|()
condition|)
block|{
name|p
operator|->
name|setPrintRange
argument_list|(
name|QPrinter
operator|::
name|CurrentPage
argument_list|)
expr_stmt|;
name|p
operator|->
name|setFromTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|printRange
operator|->
name|isChecked
argument_list|()
condition|)
block|{
name|p
operator|->
name|setPrintRange
argument_list|(
name|QPrinter
operator|::
name|PageRange
argument_list|)
expr_stmt|;
name|p
operator|->
name|setFromTo
argument_list|(
name|options
operator|.
name|from
operator|->
name|value
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|options
operator|.
name|from
operator|->
name|value
argument_list|()
argument_list|,
name|options
operator|.
name|to
operator|->
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// copies
name|p
operator|->
name|setCopyCount
argument_list|(
name|options
operator|.
name|copies
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setCollateCopies
argument_list|(
name|options
operator|.
name|collate
operator|->
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|top
operator|->
name|d
operator|->
name|setupPrinter
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateWidgets
name|void
name|QPrintDialogPrivate
operator|::
name|updateWidgets
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPrintDialog
argument_list|)
expr_stmt|;
name|options
operator|.
name|gbPrintRange
operator|->
name|setVisible
argument_list|(
name|q
operator|->
name|isOptionEnabled
argument_list|(
name|QPrintDialog
operator|::
name|PrintPageRange
argument_list|)
operator|||
name|q
operator|->
name|isOptionEnabled
argument_list|(
name|QPrintDialog
operator|::
name|PrintSelection
argument_list|)
operator|||
name|q
operator|->
name|isOptionEnabled
argument_list|(
name|QPrintDialog
operator|::
name|PrintCurrentPage
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|printRange
operator|->
name|setEnabled
argument_list|(
name|q
operator|->
name|isOptionEnabled
argument_list|(
name|QPrintDialog
operator|::
name|PrintPageRange
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|printSelection
operator|->
name|setVisible
argument_list|(
name|q
operator|->
name|isOptionEnabled
argument_list|(
name|QPrintDialog
operator|::
name|PrintSelection
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|printCurrentPage
operator|->
name|setVisible
argument_list|(
name|q
operator|->
name|isOptionEnabled
argument_list|(
name|QPrintDialog
operator|::
name|PrintCurrentPage
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|collate
operator|->
name|setVisible
argument_list|(
name|q
operator|->
name|isOptionEnabled
argument_list|(
name|QPrintDialog
operator|::
name|PrintCollateCopies
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|q
operator|->
name|printRange
argument_list|()
condition|)
block|{
case|case
name|QPrintDialog
operator|::
name|AllPages
case|:
name|options
operator|.
name|printAll
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPrintDialog
operator|::
name|Selection
case|:
name|options
operator|.
name|printSelection
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPrintDialog
operator|::
name|PageRange
case|:
name|options
operator|.
name|printRange
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPrintDialog
operator|::
name|CurrentPage
case|:
if|if
condition|(
name|q
operator|->
name|isOptionEnabled
argument_list|(
name|QPrintDialog
operator|::
name|PrintCurrentPage
argument_list|)
condition|)
name|options
operator|.
name|printCurrentPage
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
specifier|const
name|int
name|minPage
init|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|qMin
argument_list|(
name|q
operator|->
name|minPage
argument_list|()
argument_list|,
name|q
operator|->
name|maxPage
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|maxPage
init|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|q
operator|->
name|maxPage
argument_list|()
operator|==
name|INT_MAX
condition|?
literal|9999
else|:
name|q
operator|->
name|maxPage
argument_list|()
argument_list|)
decl_stmt|;
name|options
operator|.
name|from
operator|->
name|setMinimum
argument_list|(
name|minPage
argument_list|)
expr_stmt|;
name|options
operator|.
name|to
operator|->
name|setMinimum
argument_list|(
name|minPage
argument_list|)
expr_stmt|;
name|options
operator|.
name|from
operator|->
name|setMaximum
argument_list|(
name|maxPage
argument_list|)
expr_stmt|;
name|options
operator|.
name|to
operator|->
name|setMaximum
argument_list|(
name|maxPage
argument_list|)
expr_stmt|;
name|options
operator|.
name|from
operator|->
name|setValue
argument_list|(
name|q
operator|->
name|fromPage
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|to
operator|->
name|setValue
argument_list|(
name|q
operator|->
name|toPage
argument_list|()
argument_list|)
expr_stmt|;
name|top
operator|->
name|d
operator|->
name|updateWidget
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTabs
name|void
name|QPrintDialogPrivate
operator|::
name|setTabs
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
modifier|&
name|tabWidgets
parameter_list|)
block|{
while|while
condition|(
name|options
operator|.
name|tabs
operator|->
name|count
argument_list|()
operator|>
literal|2
condition|)
operator|delete
name|options
operator|.
name|tabs
operator|->
name|widget
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
operator|::
name|ConstIterator
name|iter
init|=
name|tabWidgets
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|!=
name|tabWidgets
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|tab
init|=
operator|*
name|iter
decl_stmt|;
name|options
operator|.
name|tabs
operator|->
name|addTab
argument_list|(
name|tab
argument_list|,
name|tab
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|iter
expr_stmt|;
block|}
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
end_if
begin_function
DECL|function|selectPrinter
name|void
name|QPrintDialogPrivate
operator|::
name|selectPrinter
parameter_list|(
name|QCUPSSupport
modifier|*
name|cups
parameter_list|)
block|{
name|options
operator|.
name|duplex
operator|->
name|setEnabled
argument_list|(
name|cups
operator|&&
name|cups
operator|->
name|ppdOption
argument_list|(
literal|"Duplex"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////
end_comment
begin_constructor
DECL|function|QPrintDialog
name|QPrintDialog
operator|::
name|QPrintDialog
parameter_list|(
name|QPrinter
modifier|*
name|printer
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractPrintDialog
argument_list|(
operator|*
operator|(
operator|new
name|QPrintDialogPrivate
operator|)
argument_list|,
name|printer
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPrintDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a print dialog with the given \a parent. */
end_comment
begin_constructor
DECL|function|QPrintDialog
name|QPrintDialog
operator|::
name|QPrintDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractPrintDialog
argument_list|(
operator|*
operator|(
operator|new
name|QPrintDialogPrivate
operator|)
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPrintDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QPrintDialog
name|QPrintDialog
operator|::
name|~
name|QPrintDialog
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|setVisible
name|void
name|QPrintDialog
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrintDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|visible
condition|)
name|d
operator|->
name|updateWidgets
argument_list|()
expr_stmt|;
name|QAbstractPrintDialog
operator|::
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exec
name|int
name|QPrintDialog
operator|::
name|exec
parameter_list|()
block|{
return|return
name|QDialog
operator|::
name|exec
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|accept
name|void
name|QPrintDialog
operator|::
name|accept
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPrintDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|setupPrinter
argument_list|()
expr_stmt|;
name|QDialog
operator|::
name|accept
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_function
DECL|function|printer
name|QPrinter
modifier|*
name|QPrintDialog
operator|::
name|printer
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrintDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printer
return|;
block|}
end_function
begin_function
DECL|function|setPrinter
name|void
name|QPrintDialog
operator|::
name|setPrinter
parameter_list|(
name|QPrinter
modifier|*
name|printer
parameter_list|,
name|bool
name|pickupSettings
parameter_list|)
block|{
if|if
condition|(
operator|!
name|printer
condition|)
return|return;
name|Q_D
argument_list|(
name|QPrintDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|printer
operator|=
name|printer
expr_stmt|;
if|if
condition|(
name|pickupSettings
condition|)
name|d
operator|->
name|applyPrinterProperties
argument_list|(
name|printer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addButton
name|void
name|QPrintDialog
operator|::
name|addButton
parameter_list|(
name|QPushButton
modifier|*
name|button
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrintDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttons
operator|->
name|addButton
argument_list|(
name|button
argument_list|,
name|QDialogButtonBox
operator|::
name|HelpRole
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT3_SUPPORT
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_comment
comment|/*! \internal */
end_comment
begin_constructor
DECL|function|QUnixPrintWidgetPrivate
name|QUnixPrintWidgetPrivate
operator|::
name|QUnixPrintWidgetPrivate
parameter_list|(
name|QUnixPrintWidget
modifier|*
name|p
parameter_list|)
member_init_list|:
name|parent
argument_list|(
name|p
argument_list|)
member_init_list|,
name|propertiesDialog
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|printer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|optionsPane
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|filePrintersAdded
argument_list|(
literal|false
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
member_init_list|,
name|cups
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cupsPrinterCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cupsPrinters
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cupsPPD
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
block|{
name|q
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|parent
condition|)
name|q
operator|=
name|qobject_cast
argument_list|<
name|QAbstractPrintDialog
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setupUi
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|int
name|currentPrinterIndex
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
name|cups
operator|=
operator|new
name|QCUPSSupport
expr_stmt|;
if|if
condition|(
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
condition|)
block|{
name|cupsPPD
operator|=
name|cups
operator|->
name|currentPPD
argument_list|()
expr_stmt|;
name|cupsPrinterCount
operator|=
name|cups
operator|->
name|availablePrintersCount
argument_list|()
expr_stmt|;
name|cupsPrinters
operator|=
name|cups
operator|->
name|availablePrinters
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cupsPrinterCount
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|printerName
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|cupsPrinters
index|[
name|i
index|]
operator|.
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cupsPrinters
index|[
name|i
index|]
operator|.
name|instance
condition|)
name|printerName
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|cupsPrinters
index|[
name|i
index|]
operator|.
name|instance
argument_list|)
expr_stmt|;
name|widget
operator|.
name|printers
operator|->
name|addItem
argument_list|(
name|printerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|cupsPrinters
index|[
name|i
index|]
operator|.
name|is_default
condition|)
name|widget
operator|.
name|printers
operator|->
name|setCurrentIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// the model depends on valid ppd. so before enabling the
comment|// properties button we make sure the ppd is in fact valid.
if|if
condition|(
name|cupsPrinterCount
operator|&&
name|cups
operator|->
name|currentPPD
argument_list|()
condition|)
block|{
name|widget
operator|.
name|properties
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|currentPrinterIndex
operator|=
name|cups
operator|->
name|currentPrinterIndex
argument_list|()
expr_stmt|;
block|}
else|else
block|{
endif|#
directive|endif
name|currentPrinterIndex
operator|=
name|qt_getLprPrinters
argument_list|(
name|lprPrinters
argument_list|)
expr_stmt|;
comment|// populating printer combo
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|lprPrinters
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|i
operator|!=
name|lprPrinters
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|i
control|)
name|widget
operator|.
name|printers
operator|->
name|addItem
argument_list|(
operator|(
operator|*
name|i
operator|)
operator|.
name|name
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
block|}
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_FILESYSTEMMODEL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_COMPLETER
argument_list|)
name|QFileSystemModel
modifier|*
name|fsm
init|=
operator|new
name|QFileSystemModel
argument_list|(
name|widget
operator|.
name|filename
argument_list|)
decl_stmt|;
name|fsm
operator|->
name|setRootPath
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|.
name|filename
operator|->
name|setCompleter
argument_list|(
operator|new
name|QCompleter
argument_list|(
name|fsm
argument_list|,
name|widget
operator|.
name|filename
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|_q_printerChanged
argument_list|(
name|currentPrinterIndex
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|widget
operator|.
name|printers
argument_list|,
name|SIGNAL
argument_list|(
name|currentIndexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|parent
argument_list|,
name|SLOT
argument_list|(
name|_q_printerChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|widget
operator|.
name|fileBrowser
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|parent
argument_list|,
name|SLOT
argument_list|(
name|_q_btnBrowseClicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|widget
operator|.
name|properties
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|parent
argument_list|,
name|SLOT
argument_list|(
name|_q_btnPropertiesClicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// disable features that QPrinter does not yet support.
name|widget
operator|.
name|preview
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|updateWidget
name|void
name|QUnixPrintWidgetPrivate
operator|::
name|updateWidget
parameter_list|()
block|{
specifier|const
name|bool
name|printToFile
init|=
name|q
operator|==
literal|0
operator|||
name|q
operator|->
name|isOptionEnabled
argument_list|(
name|QPrintDialog
operator|::
name|PrintToFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|printToFile
operator|&&
operator|!
name|filePrintersAdded
condition|)
block|{
if|if
condition|(
name|widget
operator|.
name|printers
operator|->
name|count
argument_list|()
condition|)
name|widget
operator|.
name|printers
operator|->
name|insertSeparator
argument_list|(
name|widget
operator|.
name|printers
operator|->
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|.
name|printers
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Print to File (PDF)"
argument_list|)
argument_list|)
expr_stmt|;
name|filePrintersAdded
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|printToFile
operator|&&
name|filePrintersAdded
condition|)
block|{
name|widget
operator|.
name|printers
operator|->
name|removeItem
argument_list|(
name|widget
operator|.
name|printers
operator|->
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|widget
operator|.
name|printers
operator|->
name|removeItem
argument_list|(
name|widget
operator|.
name|printers
operator|->
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|.
name|printers
operator|->
name|count
argument_list|()
condition|)
name|widget
operator|.
name|printers
operator|->
name|removeItem
argument_list|(
name|widget
operator|.
name|printers
operator|->
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove separator
name|filePrintersAdded
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|printer
operator|&&
name|filePrintersAdded
operator|&&
operator|(
name|printer
operator|->
name|outputFormat
argument_list|()
operator|!=
name|QPrinter
operator|::
name|NativeFormat
operator|||
name|printer
operator|->
name|printerName
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|printer
operator|->
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|PdfFormat
condition|)
name|widget
operator|.
name|printers
operator|->
name|setCurrentIndex
argument_list|(
name|widget
operator|.
name|printers
operator|->
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|widget
operator|.
name|filename
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|widget
operator|.
name|lOutput
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|widget
operator|.
name|filename
operator|->
name|setVisible
argument_list|(
name|printToFile
argument_list|)
expr_stmt|;
name|widget
operator|.
name|lOutput
operator|->
name|setVisible
argument_list|(
name|printToFile
argument_list|)
expr_stmt|;
name|widget
operator|.
name|fileBrowser
operator|->
name|setVisible
argument_list|(
name|printToFile
argument_list|)
expr_stmt|;
name|widget
operator|.
name|properties
operator|->
name|setVisible
argument_list|(
name|q
operator|->
name|isOptionEnabled
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintShowPageSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QUnixPrintWidgetPrivate
name|QUnixPrintWidgetPrivate
operator|::
name|~
name|QUnixPrintWidgetPrivate
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
operator|delete
name|cups
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|_q_printerChanged
name|void
name|QUnixPrintWidgetPrivate
operator|::
name|_q_printerChanged
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
condition|)
return|return;
specifier|const
name|int
name|printerCount
init|=
name|widget
operator|.
name|printers
operator|->
name|count
argument_list|()
decl_stmt|;
name|widget
operator|.
name|filename
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|widget
operator|.
name|lOutput
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|filePrintersAdded
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|index
operator|!=
name|printerCount
operator|-
literal|3
argument_list|)
expr_stmt|;
comment|// separator
if|if
condition|(
name|index
operator|==
name|printerCount
operator|-
literal|1
condition|)
block|{
comment|// PDF
name|widget
operator|.
name|location
operator|->
name|setText
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Local file"
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|type
operator|->
name|setText
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Write PDF file"
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|properties
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|widget
operator|.
name|filename
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QString
name|filename
init|=
name|widget
operator|.
name|filename
operator|->
name|text
argument_list|()
decl_stmt|;
name|QString
name|suffix
init|=
name|QFileInfo
argument_list|(
name|filename
argument_list|)
operator|.
name|suffix
argument_list|()
decl_stmt|;
name|widget
operator|.
name|filename
operator|->
name|setText
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|widget
operator|.
name|lOutput
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|propertiesDialog
condition|)
name|propertiesDialog
operator|->
name|selectPdfPsPrinter
argument_list|(
name|printer
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
name|optionsPane
condition|)
name|optionsPane
operator|->
name|selectPrinter
argument_list|(
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
block|}
name|widget
operator|.
name|location
operator|->
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
condition|)
block|{
name|cups
operator|->
name|setCurrentPrinter
argument_list|(
name|index
argument_list|)
expr_stmt|;
specifier|const
name|cups_option_t
modifier|*
name|opt
init|=
name|cups
operator|->
name|printerOption
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"printer-location"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|location
decl_stmt|;
if|if
condition|(
name|opt
condition|)
name|location
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|opt
operator|->
name|value
argument_list|)
expr_stmt|;
name|widget
operator|.
name|location
operator|->
name|setText
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|cupsPPD
operator|=
name|cups
operator|->
name|currentPPD
argument_list|()
expr_stmt|;
comment|// set printer type line
name|QString
name|type
decl_stmt|;
if|if
condition|(
name|cupsPPD
condition|)
name|type
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|cupsPPD
operator|->
name|manufacturer
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|" - "
argument_list|)
operator|+
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|cupsPPD
operator|->
name|modelname
argument_list|)
expr_stmt|;
name|widget
operator|.
name|type
operator|->
name|setText
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|propertiesDialog
condition|)
name|propertiesDialog
operator|->
name|selectPrinter
argument_list|()
expr_stmt|;
if|if
condition|(
name|optionsPane
condition|)
name|optionsPane
operator|->
name|selectPrinter
argument_list|(
name|cups
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|optionsPane
condition|)
name|optionsPane
operator|->
name|selectPrinter
argument_list|(
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|lprPrinters
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QString
name|type
init|=
name|lprPrinters
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|name
operator|+
name|QLatin1Char
argument_list|(
literal|'@'
argument_list|)
operator|+
name|lprPrinters
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|host
decl_stmt|;
if|if
condition|(
operator|!
name|lprPrinters
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|comment
operator|.
name|isEmpty
argument_list|()
condition|)
name|type
operator|+=
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
operator|+
name|lprPrinters
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|comment
expr_stmt|;
name|widget
operator|.
name|type
operator|->
name|setText
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|propertiesDialog
condition|)
name|propertiesDialog
operator|->
name|selectPrinter
argument_list|()
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setOptionsPane
name|void
name|QUnixPrintWidgetPrivate
operator|::
name|setOptionsPane
parameter_list|(
name|QPrintDialogPrivate
modifier|*
name|pane
parameter_list|)
block|{
name|optionsPane
operator|=
name|pane
expr_stmt|;
if|if
condition|(
name|optionsPane
condition|)
name|_q_printerChanged
argument_list|(
name|widget
operator|.
name|printers
operator|->
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_btnBrowseClicked
name|void
name|QUnixPrintWidgetPrivate
operator|::
name|_q_btnBrowseClicked
parameter_list|()
block|{
name|QString
name|filename
init|=
name|widget
operator|.
name|filename
operator|->
name|text
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FILEDIALOG
name|filename
operator|=
name|QFileDialog
operator|::
name|getSaveFileName
argument_list|(
name|parent
argument_list|,
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Print To File ..."
argument_list|)
argument_list|,
name|filename
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|QFileDialog
operator|::
name|DontConfirmOverwrite
argument_list|)
expr_stmt|;
else|#
directive|else
name|filename
operator|.
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|filename
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|widget
operator|.
name|filename
operator|->
name|setText
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|widget
operator|.
name|printers
operator|->
name|setCurrentIndex
argument_list|(
name|widget
operator|.
name|printers
operator|->
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// the pdf one
block|}
block|}
end_function
begin_function
DECL|function|applyPrinterProperties
name|void
name|QUnixPrintWidgetPrivate
operator|::
name|applyPrinterProperties
parameter_list|(
name|QPrinter
modifier|*
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|==
literal|0
condition|)
return|return;
name|printer
operator|=
name|p
expr_stmt|;
if|if
condition|(
name|p
operator|->
name|outputFileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|home
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"HOME"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|cur
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|home
operator|.
name|at
argument_list|(
name|home
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
name|home
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|cur
operator|.
name|at
argument_list|(
name|cur
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
name|cur
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|cur
operator|.
name|left
argument_list|(
name|home
operator|.
name|length
argument_list|()
argument_list|)
operator|!=
name|home
condition|)
name|cur
operator|=
name|home
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
if|if
condition|(
name|p
operator|->
name|docName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cur
operator|+=
name|QLatin1String
argument_list|(
literal|"print.pdf"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRegExp
name|re
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"(.*)\\.\\S+"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|re
operator|.
name|exactMatch
argument_list|(
name|p
operator|->
name|docName
argument_list|()
argument_list|)
condition|)
name|cur
operator|+=
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
else|else
name|cur
operator|+=
name|p
operator|->
name|docName
argument_list|()
expr_stmt|;
name|cur
operator|+=
name|QLatin1String
argument_list|(
literal|".pdf"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|widget
operator|.
name|filename
operator|->
name|setText
argument_list|(
name|cur
argument_list|)
expr_stmt|;
block|}
else|else
name|widget
operator|.
name|filename
operator|->
name|setText
argument_list|(
name|p
operator|->
name|outputFileName
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|printer
init|=
name|p
operator|->
name|printerName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|printer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|widget
operator|.
name|printers
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|widget
operator|.
name|printers
operator|->
name|itemText
argument_list|(
name|i
argument_list|)
operator|==
name|printer
condition|)
block|{
name|widget
operator|.
name|printers
operator|->
name|setCurrentIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// PDF and PS printers are not added to the dialog yet, we'll handle those cases in QUnixPrintWidgetPrivate::updateWidget
if|if
condition|(
name|propertiesDialog
condition|)
name|propertiesDialog
operator|->
name|applyPrinterProperties
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MESSAGEBOX
end_ifndef
begin_function
DECL|function|checkFields
name|bool
name|QUnixPrintWidgetPrivate
operator|::
name|checkFields
parameter_list|()
block|{
if|if
condition|(
name|widget
operator|.
name|filename
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|QString
name|file
init|=
name|widget
operator|.
name|filename
operator|->
name|text
argument_list|()
decl_stmt|;
name|QFile
name|f
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|bool
name|exists
init|=
name|fi
operator|.
name|exists
argument_list|()
decl_stmt|;
name|bool
name|opened
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|exists
operator|&&
name|fi
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|QMessageBox
operator|::
name|warning
argument_list|(
name|q
argument_list|,
name|q
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"%1 is a directory.\nPlease choose a different file name."
argument_list|)
operator|.
name|arg
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|exists
operator|&&
operator|!
name|fi
operator|.
name|isWritable
argument_list|()
operator|)
operator|||
operator|!
operator|(
name|opened
operator|=
name|f
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|Append
argument_list|)
operator|)
condition|)
block|{
name|QMessageBox
operator|::
name|warning
argument_list|(
name|q
argument_list|,
name|q
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"File %1 is not writable.\nPlease choose a different file name."
argument_list|)
operator|.
name|arg
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|int
name|ret
init|=
name|QMessageBox
operator|::
name|question
argument_list|(
name|q
argument_list|,
name|q
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"%1 already exists.\nDo you want to overwrite it?"
argument_list|)
operator|.
name|arg
argument_list|(
name|file
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
name|QMessageBox
operator|::
name|No
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
name|opened
condition|)
block|{
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|exists
condition|)
name|f
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Every test passed. Accept the dialog.
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MESSAGEBOX
end_comment
begin_function
DECL|function|_q_btnPropertiesClicked
name|void
name|QUnixPrintWidgetPrivate
operator|::
name|_q_btnPropertiesClicked
parameter_list|()
block|{
if|if
condition|(
operator|!
name|propertiesDialog
condition|)
block|{
name|propertiesDialog
operator|=
operator|new
name|QPrintPropertiesDialog
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|propertiesDialog
operator|->
name|setResult
argument_list|(
name|QDialog
operator|::
name|Rejected
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propertiesDialog
operator|->
name|result
argument_list|()
operator|==
name|QDialog
operator|::
name|Rejected
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
name|propertiesDialog
operator|->
name|setCups
argument_list|(
name|cups
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|propertiesDialog
operator|->
name|applyPrinterProperties
argument_list|(
name|q
operator|->
name|printer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isOptionEnabled
argument_list|(
name|QPrintDialog
operator|::
name|PrintToFile
argument_list|)
operator|&&
operator|(
name|widget
operator|.
name|printers
operator|->
name|currentIndex
argument_list|()
operator|==
name|widget
operator|.
name|printers
operator|->
name|count
argument_list|()
operator|-
literal|1
operator|)
condition|)
comment|// PDF
name|propertiesDialog
operator|->
name|selectPdfPsPrinter
argument_list|(
name|q
operator|->
name|printer
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|propertiesDialog
operator|->
name|selectPrinter
argument_list|()
expr_stmt|;
block|}
name|propertiesDialog
operator|->
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
end_if
begin_function
DECL|function|setCupsProperties
name|void
name|QUnixPrintWidgetPrivate
operator|::
name|setCupsProperties
parameter_list|()
block|{
if|if
condition|(
name|cups
operator|&&
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
operator|&&
name|cups
operator|->
name|pageSizes
argument_list|()
condition|)
block|{
name|QPrintEngine
modifier|*
name|engine
init|=
name|printer
operator|->
name|printEngine
argument_list|()
decl_stmt|;
specifier|const
name|ppd_option_t
modifier|*
name|pageSizes
init|=
name|cups
operator|->
name|pageSizes
argument_list|()
decl_stmt|;
name|QByteArray
name|cupsPageSize
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pageSizes
operator|->
name|num_choices
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|pageSizes
operator|->
name|choices
index|[
name|i
index|]
operator|.
name|marked
argument_list|)
operator|==
literal|1
condition|)
name|cupsPageSize
operator|=
name|pageSizes
operator|->
name|choices
index|[
name|i
index|]
operator|.
name|choice
expr_stmt|;
block|}
name|engine
operator|->
name|setProperty
argument_list|(
name|PPK_CupsStringPageSize
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|cupsPageSize
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|->
name|setProperty
argument_list|(
name|PPK_CupsOptions
argument_list|,
name|cups
operator|->
name|options
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|pageRect
init|=
name|cups
operator|->
name|pageRect
argument_list|(
name|cupsPageSize
argument_list|)
decl_stmt|;
name|engine
operator|->
name|setProperty
argument_list|(
name|PPK_CupsPageRect
argument_list|,
name|pageRect
argument_list|)
expr_stmt|;
name|QRect
name|paperRect
init|=
name|cups
operator|->
name|paperRect
argument_list|(
name|cupsPageSize
argument_list|)
decl_stmt|;
name|engine
operator|->
name|setProperty
argument_list|(
name|PPK_CupsPaperRect
argument_list|,
name|paperRect
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|ps
init|=
literal|0
init|;
name|ps
operator|<
name|QPrinter
operator|::
name|NPaperSize
condition|;
operator|++
name|ps
control|)
block|{
name|QPdf
operator|::
name|PaperSize
name|size
init|=
name|QPdf
operator|::
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|PaperSize
argument_list|(
name|ps
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|.
name|width
operator|==
name|paperRect
operator|.
name|width
argument_list|()
operator|&&
name|size
operator|.
name|height
operator|==
name|paperRect
operator|.
name|height
argument_list|()
condition|)
name|printer
operator|->
name|setPaperSize
argument_list|(
cast|static_cast
argument_list|<
name|QPrinter
operator|::
name|PaperSize
argument_list|>
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setupPrinter
name|void
name|QUnixPrintWidgetPrivate
operator|::
name|setupPrinter
parameter_list|()
block|{
specifier|const
name|int
name|printerCount
init|=
name|widget
operator|.
name|printers
operator|->
name|count
argument_list|()
decl_stmt|;
specifier|const
name|int
name|index
init|=
name|widget
operator|.
name|printers
operator|->
name|currentIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|filePrintersAdded
operator|&&
name|index
operator|==
name|printerCount
operator|-
literal|1
condition|)
block|{
comment|// PDF
name|printer
operator|->
name|setPrinterName
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|index
operator|!=
name|printerCount
operator|-
literal|3
argument_list|)
expr_stmt|;
comment|// separator
name|printer
operator|->
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QString
name|path
init|=
name|widget
operator|.
name|filename
operator|->
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|path
argument_list|)
condition|)
name|path
operator|=
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|path
expr_stmt|;
name|printer
operator|->
name|setOutputFileName
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printer
operator|->
name|setPrinterName
argument_list|(
name|widget
operator|.
name|printers
operator|->
name|currentText
argument_list|()
argument_list|)
expr_stmt|;
name|printer
operator|->
name|setOutputFileName
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propertiesDialog
operator|&&
name|propertiesDialog
operator|->
name|result
argument_list|()
operator|==
name|QDialog
operator|::
name|Accepted
condition|)
name|propertiesDialog
operator|->
name|setupPrinter
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
operator|!
name|propertiesDialog
condition|)
name|setCupsProperties
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_constructor
DECL|function|QUnixPrintWidget
name|QUnixPrintWidget
operator|::
name|QUnixPrintWidget
parameter_list|(
name|QPrinter
modifier|*
name|printer
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QUnixPrintWidgetPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
block|{
name|d
operator|->
name|applyPrinterProperties
argument_list|(
name|printer
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_destructor
DECL|function|~QUnixPrintWidget
name|QUnixPrintWidget
operator|::
name|~
name|QUnixPrintWidget
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*! \internal      Updates the printer with the states held in the QUnixPrintWidget. */
end_comment
begin_function
DECL|function|updatePrinter
name|void
name|QUnixPrintWidget
operator|::
name|updatePrinter
parameter_list|()
block|{
name|d
operator|->
name|setupPrinter
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
end_if
begin_constructor
DECL|function|QPPDOptionsModel
name|QPPDOptionsModel
operator|::
name|QPPDOptionsModel
parameter_list|(
name|QCUPSSupport
modifier|*
name|c
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|rootItem
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cups
argument_list|(
name|c
argument_list|)
member_init_list|,
name|ppd
argument_list|(
name|c
operator|->
name|currentPPD
argument_list|()
argument_list|)
block|{
name|parseItems
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QPPDOptionsModel
name|QPPDOptionsModel
operator|::
name|~
name|QPPDOptionsModel
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|columnCount
name|int
name|QPPDOptionsModel
operator|::
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|2
return|;
block|}
end_function
begin_function
DECL|function|rowCount
name|int
name|QPPDOptionsModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|QOptionTreeItem
modifier|*
name|itm
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isValid
argument_list|()
condition|)
name|itm
operator|=
name|rootItem
expr_stmt|;
else|else
name|itm
operator|=
cast|reinterpret_cast
argument_list|<
name|QOptionTreeItem
operator|*
argument_list|>
argument_list|(
name|parent
operator|.
name|internalPointer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|itm
operator|->
name|type
operator|==
name|QOptionTreeItem
operator|::
name|Option
condition|)
return|return
literal|0
return|;
return|return
name|itm
operator|->
name|childItems
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|data
name|QVariant
name|QPPDOptionsModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|Qt
operator|::
name|FontRole
case|:
block|{
name|QOptionTreeItem
modifier|*
name|itm
init|=
cast|reinterpret_cast
argument_list|<
name|QOptionTreeItem
operator|*
argument_list|>
argument_list|(
name|index
operator|.
name|internalPointer
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
operator|&&
name|itm
operator|->
name|type
operator|==
name|QOptionTreeItem
operator|::
name|Group
condition|)
block|{
name|QFont
name|font
init|=
name|QApplication
operator|::
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|font
argument_list|)
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
break|break;
case|case
name|Qt
operator|::
name|DisplayRole
case|:
block|{
name|QOptionTreeItem
modifier|*
name|itm
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
name|itm
operator|=
name|rootItem
expr_stmt|;
else|else
name|itm
operator|=
cast|reinterpret_cast
argument_list|<
name|QOptionTreeItem
operator|*
argument_list|>
argument_list|(
name|index
operator|.
name|internalPointer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|==
literal|0
condition|)
return|return
name|cups
operator|->
name|unicodeString
argument_list|(
name|itm
operator|->
name|description
argument_list|)
return|;
elseif|else
if|if
condition|(
name|itm
operator|->
name|type
operator|==
name|QOptionTreeItem
operator|::
name|Option
operator|&&
name|itm
operator|->
name|selected
operator|>
operator|-
literal|1
condition|)
return|return
name|cups
operator|->
name|unicodeString
argument_list|(
name|itm
operator|->
name|selDescription
argument_list|)
return|;
else|else
return|return
name|QVariant
argument_list|()
return|;
block|}
break|break;
default|default:
return|return
name|QVariant
argument_list|()
return|;
block|}
if|if
condition|(
name|role
operator|!=
name|Qt
operator|::
name|DisplayRole
condition|)
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|index
name|QModelIndex
name|QPPDOptionsModel
operator|::
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|QOptionTreeItem
modifier|*
name|itm
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isValid
argument_list|()
condition|)
name|itm
operator|=
name|rootItem
expr_stmt|;
else|else
name|itm
operator|=
cast|reinterpret_cast
argument_list|<
name|QOptionTreeItem
operator|*
argument_list|>
argument_list|(
name|parent
operator|.
name|internalPointer
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|createIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|itm
operator|->
name|childItems
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|parent
name|QModelIndex
name|QPPDOptionsModel
operator|::
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|QOptionTreeItem
modifier|*
name|itm
init|=
cast|reinterpret_cast
argument_list|<
name|QOptionTreeItem
operator|*
argument_list|>
argument_list|(
name|index
operator|.
name|internalPointer
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
operator|->
name|parentItem
operator|&&
name|itm
operator|->
name|parentItem
operator|!=
name|rootItem
condition|)
return|return
name|createIndex
argument_list|(
name|itm
operator|->
name|parentItem
operator|->
name|index
argument_list|,
literal|0
argument_list|,
name|itm
operator|->
name|parentItem
argument_list|)
return|;
else|else
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|QPPDOptionsModel
operator|::
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
cast|reinterpret_cast
argument_list|<
name|QOptionTreeItem
operator|*
argument_list|>
argument_list|(
name|index
operator|.
name|internalPointer
argument_list|()
argument_list|)
operator|->
name|type
operator|==
name|QOptionTreeItem
operator|::
name|Group
condition|)
return|return
name|Qt
operator|::
name|ItemIsEnabled
return|;
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|==
literal|1
condition|)
return|return
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsEditable
return|;
return|return
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsSelectable
return|;
block|}
end_function
begin_function
DECL|function|parseItems
name|void
name|QPPDOptionsModel
operator|::
name|parseItems
parameter_list|()
block|{
emit|emit
name|layoutAboutToBeChanged
argument_list|()
emit|;
name|ppd
operator|=
name|cups
operator|->
name|currentPPD
argument_list|()
expr_stmt|;
operator|delete
name|rootItem
expr_stmt|;
name|rootItem
operator|=
operator|new
name|QOptionTreeItem
argument_list|(
name|QOptionTreeItem
operator|::
name|Root
argument_list|,
literal|0
argument_list|,
name|ppd
argument_list|,
literal|"Root Item"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|parseGroups
argument_list|(
name|rootItem
argument_list|)
expr_stmt|;
emit|emit
name|layoutChanged
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|parseGroups
name|void
name|QPPDOptionsModel
operator|::
name|parseGroups
parameter_list|(
name|QOptionTreeItem
modifier|*
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|->
name|type
operator|==
name|QOptionTreeItem
operator|::
name|Root
condition|)
block|{
specifier|const
name|ppd_file_t
modifier|*
name|ppdFile
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ppd_file_t
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ppdFile
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ppdFile
operator|->
name|num_groups
condition|;
operator|++
name|i
control|)
block|{
name|QOptionTreeItem
modifier|*
name|group
init|=
operator|new
name|QOptionTreeItem
argument_list|(
name|QOptionTreeItem
operator|::
name|Group
argument_list|,
name|i
argument_list|,
operator|&
name|ppdFile
operator|->
name|groups
index|[
name|i
index|]
argument_list|,
name|ppdFile
operator|->
name|groups
index|[
name|i
index|]
operator|.
name|text
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|parent
operator|->
name|childItems
operator|.
name|append
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|parseGroups
argument_list|(
name|group
argument_list|)
expr_stmt|;
comment|// parse possible subgroups
name|parseOptions
argument_list|(
name|group
argument_list|)
expr_stmt|;
comment|// parse options
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|parent
operator|->
name|type
operator|==
name|QOptionTreeItem
operator|::
name|Group
condition|)
block|{
specifier|const
name|ppd_group_t
modifier|*
name|group
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ppd_group_t
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|group
operator|->
name|num_subgroups
condition|;
operator|++
name|i
control|)
block|{
name|QOptionTreeItem
modifier|*
name|subgroup
init|=
operator|new
name|QOptionTreeItem
argument_list|(
name|QOptionTreeItem
operator|::
name|Group
argument_list|,
name|i
argument_list|,
operator|&
name|group
operator|->
name|subgroups
index|[
name|i
index|]
argument_list|,
name|group
operator|->
name|subgroups
index|[
name|i
index|]
operator|.
name|text
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|parent
operator|->
name|childItems
operator|.
name|append
argument_list|(
name|subgroup
argument_list|)
expr_stmt|;
name|parseGroups
argument_list|(
name|subgroup
argument_list|)
expr_stmt|;
comment|// parse possible subgroups
name|parseOptions
argument_list|(
name|subgroup
argument_list|)
expr_stmt|;
comment|// parse options
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|parseOptions
name|void
name|QPPDOptionsModel
operator|::
name|parseOptions
parameter_list|(
name|QOptionTreeItem
modifier|*
name|parent
parameter_list|)
block|{
specifier|const
name|ppd_group_t
modifier|*
name|group
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ppd_group_t
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|ptr
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|group
operator|->
name|num_options
condition|;
operator|++
name|i
control|)
block|{
name|QOptionTreeItem
modifier|*
name|opt
init|=
operator|new
name|QOptionTreeItem
argument_list|(
name|QOptionTreeItem
operator|::
name|Option
argument_list|,
name|i
argument_list|,
operator|&
name|group
operator|->
name|options
index|[
name|i
index|]
argument_list|,
name|group
operator|->
name|options
index|[
name|i
index|]
operator|.
name|text
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|parent
operator|->
name|childItems
operator|.
name|append
argument_list|(
name|opt
argument_list|)
expr_stmt|;
name|parseChoices
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|parseChoices
name|void
name|QPPDOptionsModel
operator|::
name|parseChoices
parameter_list|(
name|QOptionTreeItem
modifier|*
name|parent
parameter_list|)
block|{
specifier|const
name|ppd_option_t
modifier|*
name|option
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ppd_option_t
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|ptr
argument_list|)
decl_stmt|;
name|bool
name|marked
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|option
operator|->
name|num_choices
condition|;
operator|++
name|i
control|)
block|{
name|QOptionTreeItem
modifier|*
name|choice
init|=
operator|new
name|QOptionTreeItem
argument_list|(
name|QOptionTreeItem
operator|::
name|Choice
argument_list|,
name|i
argument_list|,
operator|&
name|option
operator|->
name|choices
index|[
name|i
index|]
argument_list|,
name|option
operator|->
name|choices
index|[
name|i
index|]
operator|.
name|text
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|option
operator|->
name|choices
index|[
name|i
index|]
operator|.
name|marked
argument_list|)
operator|==
literal|1
condition|)
block|{
name|parent
operator|->
name|selected
operator|=
name|i
expr_stmt|;
name|parent
operator|->
name|selDescription
operator|=
name|option
operator|->
name|choices
index|[
name|i
index|]
operator|.
name|text
expr_stmt|;
name|marked
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|marked
operator|&&
name|qstrcmp
argument_list|(
name|option
operator|->
name|choices
index|[
name|i
index|]
operator|.
name|choice
argument_list|,
name|option
operator|->
name|defchoice
argument_list|)
operator|==
literal|0
condition|)
block|{
name|parent
operator|->
name|selected
operator|=
name|i
expr_stmt|;
name|parent
operator|->
name|selDescription
operator|=
name|option
operator|->
name|choices
index|[
name|i
index|]
operator|.
name|text
expr_stmt|;
block|}
name|parent
operator|->
name|childItems
operator|.
name|append
argument_list|(
name|choice
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|headerData
name|QVariant
name|QPPDOptionsModel
operator|::
name|headerData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|role
operator|!=
name|Qt
operator|::
name|DisplayRole
condition|)
return|return
name|QVariant
argument_list|()
return|;
switch|switch
condition|(
name|section
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QVariant
argument_list|(
name|QApplication
operator|::
name|translate
argument_list|(
literal|"QPPDOptionsModel"
argument_list|,
literal|"Name"
argument_list|)
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|QVariant
argument_list|(
name|QApplication
operator|::
name|translate
argument_list|(
literal|"QPPDOptionsModel"
argument_list|,
literal|"Value"
argument_list|)
argument_list|)
return|;
default|default:
return|return
name|QVariant
argument_list|()
return|;
block|}
block|}
end_function
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////
end_comment
begin_function
DECL|function|createEditor
name|QWidget
modifier|*
name|QPPDOptionsEditor
operator|::
name|createEditor
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|==
literal|1
operator|&&
cast|reinterpret_cast
argument_list|<
name|QOptionTreeItem
operator|*
argument_list|>
argument_list|(
name|index
operator|.
name|internalPointer
argument_list|()
argument_list|)
operator|->
name|type
operator|==
name|QOptionTreeItem
operator|::
name|Option
condition|)
return|return
operator|new
name|QComboBox
argument_list|(
name|parent
argument_list|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setEditorData
name|void
name|QPPDOptionsEditor
operator|::
name|setEditorData
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|!=
literal|1
condition|)
return|return;
name|QComboBox
modifier|*
name|cb
init|=
cast|static_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
decl_stmt|;
name|QOptionTreeItem
modifier|*
name|itm
init|=
cast|reinterpret_cast
argument_list|<
name|QOptionTreeItem
operator|*
argument_list|>
argument_list|(
name|index
operator|.
name|internalPointer
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
operator|->
name|selected
operator|==
operator|-
literal|1
condition|)
name|cb
operator|->
name|addItem
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itm
operator|->
name|childItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|cb
operator|->
name|addItem
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|itm
operator|->
name|childItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|description
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|itm
operator|->
name|selected
operator|>
operator|-
literal|1
condition|)
name|cb
operator|->
name|setCurrentIndex
argument_list|(
name|itm
operator|->
name|selected
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|cb
argument_list|,
name|SIGNAL
argument_list|(
name|currentIndexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|cbChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setModelData
name|void
name|QPPDOptionsEditor
operator|::
name|setModelData
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|,
name|QAbstractItemModel
modifier|*
name|model
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QComboBox
modifier|*
name|cb
init|=
cast|static_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
decl_stmt|;
name|QOptionTreeItem
modifier|*
name|itm
init|=
cast|reinterpret_cast
argument_list|<
name|QOptionTreeItem
operator|*
argument_list|>
argument_list|(
name|index
operator|.
name|internalPointer
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
operator|->
name|selected
operator|==
name|cb
operator|->
name|currentIndex
argument_list|()
condition|)
return|return;
specifier|const
name|ppd_option_t
modifier|*
name|opt
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ppd_option_t
operator|*
argument_list|>
argument_list|(
name|itm
operator|->
name|ptr
argument_list|)
decl_stmt|;
name|QPPDOptionsModel
modifier|*
name|m
init|=
cast|static_cast
argument_list|<
name|QPPDOptionsModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|->
name|cups
operator|->
name|markOption
argument_list|(
name|opt
operator|->
name|keyword
argument_list|,
name|opt
operator|->
name|choices
index|[
name|cb
operator|->
name|currentIndex
argument_list|()
index|]
operator|.
name|choice
argument_list|)
operator|==
literal|0
condition|)
block|{
name|itm
operator|->
name|selected
operator|=
name|cb
operator|->
name|currentIndex
argument_list|()
expr_stmt|;
name|itm
operator|->
name|selDescription
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ppd_option_t
operator|*
argument_list|>
argument_list|(
name|itm
operator|->
name|ptr
argument_list|)
operator|->
name|choices
index|[
name|itm
operator|->
name|selected
index|]
operator|.
name|text
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cbChanged
name|void
name|QPPDOptionsEditor
operator|::
name|cbChanged
parameter_list|(
name|int
parameter_list|)
block|{
comment|/*     emit commitData(static_cast<QWidget*>(sender())); */
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qprintdialog.cpp"
end_include
begin_include
include|#
directive|include
file|"qprintdialog_unix.moc"
end_include
begin_include
include|#
directive|include
file|"qrc_qprintdialog.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTDIALOG
end_comment
end_unit
