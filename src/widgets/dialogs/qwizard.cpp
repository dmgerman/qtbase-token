begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwizard.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WIZARD
end_ifndef
begin_include
include|#
directive|include
file|"qabstractspinbox.h"
end_include
begin_include
include|#
directive|include
file|"qalgorithms.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qboxlayout.h"
end_include
begin_include
include|#
directive|include
file|"qlayoutitem.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qframe.h"
end_include
begin_include
include|#
directive|include
file|"qlabel.h"
end_include
begin_include
include|#
directive|include
file|"qlineedit.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qpushbutton.h"
end_include
begin_include
include|#
directive|include
file|"qset.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
end_if
begin_include
include|#
directive|include
file|"private/qt_mac_p.h"
end_include
begin_include
include|#
directive|include
file|"qlibrary.h"
end_include
begin_elif
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
end_elif
begin_include
include|#
directive|include
file|"qwizard_win_p.h"
end_include
begin_include
include|#
directive|include
file|"qtimer.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"private/qdialog_p.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_mobile
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wce.cpp
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_comment
comment|// for memset()
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
end_ifdef
begin_include
include|#
directive|include
file|"qaction.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// These fudge terms were needed a few places to obtain pixel-perfect results
DECL|variable|GapBetweenLogoAndRightEdge
specifier|const
name|int
name|GapBetweenLogoAndRightEdge
init|=
literal|5
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ModernHeaderTopMargin
specifier|const
name|int
name|ModernHeaderTopMargin
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ClassicHMargin
specifier|const
name|int
name|ClassicHMargin
init|=
literal|4
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|MacButtonTopMargin
specifier|const
name|int
name|MacButtonTopMargin
init|=
literal|13
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|MacLayoutLeftMargin
specifier|const
name|int
name|MacLayoutLeftMargin
init|=
literal|20
decl_stmt|;
end_decl_stmt
begin_comment
comment|//const int MacLayoutTopMargin = 14; // Unused. Save some space and avoid warning.
end_comment
begin_decl_stmt
DECL|variable|MacLayoutRightMargin
specifier|const
name|int
name|MacLayoutRightMargin
init|=
literal|20
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|MacLayoutBottomMargin
specifier|const
name|int
name|MacLayoutBottomMargin
init|=
literal|17
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|changeSpacerSize
specifier|static
name|void
name|changeSpacerSize
parameter_list|(
name|QLayout
modifier|*
name|layout
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|QSpacerItem
modifier|*
name|spacer
init|=
name|layout
operator|->
name|itemAt
argument_list|(
name|index
argument_list|)
operator|->
name|spacerItem
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|spacer
condition|)
return|return;
name|spacer
operator|->
name|changeSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iWantTheFocus
specifier|static
name|QWidget
modifier|*
name|iWantTheFocus
parameter_list|(
name|QWidget
modifier|*
name|ancestor
parameter_list|)
block|{
specifier|const
name|int
name|MaxIterations
init|=
literal|100
decl_stmt|;
name|QWidget
modifier|*
name|candidate
init|=
name|ancestor
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MaxIterations
condition|;
operator|++
name|i
control|)
block|{
name|candidate
operator|=
name|candidate
operator|->
name|nextInFocusChain
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|candidate
condition|)
break|break;
if|if
condition|(
name|candidate
operator|->
name|focusPolicy
argument_list|()
operator|&
name|Qt
operator|::
name|TabFocus
condition|)
block|{
if|if
condition|(
name|candidate
operator|!=
name|ancestor
operator|&&
name|ancestor
operator|->
name|isAncestorOf
argument_list|(
name|candidate
argument_list|)
condition|)
return|return
name|candidate
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|objectInheritsXAndXIsCloserThanY
specifier|static
name|bool
name|objectInheritsXAndXIsCloserThanY
parameter_list|(
specifier|const
name|QObject
modifier|*
name|object
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|classX
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|classY
parameter_list|)
block|{
specifier|const
name|QMetaObject
modifier|*
name|metaObject
init|=
name|object
operator|->
name|metaObject
argument_list|()
decl_stmt|;
while|while
condition|(
name|metaObject
condition|)
block|{
if|if
condition|(
name|metaObject
operator|->
name|className
argument_list|()
operator|==
name|classX
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|metaObject
operator|->
name|className
argument_list|()
operator|==
name|classY
condition|)
return|return
literal|false
return|;
name|metaObject
operator|=
name|metaObject
operator|->
name|superClass
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|NFallbackDefaultProperties
specifier|const
name|int
name|NFallbackDefaultProperties
init|=
literal|7
decl_stmt|;
end_decl_stmt
begin_struct
specifier|const
struct|struct
block|{
DECL|member|className
specifier|const
name|char
modifier|*
name|className
decl_stmt|;
DECL|member|property
specifier|const
name|char
modifier|*
name|property
decl_stmt|;
DECL|member|changedSignal
specifier|const
name|char
modifier|*
name|changedSignal
decl_stmt|;
block|}
DECL|variable|fallbackProperties
name|fallbackProperties
index|[
name|NFallbackDefaultProperties
index|]
init|=
block|{
comment|// If you modify this list, make sure to update the documentation (and the auto test)
block|{
literal|"QAbstractButton"
block|,
literal|"checked"
block|,
name|SIGNAL
argument_list|(
argument|toggled(bool)
argument_list|)
block|}
block|,
block|{
literal|"QAbstractSlider"
block|,
literal|"value"
block|,
name|SIGNAL
argument_list|(
argument|valueChanged(int)
argument_list|)
block|}
block|,
block|{
literal|"QComboBox"
block|,
literal|"currentIndex"
block|,
name|SIGNAL
argument_list|(
argument|currentIndexChanged(int)
argument_list|)
block|}
block|,
block|{
literal|"QDateTimeEdit"
block|,
literal|"dateTime"
block|,
name|SIGNAL
argument_list|(
argument|dateTimeChanged(QDateTime)
argument_list|)
block|}
block|,
block|{
literal|"QLineEdit"
block|,
literal|"text"
block|,
name|SIGNAL
argument_list|(
argument|textChanged(QString)
argument_list|)
block|}
block|,
block|{
literal|"QListWidget"
block|,
literal|"currentRow"
block|,
name|SIGNAL
argument_list|(
argument|currentRowChanged(int)
argument_list|)
block|}
block|,
block|{
literal|"QSpinBox"
block|,
literal|"value"
block|,
name|SIGNAL
argument_list|(
argument|valueChanged(int)
argument_list|)
block|}
block|}
struct|;
end_struct
begin_class
DECL|class|QWizardDefaultProperty
class|class
name|QWizardDefaultProperty
block|{
public|public:
DECL|member|className
name|QByteArray
name|className
decl_stmt|;
DECL|member|property
name|QByteArray
name|property
decl_stmt|;
DECL|member|changedSignal
name|QByteArray
name|changedSignal
decl_stmt|;
DECL|function|QWizardDefaultProperty
specifier|inline
name|QWizardDefaultProperty
parameter_list|()
block|{}
DECL|function|QWizardDefaultProperty
specifier|inline
name|QWizardDefaultProperty
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|property
parameter_list|,
specifier|const
name|char
modifier|*
name|changedSignal
parameter_list|)
member_init_list|:
name|className
argument_list|(
name|className
argument_list|)
member_init_list|,
name|property
argument_list|(
name|property
argument_list|)
member_init_list|,
name|changedSignal
argument_list|(
name|changedSignal
argument_list|)
block|{}
block|}
class|;
end_class
begin_class
DECL|class|QWizardField
class|class
name|QWizardField
block|{
public|public:
DECL|function|QWizardField
specifier|inline
name|QWizardField
parameter_list|()
block|{}
name|QWizardField
parameter_list|(
name|QWizardPage
modifier|*
name|page
parameter_list|,
specifier|const
name|QString
modifier|&
name|spec
parameter_list|,
name|QObject
modifier|*
name|object
parameter_list|,
specifier|const
name|char
modifier|*
name|property
parameter_list|,
specifier|const
name|char
modifier|*
name|changedSignal
parameter_list|)
constructor_decl|;
name|void
name|resolve
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QWizardDefaultProperty
argument_list|>
modifier|&
name|defaultPropertyTable
parameter_list|)
function_decl|;
name|void
name|findProperty
parameter_list|(
specifier|const
name|QWizardDefaultProperty
modifier|*
name|properties
parameter_list|,
name|int
name|propertyCount
parameter_list|)
function_decl|;
DECL|member|page
name|QWizardPage
modifier|*
name|page
decl_stmt|;
DECL|member|name
name|QString
name|name
decl_stmt|;
DECL|member|mandatory
name|bool
name|mandatory
decl_stmt|;
DECL|member|object
name|QObject
modifier|*
name|object
decl_stmt|;
DECL|member|property
name|QByteArray
name|property
decl_stmt|;
DECL|member|changedSignal
name|QByteArray
name|changedSignal
decl_stmt|;
DECL|member|initialValue
name|QVariant
name|initialValue
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWizardField
name|QWizardField
operator|::
name|QWizardField
parameter_list|(
name|QWizardPage
modifier|*
name|page
parameter_list|,
specifier|const
name|QString
modifier|&
name|spec
parameter_list|,
name|QObject
modifier|*
name|object
parameter_list|,
specifier|const
name|char
modifier|*
name|property
parameter_list|,
specifier|const
name|char
modifier|*
name|changedSignal
parameter_list|)
member_init_list|:
name|page
argument_list|(
name|page
argument_list|)
member_init_list|,
name|name
argument_list|(
name|spec
argument_list|)
member_init_list|,
name|mandatory
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|object
argument_list|(
name|object
argument_list|)
member_init_list|,
name|property
argument_list|(
name|property
argument_list|)
member_init_list|,
name|changedSignal
argument_list|(
name|changedSignal
argument_list|)
block|{
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
argument_list|)
condition|)
block|{
name|name
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mandatory
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|resolve
name|void
name|QWizardField
operator|::
name|resolve
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QWizardDefaultProperty
argument_list|>
modifier|&
name|defaultPropertyTable
parameter_list|)
block|{
if|if
condition|(
name|property
operator|.
name|isEmpty
argument_list|()
condition|)
name|findProperty
argument_list|(
name|defaultPropertyTable
operator|.
name|constData
argument_list|()
argument_list|,
name|defaultPropertyTable
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|initialValue
operator|=
name|object
operator|->
name|property
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findProperty
name|void
name|QWizardField
operator|::
name|findProperty
parameter_list|(
specifier|const
name|QWizardDefaultProperty
modifier|*
name|properties
parameter_list|,
name|int
name|propertyCount
parameter_list|)
block|{
name|QByteArray
name|className
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|objectInheritsXAndXIsCloserThanY
argument_list|(
name|object
argument_list|,
name|properties
index|[
name|i
index|]
operator|.
name|className
argument_list|,
name|className
argument_list|)
condition|)
block|{
name|className
operator|=
name|properties
index|[
name|i
index|]
operator|.
name|className
expr_stmt|;
name|property
operator|=
name|properties
index|[
name|i
index|]
operator|.
name|property
expr_stmt|;
name|changedSignal
operator|=
name|properties
index|[
name|i
index|]
operator|.
name|changedSignal
expr_stmt|;
block|}
block|}
block|}
end_function
begin_class
DECL|class|QWizardLayoutInfo
class|class
name|QWizardLayoutInfo
block|{
public|public:
DECL|function|QWizardLayoutInfo
specifier|inline
name|QWizardLayoutInfo
parameter_list|()
member_init_list|:
name|topLevelMarginLeft
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|topLevelMarginRight
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|topLevelMarginTop
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|topLevelMarginBottom
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|childMarginLeft
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|childMarginRight
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|childMarginTop
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|childMarginBottom
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|hspacing
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|vspacing
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|wizStyle
argument_list|(
name|QWizard
operator|::
name|ClassicStyle
argument_list|)
member_init_list|,
name|header
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|watermark
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|title
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|subTitle
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|extension
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|sideWidget
argument_list|(
literal|false
argument_list|)
block|{}
DECL|member|topLevelMarginLeft
name|int
name|topLevelMarginLeft
decl_stmt|;
DECL|member|topLevelMarginRight
name|int
name|topLevelMarginRight
decl_stmt|;
DECL|member|topLevelMarginTop
name|int
name|topLevelMarginTop
decl_stmt|;
DECL|member|topLevelMarginBottom
name|int
name|topLevelMarginBottom
decl_stmt|;
DECL|member|childMarginLeft
name|int
name|childMarginLeft
decl_stmt|;
DECL|member|childMarginRight
name|int
name|childMarginRight
decl_stmt|;
DECL|member|childMarginTop
name|int
name|childMarginTop
decl_stmt|;
DECL|member|childMarginBottom
name|int
name|childMarginBottom
decl_stmt|;
DECL|member|hspacing
name|int
name|hspacing
decl_stmt|;
DECL|member|vspacing
name|int
name|vspacing
decl_stmt|;
DECL|member|buttonSpacing
name|int
name|buttonSpacing
decl_stmt|;
DECL|member|wizStyle
name|QWizard
operator|::
name|WizardStyle
name|wizStyle
decl_stmt|;
DECL|member|header
name|bool
name|header
decl_stmt|;
DECL|member|watermark
name|bool
name|watermark
decl_stmt|;
DECL|member|title
name|bool
name|title
decl_stmt|;
DECL|member|subTitle
name|bool
name|subTitle
decl_stmt|;
DECL|member|extension
name|bool
name|extension
decl_stmt|;
DECL|member|sideWidget
name|bool
name|sideWidget
decl_stmt|;
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QWizardLayoutInfo
modifier|&
name|other
parameter_list|)
function_decl|;
DECL|function|operator !=
specifier|inline
name|bool
name|operator
name|!=
parameter_list|(
specifier|const
name|QWizardLayoutInfo
modifier|&
name|other
parameter_list|)
block|{
return|return
operator|!
name|operator
name|==
argument_list|(
name|other
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|operator ==
name|bool
name|QWizardLayoutInfo
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QWizardLayoutInfo
modifier|&
name|other
parameter_list|)
block|{
return|return
name|topLevelMarginLeft
operator|==
name|other
operator|.
name|topLevelMarginLeft
operator|&&
name|topLevelMarginRight
operator|==
name|other
operator|.
name|topLevelMarginRight
operator|&&
name|topLevelMarginTop
operator|==
name|other
operator|.
name|topLevelMarginTop
operator|&&
name|topLevelMarginBottom
operator|==
name|other
operator|.
name|topLevelMarginBottom
operator|&&
name|childMarginLeft
operator|==
name|other
operator|.
name|childMarginLeft
operator|&&
name|childMarginRight
operator|==
name|other
operator|.
name|childMarginRight
operator|&&
name|childMarginTop
operator|==
name|other
operator|.
name|childMarginTop
operator|&&
name|childMarginBottom
operator|==
name|other
operator|.
name|childMarginBottom
operator|&&
name|hspacing
operator|==
name|other
operator|.
name|hspacing
operator|&&
name|vspacing
operator|==
name|other
operator|.
name|vspacing
operator|&&
name|buttonSpacing
operator|==
name|other
operator|.
name|buttonSpacing
operator|&&
name|wizStyle
operator|==
name|other
operator|.
name|wizStyle
operator|&&
name|header
operator|==
name|other
operator|.
name|header
operator|&&
name|watermark
operator|==
name|other
operator|.
name|watermark
operator|&&
name|title
operator|==
name|other
operator|.
name|title
operator|&&
name|subTitle
operator|==
name|other
operator|.
name|subTitle
operator|&&
name|extension
operator|==
name|other
operator|.
name|extension
operator|&&
name|sideWidget
operator|==
name|other
operator|.
name|sideWidget
return|;
block|}
end_function
begin_class
DECL|class|QWizardHeader
class|class
name|QWizardHeader
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|enum|RulerType
DECL|enumerator|Ruler
enum|enum
name|RulerType
block|{
name|Ruler
block|}
enum|;
DECL|function|QWizardHeader
specifier|inline
name|QWizardHeader
parameter_list|(
name|RulerType
comment|/* ruler */
parameter_list|,
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|setFixedHeight
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|QWizardHeader
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|void
name|setup
parameter_list|(
specifier|const
name|QWizardLayoutInfo
modifier|&
name|info
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|subTitle
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|logo
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|banner
parameter_list|,
name|Qt
operator|::
name|TextFormat
name|titleFormat
parameter_list|,
name|Qt
operator|::
name|TextFormat
name|subTitleFormat
parameter_list|)
function_decl|;
protected|protected:
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
private|private:
name|bool
name|vistaDisabled
parameter_list|()
specifier|const
function_decl|;
endif|#
directive|endif
private|private:
DECL|member|titleLabel
name|QLabel
modifier|*
name|titleLabel
decl_stmt|;
DECL|member|subTitleLabel
name|QLabel
modifier|*
name|subTitleLabel
decl_stmt|;
DECL|member|logoLabel
name|QLabel
modifier|*
name|logoLabel
decl_stmt|;
DECL|member|layout
name|QGridLayout
modifier|*
name|layout
decl_stmt|;
DECL|member|bannerPixmap
name|QPixmap
name|bannerPixmap
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWizardHeader
name|QWizardHeader
operator|::
name|QWizardHeader
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|titleLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|titleLabel
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|subTitleLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|subTitleLabel
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignTop
operator||
name|Qt
operator|::
name|AlignLeft
argument_list|)
expr_stmt|;
name|subTitleLabel
operator|->
name|setWordWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logoLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QFont
name|font
init|=
name|titleLabel
operator|->
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|titleLabel
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|layout
operator|=
operator|new
name|QGridLayout
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setRowMinimumHeight
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setRowStretch
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setColumnStretch
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setColumnMinimumWidth
argument_list|(
literal|4
argument_list|,
literal|2
operator|*
name|GapBetweenLogoAndRightEdge
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setColumnMinimumWidth
argument_list|(
literal|6
argument_list|,
name|GapBetweenLogoAndRightEdge
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|titleLabel
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|subTitleLabel
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|logoLabel
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
end_if
begin_function
DECL|function|vistaDisabled
name|bool
name|QWizardHeader
operator|::
name|vistaDisabled
parameter_list|()
specifier|const
block|{
name|bool
name|styleDisabled
init|=
literal|false
decl_stmt|;
name|QWizard
modifier|*
name|wiz
init|=
name|parentWidget
argument_list|()
condition|?
name|qobject_cast
argument_list|<
name|QWizard
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
operator|->
name|parentWidget
argument_list|()
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|wiz
condition|)
block|{
comment|// Designer dosen't support the Vista style for Wizards. This property is used to turn
comment|// off the Vista style.
specifier|const
name|QVariant
name|v
init|=
name|wiz
operator|->
name|property
argument_list|(
literal|"_q_wizard_vista_off"
argument_list|)
decl_stmt|;
name|styleDisabled
operator|=
name|v
operator|.
name|isValid
argument_list|()
operator|&&
name|v
operator|.
name|toBool
argument_list|()
expr_stmt|;
block|}
return|return
name|styleDisabled
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setup
name|void
name|QWizardHeader
operator|::
name|setup
parameter_list|(
specifier|const
name|QWizardLayoutInfo
modifier|&
name|info
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|subTitle
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|logo
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|banner
parameter_list|,
name|Qt
operator|::
name|TextFormat
name|titleFormat
parameter_list|,
name|Qt
operator|::
name|TextFormat
name|subTitleFormat
parameter_list|)
block|{
name|bool
name|modern
init|=
operator|(
operator|(
name|info
operator|.
name|wizStyle
operator|==
name|QWizard
operator|::
name|ModernStyle
operator|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
operator|||
operator|(
operator|(
name|info
operator|.
name|wizStyle
operator|==
name|QWizard
operator|::
name|AeroStyle
operator|&&
name|QVistaHelper
operator|::
name|vistaState
argument_list|()
operator|==
name|QVistaHelper
operator|::
name|Classic
operator|)
operator|||
name|vistaDisabled
argument_list|()
operator|)
endif|#
directive|endif
operator|)
decl_stmt|;
name|layout
operator|->
name|setRowMinimumHeight
argument_list|(
literal|0
argument_list|,
name|modern
condition|?
name|ModernHeaderTopMargin
else|:
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setRowMinimumHeight
argument_list|(
literal|1
argument_list|,
name|modern
condition|?
name|info
operator|.
name|topLevelMarginTop
operator|-
name|ModernHeaderTopMargin
operator|-
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setRowMinimumHeight
argument_list|(
literal|6
argument_list|,
operator|(
name|modern
condition|?
literal|3
else|:
name|GapBetweenLogoAndRightEdge
operator|)
operator|+
literal|2
argument_list|)
expr_stmt|;
name|int
name|minColumnWidth0
init|=
name|modern
condition|?
name|info
operator|.
name|topLevelMarginLeft
operator|+
name|info
operator|.
name|topLevelMarginRight
else|:
literal|0
decl_stmt|;
name|int
name|minColumnWidth1
init|=
name|modern
condition|?
name|info
operator|.
name|topLevelMarginLeft
operator|+
name|info
operator|.
name|topLevelMarginRight
operator|+
literal|1
else|:
name|info
operator|.
name|topLevelMarginLeft
operator|+
name|ClassicHMargin
decl_stmt|;
name|layout
operator|->
name|setColumnMinimumWidth
argument_list|(
literal|0
argument_list|,
name|minColumnWidth0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setColumnMinimumWidth
argument_list|(
literal|1
argument_list|,
name|minColumnWidth1
argument_list|)
expr_stmt|;
name|titleLabel
operator|->
name|setTextFormat
argument_list|(
name|titleFormat
argument_list|)
expr_stmt|;
name|titleLabel
operator|->
name|setText
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|logoLabel
operator|->
name|setPixmap
argument_list|(
name|logo
argument_list|)
expr_stmt|;
name|subTitleLabel
operator|->
name|setTextFormat
argument_list|(
name|subTitleFormat
argument_list|)
expr_stmt|;
name|subTitleLabel
operator|->
name|setText
argument_list|(
name|QLatin1String
argument_list|(
literal|"Pq\nPq"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|desiredSubTitleHeight
init|=
name|subTitleLabel
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|subTitleLabel
operator|->
name|setText
argument_list|(
name|subTitle
argument_list|)
expr_stmt|;
if|if
condition|(
name|modern
condition|)
block|{
name|bannerPixmap
operator|=
name|banner
expr_stmt|;
block|}
else|else
block|{
name|bannerPixmap
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bannerPixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|/*             There is no widthForHeight() function, so we simulate it with a loop.         */
name|int
name|candidateSubTitleWidth
init|=
name|qMin
argument_list|(
literal|512
argument_list|,
literal|2
operator|*
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|width
argument_list|()
operator|/
literal|3
argument_list|)
decl_stmt|;
name|int
name|delta
init|=
name|candidateSubTitleWidth
operator|>>
literal|1
decl_stmt|;
while|while
condition|(
name|delta
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|subTitleLabel
operator|->
name|heightForWidth
argument_list|(
name|candidateSubTitleWidth
operator|-
name|delta
argument_list|)
operator|<=
name|desiredSubTitleHeight
condition|)
name|candidateSubTitleWidth
operator|-=
name|delta
expr_stmt|;
name|delta
operator|>>=
literal|1
expr_stmt|;
block|}
name|subTitleLabel
operator|->
name|setMinimumSize
argument_list|(
name|candidateSubTitleWidth
argument_list|,
name|desiredSubTitleHeight
argument_list|)
expr_stmt|;
name|QSize
name|size
init|=
name|layout
operator|->
name|totalMinimumSize
argument_list|()
decl_stmt|;
name|setMinimumSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|setMaximumSize
argument_list|(
name|QWIDGETSIZE_MAX
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|subTitleLabel
operator|->
name|setMinimumSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|setFixedSize
argument_list|(
name|banner
operator|.
name|size
argument_list|()
operator|+
name|QSize
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|QWizardHeader
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
comment|/* event */
parameter_list|)
block|{
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|painter
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|bannerPixmap
argument_list|)
expr_stmt|;
name|int
name|x
init|=
name|width
argument_list|()
operator|-
literal|2
decl_stmt|;
name|int
name|y
init|=
name|height
argument_list|()
operator|-
literal|2
decl_stmt|;
specifier|const
name|QPalette
modifier|&
name|pal
init|=
name|palette
argument_list|()
decl_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|pal
operator|.
name|mid
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawLine
argument_list|(
literal|0
argument_list|,
name|y
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|pal
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawPoint
argument_list|(
name|x
operator|+
literal|1
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawLine
argument_list|(
literal|0
argument_list|,
name|y
operator|+
literal|1
argument_list|,
name|x
operator|+
literal|1
argument_list|,
name|y
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// We save one vtable by basing QWizardRuler on QWizardHeader
end_comment
begin_class
DECL|class|QWizardRuler
class|class
name|QWizardRuler
super|:
specifier|public
name|QWizardHeader
block|{
public|public:
DECL|function|QWizardRuler
specifier|inline
name|QWizardRuler
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWizardHeader
argument_list|(
name|Ruler
argument_list|,
name|parent
argument_list|)
block|{}
block|}
class|;
end_class
begin_class
DECL|class|QWatermarkLabel
class|class
name|QWatermarkLabel
super|:
specifier|public
name|QLabel
block|{
public|public:
DECL|function|QWatermarkLabel
name|QWatermarkLabel
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|QWidget
modifier|*
name|sideWidget
parameter_list|)
member_init_list|:
name|QLabel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_sideWidget
argument_list|(
name|sideWidget
argument_list|)
block|{
name|m_layout
operator|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_sideWidget
condition|)
name|m_layout
operator|->
name|addWidget
argument_list|(
name|m_sideWidget
argument_list|)
expr_stmt|;
block|}
DECL|function|minimumSizeHint
name|QSize
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|pixmap
argument_list|()
operator|&&
operator|!
name|pixmap
argument_list|()
operator|->
name|isNull
argument_list|()
condition|)
return|return
name|pixmap
argument_list|()
operator|->
name|size
argument_list|()
return|;
return|return
name|QFrame
operator|::
name|minimumSizeHint
argument_list|()
return|;
block|}
DECL|function|setSideWidget
name|void
name|setSideWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|m_sideWidget
operator|==
name|widget
condition|)
return|return;
if|if
condition|(
name|m_sideWidget
condition|)
block|{
name|m_layout
operator|->
name|removeWidget
argument_list|(
name|m_sideWidget
argument_list|)
expr_stmt|;
name|m_sideWidget
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
name|m_sideWidget
operator|=
name|widget
expr_stmt|;
if|if
condition|(
name|m_sideWidget
condition|)
name|m_layout
operator|->
name|addWidget
argument_list|(
name|m_sideWidget
argument_list|)
expr_stmt|;
block|}
DECL|function|sideWidget
name|QWidget
modifier|*
name|sideWidget
parameter_list|()
specifier|const
block|{
return|return
name|m_sideWidget
return|;
block|}
private|private:
DECL|member|m_layout
name|QVBoxLayout
modifier|*
name|m_layout
decl_stmt|;
DECL|member|m_sideWidget
name|QWidget
modifier|*
name|m_sideWidget
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QWizardPagePrivate
class|class
name|QWizardPagePrivate
super|:
specifier|public
name|QWidgetPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QWizardPage
parameter_list|)
specifier|public
private|:
DECL|enum|TriState
DECL|enumerator|Tri_Unknown
DECL|enumerator|Tri_False
DECL|enumerator|Tri_True
enum|enum
name|TriState
block|{
name|Tri_Unknown
init|=
operator|-
literal|1
block|,
name|Tri_False
block|,
name|Tri_True
block|}
enum|;
DECL|function|QWizardPagePrivate
specifier|inline
name|QWizardPagePrivate
parameter_list|()
member_init_list|:
name|wizard
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|completeState
argument_list|(
name|Tri_Unknown
argument_list|)
member_init_list|,
name|explicitlyFinal
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|commit
argument_list|(
literal|false
argument_list|)
block|{}
name|bool
name|cachedIsComplete
parameter_list|()
specifier|const
function_decl|;
name|void
name|_q_maybeEmitCompleteChanged
parameter_list|()
function_decl|;
name|void
name|_q_updateCachedCompleteState
parameter_list|()
function_decl|;
DECL|member|wizard
name|QWizard
modifier|*
name|wizard
decl_stmt|;
DECL|member|title
name|QString
name|title
decl_stmt|;
DECL|member|subTitle
name|QString
name|subTitle
decl_stmt|;
DECL|member|pixmaps
name|QPixmap
name|pixmaps
index|[
name|QWizard
operator|::
name|NPixmaps
index|]
decl_stmt|;
DECL|member|pendingFields
name|QVector
argument_list|<
name|QWizardField
argument_list|>
name|pendingFields
decl_stmt|;
DECL|member|completeState
specifier|mutable
name|TriState
name|completeState
decl_stmt|;
DECL|member|explicitlyFinal
name|bool
name|explicitlyFinal
decl_stmt|;
DECL|member|commit
name|bool
name|commit
decl_stmt|;
DECL|member|buttonCustomTexts
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|buttonCustomTexts
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|cachedIsComplete
name|bool
name|QWizardPagePrivate
operator|::
name|cachedIsComplete
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWizardPage
argument_list|)
expr_stmt|;
if|if
condition|(
name|completeState
operator|==
name|Tri_Unknown
condition|)
name|completeState
operator|=
name|q
operator|->
name|isComplete
argument_list|()
condition|?
name|Tri_True
else|:
name|Tri_False
expr_stmt|;
return|return
name|completeState
operator|==
name|Tri_True
return|;
block|}
end_function
begin_function
DECL|function|_q_maybeEmitCompleteChanged
name|void
name|QWizardPagePrivate
operator|::
name|_q_maybeEmitCompleteChanged
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWizardPage
argument_list|)
expr_stmt|;
name|TriState
name|newState
init|=
name|q
operator|->
name|isComplete
argument_list|()
condition|?
name|Tri_True
else|:
name|Tri_False
decl_stmt|;
if|if
condition|(
name|newState
operator|!=
name|completeState
condition|)
emit|emit
name|q
operator|->
name|completeChanged
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|_q_updateCachedCompleteState
name|void
name|QWizardPagePrivate
operator|::
name|_q_updateCachedCompleteState
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWizardPage
argument_list|)
expr_stmt|;
name|completeState
operator|=
name|q
operator|->
name|isComplete
argument_list|()
condition|?
name|Tri_True
else|:
name|Tri_False
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QWizardAntiFlickerWidget
class|class
name|QWizardAntiFlickerWidget
super|:
specifier|public
name|QWidget
block|{
DECL|member|wizard
name|QWizard
modifier|*
name|wizard
decl_stmt|;
DECL|member|wizardPrivate
name|QWizardPrivate
modifier|*
name|wizardPrivate
decl_stmt|;
public|public:
DECL|function|QWizardAntiFlickerWidget
name|QWizardAntiFlickerWidget
parameter_list|(
name|QWizard
modifier|*
name|wizard
parameter_list|,
name|QWizardPrivate
modifier|*
name|wizardPrivate
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|wizard
argument_list|)
member_init_list|,
name|wizard
argument_list|(
name|wizard
argument_list|)
member_init_list|,
name|wizardPrivate
argument_list|(
name|wizardPrivate
argument_list|)
block|{}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
protected|protected:
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
block|}
class|;
end_class
begin_class
DECL|class|QWizardPrivate
class|class
name|QWizardPrivate
super|:
specifier|public
name|QDialogPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QWizard
parameter_list|)
specifier|public
private|:
DECL|typedef|PageMap
typedef|typedef
name|QMap
argument_list|<
name|int
argument_list|,
name|QWizardPage
modifier|*
argument_list|>
name|PageMap
typedef|;
DECL|enum|Direction
enum|enum
name|Direction
block|{
DECL|enumerator|Backward
name|Backward
block|,
DECL|enumerator|Forward
name|Forward
block|}
enum|;
DECL|function|QWizardPrivate
specifier|inline
name|QWizardPrivate
parameter_list|()
member_init_list|:
name|start
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|startSetByUser
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|current
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|canContinue
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|canFinish
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|disableUpdatesCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|opts
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|buttonsHaveCustomLayout
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|titleFmt
argument_list|(
name|Qt
operator|::
name|AutoText
argument_list|)
member_init_list|,
name|subTitleFmt
argument_list|(
name|Qt
operator|::
name|AutoText
argument_list|)
member_init_list|,
name|placeholderWidget1
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|placeholderWidget2
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|headerWidget
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|watermarkLabel
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sideWidget
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|titleLabel
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|subTitleLabel
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bottomRuler
argument_list|(
literal|0
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
member_init_list|,
name|vistaInitPending
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|vistaState
argument_list|(
name|QVistaHelper
operator|::
name|Dirty
argument_list|)
member_init_list|,
name|vistaStateChanged
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|inHandleAeroStyleChange
argument_list|(
literal|false
argument_list|)
endif|#
directive|endif
member_init_list|,
name|minimumWidth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|minimumHeight
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maximumWidth
argument_list|(
name|QWIDGETSIZE_MAX
argument_list|)
member_init_list|,
name|maximumHeight
argument_list|(
name|QWIDGETSIZE_MAX
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QWizard
operator|::
name|NButtons
condition|;
operator|++
name|i
control|)
block|{
name|btns
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
name|softKeys
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
operator|&&
name|QSysInfo
operator|::
name|WindowsVersion
operator|<
name|QSysInfo
operator|::
name|WV_NT_based
condition|)
name|vistaInitPending
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
block|}
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|reset
parameter_list|()
function_decl|;
name|void
name|cleanupPagesNotInHistory
parameter_list|()
function_decl|;
name|void
name|addField
parameter_list|(
specifier|const
name|QWizardField
modifier|&
name|field
parameter_list|)
function_decl|;
name|void
name|removeFieldAt
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
name|void
name|switchToPage
parameter_list|(
name|int
name|newId
parameter_list|,
name|Direction
name|direction
parameter_list|)
function_decl|;
name|QWizardLayoutInfo
name|layoutInfoForCurrentPage
parameter_list|()
function_decl|;
name|void
name|recreateLayout
parameter_list|(
specifier|const
name|QWizardLayoutInfo
modifier|&
name|info
parameter_list|)
function_decl|;
name|void
name|updateLayout
parameter_list|()
function_decl|;
name|void
name|updateMinMaxSizes
parameter_list|(
specifier|const
name|QWizardLayoutInfo
modifier|&
name|info
parameter_list|)
function_decl|;
name|void
name|updateCurrentPage
parameter_list|()
function_decl|;
name|bool
name|ensureButton
parameter_list|(
name|QWizard
operator|::
name|WizardButton
name|which
parameter_list|)
specifier|const
function_decl|;
name|void
name|connectButton
parameter_list|(
name|QWizard
operator|::
name|WizardButton
name|which
parameter_list|)
specifier|const
function_decl|;
name|void
name|updateButtonTexts
parameter_list|()
function_decl|;
name|void
name|updateButtonLayout
parameter_list|()
function_decl|;
name|void
name|setButtonLayout
parameter_list|(
specifier|const
name|QWizard
operator|::
name|WizardButton
modifier|*
name|array
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|bool
name|buttonLayoutContains
parameter_list|(
name|QWizard
operator|::
name|WizardButton
name|which
parameter_list|)
function_decl|;
name|void
name|updatePixmap
parameter_list|(
name|QWizard
operator|::
name|WizardPixmap
name|which
parameter_list|)
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
name|bool
name|vistaDisabled
parameter_list|()
specifier|const
function_decl|;
name|bool
name|isVistaThemeEnabled
parameter_list|(
name|QVistaHelper
operator|::
name|VistaState
name|state
parameter_list|)
specifier|const
function_decl|;
name|void
name|handleAeroStyleChange
parameter_list|()
function_decl|;
endif|#
directive|endif
name|bool
name|isVistaThemeEnabled
parameter_list|()
specifier|const
function_decl|;
name|void
name|disableUpdates
parameter_list|()
function_decl|;
name|void
name|enableUpdates
parameter_list|()
function_decl|;
name|void
name|_q_emitCustomButtonClicked
parameter_list|()
function_decl|;
name|void
name|_q_updateButtonStates
parameter_list|()
function_decl|;
name|void
name|_q_handleFieldObjectDestroyed
parameter_list|(
name|QObject
modifier|*
parameter_list|)
function_decl|;
name|void
name|setStyle
parameter_list|(
name|QStyle
modifier|*
name|style
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
specifier|static
name|QPixmap
name|findDefaultBackgroundPixmap
parameter_list|()
function_decl|;
endif|#
directive|endif
DECL|member|pageMap
name|PageMap
name|pageMap
decl_stmt|;
DECL|member|fields
name|QVector
argument_list|<
name|QWizardField
argument_list|>
name|fields
decl_stmt|;
DECL|member|fieldIndexMap
name|QMap
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|fieldIndexMap
decl_stmt|;
DECL|member|defaultPropertyTable
name|QVector
argument_list|<
name|QWizardDefaultProperty
argument_list|>
name|defaultPropertyTable
decl_stmt|;
DECL|member|history
name|QList
argument_list|<
name|int
argument_list|>
name|history
decl_stmt|;
DECL|member|initialized
name|QSet
argument_list|<
name|int
argument_list|>
name|initialized
decl_stmt|;
comment|// ### remove and move bit to QWizardPage?
DECL|member|start
name|int
name|start
decl_stmt|;
DECL|member|startSetByUser
name|bool
name|startSetByUser
decl_stmt|;
DECL|member|current
name|int
name|current
decl_stmt|;
DECL|member|canContinue
name|bool
name|canContinue
decl_stmt|;
DECL|member|canFinish
name|bool
name|canFinish
decl_stmt|;
DECL|member|layoutInfo
name|QWizardLayoutInfo
name|layoutInfo
decl_stmt|;
DECL|member|disableUpdatesCount
name|int
name|disableUpdatesCount
decl_stmt|;
DECL|member|wizStyle
name|QWizard
operator|::
name|WizardStyle
name|wizStyle
decl_stmt|;
DECL|member|opts
name|QWizard
operator|::
name|WizardOptions
name|opts
decl_stmt|;
DECL|member|buttonCustomTexts
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|buttonCustomTexts
decl_stmt|;
DECL|member|buttonsHaveCustomLayout
name|bool
name|buttonsHaveCustomLayout
decl_stmt|;
DECL|member|buttonsCustomLayout
name|QList
argument_list|<
name|QWizard
operator|::
name|WizardButton
argument_list|>
name|buttonsCustomLayout
decl_stmt|;
DECL|member|titleFmt
name|Qt
operator|::
name|TextFormat
name|titleFmt
decl_stmt|;
DECL|member|subTitleFmt
name|Qt
operator|::
name|TextFormat
name|subTitleFmt
decl_stmt|;
DECL|member|defaultPixmaps
specifier|mutable
name|QPixmap
name|defaultPixmaps
index|[
name|QWizard
operator|::
name|NPixmaps
index|]
decl_stmt|;
union|union
block|{
comment|// keep in sync with QWizard::WizardButton
specifier|mutable
struct|struct
block|{
DECL|member|back
name|QAbstractButton
modifier|*
name|back
decl_stmt|;
DECL|member|next
name|QAbstractButton
modifier|*
name|next
decl_stmt|;
DECL|member|commit
name|QAbstractButton
modifier|*
name|commit
decl_stmt|;
DECL|member|finish
name|QAbstractButton
modifier|*
name|finish
decl_stmt|;
DECL|member|cancel
name|QAbstractButton
modifier|*
name|cancel
decl_stmt|;
DECL|member|help
name|QAbstractButton
modifier|*
name|help
decl_stmt|;
DECL|member|btn
block|}
name|btn
struct|;
DECL|member|btns
specifier|mutable
name|QAbstractButton
modifier|*
name|btns
index|[
name|QWizard
operator|::
name|NButtons
index|]
decl_stmt|;
block|}
union|;
DECL|member|antiFlickerWidget
name|QWizardAntiFlickerWidget
modifier|*
name|antiFlickerWidget
decl_stmt|;
DECL|member|placeholderWidget1
name|QWidget
modifier|*
name|placeholderWidget1
decl_stmt|;
DECL|member|placeholderWidget2
name|QWidget
modifier|*
name|placeholderWidget2
decl_stmt|;
DECL|member|headerWidget
name|QWizardHeader
modifier|*
name|headerWidget
decl_stmt|;
DECL|member|watermarkLabel
name|QWatermarkLabel
modifier|*
name|watermarkLabel
decl_stmt|;
DECL|member|sideWidget
name|QWidget
modifier|*
name|sideWidget
decl_stmt|;
DECL|member|pageFrame
name|QFrame
modifier|*
name|pageFrame
decl_stmt|;
DECL|member|titleLabel
name|QLabel
modifier|*
name|titleLabel
decl_stmt|;
DECL|member|subTitleLabel
name|QLabel
modifier|*
name|subTitleLabel
decl_stmt|;
DECL|member|bottomRuler
name|QWizardRuler
modifier|*
name|bottomRuler
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
DECL|member|softKeys
specifier|mutable
name|QAction
modifier|*
name|softKeys
index|[
name|QWizard
operator|::
name|NButtons
index|]
decl_stmt|;
endif|#
directive|endif
DECL|member|pageVBoxLayout
name|QVBoxLayout
modifier|*
name|pageVBoxLayout
decl_stmt|;
DECL|member|buttonLayout
name|QHBoxLayout
modifier|*
name|buttonLayout
decl_stmt|;
DECL|member|mainLayout
name|QGridLayout
modifier|*
name|mainLayout
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
DECL|member|vistaHelper
name|QVistaHelper
modifier|*
name|vistaHelper
decl_stmt|;
DECL|member|vistaInitPending
name|bool
name|vistaInitPending
decl_stmt|;
DECL|member|vistaState
name|QVistaHelper
operator|::
name|VistaState
name|vistaState
decl_stmt|;
DECL|member|vistaStateChanged
name|bool
name|vistaStateChanged
decl_stmt|;
DECL|member|inHandleAeroStyleChange
name|bool
name|inHandleAeroStyleChange
decl_stmt|;
endif|#
directive|endif
DECL|member|minimumWidth
name|int
name|minimumWidth
decl_stmt|;
DECL|member|minimumHeight
name|int
name|minimumHeight
decl_stmt|;
DECL|member|maximumWidth
name|int
name|maximumWidth
decl_stmt|;
DECL|member|maximumHeight
name|int
name|maximumHeight
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|buttonDefaultText
specifier|static
name|QString
name|buttonDefaultText
parameter_list|(
name|int
name|wstyle
parameter_list|,
name|int
name|which
parameter_list|,
specifier|const
name|QWizardPrivate
modifier|*
name|wizardPrivate
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
name|Q_UNUSED
argument_list|(
name|wizardPrivate
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|bool
name|macStyle
init|=
operator|(
name|wstyle
operator|==
name|QWizard
operator|::
name|MacStyle
operator|)
decl_stmt|;
switch|switch
condition|(
name|which
condition|)
block|{
case|case
name|QWizard
operator|::
name|BackButton
case|:
return|return
name|macStyle
condition|?
name|QWizard
operator|::
name|tr
argument_list|(
literal|"Go Back"
argument_list|)
else|:
name|QWizard
operator|::
name|tr
argument_list|(
literal|"<&Back"
argument_list|)
return|;
case|case
name|QWizard
operator|::
name|NextButton
case|:
if|if
condition|(
name|macStyle
condition|)
return|return
name|QWizard
operator|::
name|tr
argument_list|(
literal|"Continue"
argument_list|)
return|;
else|else
return|return
name|wizardPrivate
operator|->
name|isVistaThemeEnabled
argument_list|()
condition|?
name|QWizard
operator|::
name|tr
argument_list|(
literal|"&Next"
argument_list|)
else|:
name|QWizard
operator|::
name|tr
argument_list|(
literal|"&Next>"
argument_list|)
return|;
case|case
name|QWizard
operator|::
name|CommitButton
case|:
return|return
name|QWizard
operator|::
name|tr
argument_list|(
literal|"Commit"
argument_list|)
return|;
case|case
name|QWizard
operator|::
name|FinishButton
case|:
return|return
name|macStyle
condition|?
name|QWizard
operator|::
name|tr
argument_list|(
literal|"Done"
argument_list|)
else|:
name|QWizard
operator|::
name|tr
argument_list|(
literal|"&Finish"
argument_list|)
return|;
case|case
name|QWizard
operator|::
name|CancelButton
case|:
return|return
name|QWizard
operator|::
name|tr
argument_list|(
literal|"Cancel"
argument_list|)
return|;
case|case
name|QWizard
operator|::
name|HelpButton
case|:
return|return
name|macStyle
condition|?
name|QWizard
operator|::
name|tr
argument_list|(
literal|"Help"
argument_list|)
else|:
name|QWizard
operator|::
name|tr
argument_list|(
literal|"&Help"
argument_list|)
return|;
default|default:
return|return
name|QString
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|init
name|void
name|QWizardPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|antiFlickerWidget
operator|=
operator|new
name|QWizardAntiFlickerWidget
argument_list|(
name|q
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|wizStyle
operator|=
name|QWizard
operator|::
name|WizardStyle
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_WizardStyle
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|wizStyle
operator|==
name|QWizard
operator|::
name|MacStyle
condition|)
block|{
name|opts
operator|=
operator|(
name|QWizard
operator|::
name|NoDefaultButton
operator||
name|QWizard
operator|::
name|NoCancelButton
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wizStyle
operator|==
name|QWizard
operator|::
name|ModernStyle
condition|)
block|{
name|opts
operator|=
name|QWizard
operator|::
name|HelpButtonOnRight
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
name|vistaHelper
operator|=
operator|new
name|QVistaHelper
argument_list|(
name|q
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// create these buttons right away; create the other buttons as necessary
name|ensureButton
argument_list|(
name|QWizard
operator|::
name|BackButton
argument_list|)
expr_stmt|;
name|ensureButton
argument_list|(
name|QWizard
operator|::
name|NextButton
argument_list|)
expr_stmt|;
name|ensureButton
argument_list|(
name|QWizard
operator|::
name|CommitButton
argument_list|)
expr_stmt|;
name|ensureButton
argument_list|(
name|QWizard
operator|::
name|FinishButton
argument_list|)
expr_stmt|;
name|pageFrame
operator|=
operator|new
name|QFrame
argument_list|(
name|antiFlickerWidget
argument_list|)
expr_stmt|;
name|pageFrame
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Preferred
argument_list|)
expr_stmt|;
name|pageVBoxLayout
operator|=
operator|new
name|QVBoxLayout
argument_list|(
name|pageFrame
argument_list|)
expr_stmt|;
name|pageVBoxLayout
operator|->
name|setSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pageVBoxLayout
operator|->
name|addSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QSpacerItem
modifier|*
name|spacerItem
init|=
operator|new
name|QSpacerItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QSizePolicy
operator|::
name|Ignored
argument_list|,
name|QSizePolicy
operator|::
name|MinimumExpanding
argument_list|)
decl_stmt|;
name|pageVBoxLayout
operator|->
name|addItem
argument_list|(
name|spacerItem
argument_list|)
expr_stmt|;
name|buttonLayout
operator|=
operator|new
name|QHBoxLayout
expr_stmt|;
name|mainLayout
operator|=
operator|new
name|QGridLayout
argument_list|(
name|antiFlickerWidget
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|setSizeConstraint
argument_list|(
name|QLayout
operator|::
name|SetNoConstraint
argument_list|)
expr_stmt|;
name|updateButtonLayout
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NFallbackDefaultProperties
condition|;
operator|++
name|i
control|)
name|defaultPropertyTable
operator|.
name|append
argument_list|(
name|QWizardDefaultProperty
argument_list|(
name|fallbackProperties
index|[
name|i
index|]
operator|.
name|className
argument_list|,
name|fallbackProperties
index|[
name|i
index|]
operator|.
name|property
argument_list|,
name|fallbackProperties
index|[
name|i
index|]
operator|.
name|changedSignal
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QWizardPrivate
operator|::
name|reset
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
operator|-
literal|1
condition|)
block|{
name|q
operator|->
name|currentPage
argument_list|()
operator|->
name|hide
argument_list|()
expr_stmt|;
name|cleanupPagesNotInHistory
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|history
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
name|q
operator|->
name|cleanupPage
argument_list|(
name|history
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|history
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialized
operator|.
name|clear
argument_list|()
expr_stmt|;
name|current
operator|=
operator|-
literal|1
expr_stmt|;
emit|emit
name|q
operator|->
name|currentIdChanged
argument_list|(
operator|-
literal|1
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|cleanupPagesNotInHistory
name|void
name|QWizardPrivate
operator|::
name|cleanupPagesNotInHistory
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
specifier|const
name|QSet
argument_list|<
name|int
argument_list|>
name|original
init|=
name|initialized
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|original
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|end
init|=
name|original
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|i
operator|!=
name|end
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|history
operator|.
name|contains
argument_list|(
operator|*
name|i
argument_list|)
condition|)
block|{
name|q
operator|->
name|cleanupPage
argument_list|(
operator|*
name|i
argument_list|)
expr_stmt|;
name|initialized
operator|.
name|remove
argument_list|(
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|addField
name|void
name|QWizardPrivate
operator|::
name|addField
parameter_list|(
specifier|const
name|QWizardField
modifier|&
name|field
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|QWizardField
name|myField
init|=
name|field
decl_stmt|;
name|myField
operator|.
name|resolve
argument_list|(
name|defaultPropertyTable
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldIndexMap
operator|.
name|contains
argument_list|(
name|myField
operator|.
name|name
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWizardPage::addField: Duplicate field '%s'"
argument_list|,
name|qPrintable
argument_list|(
name|myField
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|fieldIndexMap
operator|.
name|insert
argument_list|(
name|myField
operator|.
name|name
argument_list|,
name|fields
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|fields
operator|+=
name|myField
expr_stmt|;
if|if
condition|(
name|myField
operator|.
name|mandatory
operator|&&
operator|!
name|myField
operator|.
name|changedSignal
operator|.
name|isEmpty
argument_list|()
condition|)
name|QObject
operator|::
name|connect
argument_list|(
name|myField
operator|.
name|object
argument_list|,
name|myField
operator|.
name|changedSignal
argument_list|,
name|myField
operator|.
name|page
argument_list|,
name|SLOT
argument_list|(
name|_q_maybeEmitCompleteChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|myField
operator|.
name|object
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_handleFieldObjectDestroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeFieldAt
name|void
name|QWizardPrivate
operator|::
name|removeFieldAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
specifier|const
name|QWizardField
modifier|&
name|field
init|=
name|fields
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|fieldIndexMap
operator|.
name|remove
argument_list|(
name|field
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|mandatory
operator|&&
operator|!
name|field
operator|.
name|changedSignal
operator|.
name|isEmpty
argument_list|()
condition|)
name|QObject
operator|::
name|disconnect
argument_list|(
name|field
operator|.
name|object
argument_list|,
name|field
operator|.
name|changedSignal
argument_list|,
name|field
operator|.
name|page
argument_list|,
name|SLOT
argument_list|(
name|_q_maybeEmitCompleteChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|field
operator|.
name|object
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_handleFieldObjectDestroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|switchToPage
name|void
name|QWizardPrivate
operator|::
name|switchToPage
parameter_list|(
name|int
name|newId
parameter_list|,
name|Direction
name|direction
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|disableUpdates
argument_list|()
expr_stmt|;
name|int
name|oldId
init|=
name|current
decl_stmt|;
if|if
condition|(
name|QWizardPage
modifier|*
name|oldPage
init|=
name|q
operator|->
name|currentPage
argument_list|()
condition|)
block|{
name|oldPage
operator|->
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|direction
operator|==
name|Backward
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|opts
operator|&
name|QWizard
operator|::
name|IndependentPages
operator|)
condition|)
block|{
name|q
operator|->
name|cleanupPage
argument_list|(
name|oldId
argument_list|)
expr_stmt|;
name|initialized
operator|.
name|remove
argument_list|(
name|oldId
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|history
operator|.
name|last
argument_list|()
operator|==
name|oldId
argument_list|)
expr_stmt|;
name|history
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|history
operator|.
name|last
argument_list|()
operator|==
name|newId
argument_list|)
expr_stmt|;
block|}
block|}
name|current
operator|=
name|newId
expr_stmt|;
name|QWizardPage
modifier|*
name|newPage
init|=
name|q
operator|->
name|currentPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|newPage
condition|)
block|{
if|if
condition|(
name|direction
operator|==
name|Forward
condition|)
block|{
if|if
condition|(
operator|!
name|initialized
operator|.
name|contains
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|initialized
operator|.
name|insert
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|q
operator|->
name|initializePage
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
name|history
operator|.
name|append
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
name|newPage
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
name|canContinue
operator|=
operator|(
name|q
operator|->
name|nextId
argument_list|()
operator|!=
operator|-
literal|1
operator|)
expr_stmt|;
name|canFinish
operator|=
operator|(
name|newPage
operator|&&
name|newPage
operator|->
name|isFinalPage
argument_list|()
operator|)
expr_stmt|;
name|_q_updateButtonStates
argument_list|()
expr_stmt|;
name|updateButtonTexts
argument_list|()
expr_stmt|;
specifier|const
name|QWizard
operator|::
name|WizardButton
name|nextOrCommit
init|=
name|newPage
operator|&&
name|newPage
operator|->
name|isCommitPage
argument_list|()
condition|?
name|QWizard
operator|::
name|CommitButton
else|:
name|QWizard
operator|::
name|NextButton
decl_stmt|;
name|QAbstractButton
modifier|*
name|nextOrFinishButton
init|=
name|btns
index|[
name|canContinue
condition|?
name|nextOrCommit
else|:
name|QWizard
operator|::
name|FinishButton
index|]
decl_stmt|;
name|QWidget
modifier|*
name|candidate
init|=
literal|0
decl_stmt|;
comment|/*         If there is no default button and the Next or Finish button         is enabled, give focus directly to it as a convenience to the         user. This is the normal case on Mac OS X.          Otherwise, give the focus to the new page's first child that         can handle it. If there is no such child, give the focus to         Next or Finish.     */
if|if
condition|(
operator|(
name|opts
operator|&
name|QWizard
operator|::
name|NoDefaultButton
operator|)
operator|&&
name|nextOrFinishButton
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|candidate
operator|=
name|nextOrFinishButton
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newPage
condition|)
block|{
name|candidate
operator|=
name|iWantTheFocus
argument_list|(
name|newPage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|candidate
condition|)
name|candidate
operator|=
name|nextOrFinishButton
expr_stmt|;
name|candidate
operator|->
name|setFocus
argument_list|()
expr_stmt|;
if|if
condition|(
name|wizStyle
operator|==
name|QWizard
operator|::
name|MacStyle
condition|)
name|q
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
name|enableUpdates
argument_list|()
expr_stmt|;
name|updateLayout
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|currentIdChanged
argument_list|(
name|current
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|// keep in sync with QWizard::WizardButton
end_comment
begin_decl_stmt
DECL|variable|buttonSlots
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|buttonSlots
index|[
name|QWizard
operator|::
name|NStandardButtons
index|]
init|=
block|{
name|SLOT
argument_list|(
name|back
argument_list|()
argument_list|)
block|,
name|SLOT
argument_list|(
name|next
argument_list|()
argument_list|)
block|,
name|SLOT
argument_list|(
name|next
argument_list|()
argument_list|)
block|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
block|,
name|SLOT
argument_list|(
name|reject
argument_list|()
argument_list|)
block|,
name|SIGNAL
argument_list|(
argument|helpRequested()
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|layoutInfoForCurrentPage
name|QWizardLayoutInfo
name|QWizardPrivate
operator|::
name|layoutInfoForCurrentPage
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|q
operator|->
name|style
argument_list|()
decl_stmt|;
name|QWizardLayoutInfo
name|info
decl_stmt|;
specifier|const
name|int
name|layoutHorizontalSpacing
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_LayoutHorizontalSpacing
argument_list|)
decl_stmt|;
name|info
operator|.
name|topLevelMarginLeft
operator|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_LayoutLeftMargin
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|info
operator|.
name|topLevelMarginRight
operator|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_LayoutRightMargin
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|info
operator|.
name|topLevelMarginTop
operator|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_LayoutTopMargin
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|info
operator|.
name|topLevelMarginBottom
operator|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_LayoutBottomMargin
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|info
operator|.
name|childMarginLeft
operator|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_LayoutLeftMargin
argument_list|,
literal|0
argument_list|,
name|titleLabel
argument_list|)
expr_stmt|;
name|info
operator|.
name|childMarginRight
operator|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_LayoutRightMargin
argument_list|,
literal|0
argument_list|,
name|titleLabel
argument_list|)
expr_stmt|;
name|info
operator|.
name|childMarginTop
operator|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_LayoutTopMargin
argument_list|,
literal|0
argument_list|,
name|titleLabel
argument_list|)
expr_stmt|;
name|info
operator|.
name|childMarginBottom
operator|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_LayoutBottomMargin
argument_list|,
literal|0
argument_list|,
name|titleLabel
argument_list|)
expr_stmt|;
name|info
operator|.
name|hspacing
operator|=
operator|(
name|layoutHorizontalSpacing
operator|==
operator|-
literal|1
operator|)
condition|?
name|style
operator|->
name|layoutSpacing
argument_list|(
name|QSizePolicy
operator|::
name|DefaultType
argument_list|,
name|QSizePolicy
operator|::
name|DefaultType
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
else|:
name|layoutHorizontalSpacing
expr_stmt|;
name|info
operator|.
name|vspacing
operator|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_LayoutVerticalSpacing
argument_list|)
expr_stmt|;
name|info
operator|.
name|buttonSpacing
operator|=
operator|(
name|layoutHorizontalSpacing
operator|==
operator|-
literal|1
operator|)
condition|?
name|style
operator|->
name|layoutSpacing
argument_list|(
name|QSizePolicy
operator|::
name|PushButton
argument_list|,
name|QSizePolicy
operator|::
name|PushButton
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
else|:
name|layoutHorizontalSpacing
expr_stmt|;
if|if
condition|(
name|wizStyle
operator|==
name|QWizard
operator|::
name|MacStyle
condition|)
name|info
operator|.
name|buttonSpacing
operator|=
literal|12
expr_stmt|;
name|info
operator|.
name|wizStyle
operator|=
name|wizStyle
expr_stmt|;
if|if
condition|(
operator|(
name|info
operator|.
name|wizStyle
operator|==
name|QWizard
operator|::
name|AeroStyle
operator|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
operator|&&
operator|(
name|QVistaHelper
operator|::
name|vistaState
argument_list|()
operator|==
name|QVistaHelper
operator|::
name|Classic
operator|||
name|vistaDisabled
argument_list|()
operator|)
endif|#
directive|endif
condition|)
name|info
operator|.
name|wizStyle
operator|=
name|QWizard
operator|::
name|ModernStyle
expr_stmt|;
name|QString
name|titleText
decl_stmt|;
name|QString
name|subTitleText
decl_stmt|;
name|QPixmap
name|backgroundPixmap
decl_stmt|;
name|QPixmap
name|watermarkPixmap
decl_stmt|;
if|if
condition|(
name|QWizardPage
modifier|*
name|page
init|=
name|q
operator|->
name|currentPage
argument_list|()
condition|)
block|{
name|titleText
operator|=
name|page
operator|->
name|title
argument_list|()
expr_stmt|;
name|subTitleText
operator|=
name|page
operator|->
name|subTitle
argument_list|()
expr_stmt|;
name|backgroundPixmap
operator|=
name|page
operator|->
name|pixmap
argument_list|(
name|QWizard
operator|::
name|BackgroundPixmap
argument_list|)
expr_stmt|;
name|watermarkPixmap
operator|=
name|page
operator|->
name|pixmap
argument_list|(
name|QWizard
operator|::
name|WatermarkPixmap
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|header
operator|=
operator|(
name|info
operator|.
name|wizStyle
operator|==
name|QWizard
operator|::
name|ClassicStyle
operator|||
name|info
operator|.
name|wizStyle
operator|==
name|QWizard
operator|::
name|ModernStyle
operator|)
operator|&&
operator|!
operator|(
name|opts
operator|&
name|QWizard
operator|::
name|IgnoreSubTitles
operator|)
operator|&&
operator|!
name|subTitleText
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|info
operator|.
name|sideWidget
operator|=
name|sideWidget
expr_stmt|;
name|info
operator|.
name|watermark
operator|=
operator|(
name|info
operator|.
name|wizStyle
operator|!=
name|QWizard
operator|::
name|MacStyle
operator|)
operator|&&
operator|(
name|info
operator|.
name|wizStyle
operator|!=
name|QWizard
operator|::
name|AeroStyle
operator|)
operator|&&
operator|!
name|watermarkPixmap
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|info
operator|.
name|title
operator|=
operator|!
name|info
operator|.
name|header
operator|&&
operator|!
name|titleText
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|info
operator|.
name|subTitle
operator|=
operator|!
operator|(
name|opts
operator|&
name|QWizard
operator|::
name|IgnoreSubTitles
operator|)
operator|&&
operator|!
name|info
operator|.
name|header
operator|&&
operator|!
name|subTitleText
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|info
operator|.
name|extension
operator|=
operator|(
name|info
operator|.
name|watermark
operator|||
name|info
operator|.
name|sideWidget
operator|)
operator|&&
operator|(
name|opts
operator|&
name|QWizard
operator|::
name|ExtendedWatermarkPixmap
operator|)
expr_stmt|;
return|return
name|info
return|;
block|}
end_function
begin_function
DECL|function|recreateLayout
name|void
name|QWizardPrivate
operator|::
name|recreateLayout
parameter_list|(
specifier|const
name|QWizardLayoutInfo
modifier|&
name|info
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
comment|/*         Start by undoing the main layout.     */
for|for
control|(
name|int
name|i
init|=
name|mainLayout
operator|->
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QLayoutItem
modifier|*
name|item
init|=
name|mainLayout
operator|->
name|takeAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|->
name|layout
argument_list|()
condition|)
block|{
name|item
operator|->
name|layout
argument_list|()
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|delete
name|item
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|mainLayout
operator|->
name|columnCount
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
name|mainLayout
operator|->
name|setColumnMinimumWidth
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|mainLayout
operator|->
name|rowCount
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
name|mainLayout
operator|->
name|setRowMinimumHeight
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|/*         Now, recreate it.     */
name|bool
name|mac
init|=
operator|(
name|info
operator|.
name|wizStyle
operator|==
name|QWizard
operator|::
name|MacStyle
operator|)
decl_stmt|;
name|bool
name|classic
init|=
operator|(
name|info
operator|.
name|wizStyle
operator|==
name|QWizard
operator|::
name|ClassicStyle
operator|)
decl_stmt|;
name|bool
name|modern
init|=
operator|(
name|info
operator|.
name|wizStyle
operator|==
name|QWizard
operator|::
name|ModernStyle
operator|)
decl_stmt|;
name|bool
name|aero
init|=
operator|(
name|info
operator|.
name|wizStyle
operator|==
name|QWizard
operator|::
name|AeroStyle
operator|)
decl_stmt|;
name|int
name|deltaMarginLeft
init|=
name|info
operator|.
name|topLevelMarginLeft
operator|-
name|info
operator|.
name|childMarginLeft
decl_stmt|;
name|int
name|deltaMarginRight
init|=
name|info
operator|.
name|topLevelMarginRight
operator|-
name|info
operator|.
name|childMarginRight
decl_stmt|;
name|int
name|deltaMarginTop
init|=
name|info
operator|.
name|topLevelMarginTop
operator|-
name|info
operator|.
name|childMarginTop
decl_stmt|;
name|int
name|deltaMarginBottom
init|=
name|info
operator|.
name|topLevelMarginBottom
operator|-
name|info
operator|.
name|childMarginBottom
decl_stmt|;
name|int
name|deltaVSpacing
init|=
name|info
operator|.
name|topLevelMarginBottom
operator|-
name|info
operator|.
name|vspacing
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|int
name|numColumns
decl_stmt|;
if|if
condition|(
name|mac
condition|)
block|{
name|numColumns
operator|=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|watermark
operator|||
name|info
operator|.
name|sideWidget
condition|)
block|{
name|numColumns
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|numColumns
operator|=
literal|1
expr_stmt|;
block|}
name|int
name|pageColumn
init|=
name|qMin
argument_list|(
literal|1
argument_list|,
name|numColumns
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|mac
condition|)
block|{
name|mainLayout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|setSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|buttonLayout
operator|->
name|setContentsMargins
argument_list|(
name|MacLayoutLeftMargin
argument_list|,
name|MacButtonTopMargin
argument_list|,
name|MacLayoutRightMargin
argument_list|,
name|MacLayoutBottomMargin
argument_list|)
expr_stmt|;
name|pageVBoxLayout
operator|->
name|setMargin
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|modern
condition|)
block|{
name|mainLayout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|setSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pageVBoxLayout
operator|->
name|setContentsMargins
argument_list|(
name|deltaMarginLeft
argument_list|,
name|deltaMarginTop
argument_list|,
name|deltaMarginRight
argument_list|,
name|deltaMarginBottom
argument_list|)
expr_stmt|;
name|buttonLayout
operator|->
name|setContentsMargins
argument_list|(
name|info
operator|.
name|topLevelMarginLeft
argument_list|,
name|info
operator|.
name|topLevelMarginTop
argument_list|,
name|info
operator|.
name|topLevelMarginRight
argument_list|,
name|info
operator|.
name|topLevelMarginBottom
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mainLayout
operator|->
name|setContentsMargins
argument_list|(
name|info
operator|.
name|topLevelMarginLeft
argument_list|,
name|info
operator|.
name|topLevelMarginTop
argument_list|,
name|info
operator|.
name|topLevelMarginRight
argument_list|,
name|info
operator|.
name|topLevelMarginBottom
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|setHorizontalSpacing
argument_list|(
name|info
operator|.
name|hspacing
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|setVerticalSpacing
argument_list|(
name|info
operator|.
name|vspacing
argument_list|)
expr_stmt|;
name|pageVBoxLayout
operator|->
name|setContentsMargins
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|buttonLayout
operator|->
name|setContentsMargins
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|buttonLayout
operator|->
name|setSpacing
argument_list|(
name|info
operator|.
name|buttonSpacing
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|header
condition|)
block|{
if|if
condition|(
operator|!
name|headerWidget
condition|)
name|headerWidget
operator|=
operator|new
name|QWizardHeader
argument_list|(
name|antiFlickerWidget
argument_list|)
expr_stmt|;
name|headerWidget
operator|->
name|setAutoFillBackground
argument_list|(
name|modern
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|headerWidget
argument_list|,
name|row
operator|++
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|numColumns
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headerWidget
condition|)
name|headerWidget
operator|->
name|setVisible
argument_list|(
name|info
operator|.
name|header
argument_list|)
expr_stmt|;
name|int
name|watermarkStartRow
init|=
name|row
decl_stmt|;
if|if
condition|(
name|mac
condition|)
name|mainLayout
operator|->
name|setRowMinimumHeight
argument_list|(
name|row
operator|++
argument_list|,
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|title
condition|)
block|{
if|if
condition|(
operator|!
name|titleLabel
condition|)
block|{
name|titleLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|antiFlickerWidget
argument_list|)
expr_stmt|;
name|titleLabel
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|titleLabel
operator|->
name|setWordWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|QFont
name|titleFont
init|=
name|q
operator|->
name|font
argument_list|()
decl_stmt|;
name|titleFont
operator|.
name|setPointSize
argument_list|(
name|titleFont
operator|.
name|pointSize
argument_list|()
operator|+
operator|(
name|mac
condition|?
literal|3
else|:
literal|4
operator|)
argument_list|)
expr_stmt|;
name|titleFont
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|titleLabel
operator|->
name|setPalette
argument_list|(
name|QPalette
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|aero
condition|)
block|{
comment|// ### hardcoded for now:
name|titleFont
operator|=
name|QFont
argument_list|(
name|QLatin1String
argument_list|(
literal|"Segoe UI"
argument_list|)
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QPalette
name|pal
argument_list|(
name|titleLabel
operator|->
name|palette
argument_list|()
argument_list|)
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
literal|"#003399"
argument_list|)
expr_stmt|;
name|titleLabel
operator|->
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
block|}
name|titleLabel
operator|->
name|setFont
argument_list|(
name|titleFont
argument_list|)
expr_stmt|;
specifier|const
name|int
name|aeroTitleIndent
init|=
literal|25
decl_stmt|;
comment|// ### hardcoded for now - should be calculated somehow
if|if
condition|(
name|aero
condition|)
name|titleLabel
operator|->
name|setIndent
argument_list|(
name|aeroTitleIndent
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|mac
condition|)
name|titleLabel
operator|->
name|setIndent
argument_list|(
literal|2
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|classic
condition|)
name|titleLabel
operator|->
name|setIndent
argument_list|(
name|info
operator|.
name|childMarginLeft
argument_list|)
expr_stmt|;
else|else
name|titleLabel
operator|->
name|setIndent
argument_list|(
name|info
operator|.
name|topLevelMarginLeft
argument_list|)
expr_stmt|;
if|if
condition|(
name|modern
condition|)
block|{
if|if
condition|(
operator|!
name|placeholderWidget1
condition|)
block|{
name|placeholderWidget1
operator|=
operator|new
name|QWidget
argument_list|(
name|antiFlickerWidget
argument_list|)
expr_stmt|;
name|placeholderWidget1
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
block|}
name|placeholderWidget1
operator|->
name|setFixedHeight
argument_list|(
name|info
operator|.
name|topLevelMarginLeft
operator|+
literal|2
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|placeholderWidget1
argument_list|,
name|row
operator|++
argument_list|,
name|pageColumn
argument_list|)
expr_stmt|;
block|}
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|titleLabel
argument_list|,
name|row
operator|++
argument_list|,
name|pageColumn
argument_list|)
expr_stmt|;
if|if
condition|(
name|modern
condition|)
block|{
if|if
condition|(
operator|!
name|placeholderWidget2
condition|)
block|{
name|placeholderWidget2
operator|=
operator|new
name|QWidget
argument_list|(
name|antiFlickerWidget
argument_list|)
expr_stmt|;
name|placeholderWidget2
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
block|}
name|placeholderWidget2
operator|->
name|setFixedHeight
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|placeholderWidget2
argument_list|,
name|row
operator|++
argument_list|,
name|pageColumn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mac
condition|)
name|mainLayout
operator|->
name|setRowMinimumHeight
argument_list|(
name|row
operator|++
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|placeholderWidget1
condition|)
name|placeholderWidget1
operator|->
name|setVisible
argument_list|(
name|info
operator|.
name|title
operator|&&
name|modern
argument_list|)
expr_stmt|;
if|if
condition|(
name|placeholderWidget2
condition|)
name|placeholderWidget2
operator|->
name|setVisible
argument_list|(
name|info
operator|.
name|title
operator|&&
name|modern
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|subTitle
condition|)
block|{
if|if
condition|(
operator|!
name|subTitleLabel
condition|)
block|{
name|subTitleLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|pageFrame
argument_list|)
expr_stmt|;
name|subTitleLabel
operator|->
name|setWordWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|subTitleLabel
operator|->
name|setContentsMargins
argument_list|(
name|info
operator|.
name|childMarginLeft
argument_list|,
literal|0
argument_list|,
name|info
operator|.
name|childMarginRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pageVBoxLayout
operator|->
name|insertWidget
argument_list|(
literal|1
argument_list|,
name|subTitleLabel
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ### try to replace with margin.
name|changeSpacerSize
argument_list|(
name|pageVBoxLayout
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|info
operator|.
name|subTitle
condition|?
name|info
operator|.
name|childMarginLeft
else|:
literal|0
argument_list|)
expr_stmt|;
name|int
name|hMargin
init|=
name|mac
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|vMargin
init|=
name|hMargin
decl_stmt|;
name|pageFrame
operator|->
name|setFrameStyle
argument_list|(
name|mac
condition|?
operator|(
name|QFrame
operator|::
name|Box
operator||
name|QFrame
operator|::
name|Raised
operator|)
else|:
name|QFrame
operator|::
name|NoFrame
argument_list|)
expr_stmt|;
name|pageFrame
operator|->
name|setLineWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pageFrame
operator|->
name|setMidLineWidth
argument_list|(
name|hMargin
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|header
condition|)
block|{
if|if
condition|(
name|modern
condition|)
block|{
name|hMargin
operator|=
name|info
operator|.
name|topLevelMarginLeft
expr_stmt|;
name|vMargin
operator|=
name|deltaMarginBottom
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|classic
condition|)
block|{
name|hMargin
operator|=
name|deltaMarginLeft
operator|+
name|ClassicHMargin
expr_stmt|;
name|vMargin
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|aero
condition|)
block|{
name|int
name|leftMargin
init|=
literal|18
decl_stmt|;
comment|// ### hardcoded for now - should be calculated somehow
name|int
name|topMargin
init|=
name|vMargin
decl_stmt|;
name|int
name|rightMargin
init|=
name|hMargin
decl_stmt|;
comment|// ### for now
name|int
name|bottomMargin
init|=
name|vMargin
decl_stmt|;
name|pageFrame
operator|->
name|setContentsMargins
argument_list|(
name|leftMargin
argument_list|,
name|topMargin
argument_list|,
name|rightMargin
argument_list|,
name|bottomMargin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pageFrame
operator|->
name|setContentsMargins
argument_list|(
name|hMargin
argument_list|,
name|vMargin
argument_list|,
name|hMargin
argument_list|,
name|vMargin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|info
operator|.
name|watermark
operator|||
name|info
operator|.
name|sideWidget
operator|)
operator|&&
operator|!
name|watermarkLabel
condition|)
block|{
name|watermarkLabel
operator|=
operator|new
name|QWatermarkLabel
argument_list|(
name|antiFlickerWidget
argument_list|,
name|sideWidget
argument_list|)
expr_stmt|;
name|watermarkLabel
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|watermarkLabel
operator|->
name|setMinimumHeight
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|watermarkLabel
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
expr_stmt|;
name|watermarkLabel
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
block|}
comment|//bool wasSemiTransparent = pageFrame->testAttribute(Qt::WA_SetPalette);
specifier|const
name|bool
name|wasSemiTransparent
init|=
name|pageFrame
operator|->
name|palette
argument_list|()
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
operator|.
name|color
argument_list|()
operator|.
name|alpha
argument_list|()
operator|<
literal|255
operator|||
name|pageFrame
operator|->
name|palette
argument_list|()
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
operator|.
name|color
argument_list|()
operator|.
name|alpha
argument_list|()
operator|<
literal|255
decl_stmt|;
if|if
condition|(
name|mac
condition|)
block|{
if|if
condition|(
operator|!
name|wasSemiTransparent
condition|)
block|{
name|QPalette
name|pal
init|=
name|pageFrame
operator|->
name|palette
argument_list|()
decl_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|QColor
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|,
literal|153
argument_list|)
argument_list|)
expr_stmt|;
comment|// ### The next line is required to ensure visual semitransparency when
comment|// ### switching from ModernStyle to MacStyle. See TAG1 below.
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|QColor
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|,
literal|153
argument_list|)
argument_list|)
expr_stmt|;
name|pageFrame
operator|->
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|pageFrame
operator|->
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|antiFlickerWidget
operator|->
name|setAutoFillBackground
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|wasSemiTransparent
condition|)
name|pageFrame
operator|->
name|setPalette
argument_list|(
name|QPalette
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|baseBackground
init|=
operator|(
name|modern
operator|&&
operator|!
name|info
operator|.
name|header
operator|)
decl_stmt|;
comment|// ### TAG1
name|pageFrame
operator|->
name|setBackgroundRole
argument_list|(
name|baseBackground
condition|?
name|QPalette
operator|::
name|Base
else|:
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
if|if
condition|(
name|titleLabel
condition|)
name|titleLabel
operator|->
name|setAutoFillBackground
argument_list|(
name|baseBackground
argument_list|)
expr_stmt|;
name|pageFrame
operator|->
name|setAutoFillBackground
argument_list|(
name|baseBackground
argument_list|)
expr_stmt|;
if|if
condition|(
name|watermarkLabel
condition|)
name|watermarkLabel
operator|->
name|setAutoFillBackground
argument_list|(
name|baseBackground
argument_list|)
expr_stmt|;
if|if
condition|(
name|placeholderWidget1
condition|)
name|placeholderWidget1
operator|->
name|setAutoFillBackground
argument_list|(
name|baseBackground
argument_list|)
expr_stmt|;
if|if
condition|(
name|placeholderWidget2
condition|)
name|placeholderWidget2
operator|->
name|setAutoFillBackground
argument_list|(
name|baseBackground
argument_list|)
expr_stmt|;
if|if
condition|(
name|aero
condition|)
block|{
name|QPalette
name|pal
init|=
name|pageFrame
operator|->
name|palette
argument_list|()
decl_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|QColor
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|pageFrame
operator|->
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|pageFrame
operator|->
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pal
operator|=
name|antiFlickerWidget
operator|->
name|palette
argument_list|()
expr_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|QColor
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|antiFlickerWidget
operator|->
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|antiFlickerWidget
operator|->
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|pageFrame
argument_list|,
name|row
operator|++
argument_list|,
name|pageColumn
argument_list|)
expr_stmt|;
name|int
name|watermarkEndRow
init|=
name|row
decl_stmt|;
if|if
condition|(
name|classic
condition|)
name|mainLayout
operator|->
name|setRowMinimumHeight
argument_list|(
name|row
operator|++
argument_list|,
name|deltaVSpacing
argument_list|)
expr_stmt|;
if|if
condition|(
name|aero
condition|)
block|{
name|buttonLayout
operator|->
name|setContentsMargins
argument_list|(
literal|9
argument_list|,
literal|9
argument_list|,
literal|9
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|setContentsMargins
argument_list|(
literal|0
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|int
name|buttonStartColumn
init|=
name|info
operator|.
name|extension
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|buttonNumColumns
init|=
name|info
operator|.
name|extension
condition|?
literal|1
else|:
name|numColumns
decl_stmt|;
if|if
condition|(
name|classic
operator|||
name|modern
condition|)
block|{
if|if
condition|(
operator|!
name|bottomRuler
condition|)
name|bottomRuler
operator|=
operator|new
name|QWizardRuler
argument_list|(
name|antiFlickerWidget
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|bottomRuler
argument_list|,
name|row
operator|++
argument_list|,
name|buttonStartColumn
argument_list|,
literal|1
argument_list|,
name|buttonNumColumns
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classic
condition|)
name|mainLayout
operator|->
name|setRowMinimumHeight
argument_list|(
name|row
operator|++
argument_list|,
name|deltaVSpacing
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addLayout
argument_list|(
name|buttonLayout
argument_list|,
name|row
operator|++
argument_list|,
name|buttonStartColumn
argument_list|,
literal|1
argument_list|,
name|buttonNumColumns
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|watermark
operator|||
name|info
operator|.
name|sideWidget
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|extension
condition|)
name|watermarkEndRow
operator|=
name|row
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|watermarkLabel
argument_list|,
name|watermarkStartRow
argument_list|,
literal|0
argument_list|,
name|watermarkEndRow
operator|-
name|watermarkStartRow
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|mainLayout
operator|->
name|setColumnMinimumWidth
argument_list|(
literal|0
argument_list|,
name|mac
operator|&&
operator|!
name|info
operator|.
name|watermark
condition|?
literal|181
else|:
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|mac
condition|)
name|mainLayout
operator|->
name|setColumnMinimumWidth
argument_list|(
literal|2
argument_list|,
literal|21
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerWidget
condition|)
name|headerWidget
operator|->
name|setVisible
argument_list|(
name|info
operator|.
name|header
argument_list|)
expr_stmt|;
if|if
condition|(
name|titleLabel
condition|)
name|titleLabel
operator|->
name|setVisible
argument_list|(
name|info
operator|.
name|title
argument_list|)
expr_stmt|;
if|if
condition|(
name|subTitleLabel
condition|)
name|subTitleLabel
operator|->
name|setVisible
argument_list|(
name|info
operator|.
name|subTitle
argument_list|)
expr_stmt|;
if|if
condition|(
name|bottomRuler
condition|)
name|bottomRuler
operator|->
name|setVisible
argument_list|(
name|classic
operator|||
name|modern
argument_list|)
expr_stmt|;
if|if
condition|(
name|watermarkLabel
condition|)
name|watermarkLabel
operator|->
name|setVisible
argument_list|(
name|info
operator|.
name|watermark
operator|||
name|info
operator|.
name|sideWidget
argument_list|)
expr_stmt|;
name|layoutInfo
operator|=
name|info
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateLayout
name|void
name|QWizardPrivate
operator|::
name|updateLayout
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|disableUpdates
argument_list|()
expr_stmt|;
name|QWizardLayoutInfo
name|info
init|=
name|layoutInfoForCurrentPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|layoutInfo
operator|!=
name|info
condition|)
name|recreateLayout
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|QWizardPage
modifier|*
name|page
init|=
name|q
operator|->
name|currentPage
argument_list|()
decl_stmt|;
comment|// If the page can expand vertically, let it stretch "infinitely" more
comment|// than the QSpacerItem at the bottom. Otherwise, let the QSpacerItem
comment|// stretch "infinitely" more than the page. Change the bottom item's
comment|// policy accordingly. The case that the page has no layout is basically
comment|// for Designer, only.
if|if
condition|(
name|page
condition|)
block|{
name|bool
name|expandPage
init|=
operator|!
name|page
operator|->
name|layout
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|expandPage
condition|)
block|{
specifier|const
name|QLayoutItem
modifier|*
name|pageItem
init|=
name|pageVBoxLayout
operator|->
name|itemAt
argument_list|(
name|pageVBoxLayout
operator|->
name|indexOf
argument_list|(
name|page
argument_list|)
argument_list|)
decl_stmt|;
name|expandPage
operator|=
name|pageItem
operator|->
name|expandingDirections
argument_list|()
operator|&
name|Qt
operator|::
name|Vertical
expr_stmt|;
block|}
name|QSpacerItem
modifier|*
name|bottomSpacer
init|=
name|pageVBoxLayout
operator|->
name|itemAt
argument_list|(
name|pageVBoxLayout
operator|->
name|count
argument_list|()
operator|-
literal|1
argument_list|)
operator|->
name|spacerItem
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|bottomSpacer
argument_list|)
expr_stmt|;
name|bottomSpacer
operator|->
name|changeSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QSizePolicy
operator|::
name|Ignored
argument_list|,
name|expandPage
condition|?
name|QSizePolicy
operator|::
name|Ignored
else|:
name|QSizePolicy
operator|::
name|MinimumExpanding
argument_list|)
expr_stmt|;
name|pageVBoxLayout
operator|->
name|invalidate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|header
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|headerWidget
operator|->
name|setup
argument_list|(
name|info
argument_list|,
name|page
operator|->
name|title
argument_list|()
argument_list|,
name|page
operator|->
name|subTitle
argument_list|()
argument_list|,
name|page
operator|->
name|pixmap
argument_list|(
name|QWizard
operator|::
name|LogoPixmap
argument_list|)
argument_list|,
name|page
operator|->
name|pixmap
argument_list|(
name|QWizard
operator|::
name|BannerPixmap
argument_list|)
argument_list|,
name|titleFmt
argument_list|,
name|subTitleFmt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|watermark
operator|||
name|info
operator|.
name|sideWidget
condition|)
block|{
name|QPixmap
name|pix
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|watermark
condition|)
block|{
if|if
condition|(
name|page
condition|)
name|pix
operator|=
name|page
operator|->
name|pixmap
argument_list|(
name|QWizard
operator|::
name|WatermarkPixmap
argument_list|)
expr_stmt|;
else|else
name|pix
operator|=
name|q
operator|->
name|pixmap
argument_list|(
name|QWizard
operator|::
name|WatermarkPixmap
argument_list|)
expr_stmt|;
block|}
name|watermarkLabel
operator|->
name|setPixmap
argument_list|(
name|pix
argument_list|)
expr_stmt|;
comment|// in case there is no watermark and we show the side widget we need to clear the watermark
block|}
if|if
condition|(
name|info
operator|.
name|title
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|titleLabel
operator|->
name|setTextFormat
argument_list|(
name|titleFmt
argument_list|)
expr_stmt|;
name|titleLabel
operator|->
name|setText
argument_list|(
name|page
operator|->
name|title
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|subTitle
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|subTitleLabel
operator|->
name|setTextFormat
argument_list|(
name|subTitleFmt
argument_list|)
expr_stmt|;
name|subTitleLabel
operator|->
name|setText
argument_list|(
name|page
operator|->
name|subTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|enableUpdates
argument_list|()
expr_stmt|;
name|updateMinMaxSizes
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateMinMaxSizes
name|void
name|QWizardPrivate
operator|::
name|updateMinMaxSizes
parameter_list|(
specifier|const
name|QWizardLayoutInfo
modifier|&
name|info
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|int
name|extraHeight
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
if|if
condition|(
name|isVistaThemeEnabled
argument_list|()
condition|)
name|extraHeight
operator|=
name|vistaHelper
operator|->
name|titleBarSize
argument_list|()
operator|+
name|vistaHelper
operator|->
name|topOffset
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QSize
name|minimumSize
init|=
name|mainLayout
operator|->
name|totalMinimumSize
argument_list|()
operator|+
name|QSize
argument_list|(
literal|0
argument_list|,
name|extraHeight
argument_list|)
decl_stmt|;
name|QSize
name|maximumSize
init|=
name|mainLayout
operator|->
name|totalMaximumSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|header
operator|&&
name|headerWidget
operator|->
name|maximumWidth
argument_list|()
operator|!=
name|QWIDGETSIZE_MAX
condition|)
block|{
name|minimumSize
operator|.
name|setWidth
argument_list|(
name|headerWidget
operator|->
name|maximumWidth
argument_list|()
argument_list|)
expr_stmt|;
name|maximumSize
operator|.
name|setWidth
argument_list|(
name|headerWidget
operator|->
name|maximumWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|watermark
operator|&&
operator|!
name|info
operator|.
name|sideWidget
condition|)
block|{
name|minimumSize
operator|.
name|setHeight
argument_list|(
name|mainLayout
operator|->
name|totalSizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|maximumSize
operator|.
name|setHeight
argument_list|(
name|mainLayout
operator|->
name|totalSizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|minimumWidth
argument_list|()
operator|==
name|minimumWidth
condition|)
block|{
name|minimumWidth
operator|=
name|minimumSize
operator|.
name|width
argument_list|()
expr_stmt|;
name|q
operator|->
name|setMinimumWidth
argument_list|(
name|minimumWidth
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|minimumHeight
argument_list|()
operator|==
name|minimumHeight
condition|)
block|{
name|minimumHeight
operator|=
name|minimumSize
operator|.
name|height
argument_list|()
expr_stmt|;
name|q
operator|->
name|setMinimumHeight
argument_list|(
name|minimumHeight
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|maximumWidth
argument_list|()
operator|==
name|maximumWidth
condition|)
block|{
name|maximumWidth
operator|=
name|maximumSize
operator|.
name|width
argument_list|()
expr_stmt|;
name|q
operator|->
name|setMaximumWidth
argument_list|(
name|maximumWidth
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|maximumHeight
argument_list|()
operator|==
name|maximumHeight
condition|)
block|{
name|maximumHeight
operator|=
name|maximumSize
operator|.
name|height
argument_list|()
expr_stmt|;
name|q
operator|->
name|setMaximumHeight
argument_list|(
name|maximumHeight
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateCurrentPage
name|void
name|QWizardPrivate
operator|::
name|updateCurrentPage
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|currentPage
argument_list|()
condition|)
block|{
name|canContinue
operator|=
operator|(
name|q
operator|->
name|nextId
argument_list|()
operator|!=
operator|-
literal|1
operator|)
expr_stmt|;
name|canFinish
operator|=
name|q
operator|->
name|currentPage
argument_list|()
operator|->
name|isFinalPage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|canContinue
operator|=
literal|false
expr_stmt|;
name|canFinish
operator|=
literal|false
expr_stmt|;
block|}
name|_q_updateButtonStates
argument_list|()
expr_stmt|;
name|updateButtonTexts
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureButton
name|bool
name|QWizardPrivate
operator|::
name|ensureButton
parameter_list|(
name|QWizard
operator|::
name|WizardButton
name|which
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
name|uint
argument_list|(
name|which
argument_list|)
operator|>=
name|QWizard
operator|::
name|NButtons
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|btns
index|[
name|which
index|]
condition|)
block|{
name|QPushButton
modifier|*
name|pushButton
init|=
operator|new
name|QPushButton
argument_list|(
name|antiFlickerWidget
argument_list|)
decl_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|q
operator|->
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
name|style
operator|!=
name|QApplication
operator|::
name|style
argument_list|()
condition|)
comment|// Propagate style
name|pushButton
operator|->
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
comment|// Make navigation buttons detectable as passive interactor in designer
switch|switch
condition|(
name|which
condition|)
block|{
case|case
name|QWizard
operator|::
name|CommitButton
case|:
case|case
name|QWizard
operator|::
name|FinishButton
case|:
case|case
name|QWizard
operator|::
name|CancelButton
case|:
break|break;
default|default:
block|{
name|QString
name|objectName
init|=
name|QLatin1String
argument_list|(
literal|"__qt__passive_wizardbutton"
argument_list|)
decl_stmt|;
name|objectName
operator|+=
name|QString
operator|::
name|number
argument_list|(
name|which
argument_list|)
expr_stmt|;
name|pushButton
operator|->
name|setObjectName
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|pushButton
operator|->
name|setAutoDefault
argument_list|(
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|pushButton
operator|->
name|hide
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_CC_HPACC
cast|const_cast
argument_list|<
name|QWizardPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|btns
index|[
name|which
index|]
operator|=
name|pushButton
expr_stmt|;
else|#
directive|else
name|btns
index|[
name|which
index|]
operator|=
name|pushButton
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|which
operator|<
name|QWizard
operator|::
name|NStandardButtons
condition|)
name|pushButton
operator|->
name|setText
argument_list|(
name|buttonDefaultText
argument_list|(
name|wizStyle
argument_list|,
name|which
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
name|QAction
modifier|*
name|softKey
init|=
operator|new
name|QAction
argument_list|(
name|pushButton
operator|->
name|text
argument_list|()
argument_list|,
name|pushButton
argument_list|)
decl_stmt|;
name|QAction
operator|::
name|SoftKeyRole
name|softKeyRole
decl_stmt|;
switch|switch
condition|(
name|which
condition|)
block|{
case|case
name|QWizard
operator|::
name|NextButton
case|:
case|case
name|QWizard
operator|::
name|FinishButton
case|:
case|case
name|QWizard
operator|::
name|CancelButton
case|:
name|softKeyRole
operator|=
name|QAction
operator|::
name|NegativeSoftKey
expr_stmt|;
break|break;
case|case
name|QWizard
operator|::
name|BackButton
case|:
case|case
name|QWizard
operator|::
name|CommitButton
case|:
case|case
name|QWizard
operator|::
name|HelpButton
case|:
case|case
name|QWizard
operator|::
name|CustomButton1
case|:
case|case
name|QWizard
operator|::
name|CustomButton2
case|:
case|case
name|QWizard
operator|::
name|CustomButton3
case|:
default|default:
name|softKeyRole
operator|=
name|QAction
operator|::
name|PositiveSoftKey
expr_stmt|;
break|break;
block|}
name|softKey
operator|->
name|setSoftKeyRole
argument_list|(
name|softKeyRole
argument_list|)
expr_stmt|;
name|softKeys
index|[
name|which
index|]
operator|=
name|softKey
expr_stmt|;
endif|#
directive|endif
name|connectButton
argument_list|(
name|which
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|connectButton
name|void
name|QWizardPrivate
operator|::
name|connectButton
parameter_list|(
name|QWizard
operator|::
name|WizardButton
name|which
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
name|which
operator|<
name|QWizard
operator|::
name|NStandardButtons
condition|)
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|btns
index|[
name|which
index|]
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|buttonSlots
index|[
name|which
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|btns
index|[
name|which
index|]
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitCustomButtonClicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
name|QObject
operator|::
name|connect
argument_list|(
name|softKeys
index|[
name|which
index|]
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|btns
index|[
name|which
index|]
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|updateButtonTexts
name|void
name|QWizardPrivate
operator|::
name|updateButtonTexts
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QWizard
operator|::
name|NButtons
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|btns
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|currentPage
argument_list|()
operator|&&
operator|(
name|q
operator|->
name|currentPage
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|buttonCustomTexts
operator|.
name|contains
argument_list|(
name|i
argument_list|)
operator|)
condition|)
name|btns
index|[
name|i
index|]
operator|->
name|setText
argument_list|(
name|q
operator|->
name|currentPage
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|buttonCustomTexts
operator|.
name|value
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|buttonCustomTexts
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
name|btns
index|[
name|i
index|]
operator|->
name|setText
argument_list|(
name|buttonCustomTexts
operator|.
name|value
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|<
name|QWizard
operator|::
name|NStandardButtons
condition|)
name|btns
index|[
name|i
index|]
operator|->
name|setText
argument_list|(
name|buttonDefaultText
argument_list|(
name|wizStyle
argument_list|,
name|i
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
name|softKeys
index|[
name|i
index|]
operator|->
name|setText
argument_list|(
name|btns
index|[
name|i
index|]
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
block|}
end_function
begin_function
DECL|function|updateButtonLayout
name|void
name|QWizardPrivate
operator|::
name|updateButtonLayout
parameter_list|()
block|{
if|if
condition|(
name|buttonsHaveCustomLayout
condition|)
block|{
name|QVarLengthArray
argument_list|<
name|QWizard
operator|::
name|WizardButton
argument_list|>
name|array
argument_list|(
name|buttonsCustomLayout
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buttonsCustomLayout
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|array
index|[
name|i
index|]
operator|=
name|buttonsCustomLayout
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|setButtonLayout
argument_list|(
name|array
operator|.
name|constData
argument_list|()
argument_list|,
name|array
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Positions:
comment|//     Help Stretch Custom1 Custom2 Custom3 Cancel Back Next Commit Finish Cancel Help
specifier|const
name|int
name|ArraySize
init|=
literal|12
decl_stmt|;
name|QWizard
operator|::
name|WizardButton
name|array
index|[
name|ArraySize
index|]
decl_stmt|;
name|memset
argument_list|(
name|array
argument_list|,
operator|-
literal|1
argument_list|,
sizeof|sizeof
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|array
index|[
literal|0
index|]
operator|==
name|QWizard
operator|::
name|NoButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|&
name|QWizard
operator|::
name|HaveHelpButton
condition|)
block|{
name|int
name|i
init|=
operator|(
name|opts
operator|&
name|QWizard
operator|::
name|HelpButtonOnRight
operator|)
condition|?
literal|11
else|:
literal|0
decl_stmt|;
name|array
index|[
name|i
index|]
operator|=
name|QWizard
operator|::
name|HelpButton
expr_stmt|;
block|}
name|array
index|[
literal|1
index|]
operator|=
name|QWizard
operator|::
name|Stretch
expr_stmt|;
if|if
condition|(
name|opts
operator|&
name|QWizard
operator|::
name|HaveCustomButton1
condition|)
name|array
index|[
literal|2
index|]
operator|=
name|QWizard
operator|::
name|CustomButton1
expr_stmt|;
if|if
condition|(
name|opts
operator|&
name|QWizard
operator|::
name|HaveCustomButton2
condition|)
name|array
index|[
literal|3
index|]
operator|=
name|QWizard
operator|::
name|CustomButton2
expr_stmt|;
if|if
condition|(
name|opts
operator|&
name|QWizard
operator|::
name|HaveCustomButton3
condition|)
name|array
index|[
literal|4
index|]
operator|=
name|QWizard
operator|::
name|CustomButton3
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|opts
operator|&
name|QWizard
operator|::
name|NoCancelButton
operator|)
condition|)
block|{
name|int
name|i
init|=
operator|(
name|opts
operator|&
name|QWizard
operator|::
name|CancelButtonOnLeft
operator|)
condition|?
literal|5
else|:
literal|10
decl_stmt|;
name|array
index|[
name|i
index|]
operator|=
name|QWizard
operator|::
name|CancelButton
expr_stmt|;
block|}
name|array
index|[
literal|6
index|]
operator|=
name|QWizard
operator|::
name|BackButton
expr_stmt|;
name|array
index|[
literal|7
index|]
operator|=
name|QWizard
operator|::
name|NextButton
expr_stmt|;
name|array
index|[
literal|8
index|]
operator|=
name|QWizard
operator|::
name|CommitButton
expr_stmt|;
name|array
index|[
literal|9
index|]
operator|=
name|QWizard
operator|::
name|FinishButton
expr_stmt|;
name|setButtonLayout
argument_list|(
name|array
argument_list|,
name|ArraySize
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setButtonLayout
name|void
name|QWizardPrivate
operator|::
name|setButtonLayout
parameter_list|(
specifier|const
name|QWizard
operator|::
name|WizardButton
modifier|*
name|array
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|QWidget
modifier|*
name|prev
init|=
name|pageFrame
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|buttonLayout
operator|->
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QLayoutItem
modifier|*
name|item
init|=
name|buttonLayout
operator|->
name|takeAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|widget
init|=
name|item
operator|->
name|widget
argument_list|()
condition|)
name|widget
operator|->
name|hide
argument_list|()
expr_stmt|;
operator|delete
name|item
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|QWizard
operator|::
name|WizardButton
name|which
init|=
name|array
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|which
operator|==
name|QWizard
operator|::
name|Stretch
condition|)
block|{
name|buttonLayout
operator|->
name|addStretch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|which
operator|!=
name|QWizard
operator|::
name|NoButton
condition|)
block|{
name|ensureButton
argument_list|(
name|which
argument_list|)
expr_stmt|;
name|buttonLayout
operator|->
name|addWidget
argument_list|(
name|btns
index|[
name|which
index|]
argument_list|)
expr_stmt|;
comment|// Back, Next, Commit, and Finish are handled in _q_updateButtonStates()
if|if
condition|(
name|which
operator|!=
name|QWizard
operator|::
name|BackButton
operator|&&
name|which
operator|!=
name|QWizard
operator|::
name|NextButton
operator|&&
name|which
operator|!=
name|QWizard
operator|::
name|CommitButton
operator|&&
name|which
operator|!=
name|QWizard
operator|::
name|FinishButton
condition|)
name|btns
index|[
name|which
index|]
operator|->
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|prev
condition|)
name|QWidget
operator|::
name|setTabOrder
argument_list|(
name|prev
argument_list|,
name|btns
index|[
name|which
index|]
argument_list|)
expr_stmt|;
name|prev
operator|=
name|btns
index|[
name|which
index|]
expr_stmt|;
block|}
block|}
name|_q_updateButtonStates
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|buttonLayoutContains
name|bool
name|QWizardPrivate
operator|::
name|buttonLayoutContains
parameter_list|(
name|QWizard
operator|::
name|WizardButton
name|which
parameter_list|)
block|{
return|return
operator|!
name|buttonsHaveCustomLayout
operator|||
name|buttonsCustomLayout
operator|.
name|contains
argument_list|(
name|which
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|updatePixmap
name|void
name|QWizardPrivate
operator|::
name|updatePixmap
parameter_list|(
name|QWizard
operator|::
name|WizardPixmap
name|which
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
name|which
operator|==
name|QWizard
operator|::
name|BackgroundPixmap
condition|)
block|{
if|if
condition|(
name|wizStyle
operator|==
name|QWizard
operator|::
name|MacStyle
condition|)
block|{
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
name|q
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|updateLayout
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
end_if
begin_function
DECL|function|vistaDisabled
name|bool
name|QWizardPrivate
operator|::
name|vistaDisabled
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
specifier|const
name|QVariant
name|v
init|=
name|q
operator|->
name|property
argument_list|(
literal|"_q_wizard_vista_off"
argument_list|)
decl_stmt|;
return|return
name|v
operator|.
name|isValid
argument_list|()
operator|&&
name|v
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isVistaThemeEnabled
name|bool
name|QWizardPrivate
operator|::
name|isVistaThemeEnabled
parameter_list|(
name|QVistaHelper
operator|::
name|VistaState
name|state
parameter_list|)
specifier|const
block|{
return|return
name|wizStyle
operator|==
name|QWizard
operator|::
name|AeroStyle
operator|&&
name|QVistaHelper
operator|::
name|vistaState
argument_list|()
operator|==
name|state
operator|&&
operator|!
name|vistaDisabled
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|handleAeroStyleChange
name|void
name|QWizardPrivate
operator|::
name|handleAeroStyleChange
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
name|inHandleAeroStyleChange
condition|)
return|return;
comment|// prevent recursion
name|inHandleAeroStyleChange
operator|=
literal|true
expr_stmt|;
name|vistaHelper
operator|->
name|disconnectBackButton
argument_list|()
expr_stmt|;
name|q
operator|->
name|removeEventFilter
argument_list|(
name|vistaHelper
argument_list|)
expr_stmt|;
if|if
condition|(
name|isVistaThemeEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|isVistaThemeEnabled
argument_list|(
name|QVistaHelper
operator|::
name|VistaAero
argument_list|)
condition|)
block|{
name|vistaHelper
operator|->
name|setDWMTitleBar
argument_list|(
name|QVistaHelper
operator|::
name|ExtendedTitleBar
argument_list|)
expr_stmt|;
name|q
operator|->
name|installEventFilter
argument_list|(
name|vistaHelper
argument_list|)
expr_stmt|;
name|q
operator|->
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|antiFlickerWidget
operator|->
name|move
argument_list|(
literal|0
argument_list|,
name|vistaHelper
operator|->
name|titleBarSize
argument_list|()
operator|+
name|vistaHelper
operator|->
name|topOffset
argument_list|()
argument_list|)
expr_stmt|;
name|vistaHelper
operator|->
name|backButton
argument_list|()
operator|->
name|move
argument_list|(
literal|0
argument_list|,
name|vistaHelper
operator|->
name|topOffset
argument_list|()
comment|// ### should ideally work without the '+ 1'
operator|-
name|qMin
argument_list|(
name|vistaHelper
operator|->
name|topOffset
argument_list|()
argument_list|,
name|vistaHelper
operator|->
name|topPadding
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vistaHelper
operator|->
name|setDWMTitleBar
argument_list|(
name|QVistaHelper
operator|::
name|NormalTitleBar
argument_list|)
expr_stmt|;
name|q
operator|->
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|antiFlickerWidget
operator|->
name|move
argument_list|(
literal|0
argument_list|,
name|vistaHelper
operator|->
name|topOffset
argument_list|()
argument_list|)
expr_stmt|;
name|vistaHelper
operator|->
name|backButton
argument_list|()
operator|->
name|move
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// ### should ideally work with (0, 0)
block|}
name|vistaHelper
operator|->
name|setTitleBarIconAndCaptionVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|vistaHelper
operator|->
name|backButton
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|buttonSlots
index|[
name|QWizard
operator|::
name|BackButton
index|]
argument_list|)
expr_stmt|;
name|vistaHelper
operator|->
name|backButton
argument_list|()
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|q
operator|->
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// ### original value possibly different
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|q
operator|->
name|unsetCursor
argument_list|()
expr_stmt|;
comment|// ### ditto
endif|#
directive|endif
name|antiFlickerWidget
operator|->
name|move
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|vistaHelper
operator|->
name|hideBackButton
argument_list|()
expr_stmt|;
name|vistaHelper
operator|->
name|setTitleBarIconAndCaptionVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|_q_updateButtonStates
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
condition|)
name|vistaHelper
operator|->
name|setWindowPosHack
argument_list|()
expr_stmt|;
name|inHandleAeroStyleChange
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|isVistaThemeEnabled
name|bool
name|QWizardPrivate
operator|::
name|isVistaThemeEnabled
parameter_list|()
specifier|const
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
return|return
name|isVistaThemeEnabled
argument_list|(
name|QVistaHelper
operator|::
name|VistaAero
argument_list|)
operator|||
name|isVistaThemeEnabled
argument_list|(
name|QVistaHelper
operator|::
name|VistaBasic
argument_list|)
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|disableUpdates
name|void
name|QWizardPrivate
operator|::
name|disableUpdates
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
name|disableUpdatesCount
operator|++
operator|==
literal|0
condition|)
block|{
name|q
operator|->
name|setUpdatesEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|antiFlickerWidget
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|enableUpdates
name|void
name|QWizardPrivate
operator|::
name|enableUpdates
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|disableUpdatesCount
operator|==
literal|0
condition|)
block|{
name|antiFlickerWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|q
operator|->
name|setUpdatesEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_emitCustomButtonClicked
name|void
name|QWizardPrivate
operator|::
name|_q_emitCustomButtonClicked
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|button
init|=
name|q
operator|->
name|sender
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|QWizard
operator|::
name|NStandardButtons
init|;
name|i
operator|<
name|QWizard
operator|::
name|NButtons
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|btns
index|[
name|i
index|]
operator|==
name|button
condition|)
block|{
emit|emit
name|q
operator|->
name|customButtonClicked
argument_list|(
name|QWizard
operator|::
name|WizardButton
argument_list|(
name|i
argument_list|)
argument_list|)
emit|;
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|_q_updateButtonStates
name|void
name|QWizardPrivate
operator|::
name|_q_updateButtonStates
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|disableUpdates
argument_list|()
expr_stmt|;
specifier|const
name|QWizardPage
modifier|*
name|page
init|=
name|q
operator|->
name|currentPage
argument_list|()
decl_stmt|;
name|bool
name|complete
init|=
name|page
operator|&&
name|page
operator|->
name|isComplete
argument_list|()
decl_stmt|;
name|btn
operator|.
name|back
operator|->
name|setEnabled
argument_list|(
name|history
operator|.
name|count
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|q
operator|->
name|page
argument_list|(
name|history
operator|.
name|at
argument_list|(
name|history
operator|.
name|count
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
operator|->
name|isCommitPage
argument_list|()
operator|&&
operator|(
operator|!
name|canFinish
operator|||
operator|!
operator|(
name|opts
operator|&
name|QWizard
operator|::
name|DisabledBackButtonOnLastPage
operator|)
operator|)
argument_list|)
expr_stmt|;
name|btn
operator|.
name|next
operator|->
name|setEnabled
argument_list|(
name|canContinue
operator|&&
name|complete
argument_list|)
expr_stmt|;
name|btn
operator|.
name|commit
operator|->
name|setEnabled
argument_list|(
name|canContinue
operator|&&
name|complete
argument_list|)
expr_stmt|;
name|btn
operator|.
name|finish
operator|->
name|setEnabled
argument_list|(
name|canFinish
operator|&&
name|complete
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|backButtonVisible
init|=
name|buttonLayoutContains
argument_list|(
name|QWizard
operator|::
name|BackButton
argument_list|)
operator|&&
operator|(
name|history
operator|.
name|count
argument_list|()
operator|>
literal|1
operator|||
operator|!
operator|(
name|opts
operator|&
name|QWizard
operator|::
name|NoBackButtonOnStartPage
operator|)
operator|)
operator|&&
operator|(
name|canContinue
operator|||
operator|!
operator|(
name|opts
operator|&
name|QWizard
operator|::
name|NoBackButtonOnLastPage
operator|)
operator|)
decl_stmt|;
name|bool
name|commitPage
init|=
name|page
operator|&&
name|page
operator|->
name|isCommitPage
argument_list|()
decl_stmt|;
name|btn
operator|.
name|back
operator|->
name|setVisible
argument_list|(
name|backButtonVisible
argument_list|)
expr_stmt|;
name|btn
operator|.
name|next
operator|->
name|setVisible
argument_list|(
name|buttonLayoutContains
argument_list|(
name|QWizard
operator|::
name|NextButton
argument_list|)
operator|&&
operator|!
name|commitPage
operator|&&
operator|(
name|canContinue
operator|||
operator|(
name|opts
operator|&
name|QWizard
operator|::
name|HaveNextButtonOnLastPage
operator|)
operator|)
argument_list|)
expr_stmt|;
name|btn
operator|.
name|commit
operator|->
name|setVisible
argument_list|(
name|buttonLayoutContains
argument_list|(
name|QWizard
operator|::
name|CommitButton
argument_list|)
operator|&&
name|commitPage
operator|&&
name|canContinue
argument_list|)
expr_stmt|;
name|btn
operator|.
name|finish
operator|->
name|setVisible
argument_list|(
name|buttonLayoutContains
argument_list|(
name|QWizard
operator|::
name|FinishButton
argument_list|)
operator|&&
operator|(
name|canFinish
operator|||
operator|(
name|opts
operator|&
name|QWizard
operator|::
name|HaveFinishButtonOnEarlyPages
operator|)
operator|)
argument_list|)
expr_stmt|;
name|bool
name|useDefault
init|=
operator|!
operator|(
name|opts
operator|&
name|QWizard
operator|::
name|NoDefaultButton
operator|)
decl_stmt|;
if|if
condition|(
name|QPushButton
modifier|*
name|nextPush
init|=
name|qobject_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|btn
operator|.
name|next
argument_list|)
condition|)
name|nextPush
operator|->
name|setDefault
argument_list|(
name|canContinue
operator|&&
name|useDefault
operator|&&
operator|!
name|commitPage
argument_list|)
expr_stmt|;
if|if
condition|(
name|QPushButton
modifier|*
name|commitPush
init|=
name|qobject_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|btn
operator|.
name|commit
argument_list|)
condition|)
name|commitPush
operator|->
name|setDefault
argument_list|(
name|canContinue
operator|&&
name|useDefault
operator|&&
name|commitPage
argument_list|)
expr_stmt|;
if|if
condition|(
name|QPushButton
modifier|*
name|finishPush
init|=
name|qobject_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|btn
operator|.
name|finish
argument_list|)
condition|)
name|finishPush
operator|->
name|setDefault
argument_list|(
operator|!
name|canContinue
operator|&&
name|useDefault
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
if|if
condition|(
name|isVistaThemeEnabled
argument_list|()
condition|)
block|{
name|vistaHelper
operator|->
name|backButton
argument_list|()
operator|->
name|setEnabled
argument_list|(
name|btn
operator|.
name|back
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|vistaHelper
operator|->
name|backButton
argument_list|()
operator|->
name|setVisible
argument_list|(
name|backButtonVisible
argument_list|)
expr_stmt|;
name|btn
operator|.
name|back
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
name|QAbstractButton
modifier|*
name|wizardButton
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QWizard
operator|::
name|NButtons
condition|;
operator|++
name|i
control|)
block|{
name|wizardButton
operator|=
name|btns
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|wizardButton
operator|&&
operator|!
name|wizardButton
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
condition|)
block|{
name|wizardButton
operator|->
name|hide
argument_list|()
expr_stmt|;
name|q
operator|->
name|addAction
argument_list|(
name|softKeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|->
name|removeAction
argument_list|(
name|softKeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
name|enableUpdates
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_handleFieldObjectDestroyed
name|void
name|QWizardPrivate
operator|::
name|_q_handleFieldObjectDestroyed
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
name|QVector
argument_list|<
name|QWizardField
argument_list|>
operator|::
name|iterator
name|it
init|=
name|fields
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|fields
operator|.
name|end
argument_list|()
condition|)
block|{
specifier|const
name|QWizardField
modifier|&
name|field
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|object
operator|==
name|object
condition|)
block|{
name|fieldIndexMap
operator|.
name|remove
argument_list|(
name|field
operator|.
name|name
argument_list|)
expr_stmt|;
name|it
operator|=
name|fields
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setStyle
name|void
name|QWizardPrivate
operator|::
name|setStyle
parameter_list|(
name|QStyle
modifier|*
name|style
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QWizard
operator|::
name|NButtons
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|btns
index|[
name|i
index|]
condition|)
name|btns
index|[
name|i
index|]
operator|->
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
specifier|const
name|PageMap
operator|::
name|const_iterator
name|pcend
init|=
name|pageMap
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|PageMap
operator|::
name|const_iterator
name|it
init|=
name|pageMap
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|pcend
condition|;
operator|++
name|it
control|)
name|it
operator|.
name|value
argument_list|()
operator|->
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC
end_ifdef
begin_function
DECL|function|findDefaultBackgroundPixmap
name|QPixmap
name|QWizardPrivate
operator|::
name|findDefaultBackgroundPixmap
parameter_list|()
block|{
name|QCFType
argument_list|<
name|CFURLRef
argument_list|>
name|url
decl_stmt|;
specifier|const
name|int
name|ExpectedImageWidth
init|=
literal|242
decl_stmt|;
specifier|const
name|int
name|ExpectedImageHeight
init|=
literal|414
decl_stmt|;
if|if
condition|(
name|LSFindApplicationForInfo
argument_list|(
name|kLSUnknownCreator
argument_list|,
name|CFSTR
argument_list|(
literal|"com.apple.KeyboardSetupAssistant"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|url
argument_list|)
operator|==
name|noErr
condition|)
block|{
name|QCFType
argument_list|<
name|CFBundleRef
argument_list|>
name|bundle
init|=
name|CFBundleCreate
argument_list|(
name|kCFAllocatorDefault
argument_list|,
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
condition|)
block|{
name|url
operator|=
name|CFBundleCopyResourceURL
argument_list|(
name|bundle
argument_list|,
name|CFSTR
argument_list|(
literal|"Background"
argument_list|)
argument_list|,
name|CFSTR
argument_list|(
literal|"tif"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
condition|)
block|{
name|QCFType
argument_list|<
name|CGImageSourceRef
argument_list|>
name|imageSource
init|=
name|CGImageSourceCreateWithURL
argument_list|(
name|url
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CGImageRef
argument_list|>
name|image
init|=
name|CGImageSourceCreateImageAtIndex
argument_list|(
name|imageSource
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
condition|)
block|{
name|int
name|width
init|=
name|CGImageGetWidth
argument_list|(
name|image
argument_list|)
decl_stmt|;
name|int
name|height
init|=
name|CGImageGetHeight
argument_list|(
name|image
argument_list|)
decl_stmt|;
if|if
condition|(
name|width
operator|==
name|ExpectedImageWidth
operator|&&
name|height
operator|==
name|ExpectedImageHeight
condition|)
return|return
name|QPixmap
operator|::
name|fromMacCGImageRef
argument_list|(
name|image
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
name|QPixmap
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
end_if
begin_function
DECL|function|paintEvent
name|void
name|QWizardAntiFlickerWidget
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
if|if
condition|(
name|wizardPrivate
operator|->
name|isVistaThemeEnabled
argument_list|()
condition|)
block|{
name|int
name|leftMargin
decl_stmt|,
name|topMargin
decl_stmt|,
name|rightMargin
decl_stmt|,
name|bottomMargin
decl_stmt|;
name|wizardPrivate
operator|->
name|buttonLayout
operator|->
name|getContentsMargins
argument_list|(
operator|&
name|leftMargin
argument_list|,
operator|&
name|topMargin
argument_list|,
operator|&
name|rightMargin
argument_list|,
operator|&
name|bottomMargin
argument_list|)
expr_stmt|;
specifier|const
name|int
name|buttonLayoutTop
init|=
name|wizardPrivate
operator|->
name|buttonLayout
operator|->
name|contentsRect
argument_list|()
operator|.
name|top
argument_list|()
operator|-
name|topMargin
decl_stmt|;
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|brush
argument_list|(
name|QColor
argument_list|(
literal|240
argument_list|,
literal|240
argument_list|,
literal|240
argument_list|)
argument_list|)
decl_stmt|;
comment|// ### hardcoded for now
name|painter
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
name|buttonLayoutTop
argument_list|,
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
operator|-
name|buttonLayoutTop
argument_list|,
name|brush
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|QBrush
argument_list|(
name|QColor
argument_list|(
literal|223
argument_list|,
literal|223
argument_list|,
literal|223
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// ### hardcoded for now
name|painter
operator|.
name|drawLine
argument_list|(
literal|0
argument_list|,
name|buttonLayoutTop
argument_list|,
name|width
argument_list|()
argument_list|,
name|buttonLayoutTop
argument_list|)
expr_stmt|;
if|if
condition|(
name|wizardPrivate
operator|->
name|isVistaThemeEnabled
argument_list|(
name|QVistaHelper
operator|::
name|VistaBasic
argument_list|)
condition|)
block|{
if|if
condition|(
name|window
argument_list|()
operator|->
name|isActiveWindow
argument_list|()
condition|)
name|painter
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|QBrush
argument_list|(
name|QColor
argument_list|(
literal|169
argument_list|,
literal|191
argument_list|,
literal|214
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// ### hardcoded for now
else|else
name|painter
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|QBrush
argument_list|(
name|QColor
argument_list|(
literal|182
argument_list|,
literal|193
argument_list|,
literal|204
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// ### hardcoded for now
name|painter
operator|.
name|drawLine
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \class QWizard     \since 4.3     \brief The QWizard class provides a framework for wizards.      \inmodule QtWidgets      A wizard (also called an assistant on Mac OS X) is a special type     of input dialog that consists of a sequence of pages. A wizard's     purpose is to guide the user through a process step by step.     Wizards are useful for complex or infrequent tasks that users may     find difficult to learn.      QWizard inherits QDialog and represents a wizard. Each page is a     QWizardPage (a QWidget subclass). To create your own wizards, you     can use these classes directly, or you can subclass them for more     control.      Topics:      \tableofcontents      \section1 A Trivial Example      The following example illustrates how to create wizard pages and     add them to a wizard. For more advanced examples, see     \l{dialogs/classwizard}{Class Wizard} and \l{dialogs/licensewizard}{License     Wizard}.      \snippet examples/dialogs/trivialwizard/trivialwizard.cpp 1     \snippet examples/dialogs/trivialwizard/trivialwizard.cpp 3     \dots     \snippet examples/dialogs/trivialwizard/trivialwizard.cpp 4     \codeline     \snippet examples/dialogs/trivialwizard/trivialwizard.cpp 5     \snippet examples/dialogs/trivialwizard/trivialwizard.cpp 7     \dots     \snippet examples/dialogs/trivialwizard/trivialwizard.cpp 8     \codeline     \snippet examples/dialogs/trivialwizard/trivialwizard.cpp 10      \section1 Wizard Look and Feel      QWizard supports four wizard looks:      \list     \li ClassicStyle     \li ModernStyle     \li MacStyle     \li AeroStyle     \endlist      You can explicitly set the look to use using setWizardStyle()     (e.g., if you want the same look on all platforms).      \table     \header \li ClassicStyle             \li ModernStyle             \li MacStyle             \li AeroStyle     \row    \li \inlineimage qtwizard-classic1.png             \li \inlineimage qtwizard-modern1.png             \li \inlineimage qtwizard-mac1.png             \li \inlineimage qtwizard-aero1.png     \row    \li \inlineimage qtwizard-classic2.png             \li \inlineimage qtwizard-modern2.png             \li \inlineimage qtwizard-mac2.png             \li \inlineimage qtwizard-aero2.png     \endtable      Note: AeroStyle has effect only on a Windows Vista system with alpha compositing enabled.     ModernStyle is used as a fallback when this condition is not met.      In addition to the wizard style, there are several options that     control the look and feel of the wizard. These can be set using     setOption() or setOptions(). For example, HaveHelpButton makes     QWizard show a \gui Help button along with the other wizard     buttons.      You can even change the order of the wizard buttons to any     arbitrary order using setButtonLayout(), and you can add up to     three custom buttons (e.g., a \gui Print button) to the button     row. This is achieved by calling setButton() or setButtonText()     with CustomButton1, CustomButton2, or CustomButton3 to set up the     button, and by enabling the HaveCustomButton1, HaveCustomButton2,     or HaveCustomButton3 options. Whenever the user clicks a custom     button, customButtonClicked() is emitted. For example:      \snippet examples/dialogs/licensewizard/licensewizard.cpp 29      \section1 Elements of a Wizard Page      Wizards consist of a sequence of \l{QWizardPage}s. At any time,     only one page is shown. A page has the following attributes:      \list     \li A \l{QWizardPage::}{title}.     \li A \l{QWizardPage::}{subTitle}.     \li A set of pixmaps, which may or may not be honored, depending        on the wizard's style:         \list         \li WatermarkPixmap (used by ClassicStyle and ModernStyle)         \li BannerPixmap (used by ModernStyle)         \li LogoPixmap (used by ClassicStyle and ModernStyle)         \li BackgroundPixmap (used by MacStyle)         \endlist     \endlist      The diagram belows shows how QWizard renders these attributes,     assuming they are all present and ModernStyle is used:      \image qtwizard-nonmacpage.png      When a \l{QWizardPage::}{subTitle} is set, QWizard displays it     in a header, in which case it also uses the BannerPixmap and the     LogoPixmap to decorate the header. The WatermarkPixmap is     displayed on the left side, below the header. At the bottom,     there is a row of buttons allowing the user to navigate through     the pages.      The page itself (the \l{QWizardPage} widget) occupies the area     between the header, the watermark, and the button row. Typically,     the page is a QWizardPage on which a QGridLayout is installed,     with standard child widgets (\l{QLabel}s, \l{QLineEdit}s, etc.).      If the wizard's style is MacStyle, the page looks radically     different:      \image qtwizard-macpage.png      The watermark, banner, and logo pixmaps are ignored by the     MacStyle. If the BackgroundPixmap is set, it is used as the     background for the wizard; otherwise, a default "assistant" image     is used.      The title and subtitle are set by calling     QWizardPage::setTitle() and QWizardPage::setSubTitle() on the     individual pages. They may be plain text or HTML (see titleFormat     and subTitleFormat). The pixmaps can be set globally for the     entire wizard using setPixmap(), or on a per-page basis using     QWizardPage::setPixmap().      \target field mechanism     \section1 Registering and Using Fields      In many wizards, the contents of a page may affect the default     values of the fields of a later page. To make it easy to     communicate between pages, QWizard supports a "field" mechanism     that allows you to register a field (e.g., a QLineEdit) on a page     and to access its value from any page. It is also possible to     specify mandatory fields (i.e., fields that must be filled before     the user can advance to the next page).      To register a field, call QWizardPage::registerField() field.     For example:      \snippet examples/dialogs/classwizard/classwizard.cpp 8     \dots     \snippet examples/dialogs/classwizard/classwizard.cpp 10     \snippet examples/dialogs/classwizard/classwizard.cpp 11     \dots     \snippet examples/dialogs/classwizard/classwizard.cpp 13      The above code registers three fields, \c className, \c     baseClass, and \c qobjectMacro, which are associated with three     child widgets. The asterisk (\c *) next to \c className denotes a     mandatory field.      \target initialize page     The fields of any page are accessible from any other page. For     example:      \snippet examples/dialogs/classwizard/classwizard.cpp 17      Here, we call QWizardPage::field() to access the contents of the     \c className field (which was defined in the \c ClassInfoPage)     and use it to initialize the \c OuputFilePage. The field's     contents is returned as a QVariant.      When we create a field using QWizardPage::registerField(), we     pass a unique field name and a widget. We can also provide a Qt     property name and a "changed" signal (a signal that is emitted     when the property changes) as third and fourth arguments;     however, this is not necessary for the most common Qt widgets,     such as QLineEdit, QCheckBox, and QComboBox, because QWizard     knows which properties to look for.      \target mandatory fields      If an asterisk (\c *) is appended to the name when the property     is registered, the field is a \e{mandatory field}. When a page has     mandatory fields, the \gui Next and/or \gui Finish buttons are     enabled only when all mandatory fields are filled.      To consider a field "filled", QWizard simply checks that the     field's current value doesn't equal the original value (the value     it had when initializePage() was called). For QLineEdit and     QAbstractSpinBox subclasses, QWizard also checks that     \l{QLineEdit::hasAcceptableInput()}{hasAcceptableInput()} returns     true, to honor any validator or mask.      QWizard's mandatory field mechanism is provided for convenience.     A more powerful (but also more cumbersome) alternative is to     reimplement QWizardPage::isComplete() and to emit the     QWizardPage::completeChanged() signal whenever the page becomes     complete or incomplete.      The enabled/disabled state of the \gui Next and/or \gui Finish     buttons is one way to perform validation on the user input.     Another way is to reimplement validateCurrentPage() (or     QWizardPage::validatePage()) to perform some last-minute     validation (and show an error message if the user has entered     incomplete or invalid information). If the function returns true,     the next page is shown (or the wizard finishes); otherwise, the     current page stays up.      \section1 Creating Linear Wizards      Most wizards have a linear structure, with page 1 followed by     page 2 and so on until the last page. The \l{dialogs/classwizard}{Class     Wizard} example is such a wizard. With QWizard, linear wizards     are created by instantiating the \l{QWizardPage}s and inserting     them using addPage(). By default, the pages are shown in the     order in which they were added. For example:      \snippet examples/dialogs/classwizard/classwizard.cpp 0     \dots     \snippet examples/dialogs/classwizard/classwizard.cpp 2      When a page is about to be shown, QWizard calls initializePage()     (which in turn calls QWizardPage::initializePage()) to fill the     page with default values. By default, this function does nothing,     but it can be reimplemented to initialize the page's contents     based on other pages' fields (see the \l{initialize page}{example     above}).      If the user presses \gui Back, cleanupPage() is called (which in     turn calls QWizardPage::cleanupPage()). The default     implementation resets the page's fields to their original values     (the values they had before initializePage() was called). If you     want the \gui Back button to be non-destructive and keep the     values entered by the user, simply enable the IndependentPages     option.      \section1 Creating Non-Linear Wizards      Some wizards are more complex in that they allow different     traversal paths based on the information provided by the user.     The \l{dialogs/licensewizard}{License Wizard} example illustrates this.     It provides five wizard pages; depending on which options are     selected, the user can reach different pages.      \image licensewizard-flow.png      In complex wizards, pages are identified by IDs. These IDs are     typically defined using an enum. For example:      \snippet examples/dialogs/licensewizard/licensewizard.h 0     \dots     \snippet examples/dialogs/licensewizard/licensewizard.h 2     \dots     \snippet examples/dialogs/licensewizard/licensewizard.h 3      The pages are inserted using setPage(), which takes an ID and an     instance of QWizardPage (or of a subclass):      \snippet examples/dialogs/licensewizard/licensewizard.cpp 1     \dots     \snippet examples/dialogs/licensewizard/licensewizard.cpp 8      By default, the pages are shown in increasing ID order. To     provide a dynamic order that depends on the options chosen by the     user, we must reimplement QWizardPage::nextId(). For example:      \snippet examples/dialogs/licensewizard/licensewizard.cpp 18     \codeline     \snippet examples/dialogs/licensewizard/licensewizard.cpp 23     \codeline     \snippet examples/dialogs/licensewizard/licensewizard.cpp 24     \codeline     \snippet examples/dialogs/licensewizard/licensewizard.cpp 25     \codeline     \snippet examples/dialogs/licensewizard/licensewizard.cpp 26      It would also be possible to put all the logic in one place, in a     QWizard::nextId() reimplementation. For example:      \snippet doc/src/snippets/code/src_gui_dialogs_qwizard.cpp 0      To start at another page than the page with the lowest ID, call     setStartId().      To test whether a page has been visited or not, call     hasVisitedPage(). For example:      \snippet examples/dialogs/licensewizard/licensewizard.cpp 27      \sa QWizardPage, {Class Wizard Example}, {License Wizard Example} */
end_comment
begin_comment
comment|/*!     \enum QWizard::WizardButton      This enum specifies the buttons in a wizard.      \value BackButton  The \gui Back button (\gui {Go Back} on Mac OS X)     \value NextButton  The \gui Next button (\gui Continue on Mac OS X)     \value CommitButton  The \gui Commit button     \value FinishButton  The \gui Finish button (\gui Done on Mac OS X)     \value CancelButton  The \gui Cancel button (see also NoCancelButton)     \value HelpButton    The \gui Help button (see also HaveHelpButton)     \value CustomButton1  The first user-defined button (see also HaveCustomButton1)     \value CustomButton2  The second user-defined button (see also HaveCustomButton2)     \value CustomButton3  The third user-defined button (see also HaveCustomButton3)      The following value is only useful when calling setButtonLayout():      \value Stretch  A horizontal stretch in the button layout      \omitvalue NoButton     \omitvalue NStandardButtons     \omitvalue NButtons      \sa setButton(), setButtonText(), setButtonLayout(), customButtonClicked() */
end_comment
begin_comment
comment|/*!     \enum QWizard::WizardPixmap      This enum specifies the pixmaps that can be associated with a page.      \value WatermarkPixmap  The tall pixmap on the left side of a ClassicStyle or ModernStyle page     \value LogoPixmap  The small pixmap on the right side of a ClassicStyle or ModernStyle page header     \value BannerPixmap  The pixmap that occupies the background of a ModernStyle page header     \value BackgroundPixmap  The pixmap that occupies the background of a MacStyle wizard      \omitvalue NPixmaps      \sa setPixmap(), QWizardPage::setPixmap(), {Elements of a Wizard Page} */
end_comment
begin_comment
comment|/*!     \enum QWizard::WizardStyle      This enum specifies the different looks supported by QWizard.      \value ClassicStyle  Classic Windows look     \value ModernStyle  Modern Windows look     \value MacStyle  Mac OS X look     \value AeroStyle  Windows Aero look      \omitvalue NStyles      \sa setWizardStyle(), WizardOption, {Wizard Look and Feel} */
end_comment
begin_comment
comment|/*!     \enum QWizard::WizardOption      This enum specifies various options that affect the look and feel     of a wizard.      \value IndependentPages  The pages are independent of each other                              (i.e., they don't derive values from each                              other).     \value IgnoreSubTitles  Don't show any subtitles, even if they are set.     \value ExtendedWatermarkPixmap  Extend any WatermarkPixmap all the                                     way down to the window's edge.     \value NoDefaultButton  Don't make the \gui Next or \gui Finish button the                             dialog's \l{QPushButton::setDefault()}{default button}.     \value NoBackButtonOnStartPage  Don't show the \gui Back button on the start page.     \value NoBackButtonOnLastPage   Don't show the \gui Back button on the last page.     \value DisabledBackButtonOnLastPage  Disable the \gui Back button on the last page.     \value HaveNextButtonOnLastPage  Show the (disabled) \gui Next button on the last page.     \value HaveFinishButtonOnEarlyPages  Show the (disabled) \gui Finish button on non-final pages.     \value NoCancelButton  Don't show the \gui Cancel button.     \value CancelButtonOnLeft  Put the \gui Cancel button on the left of \gui Back (rather than on                                the right of \gui Finish or \gui Next).     \value HaveHelpButton  Show the \gui Help button.     \value HelpButtonOnRight  Put the \gui Help button on the far right of the button layout                               (rather than on the far left).     \value HaveCustomButton1  Show the first user-defined button (CustomButton1).     \value HaveCustomButton2  Show the second user-defined button (CustomButton2).     \value HaveCustomButton3  Show the third user-defined button (CustomButton3).      \sa setOptions(), setOption(), testOption() */
end_comment
begin_comment
comment|/*!     Constructs a wizard with the given \a parent and window \a flags.      \sa parent(), windowFlags() */
end_comment
begin_constructor
DECL|function|QWizard
name|QWizard
operator|::
name|QWizard
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|new
name|QWizardPrivate
argument_list|,
name|parent
argument_list|,
name|flags
argument_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
if|if
condition|(
operator|!
name|qt_wince_is_mobile
argument_list|()
condition|)
name|setWindowFlags
argument_list|(
name|windowFlags
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|WindowOkButtonHint
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_comment
comment|/*!     Destroys the wizard and its pages, releasing any allocated resources. */
end_comment
begin_destructor
DECL|function|~QWizard
name|QWizard
operator|::
name|~
name|QWizard
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|buttonLayout
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Adds the given \a page to the wizard, and returns the page's ID.      The ID is guaranteed to be larger than any other ID in the     QWizard so far.      \sa setPage(), page(), pageAdded() */
end_comment
begin_function
DECL|function|addPage
name|int
name|QWizard
operator|::
name|addPage
parameter_list|(
name|QWizardPage
modifier|*
name|page
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|int
name|theid
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|pageMap
operator|.
name|isEmpty
argument_list|()
condition|)
name|theid
operator|=
operator|(
name|d
operator|->
name|pageMap
operator|.
name|constEnd
argument_list|()
operator|-
literal|1
operator|)
operator|.
name|key
argument_list|()
operator|+
literal|1
expr_stmt|;
name|setPage
argument_list|(
name|theid
argument_list|,
name|page
argument_list|)
expr_stmt|;
return|return
name|theid
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QWizard::setPage(int id, QWizardPage *page)      Adds the given \a page to the wizard with the given \a id.      \note Adding a page may influence the value of the startId property     in case it was not set explicitly.      \sa addPage(), page(), pageAdded() */
end_comment
begin_function
DECL|function|setPage
name|void
name|QWizard
operator|::
name|setPage
parameter_list|(
name|int
name|theid
parameter_list|,
name|QWizardPage
modifier|*
name|page
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|page
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWizard::setPage: Cannot insert null page"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|theid
operator|==
operator|-
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWizard::setPage: Cannot insert page with ID -1"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|pageMap
operator|.
name|contains
argument_list|(
name|theid
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWizard::setPage: Page with duplicate ID %d ignored"
argument_list|,
name|theid
argument_list|)
expr_stmt|;
return|return;
block|}
name|page
operator|->
name|setParent
argument_list|(
name|d
operator|->
name|pageFrame
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QWizardField
argument_list|>
modifier|&
name|pendingFields
init|=
name|page
operator|->
name|d_func
argument_list|()
operator|->
name|pendingFields
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pendingFields
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|addField
argument_list|(
name|pendingFields
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|pendingFields
operator|.
name|clear
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|page
argument_list|,
name|SIGNAL
argument_list|(
name|completeChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_updateButtonStates
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|pageMap
operator|.
name|insert
argument_list|(
name|theid
argument_list|,
name|page
argument_list|)
expr_stmt|;
name|page
operator|->
name|d_func
argument_list|()
operator|->
name|wizard
operator|=
name|this
expr_stmt|;
name|int
name|n
init|=
name|d
operator|->
name|pageVBoxLayout
operator|->
name|count
argument_list|()
decl_stmt|;
comment|// disable layout to prevent layout updates while adding
name|bool
name|pageVBoxLayoutEnabled
init|=
name|d
operator|->
name|pageVBoxLayout
operator|->
name|isEnabled
argument_list|()
decl_stmt|;
name|d
operator|->
name|pageVBoxLayout
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|pageVBoxLayout
operator|->
name|insertWidget
argument_list|(
name|n
operator|-
literal|1
argument_list|,
name|page
argument_list|)
expr_stmt|;
comment|// hide new page and reset layout to old status
name|page
operator|->
name|hide
argument_list|()
expr_stmt|;
name|d
operator|->
name|pageVBoxLayout
operator|->
name|setEnabled
argument_list|(
name|pageVBoxLayoutEnabled
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|startSetByUser
operator|&&
name|d
operator|->
name|pageMap
operator|.
name|constBegin
argument_list|()
operator|.
name|key
argument_list|()
operator|==
name|theid
condition|)
name|d
operator|->
name|start
operator|=
name|theid
expr_stmt|;
emit|emit
name|pageAdded
argument_list|(
name|theid
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     Removes the page with the given \a id. cleanupPage() will be called if necessary.      \note Removing a page may influence the value of the startId property.      \since 4.5     \sa addPage(), setPage(), pageRemoved(), startId() */
end_comment
begin_function
DECL|function|removePage
name|void
name|QWizard
operator|::
name|removePage
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|QWizardPage
modifier|*
name|removedPage
init|=
literal|0
decl_stmt|;
comment|// update startItem accordingly
if|if
condition|(
name|d
operator|->
name|pageMap
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// only if we have any pages
if|if
condition|(
name|d
operator|->
name|start
operator|==
name|id
condition|)
block|{
specifier|const
name|int
name|firstId
init|=
name|d
operator|->
name|pageMap
operator|.
name|constBegin
argument_list|()
operator|.
name|key
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstId
operator|==
name|id
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|pageMap
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
name|d
operator|->
name|start
operator|=
operator|(
operator|++
name|d
operator|->
name|pageMap
operator|.
name|constBegin
argument_list|()
operator|)
operator|.
name|key
argument_list|()
expr_stmt|;
comment|// secondId
else|else
name|d
operator|->
name|start
operator|=
operator|-
literal|1
expr_stmt|;
comment|// removing the last page
block|}
else|else
block|{
comment|// startSetByUser has to be "true" here
name|d
operator|->
name|start
operator|=
name|firstId
expr_stmt|;
block|}
name|d
operator|->
name|startSetByUser
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|pageMap
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
emit|emit
name|pageRemoved
argument_list|(
name|id
argument_list|)
emit|;
if|if
condition|(
operator|!
name|d
operator|->
name|history
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
comment|// Case 1: removing a page not in the history
name|removedPage
operator|=
name|d
operator|->
name|pageMap
operator|.
name|take
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateCurrentPage
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|!=
name|d
operator|->
name|current
condition|)
block|{
comment|// Case 2: removing a page in the history before the current page
name|removedPage
operator|=
name|d
operator|->
name|pageMap
operator|.
name|take
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|d
operator|->
name|history
operator|.
name|removeOne
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|d
operator|->
name|_q_updateButtonStates
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|history
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Case 3: removing the current page which is the first (and only) one in the history
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
name|removedPage
operator|=
name|d
operator|->
name|pageMap
operator|.
name|take
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pageMap
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|updateCurrentPage
argument_list|()
expr_stmt|;
else|else
name|restart
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Case 4: removing the current page which is not the first one in the history
name|back
argument_list|()
expr_stmt|;
name|removedPage
operator|=
name|d
operator|->
name|pageMap
operator|.
name|take
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateCurrentPage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|removedPage
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|initialized
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|cleanupPage
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|d
operator|->
name|initialized
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|pageVBoxLayout
operator|->
name|removeWidget
argument_list|(
name|removedPage
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|d
operator|->
name|fields
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|fields
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|page
operator|==
name|removedPage
condition|)
block|{
name|removedPage
operator|->
name|d_func
argument_list|()
operator|->
name|pendingFields
operator|+=
name|d
operator|->
name|fields
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|d
operator|->
name|removeFieldAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \fn QWizardPage *QWizard::page(int id) const      Returns the page with the given \a id, or 0 if there is no such     page.      \sa addPage(), setPage() */
end_comment
begin_function
DECL|function|page
name|QWizardPage
modifier|*
name|QWizard
operator|::
name|page
parameter_list|(
name|int
name|theid
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|pageMap
operator|.
name|value
argument_list|(
name|theid
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QWizard::hasVisitedPage(int id) const      Returns true if the page history contains page \a id; otherwise,     returns false.      Pressing \gui Back marks the current page as "unvisited" again.      \sa visitedPages() */
end_comment
begin_function
DECL|function|hasVisitedPage
name|bool
name|QWizard
operator|::
name|hasVisitedPage
parameter_list|(
name|int
name|theid
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|history
operator|.
name|contains
argument_list|(
name|theid
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the list of IDs of visited pages, in the order in which the pages     were visited.      Pressing \gui Back marks the current page as "unvisited" again.      \sa hasVisitedPage() */
end_comment
begin_function
DECL|function|visitedPages
name|QList
argument_list|<
name|int
argument_list|>
name|QWizard
operator|::
name|visitedPages
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|history
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the list of page IDs.    \since 4.5 */
end_comment
begin_function
DECL|function|pageIds
name|QList
argument_list|<
name|int
argument_list|>
name|QWizard
operator|::
name|pageIds
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|pageMap
operator|.
name|keys
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QWizard::startId     \brief the ID of the first page      If this property isn't explicitly set, this property defaults to     the lowest page ID in this wizard, or -1 if no page has been     inserted yet.      \sa restart(), nextId() */
end_comment
begin_function
DECL|function|setStartId
name|void
name|QWizard
operator|::
name|setStartId
parameter_list|(
name|int
name|theid
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|int
name|newStart
init|=
name|theid
decl_stmt|;
if|if
condition|(
name|theid
operator|==
operator|-
literal|1
condition|)
name|newStart
operator|=
name|d
operator|->
name|pageMap
operator|.
name|count
argument_list|()
condition|?
name|d
operator|->
name|pageMap
operator|.
name|constBegin
argument_list|()
operator|.
name|key
argument_list|()
else|:
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|start
operator|==
name|newStart
condition|)
block|{
name|d
operator|->
name|startSetByUser
operator|=
name|theid
operator|!=
operator|-
literal|1
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|pageMap
operator|.
name|contains
argument_list|(
name|newStart
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWizard::setStartId: Invalid page ID %d"
argument_list|,
name|newStart
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|start
operator|=
name|newStart
expr_stmt|;
name|d
operator|->
name|startSetByUser
operator|=
name|theid
operator|!=
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startId
name|int
name|QWizard
operator|::
name|startId
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|start
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the current page, or 0 if there is no current     page (e.g., before the wizard is shown).      This is equivalent to calling page(currentId()).      \sa page(), currentId(), restart() */
end_comment
begin_function
DECL|function|currentPage
name|QWizardPage
modifier|*
name|QWizard
operator|::
name|currentPage
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
return|return
name|page
argument_list|(
name|d
operator|->
name|current
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QWizard::currentId     \brief the ID of the current page      This property cannot be set directly. To change the current page,     call next(), back(), or restart().      By default, this property has a value of -1, indicating that no page is     currently shown.      \sa currentIdChanged(), currentPage() */
end_comment
begin_function
DECL|function|currentId
name|int
name|QWizard
operator|::
name|currentId
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|current
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the value of the field called \a name to \a value.      This function can be used to set fields on any page of the wizard.      \sa QWizardPage::registerField(), QWizardPage::setField(), field() */
end_comment
begin_function
DECL|function|setField
name|void
name|QWizard
operator|::
name|setField
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|d
operator|->
name|fieldIndexMap
operator|.
name|value
argument_list|(
name|name
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|QWizardField
modifier|&
name|field
init|=
name|d
operator|->
name|fields
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|object
operator|->
name|setProperty
argument_list|(
name|field
operator|.
name|property
argument_list|,
name|value
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"QWizard::setField: Couldn't write to property '%s'"
argument_list|,
name|field
operator|.
name|property
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|qWarning
argument_list|(
literal|"QWizard::setField: No such field '%s'"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the field called \a name.      This function can be used to access fields on any page of the wizard.      \sa QWizardPage::registerField(), QWizardPage::field(), setField() */
end_comment
begin_function
DECL|function|field
name|QVariant
name|QWizard
operator|::
name|field
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|d
operator|->
name|fieldIndexMap
operator|.
name|value
argument_list|(
name|name
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|QWizardField
modifier|&
name|field
init|=
name|d
operator|->
name|fields
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|field
operator|.
name|object
operator|->
name|property
argument_list|(
name|field
operator|.
name|property
argument_list|)
return|;
block|}
name|qWarning
argument_list|(
literal|"QWizard::field: No such field '%s'"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QWizard::wizardStyle     \brief the look and feel of the wizard      By default, QWizard uses the AeroStyle on a Windows Vista system with alpha compositing     enabled, regardless of the current widget style. If this is not the case, the default     wizard style depends on the current widget style as follows: MacStyle is the default if     the current widget style is QMacStyle, ModernStyle is the default if the current widget     style is QWindowsStyle, and ClassicStyle is the default in all other cases.      \sa {Wizard Look and Feel}, options */
end_comment
begin_function
DECL|function|setWizardStyle
name|void
name|QWizard
operator|::
name|setWizardStyle
parameter_list|(
name|WizardStyle
name|style
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|styleChange
init|=
name|style
operator|!=
name|d
operator|->
name|wizStyle
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
specifier|const
name|bool
name|aeroStyleChange
init|=
name|d
operator|->
name|vistaInitPending
operator|||
name|d
operator|->
name|vistaStateChanged
operator|||
operator|(
name|styleChange
operator|&&
operator|(
name|style
operator|==
name|AeroStyle
operator|||
name|d
operator|->
name|wizStyle
operator|==
name|AeroStyle
operator|)
operator|)
decl_stmt|;
name|d
operator|->
name|vistaStateChanged
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|vistaInitPending
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|styleChange
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
operator|||
name|aeroStyleChange
endif|#
directive|endif
condition|)
block|{
name|d
operator|->
name|disableUpdates
argument_list|()
expr_stmt|;
name|d
operator|->
name|wizStyle
operator|=
name|style
expr_stmt|;
name|d
operator|->
name|updateButtonTexts
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateLayout
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
name|d
operator|->
name|enableUpdates
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
if|if
condition|(
name|aeroStyleChange
condition|)
name|d
operator|->
name|handleAeroStyleChange
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|wizardStyle
name|QWizard
operator|::
name|WizardStyle
name|QWizard
operator|::
name|wizardStyle
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|wizStyle
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the given \a option to be enabled if \a on is true;     otherwise, clears the given \a option.      \sa options, testOption(), setWizardStyle() */
end_comment
begin_function
DECL|function|setOption
name|void
name|QWizard
operator|::
name|setOption
parameter_list|(
name|WizardOption
name|option
parameter_list|,
name|bool
name|on
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|opts
operator|&
name|option
operator|)
operator|!=
operator|!
name|on
condition|)
name|setOptions
argument_list|(
name|d
operator|->
name|opts
operator|^
name|option
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the given \a option is enabled; otherwise, returns     false.      \sa options, setOption(), setWizardStyle() */
end_comment
begin_function
DECL|function|testOption
name|bool
name|QWizard
operator|::
name|testOption
parameter_list|(
name|WizardOption
name|option
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|opts
operator|&
name|option
operator|)
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \property QWizard::options     \brief the various options that affect the look and feel of the wizard      By default, the following options are set (depending on the platform):      \list     \li Windows: HelpButtonOnRight.     \li Mac OS X: NoDefaultButton and NoCancelButton.     \li X11 and QWS (Qt for Embedded Linux): none.     \endlist      \sa wizardStyle */
end_comment
begin_function
DECL|function|setOptions
name|void
name|QWizard
operator|::
name|setOptions
parameter_list|(
name|WizardOptions
name|options
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|WizardOptions
name|changed
init|=
operator|(
name|options
operator|^
name|d
operator|->
name|opts
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|changed
condition|)
return|return;
name|d
operator|->
name|disableUpdates
argument_list|()
expr_stmt|;
name|d
operator|->
name|opts
operator|=
name|options
expr_stmt|;
if|if
condition|(
operator|(
name|changed
operator|&
name|IndependentPages
operator|)
operator|&&
operator|!
operator|(
name|d
operator|->
name|opts
operator|&
name|IndependentPages
operator|)
condition|)
name|d
operator|->
name|cleanupPagesNotInHistory
argument_list|()
expr_stmt|;
if|if
condition|(
name|changed
operator|&
operator|(
name|NoDefaultButton
operator||
name|HaveHelpButton
operator||
name|HelpButtonOnRight
operator||
name|NoCancelButton
operator||
name|CancelButtonOnLeft
operator||
name|HaveCustomButton1
operator||
name|HaveCustomButton2
operator||
name|HaveCustomButton3
operator|)
condition|)
block|{
name|d
operator|->
name|updateButtonLayout
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|changed
operator|&
operator|(
name|NoBackButtonOnStartPage
operator||
name|NoBackButtonOnLastPage
operator||
name|HaveNextButtonOnLastPage
operator||
name|HaveFinishButtonOnEarlyPages
operator||
name|DisabledBackButtonOnLastPage
operator|)
condition|)
block|{
name|d
operator|->
name|_q_updateButtonStates
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|enableUpdates
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|options
name|QWizard
operator|::
name|WizardOptions
name|QWizard
operator|::
name|options
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|opts
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the text on button \a which to be \a text.      By default, the text on buttons depends on the wizardStyle. For     example, on Mac OS X, the \gui Next button is called \gui     Continue.      To add extra buttons to the wizard (e.g., a \gui Print button),     one way is to call setButtonText() with CustomButton1,     CustomButton2, or CustomButton3 to set their text, and make the     buttons visible using the HaveCustomButton1, HaveCustomButton2,     and/or HaveCustomButton3 options.      Button texts may also be set on a per-page basis using QWizardPage::setButtonText().      \sa setButton(), button(), setButtonLayout(), setOptions(), QWizardPage::setButtonText() */
end_comment
begin_function
DECL|function|setButtonText
name|void
name|QWizard
operator|::
name|setButtonText
parameter_list|(
name|WizardButton
name|which
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|ensureButton
argument_list|(
name|which
argument_list|)
condition|)
return|return;
name|d
operator|->
name|buttonCustomTexts
operator|.
name|insert
argument_list|(
name|which
argument_list|,
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|currentPage
argument_list|()
operator|||
operator|!
name|currentPage
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|buttonCustomTexts
operator|.
name|contains
argument_list|(
name|which
argument_list|)
condition|)
name|d
operator|->
name|btns
index|[
name|which
index|]
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the text on button \a which.      If a text has ben set using setButtonText(), this text is returned.      By default, the text on buttons depends on the wizardStyle. For     example, on Mac OS X, the \gui Next button is called \gui     Continue.      \sa button(), setButton(), setButtonText(), QWizardPage::buttonText(),     QWizardPage::setButtonText() */
end_comment
begin_function
DECL|function|buttonText
name|QString
name|QWizard
operator|::
name|buttonText
parameter_list|(
name|WizardButton
name|which
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|ensureButton
argument_list|(
name|which
argument_list|)
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|d
operator|->
name|buttonCustomTexts
operator|.
name|contains
argument_list|(
name|which
argument_list|)
condition|)
return|return
name|d
operator|->
name|buttonCustomTexts
operator|.
name|value
argument_list|(
name|which
argument_list|)
return|;
specifier|const
name|QString
name|defText
init|=
name|buttonDefaultText
argument_list|(
name|d
operator|->
name|wizStyle
argument_list|,
name|which
argument_list|,
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|defText
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|defText
return|;
return|return
name|d
operator|->
name|btns
index|[
name|which
index|]
operator|->
name|text
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the order in which buttons are displayed to \a layout, where     \a layout is a list of \l{WizardButton}s.      The default layout depends on the options (e.g., whether     HelpButtonOnRight) that are set. You can call this function if     you need more control over the buttons' layout than what \l     options already provides.      You can specify horizontal stretches in the layout using \l     Stretch.      Example:      \snippet doc/src/snippets/code/src_gui_dialogs_qwizard.cpp 1      \sa setButton(), setButtonText(), setOptions() */
end_comment
begin_function
DECL|function|setButtonLayout
name|void
name|QWizard
operator|::
name|setButtonLayout
parameter_list|(
specifier|const
name|QList
argument_list|<
name|WizardButton
argument_list|>
modifier|&
name|layout
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layout
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|WizardButton
name|button1
init|=
name|layout
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|button1
operator|==
name|NoButton
operator|||
name|button1
operator|==
name|Stretch
condition|)
continue|continue;
if|if
condition|(
operator|!
name|d
operator|->
name|ensureButton
argument_list|(
name|button1
argument_list|)
condition|)
return|return;
comment|// O(n^2), but n is very small
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
operator|++
name|j
control|)
block|{
name|WizardButton
name|button2
init|=
name|layout
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|button2
operator|==
name|button1
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWizard::setButtonLayout: Duplicate button in layout"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|d
operator|->
name|buttonsHaveCustomLayout
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|buttonsCustomLayout
operator|=
name|layout
expr_stmt|;
name|d
operator|->
name|updateButtonLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the button corresponding to role \a which to \a button.      To add extra buttons to the wizard (e.g., a \gui Print button),     one way is to call setButton() with CustomButton1 to     CustomButton3, and make the buttons visible using the     HaveCustomButton1 to HaveCustomButton3 options.      \sa setButtonText(), setButtonLayout(), options */
end_comment
begin_function
DECL|function|setButton
name|void
name|QWizard
operator|::
name|setButton
parameter_list|(
name|WizardButton
name|which
parameter_list|,
name|QAbstractButton
modifier|*
name|button
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
name|uint
argument_list|(
name|which
argument_list|)
operator|>=
name|NButtons
operator|||
name|d
operator|->
name|btns
index|[
name|which
index|]
operator|==
name|button
condition|)
return|return;
if|if
condition|(
name|QAbstractButton
modifier|*
name|oldButton
init|=
name|d
operator|->
name|btns
index|[
name|which
index|]
condition|)
block|{
name|d
operator|->
name|buttonLayout
operator|->
name|removeWidget
argument_list|(
name|oldButton
argument_list|)
expr_stmt|;
operator|delete
name|oldButton
expr_stmt|;
block|}
name|d
operator|->
name|btns
index|[
name|which
index|]
operator|=
name|button
expr_stmt|;
if|if
condition|(
name|button
condition|)
block|{
name|button
operator|->
name|setParent
argument_list|(
name|d
operator|->
name|antiFlickerWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttonCustomTexts
operator|.
name|insert
argument_list|(
name|which
argument_list|,
name|button
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|connectButton
argument_list|(
name|which
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|buttonCustomTexts
operator|.
name|remove
argument_list|(
name|which
argument_list|)
expr_stmt|;
comment|// ### what about page-specific texts set for 'which'
name|d
operator|->
name|ensureButton
argument_list|(
name|which
argument_list|)
expr_stmt|;
comment|// (QWizardPage::setButtonText())? Clear them as well?
block|}
name|d
operator|->
name|updateButtonLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the button corresponding to role \a which.      \sa setButton(), setButtonText() */
end_comment
begin_function
DECL|function|button
name|QAbstractButton
modifier|*
name|QWizard
operator|::
name|button
parameter_list|(
name|WizardButton
name|which
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
if|if
condition|(
name|d
operator|->
name|wizStyle
operator|==
name|AeroStyle
operator|&&
name|which
operator|==
name|BackButton
condition|)
return|return
name|d
operator|->
name|vistaHelper
operator|->
name|backButton
argument_list|()
return|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|d
operator|->
name|ensureButton
argument_list|(
name|which
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
name|d
operator|->
name|btns
index|[
name|which
index|]
return|;
block|}
end_function
begin_comment
comment|/*!     \property QWizard::titleFormat     \brief the text format used by page titles      The default format is Qt::AutoText.      \sa QWizardPage::title, subTitleFormat */
end_comment
begin_function
DECL|function|setTitleFormat
name|void
name|QWizard
operator|::
name|setTitleFormat
parameter_list|(
name|Qt
operator|::
name|TextFormat
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|d
operator|->
name|titleFmt
operator|=
name|format
expr_stmt|;
name|d
operator|->
name|updateLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|titleFormat
name|Qt
operator|::
name|TextFormat
name|QWizard
operator|::
name|titleFormat
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|titleFmt
return|;
block|}
end_function
begin_comment
comment|/*!     \property QWizard::subTitleFormat     \brief the text format used by page subtitles      The default format is Qt::AutoText.      \sa QWizardPage::title, titleFormat */
end_comment
begin_function
DECL|function|setSubTitleFormat
name|void
name|QWizard
operator|::
name|setSubTitleFormat
parameter_list|(
name|Qt
operator|::
name|TextFormat
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|d
operator|->
name|subTitleFmt
operator|=
name|format
expr_stmt|;
name|d
operator|->
name|updateLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subTitleFormat
name|Qt
operator|::
name|TextFormat
name|QWizard
operator|::
name|subTitleFormat
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|subTitleFmt
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the pixmap for role \a which to \a pixmap.      The pixmaps are used by QWizard when displaying a page. Which     pixmaps are actually used depend on the \l{Wizard Look and     Feel}{wizard style}.      Pixmaps can also be set for a specific page using     QWizardPage::setPixmap().      \sa QWizardPage::setPixmap(), {Elements of a Wizard Page} */
end_comment
begin_function
DECL|function|setPixmap
name|void
name|QWizard
operator|::
name|setPixmap
parameter_list|(
name|WizardPixmap
name|which
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|uint
argument_list|(
name|which
argument_list|)
operator|<
name|NPixmaps
argument_list|)
expr_stmt|;
name|d
operator|->
name|defaultPixmaps
index|[
name|which
index|]
operator|=
name|pixmap
expr_stmt|;
name|d
operator|->
name|updatePixmap
argument_list|(
name|which
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the pixmap set for role \a which.      By default, the only pixmap that is set is the BackgroundPixmap on     Mac OS X.      \sa QWizardPage::pixmap(), {Elements of a Wizard Page} */
end_comment
begin_function
DECL|function|pixmap
name|QPixmap
name|QWizard
operator|::
name|pixmap
parameter_list|(
name|WizardPixmap
name|which
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|uint
argument_list|(
name|which
argument_list|)
operator|<
name|NPixmaps
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
name|which
operator|==
name|BackgroundPixmap
operator|&&
name|d
operator|->
name|defaultPixmaps
index|[
name|BackgroundPixmap
index|]
operator|.
name|isNull
argument_list|()
condition|)
name|d
operator|->
name|defaultPixmaps
index|[
name|BackgroundPixmap
index|]
operator|=
name|d
operator|->
name|findDefaultBackgroundPixmap
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
name|d
operator|->
name|defaultPixmaps
index|[
name|which
index|]
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the default property for \a className to be \a property,     and the associated change signal to be \a changedSignal.      The default property is used when an instance of \a className (or     of one of its subclasses) is passed to     QWizardPage::registerField() and no property is specified.      QWizard knows the most common Qt widgets. For these (or their     subclasses), you don't need to specify a \a property or a \a     changedSignal. The table below lists these widgets:      \table     \header \li Widget          \li Property                            \li Change Notification Signal     \row    \li QAbstractButton \li bool \l{QAbstractButton::}{checked} \li \l{QAbstractButton::}{toggled()}     \row    \li QAbstractSlider \li int \l{QAbstractSlider::}{value}    \li \l{QAbstractSlider::}{valueChanged()}     \row    \li QComboBox       \li int \l{QComboBox::}{currentIndex}   \li \l{QComboBox::}{currentIndexChanged()}     \row    \li QDateTimeEdit   \li QDateTime \l{QDateTimeEdit::}{dateTime} \li \l{QDateTimeEdit::}{dateTimeChanged()}     \row    \li QLineEdit       \li QString \l{QLineEdit::}{text}       \li \l{QLineEdit::}{textChanged()}     \row    \li QListWidget     \li int \l{QListWidget::}{currentRow}   \li \l{QListWidget::}{currentRowChanged()}     \row    \li QSpinBox        \li int \l{QSpinBox::}{value}           \li \l{QSpinBox::}{valueChanged()}     \endtable      \sa QWizardPage::registerField() */
end_comment
begin_function
DECL|function|setDefaultProperty
name|void
name|QWizard
operator|::
name|setDefaultProperty
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|property
parameter_list|,
specifier|const
name|char
modifier|*
name|changedSignal
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|d
operator|->
name|defaultPropertyTable
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|qstrcmp
argument_list|(
name|d
operator|->
name|defaultPropertyTable
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|className
argument_list|,
name|className
argument_list|)
operator|==
literal|0
condition|)
block|{
name|d
operator|->
name|defaultPropertyTable
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|d
operator|->
name|defaultPropertyTable
operator|.
name|append
argument_list|(
name|QWizardDefaultProperty
argument_list|(
name|className
argument_list|,
name|property
argument_list|,
name|changedSignal
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.7      Sets the given \a widget to be shown on the left side of the wizard.     For styles which use the WatermarkPixmap (ClassicStyle and ModernStyle)     the side widget is displayed on top of the watermark, for other styles     or when the watermark is not provided the side widget is displayed     on the left side of the wizard.      Passing 0 shows no side widget.      When the \a widget is not 0 the wizard reparents it.      Any previous side widget is hidden.      You may call setSideWidget() with the same widget at different     times.      All widgets set here will be deleted by the wizard when it is     destroyed unless you separately reparent the widget after setting     some other side widget (or 0).      By default, no side widget is present. */
end_comment
begin_function
DECL|function|setSideWidget
name|void
name|QWizard
operator|::
name|setSideWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|d
operator|->
name|sideWidget
operator|=
name|widget
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|watermarkLabel
condition|)
block|{
name|d
operator|->
name|watermarkLabel
operator|->
name|setSideWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateLayout
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.7      Returns the widget on the left side of the wizard or 0.      By default, no side widget is present. */
end_comment
begin_function
DECL|function|sideWidget
name|QWidget
modifier|*
name|QWizard
operator|::
name|sideWidget
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sideWidget
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setVisible
name|void
name|QWizard
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
name|visible
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|current
operator|==
operator|-
literal|1
condition|)
name|restart
argument_list|()
expr_stmt|;
block|}
name|QDialog
operator|::
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QWizard
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizard
argument_list|)
expr_stmt|;
name|QSize
name|result
init|=
name|d
operator|->
name|mainLayout
operator|->
name|totalSizeHint
argument_list|()
decl_stmt|;
name|QSize
name|extra
argument_list|(
literal|500
argument_list|,
literal|360
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|wizStyle
operator|==
name|MacStyle
operator|&&
name|d
operator|->
name|current
operator|!=
operator|-
literal|1
condition|)
block|{
name|QSize
name|pixmap
argument_list|(
name|currentPage
argument_list|()
operator|->
name|pixmap
argument_list|(
name|BackgroundPixmap
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|extra
operator|.
name|setWidth
argument_list|(
literal|616
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|extra
operator|.
name|setHeight
argument_list|(
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|/*                 The width isn't always reliable as a size hint, as                 some wizard backgrounds just cover the leftmost area.                 Use a rule of thumb to determine if the width is                 reliable or not.             */
if|if
condition|(
name|pixmap
operator|.
name|width
argument_list|()
operator|>=
name|pixmap
operator|.
name|height
argument_list|()
condition|)
name|extra
operator|.
name|setWidth
argument_list|(
name|pixmap
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|expandedTo
argument_list|(
name|extra
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QWizard::currentIdChanged(int id)      This signal is emitted when the current page changes, with the new     current \a id.      \sa currentId(), currentPage() */
end_comment
begin_comment
comment|/*!     \fn void QWizard::pageAdded(int id)      \since 4.7      This signal is emitted whenever a page is added to the     wizard. The page's \a id is passed as parameter.      \sa addPage(), setPage(), startId() */
end_comment
begin_comment
comment|/*!     \fn void QWizard::pageRemoved(int id)      \since 4.7      This signal is emitted whenever a page is removed from the     wizard. The page's \a id is passed as parameter.      \sa removePage(), startId() */
end_comment
begin_comment
comment|/*!     \fn void QWizard::helpRequested()      This signal is emitted when the user clicks the \gui Help button.      By default, no \gui Help button is shown. Call     setOption(HaveHelpButton, true) to have one.      Example:      \snippet examples/dialogs/licensewizard/licensewizard.cpp 0     \dots     \snippet examples/dialogs/licensewizard/licensewizard.cpp 5     \snippet examples/dialogs/licensewizard/licensewizard.cpp 7     \dots     \snippet examples/dialogs/licensewizard/licensewizard.cpp 8     \codeline     \snippet examples/dialogs/licensewizard/licensewizard.cpp 10     \dots     \snippet examples/dialogs/licensewizard/licensewizard.cpp 12     \codeline     \snippet examples/dialogs/licensewizard/licensewizard.cpp 14     \codeline     \snippet examples/dialogs/licensewizard/licensewizard.cpp 15      \sa customButtonClicked() */
end_comment
begin_comment
comment|/*!     \fn void QWizard::customButtonClicked(int which)      This signal is emitted when the user clicks a custom button. \a     which can be CustomButton1, CustomButton2, or CustomButton3.      By default, no custom button is shown. Call setOption() with     HaveCustomButton1, HaveCustomButton2, or HaveCustomButton3 to have     one, and use setButtonText() or setButton() to configure it.      \sa helpRequested() */
end_comment
begin_comment
comment|/*!     Goes back to the previous page.      This is equivalent to pressing the \gui Back button.      \sa next(), accept(), reject(), restart() */
end_comment
begin_function
DECL|function|back
name|void
name|QWizard
operator|::
name|back
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|d
operator|->
name|history
operator|.
name|count
argument_list|()
operator|-
literal|2
decl_stmt|;
if|if
condition|(
name|n
operator|<
literal|0
condition|)
return|return;
name|d
operator|->
name|switchToPage
argument_list|(
name|d
operator|->
name|history
operator|.
name|at
argument_list|(
name|n
argument_list|)
argument_list|,
name|QWizardPrivate
operator|::
name|Backward
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Advances to the next page.      This is equivalent to pressing the \gui Next or \gui Commit button.      \sa nextId(), back(), accept(), reject(), restart() */
end_comment
begin_function
DECL|function|next
name|void
name|QWizard
operator|::
name|next
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|current
operator|==
operator|-
literal|1
condition|)
return|return;
if|if
condition|(
name|validateCurrentPage
argument_list|()
condition|)
block|{
name|int
name|next
init|=
name|nextId
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|history
operator|.
name|contains
argument_list|(
name|next
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWizard::next: Page %d already met"
argument_list|,
name|next
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|pageMap
operator|.
name|contains
argument_list|(
name|next
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWizard::next: No such page %d"
argument_list|,
name|next
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|switchToPage
argument_list|(
name|next
argument_list|,
name|QWizardPrivate
operator|::
name|Forward
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     Restarts the wizard at the start page. This function is called automatically when the     wizard is shown.      \sa startId() */
end_comment
begin_function
DECL|function|restart
name|void
name|QWizard
operator|::
name|restart
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|d
operator|->
name|disableUpdates
argument_list|()
expr_stmt|;
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
name|d
operator|->
name|switchToPage
argument_list|(
name|startId
argument_list|()
argument_list|,
name|QWizardPrivate
operator|::
name|Forward
argument_list|)
expr_stmt|;
name|d
operator|->
name|enableUpdates
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QWizard
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StyleChange
condition|)
block|{
comment|// Propagate style
name|d
operator|->
name|setStyle
argument_list|(
name|style
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateLayout
argument_list|()
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Show
operator|&&
name|d
operator|->
name|vistaInitPending
condition|)
block|{
name|d
operator|->
name|vistaInitPending
operator|=
literal|false
expr_stmt|;
comment|// Do not force AeroStyle when in Classic theme.
comment|// Note that d->handleAeroStyleChange() needs to be called in any case as it does some
comment|// necessary initialization, like ensures that the Aero specific back button is hidden if
comment|// Aero theme isn't active.
if|if
condition|(
name|QVistaHelper
operator|::
name|vistaState
argument_list|()
operator|!=
name|QVistaHelper
operator|::
name|Classic
condition|)
name|d
operator|->
name|wizStyle
operator|=
name|AeroStyle
expr_stmt|;
name|d
operator|->
name|handleAeroStyleChange
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|isVistaThemeEnabled
argument_list|()
condition|)
block|{
name|d
operator|->
name|vistaHelper
operator|->
name|mouseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|QDialog
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QWizard
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
name|int
name|heightOffset
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
if|if
condition|(
name|d
operator|->
name|isVistaThemeEnabled
argument_list|()
condition|)
block|{
name|heightOffset
operator|=
name|d
operator|->
name|vistaHelper
operator|->
name|topOffset
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isVistaThemeEnabled
argument_list|(
name|QVistaHelper
operator|::
name|VistaAero
argument_list|)
condition|)
name|heightOffset
operator|+=
name|d
operator|->
name|vistaHelper
operator|->
name|titleBarSize
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|d
operator|->
name|antiFlickerWidget
operator|->
name|resize
argument_list|(
name|event
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|event
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|-
name|heightOffset
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
if|if
condition|(
name|d
operator|->
name|isVistaThemeEnabled
argument_list|()
condition|)
name|d
operator|->
name|vistaHelper
operator|->
name|resizeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QDialog
operator|::
name|resizeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QWizard
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|wizStyle
operator|==
name|MacStyle
operator|&&
name|currentPage
argument_list|()
condition|)
block|{
name|QPixmap
name|backgroundPixmap
init|=
name|currentPage
argument_list|()
operator|->
name|pixmap
argument_list|(
name|BackgroundPixmap
argument_list|)
decl_stmt|;
if|if
condition|(
name|backgroundPixmap
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|painter
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
operator|(
name|height
argument_list|()
operator|-
name|backgroundPixmap
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
name|backgroundPixmap
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
elseif|else
if|if
condition|(
name|d
operator|->
name|isVistaThemeEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|isVistaThemeEnabled
argument_list|(
name|QVistaHelper
operator|::
name|VistaBasic
argument_list|)
condition|)
block|{
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QColor
name|color
init|=
name|d
operator|->
name|vistaHelper
operator|->
name|basicWindowFrameColor
argument_list|()
decl_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|QVistaHelper
operator|::
name|topOffset
argument_list|()
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|vistaHelper
operator|->
name|paintEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|nativeEvent
name|bool
name|QWizard
operator|::
name|nativeEvent
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|eventType
parameter_list|,
name|void
modifier|*
name|message
parameter_list|,
name|long
modifier|*
name|result
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isVistaThemeEnabled
argument_list|()
operator|&&
name|eventType
operator|==
name|QByteArrayLiteral
argument_list|(
literal|"windows_generic_MSG"
argument_list|)
condition|)
block|{
name|MSG
modifier|*
name|windowsMessage
init|=
cast|static_cast
argument_list|<
name|MSG
operator|*
argument_list|>
argument_list|(
name|message
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|winEventResult
init|=
name|d
operator|->
name|vistaHelper
operator|->
name|handleWinEvent
argument_list|(
name|windowsMessage
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|QVistaHelper
operator|::
name|vistaState
argument_list|()
operator|!=
name|d
operator|->
name|vistaState
condition|)
block|{
name|d
operator|->
name|vistaState
operator|=
name|QVistaHelper
operator|::
name|vistaState
argument_list|()
expr_stmt|;
name|d
operator|->
name|vistaStateChanged
operator|=
literal|true
expr_stmt|;
name|setWizardStyle
argument_list|(
name|AeroStyle
argument_list|)
expr_stmt|;
block|}
return|return
name|winEventResult
return|;
block|}
else|else
block|{
return|return
name|QDialog
operator|::
name|nativeEvent
argument_list|(
name|eventType
argument_list|,
name|message
argument_list|,
name|result
argument_list|)
return|;
block|}
else|#
directive|else
return|return
name|QDialog
operator|::
name|nativeEvent
argument_list|(
name|eventType
argument_list|,
name|message
argument_list|,
name|result
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|done
name|void
name|QWizard
operator|::
name|done
parameter_list|(
name|int
name|result
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizard
argument_list|)
expr_stmt|;
comment|// canceling leaves the wizard in a known state
if|if
condition|(
name|result
operator|==
name|Rejected
condition|)
block|{
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|validateCurrentPage
argument_list|()
condition|)
return|return;
block|}
name|QDialog
operator|::
name|done
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QWizard::initializePage(int id)      This virtual function is called by QWizard to prepare page \a id     just before it is shown either as a result of QWizard::restart()     being called, or as a result of the user clicking \gui Next. (However, if the \l     QWizard::IndependentPages option is set, this function is only     called the first time the page is shown.)      By reimplementing this function, you can ensure that the page's     fields are properly initialized based on fields from previous     pages.      The default implementation calls QWizardPage::initializePage() on     page(\a id).      \sa QWizardPage::initializePage(), cleanupPage() */
end_comment
begin_function
DECL|function|initializePage
name|void
name|QWizard
operator|::
name|initializePage
parameter_list|(
name|int
name|theid
parameter_list|)
block|{
name|QWizardPage
modifier|*
name|page
init|=
name|this
operator|->
name|page
argument_list|(
name|theid
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
condition|)
name|page
operator|->
name|initializePage
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QWizard::cleanupPage(int id)      This virtual function is called by QWizard to clean up page \a id just before the     user leaves it by clicking \gui Back (unless the \l QWizard::IndependentPages option is set).      The default implementation calls QWizardPage::cleanupPage() on     page(\a id).      \sa QWizardPage::cleanupPage(), initializePage() */
end_comment
begin_function
DECL|function|cleanupPage
name|void
name|QWizard
operator|::
name|cleanupPage
parameter_list|(
name|int
name|theid
parameter_list|)
block|{
name|QWizardPage
modifier|*
name|page
init|=
name|this
operator|->
name|page
argument_list|(
name|theid
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
condition|)
name|page
operator|->
name|cleanupPage
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This virtual function is called by QWizard when the user clicks     \gui Next or \gui Finish to perform some last-minute validation.     If it returns true, the next page is shown (or the wizard     finishes); otherwise, the current page stays up.      The default implementation calls QWizardPage::validatePage() on     the currentPage().      When possible, it is usually better style to disable the \gui     Next or \gui Finish button (by specifying \l{mandatory fields} or     by reimplementing QWizardPage::isComplete()) than to reimplement     validateCurrentPage().      \sa QWizardPage::validatePage(), currentPage() */
end_comment
begin_function
DECL|function|validateCurrentPage
name|bool
name|QWizard
operator|::
name|validateCurrentPage
parameter_list|()
block|{
name|QWizardPage
modifier|*
name|page
init|=
name|currentPage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|page
condition|)
return|return
literal|true
return|;
return|return
name|page
operator|->
name|validatePage
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     This virtual function is called by QWizard to find out which page     to show when the user clicks the \gui Next button.      The return value is the ID of the next page, or -1 if no page follows.      The default implementation calls QWizardPage::nextId() on the     currentPage().      By reimplementing this function, you can specify a dynamic page     order.      \sa QWizardPage::nextId(), currentPage() */
end_comment
begin_function
DECL|function|nextId
name|int
name|QWizard
operator|::
name|nextId
parameter_list|()
specifier|const
block|{
specifier|const
name|QWizardPage
modifier|*
name|page
init|=
name|currentPage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|page
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|page
operator|->
name|nextId
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWizardPage     \since 4.3     \brief The QWizardPage class is the base class for wizard pages.      \inmodule QtWidgets      QWizard represents a wizard. Each page is a QWizardPage. When     you create your own wizards, you can use QWizardPage directly,     or you can subclass it for more control.      A page has the following attributes, which are rendered by     QWizard: a \l title, a \l subTitle, and a \l{setPixmap()}{set of     pixmaps}. See \l{Elements of a Wizard Page} for details. Once a     page is added to the wizard (using QWizard::addPage() or     QWizard::setPage()), wizard() returns a pointer to the     associated QWizard object.      Page provides five virtual functions that can be reimplemented to     provide custom behavior:      \list     \li initializePage() is called to initialize the page's contents        when the user clicks the wizard's \gui Next button. If you        want to derive the page's default from what the user entered        on previous pages, this is the function to reimplement.     \li cleanupPage() is called to reset the page's contents when the        user clicks the wizard's \gui Back button.     \li validatePage() validates the page when the user clicks \gui        Next or \gui Finish. It is often used to show an error message        if the user has entered incomplete or invalid information.     \li nextId() returns the ID of the next page. It is useful when        \l{creating non-linear wizards}, which allow different        traversal paths based on the information provided by the user.     \li isComplete() is called to determine whether the \gui Next        and/or \gui Finish button should be enabled or disabled. If        you reimplement isComplete(), also make sure that        completeChanged() is emitted whenever the complete state        changes.     \endlist      Normally, the \gui Next button and the \gui Finish button of a     wizard are mutually exclusive. If isFinalPage() returns true, \gui     Finish is available; otherwise, \gui Next is available. By     default, isFinalPage() is true only when nextId() returns -1. If     you want to show \gui Next and \gui Final simultaneously for a     page (letting the user perform an "early finish"), call     setFinalPage(true) on that page. For wizards that support early     finishes, you might also want to set the     \l{QWizard::}{HaveNextButtonOnLastPage} and     \l{QWizard::}{HaveFinishButtonOnEarlyPages} options on the     wizard.      In many wizards, the contents of a page may affect the default     values of the fields of a later page. To make it easy to     communicate between pages, QWizard supports a \l{Registering and     Using Fields}{"field" mechanism} that allows you to register a     field (e.g., a QLineEdit) on a page and to access its value from     any page. Fields are global to the entire wizard and make it easy     for any single page to access information stored by another page,     without having to put all the logic in QWizard or having the     pages know explicitly about each other. Fields are registered     using registerField() and can be accessed at any time using     field() and setField().      \sa QWizard, {Class Wizard Example}, {License Wizard Example} */
end_comment
begin_comment
comment|/*!     Constructs a wizard page with the given \a parent.      When the page is inserted into a wizard using QWizard::addPage()     or QWizard::setPage(), the parent is automatically set to be the     wizard.      \sa wizard() */
end_comment
begin_constructor
DECL|function|QWizardPage
name|QWizardPage
operator|::
name|QWizardPage
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QWizardPagePrivate
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|completeChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_updateCachedCompleteState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \property QWizardPage::title     \brief the title of the page      The title is shown by the QWizard, above the actual page. All     pages should have a title.      The title may be plain text or HTML, depending on the value of the     \l{QWizard::titleFormat} property.      By default, this property contains an empty string.      \sa subTitle, {Elements of a Wizard Page} */
end_comment
begin_function
DECL|function|setTitle
name|void
name|QWizardPage
operator|::
name|setTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizardPage
argument_list|)
expr_stmt|;
name|d
operator|->
name|title
operator|=
name|title
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|wizard
operator|&&
name|d
operator|->
name|wizard
operator|->
name|currentPage
argument_list|()
operator|==
name|this
condition|)
name|d
operator|->
name|wizard
operator|->
name|d_func
argument_list|()
operator|->
name|updateLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|title
name|QString
name|QWizardPage
operator|::
name|title
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizardPage
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|title
return|;
block|}
end_function
begin_comment
comment|/*!     \property QWizardPage::subTitle     \brief the subtitle of the page      The subtitle is shown by the QWizard, between the title and the     actual page. Subtitles are optional. In     \l{QWizard::ClassicStyle}{ClassicStyle} and     \l{QWizard::ModernStyle}{ModernStyle}, using subtitles is     necessary to make the header appear. In     \l{QWizard::MacStyle}{MacStyle}, the subtitle is shown as a text     label just above the actual page.      The subtitle may be plain text or HTML, depending on the value of     the \l{QWizard::subTitleFormat} property.      By default, this property contains an empty string.      \sa title, QWizard::IgnoreSubTitles, {Elements of a Wizard Page} */
end_comment
begin_function
DECL|function|setSubTitle
name|void
name|QWizardPage
operator|::
name|setSubTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|subTitle
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizardPage
argument_list|)
expr_stmt|;
name|d
operator|->
name|subTitle
operator|=
name|subTitle
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|wizard
operator|&&
name|d
operator|->
name|wizard
operator|->
name|currentPage
argument_list|()
operator|==
name|this
condition|)
name|d
operator|->
name|wizard
operator|->
name|d_func
argument_list|()
operator|->
name|updateLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subTitle
name|QString
name|QWizardPage
operator|::
name|subTitle
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizardPage
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|subTitle
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the pixmap for role \a which to \a pixmap.      The pixmaps are used by QWizard when displaying a page. Which     pixmaps are actually used depend on the \l{Wizard Look and     Feel}{wizard style}.      Pixmaps can also be set for the entire wizard using     QWizard::setPixmap(), in which case they apply for all pages that     don't specify a pixmap.      \sa QWizard::setPixmap(), {Elements of a Wizard Page} */
end_comment
begin_function
DECL|function|setPixmap
name|void
name|QWizardPage
operator|::
name|setPixmap
parameter_list|(
name|QWizard
operator|::
name|WizardPixmap
name|which
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizardPage
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|uint
argument_list|(
name|which
argument_list|)
operator|<
name|QWizard
operator|::
name|NPixmaps
argument_list|)
expr_stmt|;
name|d
operator|->
name|pixmaps
index|[
name|which
index|]
operator|=
name|pixmap
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|wizard
operator|&&
name|d
operator|->
name|wizard
operator|->
name|currentPage
argument_list|()
operator|==
name|this
condition|)
name|d
operator|->
name|wizard
operator|->
name|d_func
argument_list|()
operator|->
name|updatePixmap
argument_list|(
name|which
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the pixmap set for role \a which.      Pixmaps can also be set for the entire wizard using     QWizard::setPixmap(), in which case they apply for all pages that     don't specify a pixmap.      \sa QWizard::pixmap(), {Elements of a Wizard Page} */
end_comment
begin_function
DECL|function|pixmap
name|QPixmap
name|QWizardPage
operator|::
name|pixmap
parameter_list|(
name|QWizard
operator|::
name|WizardPixmap
name|which
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizardPage
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|uint
argument_list|(
name|which
argument_list|)
operator|<
name|QWizard
operator|::
name|NPixmaps
argument_list|)
expr_stmt|;
specifier|const
name|QPixmap
modifier|&
name|pixmap
init|=
name|d
operator|->
name|pixmaps
index|[
name|which
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|pixmap
return|;
if|if
condition|(
name|wizard
argument_list|()
condition|)
return|return
name|wizard
argument_list|()
operator|->
name|pixmap
argument_list|(
name|which
argument_list|)
return|;
return|return
name|pixmap
return|;
block|}
end_function
begin_comment
comment|/*!     This virtual function is called by QWizard::initializePage() to     prepare the page just before it is shown either as a result of QWizard::restart()     being called, or as a result of the user clicking \gui Next.     (However, if the \l QWizard::IndependentPages option is set, this function is only     called the first time the page is shown.)      By reimplementing this function, you can ensure that the page's     fields are properly initialized based on fields from previous     pages. For example:      \snippet examples/dialogs/classwizard/classwizard.cpp 17      The default implementation does nothing.      \sa QWizard::initializePage(), cleanupPage(), QWizard::IndependentPages */
end_comment
begin_function
DECL|function|initializePage
name|void
name|QWizardPage
operator|::
name|initializePage
parameter_list|()
block|{ }
end_function
begin_comment
comment|/*!     This virtual function is called by QWizard::cleanupPage() when     the user leaves the page by clicking \gui Back (unless the \l QWizard::IndependentPages     option is set).      The default implementation resets the page's fields to their     original values (the values they had before initializePage() was     called).      \sa QWizard::cleanupPage(), initializePage(), QWizard::IndependentPages */
end_comment
begin_function
DECL|function|cleanupPage
name|void
name|QWizardPage
operator|::
name|cleanupPage
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWizardPage
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|wizard
condition|)
block|{
name|QVector
argument_list|<
name|QWizardField
argument_list|>
modifier|&
name|fields
init|=
name|d
operator|->
name|wizard
operator|->
name|d_func
argument_list|()
operator|->
name|fields
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QWizardField
modifier|&
name|field
init|=
name|fields
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|page
operator|==
name|this
condition|)
name|field
operator|.
name|object
operator|->
name|setProperty
argument_list|(
name|field
operator|.
name|property
argument_list|,
name|field
operator|.
name|initialValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     This virtual function is called by QWizard::validateCurrentPage()     when the user clicks \gui Next or \gui Finish to perform some     last-minute validation. If it returns true, the next page is shown     (or the wizard finishes); otherwise, the current page stays up.      The default implementation returns true.      When possible, it is usually better style to disable the \gui     Next or \gui Finish button (by specifying \l{mandatory fields} or     reimplementing isComplete()) than to reimplement validatePage().      \sa QWizard::validateCurrentPage(), isComplete() */
end_comment
begin_function
DECL|function|validatePage
name|bool
name|QWizardPage
operator|::
name|validatePage
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     This virtual function is called by QWizard to determine whether     the \gui Next or \gui Finish button should be enabled or     disabled.      The default implementation returns true if all \l{mandatory     fields} are filled; otherwise, it returns false.      If you reimplement this function, make sure to emit completeChanged(),     from the rest of your implementation, whenever the value of isComplete()     changes. This ensures that QWizard updates the enabled or disabled state of     its buttons. An example of the reimplementation is     available \l{http://qt.nokia.com/doc/qq/qq22-qwizard.html#validatebeforeitstoolate}     {here}.      \sa completeChanged(), isFinalPage() */
end_comment
begin_function
DECL|function|isComplete
name|bool
name|QWizardPage
operator|::
name|isComplete
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizardPage
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|wizard
condition|)
return|return
literal|true
return|;
specifier|const
name|QVector
argument_list|<
name|QWizardField
argument_list|>
modifier|&
name|wizardFields
init|=
name|d
operator|->
name|wizard
operator|->
name|d_func
argument_list|()
operator|->
name|fields
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|wizardFields
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
specifier|const
name|QWizardField
modifier|&
name|field
init|=
name|wizardFields
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|page
operator|==
name|this
operator|&&
name|field
operator|.
name|mandatory
condition|)
block|{
name|QVariant
name|value
init|=
name|field
operator|.
name|object
operator|->
name|property
argument_list|(
name|field
operator|.
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
name|field
operator|.
name|initialValue
condition|)
return|return
literal|false
return|;
ifndef|#
directive|ifndef
name|QT_NO_LINEEDIT
if|if
condition|(
name|QLineEdit
modifier|*
name|lineEdit
init|=
name|qobject_cast
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|field
operator|.
name|object
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|lineEdit
operator|->
name|hasAcceptableInput
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
if|if
condition|(
name|QAbstractSpinBox
modifier|*
name|spinBox
init|=
name|qobject_cast
argument_list|<
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|field
operator|.
name|object
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|spinBox
operator|->
name|hasAcceptableInput
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
endif|#
directive|endif
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Explicitly sets this page to be final if \a finalPage is true.      After calling setFinalPage(true), isFinalPage() returns true and the \gui     Finish button is visible (and enabled if isComplete() returns     true).      After calling setFinalPage(false), isFinalPage() returns true if     nextId() returns -1; otherwise, it returns false.      \sa isComplete(), QWizard::HaveFinishButtonOnEarlyPages */
end_comment
begin_function
DECL|function|setFinalPage
name|void
name|QWizardPage
operator|::
name|setFinalPage
parameter_list|(
name|bool
name|finalPage
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizardPage
argument_list|)
expr_stmt|;
name|d
operator|->
name|explicitlyFinal
operator|=
name|finalPage
expr_stmt|;
name|QWizard
modifier|*
name|wizard
init|=
name|this
operator|->
name|wizard
argument_list|()
decl_stmt|;
if|if
condition|(
name|wizard
operator|&&
name|wizard
operator|->
name|currentPage
argument_list|()
operator|==
name|this
condition|)
name|wizard
operator|->
name|d_func
argument_list|()
operator|->
name|updateCurrentPage
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This function is called by QWizard to determine whether the \gui     Finish button should be shown for this page or not.      By default, it returns true if there is no next page     (i.e., nextId() returns -1); otherwise, it returns false.      By explicitly calling setFinalPage(true), you can let the user perform an     "early finish".      \sa isComplete(), QWizard::HaveFinishButtonOnEarlyPages */
end_comment
begin_function
DECL|function|isFinalPage
name|bool
name|QWizardPage
operator|::
name|isFinalPage
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizardPage
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|explicitlyFinal
condition|)
return|return
literal|true
return|;
name|QWizard
modifier|*
name|wizard
init|=
name|this
operator|->
name|wizard
argument_list|()
decl_stmt|;
if|if
condition|(
name|wizard
operator|&&
name|wizard
operator|->
name|currentPage
argument_list|()
operator|==
name|this
condition|)
block|{
comment|// try to use the QWizard implementation if possible
return|return
name|wizard
operator|->
name|nextId
argument_list|()
operator|==
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|nextId
argument_list|()
operator|==
operator|-
literal|1
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     Sets this page to be a commit page if \a commitPage is true; otherwise,     sets it to be a normal page.      A commit page is a page that represents an action which cannot be undone     by clicking \gui Back or \gui Cancel.      A \gui Commit button replaces the \gui Next button on a commit page. Clicking this     button simply calls QWizard::next() just like clicking \gui Next does.      A page entered directly from a commit page has its \gui Back button disabled.      \sa isCommitPage() */
end_comment
begin_function
DECL|function|setCommitPage
name|void
name|QWizardPage
operator|::
name|setCommitPage
parameter_list|(
name|bool
name|commitPage
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizardPage
argument_list|)
expr_stmt|;
name|d
operator|->
name|commit
operator|=
name|commitPage
expr_stmt|;
name|QWizard
modifier|*
name|wizard
init|=
name|this
operator|->
name|wizard
argument_list|()
decl_stmt|;
if|if
condition|(
name|wizard
operator|&&
name|wizard
operator|->
name|currentPage
argument_list|()
operator|==
name|this
condition|)
name|wizard
operator|->
name|d_func
argument_list|()
operator|->
name|updateCurrentPage
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this page is a commit page; otherwise returns false.      \sa setCommitPage() */
end_comment
begin_function
DECL|function|isCommitPage
name|bool
name|QWizardPage
operator|::
name|isCommitPage
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizardPage
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|commit
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the text on button \a which to be \a text on this page.      By default, the text on buttons depends on the QWizard::wizardStyle,     but may be redefined for the wizard as a whole using QWizard::setButtonText().      \sa buttonText(), QWizard::setButtonText(), QWizard::buttonText() */
end_comment
begin_function
DECL|function|setButtonText
name|void
name|QWizardPage
operator|::
name|setButtonText
parameter_list|(
name|QWizard
operator|::
name|WizardButton
name|which
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizardPage
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttonCustomTexts
operator|.
name|insert
argument_list|(
name|which
argument_list|,
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|wizard
argument_list|()
operator|&&
name|wizard
argument_list|()
operator|->
name|currentPage
argument_list|()
operator|==
name|this
operator|&&
name|wizard
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|btns
index|[
name|which
index|]
condition|)
name|wizard
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|btns
index|[
name|which
index|]
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the text on button \a which on this page.      If a text has ben set using setButtonText(), this text is returned.     Otherwise, if a text has been set using QWizard::setButtonText(),     this text is returned.      By default, the text on buttons depends on the QWizard::wizardStyle.     For example, on Mac OS X, the \gui Next button is called \gui     Continue.      \sa setButtonText(), QWizard::buttonText(), QWizard::setButtonText() */
end_comment
begin_function
DECL|function|buttonText
name|QString
name|QWizardPage
operator|::
name|buttonText
parameter_list|(
name|QWizard
operator|::
name|WizardButton
name|which
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizardPage
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|buttonCustomTexts
operator|.
name|contains
argument_list|(
name|which
argument_list|)
condition|)
return|return
name|d
operator|->
name|buttonCustomTexts
operator|.
name|value
argument_list|(
name|which
argument_list|)
return|;
if|if
condition|(
name|wizard
argument_list|()
condition|)
return|return
name|wizard
argument_list|()
operator|->
name|buttonText
argument_list|(
name|which
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     This virtual function is called by QWizard::nextId() to find     out which page to show when the user clicks the \gui Next button.      The return value is the ID of the next page, or -1 if no page follows.      By default, this function returns the lowest ID greater than the ID     of the current page, or -1 if there is no such ID.      By reimplementing this function, you can specify a dynamic page     order. For example:      \snippet examples/dialogs/licensewizard/licensewizard.cpp 18      \sa QWizard::nextId() */
end_comment
begin_function
DECL|function|nextId
name|int
name|QWizardPage
operator|::
name|nextId
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizardPage
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|wizard
condition|)
return|return
operator|-
literal|1
return|;
name|bool
name|foundCurrentPage
init|=
literal|false
decl_stmt|;
specifier|const
name|QWizardPrivate
operator|::
name|PageMap
modifier|&
name|pageMap
init|=
name|d
operator|->
name|wizard
operator|->
name|d_func
argument_list|()
operator|->
name|pageMap
decl_stmt|;
name|QWizardPrivate
operator|::
name|PageMap
operator|::
name|const_iterator
name|i
init|=
name|pageMap
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QWizardPrivate
operator|::
name|PageMap
operator|::
name|const_iterator
name|end
init|=
name|pageMap
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|i
operator|!=
name|end
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|this
condition|)
block|{
name|foundCurrentPage
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|foundCurrentPage
condition|)
block|{
return|return
name|i
operator|.
name|key
argument_list|()
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QWizardPage::completeChanged()      This signal is emitted whenever the complete state of the page     (i.e., the value of isComplete()) changes.      If you reimplement isComplete(), make sure to emit     completeChanged() whenever the value of isComplete() changes, to     ensure that QWizard updates the enabled or disabled state of its     buttons.      \sa isComplete() */
end_comment
begin_comment
comment|/*!     Sets the value of the field called \a name to \a value.      This function can be used to set fields on any page of the wizard.     It is equivalent to calling     wizard()->\l{QWizard::setField()}{setField(\a name, \a value)}.      \sa QWizard::setField(), field(), registerField() */
end_comment
begin_function
DECL|function|setField
name|void
name|QWizardPage
operator|::
name|setField
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizardPage
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|wizard
condition|)
return|return;
name|d
operator|->
name|wizard
operator|->
name|setField
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the field called \a name.      This function can be used to access fields on any page of the     wizard. It is equivalent to calling     wizard()->\l{QWizard::field()}{field(\a name)}.      Example:      \snippet examples/dialogs/classwizard/classwizard.cpp 17      \sa QWizard::field(), setField(), registerField() */
end_comment
begin_function
DECL|function|field
name|QVariant
name|QWizardPage
operator|::
name|field
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizardPage
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|wizard
condition|)
return|return
name|QVariant
argument_list|()
return|;
return|return
name|d
operator|->
name|wizard
operator|->
name|field
argument_list|(
name|name
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Creates a field called \a name associated with the given \a     property of the given \a widget. From then on, that property     becomes accessible using field() and setField().      Fields are global to the entire wizard and make it easy for any     single page to access information stored by another page, without     having to put all the logic in QWizard or having the pages know     explicitly about each other.      If \a name ends with an asterisk (\c *), the field is a mandatory     field. When a page has mandatory fields, the \gui Next and/or     \gui Finish buttons are enabled only when all mandatory fields     are filled. This requires a \a changedSignal to be specified, to     tell QWizard to recheck the value stored by the mandatory field.      QWizard knows the most common Qt widgets. For these (or their     subclasses), you don't need to specify a \a property or a \a     changedSignal. The table below lists these widgets:      \table     \header \li Widget          \li Property                            \li Change Notification Signal     \row    \li QAbstractButton \li bool \l{QAbstractButton::}{checked} \li \l{QAbstractButton::}{toggled()}     \row    \li QAbstractSlider \li int \l{QAbstractSlider::}{value}    \li \l{QAbstractSlider::}{valueChanged()}     \row    \li QComboBox       \li int \l{QComboBox::}{currentIndex}   \li \l{QComboBox::}{currentIndexChanged()}     \row    \li QDateTimeEdit   \li QDateTime \l{QDateTimeEdit::}{dateTime} \li \l{QDateTimeEdit::}{dateTimeChanged()}     \row    \li QLineEdit       \li QString \l{QLineEdit::}{text}       \li \l{QLineEdit::}{textChanged()}     \row    \li QListWidget     \li int \l{QListWidget::}{currentRow}   \li \l{QListWidget::}{currentRowChanged()}     \row    \li QSpinBox        \li int \l{QSpinBox::}{value}           \li \l{QSpinBox::}{valueChanged()}     \endtable      You can use QWizard::setDefaultProperty() to add entries to this     table or to override existing entries.      To consider a field "filled", QWizard simply checks that their     current value doesn't equal their original value (the value they     had before initializePage() was called). For QLineEdit, it also     checks that     \l{QLineEdit::hasAcceptableInput()}{hasAcceptableInput()} returns     true, to honor any validator or mask.      QWizard's mandatory field mechanism is provided for convenience.     It can be bypassed by reimplementing QWizardPage::isComplete().      \sa field(), setField(), QWizard::setDefaultProperty() */
end_comment
begin_function
DECL|function|registerField
name|void
name|QWizardPage
operator|::
name|registerField
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|char
modifier|*
name|property
parameter_list|,
specifier|const
name|char
modifier|*
name|changedSignal
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWizardPage
argument_list|)
expr_stmt|;
name|QWizardField
name|field
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|widget
argument_list|,
name|property
argument_list|,
name|changedSignal
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|wizard
condition|)
block|{
name|d
operator|->
name|wizard
operator|->
name|d_func
argument_list|()
operator|->
name|addField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|pendingFields
operator|+=
name|field
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the wizard associated with this page, or 0 if this page     hasn't been inserted into a QWizard yet.      \sa QWizard::addPage(), QWizard::setPage() */
end_comment
begin_function
DECL|function|wizard
name|QWizard
modifier|*
name|QWizardPage
operator|::
name|wizard
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWizardPage
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|wizard
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qwizard.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_WIZARD
end_comment
end_unit
