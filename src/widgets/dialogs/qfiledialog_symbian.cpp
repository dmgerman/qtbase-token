begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfiledialog.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FILEDIALOG
end_ifndef
begin_include
include|#
directive|include
file|<private/qfiledialog_p.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
operator|&&
name|defined
argument_list|(
name|SYMBIAN_VERSION_SYMBIAN3
argument_list|)
end_if
begin_include
include|#
directive|include
file|<driveinfo.h>
end_include
begin_include
include|#
directive|include
file|<AknCommonDialogsDynMem.h>
end_include
begin_include
include|#
directive|include
file|<CAknMemorySelectionDialogMultiDrive.h>
end_include
begin_include
include|#
directive|include
file|<MAknFileFilter.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"private/qcore_symbian_p.h"
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|QStringList
name|qt_make_filter_list
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// defined in qfiledialog.cpp
end_comment
begin_function_decl
specifier|extern
name|QStringList
name|qt_clean_filter_list
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// defined in qfiledialog.cpp
end_comment
begin_enum
DECL|enum|DialogMode
DECL|enumerator|DialogOpen
DECL|enumerator|DialogSave
DECL|enumerator|DialogFolder
enum|enum
name|DialogMode
block|{
name|DialogOpen
block|,
name|DialogSave
block|,
name|DialogFolder
block|}
enum|;
end_enum
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
operator|&&
name|defined
argument_list|(
name|SYMBIAN_VERSION_SYMBIAN3
argument_list|)
end_if
begin_class
DECL|class|CExtensionFilter
class|class
name|CExtensionFilter
super|:
specifier|public
name|MAknFileFilter
block|{
public|public:
DECL|function|setFilter
name|void
name|setFilter
parameter_list|(
specifier|const
name|QString
name|filter
parameter_list|)
block|{
name|QStringList
name|unparsedFiltersList
init|=
name|qt_make_filter_list
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|QStringList
name|filterList
decl_stmt|;
name|filterRxList
operator|.
name|clear
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|QString
name|unparsedFilter
decl|,
name|unparsedFiltersList
control|)
block|{
name|filterList
operator|<<
name|qt_clean_filter_list
argument_list|(
name|unparsedFilter
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
name|QString
name|currentFilter
decl|,
name|filterList
control|)
block|{
name|QRegExp
name|filterRx
argument_list|(
name|currentFilter
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|,
name|QRegExp
operator|::
name|Wildcard
argument_list|)
decl_stmt|;
name|filterRxList
operator|<<
name|filterRx
expr_stmt|;
block|}
block|}
DECL|function|Accept
name|TBool
name|Accept
parameter_list|(
specifier|const
name|TDesC
modifier|&
comment|/*aDriveAndPath*/
parameter_list|,
specifier|const
name|TEntry
modifier|&
name|aEntry
parameter_list|)
specifier|const
block|{
comment|//If no filter for files, all can be accepted
if|if
condition|(
name|filterRxList
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ETrue
return|;
if|if
condition|(
name|aEntry
operator|.
name|IsDir
argument_list|()
condition|)
return|return
name|ETrue
return|;
foreach|foreach
control|(
name|QRegExp
name|rx
decl|,
name|filterRxList
control|)
block|{
name|QString
name|fileName
init|=
name|qt_TDesC2QString
argument_list|(
name|aEntry
operator|.
name|iName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rx
operator|.
name|exactMatch
argument_list|(
name|fileName
argument_list|)
condition|)
return|return
name|ETrue
return|;
block|}
return|return
name|EFalse
return|;
block|}
private|private:
DECL|member|filterRxList
name|QList
argument_list|<
name|QRegExp
argument_list|>
name|filterRxList
decl_stmt|;
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|launchSymbianDialog
specifier|static
name|QString
name|launchSymbianDialog
parameter_list|(
specifier|const
name|QString
name|dialogCaption
parameter_list|,
specifier|const
name|QString
name|startDirectory
parameter_list|,
specifier|const
name|QString
name|filter
parameter_list|,
name|DialogMode
name|dialogMode
parameter_list|)
block|{
name|QString
name|selection
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
operator|&&
name|defined
argument_list|(
name|SYMBIAN_VERSION_SYMBIAN3
argument_list|)
name|TFileName
name|startFolder
decl_stmt|;
if|if
condition|(
operator|!
name|startDirectory
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|dir
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QFileDialogPrivate
operator|::
name|workingDirectory
argument_list|(
name|startDirectory
argument_list|)
argument_list|)
decl_stmt|;
name|startFolder
operator|=
name|qt_QString2TPtrC
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|TInt
name|types
init|=
name|AknCommonDialogsDynMem
operator|::
name|EMemoryTypeMMCExternal
operator||
name|AknCommonDialogsDynMem
operator|::
name|EMemoryTypeInternalMassStorage
operator||
name|AknCommonDialogsDynMem
operator|::
name|EMemoryTypePhone
decl_stmt|;
name|TPtrC
name|titlePtr
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|dialogCaption
argument_list|)
argument_list|)
decl_stmt|;
name|TFileName
name|target
decl_stmt|;
name|bool
name|select
init|=
literal|false
decl_stmt|;
name|int
name|tryCount
init|=
literal|2
decl_stmt|;
while|while
condition|(
name|tryCount
operator|--
condition|)
block|{
name|TInt
name|err
argument_list|(
name|KErrNone
argument_list|)
decl_stmt|;
name|TRAP
argument_list|(
argument|err
argument_list|,
argument|if (dialogMode == DialogOpen) {                 CExtensionFilter* extensionFilter = new (ELeave) CExtensionFilter;                 CleanupStack::PushL(extensionFilter);                 extensionFilter->setFilter(filter);                 select = AknCommonDialogsDynMem::RunSelectDlgLD(types, target,                          startFolder,
literal|0
argument|,
literal|0
argument|, titlePtr, extensionFilter);                 CleanupStack::Pop(extensionFilter);             } else if (dialogMode == DialogSave) {                 QString defaultFileName = QFileDialogPrivate::initialSelection(startDirectory);                 target = qt_QString2TPtrC(defaultFileName);                 select = AknCommonDialogsDynMem::RunSaveDlgLD(types, target,                          startFolder,
literal|0
argument|,
literal|0
argument|, titlePtr);             } else if (dialogMode == DialogFolder) {                 select = AknCommonDialogsDynMem::RunFolderSelectDlgLD(types, target, startFolder,
literal|0
argument|,
literal|0
argument|, titlePtr, NULL, NULL);             }
argument_list|)
empty_stmt|;
if|if
condition|(
name|err
operator|==
name|KErrNone
condition|)
block|{
name|tryCount
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// Symbian native file dialog doesn't allow accessing files outside C:/Data
comment|// It will always leave in that case, so default into QDir::rootPath() in error cases.
name|QString
name|dir
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|rootPath
argument_list|()
argument_list|)
decl_stmt|;
name|startFolder
operator|=
name|qt_QString2TPtrC
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|select
condition|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|qt_TDesC2QString
argument_list|(
name|target
argument_list|)
argument_list|)
decl_stmt|;
name|selection
operator|=
name|fi
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|selection
return|;
block|}
end_function
begin_function
DECL|function|qtSymbianGetOpenFileName
name|QString
name|qtSymbianGetOpenFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
block|{
return|return
name|launchSymbianDialog
argument_list|(
name|caption
argument_list|,
name|dir
argument_list|,
name|filter
argument_list|,
name|DialogOpen
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qtSymbianGetOpenFileNames
name|QStringList
name|qtSymbianGetOpenFileNames
parameter_list|(
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
block|{
name|QString
name|fileName
decl_stmt|;
name|fileName
operator|.
name|append
argument_list|(
name|launchSymbianDialog
argument_list|(
name|caption
argument_list|,
name|dir
argument_list|,
name|filter
argument_list|,
name|DialogOpen
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|fileList
decl_stmt|;
name|fileList
operator|<<
name|fileName
expr_stmt|;
return|return
name|fileList
return|;
block|}
end_function
begin_function
DECL|function|qtSymbianGetSaveFileName
name|QString
name|qtSymbianGetSaveFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|)
block|{
return|return
name|launchSymbianDialog
argument_list|(
name|caption
argument_list|,
name|dir
argument_list|,
name|QString
argument_list|()
argument_list|,
name|DialogSave
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qtSymbianGetExistingDirectory
name|QString
name|qtSymbianGetExistingDirectory
parameter_list|(
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|)
block|{
name|QString
name|folderCaption
decl_stmt|;
if|if
condition|(
operator|!
name|caption
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|folderCaption
operator|.
name|append
argument_list|(
name|caption
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Title for folder selection dialog is mandatory
name|folderCaption
operator|.
name|append
argument_list|(
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"Find Directory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|launchSymbianDialog
argument_list|(
name|folderCaption
argument_list|,
name|dir
argument_list|,
name|QString
argument_list|()
argument_list|,
name|DialogFolder
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
