begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfilesystemmodel_p.h"
end_include
begin_include
include|#
directive|include
file|"qfilesystemmodel.h"
end_include
begin_include
include|#
directive|include
file|<qlocale.h>
end_include
begin_include
include|#
directive|include
file|<qmimedata.h>
end_include
begin_include
include|#
directive|include
file|<qurl.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qmessagebox.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<QtCore/QVarLengthArray>
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMMODEL
comment|/*!     \enum QFileSystemModel::Roles     \value FileIconRole     \value FilePathRole     \value FileNameRole     \value FilePermissions */
comment|/*!     \class QFileSystemModel     \since 4.4      \brief The QFileSystemModel class provides a data model for the local filesystem.      \ingroup model-view     \inmodule QtWidgets      This class provides access to the local filesystem, providing functions     for renaming and removing files and directories, and for creating new     directories. In the simplest case, it can be used with a suitable display     widget as part of a browser or filter.      QFileSystemModel can be accessed using the standard interface provided by     QAbstractItemModel, but it also provides some convenience functions that are     specific to a directory model.     The fileInfo(), isDir(), fileName() and filePath() functions provide information     about the underlying files and directories related to items in the model.     Directories can be created and removed using mkdir(), rmdir().      \note QFileSystemModel requires an instance of a GUI application.      \section1 Example Usage      A directory model that displays the contents of a default directory     is usually constructed with a parent object:      \snippet shareddirmodel/main.cpp 2      A tree view can be used to display the contents of the model      \snippet shareddirmodel/main.cpp 4      and the contents of a particular directory can be displayed by     setting the tree view's root index:      \snippet shareddirmodel/main.cpp 7      The view's root index can be used to control how much of a     hierarchical model is displayed. QFileSystemModel provides a convenience     function that returns a suitable model index for a path to a     directory within the model.      \section1 Caching and Performance      QFileSystemModel will not fetch any files or directories until setRootPath()     is called.  This will prevent any unnecessary querying on the file system     until that point such as listing the drives on Windows.      Unlike QDirModel, QFileSystemModel uses a separate thread to populate     itself so it will not cause the main thread to hang as the file system     is being queried.  Calls to rowCount() will return 0 until the model     populates a directory.      QFileSystemModel keeps a cache with file information. The cache is     automatically kept up to date using the QFileSystemWatcher.      \sa {Model Classes} */
comment|/*!     \fn bool QFileSystemModel::rmdir(const QModelIndex&index)      Removes the directory corresponding to the model item \a index in the     file system model and \b{deletes the corresponding directory from the     file system}, returning true if successful. If the directory cannot be     removed, false is returned.      \warning This function deletes directories from the file system; it does     \b{not} move them to a location where they can be recovered.      \sa remove() */
comment|/*!     \fn QIcon QFileSystemModel::fileName(const QModelIndex&index) const      Returns the file name for the item stored in the model under the given     \a index. */
comment|/*!     \fn QIcon QFileSystemModel::fileIcon(const QModelIndex&index) const      Returns the icon for the item stored in the model under the given     \a index. */
comment|/*!     \fn QFileInfo QFileSystemModel::fileInfo(const QModelIndex&index) const      Returns the QFileInfo for the item stored in the model under the given     \a index. */
DECL|function|fileInfo
name|QFileInfo
name|QFileSystemModel
operator|::
name|fileInfo
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|node
argument_list|(
name|index
argument_list|)
operator|->
name|fileInfo
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QFileSystemModel::rootPathChanged(const QString&newPath);      This signal is emitted whenever the root path has been changed to a \a newPath. */
end_comment
begin_comment
comment|/*!     \fn void QFileSystemModel::fileRenamed(const QString&path, const QString&oldName, const QString&newName)      This signal is emitted whenever a file with the \a oldName is successfully     renamed to \a newName.  The file is located in in the directory \a path. */
end_comment
begin_comment
comment|/*!     \since 4.7     \fn void QFileSystemModel::directoryLoaded(const QString&path)      This signal is emitted when the gatherer thread has finished to load the \a path.  */
end_comment
begin_comment
comment|/*!     \fn bool QFileSystemModel::remove(const QModelIndex&index)      Removes the model item \a index from the file system model and \b{deletes the     corresponding file from the file system}, returning true if successful. If the     item cannot be removed, false is returned.      \warning This function deletes files from the file system; it does \b{not}     move them to a location where they can be recovered.      \sa rmdir() */
end_comment
begin_function
DECL|function|remove
name|bool
name|QFileSystemModel
operator|::
name|remove
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|aindex
parameter_list|)
block|{
specifier|const
name|QString
name|path
init|=
name|filePath
argument_list|(
name|aindex
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|QFileSystemModelPrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QFileSystemModelPrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|fileInfoGatherer
operator|.
name|removePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|QFileInfo
argument_list|(
name|path
argument_list|)
operator|.
name|isFile
argument_list|()
condition|)
return|return
name|QFile
operator|::
name|remove
argument_list|(
name|path
argument_list|)
return|;
return|return
name|QDir
argument_list|(
name|path
argument_list|)
operator|.
name|removeRecursively
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Constructs a file system model with the given \a parent. */
end_comment
begin_constructor
DECL|function|QFileSystemModel
name|QFileSystemModel
operator|::
name|QFileSystemModel
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
operator|*
operator|new
name|QFileSystemModelPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QFileSystemModel
name|QFileSystemModel
operator|::
name|QFileSystemModel
parameter_list|(
name|QFileSystemModelPrivate
modifier|&
name|dd
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Destroys this file system model. */
end_comment
begin_destructor
DECL|function|~QFileSystemModel
name|QFileSystemModel
operator|::
name|~
name|QFileSystemModel
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|index
name|QModelIndex
name|QFileSystemModel
operator|::
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|column
operator|<
literal|0
operator|||
name|row
operator|>=
name|rowCount
argument_list|(
name|parent
argument_list|)
operator|||
name|column
operator|>=
name|columnCount
argument_list|(
name|parent
argument_list|)
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
comment|// get the parent node
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|parentNode
init|=
operator|(
name|d
operator|->
name|indexValid
argument_list|(
name|parent
argument_list|)
condition|?
name|d
operator|->
name|node
argument_list|(
name|parent
argument_list|)
else|:
cast|const_cast
argument_list|<
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
operator|*
argument_list|>
argument_list|(
operator|&
name|d
operator|->
name|root
argument_list|)
operator|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|parentNode
argument_list|)
expr_stmt|;
comment|// now get the internal pointer for the index
specifier|const
name|QString
modifier|&
name|childName
init|=
name|parentNode
operator|->
name|visibleChildren
operator|.
name|at
argument_list|(
name|d
operator|->
name|translateVisibleLocation
argument_list|(
name|parentNode
argument_list|,
name|row
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|indexNode
init|=
name|parentNode
operator|->
name|children
operator|.
name|value
argument_list|(
name|childName
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|indexNode
argument_list|)
expr_stmt|;
return|return
name|createIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
cast|const_cast
argument_list|<
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
operator|*
argument_list|>
argument_list|(
name|indexNode
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      Returns the model item index for the given \a path and \a column. */
end_comment
begin_function
DECL|function|index
name|QModelIndex
name|QFileSystemModel
operator|::
name|index
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|node
init|=
name|d
operator|->
name|node
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|index
argument_list|(
name|node
argument_list|,
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Return the QFileSystemNode that goes to index.   */
end_comment
begin_function
DECL|function|node
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|QFileSystemModelPrivate
operator|::
name|node
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
cast|const_cast
argument_list|<
name|QFileSystemNode
operator|*
argument_list|>
argument_list|(
operator|&
name|root
argument_list|)
return|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|indexNode
init|=
cast|static_cast
argument_list|<
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
operator|*
argument_list|>
argument_list|(
name|index
operator|.
name|internalPointer
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|indexNode
argument_list|)
expr_stmt|;
return|return
name|indexNode
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN32
end_ifdef
begin_function
DECL|function|qt_GetLongPathName
specifier|static
name|QString
name|qt_GetLongPathName
parameter_list|(
specifier|const
name|QString
modifier|&
name|strShortPath
parameter_list|)
block|{
if|if
condition|(
name|strShortPath
operator|.
name|isEmpty
argument_list|()
operator|||
name|strShortPath
operator|==
name|QLatin1String
argument_list|(
literal|"."
argument_list|)
operator|||
name|strShortPath
operator|==
name|QLatin1String
argument_list|(
literal|".."
argument_list|)
condition|)
return|return
name|strShortPath
return|;
if|if
condition|(
name|strShortPath
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|&&
name|strShortPath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
condition|)
return|return
name|strShortPath
operator|.
name|toUpper
argument_list|()
return|;
specifier|const
name|QString
name|absPath
init|=
name|QDir
argument_list|(
name|strShortPath
argument_list|)
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|absPath
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"//"
argument_list|)
argument_list|)
operator|||
name|absPath
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\\\"
argument_list|)
argument_list|)
condition|)
comment|// unc
return|return
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|absPath
argument_list|)
return|;
if|if
condition|(
name|absPath
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
return|return
name|QString
argument_list|()
return|;
specifier|const
name|QString
name|inputString
init|=
name|QLatin1String
argument_list|(
literal|"\\\\?\\"
argument_list|)
operator|+
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|TCHAR
argument_list|,
name|MAX_PATH
argument_list|>
name|buffer
argument_list|(
name|MAX_PATH
argument_list|)
decl_stmt|;
name|DWORD
name|result
init|=
operator|::
name|GetLongPathName
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|inputString
operator|.
name|utf16
argument_list|()
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|>
name|DWORD
argument_list|(
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|resize
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
operator|::
name|GetLongPathName
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|inputString
operator|.
name|utf16
argument_list|()
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|>
literal|4
condition|)
block|{
name|QString
name|longPath
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
operator|+
literal|4
argument_list|)
decl_stmt|;
comment|// ignoring prefix
name|longPath
index|[
literal|0
index|]
operator|=
name|longPath
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
expr_stmt|;
comment|// capital drive letters
return|return
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|longPath
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|strShortPath
argument_list|)
return|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \internal      Given a path return the matching QFileSystemNode or&root if invalid */
end_comment
begin_function
DECL|function|node
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|QFileSystemModelPrivate
operator|::
name|node
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
name|bool
name|fetch
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
operator|||
name|path
operator|==
name|myComputer
argument_list|()
operator|||
name|path
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
condition|)
return|return
cast|const_cast
argument_list|<
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
operator|*
argument_list|>
argument_list|(
operator|&
name|root
argument_list|)
return|;
comment|// Construct the nodes up to the new root path if they need to be built
name|QString
name|absolutePath
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN32
name|QString
name|longPath
init|=
name|qt_GetLongPathName
argument_list|(
name|path
argument_list|)
decl_stmt|;
else|#
directive|else
name|QString
name|longPath
init|=
name|path
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|longPath
operator|==
name|rootDir
operator|.
name|path
argument_list|()
condition|)
name|absolutePath
operator|=
name|rootDir
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
else|else
name|absolutePath
operator|=
name|QDir
argument_list|(
name|longPath
argument_list|)
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
comment|// ### TODO can we use bool QAbstractFileEngine::caseSensitive() const?
name|QStringList
name|pathElements
init|=
name|absolutePath
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|pathElements
operator|.
name|isEmpty
argument_list|()
operator|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|longPath
argument_list|)
operator|!=
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
endif|#
directive|endif
condition|)
return|return
cast|const_cast
argument_list|<
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
operator|*
argument_list|>
argument_list|(
operator|&
name|root
argument_list|)
return|;
name|QModelIndex
name|index
init|=
name|QModelIndex
argument_list|()
decl_stmt|;
comment|// start with "My Computer"
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|absolutePath
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"//"
argument_list|)
argument_list|)
condition|)
block|{
comment|// UNC path
name|QString
name|host
init|=
name|QLatin1String
argument_list|(
literal|"\\\\"
argument_list|)
operator|+
name|pathElements
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|absolutePath
operator|==
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|host
argument_list|)
condition|)
name|absolutePath
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|longPath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|&&
operator|!
name|absolutePath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|absolutePath
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|r
init|=
literal|0
decl_stmt|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|rootNode
init|=
cast|const_cast
argument_list|<
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
operator|*
argument_list|>
argument_list|(
operator|&
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|.
name|children
operator|.
name|contains
argument_list|(
name|host
operator|.
name|toLower
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|pathElements
operator|.
name|count
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|absolutePath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
return|return
name|rootNode
return|;
name|QFileInfo
name|info
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|exists
argument_list|()
condition|)
return|return
name|rootNode
return|;
name|QFileSystemModelPrivate
modifier|*
name|p
init|=
cast|const_cast
argument_list|<
name|QFileSystemModelPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|->
name|addNode
argument_list|(
name|rootNode
argument_list|,
name|host
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|p
operator|->
name|addVisibleFiles
argument_list|(
name|rootNode
argument_list|,
name|QStringList
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|rootNode
operator|->
name|visibleLocation
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|r
operator|=
name|translateVisibleLocation
argument_list|(
name|rootNode
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|index
operator|=
name|q
operator|->
name|index
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|pathElements
operator|.
name|pop_front
argument_list|()
expr_stmt|;
block|}
else|else
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
block|{
if|if
condition|(
operator|!
name|pathElements
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
condition|)
block|{
name|QString
name|rootPath
init|=
name|QDir
argument_list|(
name|longPath
argument_list|)
operator|.
name|rootPath
argument_list|()
decl_stmt|;
name|pathElements
operator|.
name|prepend
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pathElements
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|pathElements
index|[
literal|0
index|]
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
comment|// add the "/" item, since it is a valid path element on Unix
if|if
condition|(
name|absolutePath
index|[
literal|0
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
name|pathElements
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|parent
init|=
name|node
argument_list|(
name|index
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathElements
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|element
init|=
name|pathElements
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// On Windows, "filename    " and "filename" are equivalent and
comment|// "filename  .  " and "filename" are equivalent
comment|// "filename......." and "filename" are equivalent Task #133928
comment|// whereas "filename  .txt" is still "filename  .txt"
comment|// If after stripping the characters there is nothing left then we
comment|// just return the parent directory as it is assumed that the path
comment|// is referring to the parent
while|while
condition|(
name|element
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
operator|||
name|element
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
condition|)
name|element
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Only filenames that can't possibly exist will be end up being empty
if|if
condition|(
name|element
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|parent
return|;
endif|#
directive|endif
name|bool
name|alreadyExisted
init|=
name|parent
operator|->
name|children
operator|.
name|contains
argument_list|(
name|element
argument_list|)
decl_stmt|;
comment|// we couldn't find the path element, we create a new node since we
comment|// _know_ that the path is valid
if|if
condition|(
name|alreadyExisted
condition|)
block|{
if|if
condition|(
operator|(
name|parent
operator|->
name|children
operator|.
name|count
argument_list|()
operator|==
literal|0
operator|)
operator|||
operator|(
name|parent
operator|->
name|caseSensitive
argument_list|()
operator|&&
name|parent
operator|->
name|children
operator|.
name|value
argument_list|(
name|element
argument_list|)
operator|->
name|fileName
operator|!=
name|element
operator|)
operator|||
operator|(
operator|!
name|parent
operator|->
name|caseSensitive
argument_list|()
operator|&&
name|parent
operator|->
name|children
operator|.
name|value
argument_list|(
name|element
argument_list|)
operator|->
name|fileName
operator|.
name|toLower
argument_list|()
operator|!=
name|element
operator|.
name|toLower
argument_list|()
operator|)
condition|)
name|alreadyExisted
operator|=
literal|false
expr_stmt|;
block|}
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|node
decl_stmt|;
if|if
condition|(
operator|!
name|alreadyExisted
condition|)
block|{
comment|// Someone might call ::index("file://cookie/monster/doesn't/like/veggies"),
comment|// a path that doesn't exists, I.E. don't blindly create directories.
name|QFileInfo
name|info
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|exists
argument_list|()
condition|)
return|return
cast|const_cast
argument_list|<
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
operator|*
argument_list|>
argument_list|(
operator|&
name|root
argument_list|)
return|;
name|QFileSystemModelPrivate
modifier|*
name|p
init|=
cast|const_cast
argument_list|<
name|QFileSystemModelPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|node
operator|=
name|p
operator|->
name|addNode
argument_list|(
name|parent
argument_list|,
name|element
argument_list|,
name|info
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|node
operator|->
name|populate
argument_list|(
name|fileInfoGatherer
operator|.
name|getInfo
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|node
operator|=
name|parent
operator|->
name|children
operator|.
name|value
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|->
name|isVisible
condition|)
block|{
comment|// It has been filtered out
if|if
condition|(
name|alreadyExisted
operator|&&
name|node
operator|->
name|hasInformation
argument_list|()
operator|&&
operator|!
name|fetch
condition|)
return|return
cast|const_cast
argument_list|<
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
operator|*
argument_list|>
argument_list|(
operator|&
name|root
argument_list|)
return|;
name|QFileSystemModelPrivate
modifier|*
name|p
init|=
cast|const_cast
argument_list|<
name|QFileSystemModelPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|->
name|addVisibleFiles
argument_list|(
name|parent
argument_list|,
name|QStringList
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|p
operator|->
name|bypassFilters
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
name|p
operator|->
name|bypassFilters
index|[
name|node
index|]
operator|=
literal|1
expr_stmt|;
name|QString
name|dir
init|=
name|q
operator|->
name|filePath
argument_list|(
name|this
operator|->
name|index
argument_list|(
name|parent
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|->
name|hasInformation
argument_list|()
operator|&&
name|fetch
condition|)
block|{
name|Fetching
name|f
decl_stmt|;
name|f
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|f
operator|.
name|file
operator|=
name|element
expr_stmt|;
name|f
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|p
operator|->
name|toFetch
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|p
operator|->
name|fetchingTimer
operator|.
name|start
argument_list|(
literal|0
argument_list|,
cast|const_cast
argument_list|<
name|QFileSystemModel
operator|*
argument_list|>
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|parent
operator|=
name|node
expr_stmt|;
block|}
return|return
name|parent
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|timerEvent
name|void
name|QFileSystemModel
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|fetchingTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|d
operator|->
name|fetchingTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|toFetch
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|node
init|=
name|d
operator|->
name|toFetch
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|node
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|->
name|hasInformation
argument_list|()
condition|)
block|{
name|d
operator|->
name|fileInfoGatherer
operator|.
name|fetchExtendedInformation
argument_list|(
name|d
operator|->
name|toFetch
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|dir
argument_list|,
name|QStringList
argument_list|(
name|d
operator|->
name|toFetch
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// qDebug("yah!, you saved a little gerbil soul");
block|}
block|}
endif|#
directive|endif
name|d
operator|->
name|toFetch
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the model item \a index represents a directory;     otherwise returns \c false. */
end_comment
begin_function
DECL|function|isDir
name|bool
name|QFileSystemModel
operator|::
name|isDir
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
comment|// This function is for public usage only because it could create a file info
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|true
return|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|n
init|=
name|d
operator|->
name|node
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|->
name|hasInformation
argument_list|()
condition|)
return|return
name|n
operator|->
name|isDir
argument_list|()
return|;
return|return
name|fileInfo
argument_list|(
name|index
argument_list|)
operator|.
name|isDir
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the size in bytes of \a index. If the file does not exist, 0 is returned.   */
end_comment
begin_function
DECL|function|size
name|qint64
name|QFileSystemModel
operator|::
name|size
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|d
operator|->
name|node
argument_list|(
name|index
argument_list|)
operator|->
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the type of file \a index such as "Directory" or "JPEG file".   */
end_comment
begin_function
DECL|function|type
name|QString
name|QFileSystemModel
operator|::
name|type
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|d
operator|->
name|node
argument_list|(
name|index
argument_list|)
operator|->
name|type
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the date and time when \a index was last modified.  */
end_comment
begin_function
DECL|function|lastModified
name|QDateTime
name|QFileSystemModel
operator|::
name|lastModified
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QDateTime
argument_list|()
return|;
return|return
name|d
operator|->
name|node
argument_list|(
name|index
argument_list|)
operator|->
name|lastModified
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|parent
name|QModelIndex
name|QFileSystemModel
operator|::
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|indexValid
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|indexNode
init|=
name|d
operator|->
name|node
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|indexNode
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|parentNode
init|=
name|indexNode
operator|->
name|parent
decl_stmt|;
if|if
condition|(
name|parentNode
operator|==
literal|0
operator|||
name|parentNode
operator|==
operator|&
name|d
operator|->
name|root
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
comment|// get the parent's row
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|grandParentNode
init|=
name|parentNode
operator|->
name|parent
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|grandParentNode
operator|->
name|children
operator|.
name|contains
argument_list|(
name|parentNode
operator|->
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|visualRow
init|=
name|d
operator|->
name|translateVisibleLocation
argument_list|(
name|grandParentNode
argument_list|,
name|grandParentNode
operator|->
name|visibleLocation
argument_list|(
name|grandParentNode
operator|->
name|children
operator|.
name|value
argument_list|(
name|parentNode
operator|->
name|fileName
argument_list|)
operator|->
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|visualRow
operator|==
operator|-
literal|1
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
return|return
name|createIndex
argument_list|(
name|visualRow
argument_list|,
literal|0
argument_list|,
name|parentNode
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     \internal      return the index for node */
end_comment
begin_function
DECL|function|index
name|QModelIndex
name|QFileSystemModelPrivate
operator|::
name|index
parameter_list|(
specifier|const
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|node
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|parentNode
init|=
operator|(
name|node
condition|?
name|node
operator|->
name|parent
else|:
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
operator|&
name|root
operator|||
operator|!
name|parentNode
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
comment|// get the parent's row
name|Q_ASSERT
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|->
name|isVisible
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|int
name|visualRow
init|=
name|translateVisibleLocation
argument_list|(
name|parentNode
argument_list|,
name|parentNode
operator|->
name|visibleLocation
argument_list|(
name|node
operator|->
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|q
operator|->
name|createIndex
argument_list|(
name|visualRow
argument_list|,
name|column
argument_list|,
cast|const_cast
argument_list|<
name|QFileSystemNode
operator|*
argument_list|>
argument_list|(
name|node
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|hasChildren
name|bool
name|QFileSystemModel
operator|::
name|hasChildren
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|.
name|column
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isValid
argument_list|()
condition|)
comment|// drives
return|return
literal|true
return|;
specifier|const
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|indexNode
init|=
name|d
operator|->
name|node
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|indexNode
argument_list|)
expr_stmt|;
return|return
operator|(
name|indexNode
operator|->
name|isDir
argument_list|()
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|canFetchMore
name|bool
name|QFileSystemModel
operator|::
name|canFetchMore
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
specifier|const
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|indexNode
init|=
name|d
operator|->
name|node
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
operator|(
operator|!
name|indexNode
operator|->
name|populatedChildren
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|fetchMore
name|void
name|QFileSystemModel
operator|::
name|fetchMore
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|setRootPath
condition|)
return|return;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|indexNode
init|=
name|d
operator|->
name|node
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexNode
operator|->
name|populatedChildren
condition|)
return|return;
name|indexNode
operator|->
name|populatedChildren
operator|=
literal|true
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|d
operator|->
name|fileInfoGatherer
operator|.
name|list
argument_list|(
name|filePath
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|rowCount
name|int
name|QFileSystemModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|.
name|column
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|0
return|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|root
operator|.
name|visibleChildren
operator|.
name|count
argument_list|()
return|;
specifier|const
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|parentNode
init|=
name|d
operator|->
name|node
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|parentNode
operator|->
name|visibleChildren
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|columnCount
name|int
name|QFileSystemModel
operator|::
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|parent
operator|.
name|column
argument_list|()
operator|>
literal|0
operator|)
condition|?
literal|0
else|:
name|QFileSystemModelPrivate
operator|::
name|NumColumns
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the data stored under the given \a role for the item "My Computer".      \sa Qt::ItemDataRole  */
end_comment
begin_function
DECL|function|myComputer
name|QVariant
name|QFileSystemModel
operator|::
name|myComputer
parameter_list|(
name|int
name|role
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
endif|#
directive|endif
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|Qt
operator|::
name|DisplayRole
case|:
return|return
name|QFileSystemModelPrivate
operator|::
name|myComputer
argument_list|()
return|;
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
case|case
name|Qt
operator|::
name|DecorationRole
case|:
return|return
name|d
operator|->
name|fileInfoGatherer
operator|.
name|iconProvider
argument_list|()
operator|->
name|icon
argument_list|(
name|QFileIconProvider
operator|::
name|Computer
argument_list|)
return|;
endif|#
directive|endif
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|data
name|QVariant
name|QFileSystemModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
name|index
operator|.
name|model
argument_list|()
operator|!=
name|this
condition|)
return|return
name|QVariant
argument_list|()
return|;
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|Qt
operator|::
name|EditRole
case|:
case|case
name|Qt
operator|::
name|DisplayRole
case|:
switch|switch
condition|(
name|index
operator|.
name|column
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|d
operator|->
name|displayName
argument_list|(
name|index
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|d
operator|->
name|size
argument_list|(
name|index
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|d
operator|->
name|type
argument_list|(
name|index
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|d
operator|->
name|time
argument_list|(
name|index
argument_list|)
return|;
default|default:
name|qWarning
argument_list|(
literal|"data: invalid display value column %d"
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
name|FilePathRole
case|:
return|return
name|filePath
argument_list|(
name|index
argument_list|)
return|;
case|case
name|FileNameRole
case|:
return|return
name|d
operator|->
name|name
argument_list|(
name|index
argument_list|)
return|;
case|case
name|Qt
operator|::
name|DecorationRole
case|:
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|==
literal|0
condition|)
block|{
name|QIcon
name|icon
init|=
name|d
operator|->
name|icon
argument_list|(
name|index
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
if|if
condition|(
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|node
argument_list|(
name|index
argument_list|)
operator|->
name|isDir
argument_list|()
condition|)
name|icon
operator|=
name|d
operator|->
name|fileInfoGatherer
operator|.
name|iconProvider
argument_list|()
operator|->
name|icon
argument_list|(
name|QFileIconProvider
operator|::
name|Folder
argument_list|)
expr_stmt|;
else|else
name|icon
operator|=
name|d
operator|->
name|fileInfoGatherer
operator|.
name|iconProvider
argument_list|()
operator|->
name|icon
argument_list|(
name|QFileIconProvider
operator|::
name|File
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_FILESYSTEMWATCHER
return|return
name|icon
return|;
block|}
break|break;
case|case
name|Qt
operator|::
name|TextAlignmentRole
case|:
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|==
literal|1
condition|)
return|return
name|Qt
operator|::
name|AlignRight
return|;
break|break;
case|case
name|FilePermissions
case|:
name|int
name|p
init|=
name|permissions
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|p
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|size
name|QString
name|QFileSystemModelPrivate
operator|::
name|size
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
specifier|const
name|QFileSystemNode
modifier|*
name|n
init|=
name|node
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|->
name|isDir
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
return|return
name|QLatin1String
argument_list|(
literal|"--"
argument_list|)
return|;
else|#
directive|else
return|return
name|QLatin1String
argument_list|(
literal|""
argument_list|)
return|;
endif|#
directive|endif
comment|// Windows   - ""
comment|// OS X      - "--"
comment|// Konqueror - "4 KB"
comment|// Nautilus  - "9 items" (the number of children)
block|}
return|return
name|size
argument_list|(
name|n
operator|->
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|size
name|QString
name|QFileSystemModelPrivate
operator|::
name|size
parameter_list|(
name|qint64
name|bytes
parameter_list|)
block|{
comment|// According to the Si standard KB is 1000 bytes, KiB is 1024
comment|// but on windows sizes are calculated by dividing by 1024 so we do what they do.
specifier|const
name|qint64
name|kb
init|=
literal|1024
decl_stmt|;
specifier|const
name|qint64
name|mb
init|=
literal|1024
operator|*
name|kb
decl_stmt|;
specifier|const
name|qint64
name|gb
init|=
literal|1024
operator|*
name|mb
decl_stmt|;
specifier|const
name|qint64
name|tb
init|=
literal|1024
operator|*
name|gb
decl_stmt|;
if|if
condition|(
name|bytes
operator|>=
name|tb
condition|)
return|return
name|QFileSystemModel
operator|::
name|tr
argument_list|(
literal|"%1 TB"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLocale
argument_list|()
operator|.
name|toString
argument_list|(
name|qreal
argument_list|(
name|bytes
argument_list|)
operator|/
name|tb
argument_list|,
literal|'f'
argument_list|,
literal|3
argument_list|)
argument_list|)
return|;
if|if
condition|(
name|bytes
operator|>=
name|gb
condition|)
return|return
name|QFileSystemModel
operator|::
name|tr
argument_list|(
literal|"%1 GB"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLocale
argument_list|()
operator|.
name|toString
argument_list|(
name|qreal
argument_list|(
name|bytes
argument_list|)
operator|/
name|gb
argument_list|,
literal|'f'
argument_list|,
literal|2
argument_list|)
argument_list|)
return|;
if|if
condition|(
name|bytes
operator|>=
name|mb
condition|)
return|return
name|QFileSystemModel
operator|::
name|tr
argument_list|(
literal|"%1 MB"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLocale
argument_list|()
operator|.
name|toString
argument_list|(
name|qreal
argument_list|(
name|bytes
argument_list|)
operator|/
name|mb
argument_list|,
literal|'f'
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
if|if
condition|(
name|bytes
operator|>=
name|kb
condition|)
return|return
name|QFileSystemModel
operator|::
name|tr
argument_list|(
literal|"%1 KB"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLocale
argument_list|()
operator|.
name|toString
argument_list|(
name|bytes
operator|/
name|kb
argument_list|)
argument_list|)
return|;
return|return
name|QFileSystemModel
operator|::
name|tr
argument_list|(
literal|"%1 bytes"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLocale
argument_list|()
operator|.
name|toString
argument_list|(
name|bytes
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|time
name|QString
name|QFileSystemModelPrivate
operator|::
name|time
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
return|return
name|node
argument_list|(
name|index
argument_list|)
operator|->
name|lastModified
argument_list|()
operator|.
name|toString
argument_list|(
name|Qt
operator|::
name|SystemLocaleDate
argument_list|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|type
name|QString
name|QFileSystemModelPrivate
operator|::
name|type
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|node
argument_list|(
name|index
argument_list|)
operator|->
name|type
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|name
name|QString
name|QFileSystemModelPrivate
operator|::
name|name
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|QFileSystemNode
modifier|*
name|dirNode
init|=
name|node
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|fileInfoGatherer
operator|.
name|resolveSymlinks
argument_list|()
operator|&&
endif|#
directive|endif
operator|!
name|resolvedSymLinks
operator|.
name|isEmpty
argument_list|()
operator|&&
name|dirNode
operator|->
name|isSymLink
argument_list|(
comment|/* ignoreNtfsSymLinks = */
literal|true
argument_list|)
condition|)
block|{
name|QString
name|fullPath
init|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|filePath
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|resolvedSymLinks
operator|.
name|value
argument_list|(
name|fullPath
argument_list|,
name|dirNode
operator|->
name|fileName
argument_list|)
return|;
block|}
return|return
name|dirNode
operator|->
name|fileName
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|displayName
name|QString
name|QFileSystemModelPrivate
operator|::
name|displayName
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QFileSystemNode
modifier|*
name|dirNode
init|=
name|node
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dirNode
operator|->
name|volumeName
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|dirNode
operator|->
name|volumeName
operator|+
name|QLatin1String
argument_list|(
literal|" ("
argument_list|)
operator|+
name|name
argument_list|(
name|index
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
return|;
endif|#
directive|endif
return|return
name|name
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|icon
name|QIcon
name|QFileSystemModelPrivate
operator|::
name|icon
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QIcon
argument_list|()
return|;
return|return
name|node
argument_list|(
name|index
argument_list|)
operator|->
name|icon
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setData
name|bool
name|QFileSystemModel
operator|::
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
operator|||
name|idx
operator|.
name|column
argument_list|()
operator|!=
literal|0
operator|||
name|role
operator|!=
name|Qt
operator|::
name|EditRole
operator|||
operator|(
name|flags
argument_list|(
name|idx
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsEditable
operator|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|QString
name|newName
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QString
name|oldName
init|=
name|idx
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|newName
operator|==
name|idx
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|newName
operator|.
name|isEmpty
argument_list|()
operator|||
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|newName
argument_list|)
operator|.
name|contains
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|)
operator|||
operator|!
name|QDir
argument_list|(
name|filePath
argument_list|(
name|parent
argument_list|(
name|idx
argument_list|)
argument_list|)
argument_list|)
operator|.
name|rename
argument_list|(
name|oldName
argument_list|,
name|newName
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_MESSAGEBOX
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
name|QFileSystemModel
operator|::
name|tr
argument_list|(
literal|"Invalid filename"
argument_list|)
argument_list|,
name|QFileSystemModel
operator|::
name|tr
argument_list|(
literal|"<b>The name \"%1\" can not be used.</b><p>Try using another name, with fewer characters or no punctuations marks."
argument_list|)
operator|.
name|arg
argument_list|(
name|newName
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_MESSAGEBOX
return|return
literal|false
return|;
block|}
else|else
block|{
comment|/*             *After re-naming something we don't want the selection to change*             - can't remove rows and later insert             - can't quickly remove and insert             - index pointer can't change because treeview doesn't use persistant index's              - if this get any more complicated think of changing it to just               use layoutChanged          */
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|indexNode
init|=
name|d
operator|->
name|node
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|parentNode
init|=
name|indexNode
operator|->
name|parent
decl_stmt|;
name|int
name|visibleLocation
init|=
name|parentNode
operator|->
name|visibleLocation
argument_list|(
name|parentNode
operator|->
name|children
operator|.
name|value
argument_list|(
name|indexNode
operator|->
name|fileName
argument_list|)
operator|->
name|fileName
argument_list|)
decl_stmt|;
name|d
operator|->
name|addNode
argument_list|(
name|parentNode
argument_list|,
name|newName
argument_list|,
name|indexNode
operator|->
name|info
operator|->
name|fileInfo
argument_list|()
argument_list|)
expr_stmt|;
name|parentNode
operator|->
name|visibleChildren
operator|.
name|removeAt
argument_list|(
name|visibleLocation
argument_list|)
expr_stmt|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|oldValue
init|=
name|parentNode
operator|->
name|children
operator|.
name|value
argument_list|(
name|oldName
argument_list|)
decl_stmt|;
name|parentNode
operator|->
name|children
index|[
name|newName
index|]
operator|=
name|oldValue
expr_stmt|;
name|QFileInfo
name|info
argument_list|(
name|d
operator|->
name|rootDir
argument_list|,
name|newName
argument_list|)
decl_stmt|;
name|oldValue
operator|->
name|fileName
operator|=
name|newName
expr_stmt|;
name|oldValue
operator|->
name|parent
operator|=
name|parentNode
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|oldValue
operator|->
name|populate
argument_list|(
name|d
operator|->
name|fileInfoGatherer
operator|.
name|getInfo
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|oldValue
operator|->
name|isVisible
operator|=
literal|true
expr_stmt|;
name|parentNode
operator|->
name|children
operator|.
name|remove
argument_list|(
name|oldName
argument_list|)
expr_stmt|;
name|parentNode
operator|->
name|visibleChildren
operator|.
name|insert
argument_list|(
name|visibleLocation
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|d
operator|->
name|delayedSort
argument_list|()
expr_stmt|;
emit|emit
name|fileRenamed
argument_list|(
name|filePath
argument_list|(
name|idx
operator|.
name|parent
argument_list|()
argument_list|)
argument_list|,
name|oldName
argument_list|,
name|newName
argument_list|)
emit|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|headerData
name|QVariant
name|QFileSystemModel
operator|::
name|headerData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|Qt
operator|::
name|DecorationRole
case|:
if|if
condition|(
name|section
operator|==
literal|0
condition|)
block|{
comment|// ### TODO oh man this is ugly and doesn't even work all the way!
comment|// it is still 2 pixels off
name|QImage
name|pixmap
argument_list|(
literal|16
argument_list|,
literal|1
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pixmap
operator|.
name|setAlphaChannel
argument_list|(
name|pixmap
operator|.
name|createAlphaMask
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pixmap
return|;
block|}
break|break;
case|case
name|Qt
operator|::
name|TextAlignmentRole
case|:
return|return
name|Qt
operator|::
name|AlignLeft
return|;
block|}
if|if
condition|(
name|orientation
operator|!=
name|Qt
operator|::
name|Horizontal
operator|||
name|role
operator|!=
name|Qt
operator|::
name|DisplayRole
condition|)
return|return
name|QAbstractItemModel
operator|::
name|headerData
argument_list|(
name|section
argument_list|,
name|orientation
argument_list|,
name|role
argument_list|)
return|;
name|QString
name|returnValue
decl_stmt|;
switch|switch
condition|(
name|section
condition|)
block|{
case|case
literal|0
case|:
name|returnValue
operator|=
name|tr
argument_list|(
literal|"Name"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|returnValue
operator|=
name|tr
argument_list|(
literal|"Size"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|returnValue
operator|=
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|tr
argument_list|(
literal|"Kind"
argument_list|,
literal|"Match OS X Finder"
argument_list|)
expr_stmt|;
else|#
directive|else
name|tr
argument_list|(
literal|"Type"
argument_list|,
literal|"All other platforms"
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
comment|// Windows   - Type
comment|// OS X      - Kind
comment|// Konqueror - File Type
comment|// Nautilus  - Type
case|case
literal|3
case|:
name|returnValue
operator|=
name|tr
argument_list|(
literal|"Date Modified"
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
name|QVariant
argument_list|()
return|;
block|}
return|return
name|returnValue
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|QFileSystemModel
operator|::
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|ItemFlags
name|flags
init|=
name|QAbstractItemModel
operator|::
name|flags
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|flags
return|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|indexNode
init|=
name|d
operator|->
name|node
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|nameFilterDisables
operator|&&
operator|!
name|d
operator|->
name|passNameFilters
argument_list|(
name|indexNode
argument_list|)
condition|)
block|{
name|flags
operator|&=
operator|~
name|Qt
operator|::
name|ItemIsEnabled
expr_stmt|;
comment|// ### TODO you shouldn't be able to set this as the current item, task 119433
return|return
name|flags
return|;
block|}
name|flags
operator||=
name|Qt
operator|::
name|ItemIsDragEnabled
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|readOnly
condition|)
return|return
name|flags
return|;
if|if
condition|(
operator|(
name|index
operator|.
name|column
argument_list|()
operator|==
literal|0
operator|)
operator|&&
name|indexNode
operator|->
name|permissions
argument_list|()
operator|&
name|QFile
operator|::
name|WriteUser
condition|)
block|{
name|flags
operator||=
name|Qt
operator|::
name|ItemIsEditable
expr_stmt|;
if|if
condition|(
name|indexNode
operator|->
name|isDir
argument_list|()
condition|)
name|flags
operator||=
name|Qt
operator|::
name|ItemIsDropEnabled
expr_stmt|;
else|else
name|flags
operator||=
name|Qt
operator|::
name|ItemNeverHasChildren
expr_stmt|;
block|}
return|return
name|flags
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_performDelayedSort
name|void
name|QFileSystemModelPrivate
operator|::
name|_q_performDelayedSort
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|q
operator|->
name|sort
argument_list|(
name|sortColumn
argument_list|,
name|sortOrder
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getNextChar
specifier|static
specifier|inline
name|QChar
name|getNextChar
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|int
name|location
parameter_list|)
block|{
return|return
operator|(
name|location
operator|<
name|s
operator|.
name|length
argument_list|()
operator|)
condition|?
name|s
operator|.
name|at
argument_list|(
name|location
argument_list|)
else|:
name|QChar
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Natural number sort, skips spaces.      Examples:     1, 2, 10, 55, 100     01.jpg, 2.jpg, 10.jpg      Note on the algorithm:     Only as many characters as necessary are looked at and at most they all     are looked at once.      Slower then QString::compare() (of course)   */
end_comment
begin_function
DECL|function|naturalCompare
name|int
name|QFileSystemModelPrivate
operator|::
name|naturalCompare
parameter_list|(
specifier|const
name|QString
modifier|&
name|s1
parameter_list|,
specifier|const
name|QString
modifier|&
name|s2
parameter_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
parameter_list|)
block|{
for|for
control|(
name|int
name|l1
init|=
literal|0
init|,
name|l2
init|=
literal|0
init|;
name|l1
operator|<=
name|s1
operator|.
name|count
argument_list|()
operator|&&
name|l2
operator|<=
name|s2
operator|.
name|count
argument_list|()
condition|;
operator|++
name|l1
operator|,
operator|++
name|l2
control|)
block|{
comment|// skip spaces, tabs and 0's
name|QChar
name|c1
init|=
name|getNextChar
argument_list|(
name|s1
argument_list|,
name|l1
argument_list|)
decl_stmt|;
while|while
condition|(
name|c1
operator|.
name|isSpace
argument_list|()
condition|)
name|c1
operator|=
name|getNextChar
argument_list|(
name|s1
argument_list|,
operator|++
name|l1
argument_list|)
expr_stmt|;
name|QChar
name|c2
init|=
name|getNextChar
argument_list|(
name|s2
argument_list|,
name|l2
argument_list|)
decl_stmt|;
while|while
condition|(
name|c2
operator|.
name|isSpace
argument_list|()
condition|)
name|c2
operator|=
name|getNextChar
argument_list|(
name|s2
argument_list|,
operator|++
name|l2
argument_list|)
expr_stmt|;
if|if
condition|(
name|c1
operator|.
name|isDigit
argument_list|()
operator|&&
name|c2
operator|.
name|isDigit
argument_list|()
condition|)
block|{
while|while
condition|(
name|c1
operator|.
name|digitValue
argument_list|()
operator|==
literal|0
condition|)
name|c1
operator|=
name|getNextChar
argument_list|(
name|s1
argument_list|,
operator|++
name|l1
argument_list|)
expr_stmt|;
while|while
condition|(
name|c2
operator|.
name|digitValue
argument_list|()
operator|==
literal|0
condition|)
name|c2
operator|=
name|getNextChar
argument_list|(
name|s2
argument_list|,
operator|++
name|l2
argument_list|)
expr_stmt|;
name|int
name|lookAheadLocation1
init|=
name|l1
decl_stmt|;
name|int
name|lookAheadLocation2
init|=
name|l2
decl_stmt|;
name|int
name|currentReturnValue
init|=
literal|0
decl_stmt|;
comment|// find the last digit, setting currentReturnValue as we go if it isn't equal
for|for
control|(
name|QChar
name|lookAhead1
init|=
name|c1
init|,
name|lookAhead2
init|=
name|c2
init|;
operator|(
name|lookAheadLocation1
operator|<=
name|s1
operator|.
name|length
argument_list|()
operator|&&
name|lookAheadLocation2
operator|<=
name|s2
operator|.
name|length
argument_list|()
operator|)
condition|;
name|lookAhead1
operator|=
name|getNextChar
argument_list|(
name|s1
argument_list|,
operator|++
name|lookAheadLocation1
argument_list|)
operator|,
name|lookAhead2
operator|=
name|getNextChar
argument_list|(
name|s2
argument_list|,
operator|++
name|lookAheadLocation2
argument_list|)
control|)
block|{
name|bool
name|is1ADigit
init|=
operator|!
name|lookAhead1
operator|.
name|isNull
argument_list|()
operator|&&
name|lookAhead1
operator|.
name|isDigit
argument_list|()
decl_stmt|;
name|bool
name|is2ADigit
init|=
operator|!
name|lookAhead2
operator|.
name|isNull
argument_list|()
operator|&&
name|lookAhead2
operator|.
name|isDigit
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|is1ADigit
operator|&&
operator|!
name|is2ADigit
condition|)
break|break;
if|if
condition|(
operator|!
name|is1ADigit
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
operator|!
name|is2ADigit
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|currentReturnValue
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|lookAhead1
operator|<
name|lookAhead2
condition|)
block|{
name|currentReturnValue
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lookAhead1
operator|>
name|lookAhead2
condition|)
block|{
name|currentReturnValue
operator|=
literal|1
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentReturnValue
operator|!=
literal|0
condition|)
return|return
name|currentReturnValue
return|;
block|}
if|if
condition|(
name|cs
operator|==
name|Qt
operator|::
name|CaseInsensitive
condition|)
block|{
if|if
condition|(
operator|!
name|c1
operator|.
name|isLower
argument_list|()
condition|)
name|c1
operator|=
name|c1
operator|.
name|toLower
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|c2
operator|.
name|isLower
argument_list|()
condition|)
name|c2
operator|=
name|c2
operator|.
name|toLower
argument_list|()
expr_stmt|;
block|}
name|int
name|r
init|=
name|QString
operator|::
name|localeAwareCompare
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|r
operator|>
literal|0
condition|)
return|return
literal|1
return|;
block|}
comment|// The two strings are the same (02 == 2) so fall back to the normal sort
return|return
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|cs
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     \internal     Helper functor used by sort() */
end_comment
begin_class
DECL|class|QFileSystemModelSorter
class|class
name|QFileSystemModelSorter
block|{
public|public:
DECL|function|QFileSystemModelSorter
specifier|inline
name|QFileSystemModelSorter
parameter_list|(
name|int
name|column
parameter_list|)
member_init_list|:
name|sortColumn
argument_list|(
name|column
argument_list|)
block|{}
DECL|function|compareNodes
name|bool
name|compareNodes
parameter_list|(
specifier|const
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|l
parameter_list|,
specifier|const
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|r
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|sortColumn
condition|)
block|{
case|case
literal|0
case|:
block|{
ifndef|#
directive|ifndef
name|Q_OS_MAC
comment|// place directories before files
name|bool
name|left
init|=
name|l
operator|->
name|isDir
argument_list|()
decl_stmt|;
name|bool
name|right
init|=
name|r
operator|->
name|isDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|left
operator|^
name|right
condition|)
return|return
name|left
return|;
endif|#
directive|endif
return|return
name|QFileSystemModelPrivate
operator|::
name|naturalCompare
argument_list|(
name|l
operator|->
name|fileName
argument_list|,
name|r
operator|->
name|fileName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<
literal|0
return|;
block|}
case|case
literal|1
case|:
block|{
comment|// Directories go first
name|bool
name|left
init|=
name|l
operator|->
name|isDir
argument_list|()
decl_stmt|;
name|bool
name|right
init|=
name|r
operator|->
name|isDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|left
operator|^
name|right
condition|)
return|return
name|left
return|;
name|qint64
name|sizeDifference
init|=
name|l
operator|->
name|size
argument_list|()
operator|-
name|r
operator|->
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|sizeDifference
operator|==
literal|0
condition|)
return|return
name|QFileSystemModelPrivate
operator|::
name|naturalCompare
argument_list|(
name|l
operator|->
name|fileName
argument_list|,
name|r
operator|->
name|fileName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<
literal|0
return|;
return|return
name|sizeDifference
operator|<
literal|0
return|;
block|}
case|case
literal|2
case|:
block|{
name|int
name|compare
init|=
name|QString
operator|::
name|localeAwareCompare
argument_list|(
name|l
operator|->
name|type
argument_list|()
argument_list|,
name|r
operator|->
name|type
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
operator|==
literal|0
condition|)
return|return
name|QFileSystemModelPrivate
operator|::
name|naturalCompare
argument_list|(
name|l
operator|->
name|fileName
argument_list|,
name|r
operator|->
name|fileName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<
literal|0
return|;
return|return
name|compare
operator|<
literal|0
return|;
block|}
case|case
literal|3
case|:
block|{
if|if
condition|(
name|l
operator|->
name|lastModified
argument_list|()
operator|==
name|r
operator|->
name|lastModified
argument_list|()
condition|)
return|return
name|QFileSystemModelPrivate
operator|::
name|naturalCompare
argument_list|(
name|l
operator|->
name|fileName
argument_list|,
name|r
operator|->
name|fileName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<
literal|0
return|;
return|return
name|l
operator|->
name|lastModified
argument_list|()
operator|<
name|r
operator|->
name|lastModified
argument_list|()
return|;
block|}
block|}
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|function|operator ()
name|bool
name|operator
name|()
parameter_list|(
specifier|const
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|l
parameter_list|,
specifier|const
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|r
parameter_list|)
specifier|const
block|{
return|return
name|compareNodes
argument_list|(
name|l
argument_list|,
name|r
argument_list|)
return|;
block|}
private|private:
DECL|member|sortColumn
name|int
name|sortColumn
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*     \internal      Sort all of the children of parent */
end_comment
begin_function
DECL|function|sortChildren
name|void
name|QFileSystemModelPrivate
operator|::
name|sortChildren
parameter_list|(
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|indexNode
init|=
name|node
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexNode
operator|->
name|children
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|QVector
argument_list|<
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
operator|*
argument_list|>
name|values
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QFileSystemNode
modifier|*
argument_list|>
operator|::
name|const_iterator
name|iterator
decl_stmt|;
for|for
control|(
name|iterator
operator|=
name|indexNode
operator|->
name|children
operator|.
name|constBegin
argument_list|()
init|;
name|iterator
operator|!=
name|indexNode
operator|->
name|children
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|iterator
control|)
block|{
if|if
condition|(
name|filtersAcceptsNode
argument_list|(
name|iterator
operator|.
name|value
argument_list|()
argument_list|)
condition|)
block|{
name|values
operator|.
name|append
argument_list|(
name|iterator
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iterator
operator|.
name|value
argument_list|()
operator|->
name|isVisible
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|QFileSystemModelSorter
name|ms
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|values
operator|.
name|begin
argument_list|()
argument_list|,
name|values
operator|.
name|end
argument_list|()
argument_list|,
name|ms
argument_list|)
expr_stmt|;
comment|// First update the new visible list
name|indexNode
operator|->
name|visibleChildren
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//No more dirty item we reset our internal dirty index
name|indexNode
operator|->
name|dirtyChildrenIndex
operator|=
operator|-
literal|1
expr_stmt|;
specifier|const
name|int
name|numValues
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
name|indexNode
operator|->
name|visibleChildren
operator|.
name|reserve
argument_list|(
name|numValues
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
operator|++
name|i
control|)
block|{
name|indexNode
operator|->
name|visibleChildren
operator|.
name|append
argument_list|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|fileName
argument_list|)
expr_stmt|;
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|isVisible
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|disableRecursiveSort
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|q
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QModelIndex
name|childIndex
init|=
name|q
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|indexNode
init|=
name|node
argument_list|(
name|childIndex
argument_list|)
decl_stmt|;
comment|//Only do a recursive sort on visible nodes
if|if
condition|(
name|indexNode
operator|->
name|isVisible
condition|)
name|sortChildren
argument_list|(
name|column
argument_list|,
name|childIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sort
name|void
name|QFileSystemModel
operator|::
name|sort
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sortOrder
operator|==
name|order
operator|&&
name|d
operator|->
name|sortColumn
operator|==
name|column
operator|&&
operator|!
name|d
operator|->
name|forceSort
condition|)
return|return;
emit|emit
name|layoutAboutToBeChanged
argument_list|()
emit|;
name|QModelIndexList
name|oldList
init|=
name|persistentIndexList
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
operator|*
argument_list|,
name|int
argument_list|>
argument_list|>
name|oldNodes
decl_stmt|;
specifier|const
name|int
name|nodeCount
init|=
name|oldList
operator|.
name|count
argument_list|()
decl_stmt|;
name|oldNodes
operator|.
name|reserve
argument_list|(
name|nodeCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QModelIndex
modifier|&
name|oldNode
init|=
name|oldList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QPair
argument_list|<
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
operator|*
argument_list|,
name|int
argument_list|>
name|pair
argument_list|(
name|d
operator|->
name|node
argument_list|(
name|oldNode
argument_list|)
argument_list|,
name|oldNode
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
name|oldNodes
operator|.
name|append
argument_list|(
name|pair
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|sortColumn
operator|==
name|column
operator|&&
name|d
operator|->
name|sortOrder
operator|!=
name|order
operator|&&
operator|!
name|d
operator|->
name|forceSort
operator|)
condition|)
block|{
comment|//we sort only from where we are, don't need to sort all the model
name|d
operator|->
name|sortChildren
argument_list|(
name|column
argument_list|,
name|index
argument_list|(
name|rootPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|sortColumn
operator|=
name|column
expr_stmt|;
name|d
operator|->
name|forceSort
operator|=
literal|false
expr_stmt|;
block|}
name|d
operator|->
name|sortOrder
operator|=
name|order
expr_stmt|;
name|QModelIndexList
name|newList
decl_stmt|;
specifier|const
name|int
name|numOldNodes
init|=
name|oldNodes
operator|.
name|size
argument_list|()
decl_stmt|;
name|newList
operator|.
name|reserve
argument_list|(
name|numOldNodes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOldNodes
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPair
argument_list|<
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
operator|*
argument_list|,
name|int
argument_list|>
modifier|&
name|oldNode
init|=
name|oldNodes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|newList
operator|.
name|append
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|oldNode
operator|.
name|first
argument_list|,
name|oldNode
operator|.
name|second
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|changePersistentIndexList
argument_list|(
name|oldList
argument_list|,
name|newList
argument_list|)
expr_stmt|;
emit|emit
name|layoutChanged
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of MIME types that can be used to describe a list of items     in the model. */
end_comment
begin_function
DECL|function|mimeTypes
name|QStringList
name|QFileSystemModel
operator|::
name|mimeTypes
parameter_list|()
specifier|const
block|{
return|return
name|QStringList
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns an object that contains a serialized description of the specified     \a indexes. The format used to describe the items corresponding to the     indexes is obtained from the mimeTypes() function.      If the list of indexes is empty, 0 is returned rather than a serialized     empty list. */
end_comment
begin_function
DECL|function|mimeData
name|QMimeData
modifier|*
name|QFileSystemModel
operator|::
name|mimeData
parameter_list|(
specifier|const
name|QModelIndexList
modifier|&
name|indexes
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QUrl
argument_list|>
name|urls
decl_stmt|;
name|QList
argument_list|<
name|QModelIndex
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|indexes
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|indexes
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|column
argument_list|()
operator|==
literal|0
condition|)
name|urls
operator|<<
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|filePath
argument_list|(
operator|*
name|it
argument_list|)
argument_list|)
expr_stmt|;
name|QMimeData
modifier|*
name|data
init|=
operator|new
name|QMimeData
argument_list|()
decl_stmt|;
name|data
operator|->
name|setUrls
argument_list|(
name|urls
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
end_function
begin_comment
comment|/*!     Handles the \a data supplied by a drag and drop operation that ended with     the given \a action over the row in the model specified by the \a row and     \a column and by the \a parent index.      \sa supportedDropActions() */
end_comment
begin_function
DECL|function|dropMimeData
name|bool
name|QFileSystemModel
operator|::
name|dropMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|DropAction
name|action
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isValid
argument_list|()
operator|||
name|isReadOnly
argument_list|()
condition|)
return|return
literal|false
return|;
name|bool
name|success
init|=
literal|true
decl_stmt|;
name|QString
name|to
init|=
name|filePath
argument_list|(
name|parent
argument_list|)
operator|+
name|QDir
operator|::
name|separator
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QUrl
argument_list|>
name|urls
init|=
name|data
operator|->
name|urls
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QUrl
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|urls
operator|.
name|constBegin
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|Qt
operator|::
name|CopyAction
case|:
for|for
control|(
init|;
name|it
operator|!=
name|urls
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|path
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|toLocalFile
argument_list|()
decl_stmt|;
name|success
operator|=
name|QFile
operator|::
name|copy
argument_list|(
name|path
argument_list|,
name|to
operator|+
name|QFileInfo
argument_list|(
name|path
argument_list|)
operator|.
name|fileName
argument_list|()
argument_list|)
operator|&&
name|success
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|LinkAction
case|:
for|for
control|(
init|;
name|it
operator|!=
name|urls
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|path
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|toLocalFile
argument_list|()
decl_stmt|;
name|success
operator|=
name|QFile
operator|::
name|link
argument_list|(
name|path
argument_list|,
name|to
operator|+
name|QFileInfo
argument_list|(
name|path
argument_list|)
operator|.
name|fileName
argument_list|()
argument_list|)
operator|&&
name|success
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|MoveAction
case|:
for|for
control|(
init|;
name|it
operator|!=
name|urls
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|path
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|toLocalFile
argument_list|()
decl_stmt|;
name|success
operator|=
name|QFile
operator|::
name|rename
argument_list|(
name|path
argument_list|,
name|to
operator|+
name|QFileInfo
argument_list|(
name|path
argument_list|)
operator|.
name|fileName
argument_list|()
argument_list|)
operator|&&
name|success
expr_stmt|;
block|}
break|break;
default|default:
return|return
literal|false
return|;
block|}
return|return
name|success
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|supportedDropActions
name|Qt
operator|::
name|DropActions
name|QFileSystemModel
operator|::
name|supportedDropActions
parameter_list|()
specifier|const
block|{
return|return
name|Qt
operator|::
name|CopyAction
operator||
name|Qt
operator|::
name|MoveAction
operator||
name|Qt
operator|::
name|LinkAction
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the path of the item stored in the model under the     \a index given. */
end_comment
begin_function
DECL|function|filePath
name|QString
name|QFileSystemModel
operator|::
name|filePath
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|QString
name|fullPath
init|=
name|d
operator|->
name|filePath
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|dirNode
init|=
name|d
operator|->
name|node
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirNode
operator|->
name|isSymLink
argument_list|()
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
operator|&&
name|d
operator|->
name|fileInfoGatherer
operator|.
name|resolveSymlinks
argument_list|()
endif|#
directive|endif
operator|&&
name|d
operator|->
name|resolvedSymLinks
operator|.
name|contains
argument_list|(
name|fullPath
argument_list|)
operator|&&
name|dirNode
operator|->
name|isDir
argument_list|()
condition|)
block|{
name|QFileInfo
name|resolvedInfo
argument_list|(
name|fullPath
argument_list|)
decl_stmt|;
name|resolvedInfo
operator|=
name|resolvedInfo
operator|.
name|canonicalFilePath
argument_list|()
expr_stmt|;
if|if
condition|(
name|resolvedInfo
operator|.
name|exists
argument_list|()
condition|)
return|return
name|resolvedInfo
operator|.
name|filePath
argument_list|()
return|;
block|}
return|return
name|fullPath
return|;
block|}
end_function
begin_function
DECL|function|filePath
name|QString
name|QFileSystemModelPrivate
operator|::
name|filePath
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|Q_ASSERT
argument_list|(
name|index
operator|.
name|model
argument_list|()
operator|==
name|q
argument_list|)
expr_stmt|;
name|QStringList
name|path
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|index
decl_stmt|;
while|while
condition|(
name|idx
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|dirNode
init|=
name|node
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirNode
condition|)
name|path
operator|.
name|prepend
argument_list|(
name|dirNode
operator|->
name|fileName
argument_list|)
expr_stmt|;
name|idx
operator|=
name|idx
operator|.
name|parent
argument_list|()
expr_stmt|;
block|}
name|QString
name|fullPath
init|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|path
operator|.
name|join
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
operator|(
name|fullPath
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|)
operator|&&
name|fullPath
index|[
literal|0
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|&&
name|fullPath
index|[
literal|1
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
name|fullPath
operator|=
name|fullPath
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
if|if
condition|(
name|fullPath
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|&&
name|fullPath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
condition|)
name|fullPath
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|fullPath
return|;
block|}
end_function
begin_comment
comment|/*!     Create a directory with the \a name in the \a parent model index. */
end_comment
begin_function
DECL|function|mkdir
name|QModelIndex
name|QFileSystemModel
operator|::
name|mkdir
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|parent
return|;
name|QDir
name|dir
argument_list|(
name|filePath
argument_list|(
name|parent
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdir
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|parentNode
init|=
name|d
operator|->
name|node
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|d
operator|->
name|addNode
argument_list|(
name|parentNode
argument_list|,
name|name
argument_list|,
name|QFileInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|parentNode
operator|->
name|children
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|node
init|=
name|parentNode
operator|->
name|children
index|[
name|name
index|]
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|node
operator|->
name|populate
argument_list|(
name|d
operator|->
name|fileInfoGatherer
operator|.
name|getInfo
argument_list|(
name|QFileInfo
argument_list|(
name|dir
operator|.
name|absolutePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|addVisibleFiles
argument_list|(
name|parentNode
argument_list|,
name|QStringList
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|index
argument_list|(
name|node
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the complete OR-ed together combination of QFile::Permission for the \a index.  */
end_comment
begin_function
DECL|function|permissions
name|QFile
operator|::
name|Permissions
name|QFileSystemModel
operator|::
name|permissions
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|node
argument_list|(
name|index
argument_list|)
operator|->
name|permissions
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the directory that is being watched by the model to \a newPath by     installing a \l{QFileSystemWatcher}{file system watcher} on it. Any     changes to files and directories within this directory will be     reflected in the model.      If the path is changed, the rootPathChanged() signal will be emitted.      \note This function does not change the structure of the model or     modify the data available to views. In other words, the "root" of     the model is \e not changed to include only files and directories     within the directory specified by \a newPath in the file system.   */
end_comment
begin_function
DECL|function|setRootPath
name|QModelIndex
name|QFileSystemModel
operator|::
name|setRootPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|newPath
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
ifdef|#
directive|ifdef
name|Q_OS_WIN32
name|QString
name|longNewPath
init|=
name|qt_GetLongPathName
argument_list|(
name|newPath
argument_list|)
decl_stmt|;
else|#
directive|else
name|QString
name|longNewPath
init|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|newPath
argument_list|)
decl_stmt|;
endif|#
directive|endif
else|#
directive|else
name|QString
name|longNewPath
init|=
name|newPath
decl_stmt|;
endif|#
directive|endif
name|QDir
name|newPathDir
argument_list|(
name|longNewPath
argument_list|)
decl_stmt|;
comment|//we remove .. and . from the given path if exist
if|if
condition|(
operator|!
name|newPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|longNewPath
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|longNewPath
argument_list|)
expr_stmt|;
name|newPathDir
operator|.
name|setPath
argument_list|(
name|longNewPath
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|setRootPath
operator|=
literal|true
expr_stmt|;
comment|//user don't ask for the root path ("") but the conversion failed
if|if
condition|(
operator|!
name|newPath
operator|.
name|isEmpty
argument_list|()
operator|&&
name|longNewPath
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|d
operator|->
name|index
argument_list|(
name|rootPath
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|d
operator|->
name|rootDir
operator|.
name|path
argument_list|()
operator|==
name|longNewPath
condition|)
return|return
name|d
operator|->
name|index
argument_list|(
name|rootPath
argument_list|()
argument_list|)
return|;
name|bool
name|showDrives
init|=
operator|(
name|longNewPath
operator|.
name|isEmpty
argument_list|()
operator|||
name|longNewPath
operator|==
name|d
operator|->
name|myComputer
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|showDrives
operator|&&
operator|!
name|newPathDir
operator|.
name|exists
argument_list|()
condition|)
return|return
name|d
operator|->
name|index
argument_list|(
name|rootPath
argument_list|()
argument_list|)
return|;
comment|//We remove the watcher on the previous path
if|if
condition|(
operator|!
name|rootPath
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|rootPath
argument_list|()
operator|!=
name|QLatin1String
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|//This remove the watcher for the old rootPath
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|d
operator|->
name|fileInfoGatherer
operator|.
name|removePath
argument_list|(
name|rootPath
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//This line "marks" the node as dirty, so the next fetchMore
comment|//call on the path will ask the gatherer to install a watcher again
comment|//But it doesn't re-fetch everything
name|d
operator|->
name|node
argument_list|(
name|rootPath
argument_list|()
argument_list|)
operator|->
name|populatedChildren
operator|=
literal|false
expr_stmt|;
block|}
comment|// We have a new valid root path
name|d
operator|->
name|rootDir
operator|=
name|newPathDir
expr_stmt|;
name|QModelIndex
name|newRootIndex
decl_stmt|;
if|if
condition|(
name|showDrives
condition|)
block|{
comment|// otherwise dir will become '.'
name|d
operator|->
name|rootDir
operator|.
name|setPath
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newRootIndex
operator|=
name|d
operator|->
name|index
argument_list|(
name|newPathDir
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fetchMore
argument_list|(
name|newRootIndex
argument_list|)
expr_stmt|;
emit|emit
name|rootPathChanged
argument_list|(
name|longNewPath
argument_list|)
emit|;
name|d
operator|->
name|forceSort
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|delayedSort
argument_list|()
expr_stmt|;
return|return
name|newRootIndex
return|;
block|}
end_function
begin_comment
comment|/*!     The currently set root path      \sa rootDirectory() */
end_comment
begin_function
DECL|function|rootPath
name|QString
name|QFileSystemModel
operator|::
name|rootPath
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|rootDir
operator|.
name|path
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     The currently set directory      \sa rootPath() */
end_comment
begin_function
DECL|function|rootDirectory
name|QDir
name|QFileSystemModel
operator|::
name|rootDirectory
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|d
operator|->
name|rootDir
argument_list|)
decl_stmt|;
name|dir
operator|.
name|setNameFilters
argument_list|(
name|nameFilters
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dir
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a provider of file icons for the directory model. */
end_comment
begin_function
DECL|function|setIconProvider
name|void
name|QFileSystemModel
operator|::
name|setIconProvider
parameter_list|(
name|QFileIconProvider
modifier|*
name|provider
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|d
operator|->
name|fileInfoGatherer
operator|.
name|setIconProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|root
operator|.
name|updateIcon
argument_list|(
name|provider
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the file icon provider for this directory model. */
end_comment
begin_function
DECL|function|iconProvider
name|QFileIconProvider
modifier|*
name|QFileSystemModel
operator|::
name|iconProvider
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|fileInfoGatherer
operator|.
name|iconProvider
argument_list|()
return|;
else|#
directive|else
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Sets the directory model's filter to that specified by \a filters.      Note that the filter you set should always include the QDir::AllDirs enum value,     otherwise QFileSystemModel won't be able to read the directory structure.      \sa QDir::Filters */
end_comment
begin_function
DECL|function|setFilter
name|void
name|QFileSystemModel
operator|::
name|setFilter
parameter_list|(
name|QDir
operator|::
name|Filters
name|filters
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|filters
operator|==
name|filters
condition|)
return|return;
name|d
operator|->
name|filters
operator|=
name|filters
expr_stmt|;
comment|// CaseSensitivity might have changed
name|setNameFilters
argument_list|(
name|nameFilters
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|forceSort
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|delayedSort
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the filter specified for the directory model.      If a filter has not been set, the default filter is QDir::AllEntries |     QDir::NoDotAndDotDot | QDir::AllDirs.      \sa QDir::Filters */
end_comment
begin_function
DECL|function|filter
name|QDir
operator|::
name|Filters
name|QFileSystemModel
operator|::
name|filter
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|filters
return|;
block|}
end_function
begin_comment
comment|/*!     \property QFileSystemModel::resolveSymlinks     \brief Whether the directory model should resolve symbolic links      This is only relevant on Windows.      By default, this property is \c true. */
end_comment
begin_function
DECL|function|setResolveSymlinks
name|void
name|QFileSystemModel
operator|::
name|setResolveSymlinks
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|fileInfoGatherer
operator|.
name|setResolveSymlinks
argument_list|(
name|enable
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|enable
argument_list|)
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|resolveSymlinks
name|bool
name|QFileSystemModel
operator|::
name|resolveSymlinks
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|fileInfoGatherer
operator|.
name|resolveSymlinks
argument_list|()
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \property QFileSystemModel::readOnly     \brief Whether the directory model allows writing to the file system      If this property is set to false, the directory model will allow renaming, copying     and deleting of files and directories.      This property is \c true by default */
end_comment
begin_function
DECL|function|setReadOnly
name|void
name|QFileSystemModel
operator|::
name|setReadOnly
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|d
operator|->
name|readOnly
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isReadOnly
name|bool
name|QFileSystemModel
operator|::
name|isReadOnly
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|readOnly
return|;
block|}
end_function
begin_comment
comment|/*!     \property QFileSystemModel::nameFilterDisables     \brief Whether files that don't pass the name filter are hidden or disabled      This property is \c true by default */
end_comment
begin_function
DECL|function|setNameFilterDisables
name|void
name|QFileSystemModel
operator|::
name|setNameFilterDisables
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|nameFilterDisables
operator|==
name|enable
condition|)
return|return;
name|d
operator|->
name|nameFilterDisables
operator|=
name|enable
expr_stmt|;
name|d
operator|->
name|forceSort
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|delayedSort
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nameFilterDisables
name|bool
name|QFileSystemModel
operator|::
name|nameFilterDisables
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|nameFilterDisables
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the name \a filters to apply against the existing files. */
end_comment
begin_function
DECL|function|setNameFilters
name|void
name|QFileSystemModel
operator|::
name|setNameFilters
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|filters
parameter_list|)
block|{
comment|// Prep the regexp's ahead of time
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|bypassFilters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// update the bypass filter to only bypass the stuff that must be kept around
name|d
operator|->
name|bypassFilters
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// We guarantee that rootPath will stick around
name|QPersistentModelIndex
name|root
argument_list|(
name|index
argument_list|(
name|rootPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QModelIndexList
name|persistantList
init|=
name|persistentIndexList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|persistantList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|node
decl_stmt|;
name|node
operator|=
name|d
operator|->
name|node
argument_list|(
name|persistantList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|node
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|bypassFilters
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
break|break;
if|if
condition|(
name|node
operator|->
name|isDir
argument_list|()
condition|)
name|d
operator|->
name|bypassFilters
index|[
name|node
index|]
operator|=
literal|true
expr_stmt|;
name|node
operator|=
name|node
operator|->
name|parent
expr_stmt|;
block|}
block|}
block|}
name|d
operator|->
name|nameFilters
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|const
name|Qt
operator|::
name|CaseSensitivity
name|caseSensitive
init|=
operator|(
name|filter
argument_list|()
operator|&
name|QDir
operator|::
name|CaseSensitive
operator|)
condition|?
name|Qt
operator|::
name|CaseSensitive
else|:
name|Qt
operator|::
name|CaseInsensitive
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filters
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|d
operator|->
name|nameFilters
operator|<<
name|QRegExp
argument_list|(
name|filters
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|caseSensitive
argument_list|,
name|QRegExp
operator|::
name|Wildcard
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|forceSort
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|delayedSort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Returns a list of filters applied to the names in the model. */
end_comment
begin_function
DECL|function|nameFilters
name|QStringList
name|QFileSystemModel
operator|::
name|nameFilters
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|QStringList
name|filters
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
specifier|const
name|int
name|numNameFilters
init|=
name|d
operator|->
name|nameFilters
operator|.
name|size
argument_list|()
decl_stmt|;
name|filters
operator|.
name|reserve
argument_list|(
name|numNameFilters
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNameFilters
condition|;
operator|++
name|i
control|)
block|{
name|filters
operator|<<
name|d
operator|->
name|nameFilters
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|pattern
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|filters
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QFileSystemModel
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|Q_D
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LanguageChange
condition|)
block|{
name|d
operator|->
name|root
operator|.
name|retranslateStrings
argument_list|(
name|d
operator|->
name|fileInfoGatherer
operator|.
name|iconProvider
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
return|return
name|QAbstractItemModel
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rmdir
name|bool
name|QFileSystemModel
operator|::
name|rmdir
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|aindex
parameter_list|)
block|{
name|QString
name|path
init|=
name|filePath
argument_list|(
name|aindex
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|QFileSystemModelPrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QFileSystemModelPrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|fileInfoGatherer
operator|.
name|removePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
name|path
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!      \internal      Performed quick listing and see if any files have been added or removed,     then fetch more information on visible files.  */
end_comment
begin_function
DECL|function|_q_directoryChanged
name|void
name|QFileSystemModelPrivate
operator|::
name|_q_directoryChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|directory
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|files
parameter_list|)
block|{
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|parentNode
init|=
name|node
argument_list|(
name|directory
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentNode
operator|->
name|children
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|QStringList
name|toRemove
decl_stmt|;
name|QStringList
name|newFiles
init|=
name|files
decl_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|newFiles
operator|.
name|begin
argument_list|()
argument_list|,
name|newFiles
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QFileSystemNode
modifier|*
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|parentNode
operator|->
name|children
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|parentNode
operator|->
name|children
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|QStringList
operator|::
name|iterator
name|iterator
init|=
name|std
operator|::
name|lower_bound
argument_list|(
name|newFiles
operator|.
name|begin
argument_list|()
argument_list|,
name|newFiles
operator|.
name|end
argument_list|()
argument_list|,
name|i
operator|.
name|value
argument_list|()
operator|->
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|iterator
operator|==
name|newFiles
operator|.
name|end
argument_list|()
operator|)
operator|||
operator|(
name|i
operator|.
name|value
argument_list|()
operator|->
name|fileName
operator|<
operator|*
name|iterator
operator|)
condition|)
name|toRemove
operator|.
name|append
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|->
name|fileName
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toRemove
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|removeNode
argument_list|(
name|parentNode
argument_list|,
name|toRemove
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Adds a new file to the children of parentNode      *WARNING* this will change the count of children */
end_comment
begin_function
DECL|function|addNode
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|QFileSystemModelPrivate
operator|::
name|addNode
parameter_list|(
name|QFileSystemNode
modifier|*
name|parentNode
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QFileInfo
modifier|&
name|info
parameter_list|)
block|{
comment|// In the common case, itemLocation == count() so check there first
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|node
init|=
operator|new
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
argument_list|(
name|fileName
argument_list|,
name|parentNode
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|node
operator|->
name|populate
argument_list|(
name|info
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|info
argument_list|)
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
comment|//The parentNode is "" so we are listing the drives
if|if
condition|(
name|parentNode
operator|->
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wchar_t
name|name
index|[
name|MAX_PATH
operator|+
literal|1
index|]
decl_stmt|;
comment|//GetVolumeInformation requires to add trailing backslash
specifier|const
name|QString
name|nodeName
init|=
name|fileName
operator|+
name|QLatin1String
argument_list|(
literal|"\\"
argument_list|)
decl_stmt|;
name|BOOL
name|success
init|=
operator|::
name|GetVolumeInformation
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
operator|(
name|nodeName
operator|.
name|utf16
argument_list|()
operator|)
argument_list|,
name|name
argument_list|,
name|MAX_PATH
operator|+
literal|1
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
operator|&&
name|name
index|[
literal|0
index|]
condition|)
name|node
operator|->
name|volumeName
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|parentNode
operator|->
name|children
operator|.
name|insert
argument_list|(
name|fileName
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      File at parentNode->children(itemLocation) has been removed, remove from the lists     and emit signals if necessary      *WARNING* this will change the count of children and could change visibleChildren  */
end_comment
begin_function
DECL|function|removeNode
name|void
name|QFileSystemModelPrivate
operator|::
name|removeNode
parameter_list|(
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|parentNode
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|parent
init|=
name|index
argument_list|(
name|parentNode
argument_list|)
decl_stmt|;
name|bool
name|indexHidden
init|=
name|isHiddenByFilter
argument_list|(
name|parentNode
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|int
name|vLocation
init|=
name|parentNode
operator|->
name|visibleLocation
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|vLocation
operator|>=
literal|0
operator|&&
operator|!
name|indexHidden
condition|)
name|q
operator|->
name|beginRemoveRows
argument_list|(
name|parent
argument_list|,
name|translateVisibleLocation
argument_list|(
name|parentNode
argument_list|,
name|vLocation
argument_list|)
argument_list|,
name|translateVisibleLocation
argument_list|(
name|parentNode
argument_list|,
name|vLocation
argument_list|)
argument_list|)
expr_stmt|;
name|QFileSystemNode
modifier|*
name|node
init|=
name|parentNode
operator|->
name|children
operator|.
name|take
argument_list|(
name|name
argument_list|)
decl_stmt|;
operator|delete
name|node
expr_stmt|;
comment|// cleanup sort files after removing rather then re-sorting which is O(n)
if|if
condition|(
name|vLocation
operator|>=
literal|0
condition|)
name|parentNode
operator|->
name|visibleChildren
operator|.
name|removeAt
argument_list|(
name|vLocation
argument_list|)
expr_stmt|;
if|if
condition|(
name|vLocation
operator|>=
literal|0
operator|&&
operator|!
name|indexHidden
condition|)
name|q
operator|->
name|endRemoveRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      File at parentNode->children(itemLocation) was not visible before, but now should be     and emit signals if necessary.      *WARNING* this will change the visible count  */
end_comment
begin_function
DECL|function|addVisibleFiles
name|void
name|QFileSystemModelPrivate
operator|::
name|addVisibleFiles
parameter_list|(
name|QFileSystemNode
modifier|*
name|parentNode
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|newFiles
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|parent
init|=
name|index
argument_list|(
name|parentNode
argument_list|)
decl_stmt|;
name|bool
name|indexHidden
init|=
name|isHiddenByFilter
argument_list|(
name|parentNode
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|indexHidden
condition|)
block|{
name|q
operator|->
name|beginInsertRows
argument_list|(
name|parent
argument_list|,
name|parentNode
operator|->
name|visibleChildren
operator|.
name|count
argument_list|()
argument_list|,
name|parentNode
operator|->
name|visibleChildren
operator|.
name|count
argument_list|()
operator|+
name|newFiles
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentNode
operator|->
name|dirtyChildrenIndex
operator|==
operator|-
literal|1
condition|)
name|parentNode
operator|->
name|dirtyChildrenIndex
operator|=
name|parentNode
operator|->
name|visibleChildren
operator|.
name|count
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newFiles
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|parentNode
operator|->
name|visibleChildren
operator|.
name|append
argument_list|(
name|newFiles
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|parentNode
operator|->
name|children
operator|.
name|value
argument_list|(
name|newFiles
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|->
name|isVisible
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|indexHidden
condition|)
name|q
operator|->
name|endInsertRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      File was visible before, but now should NOT be      *WARNING* this will change the visible count  */
end_comment
begin_function
DECL|function|removeVisibleFile
name|void
name|QFileSystemModelPrivate
operator|::
name|removeVisibleFile
parameter_list|(
name|QFileSystemNode
modifier|*
name|parentNode
parameter_list|,
name|int
name|vLocation
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|vLocation
operator|==
operator|-
literal|1
condition|)
return|return;
name|QModelIndex
name|parent
init|=
name|index
argument_list|(
name|parentNode
argument_list|)
decl_stmt|;
name|bool
name|indexHidden
init|=
name|isHiddenByFilter
argument_list|(
name|parentNode
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|indexHidden
condition|)
name|q
operator|->
name|beginRemoveRows
argument_list|(
name|parent
argument_list|,
name|translateVisibleLocation
argument_list|(
name|parentNode
argument_list|,
name|vLocation
argument_list|)
argument_list|,
name|translateVisibleLocation
argument_list|(
name|parentNode
argument_list|,
name|vLocation
argument_list|)
argument_list|)
expr_stmt|;
name|parentNode
operator|->
name|children
operator|.
name|value
argument_list|(
name|parentNode
operator|->
name|visibleChildren
operator|.
name|at
argument_list|(
name|vLocation
argument_list|)
argument_list|)
operator|->
name|isVisible
operator|=
literal|false
expr_stmt|;
name|parentNode
operator|->
name|visibleChildren
operator|.
name|removeAt
argument_list|(
name|vLocation
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|indexHidden
condition|)
name|q
operator|->
name|endRemoveRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      The thread has received new information about files,     update and emit dataChanged if it has actually changed.  */
end_comment
begin_function
DECL|function|_q_fileSystemChanged
name|void
name|QFileSystemModelPrivate
operator|::
name|_q_fileSystemChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QFileInfo
argument_list|>
argument_list|>
modifier|&
name|updates
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|Q_Q
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|rowsToUpdate
decl_stmt|;
name|QStringList
name|newFiles
decl_stmt|;
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|parentNode
init|=
name|node
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QModelIndex
name|parentIndex
init|=
name|index
argument_list|(
name|parentNode
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updates
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|fileName
init|=
name|updates
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|fileName
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QExtendedInformation
name|info
init|=
name|fileInfoGatherer
operator|.
name|getInfo
argument_list|(
name|updates
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
argument_list|)
decl_stmt|;
name|bool
name|previouslyHere
init|=
name|parentNode
operator|->
name|children
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|previouslyHere
condition|)
block|{
name|addNode
argument_list|(
name|parentNode
argument_list|,
name|fileName
argument_list|,
name|info
operator|.
name|fileInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QFileSystemModelPrivate
operator|::
name|QFileSystemNode
modifier|*
name|node
init|=
name|parentNode
operator|->
name|children
operator|.
name|value
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|bool
name|isCaseSensitive
init|=
name|parentNode
operator|->
name|caseSensitive
argument_list|()
decl_stmt|;
if|if
condition|(
name|isCaseSensitive
condition|)
block|{
if|if
condition|(
name|node
operator|->
name|fileName
operator|!=
name|fileName
condition|)
continue|continue;
block|}
else|else
block|{
if|if
condition|(
name|QString
operator|::
name|compare
argument_list|(
name|node
operator|->
name|fileName
argument_list|,
name|fileName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|!=
literal|0
condition|)
continue|continue;
block|}
if|if
condition|(
name|isCaseSensitive
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|node
operator|->
name|fileName
operator|==
name|fileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|->
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|size
argument_list|()
operator|==
operator|-
literal|1
operator|&&
operator|!
name|info
operator|.
name|isSymLink
argument_list|()
condition|)
block|{
name|removeNode
argument_list|(
name|parentNode
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|*
name|node
operator|!=
name|info
condition|)
block|{
name|node
operator|->
name|populate
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|bypassFilters
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// brand new information.
if|if
condition|(
name|filtersAcceptsNode
argument_list|(
name|node
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|node
operator|->
name|isVisible
condition|)
block|{
name|newFiles
operator|.
name|append
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rowsToUpdate
operator|.
name|append
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|node
operator|->
name|isVisible
condition|)
block|{
name|int
name|visibleLocation
init|=
name|parentNode
operator|->
name|visibleLocation
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|removeVisibleFile
argument_list|(
name|parentNode
argument_list|,
name|visibleLocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The file is not visible, don't do anything
block|}
block|}
block|}
block|}
comment|// bundle up all of the changed signals into as few as possible.
name|std
operator|::
name|sort
argument_list|(
name|rowsToUpdate
operator|.
name|begin
argument_list|()
argument_list|,
name|rowsToUpdate
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|min
decl_stmt|;
name|QString
name|max
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowsToUpdate
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|value
init|=
name|rowsToUpdate
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//##TODO is there a way to bundle signals with QString as the content of the list?
comment|/*if (min.isEmpty()) {             min = value;             if (i != rowsToUpdate.count() - 1)                 continue;         }         if (i != rowsToUpdate.count() - 1) {             if ((value == min + 1&& max.isEmpty()) || value == max + 1) {                 max = value;                 continue;             }         }*/
name|max
operator|=
name|value
expr_stmt|;
name|min
operator|=
name|value
expr_stmt|;
name|int
name|visibleMin
init|=
name|parentNode
operator|->
name|visibleLocation
argument_list|(
name|min
argument_list|)
decl_stmt|;
name|int
name|visibleMax
init|=
name|parentNode
operator|->
name|visibleLocation
argument_list|(
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|visibleMin
operator|>=
literal|0
operator|&&
name|visibleMin
operator|<
name|parentNode
operator|->
name|visibleChildren
operator|.
name|count
argument_list|()
operator|&&
name|parentNode
operator|->
name|visibleChildren
operator|.
name|at
argument_list|(
name|visibleMin
argument_list|)
operator|==
name|min
operator|&&
name|visibleMax
operator|>=
literal|0
condition|)
block|{
name|QModelIndex
name|bottom
init|=
name|q
operator|->
name|index
argument_list|(
name|translateVisibleLocation
argument_list|(
name|parentNode
argument_list|,
name|visibleMin
argument_list|)
argument_list|,
literal|0
argument_list|,
name|parentIndex
argument_list|)
decl_stmt|;
name|QModelIndex
name|top
init|=
name|q
operator|->
name|index
argument_list|(
name|translateVisibleLocation
argument_list|(
name|parentNode
argument_list|,
name|visibleMax
argument_list|)
argument_list|,
literal|3
argument_list|,
name|parentIndex
argument_list|)
decl_stmt|;
emit|emit
name|q
operator|->
name|dataChanged
argument_list|(
name|bottom
argument_list|,
name|top
argument_list|)
emit|;
block|}
comment|/*min = QString();         max = QString();*/
block|}
if|if
condition|(
name|newFiles
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addVisibleFiles
argument_list|(
name|parentNode
argument_list|,
name|newFiles
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newFiles
operator|.
name|count
argument_list|()
operator|>
literal|0
operator|||
operator|(
name|sortColumn
operator|!=
literal|0
operator|&&
name|rowsToUpdate
operator|.
name|count
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|forceSort
operator|=
literal|true
expr_stmt|;
name|delayedSort
argument_list|()
expr_stmt|;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|path
argument_list|)
name|Q_UNUSED
argument_list|(
argument|updates
argument_list|)
endif|#
directive|endif
comment|// !QT_NO_FILESYSTEMWATCHER
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_resolvedName
name|void
name|QFileSystemModelPrivate
operator|::
name|_q_resolvedName
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QString
modifier|&
name|resolvedName
parameter_list|)
block|{
name|resolvedSymLinks
index|[
name|fileName
index|]
operator|=
name|resolvedName
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|init
name|void
name|QFileSystemModelPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFileSystemModel
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QFileInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|q
operator|->
name|connect
argument_list|(
operator|&
name|fileInfoGatherer
argument_list|,
name|SIGNAL
argument_list|(
name|newListOfFiles
argument_list|(
name|QString
argument_list|,
name|QStringList
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_directoryChanged
argument_list|(
name|QString
argument_list|,
name|QStringList
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
operator|&
name|fileInfoGatherer
argument_list|,
name|SIGNAL
argument_list|(
name|updates
argument_list|(
name|QString
argument_list|,
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QFileInfo
argument_list|>
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_fileSystemChanged
argument_list|(
name|QString
argument_list|,
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QFileInfo
argument_list|>
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
operator|&
name|fileInfoGatherer
argument_list|,
name|SIGNAL
argument_list|(
name|nameResolved
argument_list|(
name|QString
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_resolvedName
argument_list|(
name|QString
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
operator|&
name|fileInfoGatherer
argument_list|,
name|SIGNAL
argument_list|(
name|directoryLoaded
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|directoryLoaded
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// !QT_NO_FILESYSTEMWATCHER
name|q
operator|->
name|connect
argument_list|(
operator|&
name|delayedSortTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_performDelayedSort
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|roleNames
operator|.
name|insertMulti
argument_list|(
name|QFileSystemModel
operator|::
name|FileIconRole
argument_list|,
name|QByteArrayLiteral
argument_list|(
literal|"fileIcon"
argument_list|)
argument_list|)
expr_stmt|;
comment|// == Qt::decoration
name|roleNames
operator|.
name|insert
argument_list|(
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|,
name|QByteArrayLiteral
argument_list|(
literal|"filePath"
argument_list|)
argument_list|)
expr_stmt|;
name|roleNames
operator|.
name|insert
argument_list|(
name|QFileSystemModel
operator|::
name|FileNameRole
argument_list|,
name|QByteArrayLiteral
argument_list|(
literal|"fileName"
argument_list|)
argument_list|)
expr_stmt|;
name|roleNames
operator|.
name|insert
argument_list|(
name|QFileSystemModel
operator|::
name|FilePermissions
argument_list|,
name|QByteArrayLiteral
argument_list|(
literal|"filePermissions"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Returns \c false if node doesn't pass the filters otherwise true      QDir::Modified is not supported     QDir::Drives is not supported */
end_comment
begin_function
DECL|function|filtersAcceptsNode
name|bool
name|QFileSystemModelPrivate
operator|::
name|filtersAcceptsNode
parameter_list|(
specifier|const
name|QFileSystemNode
modifier|*
name|node
parameter_list|)
specifier|const
block|{
comment|// always accept drives
if|if
condition|(
name|node
operator|->
name|parent
operator|==
operator|&
name|root
operator|||
name|bypassFilters
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// If we don't know anything yet don't accept it
if|if
condition|(
operator|!
name|node
operator|->
name|hasInformation
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|const
name|bool
name|filterPermissions
init|=
operator|(
operator|(
name|filters
operator|&
name|QDir
operator|::
name|PermissionMask
operator|)
operator|&&
operator|(
name|filters
operator|&
name|QDir
operator|::
name|PermissionMask
operator|)
operator|!=
name|QDir
operator|::
name|PermissionMask
operator|)
decl_stmt|;
specifier|const
name|bool
name|hideDirs
init|=
operator|!
operator|(
name|filters
operator|&
operator|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|AllDirs
operator|)
operator|)
decl_stmt|;
specifier|const
name|bool
name|hideFiles
init|=
operator|!
operator|(
name|filters
operator|&
name|QDir
operator|::
name|Files
operator|)
decl_stmt|;
specifier|const
name|bool
name|hideReadable
init|=
operator|!
operator|(
operator|!
name|filterPermissions
operator|||
operator|(
name|filters
operator|&
name|QDir
operator|::
name|Readable
operator|)
operator|)
decl_stmt|;
specifier|const
name|bool
name|hideWritable
init|=
operator|!
operator|(
operator|!
name|filterPermissions
operator|||
operator|(
name|filters
operator|&
name|QDir
operator|::
name|Writable
operator|)
operator|)
decl_stmt|;
specifier|const
name|bool
name|hideExecutable
init|=
operator|!
operator|(
operator|!
name|filterPermissions
operator|||
operator|(
name|filters
operator|&
name|QDir
operator|::
name|Executable
operator|)
operator|)
decl_stmt|;
specifier|const
name|bool
name|hideHidden
init|=
operator|!
operator|(
name|filters
operator|&
name|QDir
operator|::
name|Hidden
operator|)
decl_stmt|;
specifier|const
name|bool
name|hideSystem
init|=
operator|!
operator|(
name|filters
operator|&
name|QDir
operator|::
name|System
operator|)
decl_stmt|;
specifier|const
name|bool
name|hideSymlinks
init|=
operator|(
name|filters
operator|&
name|QDir
operator|::
name|NoSymLinks
operator|)
decl_stmt|;
specifier|const
name|bool
name|hideDot
init|=
operator|(
name|filters
operator|&
name|QDir
operator|::
name|NoDot
operator|)
decl_stmt|;
specifier|const
name|bool
name|hideDotDot
init|=
operator|(
name|filters
operator|&
name|QDir
operator|::
name|NoDotDot
operator|)
decl_stmt|;
comment|// Note that we match the behavior of entryList and not QFileInfo on this.
name|bool
name|isDot
init|=
operator|(
name|node
operator|->
name|fileName
operator|==
name|QLatin1String
argument_list|(
literal|"."
argument_list|)
operator|)
decl_stmt|;
name|bool
name|isDotDot
init|=
operator|(
name|node
operator|->
name|fileName
operator|==
name|QLatin1String
argument_list|(
literal|".."
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|hideHidden
operator|&&
operator|!
operator|(
name|isDot
operator|||
name|isDotDot
operator|)
operator|&&
name|node
operator|->
name|isHidden
argument_list|()
operator|)
operator|||
operator|(
name|hideSystem
operator|&&
name|node
operator|->
name|isSystem
argument_list|()
operator|)
operator|||
operator|(
name|hideDirs
operator|&&
name|node
operator|->
name|isDir
argument_list|()
operator|)
operator|||
operator|(
name|hideFiles
operator|&&
name|node
operator|->
name|isFile
argument_list|()
operator|)
operator|||
operator|(
name|hideSymlinks
operator|&&
name|node
operator|->
name|isSymLink
argument_list|()
operator|)
operator|||
operator|(
name|hideReadable
operator|&&
name|node
operator|->
name|isReadable
argument_list|()
operator|)
operator|||
operator|(
name|hideWritable
operator|&&
name|node
operator|->
name|isWritable
argument_list|()
operator|)
operator|||
operator|(
name|hideExecutable
operator|&&
name|node
operator|->
name|isExecutable
argument_list|()
operator|)
operator|||
operator|(
name|hideDot
operator|&&
name|isDot
operator|)
operator|||
operator|(
name|hideDotDot
operator|&&
name|isDotDot
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|nameFilterDisables
operator|||
name|passNameFilters
argument_list|(
name|node
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     \internal      Returns \c true if node passes the name filters and should be visible.  */
end_comment
begin_function
DECL|function|passNameFilters
name|bool
name|QFileSystemModelPrivate
operator|::
name|passNameFilters
parameter_list|(
specifier|const
name|QFileSystemNode
modifier|*
name|node
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
if|if
condition|(
name|nameFilters
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// Check the name regularexpression filters
if|if
condition|(
operator|!
operator|(
name|node
operator|->
name|isDir
argument_list|()
operator|&&
operator|(
name|filters
operator|&
name|QDir
operator|::
name|AllDirs
operator|)
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameFilters
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QRegExp
name|copy
init|=
name|nameFilters
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|copy
operator|.
name|exactMatch
argument_list|(
name|node
operator|->
name|fileName
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qfilesystemmodel.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FILESYSTEMMODEL
end_comment
end_unit
