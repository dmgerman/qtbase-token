begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd and its Subsidiary(-ies) nor the **     names of its contributors may be used to endorse or promote products **     derived from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*   window.cpp    A minimal subclass of QTableView with slots to allow the selection model   to be monitored. */
end_comment
begin_include
include|#
directive|include
file|<QAbstractItemModel>
end_include
begin_include
include|#
directive|include
file|<QItemSelection>
end_include
begin_include
include|#
directive|include
file|<QItemSelectionModel>
end_include
begin_include
include|#
directive|include
file|<QMenu>
end_include
begin_include
include|#
directive|include
file|<QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QStatusBar>
end_include
begin_include
include|#
directive|include
file|"model.h"
end_include
begin_include
include|#
directive|include
file|"window.h"
end_include
begin_constructor
DECL|function|MainWindow
name|MainWindow
operator|::
name|MainWindow
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QMainWindow
argument_list|(
name|parent
argument_list|)
block|{
name|setWindowTitle
argument_list|(
literal|"Selected Items in a Table Model"
argument_list|)
expr_stmt|;
name|model
operator|=
operator|new
name|TableModel
argument_list|(
literal|8
argument_list|,
literal|4
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|QTableView
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|table
operator|->
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|actionMenu
init|=
operator|new
name|QMenu
argument_list|(
name|tr
argument_list|(
literal|"&Actions"
argument_list|)
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|fillAction
init|=
name|actionMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"&Fill Selection"
argument_list|)
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|clearAction
init|=
name|actionMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"&Clear Selection"
argument_list|)
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|selectAllAction
init|=
name|actionMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"&Select All"
argument_list|)
argument_list|)
decl_stmt|;
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|actionMenu
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|fillAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|fillSelection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|clearAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|clearSelection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|selectAllAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|selectAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|selectionModel
operator|=
name|table
operator|->
name|selectionModel
argument_list|()
expr_stmt|;
name|statusBar
argument_list|()
expr_stmt|;
name|setCentralWidget
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|fillSelection
name|void
name|MainWindow
operator|::
name|fillSelection
parameter_list|()
block|{
comment|//! [0]
name|QModelIndexList
name|indexes
init|=
name|selectionModel
operator|->
name|selectedIndexes
argument_list|()
decl_stmt|;
name|QModelIndex
name|index
decl_stmt|;
foreach|foreach
control|(
name|index
init|,
name|indexes
control|)
block|{
name|QString
name|text
init|=
name|QString
argument_list|(
literal|"(%1,%2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
comment|//! [0]
block|}
end_function
begin_function
DECL|function|clearSelection
name|void
name|MainWindow
operator|::
name|clearSelection
parameter_list|()
block|{
name|QModelIndexList
name|indexes
init|=
name|selectionModel
operator|->
name|selectedIndexes
argument_list|()
decl_stmt|;
name|QModelIndex
name|index
decl_stmt|;
foreach|foreach
control|(
name|index
init|,
name|indexes
control|)
name|model
operator|->
name|setData
argument_list|(
name|index
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectAll
name|void
name|MainWindow
operator|::
name|selectAll
parameter_list|()
block|{
comment|//! [1]
name|QModelIndex
name|parent
init|=
name|QModelIndex
argument_list|()
decl_stmt|;
comment|//! [1] //! [2]
name|QModelIndex
name|topLeft
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QModelIndex
name|bottomRight
init|=
name|model
operator|->
name|index
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
operator|-
literal|1
argument_list|,
name|model
operator|->
name|columnCount
argument_list|(
name|parent
argument_list|)
operator|-
literal|1
argument_list|,
name|parent
argument_list|)
decl_stmt|;
comment|//! [2]
comment|//! [3]
name|QItemSelection
name|selection
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|)
decl_stmt|;
name|selectionModel
operator|->
name|select
argument_list|(
name|selection
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
argument_list|)
expr_stmt|;
comment|//! [3]
block|}
end_function
end_unit
