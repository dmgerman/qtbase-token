begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*     model.cpp      Provides a table model for use in various examples. */
end_comment
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|"model.h"
end_include
begin_comment
comment|/*!     Constructs a table model with at least one row and one column. */
end_comment
begin_constructor
DECL|function|TableModel
name|TableModel
operator|::
name|TableModel
parameter_list|(
name|int
name|rows
parameter_list|,
name|int
name|columns
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractTableModel
argument_list|(
name|parent
argument_list|)
block|{
name|QStringList
name|newList
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|qMax
argument_list|(
literal|1
argument_list|,
name|columns
argument_list|)
condition|;
operator|++
name|column
control|)
block|{
name|newList
operator|.
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|qMax
argument_list|(
literal|1
argument_list|,
name|rows
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|rowList
operator|.
name|append
argument_list|(
name|newList
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_comment
comment|/*!     Returns the number of items in the row list as the number of rows     in the model. */
end_comment
begin_function
DECL|function|rowCount
name|int
name|TableModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
comment|/*parent*/
parameter_list|)
specifier|const
block|{
return|return
name|rowList
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of items in the first list item as the number of     columns in the model. All rows should have the same number of columns. */
end_comment
begin_function
DECL|function|columnCount
name|int
name|TableModel
operator|::
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
comment|/*parent*/
parameter_list|)
specifier|const
block|{
return|return
name|rowList
index|[
literal|0
index|]
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns an appropriate value for the requested data.     If the view requests an invalid index, an invalid variant is returned.     Any valid index that corresponds to a string in the list causes that     string to be returned for the display role; otherwise an invalid variant     is returned. */
end_comment
begin_function
DECL|function|data
name|QVariant
name|TableModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|DisplayRole
condition|)
return|return
name|rowList
index|[
name|index
operator|.
name|row
argument_list|()
index|]
index|[
name|index
operator|.
name|column
argument_list|()
index|]
return|;
else|else
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the appropriate header string depending on the orientation of     the header and the section. If anything other than the display role is     requested, we return an invalid variant. */
end_comment
begin_function
DECL|function|headerData
name|QVariant
name|TableModel
operator|::
name|headerData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|role
operator|!=
name|Qt
operator|::
name|DisplayRole
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
return|return
name|QString
argument_list|(
literal|"Column %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|section
argument_list|)
return|;
else|else
return|return
name|QString
argument_list|(
literal|"Row %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|section
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns an appropriate value for the item's flags. Valid items are     enabled, selectable, and editable. */
end_comment
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|TableModel
operator|::
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|Qt
operator|::
name|ItemIsEnabled
return|;
return|return
name|QAbstractTableModel
operator|::
name|flags
argument_list|(
name|index
argument_list|)
operator||
name|Qt
operator|::
name|ItemIsEditable
return|;
block|}
end_function
begin_comment
comment|/*!     Changes an item in the model, but only if the following conditions     are met:      * The index supplied is valid.     * The role associated with editing text is specified.      The dataChanged() signal is emitted if the item is changed. */
end_comment
begin_function
DECL|function|setData
name|bool
name|TableModel
operator|::
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
name|role
operator|!=
name|Qt
operator|::
name|EditRole
condition|)
return|return
literal|false
return|;
name|rowList
index|[
name|index
operator|.
name|row
argument_list|()
index|]
index|[
name|index
operator|.
name|column
argument_list|()
index|]
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
emit|emit
name|dataChanged
argument_list|(
name|index
argument_list|,
name|index
argument_list|)
emit|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Inserts a number of rows into the model at the specified position. */
end_comment
begin_function
DECL|function|insertRows
name|bool
name|TableModel
operator|::
name|insertRows
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|rows
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|int
name|columns
init|=
name|columnCount
argument_list|()
decl_stmt|;
name|beginInsertRows
argument_list|(
name|parent
argument_list|,
name|position
argument_list|,
name|position
operator|+
name|rows
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rows
condition|;
operator|++
name|row
control|)
block|{
name|QStringList
name|items
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|columns
condition|;
operator|++
name|column
control|)
name|items
operator|.
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|rowList
operator|.
name|insert
argument_list|(
name|position
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
name|endInsertRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Inserts a number of columns into the model at the specified position.     Each entry in the list is extended in turn with the required number of     empty strings. */
end_comment
begin_function
DECL|function|insertColumns
name|bool
name|TableModel
operator|::
name|insertColumns
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|columns
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|int
name|rows
init|=
name|rowCount
argument_list|()
decl_stmt|;
name|beginInsertColumns
argument_list|(
name|parent
argument_list|,
name|position
argument_list|,
name|position
operator|+
name|columns
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rows
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|column
init|=
name|position
init|;
name|column
operator|<
name|columns
condition|;
operator|++
name|column
control|)
block|{
name|rowList
index|[
name|row
index|]
operator|.
name|insert
argument_list|(
name|position
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
name|endInsertColumns
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Removes a number of rows from the model at the specified position. */
end_comment
begin_function
DECL|function|removeRows
name|bool
name|TableModel
operator|::
name|removeRows
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|rows
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|beginRemoveRows
argument_list|(
name|parent
argument_list|,
name|position
argument_list|,
name|position
operator|+
name|rows
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rows
condition|;
operator|++
name|row
control|)
block|{
name|rowList
operator|.
name|removeAt
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
name|endRemoveRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Removes a number of columns from the model at the specified position.     Each row is shortened by the number of columns specified. */
end_comment
begin_function
DECL|function|removeColumns
name|bool
name|TableModel
operator|::
name|removeColumns
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|columns
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|int
name|rows
init|=
name|rowCount
argument_list|()
decl_stmt|;
name|beginRemoveColumns
argument_list|(
name|parent
argument_list|,
name|position
argument_list|,
name|position
operator|+
name|columns
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rows
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|columns
condition|;
operator|++
name|column
control|)
block|{
name|rowList
index|[
name|row
index|]
operator|.
name|removeAt
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
block|}
name|endRemoveColumns
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
end_unit
