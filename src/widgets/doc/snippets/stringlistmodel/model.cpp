begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*   model.cpp    A simple model that uses a QStringList as its data source. */
end_comment
begin_include
include|#
directive|include
file|"model.h"
end_include
begin_comment
comment|/*!     Returns the number of items in the string list as the number of rows     in the model. */
end_comment
begin_comment
comment|//! [0]
end_comment
begin_function
DECL|function|rowCount
name|int
name|StringListModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
return|return
name|stringList
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//! [0]
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|0
end_ifdef
begin_comment
comment|// This represents a read-only version of data(), an early stage in the
end_comment
begin_comment
comment|// development of the example leading to an editable StringListModel.
end_comment
begin_comment
comment|/*!     Returns an appropriate value for the requested data.     If the view requests an invalid index, an invalid variant is returned.     Any valid index that corresponds to a string in the list causes that     string to be returned. */
end_comment
begin_comment
comment|//! [1-data-read-only]
end_comment
begin_function
name|QVariant
name|StringListModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|index
operator|.
name|row
argument_list|()
operator|>=
name|stringList
operator|.
name|size
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|DisplayRole
condition|)
return|return
name|stringList
operator|.
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
return|;
else|else
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//! [1-data-read-only]
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     Returns an appropriate value for the requested data.     If the view requests an invalid index, an invalid variant is returned.     Any valid index that corresponds to a string in the list causes that     string to be returned. */
end_comment
begin_comment
comment|//! [1]
end_comment
begin_function
DECL|function|data
name|QVariant
name|StringListModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|index
operator|.
name|row
argument_list|()
operator|>=
name|stringList
operator|.
name|size
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|DisplayRole
operator|||
name|role
operator|==
name|Qt
operator|::
name|EditRole
condition|)
return|return
name|stringList
operator|.
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
return|;
else|else
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|/*!     Returns the appropriate header string depending on the orientation of     the header and the section. If anything other than the display role is     requested, we return an invalid variant. */
end_comment
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|headerData
name|QVariant
name|StringListModel
operator|::
name|headerData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|role
operator|!=
name|Qt
operator|::
name|DisplayRole
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
return|return
name|QString
argument_list|(
literal|"Column %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|section
argument_list|)
return|;
else|else
return|return
name|QString
argument_list|(
literal|"Row %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|section
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|/*!     Returns an appropriate value for the item's flags. Valid items are     enabled, selectable, and editable. */
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|StringListModel
operator|::
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|Qt
operator|::
name|ItemIsEnabled
return|;
return|return
name|QAbstractItemModel
operator|::
name|flags
argument_list|(
name|index
argument_list|)
operator||
name|Qt
operator|::
name|ItemIsEditable
return|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|/*!     Changes an item in the string list, but only if the following conditions     are met:      * The index supplied is valid.     * The index corresponds to an item to be shown in a view.     * The role associated with editing text is specified.      The dataChanged() signal is emitted if the item is changed. */
end_comment
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|setData
name|bool
name|StringListModel
operator|::
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
operator|&&
name|role
operator|==
name|Qt
operator|::
name|EditRole
condition|)
block|{
name|stringList
operator|.
name|replace
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
emit|emit
name|dataChanged
argument_list|(
name|index
argument_list|,
name|index
argument_list|)
emit|;
return|return
literal|true
return|;
block|}
comment|//! [4] //! [5]
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|/*!     Inserts a number of rows into the model at the specified position. */
end_comment
begin_comment
comment|//! [6]
end_comment
begin_function
DECL|function|insertRows
name|bool
name|StringListModel
operator|::
name|insertRows
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|rows
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|beginInsertRows
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|position
argument_list|,
name|position
operator|+
name|rows
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rows
condition|;
operator|++
name|row
control|)
block|{
name|stringList
operator|.
name|insert
argument_list|(
name|position
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|endInsertRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
comment|//! [6] //! [7]
block|}
end_function
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|/*!     Removes a number of rows from the model at the specified position. */
end_comment
begin_comment
comment|//! [8]
end_comment
begin_function
DECL|function|removeRows
name|bool
name|StringListModel
operator|::
name|removeRows
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|rows
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|beginRemoveRows
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|position
argument_list|,
name|position
operator|+
name|rows
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rows
condition|;
operator|++
name|row
control|)
block|{
name|stringList
operator|.
name|removeAt
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
name|endRemoveRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
comment|//! [8] //! [9]
block|}
end_function
begin_comment
comment|//! [9]
end_comment
end_unit
