begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qbasickeyeventtransition_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STATEMACHINE
end_ifndef
begin_include
include|#
directive|include
file|<QtGui/qevent.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<private/qabstracttransition_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!   \internal   \class QBasicKeyEventTransition   \since 4.6   \ingroup statemachine    \brief The QBasicKeyEventTransition class provides a transition for Qt key events. */
end_comment
begin_class
DECL|class|QBasicKeyEventTransitionPrivate
class|class
name|QBasicKeyEventTransitionPrivate
super|:
specifier|public
name|QAbstractTransitionPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QBasicKeyEventTransition
parameter_list|)
specifier|public
private|:
name|QBasicKeyEventTransitionPrivate
parameter_list|()
constructor_decl|;
specifier|static
name|QBasicKeyEventTransitionPrivate
modifier|*
name|get
parameter_list|(
name|QBasicKeyEventTransition
modifier|*
name|q
parameter_list|)
function_decl|;
DECL|member|eventType
name|QEvent
operator|::
name|Type
name|eventType
decl_stmt|;
DECL|member|key
name|int
name|key
decl_stmt|;
DECL|member|modifierMask
name|Qt
operator|::
name|KeyboardModifiers
name|modifierMask
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QBasicKeyEventTransitionPrivate
name|QBasicKeyEventTransitionPrivate
operator|::
name|QBasicKeyEventTransitionPrivate
parameter_list|()
block|{
name|eventType
operator|=
name|QEvent
operator|::
name|None
expr_stmt|;
name|key
operator|=
literal|0
expr_stmt|;
name|modifierMask
operator|=
name|Qt
operator|::
name|NoModifier
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|get
name|QBasicKeyEventTransitionPrivate
modifier|*
name|QBasicKeyEventTransitionPrivate
operator|::
name|get
parameter_list|(
name|QBasicKeyEventTransition
modifier|*
name|q
parameter_list|)
block|{
return|return
name|q
operator|->
name|d_func
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Constructs a new key event transition with the given \a sourceState. */
end_comment
begin_constructor
DECL|function|QBasicKeyEventTransition
name|QBasicKeyEventTransition
operator|::
name|QBasicKeyEventTransition
parameter_list|(
name|QState
modifier|*
name|sourceState
parameter_list|)
member_init_list|:
name|QAbstractTransition
argument_list|(
operator|*
operator|new
name|QBasicKeyEventTransitionPrivate
argument_list|,
name|sourceState
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!   Constructs a new event transition for events of the given \a type for the   given \a key, with the given \a sourceState. */
end_comment
begin_constructor
DECL|function|QBasicKeyEventTransition
name|QBasicKeyEventTransition
operator|::
name|QBasicKeyEventTransition
parameter_list|(
name|QEvent
operator|::
name|Type
name|type
parameter_list|,
name|int
name|key
parameter_list|,
name|QState
modifier|*
name|sourceState
parameter_list|)
member_init_list|:
name|QAbstractTransition
argument_list|(
operator|*
operator|new
name|QBasicKeyEventTransitionPrivate
argument_list|,
name|sourceState
argument_list|)
block|{
name|Q_D
argument_list|(
name|QBasicKeyEventTransition
argument_list|)
expr_stmt|;
name|d
operator|->
name|eventType
operator|=
name|type
expr_stmt|;
name|d
operator|->
name|key
operator|=
name|key
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Constructs a new event transition for events of the given \a type for the   given \a key, with the given \a modifierMask and \a sourceState. */
end_comment
begin_constructor
DECL|function|QBasicKeyEventTransition
name|QBasicKeyEventTransition
operator|::
name|QBasicKeyEventTransition
parameter_list|(
name|QEvent
operator|::
name|Type
name|type
parameter_list|,
name|int
name|key
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifierMask
parameter_list|,
name|QState
modifier|*
name|sourceState
parameter_list|)
member_init_list|:
name|QAbstractTransition
argument_list|(
operator|*
operator|new
name|QBasicKeyEventTransitionPrivate
argument_list|,
name|sourceState
argument_list|)
block|{
name|Q_D
argument_list|(
name|QBasicKeyEventTransition
argument_list|)
expr_stmt|;
name|d
operator|->
name|eventType
operator|=
name|type
expr_stmt|;
name|d
operator|->
name|key
operator|=
name|key
expr_stmt|;
name|d
operator|->
name|modifierMask
operator|=
name|modifierMask
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Destroys this event transition. */
end_comment
begin_destructor
DECL|function|~QBasicKeyEventTransition
name|QBasicKeyEventTransition
operator|::
name|~
name|QBasicKeyEventTransition
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!   Returns the event type that this key event transition is associated with. */
end_comment
begin_function
DECL|function|eventType
name|QEvent
operator|::
name|Type
name|QBasicKeyEventTransition
operator|::
name|eventType
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBasicKeyEventTransition
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|eventType
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the event \a type that this key event transition is associated with. */
end_comment
begin_function
DECL|function|setEventType
name|void
name|QBasicKeyEventTransition
operator|::
name|setEventType
parameter_list|(
name|QEvent
operator|::
name|Type
name|type
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBasicKeyEventTransition
argument_list|)
expr_stmt|;
name|d
operator|->
name|eventType
operator|=
name|type
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the key that this key event transition checks for. */
end_comment
begin_function
DECL|function|key
name|int
name|QBasicKeyEventTransition
operator|::
name|key
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBasicKeyEventTransition
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|key
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the key that this key event transition will check for. */
end_comment
begin_function
DECL|function|setKey
name|void
name|QBasicKeyEventTransition
operator|::
name|setKey
parameter_list|(
name|int
name|key
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBasicKeyEventTransition
argument_list|)
expr_stmt|;
name|d
operator|->
name|key
operator|=
name|key
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the keyboard modifier mask that this key event transition checks   for. */
end_comment
begin_function
DECL|function|modifierMask
name|Qt
operator|::
name|KeyboardModifiers
name|QBasicKeyEventTransition
operator|::
name|modifierMask
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBasicKeyEventTransition
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|modifierMask
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the keyboard modifier mask that this key event transition will check   for. */
end_comment
begin_function
DECL|function|setModifierMask
name|void
name|QBasicKeyEventTransition
operator|::
name|setModifierMask
parameter_list|(
name|Qt
operator|::
name|KeyboardModifiers
name|modifierMask
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBasicKeyEventTransition
argument_list|)
expr_stmt|;
name|d
operator|->
name|modifierMask
operator|=
name|modifierMask
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|eventTest
name|bool
name|QBasicKeyEventTransition
operator|::
name|eventTest
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QBasicKeyEventTransition
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|d
operator|->
name|eventType
condition|)
block|{
name|QKeyEvent
modifier|*
name|ke
init|=
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
return|return
operator|(
name|ke
operator|->
name|key
argument_list|()
operator|==
name|d
operator|->
name|key
operator|)
operator|&&
operator|(
operator|(
name|ke
operator|->
name|modifiers
argument_list|()
operator|&
name|d
operator|->
name|modifierMask
operator|)
operator|==
name|d
operator|->
name|modifierMask
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|onTransition
name|void
name|QBasicKeyEventTransition
operator|::
name|onTransition
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{ }
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_STATEMACHINE
end_comment
end_unit
