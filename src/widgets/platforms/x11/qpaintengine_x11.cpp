begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"private/qpixmap_x11_p.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qfont.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapcache.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|"qcoreevent.h"
end_include
begin_include
include|#
directive|include
file|"qiodevice.h"
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|"qpainter_p.h"
end_include
begin_include
include|#
directive|include
file|<qtextlayout.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<private/qfont_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qtextengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_x11_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_x11_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainterpath_p.h>
end_include
begin_include
include|#
directive|include
file|"qpen.h"
end_include
begin_include
include|#
directive|include
file|"qcolor.h"
end_include
begin_include
include|#
directive|include
file|"qcolormap.h"
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_p.h>
end_include
begin_include
include|#
directive|include
file|"qpaintengine_x11_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qt_x11_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qnumeric_p.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
end_ifndef
begin_include
include|#
directive|include
file|<private/qtessellator_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<private/qhexstring_p.h>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|Drawable
name|qt_x11Handle
parameter_list|(
specifier|const
name|QPaintDevice
modifier|*
name|pd
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|QX11Info
modifier|*
name|qt_x11Info
parameter_list|(
specifier|const
name|QPaintDevice
modifier|*
name|pd
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|QPixmap
name|qt_pixmapForBrush
parameter_list|(
name|int
name|brushStyle
parameter_list|,
name|bool
name|invert
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//in qbrush.cpp
end_comment
begin_function_decl
specifier|extern
name|QPixmap
name|qt_toX11Pixmap
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// use the same rounding as in qrasterizer.cpp (6 bit fixed point)
end_comment
begin_decl_stmt
DECL|variable|aliasedCoordinateDelta
specifier|static
specifier|const
name|qreal
name|aliasedCoordinateDelta
init|=
literal|0.5
operator|-
literal|0.015625
decl_stmt|;
end_decl_stmt
begin_undef
DECL|macro|X11
undef|#
directive|undef
name|X11
end_undef
begin_comment
DECL|macro|X11
comment|// defined in qt_x11_p.h
end_comment
begin_comment
comment|/*!     Returns the X11 specific pen GC for the painter \a p. Note that     QPainter::begin() must be called before this function returns a     valid GC. */
end_comment
begin_function
DECL|function|qt_x11_get_pen_gc
name|Q_WIDGETS_EXPORT
name|GC
name|qt_x11_get_pen_gc
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|&&
name|p
operator|->
name|paintEngine
argument_list|()
operator|&&
name|p
operator|->
name|paintEngine
argument_list|()
operator|->
name|isActive
argument_list|()
operator|&&
name|p
operator|->
name|paintEngine
argument_list|()
operator|->
name|type
argument_list|()
operator|==
name|QPaintEngine
operator|::
name|X11
condition|)
block|{
return|return
cast|static_cast
argument_list|<
name|QX11PaintEngine
operator|*
argument_list|>
argument_list|(
name|p
operator|->
name|paintEngine
argument_list|()
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|gc
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the X11 specific brush GC for the painter \a p. Note that     QPainter::begin() must be called before this function returns a     valid GC. */
end_comment
begin_function
DECL|function|qt_x11_get_brush_gc
name|Q_WIDGETS_EXPORT
name|GC
name|qt_x11_get_brush_gc
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|&&
name|p
operator|->
name|paintEngine
argument_list|()
operator|&&
name|p
operator|->
name|paintEngine
argument_list|()
operator|->
name|isActive
argument_list|()
operator|&&
name|p
operator|->
name|paintEngine
argument_list|()
operator|->
name|type
argument_list|()
operator|==
name|QPaintEngine
operator|::
name|X11
condition|)
block|{
return|return
cast|static_cast
argument_list|<
name|QX11PaintEngine
operator|*
argument_list|>
argument_list|(
name|p
operator|->
name|paintEngine
argument_list|()
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|gc_brush
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_define
DECL|macro|X11
define|#
directive|define
name|X11
value|qt_x11Data
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
end_ifndef
begin_decl_stmt
DECL|variable|compositionModeToRenderOp
specifier|static
specifier|const
name|int
name|compositionModeToRenderOp
index|[
name|QPainter
operator|::
name|CompositionMode_Xor
operator|+
literal|1
index|]
init|=
block|{
name|PictOpOver
block|,
comment|//CompositionMode_SourceOver,
name|PictOpOverReverse
block|,
comment|//CompositionMode_DestinationOver,
name|PictOpClear
block|,
comment|//CompositionMode_Clear,
name|PictOpSrc
block|,
comment|//CompositionMode_Source,
name|PictOpDst
block|,
comment|//CompositionMode_Destination,
name|PictOpIn
block|,
comment|//CompositionMode_SourceIn,
name|PictOpInReverse
block|,
comment|//CompositionMode_DestinationIn,
name|PictOpOut
block|,
comment|//CompositionMode_SourceOut,
name|PictOpOutReverse
block|,
comment|//CompositionMode_DestinationOut,
name|PictOpAtop
block|,
comment|//CompositionMode_SourceAtop,
name|PictOpAtopReverse
block|,
comment|//CompositionMode_DestinationAtop,
name|PictOpXor
comment|//CompositionMode_Xor
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qpainterOpToXrender
specifier|static
specifier|inline
name|int
name|qpainterOpToXrender
parameter_list|(
name|QPainter
operator|::
name|CompositionMode
name|mode
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|mode
operator|<=
name|QPainter
operator|::
name|CompositionMode_Xor
argument_list|)
expr_stmt|;
return|return
name|compositionModeToRenderOp
index|[
name|mode
index|]
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// hack, so we don't have to make QRegion::clipRectangles() public or include
end_comment
begin_comment
comment|// X11 headers in qregion.h
end_comment
begin_function
DECL|function|qt_getClipRects
name|Q_WIDGETS_EXPORT
name|void
modifier|*
name|qt_getClipRects
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|r
parameter_list|,
name|int
modifier|&
name|num
parameter_list|)
block|{
return|return
name|r
operator|.
name|clipRectangles
argument_list|(
name|num
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|x11SetClipRegion
specifier|static
specifier|inline
name|void
name|x11SetClipRegion
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|GC
name|gc
parameter_list|,
name|GC
name|gc2
parameter_list|,
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|Picture
name|picture
parameter_list|,
else|#
directive|else
name|Qt
operator|::
name|HANDLE
name|picture
parameter_list|,
endif|#
directive|endif
specifier|const
name|QRegion
modifier|&
name|r
parameter_list|)
block|{
name|int
name|num
decl_stmt|;
name|XRectangle
modifier|*
name|rects
init|=
operator|(
name|XRectangle
operator|*
operator|)
name|qt_getClipRects
argument_list|(
name|r
argument_list|,
name|num
argument_list|)
decl_stmt|;
if|if
condition|(
name|gc
condition|)
name|XSetClipRectangles
argument_list|(
name|dpy
argument_list|,
name|gc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rects
argument_list|,
name|num
argument_list|,
name|YXBanded
argument_list|)
expr_stmt|;
if|if
condition|(
name|gc2
condition|)
name|XSetClipRectangles
argument_list|(
name|dpy
argument_list|,
name|gc2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rects
argument_list|,
name|num
argument_list|,
name|YXBanded
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
name|picture
condition|)
name|XRenderSetPictureClipRectangles
argument_list|(
name|dpy
argument_list|,
name|picture
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rects
argument_list|,
name|num
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|picture
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_XRENDER
block|}
end_function
begin_function
DECL|function|x11ClearClipRegion
specifier|static
specifier|inline
name|void
name|x11ClearClipRegion
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|GC
name|gc
parameter_list|,
name|GC
name|gc2
parameter_list|,
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|Picture
name|picture
else|#
directive|else
name|Qt
operator|::
name|HANDLE
name|picture
endif|#
directive|endif
parameter_list|)
block|{
if|if
condition|(
name|gc
condition|)
name|XSetClipMask
argument_list|(
name|dpy
argument_list|,
name|gc
argument_list|,
name|XNone
argument_list|)
expr_stmt|;
if|if
condition|(
name|gc2
condition|)
name|XSetClipMask
argument_list|(
name|dpy
argument_list|,
name|gc2
argument_list|,
name|XNone
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
name|picture
condition|)
block|{
name|XRenderPictureAttributes
name|attrs
decl_stmt|;
name|attrs
operator|.
name|clip_mask
operator|=
name|XNone
expr_stmt|;
name|XRenderChangePicture
argument_list|(
name|dpy
argument_list|,
name|picture
argument_list|,
name|CPClipMask
argument_list|,
operator|&
name|attrs
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|picture
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_XRENDER
block|}
end_function
begin_define
DECL|macro|DITHER_SIZE
define|#
directive|define
name|DITHER_SIZE
value|16
end_define
begin_decl_stmt
DECL|variable|base_dither_matrix
specifier|static
specifier|const
name|uchar
name|base_dither_matrix
index|[
name|DITHER_SIZE
index|]
index|[
name|DITHER_SIZE
index|]
init|=
block|{
block|{
literal|0
block|,
literal|192
block|,
literal|48
block|,
literal|240
block|,
literal|12
block|,
literal|204
block|,
literal|60
block|,
literal|252
block|,
literal|3
block|,
literal|195
block|,
literal|51
block|,
literal|243
block|,
literal|15
block|,
literal|207
block|,
literal|63
block|,
literal|255
block|}
block|,
block|{
literal|128
block|,
literal|64
block|,
literal|176
block|,
literal|112
block|,
literal|140
block|,
literal|76
block|,
literal|188
block|,
literal|124
block|,
literal|131
block|,
literal|67
block|,
literal|179
block|,
literal|115
block|,
literal|143
block|,
literal|79
block|,
literal|191
block|,
literal|127
block|}
block|,
block|{
literal|32
block|,
literal|224
block|,
literal|16
block|,
literal|208
block|,
literal|44
block|,
literal|236
block|,
literal|28
block|,
literal|220
block|,
literal|35
block|,
literal|227
block|,
literal|19
block|,
literal|211
block|,
literal|47
block|,
literal|239
block|,
literal|31
block|,
literal|223
block|}
block|,
block|{
literal|160
block|,
literal|96
block|,
literal|144
block|,
literal|80
block|,
literal|172
block|,
literal|108
block|,
literal|156
block|,
literal|92
block|,
literal|163
block|,
literal|99
block|,
literal|147
block|,
literal|83
block|,
literal|175
block|,
literal|111
block|,
literal|159
block|,
literal|95
block|}
block|,
block|{
literal|8
block|,
literal|200
block|,
literal|56
block|,
literal|248
block|,
literal|4
block|,
literal|196
block|,
literal|52
block|,
literal|244
block|,
literal|11
block|,
literal|203
block|,
literal|59
block|,
literal|251
block|,
literal|7
block|,
literal|199
block|,
literal|55
block|,
literal|247
block|}
block|,
block|{
literal|136
block|,
literal|72
block|,
literal|184
block|,
literal|120
block|,
literal|132
block|,
literal|68
block|,
literal|180
block|,
literal|116
block|,
literal|139
block|,
literal|75
block|,
literal|187
block|,
literal|123
block|,
literal|135
block|,
literal|71
block|,
literal|183
block|,
literal|119
block|}
block|,
block|{
literal|40
block|,
literal|232
block|,
literal|24
block|,
literal|216
block|,
literal|36
block|,
literal|228
block|,
literal|20
block|,
literal|212
block|,
literal|43
block|,
literal|235
block|,
literal|27
block|,
literal|219
block|,
literal|39
block|,
literal|231
block|,
literal|23
block|,
literal|215
block|}
block|,
block|{
literal|168
block|,
literal|104
block|,
literal|152
block|,
literal|88
block|,
literal|164
block|,
literal|100
block|,
literal|148
block|,
literal|84
block|,
literal|171
block|,
literal|107
block|,
literal|155
block|,
literal|91
block|,
literal|167
block|,
literal|103
block|,
literal|151
block|,
literal|87
block|}
block|,
block|{
literal|2
block|,
literal|194
block|,
literal|50
block|,
literal|242
block|,
literal|14
block|,
literal|206
block|,
literal|62
block|,
literal|254
block|,
literal|1
block|,
literal|193
block|,
literal|49
block|,
literal|241
block|,
literal|13
block|,
literal|205
block|,
literal|61
block|,
literal|253
block|}
block|,
block|{
literal|130
block|,
literal|66
block|,
literal|178
block|,
literal|114
block|,
literal|142
block|,
literal|78
block|,
literal|190
block|,
literal|126
block|,
literal|129
block|,
literal|65
block|,
literal|177
block|,
literal|113
block|,
literal|141
block|,
literal|77
block|,
literal|189
block|,
literal|125
block|}
block|,
block|{
literal|34
block|,
literal|226
block|,
literal|18
block|,
literal|210
block|,
literal|46
block|,
literal|238
block|,
literal|30
block|,
literal|222
block|,
literal|33
block|,
literal|225
block|,
literal|17
block|,
literal|209
block|,
literal|45
block|,
literal|237
block|,
literal|29
block|,
literal|221
block|}
block|,
block|{
literal|162
block|,
literal|98
block|,
literal|146
block|,
literal|82
block|,
literal|174
block|,
literal|110
block|,
literal|158
block|,
literal|94
block|,
literal|161
block|,
literal|97
block|,
literal|145
block|,
literal|81
block|,
literal|173
block|,
literal|109
block|,
literal|157
block|,
literal|93
block|}
block|,
block|{
literal|10
block|,
literal|202
block|,
literal|58
block|,
literal|250
block|,
literal|6
block|,
literal|198
block|,
literal|54
block|,
literal|246
block|,
literal|9
block|,
literal|201
block|,
literal|57
block|,
literal|249
block|,
literal|5
block|,
literal|197
block|,
literal|53
block|,
literal|245
block|}
block|,
block|{
literal|138
block|,
literal|74
block|,
literal|186
block|,
literal|122
block|,
literal|134
block|,
literal|70
block|,
literal|182
block|,
literal|118
block|,
literal|137
block|,
literal|73
block|,
literal|185
block|,
literal|121
block|,
literal|133
block|,
literal|69
block|,
literal|181
block|,
literal|117
block|}
block|,
block|{
literal|42
block|,
literal|234
block|,
literal|26
block|,
literal|218
block|,
literal|38
block|,
literal|230
block|,
literal|22
block|,
literal|214
block|,
literal|41
block|,
literal|233
block|,
literal|25
block|,
literal|217
block|,
literal|37
block|,
literal|229
block|,
literal|21
block|,
literal|213
block|}
block|,
block|{
literal|170
block|,
literal|106
block|,
literal|154
block|,
literal|90
block|,
literal|166
block|,
literal|102
block|,
literal|150
block|,
literal|86
block|,
literal|169
block|,
literal|105
block|,
literal|153
block|,
literal|89
block|,
literal|165
block|,
literal|101
block|,
literal|149
block|,
literal|85
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_patternForAlpha
specifier|static
name|QPixmap
name|qt_patternForAlpha
parameter_list|(
name|uchar
name|alpha
parameter_list|,
name|int
name|screen
parameter_list|)
block|{
name|QPixmap
name|pm
decl_stmt|;
name|QString
name|key
init|=
name|QLatin1Literal
argument_list|(
literal|"$qt-alpha-brush$"
argument_list|)
operator|%
name|HexString
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|alpha
argument_list|)
operator|%
name|HexString
argument_list|<
name|int
argument_list|>
argument_list|(
name|screen
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
name|pm
argument_list|)
condition|)
block|{
comment|// #### why not use a mono image here????
name|QImage
name|pattern
argument_list|(
name|DITHER_SIZE
argument_list|,
name|DITHER_SIZE
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|pattern
operator|.
name|fill
argument_list|(
literal|0xffffffff
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|DITHER_SIZE
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|DITHER_SIZE
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|base_dither_matrix
index|[
name|x
index|]
index|[
name|y
index|]
operator|<=
name|alpha
condition|)
name|pattern
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
literal|0x00000000
argument_list|)
expr_stmt|;
block|}
block|}
name|pm
operator|=
name|QBitmap
operator|::
name|fromImage
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|pm
operator|.
name|x11SetScreen
argument_list|(
name|screen
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|key
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
return|return
name|pm
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
end_if
begin_class
DECL|class|QXRenderTessellator
class|class
name|QXRenderTessellator
super|:
specifier|public
name|QTessellator
block|{
public|public:
DECL|function|QXRenderTessellator
name|QXRenderTessellator
parameter_list|()
member_init_list|:
name|traps
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|allocated
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|size
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|~QXRenderTessellator
name|~
name|QXRenderTessellator
parameter_list|()
block|{
name|free
argument_list|(
name|traps
argument_list|)
expr_stmt|;
block|}
DECL|member|traps
name|XTrapezoid
modifier|*
name|traps
decl_stmt|;
DECL|member|allocated
name|int
name|allocated
decl_stmt|;
DECL|member|size
name|int
name|size
decl_stmt|;
name|void
name|addTrap
parameter_list|(
specifier|const
name|Trapezoid
modifier|&
name|trap
parameter_list|)
function_decl|;
DECL|function|tessellate
name|QRect
name|tessellate
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|nPoints
parameter_list|,
name|bool
name|winding
parameter_list|)
block|{
name|size
operator|=
literal|0
expr_stmt|;
name|setWinding
argument_list|(
name|winding
argument_list|)
expr_stmt|;
return|return
name|QTessellator
operator|::
name|tessellate
argument_list|(
name|points
argument_list|,
name|nPoints
argument_list|)
operator|.
name|toRect
argument_list|()
return|;
block|}
DECL|function|done
name|void
name|done
parameter_list|()
block|{
if|if
condition|(
name|allocated
operator|>
literal|64
condition|)
block|{
name|free
argument_list|(
name|traps
argument_list|)
expr_stmt|;
name|traps
operator|=
literal|0
expr_stmt|;
name|allocated
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
class|;
end_class
begin_function
DECL|function|addTrap
name|void
name|QXRenderTessellator
operator|::
name|addTrap
parameter_list|(
specifier|const
name|Trapezoid
modifier|&
name|trap
parameter_list|)
block|{
if|if
condition|(
name|size
operator|==
name|allocated
condition|)
block|{
name|allocated
operator|=
name|qMax
argument_list|(
literal|2
operator|*
name|allocated
argument_list|,
literal|64
argument_list|)
expr_stmt|;
name|traps
operator|=
name|q_check_ptr
argument_list|(
operator|(
name|XTrapezoid
operator|*
operator|)
name|realloc
argument_list|(
name|traps
argument_list|,
name|allocated
operator|*
sizeof|sizeof
argument_list|(
name|XTrapezoid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|traps
index|[
name|size
index|]
operator|.
name|top
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|top
argument_list|)
expr_stmt|;
name|traps
index|[
name|size
index|]
operator|.
name|bottom
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|bottom
argument_list|)
expr_stmt|;
name|traps
index|[
name|size
index|]
operator|.
name|left
operator|.
name|p1
operator|.
name|x
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|topLeft
operator|->
name|x
argument_list|)
expr_stmt|;
name|traps
index|[
name|size
index|]
operator|.
name|left
operator|.
name|p1
operator|.
name|y
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|topLeft
operator|->
name|y
argument_list|)
expr_stmt|;
name|traps
index|[
name|size
index|]
operator|.
name|left
operator|.
name|p2
operator|.
name|x
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|bottomLeft
operator|->
name|x
argument_list|)
expr_stmt|;
name|traps
index|[
name|size
index|]
operator|.
name|left
operator|.
name|p2
operator|.
name|y
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|bottomLeft
operator|->
name|y
argument_list|)
expr_stmt|;
name|traps
index|[
name|size
index|]
operator|.
name|right
operator|.
name|p1
operator|.
name|x
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|topRight
operator|->
name|x
argument_list|)
expr_stmt|;
name|traps
index|[
name|size
index|]
operator|.
name|right
operator|.
name|p1
operator|.
name|y
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|topRight
operator|->
name|y
argument_list|)
expr_stmt|;
name|traps
index|[
name|size
index|]
operator|.
name|right
operator|.
name|p2
operator|.
name|x
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|bottomRight
operator|->
name|x
argument_list|)
expr_stmt|;
name|traps
index|[
name|size
index|]
operator|.
name|right
operator|.
name|p2
operator|.
name|y
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|bottomRight
operator|->
name|y
argument_list|)
expr_stmt|;
operator|++
name|size
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(QT_NO_XRENDER)
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
end_ifndef
begin_function
DECL|function|getPatternFill
specifier|static
name|Picture
name|getPatternFill
parameter_list|(
name|int
name|screen
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|b
parameter_list|)
block|{
if|if
condition|(
operator|!
name|X11
operator|->
name|use_xrender
condition|)
return|return
name|XNone
return|;
name|XRenderColor
name|color
init|=
name|X11
operator|->
name|preMultiply
argument_list|(
name|b
operator|.
name|color
argument_list|()
argument_list|)
decl_stmt|;
name|XRenderColor
name|bg_color
decl_stmt|;
name|bg_color
operator|=
name|X11
operator|->
name|preMultiply
argument_list|(
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|X11
operator|->
name|pattern_fill_count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|screen
operator|==
name|screen
operator|&&
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|opaque
operator|==
literal|false
operator|&&
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|style
operator|==
name|b
operator|.
name|style
argument_list|()
operator|&&
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|color
operator|.
name|alpha
operator|==
name|color
operator|.
name|alpha
operator|&&
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|color
operator|.
name|red
operator|==
name|color
operator|.
name|red
operator|&&
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|color
operator|.
name|green
operator|==
name|color
operator|.
name|green
operator|&&
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|color
operator|.
name|blue
operator|==
name|color
operator|.
name|blue
operator|&&
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|bg_color
operator|.
name|alpha
operator|==
name|bg_color
operator|.
name|alpha
operator|&&
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|bg_color
operator|.
name|red
operator|==
name|bg_color
operator|.
name|red
operator|&&
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|bg_color
operator|.
name|green
operator|==
name|bg_color
operator|.
name|green
operator|&&
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|bg_color
operator|.
name|blue
operator|==
name|bg_color
operator|.
name|blue
condition|)
return|return
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|picture
return|;
block|}
comment|// none found, replace one
name|int
name|i
init|=
name|qrand
argument_list|()
operator|%
literal|16
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|screen
operator|!=
name|screen
operator|&&
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|picture
condition|)
block|{
name|XRenderFreePicture
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|picture
argument_list|)
expr_stmt|;
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|picture
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|picture
condition|)
block|{
name|Pixmap
name|pixmap
init|=
name|XCreatePixmap
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|screen
argument_list|)
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|XRenderPictureAttributes
name|attrs
decl_stmt|;
name|attrs
operator|.
name|repeat
operator|=
name|True
expr_stmt|;
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|picture
operator|=
name|XRenderCreatePicture
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|pixmap
argument_list|,
name|XRenderFindStandardFormat
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|PictStandardARGB32
argument_list|)
argument_list|,
name|CPRepeat
argument_list|,
operator|&
name|attrs
argument_list|)
expr_stmt|;
name|XFreePixmap
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|screen
operator|=
name|screen
expr_stmt|;
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|color
operator|=
name|color
expr_stmt|;
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|bg_color
operator|=
name|bg_color
expr_stmt|;
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|opaque
operator|=
literal|false
expr_stmt|;
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|style
operator|=
name|b
operator|.
name|style
argument_list|()
expr_stmt|;
name|XRenderFillRectangle
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|PictOpSrc
argument_list|,
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|picture
argument_list|,
operator|&
name|bg_color
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QPixmap
name|pattern
argument_list|(
name|qt_pixmapForBrush
argument_list|(
name|b
operator|.
name|style
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|XRenderPictureAttributes
name|attrs
decl_stmt|;
name|attrs
operator|.
name|repeat
operator|=
literal|true
expr_stmt|;
name|XRenderChangePicture
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|pattern
operator|.
name|x11PictureHandle
argument_list|()
argument_list|,
name|CPRepeat
argument_list|,
operator|&
name|attrs
argument_list|)
expr_stmt|;
name|Picture
name|fill_fg
init|=
name|X11
operator|->
name|getSolidFill
argument_list|(
name|screen
argument_list|,
name|b
operator|.
name|color
argument_list|()
argument_list|)
decl_stmt|;
name|XRenderComposite
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|PictOpOver
argument_list|,
name|fill_fg
argument_list|,
name|pattern
operator|.
name|x11PictureHandle
argument_list|()
argument_list|,
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|picture
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
return|return
name|X11
operator|->
name|pattern_fills
index|[
name|i
index|]
operator|.
name|picture
return|;
block|}
end_function
begin_function
DECL|function|qt_render_bitmap
specifier|static
name|void
name|qt_render_bitmap
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|int
name|scrn
parameter_list|,
name|Picture
name|src
parameter_list|,
name|Picture
name|dst
parameter_list|,
name|int
name|sx
parameter_list|,
name|int
name|sy
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|sw
parameter_list|,
name|int
name|sh
parameter_list|,
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|Picture
name|fill_fg
init|=
name|X11
operator|->
name|getSolidFill
argument_list|(
name|scrn
argument_list|,
name|pen
operator|.
name|color
argument_list|()
argument_list|)
decl_stmt|;
name|XRenderComposite
argument_list|(
name|dpy
argument_list|,
name|PictOpOver
argument_list|,
name|fill_fg
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|init
name|void
name|QX11PaintEnginePrivate
operator|::
name|init
parameter_list|()
block|{
name|dpy
operator|=
literal|0
expr_stmt|;
name|scrn
operator|=
literal|0
expr_stmt|;
name|hd
operator|=
literal|0
expr_stmt|;
name|picture
operator|=
literal|0
expr_stmt|;
name|xinfo
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|current_brush
operator|=
literal|0
expr_stmt|;
name|composition_mode
operator|=
name|PictOpOver
expr_stmt|;
name|tessellator
operator|=
operator|new
name|QXRenderTessellator
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setupAdaptedOrigin
name|void
name|QX11PaintEnginePrivate
operator|::
name|setupAdaptedOrigin
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
block|{
if|if
condition|(
name|adapted_pen_origin
condition|)
name|XSetTSOrigin
argument_list|(
name|dpy
argument_list|,
name|gc
argument_list|,
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|adapted_brush_origin
condition|)
name|XSetTSOrigin
argument_list|(
name|dpy
argument_list|,
name|gc_brush
argument_list|,
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetAdaptedOrigin
name|void
name|QX11PaintEnginePrivate
operator|::
name|resetAdaptedOrigin
parameter_list|()
block|{
if|if
condition|(
name|adapted_pen_origin
condition|)
name|XSetTSOrigin
argument_list|(
name|dpy
argument_list|,
name|gc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|adapted_brush_origin
condition|)
name|XSetTSOrigin
argument_list|(
name|dpy
argument_list|,
name|gc_brush
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clipPolygon_dev
name|void
name|QX11PaintEnginePrivate
operator|::
name|clipPolygon_dev
parameter_list|(
specifier|const
name|QPolygonF
modifier|&
name|poly
parameter_list|,
name|QPolygonF
modifier|*
name|clipped_poly
parameter_list|)
block|{
name|int
name|clipped_count
init|=
literal|0
decl_stmt|;
name|qt_float_point
modifier|*
name|clipped_points
init|=
literal|0
decl_stmt|;
name|polygonClipper
operator|.
name|clipPolygon
argument_list|(
operator|(
name|qt_float_point
operator|*
operator|)
name|poly
operator|.
name|data
argument_list|()
argument_list|,
name|poly
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|clipped_points
argument_list|,
operator|&
name|clipped_count
argument_list|)
expr_stmt|;
name|clipped_poly
operator|->
name|resize
argument_list|(
name|clipped_count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clipped_count
condition|;
operator|++
name|i
control|)
operator|(
operator|*
name|clipped_poly
operator|)
index|[
name|i
index|]
operator|=
operator|*
operator|(
operator|(
name|QPointF
operator|*
operator|)
operator|(
operator|&
name|clipped_points
index|[
name|i
index|]
operator|)
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|systemStateChanged
name|void
name|QX11PaintEnginePrivate
operator|::
name|systemStateChanged
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
name|QPainter
modifier|*
name|painter
init|=
name|q
operator|->
name|state
condition|?
cast|static_cast
argument_list|<
name|QPainterState
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|state
argument_list|)
operator|->
name|painter
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|painter
operator|&&
name|painter
operator|->
name|hasClipping
argument_list|()
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|testDirty
argument_list|(
name|QPaintEngine
operator|::
name|DirtyTransform
argument_list|)
condition|)
name|q
operator|->
name|updateMatrix
argument_list|(
name|q
operator|->
name|state
operator|->
name|transform
argument_list|()
argument_list|)
expr_stmt|;
name|QPolygonF
name|clip_poly_dev
argument_list|(
name|matrix
operator|.
name|map
argument_list|(
name|painter
operator|->
name|clipPath
argument_list|()
operator|.
name|toFillPolygon
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QPolygonF
name|clipped_poly_dev
decl_stmt|;
name|clipPolygon_dev
argument_list|(
name|clip_poly_dev
argument_list|,
operator|&
name|clipped_poly_dev
argument_list|)
expr_stmt|;
name|q
operator|->
name|updateClipRegion_dev
argument_list|(
name|QRegion
argument_list|(
name|clipped_poly_dev
operator|.
name|toPolygon
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|ReplaceClip
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|->
name|updateClipRegion_dev
argument_list|(
name|QRegion
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoClip
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_decide_features
specifier|static
name|QPaintEngine
operator|::
name|PaintEngineFeatures
name|qt_decide_features
parameter_list|()
block|{
name|QPaintEngine
operator|::
name|PaintEngineFeatures
name|features
init|=
name|QPaintEngine
operator|::
name|PrimitiveTransform
operator||
name|QPaintEngine
operator|::
name|PatternBrush
operator||
name|QPaintEngine
operator|::
name|AlphaBlend
operator||
name|QPaintEngine
operator|::
name|PainterPaths
operator||
name|QPaintEngine
operator|::
name|RasterOpModes
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|use_xrender
condition|)
block|{
name|features
operator||=
name|QPaintEngine
operator|::
name|Antialiasing
expr_stmt|;
name|features
operator||=
name|QPaintEngine
operator|::
name|PorterDuff
expr_stmt|;
name|features
operator||=
name|QPaintEngine
operator|::
name|MaskedBrush
expr_stmt|;
if|#
directive|if
literal|0
block|if (X11->xrender_version> 10) {             features |= QPaintEngine::LinearGradientFill;
comment|// ###
block|}
endif|#
directive|endif
block|}
return|return
name|features
return|;
block|}
end_function
begin_comment
comment|/*  * QX11PaintEngine members  */
end_comment
begin_constructor
DECL|function|QX11PaintEngine
name|QX11PaintEngine
operator|::
name|QX11PaintEngine
parameter_list|()
member_init_list|:
name|QPaintEngine
argument_list|(
operator|*
operator|(
operator|new
name|QX11PaintEnginePrivate
operator|)
argument_list|,
name|qt_decide_features
argument_list|()
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QX11PaintEngine
name|QX11PaintEngine
operator|::
name|QX11PaintEngine
parameter_list|(
name|QX11PaintEnginePrivate
modifier|&
name|dptr
parameter_list|)
member_init_list|:
name|QPaintEngine
argument_list|(
name|dptr
argument_list|,
name|qt_decide_features
argument_list|()
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QX11PaintEngine
name|QX11PaintEngine
operator|::
name|~
name|QX11PaintEngine
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|tessellator
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|begin
name|bool
name|QX11PaintEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|xinfo
operator|=
name|qt_x11Info
argument_list|(
name|pdev
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|d
operator|->
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
condition|?
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|pdev
argument_list|)
else|:
literal|0
decl_stmt|;
specifier|const
name|bool
name|isAlienWidget
init|=
name|w
operator|&&
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
operator|&&
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
name|w
condition|)
block|{
if|if
condition|(
name|isAlienWidget
condition|)
name|d
operator|->
name|picture
operator|=
operator|(
operator|::
name|Picture
operator|)
name|w
operator|->
name|nativeParentWidget
argument_list|()
operator|->
name|x11PictureHandle
argument_list|()
expr_stmt|;
else|else
name|d
operator|->
name|picture
operator|=
operator|(
operator|::
name|Picture
operator|)
name|w
operator|->
name|x11PictureHandle
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Pixmap
condition|)
block|{
specifier|const
name|QPixmap
modifier|*
name|pm
init|=
cast|static_cast
argument_list|<
specifier|const
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|pdev
argument_list|)
decl_stmt|;
name|QX11PixmapData
modifier|*
name|data
init|=
cast|static_cast
argument_list|<
name|QX11PixmapData
operator|*
argument_list|>
argument_list|(
name|pm
operator|->
name|data
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|use_xrender
operator|&&
name|data
operator|->
name|depth
argument_list|()
operator|!=
literal|32
operator|&&
name|data
operator|->
name|x11_mask
condition|)
name|data
operator|->
name|convertToARGB32
argument_list|()
expr_stmt|;
name|d
operator|->
name|picture
operator|=
operator|(
operator|::
name|Picture
operator|)
cast|static_cast
argument_list|<
specifier|const
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|pdev
argument_list|)
operator|->
name|x11PictureHandle
argument_list|()
expr_stmt|;
block|}
else|#
directive|else
name|d
operator|->
name|picture
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|hd
operator|=
operator|!
name|isAlienWidget
condition|?
name|qt_x11Handle
argument_list|(
name|pdev
argument_list|)
else|:
name|qt_x11Handle
argument_list|(
name|w
operator|->
name|nativeParentWidget
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|xinfo
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|dpy
operator|=
name|d
operator|->
name|xinfo
operator|->
name|display
argument_list|()
expr_stmt|;
comment|// get display variable
name|d
operator|->
name|scrn
operator|=
name|d
operator|->
name|xinfo
operator|->
name|screen
argument_list|()
expr_stmt|;
comment|// get screen variable
name|d
operator|->
name|crgn
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|d
operator|->
name|gc
operator|=
name|XCreateGC
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|gc_brush
operator|=
name|XCreateGC
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|has_alpha_brush
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|has_alpha_pen
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|has_clipping
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|has_complex_xform
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|has_scaling_xform
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|has_non_scaling_xform
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|xform_scale
operator|=
literal|1
expr_stmt|;
name|d
operator|->
name|has_custom_pen
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|matrix
operator|=
name|QTransform
argument_list|()
expr_stmt|;
name|d
operator|->
name|pdev_depth
operator|=
name|d
operator|->
name|pdev
operator|->
name|depth
argument_list|()
expr_stmt|;
name|d
operator|->
name|render_hints
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|txop
operator|=
name|QTransform
operator|::
name|TxNone
expr_stmt|;
name|d
operator|->
name|use_path_fallback
operator|=
literal|false
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
name|d
operator|->
name|composition_mode
operator|=
name|PictOpOver
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|xlibMaxLinePoints
operator|=
literal|32762
expr_stmt|;
comment|// a safe number used to avoid, call to XMaxRequestSize(d->dpy) - 3;
name|d
operator|->
name|opacity
operator|=
literal|1
expr_stmt|;
comment|// Set up the polygon clipper. Note: This will only work in
comment|// polyline mode as long as we have a buffer zone, since a
comment|// polyline may be clipped into several non-connected polylines.
specifier|const
name|int
name|BUFFERZONE
init|=
literal|1000
decl_stmt|;
name|QRect
name|devClipRect
argument_list|(
operator|-
name|BUFFERZONE
argument_list|,
operator|-
name|BUFFERZONE
argument_list|,
name|pdev
operator|->
name|width
argument_list|()
operator|+
literal|2
operator|*
name|BUFFERZONE
argument_list|,
name|pdev
operator|->
name|height
argument_list|()
operator|+
literal|2
operator|*
name|BUFFERZONE
argument_list|)
decl_stmt|;
name|d
operator|->
name|polygonClipper
operator|.
name|setBoundingRect
argument_list|(
name|devClipRect
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAlienWidget
condition|)
block|{
comment|// Set system clip for alien widgets painting outside the paint event.
comment|// This is not a problem with native windows since the windowing system
comment|// will handle the clip.
name|QWidgetPrivate
modifier|*
name|wd
init|=
name|w
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|QRegion
name|widgetClip
argument_list|(
name|wd
operator|->
name|clipRect
argument_list|()
argument_list|)
decl_stmt|;
name|wd
operator|->
name|clipToEffectiveMask
argument_list|(
name|widgetClip
argument_list|)
expr_stmt|;
name|wd
operator|->
name|subtractOpaqueSiblings
argument_list|(
name|widgetClip
argument_list|)
expr_stmt|;
name|widgetClip
operator|.
name|translate
argument_list|(
name|w
operator|->
name|mapTo
argument_list|(
name|w
operator|->
name|nativeParentWidget
argument_list|()
argument_list|,
name|QPoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setSystemClip
argument_list|(
name|widgetClip
argument_list|)
expr_stmt|;
block|}
name|QPixmap
operator|::
name|x11SetDefaultScreen
argument_list|(
name|d
operator|->
name|xinfo
operator|->
name|screen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|&&
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_PaintUnclipped
argument_list|)
condition|)
block|{
comment|// paint direct on device
name|updatePen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
argument_list|)
expr_stmt|;
name|updateBrush
argument_list|(
name|QBrush
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|XSetSubwindowMode
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|IncludeInferiors
argument_list|)
expr_stmt|;
name|XSetSubwindowMode
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc_brush
argument_list|,
name|IncludeInferiors
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|XRenderPictureAttributes
name|attrs
decl_stmt|;
name|attrs
operator|.
name|subwindow_mode
operator|=
name|IncludeInferiors
expr_stmt|;
name|XRenderChangePicture
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|CPSubwindowMode
argument_list|,
operator|&
name|attrs
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|setDirty
argument_list|(
name|QPaintEngine
operator|::
name|DirtyClipRegion
argument_list|)
expr_stmt|;
name|setDirty
argument_list|(
name|QPaintEngine
operator|::
name|DirtyPen
argument_list|)
expr_stmt|;
name|setDirty
argument_list|(
name|QPaintEngine
operator|::
name|DirtyBrush
argument_list|)
expr_stmt|;
name|setDirty
argument_list|(
name|QPaintEngine
operator|::
name|DirtyBackground
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QX11PaintEngine
operator|::
name|end
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
if|if
condition|(
name|d
operator|->
name|picture
condition|)
block|{
comment|// reset clipping/subwindow mode on our render picture
name|XRenderPictureAttributes
name|attrs
decl_stmt|;
name|attrs
operator|.
name|subwindow_mode
operator|=
name|ClipByChildren
expr_stmt|;
name|attrs
operator|.
name|clip_mask
operator|=
name|XNone
expr_stmt|;
name|XRenderChangePicture
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|CPClipMask
operator||
name|CPSubwindowMode
argument_list|,
operator|&
name|attrs
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|gc_brush
operator|&&
name|d
operator|->
name|pdev
operator|->
name|painters
operator|<
literal|2
condition|)
block|{
name|XFreeGC
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc_brush
argument_list|)
expr_stmt|;
name|d
operator|->
name|gc_brush
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|gc
operator|&&
name|d
operator|->
name|pdev
operator|->
name|painters
operator|<
literal|2
condition|)
block|{
name|XFreeGC
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|)
expr_stmt|;
name|d
operator|->
name|gc
operator|=
literal|0
expr_stmt|;
block|}
comment|// Restore system clip for alien widgets painting outside the paint event.
if|if
condition|(
name|d
operator|->
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
operator|&&
operator|!
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|pdev
argument_list|)
operator|->
name|internalWinId
argument_list|()
condition|)
name|setSystemClip
argument_list|(
name|QRegion
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|clipLine
specifier|static
name|bool
name|clipLine
parameter_list|(
name|QLineF
modifier|*
name|line
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|qreal
name|x1
init|=
name|line
operator|->
name|x1
argument_list|()
decl_stmt|;
name|qreal
name|x2
init|=
name|line
operator|->
name|x2
argument_list|()
decl_stmt|;
name|qreal
name|y1
init|=
name|line
operator|->
name|y1
argument_list|()
decl_stmt|;
name|qreal
name|y2
init|=
name|line
operator|->
name|y2
argument_list|()
decl_stmt|;
name|qreal
name|left
init|=
name|rect
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|right
init|=
name|rect
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|1
decl_stmt|;
name|qreal
name|top
init|=
name|rect
operator|.
name|y
argument_list|()
decl_stmt|;
name|qreal
name|bottom
init|=
name|rect
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
decl_stmt|;
enum|enum
block|{
name|Left
block|,
name|Right
block|,
name|Top
block|,
name|Bottom
block|}
enum|;
comment|// clip the lines, after cohen-sutherland, see e.g. http://www.nondot.org/~sabre/graphpro/line6.html
name|int
name|p1
init|=
operator|(
operator|(
name|x1
operator|<
name|left
operator|)
operator|<<
name|Left
operator|)
operator||
operator|(
operator|(
name|x1
operator|>
name|right
operator|)
operator|<<
name|Right
operator|)
operator||
operator|(
operator|(
name|y1
operator|<
name|top
operator|)
operator|<<
name|Top
operator|)
operator||
operator|(
operator|(
name|y1
operator|>
name|bottom
operator|)
operator|<<
name|Bottom
operator|)
decl_stmt|;
name|int
name|p2
init|=
operator|(
operator|(
name|x2
operator|<
name|left
operator|)
operator|<<
name|Left
operator|)
operator||
operator|(
operator|(
name|x2
operator|>
name|right
operator|)
operator|<<
name|Right
operator|)
operator||
operator|(
operator|(
name|y2
operator|<
name|top
operator|)
operator|<<
name|Top
operator|)
operator||
operator|(
operator|(
name|y2
operator|>
name|bottom
operator|)
operator|<<
name|Bottom
operator|)
decl_stmt|;
if|if
condition|(
name|p1
operator|&
name|p2
condition|)
comment|// completely outside
return|return
literal|false
return|;
if|if
condition|(
name|p1
operator||
name|p2
condition|)
block|{
name|qreal
name|dx
init|=
name|x2
operator|-
name|x1
decl_stmt|;
name|qreal
name|dy
init|=
name|y2
operator|-
name|y1
decl_stmt|;
comment|// clip x coordinates
if|if
condition|(
name|x1
operator|<
name|left
condition|)
block|{
name|y1
operator|+=
name|dy
operator|/
name|dx
operator|*
operator|(
name|left
operator|-
name|x1
operator|)
expr_stmt|;
name|x1
operator|=
name|left
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x1
operator|>
name|right
condition|)
block|{
name|y1
operator|-=
name|dy
operator|/
name|dx
operator|*
operator|(
name|x1
operator|-
name|right
operator|)
expr_stmt|;
name|x1
operator|=
name|right
expr_stmt|;
block|}
if|if
condition|(
name|x2
operator|<
name|left
condition|)
block|{
name|y2
operator|+=
name|dy
operator|/
name|dx
operator|*
operator|(
name|left
operator|-
name|x2
operator|)
expr_stmt|;
name|x2
operator|=
name|left
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x2
operator|>
name|right
condition|)
block|{
name|y2
operator|-=
name|dy
operator|/
name|dx
operator|*
operator|(
name|x2
operator|-
name|right
operator|)
expr_stmt|;
name|x2
operator|=
name|right
expr_stmt|;
block|}
name|p1
operator|=
operator|(
operator|(
name|y1
operator|<
name|top
operator|)
operator|<<
name|Top
operator|)
operator||
operator|(
operator|(
name|y1
operator|>
name|bottom
operator|)
operator|<<
name|Bottom
operator|)
expr_stmt|;
name|p2
operator|=
operator|(
operator|(
name|y2
operator|<
name|top
operator|)
operator|<<
name|Top
operator|)
operator||
operator|(
operator|(
name|y2
operator|>
name|bottom
operator|)
operator|<<
name|Bottom
operator|)
expr_stmt|;
if|if
condition|(
name|p1
operator|&
name|p2
condition|)
return|return
literal|false
return|;
comment|// clip y coordinates
if|if
condition|(
name|y1
operator|<
name|top
condition|)
block|{
name|x1
operator|+=
name|dx
operator|/
name|dy
operator|*
operator|(
name|top
operator|-
name|y1
operator|)
expr_stmt|;
name|y1
operator|=
name|top
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|y1
operator|>
name|bottom
condition|)
block|{
name|x1
operator|-=
name|dx
operator|/
name|dy
operator|*
operator|(
name|y1
operator|-
name|bottom
operator|)
expr_stmt|;
name|y1
operator|=
name|bottom
expr_stmt|;
block|}
if|if
condition|(
name|y2
operator|<
name|top
condition|)
block|{
name|x2
operator|+=
name|dx
operator|/
name|dy
operator|*
operator|(
name|top
operator|-
name|y2
operator|)
expr_stmt|;
name|y2
operator|=
name|top
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|y2
operator|>
name|bottom
condition|)
block|{
name|x2
operator|-=
name|dx
operator|/
name|dy
operator|*
operator|(
name|y2
operator|-
name|bottom
operator|)
expr_stmt|;
name|y2
operator|=
name|bottom
expr_stmt|;
block|}
operator|*
name|line
operator|=
name|QLineF
argument_list|(
name|QPointF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|drawLines
name|void
name|QX11PaintEngine
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLine
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|lines
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|lineCount
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_alpha_brush
operator|||
name|d
operator|->
name|has_alpha_pen
operator|||
name|d
operator|->
name|has_custom_pen
operator|||
operator|(
name|d
operator|->
name|cpen
operator|.
name|widthF
argument_list|()
operator|>
literal|0
operator|&&
name|d
operator|->
name|has_complex_xform
operator|&&
operator|!
name|d
operator|->
name|has_non_scaling_xform
operator|)
operator|||
operator|(
name|d
operator|->
name|render_hints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
name|QPainterPath
name|path
argument_list|(
name|lines
index|[
name|i
index|]
operator|.
name|p1
argument_list|()
argument_list|)
decl_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|lines
index|[
name|i
index|]
operator|.
name|p2
argument_list|()
argument_list|)
expr_stmt|;
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
name|QLineF
name|linef
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|txop
operator|==
name|QTransform
operator|::
name|TxNone
condition|)
block|{
name|linef
operator|=
name|lines
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|linef
operator|=
name|d
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|QLineF
argument_list|(
name|lines
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clipLine
argument_list|(
operator|&
name|linef
argument_list|,
name|d
operator|->
name|polygonClipper
operator|.
name|boundingRect
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|x1
init|=
name|qRound
argument_list|(
name|linef
operator|.
name|x1
argument_list|()
operator|+
name|aliasedCoordinateDelta
argument_list|)
decl_stmt|;
name|int
name|y1
init|=
name|qRound
argument_list|(
name|linef
operator|.
name|y1
argument_list|()
operator|+
name|aliasedCoordinateDelta
argument_list|)
decl_stmt|;
name|int
name|x2
init|=
name|qRound
argument_list|(
name|linef
operator|.
name|x2
argument_list|()
operator|+
name|aliasedCoordinateDelta
argument_list|)
decl_stmt|;
name|int
name|y2
init|=
name|qRound
argument_list|(
name|linef
operator|.
name|y2
argument_list|()
operator|+
name|aliasedCoordinateDelta
argument_list|)
decl_stmt|;
name|XDrawLine
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawLines
name|void
name|QX11PaintEngine
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLineF
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|lines
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|lineCount
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_alpha_brush
operator|||
name|d
operator|->
name|has_alpha_pen
operator|||
name|d
operator|->
name|has_custom_pen
operator|||
operator|(
name|d
operator|->
name|cpen
operator|.
name|widthF
argument_list|()
operator|>
literal|0
operator|&&
name|d
operator|->
name|has_complex_xform
operator|&&
operator|!
name|d
operator|->
name|has_non_scaling_xform
operator|)
operator|||
operator|(
name|d
operator|->
name|render_hints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
name|QPainterPath
name|path
argument_list|(
name|lines
index|[
name|i
index|]
operator|.
name|p1
argument_list|()
argument_list|)
decl_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|lines
index|[
name|i
index|]
operator|.
name|p2
argument_list|()
argument_list|)
expr_stmt|;
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
name|QLineF
name|linef
init|=
name|d
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|lines
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|clipLine
argument_list|(
operator|&
name|linef
argument_list|,
name|d
operator|->
name|polygonClipper
operator|.
name|boundingRect
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|x1
init|=
name|qRound
argument_list|(
name|linef
operator|.
name|x1
argument_list|()
operator|+
name|aliasedCoordinateDelta
argument_list|)
decl_stmt|;
name|int
name|y1
init|=
name|qRound
argument_list|(
name|linef
operator|.
name|y1
argument_list|()
operator|+
name|aliasedCoordinateDelta
argument_list|)
decl_stmt|;
name|int
name|x2
init|=
name|qRound
argument_list|(
name|linef
operator|.
name|x2
argument_list|()
operator|+
name|aliasedCoordinateDelta
argument_list|)
decl_stmt|;
name|int
name|y2
init|=
name|qRound
argument_list|(
name|linef
operator|.
name|y2
argument_list|()
operator|+
name|aliasedCoordinateDelta
argument_list|)
decl_stmt|;
name|XDrawLine
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|clipStraightLine
specifier|static
specifier|inline
name|QLine
name|clipStraightLine
parameter_list|(
specifier|const
name|QRect
modifier|&
name|clip
parameter_list|,
specifier|const
name|QLine
modifier|&
name|l
parameter_list|)
block|{
if|if
condition|(
name|l
operator|.
name|p1
argument_list|()
operator|.
name|x
argument_list|()
operator|==
name|l
operator|.
name|p2
argument_list|()
operator|.
name|x
argument_list|()
condition|)
block|{
name|int
name|x
init|=
name|qBound
argument_list|(
name|clip
operator|.
name|left
argument_list|()
argument_list|,
name|l
operator|.
name|p1
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|clip
operator|.
name|right
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|y1
init|=
name|qBound
argument_list|(
name|clip
operator|.
name|top
argument_list|()
argument_list|,
name|l
operator|.
name|p1
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|clip
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|y2
init|=
name|qBound
argument_list|(
name|clip
operator|.
name|top
argument_list|()
argument_list|,
name|l
operator|.
name|p2
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|clip
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|QLine
argument_list|(
name|x
argument_list|,
name|y1
argument_list|,
name|x
argument_list|,
name|y2
argument_list|)
return|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|l
operator|.
name|p1
argument_list|()
operator|.
name|y
argument_list|()
operator|==
name|l
operator|.
name|p2
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|x1
init|=
name|qBound
argument_list|(
name|clip
operator|.
name|left
argument_list|()
argument_list|,
name|l
operator|.
name|p1
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|clip
operator|.
name|right
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|x2
init|=
name|qBound
argument_list|(
name|clip
operator|.
name|left
argument_list|()
argument_list|,
name|l
operator|.
name|p2
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|clip
operator|.
name|right
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|qBound
argument_list|(
name|clip
operator|.
name|top
argument_list|()
argument_list|,
name|l
operator|.
name|p1
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|clip
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|QLine
argument_list|(
name|x1
argument_list|,
name|y
argument_list|,
name|x2
argument_list|,
name|y
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|drawRects
name|void
name|QX11PaintEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRectF
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|rects
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|rectCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|rectCount
operator|!=
literal|1
operator|||
name|d
operator|->
name|has_pen
operator|||
name|d
operator|->
name|has_alpha_brush
operator|||
name|d
operator|->
name|has_complex_xform
operator|||
name|d
operator|->
name|has_custom_pen
operator|||
name|d
operator|->
name|cbrush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|SolidPattern
condition|)
block|{
name|QPaintEngine
operator|::
name|drawRects
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
return|return;
block|}
name|QPoint
name|alignedOffset
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|txop
operator|==
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
name|QPointF
name|offset
argument_list|(
name|d
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|,
name|d
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
decl_stmt|;
name|alignedOffset
operator|=
name|offset
operator|.
name|toPoint
argument_list|()
expr_stmt|;
if|if
condition|(
name|offset
operator|!=
name|QPointF
argument_list|(
name|alignedOffset
argument_list|)
condition|)
block|{
name|QPaintEngine
operator|::
name|drawRects
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|const
name|QRectF
modifier|&
name|r
init|=
name|rects
index|[
literal|0
index|]
decl_stmt|;
name|QRect
name|alignedRect
init|=
name|r
operator|.
name|toAlignedRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|QRectF
argument_list|(
name|alignedRect
argument_list|)
condition|)
block|{
name|QPaintEngine
operator|::
name|drawRects
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
return|return;
block|}
name|alignedRect
operator|.
name|translate
argument_list|(
name|alignedOffset
argument_list|)
expr_stmt|;
name|QRect
name|clip
argument_list|(
name|d
operator|->
name|polygonClipper
operator|.
name|boundingRect
argument_list|()
argument_list|)
decl_stmt|;
name|alignedRect
operator|=
name|alignedRect
operator|.
name|intersected
argument_list|(
name|clip
argument_list|)
expr_stmt|;
if|if
condition|(
name|alignedRect
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
comment|// simple-case:
comment|//   the rectangle is pixel-aligned
comment|//   the fill brush is just a solid non-alpha color
comment|//   the painter transform is only integer translation
comment|// ignore: antialiasing and just XFillRectangles directly
name|XRectangle
name|xrect
decl_stmt|;
name|xrect
operator|.
name|x
operator|=
name|short
argument_list|(
name|alignedRect
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|xrect
operator|.
name|y
operator|=
name|short
argument_list|(
name|alignedRect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|xrect
operator|.
name|width
operator|=
name|ushort
argument_list|(
name|alignedRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|xrect
operator|.
name|height
operator|=
name|ushort
argument_list|(
name|alignedRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|XFillRectangles
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc_brush
argument_list|,
operator|&
name|xrect
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawRects
name|void
name|QX11PaintEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRect
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|rects
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|rectCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_alpha_pen
operator|||
name|d
operator|->
name|has_complex_xform
operator|||
name|d
operator|->
name|has_custom_pen
operator|||
operator|(
name|d
operator|->
name|render_hints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addRect
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|QRect
name|clip
argument_list|(
name|d
operator|->
name|polygonClipper
operator|.
name|boundingRect
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|offset
argument_list|(
name|qRound
argument_list|(
name|d
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|d
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
operator|::
name|Picture
name|pict
init|=
name|d
operator|->
name|picture
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|use_xrender
operator|&&
name|pict
operator|&&
name|d
operator|->
name|has_brush
operator|&&
name|d
operator|->
name|pdev_depth
operator|!=
literal|1
operator|&&
operator|(
name|d
operator|->
name|has_texture
operator|||
name|d
operator|->
name|has_alpha_brush
operator|)
condition|)
block|{
name|XRenderColor
name|xc
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|has_texture
operator|&&
operator|!
name|d
operator|->
name|has_pattern
condition|)
name|xc
operator|=
name|X11
operator|->
name|preMultiply
argument_list|(
name|d
operator|->
name|cbrush
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
name|QRect
name|r
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|txop
operator|==
name|QTransform
operator|::
name|TxTranslate
condition|)
name|r
operator|.
name|translate
argument_list|(
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|width
argument_list|()
operator|==
literal|0
operator|||
name|r
operator|.
name|height
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
block|{
specifier|const
name|QLine
name|l
init|=
name|clipStraightLine
argument_list|(
name|clip
argument_list|,
name|QLine
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|r
operator|.
name|left
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|XDrawLine
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|l
operator|.
name|p1
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|l
operator|.
name|p1
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|l
operator|.
name|p2
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|l
operator|.
name|p2
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|r
operator|=
name|r
operator|.
name|intersected
argument_list|(
name|clip
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|d
operator|->
name|has_texture
operator|||
name|d
operator|->
name|has_pattern
condition|)
block|{
name|XRenderComposite
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|composition_mode
argument_list|,
name|d
operator|->
name|current_brush
argument_list|,
literal|0
argument_list|,
name|pict
argument_list|,
name|qRound
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|-
name|d
operator|->
name|bg_origin
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|r
operator|.
name|y
argument_list|()
operator|-
name|d
operator|->
name|bg_origin
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XRenderFillRectangle
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|composition_mode
argument_list|,
name|pict
argument_list|,
operator|&
name|xc
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
name|XDrawRectangle
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
endif|#
directive|endif
comment|// !QT_NO_XRENDER
block|{
if|if
condition|(
name|d
operator|->
name|has_brush
operator|&&
name|d
operator|->
name|has_pen
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
name|QRect
name|r
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|txop
operator|==
name|QTransform
operator|::
name|TxTranslate
condition|)
name|r
operator|.
name|translate
argument_list|(
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|width
argument_list|()
operator|==
literal|0
operator|||
name|r
operator|.
name|height
argument_list|()
operator|==
literal|0
condition|)
block|{
specifier|const
name|QLine
name|l
init|=
name|clipStraightLine
argument_list|(
name|clip
argument_list|,
name|QLine
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|r
operator|.
name|left
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|XDrawLine
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|l
operator|.
name|p1
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|l
operator|.
name|p1
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|l
operator|.
name|p2
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|l
operator|.
name|p2
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|r
operator|=
name|r
operator|.
name|intersected
argument_list|(
name|clip
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|d
operator|->
name|setupAdaptedOrigin
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|XFillRectangle
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc_brush
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|XDrawRectangle
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|resetAdaptedOrigin
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QVarLengthArray
argument_list|<
name|XRectangle
argument_list|>
name|xrects
argument_list|(
name|rectCount
argument_list|)
decl_stmt|;
name|int
name|numClipped
init|=
name|rectCount
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
name|QRect
name|r
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|txop
operator|==
name|QTransform
operator|::
name|TxTranslate
condition|)
name|r
operator|.
name|translate
argument_list|(
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|width
argument_list|()
operator|==
literal|0
operator|||
name|r
operator|.
name|height
argument_list|()
operator|==
literal|0
condition|)
block|{
operator|--
name|numClipped
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
block|{
specifier|const
name|QLine
name|l
init|=
name|clipStraightLine
argument_list|(
name|clip
argument_list|,
name|QLine
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|r
operator|.
name|left
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|XDrawLine
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|l
operator|.
name|p1
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|l
operator|.
name|p1
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|l
operator|.
name|p2
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|l
operator|.
name|p2
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|r
operator|=
name|r
operator|.
name|intersected
argument_list|(
name|clip
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|--
name|numClipped
expr_stmt|;
continue|continue;
block|}
name|xrects
index|[
name|i
index|]
operator|.
name|x
operator|=
name|short
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|xrects
index|[
name|i
index|]
operator|.
name|y
operator|=
name|short
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|xrects
index|[
name|i
index|]
operator|.
name|width
operator|=
name|ushort
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|xrects
index|[
name|i
index|]
operator|.
name|height
operator|=
name|ushort
argument_list|(
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numClipped
condition|)
block|{
name|d
operator|->
name|setupAdaptedOrigin
argument_list|(
name|rects
index|[
literal|0
index|]
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_brush
condition|)
name|XFillRectangles
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc_brush
argument_list|,
name|xrects
operator|.
name|data
argument_list|()
argument_list|,
name|numClipped
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
name|XDrawRectangles
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|xrects
operator|.
name|data
argument_list|()
argument_list|,
name|numClipped
argument_list|)
expr_stmt|;
name|d
operator|->
name|resetAdaptedOrigin
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|setCapStyle
specifier|static
specifier|inline
name|void
name|setCapStyle
parameter_list|(
name|int
name|cap_style
parameter_list|,
name|GC
name|gc
parameter_list|)
block|{
name|ulong
name|mask
init|=
name|GCCapStyle
decl_stmt|;
name|XGCValues
name|vals
decl_stmt|;
name|vals
operator|.
name|cap_style
operator|=
name|cap_style
expr_stmt|;
name|XChangeGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|gc
argument_list|,
name|mask
argument_list|,
operator|&
name|vals
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPoints
name|void
name|QX11PaintEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPoint
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|points
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|pointCount
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|has_pen
condition|)
return|return;
comment|// use the same test here as in drawPath to ensure that we don't use the path fallback
comment|// and end up in XDrawLines for pens with width<= 1
if|if
condition|(
name|d
operator|->
name|cpen
operator|.
name|widthF
argument_list|()
operator|>
literal|1.0f
operator|||
operator|(
name|X11
operator|->
name|use_xrender
operator|&&
operator|(
name|d
operator|->
name|has_alpha_pen
operator|||
operator|(
name|d
operator|->
name|render_hints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
operator|)
operator|)
operator|||
operator|(
operator|!
name|d
operator|->
name|cpen
operator|.
name|isCosmetic
argument_list|()
operator|&&
name|d
operator|->
name|txop
operator|>
name|QTransform
operator|::
name|TxTranslate
operator|)
condition|)
block|{
name|Qt
operator|::
name|PenCapStyle
name|capStyle
init|=
name|d
operator|->
name|cpen
operator|.
name|capStyle
argument_list|()
decl_stmt|;
if|if
condition|(
name|capStyle
operator|==
name|Qt
operator|::
name|FlatCap
condition|)
block|{
name|setCapStyle
argument_list|(
name|CapProjecting
argument_list|,
name|d
operator|->
name|gc
argument_list|)
expr_stmt|;
name|d
operator|->
name|cpen
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|SquareCap
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QPoint
modifier|*
name|end
init|=
name|points
operator|+
name|pointCount
decl_stmt|;
while|while
condition|(
name|points
operator|<
name|end
condition|)
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
operator|*
name|points
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|points
operator|->
name|x
argument_list|()
operator|+
literal|.005
argument_list|,
name|points
operator|->
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
operator|++
name|points
expr_stmt|;
block|}
if|if
condition|(
name|capStyle
operator|==
name|Qt
operator|::
name|FlatCap
condition|)
block|{
name|setCapStyle
argument_list|(
name|CapButt
argument_list|,
name|d
operator|->
name|gc
argument_list|)
expr_stmt|;
name|d
operator|->
name|cpen
operator|.
name|setCapStyle
argument_list|(
name|capStyle
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|static
specifier|const
name|int
name|BUF_SIZE
init|=
literal|1024
decl_stmt|;
name|XPoint
name|xPoints
index|[
name|BUF_SIZE
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|j
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|pointCount
condition|)
block|{
while|while
condition|(
name|i
operator|<
name|pointCount
operator|&&
name|j
operator|<
name|BUF_SIZE
condition|)
block|{
specifier|const
name|QPoint
modifier|&
name|xformed
init|=
name|d
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|points
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|xformed
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|xformed
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|>=
name|SHRT_MIN
operator|&&
name|y
operator|>=
name|SHRT_MIN
operator|&&
name|x
operator|<
name|SHRT_MAX
operator|&&
name|y
operator|<
name|SHRT_MAX
condition|)
block|{
name|xPoints
index|[
name|j
index|]
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|xPoints
index|[
name|j
index|]
operator|.
name|y
operator|=
name|y
expr_stmt|;
operator|++
name|j
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
if|if
condition|(
name|j
condition|)
name|XDrawPoints
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|xPoints
argument_list|,
name|j
argument_list|,
name|CoordModeOrigin
argument_list|)
expr_stmt|;
name|j
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawPoints
name|void
name|QX11PaintEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|points
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|pointCount
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|has_pen
condition|)
return|return;
comment|// use the same test here as in drawPath to ensure that we don't use the path fallback
comment|// and end up in XDrawLines for pens with width<= 1
if|if
condition|(
name|d
operator|->
name|cpen
operator|.
name|widthF
argument_list|()
operator|>
literal|1.0f
operator|||
operator|(
name|X11
operator|->
name|use_xrender
operator|&&
operator|(
name|d
operator|->
name|has_alpha_pen
operator|||
operator|(
name|d
operator|->
name|render_hints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
operator|)
operator|)
operator|||
operator|(
operator|!
name|d
operator|->
name|cpen
operator|.
name|isCosmetic
argument_list|()
operator|&&
name|d
operator|->
name|txop
operator|>
name|QTransform
operator|::
name|TxTranslate
operator|)
condition|)
block|{
name|Qt
operator|::
name|PenCapStyle
name|capStyle
init|=
name|d
operator|->
name|cpen
operator|.
name|capStyle
argument_list|()
decl_stmt|;
if|if
condition|(
name|capStyle
operator|==
name|Qt
operator|::
name|FlatCap
condition|)
block|{
name|setCapStyle
argument_list|(
name|CapProjecting
argument_list|,
name|d
operator|->
name|gc
argument_list|)
expr_stmt|;
name|d
operator|->
name|cpen
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|SquareCap
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QPointF
modifier|*
name|end
init|=
name|points
operator|+
name|pointCount
decl_stmt|;
while|while
condition|(
name|points
operator|<
name|end
condition|)
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
operator|*
name|points
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|points
operator|->
name|x
argument_list|()
operator|+
literal|0.005
argument_list|,
name|points
operator|->
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
operator|++
name|points
expr_stmt|;
block|}
if|if
condition|(
name|capStyle
operator|==
name|Qt
operator|::
name|FlatCap
condition|)
block|{
name|setCapStyle
argument_list|(
name|CapButt
argument_list|,
name|d
operator|->
name|gc
argument_list|)
expr_stmt|;
name|d
operator|->
name|cpen
operator|.
name|setCapStyle
argument_list|(
name|capStyle
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|static
specifier|const
name|int
name|BUF_SIZE
init|=
literal|1024
decl_stmt|;
name|XPoint
name|xPoints
index|[
name|BUF_SIZE
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|j
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|pointCount
condition|)
block|{
while|while
condition|(
name|i
operator|<
name|pointCount
operator|&&
name|j
operator|<
name|BUF_SIZE
condition|)
block|{
specifier|const
name|QPointF
modifier|&
name|xformed
init|=
name|d
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|points
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|qFloor
argument_list|(
name|xformed
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|qFloor
argument_list|(
name|xformed
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|>=
name|SHRT_MIN
operator|&&
name|y
operator|>=
name|SHRT_MIN
operator|&&
name|x
operator|<
name|SHRT_MAX
operator|&&
name|y
operator|<
name|SHRT_MAX
condition|)
block|{
name|xPoints
index|[
name|j
index|]
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|xPoints
index|[
name|j
index|]
operator|.
name|y
operator|=
name|y
expr_stmt|;
operator|++
name|j
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
if|if
condition|(
name|j
condition|)
name|XDrawPoints
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|xPoints
argument_list|,
name|j
argument_list|,
name|CoordModeOrigin
argument_list|)
expr_stmt|;
name|j
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|supportedRenderHints
name|QPainter
operator|::
name|RenderHints
name|QX11PaintEngine
operator|::
name|supportedRenderHints
parameter_list|()
specifier|const
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
if|if
condition|(
name|X11
operator|->
name|use_xrender
condition|)
return|return
name|QPainter
operator|::
name|Antialiasing
return|;
endif|#
directive|endif
return|return
name|QFlag
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|updateState
name|void
name|QX11PaintEngine
operator|::
name|updateState
parameter_list|(
specifier|const
name|QPaintEngineState
modifier|&
name|state
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
name|QPaintEngine
operator|::
name|DirtyFlags
name|flags
init|=
name|state
operator|.
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyOpacity
condition|)
block|{
name|d
operator|->
name|opacity
operator|=
name|state
operator|.
name|opacity
argument_list|()
expr_stmt|;
comment|// Force update pen/brush as to get proper alpha colors propagated
name|flags
operator||=
name|DirtyPen
expr_stmt|;
name|flags
operator||=
name|DirtyBrush
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyTransform
condition|)
name|updateMatrix
argument_list|(
name|state
operator|.
name|transform
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyPen
condition|)
name|updatePen
argument_list|(
name|state
operator|.
name|pen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
operator|(
name|DirtyBrush
operator||
name|DirtyBrushOrigin
operator|)
condition|)
name|updateBrush
argument_list|(
name|state
operator|.
name|brush
argument_list|()
argument_list|,
name|state
operator|.
name|brushOrigin
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyFont
condition|)
name|updateFont
argument_list|(
name|state
operator|.
name|font
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|state
argument_list|()
operator|&
name|DirtyClipEnabled
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|isClipEnabled
argument_list|()
condition|)
block|{
name|QPolygonF
name|clip_poly_dev
argument_list|(
name|d
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|painter
argument_list|()
operator|->
name|clipPath
argument_list|()
operator|.
name|toFillPolygon
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QPolygonF
name|clipped_poly_dev
decl_stmt|;
name|d
operator|->
name|clipPolygon_dev
argument_list|(
name|clip_poly_dev
argument_list|,
operator|&
name|clipped_poly_dev
argument_list|)
expr_stmt|;
name|updateClipRegion_dev
argument_list|(
name|QRegion
argument_list|(
name|clipped_poly_dev
operator|.
name|toPolygon
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|ReplaceClip
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateClipRegion_dev
argument_list|(
name|QRegion
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoClip
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyClipPath
condition|)
block|{
name|QPolygonF
name|clip_poly_dev
argument_list|(
name|d
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|state
operator|.
name|clipPath
argument_list|()
operator|.
name|toFillPolygon
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QPolygonF
name|clipped_poly_dev
decl_stmt|;
name|d
operator|->
name|clipPolygon_dev
argument_list|(
name|clip_poly_dev
argument_list|,
operator|&
name|clipped_poly_dev
argument_list|)
expr_stmt|;
name|updateClipRegion_dev
argument_list|(
name|QRegion
argument_list|(
name|clipped_poly_dev
operator|.
name|toPolygon
argument_list|()
argument_list|,
name|state
operator|.
name|clipPath
argument_list|()
operator|.
name|fillRule
argument_list|()
argument_list|)
argument_list|,
name|state
operator|.
name|clipOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|DirtyClipRegion
condition|)
block|{
specifier|extern
name|QPainterPath
name|qt_regionToPath
argument_list|(
specifier|const
name|QRegion
operator|&
name|region
argument_list|)
decl_stmt|;
name|QPainterPath
name|clip_path
init|=
name|qt_regionToPath
argument_list|(
name|state
operator|.
name|clipRegion
argument_list|()
argument_list|)
decl_stmt|;
name|QPolygonF
name|clip_poly_dev
argument_list|(
name|d
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|clip_path
operator|.
name|toFillPolygon
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QPolygonF
name|clipped_poly_dev
decl_stmt|;
name|d
operator|->
name|clipPolygon_dev
argument_list|(
name|clip_poly_dev
argument_list|,
operator|&
name|clipped_poly_dev
argument_list|)
expr_stmt|;
name|updateClipRegion_dev
argument_list|(
name|QRegion
argument_list|(
name|clipped_poly_dev
operator|.
name|toPolygon
argument_list|()
argument_list|)
argument_list|,
name|state
operator|.
name|clipOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyHints
condition|)
name|updateRenderHints
argument_list|(
name|state
operator|.
name|renderHints
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyCompositionMode
condition|)
block|{
name|int
name|function
init|=
name|GXcopy
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|compositionMode
argument_list|()
operator|>=
name|QPainter
operator|::
name|RasterOp_SourceOrDestination
condition|)
block|{
switch|switch
condition|(
name|state
operator|.
name|compositionMode
argument_list|()
condition|)
block|{
case|case
name|QPainter
operator|::
name|RasterOp_SourceOrDestination
case|:
name|function
operator|=
name|GXor
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|RasterOp_SourceAndDestination
case|:
name|function
operator|=
name|GXand
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|RasterOp_SourceXorDestination
case|:
name|function
operator|=
name|GXxor
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|RasterOp_NotSourceAndNotDestination
case|:
name|function
operator|=
name|GXnor
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|RasterOp_NotSourceOrNotDestination
case|:
name|function
operator|=
name|GXnand
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|RasterOp_NotSourceXorDestination
case|:
name|function
operator|=
name|GXequiv
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|RasterOp_NotSource
case|:
name|function
operator|=
name|GXcopyInverted
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|RasterOp_SourceAndNotDestination
case|:
name|function
operator|=
name|GXandReverse
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|RasterOp_NotSourceAndDestination
case|:
name|function
operator|=
name|GXandInverted
expr_stmt|;
break|break;
default|default:
name|function
operator|=
name|GXcopy
expr_stmt|;
block|}
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
else|else
block|{
name|d
operator|->
name|composition_mode
operator|=
name|qpainterOpToXrender
argument_list|(
name|state
operator|.
name|compositionMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|XSetFunction
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|function
argument_list|)
expr_stmt|;
name|XSetFunction
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d
operator|->
name|gc_brush
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|decidePathFallback
argument_list|()
expr_stmt|;
name|d
operator|->
name|decideCoordAdjust
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateRenderHints
name|void
name|QX11PaintEngine
operator|::
name|updateRenderHints
parameter_list|(
name|QPainter
operator|::
name|RenderHints
name|hints
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|render_hints
operator|=
name|hints
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
if|if
condition|(
name|X11
operator|->
name|use_xrender
operator|&&
name|d
operator|->
name|picture
condition|)
block|{
name|XRenderPictureAttributes
name|attrs
decl_stmt|;
name|attrs
operator|.
name|poly_edge
operator|=
operator|(
name|hints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
condition|?
name|PolyEdgeSmooth
else|:
name|PolyEdgeSharp
expr_stmt|;
name|XRenderChangePicture
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|CPPolyEdge
argument_list|,
operator|&
name|attrs
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|updatePen
name|void
name|QX11PaintEngine
operator|::
name|updatePen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|cpen
operator|=
name|pen
expr_stmt|;
name|int
name|cp
init|=
name|CapButt
decl_stmt|;
name|int
name|jn
init|=
name|JoinMiter
decl_stmt|;
name|int
name|ps
init|=
name|pen
operator|.
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|opacity
operator|<
literal|1.0
condition|)
block|{
name|QColor
name|c
init|=
name|d
operator|->
name|cpen
operator|.
name|color
argument_list|()
decl_stmt|;
name|c
operator|.
name|setAlpha
argument_list|(
name|qRound
argument_list|(
name|c
operator|.
name|alpha
argument_list|()
operator|*
name|d
operator|->
name|opacity
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|cpen
operator|.
name|setColor
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|has_pen
operator|=
operator|(
name|ps
operator|!=
name|Qt
operator|::
name|NoPen
operator|)
expr_stmt|;
name|d
operator|->
name|has_alpha_pen
operator|=
operator|(
name|pen
operator|.
name|color
argument_list|()
operator|.
name|alpha
argument_list|()
operator|!=
literal|255
operator|)
expr_stmt|;
switch|switch
condition|(
name|pen
operator|.
name|capStyle
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|SquareCap
case|:
name|cp
operator|=
name|CapProjecting
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|RoundCap
case|:
name|cp
operator|=
name|CapRound
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|FlatCap
case|:
default|default:
name|cp
operator|=
name|CapButt
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|pen
operator|.
name|joinStyle
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|BevelJoin
case|:
name|jn
operator|=
name|JoinBevel
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|RoundJoin
case|:
name|jn
operator|=
name|JoinRound
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|MiterJoin
case|:
default|default:
name|jn
operator|=
name|JoinMiter
expr_stmt|;
break|break;
block|}
name|d
operator|->
name|adapted_pen_origin
operator|=
literal|false
expr_stmt|;
name|char
name|dashes
index|[
literal|10
index|]
decl_stmt|;
comment|// custom pen dashes
name|int
name|dash_len
init|=
literal|0
decl_stmt|;
comment|// length of dash list
name|int
name|xStyle
init|=
name|LineSolid
decl_stmt|;
comment|/*       We are emulating Windows here.  Windows treats cpen.width() == 1       (or 0) as a very special case.  The fudge variable unifies this       case with the general case.     */
name|qreal
name|pen_width
init|=
name|pen
operator|.
name|widthF
argument_list|()
decl_stmt|;
name|int
name|scale
init|=
name|qRound
argument_list|(
name|pen_width
operator|<
literal|1
condition|?
literal|1
else|:
name|pen_width
argument_list|)
decl_stmt|;
name|int
name|space
init|=
operator|(
name|pen_width
argument_list|<
literal|1
operator|&&
name|pen_width
argument_list|>
literal|0
condition|?
literal|1
else|:
operator|(
literal|2
operator|*
name|scale
operator|)
operator|)
decl_stmt|;
name|int
name|dot
init|=
literal|1
operator|*
name|scale
decl_stmt|;
name|int
name|dash
init|=
literal|4
operator|*
name|scale
decl_stmt|;
name|d
operator|->
name|has_custom_pen
operator|=
literal|false
expr_stmt|;
switch|switch
condition|(
name|ps
condition|)
block|{
case|case
name|Qt
operator|::
name|NoPen
case|:
case|case
name|Qt
operator|::
name|SolidLine
case|:
name|xStyle
operator|=
name|LineSolid
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DashLine
case|:
name|dashes
index|[
literal|0
index|]
operator|=
name|dash
expr_stmt|;
name|dashes
index|[
literal|1
index|]
operator|=
name|space
expr_stmt|;
name|dash_len
operator|=
literal|2
expr_stmt|;
name|xStyle
operator|=
name|LineOnOffDash
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DotLine
case|:
name|dashes
index|[
literal|0
index|]
operator|=
name|dot
expr_stmt|;
name|dashes
index|[
literal|1
index|]
operator|=
name|space
expr_stmt|;
name|dash_len
operator|=
literal|2
expr_stmt|;
name|xStyle
operator|=
name|LineOnOffDash
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DashDotLine
case|:
name|dashes
index|[
literal|0
index|]
operator|=
name|dash
expr_stmt|;
name|dashes
index|[
literal|1
index|]
operator|=
name|space
expr_stmt|;
name|dashes
index|[
literal|2
index|]
operator|=
name|dot
expr_stmt|;
name|dashes
index|[
literal|3
index|]
operator|=
name|space
expr_stmt|;
name|dash_len
operator|=
literal|4
expr_stmt|;
name|xStyle
operator|=
name|LineOnOffDash
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DashDotDotLine
case|:
name|dashes
index|[
literal|0
index|]
operator|=
name|dash
expr_stmt|;
name|dashes
index|[
literal|1
index|]
operator|=
name|space
expr_stmt|;
name|dashes
index|[
literal|2
index|]
operator|=
name|dot
expr_stmt|;
name|dashes
index|[
literal|3
index|]
operator|=
name|space
expr_stmt|;
name|dashes
index|[
literal|4
index|]
operator|=
name|dot
expr_stmt|;
name|dashes
index|[
literal|5
index|]
operator|=
name|space
expr_stmt|;
name|dash_len
operator|=
literal|6
expr_stmt|;
name|xStyle
operator|=
name|LineOnOffDash
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|CustomDashLine
case|:
name|d
operator|->
name|has_custom_pen
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|ulong
name|mask
init|=
name|GCForeground
operator||
name|GCBackground
operator||
name|GCGraphicsExposures
operator||
name|GCLineWidth
operator||
name|GCCapStyle
operator||
name|GCJoinStyle
operator||
name|GCLineStyle
decl_stmt|;
name|XGCValues
name|vals
decl_stmt|;
name|vals
operator|.
name|graphics_exposures
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pdev_depth
operator|==
literal|1
condition|)
block|{
name|vals
operator|.
name|foreground
operator|=
name|qGray
argument_list|(
name|pen
operator|.
name|color
argument_list|()
operator|.
name|rgb
argument_list|()
argument_list|)
operator|>
literal|127
condition|?
literal|0
else|:
literal|1
expr_stmt|;
name|vals
operator|.
name|background
operator|=
name|qGray
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
operator|>
literal|127
condition|?
literal|0
else|:
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Pixmap
operator|&&
name|d
operator|->
name|pdev_depth
operator|==
literal|32
operator|&&
name|X11
operator|->
name|use_xrender
condition|)
block|{
name|vals
operator|.
name|foreground
operator|=
name|pen
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
expr_stmt|;
name|vals
operator|.
name|background
operator|=
name|QColor
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
operator|.
name|rgba
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QColormap
name|cmap
init|=
name|QColormap
operator|::
name|instance
argument_list|(
name|d
operator|->
name|scrn
argument_list|)
decl_stmt|;
name|vals
operator|.
name|foreground
operator|=
name|cmap
operator|.
name|pixel
argument_list|(
name|pen
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|vals
operator|.
name|background
operator|=
name|cmap
operator|.
name|pixel
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|vals
operator|.
name|line_width
operator|=
name|qRound
argument_list|(
name|pen
operator|.
name|widthF
argument_list|()
argument_list|)
expr_stmt|;
name|vals
operator|.
name|cap_style
operator|=
name|cp
expr_stmt|;
name|vals
operator|.
name|join_style
operator|=
name|jn
expr_stmt|;
name|vals
operator|.
name|line_style
operator|=
name|xStyle
expr_stmt|;
name|XChangeGC
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|mask
argument_list|,
operator|&
name|vals
argument_list|)
expr_stmt|;
if|if
condition|(
name|dash_len
condition|)
block|{
comment|// make dash list
name|XSetDashes
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
literal|0
argument_list|,
name|dashes
argument_list|,
name|dash_len
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|has_clipping
condition|)
block|{
comment|// if clipping is set the paintevent clip region is merged with the clip region
name|QRegion
name|sysClip
init|=
name|systemClip
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sysClip
operator|.
name|isEmpty
argument_list|()
condition|)
name|x11SetClipRegion
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|sysClip
argument_list|)
expr_stmt|;
else|else
name|x11ClearClipRegion
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|picture
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateBrush
name|void
name|QX11PaintEngine
operator|::
name|updateBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|origin
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|cbrush
operator|=
name|brush
expr_stmt|;
name|d
operator|->
name|bg_origin
operator|=
name|origin
expr_stmt|;
name|d
operator|->
name|adapted_brush_origin
operator|=
literal|false
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
name|d
operator|->
name|current_brush
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|opacity
operator|<
literal|1.0
condition|)
block|{
name|QColor
name|c
init|=
name|d
operator|->
name|cbrush
operator|.
name|color
argument_list|()
decl_stmt|;
name|c
operator|.
name|setAlpha
argument_list|(
name|qRound
argument_list|(
name|c
operator|.
name|alpha
argument_list|()
operator|*
name|d
operator|->
name|opacity
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|cbrush
operator|.
name|setColor
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|int
name|s
init|=
name|FillSolid
decl_stmt|;
name|int
name|bs
init|=
name|d
operator|->
name|cbrush
operator|.
name|style
argument_list|()
decl_stmt|;
name|d
operator|->
name|has_brush
operator|=
operator|(
name|bs
operator|!=
name|Qt
operator|::
name|NoBrush
operator|)
expr_stmt|;
name|d
operator|->
name|has_pattern
operator|=
name|bs
operator|>=
name|Qt
operator|::
name|Dense1Pattern
operator|&&
name|bs
operator|<=
name|Qt
operator|::
name|DiagCrossPattern
expr_stmt|;
name|d
operator|->
name|has_texture
operator|=
name|bs
operator|==
name|Qt
operator|::
name|TexturePattern
expr_stmt|;
name|d
operator|->
name|has_alpha_brush
operator|=
name|brush
operator|.
name|color
argument_list|()
operator|.
name|alpha
argument_list|()
operator|!=
literal|255
expr_stmt|;
name|d
operator|->
name|has_alpha_texture
operator|=
name|d
operator|->
name|has_texture
operator|&&
name|d
operator|->
name|cbrush
operator|.
name|texture
argument_list|()
operator|.
name|hasAlphaChannel
argument_list|()
expr_stmt|;
name|ulong
name|mask
init|=
name|GCForeground
operator||
name|GCBackground
operator||
name|GCGraphicsExposures
operator||
name|GCLineStyle
operator||
name|GCCapStyle
operator||
name|GCJoinStyle
operator||
name|GCFillStyle
decl_stmt|;
name|XGCValues
name|vals
decl_stmt|;
name|vals
operator|.
name|graphics_exposures
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pdev_depth
operator|==
literal|1
condition|)
block|{
name|vals
operator|.
name|foreground
operator|=
name|qGray
argument_list|(
name|d
operator|->
name|cbrush
operator|.
name|color
argument_list|()
operator|.
name|rgb
argument_list|()
argument_list|)
operator|>
literal|127
condition|?
literal|0
else|:
literal|1
expr_stmt|;
name|vals
operator|.
name|background
operator|=
name|qGray
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
operator|>
literal|127
condition|?
literal|0
else|:
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|X11
operator|->
name|use_xrender
operator|&&
name|d
operator|->
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Pixmap
operator|&&
name|d
operator|->
name|pdev_depth
operator|==
literal|32
condition|)
block|{
name|vals
operator|.
name|foreground
operator|=
name|d
operator|->
name|cbrush
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
expr_stmt|;
name|vals
operator|.
name|background
operator|=
name|QColor
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
operator|.
name|rgba
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QColormap
name|cmap
init|=
name|QColormap
operator|::
name|instance
argument_list|(
name|d
operator|->
name|scrn
argument_list|)
decl_stmt|;
name|vals
operator|.
name|foreground
operator|=
name|cmap
operator|.
name|pixel
argument_list|(
name|d
operator|->
name|cbrush
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|vals
operator|.
name|background
operator|=
name|cmap
operator|.
name|pixel
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|X11
operator|->
name|use_xrender
operator|&&
name|d
operator|->
name|has_brush
operator|&&
operator|!
name|d
operator|->
name|has_pattern
operator|&&
operator|!
name|brush
operator|.
name|isOpaque
argument_list|()
condition|)
block|{
name|QPixmap
name|pattern
init|=
name|qt_patternForAlpha
argument_list|(
name|brush
operator|.
name|color
argument_list|()
operator|.
name|alpha
argument_list|()
argument_list|,
name|d
operator|->
name|scrn
argument_list|)
decl_stmt|;
name|mask
operator||=
name|GCStipple
expr_stmt|;
name|vals
operator|.
name|stipple
operator|=
name|pattern
operator|.
name|handle
argument_list|()
expr_stmt|;
name|s
operator|=
name|FillStippled
expr_stmt|;
name|d
operator|->
name|adapted_brush_origin
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|vals
operator|.
name|cap_style
operator|=
name|CapButt
expr_stmt|;
name|vals
operator|.
name|join_style
operator|=
name|JoinMiter
expr_stmt|;
name|vals
operator|.
name|line_style
operator|=
name|LineSolid
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_pattern
operator|||
name|d
operator|->
name|has_texture
condition|)
block|{
if|if
condition|(
name|bs
operator|==
name|Qt
operator|::
name|TexturePattern
condition|)
block|{
name|d
operator|->
name|brush_pm
operator|=
name|qt_toX11Pixmap
argument_list|(
name|d
operator|->
name|cbrush
operator|.
name|texture
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
if|if
condition|(
name|X11
operator|->
name|use_xrender
condition|)
block|{
name|XRenderPictureAttributes
name|attrs
decl_stmt|;
name|attrs
operator|.
name|repeat
operator|=
literal|true
expr_stmt|;
name|XRenderChangePicture
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|brush_pm
operator|.
name|x11PictureHandle
argument_list|()
argument_list|,
name|CPRepeat
argument_list|,
operator|&
name|attrs
argument_list|)
expr_stmt|;
name|QX11PixmapData
modifier|*
name|data
init|=
cast|static_cast
argument_list|<
name|QX11PixmapData
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|brush_pm
operator|.
name|data
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|mask_picture
condition|)
name|XRenderChangePicture
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|data
operator|->
name|mask_picture
argument_list|,
name|CPRepeat
argument_list|,
operator|&
name|attrs
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
else|else
block|{
name|d
operator|->
name|brush_pm
operator|=
name|qt_toX11Pixmap
argument_list|(
name|qt_pixmapForBrush
argument_list|(
name|bs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|brush_pm
operator|.
name|x11SetScreen
argument_list|(
name|d
operator|->
name|scrn
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|brush_pm
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
name|mask
operator||=
name|GCStipple
expr_stmt|;
name|vals
operator|.
name|stipple
operator|=
name|d
operator|->
name|brush_pm
operator|.
name|handle
argument_list|()
expr_stmt|;
name|s
operator|=
name|FillStippled
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
if|if
condition|(
name|X11
operator|->
name|use_xrender
condition|)
block|{
name|d
operator|->
name|bitmap_texture
operator|=
name|QPixmap
argument_list|(
name|d
operator|->
name|brush_pm
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|bitmap_texture
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|d
operator|->
name|bitmap_texture
operator|=
name|qt_toX11Pixmap
argument_list|(
name|d
operator|->
name|bitmap_texture
argument_list|)
expr_stmt|;
name|d
operator|->
name|bitmap_texture
operator|.
name|x11SetScreen
argument_list|(
name|d
operator|->
name|scrn
argument_list|)
expr_stmt|;
operator|::
name|Picture
name|src
init|=
name|X11
operator|->
name|getSolidFill
argument_list|(
name|d
operator|->
name|scrn
argument_list|,
name|d
operator|->
name|cbrush
operator|.
name|color
argument_list|()
argument_list|)
decl_stmt|;
name|XRenderComposite
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|PictOpSrc
argument_list|,
name|src
argument_list|,
name|d
operator|->
name|brush_pm
operator|.
name|x11PictureHandle
argument_list|()
argument_list|,
name|d
operator|->
name|bitmap_texture
operator|.
name|x11PictureHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|brush_pm
operator|.
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|brush_pm
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|brush_pm
operator|.
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|brush_pm
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|XRenderPictureAttributes
name|attrs
decl_stmt|;
name|attrs
operator|.
name|repeat
operator|=
literal|true
expr_stmt|;
name|XRenderChangePicture
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|bitmap_texture
operator|.
name|x11PictureHandle
argument_list|()
argument_list|,
name|CPRepeat
argument_list|,
operator|&
name|attrs
argument_list|)
expr_stmt|;
name|d
operator|->
name|current_brush
operator|=
name|d
operator|->
name|bitmap_texture
operator|.
name|x11PictureHandle
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
else|else
block|{
name|mask
operator||=
name|GCTile
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
name|d
operator|->
name|pdev_depth
operator|==
literal|32
operator|&&
name|d
operator|->
name|brush_pm
operator|.
name|depth
argument_list|()
operator|!=
literal|32
condition|)
block|{
name|d
operator|->
name|brush_pm
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QX11PixmapData
modifier|*
name|brushData
init|=
cast|static_cast
argument_list|<
name|QX11PixmapData
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|brush_pm
operator|.
name|data
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|brushData
operator|->
name|convertToARGB32
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|vals
operator|.
name|tile
operator|=
operator|(
name|d
operator|->
name|brush_pm
operator|.
name|depth
argument_list|()
operator|==
name|d
operator|->
name|pdev_depth
condition|?
name|d
operator|->
name|brush_pm
operator|.
name|handle
argument_list|()
else|:
cast|static_cast
argument_list|<
name|QX11PixmapData
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|brush_pm
operator|.
name|data
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|x11ConvertToDefaultDepth
argument_list|()
operator|)
expr_stmt|;
name|s
operator|=
name|FillTiled
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
name|d
operator|->
name|current_brush
operator|=
name|d
operator|->
name|cbrush
operator|.
name|texture
argument_list|()
operator|.
name|x11PictureHandle
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
name|mask
operator||=
name|GCTileStipXOrigin
operator||
name|GCTileStipYOrigin
expr_stmt|;
name|vals
operator|.
name|ts_x_origin
operator|=
name|qRound
argument_list|(
name|origin
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|vals
operator|.
name|ts_y_origin
operator|=
name|qRound
argument_list|(
name|origin
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XRENDER
argument_list|)
elseif|else
if|if
condition|(
name|d
operator|->
name|has_alpha_brush
condition|)
block|{
name|d
operator|->
name|current_brush
operator|=
name|X11
operator|->
name|getSolidFill
argument_list|(
name|d
operator|->
name|scrn
argument_list|,
name|d
operator|->
name|cbrush
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|vals
operator|.
name|fill_style
operator|=
name|s
expr_stmt|;
name|XChangeGC
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc_brush
argument_list|,
name|mask
argument_list|,
operator|&
name|vals
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|has_clipping
condition|)
block|{
name|QRegion
name|sysClip
init|=
name|systemClip
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sysClip
operator|.
name|isEmpty
argument_list|()
condition|)
name|x11SetClipRegion
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc_brush
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|sysClip
argument_list|)
expr_stmt|;
else|else
name|x11ClearClipRegion
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc_brush
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|picture
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawEllipse
name|void
name|QX11PaintEngine
operator|::
name|drawEllipse
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
name|QRect
name|aligned
init|=
name|rect
operator|.
name|toAlignedRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|aligned
operator|==
name|rect
condition|)
name|drawEllipse
argument_list|(
name|aligned
argument_list|)
expr_stmt|;
else|else
name|QPaintEngine
operator|::
name|drawEllipse
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawEllipse
name|void
name|QX11PaintEngine
operator|::
name|drawEllipse
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|drawRects
argument_list|(
operator|&
name|rect
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
name|QRect
name|devclip
argument_list|(
name|SHRT_MIN
argument_list|,
name|SHRT_MIN
argument_list|,
name|SHRT_MAX
operator|*
literal|2
operator|-
literal|1
argument_list|,
name|SHRT_MAX
operator|*
literal|2
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QRect
name|r
argument_list|(
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|txop
operator|<
name|QTransform
operator|::
name|TxRotate
condition|)
block|{
name|r
operator|=
name|d
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|txop
operator|==
name|QTransform
operator|::
name|TxRotate
operator|&&
name|rect
operator|.
name|width
argument_list|()
operator|==
name|rect
operator|.
name|height
argument_list|()
condition|)
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addEllipse
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|r
operator|=
name|d
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|path
argument_list|)
operator|.
name|boundingRect
argument_list|()
operator|.
name|toRect
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|has_alpha_brush
operator|||
name|d
operator|->
name|has_alpha_pen
operator|||
name|d
operator|->
name|has_custom_pen
operator|||
operator|(
name|d
operator|->
name|render_hints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
operator|||
name|d
operator|->
name|has_alpha_texture
operator|||
name|devclip
operator|.
name|intersected
argument_list|(
name|r
argument_list|)
operator|!=
name|r
operator|||
operator|(
name|d
operator|->
name|has_complex_xform
operator|&&
operator|!
operator|(
name|d
operator|->
name|has_non_scaling_xform
operator|&&
name|rect
operator|.
name|width
argument_list|()
operator|==
name|rect
operator|.
name|height
argument_list|()
operator|)
operator|)
condition|)
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addEllipse
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|x
init|=
name|r
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|r
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|w
init|=
name|r
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|r
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|<
literal|1
operator|||
name|h
operator|<
literal|1
condition|)
return|return;
if|if
condition|(
name|w
operator|==
literal|1
operator|&&
name|h
operator|==
literal|1
condition|)
block|{
name|XDrawPoint
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|has_pen
condition|?
name|d
operator|->
name|gc
else|:
name|d
operator|->
name|gc_brush
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|setupAdaptedOrigin
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_brush
condition|)
block|{
comment|// draw filled ellipse
name|XFillArc
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc_brush
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
literal|0
argument_list|,
literal|360
operator|*
literal|64
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|has_pen
condition|)
comment|// make smoother outline
name|XDrawArc
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc_brush
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
operator|-
literal|1
argument_list|,
name|h
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|360
operator|*
literal|64
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
comment|// draw outline
name|XDrawArc
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
literal|0
argument_list|,
literal|360
operator|*
literal|64
argument_list|)
expr_stmt|;
name|d
operator|->
name|resetAdaptedOrigin
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillPolygon_translated
name|void
name|QX11PaintEnginePrivate
operator|::
name|fillPolygon_translated
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|polygonPoints
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|QX11PaintEnginePrivate
operator|::
name|GCMode
name|gcMode
parameter_list|,
name|QPaintEngine
operator|::
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|QVarLengthArray
argument_list|<
name|QPointF
argument_list|>
name|translated_points
argument_list|(
name|pointCount
argument_list|)
decl_stmt|;
name|QPointF
name|offset
argument_list|(
name|matrix
operator|.
name|dx
argument_list|()
argument_list|,
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
decl_stmt|;
name|qreal
name|offs
init|=
name|adjust_coords
condition|?
name|aliasedCoordinateDelta
else|:
literal|0.0
decl_stmt|;
if|if
condition|(
operator|!
name|X11
operator|->
name|use_xrender
operator|||
operator|!
operator|(
name|render_hints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
condition|)
name|offset
operator|+=
name|QPointF
argument_list|(
name|aliasedCoordinateDelta
argument_list|,
name|aliasedCoordinateDelta
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
block|{
name|translated_points
index|[
name|i
index|]
operator|=
name|polygonPoints
index|[
name|i
index|]
operator|+
name|offset
expr_stmt|;
name|translated_points
index|[
name|i
index|]
operator|.
name|rx
argument_list|()
operator|=
name|qRound
argument_list|(
name|translated_points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
argument_list|)
operator|+
name|offs
expr_stmt|;
name|translated_points
index|[
name|i
index|]
operator|.
name|ry
argument_list|()
operator|=
name|qRound
argument_list|(
name|translated_points
index|[
name|i
index|]
operator|.
name|y
argument_list|()
argument_list|)
operator|+
name|offs
expr_stmt|;
block|}
name|fillPolygon_dev
argument_list|(
name|translated_points
operator|.
name|data
argument_list|()
argument_list|,
name|pointCount
argument_list|,
name|gcMode
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
end_ifndef
begin_function
DECL|function|qt_XRenderCompositeTrapezoids
specifier|static
name|void
name|qt_XRenderCompositeTrapezoids
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|int
name|op
parameter_list|,
name|Picture
name|src
parameter_list|,
name|Picture
name|dst
parameter_list|,
name|_Xconst
name|XRenderPictFormat
modifier|*
name|maskFormat
parameter_list|,
name|int
name|xSrc
parameter_list|,
name|int
name|ySrc
parameter_list|,
specifier|const
name|XTrapezoid
modifier|*
name|traps
parameter_list|,
name|int
name|size
parameter_list|)
block|{
specifier|const
name|int
name|MAX_TRAPS
init|=
literal|50000
decl_stmt|;
while|while
condition|(
name|size
condition|)
block|{
name|int
name|to_draw
init|=
name|size
decl_stmt|;
if|if
condition|(
name|to_draw
operator|>
name|MAX_TRAPS
condition|)
name|to_draw
operator|=
name|MAX_TRAPS
expr_stmt|;
name|XRenderCompositeTrapezoids
argument_list|(
name|dpy
argument_list|,
name|op
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|maskFormat
argument_list|,
name|xSrc
argument_list|,
name|ySrc
argument_list|,
name|traps
argument_list|,
name|to_draw
argument_list|)
expr_stmt|;
name|size
operator|-=
name|to_draw
expr_stmt|;
name|traps
operator|+=
name|to_draw
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|fillPolygon_dev
name|void
name|QX11PaintEnginePrivate
operator|::
name|fillPolygon_dev
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|polygonPoints
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|QX11PaintEnginePrivate
operator|::
name|GCMode
name|gcMode
parameter_list|,
name|QPaintEngine
operator|::
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
name|int
name|clippedCount
init|=
literal|0
decl_stmt|;
name|qt_float_point
modifier|*
name|clippedPoints
init|=
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
comment|//can change if we switch to pen if gcMode != BrushGC
name|bool
name|has_fill_texture
init|=
name|has_texture
decl_stmt|;
name|bool
name|has_fill_pattern
init|=
name|has_pattern
decl_stmt|;
operator|::
name|Picture
name|src
decl_stmt|;
endif|#
directive|endif
name|QBrush
name|fill
decl_stmt|;
name|GC
name|fill_gc
decl_stmt|;
if|if
condition|(
name|gcMode
operator|==
name|BrushGC
condition|)
block|{
name|fill
operator|=
name|cbrush
expr_stmt|;
name|fill_gc
operator|=
name|gc_brush
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
name|current_brush
condition|)
name|src
operator|=
name|current_brush
expr_stmt|;
else|else
name|src
operator|=
name|X11
operator|->
name|getSolidFill
argument_list|(
name|scrn
argument_list|,
name|fill
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|fill
operator|=
name|QBrush
argument_list|(
name|cpen
operator|.
name|brush
argument_list|()
argument_list|)
expr_stmt|;
name|fill_gc
operator|=
name|gc
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
comment|//we use the pens brush
name|has_fill_texture
operator|=
operator|(
name|fill
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|TexturePattern
operator|)
expr_stmt|;
name|has_fill_pattern
operator|=
operator|(
name|fill
operator|.
name|style
argument_list|()
operator|>=
name|Qt
operator|::
name|Dense1Pattern
operator|&&
name|fill
operator|.
name|style
argument_list|()
operator|<=
name|Qt
operator|::
name|DiagCrossPattern
operator|)
expr_stmt|;
if|if
condition|(
name|has_fill_texture
condition|)
name|src
operator|=
name|fill
operator|.
name|texture
argument_list|()
operator|.
name|x11PictureHandle
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|has_fill_pattern
condition|)
name|src
operator|=
name|getPatternFill
argument_list|(
name|scrn
argument_list|,
name|fill
argument_list|)
expr_stmt|;
else|else
name|src
operator|=
name|X11
operator|->
name|getSolidFill
argument_list|(
name|scrn
argument_list|,
name|fill
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|polygonClipper
operator|.
name|clipPolygon
argument_list|(
operator|(
name|qt_float_point
operator|*
operator|)
name|polygonPoints
argument_list|,
name|pointCount
argument_list|,
operator|&
name|clippedPoints
argument_list|,
operator|&
name|clippedCount
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|bool
name|solid_fill
init|=
name|fill
operator|.
name|color
argument_list|()
operator|.
name|alpha
argument_list|()
operator|==
literal|255
decl_stmt|;
if|if
condition|(
name|has_fill_texture
operator|&&
name|fill
operator|.
name|texture
argument_list|()
operator|.
name|depth
argument_list|()
operator|==
literal|1
operator|&&
name|solid_fill
condition|)
block|{
name|has_fill_texture
operator|=
literal|false
expr_stmt|;
name|has_fill_pattern
operator|=
literal|true
expr_stmt|;
block|}
name|bool
name|antialias
init|=
name|render_hints
operator|&
name|QPainter
operator|::
name|Antialiasing
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|use_xrender
operator|&&
name|picture
operator|&&
operator|!
name|has_fill_pattern
operator|&&
operator|(
name|clippedCount
operator|>
literal|0
operator|)
operator|&&
operator|(
name|fill
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
operator|)
operator|&&
operator|(
operator|(
name|has_fill_texture
operator|&&
name|fill
operator|.
name|texture
argument_list|()
operator|.
name|hasAlpha
argument_list|()
operator|)
operator|||
name|antialias
operator|||
operator|!
name|solid_fill
operator|||
name|has_alpha_pen
operator|!=
name|has_alpha_brush
operator|)
condition|)
block|{
if|if
condition|(
name|tessellator
operator|->
name|size
operator|>
literal|0
condition|)
block|{
name|XRenderPictureAttributes
name|attrs
decl_stmt|;
name|attrs
operator|.
name|poly_edge
operator|=
name|antialias
condition|?
name|PolyEdgeSmooth
else|:
name|PolyEdgeSharp
expr_stmt|;
name|XRenderChangePicture
argument_list|(
name|dpy
argument_list|,
name|picture
argument_list|,
name|CPPolyEdge
argument_list|,
operator|&
name|attrs
argument_list|)
expr_stmt|;
name|int
name|x_offset
init|=
name|int
argument_list|(
name|XFixedToDouble
argument_list|(
name|tessellator
operator|->
name|traps
index|[
literal|0
index|]
operator|.
name|left
operator|.
name|p1
operator|.
name|x
argument_list|)
operator|-
name|bg_origin
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|y_offset
init|=
name|int
argument_list|(
name|XFixedToDouble
argument_list|(
name|tessellator
operator|->
name|traps
index|[
literal|0
index|]
operator|.
name|left
operator|.
name|p1
operator|.
name|y
argument_list|)
operator|-
name|bg_origin
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|qt_XRenderCompositeTrapezoids
argument_list|(
name|dpy
argument_list|,
name|composition_mode
argument_list|,
name|src
argument_list|,
name|picture
argument_list|,
name|antialias
condition|?
name|XRenderFindStandardFormat
argument_list|(
name|dpy
argument_list|,
name|PictStandardA8
argument_list|)
else|:
name|XRenderFindStandardFormat
argument_list|(
name|dpy
argument_list|,
name|PictStandardA1
argument_list|)
argument_list|,
name|x_offset
argument_list|,
name|y_offset
argument_list|,
name|tessellator
operator|->
name|traps
argument_list|,
name|tessellator
operator|->
name|size
argument_list|)
expr_stmt|;
name|tessellator
operator|->
name|done
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
endif|#
directive|endif
if|if
condition|(
name|fill
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
if|if
condition|(
name|clippedCount
operator|>
literal|200000
condition|)
block|{
name|QPolygon
name|poly
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clippedCount
condition|;
operator|++
name|i
control|)
name|poly
operator|<<
name|QPoint
argument_list|(
name|qFloor
argument_list|(
name|clippedPoints
index|[
name|i
index|]
operator|.
name|x
argument_list|)
argument_list|,
name|qFloor
argument_list|(
name|clippedPoints
index|[
name|i
index|]
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|bounds
init|=
name|poly
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|aligned
init|=
name|bounds
operator|&
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|QSize
argument_list|(
name|pdev
operator|->
name|width
argument_list|()
argument_list|,
name|pdev
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QImage
name|img
argument_list|(
name|aligned
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|img
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|img
argument_list|)
decl_stmt|;
name|painter
operator|.
name|translate
argument_list|(
operator|-
name|aligned
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|aligned
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|fill
argument_list|)
expr_stmt|;
if|if
condition|(
name|gcMode
operator|==
name|BrushGC
condition|)
name|painter
operator|.
name|setBrushOrigin
argument_list|(
name|q
operator|->
name|painter
argument_list|()
operator|->
name|brushOrigin
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawPolygon
argument_list|(
name|poly
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
name|q
operator|->
name|drawImage
argument_list|(
name|aligned
argument_list|,
name|img
argument_list|,
name|img
operator|.
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|AutoColor
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clippedCount
operator|>
literal|0
condition|)
block|{
name|QVarLengthArray
argument_list|<
name|XPoint
argument_list|>
name|xpoints
argument_list|(
name|clippedCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clippedCount
condition|;
operator|++
name|i
control|)
block|{
name|xpoints
index|[
name|i
index|]
operator|.
name|x
operator|=
name|qFloor
argument_list|(
name|clippedPoints
index|[
name|i
index|]
operator|.
name|x
argument_list|)
expr_stmt|;
name|xpoints
index|[
name|i
index|]
operator|.
name|y
operator|=
name|qFloor
argument_list|(
name|clippedPoints
index|[
name|i
index|]
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mode
operator|==
name|QPaintEngine
operator|::
name|WindingMode
condition|)
name|XSetFillRule
argument_list|(
name|dpy
argument_list|,
name|fill_gc
argument_list|,
name|WindingRule
argument_list|)
expr_stmt|;
name|setupAdaptedOrigin
argument_list|(
name|QPoint
argument_list|(
name|xpoints
index|[
literal|0
index|]
operator|.
name|x
argument_list|,
name|xpoints
index|[
literal|0
index|]
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|XFillPolygon
argument_list|(
name|dpy
argument_list|,
name|hd
argument_list|,
name|fill_gc
argument_list|,
name|xpoints
operator|.
name|data
argument_list|()
argument_list|,
name|clippedCount
argument_list|,
name|mode
operator|==
name|QPaintEngine
operator|::
name|ConvexMode
condition|?
name|Convex
else|:
name|Complex
argument_list|,
name|CoordModeOrigin
argument_list|)
expr_stmt|;
name|resetAdaptedOrigin
argument_list|()
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|QPaintEngine
operator|::
name|WindingMode
condition|)
name|XSetFillRule
argument_list|(
name|dpy
argument_list|,
name|fill_gc
argument_list|,
name|EvenOddRule
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|strokePolygon_translated
name|void
name|QX11PaintEnginePrivate
operator|::
name|strokePolygon_translated
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|polygonPoints
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|bool
name|close
parameter_list|)
block|{
name|QVarLengthArray
argument_list|<
name|QPointF
argument_list|>
name|translated_points
argument_list|(
name|pointCount
argument_list|)
decl_stmt|;
name|QPointF
name|offset
argument_list|(
name|matrix
operator|.
name|dx
argument_list|()
argument_list|,
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
name|translated_points
index|[
name|i
index|]
operator|=
name|polygonPoints
index|[
name|i
index|]
operator|+
name|offset
expr_stmt|;
name|strokePolygon_dev
argument_list|(
name|translated_points
operator|.
name|data
argument_list|()
argument_list|,
name|pointCount
argument_list|,
name|close
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|strokePolygon_dev
name|void
name|QX11PaintEnginePrivate
operator|::
name|strokePolygon_dev
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|polygonPoints
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|bool
name|close
parameter_list|)
block|{
name|int
name|clippedCount
init|=
literal|0
decl_stmt|;
name|qt_float_point
modifier|*
name|clippedPoints
init|=
literal|0
decl_stmt|;
name|polygonClipper
operator|.
name|clipPolygon
argument_list|(
operator|(
name|qt_float_point
operator|*
operator|)
name|polygonPoints
argument_list|,
name|pointCount
argument_list|,
operator|&
name|clippedPoints
argument_list|,
operator|&
name|clippedCount
argument_list|,
name|close
argument_list|)
expr_stmt|;
if|if
condition|(
name|clippedCount
operator|>
literal|0
condition|)
block|{
name|QVarLengthArray
argument_list|<
name|XPoint
argument_list|>
name|xpoints
argument_list|(
name|clippedCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clippedCount
condition|;
operator|++
name|i
control|)
block|{
name|xpoints
index|[
name|i
index|]
operator|.
name|x
operator|=
name|qRound
argument_list|(
name|clippedPoints
index|[
name|i
index|]
operator|.
name|x
operator|+
name|aliasedCoordinateDelta
argument_list|)
expr_stmt|;
name|xpoints
index|[
name|i
index|]
operator|.
name|y
operator|=
name|qRound
argument_list|(
name|clippedPoints
index|[
name|i
index|]
operator|.
name|y
operator|+
name|aliasedCoordinateDelta
argument_list|)
expr_stmt|;
block|}
name|uint
name|numberPoints
init|=
name|qMin
argument_list|(
name|clippedCount
argument_list|,
name|xlibMaxLinePoints
argument_list|)
decl_stmt|;
name|XPoint
modifier|*
name|pts
init|=
name|xpoints
operator|.
name|data
argument_list|()
decl_stmt|;
name|XDrawLines
argument_list|(
name|dpy
argument_list|,
name|hd
argument_list|,
name|gc
argument_list|,
name|pts
argument_list|,
name|numberPoints
argument_list|,
name|CoordModeOrigin
argument_list|)
expr_stmt|;
name|pts
operator|+=
name|numberPoints
expr_stmt|;
name|clippedCount
operator|-=
name|numberPoints
expr_stmt|;
name|numberPoints
operator|=
name|qMin
argument_list|(
name|clippedCount
argument_list|,
name|xlibMaxLinePoints
operator|-
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|clippedCount
condition|)
block|{
name|XDrawLines
argument_list|(
name|dpy
argument_list|,
name|hd
argument_list|,
name|gc
argument_list|,
name|pts
operator|-
literal|1
argument_list|,
name|numberPoints
operator|+
literal|1
argument_list|,
name|CoordModeOrigin
argument_list|)
expr_stmt|;
name|pts
operator|+=
name|numberPoints
expr_stmt|;
name|clippedCount
operator|-=
name|numberPoints
expr_stmt|;
name|numberPoints
operator|=
name|qMin
argument_list|(
name|clippedCount
argument_list|,
name|xlibMaxLinePoints
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawPolygon
name|void
name|QX11PaintEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|polygonPoints
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|use_path_fallback
condition|)
block|{
name|QPainterPath
name|path
argument_list|(
name|polygonPoints
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
name|path
operator|.
name|lineTo
argument_list|(
name|polygonPoints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|PolylineMode
condition|)
block|{
name|QBrush
name|oldBrush
init|=
name|d
operator|->
name|cbrush
decl_stmt|;
name|d
operator|->
name|cbrush
operator|=
name|QBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|path
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|d
operator|->
name|cbrush
operator|=
name|oldBrush
expr_stmt|;
block|}
else|else
block|{
name|path
operator|.
name|setFillRule
argument_list|(
name|mode
operator|==
name|OddEvenMode
condition|?
name|Qt
operator|::
name|OddEvenFill
else|:
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
name|path
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|mode
operator|!=
name|PolylineMode
operator|&&
name|d
operator|->
name|has_brush
condition|)
name|d
operator|->
name|fillPolygon_translated
argument_list|(
name|polygonPoints
argument_list|,
name|pointCount
argument_list|,
name|QX11PaintEnginePrivate
operator|::
name|BrushGC
argument_list|,
name|mode
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
name|d
operator|->
name|strokePolygon_translated
argument_list|(
name|polygonPoints
argument_list|,
name|pointCount
argument_list|,
name|mode
operator|!=
name|PolylineMode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillPath
name|void
name|QX11PaintEnginePrivate
operator|::
name|fillPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|QX11PaintEnginePrivate
operator|::
name|GCMode
name|gc_mode
parameter_list|,
name|bool
name|transform
parameter_list|)
block|{
name|qreal
name|offs
init|=
name|adjust_coords
condition|?
name|aliasedCoordinateDelta
else|:
literal|0.0
decl_stmt|;
name|QPainterPath
name|clippedPath
decl_stmt|;
name|QPainterPath
name|clipPath
decl_stmt|;
name|clipPath
operator|.
name|addRect
argument_list|(
name|polygonClipper
operator|.
name|boundingRect
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|transform
condition|)
name|clippedPath
operator|=
operator|(
name|path
operator|*
name|matrix
operator|)
operator|.
name|intersected
argument_list|(
name|clipPath
argument_list|)
expr_stmt|;
else|else
name|clippedPath
operator|=
name|path
operator|.
name|intersected
argument_list|(
name|clipPath
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPolygonF
argument_list|>
name|polys
init|=
name|clippedPath
operator|.
name|toFillPolygons
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVarLengthArray
argument_list|<
name|QPointF
argument_list|>
name|translated_points
argument_list|(
name|polys
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|polys
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|translated_points
index|[
name|j
index|]
operator|=
name|polys
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|at
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|X11
operator|->
name|use_xrender
operator|||
operator|!
operator|(
name|render_hints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
condition|)
block|{
name|translated_points
index|[
name|j
index|]
operator|.
name|rx
argument_list|()
operator|=
name|qRound
argument_list|(
name|translated_points
index|[
name|j
index|]
operator|.
name|rx
argument_list|()
operator|+
name|aliasedCoordinateDelta
argument_list|)
operator|+
name|offs
expr_stmt|;
name|translated_points
index|[
name|j
index|]
operator|.
name|ry
argument_list|()
operator|=
name|qRound
argument_list|(
name|translated_points
index|[
name|j
index|]
operator|.
name|ry
argument_list|()
operator|+
name|aliasedCoordinateDelta
argument_list|)
operator|+
name|offs
expr_stmt|;
block|}
block|}
name|fillPolygon_dev
argument_list|(
name|translated_points
operator|.
name|data
argument_list|()
argument_list|,
name|polys
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|gc_mode
argument_list|,
name|path
operator|.
name|fillRule
argument_list|()
operator|==
name|Qt
operator|::
name|OddEvenFill
condition|?
name|QPaintEngine
operator|::
name|OddEvenMode
else|:
name|QPaintEngine
operator|::
name|WindingMode
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawPath
name|void
name|QX11PaintEngine
operator|::
name|drawPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|has_brush
condition|)
name|d
operator|->
name|fillPath
argument_list|(
name|path
argument_list|,
name|QX11PaintEnginePrivate
operator|::
name|BrushGC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_pen
operator|&&
operator|(
operator|(
name|X11
operator|->
name|use_xrender
operator|&&
operator|(
name|d
operator|->
name|has_alpha_pen
operator|||
operator|(
name|d
operator|->
name|render_hints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
operator|)
operator|)
operator|||
operator|(
operator|!
name|d
operator|->
name|cpen
operator|.
name|isCosmetic
argument_list|()
operator|&&
name|d
operator|->
name|txop
operator|>
name|QTransform
operator|::
name|TxTranslate
operator|&&
operator|!
name|d
operator|->
name|has_non_scaling_xform
operator|)
operator|||
operator|(
name|d
operator|->
name|cpen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|CustomDashLine
operator|)
operator|)
condition|)
block|{
name|QPainterPathStroker
name|stroker
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|cpen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|CustomDashLine
condition|)
block|{
name|stroker
operator|.
name|setDashPattern
argument_list|(
name|d
operator|->
name|cpen
operator|.
name|dashPattern
argument_list|()
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|setDashOffset
argument_list|(
name|d
operator|->
name|cpen
operator|.
name|dashOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stroker
operator|.
name|setDashPattern
argument_list|(
name|d
operator|->
name|cpen
operator|.
name|style
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stroker
operator|.
name|setCapStyle
argument_list|(
name|d
operator|->
name|cpen
operator|.
name|capStyle
argument_list|()
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|setJoinStyle
argument_list|(
name|d
operator|->
name|cpen
operator|.
name|joinStyle
argument_list|()
argument_list|)
expr_stmt|;
name|QPainterPath
name|stroke
decl_stmt|;
name|qreal
name|width
init|=
name|d
operator|->
name|cpen
operator|.
name|widthF
argument_list|()
decl_stmt|;
name|QPolygonF
name|poly
decl_stmt|;
name|QRectF
name|deviceRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|pdev
operator|->
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|pdev
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
comment|// necessary to get aliased alphablended primitives to be drawn correctly
if|if
condition|(
name|d
operator|->
name|cpen
operator|.
name|isCosmetic
argument_list|()
operator|||
name|d
operator|->
name|has_scaling_xform
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|cpen
operator|.
name|isCosmetic
argument_list|()
condition|)
name|stroker
operator|.
name|setWidth
argument_list|(
name|width
operator|==
literal|0
condition|?
literal|1
else|:
name|width
argument_list|)
expr_stmt|;
else|else
name|stroker
operator|.
name|setWidth
argument_list|(
name|width
operator|*
name|d
operator|->
name|xform_scale
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|d_ptr
operator|->
name|stroker
operator|.
name|setClipRect
argument_list|(
name|deviceRect
argument_list|)
expr_stmt|;
name|stroke
operator|=
name|stroker
operator|.
name|createStroke
argument_list|(
name|path
operator|*
name|d
operator|->
name|matrix
argument_list|)
expr_stmt|;
if|if
condition|(
name|stroke
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|stroke
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
name|d
operator|->
name|fillPath
argument_list|(
name|stroke
argument_list|,
name|QX11PaintEnginePrivate
operator|::
name|PenGC
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stroker
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|d_ptr
operator|->
name|stroker
operator|.
name|setClipRect
argument_list|(
name|d
operator|->
name|matrix
operator|.
name|inverted
argument_list|()
operator|.
name|mapRect
argument_list|(
name|deviceRect
argument_list|)
argument_list|)
expr_stmt|;
name|stroke
operator|=
name|stroker
operator|.
name|createStroke
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|stroke
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|stroke
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
name|d
operator|->
name|fillPath
argument_list|(
name|stroke
argument_list|,
name|QX11PaintEnginePrivate
operator|::
name|PenGC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
block|{
comment|// if we have a cosmetic pen - use XDrawLine() for speed
name|QList
argument_list|<
name|QPolygonF
argument_list|>
name|polys
init|=
name|path
operator|.
name|toSubpathPolygons
argument_list|(
name|d
operator|->
name|matrix
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|strokePolygon_dev
argument_list|(
name|polys
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
name|polys
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_x11_drawImage
name|Q_WIDGETS_EXPORT
name|void
name|qt_x11_drawImage
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|Drawable
name|hd
parameter_list|,
name|GC
name|gc
parameter_list|,
name|Display
modifier|*
name|dpy
parameter_list|,
name|Visual
modifier|*
name|visual
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|image
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|32
argument_list|)
expr_stmt|;
name|XImage
modifier|*
name|xi
decl_stmt|;
comment|// Note: this code assumes either RGB or BGR, 8 bpc server layouts
specifier|const
name|uint
name|red_mask
init|=
operator|(
name|uint
operator|)
name|visual
operator|->
name|red_mask
decl_stmt|;
name|bool
name|bgr_layout
init|=
operator|(
name|red_mask
operator|==
literal|0xff
operator|)
decl_stmt|;
specifier|const
name|int
name|w
init|=
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|h
init|=
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|QImage
name|im
decl_stmt|;
name|int
name|image_byte_order
init|=
name|ImageByteOrder
argument_list|(
name|X11
operator|->
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
operator|&&
operator|(
operator|(
name|image_byte_order
operator|==
name|LSBFirst
operator|)
operator|||
name|bgr_layout
operator|)
operator|)
operator|||
operator|(
name|image_byte_order
operator|==
name|MSBFirst
operator|&&
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|LittleEndian
operator|)
operator|||
operator|(
name|image_byte_order
operator|==
name|LSBFirst
operator|&&
name|bgr_layout
operator|)
condition|)
block|{
name|im
operator|=
name|image
operator|.
name|copy
argument_list|(
name|rect
argument_list|)
expr_stmt|;
specifier|const
name|int
name|iw
init|=
name|im
operator|.
name|bytesPerLine
argument_list|()
operator|/
literal|4
decl_stmt|;
name|uint
modifier|*
name|data
init|=
operator|(
name|uint
operator|*
operator|)
name|im
operator|.
name|bits
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|h
condition|;
name|i
operator|++
control|)
block|{
name|uint
modifier|*
name|p
init|=
name|data
decl_stmt|;
name|uint
modifier|*
name|end
init|=
name|p
operator|+
name|w
decl_stmt|;
if|if
condition|(
name|bgr_layout
operator|&&
name|image_byte_order
operator|==
name|MSBFirst
operator|&&
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|LittleEndian
condition|)
block|{
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
operator|*
name|p
operator|=
operator|(
operator|(
operator|*
name|p
operator|<<
literal|8
operator|)
operator|&
literal|0xffffff00
operator|)
operator||
operator|(
operator|(
operator|*
name|p
operator|>>
literal|24
operator|)
operator|&
literal|0x000000ff
operator|)
expr_stmt|;
name|p
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|image_byte_order
operator|==
name|LSBFirst
operator|&&
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
operator|)
operator|||
operator|(
name|image_byte_order
operator|==
name|MSBFirst
operator|&&
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|LittleEndian
operator|)
condition|)
block|{
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
operator|*
name|p
operator|=
operator|(
operator|(
operator|*
name|p
operator|<<
literal|24
operator|)
operator|&
literal|0xff000000
operator|)
operator||
operator|(
operator|(
operator|*
name|p
operator|<<
literal|8
operator|)
operator|&
literal|0x00ff0000
operator|)
operator||
operator|(
operator|(
operator|*
name|p
operator|>>
literal|8
operator|)
operator|&
literal|0x0000ff00
operator|)
operator||
operator|(
operator|(
operator|*
name|p
operator|>>
literal|24
operator|)
operator|&
literal|0x000000ff
operator|)
expr_stmt|;
name|p
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|image_byte_order
operator|==
name|MSBFirst
operator|&&
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
operator|)
operator|||
operator|(
name|image_byte_order
operator|==
name|LSBFirst
operator|&&
name|bgr_layout
operator|)
condition|)
block|{
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
operator|*
name|p
operator|=
operator|(
operator|(
operator|*
name|p
operator|<<
literal|16
operator|)
operator|&
literal|0x00ff0000
operator|)
operator||
operator|(
operator|(
operator|*
name|p
operator|>>
literal|16
operator|)
operator|&
literal|0x000000ff
operator|)
operator||
operator|(
operator|(
operator|*
name|p
operator|)
operator|&
literal|0xff00ff00
operator|)
expr_stmt|;
name|p
operator|++
expr_stmt|;
block|}
block|}
name|data
operator|+=
name|iw
expr_stmt|;
block|}
name|xi
operator|=
name|XCreateImage
argument_list|(
name|dpy
argument_list|,
name|visual
argument_list|,
name|depth
argument_list|,
name|ZPixmap
argument_list|,
literal|0
argument_list|,
operator|(
name|char
operator|*
operator|)
name|im
operator|.
name|bits
argument_list|()
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
literal|32
argument_list|,
name|im
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xi
operator|=
name|XCreateImage
argument_list|(
name|dpy
argument_list|,
name|visual
argument_list|,
name|depth
argument_list|,
name|ZPixmap
argument_list|,
literal|0
argument_list|,
operator|(
name|char
operator|*
operator|)
name|image
operator|.
name|scanLine
argument_list|(
name|rect
operator|.
name|y
argument_list|()
argument_list|)
operator|+
name|rect
operator|.
name|x
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
literal|32
argument_list|,
name|image
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|XPutImage
argument_list|(
name|dpy
argument_list|,
name|hd
argument_list|,
name|gc
argument_list|,
name|xi
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|xi
operator|->
name|data
operator|=
literal|0
expr_stmt|;
comment|// QImage owns these bits
name|XDestroyImage
argument_list|(
name|xi
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QX11PaintEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_RGB32
operator|&&
name|d
operator|->
name|pdev_depth
operator|>=
literal|24
operator|&&
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|32
operator|&&
name|r
operator|.
name|size
argument_list|()
operator|==
name|sr
operator|.
name|size
argument_list|()
condition|)
block|{
name|int
name|sx
init|=
name|qRound
argument_list|(
name|sr
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sy
init|=
name|qRound
argument_list|(
name|sr
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|qRound
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|qRound
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|qRound
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|qRound
argument_list|(
name|r
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|qt_x11_drawImage
argument_list|(
name|QRect
argument_list|(
name|sx
argument_list|,
name|sy
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|image
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|d
operator|->
name|dpy
argument_list|,
operator|(
name|Visual
operator|*
operator|)
name|d
operator|->
name|xinfo
operator|->
name|visual
argument_list|()
argument_list|,
name|d
operator|->
name|pdev_depth
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPaintEngine
operator|::
name|drawImage
argument_list|(
name|r
argument_list|,
name|image
argument_list|,
name|sr
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QX11PaintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|px
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|_sr
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
name|QRectF
name|sr
init|=
name|_sr
decl_stmt|;
name|int
name|x
init|=
name|qRound
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|qRound
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sx
init|=
name|qRound
argument_list|(
name|sr
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sy
init|=
name|qRound
argument_list|(
name|sr
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sw
init|=
name|qRound
argument_list|(
name|sr
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sh
init|=
name|qRound
argument_list|(
name|sr
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QPixmap
name|pixmap
init|=
name|qt_toX11Pixmap
argument_list|(
name|px
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|(
name|d
operator|->
name|xinfo
operator|&&
name|d
operator|->
name|xinfo
operator|->
name|screen
argument_list|()
operator|!=
name|pixmap
operator|.
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
operator|)
operator|||
operator|(
name|pixmap
operator|.
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
operator|!=
name|DefaultScreen
argument_list|(
name|X11
operator|->
name|display
argument_list|)
operator|)
condition|)
block|{
name|QPixmap
modifier|*
name|p
init|=
cast|const_cast
argument_list|<
name|QPixmap
operator|*
argument_list|>
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|p
operator|->
name|x11SetScreen
argument_list|(
name|d
operator|->
name|xinfo
condition|?
name|d
operator|->
name|xinfo
operator|->
name|screen
argument_list|()
else|:
name|DefaultScreen
argument_list|(
name|X11
operator|->
name|display
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QPixmap
operator|::
name|x11SetDefaultScreen
argument_list|(
name|pixmap
operator|.
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
operator|::
name|Picture
name|src_pict
init|=
cast|static_cast
argument_list|<
name|QX11PixmapData
operator|*
argument_list|>
argument_list|(
name|pixmap
operator|.
name|data
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|picture
decl_stmt|;
if|if
condition|(
name|src_pict
operator|&&
name|d
operator|->
name|picture
condition|)
block|{
specifier|const
name|int
name|pDepth
init|=
name|pixmap
operator|.
name|depth
argument_list|()
decl_stmt|;
if|if
condition|(
name|pDepth
operator|==
literal|1
operator|&&
operator|(
name|d
operator|->
name|has_alpha_pen
operator|)
condition|)
block|{
name|qt_render_bitmap
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|scrn
argument_list|,
name|src_pict
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|,
name|d
operator|->
name|cpen
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|pDepth
operator|!=
literal|1
operator|&&
operator|(
name|pDepth
operator|==
literal|32
operator|||
name|pDepth
operator|!=
name|d
operator|->
name|pdev_depth
operator|)
condition|)
block|{
name|XRenderComposite
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|composition_mode
argument_list|,
name|src_pict
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
endif|#
directive|endif
name|bool
name|mono_src
init|=
name|pixmap
operator|.
name|depth
argument_list|()
operator|==
literal|1
decl_stmt|;
name|bool
name|mono_dst
init|=
name|d
operator|->
name|pdev_depth
operator|==
literal|1
decl_stmt|;
name|bool
name|restore_clip
init|=
literal|false
decl_stmt|;
if|if
condition|(
cast|static_cast
argument_list|<
name|QX11PixmapData
operator|*
argument_list|>
argument_list|(
name|pixmap
operator|.
name|data
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|x11_mask
condition|)
block|{
comment|// pixmap has a mask
name|QBitmap
name|comb
argument_list|(
name|sw
argument_list|,
name|sh
argument_list|)
decl_stmt|;
name|GC
name|cgc
init|=
name|XCreateGC
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|comb
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XSetForeground
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XFillRectangle
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|comb
operator|.
name|handle
argument_list|()
argument_list|,
name|cgc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
expr_stmt|;
name|XSetBackground
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XSetForeground
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|crgn
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|num
decl_stmt|;
name|XRectangle
modifier|*
name|rects
init|=
operator|(
name|XRectangle
operator|*
operator|)
name|qt_getClipRects
argument_list|(
name|d
operator|->
name|crgn
argument_list|,
name|num
argument_list|)
decl_stmt|;
name|XSetClipRectangles
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|,
operator|-
name|x
argument_list|,
operator|-
name|y
argument_list|,
name|rects
argument_list|,
name|num
argument_list|,
name|Unsorted
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|has_clipping
condition|)
block|{
name|XSetClipRectangles
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Unsorted
argument_list|)
expr_stmt|;
block|}
name|XSetFillStyle
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|,
name|FillOpaqueStippled
argument_list|)
expr_stmt|;
name|XSetTSOrigin
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|,
operator|-
name|sx
argument_list|,
operator|-
name|sy
argument_list|)
expr_stmt|;
name|XSetStipple
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|,
cast|static_cast
argument_list|<
name|QX11PixmapData
operator|*
argument_list|>
argument_list|(
name|pixmap
operator|.
name|data
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|x11_mask
argument_list|)
expr_stmt|;
name|XFillRectangle
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|comb
operator|.
name|handle
argument_list|()
argument_list|,
name|cgc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
expr_stmt|;
name|XFreeGC
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|)
expr_stmt|;
name|XSetClipOrigin
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|XSetClipMask
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|comb
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|restore_clip
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|mono_src
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|crgn
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Pixmap
name|comb
init|=
name|XCreatePixmap
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|GC
name|cgc
init|=
name|XCreateGC
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|comb
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XSetForeground
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XFillRectangle
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|comb
argument_list|,
name|cgc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
expr_stmt|;
name|int
name|num
decl_stmt|;
name|XRectangle
modifier|*
name|rects
init|=
operator|(
name|XRectangle
operator|*
operator|)
name|qt_getClipRects
argument_list|(
name|d
operator|->
name|crgn
argument_list|,
name|num
argument_list|)
decl_stmt|;
name|XSetClipRectangles
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|,
operator|-
name|x
argument_list|,
operator|-
name|y
argument_list|,
name|rects
argument_list|,
name|num
argument_list|,
name|Unsorted
argument_list|)
expr_stmt|;
name|XCopyArea
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|pixmap
operator|.
name|handle
argument_list|()
argument_list|,
name|comb
argument_list|,
name|cgc
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XFreeGC
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|)
expr_stmt|;
name|XSetClipMask
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|comb
argument_list|)
expr_stmt|;
name|XSetClipOrigin
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|XFreePixmap
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|comb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XSetClipMask
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|pixmap
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|XSetClipOrigin
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|x
operator|-
name|sx
argument_list|,
name|y
operator|-
name|sy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mono_dst
condition|)
block|{
name|XSetForeground
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|qGray
argument_list|(
name|d
operator|->
name|cpen
operator|.
name|color
argument_list|()
operator|.
name|rgb
argument_list|()
argument_list|)
operator|>
literal|127
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QColormap
name|cmap
init|=
name|QColormap
operator|::
name|instance
argument_list|(
name|d
operator|->
name|scrn
argument_list|)
decl_stmt|;
name|XSetForeground
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|cmap
operator|.
name|pixel
argument_list|(
name|d
operator|->
name|cpen
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XFillRectangle
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
expr_stmt|;
name|restore_clip
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mono_dst
operator|&&
operator|!
name|mono_src
condition|)
block|{
name|QBitmap
name|bitmap
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|XCopyArea
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|bitmap
operator|.
name|handle
argument_list|()
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XCopyArea
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|pixmap
operator|.
name|handle
argument_list|()
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Pixmap
condition|)
block|{
specifier|const
name|QPixmap
modifier|*
name|px
init|=
cast|static_cast
argument_list|<
specifier|const
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|pdev
argument_list|)
decl_stmt|;
name|Pixmap
name|src_mask
init|=
cast|static_cast
argument_list|<
name|QX11PixmapData
operator|*
argument_list|>
argument_list|(
name|pixmap
operator|.
name|data
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|x11_mask
decl_stmt|;
name|Pixmap
name|dst_mask
init|=
cast|static_cast
argument_list|<
name|QX11PixmapData
operator|*
argument_list|>
argument_list|(
name|px
operator|->
name|data
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|x11_mask
decl_stmt|;
if|if
condition|(
name|dst_mask
condition|)
block|{
name|GC
name|cgc
init|=
name|XCreateGC
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|dst_mask
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|src_mask
condition|)
block|{
comment|// copy src mask into dst mask
name|XCopyArea
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|src_mask
argument_list|,
name|dst_mask
argument_list|,
name|cgc
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no src mask, but make sure the area copied is opaque in dest
name|XSetBackground
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XSetForeground
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|XFillRectangle
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|dst_mask
argument_list|,
name|cgc
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
expr_stmt|;
block|}
name|XFreeGC
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|cgc
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|restore_clip
condition|)
block|{
name|XSetClipOrigin
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|num
decl_stmt|;
name|XRectangle
modifier|*
name|rects
init|=
operator|(
name|XRectangle
operator|*
operator|)
name|qt_getClipRects
argument_list|(
name|d
operator|->
name|crgn
argument_list|,
name|num
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|==
literal|0
condition|)
name|XSetClipMask
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|XNone
argument_list|)
expr_stmt|;
else|else
name|XSetClipRectangles
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rects
argument_list|,
name|num
argument_list|,
name|Unsorted
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateMatrix
name|void
name|QX11PaintEngine
operator|::
name|updateMatrix
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|mtx
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|txop
operator|=
name|mtx
operator|.
name|type
argument_list|()
expr_stmt|;
name|d
operator|->
name|matrix
operator|=
name|mtx
expr_stmt|;
name|d
operator|->
name|has_complex_xform
operator|=
operator|(
name|d
operator|->
name|txop
operator|>
name|QTransform
operator|::
name|TxTranslate
operator|)
expr_stmt|;
specifier|extern
name|bool
name|qt_scaleForTransform
argument_list|(
specifier|const
name|QTransform
operator|&
name|transform
argument_list|,
name|qreal
operator|*
name|scale
argument_list|)
decl_stmt|;
name|bool
name|scaling
init|=
name|qt_scaleForTransform
argument_list|(
name|d
operator|->
name|matrix
argument_list|,
operator|&
name|d
operator|->
name|xform_scale
argument_list|)
decl_stmt|;
name|d
operator|->
name|has_scaling_xform
operator|=
name|scaling
operator|&&
name|d
operator|->
name|xform_scale
operator|!=
literal|1.0
expr_stmt|;
name|d
operator|->
name|has_non_scaling_xform
operator|=
name|scaling
operator|&&
name|d
operator|->
name|xform_scale
operator|==
literal|1.0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*    NB! the clip region is expected to be in dev coordinates */
end_comment
begin_function
DECL|function|updateClipRegion_dev
name|void
name|QX11PaintEngine
operator|::
name|updateClipRegion_dev
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|clipRegion
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
name|QRegion
name|sysClip
init|=
name|systemClip
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|NoClip
condition|)
block|{
name|d
operator|->
name|has_clipping
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|crgn
operator|=
name|sysClip
expr_stmt|;
if|if
condition|(
operator|!
name|sysClip
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|x11SetClipRegion
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|d
operator|->
name|gc_brush
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|sysClip
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|x11ClearClipRegion
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|d
operator|->
name|gc_brush
argument_list|,
name|d
operator|->
name|picture
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|Qt
operator|::
name|IntersectClip
case|:
if|if
condition|(
name|d
operator|->
name|has_clipping
condition|)
block|{
name|d
operator|->
name|crgn
operator|&=
name|clipRegion
expr_stmt|;
break|break;
block|}
comment|// fall through
case|case
name|Qt
operator|::
name|ReplaceClip
case|:
if|if
condition|(
operator|!
name|sysClip
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|crgn
operator|=
name|clipRegion
operator|.
name|intersected
argument_list|(
name|sysClip
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|crgn
operator|=
name|clipRegion
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|d
operator|->
name|has_clipping
operator|=
literal|true
expr_stmt|;
name|x11SetClipRegion
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|d
operator|->
name|gc_brush
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|d
operator|->
name|crgn
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateFont
name|void
name|QX11PaintEngine
operator|::
name|updateFont
parameter_list|(
specifier|const
name|QFont
modifier|&
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|handle
name|Qt
operator|::
name|HANDLE
name|QX11PaintEngine
operator|::
name|handle
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QX11PaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|hd
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|hd
return|;
block|}
end_function
begin_function_decl
specifier|extern
name|void
name|qt_draw_tile
parameter_list|(
name|QPaintEngine
modifier|*
parameter_list|,
name|qreal
parameter_list|,
name|qreal
parameter_list|,
name|qreal
parameter_list|,
name|qreal
parameter_list|,
specifier|const
name|QPixmap
modifier|&
parameter_list|,
name|qreal
parameter_list|,
name|qreal
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|drawTiledPixmap
name|void
name|QX11PaintEngine
operator|::
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|)
block|{
name|int
name|x
init|=
name|qRound
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|qRound
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|qRound
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|qRound
argument_list|(
name|r
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sx
init|=
name|qRound
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sy
init|=
name|qRound
argument_list|(
name|p
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|mono_src
init|=
name|pixmap
operator|.
name|depth
argument_list|()
operator|==
literal|1
decl_stmt|;
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|d
operator|->
name|xinfo
operator|&&
name|d
operator|->
name|xinfo
operator|->
name|screen
argument_list|()
operator|!=
name|pixmap
operator|.
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
operator|)
operator|||
operator|(
name|pixmap
operator|.
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
operator|!=
name|DefaultScreen
argument_list|(
name|X11
operator|->
name|display
argument_list|)
operator|)
condition|)
block|{
name|QPixmap
modifier|*
name|p
init|=
cast|const_cast
argument_list|<
name|QPixmap
operator|*
argument_list|>
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|p
operator|->
name|x11SetScreen
argument_list|(
name|d
operator|->
name|xinfo
condition|?
name|d
operator|->
name|xinfo
operator|->
name|screen
argument_list|()
else|:
name|DefaultScreen
argument_list|(
name|X11
operator|->
name|display
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QPixmap
operator|::
name|x11SetDefaultScreen
argument_list|(
name|pixmap
operator|.
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
name|X11
operator|->
name|use_xrender
operator|&&
name|d
operator|->
name|picture
operator|&&
name|pixmap
operator|.
name|x11PictureHandle
argument_list|()
condition|)
block|{
if|#
directive|if
literal|0
comment|// ### Qt 5: enable this
block|XRenderPictureAttributes attrs;         attrs.repeat = true;         XRenderChangePicture(d->dpy, pixmap.x11PictureHandle(), CPRepeat,&attrs);          if (mono_src) {             qt_render_bitmap(d->dpy, d->scrn, pixmap.x11PictureHandle(), d->picture,                              sx, sy, x, y, w, h, d->cpen);         } else {             XRenderComposite(d->dpy, d->composition_mode,                              pixmap.x11PictureHandle(), XNone, d->picture,                              sx, sy, 0, 0, x, y, w, h);         }
else|#
directive|else
specifier|const
name|int
name|numTiles
init|=
operator|(
name|w
operator|/
name|pixmap
operator|.
name|width
argument_list|()
operator|)
operator|*
operator|(
name|h
operator|/
name|pixmap
operator|.
name|height
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|numTiles
operator|<
literal|100
condition|)
block|{
comment|// this is essentially qt_draw_tile(), inlined for
comment|// the XRenderComposite call
name|int
name|yPos
decl_stmt|,
name|xPos
decl_stmt|,
name|drawH
decl_stmt|,
name|drawW
decl_stmt|,
name|yOff
decl_stmt|,
name|xOff
decl_stmt|;
name|yPos
operator|=
name|y
expr_stmt|;
name|yOff
operator|=
name|sy
expr_stmt|;
while|while
condition|(
name|yPos
operator|<
name|y
operator|+
name|h
condition|)
block|{
name|drawH
operator|=
name|pixmap
operator|.
name|height
argument_list|()
operator|-
name|yOff
expr_stmt|;
comment|// Cropping first row
if|if
condition|(
name|yPos
operator|+
name|drawH
operator|>
name|y
operator|+
name|h
condition|)
comment|// Cropping last row
name|drawH
operator|=
name|y
operator|+
name|h
operator|-
name|yPos
expr_stmt|;
name|xPos
operator|=
name|x
expr_stmt|;
name|xOff
operator|=
name|sx
expr_stmt|;
while|while
condition|(
name|xPos
operator|<
name|x
operator|+
name|w
condition|)
block|{
name|drawW
operator|=
name|pixmap
operator|.
name|width
argument_list|()
operator|-
name|xOff
expr_stmt|;
comment|// Cropping first column
if|if
condition|(
name|xPos
operator|+
name|drawW
operator|>
name|x
operator|+
name|w
condition|)
comment|// Cropping last column
name|drawW
operator|=
name|x
operator|+
name|w
operator|-
name|xPos
expr_stmt|;
if|if
condition|(
name|mono_src
condition|)
block|{
name|qt_render_bitmap
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|scrn
argument_list|,
name|pixmap
operator|.
name|x11PictureHandle
argument_list|()
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|xOff
argument_list|,
name|yOff
argument_list|,
name|xPos
argument_list|,
name|yPos
argument_list|,
name|drawW
argument_list|,
name|drawH
argument_list|,
name|d
operator|->
name|cpen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XRenderComposite
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|composition_mode
argument_list|,
name|pixmap
operator|.
name|x11PictureHandle
argument_list|()
argument_list|,
name|XNone
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|xOff
argument_list|,
name|yOff
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|xPos
argument_list|,
name|yPos
argument_list|,
name|drawW
argument_list|,
name|drawH
argument_list|)
expr_stmt|;
block|}
name|xPos
operator|+=
name|drawW
expr_stmt|;
name|xOff
operator|=
literal|0
expr_stmt|;
block|}
name|yPos
operator|+=
name|drawH
expr_stmt|;
name|yOff
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|w
operator|=
name|qMin
argument_list|(
name|w
argument_list|,
name|d
operator|->
name|pdev
operator|->
name|width
argument_list|()
operator|-
name|x
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMin
argument_list|(
name|h
argument_list|,
name|d
operator|->
name|pdev
operator|->
name|height
argument_list|()
operator|-
name|y
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
condition|)
return|return;
specifier|const
name|int
name|pw
init|=
name|w
operator|+
name|sx
decl_stmt|;
specifier|const
name|int
name|ph
init|=
name|h
operator|+
name|sy
decl_stmt|;
name|QPixmap
name|pm
argument_list|(
name|pw
argument_list|,
name|ph
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|hasAlpha
argument_list|()
operator|||
name|mono_src
condition|)
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
specifier|const
name|int
name|mode
init|=
name|pixmap
operator|.
name|hasAlpha
argument_list|()
condition|?
name|PictOpOver
else|:
name|PictOpSrc
decl_stmt|;
specifier|const
operator|::
name|Picture
name|pmPicture
init|=
name|pm
operator|.
name|x11PictureHandle
argument_list|()
decl_stmt|;
comment|// first tile
name|XRenderComposite
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|mode
argument_list|,
name|pixmap
operator|.
name|x11PictureHandle
argument_list|()
argument_list|,
name|XNone
argument_list|,
name|pmPicture
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|qMin
argument_list|(
name|pw
argument_list|,
name|pixmap
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|ph
argument_list|,
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// first row of tiles
name|int
name|xPos
init|=
name|pixmap
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|sh
init|=
name|qMin
argument_list|(
name|ph
argument_list|,
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|xPos
operator|<
name|pw
condition|)
block|{
specifier|const
name|int
name|sw
init|=
name|qMin
argument_list|(
name|xPos
argument_list|,
name|pw
operator|-
name|xPos
argument_list|)
decl_stmt|;
name|XRenderComposite
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|mode
argument_list|,
name|pmPicture
argument_list|,
name|XNone
argument_list|,
name|pmPicture
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|xPos
argument_list|,
literal|0
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
expr_stmt|;
name|xPos
operator|*=
literal|2
expr_stmt|;
block|}
comment|// remaining rows
name|int
name|yPos
init|=
name|pixmap
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|int
name|sw
init|=
name|pw
decl_stmt|;
while|while
condition|(
name|yPos
operator|<
name|ph
condition|)
block|{
specifier|const
name|int
name|sh
init|=
name|qMin
argument_list|(
name|yPos
argument_list|,
name|ph
operator|-
name|yPos
argument_list|)
decl_stmt|;
name|XRenderComposite
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|mode
argument_list|,
name|pmPicture
argument_list|,
name|XNone
argument_list|,
name|pmPicture
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|yPos
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
expr_stmt|;
name|yPos
operator|*=
literal|2
expr_stmt|;
block|}
comment|// composite
if|if
condition|(
name|mono_src
condition|)
name|qt_render_bitmap
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|scrn
argument_list|,
name|pmPicture
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|d
operator|->
name|cpen
argument_list|)
expr_stmt|;
else|else
name|XRenderComposite
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|composition_mode
argument_list|,
name|pmPicture
argument_list|,
name|XNone
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
elseif|else
endif|#
directive|endif
comment|// !QT_NO_XRENDER
if|if
condition|(
name|pixmap
operator|.
name|depth
argument_list|()
operator|>
literal|1
operator|&&
operator|!
cast|static_cast
argument_list|<
name|QX11PixmapData
operator|*
argument_list|>
argument_list|(
name|pixmap
operator|.
name|data
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|x11_mask
condition|)
block|{
name|XSetTile
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|pixmap
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|XSetFillStyle
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|FillTiled
argument_list|)
expr_stmt|;
name|XSetTSOrigin
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|x
operator|-
name|sx
argument_list|,
name|y
operator|-
name|sy
argument_list|)
expr_stmt|;
name|XFillRectangle
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|XSetTSOrigin
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XSetFillStyle
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|FillSolid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qt_draw_tile
argument_list|(
name|this
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|pixmap
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawTextItem
name|void
name|QX11PaintEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|textItem
parameter_list|)
block|{
specifier|const
name|QTextItemInt
modifier|&
name|ti
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|textItem
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ti
operator|.
name|fontEngine
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QFontEngine
operator|::
name|TestFontEngine
case|:
case|case
name|QFontEngine
operator|::
name|Box
case|:
name|d_func
argument_list|()
operator|->
name|drawBoxTextItem
argument_list|(
name|p
argument_list|,
name|ti
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFontEngine
operator|::
name|XLFD
case|:
name|drawXLFD
argument_list|(
name|p
argument_list|,
name|ti
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_FONTCONFIG
case|case
name|QFontEngine
operator|::
name|Freetype
case|:
name|drawFreetype
argument_list|(
name|p
argument_list|,
name|ti
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawXLFD
name|void
name|QX11PaintEngine
operator|::
name|drawXLFD
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItemInt
modifier|&
name|ti
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|txop
operator|>
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
comment|// XServer or font don't support server side transformations, need to do it by hand
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|ti
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
condition|)
return|return;
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
decl_stmt|;
name|QTransform
name|matrix
init|=
name|d
operator|->
name|matrix
decl_stmt|;
name|matrix
operator|.
name|translate
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|ti
operator|.
name|fontEngine
operator|->
name|getGlyphPositions
argument_list|(
name|ti
operator|.
name|glyphs
argument_list|,
name|matrix
argument_list|,
name|ti
operator|.
name|flags
argument_list|,
name|glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyphs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|QFontEngineXLFD
modifier|*
name|xlfd
init|=
cast|static_cast
argument_list|<
name|QFontEngineXLFD
operator|*
argument_list|>
argument_list|(
name|ti
operator|.
name|fontEngine
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|HANDLE
name|font_id
init|=
name|xlfd
operator|->
name|fontStruct
argument_list|()
operator|->
name|fid
decl_stmt|;
name|XSetFont
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|font_id
argument_list|)
expr_stmt|;
specifier|const
name|QFixed
name|offs
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|aliasedCoordinateDelta
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|xp
init|=
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|x
operator|+
name|offs
argument_list|)
decl_stmt|;
name|int
name|yp
init|=
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|y
operator|+
name|offs
argument_list|)
decl_stmt|;
if|if
condition|(
name|xp
argument_list|<
name|SHRT_MAX
operator|&&
name|xp
argument_list|>
name|SHRT_MIN
operator|&&
name|yp
operator|>
name|SHRT_MIN
operator|&&
name|yp
operator|<
name|SHRT_MAX
condition|)
block|{
name|XChar2b
name|ch
decl_stmt|;
name|ch
operator|.
name|byte1
operator|=
name|glyphs
index|[
name|i
index|]
operator|>>
literal|8
expr_stmt|;
name|ch
operator|.
name|byte2
operator|=
name|glyphs
index|[
name|i
index|]
operator|&
literal|0xff
expr_stmt|;
name|XDrawString16
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|xp
argument_list|,
name|yp
argument_list|,
operator|&
name|ch
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FONTCONFIG
end_ifndef
begin_function
DECL|function|path_for_glyphs
specifier|static
name|QPainterPath
name|path_for_glyphs
parameter_list|(
specifier|const
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
modifier|&
name|glyphs
parameter_list|,
specifier|const
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
modifier|&
name|positions
parameter_list|,
specifier|const
name|QFontEngineFT
modifier|*
name|ft
parameter_list|)
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
name|ft
operator|->
name|lockFace
argument_list|()
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|glyphs
operator|.
name|size
argument_list|()
condition|)
block|{
name|QFontEngineFT
operator|::
name|Glyph
modifier|*
name|glyph
init|=
name|ft
operator|->
name|loadGlyph
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|,
name|QFontEngineFT
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
comment|// #### fix case where we don't get a glyph
if|if
condition|(
operator|!
name|glyph
condition|)
break|break;
name|Q_ASSERT
argument_list|(
name|glyph
operator|->
name|format
operator|==
name|QFontEngineFT
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
name|int
name|h
init|=
name|glyph
operator|->
name|height
decl_stmt|;
name|int
name|xp
init|=
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|x
argument_list|)
decl_stmt|;
name|int
name|yp
init|=
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|y
argument_list|)
decl_stmt|;
name|xp
operator|+=
name|glyph
operator|->
name|x
expr_stmt|;
name|yp
operator|+=
operator|-
name|glyph
operator|->
name|y
operator|+
name|glyph
operator|->
name|height
expr_stmt|;
name|int
name|pitch
init|=
operator|(
operator|(
name|glyph
operator|->
name|width
operator|+
literal|31
operator|)
operator|&
operator|~
literal|31
operator|)
operator|>>
literal|3
decl_stmt|;
name|uchar
modifier|*
name|src
init|=
name|glyph
operator|->
name|data
decl_stmt|;
while|while
condition|(
name|h
operator|--
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|glyph
operator|->
name|width
condition|;
operator|++
name|x
control|)
block|{
name|bool
name|set
init|=
name|src
index|[
name|x
operator|>>
literal|3
index|]
operator|&
operator|(
literal|0x80
operator|>>
operator|(
name|x
operator|&
literal|7
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|set
condition|)
block|{
name|QRect
name|r
argument_list|(
name|xp
operator|+
name|x
argument_list|,
name|yp
operator|-
name|h
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|x
operator|<
name|glyph
operator|->
name|width
operator|-
literal|1
operator|&&
name|src
index|[
operator|(
name|x
operator|+
literal|1
operator|)
operator|>>
literal|3
index|]
operator|&
operator|(
literal|0x80
operator|>>
operator|(
operator|(
name|x
operator|+
literal|1
operator|)
operator|&
literal|7
operator|)
operator|)
condition|)
block|{
operator|++
name|x
expr_stmt|;
name|r
operator|.
name|setRight
argument_list|(
name|r
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|path
operator|.
name|addRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
block|}
name|src
operator|+=
name|pitch
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
name|ft
operator|->
name|unlockFace
argument_list|()
expr_stmt|;
return|return
name|path
return|;
block|}
end_function
begin_function
DECL|function|drawFreetype
name|void
name|QX11PaintEngine
operator|::
name|drawFreetype
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItemInt
modifier|&
name|ti
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QX11PaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
condition|)
return|return;
name|QFontEngineX11FT
modifier|*
name|ft
init|=
cast|static_cast
argument_list|<
name|QFontEngineX11FT
operator|*
argument_list|>
argument_list|(
name|ti
operator|.
name|fontEngine
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|cpen
operator|.
name|isSolid
argument_list|()
condition|)
block|{
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|ti
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|bool
name|xrenderPath
init|=
operator|(
name|X11
operator|->
name|use_xrender
operator|&&
operator|!
operator|(
name|d
operator|->
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Pixmap
operator|&&
cast|static_cast
argument_list|<
specifier|const
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|pdev
argument_list|)
operator|->
name|data
operator|->
name|pixelType
argument_list|()
operator|==
name|QPixmapData
operator|::
name|BitmapType
operator|)
operator|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
decl_stmt|;
name|QTransform
name|matrix
decl_stmt|;
if|if
condition|(
name|xrenderPath
condition|)
name|matrix
operator|=
name|d
operator|->
name|matrix
expr_stmt|;
name|matrix
operator|.
name|translate
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|ft
operator|->
name|getGlyphPositions
argument_list|(
name|ti
operator|.
name|glyphs
argument_list|,
name|matrix
argument_list|,
name|ti
operator|.
name|flags
argument_list|,
name|glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyphs
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
return|return;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|QFontEngineFT
operator|::
name|QGlyphSet
modifier|*
name|set
init|=
name|ft
operator|->
name|defaultGlyphs
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|txop
operator|>=
name|QTransform
operator|::
name|TxScale
operator|&&
name|xrenderPath
condition|)
name|set
operator|=
name|ft
operator|->
name|loadTransformedGlyphSet
argument_list|(
name|d
operator|->
name|matrix
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|set
operator|||
name|set
operator|->
name|outline_drawing
operator|||
operator|!
name|ft
operator|->
name|loadGlyphs
argument_list|(
name|set
argument_list|,
name|glyphs
operator|.
name|constData
argument_list|()
argument_list|,
name|glyphs
operator|.
name|size
argument_list|()
argument_list|,
name|positions
operator|.
name|constData
argument_list|()
argument_list|,
name|QFontEngineFT
operator|::
name|Format_Render
argument_list|)
condition|)
block|{
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|ti
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|xrenderPath
condition|)
block|{
name|GlyphSet
name|glyphSet
init|=
name|set
operator|->
name|id
decl_stmt|;
specifier|const
name|QColor
modifier|&
name|pen
init|=
name|d
operator|->
name|cpen
operator|.
name|color
argument_list|()
decl_stmt|;
operator|::
name|Picture
name|src
init|=
name|X11
operator|->
name|getSolidFill
argument_list|(
name|d
operator|->
name|scrn
argument_list|,
name|pen
argument_list|)
decl_stmt|;
name|XRenderPictFormat
modifier|*
name|maskFormat
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ft
operator|->
name|xglyph_format
operator|!=
name|PictStandardA1
condition|)
name|maskFormat
operator|=
name|XRenderFindStandardFormat
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|ft
operator|->
name|xglyph_format
argument_list|)
expr_stmt|;
enum|enum
block|{
name|t_min
init|=
name|SHRT_MIN
block|,
name|t_max
init|=
name|SHRT_MAX
block|}
enum|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|glyphs
operator|.
name|size
argument_list|()
operator|&&
operator|(
name|positions
index|[
name|i
index|]
operator|.
name|x
operator|<
name|t_min
operator|||
name|positions
index|[
name|i
index|]
operator|.
name|x
operator|>
name|t_max
operator|||
name|positions
index|[
name|i
index|]
operator|.
name|y
operator|<
name|t_min
operator|||
name|positions
index|[
name|i
index|]
operator|.
name|y
operator|>
name|t_max
operator|)
condition|;
operator|++
name|i
control|)
empty_stmt|;
if|if
condition|(
name|i
operator|>=
name|glyphs
operator|.
name|size
argument_list|()
condition|)
return|return;
operator|++
name|i
expr_stmt|;
name|QFixed
name|xp
init|=
name|positions
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|x
decl_stmt|;
name|QFixed
name|yp
init|=
name|positions
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|y
decl_stmt|;
name|QFixed
name|offs
init|=
name|QFixed
operator|::
name|fromReal
argument_list|(
name|aliasedCoordinateDelta
argument_list|)
decl_stmt|;
name|XGlyphElt32
name|elt
decl_stmt|;
name|elt
operator|.
name|glyphset
operator|=
name|glyphSet
expr_stmt|;
name|elt
operator|.
name|chars
operator|=
operator|&
name|glyphs
index|[
name|i
operator|-
literal|1
index|]
expr_stmt|;
name|elt
operator|.
name|nchars
operator|=
literal|1
expr_stmt|;
name|elt
operator|.
name|xOff
operator|=
name|qRound
argument_list|(
name|xp
operator|+
name|offs
argument_list|)
expr_stmt|;
name|elt
operator|.
name|yOff
operator|=
name|qRound
argument_list|(
name|yp
operator|+
name|offs
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|glyphs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|positions
index|[
name|i
index|]
operator|.
name|x
operator|<
name|t_min
operator|||
name|positions
index|[
name|i
index|]
operator|.
name|x
operator|>
name|t_max
operator|||
name|positions
index|[
name|i
index|]
operator|.
name|y
operator|<
name|t_min
operator|||
name|positions
index|[
name|i
index|]
operator|.
name|y
operator|>
name|t_max
condition|)
block|{
break|break;
block|}
name|QFontEngineFT
operator|::
name|Glyph
modifier|*
name|g
init|=
name|ft
operator|->
name|cachedGlyph
argument_list|(
name|glyphs
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|&&
name|positions
index|[
name|i
index|]
operator|.
name|x
operator|==
name|xp
operator|+
name|g
operator|->
name|advance
operator|&&
name|positions
index|[
name|i
index|]
operator|.
name|y
operator|==
name|yp
operator|&&
name|elt
operator|.
name|nchars
operator|<
literal|253
comment|// don't draw more than 253 characters as some X servers
comment|// hang with it
condition|)
block|{
name|elt
operator|.
name|nchars
operator|++
expr_stmt|;
name|xp
operator|+=
name|g
operator|->
name|advance
expr_stmt|;
block|}
else|else
block|{
name|xp
operator|=
name|positions
index|[
name|i
index|]
operator|.
name|x
expr_stmt|;
name|yp
operator|=
name|positions
index|[
name|i
index|]
operator|.
name|y
expr_stmt|;
name|XRenderCompositeText32
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|PictOpOver
argument_list|,
name|src
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|maskFormat
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|elt
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|elt
operator|.
name|chars
operator|=
operator|&
name|glyphs
index|[
name|i
index|]
expr_stmt|;
name|elt
operator|.
name|nchars
operator|=
literal|1
expr_stmt|;
name|elt
operator|.
name|xOff
operator|=
name|qRound
argument_list|(
name|xp
operator|+
name|offs
argument_list|)
expr_stmt|;
name|elt
operator|.
name|yOff
operator|=
name|qRound
argument_list|(
name|yp
operator|+
name|offs
argument_list|)
expr_stmt|;
block|}
block|}
name|XRenderCompositeText32
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|PictOpOver
argument_list|,
name|src
argument_list|,
name|d
operator|->
name|picture
argument_list|,
name|maskFormat
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|elt
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|QPainterPath
name|path
init|=
name|path_for_glyphs
argument_list|(
name|glyphs
argument_list|,
name|positions
argument_list|,
name|ft
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|elementCount
argument_list|()
operator|<=
literal|1
condition|)
return|return;
name|Q_ASSERT
argument_list|(
operator|(
name|path
operator|.
name|elementCount
argument_list|()
operator|%
literal|5
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|txop
operator|>=
name|QTransform
operator|::
name|TxScale
condition|)
block|{
name|painter
argument_list|()
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
argument_list|()
operator|->
name|setBrush
argument_list|(
name|d
operator|->
name|cpen
operator|.
name|brush
argument_list|()
argument_list|)
expr_stmt|;
name|painter
argument_list|()
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|painter
argument_list|()
operator|->
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|painter
argument_list|()
operator|->
name|restore
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|const
name|int
name|rectcount
init|=
literal|256
decl_stmt|;
name|XRectangle
name|rects
index|[
name|rectcount
index|]
decl_stmt|;
name|int
name|num_rects
init|=
literal|0
decl_stmt|;
name|QPoint
name|delta
argument_list|(
name|qRound
argument_list|(
name|d
operator|->
name|matrix
operator|.
name|dx
argument_list|()
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|d
operator|->
name|matrix
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QRect
name|clip
argument_list|(
name|d
operator|->
name|polygonClipper
operator|.
name|boundingRect
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
name|i
operator|+=
literal|5
control|)
block|{
name|int
name|x
init|=
name|qRound
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|.
name|x
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|qRound
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|.
name|y
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|qRound
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|x
argument_list|)
operator|-
name|x
decl_stmt|;
name|int
name|h
init|=
name|qRound
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|.
name|y
argument_list|)
operator|-
name|y
decl_stmt|;
name|QRect
name|rect
init|=
name|QRect
argument_list|(
name|x
operator|+
name|delta
operator|.
name|x
argument_list|()
argument_list|,
name|y
operator|+
name|delta
operator|.
name|y
argument_list|()
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|rect
operator|=
name|rect
operator|.
name|intersected
argument_list|(
name|clip
argument_list|)
expr_stmt|;
if|if
condition|(
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|rects
index|[
name|num_rects
index|]
operator|.
name|x
operator|=
name|short
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|rects
index|[
name|num_rects
index|]
operator|.
name|y
operator|=
name|short
argument_list|(
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|rects
index|[
name|num_rects
index|]
operator|.
name|width
operator|=
name|ushort
argument_list|(
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|rects
index|[
name|num_rects
index|]
operator|.
name|height
operator|=
name|ushort
argument_list|(
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|num_rects
expr_stmt|;
if|if
condition|(
name|num_rects
operator|==
name|rectcount
condition|)
block|{
name|XFillRectangles
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|rects
argument_list|,
name|num_rects
argument_list|)
expr_stmt|;
name|num_rects
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|num_rects
operator|>
literal|0
condition|)
name|XFillRectangles
argument_list|(
name|d
operator|->
name|dpy
argument_list|,
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|gc
argument_list|,
name|rects
argument_list|,
name|num_rects
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_XRENDER
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
