begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qnamespace.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qlayout.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qstack.h"
end_include
begin_include
include|#
directive|include
file|"qcolormap.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"private/qmenu_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qbackingstore_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwindowsurface_x11_p.h"
end_include
begin_comment
comment|//extern bool qt_sendSpontaneousEvent(QObject *, QEvent *); //qapplication_x11.cpp
end_comment
begin_include
include|#
directive|include
file|<private/qpixmap_x11_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_x11_p.h>
end_include
begin_include
include|#
directive|include
file|"qt_x11_p.h"
end_include
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_comment
comment|//#define ALIEN_DEBUG
end_comment
begin_comment
comment|// defined in qapplication_x11.cpp
end_comment
begin_comment
comment|//bool qt_wstate_iconified(WId);
end_comment
begin_comment
comment|//void qt_updated_rootinfo();
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_IM
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qinputcontext.h"
end_include
begin_include
include|#
directive|include
file|"qinputcontextfactory.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qwidget_p.h"
end_include
begin_define
DECL|macro|XCOORD_MAX
define|#
directive|define
name|XCOORD_MAX
value|16383
end_define
begin_define
DECL|macro|WRECT_MAX
define|#
directive|define
name|WRECT_MAX
value|8191
end_define
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|bool
name|qt_nograb
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
DECL|member|mouseGrabber
name|QWidget
modifier|*
name|QWidgetPrivate
operator|::
name|mouseGrabber
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|keyboardGrabber
name|QWidget
modifier|*
name|QWidgetPrivate
operator|::
name|keyboardGrabber
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|qt_net_remove_user_time
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|qt_net_update_user_time
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|,
name|unsigned
name|long
name|timestamp
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|qt_x11_create_desktop_on_screen
name|int
name|qt_x11_create_desktop_on_screen
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|void
name|qt_net_update_user_time
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|,
name|unsigned
name|long
name|timestamp
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// MWM support
end_comment
begin_struct
DECL|struct|QtMWMHints
struct|struct
name|QtMWMHints
block|{
DECL|member|flags
DECL|member|functions
DECL|member|decorations
name|ulong
name|flags
decl_stmt|,
name|functions
decl_stmt|,
name|decorations
decl_stmt|;
DECL|member|input_mode
name|long
name|input_mode
decl_stmt|;
DECL|member|status
name|ulong
name|status
decl_stmt|;
block|}
struct|;
end_struct
begin_enum
enum|enum
block|{
DECL|enumerator|MWM_HINTS_FUNCTIONS
name|MWM_HINTS_FUNCTIONS
init|=
operator|(
literal|1L
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|MWM_FUNC_ALL
name|MWM_FUNC_ALL
init|=
operator|(
literal|1L
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|MWM_FUNC_RESIZE
name|MWM_FUNC_RESIZE
init|=
operator|(
literal|1L
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|MWM_FUNC_MOVE
name|MWM_FUNC_MOVE
init|=
operator|(
literal|1L
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|MWM_FUNC_MINIMIZE
name|MWM_FUNC_MINIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|3
operator|)
block|,
DECL|enumerator|MWM_FUNC_MAXIMIZE
name|MWM_FUNC_MAXIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|4
operator|)
block|,
DECL|enumerator|MWM_FUNC_CLOSE
name|MWM_FUNC_CLOSE
init|=
operator|(
literal|1L
operator|<<
literal|5
operator|)
block|,
DECL|enumerator|MWM_HINTS_DECORATIONS
name|MWM_HINTS_DECORATIONS
init|=
operator|(
literal|1L
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|MWM_DECOR_ALL
name|MWM_DECOR_ALL
init|=
operator|(
literal|1L
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|MWM_DECOR_BORDER
name|MWM_DECOR_BORDER
init|=
operator|(
literal|1L
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|MWM_DECOR_RESIZEH
name|MWM_DECOR_RESIZEH
init|=
operator|(
literal|1L
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|MWM_DECOR_TITLE
name|MWM_DECOR_TITLE
init|=
operator|(
literal|1L
operator|<<
literal|3
operator|)
block|,
DECL|enumerator|MWM_DECOR_MENU
name|MWM_DECOR_MENU
init|=
operator|(
literal|1L
operator|<<
literal|4
operator|)
block|,
DECL|enumerator|MWM_DECOR_MINIMIZE
name|MWM_DECOR_MINIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|5
operator|)
block|,
DECL|enumerator|MWM_DECOR_MAXIMIZE
name|MWM_DECOR_MAXIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|6
operator|)
block|,
DECL|enumerator|MWM_HINTS_INPUT_MODE
name|MWM_HINTS_INPUT_MODE
init|=
operator|(
literal|1L
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|MWM_INPUT_MODELESS
name|MWM_INPUT_MODELESS
init|=
literal|0L
block|,
DECL|enumerator|MWM_INPUT_PRIMARY_APPLICATION_MODAL
name|MWM_INPUT_PRIMARY_APPLICATION_MODAL
init|=
literal|1L
block|,
DECL|enumerator|MWM_INPUT_FULL_APPLICATION_MODAL
name|MWM_INPUT_FULL_APPLICATION_MODAL
init|=
literal|3L
block|}
enum|;
end_enum
begin_function
DECL|function|GetMWMHints
specifier|static
name|QtMWMHints
name|GetMWMHints
parameter_list|(
name|Display
modifier|*
name|display
parameter_list|,
name|Window
name|window
parameter_list|)
block|{
name|QtMWMHints
name|mwmhints
decl_stmt|;
name|Atom
name|type
decl_stmt|;
name|int
name|format
decl_stmt|;
name|ulong
name|nitems
decl_stmt|,
name|bytesLeft
decl_stmt|;
name|uchar
modifier|*
name|data
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
name|XGetWindowProperty
argument_list|(
name|display
argument_list|,
name|window
argument_list|,
name|ATOM
argument_list|(
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
name|ATOM
argument_list|(
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|bytesLeft
argument_list|,
operator|&
name|data
argument_list|)
operator|==
name|Success
operator|)
operator|&&
operator|(
name|type
operator|==
name|ATOM
argument_list|(
name|_MOTIF_WM_HINTS
argument_list|)
operator|&&
name|format
operator|==
literal|32
operator|&&
name|nitems
operator|>=
literal|5
operator|)
condition|)
block|{
name|mwmhints
operator|=
operator|*
operator|(
cast|reinterpret_cast
argument_list|<
name|QtMWMHints
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|flags
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_ALL
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
name|MWM_DECOR_ALL
expr_stmt|;
name|mwmhints
operator|.
name|input_mode
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|status
operator|=
literal|0L
expr_stmt|;
block|}
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|mwmhints
return|;
block|}
end_function
begin_function
DECL|function|SetMWMHints
specifier|static
name|void
name|SetMWMHints
parameter_list|(
name|Display
modifier|*
name|display
parameter_list|,
name|Window
name|window
parameter_list|,
specifier|const
name|QtMWMHints
modifier|&
name|mwmhints
parameter_list|)
block|{
if|if
condition|(
name|mwmhints
operator|.
name|flags
operator|!=
literal|0l
condition|)
block|{
name|XChangeProperty
argument_list|(
name|display
argument_list|,
name|window
argument_list|,
name|ATOM
argument_list|(
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|,
name|ATOM
argument_list|(
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|mwmhints
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XDeleteProperty
argument_list|(
name|display
argument_list|,
name|window
argument_list|,
name|ATOM
argument_list|(
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Returns true if we should set WM_TRANSIENT_FOR on \a w
end_comment
begin_function
DECL|function|isTransient
specifier|static
specifier|inline
name|bool
name|isTransient
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
return|return
operator|(
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Dialog
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Sheet
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|SplashScreen
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|ToolTip
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Drawer
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
operator|&&
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11BypassTransientForHint
argument_list|)
operator|)
return|;
block|}
end_function
begin_function_decl
specifier|static
name|void
name|do_size_hints
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QWExtra
modifier|*
name|x
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*****************************************************************************   QWidget member functions  *****************************************************************************/
end_comment
begin_decl_stmt
DECL|variable|stdWidgetEventMask
specifier|const
name|uint
name|stdWidgetEventMask
init|=
comment|// X event mask
call|(
name|uint
call|)
argument_list|(
name|KeyPressMask
operator||
name|KeyReleaseMask
operator||
name|ButtonPressMask
operator||
name|ButtonReleaseMask
operator||
name|KeymapStateMask
operator||
name|ButtonMotionMask
operator||
name|PointerMotionMask
operator||
name|EnterWindowMask
operator||
name|LeaveWindowMask
operator||
name|FocusChangeMask
operator||
name|ExposureMask
operator||
name|PropertyChangeMask
operator||
name|StructureNotifyMask
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|stdDesktopEventMask
specifier|const
name|uint
name|stdDesktopEventMask
init|=
comment|// X event mask
call|(
name|uint
call|)
argument_list|(
name|KeymapStateMask
operator||
name|EnterWindowMask
operator||
name|LeaveWindowMask
operator||
name|PropertyChangeMask
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*   The qt_ functions below are implemented in qwidgetcreate_x11.cpp. */
end_comment
begin_function_decl
name|Window
name|qt_XCreateWindow
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|creator
parameter_list|,
name|Display
modifier|*
name|display
parameter_list|,
name|Window
name|parent
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|uint
name|w
parameter_list|,
name|uint
name|h
parameter_list|,
name|int
name|borderwidth
parameter_list|,
name|int
name|depth
parameter_list|,
name|uint
name|windowclass
parameter_list|,
name|Visual
modifier|*
name|visual
parameter_list|,
name|ulong
name|valuemask
parameter_list|,
name|XSetWindowAttributes
modifier|*
name|attributes
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Window
name|qt_XCreateSimpleWindow
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|creator
parameter_list|,
name|Display
modifier|*
name|display
parameter_list|,
name|Window
name|parent
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|uint
name|w
parameter_list|,
name|uint
name|h
parameter_list|,
name|int
name|borderwidth
parameter_list|,
name|ulong
name|border
parameter_list|,
name|ulong
name|background
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|qt_XDestroyWindow
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|destroyer
parameter_list|,
name|Display
modifier|*
name|display
parameter_list|,
name|Window
name|window
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|qt_insert_sip
specifier|static
name|void
name|qt_insert_sip
parameter_list|(
name|QWidget
modifier|*
name|scrolled_widget
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
if|if
condition|(
operator|!
name|scrolled_widget
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|scrolled_widget
operator|->
name|internalWinId
argument_list|()
condition|)
return|return;
name|QX11Data
operator|::
name|ScrollInProgress
name|sip
init|=
block|{
name|X11
operator|->
name|sip_serial
operator|++
block|,
name|scrolled_widget
block|,
name|dx
block|,
name|dy
block|}
decl_stmt|;
name|X11
operator|->
name|sip_list
operator|.
name|append
argument_list|(
name|sip
argument_list|)
expr_stmt|;
name|XClientMessageEvent
name|client_message
decl_stmt|;
name|client_message
operator|.
name|type
operator|=
name|ClientMessage
expr_stmt|;
name|client_message
operator|.
name|window
operator|=
name|scrolled_widget
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
name|client_message
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|client_message
operator|.
name|message_type
operator|=
name|ATOM
argument_list|(
name|_QT_SCROLL_DONE
argument_list|)
expr_stmt|;
name|client_message
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
operator|=
name|sip
operator|.
name|id
expr_stmt|;
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|scrolled_widget
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|(
name|XEvent
operator|*
operator|)
operator|&
name|client_message
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_sip_count
specifier|static
name|int
name|qt_sip_count
parameter_list|(
name|QWidget
modifier|*
name|scrolled_widget
parameter_list|)
block|{
name|int
name|sips
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|X11
operator|->
name|sip_list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QX11Data
operator|::
name|ScrollInProgress
modifier|&
name|sip
init|=
name|X11
operator|->
name|sip_list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|sip
operator|.
name|scrolled_widget
operator|==
name|scrolled_widget
condition|)
name|sips
operator|++
expr_stmt|;
block|}
return|return
name|sips
return|;
block|}
end_function
begin_function
DECL|function|create_wm_client_leader
specifier|static
name|void
name|create_wm_client_leader
parameter_list|()
block|{
if|if
condition|(
name|X11
operator|->
name|wm_client_leader
condition|)
return|return;
name|X11
operator|->
name|wm_client_leader
operator|=
name|XCreateSimpleWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// set client leader property to itself
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|X11
operator|->
name|wm_client_leader
argument_list|,
name|ATOM
argument_list|(
name|WM_CLIENT_LEADER
argument_list|)
argument_list|,
name|XA_WINDOW
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|X11
operator|->
name|wm_client_leader
argument_list|,
literal|1
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SESSIONMANAGER
comment|// If we are session managed, inform the window manager about it
name|QByteArray
name|session
init|=
name|qApp
operator|->
name|sessionId
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|session
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|X11
operator|->
name|wm_client_leader
argument_list|,
name|ATOM
argument_list|(
name|SM_CLIENT_ID
argument_list|)
argument_list|,
name|XA_STRING
argument_list|,
literal|8
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|session
operator|.
name|data
argument_list|()
argument_list|,
name|session
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!    \internal    Update the X11 cursor of the widget w.    \a force is true if this function is called from dispatchEnterLeave, it means that the    mouse is actually directly under this widget.  */
end_comment
begin_function
DECL|function|qt_x11_enforce_cursor
name|void
name|qt_x11_enforce_cursor
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|force
parameter_list|)
block|{
if|if
condition|(
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
return|return;
specifier|static
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|lastUnderMouse
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|force
condition|)
block|{
name|lastUnderMouse
operator|=
name|w
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastUnderMouse
operator|&&
name|lastUnderMouse
operator|->
name|effectiveWinId
argument_list|()
operator|==
name|w
operator|->
name|effectiveWinId
argument_list|()
condition|)
block|{
name|w
operator|=
name|lastUnderMouse
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
return|return;
comment|//the mouse is not under this widget, and it's not native, so don't change it
block|}
while|while
condition|(
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
operator|&&
name|w
operator|->
name|parentWidget
argument_list|()
operator|&&
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetCursor
argument_list|)
condition|)
name|w
operator|=
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|nativeParent
init|=
name|w
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
name|nativeParent
operator|=
name|w
operator|->
name|nativeParentWidget
argument_list|()
expr_stmt|;
comment|// This does the same as effectiveWinId(), but since it is possible
comment|// to not have a native parent widget due to a special hack in
comment|// qwidget for reparenting widgets to a different X11 screen,
comment|// added additional check to make sure native parent widget exists.
if|if
condition|(
operator|!
name|nativeParent
operator|||
operator|!
name|nativeParent
operator|->
name|internalWinId
argument_list|()
condition|)
return|return;
name|WId
name|winid
init|=
name|nativeParent
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|isWindow
argument_list|()
operator|||
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetCursor
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursor
modifier|*
name|oc
init|=
name|QApplication
operator|::
name|overrideCursor
argument_list|()
decl_stmt|;
if|if
condition|(
name|oc
condition|)
block|{
name|XDefineCursor
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|winid
argument_list|,
name|oc
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|w
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|XDefineCursor
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|winid
argument_list|,
name|w
operator|->
name|cursor
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// enforce the windows behavior of clearing the cursor on
comment|// disabled widgets
name|XDefineCursor
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|winid
argument_list|,
name|XNone
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
else|else
block|{
name|XDefineCursor
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|winid
argument_list|,
name|XNone
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_x11_enforce_cursor
name|Q_GUI_EXPORT
name|void
name|qt_x11_enforce_cursor
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|qt_x11_enforce_cursor
argument_list|(
name|w
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_x11_wait_for_window_manager
name|void
name|qt_x11_wait_for_window_manager
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|sendPostedEvents
parameter_list|)
block|{
if|if
condition|(
operator|!
name|w
operator|||
operator|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
operator|)
condition|)
return|return;
name|QApplication
operator|::
name|flush
argument_list|()
expr_stmt|;
name|XEvent
name|ev
decl_stmt|;
name|QElapsedTimer
name|t
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|static
specifier|const
name|int
name|maximumWaitTime
init|=
literal|2000
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
return|return;
name|WId
name|winid
init|=
name|w
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
comment|// first deliver events that are already in the local queue
if|if
condition|(
name|sendPostedEvents
condition|)
name|QApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
comment|// the normal sequence is:
comment|//  ... ConfigureNotify ... ReparentNotify ... MapNotify ... Expose
comment|// with X11BypassWindowManagerHint:
comment|//  ConfigureNotify ... MapNotify ... Expose
enum|enum
name|State
block|{
name|Initial
block|,
name|Mapped
block|}
name|state
init|=
name|Initial
enum|;
do|do
block|{
if|if
condition|(
name|XEventsQueued
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QueuedAlready
argument_list|)
condition|)
block|{
name|XNextEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|x11ProcessEvent
argument_list|(
operator|&
name|ev
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|Initial
case|:
if|if
condition|(
name|ev
operator|.
name|type
operator|==
name|MapNotify
operator|&&
name|ev
operator|.
name|xany
operator|.
name|window
operator|==
name|winid
condition|)
name|state
operator|=
name|Mapped
expr_stmt|;
break|break;
case|case
name|Mapped
case|:
if|if
condition|(
name|ev
operator|.
name|type
operator|==
name|Expose
operator|&&
name|ev
operator|.
name|xany
operator|.
name|window
operator|==
name|winid
condition|)
return|return;
break|break;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|XEventsQueued
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QueuedAfterFlush
argument_list|)
condition|)
name|qApp
operator|->
name|syncX
argument_list|()
expr_stmt|;
comment|// non-busy wait
block|}
if|if
condition|(
name|t
operator|.
name|elapsed
argument_list|()
operator|>
name|maximumWaitTime
condition|)
return|return;
block|}
do|while
condition|(
literal|1
condition|)
do|;
block|}
end_function
begin_function
DECL|function|qt_x11_wait_for_window_manager
name|Q_GUI_EXPORT
name|void
name|qt_x11_wait_for_window_manager
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|qt_x11_wait_for_window_manager
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_change_net_wm_state
name|void
name|qt_change_net_wm_state
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|set
parameter_list|,
name|Atom
name|one
parameter_list|,
name|Atom
name|two
init|=
literal|0
parameter_list|)
block|{
if|if
condition|(
operator|!
name|w
operator|->
name|isVisible
argument_list|()
condition|)
comment|// not managed by the window manager
return|return;
name|XEvent
name|e
decl_stmt|;
name|e
operator|.
name|xclient
operator|.
name|type
operator|=
name|ClientMessage
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|message_type
operator|=
name|ATOM
argument_list|(
name|_NET_WM_STATE
argument_list|)
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|display
operator|=
name|X11
operator|->
name|display
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|window
operator|=
name|w
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
operator|=
name|set
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
operator|=
name|one
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
operator|=
name|two
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|w
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
operator|(
name|SubstructureNotifyMask
operator||
name|SubstructureRedirectMask
operator|)
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|QX11WindowAttributes
struct|struct
name|QX11WindowAttributes
block|{
DECL|member|att
specifier|const
name|XWindowAttributes
modifier|*
name|att
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|qt_x11_getX11InfoForWindow
name|void
name|qt_x11_getX11InfoForWindow
parameter_list|(
name|QX11Info
modifier|*
name|xinfo
parameter_list|,
specifier|const
name|XWindowAttributes
modifier|&
name|a
parameter_list|)
block|{
name|QX11WindowAttributes
name|att
decl_stmt|;
name|att
operator|.
name|att
operator|=
operator|&
name|a
expr_stmt|;
name|qt_x11_getX11InfoForWindow
argument_list|(
name|xinfo
argument_list|,
name|att
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getNetWmState
specifier|static
name|QVector
argument_list|<
name|Atom
argument_list|>
name|getNetWmState
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|QVector
argument_list|<
name|Atom
argument_list|>
name|returnValue
decl_stmt|;
comment|// Don't read anything, just get the size of the property data
name|Atom
name|actualType
decl_stmt|;
name|int
name|actualFormat
decl_stmt|;
name|ulong
name|propertyLength
decl_stmt|;
name|ulong
name|bytesLeft
decl_stmt|;
name|uchar
modifier|*
name|propertyData
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|w
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_STATE
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|False
argument_list|,
name|XA_ATOM
argument_list|,
operator|&
name|actualType
argument_list|,
operator|&
name|actualFormat
argument_list|,
operator|&
name|propertyLength
argument_list|,
operator|&
name|bytesLeft
argument_list|,
operator|&
name|propertyData
argument_list|)
operator|==
name|Success
operator|&&
name|actualType
operator|==
name|XA_ATOM
operator|&&
name|actualFormat
operator|==
literal|32
condition|)
block|{
name|returnValue
operator|.
name|resize
argument_list|(
name|bytesLeft
operator|/
literal|4
argument_list|)
expr_stmt|;
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|propertyData
argument_list|)
expr_stmt|;
name|propertyData
operator|=
literal|0
expr_stmt|;
comment|// fetch all data
if|if
condition|(
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|w
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_STATE
argument_list|)
argument_list|,
literal|0
argument_list|,
name|returnValue
operator|.
name|size
argument_list|()
argument_list|,
name|False
argument_list|,
name|XA_ATOM
argument_list|,
operator|&
name|actualType
argument_list|,
operator|&
name|actualFormat
argument_list|,
operator|&
name|propertyLength
argument_list|,
operator|&
name|bytesLeft
argument_list|,
operator|&
name|propertyData
argument_list|)
operator|!=
name|Success
condition|)
block|{
name|returnValue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyLength
operator|!=
operator|(
name|ulong
operator|)
name|returnValue
operator|.
name|size
argument_list|()
condition|)
block|{
name|returnValue
operator|.
name|resize
argument_list|(
name|propertyLength
argument_list|)
expr_stmt|;
block|}
comment|// put it into netWmState
if|if
condition|(
operator|!
name|returnValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|memcpy
argument_list|(
name|returnValue
operator|.
name|data
argument_list|()
argument_list|,
name|propertyData
argument_list|,
name|returnValue
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|Atom
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propertyData
condition|)
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|propertyData
argument_list|)
expr_stmt|;
block|}
return|return
name|returnValue
return|;
block|}
end_function
begin_function
DECL|function|create_sys
name|void
name|QWidgetPrivate
operator|::
name|create_sys
parameter_list|(
name|WId
name|window
parameter_list|,
name|bool
name|initializeWindow
parameter_list|,
name|bool
name|destroyOldWindow
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|WindowType
name|type
init|=
name|q
operator|->
name|windowType
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|WindowFlags
modifier|&
name|flags
init|=
name|data
operator|.
name|window_flags
decl_stmt|;
name|QWidget
modifier|*
name|parentWidget
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
condition|)
name|flags
operator||=
name|Qt
operator|::
name|WindowStaysOnTopHint
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|X11BypassWindowManagerHint
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|Popup
condition|)
name|flags
operator||=
name|Qt
operator|::
name|X11BypassWindowManagerHint
expr_stmt|;
name|bool
name|topLevel
init|=
operator|(
name|flags
operator|&
name|Qt
operator|::
name|Window
operator|)
decl_stmt|;
name|bool
name|popup
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|)
decl_stmt|;
name|bool
name|desktop
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Desktop
operator|)
decl_stmt|;
name|bool
name|tool
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|type
operator|==
name|Qt
operator|::
name|SplashScreen
operator|||
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|||
name|type
operator|==
name|Qt
operator|::
name|Drawer
operator|)
decl_stmt|;
ifdef|#
directive|ifdef
name|ALIEN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QWidgetPrivate::create_sys START:"
operator|<<
name|q
operator|<<
literal|"topLevel?"
operator|<<
name|topLevel
operator|<<
literal|"WId:"
operator|<<
name|window
operator|<<
literal|"initializeWindow:"
operator|<<
name|initializeWindow
operator|<<
literal|"destroyOldWindow"
operator|<<
name|destroyOldWindow
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|topLevel
condition|)
block|{
if|if
condition|(
name|parentWidget
condition|)
block|{
comment|// if our parent stays on top, so must we
name|QWidget
modifier|*
name|ptl
init|=
name|parentWidget
operator|->
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
name|ptl
operator|&&
operator|(
name|ptl
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
condition|)
name|flags
operator||=
name|Qt
operator|::
name|WindowStaysOnTopHint
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|SplashScreen
condition|)
block|{
if|if
condition|(
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_SPLASH
argument_list|)
argument_list|)
condition|)
block|{
name|flags
operator|&=
operator|~
name|Qt
operator|::
name|X11BypassWindowManagerHint
expr_stmt|;
block|}
else|else
block|{
name|flags
operator||=
name|Qt
operator|::
name|X11BypassWindowManagerHint
operator||
name|Qt
operator|::
name|FramelessWindowHint
expr_stmt|;
block|}
block|}
comment|// All these buttons depend on the system menu, so we enable it
if|if
condition|(
name|flags
operator|&
operator|(
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator||
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator||
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator|)
condition|)
name|flags
operator||=
name|Qt
operator|::
name|WindowSystemMenuHint
expr_stmt|;
block|}
name|Window
name|parentw
decl_stmt|,
name|destroyw
init|=
literal|0
decl_stmt|;
name|WId
name|id
init|=
literal|0
decl_stmt|;
comment|// always initialize
if|if
condition|(
operator|!
name|window
condition|)
name|initializeWindow
operator|=
literal|true
expr_stmt|;
name|QX11Info
modifier|*
name|parentXinfo
init|=
name|parentWidget
condition|?
operator|&
name|parentWidget
operator|->
name|d_func
argument_list|()
operator|->
name|xinfo
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|desktop
operator|&&
name|qt_x11_create_desktop_on_screen
operator|>=
literal|0
operator|&&
name|qt_x11_create_desktop_on_screen
operator|!=
name|xinfo
operator|.
name|screen
argument_list|()
condition|)
block|{
comment|// desktop on a certain screen other than the default requested
name|QX11InfoData
modifier|*
name|xd
init|=
operator|&
name|X11
operator|->
name|screens
index|[
name|qt_x11_create_desktop_on_screen
index|]
decl_stmt|;
name|xinfo
operator|.
name|setX11Data
argument_list|(
name|xd
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parentXinfo
operator|&&
operator|(
name|parentXinfo
operator|->
name|screen
argument_list|()
operator|!=
name|xinfo
operator|.
name|screen
argument_list|()
operator|||
operator|(
name|parentXinfo
operator|->
name|visual
argument_list|()
operator|!=
name|xinfo
operator|.
name|visual
argument_list|()
operator|&&
operator|!
name|q
operator|->
name|inherits
argument_list|(
literal|"QGLWidget"
argument_list|)
operator|)
operator|)
condition|)
block|{
comment|// QGLWidgets have to be excluded here as they have a
comment|// specially crafted QX11Info structure which can't be swapped
comment|// out with the parent widgets QX11Info. The parent visual,
comment|// for instance, might not even be GL capable.
name|xinfo
operator|=
operator|*
name|parentXinfo
expr_stmt|;
block|}
comment|//get display, screen number, root window and desktop geometry for
comment|//the current screen
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
name|int
name|scr
init|=
name|xinfo
operator|.
name|screen
argument_list|()
decl_stmt|;
name|Window
name|root_win
init|=
name|RootWindow
argument_list|(
name|dpy
argument_list|,
name|scr
argument_list|)
decl_stmt|;
name|int
name|sw
init|=
name|DisplayWidth
argument_list|(
name|dpy
argument_list|,
name|scr
argument_list|)
decl_stmt|;
name|int
name|sh
init|=
name|DisplayHeight
argument_list|(
name|dpy
argument_list|,
name|scr
argument_list|)
decl_stmt|;
if|if
condition|(
name|desktop
condition|)
block|{
comment|// desktop widget
name|popup
operator|=
literal|false
expr_stmt|;
comment|// force these flags off
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topLevel
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
condition|)
block|{
name|QDesktopWidget
modifier|*
name|desktopWidget
init|=
name|qApp
operator|->
name|desktop
argument_list|()
decl_stmt|;
if|if
condition|(
name|desktopWidget
operator|->
name|isVirtualDesktop
argument_list|()
condition|)
block|{
name|QRect
name|r
init|=
name|desktopWidget
operator|->
name|screenGeometry
argument_list|()
decl_stmt|;
name|sw
operator|=
name|r
operator|.
name|width
argument_list|()
expr_stmt|;
name|sh
operator|=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|int
name|width
init|=
name|sw
operator|/
literal|2
decl_stmt|;
name|int
name|height
init|=
literal|4
operator|*
name|sh
operator|/
literal|10
decl_stmt|;
if|if
condition|(
name|extra
condition|)
block|{
name|width
operator|=
name|qMax
argument_list|(
name|qMin
argument_list|(
name|width
argument_list|,
name|extra
operator|->
name|maxw
argument_list|)
argument_list|,
name|extra
operator|->
name|minw
argument_list|)
expr_stmt|;
name|height
operator|=
name|qMax
argument_list|(
name|qMin
argument_list|(
name|height
argument_list|,
name|extra
operator|->
name|maxh
argument_list|)
argument_list|,
name|extra
operator|->
name|minh
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|crect
operator|.
name|setSize
argument_list|(
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parentw
operator|=
name|topLevel
condition|?
name|root_win
else|:
name|parentWidget
operator|->
name|effectiveWinId
argument_list|()
expr_stmt|;
name|XSetWindowAttributes
name|wsa
decl_stmt|;
if|if
condition|(
name|window
condition|)
block|{
comment|// override the old window
if|if
condition|(
name|destroyOldWindow
condition|)
block|{
if|if
condition|(
name|topLevel
condition|)
name|X11
operator|->
name|dndEnable
argument_list|(
name|q
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|destroyw
operator|=
name|data
operator|.
name|winid
expr_stmt|;
block|}
name|id
operator|=
name|window
expr_stmt|;
name|setWinId
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|XWindowAttributes
name|a
decl_stmt|;
name|XGetWindowAttributes
argument_list|(
name|dpy
argument_list|,
name|window
argument_list|,
operator|&
name|a
argument_list|)
expr_stmt|;
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
name|a
operator|.
name|x
argument_list|,
name|a
operator|.
name|y
argument_list|,
name|a
operator|.
name|width
argument_list|,
name|a
operator|.
name|height
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|map_state
operator|==
name|IsUnmapped
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|)
expr_stmt|;
name|qt_x11_getX11InfoForWindow
argument_list|(
operator|&
name|xinfo
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|desktop
condition|)
block|{
comment|// desktop widget
ifdef|#
directive|ifdef
name|QWIDGET_EXTRA_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"create desktop"
expr_stmt|;
endif|#
directive|endif
name|id
operator|=
operator|(
name|WId
operator|)
name|parentw
expr_stmt|;
comment|// id = root window
comment|//         QWidget *otherDesktop = find(id);        // is there another desktop?
comment|//         if (otherDesktop&& otherDesktop->testWFlags(Qt::WPaintDesktop)) {
comment|//             otherDesktop->d->setWinId(0);        // remove id from widget mapper
comment|//             d->setWinId(id);                     // make sure otherDesktop is
comment|//             otherDesktop->d->setWinId(id);       // found first
comment|//         } else {
name|setWinId
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|//         }
block|}
elseif|else
if|if
condition|(
name|topLevel
operator|||
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
operator|||
name|paintOnScreen
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QWIDGET_EXTRA_DEBUG
specifier|static
name|int
name|topLevels
init|=
literal|0
decl_stmt|;
specifier|static
name|int
name|children
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|parentw
operator|==
name|root_win
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"create toplevel"
operator|<<
operator|++
name|topLevels
expr_stmt|;
else|else
name|qDebug
argument_list|()
operator|<<
literal|"create child"
operator|<<
operator|++
name|children
expr_stmt|;
endif|#
directive|endif
name|QRect
name|safeRect
init|=
name|data
operator|.
name|crect
decl_stmt|;
comment|//##### must handle huge sizes as well.... i.e. wrect
if|if
condition|(
name|safeRect
operator|.
name|width
argument_list|()
operator|<
literal|1
operator|||
name|safeRect
operator|.
name|height
argument_list|()
operator|<
literal|1
condition|)
block|{
if|if
condition|(
name|topLevel
condition|)
block|{
comment|// top-levels must be at least 1x1
name|safeRect
operator|.
name|setSize
argument_list|(
name|safeRect
operator|.
name|size
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|QSize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// create it way off screen, and rely on
comment|// setWSGeometry() to do the right thing with it later
name|safeRect
operator|=
name|QRect
argument_list|(
operator|-
literal|1000
argument_list|,
operator|-
literal|1000
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|int
name|screen
init|=
name|xinfo
operator|.
name|screen
argument_list|()
decl_stmt|;
if|if
condition|(
name|topLevel
operator|&&
name|X11
operator|->
name|use_xrender
operator|&&
name|xinfo
operator|.
name|depth
argument_list|()
operator|!=
literal|32
operator|&&
name|X11
operator|->
name|argbVisuals
index|[
name|screen
index|]
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
condition|)
block|{
name|QX11InfoData
modifier|*
name|xd
init|=
name|xinfo
operator|.
name|getX11Data
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|xd
operator|->
name|screen
operator|=
name|screen
expr_stmt|;
name|xd
operator|->
name|visual
operator|=
name|X11
operator|->
name|argbVisuals
index|[
name|screen
index|]
expr_stmt|;
name|xd
operator|->
name|colormap
operator|=
name|X11
operator|->
name|argbColormaps
index|[
name|screen
index|]
expr_stmt|;
name|xd
operator|->
name|depth
operator|=
literal|32
expr_stmt|;
name|xd
operator|->
name|defaultVisual
operator|=
literal|false
expr_stmt|;
name|xd
operator|->
name|defaultColormap
operator|=
literal|false
expr_stmt|;
name|xd
operator|->
name|cells
operator|=
name|xd
operator|->
name|visual
operator|->
name|map_entries
expr_stmt|;
name|xinfo
operator|.
name|setX11Data
argument_list|(
name|xd
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|xinfo
operator|.
name|defaultVisual
argument_list|()
operator|&&
name|xinfo
operator|.
name|defaultColormap
argument_list|()
condition|)
block|{
name|id
operator|=
operator|(
name|WId
operator|)
name|qt_XCreateSimpleWindow
argument_list|(
name|q
argument_list|,
name|dpy
argument_list|,
name|parentw
argument_list|,
name|safeRect
operator|.
name|left
argument_list|()
argument_list|,
name|safeRect
operator|.
name|top
argument_list|()
argument_list|,
name|safeRect
operator|.
name|width
argument_list|()
argument_list|,
name|safeRect
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|BlackPixel
argument_list|(
name|dpy
argument_list|,
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
argument_list|,
name|WhitePixel
argument_list|(
name|dpy
argument_list|,
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wsa
operator|.
name|background_pixel
operator|=
name|WhitePixel
argument_list|(
name|dpy
argument_list|,
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
expr_stmt|;
name|wsa
operator|.
name|border_pixel
operator|=
name|BlackPixel
argument_list|(
name|dpy
argument_list|,
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
expr_stmt|;
name|wsa
operator|.
name|colormap
operator|=
name|xinfo
operator|.
name|colormap
argument_list|()
expr_stmt|;
name|id
operator|=
operator|(
name|WId
operator|)
name|qt_XCreateWindow
argument_list|(
name|q
argument_list|,
name|dpy
argument_list|,
name|parentw
argument_list|,
name|safeRect
operator|.
name|left
argument_list|()
argument_list|,
name|safeRect
operator|.
name|top
argument_list|()
argument_list|,
name|safeRect
operator|.
name|width
argument_list|()
argument_list|,
name|safeRect
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|xinfo
operator|.
name|depth
argument_list|()
argument_list|,
name|InputOutput
argument_list|,
operator|(
name|Visual
operator|*
operator|)
name|xinfo
operator|.
name|visual
argument_list|()
argument_list|,
name|CWBackPixel
operator||
name|CWBorderPixel
operator||
name|CWColormap
argument_list|,
operator|&
name|wsa
argument_list|)
expr_stmt|;
block|}
name|setWinId
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// set widget id/handle + hd
block|}
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
name|picture
condition|)
block|{
name|XRenderFreePicture
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|picture
argument_list|)
expr_stmt|;
name|picture
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|X11
operator|->
name|use_xrender
operator|&&
operator|!
name|desktop
operator|&&
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|XRenderPictFormat
modifier|*
name|format
init|=
name|XRenderFindVisualFormat
argument_list|(
name|dpy
argument_list|,
operator|(
name|Visual
operator|*
operator|)
name|xinfo
operator|.
name|visual
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
condition|)
name|picture
operator|=
name|XRenderCreatePicture
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
name|format
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_XRENDER
name|QtMWMHints
name|mwmhints
decl_stmt|;
name|mwmhints
operator|.
name|flags
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
literal|0
expr_stmt|;
name|mwmhints
operator|.
name|input_mode
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|status
operator|=
literal|0L
expr_stmt|;
if|if
condition|(
name|topLevel
condition|)
block|{
name|ulong
name|wsa_mask
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|Qt
operator|::
name|SplashScreen
condition|)
block|{
comment|//&& customize) {
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_DECORATIONS
expr_stmt|;
name|bool
name|customize
init|=
name|flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|&&
operator|!
operator|(
name|customize
operator|&&
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|)
operator|)
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_BORDER
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_RESIZEH
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_TITLE
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MENU
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MINIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MINIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MAXIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MAXIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
condition|)
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_CLOSE
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if type == Qt::SplashScreen
name|mwmhints
operator|.
name|decorations
operator|=
name|MWM_DECOR_ALL
expr_stmt|;
block|}
if|if
condition|(
name|tool
condition|)
block|{
name|wsa
operator|.
name|save_under
operator|=
name|True
expr_stmt|;
name|wsa_mask
operator||=
name|CWSaveUnder
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|X11BypassWindowManagerHint
condition|)
block|{
name|wsa
operator|.
name|override_redirect
operator|=
name|True
expr_stmt|;
name|wsa_mask
operator||=
name|CWOverrideRedirect
expr_stmt|;
block|}
if|if
condition|(
name|wsa_mask
operator|&&
name|initializeWindow
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|XChangeWindowAttributes
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
name|wsa_mask
argument_list|,
operator|&
name|wsa
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mwmhints
operator|.
name|functions
operator|!=
literal|0
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_FUNCTIONS
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MOVE
operator||
name|MWM_FUNC_RESIZE
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_ALL
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|&&
operator|!
operator|(
name|flags
operator|&
operator|(
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator||
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
operator|)
operator|)
condition|)
block|{
comment|// a special case - only the titlebar without any button
name|mwmhints
operator|.
name|flags
operator|=
name|MWM_HINTS_FUNCTIONS
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_MOVE
operator||
name|MWM_FUNC_RESIZE
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|initializeWindow
condition|)
block|{
comment|// do no initialization
block|}
elseif|else
if|if
condition|(
name|popup
condition|)
block|{
comment|// popup widget
comment|// set EWMH window types
name|setNetWmWindowTypes
argument_list|()
expr_stmt|;
name|wsa
operator|.
name|override_redirect
operator|=
name|True
expr_stmt|;
name|wsa
operator|.
name|save_under
operator|=
name|True
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|XChangeWindowAttributes
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
name|CWOverrideRedirect
operator||
name|CWSaveUnder
argument_list|,
operator|&
name|wsa
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topLevel
operator|&&
operator|!
name|desktop
condition|)
block|{
comment|// top-level widget
if|if
condition|(
operator|!
name|X11
operator|->
name|wm_client_leader
condition|)
name|create_wm_client_leader
argument_list|()
expr_stmt|;
comment|// note: WM_TRANSIENT_FOR is set in QWidgetPrivate::show_sys()
name|XSizeHints
name|size_hints
decl_stmt|;
name|size_hints
operator|.
name|flags
operator|=
name|USSize
operator||
name|PSize
operator||
name|PWinGravity
expr_stmt|;
name|size_hints
operator|.
name|x
operator|=
name|data
operator|.
name|crect
operator|.
name|left
argument_list|()
expr_stmt|;
name|size_hints
operator|.
name|y
operator|=
name|data
operator|.
name|crect
operator|.
name|top
argument_list|()
expr_stmt|;
name|size_hints
operator|.
name|width
operator|=
name|data
operator|.
name|crect
operator|.
name|width
argument_list|()
expr_stmt|;
name|size_hints
operator|.
name|height
operator|=
name|data
operator|.
name|crect
operator|.
name|height
argument_list|()
expr_stmt|;
name|size_hints
operator|.
name|win_gravity
operator|=
name|QApplication
operator|::
name|isRightToLeft
argument_list|()
condition|?
name|NorthEastGravity
else|:
name|NorthWestGravity
expr_stmt|;
name|XWMHints
name|wm_hints
decl_stmt|;
comment|// window manager hints
name|memset
argument_list|(
operator|&
name|wm_hints
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|wm_hints
argument_list|)
argument_list|)
expr_stmt|;
comment|// make valgrind happy
name|wm_hints
operator|.
name|flags
operator|=
name|InputHint
operator||
name|StateHint
operator||
name|WindowGroupHint
expr_stmt|;
name|wm_hints
operator|.
name|input
operator|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11DoNotAcceptFocus
argument_list|)
condition|?
name|False
else|:
name|True
expr_stmt|;
name|wm_hints
operator|.
name|initial_state
operator|=
name|NormalState
expr_stmt|;
name|wm_hints
operator|.
name|window_group
operator|=
name|X11
operator|->
name|wm_client_leader
expr_stmt|;
name|XClassHint
name|class_hint
decl_stmt|;
name|QByteArray
name|appName
init|=
name|qAppName
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|class_hint
operator|.
name|res_name
operator|=
name|appName
operator|.
name|data
argument_list|()
expr_stmt|;
comment|// application name
name|class_hint
operator|.
name|res_class
operator|=
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|QX11Info
operator|::
name|appClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// application class
name|XSetWMProperties
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|argv
argument_list|,
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|argc
argument_list|,
operator|&
name|size_hints
argument_list|,
operator|&
name|wm_hints
argument_list|,
operator|&
name|class_hint
argument_list|)
expr_stmt|;
name|XResizeWindow
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
name|qBound
argument_list|(
literal|1
argument_list|,
name|data
operator|.
name|crect
operator|.
name|width
argument_list|()
argument_list|,
name|XCOORD_MAX
argument_list|)
argument_list|,
name|qBound
argument_list|(
literal|1
argument_list|,
name|data
operator|.
name|crect
operator|.
name|height
argument_list|()
argument_list|,
name|XCOORD_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|XStoreName
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
name|appName
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|Atom
name|protocols
index|[
literal|5
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
name|protocols
index|[
name|n
operator|++
index|]
operator|=
name|ATOM
argument_list|(
name|WM_DELETE_WINDOW
argument_list|)
expr_stmt|;
comment|// support del window protocol
name|protocols
index|[
name|n
operator|++
index|]
operator|=
name|ATOM
argument_list|(
name|WM_TAKE_FOCUS
argument_list|)
expr_stmt|;
comment|// support take focus window protocol
name|protocols
index|[
name|n
operator|++
index|]
operator|=
name|ATOM
argument_list|(
name|_NET_WM_PING
argument_list|)
expr_stmt|;
comment|// support _NET_WM_PING protocol
ifndef|#
directive|ifndef
name|QT_NO_XSYNC
name|protocols
index|[
name|n
operator|++
index|]
operator|=
name|ATOM
argument_list|(
name|_NET_WM_SYNC_REQUEST
argument_list|)
expr_stmt|;
comment|// support _NET_WM_SYNC_REQUEST protocol
endif|#
directive|endif
comment|// QT_NO_XSYNC
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|protocols
index|[
name|n
operator|++
index|]
operator|=
name|ATOM
argument_list|(
name|_NET_WM_CONTEXT_HELP
argument_list|)
expr_stmt|;
name|XSetWMProtocols
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
name|protocols
argument_list|,
name|n
argument_list|)
expr_stmt|;
comment|// set mwm hints
name|SetMWMHints
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
name|mwmhints
argument_list|)
expr_stmt|;
comment|// set EWMH window types
name|setNetWmWindowTypes
argument_list|()
expr_stmt|;
comment|// set _NET_WM_PID
name|long
name|curr_pid
init|=
name|getpid
argument_list|()
decl_stmt|;
name|XChangeProperty
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_PID
argument_list|)
argument_list|,
name|XA_CARDINAL
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|curr_pid
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// when we create a toplevel widget, the frame strut should be dirty
name|data
operator|.
name|fstrut_dirty
operator|=
literal|1
expr_stmt|;
comment|// declare the widget's window role
if|if
condition|(
name|QTLWExtra
modifier|*
name|topData
init|=
name|maybeTopData
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|topData
operator|->
name|role
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QByteArray
name|windowRole
init|=
name|topData
operator|->
name|role
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|XChangeProperty
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
name|ATOM
argument_list|(
name|WM_WINDOW_ROLE
argument_list|)
argument_list|,
name|XA_STRING
argument_list|,
literal|8
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|windowRole
operator|.
name|constData
argument_list|()
argument_list|,
name|windowRole
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set client leader property
name|XChangeProperty
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
name|ATOM
argument_list|(
name|WM_CLIENT_LEADER
argument_list|)
argument_list|,
name|XA_WINDOW
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|X11
operator|->
name|wm_client_leader
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// non-toplevel widgets don't have a frame, so no need to
comment|// update the strut
name|data
operator|.
name|fstrut_dirty
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|initializeWindow
operator|&&
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
comment|// don't erase when resizing
name|wsa
operator|.
name|bit_gravity
operator|=
name|QApplication
operator|::
name|isRightToLeft
argument_list|()
condition|?
name|NorthEastGravity
else|:
name|NorthWestGravity
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|XChangeWindowAttributes
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
name|CWBitGravity
argument_list|,
operator|&
name|wsa
argument_list|)
expr_stmt|;
block|}
comment|// set X11 event mask
if|if
condition|(
name|desktop
condition|)
block|{
comment|//         QWidget* main_desktop = find(id);
comment|//         if (main_desktop->testWFlags(Qt::WPaintDesktop))
comment|//             XSelectInput(dpy, id, stdDesktopEventMask | ExposureMask);
comment|//         else
name|XSelectInput
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
name|stdDesktopEventMask
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|XSelectInput
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
name|stdWidgetEventMask
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TABLET
argument_list|)
name|QTabletDeviceDataList
modifier|*
name|tablet_list
init|=
name|qt_tablet_devices
argument_list|()
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|ptrXSelectExtensionEvent
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tablet_list
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTabletDeviceData
name|tablet
init|=
name|tablet_list
operator|->
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|X11
operator|->
name|ptrXSelectExtensionEvent
argument_list|(
name|dpy
argument_list|,
name|id
argument_list|,
cast|reinterpret_cast
argument_list|<
name|XEventClass
operator|*
argument_list|>
argument_list|(
name|tablet
operator|.
name|eventList
argument_list|)
argument_list|,
name|tablet
operator|.
name|eventCount
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
if|if
condition|(
name|desktop
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topLevel
condition|)
block|{
comment|// set X cursor
if|if
condition|(
name|initializeWindow
condition|)
block|{
name|qt_x11_enforce_cursor
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTLWExtra
modifier|*
name|topData
init|=
name|maybeTopData
argument_list|()
condition|)
if|if
condition|(
operator|!
name|topData
operator|->
name|caption
operator|.
name|isEmpty
argument_list|()
condition|)
name|setWindowTitle_helper
argument_list|(
name|topData
operator|->
name|caption
argument_list|)
expr_stmt|;
comment|//always enable dnd: it's not worth the effort to maintain the state
comment|// NOTE: this always creates topData()
name|X11
operator|->
name|dndEnable
argument_list|(
name|q
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|maybeTopData
argument_list|()
operator|&&
name|maybeTopData
argument_list|()
operator|->
name|opacity
operator|!=
literal|255
condition|)
name|q
operator|->
name|setWindowOpacity
argument_list|(
name|maybeTopData
argument_list|()
operator|->
name|opacity
operator|/
literal|255.
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|qt_x11_enforce_cursor
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|p
init|=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
comment|// reset the cursor on the native parent
name|qt_x11_enforce_cursor
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extra
operator|&&
operator|!
name|extra
operator|->
name|mask
operator|.
name|isEmpty
argument_list|()
operator|&&
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|XShapeCombineRegion
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ShapeBounding
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|extra
operator|->
name|mask
operator|.
name|handle
argument_list|()
argument_list|,
name|ShapeSet
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|hasFocus
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
condition|)
block|{
name|QInputContext
modifier|*
name|inputContext
init|=
name|q
operator|->
name|inputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputContext
condition|)
name|inputContext
operator|->
name|setFocusWidget
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|destroyw
condition|)
block|{
name|qt_XDestroyWindow
argument_list|(
name|q
argument_list|,
name|dpy
argument_list|,
name|destroyw
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTLWExtra
modifier|*
name|topData
init|=
name|maybeTopData
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_XSYNC
if|if
condition|(
name|topData
operator|->
name|syncUpdateCounter
condition|)
name|XSyncDestroyCounter
argument_list|(
name|dpy
argument_list|,
name|topData
operator|->
name|syncUpdateCounter
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// we destroyed our old window - reset the top-level state
name|createTLSysExtra
argument_list|()
expr_stmt|;
block|}
block|}
comment|// newly created windows are positioned at the window system's
comment|// (0,0) position. If the parent uses wrect mapping to expand the
comment|// coordinate system, we must also adjust this widget's window
comment|// system position
if|if
condition|(
operator|!
name|topLevel
operator|&&
operator|!
name|parentWidget
operator|->
name|data
operator|->
name|wrect
operator|.
name|topLeft
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
name|setWSGeometry
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|topLevel
operator|&&
operator|(
name|data
operator|.
name|crect
operator|.
name|width
argument_list|()
operator|==
literal|0
operator|||
name|data
operator|.
name|crect
operator|.
name|height
argument_list|()
operator|==
literal|0
operator|)
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|topLevel
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|XMapWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure that mapped alien widgets are flushed immediately when re-created as native widgets.
if|if
condition|(
name|QWindowSurface
modifier|*
name|surface
init|=
name|q
operator|->
name|windowSurface
argument_list|()
condition|)
name|surface
operator|->
name|flush
argument_list|(
name|q
argument_list|,
name|q
operator|->
name|rect
argument_list|()
argument_list|,
name|q
operator|->
name|mapTo
argument_list|(
name|surface
operator|->
name|window
argument_list|()
argument_list|,
name|QPoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|ALIEN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QWidgetPrivate::create_sys END:"
operator|<<
name|q
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qt_x11_recreateWidget
specifier|static
name|void
name|qt_x11_recreateWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|widget
operator|->
name|inherits
argument_list|(
literal|"QGLWidget"
argument_list|)
condition|)
block|{
comment|// We send QGLWidgets a ParentChange event which causes them to
comment|// recreate their GL context, which in turn causes them to choose
comment|// their visual again. Now that WA_TranslucentBackground is set,
comment|// QGLContext::chooseVisual will select an ARGB visual.
comment|// QGLWidget expects a ParentAboutToChange to be sent first
name|QEvent
name|aboutToChangeEvent
argument_list|(
name|QEvent
operator|::
name|ParentAboutToChange
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|aboutToChangeEvent
argument_list|)
expr_stmt|;
name|QEvent
name|parentChangeEvent
argument_list|(
name|QEvent
operator|::
name|ParentChange
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|parentChangeEvent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// For regular widgets, reparent them with their parent which
comment|// also triggers a recreation of the native window
name|QPoint
name|pos
init|=
name|widget
operator|->
name|pos
argument_list|()
decl_stmt|;
name|bool
name|visible
init|=
name|widget
operator|->
name|isVisible
argument_list|()
decl_stmt|;
if|if
condition|(
name|visible
condition|)
name|widget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|widget
operator|->
name|setParent
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|,
name|widget
operator|->
name|windowFlags
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|->
name|move
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|visible
condition|)
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_x11_recreateNativeWidgetsRecursive
specifier|static
name|void
name|qt_x11_recreateNativeWidgetsRecursive
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|widget
operator|->
name|internalWinId
argument_list|()
condition|)
name|qt_x11_recreateWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
specifier|const
name|QObjectList
modifier|&
name|children
init|=
name|widget
operator|->
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|child
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
condition|)
name|qt_x11_recreateNativeWidgetsRecursive
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|x11UpdateIsOpaque
name|void
name|QWidgetPrivate
operator|::
name|x11UpdateIsOpaque
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|||
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
condition|)
return|return;
name|bool
name|topLevel
init|=
operator|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|Window
operator|)
decl_stmt|;
name|int
name|screen
init|=
name|xinfo
operator|.
name|screen
argument_list|()
decl_stmt|;
if|if
condition|(
name|topLevel
operator|&&
name|X11
operator|->
name|use_xrender
operator|&&
name|X11
operator|->
name|argbVisuals
index|[
name|screen
index|]
operator|&&
name|xinfo
operator|.
name|depth
argument_list|()
operator|!=
literal|32
condition|)
block|{
name|qt_x11_recreateNativeWidgetsRecursive
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*   Returns true if the background is inherited; otherwise returns   false.    Mainly used in the paintOnScreen case. */
end_comment
begin_function
DECL|function|isBackgroundInherited
name|bool
name|QWidgetPrivate
operator|::
name|isBackgroundInherited
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
comment|// windows do not inherit their background
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|||
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|SubWindow
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoSystemBackground
argument_list|)
operator|||
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OpaquePaintEvent
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|const
name|QPalette
modifier|&
name|pal
init|=
name|q
operator|->
name|palette
argument_list|()
decl_stmt|;
name|QPalette
operator|::
name|ColorRole
name|bg
init|=
name|q
operator|->
name|backgroundRole
argument_list|()
decl_stmt|;
name|QBrush
name|brush
init|=
name|pal
operator|.
name|brush
argument_list|(
name|bg
argument_list|)
decl_stmt|;
comment|// non opaque brushes leaves us no choice, we must inherit
if|if
condition|(
operator|!
name|q
operator|->
name|autoFillBackground
argument_list|()
operator|||
operator|!
name|brush
operator|.
name|isOpaque
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
condition|)
block|{
comment|// the background is just a solid color. If there is no
comment|// propagated contents, then we claim as performance
comment|// optimization that it was not inheritet. This is the normal
comment|// case in standard Windows or Motif style.
specifier|const
name|QWidget
modifier|*
name|w
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|isBackgroundInherited
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|destroy
name|void
name|QWidget
operator|::
name|destroy
parameter_list|(
name|bool
name|destroyWindow
parameter_list|,
name|bool
name|destroySubWindows
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|aboutToDestroy
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isWindow
argument_list|()
operator|&&
name|parentWidget
argument_list|()
condition|)
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|d
operator|->
name|effectiveRectFor
argument_list|(
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|deactivateWidgetCleanup
argument_list|()
expr_stmt|;
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QObjectList
name|childList
init|=
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// destroy all widget children
specifier|register
name|QObject
modifier|*
name|obj
init|=
name|childList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|->
name|isWidgetType
argument_list|()
condition|)
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
operator|->
name|destroy
argument_list|(
name|destroySubWindows
argument_list|,
name|destroySubWindows
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|==
name|this
condition|)
name|releaseMouse
argument_list|()
expr_stmt|;
if|if
condition|(
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|==
name|this
condition|)
name|releaseKeyboard
argument_list|()
expr_stmt|;
if|if
condition|(
name|isWindow
argument_list|()
condition|)
name|X11
operator|->
name|deferred_map
operator|.
name|removeAll
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|isModal
argument_list|()
condition|)
block|{
comment|// just be sure we leave modal
name|QApplicationPrivate
operator|::
name|leaveModal
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
condition|)
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|closePopup
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
name|d
operator|->
name|picture
condition|)
block|{
if|if
condition|(
name|destroyWindow
condition|)
name|XRenderFreePicture
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d
operator|->
name|picture
argument_list|)
expr_stmt|;
name|d
operator|->
name|picture
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_XRENDER
comment|// delete the _NET_WM_USER_TIME_WINDOW
name|qt_net_remove_user_time
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
block|{
if|if
condition|(
name|acceptDrops
argument_list|()
condition|)
name|X11
operator|->
name|dndEnable
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isWindow
argument_list|()
condition|)
name|X11
operator|->
name|dndEnable
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|destroyWindow
condition|)
name|qt_XDestroyWindow
argument_list|(
name|this
argument_list|,
name|X11
operator|->
name|display
argument_list|,
name|data
operator|->
name|winid
argument_list|)
expr_stmt|;
block|}
name|QT_TRY
block|{
name|d
operator|->
name|setWinId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|const std::bad_alloc&
argument_list|)
block|{
comment|// swallow - destructors must not throw
block|}
specifier|extern
name|void
name|qPRCleanup
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
decl_stmt|;
comment|// from qapplication_x11.cpp
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Reparented
argument_list|)
condition|)
name|qPRCleanup
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|ic
condition|)
block|{
operator|delete
name|d
operator|->
name|ic
expr_stmt|;
block|}
else|else
block|{
comment|// release previous focus information participating with
comment|// preedit preservation of qic
name|QInputContext
modifier|*
name|qic
init|=
name|QApplicationPrivate
operator|::
name|inputContext
decl_stmt|;
if|if
condition|(
name|qic
condition|)
name|qic
operator|->
name|widgetDestroyed
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setParent_sys
name|void
name|QWidgetPrivate
operator|::
name|setParent_sys
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|ALIEN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QWidgetPrivate::setParent_sys START"
operator|<<
name|q
operator|<<
literal|"parent:"
operator|<<
name|parent
expr_stmt|;
endif|#
directive|endif
name|QX11Info
name|old_xinfo
init|=
name|xinfo
decl_stmt|;
if|if
condition|(
name|parent
operator|&&
name|parent
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
condition|)
block|{
comment|// make sure the widget is created on the same screen as the
comment|// programmer specified desktop widget
name|xinfo
operator|=
name|parent
operator|->
name|d_func
argument_list|()
operator|->
name|xinfo
expr_stmt|;
name|parent
operator|=
literal|0
expr_stmt|;
block|}
name|QTLWExtra
modifier|*
name|topData
init|=
name|maybeTopData
argument_list|()
decl_stmt|;
name|bool
name|wasCreated
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|q
operator|->
name|parentWidget
argument_list|()
operator|&&
name|parent
operator|!=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|effectiveRectFor
argument_list|(
name|q
operator|->
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|extern
name|void
name|qPRCreate
argument_list|(
specifier|const
name|QWidget
operator|*
argument_list|,
name|Window
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursor
name|oldcurs
decl_stmt|;
endif|#
directive|endif
comment|// dnd unregister (we will register again below)
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|)
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// if we are a top then remove our dnd prop for now
comment|// it will get rest later
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|wasCreated
condition|)
name|X11
operator|->
name|dndEnable
argument_list|(
name|q
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|topData
condition|)
name|qt_net_remove_user_time
argument_list|(
name|q
argument_list|)
expr_stmt|;
comment|//     QWidget *oldparent = q->parentWidget();
name|WId
name|old_winid
init|=
name|wasCreated
condition|?
name|data
operator|.
name|winid
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
name|old_winid
operator|=
literal|0
expr_stmt|;
name|setWinId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
name|picture
condition|)
block|{
name|XRenderFreePicture
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|picture
argument_list|)
expr_stmt|;
name|picture
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
comment|// hide and reparent our own window away. Otherwise we might get
comment|// destroyed when emitting the child remove event below. See QWorkspace.
if|if
condition|(
name|wasCreated
operator|&&
name|old_winid
condition|)
block|{
name|XUnmapWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|old_winid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|old_xinfo
operator|.
name|screen
argument_list|()
operator|!=
name|xinfo
operator|.
name|screen
argument_list|()
condition|)
name|XReparentWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|old_winid
argument_list|,
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|topData
condition|)
block|{
name|topData
operator|->
name|parentWinId
operator|=
literal|0
expr_stmt|;
comment|// zero the frame strut and mark it dirty
name|topData
operator|->
name|frameStrut
operator|.
name|setCoords
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// reparenting from top-level, make sure show() works again
name|topData
operator|->
name|waitingForMapNotify
operator|=
literal|0
expr_stmt|;
name|topData
operator|->
name|validWMState
operator|=
literal|0
expr_stmt|;
block|}
name|data
operator|.
name|fstrut_dirty
operator|=
operator|(
operator|!
name|parent
operator|||
operator|(
name|f
operator|&
name|Qt
operator|::
name|Window
operator|)
operator|)
expr_stmt|;
comment|// toplevels get a dirty framestrut
name|QObjectPrivate
operator|::
name|setParent_helper
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|bool
name|explicitlyHidden
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
decl_stmt|;
name|data
operator|.
name|window_flags
operator|=
name|f
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|adjustFlags
argument_list|(
name|data
operator|.
name|window_flags
argument_list|,
name|q
argument_list|)
expr_stmt|;
comment|// keep compatibility with previous versions, we need to preserve the created state
comment|// (but we recreate the winId for the widget being reparented, again for compatibility)
if|if
condition|(
name|wasCreated
condition|)
name|createWinId
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|||
operator|(
operator|!
name|parent
operator|||
name|parent
operator|->
name|isVisible
argument_list|()
operator|)
operator|||
name|explicitlyHidden
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|,
name|explicitlyHidden
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasCreated
condition|)
block|{
name|QObjectList
name|chlist
init|=
name|q
operator|->
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chlist
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// reparent children
name|QObject
modifier|*
name|obj
init|=
name|chlist
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
operator|(
name|QWidget
operator|*
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|xinfo
operator|.
name|screen
argument_list|()
operator|!=
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|xinfo
operator|.
name|screen
argument_list|()
condition|)
block|{
comment|// ### force setParent() to not shortcut out (because
comment|// ### we're setting the parent to the current parent)
comment|// ### setParent will add child back to the list
comment|// ### of children so we need to make sure the
comment|// ### widget won't be added twice.
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|parent
operator|=
literal|0
expr_stmt|;
name|this
operator|->
name|children
operator|.
name|removeOne
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|w
operator|->
name|setParent
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|w
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
if|if
condition|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
condition|)
block|{
name|QWidget
modifier|*
name|nativeParentWidget
init|=
name|w
operator|->
name|nativeParentWidget
argument_list|()
decl_stmt|;
comment|// Qt::WA_NativeWindow ensures that we always have a nativeParentWidget
name|Q_ASSERT
argument_list|(
name|nativeParentWidget
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QPoint
name|p
init|=
name|w
operator|->
name|mapTo
argument_list|(
name|nativeParentWidget
argument_list|,
name|QPoint
argument_list|()
argument_list|)
decl_stmt|;
name|XReparentWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|w
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|nativeParentWidget
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|setParent_sys
argument_list|(
name|q
argument_list|,
name|w
operator|->
name|data
operator|->
name|window_flags
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|isTransient
argument_list|(
name|w
argument_list|)
condition|)
block|{
comment|/*                       when reparenting toplevel windows with toplevel-transient children,                       we need to make sure that the window manager gets the updated                       WM_TRANSIENT_FOR information... unfortunately, some window managers                       don't handle changing WM_TRANSIENT_FOR before the toplevel window is                       visible, so we unmap and remap all toplevel-transient children *after*                       the toplevel parent has been mapped.  thankfully, this is easy in Qt :)                        note that the WM_TRANSIENT_FOR hint is actually updated in                       QWidgetPrivate::show_sys()                     */
if|if
condition|(
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
name|XUnmapWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|w
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|postEvent
argument_list|(
name|w
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|ShowWindowRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|qPRCreate
argument_list|(
name|q
argument_list|,
name|old_winid
argument_list|)
expr_stmt|;
name|updateSystemBackground
argument_list|()
expr_stmt|;
if|if
condition|(
name|old_winid
condition|)
block|{
name|Window
modifier|*
name|cmwret
decl_stmt|;
name|int
name|count
decl_stmt|;
if|if
condition|(
name|XGetWMColormapWindows
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|old_winid
argument_list|,
operator|&
name|cmwret
argument_list|,
operator|&
name|count
argument_list|)
condition|)
block|{
name|Window
modifier|*
name|cmw
decl_stmt|;
name|int
name|cmw_size
init|=
sizeof|sizeof
argument_list|(
name|Window
argument_list|)
operator|*
name|count
decl_stmt|;
name|cmw
operator|=
operator|new
name|Window
index|[
name|count
index|]
expr_stmt|;
name|memcpy
argument_list|(
operator|(
name|char
operator|*
operator|)
name|cmw
argument_list|,
operator|(
name|char
operator|*
operator|)
name|cmwret
argument_list|,
name|cmw_size
argument_list|)
expr_stmt|;
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|cmwret
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cmw
index|[
name|i
index|]
operator|==
name|old_winid
condition|)
block|{
name|cmw
index|[
name|i
index|]
operator|=
name|q
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|int
name|top_count
decl_stmt|;
if|if
condition|(
name|XGetWMColormapWindows
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|window
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|cmwret
argument_list|,
operator|&
name|top_count
argument_list|)
condition|)
block|{
name|Window
modifier|*
name|merged_cmw
init|=
operator|new
name|Window
index|[
name|count
operator|+
name|top_count
index|]
decl_stmt|;
name|memcpy
argument_list|(
operator|(
name|char
operator|*
operator|)
name|merged_cmw
argument_list|,
operator|(
name|char
operator|*
operator|)
name|cmw
argument_list|,
name|cmw_size
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
operator|(
name|char
operator|*
operator|)
name|merged_cmw
operator|+
name|cmw_size
argument_list|,
operator|(
name|char
operator|*
operator|)
name|cmwret
argument_list|,
sizeof|sizeof
argument_list|(
name|Window
argument_list|)
operator|*
name|top_count
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|cmw
expr_stmt|;
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|cmwret
argument_list|)
expr_stmt|;
name|cmw
operator|=
name|merged_cmw
expr_stmt|;
name|count
operator|+=
name|top_count
expr_stmt|;
block|}
name|XSetWMColormapWindows
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|window
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|cmw
argument_list|,
name|count
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|cmw
expr_stmt|;
block|}
name|qt_XDestroyWindow
argument_list|(
name|q
argument_list|,
name|X11
operator|->
name|display
argument_list|,
name|old_winid
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check if we need to register our dropsite
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptDrops
argument_list|)
operator|||
operator|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|q
operator|->
name|parentWidget
argument_list|()
operator|&&
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|)
operator|)
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_IM
argument_list|)
name|ic
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|ALIEN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QWidgetPrivate::setParent_sys END"
operator|<<
name|q
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|mapToGlobal
name|QPoint
name|QWidgetPrivate
operator|::
name|mapToGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|||
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|QPoint
name|p
init|=
name|pos
operator|+
name|q
operator|->
name|data
operator|->
name|crect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
comment|//cannot trust that !isWindow() implies parentWidget() before create
return|return
operator|(
name|q
operator|->
name|isWindow
argument_list|()
operator|||
operator|!
name|q
operator|->
name|parentWidget
argument_list|()
operator|)
condition|?
name|p
else|:
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|p
argument_list|)
return|;
block|}
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
name|Window
name|child
decl_stmt|;
name|QPoint
name|p
init|=
name|mapToWS
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|XTranslateCoordinates
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screen
argument_list|(
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|,
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|child
argument_list|)
expr_stmt|;
return|return
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mapFromGlobal
name|QPoint
name|QWidgetPrivate
operator|::
name|mapFromGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|||
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
comment|//cannot trust that !isWindow() implies parentWidget() before create
name|QPoint
name|p
init|=
operator|(
name|q
operator|->
name|isWindow
argument_list|()
operator|||
operator|!
name|q
operator|->
name|parentWidget
argument_list|()
operator|)
condition|?
name|pos
else|:
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|pos
argument_list|)
decl_stmt|;
return|return
name|p
operator|-
name|q
operator|->
name|data
operator|->
name|crect
operator|.
name|topLeft
argument_list|()
return|;
block|}
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
name|Window
name|child
decl_stmt|;
name|XTranslateCoordinates
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screen
argument_list|(
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|,
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|child
argument_list|)
expr_stmt|;
return|return
name|mapFromWS
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mapToGlobal
name|QPoint
name|QWidget
operator|::
name|mapToGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
name|QPoint
name|offset
init|=
name|data
operator|->
name|crect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
specifier|const
name|QWidget
modifier|*
name|w
init|=
name|this
decl_stmt|;
specifier|const
name|QWidget
modifier|*
name|p
init|=
name|w
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|&&
name|p
condition|)
block|{
name|w
operator|=
name|p
expr_stmt|;
name|p
operator|=
name|p
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
name|offset
operator|+=
name|w
operator|->
name|data
operator|->
name|crect
operator|.
name|topLeft
argument_list|()
expr_stmt|;
block|}
specifier|const
name|QWidgetPrivate
modifier|*
name|wd
init|=
name|w
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|QTLWExtra
modifier|*
name|tlw
init|=
name|wd
operator|->
name|topData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tlw
operator|->
name|embedded
condition|)
return|return
name|pos
operator|+
name|offset
return|;
return|return
name|d
operator|->
name|mapToGlobal
argument_list|(
name|pos
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mapFromGlobal
name|QPoint
name|QWidget
operator|::
name|mapFromGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
name|QPoint
name|offset
init|=
name|data
operator|->
name|crect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
specifier|const
name|QWidget
modifier|*
name|w
init|=
name|this
decl_stmt|;
specifier|const
name|QWidget
modifier|*
name|p
init|=
name|w
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|&&
name|p
condition|)
block|{
name|w
operator|=
name|p
expr_stmt|;
name|p
operator|=
name|p
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
name|offset
operator|+=
name|w
operator|->
name|data
operator|->
name|crect
operator|.
name|topLeft
argument_list|()
expr_stmt|;
block|}
specifier|const
name|QWidgetPrivate
modifier|*
name|wd
init|=
name|w
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|QTLWExtra
modifier|*
name|tlw
init|=
name|wd
operator|->
name|topData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tlw
operator|->
name|embedded
condition|)
return|return
name|pos
operator|-
name|offset
return|;
return|return
name|d
operator|->
name|mapFromGlobal
argument_list|(
name|pos
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|updateSystemBackground
name|void
name|QWidgetPrivate
operator|::
name|updateSystemBackground
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|||
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
return|return;
name|QBrush
name|brush
init|=
name|q
operator|->
name|palette
argument_list|()
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|q
operator|->
name|backgroundRole
argument_list|()
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|WindowType
name|type
init|=
name|q
operator|->
name|windowType
argument_list|()
decl_stmt|;
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
operator|||
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoSystemBackground
argument_list|)
operator|||
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_UpdatesDisabled
argument_list|)
operator|||
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|||
name|type
operator|==
name|Qt
operator|::
name|ToolTip
condition|)
block|{
if|if
condition|(
name|QX11Info
operator|::
name|isCompositingManagerRunning
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
operator|&&
operator|!
operator|(
name|q
operator|->
name|parent
argument_list|()
operator|)
condition|)
name|XSetWindowBackground
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|QColormap
operator|::
name|instance
argument_list|(
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
operator|.
name|pixel
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|XSetWindowBackgroundPixmap
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|XNone
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
operator|&&
name|brush
operator|.
name|isOpaque
argument_list|()
condition|)
name|XSetWindowBackground
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|QColormap
operator|::
name|instance
argument_list|(
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
operator|.
name|pixel
argument_list|(
name|brush
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|isBackgroundInherited
argument_list|()
condition|)
name|XSetWindowBackgroundPixmap
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ParentRelative
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|TexturePattern
condition|)
block|{
specifier|extern
name|QPixmap
name|qt_toX11Pixmap
argument_list|(
specifier|const
name|QPixmap
operator|&
name|pixmap
argument_list|)
decl_stmt|;
comment|// qpixmap_x11.cpp
name|XSetWindowBackgroundPixmap
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QX11PixmapData
operator|*
argument_list|>
argument_list|(
name|qt_toX11Pixmap
argument_list|(
name|brush
operator|.
name|texture
argument_list|()
argument_list|)
operator|.
name|data
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|x11ConvertToDefaultDepth
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|XSetWindowBackground
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|QColormap
operator|::
name|instance
argument_list|(
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
operator|.
name|pixel
argument_list|(
name|brush
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|setCursor_sys
name|void
name|QWidgetPrivate
operator|::
name|setCursor_sys
parameter_list|(
specifier|const
name|QCursor
modifier|&
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|qt_x11_enforce_cursor
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|XFlush
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unsetCursor_sys
name|void
name|QWidgetPrivate
operator|::
name|unsetCursor_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|qt_x11_enforce_cursor
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|XFlush
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
specifier|static
name|XTextProperty
modifier|*
DECL|function|qstring_to_xtp
name|qstring_to_xtp
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
specifier|static
name|XTextProperty
name|tp
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
specifier|static
name|bool
name|free_prop
init|=
literal|true
decl_stmt|;
comment|// we can't free tp.value in case it references
comment|// the data of the static QCString below.
if|if
condition|(
name|tp
operator|.
name|value
condition|)
block|{
if|if
condition|(
name|free_prop
condition|)
name|XFree
argument_list|(
name|tp
operator|.
name|value
argument_list|)
expr_stmt|;
name|tp
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|free_prop
operator|=
literal|true
expr_stmt|;
block|}
specifier|static
specifier|const
name|QTextCodec
modifier|*
name|mapper
init|=
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
decl_stmt|;
name|int
name|errCode
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|mapper
condition|)
block|{
name|QByteArray
name|mapped
init|=
name|mapper
operator|->
name|fromUnicode
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|char
modifier|*
name|tl
index|[
literal|2
index|]
decl_stmt|;
name|tl
index|[
literal|0
index|]
operator|=
name|mapped
operator|.
name|data
argument_list|()
expr_stmt|;
name|tl
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|errCode
operator|=
name|XmbTextListToTextProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tl
argument_list|,
literal|1
argument_list|,
name|XStdICCTextStyle
argument_list|,
operator|&
name|tp
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
if|if
condition|(
name|errCode
operator|<
literal|0
condition|)
name|qDebug
argument_list|(
literal|"qstring_to_xtp result code %d"
argument_list|,
name|errCode
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
operator|!
name|mapper
operator|||
name|errCode
operator|<
literal|0
condition|)
block|{
specifier|static
name|QByteArray
name|qcs
decl_stmt|;
name|qcs
operator|=
name|s
operator|.
name|toAscii
argument_list|()
expr_stmt|;
name|tp
operator|.
name|value
operator|=
operator|(
name|uchar
operator|*
operator|)
name|qcs
operator|.
name|data
argument_list|()
expr_stmt|;
name|tp
operator|.
name|encoding
operator|=
name|XA_STRING
expr_stmt|;
name|tp
operator|.
name|format
operator|=
literal|8
expr_stmt|;
name|tp
operator|.
name|nitems
operator|=
name|qcs
operator|.
name|length
argument_list|()
expr_stmt|;
name|free_prop
operator|=
literal|false
expr_stmt|;
block|}
comment|// ### If we knew WM could understand unicode, we could use
comment|// ### a much simpler, cheaper encoding...
comment|/*         tp.value = (XChar2b*)s.unicode();         tp.encoding = XA_UNICODE; // wish         tp.format = 16;         tp.nitems = s.length();     */
return|return
operator|&
name|tp
return|;
block|}
end_function
begin_function
DECL|function|setWindowTitle_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowTitle_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|caption
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
return|return;
name|XSetWMName
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|qstring_to_xtp
argument_list|(
name|caption
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|net_wm_name
init|=
name|caption
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_NAME
argument_list|)
argument_list|,
name|ATOM
argument_list|(
name|UTF8_STRING
argument_list|)
argument_list|,
literal|8
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|net_wm_name
operator|.
name|data
argument_list|()
argument_list|,
name|net_wm_name
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowIcon_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowIcon_sys
parameter_list|(
name|bool
name|forceReset
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
return|return;
name|QTLWExtra
modifier|*
name|topData
init|=
name|this
operator|->
name|topData
argument_list|()
decl_stmt|;
if|if
condition|(
name|topData
operator|->
name|iconPixmap
operator|&&
operator|!
name|forceReset
condition|)
comment|// already been set
return|return;
comment|// preparing images to set the _NET_WM_ICON property
name|QIcon
name|icon
init|=
name|q
operator|->
name|windowIcon
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|long
argument_list|>
name|icon_data
decl_stmt|;
name|Qt
operator|::
name|HANDLE
name|pixmap_handle
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QSize
argument_list|>
name|availableSizes
init|=
name|icon
operator|.
name|availableSizes
argument_list|()
decl_stmt|;
if|if
condition|(
name|availableSizes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// try to use default sizes since the icon can be a scalable image like svg.
name|availableSizes
operator|.
name|push_back
argument_list|(
name|QSize
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|availableSizes
operator|.
name|push_back
argument_list|(
name|QSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|availableSizes
operator|.
name|push_back
argument_list|(
name|QSize
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
argument_list|)
expr_stmt|;
name|availableSizes
operator|.
name|push_back
argument_list|(
name|QSize
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|availableSizes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QSize
name|size
init|=
name|availableSizes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QPixmap
name|pixmap
init|=
name|icon
operator|.
name|pixmap
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QImage
name|image
init|=
name|pixmap
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|icon_data
operator|.
name|size
argument_list|()
decl_stmt|;
name|icon_data
operator|.
name|resize
argument_list|(
name|pos
operator|+
literal|2
operator|+
name|image
operator|.
name|width
argument_list|()
operator|*
name|image
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|icon_data
index|[
name|pos
operator|++
index|]
operator|=
name|image
operator|.
name|width
argument_list|()
expr_stmt|;
name|icon_data
index|[
name|pos
operator|++
index|]
operator|=
name|image
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|long
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
condition|)
block|{
name|memcpy
argument_list|(
name|icon_data
operator|.
name|data
argument_list|()
operator|+
name|pos
argument_list|,
name|image
operator|.
name|scanLine
argument_list|(
literal|0
argument_list|)
argument_list|,
name|image
operator|.
name|byteCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|uint
modifier|*
name|scanLine
init|=
cast|reinterpret_cast
argument_list|<
name|uint
operator|*
argument_list|>
argument_list|(
name|image
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
name|icon_data
index|[
name|pos
operator|+
name|y
operator|*
name|image
operator|.
name|width
argument_list|()
operator|+
name|x
index|]
operator|=
name|scanLine
index|[
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|icon_data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|extern
name|QPixmap
name|qt_toX11Pixmap
argument_list|(
specifier|const
name|QPixmap
operator|&
name|pixmap
argument_list|)
decl_stmt|;
comment|/*               if the app is running on an unknown desktop, or it is not               using the default visual, convert the icon to 1bpp as stated               in the ICCCM section 4.1.2.4; otherwise, create the icon pixmap               in the default depth (even though this violates the ICCCM)             */
if|if
condition|(
name|X11
operator|->
name|desktopEnvironment
operator|==
name|DE_UNKNOWN
operator|||
operator|!
name|QX11Info
operator|::
name|appDefaultVisual
argument_list|(
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
operator|||
operator|!
name|QX11Info
operator|::
name|appDefaultColormap
argument_list|(
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
condition|)
block|{
comment|// unknown DE or non-default visual/colormap, use 1bpp bitmap
if|if
condition|(
operator|!
name|forceReset
operator|||
operator|!
name|topData
operator|->
name|iconPixmap
condition|)
name|topData
operator|->
name|iconPixmap
operator|=
operator|new
name|QPixmap
argument_list|(
name|qt_toX11Pixmap
argument_list|(
name|QBitmap
argument_list|(
name|icon
operator|.
name|pixmap
argument_list|(
name|QSize
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pixmap_handle
operator|=
name|topData
operator|->
name|iconPixmap
operator|->
name|handle
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// default depth, use a normal pixmap (even though this
comment|// violates the ICCCM), since this works on all DEs known to Qt
if|if
condition|(
operator|!
name|forceReset
operator|||
operator|!
name|topData
operator|->
name|iconPixmap
condition|)
name|topData
operator|->
name|iconPixmap
operator|=
operator|new
name|QPixmap
argument_list|(
name|qt_toX11Pixmap
argument_list|(
name|icon
operator|.
name|pixmap
argument_list|(
name|QSize
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pixmap_handle
operator|=
cast|static_cast
argument_list|<
name|QX11PixmapData
operator|*
argument_list|>
argument_list|(
name|topData
operator|->
name|iconPixmap
operator|->
name|data
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|x11ConvertToDefaultDepth
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|icon_data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_ICON
argument_list|)
argument_list|,
name|XA_CARDINAL
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|icon_data
operator|.
name|data
argument_list|()
argument_list|,
name|icon_data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XDeleteProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_ICON
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XWMHints
modifier|*
name|h
init|=
name|XGetWMHints
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
decl_stmt|;
name|XWMHints
name|wm_hints
decl_stmt|;
if|if
condition|(
operator|!
name|h
condition|)
block|{
name|memset
argument_list|(
operator|&
name|wm_hints
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|wm_hints
argument_list|)
argument_list|)
expr_stmt|;
comment|// make valgrind happy
name|h
operator|=
operator|&
name|wm_hints
expr_stmt|;
block|}
if|if
condition|(
name|pixmap_handle
condition|)
block|{
name|h
operator|->
name|icon_pixmap
operator|=
name|pixmap_handle
expr_stmt|;
name|h
operator|->
name|flags
operator||=
name|IconPixmapHint
expr_stmt|;
block|}
else|else
block|{
name|h
operator|->
name|icon_pixmap
operator|=
literal|0
expr_stmt|;
name|h
operator|->
name|flags
operator|&=
operator|~
operator|(
name|IconPixmapHint
operator||
name|IconMaskHint
operator|)
expr_stmt|;
block|}
name|XSetWMHints
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|h
operator|!=
operator|&
name|wm_hints
condition|)
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|h
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowIconText_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowIconText_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|iconText
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
return|return;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|XSetWMIconName
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|qstring_to_xtp
argument_list|(
name|iconText
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|icon_name
init|=
name|iconText
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_ICON_NAME
argument_list|)
argument_list|,
name|ATOM
argument_list|(
name|UTF8_STRING
argument_list|)
argument_list|,
literal|8
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|icon_name
operator|.
name|constData
argument_list|()
argument_list|,
name|icon_name
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|grabMouse
name|void
name|QWidget
operator|::
name|grabMouse
parameter_list|()
block|{
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
if|if
condition|(
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|&&
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|!=
name|this
condition|)
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
name|int
name|status
init|=
endif|#
directive|endif
name|XGrabPointer
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|effectiveWinId
argument_list|()
argument_list|,
name|False
argument_list|,
call|(
name|uint
call|)
argument_list|(
name|ButtonPressMask
operator||
name|ButtonReleaseMask
operator||
name|PointerMotionMask
operator||
name|EnterWindowMask
operator||
name|LeaveWindowMask
argument_list|)
argument_list|,
name|GrabModeAsync
argument_list|,
name|GrabModeAsync
argument_list|,
name|XNone
argument_list|,
name|XNone
argument_list|,
name|X11
operator|->
name|time
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|status
condition|)
block|{
specifier|const
name|char
modifier|*
name|s
init|=
name|status
operator|==
name|GrabNotViewable
condition|?
literal|"\"GrabNotViewable\""
else|:
name|status
operator|==
name|AlreadyGrabbed
condition|?
literal|"\"AlreadyGrabbed\""
else|:
name|status
operator|==
name|GrabFrozen
condition|?
literal|"\"GrabFrozen\""
else|:
name|status
operator|==
name|GrabInvalidTime
condition|?
literal|"\"GrabInvalidTime\""
else|:
literal|"<?>"
decl_stmt|;
name|qWarning
argument_list|(
literal|"QWidget::grabMouse: Failed with %s"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|=
name|this
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|grabMouse
name|void
name|QWidget
operator|::
name|grabMouse
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
if|if
condition|(
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|&&
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|!=
name|this
condition|)
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
name|int
name|status
init|=
endif|#
directive|endif
name|XGrabPointer
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|effectiveWinId
argument_list|()
argument_list|,
name|False
argument_list|,
call|(
name|uint
call|)
argument_list|(
name|ButtonPressMask
operator||
name|ButtonReleaseMask
operator||
name|PointerMotionMask
operator||
name|EnterWindowMask
operator||
name|LeaveWindowMask
argument_list|)
argument_list|,
name|GrabModeAsync
argument_list|,
name|GrabModeAsync
argument_list|,
name|XNone
argument_list|,
name|cursor
operator|.
name|handle
argument_list|()
argument_list|,
name|X11
operator|->
name|time
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|status
condition|)
block|{
specifier|const
name|char
modifier|*
name|s
init|=
name|status
operator|==
name|GrabNotViewable
condition|?
literal|"\"GrabNotViewable\""
else|:
name|status
operator|==
name|AlreadyGrabbed
condition|?
literal|"\"AlreadyGrabbed\""
else|:
name|status
operator|==
name|GrabFrozen
condition|?
literal|"\"GrabFrozen\""
else|:
name|status
operator|==
name|GrabInvalidTime
condition|?
literal|"\"GrabInvalidTime\""
else|:
literal|"<?>"
decl_stmt|;
name|qWarning
argument_list|(
literal|"QWidget::grabMouse: Failed with %s"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|=
name|this
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|releaseMouse
name|void
name|QWidget
operator|::
name|releaseMouse
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
operator|&&
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|==
name|this
condition|)
block|{
name|XUngrabPointer
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|X11
operator|->
name|time
argument_list|)
expr_stmt|;
name|XFlush
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
name|QWidgetPrivate
operator|::
name|mouseGrabber
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|grabKeyboard
name|void
name|QWidget
operator|::
name|grabKeyboard
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
if|if
condition|(
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|&&
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|!=
name|this
condition|)
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|->
name|releaseKeyboard
argument_list|()
expr_stmt|;
name|XGrabKeyboard
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|effectiveWinId
argument_list|()
argument_list|,
name|False
argument_list|,
name|GrabModeAsync
argument_list|,
name|GrabModeAsync
argument_list|,
name|X11
operator|->
name|time
argument_list|)
expr_stmt|;
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|=
name|this
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|releaseKeyboard
name|void
name|QWidget
operator|::
name|releaseKeyboard
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
operator|&&
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|==
name|this
condition|)
block|{
name|XUngrabKeyboard
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|X11
operator|->
name|time
argument_list|)
expr_stmt|;
name|QWidgetPrivate
operator|::
name|keyboardGrabber
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mouseGrabber
name|QWidget
modifier|*
name|QWidget
operator|::
name|mouseGrabber
parameter_list|()
block|{
return|return
name|QWidgetPrivate
operator|::
name|mouseGrabber
return|;
block|}
end_function
begin_function
DECL|function|keyboardGrabber
name|QWidget
modifier|*
name|QWidget
operator|::
name|keyboardGrabber
parameter_list|()
block|{
return|return
name|QWidgetPrivate
operator|::
name|keyboardGrabber
return|;
block|}
end_function
begin_function
DECL|function|activateWindow
name|void
name|QWidget
operator|::
name|activateWindow
parameter_list|()
block|{
name|QWidget
modifier|*
name|tlw
init|=
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
name|tlw
operator|->
name|isVisible
argument_list|()
operator|&&
operator|!
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|embedded
operator|&&
operator|!
name|X11
operator|->
name|deferred_map
operator|.
name|contains
argument_list|(
name|tlw
argument_list|)
condition|)
block|{
if|if
condition|(
name|X11
operator|->
name|userTime
operator|==
literal|0
condition|)
name|X11
operator|->
name|userTime
operator|=
name|X11
operator|->
name|time
expr_stmt|;
name|qt_net_update_user_time
argument_list|(
name|tlw
argument_list|,
name|X11
operator|->
name|userTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_ACTIVE_WINDOW
argument_list|)
argument_list|)
operator|&&
operator|!
operator|(
name|tlw
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|X11BypassWindowManagerHint
operator|)
condition|)
block|{
name|XEvent
name|e
decl_stmt|;
name|e
operator|.
name|xclient
operator|.
name|type
operator|=
name|ClientMessage
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|message_type
operator|=
name|ATOM
argument_list|(
name|_NET_ACTIVE_WINDOW
argument_list|)
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|display
operator|=
name|X11
operator|->
name|display
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|window
operator|=
name|tlw
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
comment|// 1 == application
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
operator|=
name|X11
operator|->
name|userTime
expr_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|aw
init|=
name|QApplication
operator|::
name|activeWindow
argument_list|()
condition|)
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
operator|=
name|aw
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
else|else
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
operator|=
name|XNone
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tlw
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
name|SubstructureNotifyMask
operator||
name|SubstructureRedirectMask
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|qt_widget_private
argument_list|(
name|tlw
argument_list|)
operator|->
name|topData
argument_list|()
operator|->
name|waitingForMapNotify
condition|)
name|XSetInputFocus
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tlw
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|XRevertToParent
argument_list|,
name|X11
operator|->
name|time
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setWindowState
name|void
name|QWidget
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowStates
name|newstate
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|bool
name|needShow
init|=
literal|false
decl_stmt|;
name|Qt
operator|::
name|WindowStates
name|oldstate
init|=
name|windowState
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldstate
operator|==
name|newstate
condition|)
return|return;
if|if
condition|(
name|isWindow
argument_list|()
condition|)
block|{
comment|// Ensure the initial size is valid, since we store it as normalGeometry below.
if|if
condition|(
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
operator|&&
operator|!
name|isVisible
argument_list|()
condition|)
name|adjustSize
argument_list|()
expr_stmt|;
name|QTLWExtra
modifier|*
name|top
init|=
name|d
operator|->
name|topData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|!=
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
block|{
if|if
condition|(
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|)
operator|&&
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|&&
operator|!
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
condition|)
name|top
operator|->
name|normalGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
name|qt_change_net_wm_state
argument_list|(
name|this
argument_list|,
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
condition|)
block|{
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
comment|// save original geometry
specifier|const
name|QRect
name|normalGeometry
init|=
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
name|data
operator|->
name|fstrut_dirty
operator|=
literal|true
expr_stmt|;
specifier|const
name|QRect
name|maxRect
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|r
init|=
name|top
operator|->
name|normalGeometry
decl_stmt|;
specifier|const
name|QRect
name|fs
init|=
name|d
operator|->
name|frameStrut
argument_list|()
decl_stmt|;
name|setGeometry
argument_list|(
name|maxRect
operator|.
name|x
argument_list|()
operator|+
name|fs
operator|.
name|left
argument_list|()
argument_list|,
name|maxRect
operator|.
name|y
argument_list|()
operator|+
name|fs
operator|.
name|top
argument_list|()
argument_list|,
name|maxRect
operator|.
name|width
argument_list|()
operator|-
name|fs
operator|.
name|left
argument_list|()
operator|-
name|fs
operator|.
name|right
argument_list|()
argument_list|,
name|maxRect
operator|.
name|height
argument_list|()
operator|-
name|fs
operator|.
name|top
argument_list|()
operator|-
name|fs
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|top
operator|->
name|normalGeometry
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
name|top
operator|->
name|normalGeometry
operator|.
name|width
argument_list|()
operator|<
literal|0
condition|)
name|top
operator|->
name|normalGeometry
operator|=
name|normalGeometry
expr_stmt|;
block|}
else|else
block|{
comment|// restore original geometry
name|setGeometry
argument_list|(
name|top
operator|->
name|normalGeometry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
operator|!=
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
condition|)
block|{
if|if
condition|(
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
block|{
name|top
operator|->
name|normalGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
name|top
operator|->
name|fullScreenOffset
operator|=
name|d
operator|->
name|frameStrut
argument_list|()
operator|.
name|topLeft
argument_list|()
expr_stmt|;
block|}
name|qt_change_net_wm_state
argument_list|(
name|this
argument_list|,
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|needShow
operator|=
name|isVisible
argument_list|()
expr_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
block|{
name|data
operator|->
name|fstrut_dirty
operator|=
literal|true
expr_stmt|;
specifier|const
name|QRect
name|normalGeometry
init|=
name|geometry
argument_list|()
decl_stmt|;
specifier|const
name|QPoint
name|fullScreenOffset
init|=
name|d
operator|->
name|frameStrut
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|top
operator|->
name|savedFlags
operator|=
name|windowFlags
argument_list|()
expr_stmt|;
name|setParent
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Window
operator||
name|Qt
operator|::
name|FramelessWindowHint
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|r
init|=
name|top
operator|->
name|normalGeometry
decl_stmt|;
name|setGeometry
argument_list|(
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|top
operator|->
name|normalGeometry
operator|=
name|r
expr_stmt|;
if|if
condition|(
name|top
operator|->
name|normalGeometry
operator|.
name|width
argument_list|()
operator|<
literal|0
condition|)
block|{
name|top
operator|->
name|normalGeometry
operator|=
name|normalGeometry
expr_stmt|;
name|top
operator|->
name|fullScreenOffset
operator|=
name|fullScreenOffset
expr_stmt|;
block|}
block|}
else|else
block|{
name|setParent
argument_list|(
literal|0
argument_list|,
name|top
operator|->
name|savedFlags
argument_list|)
expr_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
comment|// from fullscreen to maximized
name|data
operator|->
name|fstrut_dirty
operator|=
literal|true
expr_stmt|;
specifier|const
name|QRect
name|maxRect
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|r
init|=
name|top
operator|->
name|normalGeometry
decl_stmt|;
specifier|const
name|QRect
name|fs
init|=
name|d
operator|->
name|frameStrut
argument_list|()
decl_stmt|;
name|setGeometry
argument_list|(
name|maxRect
operator|.
name|x
argument_list|()
operator|+
name|fs
operator|.
name|left
argument_list|()
argument_list|,
name|maxRect
operator|.
name|y
argument_list|()
operator|+
name|fs
operator|.
name|top
argument_list|()
argument_list|,
name|maxRect
operator|.
name|width
argument_list|()
operator|-
name|fs
operator|.
name|left
argument_list|()
operator|-
name|fs
operator|.
name|right
argument_list|()
argument_list|,
name|maxRect
operator|.
name|height
argument_list|()
operator|-
name|fs
operator|.
name|top
argument_list|()
operator|-
name|fs
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|top
operator|->
name|normalGeometry
operator|=
name|r
expr_stmt|;
block|}
else|else
block|{
comment|// restore original geometry
name|setGeometry
argument_list|(
name|top
operator|->
name|normalGeometry
operator|.
name|adjusted
argument_list|(
operator|-
name|top
operator|->
name|fullScreenOffset
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|top
operator|->
name|fullScreenOffset
operator|.
name|y
argument_list|()
argument_list|,
operator|-
name|top
operator|->
name|fullScreenOffset
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|top
operator|->
name|fullScreenOffset
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|createWinId
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
operator|!=
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
block|{
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
name|XEvent
name|e
decl_stmt|;
name|e
operator|.
name|xclient
operator|.
name|type
operator|=
name|ClientMessage
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|message_type
operator|=
name|ATOM
argument_list|(
name|WM_CHANGE_STATE
argument_list|)
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|display
operator|=
name|X11
operator|->
name|display
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|window
operator|=
name|data
operator|->
name|winid
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
operator|=
name|IconicState
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|d
operator|->
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
argument_list|,
name|False
argument_list|,
operator|(
name|SubstructureNotifyMask
operator||
name|SubstructureRedirectMask
operator|)
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
name|XMapWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|effectiveWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|needShow
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|data
operator|->
name|window_state
operator|=
name|newstate
expr_stmt|;
if|if
condition|(
name|needShow
condition|)
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|activateWindow
argument_list|()
expr_stmt|;
name|QWindowStateChangeEvent
name|e
argument_list|(
name|oldstate
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal   Platform-specific part of QWidget::show(). */
end_comment
begin_function
DECL|function|show_sys
name|void
name|QWidgetPrivate
operator|::
name|show_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTLWExtra
modifier|*
name|tlwExtra
init|=
name|maybeTopData
argument_list|()
condition|)
name|tlwExtra
operator|->
name|waitingForMapNotify
operator|=
literal|0
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|XWMHints
modifier|*
name|h
init|=
name|XGetWMHints
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
decl_stmt|;
name|XWMHints
name|wm_hints
decl_stmt|;
name|bool
name|got_hints
init|=
name|h
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|got_hints
condition|)
block|{
name|memset
argument_list|(
operator|&
name|wm_hints
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|wm_hints
argument_list|)
argument_list|)
expr_stmt|;
comment|// make valgrind happy
name|h
operator|=
operator|&
name|wm_hints
expr_stmt|;
block|}
name|h
operator|->
name|initial_state
operator|=
name|q
operator|->
name|isMinimized
argument_list|()
condition|?
name|IconicState
else|:
name|NormalState
expr_stmt|;
name|h
operator|->
name|flags
operator||=
name|StateHint
expr_stmt|;
name|XSetWMHints
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|got_hints
condition|)
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|h
argument_list|)
expr_stmt|;
comment|// update WM_NORMAL_HINTS
name|do_size_hints
argument_list|(
name|q
argument_list|,
name|extra
argument_list|)
expr_stmt|;
comment|// udpate WM_TRANSIENT_FOR
if|if
condition|(
name|isTransient
argument_list|(
name|q
argument_list|)
condition|)
block|{
name|QWidget
modifier|*
name|p
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
comment|// hackish ... try to find the main window related to this QMenu
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|q
argument_list|)
condition|)
block|{
name|p
operator|=
cast|static_cast
argument_list|<
name|QMenuPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|causedPopup
operator|.
name|widget
expr_stmt|;
if|if
condition|(
operator|!
name|p
condition|)
name|p
operator|=
name|q
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|p
condition|)
name|p
operator|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|q
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|p
condition|)
name|p
operator|=
name|qApp
operator|->
name|activeWindow
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|p
condition|)
name|p
operator|=
name|p
operator|->
name|window
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
condition|)
block|{
comment|// transient for window
name|XSetTransientForHint
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|p
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// transient for group
name|XSetTransientForHint
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|X11
operator|->
name|wm_client_leader
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update _MOTIF_WM_HINTS
name|QtMWMHints
name|mwmhints
init|=
name|GetMWMHints
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|window_modality
operator|!=
name|Qt
operator|::
name|NonModal
condition|)
block|{
switch|switch
condition|(
name|data
operator|.
name|window_modality
condition|)
block|{
case|case
name|Qt
operator|::
name|WindowModal
case|:
name|mwmhints
operator|.
name|input_mode
operator|=
name|MWM_INPUT_PRIMARY_APPLICATION_MODAL
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ApplicationModal
case|:
default|default:
name|mwmhints
operator|.
name|input_mode
operator|=
name|MWM_INPUT_FULL_APPLICATION_MODAL
expr_stmt|;
break|break;
block|}
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_INPUT_MODE
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|input_mode
operator|=
name|MWM_INPUT_MODELESS
expr_stmt|;
name|mwmhints
operator|.
name|flags
operator|&=
operator|~
name|MWM_HINTS_INPUT_MODE
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|minimumSize
argument_list|()
operator|==
name|q
operator|->
name|maximumSize
argument_list|()
condition|)
block|{
comment|// fixed size, remove the resize handle (since mwm/dtwm
comment|// isn't smart enough to do it itself)
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_FUNCTIONS
expr_stmt|;
if|if
condition|(
name|mwmhints
operator|.
name|functions
operator|==
name|MWM_FUNC_ALL
condition|)
block|{
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_MOVE
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|functions
operator|&=
operator|~
name|MWM_FUNC_RESIZE
expr_stmt|;
block|}
if|if
condition|(
name|mwmhints
operator|.
name|decorations
operator|==
name|MWM_DECOR_ALL
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_DECORATIONS
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
operator|(
name|MWM_DECOR_BORDER
operator||
name|MWM_DECOR_TITLE
operator||
name|MWM_DECOR_MENU
operator|)
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|decorations
operator|&=
operator|~
name|MWM_DECOR_RESIZEH
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_DECORATIONS
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MINIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MINIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_DECORATIONS
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MAXIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MAXIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
condition|)
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_CLOSE
expr_stmt|;
block|}
name|SetMWMHints
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|mwmhints
argument_list|)
expr_stmt|;
comment|// update _NET_WM_STATE
name|QVector
argument_list|<
name|Atom
argument_list|>
name|netWmState
init|=
name|getNetWmState
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|q
operator|->
name|windowFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
condition|)
block|{
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"QWidget: Incompatible window flags: the window can't be on top and on bottom at the same time"
expr_stmt|;
if|if
condition|(
operator|!
name|netWmState
operator|.
name|contains
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_ABOVE
argument_list|)
argument_list|)
condition|)
name|netWmState
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_ABOVE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|netWmState
operator|.
name|contains
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_STAYS_ON_TOP
argument_list|)
argument_list|)
condition|)
name|netWmState
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_STAYS_ON_TOP
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
block|{
if|if
condition|(
operator|!
name|netWmState
operator|.
name|contains
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_BELOW
argument_list|)
argument_list|)
condition|)
name|netWmState
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_BELOW
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|isFullScreen
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|netWmState
operator|.
name|contains
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
condition|)
name|netWmState
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|isMaximized
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|netWmState
operator|.
name|contains
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|)
condition|)
name|netWmState
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|netWmState
operator|.
name|contains
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
condition|)
name|netWmState
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|.
name|window_modality
operator|!=
name|Qt
operator|::
name|NonModal
condition|)
block|{
if|if
condition|(
operator|!
name|netWmState
operator|.
name|contains
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MODAL
argument_list|)
argument_list|)
condition|)
name|netWmState
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MODAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|netWmState
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_STATE
argument_list|)
argument_list|,
name|XA_ATOM
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|netWmState
operator|.
name|data
argument_list|()
argument_list|,
name|netWmState
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XDeleteProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_STATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set _NET_WM_USER_TIME
name|Time
name|userTime
init|=
name|X11
operator|->
name|userTime
decl_stmt|;
name|bool
name|setUserTime
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_ShowWithoutActivating
argument_list|)
condition|)
block|{
name|userTime
operator|=
literal|0
expr_stmt|;
name|setUserTime
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|userTime
operator|!=
name|CurrentTime
condition|)
block|{
name|setUserTime
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|setUserTime
condition|)
name|qt_net_update_user_time
argument_list|(
name|q
argument_list|,
name|userTime
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XSYNC
if|if
condition|(
operator|!
name|topData
argument_list|()
operator|->
name|syncUpdateCounter
condition|)
block|{
name|XSyncValue
name|value
decl_stmt|;
name|XSyncIntToValue
argument_list|(
operator|&
name|value
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|topData
argument_list|()
operator|->
name|syncUpdateCounter
operator|=
name|XSyncCreateCounter
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_SYNC_REQUEST_COUNTER
argument_list|)
argument_list|,
name|XA_CARDINAL
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
operator|&
name|topData
argument_list|()
operator|->
name|syncUpdateCounter
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|topData
argument_list|()
operator|->
name|newCounterValueHi
operator|=
literal|0
expr_stmt|;
name|topData
argument_list|()
operator|->
name|newCounterValueLo
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|topData
argument_list|()
operator|->
name|embedded
operator|&&
operator|(
name|topData
argument_list|()
operator|->
name|validWMState
operator|||
name|topData
argument_list|()
operator|->
name|waitingForMapNotify
operator|)
operator|&&
operator|!
name|q
operator|->
name|isMinimized
argument_list|()
condition|)
block|{
name|X11
operator|->
name|deferred_map
operator|.
name|append
argument_list|(
name|q
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|q
operator|->
name|isMaximized
argument_list|()
operator|&&
operator|!
name|q
operator|->
name|isFullScreen
argument_list|()
operator|&&
operator|!
operator|(
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|)
operator|&&
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|XMapWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|fstrut_dirty
operator|=
literal|true
expr_stmt|;
name|qt_x11_wait_for_window_manager
argument_list|(
name|q
argument_list|)
expr_stmt|;
comment|// if the wm was not smart enough to adjust our size, do that manually
name|QRect
name|maxRect
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|QTLWExtra
modifier|*
name|top
init|=
name|topData
argument_list|()
decl_stmt|;
name|QRect
name|normalRect
init|=
name|top
operator|->
name|normalGeometry
decl_stmt|;
specifier|const
name|QRect
name|fs
init|=
name|frameStrut
argument_list|()
decl_stmt|;
name|q
operator|->
name|setGeometry
argument_list|(
name|maxRect
operator|.
name|x
argument_list|()
operator|+
name|fs
operator|.
name|left
argument_list|()
argument_list|,
name|maxRect
operator|.
name|y
argument_list|()
operator|+
name|fs
operator|.
name|top
argument_list|()
argument_list|,
name|maxRect
operator|.
name|width
argument_list|()
operator|-
name|fs
operator|.
name|left
argument_list|()
operator|-
name|fs
operator|.
name|right
argument_list|()
argument_list|,
name|maxRect
operator|.
name|height
argument_list|()
operator|-
name|fs
operator|.
name|top
argument_list|()
operator|-
name|fs
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
comment|// restore the original normalGeometry
name|top
operator|->
name|normalGeometry
operator|=
name|normalRect
expr_stmt|;
comment|// internalSetGeometry() clears the maximized flag... make sure we set it back
name|data
operator|.
name|window_state
operator|=
name|data
operator|.
name|window_state
operator||
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|q
operator|->
name|isFullScreen
argument_list|()
operator|&&
operator|!
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
condition|)
block|{
name|XMapWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|qt_x11_wait_for_window_manager
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
condition|)
return|return;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
name|topData
argument_list|()
operator|->
name|waitingForMapNotify
operator|=
literal|1
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
operator|(
operator|!
name|q
operator|->
name|autoFillBackground
argument_list|()
operator|||
name|q
operator|->
name|palette
argument_list|()
operator|.
name|brush
argument_list|(
name|q
operator|->
name|backgroundRole
argument_list|()
argument_list|)
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|LinearGradientPattern
operator|)
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|XSetWindowBackgroundPixmap
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|XNone
argument_list|)
expr_stmt|;
name|XMapWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|updateSystemBackground
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|XMapWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Freedesktop.org Startup Notification
if|if
condition|(
name|X11
operator|->
name|startupId
operator|&&
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|QByteArray
name|message
argument_list|(
literal|"remove: ID="
argument_list|)
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
name|X11
operator|->
name|startupId
argument_list|)
expr_stmt|;
name|sendStartupMessage
argument_list|(
name|message
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|X11
operator|->
name|startupId
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal   Platform-specific part of QWidget::show(). */
end_comment
begin_function
DECL|function|sendStartupMessage
name|void
name|QWidgetPrivate
operator|::
name|sendStartupMessage
parameter_list|(
specifier|const
name|char
modifier|*
name|message
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|message
condition|)
return|return;
name|XEvent
name|xevent
decl_stmt|;
name|xevent
operator|.
name|xclient
operator|.
name|type
operator|=
name|ClientMessage
expr_stmt|;
name|xevent
operator|.
name|xclient
operator|.
name|message_type
operator|=
name|ATOM
argument_list|(
name|_NET_STARTUP_INFO_BEGIN
argument_list|)
expr_stmt|;
name|xevent
operator|.
name|xclient
operator|.
name|display
operator|=
name|X11
operator|->
name|display
expr_stmt|;
name|xevent
operator|.
name|xclient
operator|.
name|window
operator|=
name|q
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
name|xevent
operator|.
name|xclient
operator|.
name|format
operator|=
literal|8
expr_stmt|;
name|Window
name|rootWindow
init|=
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|DefaultScreen
argument_list|(
name|X11
operator|->
name|display
argument_list|)
argument_list|)
decl_stmt|;
name|uint
name|sent
init|=
literal|0
decl_stmt|;
name|uint
name|length
init|=
name|strlen
argument_list|(
name|message
argument_list|)
operator|+
literal|1
decl_stmt|;
do|do
block|{
if|if
condition|(
name|sent
operator|==
literal|20
condition|)
name|xevent
operator|.
name|xclient
operator|.
name|message_type
operator|=
name|ATOM
argument_list|(
name|_NET_STARTUP_INFO
argument_list|)
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
operator|&&
name|i
operator|+
name|sent
operator|<=
name|length
condition|;
name|i
operator|++
control|)
name|xevent
operator|.
name|xclient
operator|.
name|data
operator|.
name|b
index|[
name|i
index|]
operator|=
name|message
index|[
name|i
operator|+
name|sent
operator|++
index|]
expr_stmt|;
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|rootWindow
argument_list|,
literal|false
argument_list|,
name|PropertyChangeMask
argument_list|,
operator|&
name|xevent
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|sent
operator|<=
name|length
condition|)
do|;
block|}
end_function
begin_function
DECL|function|setNetWmWindowTypes
name|void
name|QWidgetPrivate
operator|::
name|setNetWmWindowTypes
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|XDeleteProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVector
argument_list|<
name|long
argument_list|>
name|windowTypes
decl_stmt|;
comment|// manual selection 1 (these are never set by Qt and take precedence)
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeDesktop
argument_list|)
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_DESKTOP
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeDock
argument_list|)
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_DOCK
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeNotification
argument_list|)
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_NOTIFICATION
argument_list|)
argument_list|)
expr_stmt|;
comment|// manual selection 2 (Qt uses these during auto selection);
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeUtility
argument_list|)
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_UTILITY
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeSplash
argument_list|)
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_SPLASH
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeDialog
argument_list|)
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_DIALOG
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeToolTip
argument_list|)
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_TOOLTIP
argument_list|)
argument_list|)
expr_stmt|;
comment|// manual selection 3 (these can be set by Qt, but don't have a
comment|// corresponding Qt::WindowType). note that order of the *MENU
comment|// atoms is important
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeMenu
argument_list|)
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_MENU
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeDropDownMenu
argument_list|)
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_DROPDOWN_MENU
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypePopupMenu
argument_list|)
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_POPUP_MENU
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeToolBar
argument_list|)
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_TOOLBAR
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeCombo
argument_list|)
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_COMBO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeDND
argument_list|)
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_DND
argument_list|)
argument_list|)
expr_stmt|;
comment|// automatic selection
switch|switch
condition|(
name|q
operator|->
name|windowType
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Dialog
case|:
case|case
name|Qt
operator|::
name|Sheet
case|:
comment|// dialog netwm type
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_DIALOG
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Tool
case|:
case|case
name|Qt
operator|::
name|Drawer
case|:
comment|// utility netwm type
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_UTILITY
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ToolTip
case|:
comment|// tooltip netwm type
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_TOOLTIP
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SplashScreen
case|:
comment|// splash netwm type
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_SPLASH
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|q
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
block|{
comment|// override netwm type - quick and easy for KDE noborder
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_KDE_NET_WM_WINDOW_TYPE_OVERRIDE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// normal netwm type - default
name|windowTypes
operator|.
name|append
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE_NORMAL
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|windowTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|winId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE
argument_list|)
argument_list|,
name|XA_ATOM
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|windowTypes
operator|.
name|constData
argument_list|()
argument_list|,
name|windowTypes
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XDeleteProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|winId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal   Platform-specific part of QWidget::hide(). */
end_comment
begin_function
DECL|function|hide_sys
name|void
name|QWidgetPrivate
operator|::
name|hide_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|deactivateWidgetCleanup
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|X11
operator|->
name|deferred_map
operator|.
name|removeAll
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
comment|// in nsplugin, may be 0
name|XWithdrawWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|xinfo
operator|.
name|screen
argument_list|()
argument_list|)
expr_stmt|;
name|XFlush
argument_list|(
name|X11
operator|->
name|display
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
comment|// in nsplugin, may be 0
name|XUnmapWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFocus_sys
name|void
name|QWidgetPrivate
operator|::
name|setFocus_sys
parameter_list|()
block|{  }
end_function
begin_function
DECL|function|raise_sys
name|void
name|QWidgetPrivate
operator|::
name|raise_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|XRaiseWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lower_sys
name|void
name|QWidgetPrivate
operator|::
name|lower_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|XLowerWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stackUnder_sys
name|void
name|QWidgetPrivate
operator|::
name|stackUnder_sys
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
operator|&&
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|Window
name|stack
index|[
literal|2
index|]
decl_stmt|;
name|stack
index|[
literal|0
index|]
operator|=
name|w
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
empty_stmt|;
name|stack
index|[
literal|1
index|]
operator|=
name|q
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
name|XRestackWindows
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|stack
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|||
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|do_size_hints
specifier|static
name|void
name|do_size_hints
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QWExtra
modifier|*
name|x
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|XSizeHints
name|s
decl_stmt|;
name|s
operator|.
name|flags
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|x
condition|)
block|{
name|QRect
name|g
init|=
name|widget
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|s
operator|.
name|x
operator|=
name|g
operator|.
name|x
argument_list|()
expr_stmt|;
name|s
operator|.
name|y
operator|=
name|g
operator|.
name|y
argument_list|()
expr_stmt|;
name|s
operator|.
name|width
operator|=
name|g
operator|.
name|width
argument_list|()
expr_stmt|;
name|s
operator|.
name|height
operator|=
name|g
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|x
operator|->
name|minw
operator|>
literal|0
operator|||
name|x
operator|->
name|minh
operator|>
literal|0
condition|)
block|{
comment|// add minimum size hints
name|s
operator|.
name|flags
operator||=
name|PMinSize
expr_stmt|;
name|s
operator|.
name|min_width
operator|=
name|qMin
argument_list|(
name|XCOORD_MAX
argument_list|,
name|x
operator|->
name|minw
argument_list|)
expr_stmt|;
name|s
operator|.
name|min_height
operator|=
name|qMin
argument_list|(
name|XCOORD_MAX
argument_list|,
name|x
operator|->
name|minh
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|x
operator|->
name|maxw
operator|<
name|QWIDGETSIZE_MAX
operator|||
name|x
operator|->
name|maxh
operator|<
name|QWIDGETSIZE_MAX
condition|)
block|{
comment|// add maximum size hints
name|s
operator|.
name|flags
operator||=
name|PMaxSize
expr_stmt|;
name|s
operator|.
name|max_width
operator|=
name|qMin
argument_list|(
name|XCOORD_MAX
argument_list|,
name|x
operator|->
name|maxw
argument_list|)
expr_stmt|;
name|s
operator|.
name|max_height
operator|=
name|qMin
argument_list|(
name|XCOORD_MAX
argument_list|,
name|x
operator|->
name|maxh
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|x
operator|->
name|topextra
operator|&&
operator|(
name|x
operator|->
name|topextra
operator|->
name|incw
operator|>
literal|0
operator|||
name|x
operator|->
name|topextra
operator|->
name|inch
operator|>
literal|0
operator|)
condition|)
block|{
comment|// add resize increment hints
name|s
operator|.
name|flags
operator||=
name|PResizeInc
operator||
name|PBaseSize
expr_stmt|;
name|s
operator|.
name|width_inc
operator|=
name|x
operator|->
name|topextra
operator|->
name|incw
expr_stmt|;
name|s
operator|.
name|height_inc
operator|=
name|x
operator|->
name|topextra
operator|->
name|inch
expr_stmt|;
name|s
operator|.
name|base_width
operator|=
name|x
operator|->
name|topextra
operator|->
name|basew
expr_stmt|;
name|s
operator|.
name|base_height
operator|=
name|x
operator|->
name|topextra
operator|->
name|baseh
expr_stmt|;
block|}
block|}
if|if
condition|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|)
condition|)
block|{
comment|// user (i.e. command-line) specified position
name|s
operator|.
name|flags
operator||=
name|USPosition
expr_stmt|;
name|s
operator|.
name|flags
operator||=
name|PPosition
expr_stmt|;
block|}
if|if
condition|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
condition|)
block|{
comment|// user (i.e. command-line) specified size
name|s
operator|.
name|flags
operator||=
name|USSize
expr_stmt|;
name|s
operator|.
name|flags
operator||=
name|PSize
expr_stmt|;
block|}
name|s
operator|.
name|flags
operator||=
name|PWinGravity
expr_stmt|;
if|if
condition|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|)
operator|&&
name|x
operator|&&
name|x
operator|->
name|topextra
operator|&&
operator|!
name|x
operator|->
name|topextra
operator|->
name|posFromMove
condition|)
block|{
comment|// position came from setGeometry(), tell the WM that we don't
comment|// want our window gravity-shifted
name|s
operator|.
name|win_gravity
operator|=
name|StaticGravity
expr_stmt|;
block|}
else|else
block|{
comment|// position came from move()
name|s
operator|.
name|x
operator|=
name|widget
operator|->
name|x
argument_list|()
expr_stmt|;
name|s
operator|.
name|y
operator|=
name|widget
operator|->
name|y
argument_list|()
expr_stmt|;
name|s
operator|.
name|win_gravity
operator|=
name|QApplication
operator|::
name|isRightToLeft
argument_list|()
condition|?
name|NorthEastGravity
else|:
name|NorthWestGravity
expr_stmt|;
block|}
if|if
condition|(
name|widget
operator|->
name|internalWinId
argument_list|()
condition|)
name|XSetWMNormalHints
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|widget
operator|->
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   Helper function for non-toplevel widgets. Helps to map Qt's 32bit   coordinate system to X11's 16bit coordinate system.    Sets the geometry of the widget to data.crect, but clipped to sizes   that X can handle. Unmaps widgets that are completely outside the   valid range.    Maintains data.wrect, which is the geometry of the X widget,   measured in this widget's coordinate system.    if the parent is not clipped, parentWRect is empty, otherwise   parentWRect is the geometry of the parent's X rect, measured in   parent's coord sys  */
end_comment
begin_function
DECL|function|setWSGeometry
name|void
name|QWidgetPrivate
operator|::
name|setWSGeometry
parameter_list|(
name|bool
name|dontShow
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
comment|/*       There are up to four different coordinate systems here:       Qt coordinate system for this widget.       X coordinate system for this widget (relative to wrect).       Qt coordinate system for parent       X coordinate system for parent (relative to parent's wrect).      */
name|Display
modifier|*
name|dpy
init|=
name|xinfo
operator|.
name|display
argument_list|()
decl_stmt|;
name|QRect
name|validRange
argument_list|(
operator|-
name|XCOORD_MAX
argument_list|,
operator|-
name|XCOORD_MAX
argument_list|,
literal|2
operator|*
name|XCOORD_MAX
argument_list|,
literal|2
operator|*
name|XCOORD_MAX
argument_list|)
decl_stmt|;
name|QRect
name|wrectRange
argument_list|(
operator|-
name|WRECT_MAX
argument_list|,
operator|-
name|WRECT_MAX
argument_list|,
literal|2
operator|*
name|WRECT_MAX
argument_list|,
literal|2
operator|*
name|WRECT_MAX
argument_list|)
decl_stmt|;
name|QRect
name|wrect
decl_stmt|;
comment|//xrect is the X geometry of my X widget. (starts out in  parent's Qt coord sys, and ends up in parent's X coord sys)
name|QRect
name|xrect
init|=
name|data
operator|.
name|crect
decl_stmt|;
specifier|const
name|QWidget
modifier|*
specifier|const
name|parent
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
name|QRect
name|parentWRect
init|=
name|parent
operator|->
name|data
operator|->
name|wrect
decl_stmt|;
if|if
condition|(
name|parentWRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// parent is clipped, and we have to clip to the same limit as parent
if|if
condition|(
operator|!
name|parentWRect
operator|.
name|contains
argument_list|(
name|xrect
argument_list|)
condition|)
block|{
name|xrect
operator|&=
name|parentWRect
expr_stmt|;
name|wrect
operator|=
name|xrect
expr_stmt|;
comment|//translate from parent's to my Qt coord sys
name|wrect
operator|.
name|translate
argument_list|(
operator|-
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//translate from parent's Qt coords to parent's X coords
name|xrect
operator|.
name|translate
argument_list|(
operator|-
name|parentWRect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// parent is not clipped, we may or may not have to clip
if|if
condition|(
name|data
operator|.
name|wrect
operator|.
name|isValid
argument_list|()
operator|&&
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|data
operator|.
name|crect
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|data
operator|.
name|wrect
argument_list|)
condition|)
block|{
comment|// This is where the main optimization is: we are already
comment|// clipped, and if our clip is still valid, we can just
comment|// move our window, and do not need to move or clip
comment|// children
name|QRect
name|vrect
init|=
name|xrect
operator|&
name|parent
operator|->
name|rect
argument_list|()
decl_stmt|;
name|vrect
operator|.
name|translate
argument_list|(
operator|-
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
comment|//the part of me that's visible through parent, in my Qt coords
if|if
condition|(
name|data
operator|.
name|wrect
operator|.
name|contains
argument_list|(
name|vrect
argument_list|)
condition|)
block|{
name|xrect
operator|=
name|data
operator|.
name|wrect
expr_stmt|;
name|xrect
operator|.
name|translate
argument_list|(
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|winid
condition|)
name|XMoveWindow
argument_list|(
name|dpy
argument_list|,
name|data
operator|.
name|winid
argument_list|,
name|xrect
operator|.
name|x
argument_list|()
argument_list|,
name|xrect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|validRange
operator|.
name|contains
argument_list|(
name|xrect
argument_list|)
condition|)
block|{
comment|// we are too big, and must clip
name|xrect
operator|&=
name|wrectRange
expr_stmt|;
name|wrect
operator|=
name|xrect
expr_stmt|;
name|wrect
operator|.
name|translate
argument_list|(
operator|-
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
comment|//parent's X coord system is equal to parent's Qt coord
comment|//sys, so we don't need to map xrect.
block|}
block|}
comment|// unmap if we are outside the valid window system coord system
name|bool
name|outsideRange
init|=
operator|!
name|xrect
operator|.
name|isValid
argument_list|()
decl_stmt|;
name|bool
name|mapWindow
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
operator|!=
name|outsideRange
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
name|outsideRange
argument_list|)
expr_stmt|;
if|if
condition|(
name|outsideRange
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|winid
condition|)
name|XUnmapWindow
argument_list|(
name|dpy
argument_list|,
name|data
operator|.
name|winid
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|q
operator|->
name|isHidden
argument_list|()
condition|)
block|{
name|mapWindow
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|outsideRange
condition|)
return|return;
name|bool
name|jump
init|=
operator|(
name|data
operator|.
name|wrect
operator|!=
name|wrect
operator|)
decl_stmt|;
name|data
operator|.
name|wrect
operator|=
name|wrect
expr_stmt|;
comment|// and now recursively for all children...
comment|// ### can be optimized
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QObject
modifier|*
name|object
init|=
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|&&
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|setWSGeometry
argument_list|(
name|jump
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|data
operator|.
name|winid
condition|)
block|{
comment|// move ourselves to the new position and map (if necessary) after
comment|// the movement. Rationale: moving unmapped windows is much faster
comment|// than moving mapped windows
if|if
condition|(
name|jump
condition|)
comment|//avoid flicker when jumping
name|XSetWindowBackgroundPixmap
argument_list|(
name|dpy
argument_list|,
name|data
operator|.
name|winid
argument_list|,
name|XNone
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parent
operator|->
name|internalWinId
argument_list|()
condition|)
name|xrect
operator|.
name|translate
argument_list|(
name|parent
operator|->
name|mapTo
argument_list|(
name|q
operator|->
name|nativeParentWidget
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|XMoveResizeWindow
argument_list|(
name|dpy
argument_list|,
name|data
operator|.
name|winid
argument_list|,
name|xrect
operator|.
name|x
argument_list|()
argument_list|,
name|xrect
operator|.
name|y
argument_list|()
argument_list|,
name|xrect
operator|.
name|width
argument_list|()
argument_list|,
name|xrect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//to avoid flicker, we have to show children after the helper widget has moved
if|if
condition|(
name|jump
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QObject
modifier|*
name|object
init|=
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
operator|&&
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
operator|&&
operator|!
name|w
operator|->
name|isHidden
argument_list|()
condition|)
block|{
name|w
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
name|XMapWindow
argument_list|(
name|dpy
argument_list|,
name|w
operator|->
name|data
operator|->
name|winid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|jump
operator|&&
name|data
operator|.
name|winid
condition|)
name|XClearArea
argument_list|(
name|dpy
argument_list|,
name|data
operator|.
name|winid
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|wrect
operator|.
name|width
argument_list|()
argument_list|,
name|wrect
operator|.
name|height
argument_list|()
argument_list|,
name|True
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapWindow
operator|&&
operator|!
name|dontShow
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|winid
condition|)
name|XMapWindow
argument_list|(
name|dpy
argument_list|,
name|data
operator|.
name|winid
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setGeometry_sys
name|void
name|QWidgetPrivate
operator|::
name|setGeometry_sys
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|bool
name|isMove
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
if|if
condition|(
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
return|return;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
operator|&&
operator|!
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|)
condition|)
name|data
operator|.
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
if|if
condition|(
operator|!
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
condition|)
name|data
operator|.
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowFullScreen
expr_stmt|;
if|if
condition|(
name|QTLWExtra
modifier|*
name|topData
init|=
name|maybeTopData
argument_list|()
condition|)
name|topData
operator|->
name|normalGeometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uint
name|s
init|=
name|data
operator|.
name|window_state
decl_stmt|;
name|s
operator|&=
operator|~
operator|(
name|Qt
operator|::
name|WindowMaximized
operator||
name|Qt
operator|::
name|WindowFullScreen
operator|)
expr_stmt|;
name|data
operator|.
name|window_state
operator|=
name|s
expr_stmt|;
block|}
if|if
condition|(
name|extra
condition|)
block|{
comment|// any size restrictions?
name|w
operator|=
name|qMin
argument_list|(
name|w
argument_list|,
name|extra
operator|->
name|maxw
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMin
argument_list|(
name|h
argument_list|,
name|extra
operator|->
name|maxh
argument_list|)
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|extra
operator|->
name|minw
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|extra
operator|->
name|minh
argument_list|)
expr_stmt|;
block|}
name|QPoint
name|oldPos
argument_list|(
name|q
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
name|QSize
name|oldSize
argument_list|(
name|q
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|oldGeom
argument_list|(
name|data
operator|.
name|crect
argument_list|)
decl_stmt|;
name|QRect
name|r
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
comment|// We only care about stuff that changes the geometry, or may
comment|// cause the window manager to change its state
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|oldGeom
operator|==
name|r
condition|)
return|return;
name|data
operator|.
name|crect
operator|=
name|r
expr_stmt|;
name|bool
name|isResize
init|=
name|q
operator|->
name|size
argument_list|()
operator|!=
name|oldSize
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
if|if
condition|(
name|w
operator|==
literal|0
operator|||
name|h
operator|==
literal|0
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
condition|)
name|hide_sys
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// put the window in its place and show it
if|if
condition|(
name|data
operator|.
name|winid
condition|)
name|XMoveResizeWindow
argument_list|(
name|dpy
argument_list|,
name|data
operator|.
name|winid
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|topData
argument_list|()
operator|->
name|posFromMove
operator|=
literal|false
expr_stmt|;
comment|// force StaticGravity
name|do_size_hints
argument_list|(
name|q
argument_list|,
name|extra
argument_list|)
expr_stmt|;
name|show_sys
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isVisible
argument_list|()
condition|)
name|do_size_hints
argument_list|(
name|q
argument_list|,
name|extra
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMove
condition|)
block|{
if|if
condition|(
operator|(
name|data
operator|.
name|window_flags
operator|&
name|Qt
operator|::
name|X11BypassWindowManagerHint
operator|)
operator|==
name|Qt
operator|::
name|X11BypassWindowManagerHint
comment|// work around 4Dwm's incompliance with ICCCM 4.1.5
operator|||
name|X11
operator|->
name|desktopEnvironment
operator|==
name|DE_4DWM
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|winid
condition|)
name|XMoveResizeWindow
argument_list|(
name|dpy
argument_list|,
name|data
operator|.
name|winid
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|topData
argument_list|()
operator|->
name|validWMState
operator|&&
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_MOVERESIZE_WINDOW
argument_list|)
argument_list|)
condition|)
block|{
name|XEvent
name|e
decl_stmt|;
name|e
operator|.
name|xclient
operator|.
name|type
operator|=
name|ClientMessage
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|message_type
operator|=
name|ATOM
argument_list|(
name|_NET_MOVERESIZE_WINDOW
argument_list|)
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|display
operator|=
name|X11
operator|->
name|display
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|window
operator|=
name|q
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|0
index|]
operator|=
name|StaticGravity
operator||
literal|1
operator|<<
literal|8
operator||
literal|1
operator|<<
literal|9
operator||
literal|1
operator|<<
literal|10
operator||
literal|1
operator|<<
literal|11
operator||
literal|1
operator|<<
literal|12
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|1
index|]
operator|=
name|x
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|2
index|]
operator|=
name|y
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|3
index|]
operator|=
name|w
expr_stmt|;
name|e
operator|.
name|xclient
operator|.
name|data
operator|.
name|l
index|[
literal|4
index|]
operator|=
name|h
expr_stmt|;
name|XSendEvent
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
operator|(
name|SubstructureNotifyMask
operator||
name|SubstructureRedirectMask
operator|)
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|winid
condition|)
block|{
comment|// pos() is right according to ICCCM 4.1.5
name|XMoveResizeWindow
argument_list|(
name|dpy
argument_list|,
name|data
operator|.
name|winid
argument_list|,
name|q
operator|->
name|pos
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|q
operator|->
name|pos
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isResize
operator|&&
name|data
operator|.
name|winid
condition|)
block|{
if|if
condition|(
operator|!
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|topData
argument_list|()
operator|->
name|validWMState
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingMoveEvent
argument_list|)
condition|)
block|{
comment|/*                        even though we've not visible, we could be in a                        race w/ the window manager, and it may ignore                        our ConfigureRequest. setting posFromMove to                        false makes sure that doDeferredMap() in                        qapplication_x11.cpp keeps the window in the                        right place                     */
name|topData
argument_list|()
operator|->
name|posFromMove
operator|=
literal|false
expr_stmt|;
block|}
name|XResizeWindow
argument_list|(
name|dpy
argument_list|,
name|data
operator|.
name|winid
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isResize
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
comment|// set config pending only on resize, see qapplication_x11.cpp, translateConfigEvent()
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ConfigPending
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QTLWExtra
modifier|*
name|tlwExtra
init|=
name|q
operator|->
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|inTopLevelResize
init|=
name|tlwExtra
condition|?
name|tlwExtra
operator|->
name|inTopLevelResize
else|:
literal|false
decl_stmt|;
specifier|const
name|bool
name|disableInTopLevelResize
init|=
name|inTopLevelResize
operator|&&
name|q
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
if|if
condition|(
name|disableInTopLevelResize
condition|)
block|{
comment|// Top-level resize optimization does not work for native child widgets;
comment|// disable it for this particular widget.
name|tlwExtra
operator|->
name|inTopLevelResize
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isResize
operator|&&
operator|(
operator|!
name|inTopLevelResize
operator|||
name|disableInTopLevelResize
operator|)
operator|&&
name|q
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|moveRect
argument_list|(
name|QRect
argument_list|(
name|oldPos
argument_list|,
name|oldSize
argument_list|)
argument_list|,
name|x
operator|-
name|oldPos
operator|.
name|x
argument_list|()
argument_list|,
name|y
operator|-
name|oldPos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
name|setWSGeometry
argument_list|()
expr_stmt|;
if|if
condition|(
name|isResize
operator|&&
operator|(
operator|!
name|inTopLevelResize
operator|||
name|disableInTopLevelResize
operator|)
operator|&&
name|q
operator|->
name|isVisible
argument_list|()
condition|)
name|invalidateBuffer_resizeHelper
argument_list|(
name|oldPos
argument_list|,
name|oldSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|disableInTopLevelResize
condition|)
name|tlwExtra
operator|->
name|inTopLevelResize
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
condition|)
block|{
if|if
condition|(
name|isMove
operator|&&
name|q
operator|->
name|pos
argument_list|()
operator|!=
name|oldPos
condition|)
block|{
if|if
condition|(
name|X11
operator|->
name|desktopEnvironment
operator|!=
name|DE_4DWM
condition|)
block|{
comment|// pos() is right according to ICCCM 4.1.5
name|QMoveEvent
name|e
argument_list|(
name|q
operator|->
name|pos
argument_list|()
argument_list|,
name|oldPos
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// work around 4Dwm's incompliance with ICCCM 4.1.5
name|QMoveEvent
name|e
argument_list|(
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|oldGeom
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isResize
condition|)
block|{
specifier|static
name|bool
name|slowResize
init|=
name|qgetenv
argument_list|(
literal|"QT_SLOW_TOPLEVEL_RESIZE"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
comment|// If we have a backing store with static contents, we have to disable the top-level
comment|// resize optimization in order to get invalidated regions for resized widgets.
comment|// The optimization discards all invalidateBuffer() calls since we're going to
comment|// repaint everything anyways, but that's not the case with static contents.
specifier|const
name|bool
name|setTopLevelResize
init|=
operator|!
name|slowResize
operator|&&
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|extra
operator|&&
name|extra
operator|->
name|topextra
operator|&&
operator|!
name|extra
operator|->
name|topextra
operator|->
name|inTopLevelResize
operator|&&
operator|(
operator|!
name|extra
operator|->
name|topextra
operator|->
name|backingStore
operator|||
operator|!
name|extra
operator|->
name|topextra
operator|->
name|backingStore
operator|->
name|hasStaticContents
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|setTopLevelResize
condition|)
name|extra
operator|->
name|topextra
operator|->
name|inTopLevelResize
operator|=
literal|true
expr_stmt|;
name|QResizeEvent
name|e
argument_list|(
name|q
operator|->
name|size
argument_list|()
argument_list|,
name|oldSize
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|setTopLevelResize
condition|)
name|extra
operator|->
name|topextra
operator|->
name|inTopLevelResize
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isMove
operator|&&
name|q
operator|->
name|pos
argument_list|()
operator|!=
name|oldPos
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingMoveEvent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|isResize
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingResizeEvent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setConstraints_sys
name|void
name|QWidgetPrivate
operator|::
name|setConstraints_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|ALIEN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QWidgetPrivate::setConstraints_sys START"
operator|<<
name|q
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
name|do_size_hints
argument_list|(
name|q
argument_list|,
name|extra
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|ALIEN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QWidgetPrivate::setConstraints_sys END"
operator|<<
name|q
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|scroll_sys
name|void
name|QWidgetPrivate
operator|::
name|scroll_sys
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|scrollChildren
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|paintOnScreen
argument_list|()
condition|)
block|{
name|scrollRect
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scroll_sys
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|,
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|scroll_sys
name|void
name|QWidgetPrivate
operator|::
name|scroll_sys
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|paintOnScreen
argument_list|()
condition|)
block|{
name|scrollRect
argument_list|(
name|r
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
return|return;
block|}
name|bool
name|valid_rect
init|=
name|r
operator|.
name|isValid
argument_list|()
decl_stmt|;
name|bool
name|just_update
init|=
name|qAbs
argument_list|(
name|dx
argument_list|)
operator|>
name|q
operator|->
name|width
argument_list|()
operator|||
name|qAbs
argument_list|(
name|dy
argument_list|)
operator|>
name|q
operator|->
name|height
argument_list|()
decl_stmt|;
name|QRect
name|sr
init|=
name|valid_rect
condition|?
name|r
else|:
name|clipRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|just_update
condition|)
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|valid_rect
condition|)
name|dirty
operator|.
name|translate
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
name|int
name|x1
decl_stmt|,
name|y1
decl_stmt|,
name|x2
decl_stmt|,
name|y2
decl_stmt|,
name|w
init|=
name|sr
operator|.
name|width
argument_list|()
decl_stmt|,
name|h
init|=
name|sr
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|dx
operator|>
literal|0
condition|)
block|{
name|x1
operator|=
name|sr
operator|.
name|x
argument_list|()
expr_stmt|;
name|x2
operator|=
name|x1
operator|+
name|dx
expr_stmt|;
name|w
operator|-=
name|dx
expr_stmt|;
block|}
else|else
block|{
name|x2
operator|=
name|sr
operator|.
name|x
argument_list|()
expr_stmt|;
name|x1
operator|=
name|x2
operator|-
name|dx
expr_stmt|;
name|w
operator|+=
name|dx
expr_stmt|;
block|}
if|if
condition|(
name|dy
operator|>
literal|0
condition|)
block|{
name|y1
operator|=
name|sr
operator|.
name|y
argument_list|()
expr_stmt|;
name|y2
operator|=
name|y1
operator|+
name|dy
expr_stmt|;
name|h
operator|-=
name|dy
expr_stmt|;
block|}
else|else
block|{
name|y2
operator|=
name|sr
operator|.
name|y
argument_list|()
expr_stmt|;
name|y1
operator|=
name|y2
operator|-
name|dy
expr_stmt|;
name|h
operator|+=
name|dy
expr_stmt|;
block|}
if|if
condition|(
name|dx
operator|==
literal|0
operator|&&
name|dy
operator|==
literal|0
condition|)
return|return;
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
comment|// Want expose events
if|if
condition|(
name|w
operator|>
literal|0
operator|&&
name|h
operator|>
literal|0
operator|&&
operator|!
name|just_update
operator|&&
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|GC
name|gc
init|=
name|XCreateGC
argument_list|(
name|dpy
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XSetGraphicsExposures
argument_list|(
name|dpy
argument_list|,
name|gc
argument_list|,
name|True
argument_list|)
expr_stmt|;
name|XCopyArea
argument_list|(
name|dpy
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|gc
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|XFreeGC
argument_list|(
name|dpy
argument_list|,
name|gc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|valid_rect
operator|&&
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// scroll children
name|QPoint
name|pd
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// move all children
specifier|register
name|QObject
modifier|*
name|object
init|=
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
condition|)
name|w
operator|->
name|move
argument_list|(
name|w
operator|->
name|pos
argument_list|()
operator|+
name|pd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|just_update
condition|)
return|return;
comment|// Don't let the server be bogged-down with repaint events
name|bool
name|repaint_immediately
init|=
operator|(
name|qt_sip_count
argument_list|(
name|q
argument_list|)
operator|<
literal|3
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_InPaintEvent
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|dx
condition|)
block|{
name|int
name|x
init|=
name|x2
operator|==
name|sr
operator|.
name|x
argument_list|()
condition|?
name|sr
operator|.
name|x
argument_list|()
operator|+
name|w
else|:
name|sr
operator|.
name|x
argument_list|()
decl_stmt|;
if|if
condition|(
name|repaint_immediately
condition|)
name|q
operator|->
name|repaint
argument_list|(
name|x
argument_list|,
name|sr
operator|.
name|y
argument_list|()
argument_list|,
name|qAbs
argument_list|(
name|dx
argument_list|)
argument_list|,
name|sr
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|XClearArea
argument_list|(
name|dpy
argument_list|,
name|data
operator|.
name|winid
argument_list|,
name|x
argument_list|,
name|sr
operator|.
name|y
argument_list|()
argument_list|,
name|qAbs
argument_list|(
name|dx
argument_list|)
argument_list|,
name|sr
operator|.
name|height
argument_list|()
argument_list|,
name|True
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dy
condition|)
block|{
name|int
name|y
init|=
name|y2
operator|==
name|sr
operator|.
name|y
argument_list|()
condition|?
name|sr
operator|.
name|y
argument_list|()
operator|+
name|h
else|:
name|sr
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|repaint_immediately
condition|)
name|q
operator|->
name|repaint
argument_list|(
name|sr
operator|.
name|x
argument_list|()
argument_list|,
name|y
argument_list|,
name|sr
operator|.
name|width
argument_list|()
argument_list|,
name|qAbs
argument_list|(
name|dy
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
name|XClearArea
argument_list|(
name|dpy
argument_list|,
name|data
operator|.
name|winid
argument_list|,
name|sr
operator|.
name|x
argument_list|()
argument_list|,
name|y
argument_list|,
name|sr
operator|.
name|width
argument_list|()
argument_list|,
name|qAbs
argument_list|(
name|dy
argument_list|)
argument_list|,
name|True
argument_list|)
expr_stmt|;
block|}
name|qt_insert_sip
argument_list|(
name|q
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
comment|// #### ignores r
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QWidget
operator|::
name|metric
parameter_list|(
name|PaintDeviceMetric
name|m
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
name|int
name|val
decl_stmt|;
if|if
condition|(
name|m
operator|==
name|PdmWidth
condition|)
block|{
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmHeight
condition|)
block|{
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
name|int
name|scr
init|=
name|d
operator|->
name|xinfo
operator|.
name|screen
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|PdmDpiX
case|:
case|case
name|PdmPhysicalDpiX
case|:
if|if
condition|(
name|d
operator|->
name|extra
operator|&&
name|d
operator|->
name|extra
operator|->
name|customDpiX
condition|)
name|val
operator|=
name|d
operator|->
name|extra
operator|->
name|customDpiX
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|parent
condition|)
name|val
operator|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|parent
argument_list|)
operator|->
name|metric
argument_list|(
name|m
argument_list|)
expr_stmt|;
else|else
name|val
operator|=
name|QX11Info
operator|::
name|appDpiX
argument_list|(
name|scr
argument_list|)
expr_stmt|;
break|break;
case|case
name|PdmDpiY
case|:
case|case
name|PdmPhysicalDpiY
case|:
if|if
condition|(
name|d
operator|->
name|extra
operator|&&
name|d
operator|->
name|extra
operator|->
name|customDpiY
condition|)
name|val
operator|=
name|d
operator|->
name|extra
operator|->
name|customDpiY
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|parent
condition|)
name|val
operator|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|parent
argument_list|)
operator|->
name|metric
argument_list|(
name|m
argument_list|)
expr_stmt|;
else|else
name|val
operator|=
name|QX11Info
operator|::
name|appDpiY
argument_list|(
name|scr
argument_list|)
expr_stmt|;
break|break;
case|case
name|PdmWidthMM
case|:
name|val
operator|=
operator|(
name|DisplayWidthMM
argument_list|(
name|dpy
argument_list|,
name|scr
argument_list|)
operator|*
name|data
operator|->
name|crect
operator|.
name|width
argument_list|()
operator|)
operator|/
name|DisplayWidth
argument_list|(
name|dpy
argument_list|,
name|scr
argument_list|)
expr_stmt|;
break|break;
case|case
name|PdmHeightMM
case|:
name|val
operator|=
operator|(
name|DisplayHeightMM
argument_list|(
name|dpy
argument_list|,
name|scr
argument_list|)
operator|*
name|data
operator|->
name|crect
operator|.
name|height
argument_list|()
operator|)
operator|/
name|DisplayHeight
argument_list|(
name|dpy
argument_list|,
name|scr
argument_list|)
expr_stmt|;
break|break;
case|case
name|PdmNumColors
case|:
name|val
operator|=
name|d
operator|->
name|xinfo
operator|.
name|cells
argument_list|()
expr_stmt|;
break|break;
case|case
name|PdmDepth
case|:
name|val
operator|=
name|d
operator|->
name|xinfo
operator|.
name|depth
argument_list|()
expr_stmt|;
break|break;
default|default:
name|val
operator|=
literal|0
expr_stmt|;
name|qWarning
argument_list|(
literal|"QWidget::metric: Invalid metric command"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|val
return|;
block|}
end_function
begin_function
DECL|function|createSysExtra
name|void
name|QWidgetPrivate
operator|::
name|createSysExtra
parameter_list|()
block|{
name|extra
operator|->
name|compress_events
operator|=
literal|true
expr_stmt|;
name|extra
operator|->
name|xDndProxy
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteSysExtra
name|void
name|QWidgetPrivate
operator|::
name|deleteSysExtra
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|createTLSysExtra
name|void
name|QWidgetPrivate
operator|::
name|createTLSysExtra
parameter_list|()
block|{
name|extra
operator|->
name|topextra
operator|->
name|spont_unmapped
operator|=
literal|0
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|dnd
operator|=
literal|0
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|validWMState
operator|=
literal|0
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|waitingForMapNotify
operator|=
literal|0
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|parentWinId
operator|=
literal|0
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|userTimeWindow
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XSYNC
name|extra
operator|->
name|topextra
operator|->
name|syncUpdateCounter
operator|=
literal|0
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|syncRequestTimestamp
operator|=
literal|0
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|newCounterValueHi
operator|=
literal|0
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|newCounterValueLo
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|deleteTLSysExtra
name|void
name|QWidgetPrivate
operator|::
name|deleteTLSysExtra
parameter_list|()
block|{
comment|// don't destroy input context here. it will be destroyed in
comment|// QWidget::destroy() destroyInputContext();
block|}
end_function
begin_function
DECL|function|registerDropSite
name|void
name|QWidgetPrivate
operator|::
name|registerDropSite
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMask_sys
name|void
name|QWidgetPrivate
operator|::
name|setMask_sys
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
return|return;
if|if
condition|(
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|XShapeCombineMask
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ShapeBounding
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|XNone
argument_list|,
name|ShapeSet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XShapeCombineRegion
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ShapeBounding
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|region
operator|.
name|handle
argument_list|()
argument_list|,
name|ShapeSet
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal    Computes the frame rectangle when needed.  This is an internal function, you   should never call this. */
end_comment
begin_function
DECL|function|updateFrameStrut
name|void
name|QWidgetPrivate
operator|::
name|updateFrameStrut
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QTLWExtra
modifier|*
name|top
init|=
name|topData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|top
operator|->
name|validWMState
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|data
operator|.
name|fstrut_dirty
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|Atom
name|type_ret
decl_stmt|;
name|Window
name|l
init|=
name|q
operator|->
name|effectiveWinId
argument_list|()
decl_stmt|,
name|w
init|=
name|l
decl_stmt|,
name|p
decl_stmt|,
name|r
decl_stmt|;
comment|// target window, its parent, root
name|Window
modifier|*
name|c
decl_stmt|;
name|int
name|i_unused
decl_stmt|;
name|unsigned
name|int
name|nc
decl_stmt|;
name|unsigned
name|char
modifier|*
name|data_ret
decl_stmt|;
name|unsigned
name|long
name|l_unused
decl_stmt|;
while|while
condition|(
name|XQueryTree
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|w
argument_list|,
operator|&
name|r
argument_list|,
operator|&
name|p
argument_list|,
operator|&
name|c
argument_list|,
operator|&
name|nc
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|&&
name|nc
operator|>
literal|0
condition|)
name|XFree
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|p
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWidget::updateFrameStrut: No parent"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// if the parent window is the root window, an Enlightenment virtual root or
comment|// a NET WM virtual root window, stop here
name|data_ret
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|p
operator|==
name|r
operator|||
operator|(
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|p
argument_list|,
name|ATOM
argument_list|(
name|ENLIGHTENMENT_DESKTOP
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|False
argument_list|,
name|XA_CARDINAL
argument_list|,
operator|&
name|type_ret
argument_list|,
operator|&
name|i_unused
argument_list|,
operator|&
name|l_unused
argument_list|,
operator|&
name|l_unused
argument_list|,
operator|&
name|data_ret
argument_list|)
operator|==
name|Success
operator|&&
name|type_ret
operator|==
name|XA_CARDINAL
operator|)
condition|)
block|{
if|if
condition|(
name|data_ret
condition|)
name|XFree
argument_list|(
name|data_ret
argument_list|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|X11
operator|->
name|isSupportedByWM
argument_list|(
name|ATOM
argument_list|(
name|_NET_VIRTUAL_ROOTS
argument_list|)
argument_list|)
operator|&&
name|X11
operator|->
name|net_virtual_root_list
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|X11
operator|->
name|net_virtual_root_list
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|X11
operator|->
name|net_virtual_root_list
index|[
name|i
operator|++
index|]
operator|==
name|p
condition|)
break|break;
block|}
block|}
name|l
operator|=
name|w
expr_stmt|;
name|w
operator|=
name|p
expr_stmt|;
block|}
comment|// we have our window
name|int
name|transx
decl_stmt|,
name|transy
decl_stmt|;
name|XWindowAttributes
name|wattr
decl_stmt|;
if|if
condition|(
name|XTranslateCoordinates
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|l
argument_list|,
name|w
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|transx
argument_list|,
operator|&
name|transy
argument_list|,
operator|&
name|p
argument_list|)
operator|&&
name|XGetWindowAttributes
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|w
argument_list|,
operator|&
name|wattr
argument_list|)
condition|)
block|{
name|top
operator|->
name|frameStrut
operator|.
name|setCoords
argument_list|(
name|transx
argument_list|,
name|transy
argument_list|,
name|wattr
operator|.
name|width
operator|-
name|data
operator|.
name|crect
operator|.
name|width
argument_list|()
operator|-
name|transx
argument_list|,
name|wattr
operator|.
name|height
operator|-
name|data
operator|.
name|crect
operator|.
name|height
argument_list|()
operator|-
name|transy
argument_list|)
expr_stmt|;
comment|// add the border_width for the window managers frame... some window managers
comment|// do not use a border_width of zero for their frames, and if we the left and
comment|// top strut, we ensure that pos() is absolutely correct.  frameGeometry()
comment|// will still be incorrect though... perhaps i should have foffset as well, to
comment|// indicate the frame offset (equal to the border_width on X).
comment|// - Brad
name|top
operator|->
name|frameStrut
operator|.
name|adjust
argument_list|(
name|wattr
operator|.
name|border_width
argument_list|,
name|wattr
operator|.
name|border_width
argument_list|,
name|wattr
operator|.
name|border_width
argument_list|,
name|wattr
operator|.
name|border_width
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|fstrut_dirty
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowOpacity_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowOpacity_sys
parameter_list|(
name|qreal
name|opacity
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|ulong
name|value
init|=
name|ulong
argument_list|(
name|opacity
operator|*
literal|0xffffffff
argument_list|)
decl_stmt|;
name|XChangeProperty
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|_NET_WM_WINDOW_OPACITY
argument_list|)
argument_list|,
name|XA_CARDINAL
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
operator|&
name|value
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|x11Info
specifier|const
name|QX11Info
modifier|&
name|QWidget
operator|::
name|x11Info
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|xinfo
return|;
block|}
end_function
begin_function
DECL|function|setWindowRole
name|void
name|QWidgetPrivate
operator|::
name|setWindowRole
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
return|return;
name|QByteArray
name|windowRole
init|=
name|topData
argument_list|()
operator|->
name|role
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|XChangeProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|ATOM
argument_list|(
name|WM_WINDOW_ROLE
argument_list|)
argument_list|,
name|XA_STRING
argument_list|,
literal|8
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|windowRole
operator|.
name|constData
argument_list|()
argument_list|,
name|windowRole
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QX11PaintEngine
argument_list|,
argument|qt_widget_paintengine
argument_list|)
end_macro
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QWidget
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_widget_paintengine
argument_list|()
operator|->
name|isActive
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|extraPaintEngine
condition|)
return|return
name|d
operator|->
name|extraPaintEngine
return|;
name|QWidget
modifier|*
name|self
init|=
cast|const_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|self
operator|->
name|d_func
argument_list|()
operator|->
name|extraPaintEngine
operator|=
operator|new
name|QX11PaintEngine
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|extraPaintEngine
return|;
block|}
return|return
name|qt_widget_paintengine
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|createDefaultWindowSurface_sys
name|QWindowSurface
modifier|*
name|QWidgetPrivate
operator|::
name|createDefaultWindowSurface_sys
parameter_list|()
block|{
return|return
operator|new
name|QX11WindowSurface
argument_list|(
name|q_func
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|x11PictureHandle
name|Qt
operator|::
name|HANDLE
name|QWidget
operator|::
name|x11PictureHandle
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|internalWinId
argument_list|()
operator|&&
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
operator|(
name|void
operator|)
name|winId
argument_list|()
expr_stmt|;
comment|// enforce native window
return|return
name|d
operator|->
name|picture
return|;
else|#
directive|else
return|return
literal|0
return|;
endif|#
directive|endif
comment|// QT_NO_XRENDER
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
end_ifndef
begin_function
DECL|function|preMultiply
name|XRenderColor
name|QX11Data
operator|::
name|preMultiply
parameter_list|(
specifier|const
name|QColor
modifier|&
name|c
parameter_list|)
block|{
name|XRenderColor
name|color
decl_stmt|;
specifier|const
name|uint
name|A
init|=
name|c
operator|.
name|alpha
argument_list|()
decl_stmt|,
name|R
init|=
name|c
operator|.
name|red
argument_list|()
decl_stmt|,
name|G
init|=
name|c
operator|.
name|green
argument_list|()
decl_stmt|,
name|B
init|=
name|c
operator|.
name|blue
argument_list|()
decl_stmt|;
name|color
operator|.
name|alpha
operator|=
operator|(
name|A
operator||
name|A
operator|<<
literal|8
operator|)
expr_stmt|;
name|color
operator|.
name|red
operator|=
operator|(
name|R
operator||
name|R
operator|<<
literal|8
operator|)
operator|*
name|color
operator|.
name|alpha
operator|/
literal|0x10000
expr_stmt|;
name|color
operator|.
name|green
operator|=
operator|(
name|G
operator||
name|G
operator|<<
literal|8
operator|)
operator|*
name|color
operator|.
name|alpha
operator|/
literal|0x10000
expr_stmt|;
name|color
operator|.
name|blue
operator|=
operator|(
name|B
operator||
name|B
operator|<<
literal|8
operator|)
operator|*
name|color
operator|.
name|alpha
operator|/
literal|0x10000
expr_stmt|;
return|return
name|color
return|;
block|}
end_function
begin_function
DECL|function|getSolidFill
name|Picture
name|QX11Data
operator|::
name|getSolidFill
parameter_list|(
name|int
name|screen
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c
parameter_list|)
block|{
if|if
condition|(
operator|!
name|X11
operator|->
name|use_xrender
condition|)
return|return
name|XNone
return|;
name|XRenderColor
name|color
init|=
name|preMultiply
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|X11
operator|->
name|solid_fill_count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|screen
operator|==
name|screen
operator|&&
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|color
operator|.
name|alpha
operator|==
name|color
operator|.
name|alpha
operator|&&
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|color
operator|.
name|red
operator|==
name|color
operator|.
name|red
operator|&&
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|color
operator|.
name|green
operator|==
name|color
operator|.
name|green
operator|&&
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|color
operator|.
name|blue
operator|==
name|color
operator|.
name|blue
condition|)
return|return
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|picture
return|;
block|}
comment|// none found, replace one
name|int
name|i
init|=
name|qrand
argument_list|()
operator|%
literal|16
decl_stmt|;
if|if
condition|(
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|screen
operator|!=
name|screen
operator|&&
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|picture
condition|)
block|{
name|XRenderFreePicture
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|picture
argument_list|)
expr_stmt|;
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|picture
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|picture
condition|)
block|{
name|Pixmap
name|pixmap
init|=
name|XCreatePixmap
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|screen
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|XRenderPictureAttributes
name|attrs
decl_stmt|;
name|attrs
operator|.
name|repeat
operator|=
name|True
expr_stmt|;
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|picture
operator|=
name|XRenderCreatePicture
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|pixmap
argument_list|,
name|XRenderFindStandardFormat
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|PictStandardARGB32
argument_list|)
argument_list|,
name|CPRepeat
argument_list|,
operator|&
name|attrs
argument_list|)
expr_stmt|;
name|XFreePixmap
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|color
operator|=
name|color
expr_stmt|;
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|screen
operator|=
name|screen
expr_stmt|;
name|XRenderFillRectangle
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|PictOpSrc
argument_list|,
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|picture
argument_list|,
operator|&
name|color
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|X11
operator|->
name|solid_fills
index|[
name|i
index|]
operator|.
name|picture
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setModal_sys
name|void
name|QWidgetPrivate
operator|::
name|setModal_sys
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|qt_x11_getX11InfoForWindow
name|void
name|qt_x11_getX11InfoForWindow
parameter_list|(
name|QX11Info
modifier|*
name|xinfo
parameter_list|,
specifier|const
name|QX11WindowAttributes
modifier|&
name|att
parameter_list|)
block|{
name|QX11InfoData
modifier|*
name|xd
init|=
name|xinfo
operator|->
name|getX11Data
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|const
name|XWindowAttributes
modifier|&
name|a
init|=
operator|*
operator|(
name|att
operator|.
name|att
operator|)
decl_stmt|;
comment|// find which screen the window is on...
name|xd
operator|->
name|screen
operator|=
name|QX11Info
operator|::
name|appScreen
argument_list|()
expr_stmt|;
comment|// by default, use the default :)
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ScreenCount
argument_list|(
name|X11
operator|->
name|display
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|i
argument_list|)
operator|==
name|a
operator|.
name|root
condition|)
block|{
name|xd
operator|->
name|screen
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|xd
operator|->
name|depth
operator|=
name|a
operator|.
name|depth
expr_stmt|;
name|xd
operator|->
name|cells
operator|=
name|DisplayCells
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|xd
operator|->
name|screen
argument_list|)
expr_stmt|;
name|xd
operator|->
name|visual
operator|=
name|a
operator|.
name|visual
expr_stmt|;
name|xd
operator|->
name|defaultVisual
operator|=
operator|(
name|XVisualIDFromVisual
argument_list|(
operator|(
name|Visual
operator|*
operator|)
name|a
operator|.
name|visual
argument_list|)
operator|==
name|XVisualIDFromVisual
argument_list|(
operator|(
name|Visual
operator|*
operator|)
name|QX11Info
operator|::
name|appVisual
argument_list|(
name|xinfo
operator|->
name|screen
argument_list|()
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|xd
operator|->
name|colormap
operator|=
name|a
operator|.
name|colormap
expr_stmt|;
name|xd
operator|->
name|defaultColormap
operator|=
operator|(
name|a
operator|.
name|colormap
operator|==
name|QX11Info
operator|::
name|appColormap
argument_list|(
name|xinfo
operator|->
name|screen
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|xinfo
operator|->
name|setX11Data
argument_list|(
name|xd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateX11AcceptFocus
name|void
name|QWidgetPrivate
operator|::
name|updateX11AcceptFocus
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|||
operator|!
name|q
operator|->
name|internalWinId
argument_list|()
condition|)
return|return;
name|XWMHints
modifier|*
name|h
init|=
name|XGetWMHints
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
decl_stmt|;
name|XWMHints
name|wm_hints
decl_stmt|;
if|if
condition|(
operator|!
name|h
condition|)
block|{
name|memset
argument_list|(
operator|&
name|wm_hints
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|wm_hints
argument_list|)
argument_list|)
expr_stmt|;
comment|// make valgrind happy
name|h
operator|=
operator|&
name|wm_hints
expr_stmt|;
block|}
name|h
operator|->
name|flags
operator||=
name|InputHint
expr_stmt|;
name|h
operator|->
name|input
operator|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11DoNotAcceptFocus
argument_list|)
condition|?
name|False
else|:
name|True
expr_stmt|;
name|XSetWMHints
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|h
operator|!=
operator|&
name|wm_hints
condition|)
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|h
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
