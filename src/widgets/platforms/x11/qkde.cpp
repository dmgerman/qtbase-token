begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qkde_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QLibrary>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSettings>
end_include
begin_include
include|#
directive|include
file|"QtGui/qstylefactory.h"
end_include
begin_include
include|#
directive|include
file|"qt_x11_p.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
end_if
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*! \internal Gets the current KDE home path like "/home/troll/.kde" */
DECL|function|kdeHome
name|QString
name|QKde
operator|::
name|kdeHome
parameter_list|()
block|{
specifier|static
name|QString
name|kdeHomePath
decl_stmt|;
if|if
condition|(
name|kdeHomePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|kdeHomePath
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"KDEHOME"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|kdeHomePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QDir
name|homeDir
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|kdeConfDir
argument_list|(
name|QLatin1String
argument_list|(
literal|"/.kde"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|4
operator|==
name|X11
operator|->
name|desktopVersion
operator|&&
name|homeDir
operator|.
name|exists
argument_list|(
name|QLatin1String
argument_list|(
literal|".kde4"
argument_list|)
argument_list|)
condition|)
name|kdeConfDir
operator|=
name|QLatin1String
argument_list|(
literal|"/.kde4"
argument_list|)
expr_stmt|;
name|kdeHomePath
operator|=
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|kdeConfDir
expr_stmt|;
block|}
block|}
return|return
name|kdeHomePath
return|;
block|}
end_function
begin_comment
comment|/*!\internal   Reads the color from the config, and store it in the palette with the given color role if found   */
end_comment
begin_function
DECL|function|kdeColor
specifier|static
name|bool
name|kdeColor
parameter_list|(
name|QPalette
modifier|*
name|pal
parameter_list|,
name|QPalette
operator|::
name|ColorRole
name|role
parameter_list|,
specifier|const
name|QSettings
modifier|&
name|kdeSettings
parameter_list|,
specifier|const
name|QString
modifier|&
name|kde4Key
parameter_list|,
specifier|const
name|QString
modifier|&
name|kde3Key
init|=
name|QString
argument_list|()
parameter_list|)
block|{
name|QVariant
name|variant
init|=
name|kdeSettings
operator|.
name|value
argument_list|(
name|kde4Key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|variant
operator|.
name|isValid
argument_list|()
condition|)
name|QVariant
name|variant
init|=
name|kdeSettings
operator|.
name|value
argument_list|(
name|kde3Key
argument_list|)
decl_stmt|;
if|if
condition|(
name|variant
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QStringList
name|values
init|=
name|variant
operator|.
name|toStringList
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|int
name|r
init|=
name|values
index|[
literal|0
index|]
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|g
init|=
name|values
index|[
literal|1
index|]
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|b
init|=
name|values
index|[
literal|2
index|]
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|pal
operator|->
name|setBrush
argument_list|(
name|role
argument_list|,
name|QColor
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!\internal     Returns the KDE palette */
end_comment
begin_function
DECL|function|kdePalette
name|QPalette
name|QKde
operator|::
name|kdePalette
parameter_list|()
block|{
specifier|const
name|QSettings
name|theKdeSettings
argument_list|(
name|QKde
operator|::
name|kdeHome
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/share/config/kdeglobals"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|QPalette
name|pal
decl_stmt|;
comment|// Setup KDE palette
name|kdeColor
argument_list|(
operator|&
name|pal
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|theKdeSettings
argument_list|,
name|QLatin1String
argument_list|(
literal|"Colors:Button/BackgroundNormal"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"buttonBackground"
argument_list|)
argument_list|)
expr_stmt|;
name|kdeColor
argument_list|(
operator|&
name|pal
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|,
name|theKdeSettings
argument_list|,
name|QLatin1String
argument_list|(
literal|"Colors:Window/BackgroundNormal"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"background"
argument_list|)
argument_list|)
expr_stmt|;
name|kdeColor
argument_list|(
operator|&
name|pal
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|theKdeSettings
argument_list|,
name|QLatin1String
argument_list|(
literal|"Colors:View/ForegroundNormal"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"foreground"
argument_list|)
argument_list|)
expr_stmt|;
name|kdeColor
argument_list|(
operator|&
name|pal
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|theKdeSettings
argument_list|,
name|QLatin1String
argument_list|(
literal|"Colors:Window/ForegroundNormal"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"windowForeground"
argument_list|)
argument_list|)
expr_stmt|;
name|kdeColor
argument_list|(
operator|&
name|pal
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|theKdeSettings
argument_list|,
name|QLatin1String
argument_list|(
literal|"Colors:View/BackgroundNormal"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"windowBackground"
argument_list|)
argument_list|)
expr_stmt|;
name|kdeColor
argument_list|(
operator|&
name|pal
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|theKdeSettings
argument_list|,
name|QLatin1String
argument_list|(
literal|"Colors:Selection/BackgroundNormal"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"selectBackground"
argument_list|)
argument_list|)
expr_stmt|;
name|kdeColor
argument_list|(
operator|&
name|pal
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|theKdeSettings
argument_list|,
name|QLatin1String
argument_list|(
literal|"Colors:Selection/ForegroundNormal"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"selectForeground"
argument_list|)
argument_list|)
expr_stmt|;
name|kdeColor
argument_list|(
operator|&
name|pal
argument_list|,
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|theKdeSettings
argument_list|,
name|QLatin1String
argument_list|(
literal|"Colors:View/BackgroundAlternate"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"alternateBackground"
argument_list|)
argument_list|)
expr_stmt|;
name|kdeColor
argument_list|(
operator|&
name|pal
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|theKdeSettings
argument_list|,
name|QLatin1String
argument_list|(
literal|"Colors:Button/ForegroundNormal"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"buttonForeground"
argument_list|)
argument_list|)
expr_stmt|;
name|kdeColor
argument_list|(
operator|&
name|pal
argument_list|,
name|QPalette
operator|::
name|Link
argument_list|,
name|theKdeSettings
argument_list|,
name|QLatin1String
argument_list|(
literal|"Colors:View/ForegroundLink"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"linkColor"
argument_list|)
argument_list|)
expr_stmt|;
name|kdeColor
argument_list|(
operator|&
name|pal
argument_list|,
name|QPalette
operator|::
name|LinkVisited
argument_list|,
name|theKdeSettings
argument_list|,
name|QLatin1String
argument_list|(
literal|"Colors:View/ForegroundVisited"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"visitedLinkColor"
argument_list|)
argument_list|)
expr_stmt|;
comment|//## TODO tooltip color
return|return
name|pal
return|;
block|}
end_function
begin_comment
comment|/*!\internal     Returns the name of the QStyle to use.     (read from the kde config if needed) */
end_comment
begin_function
DECL|function|kdeStyle
name|QString
name|QKde
operator|::
name|kdeStyle
parameter_list|()
block|{
if|if
condition|(
name|X11
operator|->
name|desktopVersion
operator|>=
literal|4
condition|)
block|{
name|QSettings
name|kdeSettings
argument_list|(
name|QKde
operator|::
name|kdeHome
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/share/config/kdeglobals"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|QString
name|style
init|=
name|kdeSettings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"widgetStyle"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Oxygen"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QStringList
name|availableStyles
init|=
name|QStyleFactory
operator|::
name|keys
argument_list|()
decl_stmt|;
if|if
condition|(
name|availableStyles
operator|.
name|contains
argument_list|(
name|style
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
return|return
name|style
return|;
block|}
if|if
condition|(
name|X11
operator|->
name|use_xrender
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"plastique"
argument_list|)
return|;
else|else
return|return
name|QLatin1String
argument_list|(
literal|"windows"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|kdeToolButtonStyle
name|int
name|QKde
operator|::
name|kdeToolButtonStyle
parameter_list|()
block|{
name|QSettings
name|settings
argument_list|(
name|QKde
operator|::
name|kdeHome
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/share/config/kdeglobals"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"Toolbar style"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|toolbarStyle
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"ToolButtonStyle"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"TextBesideIcon"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|toolbarStyle
operator|==
name|QLatin1String
argument_list|(
literal|"TextBesideIcon"
argument_list|)
condition|)
return|return
name|Qt
operator|::
name|ToolButtonTextBesideIcon
return|;
elseif|else
if|if
condition|(
name|toolbarStyle
operator|==
name|QLatin1String
argument_list|(
literal|"TextOnly"
argument_list|)
condition|)
return|return
name|Qt
operator|::
name|ToolButtonTextOnly
return|;
elseif|else
if|if
condition|(
name|toolbarStyle
operator|==
name|QLatin1String
argument_list|(
literal|"TextUnderIcon"
argument_list|)
condition|)
return|return
name|Qt
operator|::
name|ToolButtonTextUnderIcon
return|;
return|return
name|Qt
operator|::
name|ToolButtonTextBesideIcon
return|;
block|}
end_function
begin_function
DECL|function|kdeToolBarIconSize
name|int
name|QKde
operator|::
name|kdeToolBarIconSize
parameter_list|()
block|{
specifier|static
name|int
name|iconSize
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|iconSize
operator|==
operator|-
literal|1
condition|)
block|{
name|QSettings
name|settings
argument_list|(
name|QKde
operator|::
name|kdeHome
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/share/config/kdeglobals"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"ToolbarIcons"
argument_list|)
argument_list|)
expr_stmt|;
name|iconSize
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"Size"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
return|return
name|iconSize
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_WS_X11
end_comment
end_unit
