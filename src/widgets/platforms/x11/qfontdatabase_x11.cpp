begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qpaintdevice.h>
end_include
begin_include
include|#
directive|include
file|<qelapsedtimer.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_x11_p.h>
end_include
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qtemporaryfile.h>
end_include
begin_include
include|#
directive|include
file|<qabstractfileengine.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<ctype.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<sys/mman.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_x11_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FONTCONFIG
end_ifndef
begin_include
include|#
directive|include
file|<ft2build.h>
end_include
begin_include
include|#
directive|include
include|FT_FREETYPE_H
end_include
begin_if
if|#
directive|if
name|FC_VERSION
operator|>=
literal|20402
end_if
begin_include
include|#
directive|include
file|<fontconfig/fcfreetype.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_BEGIN_NAMESPACE
comment|// from qfont_x11.cpp
specifier|extern
name|double
name|qt_pointSize
parameter_list|(
name|double
name|pixelSize
parameter_list|,
name|int
name|dpi
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|double
name|qt_pixelSize
parameter_list|(
name|double
name|pointSize
parameter_list|,
name|int
name|dpi
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// from qapplication.cpp
end_comment
begin_decl_stmt
specifier|extern
name|bool
name|qt_is_gui_used
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|capitalize
specifier|static
specifier|inline
name|void
name|capitalize
parameter_list|(
name|char
modifier|*
name|s
parameter_list|)
block|{
name|bool
name|space
init|=
literal|true
decl_stmt|;
while|while
condition|(
operator|*
name|s
condition|)
block|{
if|if
condition|(
name|space
condition|)
operator|*
name|s
operator|=
name|toupper
argument_list|(
operator|*
name|s
argument_list|)
expr_stmt|;
name|space
operator|=
operator|(
operator|*
name|s
operator|==
literal|' '
operator|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*   To regenerate the writingSystems_for_xlfd_encoding table, run   'util/unicode/x11/makeencodings' and paste the generated   'encodings.c' here. */
end_comment
begin_comment
comment|// ----- begin of generated code -----
end_comment
begin_define
DECL|macro|make_tag
define|#
directive|define
name|make_tag
parameter_list|(
name|c1
parameter_list|,
name|c2
parameter_list|,
name|c3
parameter_list|,
name|c4
parameter_list|)
define|\
value|((((unsigned int)c1)<<24) | (((unsigned int)c2)<<16) |      \      (((unsigned int)c3)<<8) | ((unsigned int)c4))
end_define
begin_struct
DECL|struct|XlfdEncoding
struct|struct
name|XlfdEncoding
block|{
DECL|member|name
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
DECL|member|id
name|int
name|id
decl_stmt|;
DECL|member|mib
name|int
name|mib
decl_stmt|;
DECL|member|hash1
name|unsigned
name|int
name|hash1
decl_stmt|;
DECL|member|hash2
name|unsigned
name|int
name|hash2
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|xlfd_encoding
specifier|static
specifier|const
name|XlfdEncoding
name|xlfd_encoding
index|[]
init|=
block|{
block|{
literal|"iso8859-1"
block|,
literal|0
block|,
literal|4
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'o'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'5'
argument_list|,
literal|'9'
argument_list|,
literal|'-'
argument_list|,
literal|'1'
argument_list|)
block|}
block|,
block|{
literal|"iso8859-2"
block|,
literal|1
block|,
literal|5
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'o'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'5'
argument_list|,
literal|'9'
argument_list|,
literal|'-'
argument_list|,
literal|'2'
argument_list|)
block|}
block|,
block|{
literal|"iso8859-3"
block|,
literal|2
block|,
literal|6
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'o'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'5'
argument_list|,
literal|'9'
argument_list|,
literal|'-'
argument_list|,
literal|'3'
argument_list|)
block|}
block|,
block|{
literal|"iso8859-4"
block|,
literal|3
block|,
literal|7
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'o'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'5'
argument_list|,
literal|'9'
argument_list|,
literal|'-'
argument_list|,
literal|'4'
argument_list|)
block|}
block|,
block|{
literal|"iso8859-9"
block|,
literal|4
block|,
literal|12
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'o'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'5'
argument_list|,
literal|'9'
argument_list|,
literal|'-'
argument_list|,
literal|'9'
argument_list|)
block|}
block|,
block|{
literal|"iso8859-10"
block|,
literal|5
block|,
literal|13
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'o'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'9'
argument_list|,
literal|'-'
argument_list|,
literal|'1'
argument_list|,
literal|'0'
argument_list|)
block|}
block|,
block|{
literal|"iso8859-13"
block|,
literal|6
block|,
literal|109
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'o'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'9'
argument_list|,
literal|'-'
argument_list|,
literal|'1'
argument_list|,
literal|'3'
argument_list|)
block|}
block|,
block|{
literal|"iso8859-14"
block|,
literal|7
block|,
literal|110
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'o'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'9'
argument_list|,
literal|'-'
argument_list|,
literal|'1'
argument_list|,
literal|'4'
argument_list|)
block|}
block|,
block|{
literal|"iso8859-15"
block|,
literal|8
block|,
literal|111
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'o'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'9'
argument_list|,
literal|'-'
argument_list|,
literal|'1'
argument_list|,
literal|'5'
argument_list|)
block|}
block|,
block|{
literal|"hp-roman8"
block|,
literal|9
block|,
literal|2004
block|,
name|make_tag
argument_list|(
literal|'h'
argument_list|,
literal|'p'
argument_list|,
literal|'-'
argument_list|,
literal|'r'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'m'
argument_list|,
literal|'a'
argument_list|,
literal|'n'
argument_list|,
literal|'8'
argument_list|)
block|}
block|,
block|{
literal|"iso8859-5"
block|,
literal|10
block|,
literal|8
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'o'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'5'
argument_list|,
literal|'9'
argument_list|,
literal|'-'
argument_list|,
literal|'5'
argument_list|)
block|}
block|,
block|{
literal|"*-cp1251"
block|,
literal|11
block|,
literal|2251
block|,
literal|0
block|,
name|make_tag
argument_list|(
literal|'1'
argument_list|,
literal|'2'
argument_list|,
literal|'5'
argument_list|,
literal|'1'
argument_list|)
block|}
block|,
block|{
literal|"koi8-ru"
block|,
literal|12
block|,
literal|2084
block|,
name|make_tag
argument_list|(
literal|'k'
argument_list|,
literal|'o'
argument_list|,
literal|'i'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'8'
argument_list|,
literal|'-'
argument_list|,
literal|'r'
argument_list|,
literal|'u'
argument_list|)
block|}
block|,
block|{
literal|"koi8-u"
block|,
literal|13
block|,
literal|2088
block|,
name|make_tag
argument_list|(
literal|'k'
argument_list|,
literal|'o'
argument_list|,
literal|'i'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'8'
argument_list|,
literal|'-'
argument_list|,
literal|'u'
argument_list|)
block|}
block|,
block|{
literal|"koi8-r"
block|,
literal|14
block|,
literal|2084
block|,
name|make_tag
argument_list|(
literal|'k'
argument_list|,
literal|'o'
argument_list|,
literal|'i'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'8'
argument_list|,
literal|'-'
argument_list|,
literal|'r'
argument_list|)
block|}
block|,
block|{
literal|"iso8859-7"
block|,
literal|15
block|,
literal|10
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'o'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'5'
argument_list|,
literal|'9'
argument_list|,
literal|'-'
argument_list|,
literal|'7'
argument_list|)
block|}
block|,
block|{
literal|"iso8859-8"
block|,
literal|16
block|,
literal|85
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'o'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'5'
argument_list|,
literal|'9'
argument_list|,
literal|'-'
argument_list|,
literal|'8'
argument_list|)
block|}
block|,
block|{
literal|"gb18030-0"
block|,
literal|17
block|,
operator|-
literal|114
block|,
name|make_tag
argument_list|(
literal|'g'
argument_list|,
literal|'b'
argument_list|,
literal|'1'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'3'
argument_list|,
literal|'0'
argument_list|,
literal|'-'
argument_list|,
literal|'0'
argument_list|)
block|}
block|,
block|{
literal|"gb18030.2000-0"
block|,
literal|18
block|,
operator|-
literal|113
block|,
name|make_tag
argument_list|(
literal|'g'
argument_list|,
literal|'b'
argument_list|,
literal|'1'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'0'
argument_list|,
literal|'0'
argument_list|,
literal|'-'
argument_list|,
literal|'0'
argument_list|)
block|}
block|,
block|{
literal|"gbk-0"
block|,
literal|19
block|,
operator|-
literal|113
block|,
name|make_tag
argument_list|(
literal|'g'
argument_list|,
literal|'b'
argument_list|,
literal|'k'
argument_list|,
literal|'-'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'b'
argument_list|,
literal|'k'
argument_list|,
literal|'-'
argument_list|,
literal|'0'
argument_list|)
block|}
block|,
block|{
literal|"gb2312.*-0"
block|,
literal|20
block|,
literal|57
block|,
name|make_tag
argument_list|(
literal|'g'
argument_list|,
literal|'b'
argument_list|,
literal|'2'
argument_list|,
literal|'3'
argument_list|)
block|,
literal|0
block|}
block|,
block|{
literal|"jisx0201*-0"
block|,
literal|21
block|,
literal|15
block|,
name|make_tag
argument_list|(
literal|'j'
argument_list|,
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'x'
argument_list|)
block|,
literal|0
block|}
block|,
block|{
literal|"jisx0208*-0"
block|,
literal|22
block|,
literal|63
block|,
name|make_tag
argument_list|(
literal|'j'
argument_list|,
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'x'
argument_list|)
block|,
literal|0
block|}
block|,
block|{
literal|"ksc5601*-*"
block|,
literal|23
block|,
literal|36
block|,
name|make_tag
argument_list|(
literal|'k'
argument_list|,
literal|'s'
argument_list|,
literal|'c'
argument_list|,
literal|'5'
argument_list|)
block|,
literal|0
block|}
block|,
block|{
literal|"big5hkscs-0"
block|,
literal|24
block|,
operator|-
literal|2101
block|,
name|make_tag
argument_list|(
literal|'b'
argument_list|,
literal|'i'
argument_list|,
literal|'g'
argument_list|,
literal|'5'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'c'
argument_list|,
literal|'s'
argument_list|,
literal|'-'
argument_list|,
literal|'0'
argument_list|)
block|}
block|,
block|{
literal|"hkscs-1"
block|,
literal|25
block|,
operator|-
literal|2101
block|,
name|make_tag
argument_list|(
literal|'h'
argument_list|,
literal|'k'
argument_list|,
literal|'s'
argument_list|,
literal|'c'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'c'
argument_list|,
literal|'s'
argument_list|,
literal|'-'
argument_list|,
literal|'1'
argument_list|)
block|}
block|,
block|{
literal|"big5*-*"
block|,
literal|26
block|,
operator|-
literal|2026
block|,
name|make_tag
argument_list|(
literal|'b'
argument_list|,
literal|'i'
argument_list|,
literal|'g'
argument_list|,
literal|'5'
argument_list|)
block|,
literal|0
block|}
block|,
block|{
literal|"tscii-*"
block|,
literal|27
block|,
literal|2028
block|,
name|make_tag
argument_list|(
literal|'t'
argument_list|,
literal|'s'
argument_list|,
literal|'c'
argument_list|,
literal|'i'
argument_list|)
block|,
literal|0
block|}
block|,
block|{
literal|"tis620*-*"
block|,
literal|28
block|,
literal|2259
block|,
name|make_tag
argument_list|(
literal|'t'
argument_list|,
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'6'
argument_list|)
block|,
literal|0
block|}
block|,
block|{
literal|"iso8859-11"
block|,
literal|29
block|,
literal|2259
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'o'
argument_list|,
literal|'8'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'9'
argument_list|,
literal|'-'
argument_list|,
literal|'1'
argument_list|,
literal|'1'
argument_list|)
block|}
block|,
block|{
literal|"mulelao-1"
block|,
literal|30
block|,
operator|-
literal|4242
block|,
name|make_tag
argument_list|(
literal|'m'
argument_list|,
literal|'u'
argument_list|,
literal|'l'
argument_list|,
literal|'e'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'a'
argument_list|,
literal|'o'
argument_list|,
literal|'-'
argument_list|,
literal|'1'
argument_list|)
block|}
block|,
block|{
literal|"ethiopic-unicode"
block|,
literal|31
block|,
literal|0
block|,
name|make_tag
argument_list|(
literal|'e'
argument_list|,
literal|'t'
argument_list|,
literal|'h'
argument_list|,
literal|'i'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'c'
argument_list|,
literal|'o'
argument_list|,
literal|'d'
argument_list|,
literal|'e'
argument_list|)
block|}
block|,
block|{
literal|"iso10646-1"
block|,
literal|32
block|,
literal|0
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'s'
argument_list|,
literal|'o'
argument_list|,
literal|'1'
argument_list|)
block|,
name|make_tag
argument_list|(
literal|'4'
argument_list|,
literal|'6'
argument_list|,
literal|'-'
argument_list|,
literal|'1'
argument_list|)
block|}
block|,
block|{
literal|"unicode-*"
block|,
literal|33
block|,
literal|0
block|,
name|make_tag
argument_list|(
literal|'u'
argument_list|,
literal|'n'
argument_list|,
literal|'i'
argument_list|,
literal|'c'
argument_list|)
block|,
literal|0
block|}
block|,
block|{
literal|"*-symbol"
block|,
literal|34
block|,
literal|0
block|,
literal|0
block|,
name|make_tag
argument_list|(
literal|'m'
argument_list|,
literal|'b'
argument_list|,
literal|'o'
argument_list|,
literal|'l'
argument_list|)
block|}
block|,
block|{
literal|"*-fontspecific"
block|,
literal|35
block|,
literal|0
block|,
literal|0
block|,
name|make_tag
argument_list|(
literal|'i'
argument_list|,
literal|'f'
argument_list|,
literal|'i'
argument_list|,
literal|'c'
argument_list|)
block|}
block|,
block|{
literal|"fontspecific-*"
block|,
literal|36
block|,
literal|0
block|,
name|make_tag
argument_list|(
literal|'f'
argument_list|,
literal|'o'
argument_list|,
literal|'n'
argument_list|,
literal|'t'
argument_list|)
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|writingSystems_for_xlfd_encoding
specifier|static
specifier|const
name|char
name|writingSystems_for_xlfd_encoding
index|[
sizeof|sizeof
argument_list|(
name|xlfd_encoding
argument_list|)
index|]
index|[
name|QFontDatabase
operator|::
name|WritingSystemsCount
index|]
init|=
block|{
comment|// iso8859-1
block|{
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// iso8859-2
block|{
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// iso8859-3
block|{
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// iso8859-4
block|{
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// iso8859-9
block|{
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// iso8859-10
block|{
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// iso8859-13
block|{
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// iso8859-14
block|{
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// iso8859-15
block|{
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// hp-roman8
block|{
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// iso8859-5
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// *-cp1251
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// koi8-ru
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// koi8-u
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// koi8-r
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// iso8859-7
block|{
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// iso8859-8
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// gb18030-0
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// gb18030.2000-0
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// gbk-0
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// gb2312.*-0
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// jisx0201*-0
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// jisx0208*-0
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// ksc5601*-*
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// big5hkscs-0
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// hkscs-1
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// big5*-*
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// tscii-*
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// tis620*-*
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// iso8859-11
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// mulelao-1
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// ethiopic-unicode
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// iso10646-1
block|{
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// unicode-*
block|{
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// *-symbol
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|}
block|,
comment|// *-fontspecific
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|}
block|,
comment|// fontspecific-*
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// ----- end of generated code -----
end_comment
begin_decl_stmt
DECL|variable|numEncodings
specifier|const
name|int
name|numEncodings
init|=
sizeof|sizeof
argument_list|(
name|xlfd_encoding
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|XlfdEncoding
argument_list|)
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_xlfd_encoding_id
name|int
name|qt_xlfd_encoding_id
parameter_list|(
specifier|const
name|char
modifier|*
name|encoding
parameter_list|)
block|{
comment|// qDebug("looking for encoding id for '%s'", encoding);
name|int
name|len
init|=
name|strlen
argument_list|(
name|encoding
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|<
literal|4
condition|)
return|return
operator|-
literal|1
return|;
name|unsigned
name|int
name|hash1
init|=
name|make_tag
argument_list|(
name|encoding
index|[
literal|0
index|]
argument_list|,
name|encoding
index|[
literal|1
index|]
argument_list|,
name|encoding
index|[
literal|2
index|]
argument_list|,
name|encoding
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|ch
init|=
name|encoding
operator|+
name|len
operator|-
literal|4
decl_stmt|;
name|unsigned
name|int
name|hash2
init|=
name|make_tag
argument_list|(
name|ch
index|[
literal|0
index|]
argument_list|,
name|ch
index|[
literal|1
index|]
argument_list|,
name|ch
index|[
literal|2
index|]
argument_list|,
name|ch
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
specifier|const
name|XlfdEncoding
modifier|*
name|enc
init|=
name|xlfd_encoding
decl_stmt|;
for|for
control|(
init|;
name|enc
operator|->
name|name
condition|;
operator|++
name|enc
control|)
block|{
if|if
condition|(
operator|(
name|enc
operator|->
name|hash1
operator|&&
name|enc
operator|->
name|hash1
operator|!=
name|hash1
operator|)
operator|||
operator|(
name|enc
operator|->
name|hash2
operator|&&
name|enc
operator|->
name|hash2
operator|!=
name|hash2
operator|)
condition|)
continue|continue;
comment|// hashes match, do a compare if strings match
comment|// the enc->name can contain '*'s we have to interpret correctly
specifier|const
name|char
modifier|*
name|n
init|=
name|enc
operator|->
name|name
decl_stmt|;
specifier|const
name|char
modifier|*
name|e
init|=
name|encoding
decl_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
comment|// qDebug("bol: *e='%c', *n='%c'", *e, *n);
if|if
condition|(
operator|*
name|e
operator|==
literal|'\0'
condition|)
block|{
if|if
condition|(
operator|*
name|n
condition|)
break|break;
comment|// qDebug("found encoding id %d", enc->id);
return|return
name|enc
operator|->
name|id
return|;
block|}
if|if
condition|(
operator|*
name|e
operator|==
operator|*
name|n
condition|)
block|{
operator|++
name|e
expr_stmt|;
operator|++
name|n
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|*
name|n
operator|!=
literal|'*'
condition|)
break|break;
operator|++
name|n
expr_stmt|;
comment|// qDebug("skip: *e='%c', *n='%c'", *e, *n);
while|while
condition|(
operator|*
name|e
operator|&&
operator|*
name|e
operator|!=
operator|*
name|n
condition|)
operator|++
name|e
expr_stmt|;
block|}
block|}
comment|// qDebug("couldn't find encoding %s", encoding);
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|qt_mib_for_xlfd_encoding
name|int
name|qt_mib_for_xlfd_encoding
parameter_list|(
specifier|const
name|char
modifier|*
name|encoding
parameter_list|)
block|{
name|int
name|id
init|=
name|qt_xlfd_encoding_id
argument_list|(
name|encoding
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
operator|-
literal|1
condition|)
return|return
name|xlfd_encoding
index|[
name|id
index|]
operator|.
name|mib
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qt_encoding_id_for_mib
name|int
name|qt_encoding_id_for_mib
parameter_list|(
name|int
name|mib
parameter_list|)
block|{
specifier|const
name|XlfdEncoding
modifier|*
name|enc
init|=
name|xlfd_encoding
decl_stmt|;
for|for
control|(
init|;
name|enc
operator|->
name|name
condition|;
operator|++
name|enc
control|)
block|{
if|if
condition|(
name|enc
operator|->
name|mib
operator|==
name|mib
condition|)
return|return
name|enc
operator|->
name|id
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|xlfd_for_id
specifier|static
specifier|const
name|char
modifier|*
name|xlfd_for_id
parameter_list|(
name|int
name|id
parameter_list|)
block|{
comment|// special case: -1 returns the "*-*" encoding, allowing us to do full
comment|// database population in a single X server round trip.
if|if
condition|(
name|id
argument_list|<
literal|0
operator|||
name|id
argument_list|>
name|numEncodings
condition|)
return|return
literal|"*-*"
return|;
return|return
name|xlfd_encoding
index|[
name|id
index|]
operator|.
name|name
return|;
block|}
end_function
begin_enum
DECL|enum|XLFDFieldNames
enum|enum
name|XLFDFieldNames
block|{
DECL|enumerator|Foundry
name|Foundry
block|,
DECL|enumerator|Family
name|Family
block|,
DECL|enumerator|Weight
name|Weight
block|,
DECL|enumerator|Slant
name|Slant
block|,
DECL|enumerator|Width
name|Width
block|,
DECL|enumerator|AddStyle
name|AddStyle
block|,
DECL|enumerator|PixelSize
name|PixelSize
block|,
DECL|enumerator|PointSize
name|PointSize
block|,
DECL|enumerator|ResolutionX
name|ResolutionX
block|,
DECL|enumerator|ResolutionY
name|ResolutionY
block|,
DECL|enumerator|Spacing
name|Spacing
block|,
DECL|enumerator|AverageWidth
name|AverageWidth
block|,
DECL|enumerator|CharsetRegistry
name|CharsetRegistry
block|,
DECL|enumerator|CharsetEncoding
name|CharsetEncoding
block|,
DECL|enumerator|NFontFields
name|NFontFields
block|}
enum|;
end_enum
begin_comment
comment|// Splits an X font name into fields separated by '-'
end_comment
begin_function
DECL|function|parseXFontName
specifier|static
name|bool
name|parseXFontName
parameter_list|(
name|char
modifier|*
name|fontName
parameter_list|,
name|char
modifier|*
modifier|*
name|tokens
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fontName
operator|||
name|fontName
index|[
literal|0
index|]
operator|==
literal|'0'
operator|||
name|fontName
index|[
literal|0
index|]
operator|!=
literal|'-'
condition|)
block|{
name|tokens
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|i
decl_stmt|;
operator|++
name|fontName
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NFontFields
operator|&&
name|fontName
operator|&&
name|fontName
index|[
literal|0
index|]
condition|;
operator|++
name|i
control|)
block|{
name|tokens
index|[
name|i
index|]
operator|=
name|fontName
expr_stmt|;
for|for
control|(
init|;
condition|;
operator|++
name|fontName
control|)
block|{
if|if
condition|(
operator|*
name|fontName
operator|==
literal|'-'
condition|)
break|break;
if|if
condition|(
operator|!
operator|*
name|fontName
condition|)
block|{
name|fontName
operator|=
literal|0
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|fontName
condition|)
operator|*
name|fontName
operator|++
operator|=
literal|'\0'
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|NFontFields
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|NFontFields
condition|;
operator|++
name|j
control|)
name|tokens
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|isZero
specifier|static
specifier|inline
name|bool
name|isZero
parameter_list|(
name|char
modifier|*
name|x
parameter_list|)
block|{
return|return
operator|(
name|x
index|[
literal|0
index|]
operator|==
literal|'0'
operator|&&
name|x
index|[
literal|1
index|]
operator|==
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|isScalable
specifier|static
specifier|inline
name|bool
name|isScalable
parameter_list|(
name|char
modifier|*
modifier|*
name|tokens
parameter_list|)
block|{
return|return
operator|(
name|isZero
argument_list|(
name|tokens
index|[
name|PixelSize
index|]
argument_list|)
operator|&&
name|isZero
argument_list|(
name|tokens
index|[
name|PointSize
index|]
argument_list|)
operator|&&
name|isZero
argument_list|(
name|tokens
index|[
name|AverageWidth
index|]
argument_list|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|isSmoothlyScalable
specifier|static
specifier|inline
name|bool
name|isSmoothlyScalable
parameter_list|(
name|char
modifier|*
modifier|*
name|tokens
parameter_list|)
block|{
return|return
operator|(
name|isZero
argument_list|(
name|tokens
index|[
name|ResolutionX
index|]
argument_list|)
operator|&&
name|isZero
argument_list|(
name|tokens
index|[
name|ResolutionY
index|]
argument_list|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|isFixedPitch
specifier|static
specifier|inline
name|bool
name|isFixedPitch
parameter_list|(
name|char
modifier|*
modifier|*
name|tokens
parameter_list|)
block|{
return|return
operator|(
name|tokens
index|[
name|Spacing
index|]
index|[
literal|0
index|]
operator|==
literal|'m'
operator|||
name|tokens
index|[
name|Spacing
index|]
index|[
literal|0
index|]
operator|==
literal|'c'
operator|||
name|tokens
index|[
name|Spacing
index|]
index|[
literal|0
index|]
operator|==
literal|'M'
operator|||
name|tokens
index|[
name|Spacing
index|]
index|[
literal|0
index|]
operator|==
literal|'C'
operator|)
return|;
block|}
end_function
begin_comment
comment|/*   Fills in a font definition (QFontDef) from an XLFD (X Logical Font   Description).    Returns true if the given xlfd is valid. */
end_comment
begin_function
DECL|function|qt_fillFontDef
name|bool
name|qt_fillFontDef
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|xlfd
parameter_list|,
name|QFontDef
modifier|*
name|fd
parameter_list|,
name|int
name|dpi
parameter_list|,
name|QtFontDesc
modifier|*
name|desc
parameter_list|)
block|{
name|char
modifier|*
name|tokens
index|[
name|NFontFields
index|]
decl_stmt|;
name|QByteArray
name|buffer
init|=
name|xlfd
decl_stmt|;
if|if
condition|(
operator|!
name|parseXFontName
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|tokens
argument_list|)
condition|)
return|return
literal|false
return|;
name|capitalize
argument_list|(
name|tokens
index|[
name|Family
index|]
argument_list|)
expr_stmt|;
name|capitalize
argument_list|(
name|tokens
index|[
name|Foundry
index|]
argument_list|)
expr_stmt|;
name|fd
operator|->
name|styleStrategy
operator||=
name|QFont
operator|::
name|NoAntialias
expr_stmt|;
name|fd
operator|->
name|family
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|tokens
index|[
name|Family
index|]
argument_list|)
expr_stmt|;
name|QString
name|foundry
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|tokens
index|[
name|Foundry
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|foundry
operator|.
name|isEmpty
argument_list|()
operator|&&
name|foundry
operator|!=
name|QLatin1String
argument_list|(
literal|"*"
argument_list|)
operator|&&
operator|(
operator|!
name|desc
operator|||
name|desc
operator|->
name|family
operator|->
name|count
operator|>
literal|1
operator|)
condition|)
name|fd
operator|->
name|family
operator|+=
name|QLatin1String
argument_list|(
literal|" ["
argument_list|)
operator|+
name|foundry
operator|+
name|QLatin1Char
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
if|if
condition|(
name|qstrlen
argument_list|(
name|tokens
index|[
name|AddStyle
index|]
argument_list|)
operator|>
literal|0
condition|)
name|fd
operator|->
name|addStyle
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|tokens
index|[
name|AddStyle
index|]
argument_list|)
expr_stmt|;
else|else
name|fd
operator|->
name|addStyle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fd
operator|->
name|pointSize
operator|=
name|atoi
argument_list|(
name|tokens
index|[
name|PointSize
index|]
argument_list|)
operator|/
literal|10.
expr_stmt|;
name|fd
operator|->
name|styleHint
operator|=
name|QFont
operator|::
name|AnyStyle
expr_stmt|;
comment|// ### any until we match families
name|char
name|slant
init|=
name|tolower
argument_list|(
operator|(
name|uchar
operator|)
name|tokens
index|[
name|Slant
index|]
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|fd
operator|->
name|style
operator|=
operator|(
name|slant
operator|==
literal|'o'
condition|?
name|QFont
operator|::
name|StyleOblique
else|:
operator|(
name|slant
operator|==
literal|'i'
condition|?
name|QFont
operator|::
name|StyleItalic
else|:
name|QFont
operator|::
name|StyleNormal
operator|)
operator|)
expr_stmt|;
name|char
name|fixed
init|=
name|tolower
argument_list|(
operator|(
name|uchar
operator|)
name|tokens
index|[
name|Spacing
index|]
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|fd
operator|->
name|fixedPitch
operator|=
operator|(
name|fixed
operator|==
literal|'m'
operator|||
name|fixed
operator|==
literal|'c'
operator|)
expr_stmt|;
name|fd
operator|->
name|weight
operator|=
name|getFontWeight
argument_list|(
name|QLatin1String
argument_list|(
name|tokens
index|[
name|Weight
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|r
init|=
name|atoi
argument_list|(
name|tokens
index|[
name|ResolutionY
index|]
argument_list|)
decl_stmt|;
name|fd
operator|->
name|pixelSize
operator|=
name|atoi
argument_list|(
name|tokens
index|[
name|PixelSize
index|]
argument_list|)
expr_stmt|;
comment|// not "0" or "*", or required DPI
if|if
condition|(
name|r
operator|&&
name|fd
operator|->
name|pixelSize
operator|&&
name|r
operator|!=
name|dpi
condition|)
block|{
comment|// calculate actual pointsize for display DPI
name|fd
operator|->
name|pointSize
operator|=
name|qt_pointSize
argument_list|(
name|fd
operator|->
name|pixelSize
argument_list|,
name|dpi
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fd
operator|->
name|pixelSize
operator|==
literal|0
operator|&&
name|fd
operator|->
name|pointSize
condition|)
block|{
comment|// calculate pixel size from pointsize/dpi
name|fd
operator|->
name|pixelSize
operator|=
name|qRound
argument_list|(
name|qt_pixelSize
argument_list|(
name|fd
operator|->
name|pointSize
argument_list|,
name|dpi
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*   Fills in a font definition (QFontDef) from the font properties in an   XFontStruct.    Returns true if the QFontDef could be filled with properties from   the XFontStruct. */
end_comment
begin_function
DECL|function|qt_fillFontDef
specifier|static
name|bool
name|qt_fillFontDef
parameter_list|(
name|XFontStruct
modifier|*
name|fs
parameter_list|,
name|QFontDef
modifier|*
name|fd
parameter_list|,
name|int
name|dpi
parameter_list|,
name|QtFontDesc
modifier|*
name|desc
parameter_list|)
block|{
name|unsigned
name|long
name|value
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|||
operator|!
name|XGetFontProperty
argument_list|(
name|fs
argument_list|,
name|XA_FONT
argument_list|,
operator|&
name|value
argument_list|)
condition|)
return|return
literal|false
return|;
name|char
modifier|*
name|n
init|=
name|XGetAtomName
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|QByteArray
name|xlfd
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
name|XFree
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|qt_fillFontDef
argument_list|(
name|xlfd
operator|.
name|toLower
argument_list|()
argument_list|,
name|fd
argument_list|,
name|dpi
argument_list|,
name|desc
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getStyle
specifier|static
name|QtFontStyle
operator|::
name|Key
name|getStyle
parameter_list|(
name|char
modifier|*
modifier|*
name|tokens
parameter_list|)
block|{
name|QtFontStyle
operator|::
name|Key
name|key
decl_stmt|;
name|char
name|slant0
init|=
name|tolower
argument_list|(
operator|(
name|uchar
operator|)
name|tokens
index|[
name|Slant
index|]
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|slant0
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|tokens
index|[
name|Slant
index|]
index|[
literal|1
index|]
condition|)
block|{
name|char
name|slant1
init|=
name|tolower
argument_list|(
operator|(
name|uchar
operator|)
name|tokens
index|[
name|Slant
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|slant1
operator|==
literal|'o'
condition|)
name|key
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleOblique
expr_stmt|;
elseif|else
if|if
condition|(
name|slant1
operator|==
literal|'i'
condition|)
name|key
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleItalic
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|slant0
operator|==
literal|'o'
condition|)
name|key
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleOblique
expr_stmt|;
elseif|else
if|if
condition|(
name|slant0
operator|==
literal|'i'
condition|)
name|key
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleItalic
expr_stmt|;
name|key
operator|.
name|weight
operator|=
name|getFontWeight
argument_list|(
name|QLatin1String
argument_list|(
name|tokens
index|[
name|Weight
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|qstrcmp
argument_list|(
name|tokens
index|[
name|Width
index|]
argument_list|,
literal|"normal"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|key
operator|.
name|stretch
operator|=
literal|100
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qstrcmp
argument_list|(
name|tokens
index|[
name|Width
index|]
argument_list|,
literal|"semi condensed"
argument_list|)
operator|==
literal|0
operator|||
name|qstrcmp
argument_list|(
name|tokens
index|[
name|Width
index|]
argument_list|,
literal|"semicondensed"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|key
operator|.
name|stretch
operator|=
literal|90
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qstrcmp
argument_list|(
name|tokens
index|[
name|Width
index|]
argument_list|,
literal|"condensed"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|key
operator|.
name|stretch
operator|=
literal|80
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qstrcmp
argument_list|(
name|tokens
index|[
name|Width
index|]
argument_list|,
literal|"narrow"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|key
operator|.
name|stretch
operator|=
literal|60
expr_stmt|;
block|}
return|return
name|key
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|xlfdsFullyLoaded
specifier|static
name|bool
name|xlfdsFullyLoaded
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|encodingLoaded
specifier|static
name|unsigned
name|char
name|encodingLoaded
index|[
name|numEncodings
index|]
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|loadXlfds
specifier|static
name|void
name|loadXlfds
parameter_list|(
specifier|const
name|char
modifier|*
name|reqFamily
parameter_list|,
name|int
name|encoding_id
parameter_list|)
block|{
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
name|QtFontFamily
modifier|*
name|fontFamily
init|=
name|reqFamily
condition|?
name|db
operator|->
name|family
argument_list|(
name|QLatin1String
argument_list|(
name|reqFamily
argument_list|)
argument_list|)
else|:
literal|0
decl_stmt|;
comment|// make sure we don't load twice
if|if
condition|(
operator|(
name|encoding_id
operator|==
operator|-
literal|1
operator|&&
name|xlfdsFullyLoaded
operator|)
operator|||
operator|(
name|encoding_id
operator|!=
operator|-
literal|1
operator|&&
name|encodingLoaded
index|[
name|encoding_id
index|]
operator|)
condition|)
return|return;
if|if
condition|(
name|fontFamily
operator|&&
name|fontFamily
operator|->
name|xlfdLoaded
condition|)
return|return;
name|int
name|fontCount
decl_stmt|;
comment|// force the X server to give us XLFDs
name|QByteArray
name|xlfd_pattern
argument_list|(
literal|"-*-"
argument_list|)
decl_stmt|;
name|xlfd_pattern
operator|+=
operator|(
name|reqFamily
operator|&&
name|reqFamily
index|[
literal|0
index|]
operator|!=
literal|'\0'
operator|)
condition|?
name|reqFamily
else|:
literal|"*"
expr_stmt|;
name|xlfd_pattern
operator|+=
literal|"-*-*-*-*-*-*-*-*-*-*-"
expr_stmt|;
name|xlfd_pattern
operator|+=
name|xlfd_for_id
argument_list|(
name|encoding_id
argument_list|)
expr_stmt|;
name|char
modifier|*
modifier|*
name|fontList
init|=
name|XListFonts
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|xlfd_pattern
argument_list|,
literal|0xffff
argument_list|,
operator|&
name|fontCount
argument_list|)
decl_stmt|;
comment|// qDebug("requesting xlfd='%s', got %d fonts", xlfd_pattern.data(), fontCount);
name|char
modifier|*
name|tokens
index|[
name|NFontFields
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fontCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|parseXFontName
argument_list|(
name|fontList
index|[
name|i
index|]
argument_list|,
name|tokens
argument_list|)
condition|)
continue|continue;
comment|// get the encoding_id for this xlfd.  we need to do this
comment|// here, since we can pass -1 to this function to do full
comment|// database population
operator|*
operator|(
name|tokens
index|[
name|CharsetEncoding
index|]
operator|-
literal|1
operator|)
operator|=
literal|'-'
expr_stmt|;
name|int
name|encoding_id
init|=
name|qt_xlfd_encoding_id
argument_list|(
name|tokens
index|[
name|CharsetRegistry
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding_id
operator|==
operator|-
literal|1
condition|)
continue|continue;
name|char
modifier|*
name|familyName
init|=
name|tokens
index|[
name|Family
index|]
decl_stmt|;
name|capitalize
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
name|char
modifier|*
name|foundryName
init|=
name|tokens
index|[
name|Foundry
index|]
decl_stmt|;
name|capitalize
argument_list|(
name|foundryName
argument_list|)
expr_stmt|;
name|QtFontStyle
operator|::
name|Key
name|styleKey
init|=
name|getStyle
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
name|bool
name|smooth_scalable
init|=
literal|false
decl_stmt|;
name|bool
name|bitmap_scalable
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isScalable
argument_list|(
name|tokens
argument_list|)
condition|)
block|{
if|if
condition|(
name|isSmoothlyScalable
argument_list|(
name|tokens
argument_list|)
condition|)
name|smooth_scalable
operator|=
literal|true
expr_stmt|;
else|else
name|bitmap_scalable
operator|=
literal|true
expr_stmt|;
block|}
name|uint
name|pixelSize
init|=
name|atoi
argument_list|(
name|tokens
index|[
name|PixelSize
index|]
argument_list|)
decl_stmt|;
name|uint
name|xpointSize
init|=
name|atoi
argument_list|(
name|tokens
index|[
name|PointSize
index|]
argument_list|)
decl_stmt|;
name|uint
name|xres
init|=
name|atoi
argument_list|(
name|tokens
index|[
name|ResolutionX
index|]
argument_list|)
decl_stmt|;
name|uint
name|yres
init|=
name|atoi
argument_list|(
name|tokens
index|[
name|ResolutionY
index|]
argument_list|)
decl_stmt|;
name|uint
name|avgwidth
init|=
name|atoi
argument_list|(
name|tokens
index|[
name|AverageWidth
index|]
argument_list|)
decl_stmt|;
name|bool
name|fixedPitch
init|=
name|isFixedPitch
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
if|if
condition|(
name|avgwidth
operator|==
literal|0
operator|&&
name|pixelSize
operator|!=
literal|0
condition|)
block|{
comment|/*               Ignore bitmap scalable fonts that are automatically               generated by some X servers.  We know they are bitmap               scalable because even though they have a specified pixel               size, the average width is zero.             */
continue|continue;
block|}
name|QtFontFamily
modifier|*
name|family
init|=
name|fontFamily
condition|?
name|fontFamily
else|:
name|db
operator|->
name|family
argument_list|(
name|QLatin1String
argument_list|(
name|familyName
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|family
operator|->
name|fontFileIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|family
operator|->
name|symbol_checked
operator|=
literal|true
expr_stmt|;
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|family
operator|->
name|foundry
argument_list|(
name|QLatin1String
argument_list|(
name|foundryName
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QtFontStyle
modifier|*
name|style
init|=
name|foundry
operator|->
name|style
argument_list|(
name|styleKey
argument_list|,
literal|true
argument_list|)
decl_stmt|;
operator|delete
index|[]
name|style
operator|->
name|weightName
expr_stmt|;
name|style
operator|->
name|weightName
operator|=
name|qstrdup
argument_list|(
name|tokens
index|[
name|Weight
index|]
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|style
operator|->
name|setwidthName
expr_stmt|;
name|style
operator|->
name|setwidthName
operator|=
name|qstrdup
argument_list|(
name|tokens
index|[
name|Width
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|smooth_scalable
condition|)
block|{
name|style
operator|->
name|smoothScalable
operator|=
literal|true
expr_stmt|;
name|style
operator|->
name|bitmapScalable
operator|=
literal|false
expr_stmt|;
name|pixelSize
operator|=
name|SMOOTH_SCALABLE
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|style
operator|->
name|smoothScalable
operator|&&
name|bitmap_scalable
condition|)
name|style
operator|->
name|bitmapScalable
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|fixedPitch
condition|)
name|family
operator|->
name|fixedPitch
operator|=
literal|false
expr_stmt|;
name|QtFontSize
modifier|*
name|size
init|=
name|style
operator|->
name|pixelSize
argument_list|(
name|pixelSize
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QtFontEncoding
modifier|*
name|enc
init|=
name|size
operator|->
name|encodingID
argument_list|(
name|encoding_id
argument_list|,
name|xpointSize
argument_list|,
name|xres
argument_list|,
name|yres
argument_list|,
name|avgwidth
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|enc
operator|->
name|pitch
operator|=
operator|*
name|tokens
index|[
name|Spacing
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|enc
operator|->
name|pitch
condition|)
name|enc
operator|->
name|pitch
operator|=
literal|'*'
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QFontDatabase
operator|::
name|WritingSystemsCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|writingSystems_for_xlfd_encoding
index|[
name|encoding_id
index|]
index|[
name|i
index|]
condition|)
name|family
operator|->
name|writingSystems
index|[
name|i
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|reqFamily
condition|)
block|{
comment|// mark encoding as loaded
if|if
condition|(
name|encoding_id
operator|==
operator|-
literal|1
condition|)
name|xlfdsFullyLoaded
operator|=
literal|true
expr_stmt|;
else|else
name|encodingLoaded
index|[
name|encoding_id
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|XFreeFontNames
argument_list|(
name|fontList
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FONTCONFIG
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|FC_WIDTH
end_ifndef
begin_define
DECL|macro|FC_WIDTH
define|#
directive|define
name|FC_WIDTH
value|"width"
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|getFCWeight
specifier|static
name|int
name|getFCWeight
parameter_list|(
name|int
name|fc_weight
parameter_list|)
block|{
name|int
name|qtweight
init|=
name|QFont
operator|::
name|Black
decl_stmt|;
if|if
condition|(
name|fc_weight
operator|<=
operator|(
name|FC_WEIGHT_LIGHT
operator|+
name|FC_WEIGHT_MEDIUM
operator|)
operator|/
literal|2
condition|)
name|qtweight
operator|=
name|QFont
operator|::
name|Light
expr_stmt|;
elseif|else
if|if
condition|(
name|fc_weight
operator|<=
operator|(
name|FC_WEIGHT_MEDIUM
operator|+
name|FC_WEIGHT_DEMIBOLD
operator|)
operator|/
literal|2
condition|)
name|qtweight
operator|=
name|QFont
operator|::
name|Normal
expr_stmt|;
elseif|else
if|if
condition|(
name|fc_weight
operator|<=
operator|(
name|FC_WEIGHT_DEMIBOLD
operator|+
name|FC_WEIGHT_BOLD
operator|)
operator|/
literal|2
condition|)
name|qtweight
operator|=
name|QFont
operator|::
name|DemiBold
expr_stmt|;
elseif|else
if|if
condition|(
name|fc_weight
operator|<=
operator|(
name|FC_WEIGHT_BOLD
operator|+
name|FC_WEIGHT_BLACK
operator|)
operator|/
literal|2
condition|)
name|qtweight
operator|=
name|QFont
operator|::
name|Bold
expr_stmt|;
return|return
name|qtweight
return|;
block|}
end_function
begin_function
DECL|function|qt_FcPatternToQFontDef
name|QFontDef
name|qt_FcPatternToQFontDef
parameter_list|(
name|FcPattern
modifier|*
name|pattern
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|)
block|{
name|QFontDef
name|fontDef
decl_stmt|;
name|fontDef
operator|.
name|styleStrategy
operator|=
name|request
operator|.
name|styleStrategy
expr_stmt|;
name|fontDef
operator|.
name|hintingPreference
operator|=
name|request
operator|.
name|hintingPreference
expr_stmt|;
name|FcChar8
modifier|*
name|value
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|FcPatternGetString
argument_list|(
name|pattern
argument_list|,
name|FC_FAMILY
argument_list|,
literal|0
argument_list|,
operator|&
name|value
argument_list|)
operator|==
name|FcResultMatch
condition|)
block|{
name|fontDef
operator|.
name|family
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|double
name|dpi
decl_stmt|;
if|if
condition|(
name|FcPatternGetDouble
argument_list|(
name|pattern
argument_list|,
name|FC_DPI
argument_list|,
literal|0
argument_list|,
operator|&
name|dpi
argument_list|)
operator|!=
name|FcResultMatch
condition|)
block|{
if|if
condition|(
name|X11
operator|->
name|display
condition|)
name|dpi
operator|=
name|QX11Info
operator|::
name|appDpiY
argument_list|()
expr_stmt|;
else|else
name|dpi
operator|=
name|qt_defaultDpiY
argument_list|()
expr_stmt|;
block|}
name|double
name|size
decl_stmt|;
if|if
condition|(
name|FcPatternGetDouble
argument_list|(
name|pattern
argument_list|,
name|FC_PIXEL_SIZE
argument_list|,
literal|0
argument_list|,
operator|&
name|size
argument_list|)
operator|==
name|FcResultMatch
condition|)
name|fontDef
operator|.
name|pixelSize
operator|=
name|size
expr_stmt|;
else|else
name|fontDef
operator|.
name|pixelSize
operator|=
literal|12
expr_stmt|;
name|fontDef
operator|.
name|pointSize
operator|=
name|qt_pointSize
argument_list|(
name|fontDef
operator|.
name|pixelSize
argument_list|,
name|qRound
argument_list|(
name|dpi
argument_list|)
argument_list|)
expr_stmt|;
comment|/* ###        fontDef.styleHint     */
name|int
name|weight
decl_stmt|;
if|if
condition|(
name|FcPatternGetInteger
argument_list|(
name|pattern
argument_list|,
name|FC_WEIGHT
argument_list|,
literal|0
argument_list|,
operator|&
name|weight
argument_list|)
operator|!=
name|FcResultMatch
condition|)
name|weight
operator|=
name|FC_WEIGHT_MEDIUM
expr_stmt|;
name|fontDef
operator|.
name|weight
operator|=
name|getFCWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|int
name|slant
decl_stmt|;
if|if
condition|(
name|FcPatternGetInteger
argument_list|(
name|pattern
argument_list|,
name|FC_SLANT
argument_list|,
literal|0
argument_list|,
operator|&
name|slant
argument_list|)
operator|!=
name|FcResultMatch
condition|)
name|slant
operator|=
name|FC_SLANT_ROMAN
expr_stmt|;
name|fontDef
operator|.
name|style
operator|=
operator|(
name|slant
operator|==
name|FC_SLANT_ITALIC
operator|)
condition|?
name|QFont
operator|::
name|StyleItalic
else|:
operator|(
operator|(
name|slant
operator|==
name|FC_SLANT_OBLIQUE
operator|)
condition|?
name|QFont
operator|::
name|StyleOblique
else|:
name|QFont
operator|::
name|StyleNormal
operator|)
expr_stmt|;
name|FcBool
name|scalable
decl_stmt|;
if|if
condition|(
name|FcPatternGetBool
argument_list|(
name|pattern
argument_list|,
name|FC_SCALABLE
argument_list|,
literal|0
argument_list|,
operator|&
name|scalable
argument_list|)
operator|!=
name|FcResultMatch
condition|)
name|scalable
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|scalable
condition|)
block|{
name|fontDef
operator|.
name|stretch
operator|=
name|request
operator|.
name|stretch
expr_stmt|;
name|fontDef
operator|.
name|style
operator|=
name|request
operator|.
name|style
expr_stmt|;
block|}
else|else
block|{
name|int
name|width
decl_stmt|;
if|if
condition|(
name|FcPatternGetInteger
argument_list|(
name|pattern
argument_list|,
name|FC_WIDTH
argument_list|,
literal|0
argument_list|,
operator|&
name|width
argument_list|)
operator|==
name|FcResultMatch
condition|)
name|fontDef
operator|.
name|stretch
operator|=
name|width
expr_stmt|;
else|else
name|fontDef
operator|.
name|stretch
operator|=
literal|100
expr_stmt|;
block|}
name|int
name|spacing
decl_stmt|;
if|if
condition|(
name|FcPatternGetInteger
argument_list|(
name|pattern
argument_list|,
name|FC_SPACING
argument_list|,
literal|0
argument_list|,
operator|&
name|spacing
argument_list|)
operator|==
name|FcResultMatch
condition|)
block|{
name|fontDef
operator|.
name|fixedPitch
operator|=
operator|(
name|spacing
operator|>=
name|FC_MONO
operator|)
expr_stmt|;
name|fontDef
operator|.
name|ignorePitch
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|fontDef
operator|.
name|ignorePitch
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|fontDef
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|specialLanguages
specifier|static
specifier|const
name|char
modifier|*
name|specialLanguages
index|[]
init|=
block|{
literal|"en"
block|,
comment|// Common
literal|"el"
block|,
comment|// Greek
literal|"ru"
block|,
comment|// Cyrillic
literal|"hy"
block|,
comment|// Armenian
literal|"he"
block|,
comment|// Hebrew
literal|"ar"
block|,
comment|// Arabic
literal|"syr"
block|,
comment|// Syriac
literal|"div"
block|,
comment|// Thaana
literal|"hi"
block|,
comment|// Devanagari
literal|"bn"
block|,
comment|// Bengali
literal|"pa"
block|,
comment|// Gurmukhi
literal|"gu"
block|,
comment|// Gujarati
literal|"or"
block|,
comment|// Oriya
literal|"ta"
block|,
comment|// Tamil
literal|"te"
block|,
comment|// Telugu
literal|"kn"
block|,
comment|// Kannada
literal|"ml"
block|,
comment|// Malayalam
literal|"si"
block|,
comment|// Sinhala
literal|"th"
block|,
comment|// Thai
literal|"lo"
block|,
comment|// Lao
literal|"bo"
block|,
comment|// Tibetan
literal|"my"
block|,
comment|// Myanmar
literal|"ka"
block|,
comment|// Georgian
literal|"ko"
block|,
comment|// Hangul
literal|""
block|,
comment|// Ogham
literal|""
block|,
comment|// Runic
literal|"km"
block|,
comment|// Khmer
literal|""
comment|// N'Ko
block|}
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enumerator|SpecialLanguageCount
enum|enum
block|{
name|SpecialLanguageCount
init|=
sizeof|sizeof
argument_list|(
name|specialLanguages
argument_list|)
operator|/
expr|sizeof
operator|(
specifier|const
name|char
operator|*
operator|)
block|}
enum|;
end_enum
begin_decl_stmt
DECL|variable|specialChars
specifier|static
specifier|const
name|ushort
name|specialChars
index|[]
init|=
block|{
literal|0
block|,
comment|// English
literal|0
block|,
comment|// Greek
literal|0
block|,
comment|// Cyrillic
literal|0
block|,
comment|// Armenian
literal|0
block|,
comment|// Hebrew
literal|0
block|,
comment|// Arabic
literal|0
block|,
comment|// Syriac
literal|0
block|,
comment|// Thaana
literal|0
block|,
comment|// Devanagari
literal|0
block|,
comment|// Bengali
literal|0
block|,
comment|// Gurmukhi
literal|0
block|,
comment|// Gujarati
literal|0
block|,
comment|// Oriya
literal|0
block|,
comment|// Tamil
literal|0xc15
block|,
comment|// Telugu
literal|0xc95
block|,
comment|// Kannada
literal|0xd15
block|,
comment|// Malayalam
literal|0xd9a
block|,
comment|// Sinhala
literal|0
block|,
comment|// Thai
literal|0
block|,
comment|// Lao
literal|0
block|,
comment|// Tibetan
literal|0x1000
block|,
comment|// Myanmar
literal|0
block|,
comment|// Georgian
literal|0
block|,
comment|// Hangul
literal|0x1681
block|,
comment|// Ogham
literal|0x16a0
block|,
comment|// Runic
literal|0
block|,
comment|// Khmer
literal|0x7ca
comment|// N'Ko
block|}
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enumerator|SpecialCharCount
enum|enum
block|{
name|SpecialCharCount
init|=
sizeof|sizeof
argument_list|(
name|specialChars
argument_list|)
operator|/
expr|sizeof
operator|(
name|ushort
operator|)
block|}
enum|;
end_enum
begin_comment
comment|// this could become a list of all languages used for each writing
end_comment
begin_comment
comment|// system, instead of using the single most common language.
end_comment
begin_decl_stmt
DECL|variable|languageForWritingSystem
specifier|static
specifier|const
name|char
modifier|*
name|languageForWritingSystem
index|[]
init|=
block|{
literal|0
block|,
comment|// Any
literal|"en"
block|,
comment|// Latin
literal|"el"
block|,
comment|// Greek
literal|"ru"
block|,
comment|// Cyrillic
literal|"hy"
block|,
comment|// Armenian
literal|"he"
block|,
comment|// Hebrew
literal|"ar"
block|,
comment|// Arabic
literal|"syr"
block|,
comment|// Syriac
literal|"div"
block|,
comment|// Thaana
literal|"hi"
block|,
comment|// Devanagari
literal|"bn"
block|,
comment|// Bengali
literal|"pa"
block|,
comment|// Gurmukhi
literal|"gu"
block|,
comment|// Gujarati
literal|"or"
block|,
comment|// Oriya
literal|"ta"
block|,
comment|// Tamil
literal|"te"
block|,
comment|// Telugu
literal|"kn"
block|,
comment|// Kannada
literal|"ml"
block|,
comment|// Malayalam
literal|"si"
block|,
comment|// Sinhala
literal|"th"
block|,
comment|// Thai
literal|"lo"
block|,
comment|// Lao
literal|"bo"
block|,
comment|// Tibetan
literal|"my"
block|,
comment|// Myanmar
literal|"ka"
block|,
comment|// Georgian
literal|"km"
block|,
comment|// Khmer
literal|"zh-cn"
block|,
comment|// SimplifiedChinese
literal|"zh-tw"
block|,
comment|// TraditionalChinese
literal|"ja"
block|,
comment|// Japanese
literal|"ko"
block|,
comment|// Korean
literal|"vi"
block|,
comment|// Vietnamese
literal|0
block|,
comment|// Symbol
literal|0
block|,
comment|// Ogham
literal|0
block|,
comment|// Runic
literal|0
comment|// N'Ko
block|}
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enumerator|LanguageCount
enum|enum
block|{
name|LanguageCount
init|=
sizeof|sizeof
argument_list|(
name|languageForWritingSystem
argument_list|)
operator|/
expr|sizeof
operator|(
specifier|const
name|char
operator|*
operator|)
block|}
enum|;
end_enum
begin_comment
comment|// Unfortunately FontConfig doesn't know about some languages. We have to test these through the
end_comment
begin_comment
comment|// charset. The lists below contain the systems where we need to do this.
end_comment
begin_decl_stmt
DECL|variable|sampleCharForWritingSystem
specifier|static
specifier|const
name|ushort
name|sampleCharForWritingSystem
index|[]
init|=
block|{
literal|0
block|,
comment|// Any
literal|0
block|,
comment|// Latin
literal|0
block|,
comment|// Greek
literal|0
block|,
comment|// Cyrillic
literal|0
block|,
comment|// Armenian
literal|0
block|,
comment|// Hebrew
literal|0
block|,
comment|// Arabic
literal|0
block|,
comment|// Syriac
literal|0
block|,
comment|// Thaana
literal|0
block|,
comment|// Devanagari
literal|0
block|,
comment|// Bengali
literal|0
block|,
comment|// Gurmukhi
literal|0
block|,
comment|// Gujarati
literal|0
block|,
comment|// Oriya
literal|0
block|,
comment|// Tamil
literal|0xc15
block|,
comment|// Telugu
literal|0xc95
block|,
comment|// Kannada
literal|0xd15
block|,
comment|// Malayalam
literal|0xd9a
block|,
comment|// Sinhala
literal|0
block|,
comment|// Thai
literal|0
block|,
comment|// Lao
literal|0
block|,
comment|// Tibetan
literal|0x1000
block|,
comment|// Myanmar
literal|0
block|,
comment|// Georgian
literal|0
block|,
comment|// Khmer
literal|0
block|,
comment|// SimplifiedChinese
literal|0
block|,
comment|// TraditionalChinese
literal|0
block|,
comment|// Japanese
literal|0
block|,
comment|// Korean
literal|0
block|,
comment|// Vietnamese
literal|0
block|,
comment|// Symbol
literal|0x1681
block|,
comment|// Ogham
literal|0x16a0
block|,
comment|// Runic
literal|0x7ca
comment|// N'Ko
block|}
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enumerator|SampleCharCount
enum|enum
block|{
name|SampleCharCount
init|=
sizeof|sizeof
argument_list|(
name|sampleCharForWritingSystem
argument_list|)
operator|/
expr|sizeof
operator|(
name|ushort
operator|)
block|}
enum|;
end_enum
begin_comment
comment|// Newer FontConfig let's us sort out fonts that contain certain glyphs, but no
end_comment
begin_comment
comment|// open type tables for is directly. Do this so we don't pick some strange
end_comment
begin_comment
comment|// pseudo unicode font
end_comment
begin_decl_stmt
DECL|variable|openType
specifier|static
specifier|const
name|char
modifier|*
name|openType
index|[]
init|=
block|{
literal|0
block|,
comment|// Any
literal|0
block|,
comment|// Latin
literal|0
block|,
comment|// Greek
literal|0
block|,
comment|// Cyrillic
literal|0
block|,
comment|// Armenian
literal|0
block|,
comment|// Hebrew
literal|0
block|,
comment|// Arabic
literal|"syrc"
block|,
comment|// Syriac
literal|"thaa"
block|,
comment|// Thaana
literal|"deva"
block|,
comment|// Devanagari
literal|"beng"
block|,
comment|// Bengali
literal|"guru"
block|,
comment|// Gurmukhi
literal|"gurj"
block|,
comment|// Gujarati
literal|"orya"
block|,
comment|// Oriya
literal|"taml"
block|,
comment|// Tamil
literal|"telu"
block|,
comment|// Telugu
literal|"knda"
block|,
comment|// Kannada
literal|"mlym"
block|,
comment|// Malayalam
literal|"sinh"
block|,
comment|// Sinhala
literal|0
block|,
comment|// Thai
literal|0
block|,
comment|// Lao
literal|"tibt"
block|,
comment|// Tibetan
literal|"mymr"
block|,
comment|// Myanmar
literal|0
block|,
comment|// Georgian
literal|"khmr"
block|,
comment|// Khmer
literal|0
block|,
comment|// SimplifiedChinese
literal|0
block|,
comment|// TraditionalChinese
literal|0
block|,
comment|// Japanese
literal|0
block|,
comment|// Korean
literal|0
block|,
comment|// Vietnamese
literal|0
block|,
comment|// Symbol
literal|0
block|,
comment|// Ogham
literal|0
block|,
comment|// Runic
literal|"nko "
comment|// N'Ko
block|}
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enumerator|OpenTypeCount
enum|enum
block|{
name|OpenTypeCount
init|=
sizeof|sizeof
argument_list|(
name|openType
argument_list|)
operator|/
expr|sizeof
operator|(
specifier|const
name|char
operator|*
operator|)
block|}
enum|;
end_enum
begin_function
DECL|function|loadFontConfig
specifier|static
name|void
name|loadFontConfig
parameter_list|()
block|{
name|Q_ASSERT_X
argument_list|(
name|X11
argument_list|,
literal|"QFontDatabase"
argument_list|,
literal|"A QApplication object needs to be constructed before FontConfig is used."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|X11
operator|->
name|has_fontconfig
condition|)
return|return;
name|Q_ASSERT_X
argument_list|(
name|int
argument_list|(
name|QUnicodeTables
operator|::
name|ScriptCount
argument_list|)
operator|==
name|SpecialLanguageCount
argument_list|,
literal|"QFontDatabase"
argument_list|,
literal|"New scripts have been added."
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|int
argument_list|(
name|QUnicodeTables
operator|::
name|ScriptCount
argument_list|)
operator|==
name|SpecialCharCount
argument_list|,
literal|"QFontDatabase"
argument_list|,
literal|"New scripts have been added."
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|int
argument_list|(
name|QFontDatabase
operator|::
name|WritingSystemsCount
argument_list|)
operator|==
name|LanguageCount
argument_list|,
literal|"QFontDatabase"
argument_list|,
literal|"New writing systems have been added."
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|int
argument_list|(
name|QFontDatabase
operator|::
name|WritingSystemsCount
argument_list|)
operator|==
name|SampleCharCount
argument_list|,
literal|"QFontDatabase"
argument_list|,
literal|"New writing systems have been added."
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|int
argument_list|(
name|QFontDatabase
operator|::
name|WritingSystemsCount
argument_list|)
operator|==
name|OpenTypeCount
argument_list|,
literal|"QFontDatabase"
argument_list|,
literal|"New writing systems have been added."
argument_list|)
expr_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
name|FcFontSet
modifier|*
name|fonts
decl_stmt|;
name|FcPattern
modifier|*
name|pattern
init|=
name|FcPatternCreate
argument_list|()
decl_stmt|;
name|FcDefaultSubstitute
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|FcChar8
modifier|*
name|lang
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|FcPatternGetString
argument_list|(
name|pattern
argument_list|,
name|FC_LANG
argument_list|,
literal|0
argument_list|,
operator|&
name|lang
argument_list|)
operator|==
name|FcResultMatch
condition|)
name|db
operator|->
name|systemLang
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|lang
argument_list|)
expr_stmt|;
name|FcPatternDestroy
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|QString
name|familyName
decl_stmt|;
name|FcChar8
modifier|*
name|value
init|=
literal|0
decl_stmt|;
name|int
name|weight_value
decl_stmt|;
name|int
name|slant_value
decl_stmt|;
name|int
name|spacing_value
decl_stmt|;
name|FcChar8
modifier|*
name|file_value
decl_stmt|;
name|int
name|index_value
decl_stmt|;
name|FcChar8
modifier|*
name|foundry_value
decl_stmt|;
name|FcBool
name|scalable
decl_stmt|;
block|{
name|FcObjectSet
modifier|*
name|os
init|=
name|FcObjectSetCreate
argument_list|()
decl_stmt|;
name|FcPattern
modifier|*
name|pattern
init|=
name|FcPatternCreate
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|properties
index|[]
init|=
block|{
name|FC_FAMILY
block|,
name|FC_WEIGHT
block|,
name|FC_SLANT
block|,
name|FC_SPACING
block|,
name|FC_FILE
block|,
name|FC_INDEX
block|,
name|FC_LANG
block|,
name|FC_CHARSET
block|,
name|FC_FOUNDRY
block|,
name|FC_SCALABLE
block|,
name|FC_PIXEL_SIZE
block|,
name|FC_WEIGHT
block|,
name|FC_WIDTH
block|,
if|#
directive|if
name|FC_VERSION
operator|>=
literal|20297
name|FC_CAPABILITY
block|,
endif|#
directive|endif
operator|(
specifier|const
name|char
operator|*
operator|)
literal|0
block|}
decl_stmt|;
specifier|const
name|char
modifier|*
modifier|*
name|p
init|=
name|properties
decl_stmt|;
while|while
condition|(
operator|*
name|p
condition|)
block|{
name|FcObjectSetAdd
argument_list|(
name|os
argument_list|,
operator|*
name|p
argument_list|)
expr_stmt|;
operator|++
name|p
expr_stmt|;
block|}
name|fonts
operator|=
name|FcFontList
argument_list|(
literal|0
argument_list|,
name|pattern
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|FcObjectSetDestroy
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|FcPatternDestroy
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fonts
operator|->
name|nfont
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|FcPatternGetString
argument_list|(
name|fonts
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|FC_FAMILY
argument_list|,
literal|0
argument_list|,
operator|&
name|value
argument_list|)
operator|!=
name|FcResultMatch
condition|)
continue|continue;
comment|//         capitalize(value);
name|familyName
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|value
argument_list|)
expr_stmt|;
name|slant_value
operator|=
name|FC_SLANT_ROMAN
expr_stmt|;
name|weight_value
operator|=
name|FC_WEIGHT_MEDIUM
expr_stmt|;
name|spacing_value
operator|=
name|FC_PROPORTIONAL
expr_stmt|;
name|file_value
operator|=
literal|0
expr_stmt|;
name|index_value
operator|=
literal|0
expr_stmt|;
name|scalable
operator|=
name|FcTrue
expr_stmt|;
if|if
condition|(
name|FcPatternGetInteger
argument_list|(
name|fonts
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|FC_SLANT
argument_list|,
literal|0
argument_list|,
operator|&
name|slant_value
argument_list|)
operator|!=
name|FcResultMatch
condition|)
name|slant_value
operator|=
name|FC_SLANT_ROMAN
expr_stmt|;
if|if
condition|(
name|FcPatternGetInteger
argument_list|(
name|fonts
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|FC_WEIGHT
argument_list|,
literal|0
argument_list|,
operator|&
name|weight_value
argument_list|)
operator|!=
name|FcResultMatch
condition|)
name|weight_value
operator|=
name|FC_WEIGHT_MEDIUM
expr_stmt|;
if|if
condition|(
name|FcPatternGetInteger
argument_list|(
name|fonts
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|FC_SPACING
argument_list|,
literal|0
argument_list|,
operator|&
name|spacing_value
argument_list|)
operator|!=
name|FcResultMatch
condition|)
name|spacing_value
operator|=
name|FC_PROPORTIONAL
expr_stmt|;
if|if
condition|(
name|FcPatternGetString
argument_list|(
name|fonts
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|FC_FILE
argument_list|,
literal|0
argument_list|,
operator|&
name|file_value
argument_list|)
operator|!=
name|FcResultMatch
condition|)
name|file_value
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|FcPatternGetInteger
argument_list|(
name|fonts
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|FC_INDEX
argument_list|,
literal|0
argument_list|,
operator|&
name|index_value
argument_list|)
operator|!=
name|FcResultMatch
condition|)
name|index_value
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|FcPatternGetBool
argument_list|(
name|fonts
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|FC_SCALABLE
argument_list|,
literal|0
argument_list|,
operator|&
name|scalable
argument_list|)
operator|!=
name|FcResultMatch
condition|)
name|scalable
operator|=
name|FcTrue
expr_stmt|;
if|if
condition|(
name|FcPatternGetString
argument_list|(
name|fonts
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|FC_FOUNDRY
argument_list|,
literal|0
argument_list|,
operator|&
name|foundry_value
argument_list|)
operator|!=
name|FcResultMatch
condition|)
name|foundry_value
operator|=
literal|0
expr_stmt|;
name|QtFontFamily
modifier|*
name|family
init|=
name|db
operator|->
name|family
argument_list|(
name|familyName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FcLangSet
modifier|*
name|langset
init|=
literal|0
decl_stmt|;
name|FcResult
name|res
init|=
name|FcPatternGetLangSet
argument_list|(
name|fonts
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|FC_LANG
argument_list|,
literal|0
argument_list|,
operator|&
name|langset
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
name|FcResultMatch
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|LanguageCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|FcChar8
modifier|*
name|lang
init|=
operator|(
specifier|const
name|FcChar8
operator|*
operator|)
name|languageForWritingSystem
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|lang
condition|)
block|{
name|family
operator|->
name|writingSystems
index|[
name|i
index|]
operator||=
name|QtFontFamily
operator|::
name|UnsupportedFT
expr_stmt|;
block|}
else|else
block|{
name|FcLangResult
name|langRes
init|=
name|FcLangSetHasLang
argument_list|(
name|langset
argument_list|,
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|langRes
operator|!=
name|FcLangDifferentLang
condition|)
name|family
operator|->
name|writingSystems
index|[
name|i
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
else|else
name|family
operator|->
name|writingSystems
index|[
name|i
index|]
operator||=
name|QtFontFamily
operator|::
name|UnsupportedFT
expr_stmt|;
block|}
block|}
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Other
index|]
operator|=
name|QtFontFamily
operator|::
name|UnsupportedFT
expr_stmt|;
name|family
operator|->
name|ftWritingSystemCheck
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// we set Other to supported for symbol fonts. It makes no
comment|// sense to merge these with other ones, as they are
comment|// special in a way.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|LanguageCount
condition|;
operator|++
name|i
control|)
name|family
operator|->
name|writingSystems
index|[
name|i
index|]
operator||=
name|QtFontFamily
operator|::
name|UnsupportedFT
expr_stmt|;
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Other
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
block|}
name|FcCharSet
modifier|*
name|cs
init|=
literal|0
decl_stmt|;
name|res
operator|=
name|FcPatternGetCharSet
argument_list|(
name|fonts
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|FC_CHARSET
argument_list|,
literal|0
argument_list|,
operator|&
name|cs
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|==
name|FcResultMatch
condition|)
block|{
comment|// some languages are not supported by FontConfig, we rather check the
comment|// charset to detect these
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|SampleCharCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|sampleCharForWritingSystem
index|[
name|i
index|]
condition|)
continue|continue;
if|if
condition|(
name|FcCharSetHasChar
argument_list|(
name|cs
argument_list|,
name|sampleCharForWritingSystem
index|[
name|i
index|]
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|i
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
block|}
block|}
if|#
directive|if
name|FC_VERSION
operator|>=
literal|20297
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|LanguageCount
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|family
operator|->
name|writingSystems
index|[
name|j
index|]
operator|==
name|QtFontFamily
operator|::
name|Supported
operator|&&
name|requiresOpenType
argument_list|(
name|j
argument_list|)
operator|&&
name|openType
index|[
name|j
index|]
condition|)
block|{
name|FcChar8
modifier|*
name|cap
decl_stmt|;
name|res
operator|=
name|FcPatternGetString
argument_list|(
name|fonts
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|FC_CAPABILITY
argument_list|,
literal|0
argument_list|,
operator|&
name|cap
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|!=
name|FcResultMatch
operator|||
operator|!
name|strstr
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|cap
argument_list|,
name|openType
index|[
name|j
index|]
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|j
index|]
operator|=
name|QtFontFamily
operator|::
name|UnsupportedFT
expr_stmt|;
block|}
block|}
endif|#
directive|endif
name|QByteArray
name|file
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|file_value
argument_list|)
decl_stmt|;
name|family
operator|->
name|fontFilename
operator|=
name|file
expr_stmt|;
name|family
operator|->
name|fontFileIndex
operator|=
name|index_value
expr_stmt|;
name|QtFontStyle
operator|::
name|Key
name|styleKey
decl_stmt|;
name|styleKey
operator|.
name|style
operator|=
operator|(
name|slant_value
operator|==
name|FC_SLANT_ITALIC
operator|)
condition|?
name|QFont
operator|::
name|StyleItalic
else|:
operator|(
operator|(
name|slant_value
operator|==
name|FC_SLANT_OBLIQUE
operator|)
condition|?
name|QFont
operator|::
name|StyleOblique
else|:
name|QFont
operator|::
name|StyleNormal
operator|)
expr_stmt|;
name|styleKey
operator|.
name|weight
operator|=
name|getFCWeight
argument_list|(
name|weight_value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scalable
condition|)
block|{
name|int
name|width
init|=
literal|100
decl_stmt|;
name|FcPatternGetInteger
argument_list|(
name|fonts
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|FC_WIDTH
argument_list|,
literal|0
argument_list|,
operator|&
name|width
argument_list|)
expr_stmt|;
name|styleKey
operator|.
name|stretch
operator|=
name|width
expr_stmt|;
block|}
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|family
operator|->
name|foundry
argument_list|(
name|foundry_value
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|foundry_value
argument_list|)
else|:
name|QString
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QtFontStyle
modifier|*
name|style
init|=
name|foundry
operator|->
name|style
argument_list|(
name|styleKey
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|spacing_value
operator|<
name|FC_MONO
condition|)
name|family
operator|->
name|fixedPitch
operator|=
literal|false
expr_stmt|;
name|QtFontSize
modifier|*
name|size
decl_stmt|;
if|if
condition|(
name|scalable
condition|)
block|{
name|style
operator|->
name|smoothScalable
operator|=
literal|true
expr_stmt|;
name|size
operator|=
name|style
operator|->
name|pixelSize
argument_list|(
name|SMOOTH_SCALABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|double
name|pixel_size
init|=
literal|0
decl_stmt|;
name|FcPatternGetDouble
argument_list|(
name|fonts
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|FC_PIXEL_SIZE
argument_list|,
literal|0
argument_list|,
operator|&
name|pixel_size
argument_list|)
expr_stmt|;
name|size
operator|=
name|style
operator|->
name|pixelSize
argument_list|(
operator|(
name|int
operator|)
name|pixel_size
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|QtFontEncoding
modifier|*
name|enc
init|=
name|size
operator|->
name|encodingID
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|enc
operator|->
name|pitch
operator|=
operator|(
name|spacing_value
operator|>=
name|FC_CHARCELL
condition|?
literal|'c'
else|:
operator|(
name|spacing_value
operator|>=
name|FC_MONO
condition|?
literal|'m'
else|:
literal|'p'
operator|)
operator|)
expr_stmt|;
block|}
name|FcFontSetDestroy
argument_list|(
name|fonts
argument_list|)
expr_stmt|;
struct|struct
name|FcDefaultFont
block|{
specifier|const
name|char
modifier|*
name|qtname
decl_stmt|;
specifier|const
name|char
modifier|*
name|rawname
decl_stmt|;
name|bool
name|fixed
decl_stmt|;
block|}
struct|;
specifier|const
name|FcDefaultFont
name|defaults
index|[]
init|=
block|{
block|{
literal|"Serif"
block|,
literal|"serif"
block|,
literal|false
block|}
block|,
block|{
literal|"Sans Serif"
block|,
literal|"sans-serif"
block|,
literal|false
block|}
block|,
block|{
literal|"Monospace"
block|,
literal|"monospace"
block|,
literal|true
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|false
block|}
block|}
decl_stmt|;
specifier|const
name|FcDefaultFont
modifier|*
name|f
init|=
name|defaults
decl_stmt|;
while|while
condition|(
name|f
operator|->
name|qtname
condition|)
block|{
name|QtFontFamily
modifier|*
name|family
init|=
name|db
operator|->
name|family
argument_list|(
name|QLatin1String
argument_list|(
name|f
operator|->
name|qtname
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|family
operator|->
name|fixedPitch
operator|=
name|f
operator|->
name|fixed
expr_stmt|;
name|family
operator|->
name|synthetic
operator|=
literal|true
expr_stmt|;
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|family
operator|->
name|foundry
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// aliases only make sense for 'common', not for any of the specials
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|LanguageCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|requiresOpenType
argument_list|(
name|i
argument_list|)
condition|)
name|family
operator|->
name|writingSystems
index|[
name|i
index|]
operator|=
name|QtFontFamily
operator|::
name|UnsupportedFT
expr_stmt|;
else|else
name|family
operator|->
name|writingSystems
index|[
name|i
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
block|}
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Other
index|]
operator|=
name|QtFontFamily
operator|::
name|UnsupportedFT
expr_stmt|;
name|QtFontStyle
operator|::
name|Key
name|styleKey
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|styleKey
operator|.
name|style
operator|=
operator|(
name|i
operator|%
literal|2
operator|)
condition|?
name|QFont
operator|::
name|StyleNormal
else|:
name|QFont
operator|::
name|StyleItalic
expr_stmt|;
name|styleKey
operator|.
name|weight
operator|=
operator|(
name|i
operator|>
literal|1
operator|)
condition|?
name|QFont
operator|::
name|Bold
else|:
name|QFont
operator|::
name|Normal
expr_stmt|;
name|QtFontStyle
modifier|*
name|style
init|=
name|foundry
operator|->
name|style
argument_list|(
name|styleKey
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|style
operator|->
name|smoothScalable
operator|=
literal|true
expr_stmt|;
name|QtFontSize
modifier|*
name|size
init|=
name|style
operator|->
name|pixelSize
argument_list|(
name|SMOOTH_SCALABLE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QtFontEncoding
modifier|*
name|enc
init|=
name|size
operator|->
name|encodingID
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|enc
operator|->
name|pitch
operator|=
operator|(
name|f
operator|->
name|fixed
condition|?
literal|'m'
else|:
literal|'p'
operator|)
expr_stmt|;
block|}
operator|++
name|f
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FONTCONFIG
end_comment
begin_function_decl
specifier|static
name|void
name|initializeDb
parameter_list|()
function_decl|;
end_function_decl
begin_function
DECL|function|load
specifier|static
name|void
name|load
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
init|=
name|QString
argument_list|()
parameter_list|,
name|int
name|script
init|=
operator|-
literal|1
parameter_list|,
name|bool
name|forceXLFD
init|=
literal|false
parameter_list|)
block|{
if|if
condition|(
name|X11
operator|->
name|has_fontconfig
operator|&&
operator|!
name|forceXLFD
condition|)
block|{
name|initializeDb
argument_list|()
expr_stmt|;
return|return;
block|}
ifdef|#
directive|ifdef
name|QFONTDATABASE_DEBUG
name|QElapsedTimer
name|t
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|family
operator|.
name|isNull
argument_list|()
operator|&&
name|script
operator|==
operator|-
literal|1
condition|)
block|{
name|loadXlfds
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|family
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// load all families in all writing systems that match \a script
for|for
control|(
name|int
name|ws
init|=
literal|1
init|;
name|ws
operator|<
name|QFontDatabase
operator|::
name|WritingSystemsCount
condition|;
operator|++
name|ws
control|)
block|{
if|if
condition|(
name|scriptForWritingSystem
index|[
name|ws
index|]
operator|!=
name|script
condition|)
continue|continue;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEncodings
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|writingSystems_for_xlfd_encoding
index|[
name|i
index|]
index|[
name|ws
index|]
condition|)
name|loadXlfds
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|QtFontFamily
modifier|*
name|f
init|=
name|privateDb
argument_list|()
operator|->
name|family
argument_list|(
name|family
argument_list|)
decl_stmt|;
comment|// could reduce this further with some more magic:
comment|// would need to remember the encodings loaded for the family.
if|if
condition|(
operator|!
name|f
operator|||
operator|!
name|f
operator|->
name|xlfdLoaded
condition|)
name|loadXlfds
argument_list|(
name|family
operator|.
name|toLatin1
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|QFONTDATABASE_DEBUG
name|FD_DEBUG
argument_list|(
literal|"QFontDatabase: load(%s, %d) took %d ms"
argument_list|,
name|family
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|script
argument_list|,
name|t
operator|.
name|elapsed
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|checkSymbolFont
specifier|static
name|void
name|checkSymbolFont
parameter_list|(
name|QtFontFamily
modifier|*
name|family
parameter_list|)
block|{
if|if
condition|(
operator|!
name|family
operator|||
name|family
operator|->
name|symbol_checked
operator|||
name|family
operator|->
name|fontFilename
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
comment|//     qDebug()<< "checking "<< family->rawName;
name|family
operator|->
name|symbol_checked
operator|=
literal|true
expr_stmt|;
name|QFontEngine
operator|::
name|FaceId
name|id
decl_stmt|;
name|id
operator|.
name|filename
operator|=
name|family
operator|->
name|fontFilename
expr_stmt|;
name|id
operator|.
name|index
operator|=
name|family
operator|->
name|fontFileIndex
expr_stmt|;
name|QFreetypeFace
modifier|*
name|f
init|=
name|QFreetypeFace
operator|::
name|getFace
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
condition|)
block|{
name|qWarning
argument_list|(
literal|"checkSymbolFonts: Couldn't open face %s (%s/%d)"
argument_list|,
name|qPrintable
argument_list|(
name|family
operator|->
name|name
argument_list|)
argument_list|,
name|family
operator|->
name|fontFilename
operator|.
name|data
argument_list|()
argument_list|,
name|family
operator|->
name|fontFileIndex
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|f
operator|->
name|face
operator|->
name|num_charmaps
condition|;
operator|++
name|i
control|)
block|{
name|FT_CharMap
name|cm
init|=
name|f
operator|->
name|face
operator|->
name|charmaps
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|cm
operator|->
name|encoding
operator|==
name|FT_ENCODING_ADOBE_CUSTOM
operator|||
name|cm
operator|->
name|encoding
operator|==
name|FT_ENCODING_MS_SYMBOL
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
name|QFontDatabase
operator|::
name|Latin
init|;
name|x
operator|<
name|QFontDatabase
operator|::
name|Other
condition|;
operator|++
name|x
control|)
name|family
operator|->
name|writingSystems
index|[
name|x
index|]
operator|=
name|QtFontFamily
operator|::
name|Unsupported
expr_stmt|;
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Other
index|]
operator|=
name|QtFontFamily
operator|::
name|Supported
expr_stmt|;
break|break;
block|}
block|}
name|f
operator|->
name|release
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkSymbolFonts
specifier|static
name|void
name|checkSymbolFonts
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
init|=
name|QString
argument_list|()
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_FONTCONFIG
name|QFontDatabasePrivate
modifier|*
name|d
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|count
condition|;
operator|++
name|i
control|)
name|checkSymbolFont
argument_list|(
name|d
operator|->
name|families
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkSymbolFont
argument_list|(
name|d
operator|->
name|family
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function_decl
specifier|static
name|void
name|registerFont
parameter_list|(
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
modifier|*
name|fnt
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|initializeDb
specifier|static
name|void
name|initializeDb
parameter_list|()
block|{
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|||
name|db
operator|->
name|count
condition|)
return|return;
name|QElapsedTimer
name|t
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FONTCONFIG
if|if
condition|(
name|db
operator|->
name|reregisterAppFonts
condition|)
block|{
name|db
operator|->
name|reregisterAppFonts
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|db
operator|->
name|applicationFonts
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|!
name|db
operator|->
name|applicationFonts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|families
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|registerFont
argument_list|(
operator|&
name|db
operator|->
name|applicationFonts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|loadFontConfig
argument_list|()
expr_stmt|;
name|FD_DEBUG
argument_list|(
literal|"QFontDatabase: loaded FontConfig: %d ms"
argument_list|,
name|int
argument_list|(
name|t
operator|.
name|elapsed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FONTCONFIG
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|db
operator|->
name|count
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|db
operator|->
name|families
index|[
name|i
index|]
operator|->
name|count
condition|;
operator|++
name|j
control|)
block|{
comment|// each foundry
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|db
operator|->
name|families
index|[
name|i
index|]
operator|->
name|foundries
index|[
name|j
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|foundry
operator|->
name|count
condition|;
operator|++
name|k
control|)
block|{
name|QtFontStyle
modifier|*
name|style
init|=
name|foundry
operator|->
name|styles
index|[
name|k
index|]
decl_stmt|;
if|if
condition|(
name|style
operator|->
name|key
operator|.
name|style
operator|!=
name|QFont
operator|::
name|StyleNormal
condition|)
continue|continue;
name|QtFontSize
modifier|*
name|size
init|=
name|style
operator|->
name|pixelSize
argument_list|(
name|SMOOTH_SCALABLE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|size
condition|)
continue|continue;
comment|// should not happen
name|QtFontEncoding
modifier|*
name|enc
init|=
name|size
operator|->
name|encodingID
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|enc
condition|)
continue|continue;
comment|// should not happen either
name|QtFontStyle
operator|::
name|Key
name|key
init|=
name|style
operator|->
name|key
decl_stmt|;
comment|// does this style have an italic equivalent?
name|key
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleItalic
expr_stmt|;
name|QtFontStyle
modifier|*
name|equiv
init|=
name|foundry
operator|->
name|style
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|equiv
condition|)
continue|continue;
comment|// does this style have an oblique equivalent?
name|key
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleOblique
expr_stmt|;
name|equiv
operator|=
name|foundry
operator|->
name|style
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|equiv
condition|)
continue|continue;
comment|// let's fake one...
name|equiv
operator|=
name|foundry
operator|->
name|style
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|equiv
operator|->
name|smoothScalable
operator|=
literal|true
expr_stmt|;
name|QtFontSize
modifier|*
name|equiv_size
init|=
name|equiv
operator|->
name|pixelSize
argument_list|(
name|SMOOTH_SCALABLE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QtFontEncoding
modifier|*
name|equiv_enc
init|=
name|equiv_size
operator|->
name|encodingID
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// keep the same pitch
name|equiv_enc
operator|->
name|pitch
operator|=
name|enc
operator|->
name|pitch
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QFONTDATABASE_DEBUG
ifndef|#
directive|ifndef
name|QT_NO_FONTCONFIG
if|if
condition|(
operator|!
name|X11
operator|->
name|has_fontconfig
condition|)
endif|#
directive|endif
comment|// load everything at startup in debug mode.
name|loadXlfds
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// print the database
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|db
operator|->
name|count
condition|;
name|f
operator|++
control|)
block|{
name|QtFontFamily
modifier|*
name|family
init|=
name|db
operator|->
name|families
index|[
name|f
index|]
decl_stmt|;
name|FD_DEBUG
argument_list|(
literal|"'%s' %s  fixed=%s"
argument_list|,
name|family
operator|->
name|name
operator|.
name|latin1
argument_list|()
argument_list|,
operator|(
name|family
operator|->
name|fixedPitch
condition|?
literal|"fixed"
else|:
literal|""
operator|)
argument_list|,
operator|(
name|family
operator|->
name|fixedPitch
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QFontDatabase
operator|::
name|WritingSystemsCount
condition|;
operator|++
name|i
control|)
block|{
name|QFontDatabase
operator|::
name|WritingSystem
name|ws
init|=
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|FD_DEBUG
argument_list|(
literal|"\t%s: %s"
argument_list|,
name|QFontDatabase
operator|::
name|writingSystemName
argument_list|(
name|ws
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
operator|(
name|family
operator|->
name|writingSystems
index|[
name|i
index|]
operator|&
name|QtFontFamily
operator|::
name|Supported
operator|)
condition|?
literal|"Supported"
else|:
operator|(
name|family
operator|->
name|writingSystems
index|[
name|i
index|]
operator|&
name|QtFontFamily
operator|::
name|Unsupported
operator|)
operator|==
name|QtFontFamily
operator|::
name|Unsupported
condition|?
literal|"Unsupported"
else|:
literal|"Unknown"
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|fd
init|=
literal|0
init|;
name|fd
operator|<
name|family
operator|->
name|count
condition|;
name|fd
operator|++
control|)
block|{
name|QtFontFoundry
modifier|*
name|foundry
init|=
name|family
operator|->
name|foundries
index|[
name|fd
index|]
decl_stmt|;
name|FD_DEBUG
argument_list|(
literal|"\t\t'%s'"
argument_list|,
name|foundry
operator|->
name|name
operator|.
name|latin1
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|foundry
operator|->
name|count
condition|;
name|s
operator|++
control|)
block|{
name|QtFontStyle
modifier|*
name|style
init|=
name|foundry
operator|->
name|styles
index|[
name|s
index|]
decl_stmt|;
name|FD_DEBUG
argument_list|(
literal|"\t\t\tstyle: style=%d weight=%d (%s)\n"
literal|"\t\t\tstretch=%d (%s)"
argument_list|,
name|style
operator|->
name|key
operator|.
name|style
argument_list|,
name|style
operator|->
name|key
operator|.
name|weight
argument_list|,
name|style
operator|->
name|weightName
argument_list|,
name|style
operator|->
name|key
operator|.
name|stretch
argument_list|,
name|style
operator|->
name|setwidthName
condition|?
name|style
operator|->
name|setwidthName
else|:
literal|"nil"
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
operator|->
name|smoothScalable
condition|)
name|FD_DEBUG
argument_list|(
literal|"\t\t\t\tsmooth scalable"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|style
operator|->
name|bitmapScalable
condition|)
name|FD_DEBUG
argument_list|(
literal|"\t\t\t\tbitmap scalable"
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
operator|->
name|pixelSizes
condition|)
block|{
name|qDebug
argument_list|(
literal|"\t\t\t\t%d pixel sizes"
argument_list|,
name|style
operator|->
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|z
init|=
literal|0
init|;
name|z
operator|<
name|style
operator|->
name|count
condition|;
operator|++
name|z
control|)
block|{
name|QtFontSize
modifier|*
name|size
init|=
name|style
operator|->
name|pixelSizes
operator|+
name|z
decl_stmt|;
for|for
control|(
name|int
name|e
init|=
literal|0
init|;
name|e
operator|<
name|size
operator|->
name|count
condition|;
operator|++
name|e
control|)
block|{
name|FD_DEBUG
argument_list|(
literal|"\t\t\t\t  size %5d pitch %c encoding %s"
argument_list|,
name|size
operator|->
name|pixelSize
argument_list|,
name|size
operator|->
name|encodings
index|[
name|e
index|]
operator|.
name|pitch
argument_list|,
name|xlfd_for_id
argument_list|(
name|size
operator|->
name|encodings
index|[
name|e
index|]
operator|.
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
endif|#
directive|endif
comment|// QFONTDATABASE_DEBUG
block|}
end_function
begin_comment
comment|// --------------------------------------------------------------------------------------
end_comment
begin_comment
comment|// font loader
end_comment
begin_comment
comment|// --------------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|styleHint
specifier|static
specifier|const
name|char
modifier|*
name|styleHint
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|stylehint
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|styleHint
condition|)
block|{
case|case
name|QFont
operator|::
name|SansSerif
case|:
name|stylehint
operator|=
literal|"sans-serif"
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|Serif
case|:
name|stylehint
operator|=
literal|"serif"
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|TypeWriter
case|:
name|stylehint
operator|=
literal|"monospace"
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|request
operator|.
name|fixedPitch
condition|)
name|stylehint
operator|=
literal|"monospace"
expr_stmt|;
break|break;
block|}
return|return
name|stylehint
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FONTCONFIG
end_ifndef
begin_function
DECL|function|qt_addPatternProps
name|void
name|qt_addPatternProps
parameter_list|(
name|FcPattern
modifier|*
name|pattern
parameter_list|,
name|int
name|screen
parameter_list|,
name|int
name|script
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|)
block|{
name|int
name|weight_value
init|=
name|FC_WEIGHT_BLACK
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|weight
operator|==
literal|0
condition|)
name|weight_value
operator|=
name|FC_WEIGHT_MEDIUM
expr_stmt|;
elseif|else
if|if
condition|(
name|request
operator|.
name|weight
operator|<
operator|(
name|QFont
operator|::
name|Light
operator|+
name|QFont
operator|::
name|Normal
operator|)
operator|/
literal|2
condition|)
name|weight_value
operator|=
name|FC_WEIGHT_LIGHT
expr_stmt|;
elseif|else
if|if
condition|(
name|request
operator|.
name|weight
operator|<
operator|(
name|QFont
operator|::
name|Normal
operator|+
name|QFont
operator|::
name|DemiBold
operator|)
operator|/
literal|2
condition|)
name|weight_value
operator|=
name|FC_WEIGHT_MEDIUM
expr_stmt|;
elseif|else
if|if
condition|(
name|request
operator|.
name|weight
operator|<
operator|(
name|QFont
operator|::
name|DemiBold
operator|+
name|QFont
operator|::
name|Bold
operator|)
operator|/
literal|2
condition|)
name|weight_value
operator|=
name|FC_WEIGHT_DEMIBOLD
expr_stmt|;
elseif|else
if|if
condition|(
name|request
operator|.
name|weight
operator|<
operator|(
name|QFont
operator|::
name|Bold
operator|+
name|QFont
operator|::
name|Black
operator|)
operator|/
literal|2
condition|)
name|weight_value
operator|=
name|FC_WEIGHT_BOLD
expr_stmt|;
name|FcPatternDel
argument_list|(
name|pattern
argument_list|,
name|FC_WEIGHT
argument_list|)
expr_stmt|;
name|FcPatternAddInteger
argument_list|(
name|pattern
argument_list|,
name|FC_WEIGHT
argument_list|,
name|weight_value
argument_list|)
expr_stmt|;
name|int
name|slant_value
init|=
name|FC_SLANT_ROMAN
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|style
operator|==
name|QFont
operator|::
name|StyleItalic
condition|)
name|slant_value
operator|=
name|FC_SLANT_ITALIC
expr_stmt|;
elseif|else
if|if
condition|(
name|request
operator|.
name|style
operator|==
name|QFont
operator|::
name|StyleOblique
condition|)
name|slant_value
operator|=
name|FC_SLANT_OBLIQUE
expr_stmt|;
name|FcPatternDel
argument_list|(
name|pattern
argument_list|,
name|FC_SLANT
argument_list|)
expr_stmt|;
name|FcPatternAddInteger
argument_list|(
name|pattern
argument_list|,
name|FC_SLANT
argument_list|,
name|slant_value
argument_list|)
expr_stmt|;
name|double
name|size_value
init|=
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|1.
argument_list|)
argument_list|,
name|request
operator|.
name|pixelSize
argument_list|)
decl_stmt|;
name|FcPatternDel
argument_list|(
name|pattern
argument_list|,
name|FC_PIXEL_SIZE
argument_list|)
expr_stmt|;
name|FcPatternAddDouble
argument_list|(
name|pattern
argument_list|,
name|FC_PIXEL_SIZE
argument_list|,
name|size_value
argument_list|)
expr_stmt|;
name|int
name|stretch
init|=
name|request
operator|.
name|stretch
decl_stmt|;
if|if
condition|(
operator|!
name|stretch
condition|)
name|stretch
operator|=
literal|100
expr_stmt|;
name|FcPatternDel
argument_list|(
name|pattern
argument_list|,
name|FC_WIDTH
argument_list|)
expr_stmt|;
name|FcPatternAddInteger
argument_list|(
name|pattern
argument_list|,
name|FC_WIDTH
argument_list|,
name|stretch
argument_list|)
expr_stmt|;
if|if
condition|(
name|X11
operator|->
name|display
operator|&&
name|QX11Info
operator|::
name|appDepth
argument_list|(
name|screen
argument_list|)
operator|<=
literal|8
condition|)
block|{
name|FcPatternDel
argument_list|(
name|pattern
argument_list|,
name|FC_ANTIALIAS
argument_list|)
expr_stmt|;
comment|// can't do antialiasing on 8bpp
name|FcPatternAddBool
argument_list|(
name|pattern
argument_list|,
name|FC_ANTIALIAS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
operator|(
name|QFont
operator|::
name|PreferAntialias
operator||
name|QFont
operator|::
name|NoAntialias
operator|)
condition|)
block|{
name|FcPatternDel
argument_list|(
name|pattern
argument_list|,
name|FC_ANTIALIAS
argument_list|)
expr_stmt|;
name|FcPatternAddBool
argument_list|(
name|pattern
argument_list|,
name|FC_ANTIALIAS
argument_list|,
operator|!
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoAntialias
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|script
operator|!=
name|QUnicodeTables
operator|::
name|Common
operator|&&
operator|*
name|specialLanguages
index|[
name|script
index|]
operator|!=
literal|'\0'
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|script
operator|<
name|QUnicodeTables
operator|::
name|ScriptCount
argument_list|)
expr_stmt|;
name|FcLangSet
modifier|*
name|ls
init|=
name|FcLangSetCreate
argument_list|()
decl_stmt|;
name|FcLangSetAdd
argument_list|(
name|ls
argument_list|,
operator|(
specifier|const
name|FcChar8
operator|*
operator|)
name|specialLanguages
index|[
name|script
index|]
argument_list|)
expr_stmt|;
name|FcPatternDel
argument_list|(
name|pattern
argument_list|,
name|FC_LANG
argument_list|)
expr_stmt|;
name|FcPatternAddLangSet
argument_list|(
name|pattern
argument_list|,
name|FC_LANG
argument_list|,
name|ls
argument_list|)
expr_stmt|;
name|FcLangSetDestroy
argument_list|(
name|ls
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|preferScalable
specifier|static
name|bool
name|preferScalable
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|)
block|{
return|return
name|request
operator|.
name|styleStrategy
operator|&
operator|(
name|QFont
operator|::
name|PreferOutline
operator||
name|QFont
operator|::
name|ForceOutline
operator||
name|QFont
operator|::
name|PreferQuality
operator||
name|QFont
operator|::
name|PreferAntialias
operator|)
return|;
block|}
end_function
begin_function
DECL|function|getFcPattern
specifier|static
name|FcPattern
modifier|*
name|getFcPattern
parameter_list|(
specifier|const
name|QFontPrivate
modifier|*
name|fp
parameter_list|,
name|int
name|script
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|)
block|{
if|if
condition|(
operator|!
name|X11
operator|->
name|has_fontconfig
condition|)
return|return
literal|0
return|;
name|FcPattern
modifier|*
name|pattern
init|=
name|FcPatternCreate
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pattern
condition|)
return|return
literal|0
return|;
name|FcValue
name|value
decl_stmt|;
name|value
operator|.
name|type
operator|=
name|FcTypeString
expr_stmt|;
name|QtFontDesc
name|desc
decl_stmt|;
name|QStringList
name|families_and_foundries
init|=
name|familyList
argument_list|(
name|request
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|families_and_foundries
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|family
decl_stmt|,
name|foundry
decl_stmt|;
name|parseFontName
argument_list|(
name|families_and_foundries
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|foundry
argument_list|,
name|family
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QByteArray
name|cs
init|=
name|family
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|value
operator|.
name|u
operator|.
name|s
operator|=
operator|(
specifier|const
name|FcChar8
operator|*
operator|)
name|cs
operator|.
name|data
argument_list|()
expr_stmt|;
name|FcPatternAdd
argument_list|(
name|pattern
argument_list|,
name|FC_FAMILY
argument_list|,
name|value
argument_list|,
name|FcTrue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|QT_PREPEND_NAMESPACE
argument_list|(
name|match
argument_list|)
argument_list|(
name|script
argument_list|,
name|request
argument_list|,
name|family
argument_list|,
name|foundry
argument_list|,
operator|-
literal|1
argument_list|,
operator|&
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|foundry
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QByteArray
name|cs
init|=
name|foundry
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|value
operator|.
name|u
operator|.
name|s
operator|=
operator|(
specifier|const
name|FcChar8
operator|*
operator|)
name|cs
operator|.
name|data
argument_list|()
expr_stmt|;
name|FcPatternAddWeak
argument_list|(
name|pattern
argument_list|,
name|FC_FOUNDRY
argument_list|,
name|value
argument_list|,
name|FcTrue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|const
name|char
modifier|*
name|stylehint
init|=
name|styleHint
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|stylehint
condition|)
block|{
name|value
operator|.
name|u
operator|.
name|s
operator|=
operator|(
specifier|const
name|FcChar8
operator|*
operator|)
name|stylehint
expr_stmt|;
name|FcPatternAddWeak
argument_list|(
name|pattern
argument_list|,
name|FC_FAMILY
argument_list|,
name|value
argument_list|,
name|FcTrue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|request
operator|.
name|ignorePitch
condition|)
block|{
name|char
name|pitch_value
init|=
name|FC_PROPORTIONAL
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|fixedPitch
operator|||
operator|(
name|desc
operator|.
name|family
operator|&&
name|desc
operator|.
name|family
operator|->
name|fixedPitch
operator|)
condition|)
name|pitch_value
operator|=
name|FC_MONO
expr_stmt|;
name|FcPatternAddInteger
argument_list|(
name|pattern
argument_list|,
name|FC_SPACING
argument_list|,
name|pitch_value
argument_list|)
expr_stmt|;
block|}
name|FcPatternAddBool
argument_list|(
name|pattern
argument_list|,
name|FC_OUTLINE
argument_list|,
operator|!
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferBitmap
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|preferScalable
argument_list|(
name|request
argument_list|)
operator|||
operator|(
name|desc
operator|.
name|style
operator|&&
name|desc
operator|.
name|style
operator|->
name|smoothScalable
operator|)
condition|)
name|FcPatternAddBool
argument_list|(
name|pattern
argument_list|,
name|FC_SCALABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|qt_addPatternProps
argument_list|(
name|pattern
argument_list|,
name|fp
operator|->
name|screen
argument_list|,
name|script
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|FcDefaultSubstitute
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|FcConfigSubstitute
argument_list|(
literal|0
argument_list|,
name|pattern
argument_list|,
name|FcMatchPattern
argument_list|)
expr_stmt|;
name|FcConfigSubstitute
argument_list|(
literal|0
argument_list|,
name|pattern
argument_list|,
name|FcMatchFont
argument_list|)
expr_stmt|;
comment|// these should only get added to the pattern _after_ substitution
comment|// append the default fallback font for the specified script
specifier|extern
name|QString
name|qt_fallback_font_family
argument_list|(
name|int
argument_list|)
decl_stmt|;
name|QString
name|fallback
init|=
name|qt_fallback_font_family
argument_list|(
name|script
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fallback
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QByteArray
name|cs
init|=
name|fallback
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|value
operator|.
name|u
operator|.
name|s
operator|=
operator|(
specifier|const
name|FcChar8
operator|*
operator|)
name|cs
operator|.
name|data
argument_list|()
expr_stmt|;
name|FcPatternAddWeak
argument_list|(
name|pattern
argument_list|,
name|FC_FAMILY
argument_list|,
name|value
argument_list|,
name|FcTrue
argument_list|)
expr_stmt|;
block|}
comment|// add the default family
name|QString
name|defaultFamily
init|=
name|QApplication
operator|::
name|font
argument_list|()
operator|.
name|family
argument_list|()
decl_stmt|;
name|QByteArray
name|cs
init|=
name|defaultFamily
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|value
operator|.
name|u
operator|.
name|s
operator|=
operator|(
specifier|const
name|FcChar8
operator|*
operator|)
name|cs
operator|.
name|data
argument_list|()
expr_stmt|;
name|FcPatternAddWeak
argument_list|(
name|pattern
argument_list|,
name|FC_FAMILY
argument_list|,
name|value
argument_list|,
name|FcTrue
argument_list|)
expr_stmt|;
comment|// add QFont::defaultFamily() to the list, for compatibility with
comment|// previous versions
name|defaultFamily
operator|=
name|QApplication
operator|::
name|font
argument_list|()
operator|.
name|defaultFamily
argument_list|()
expr_stmt|;
name|cs
operator|=
name|defaultFamily
operator|.
name|toUtf8
argument_list|()
expr_stmt|;
name|value
operator|.
name|u
operator|.
name|s
operator|=
operator|(
specifier|const
name|FcChar8
operator|*
operator|)
name|cs
operator|.
name|data
argument_list|()
expr_stmt|;
name|FcPatternAddWeak
argument_list|(
name|pattern
argument_list|,
name|FC_FAMILY
argument_list|,
name|value
argument_list|,
name|FcTrue
argument_list|)
expr_stmt|;
return|return
name|pattern
return|;
block|}
end_function
begin_function
DECL|function|FcFontSetRemove
specifier|static
name|void
name|FcFontSetRemove
parameter_list|(
name|FcFontSet
modifier|*
name|fs
parameter_list|,
name|int
name|at
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|at
operator|<
name|fs
operator|->
name|nfont
argument_list|)
expr_stmt|;
name|FcPatternDestroy
argument_list|(
name|fs
operator|->
name|fonts
index|[
name|at
index|]
argument_list|)
expr_stmt|;
name|int
name|len
init|=
operator|(
operator|--
name|fs
operator|->
name|nfont
operator|-
name|at
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|FcPattern
operator|*
argument_list|)
decl_stmt|;
empty_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
name|memmove
argument_list|(
name|fs
operator|->
name|fonts
operator|+
name|at
argument_list|,
name|fs
operator|->
name|fonts
operator|+
name|at
operator|+
literal|1
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tryPatternLoad
specifier|static
name|QFontEngine
modifier|*
name|tryPatternLoad
parameter_list|(
name|FcPattern
modifier|*
name|p
parameter_list|,
name|int
name|screen
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|int
name|script
parameter_list|,
name|FcPattern
modifier|*
modifier|*
name|matchedPattern
init|=
literal|0
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|FONT_MATCH_DEBUG
name|FcChar8
modifier|*
name|fam
decl_stmt|;
name|FcPatternGetString
argument_list|(
name|p
argument_list|,
name|FC_FAMILY
argument_list|,
literal|0
argument_list|,
operator|&
name|fam
argument_list|)
expr_stmt|;
name|FM_DEBUG
argument_list|(
literal|"==== trying %s\n"
argument_list|,
name|fam
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|FM_DEBUG
argument_list|(
literal|"passes charset test\n"
argument_list|)
expr_stmt|;
name|FcPattern
modifier|*
name|pattern
init|=
name|FcPatternDuplicate
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|// add properties back in as the font selected from the
comment|// list doesn't contain them.
name|qt_addPatternProps
argument_list|(
name|pattern
argument_list|,
name|screen
argument_list|,
name|script
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|FcConfigSubstitute
argument_list|(
literal|0
argument_list|,
name|pattern
argument_list|,
name|FcMatchPattern
argument_list|)
expr_stmt|;
name|FcDefaultSubstitute
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|FcResult
name|res
decl_stmt|;
name|FcPattern
modifier|*
name|match
init|=
name|FcFontMatch
argument_list|(
literal|0
argument_list|,
name|pattern
argument_list|,
operator|&
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchedPattern
condition|)
operator|*
name|matchedPattern
operator|=
literal|0
expr_stmt|;
name|QFontEngineX11FT
modifier|*
name|engine
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|match
condition|)
comment|// probably no fonts available.
goto|goto
name|done
goto|;
if|if
condition|(
name|matchedPattern
condition|)
operator|*
name|matchedPattern
operator|=
name|FcPatternDuplicate
argument_list|(
name|match
argument_list|)
expr_stmt|;
if|if
condition|(
name|script
operator|!=
name|QUnicodeTables
operator|::
name|Common
condition|)
block|{
comment|// skip font if it doesn't support the language we want
if|if
condition|(
name|specialChars
index|[
name|script
index|]
condition|)
block|{
comment|// need to check the charset, as the langset doesn't work for these scripts
name|FcCharSet
modifier|*
name|cs
decl_stmt|;
if|if
condition|(
name|FcPatternGetCharSet
argument_list|(
name|match
argument_list|,
name|FC_CHARSET
argument_list|,
literal|0
argument_list|,
operator|&
name|cs
argument_list|)
operator|!=
name|FcResultMatch
condition|)
goto|goto
name|done
goto|;
if|if
condition|(
operator|!
name|FcCharSetHasChar
argument_list|(
name|cs
argument_list|,
name|specialChars
index|[
name|script
index|]
argument_list|)
condition|)
goto|goto
name|done
goto|;
block|}
elseif|else
if|if
condition|(
operator|*
name|specialLanguages
index|[
name|script
index|]
operator|!=
literal|'\0'
condition|)
block|{
name|FcLangSet
modifier|*
name|langSet
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|FcPatternGetLangSet
argument_list|(
name|match
argument_list|,
name|FC_LANG
argument_list|,
literal|0
argument_list|,
operator|&
name|langSet
argument_list|)
operator|!=
name|FcResultMatch
condition|)
goto|goto
name|done
goto|;
if|if
condition|(
name|FcLangSetHasLang
argument_list|(
name|langSet
argument_list|,
operator|(
specifier|const
name|FcChar8
operator|*
operator|)
name|specialLanguages
index|[
name|script
index|]
argument_list|)
operator|!=
name|FcLangEqual
condition|)
goto|goto
name|done
goto|;
block|}
block|}
comment|// enforce non-antialiasing if requested. the ft font engine looks at this property.
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoAntialias
condition|)
block|{
name|FcPatternDel
argument_list|(
name|match
argument_list|,
name|FC_ANTIALIAS
argument_list|)
expr_stmt|;
name|FcPatternAddBool
argument_list|(
name|match
argument_list|,
name|FC_ANTIALIAS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|engine
operator|=
operator|new
name|QFontEngineX11FT
argument_list|(
name|match
argument_list|,
name|qt_FcPatternToQFontDef
argument_list|(
name|match
argument_list|,
name|request
argument_list|)
argument_list|,
name|screen
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|->
name|invalid
argument_list|()
condition|)
block|{
name|FM_DEBUG
argument_list|(
literal|"   --> invalid!\n"
argument_list|)
expr_stmt|;
operator|delete
name|engine
expr_stmt|;
name|engine
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scriptRequiresOpenType
argument_list|(
name|script
argument_list|)
condition|)
block|{
name|HB_Face
name|hbFace
init|=
name|engine
operator|->
name|harfbuzzFace
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hbFace
operator|||
operator|!
name|hbFace
operator|->
name|supported_scripts
index|[
name|script
index|]
condition|)
block|{
name|FM_DEBUG
argument_list|(
literal|"  OpenType support missing for script\n"
argument_list|)
expr_stmt|;
operator|delete
name|engine
expr_stmt|;
name|engine
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|done
label|:
name|FcPatternDestroy
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|engine
operator|&&
name|matchedPattern
operator|&&
operator|*
name|matchedPattern
condition|)
block|{
name|FcPatternDestroy
argument_list|(
operator|*
name|matchedPattern
argument_list|)
expr_stmt|;
operator|*
name|matchedPattern
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|engine
return|;
block|}
end_function
begin_function
DECL|function|qt_fontSetForPattern
name|FcFontSet
modifier|*
name|qt_fontSetForPattern
parameter_list|(
name|FcPattern
modifier|*
name|pattern
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|)
block|{
name|FcResult
name|result
decl_stmt|;
name|FcFontSet
modifier|*
name|fs
init|=
name|FcFontSort
argument_list|(
literal|0
argument_list|,
name|pattern
argument_list|,
name|FcTrue
argument_list|,
literal|0
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|FONT_MATCH_DEBUG
name|FM_DEBUG
argument_list|(
literal|"first font in fontset:\n"
argument_list|)
expr_stmt|;
name|FcPatternPrint
argument_list|(
name|fs
operator|->
name|fonts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|FcBool
name|forceScalable
init|=
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceOutline
decl_stmt|;
comment|// remove fonts if they are not scalable (and should be)
if|if
condition|(
name|forceScalable
operator|&&
name|fs
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fs
operator|->
name|nfont
condition|;
operator|++
name|i
control|)
block|{
name|FcPattern
modifier|*
name|font
init|=
name|fs
operator|->
name|fonts
index|[
name|i
index|]
decl_stmt|;
name|FcResult
name|res
decl_stmt|;
name|FcBool
name|scalable
decl_stmt|;
name|res
operator|=
name|FcPatternGetBool
argument_list|(
name|font
argument_list|,
name|FC_SCALABLE
argument_list|,
literal|0
argument_list|,
operator|&
name|scalable
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|!=
name|FcResultMatch
operator|||
operator|!
name|scalable
condition|)
block|{
name|FcFontSetRemove
argument_list|(
name|fs
argument_list|,
name|i
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|FONT_MATCH_DEBUG
name|FM_DEBUG
argument_list|(
literal|"removing pattern:"
argument_list|)
expr_stmt|;
name|FcPatternPrint
argument_list|(
name|font
argument_list|)
expr_stmt|;
endif|#
directive|endif
operator|--
name|i
expr_stmt|;
comment|// go back one
block|}
block|}
block|}
name|FM_DEBUG
argument_list|(
literal|"final pattern contains %d fonts\n"
argument_list|,
name|fs
operator|->
name|nfont
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
end_function
begin_function
DECL|function|loadFc
specifier|static
name|QFontEngine
modifier|*
name|loadFc
parameter_list|(
specifier|const
name|QFontPrivate
modifier|*
name|fp
parameter_list|,
name|int
name|script
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|)
block|{
name|FM_DEBUG
argument_list|(
literal|"===================== loadFc: script=%d family='%s'\n"
argument_list|,
name|script
argument_list|,
name|request
operator|.
name|family
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|FcPattern
modifier|*
name|pattern
init|=
name|getFcPattern
argument_list|(
name|fp
argument_list|,
name|script
argument_list|,
name|request
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|FONT_MATCH_DEBUG
name|FM_DEBUG
argument_list|(
literal|"\n\nfinal FcPattern contains:\n"
argument_list|)
expr_stmt|;
name|FcPatternPrint
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFontEngine
modifier|*
name|fe
init|=
literal|0
decl_stmt|;
name|FcPattern
modifier|*
name|matchedPattern
init|=
literal|0
decl_stmt|;
name|fe
operator|=
name|tryPatternLoad
argument_list|(
name|pattern
argument_list|,
name|fp
operator|->
name|screen
argument_list|,
name|request
argument_list|,
name|script
argument_list|,
operator|&
name|matchedPattern
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fe
condition|)
block|{
name|FcFontSet
modifier|*
name|fs
init|=
name|qt_fontSetForPattern
argument_list|(
name|pattern
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|fe
operator|&&
name|i
operator|<
name|fs
operator|->
name|nfont
condition|;
operator|++
name|i
control|)
name|fe
operator|=
name|tryPatternLoad
argument_list|(
name|fs
operator|->
name|fonts
index|[
name|i
index|]
argument_list|,
name|fp
operator|->
name|screen
argument_list|,
name|request
argument_list|,
name|script
argument_list|,
operator|&
name|matchedPattern
argument_list|)
expr_stmt|;
name|FcFontSetDestroy
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
name|FM_DEBUG
argument_list|(
literal|"engine for script %d is %s\n"
argument_list|,
name|script
argument_list|,
name|fe
condition|?
name|fe
operator|->
name|fontDef
operator|.
name|family
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
else|:
literal|"(null)"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fe
operator|&&
name|script
operator|==
name|QUnicodeTables
operator|::
name|Common
operator|&&
operator|!
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoFontMerging
operator|)
operator|&&
operator|!
name|fe
operator|->
name|symbol
condition|)
block|{
name|fe
operator|=
operator|new
name|QFontEngineMultiFT
argument_list|(
name|fe
argument_list|,
name|matchedPattern
argument_list|,
name|pattern
argument_list|,
name|fp
operator|->
name|screen
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FcPatternDestroy
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
if|if
condition|(
name|matchedPattern
condition|)
name|FcPatternDestroy
argument_list|(
name|matchedPattern
argument_list|)
expr_stmt|;
block|}
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|queryFont
specifier|static
name|FcPattern
modifier|*
name|queryFont
parameter_list|(
specifier|const
name|FcChar8
modifier|*
name|file
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
name|int
name|id
parameter_list|,
name|FcBlanks
modifier|*
name|blanks
parameter_list|,
name|int
modifier|*
name|count
parameter_list|)
block|{
if|#
directive|if
name|FC_VERSION
operator|<
literal|20402
name|Q_UNUSED
argument_list|(
argument|data
argument_list|)
return|return
name|FcFreeTypeQuery
argument_list|(
name|file
argument_list|,
name|id
argument_list|,
name|blanks
argument_list|,
name|count
argument_list|)
return|;
else|#
directive|else
if|if
condition|(
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|FcFreeTypeQuery
argument_list|(
name|file
argument_list|,
name|id
argument_list|,
name|blanks
argument_list|,
name|count
argument_list|)
return|;
specifier|extern
name|FT_Library
name|qt_getFreetype
argument_list|()
decl_stmt|;
name|FT_Library
name|lib
init|=
name|qt_getFreetype
argument_list|()
decl_stmt|;
name|FcPattern
modifier|*
name|pattern
init|=
literal|0
decl_stmt|;
name|FT_Face
name|face
decl_stmt|;
if|if
condition|(
operator|!
name|FT_New_Memory_Face
argument_list|(
name|lib
argument_list|,
operator|(
specifier|const
name|FT_Byte
operator|*
operator|)
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|,
name|id
argument_list|,
operator|&
name|face
argument_list|)
condition|)
block|{
operator|*
name|count
operator|=
name|face
operator|->
name|num_faces
expr_stmt|;
name|pattern
operator|=
name|FcFreeTypeQueryFace
argument_list|(
name|face
argument_list|,
name|file
argument_list|,
name|id
argument_list|,
name|blanks
argument_list|)
expr_stmt|;
name|FT_Done_Face
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
return|return
name|pattern
return|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FONTCONFIG
end_comment
begin_function
DECL|function|loadRaw
specifier|static
name|QFontEngine
modifier|*
name|loadRaw
parameter_list|(
specifier|const
name|QFontPrivate
modifier|*
name|fp
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|fp
operator|&&
name|fp
operator|->
name|rawMode
argument_list|)
expr_stmt|;
name|QByteArray
name|xlfd
init|=
name|request
operator|.
name|family
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|FM_DEBUG
argument_list|(
literal|"Loading XLFD (rawmode) '%s'"
argument_list|,
name|xlfd
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QFontEngine
modifier|*
name|fe
decl_stmt|;
name|XFontStruct
modifier|*
name|xfs
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|xfs
operator|=
name|XLoadQueryFont
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|xlfd
operator|.
name|data
argument_list|()
argument_list|)
operator|)
condition|)
if|if
condition|(
operator|!
operator|(
name|xfs
operator|=
name|XLoadQueryFont
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
literal|"fixed"
argument_list|)
operator|)
condition|)
return|return
literal|0
return|;
name|fe
operator|=
operator|new
name|QFontEngineXLFD
argument_list|(
name|xfs
argument_list|,
name|xlfd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qt_fillFontDef
argument_list|(
name|xfs
argument_list|,
operator|&
name|fe
operator|->
name|fontDef
argument_list|,
name|fp
operator|->
name|dpi
argument_list|,
literal|0
argument_list|)
operator|&&
operator|!
name|qt_fillFontDef
argument_list|(
name|xlfd
argument_list|,
operator|&
name|fe
operator|->
name|fontDef
argument_list|,
name|fp
operator|->
name|dpi
argument_list|,
literal|0
argument_list|)
condition|)
name|fe
operator|->
name|fontDef
operator|=
name|QFontDef
argument_list|()
expr_stmt|;
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|loadXlfd
name|QFontEngine
modifier|*
name|QFontDatabase
operator|::
name|loadXlfd
parameter_list|(
name|int
name|screen
parameter_list|,
name|int
name|script
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|int
name|force_encoding_id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QtFontDesc
name|desc
decl_stmt|;
name|FM_DEBUG
argument_list|()
operator|<<
literal|"---> loadXlfd: request is"
operator|<<
name|request
operator|.
name|family
expr_stmt|;
name|QStringList
name|families_and_foundries
init|=
name|familyList
argument_list|(
name|request
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|stylehint
init|=
name|styleHint
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|stylehint
condition|)
name|families_and_foundries
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|stylehint
argument_list|)
expr_stmt|;
name|families_and_foundries
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|FM_DEBUG
argument_list|()
operator|<<
literal|"loadXlfd: list is"
operator|<<
name|families_and_foundries
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|families_and_foundries
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|family
decl_stmt|,
name|foundry
decl_stmt|;
name|QT_PREPEND_NAMESPACE
argument_list|(
name|parseFontName
argument_list|)
argument_list|(
name|families_and_foundries
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|foundry
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|FM_DEBUG
argument_list|(
literal|"loadXlfd:>>>>>>>>>>>>>>trying to match '%s' encoding=%d"
argument_list|,
name|family
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|force_encoding_id
argument_list|)
expr_stmt|;
name|QT_PREPEND_NAMESPACE
argument_list|(
name|match
argument_list|)
argument_list|(
name|script
argument_list|,
name|request
argument_list|,
name|family
argument_list|,
name|foundry
argument_list|,
name|force_encoding_id
argument_list|,
operator|&
name|desc
argument_list|,
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|family
condition|)
break|break;
block|}
name|QFontEngine
modifier|*
name|fe
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|force_encoding_id
operator|!=
operator|-
literal|1
operator|||
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoFontMerging
operator|)
operator|||
operator|(
name|desc
operator|.
name|family
operator|&&
name|desc
operator|.
name|family
operator|->
name|writingSystems
index|[
name|QFontDatabase
operator|::
name|Symbol
index|]
operator|&
name|QtFontFamily
operator|::
name|Supported
operator|)
condition|)
block|{
if|if
condition|(
name|desc
operator|.
name|family
condition|)
block|{
name|int
name|px
init|=
name|desc
operator|.
name|size
operator|->
name|pixelSize
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|style
operator|->
name|smoothScalable
operator|&&
name|px
operator|==
name|SMOOTH_SCALABLE
condition|)
name|px
operator|=
name|request
operator|.
name|pixelSize
expr_stmt|;
elseif|else
if|if
condition|(
name|desc
operator|.
name|style
operator|->
name|bitmapScalable
operator|&&
name|px
operator|==
literal|0
condition|)
name|px
operator|=
name|request
operator|.
name|pixelSize
expr_stmt|;
name|QByteArray
name|xlfd
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
name|xlfd
operator|+=
name|desc
operator|.
name|foundry
operator|->
name|name
operator|.
name|isEmpty
argument_list|()
condition|?
name|QByteArray
argument_list|(
literal|"*"
argument_list|)
else|:
name|desc
operator|.
name|foundry
operator|->
name|name
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
name|xlfd
operator|+=
literal|'-'
expr_stmt|;
name|xlfd
operator|+=
name|desc
operator|.
name|family
operator|->
name|name
operator|.
name|isEmpty
argument_list|()
condition|?
name|QByteArray
argument_list|(
literal|"*"
argument_list|)
else|:
name|desc
operator|.
name|family
operator|->
name|name
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
name|xlfd
operator|+=
literal|'-'
expr_stmt|;
name|xlfd
operator|+=
name|desc
operator|.
name|style
operator|->
name|weightName
condition|?
name|desc
operator|.
name|style
operator|->
name|weightName
else|:
literal|"*"
expr_stmt|;
name|xlfd
operator|+=
literal|'-'
expr_stmt|;
name|xlfd
operator|+=
operator|(
name|desc
operator|.
name|style
operator|->
name|key
operator|.
name|style
operator|==
name|QFont
operator|::
name|StyleItalic
condition|?
literal|'i'
else|:
operator|(
name|desc
operator|.
name|style
operator|->
name|key
operator|.
name|style
operator|==
name|QFont
operator|::
name|StyleOblique
condition|?
literal|'o'
else|:
literal|'r'
operator|)
operator|)
expr_stmt|;
name|xlfd
operator|+=
literal|'-'
expr_stmt|;
name|xlfd
operator|+=
name|desc
operator|.
name|style
operator|->
name|setwidthName
condition|?
name|desc
operator|.
name|style
operator|->
name|setwidthName
else|:
literal|"*"
expr_stmt|;
comment|// ### handle add-style
name|xlfd
operator|+=
literal|"-*-"
expr_stmt|;
name|xlfd
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|px
argument_list|)
expr_stmt|;
name|xlfd
operator|+=
literal|'-'
expr_stmt|;
name|xlfd
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|desc
operator|.
name|encoding
operator|->
name|xpoint
argument_list|)
expr_stmt|;
name|xlfd
operator|+=
literal|'-'
expr_stmt|;
name|xlfd
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|desc
operator|.
name|encoding
operator|->
name|xres
argument_list|)
expr_stmt|;
name|xlfd
operator|+=
literal|'-'
expr_stmt|;
name|xlfd
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|desc
operator|.
name|encoding
operator|->
name|yres
argument_list|)
expr_stmt|;
name|xlfd
operator|+=
literal|'-'
expr_stmt|;
name|xlfd
operator|+=
name|desc
operator|.
name|encoding
operator|->
name|pitch
expr_stmt|;
name|xlfd
operator|+=
literal|'-'
expr_stmt|;
name|xlfd
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|desc
operator|.
name|encoding
operator|->
name|avgwidth
argument_list|)
expr_stmt|;
name|xlfd
operator|+=
literal|'-'
expr_stmt|;
name|xlfd
operator|+=
name|xlfd_for_id
argument_list|(
name|desc
operator|.
name|encoding
operator|->
name|encoding
argument_list|)
expr_stmt|;
name|FM_DEBUG
argument_list|(
literal|"    using XLFD: %s\n"
argument_list|,
name|xlfd
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|mib
init|=
name|xlfd_encoding
index|[
name|desc
operator|.
name|encoding
operator|->
name|encoding
index|]
operator|.
name|mib
decl_stmt|;
name|XFontStruct
modifier|*
name|xfs
decl_stmt|;
if|if
condition|(
operator|(
name|xfs
operator|=
name|XLoadQueryFont
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|xlfd
argument_list|)
operator|)
condition|)
block|{
name|fe
operator|=
operator|new
name|QFontEngineXLFD
argument_list|(
name|xfs
argument_list|,
name|xlfd
argument_list|,
name|mib
argument_list|)
expr_stmt|;
specifier|const
name|int
name|dpi
init|=
name|QX11Info
operator|::
name|appDpiY
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qt_fillFontDef
argument_list|(
name|xfs
argument_list|,
operator|&
name|fe
operator|->
name|fontDef
argument_list|,
name|dpi
argument_list|,
operator|&
name|desc
argument_list|)
operator|&&
operator|!
name|qt_fillFontDef
argument_list|(
name|xlfd
argument_list|,
operator|&
name|fe
operator|->
name|fontDef
argument_list|,
name|dpi
argument_list|,
operator|&
name|desc
argument_list|)
condition|)
block|{
name|initFontDef
argument_list|(
name|desc
argument_list|,
name|request
argument_list|,
operator|&
name|fe
operator|->
name|fontDef
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|fe
condition|)
block|{
name|fe
operator|=
operator|new
name|QFontEngineBox
argument_list|(
name|request
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
name|fe
operator|->
name|fontDef
operator|=
name|QFontDef
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|encodings
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|encoding
condition|)
block|{
if|if
condition|(
name|desc
operator|.
name|encoding
operator|->
name|encoding
operator|>=
literal|0
condition|)
name|encodings
operator|.
name|append
argument_list|(
name|int
argument_list|(
name|desc
operator|.
name|encoding
operator|->
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|desc
operator|.
name|size
condition|)
block|{
comment|// append all other encodings for the matched font
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|desc
operator|.
name|size
operator|->
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QtFontEncoding
modifier|*
name|e
init|=
name|desc
operator|.
name|size
operator|->
name|encodings
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|e
operator|==
name|desc
operator|.
name|encoding
operator|||
name|e
operator|->
name|encoding
operator|<
literal|0
condition|)
continue|continue;
name|encodings
operator|.
name|append
argument_list|(
name|int
argument_list|(
name|e
operator|->
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// fill in the missing encodings
specifier|const
name|XlfdEncoding
modifier|*
name|enc
init|=
name|xlfd_encoding
decl_stmt|;
for|for
control|(
init|;
name|enc
operator|->
name|name
condition|;
operator|++
name|enc
control|)
block|{
if|if
condition|(
operator|!
name|encodings
operator|.
name|contains
argument_list|(
name|enc
operator|->
name|id
argument_list|)
operator|&&
name|enc
operator|->
name|id
operator|>=
literal|0
condition|)
block|{
name|encodings
operator|.
name|append
argument_list|(
name|enc
operator|->
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|#
directive|if
name|defined
argument_list|(
name|FONT_MATCH_DEBUG
argument_list|)
name|FM_DEBUG
argument_list|(
literal|"    using MultiXLFD, encodings:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|encodings
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|id
init|=
name|encodings
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|FM_DEBUG
argument_list|(
literal|"      %2d: %s"
argument_list|,
name|xlfd_encoding
index|[
name|id
index|]
operator|.
name|id
argument_list|,
name|xlfd_encoding
index|[
name|id
index|]
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|fe
operator|=
operator|new
name|QFontEngineMultiXLFD
argument_list|(
name|request
argument_list|,
name|encodings
argument_list|,
name|screen
argument_list|)
expr_stmt|;
block|}
return|return
name|fe
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|QT_ARCH_ARM
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_ARCH_ARMV6
argument_list|)
operator|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|(
name|__GNUC__
operator|==
literal|4
operator|)
operator|&&
operator|(
name|__GNUC_MINOR__
operator|==
literal|3
operator|)
end_if
begin_define
DECL|macro|NEEDS_GCC_BUG_WORKAROUND
define|#
directive|define
name|NEEDS_GCC_BUG_WORKAROUND
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|NEEDS_GCC_BUG_WORKAROUND
end_ifdef
begin_function
DECL|function|gccBugWorkaround
specifier|static
specifier|inline
name|void
name|gccBugWorkaround
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|req
parameter_list|)
block|{
name|char
name|buffer
index|[
literal|8
index|]
decl_stmt|;
name|snprintf
argument_list|(
name|buffer
argument_list|,
literal|8
argument_list|,
literal|"%f"
argument_list|,
name|req
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*! \internal   Loads a QFontEngine for the specified \a script that matches the   QFontDef \e request member variable. */
end_comment
begin_function
DECL|function|load
name|void
name|QFontDatabase
operator|::
name|load
parameter_list|(
specifier|const
name|QFontPrivate
modifier|*
name|d
parameter_list|,
name|int
name|script
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|script
operator|>=
literal|0
operator|&&
name|script
operator|<
name|QUnicodeTables
operator|::
name|ScriptCount
argument_list|)
expr_stmt|;
comment|// normalize the request to get better caching
name|QFontDef
name|req
init|=
name|d
operator|->
name|request
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|pixelSize
operator|<=
literal|0
condition|)
name|req
operator|.
name|pixelSize
operator|=
name|qFloor
argument_list|(
name|qt_pixelSize
argument_list|(
name|req
operator|.
name|pointSize
argument_list|,
name|d
operator|->
name|dpi
argument_list|)
operator|*
literal|100.0
operator|+
literal|0.5
argument_list|)
operator|*
literal|0.01
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|pixelSize
operator|<
literal|1
condition|)
name|req
operator|.
name|pixelSize
operator|=
literal|1
expr_stmt|;
ifdef|#
directive|ifdef
name|NEEDS_GCC_BUG_WORKAROUND
comment|// req.pixelSize ends up with a bogus value unless this workaround is called
name|gccBugWorkaround
argument_list|(
name|req
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|req
operator|.
name|weight
operator|==
literal|0
condition|)
name|req
operator|.
name|weight
operator|=
name|QFont
operator|::
name|Normal
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|stretch
operator|==
literal|0
condition|)
name|req
operator|.
name|stretch
operator|=
literal|100
expr_stmt|;
name|QFontCache
operator|::
name|Key
name|key
argument_list|(
name|req
argument_list|,
name|d
operator|->
name|rawMode
condition|?
name|QUnicodeTables
operator|::
name|Common
else|:
name|script
argument_list|,
name|d
operator|->
name|screen
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|engineData
condition|)
name|getEngineData
argument_list|(
name|d
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// the cached engineData could have already loaded the engine we want
if|if
condition|(
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|script
index|]
condition|)
return|return;
comment|// set it to the actual pointsize, so QFontInfo will do the right thing
if|if
condition|(
name|req
operator|.
name|pointSize
operator|<
literal|0
condition|)
name|req
operator|.
name|pointSize
operator|=
name|qt_pointSize
argument_list|(
name|req
operator|.
name|pixelSize
argument_list|,
name|d
operator|->
name|dpi
argument_list|)
expr_stmt|;
name|QFontEngine
modifier|*
name|fe
init|=
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|findEngine
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fe
condition|)
block|{
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|privateDb
argument_list|()
operator|->
name|count
condition|)
name|initializeDb
argument_list|()
expr_stmt|;
specifier|const
name|bool
name|mainThread
init|=
operator|(
name|qApp
operator|->
name|thread
argument_list|()
operator|==
name|QThread
operator|::
name|currentThread
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|qt_enable_test_font
operator|&&
name|req
operator|.
name|family
operator|==
name|QLatin1String
argument_list|(
literal|"__Qt__Box__Engine__"
argument_list|)
condition|)
block|{
name|fe
operator|=
operator|new
name|QTestFontEngine
argument_list|(
name|req
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
name|fe
operator|->
name|fontDef
operator|=
name|req
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|rawMode
condition|)
block|{
if|if
condition|(
name|mainThread
condition|)
name|fe
operator|=
name|loadRaw
argument_list|(
name|d
argument_list|,
name|req
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FONTCONFIG
block|}
elseif|else
if|if
condition|(
name|X11
operator|->
name|has_fontconfig
condition|)
block|{
name|fe
operator|=
name|loadFc
argument_list|(
name|d
argument_list|,
name|script
argument_list|,
name|req
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|mainThread
operator|&&
name|qt_is_gui_used
condition|)
block|{
name|fe
operator|=
name|loadXlfd
argument_list|(
name|d
operator|->
name|screen
argument_list|,
name|script
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fe
condition|)
block|{
name|fe
operator|=
operator|new
name|QFontEngineBox
argument_list|(
name|req
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
name|fe
operator|->
name|fontDef
operator|=
name|QFontDef
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fe
operator|->
name|symbol
operator|||
operator|(
name|d
operator|->
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoFontMerging
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUnicodeTables
operator|::
name|ScriptCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|i
index|]
condition|)
block|{
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|i
index|]
operator|=
name|fe
expr_stmt|;
name|fe
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
block|}
block|}
else|else
block|{
name|d
operator|->
name|engineData
operator|->
name|engines
index|[
name|script
index|]
operator|=
name|fe
expr_stmt|;
name|fe
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
name|QFontCache
operator|::
name|instance
argument_list|()
operator|->
name|insertEngine
argument_list|(
name|key
argument_list|,
name|fe
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerFont
specifier|static
name|void
name|registerFont
parameter_list|(
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
modifier|*
name|fnt
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_FONTCONFIG
argument_list|)
return|return;
else|#
directive|else
if|if
condition|(
operator|!
name|X11
operator|->
name|has_fontconfig
condition|)
return|return;
name|FcConfig
modifier|*
name|config
init|=
name|FcConfigGetCurrent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|config
condition|)
return|return;
name|FcFontSet
modifier|*
name|set
init|=
name|FcConfigGetFonts
argument_list|(
name|config
argument_list|,
name|FcSetApplication
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|set
condition|)
block|{
name|FcConfigAppFontAddFile
argument_list|(
name|config
argument_list|,
operator|(
specifier|const
name|FcChar8
operator|*
operator|)
literal|":/non-existent"
argument_list|)
expr_stmt|;
name|set
operator|=
name|FcConfigGetFonts
argument_list|(
name|config
argument_list|,
name|FcSetApplication
argument_list|)
expr_stmt|;
comment|// try again
if|if
condition|(
operator|!
name|set
condition|)
return|return;
block|}
name|QString
name|fileNameForQuery
init|=
name|fnt
operator|->
name|fileName
decl_stmt|;
if|#
directive|if
name|FC_VERSION
operator|<
literal|20402
name|QTemporaryFile
name|tmp
decl_stmt|;
if|if
condition|(
operator|!
name|fnt
operator|->
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|tmp
operator|.
name|open
argument_list|()
condition|)
return|return;
name|tmp
operator|.
name|write
argument_list|(
name|fnt
operator|->
name|data
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fileNameForQuery
operator|=
name|tmp
operator|.
name|fileName
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|int
name|id
init|=
literal|0
decl_stmt|;
name|FcBlanks
modifier|*
name|blanks
init|=
name|FcConfigGetBlanks
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|QStringList
name|families
decl_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
name|FcPattern
modifier|*
name|pattern
init|=
literal|0
decl_stmt|;
do|do
block|{
name|pattern
operator|=
name|queryFont
argument_list|(
operator|(
specifier|const
name|FcChar8
operator|*
operator|)
name|QFile
operator|::
name|encodeName
argument_list|(
name|fileNameForQuery
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|fnt
operator|->
name|data
argument_list|,
name|id
argument_list|,
name|blanks
argument_list|,
operator|&
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pattern
condition|)
return|return;
name|FcPatternDel
argument_list|(
name|pattern
argument_list|,
name|FC_FILE
argument_list|)
expr_stmt|;
name|FcPatternAddString
argument_list|(
name|pattern
argument_list|,
name|FC_FILE
argument_list|,
operator|(
specifier|const
name|FcChar8
operator|*
operator|)
name|fnt
operator|->
name|fileName
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|FcChar8
modifier|*
name|fam
init|=
literal|0
decl_stmt|,
modifier|*
name|familylang
init|=
literal|0
decl_stmt|;
name|int
name|i
decl_stmt|,
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|FcPatternGetString
argument_list|(
name|pattern
argument_list|,
name|FC_FAMILYLANG
argument_list|,
name|i
argument_list|,
operator|&
name|familylang
argument_list|)
operator|!=
name|FcResultMatch
condition|)
break|break;
name|QString
name|familyLang
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|familylang
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyLang
operator|.
name|compare
argument_list|(
name|db
operator|->
name|systemLang
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
name|n
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|FcPatternGetString
argument_list|(
name|pattern
argument_list|,
name|FC_FAMILY
argument_list|,
name|n
argument_list|,
operator|&
name|fam
argument_list|)
operator|==
name|FcResultMatch
condition|)
block|{
name|QString
name|family
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|fam
argument_list|)
argument_list|)
decl_stmt|;
name|families
operator|<<
name|family
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|FcFontSetAdd
argument_list|(
name|set
argument_list|,
name|pattern
argument_list|)
condition|)
return|return;
operator|++
name|id
expr_stmt|;
block|}
do|while
condition|(
name|pattern
operator|&&
name|id
operator|<
name|count
condition|)
do|;
name|fnt
operator|->
name|families
operator|=
name|families
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|removeApplicationFont
name|bool
name|QFontDatabase
operator|::
name|removeApplicationFont
parameter_list|(
name|int
name|handle
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_FONTCONFIG
argument_list|)
return|return
literal|false
return|;
else|#
directive|else
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
name|handle
operator|<
literal|0
operator|||
name|handle
operator|>=
name|db
operator|->
name|applicationFonts
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|FcConfigAppFontClear
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|db
operator|->
name|applicationFonts
index|[
name|handle
index|]
operator|=
name|QFontDatabasePrivate
operator|::
name|ApplicationFont
argument_list|()
expr_stmt|;
name|db
operator|->
name|reregisterAppFonts
operator|=
literal|true
expr_stmt|;
name|db
operator|->
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|removeAllApplicationFonts
name|bool
name|QFontDatabase
operator|::
name|removeAllApplicationFonts
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_FONTCONFIG
argument_list|)
return|return
literal|false
return|;
else|#
directive|else
name|QMutexLocker
name|locker
argument_list|(
name|fontDatabaseMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QFontDatabasePrivate
modifier|*
name|db
init|=
name|privateDb
argument_list|()
decl_stmt|;
if|if
condition|(
name|db
operator|->
name|applicationFonts
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|FcConfigAppFontClear
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|db
operator|->
name|applicationFonts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|db
operator|->
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|supportsThreadedFontRendering
name|bool
name|QFontDatabase
operator|::
name|supportsThreadedFontRendering
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_FONTCONFIG
argument_list|)
return|return
literal|false
return|;
else|#
directive|else
return|return
name|X11
operator|->
name|has_fontconfig
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|resolveFontFamilyAlias
name|QString
name|QFontDatabase
operator|::
name|resolveFontFamilyAlias
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_FONTCONFIG
argument_list|)
return|return
name|family
return|;
else|#
directive|else
name|FcPattern
modifier|*
name|pattern
init|=
name|FcPatternCreate
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pattern
condition|)
return|return
name|family
return|;
name|FcPatternAddString
argument_list|(
name|pattern
argument_list|,
name|FC_FAMILY
argument_list|,
operator|(
specifier|const
name|FcChar8
operator|*
operator|)
name|family
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|FcConfigSubstitute
argument_list|(
literal|0
argument_list|,
name|pattern
argument_list|,
name|FcMatchPattern
argument_list|)
expr_stmt|;
name|FcDefaultSubstitute
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|FcChar8
modifier|*
name|familyAfterSubstitution
decl_stmt|;
name|FcPatternGetString
argument_list|(
name|pattern
argument_list|,
name|FC_FAMILY
argument_list|,
literal|0
argument_list|,
operator|&
name|familyAfterSubstitution
argument_list|)
expr_stmt|;
name|QString
name|resolved
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|familyAfterSubstitution
argument_list|)
decl_stmt|;
name|FcPatternDestroy
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
return|return
name|resolved
return|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
