begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qdatastream.h>
end_include
begin_include
include|#
directive|include
file|<private/qcursor_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_x11_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qbitmap.h>
end_include
begin_include
include|#
directive|include
file|<qcursor.h>
end_include
begin_include
include|#
directive|include
file|<X11/cursorfont.h>
end_include
begin_include
include|#
directive|include
file|<qlibrary.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XCURSOR
end_ifndef
begin_include
include|#
directive|include
file|<X11/Xcursor/Xcursor.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_XCURSOR
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XFIXES
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|Status
end_ifndef
begin_define
DECL|macro|Status
define|#
directive|define
name|Status
value|int
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<X11/extensions/Xfixes.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_XFIXES
end_comment
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_x11_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// Define QT_USE_APPROXIMATE_CURSORS when compiling if you REALLY want to
end_comment
begin_comment
comment|// use the ugly X11 cursors.
end_comment
begin_comment
comment|/*****************************************************************************   Internal QCursorData class  *****************************************************************************/
end_comment
begin_constructor
DECL|function|QCursorData
name|QCursorData
operator|::
name|QCursorData
parameter_list|(
name|Qt
operator|::
name|CursorShape
name|s
parameter_list|)
member_init_list|:
name|cshape
argument_list|(
name|s
argument_list|)
member_init_list|,
name|bm
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bmm
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hx
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hy
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hcurs
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|pm
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|pmm
argument_list|(
literal|0
argument_list|)
block|{
name|ref
operator|=
literal|1
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QCursorData
name|QCursorData
operator|::
name|~
name|QCursorData
parameter_list|()
block|{
name|Display
modifier|*
name|dpy
init|=
name|X11
condition|?
name|X11
operator|->
name|display
else|:
operator|(
name|Display
operator|*
operator|)
literal|0
decl_stmt|;
comment|// Add in checking for the display too as on HP-UX
comment|// we seem to get a core dump as the cursor data is
comment|// deleted again from main() on exit...
if|if
condition|(
name|hcurs
operator|&&
name|dpy
condition|)
name|XFreeCursor
argument_list|(
name|dpy
argument_list|,
name|hcurs
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|&&
name|dpy
condition|)
name|XFreePixmap
argument_list|(
name|dpy
argument_list|,
name|pm
argument_list|)
expr_stmt|;
if|if
condition|(
name|pmm
operator|&&
name|dpy
condition|)
name|XFreePixmap
argument_list|(
name|dpy
argument_list|,
name|pmm
argument_list|)
expr_stmt|;
operator|delete
name|bm
expr_stmt|;
operator|delete
name|bmm
expr_stmt|;
block|}
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_constructor
DECL|function|QCursor
name|QCursor
operator|::
name|QCursor
parameter_list|(
name|Qt
operator|::
name|HANDLE
name|cursor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
name|d
operator|=
operator|new
name|QCursorData
argument_list|(
name|Qt
operator|::
name|CustomCursor
argument_list|)
expr_stmt|;
name|d
operator|->
name|hcurs
operator|=
name|cursor
expr_stmt|;
block|}
end_constructor
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setBitmap
name|QCursorData
modifier|*
name|QCursorData
operator|::
name|setBitmap
parameter_list|(
specifier|const
name|QBitmap
modifier|&
name|bitmap
parameter_list|,
specifier|const
name|QBitmap
modifier|&
name|mask
parameter_list|,
name|int
name|hotX
parameter_list|,
name|int
name|hotY
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
name|bitmap
operator|.
name|depth
argument_list|()
operator|!=
literal|1
operator|||
name|mask
operator|.
name|depth
argument_list|()
operator|!=
literal|1
operator|||
name|bitmap
operator|.
name|size
argument_list|()
operator|!=
name|mask
operator|.
name|size
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QCursor: Cannot create bitmap cursor; invalid bitmap(s)"
argument_list|)
expr_stmt|;
name|QCursorData
modifier|*
name|c
init|=
name|qt_cursorTable
index|[
literal|0
index|]
decl_stmt|;
name|c
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
return|return
name|c
return|;
block|}
name|QCursorData
modifier|*
name|d
init|=
operator|new
name|QCursorData
decl_stmt|;
name|d
operator|->
name|ref
operator|=
literal|1
expr_stmt|;
specifier|extern
name|QPixmap
name|qt_toX11Pixmap
argument_list|(
specifier|const
name|QPixmap
operator|&
name|pixmap
argument_list|)
decl_stmt|;
comment|// qpixmap_x11.cpp
name|d
operator|->
name|bm
operator|=
operator|new
name|QBitmap
argument_list|(
name|qt_toX11Pixmap
argument_list|(
name|bitmap
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|bmm
operator|=
operator|new
name|QBitmap
argument_list|(
name|qt_toX11Pixmap
argument_list|(
name|mask
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|hcurs
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|cshape
operator|=
name|Qt
operator|::
name|BitmapCursor
expr_stmt|;
name|d
operator|->
name|hx
operator|=
name|hotX
operator|>=
literal|0
condition|?
name|hotX
else|:
name|bitmap
operator|.
name|width
argument_list|()
operator|/
literal|2
expr_stmt|;
name|d
operator|->
name|hy
operator|=
name|hotY
operator|>=
literal|0
condition|?
name|hotY
else|:
name|bitmap
operator|.
name|height
argument_list|()
operator|/
literal|2
expr_stmt|;
name|d
operator|->
name|fg
operator|.
name|red
operator|=
literal|0x0000
expr_stmt|;
name|d
operator|->
name|fg
operator|.
name|green
operator|=
literal|0x0000
expr_stmt|;
name|d
operator|->
name|fg
operator|.
name|blue
operator|=
literal|0x0000
expr_stmt|;
name|d
operator|->
name|bg
operator|.
name|red
operator|=
literal|0xffff
expr_stmt|;
name|d
operator|->
name|bg
operator|.
name|green
operator|=
literal|0xffff
expr_stmt|;
name|d
operator|->
name|bg
operator|.
name|blue
operator|=
literal|0xffff
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|handle
name|Qt
operator|::
name|HANDLE
name|QCursor
operator|::
name|handle
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|hcurs
condition|)
name|d
operator|->
name|update
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|hcurs
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|pos
name|QPoint
name|QCursor
operator|::
name|pos
parameter_list|()
block|{
name|Window
name|root
decl_stmt|;
name|Window
name|child
decl_stmt|;
name|int
name|root_x
decl_stmt|,
name|root_y
decl_stmt|,
name|win_x
decl_stmt|,
name|win_y
decl_stmt|;
name|uint
name|buttons
decl_stmt|;
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ScreenCount
argument_list|(
name|dpy
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|XQueryPointer
argument_list|(
name|dpy
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|i
argument_list|)
argument_list|,
operator|&
name|root
argument_list|,
operator|&
name|child
argument_list|,
operator|&
name|root_x
argument_list|,
operator|&
name|root_y
argument_list|,
operator|&
name|win_x
argument_list|,
operator|&
name|win_y
argument_list|,
operator|&
name|buttons
argument_list|)
condition|)
return|return
name|QPoint
argument_list|(
name|root_x
argument_list|,
name|root_y
argument_list|)
return|;
block|}
return|return
name|QPoint
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|x11Screen
name|int
name|QCursor
operator|::
name|x11Screen
parameter_list|()
block|{
name|Window
name|root
decl_stmt|;
name|Window
name|child
decl_stmt|;
name|int
name|root_x
decl_stmt|,
name|root_y
decl_stmt|,
name|win_x
decl_stmt|,
name|win_y
decl_stmt|;
name|uint
name|buttons
decl_stmt|;
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ScreenCount
argument_list|(
name|dpy
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|XQueryPointer
argument_list|(
name|dpy
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|i
argument_list|)
argument_list|,
operator|&
name|root
argument_list|,
operator|&
name|child
argument_list|,
operator|&
name|root_x
argument_list|,
operator|&
name|root_y
argument_list|,
operator|&
name|win_x
argument_list|,
operator|&
name|win_y
argument_list|,
operator|&
name|buttons
argument_list|)
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setPos
name|void
name|QCursor
operator|::
name|setPos
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|QPoint
name|current
decl_stmt|,
name|target
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
comment|// this is copied from pos(), since we need the screen number for the correct
comment|// root window in the XWarpPointer call
name|Window
name|root
decl_stmt|;
name|Window
name|child
decl_stmt|;
name|int
name|root_x
decl_stmt|,
name|root_y
decl_stmt|,
name|win_x
decl_stmt|,
name|win_y
decl_stmt|;
name|uint
name|buttons
decl_stmt|;
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
name|int
name|screen
decl_stmt|;
for|for
control|(
name|screen
operator|=
literal|0
init|;
name|screen
operator|<
name|ScreenCount
argument_list|(
name|dpy
argument_list|)
condition|;
operator|++
name|screen
control|)
block|{
if|if
condition|(
name|XQueryPointer
argument_list|(
name|dpy
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|screen
argument_list|)
argument_list|,
operator|&
name|root
argument_list|,
operator|&
name|child
argument_list|,
operator|&
name|root_x
argument_list|,
operator|&
name|root_y
argument_list|,
operator|&
name|win_x
argument_list|,
operator|&
name|win_y
argument_list|,
operator|&
name|buttons
argument_list|)
condition|)
block|{
name|current
operator|=
name|QPoint
argument_list|(
name|root_x
argument_list|,
name|root_y
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|screen
operator|>=
name|ScreenCount
argument_list|(
name|dpy
argument_list|)
condition|)
return|return;
comment|// Need to check, since some X servers generate null mouse move
comment|// events, causing looping in applications which call setPos() on
comment|// every mouse move event.
comment|//
if|if
condition|(
name|current
operator|==
name|target
condition|)
return|return;
name|XWarpPointer
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|XNone
argument_list|,
name|QX11Info
operator|::
name|appRootWindow
argument_list|(
name|screen
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Creates the cursor. */
end_comment
begin_function
DECL|function|update
name|void
name|QCursorData
operator|::
name|update
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
name|hcurs
condition|)
return|return;
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
name|Window
name|rootwin
init|=
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|cshape
operator|==
name|Qt
operator|::
name|BitmapCursor
condition|)
block|{
specifier|extern
name|QPixmap
name|qt_toX11Pixmap
argument_list|(
specifier|const
name|QPixmap
operator|&
name|pixmap
argument_list|)
decl_stmt|;
comment|// qpixmap_x11.cpp
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
operator|&&
name|X11
operator|->
name|use_xrender
condition|)
block|{
name|pixmap
operator|=
name|qt_toX11Pixmap
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
name|hcurs
operator|=
name|XRenderCreateCursor
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|pixmap
operator|.
name|x11PictureHandle
argument_list|()
argument_list|,
name|hx
argument_list|,
name|hy
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|hcurs
operator|=
name|XCreatePixmapCursor
argument_list|(
name|dpy
argument_list|,
name|bm
operator|->
name|handle
argument_list|()
argument_list|,
name|bmm
operator|->
name|handle
argument_list|()
argument_list|,
operator|&
name|fg
argument_list|,
operator|&
name|bg
argument_list|,
name|hx
argument_list|,
name|hy
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|static
specifier|const
name|char
modifier|*
name|cursorNames
index|[]
init|=
block|{
literal|"left_ptr"
block|,
literal|"up_arrow"
block|,
literal|"cross"
block|,
literal|"wait"
block|,
literal|"ibeam"
block|,
literal|"size_ver"
block|,
literal|"size_hor"
block|,
literal|"size_bdiag"
block|,
literal|"size_fdiag"
block|,
literal|"size_all"
block|,
literal|"blank"
block|,
literal|"split_v"
block|,
literal|"split_h"
block|,
literal|"pointing_hand"
block|,
literal|"forbidden"
block|,
literal|"whats_this"
block|,
literal|"left_ptr_watch"
block|,
literal|"openhand"
block|,
literal|"closedhand"
block|,
literal|"copy"
block|,
literal|"move"
block|,
literal|"link"
block|}
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XCURSOR
if|if
condition|(
name|X11
operator|->
name|ptrXcursorLibraryLoadCursor
condition|)
block|{
comment|// special case for non-standard dnd-* cursors
switch|switch
condition|(
name|cshape
condition|)
block|{
case|case
name|Qt
operator|::
name|DragCopyCursor
case|:
name|hcurs
operator|=
name|X11
operator|->
name|ptrXcursorLibraryLoadCursor
argument_list|(
name|dpy
argument_list|,
literal|"dnd-copy"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DragMoveCursor
case|:
name|hcurs
operator|=
name|X11
operator|->
name|ptrXcursorLibraryLoadCursor
argument_list|(
name|dpy
argument_list|,
literal|"dnd-move"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DragLinkCursor
case|:
name|hcurs
operator|=
name|X11
operator|->
name|ptrXcursorLibraryLoadCursor
argument_list|(
name|dpy
argument_list|,
literal|"dnd-link"
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
operator|!
name|hcurs
condition|)
name|hcurs
operator|=
name|X11
operator|->
name|ptrXcursorLibraryLoadCursor
argument_list|(
name|dpy
argument_list|,
name|cursorNames
index|[
name|cshape
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hcurs
condition|)
return|return;
endif|#
directive|endif
comment|// QT_NO_XCURSOR
specifier|static
specifier|const
name|uchar
name|cur_blank_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
comment|// Non-standard X11 cursors are created from bitmaps
ifndef|#
directive|ifndef
name|QT_USE_APPROXIMATE_CURSORS
specifier|static
specifier|const
name|uchar
name|cur_ver_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x03
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0xf0
block|,
literal|0x0f
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0xf0
block|,
literal|0x0f
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0x03
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|mcur_ver_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x03
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xe0
block|,
literal|0x0f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x0f
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0x80
block|,
literal|0x03
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|cur_hor_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x30
block|,
literal|0x18
block|,
literal|0x38
block|,
literal|0x38
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x38
block|,
literal|0x38
block|,
literal|0x30
block|,
literal|0x18
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|mcur_hor_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x60
block|,
literal|0x0c
block|,
literal|0x70
block|,
literal|0x1c
block|,
literal|0x78
block|,
literal|0x3c
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfe
block|,
literal|0xff
block|,
literal|0xfe
block|,
literal|0xff
block|,
literal|0xfe
block|,
literal|0xff
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x78
block|,
literal|0x3c
block|,
literal|0x70
block|,
literal|0x1c
block|,
literal|0x60
block|,
literal|0x0c
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|cur_bdiag_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x3e
block|,
literal|0x00
block|,
literal|0x3c
block|,
literal|0x00
block|,
literal|0x3e
block|,
literal|0x00
block|,
literal|0x37
block|,
literal|0x88
block|,
literal|0x23
block|,
literal|0xd8
block|,
literal|0x01
block|,
literal|0xf8
block|,
literal|0x00
block|,
literal|0x78
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|mcur_bdiag_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0x80
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x7e
block|,
literal|0x04
block|,
literal|0x7f
block|,
literal|0x8c
block|,
literal|0x7f
block|,
literal|0xdc
block|,
literal|0x77
block|,
literal|0xfc
block|,
literal|0x63
block|,
literal|0xfc
block|,
literal|0x41
block|,
literal|0xfc
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x01
block|,
literal|0xfc
block|,
literal|0x03
block|,
literal|0xfc
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|cur_fdiag_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x01
block|,
literal|0xf8
block|,
literal|0x00
block|,
literal|0x78
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x00
block|,
literal|0xd8
block|,
literal|0x01
block|,
literal|0x88
block|,
literal|0x23
block|,
literal|0x00
block|,
literal|0x37
block|,
literal|0x00
block|,
literal|0x3e
block|,
literal|0x00
block|,
literal|0x3c
block|,
literal|0x00
block|,
literal|0x3e
block|,
literal|0x00
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|mcur_fdiag_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x07
block|,
literal|0xfc
block|,
literal|0x03
block|,
literal|0xfc
block|,
literal|0x01
block|,
literal|0xfc
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x41
block|,
literal|0xfc
block|,
literal|0x63
block|,
literal|0xdc
block|,
literal|0x77
block|,
literal|0x8c
block|,
literal|0x7f
block|,
literal|0x04
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x7e
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0x80
block|,
literal|0x7f
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
modifier|*
name|cursor_bits16
index|[]
init|=
block|{
name|cur_ver_bits
block|,
name|mcur_ver_bits
block|,
name|cur_hor_bits
block|,
name|mcur_hor_bits
block|,
name|cur_bdiag_bits
block|,
name|mcur_bdiag_bits
block|,
name|cur_fdiag_bits
block|,
name|mcur_fdiag_bits
block|,
literal|0
block|,
literal|0
block|,
name|cur_blank_bits
block|,
name|cur_blank_bits
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|vsplit_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|vsplitm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|hsplit_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0xfe
block|,
literal|0x03
block|,
literal|0x80
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|hsplitm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe2
block|,
literal|0x47
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x03
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x03
block|,
literal|0x80
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe2
block|,
literal|0x47
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|whatsthis_bits
index|[]
init|=
block|{
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x05
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x09
block|,
literal|0x18
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x11
block|,
literal|0x1c
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x21
block|,
literal|0x1c
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0x1c
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x81
block|,
literal|0x1c
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x01
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x82
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xc1
block|,
literal|0xc7
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x49
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x95
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x93
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x21
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x20
block|,
literal|0xc1
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0xc2
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|, }
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|whatsthism_bits
index|[]
init|=
block|{
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x07
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x0f
block|,
literal|0xfc
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x1f
block|,
literal|0x3e
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x3f
block|,
literal|0x3e
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0x3e
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x3e
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x9d
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xc3
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xe7
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xf7
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xf3
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xe1
block|,
literal|0xe1
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xe1
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0xe3
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0xe3
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|, }
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|busy_bits
index|[]
init|=
block|{
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x05
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x09
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x11
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x21
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x81
block|,
literal|0x20
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0xe1
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x42
block|,
literal|0x40
block|,
literal|0x00
block|,
literal|0xc1
block|,
literal|0x47
block|,
literal|0x40
block|,
literal|0x00
block|,
literal|0x49
block|,
literal|0x40
block|,
literal|0x55
block|,
literal|0x00
block|,
literal|0x95
block|,
literal|0x80
block|,
literal|0x2a
block|,
literal|0x00
block|,
literal|0x93
block|,
literal|0x00
block|,
literal|0x15
block|,
literal|0x00
block|,
literal|0x21
block|,
literal|0x01
block|,
literal|0x0a
block|,
literal|0x00
block|,
literal|0x20
block|,
literal|0x01
block|,
literal|0x11
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x82
block|,
literal|0x20
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x42
block|,
literal|0x44
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x41
block|,
literal|0x4a
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x55
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x20
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|busym_bits
index|[]
init|=
block|{
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xe1
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xc3
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xc7
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0xf7
block|,
literal|0x80
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0xf3
block|,
literal|0x00
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xe1
block|,
literal|0x01
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x01
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x83
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0xc3
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xc1
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
modifier|*
specifier|const
name|cursor_bits32
index|[]
init|=
block|{
name|vsplit_bits
block|,
name|vsplitm_bits
block|,
name|hsplit_bits
block|,
name|hsplitm_bits
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|whatsthis_bits
block|,
name|whatsthism_bits
block|,
name|busy_bits
block|,
name|busym_bits
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|forbidden_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0xf0
block|,
literal|0x00
block|,
literal|0x38
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x7c
block|,
literal|0x80
block|,
literal|0x03
block|,
literal|0xec
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0xce
block|,
literal|0x01
block|,
literal|0x07
block|,
literal|0x86
block|,
literal|0x03
block|,
literal|0x06
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x06
block|,
literal|0x06
block|,
literal|0x0e
block|,
literal|0x06
block|,
literal|0x06
block|,
literal|0x1c
block|,
literal|0x06
block|,
literal|0x0e
block|,
literal|0x38
block|,
literal|0x07
block|,
literal|0x0c
block|,
literal|0x70
block|,
literal|0x03
block|,
literal|0x1c
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x38
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xf0
block|,
literal|0xe0
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|forbiddenm_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0x01
block|,
literal|0xfc
block|,
literal|0xf0
block|,
literal|0x03
block|,
literal|0xfe
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xfe
block|,
literal|0x81
block|,
literal|0x07
block|,
literal|0xff
block|,
literal|0x83
block|,
literal|0x0f
block|,
literal|0xcf
block|,
literal|0x07
block|,
literal|0x0f
block|,
literal|0x8f
block|,
literal|0x0f
block|,
literal|0x0f
block|,
literal|0x0f
block|,
literal|0x1f
block|,
literal|0x0f
block|,
literal|0x0f
block|,
literal|0x3e
block|,
literal|0x0f
block|,
literal|0x1f
block|,
literal|0xfc
block|,
literal|0x0f
block|,
literal|0x1e
block|,
literal|0xf8
block|,
literal|0x07
block|,
literal|0x3e
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0xfc
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0x01
block|,
literal|0xf0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x1f
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|openhand_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x01
block|,
literal|0x58
block|,
literal|0x0e
block|,
literal|0x64
block|,
literal|0x12
block|,
literal|0x64
block|,
literal|0x52
block|,
literal|0x48
block|,
literal|0xb2
block|,
literal|0x48
block|,
literal|0x92
block|,
literal|0x16
block|,
literal|0x90
block|,
literal|0x19
block|,
literal|0x80
block|,
literal|0x11
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|openhandm_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x01
block|,
literal|0xd8
block|,
literal|0x0f
block|,
literal|0xfc
block|,
literal|0x1f
block|,
literal|0xfc
block|,
literal|0x5f
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0xf6
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0xfe
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|closedhand_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xb0
block|,
literal|0x0d
block|,
literal|0x48
block|,
literal|0x32
block|,
literal|0x08
block|,
literal|0x50
block|,
literal|0x10
block|,
literal|0x40
block|,
literal|0x18
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|closedhandm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xb0
block|,
literal|0x0d
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x7f
block|,
literal|0xf0
block|,
literal|0x7f
block|,
literal|0xf8
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
modifier|*
specifier|const
name|cursor_bits20
index|[]
init|=
block|{
name|forbidden_bits
block|,
name|forbiddenm_bits
block|}
decl_stmt|;
if|if
condition|(
operator|(
name|cshape
operator|>=
name|Qt
operator|::
name|SizeVerCursor
operator|&&
name|cshape
operator|<
name|Qt
operator|::
name|SizeAllCursor
operator|)
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|BlankCursor
condition|)
block|{
name|XColor
name|bg
decl_stmt|,
name|fg
decl_stmt|;
name|bg
operator|.
name|red
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|bg
operator|.
name|green
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|bg
operator|.
name|blue
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|fg
operator|.
name|red
operator|=
literal|0
expr_stmt|;
name|fg
operator|.
name|green
operator|=
literal|0
expr_stmt|;
name|fg
operator|.
name|blue
operator|=
literal|0
expr_stmt|;
name|int
name|i
init|=
operator|(
name|cshape
operator|-
name|Qt
operator|::
name|SizeVerCursor
operator|)
operator|*
literal|2
decl_stmt|;
name|pm
operator|=
name|XCreateBitmapFromData
argument_list|(
name|dpy
argument_list|,
name|rootwin
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|cursor_bits16
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|pmm
operator|=
name|XCreateBitmapFromData
argument_list|(
name|dpy
argument_list|,
name|rootwin
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|cursor_bits16
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|hcurs
operator|=
name|XCreatePixmapCursor
argument_list|(
name|dpy
argument_list|,
name|pm
argument_list|,
name|pmm
argument_list|,
operator|&
name|fg
argument_list|,
operator|&
name|bg
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|cshape
operator|>=
name|Qt
operator|::
name|SplitVCursor
operator|&&
name|cshape
operator|<=
name|Qt
operator|::
name|SplitHCursor
operator|)
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|WhatsThisCursor
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|BusyCursor
condition|)
block|{
name|XColor
name|bg
decl_stmt|,
name|fg
decl_stmt|;
name|bg
operator|.
name|red
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|bg
operator|.
name|green
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|bg
operator|.
name|blue
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|fg
operator|.
name|red
operator|=
literal|0
expr_stmt|;
name|fg
operator|.
name|green
operator|=
literal|0
expr_stmt|;
name|fg
operator|.
name|blue
operator|=
literal|0
expr_stmt|;
name|int
name|i
init|=
operator|(
name|cshape
operator|-
name|Qt
operator|::
name|SplitVCursor
operator|)
operator|*
literal|2
decl_stmt|;
name|pm
operator|=
name|XCreateBitmapFromData
argument_list|(
name|dpy
argument_list|,
name|rootwin
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|cursor_bits32
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|pmm
operator|=
name|XCreateBitmapFromData
argument_list|(
name|dpy
argument_list|,
name|rootwin
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|cursor_bits32
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|int
name|hs
init|=
operator|(
name|cshape
operator|==
name|Qt
operator|::
name|PointingHandCursor
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|WhatsThisCursor
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|BusyCursor
operator|)
condition|?
literal|0
else|:
literal|16
decl_stmt|;
name|hcurs
operator|=
name|XCreatePixmapCursor
argument_list|(
name|dpy
argument_list|,
name|pm
argument_list|,
name|pmm
argument_list|,
operator|&
name|fg
argument_list|,
operator|&
name|bg
argument_list|,
name|hs
argument_list|,
name|hs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cshape
operator|==
name|Qt
operator|::
name|ForbiddenCursor
condition|)
block|{
name|XColor
name|bg
decl_stmt|,
name|fg
decl_stmt|;
name|bg
operator|.
name|red
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|bg
operator|.
name|green
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|bg
operator|.
name|blue
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|fg
operator|.
name|red
operator|=
literal|0
expr_stmt|;
name|fg
operator|.
name|green
operator|=
literal|0
expr_stmt|;
name|fg
operator|.
name|blue
operator|=
literal|0
expr_stmt|;
name|int
name|i
init|=
operator|(
name|cshape
operator|-
name|Qt
operator|::
name|ForbiddenCursor
operator|)
operator|*
literal|2
decl_stmt|;
name|pm
operator|=
name|XCreateBitmapFromData
argument_list|(
name|dpy
argument_list|,
name|rootwin
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|cursor_bits20
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|pmm
operator|=
name|XCreateBitmapFromData
argument_list|(
name|dpy
argument_list|,
name|rootwin
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|cursor_bits20
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|hcurs
operator|=
name|XCreatePixmapCursor
argument_list|(
name|dpy
argument_list|,
name|pm
argument_list|,
name|pmm
argument_list|,
operator|&
name|fg
argument_list|,
operator|&
name|bg
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cshape
operator|==
name|Qt
operator|::
name|OpenHandCursor
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|ClosedHandCursor
condition|)
block|{
name|XColor
name|bg
decl_stmt|,
name|fg
decl_stmt|;
name|bg
operator|.
name|red
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|bg
operator|.
name|green
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|bg
operator|.
name|blue
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|fg
operator|.
name|red
operator|=
literal|0
expr_stmt|;
name|fg
operator|.
name|green
operator|=
literal|0
expr_stmt|;
name|fg
operator|.
name|blue
operator|=
literal|0
expr_stmt|;
name|bool
name|open
init|=
name|cshape
operator|==
name|Qt
operator|::
name|OpenHandCursor
decl_stmt|;
name|pm
operator|=
name|XCreateBitmapFromData
argument_list|(
name|dpy
argument_list|,
name|rootwin
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|open
condition|?
name|openhand_bits
else|:
name|closedhand_bits
argument_list|)
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|pmm
operator|=
name|XCreateBitmapFromData
argument_list|(
name|dpy
argument_list|,
name|rootwin
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|open
condition|?
name|openhandm_bits
else|:
name|closedhandm_bits
argument_list|)
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|hcurs
operator|=
name|XCreatePixmapCursor
argument_list|(
name|dpy
argument_list|,
name|pm
argument_list|,
name|pmm
argument_list|,
operator|&
name|fg
argument_list|,
operator|&
name|bg
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cshape
operator|==
name|Qt
operator|::
name|DragCopyCursor
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|DragMoveCursor
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|DragLinkCursor
condition|)
block|{
name|XColor
name|bg
decl_stmt|,
name|fg
decl_stmt|;
name|bg
operator|.
name|red
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|bg
operator|.
name|green
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|bg
operator|.
name|blue
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|fg
operator|.
name|red
operator|=
literal|0
expr_stmt|;
name|fg
operator|.
name|green
operator|=
literal|0
expr_stmt|;
name|fg
operator|.
name|blue
operator|=
literal|0
expr_stmt|;
name|QImage
name|image
init|=
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|getPixmapCursor
argument_list|(
name|cshape
argument_list|)
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|pm
operator|=
name|QX11PlatformPixmap
operator|::
name|createBitmapFromImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|pmm
operator|=
name|QX11PlatformPixmap
operator|::
name|createBitmapFromImage
argument_list|(
name|image
operator|.
name|createAlphaMask
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
argument_list|)
expr_stmt|;
name|hcurs
operator|=
name|XCreatePixmapCursor
argument_list|(
name|dpy
argument_list|,
name|pm
argument_list|,
name|pmm
argument_list|,
operator|&
name|fg
argument_list|,
operator|&
name|bg
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hcurs
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_XFIXES
if|if
condition|(
name|X11
operator|->
name|use_xfixes
operator|&&
name|X11
operator|->
name|ptrXFixesSetCursorName
condition|)
name|X11
operator|->
name|ptrXFixesSetCursorName
argument_list|(
name|dpy
argument_list|,
name|hcurs
argument_list|,
name|cursorNames
index|[
name|cshape
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* ! QT_NO_XFIXES */
return|return;
block|}
endif|#
directive|endif
comment|/* ! QT_USE_APPROXIMATE_CURSORS */
name|uint
name|sh
decl_stmt|;
switch|switch
condition|(
name|cshape
condition|)
block|{
comment|// map Q cursor to X cursor
case|case
name|Qt
operator|::
name|ArrowCursor
case|:
name|sh
operator|=
name|XC_left_ptr
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UpArrowCursor
case|:
name|sh
operator|=
name|XC_center_ptr
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|CrossCursor
case|:
name|sh
operator|=
name|XC_crosshair
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WaitCursor
case|:
name|sh
operator|=
name|XC_watch
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|IBeamCursor
case|:
name|sh
operator|=
name|XC_xterm
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeAllCursor
case|:
name|sh
operator|=
name|XC_fleur
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|PointingHandCursor
case|:
name|sh
operator|=
name|XC_hand2
expr_stmt|;
break|break;
ifdef|#
directive|ifdef
name|QT_USE_APPROXIMATE_CURSORS
case|case
name|Qt
operator|::
name|SizeBDiagCursor
case|:
name|sh
operator|=
name|XC_top_right_corner
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeFDiagCursor
case|:
name|sh
operator|=
name|XC_bottom_right_corner
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BlankCursor
case|:
name|XColor
name|bg
decl_stmt|,
name|fg
decl_stmt|;
name|bg
operator|.
name|red
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|bg
operator|.
name|green
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|bg
operator|.
name|blue
operator|=
literal|255
operator|<<
literal|8
expr_stmt|;
name|fg
operator|.
name|red
operator|=
literal|0
expr_stmt|;
name|fg
operator|.
name|green
operator|=
literal|0
expr_stmt|;
name|fg
operator|.
name|blue
operator|=
literal|0
expr_stmt|;
name|pm
operator|=
name|XCreateBitmapFromData
argument_list|(
name|dpy
argument_list|,
name|rootwin
argument_list|,
name|cur_blank_bits
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|pmm
operator|=
name|XCreateBitmapFromData
argument_list|(
name|dpy
argument_list|,
name|rootwin
argument_list|,
name|cur_blank_bits
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|hcurs
operator|=
name|XCreatePixmapCursor
argument_list|(
name|dpy
argument_list|,
name|pm
argument_list|,
name|pmm
argument_list|,
operator|&
name|fg
argument_list|,
operator|&
name|bg
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
return|return;
break|break;
case|case
name|Qt
operator|::
name|SizeVerCursor
case|:
case|case
name|Qt
operator|::
name|SplitVCursor
case|:
name|sh
operator|=
name|XC_sb_v_double_arrow
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeHorCursor
case|:
case|case
name|Qt
operator|::
name|SplitHCursor
case|:
name|sh
operator|=
name|XC_sb_h_double_arrow
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WhatsThisCursor
case|:
name|sh
operator|=
name|XC_question_arrow
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ForbiddenCursor
case|:
name|sh
operator|=
name|XC_circle
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BusyCursor
case|:
name|sh
operator|=
name|XC_watch
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DragCopyCursor
case|:
name|sh
operator|=
name|XC_tcross
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DragLinkCursor
case|:
name|sh
operator|=
name|XC_center_ptr
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DragMoveCursor
case|:
name|sh
operator|=
name|XC_top_left_arrow
expr_stmt|;
break|break;
endif|#
directive|endif
comment|/* QT_USE_APPROXIMATE_CURSORS */
default|default:
name|qWarning
argument_list|(
literal|"QCursor::update: Invalid cursor shape %d"
argument_list|,
name|cshape
argument_list|)
expr_stmt|;
return|return;
block|}
name|hcurs
operator|=
name|XCreateFontCursor
argument_list|(
name|dpy
argument_list|,
name|sh
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XFIXES
if|if
condition|(
name|X11
operator|->
name|use_xfixes
operator|&&
name|X11
operator|->
name|ptrXFixesSetCursorName
condition|)
name|X11
operator|->
name|ptrXFixesSetCursorName
argument_list|(
name|dpy
argument_list|,
name|hcurs
argument_list|,
name|cursorNames
index|[
name|cshape
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* ! QT_NO_XFIXES */
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
