begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_include
include|#
directive|include
file|"qt_x11_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QX11Info     \brief The QX11Info class provides information about the X display     configuration.      \ingroup shared     \inmodule QtWidgets      The class provides two APIs: a set of non-static functions that     provide information about a specific widget or pixmap, and a set     of static functions that provide the default information for the     application.      \warning This class is only available on X11. For querying     per-screen information in a portable way, use QDesktopWidget.      \sa QWidget::x11Info(), QPixmap::x11Info(), QDesktopWidget */
end_comment
begin_comment
comment|/*!     Constructs an empty QX11Info object. */
end_comment
begin_constructor
DECL|function|QX11Info
name|QX11Info
operator|::
name|QX11Info
parameter_list|()
member_init_list|:
name|x11data
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a copy of \a other. */
end_comment
begin_constructor
DECL|function|QX11Info
name|QX11Info
operator|::
name|QX11Info
parameter_list|(
specifier|const
name|QX11Info
modifier|&
name|other
parameter_list|)
block|{
name|x11data
operator|=
name|other
operator|.
name|x11data
expr_stmt|;
if|if
condition|(
name|x11data
condition|)
operator|++
name|x11data
operator|->
name|ref
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Assigns \a other to this object and returns a reference to this     object. */
end_comment
begin_function
DECL|function|operator =
name|QX11Info
modifier|&
name|QX11Info
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QX11Info
modifier|&
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|x11data
condition|)
operator|++
name|other
operator|.
name|x11data
operator|->
name|ref
expr_stmt|;
if|if
condition|(
name|x11data
operator|&&
operator|!
operator|--
name|x11data
operator|->
name|ref
condition|)
operator|delete
name|x11data
expr_stmt|;
name|x11data
operator|=
name|other
operator|.
name|x11data
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Destroys the QX11Info object. */
end_comment
begin_destructor
DECL|function|~QX11Info
name|QX11Info
operator|::
name|~
name|QX11Info
parameter_list|()
block|{
if|if
condition|(
name|x11data
operator|&&
operator|!
operator|--
name|x11data
operator|->
name|ref
condition|)
operator|delete
name|x11data
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \internal     Makes a shallow copy of the X11-specific data of \a fromDevice, if it is not     null. Otherwise this function sets it to null. */
end_comment
begin_function
DECL|function|copyX11Data
name|void
name|QX11Info
operator|::
name|copyX11Data
parameter_list|(
specifier|const
name|QPaintDevice
modifier|*
name|fromDevice
parameter_list|)
block|{
name|QX11InfoData
modifier|*
name|xd
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|fromDevice
condition|)
block|{
if|if
condition|(
name|fromDevice
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
condition|)
name|xd
operator|=
cast|static_cast
argument_list|<
specifier|const
name|QWidget
operator|*
argument_list|>
argument_list|(
name|fromDevice
argument_list|)
operator|->
name|x11Info
argument_list|()
operator|.
name|x11data
expr_stmt|;
elseif|else
if|if
condition|(
name|fromDevice
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Pixmap
condition|)
name|xd
operator|=
cast|static_cast
argument_list|<
specifier|const
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|fromDevice
argument_list|)
operator|->
name|x11Info
argument_list|()
operator|.
name|x11data
expr_stmt|;
block|}
name|setX11Data
argument_list|(
name|xd
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     Makes a deep copy of the X11-specific data of \a fromDevice, if it is not     null. Otherwise this function sets it to null. */
end_comment
begin_function
DECL|function|cloneX11Data
name|void
name|QX11Info
operator|::
name|cloneX11Data
parameter_list|(
specifier|const
name|QPaintDevice
modifier|*
name|fromDevice
parameter_list|)
block|{
name|QX11InfoData
modifier|*
name|d
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|fromDevice
condition|)
block|{
name|QX11InfoData
modifier|*
name|xd
decl_stmt|;
if|if
condition|(
name|fromDevice
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
condition|)
block|{
name|xd
operator|=
cast|static_cast
argument_list|<
specifier|const
name|QWidget
operator|*
argument_list|>
argument_list|(
name|fromDevice
argument_list|)
operator|->
name|x11Info
argument_list|()
operator|.
name|x11data
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|fromDevice
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Pixmap
argument_list|)
expr_stmt|;
name|xd
operator|=
cast|static_cast
argument_list|<
specifier|const
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|fromDevice
argument_list|)
operator|->
name|x11Info
argument_list|()
operator|.
name|x11data
expr_stmt|;
block|}
name|d
operator|=
operator|new
name|QX11InfoData
argument_list|(
operator|*
name|xd
argument_list|)
expr_stmt|;
name|d
operator|->
name|ref
operator|=
literal|0
expr_stmt|;
block|}
name|setX11Data
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     Makes a shallow copy of the X11-specific data \a d and assigns it to this     class. This function increments the reference code of \a d. */
end_comment
begin_function
DECL|function|setX11Data
name|void
name|QX11Info
operator|::
name|setX11Data
parameter_list|(
specifier|const
name|QX11InfoData
modifier|*
name|d
parameter_list|)
block|{
if|if
condition|(
name|x11data
operator|&&
operator|!
operator|--
name|x11data
operator|->
name|ref
condition|)
operator|delete
name|x11data
expr_stmt|;
name|x11data
operator|=
operator|(
name|QX11InfoData
operator|*
operator|)
name|d
expr_stmt|;
if|if
condition|(
name|x11data
condition|)
operator|++
name|x11data
operator|->
name|ref
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     If \a def is false, returns a deep copy of the x11Data, or 0 if x11Data is 0.     If \a def is true, makes a QX11Data struct filled with the default     values.      In either case the caller is responsible for deleting the returned     struct. But notice that the struct is a shared class, so other     classes might also have a reference to it. The reference count of     the returned QX11Data* is 0. */
end_comment
begin_function
DECL|function|getX11Data
name|QX11InfoData
modifier|*
name|QX11Info
operator|::
name|getX11Data
parameter_list|(
name|bool
name|def
parameter_list|)
specifier|const
block|{
name|QX11InfoData
modifier|*
name|res
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|def
condition|)
block|{
name|res
operator|=
operator|new
name|QX11InfoData
expr_stmt|;
name|res
operator|->
name|ref
operator|=
literal|0
expr_stmt|;
name|res
operator|->
name|screen
operator|=
name|appScreen
argument_list|()
expr_stmt|;
name|res
operator|->
name|depth
operator|=
name|appDepth
argument_list|()
expr_stmt|;
name|res
operator|->
name|cells
operator|=
name|appCells
argument_list|()
expr_stmt|;
name|res
operator|->
name|colormap
operator|=
name|colormap
argument_list|()
expr_stmt|;
name|res
operator|->
name|defaultColormap
operator|=
name|appDefaultColormap
argument_list|()
expr_stmt|;
name|res
operator|->
name|visual
operator|=
operator|(
name|Visual
operator|*
operator|)
name|appVisual
argument_list|()
expr_stmt|;
name|res
operator|->
name|defaultVisual
operator|=
name|appDefaultVisual
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x11data
condition|)
block|{
name|res
operator|=
operator|new
name|QX11InfoData
expr_stmt|;
operator|*
name|res
operator|=
operator|*
name|x11data
expr_stmt|;
name|res
operator|->
name|ref
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the horizontal resolution of the given \a screen in terms of the     number of dots per inch.      The \a screen argument is an X screen number. Be aware that if     the user's system uses Xinerama (as opposed to traditional X11     multiscreen), there is only one X screen. Use QDesktopWidget to     query for information about Xinerama screens.      \sa setAppDpiX(), appDpiY() */
end_comment
begin_function
DECL|function|appDpiX
name|int
name|QX11Info
operator|::
name|appDpiX
parameter_list|(
name|int
name|screen
parameter_list|)
block|{
if|if
condition|(
operator|!
name|X11
condition|)
return|return
literal|75
return|;
if|if
condition|(
name|screen
operator|<
literal|0
condition|)
name|screen
operator|=
name|X11
operator|->
name|defaultScreen
expr_stmt|;
if|if
condition|(
name|screen
operator|>
name|X11
operator|->
name|screenCount
condition|)
return|return
literal|0
return|;
return|return
name|X11
operator|->
name|screens
index|[
name|screen
index|]
operator|.
name|dpiX
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the horizontal resolution of the given \a screen to the number of     dots per inch specified by \a xdpi.      The \a screen argument is an X screen number. Be aware that if     the user's system uses Xinerama (as opposed to traditional X11     multiscreen), there is only one X screen. Use QDesktopWidget to     query for information about Xinerama screens.      \sa appDpiX(), setAppDpiY() */
end_comment
begin_function
DECL|function|setAppDpiX
name|void
name|QX11Info
operator|::
name|setAppDpiX
parameter_list|(
name|int
name|screen
parameter_list|,
name|int
name|xdpi
parameter_list|)
block|{
if|if
condition|(
operator|!
name|X11
condition|)
return|return;
if|if
condition|(
name|screen
operator|<
literal|0
condition|)
name|screen
operator|=
name|X11
operator|->
name|defaultScreen
expr_stmt|;
if|if
condition|(
name|screen
operator|>
name|X11
operator|->
name|screenCount
condition|)
return|return;
name|X11
operator|->
name|screens
index|[
name|screen
index|]
operator|.
name|dpiX
operator|=
name|xdpi
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the vertical resolution of the given \a screen in terms of the     number of dots per inch.      The \a screen argument is an X screen number. Be aware that if     the user's system uses Xinerama (as opposed to traditional X11     multiscreen), there is only one X screen. Use QDesktopWidget to     query for information about Xinerama screens.      \sa setAppDpiY(), appDpiX() */
end_comment
begin_function
DECL|function|appDpiY
name|int
name|QX11Info
operator|::
name|appDpiY
parameter_list|(
name|int
name|screen
parameter_list|)
block|{
if|if
condition|(
operator|!
name|X11
condition|)
return|return
literal|75
return|;
if|if
condition|(
name|screen
operator|<
literal|0
condition|)
name|screen
operator|=
name|X11
operator|->
name|defaultScreen
expr_stmt|;
if|if
condition|(
name|screen
operator|>
name|X11
operator|->
name|screenCount
condition|)
return|return
literal|0
return|;
return|return
name|X11
operator|->
name|screens
index|[
name|screen
index|]
operator|.
name|dpiY
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the vertical resolution of the given \a screen to the number of     dots per inch specified by \a ydpi.      The \a screen argument is an X screen number. Be aware that if     the user's system uses Xinerama (as opposed to traditional X11     multiscreen), there is only one X screen. Use QDesktopWidget to     query for information about Xinerama screens.      \sa appDpiY(), setAppDpiX() */
end_comment
begin_function
DECL|function|setAppDpiY
name|void
name|QX11Info
operator|::
name|setAppDpiY
parameter_list|(
name|int
name|screen
parameter_list|,
name|int
name|ydpi
parameter_list|)
block|{
if|if
condition|(
operator|!
name|X11
condition|)
return|return;
if|if
condition|(
name|screen
operator|<
literal|0
condition|)
name|screen
operator|=
name|X11
operator|->
name|defaultScreen
expr_stmt|;
if|if
condition|(
name|screen
operator|>
name|X11
operator|->
name|screenCount
condition|)
return|return;
name|X11
operator|->
name|screens
index|[
name|screen
index|]
operator|.
name|dpiY
operator|=
name|ydpi
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the X11 time.      \sa setAppTime(), appUserTime() */
end_comment
begin_function
DECL|function|appTime
name|unsigned
name|long
name|QX11Info
operator|::
name|appTime
parameter_list|()
block|{
return|return
name|X11
condition|?
name|X11
operator|->
name|time
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the X11 time to the value specified by \a time.      \sa appTime(), setAppUserTime() */
end_comment
begin_function
DECL|function|setAppTime
name|void
name|QX11Info
operator|::
name|setAppTime
parameter_list|(
name|unsigned
name|long
name|time
parameter_list|)
block|{
if|if
condition|(
name|X11
condition|)
block|{
name|X11
operator|->
name|time
operator|=
name|time
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the X11 user time.      \sa setAppUserTime(), appTime() */
end_comment
begin_function
DECL|function|appUserTime
name|unsigned
name|long
name|QX11Info
operator|::
name|appUserTime
parameter_list|()
block|{
return|return
name|X11
condition|?
name|X11
operator|->
name|userTime
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the X11 user time as specified by \a time.      \sa appUserTime(), setAppTime() */
end_comment
begin_function
DECL|function|setAppUserTime
name|void
name|QX11Info
operator|::
name|setAppUserTime
parameter_list|(
name|unsigned
name|long
name|time
parameter_list|)
block|{
if|if
condition|(
name|X11
condition|)
block|{
name|X11
operator|->
name|userTime
operator|=
name|time
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \fn const char *QX11Info::appClass()      Returns the X11 application class.      \sa display() */
end_comment
begin_comment
comment|/*!     Returns the default display for the application.      \sa appScreen() */
end_comment
begin_function
DECL|function|display
name|Display
modifier|*
name|QX11Info
operator|::
name|display
parameter_list|()
block|{
return|return
name|X11
condition|?
name|X11
operator|->
name|display
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of the screen where the application is being     displayed.      \sa display(), screen() */
end_comment
begin_function
DECL|function|appScreen
name|int
name|QX11Info
operator|::
name|appScreen
parameter_list|()
block|{
return|return
name|X11
condition|?
name|X11
operator|->
name|defaultScreen
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a handle for the application's color map on the given \a screen.      The \a screen argument is an X screen number. Be aware that if     the user's system uses Xinerama (as opposed to traditional X11     multiscreen), there is only one X screen. Use QDesktopWidget to     query for information about Xinerama screens.      \sa colormap(), defaultColormap() */
end_comment
begin_function
DECL|function|appColormap
name|Qt
operator|::
name|HANDLE
name|QX11Info
operator|::
name|appColormap
parameter_list|(
name|int
name|screen
parameter_list|)
block|{
return|return
name|X11
condition|?
name|X11
operator|->
name|screens
index|[
name|screen
operator|==
operator|-
literal|1
condition|?
name|X11
operator|->
name|defaultScreen
else|:
name|screen
index|]
operator|.
name|colormap
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the current visual used by the application on the given     \a screen.      The \a screen argument is an X screen number. Be aware that if     the user's system uses Xinerama (as opposed to traditional X11     multiscreen), there is only one X screen. Use QDesktopWidget to     query for information about Xinerama screens.      \sa visual(), defaultVisual() */
end_comment
begin_function
DECL|function|appVisual
name|void
modifier|*
name|QX11Info
operator|::
name|appVisual
parameter_list|(
name|int
name|screen
parameter_list|)
block|{
return|return
name|X11
condition|?
name|X11
operator|->
name|screens
index|[
name|screen
operator|==
operator|-
literal|1
condition|?
name|X11
operator|->
name|defaultScreen
else|:
name|screen
index|]
operator|.
name|visual
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a handle for the applications root window on the given \a screen.      The \a screen argument is an X screen number. Be aware that if     the user's system uses Xinerama (as opposed to traditional X11     multiscreen), there is only one X screen. Use QDesktopWidget to     query for information about Xinerama screens.      \sa QApplication::desktop() */
end_comment
begin_function
DECL|function|appRootWindow
name|Qt
operator|::
name|HANDLE
name|QX11Info
operator|::
name|appRootWindow
parameter_list|(
name|int
name|screen
parameter_list|)
block|{
return|return
name|X11
condition|?
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|screen
operator|==
operator|-
literal|1
condition|?
name|X11
operator|->
name|defaultScreen
else|:
name|screen
argument_list|)
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the color depth (bits per pixel) used by the application on the     given \a screen.      The \a screen argument is an X screen number. Be aware that if     the user's system uses Xinerama (as opposed to traditional X11     multiscreen), there is only one X screen. Use QDesktopWidget to     query for information about Xinerama screens.      \sa depth() */
end_comment
begin_function
DECL|function|appDepth
name|int
name|QX11Info
operator|::
name|appDepth
parameter_list|(
name|int
name|screen
parameter_list|)
block|{
return|return
name|X11
condition|?
name|X11
operator|->
name|screens
index|[
name|screen
operator|==
operator|-
literal|1
condition|?
name|X11
operator|->
name|defaultScreen
else|:
name|screen
index|]
operator|.
name|depth
else|:
literal|32
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of cells used by the application on the given \a screen.      The \a screen argument is an X screen number. Be aware that if     the user's system uses Xinerama (as opposed to traditional X11     multiscreen), there is only one X screen. Use QDesktopWidget to     query for information about Xinerama screens.      \sa cells() */
end_comment
begin_function
DECL|function|appCells
name|int
name|QX11Info
operator|::
name|appCells
parameter_list|(
name|int
name|screen
parameter_list|)
block|{
return|return
name|X11
condition|?
name|X11
operator|->
name|screens
index|[
name|screen
operator|==
operator|-
literal|1
condition|?
name|X11
operator|->
name|defaultScreen
else|:
name|screen
index|]
operator|.
name|cells
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the application has a default color map on the given     \a screen; otherwise returns false.      The \a screen argument is an X screen number. Be aware that if     the user's system uses Xinerama (as opposed to traditional X11     multiscreen), there is only one X screen. Use QDesktopWidget to     query for information about Xinerama screens. */
end_comment
begin_function
DECL|function|appDefaultColormap
name|bool
name|QX11Info
operator|::
name|appDefaultColormap
parameter_list|(
name|int
name|screen
parameter_list|)
block|{
return|return
name|X11
condition|?
name|X11
operator|->
name|screens
index|[
name|screen
operator|==
operator|-
literal|1
condition|?
name|X11
operator|->
name|defaultScreen
else|:
name|screen
index|]
operator|.
name|defaultColormap
else|:
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the application has a default visual on the given \a screen;     otherwise returns false.      The \a screen argument is an X screen number. Be aware that if     the user's system uses Xinerama (as opposed to traditional X11     multiscreen), there is only one X screen. Use QDesktopWidget to     query for information about Xinerama screens. */
end_comment
begin_function
DECL|function|appDefaultVisual
name|bool
name|QX11Info
operator|::
name|appDefaultVisual
parameter_list|(
name|int
name|screen
parameter_list|)
block|{
return|return
name|X11
condition|?
name|X11
operator|->
name|screens
index|[
name|screen
operator|==
operator|-
literal|1
condition|?
name|X11
operator|->
name|defaultScreen
else|:
name|screen
index|]
operator|.
name|defaultVisual
else|:
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of the screen currently in use.      The return value is an X screen number. Be aware that if the     user's system uses Xinerama (as opposed to traditional X11     multiscreen), there is only one X screen. Use QDesktopWidget to     query for information about Xinerama screens.      \sa appScreen() */
end_comment
begin_function
DECL|function|screen
name|int
name|QX11Info
operator|::
name|screen
parameter_list|()
specifier|const
block|{
return|return
name|x11data
condition|?
name|x11data
operator|->
name|screen
else|:
name|QX11Info
operator|::
name|appScreen
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the color depth (bits per pixel) of the X display.      \sa appDepth() */
end_comment
begin_function
DECL|function|depth
name|int
name|QX11Info
operator|::
name|depth
parameter_list|()
specifier|const
block|{
return|return
name|x11data
condition|?
name|x11data
operator|->
name|depth
else|:
name|QX11Info
operator|::
name|appDepth
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of cells.      \sa appCells() */
end_comment
begin_function
DECL|function|cells
name|int
name|QX11Info
operator|::
name|cells
parameter_list|()
specifier|const
block|{
return|return
name|x11data
condition|?
name|x11data
operator|->
name|cells
else|:
name|QX11Info
operator|::
name|appCells
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a handle for the color map.      \sa defaultColormap() */
end_comment
begin_function
DECL|function|colormap
name|Qt
operator|::
name|HANDLE
name|QX11Info
operator|::
name|colormap
parameter_list|()
specifier|const
block|{
return|return
name|x11data
condition|?
name|x11data
operator|->
name|colormap
else|:
name|QX11Info
operator|::
name|appColormap
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if there is a default color map; otherwise returns false.      \sa colormap() */
end_comment
begin_function
DECL|function|defaultColormap
name|bool
name|QX11Info
operator|::
name|defaultColormap
parameter_list|()
specifier|const
block|{
return|return
name|x11data
condition|?
name|x11data
operator|->
name|defaultColormap
else|:
name|QX11Info
operator|::
name|appDefaultColormap
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the current visual.      \sa appVisual(), defaultVisual() */
end_comment
begin_function
DECL|function|visual
name|void
modifier|*
name|QX11Info
operator|::
name|visual
parameter_list|()
specifier|const
block|{
return|return
name|x11data
condition|?
name|x11data
operator|->
name|visual
else|:
name|QX11Info
operator|::
name|appVisual
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if there is a default visual; otherwise returns false.      \sa visual(), appVisual() */
end_comment
begin_function
DECL|function|defaultVisual
name|bool
name|QX11Info
operator|::
name|defaultVisual
parameter_list|()
specifier|const
block|{
return|return
name|x11data
condition|?
name|x11data
operator|->
name|defaultVisual
else|:
name|QX11Info
operator|::
name|appDefaultVisual
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns true if there is a compositing manager running. */
end_comment
begin_function
DECL|function|isCompositingManagerRunning
name|bool
name|QX11Info
operator|::
name|isCompositingManagerRunning
parameter_list|()
block|{
return|return
name|X11
condition|?
name|X11
operator|->
name|compositingManagerRunning
else|:
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
