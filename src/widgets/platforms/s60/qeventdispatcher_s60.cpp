begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qwidget.h>
end_include
begin_include
include|#
directive|include
file|"qeventdispatcher_s60_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QtEikonEnv
name|QtEikonEnv
operator|::
name|QtEikonEnv
parameter_list|()
member_init_list|:
name|m_lastIterationCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_savedStatusCode
argument_list|(
name|KRequestPending
argument_list|)
member_init_list|,
name|m_hasAlreadyRun
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QtEikonEnv
name|QtEikonEnv
operator|::
name|~
name|QtEikonEnv
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|RunL
name|void
name|QtEikonEnv
operator|::
name|RunL
parameter_list|()
block|{
name|QEventDispatcherS60
modifier|*
name|dispatcher
init|=
name|qobject_cast
argument_list|<
name|QEventDispatcherS60
operator|*
argument_list|>
argument_list|(
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dispatcher
condition|)
block|{
name|CEikonEnv
operator|::
name|RunL
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|m_lastIterationCount
operator|!=
name|dispatcher
operator|->
name|iterationCount
argument_list|()
condition|)
block|{
name|m_hasAlreadyRun
operator|=
literal|false
expr_stmt|;
name|m_lastIterationCount
operator|=
name|dispatcher
operator|->
name|iterationCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|m_hasAlreadyRun
condition|)
block|{
comment|// Fool the active scheduler into believing we are still waiting for events.
comment|// The window server thinks we are not, however.
name|m_savedStatusCode
operator|=
name|iStatus
operator|.
name|Int
argument_list|()
expr_stmt|;
name|iStatus
operator|=
name|KRequestPending
expr_stmt|;
name|SetActive
argument_list|()
expr_stmt|;
name|dispatcher
operator|->
name|queueDeferredActiveObjectsCompletion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|m_hasAlreadyRun
operator|=
literal|true
expr_stmt|;
name|CEikonEnv
operator|::
name|RunL
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|DoCancel
name|void
name|QtEikonEnv
operator|::
name|DoCancel
parameter_list|()
block|{
name|complete
argument_list|()
expr_stmt|;
name|CEikonEnv
operator|::
name|DoCancel
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|complete
name|void
name|QtEikonEnv
operator|::
name|complete
parameter_list|()
block|{
if|if
condition|(
name|m_hasAlreadyRun
condition|)
block|{
if|if
condition|(
name|m_savedStatusCode
operator|!=
name|KRequestPending
condition|)
block|{
name|TRequestStatus
modifier|*
name|status
init|=
operator|&
name|iStatus
decl_stmt|;
name|QEventDispatcherSymbian
operator|::
name|RequestComplete
argument_list|(
name|status
argument_list|,
name|m_savedStatusCode
argument_list|)
expr_stmt|;
name|m_savedStatusCode
operator|=
name|KRequestPending
expr_stmt|;
block|}
name|m_hasAlreadyRun
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QEventDispatcherS60
name|QEventDispatcherS60
operator|::
name|QEventDispatcherS60
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QEventDispatcherSymbian
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_noInputEvents
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QEventDispatcherS60
name|QEventDispatcherS60
operator|::
name|~
name|QEventDispatcherS60
parameter_list|()
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|m_deferredInputEvents
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
operator|delete
name|m_deferredInputEvents
index|[
name|c
index|]
operator|.
name|event
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|processEvents
name|bool
name|QEventDispatcherS60
operator|::
name|processEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
parameter_list|)
block|{
name|bool
name|ret
init|=
literal|false
decl_stmt|;
name|QT_TRY
block|{
name|bool
name|oldNoInputEventsValue
init|=
name|m_noInputEvents
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
condition|)
block|{
name|m_noInputEvents
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|m_noInputEvents
operator|=
literal|false
expr_stmt|;
name|ret
operator|=
name|sendDeferredInputEvents
argument_list|()
operator|||
name|ret
expr_stmt|;
block|}
name|ret
operator|=
name|QEventDispatcherSymbian
operator|::
name|processEvents
argument_list|(
name|flags
argument_list|)
operator|||
name|ret
expr_stmt|;
name|m_noInputEvents
operator|=
name|oldNoInputEventsValue
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|const std::exception& ex
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
name|CActiveScheduler
operator|::
name|Current
argument_list|()
operator|->
name|Error
argument_list|(
name|qt_symbian_exception2Error
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|hasPendingEvents
name|bool
name|QEventDispatcherS60
operator|::
name|hasPendingEvents
parameter_list|()
block|{
return|return
operator|!
name|m_deferredInputEvents
operator|.
name|isEmpty
argument_list|()
operator|||
name|QEventDispatcherSymbian
operator|::
name|hasPendingEvents
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|saveInputEvent
name|void
name|QEventDispatcherS60
operator|::
name|saveInputEvent
parameter_list|(
name|QSymbianControl
modifier|*
name|control
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QInputEvent
modifier|*
name|event
parameter_list|)
block|{
name|DeferredInputEvent
name|inputEvent
init|=
block|{
name|control
block|,
name|widget
block|,
name|event
block|}
decl_stmt|;
name|m_deferredInputEvents
operator|.
name|append
argument_list|(
name|inputEvent
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widget
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|removeInputEventsForWidget
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendDeferredInputEvents
name|bool
name|QEventDispatcherS60
operator|::
name|sendDeferredInputEvents
parameter_list|()
block|{
name|bool
name|eventsSent
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|m_deferredInputEvents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DeferredInputEvent
name|inputEvent
init|=
name|m_deferredInputEvents
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
try|try
block|{
endif|#
directive|endif
name|inputEvent
operator|.
name|control
operator|->
name|sendInputEvent
argument_list|(
name|inputEvent
operator|.
name|widget
argument_list|,
name|inputEvent
operator|.
name|event
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
operator|delete
name|inputEvent
operator|.
name|event
expr_stmt|;
throw|throw;
block|}
endif|#
directive|endif
operator|delete
name|inputEvent
operator|.
name|event
expr_stmt|;
name|eventsSent
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|eventsSent
return|;
block|}
end_function
begin_function
DECL|function|removeInputEventsForWidget
name|void
name|QEventDispatcherS60
operator|::
name|removeInputEventsForWidget
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|m_deferredInputEvents
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
if|if
condition|(
name|m_deferredInputEvents
index|[
name|c
index|]
operator|.
name|widget
operator|==
name|object
condition|)
block|{
operator|delete
name|m_deferredInputEvents
index|[
name|c
index|]
operator|.
name|event
expr_stmt|;
name|m_deferredInputEvents
operator|.
name|removeAt
argument_list|(
name|c
operator|--
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// reimpl
end_comment
begin_function
DECL|function|reactivateDeferredActiveObjects
name|void
name|QEventDispatcherS60
operator|::
name|reactivateDeferredActiveObjects
parameter_list|()
block|{
if|if
condition|(
name|S60
operator|->
name|qtOwnsS60Environment
condition|)
block|{
cast|static_cast
argument_list|<
name|QtEikonEnv
operator|*
argument_list|>
argument_list|(
name|CCoeEnv
operator|::
name|Static
argument_list|()
argument_list|)
operator|->
name|complete
argument_list|()
expr_stmt|;
block|}
name|QEventDispatcherSymbian
operator|::
name|reactivateDeferredActiveObjects
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
