begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"private/qkeymapper_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qcore_symbian_p.h>
end_include
begin_include
include|#
directive|include
file|<e32keys.h>
end_include
begin_include
include|#
directive|include
file|<e32cmn.h>
end_include
begin_include
include|#
directive|include
file|<centralrepository.h>
end_include
begin_include
include|#
directive|include
file|<biditext.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|QKeyMapperPrivate
name|QKeyMapperPrivate
operator|::
name|QKeyMapperPrivate
parameter_list|()
block|{ }
end_function
begin_destructor
DECL|function|~QKeyMapperPrivate
name|QKeyMapperPrivate
operator|::
name|~
name|QKeyMapperPrivate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|possibleKeys
name|QList
argument_list|<
name|int
argument_list|>
name|QKeyMapperPrivate
operator|::
name|possibleKeys
parameter_list|(
name|QKeyEvent
modifier|*
comment|/* e */
parameter_list|)
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|result
decl_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|clearMappings
name|void
name|QKeyMapperPrivate
operator|::
name|clearMappings
parameter_list|()
block|{
comment|// stub
block|}
end_function
begin_function
DECL|function|translateKeyEvent
name|QString
name|QKeyMapperPrivate
operator|::
name|translateKeyEvent
parameter_list|(
name|int
name|keySym
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
comment|/* modifiers */
parameter_list|)
block|{
if|if
condition|(
name|keySym
operator|>=
name|Qt
operator|::
name|Key_Escape
condition|)
block|{
switch|switch
condition|(
name|keySym
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Tab
case|:
return|return
name|QString
argument_list|(
name|QChar
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
return|;
case|case
name|Qt
operator|::
name|Key_Return
case|:
comment|// fall through
case|case
name|Qt
operator|::
name|Key_Enter
case|:
return|return
name|QString
argument_list|(
name|QChar
argument_list|(
literal|'\r'
argument_list|)
argument_list|)
return|;
default|default:
return|return
name|QString
argument_list|()
return|;
block|}
block|}
comment|// Symbian doesn't actually use modifiers, but gives us the character code directly.
return|return
name|QString
argument_list|(
name|QChar
argument_list|(
name|keySym
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_include
include|#
directive|include
file|<e32keys.h>
end_include
begin_struct
DECL|struct|KeyMapping
struct|struct
name|KeyMapping
block|{
DECL|member|s60KeyCode
name|TKeyCode
name|s60KeyCode
decl_stmt|;
DECL|member|s60ScanCode
name|TStdScanCode
name|s60ScanCode
decl_stmt|;
DECL|member|qtKey
name|Qt
operator|::
name|Key
name|qtKey
decl_stmt|;
block|}
struct|;
end_struct
begin_using
using|using
namespace|namespace
name|Qt
namespace|;
end_using
begin_decl_stmt
DECL|variable|keyMapping
specifier|static
specifier|const
name|KeyMapping
name|keyMapping
index|[]
init|=
block|{
block|{
name|EKeyBackspace
block|,
name|EStdKeyBackspace
block|,
name|Key_Backspace
block|}
block|,
block|{
name|EKeyTab
block|,
name|EStdKeyTab
block|,
name|Key_Tab
block|}
block|,
block|{
name|EKeyEnter
block|,
name|EStdKeyEnter
block|,
name|Key_Enter
block|}
block|,
block|{
name|EKeyEscape
block|,
name|EStdKeyEscape
block|,
name|Key_Escape
block|}
block|,
block|{
name|EKeySpace
block|,
name|EStdKeySpace
block|,
name|Key_Space
block|}
block|,
block|{
name|EKeyDelete
block|,
name|EStdKeyDelete
block|,
name|Key_Delete
block|}
block|,
block|{
name|EKeyPrintScreen
block|,
name|EStdKeyPrintScreen
block|,
name|Key_SysReq
block|}
block|,
block|{
name|EKeyPause
block|,
name|EStdKeyPause
block|,
name|Key_Pause
block|}
block|,
block|{
name|EKeyHome
block|,
name|EStdKeyHome
block|,
name|Key_Home
block|}
block|,
block|{
name|EKeyEnd
block|,
name|EStdKeyEnd
block|,
name|Key_End
block|}
block|,
block|{
name|EKeyPageUp
block|,
name|EStdKeyPageUp
block|,
name|Key_PageUp
block|}
block|,
block|{
name|EKeyPageDown
block|,
name|EStdKeyPageDown
block|,
name|Key_PageDown
block|}
block|,
block|{
name|EKeyInsert
block|,
name|EStdKeyInsert
block|,
name|Key_Insert
block|}
block|,
block|{
name|EKeyLeftArrow
block|,
name|EStdKeyLeftArrow
block|,
name|Key_Left
block|}
block|,
block|{
name|EKeyRightArrow
block|,
name|EStdKeyRightArrow
block|,
name|Key_Right
block|}
block|,
block|{
name|EKeyUpArrow
block|,
name|EStdKeyUpArrow
block|,
name|Key_Up
block|}
block|,
block|{
name|EKeyDownArrow
block|,
name|EStdKeyDownArrow
block|,
name|Key_Down
block|}
block|,
block|{
name|EKeyLeftShift
block|,
name|EStdKeyLeftShift
block|,
name|Key_Shift
block|}
block|,
block|{
name|EKeyRightShift
block|,
name|EStdKeyRightShift
block|,
name|Key_Shift
block|}
block|,
block|{
name|EKeyLeftAlt
block|,
name|EStdKeyLeftAlt
block|,
name|Key_Alt
block|}
block|,
block|{
name|EKeyRightAlt
block|,
name|EStdKeyRightAlt
block|,
name|Key_AltGr
block|}
block|,
block|{
name|EKeyLeftCtrl
block|,
name|EStdKeyLeftCtrl
block|,
name|Key_Control
block|}
block|,
block|{
name|EKeyRightCtrl
block|,
name|EStdKeyRightCtrl
block|,
name|Key_Control
block|}
block|,
block|{
name|EKeyLeftFunc
block|,
name|EStdKeyLeftFunc
block|,
name|Key_Super_L
block|}
block|,
block|{
name|EKeyRightFunc
block|,
name|EStdKeyRightFunc
block|,
name|Key_Super_R
block|}
block|,
block|{
name|EKeyCapsLock
block|,
name|EStdKeyCapsLock
block|,
name|Key_CapsLock
block|}
block|,
block|{
name|EKeyNumLock
block|,
name|EStdKeyNumLock
block|,
name|Key_NumLock
block|}
block|,
block|{
name|EKeyScrollLock
block|,
name|EStdKeyScrollLock
block|,
name|Key_ScrollLock
block|}
block|,
block|{
name|EKeyF1
block|,
name|EStdKeyF1
block|,
name|Key_F1
block|}
block|,
block|{
name|EKeyF2
block|,
name|EStdKeyF2
block|,
name|Key_F2
block|}
block|,
block|{
name|EKeyF3
block|,
name|EStdKeyF3
block|,
name|Key_F3
block|}
block|,
block|{
name|EKeyF4
block|,
name|EStdKeyF4
block|,
name|Key_F4
block|}
block|,
block|{
name|EKeyF5
block|,
name|EStdKeyF5
block|,
name|Key_F5
block|}
block|,
block|{
name|EKeyF6
block|,
name|EStdKeyF6
block|,
name|Key_F6
block|}
block|,
block|{
name|EKeyF7
block|,
name|EStdKeyF7
block|,
name|Key_F7
block|}
block|,
block|{
name|EKeyF8
block|,
name|EStdKeyF8
block|,
name|Key_F8
block|}
block|,
block|{
name|EKeyF9
block|,
name|EStdKeyF9
block|,
name|Key_F9
block|}
block|,
block|{
name|EKeyF10
block|,
name|EStdKeyF10
block|,
name|Key_F10
block|}
block|,
block|{
name|EKeyF11
block|,
name|EStdKeyF11
block|,
name|Key_F11
block|}
block|,
block|{
name|EKeyF12
block|,
name|EStdKeyF12
block|,
name|Key_F12
block|}
block|,
block|{
name|EKeyF13
block|,
name|EStdKeyF13
block|,
name|Key_F13
block|}
block|,
block|{
name|EKeyF14
block|,
name|EStdKeyF14
block|,
name|Key_F14
block|}
block|,
block|{
name|EKeyF15
block|,
name|EStdKeyF15
block|,
name|Key_F15
block|}
block|,
block|{
name|EKeyF16
block|,
name|EStdKeyF16
block|,
name|Key_F16
block|}
block|,
block|{
name|EKeyF17
block|,
name|EStdKeyF17
block|,
name|Key_F17
block|}
block|,
block|{
name|EKeyF18
block|,
name|EStdKeyF18
block|,
name|Key_F18
block|}
block|,
block|{
name|EKeyF19
block|,
name|EStdKeyF19
block|,
name|Key_F19
block|}
block|,
block|{
name|EKeyF20
block|,
name|EStdKeyF20
block|,
name|Key_F20
block|}
block|,
block|{
name|EKeyF21
block|,
name|EStdKeyF21
block|,
name|Key_F21
block|}
block|,
block|{
name|EKeyF22
block|,
name|EStdKeyF22
block|,
name|Key_F22
block|}
block|,
block|{
name|EKeyF23
block|,
name|EStdKeyF23
block|,
name|Key_F23
block|}
block|,
block|{
name|EKeyF24
block|,
name|EStdKeyF24
block|,
name|Key_F24
block|}
block|,
block|{
name|EKeyOff
block|,
name|EStdKeyOff
block|,
name|Key_PowerOff
block|}
block|,
comment|//    {EKeyMenu, EStdKeyMenu, Key_Menu}, // Menu is EKeyApplication0
block|{
name|EKeyHelp
block|,
name|EStdKeyHelp
block|,
name|Key_Help
block|}
block|,
block|{
name|EKeyDial
block|,
name|EStdKeyDial
block|,
name|Key_Call
block|}
block|,
block|{
name|EKeyIncVolume
block|,
name|EStdKeyIncVolume
block|,
name|Key_VolumeUp
block|}
block|,
block|{
name|EKeyDecVolume
block|,
name|EStdKeyDecVolume
block|,
name|Key_VolumeDown
block|}
block|,
block|{
name|EKeyDevice0
block|,
name|EStdKeyDevice0
block|,
name|Key_Context1
block|}
block|,
comment|// Found by manual testing.
block|{
name|EKeyDevice1
block|,
name|EStdKeyDevice1
block|,
name|Key_Context2
block|}
block|,
comment|// Found by manual testing.
block|{
name|EKeyDevice3
block|,
name|EStdKeyDevice3
block|,
name|Key_Select
block|}
block|,
block|{
name|EKeyDevice7
block|,
name|EStdKeyDevice7
block|,
name|Key_Camera
block|}
block|,
block|{
name|EKeyApplication0
block|,
name|EStdKeyApplication0
block|,
name|Key_Menu
block|}
block|,
comment|// Found by manual testing.
block|{
name|EKeyApplication1
block|,
name|EStdKeyApplication1
block|,
name|Key_Launch1
block|}
block|,
comment|// Found by manual testing.
block|{
name|EKeyApplication2
block|,
name|EStdKeyApplication2
block|,
name|Key_MediaPlay
block|}
block|,
comment|// Found by manual testing.
block|{
name|EKeyApplication3
block|,
name|EStdKeyApplication3
block|,
name|Key_MediaStop
block|}
block|,
comment|// Found by manual testing.
block|{
name|EKeyApplication4
block|,
name|EStdKeyApplication4
block|,
name|Key_MediaNext
block|}
block|,
comment|// Found by manual testing.
block|{
name|EKeyApplication5
block|,
name|EStdKeyApplication5
block|,
name|Key_MediaPrevious
block|}
block|,
comment|// Found by manual testing.
block|{
name|EKeyApplication6
block|,
name|EStdKeyApplication6
block|,
name|Key_Launch6
block|}
block|,
block|{
name|EKeyApplication7
block|,
name|EStdKeyApplication7
block|,
name|Key_Launch7
block|}
block|,
block|{
name|EKeyApplication8
block|,
name|EStdKeyApplication8
block|,
name|Key_Launch8
block|}
block|,
block|{
name|EKeyApplication9
block|,
name|EStdKeyApplication9
block|,
name|Key_Launch9
block|}
block|,
block|{
name|EKeyApplicationA
block|,
name|EStdKeyApplicationA
block|,
name|Key_LaunchA
block|}
block|,
block|{
name|EKeyApplicationB
block|,
name|EStdKeyApplicationB
block|,
name|Key_LaunchB
block|}
block|,
block|{
name|EKeyApplicationC
block|,
name|EStdKeyApplicationC
block|,
name|Key_LaunchC
block|}
block|,
block|{
name|EKeyApplicationD
block|,
name|EStdKeyApplicationD
block|,
name|Key_LaunchD
block|}
block|,
block|{
name|EKeyApplicationE
block|,
name|EStdKeyApplicationE
block|,
name|Key_LaunchE
block|}
block|,
block|{
name|EKeyApplicationF
block|,
name|EStdKeyApplicationF
block|,
name|Key_LaunchF
block|}
block|,
block|{
name|EKeyApplication19
block|,
name|EStdKeyApplication19
block|,
name|Key_CameraFocus
block|}
block|,
block|{
name|EKeyYes
block|,
name|EStdKeyYes
block|,
name|Key_Yes
block|}
block|,
block|{
name|EKeyNo
block|,
name|EStdKeyNo
block|,
name|Key_No
block|}
block|,
block|{
name|TKeyCode
argument_list|(
literal|0
argument_list|)
block|,
name|TStdScanCode
argument_list|(
literal|0
argument_list|)
block|,
name|Qt
operator|::
name|Key
operator|(
literal|0
operator|)
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|mapS60KeyToQt
name|int
name|QKeyMapperPrivate
operator|::
name|mapS60KeyToQt
parameter_list|(
name|TUint
name|s60key
parameter_list|)
block|{
name|int
name|res
init|=
name|Qt
operator|::
name|Key_unknown
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|keyMapping
index|[
name|i
index|]
operator|.
name|s60KeyCode
operator|!=
literal|0
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keyMapping
index|[
name|i
index|]
operator|.
name|s60KeyCode
operator|==
name|s60key
condition|)
block|{
name|res
operator|=
name|keyMapping
index|[
name|i
index|]
operator|.
name|qtKey
expr_stmt|;
break|break;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|mapS60ScanCodesToQt
name|int
name|QKeyMapperPrivate
operator|::
name|mapS60ScanCodesToQt
parameter_list|(
name|TUint
name|s60scanCode
parameter_list|)
block|{
name|int
name|res
init|=
name|Qt
operator|::
name|Key_unknown
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|keyMapping
index|[
name|i
index|]
operator|.
name|s60KeyCode
operator|!=
literal|0
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keyMapping
index|[
name|i
index|]
operator|.
name|s60ScanCode
operator|==
name|s60scanCode
condition|)
block|{
name|res
operator|=
name|keyMapping
index|[
name|i
index|]
operator|.
name|qtKey
expr_stmt|;
break|break;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|mapQtToS60Key
name|int
name|QKeyMapperPrivate
operator|::
name|mapQtToS60Key
parameter_list|(
name|int
name|qtKey
parameter_list|)
block|{
name|int
name|res
init|=
name|KErrUnknown
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|keyMapping
index|[
name|i
index|]
operator|.
name|s60KeyCode
operator|!=
literal|0
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keyMapping
index|[
name|i
index|]
operator|.
name|qtKey
operator|==
name|qtKey
condition|)
block|{
name|res
operator|=
name|keyMapping
index|[
name|i
index|]
operator|.
name|s60KeyCode
expr_stmt|;
break|break;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|mapQtToS60ScanCodes
name|int
name|QKeyMapperPrivate
operator|::
name|mapQtToS60ScanCodes
parameter_list|(
name|int
name|qtKey
parameter_list|)
block|{
name|int
name|res
init|=
name|KErrUnknown
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|keyMapping
index|[
name|i
index|]
operator|.
name|s60KeyCode
operator|!=
literal|0
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keyMapping
index|[
name|i
index|]
operator|.
name|qtKey
operator|==
name|qtKey
condition|)
block|{
name|res
operator|=
name|keyMapping
index|[
name|i
index|]
operator|.
name|s60ScanCode
expr_stmt|;
break|break;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|updateInputLanguage
name|void
name|QKeyMapperPrivate
operator|::
name|updateInputLanguage
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_WS_S60
name|TInt
name|err
decl_stmt|;
name|CRepository
modifier|*
name|repo
decl_stmt|;
specifier|const
name|TUid
name|KCRUidAknFep
init|=
name|TUid
operator|::
name|Uid
argument_list|(
literal|0x101F876D
argument_list|)
decl_stmt|;
specifier|const
name|TUint32
name|KAknFepInputTxtLang
init|=
literal|0x00000005
decl_stmt|;
name|TRAP
argument_list|(
name|err
argument_list|,
name|repo
operator|=
name|CRepository
operator|::
name|NewL
argument_list|(
name|KCRUidAknFep
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|KErrNone
condition|)
return|return;
name|TInt
name|symbianLang
decl_stmt|;
name|err
operator|=
name|repo
operator|->
name|Get
argument_list|(
name|KAknFepInputTxtLang
argument_list|,
name|symbianLang
argument_list|)
expr_stmt|;
operator|delete
name|repo
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|KErrNone
condition|)
return|return;
name|QString
name|qtLang
init|=
name|QString
operator|::
name|fromAscii
argument_list|(
name|qt_symbianLocaleName
argument_list|(
name|symbianLang
argument_list|)
argument_list|)
decl_stmt|;
name|keyboardInputLocale
operator|=
name|QLocale
argument_list|(
name|qtLang
argument_list|)
expr_stmt|;
name|keyboardInputDirection
operator|=
operator|(
name|TBidiText
operator|::
name|ScriptDirectionality
argument_list|(
name|TLanguage
argument_list|(
name|symbianLang
argument_list|)
argument_list|)
operator|==
name|TBidiText
operator|::
name|ERightToLeft
operator|)
condition|?
name|Qt
operator|::
name|RightToLeft
else|:
name|Qt
operator|::
name|LeftToRight
expr_stmt|;
else|#
directive|else
name|keyboardInputLocale
operator|=
name|QLocale
argument_list|()
expr_stmt|;
name|keyboardInputDirection
operator|=
name|Qt
operator|::
name|LeftToRight
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
