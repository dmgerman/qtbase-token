begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qcursor_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<coecntrl.h>
end_include
begin_include
include|#
directive|include
file|<qcursor.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_s60_p.h>
end_include
begin_include
include|#
directive|include
file|<qbitmap.h>
end_include
begin_include
include|#
directive|include
file|<w32std.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qwidget.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
DECL|variable|cursorSprite
specifier|static
name|QCursor
name|cursorSprite
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cursorSpriteVisible
specifier|static
name|int
name|cursorSpriteVisible
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//pos and setpos are required whether cursors are configured or not.
end_comment
begin_function
DECL|function|pos
name|QPoint
name|QCursor
operator|::
name|pos
parameter_list|()
block|{
return|return
name|S60
operator|->
name|lastCursorPos
return|;
block|}
end_function
begin_function
DECL|function|setPos
name|void
name|QCursor
operator|::
name|setPos
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
comment|//clip to screen size (window server allows a sprite hotspot to be outside the screen)
if|if
condition|(
name|x
operator|<
literal|0
condition|)
name|x
operator|=
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
name|x
operator|>=
name|S60
operator|->
name|screenWidthInPixels
condition|)
name|x
operator|=
name|S60
operator|->
name|screenWidthInPixels
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|y
operator|<
literal|0
condition|)
name|y
operator|=
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
name|y
operator|>=
name|S60
operator|->
name|screenHeightInPixels
condition|)
name|y
operator|=
name|S60
operator|->
name|screenHeightInPixels
operator|-
literal|1
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
ifndef|#
directive|ifndef
name|Q_SYMBIAN_FIXED_POINTER_CURSORS
if|if
condition|(
name|S60
operator|->
name|brokenPointerCursors
operator|&&
name|cursorSpriteVisible
condition|)
name|cursorSprite
operator|.
name|d
operator|->
name|scurs
operator|.
name|SetPosition
argument_list|(
name|TPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|S60
operator|->
name|wsSession
argument_list|()
operator|.
name|SetPointerCursorPosition
argument_list|(
name|TPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|S60
operator|->
name|lastCursorPos
operator|=
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
comment|//send a fake mouse move event, so that enter/leave events go to the widget hierarchy
name|QWidget
modifier|*
name|w
init|=
name|QApplication
operator|::
name|topLevelAt
argument_list|(
name|S60
operator|->
name|lastCursorPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
condition|)
block|{
name|CCoeControl
modifier|*
name|ctrl
init|=
name|w
operator|->
name|effectiveWinId
argument_list|()
decl_stmt|;
name|TPoint
name|epos
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|TPoint
name|cpos
init|=
name|epos
operator|-
name|ctrl
operator|->
name|PositionRelativeToScreen
argument_list|()
decl_stmt|;
name|TPointerEvent
name|fakeEvent
decl_stmt|;
name|fakeEvent
operator|.
name|iType
operator|=
name|TPointerEvent
operator|::
name|EMove
expr_stmt|;
name|fakeEvent
operator|.
name|iModifiers
operator|=
literal|0U
expr_stmt|;
name|fakeEvent
operator|.
name|iPosition
operator|=
name|cpos
expr_stmt|;
name|fakeEvent
operator|.
name|iParentPosition
operator|=
name|epos
expr_stmt|;
name|ctrl
operator|->
name|HandlePointerEventL
argument_list|(
name|fakeEvent
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_comment
comment|/*  * Request cursor to be turned on or off.  * Reference counted, so 2 on + 1 off = on, for example  */
end_comment
begin_function
DECL|function|qt_symbian_set_cursor_visible
name|void
name|qt_symbian_set_cursor_visible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|if
condition|(
name|visible
condition|)
name|cursorSpriteVisible
operator|++
expr_stmt|;
else|else
name|cursorSpriteVisible
operator|--
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|cursorSpriteVisible
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|cursorSpriteVisible
operator|&&
operator|!
name|S60
operator|->
name|mouseInteractionEnabled
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_SYMBIAN_FIXED_POINTER_CURSORS
if|if
condition|(
name|S60
operator|->
name|brokenPointerCursors
condition|)
name|qt_symbian_show_pointer_sprite
argument_list|()
expr_stmt|;
else|else
endif|#
directive|endif
name|S60
operator|->
name|wsSession
argument_list|()
operator|.
name|SetPointerCursorMode
argument_list|(
name|EPointerCursorNormal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|cursorSpriteVisible
operator|&&
name|S60
operator|->
name|mouseInteractionEnabled
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_SYMBIAN_FIXED_POINTER_CURSORS
if|if
condition|(
name|S60
operator|->
name|brokenPointerCursors
condition|)
name|qt_symbian_hide_pointer_sprite
argument_list|()
expr_stmt|;
else|else
endif|#
directive|endif
name|S60
operator|->
name|wsSession
argument_list|()
operator|.
name|SetPointerCursorMode
argument_list|(
name|EPointerCursorNone
argument_list|)
expr_stmt|;
block|}
name|S60
operator|->
name|mouseInteractionEnabled
operator|=
operator|(
operator|(
name|cursorSpriteVisible
operator|>
literal|0
operator|)
condition|?
literal|true
else|:
literal|false
operator|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * Check if the cursor is on or off  */
end_comment
begin_function
DECL|function|qt_symbian_is_cursor_visible
name|bool
name|qt_symbian_is_cursor_visible
parameter_list|()
block|{
return|return
name|S60
operator|->
name|mouseInteractionEnabled
return|;
block|}
end_function
begin_constructor
DECL|function|QCursorData
name|QCursorData
operator|::
name|QCursorData
parameter_list|(
name|Qt
operator|::
name|CursorShape
name|s
parameter_list|)
member_init_list|:
name|cshape
argument_list|(
name|s
argument_list|)
member_init_list|,
name|bm
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bmm
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hx
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hy
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|pcurs
argument_list|()
block|{
name|ref
operator|=
literal|1
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QCursorData
name|QCursorData
operator|::
name|~
name|QCursorData
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nativeSpriteMembers
operator|.
name|Count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
operator|delete
name|nativeSpriteMembers
index|[
name|i
index|]
operator|->
name|iBitmap
expr_stmt|;
operator|delete
name|nativeSpriteMembers
index|[
name|i
index|]
operator|->
name|iMaskBitmap
expr_stmt|;
block|}
name|nativeSpriteMembers
operator|.
name|ResetAndDestroy
argument_list|()
expr_stmt|;
name|pcurs
operator|.
name|Close
argument_list|()
expr_stmt|;
operator|delete
name|bm
expr_stmt|;
operator|delete
name|bmm
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/* Create a bitmap cursor, this is called by public constructors in the  * generic QCursor code.  */
end_comment
begin_function
DECL|function|setBitmap
name|QCursorData
modifier|*
name|QCursorData
operator|::
name|setBitmap
parameter_list|(
specifier|const
name|QBitmap
modifier|&
name|bitmap
parameter_list|,
specifier|const
name|QBitmap
modifier|&
name|mask
parameter_list|,
name|int
name|hotX
parameter_list|,
name|int
name|hotY
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QCursorData
operator|::
name|initialized
condition|)
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
name|bitmap
operator|.
name|depth
argument_list|()
operator|!=
literal|1
operator|||
name|mask
operator|.
name|depth
argument_list|()
operator|!=
literal|1
operator|||
name|bitmap
operator|.
name|size
argument_list|()
operator|!=
name|mask
operator|.
name|size
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QCursor: Cannot create bitmap cursor; invalid bitmap(s)"
argument_list|)
expr_stmt|;
name|QCursorData
modifier|*
name|c
init|=
name|qt_cursorTable
index|[
literal|0
index|]
decl_stmt|;
name|c
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
return|return
name|c
return|;
block|}
name|QCursorData
modifier|*
name|d
init|=
operator|new
name|QCursorData
decl_stmt|;
name|d
operator|->
name|bm
operator|=
operator|new
name|QBitmap
argument_list|(
name|bitmap
argument_list|)
expr_stmt|;
name|d
operator|->
name|bmm
operator|=
operator|new
name|QBitmap
argument_list|(
name|mask
argument_list|)
expr_stmt|;
name|d
operator|->
name|cshape
operator|=
name|Qt
operator|::
name|BitmapCursor
expr_stmt|;
name|d
operator|->
name|hx
operator|=
name|hotX
operator|>=
literal|0
condition|?
name|hotX
else|:
name|bitmap
operator|.
name|width
argument_list|()
operator|/
literal|2
expr_stmt|;
name|d
operator|->
name|hy
operator|=
name|hotY
operator|>=
literal|0
condition|?
name|hotY
else|:
name|bitmap
operator|.
name|height
argument_list|()
operator|/
literal|2
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_comment
comment|/*  * returns an opaque native handle to a cursor.  * It happens to be the address of the native handle, as window server handles  * are not POD types. Note there is no QCursor(HANDLE) constructor on Symbian,  * Mac or QWS.  */
end_comment
begin_function
DECL|function|handle
name|Qt
operator|::
name|HANDLE
name|QCursor
operator|::
name|handle
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|pcurs
operator|.
name|WsHandle
argument_list|()
condition|)
return|return
cast|reinterpret_cast
argument_list|<
name|Qt
operator|::
name|HANDLE
argument_list|>
argument_list|(
operator|&
operator|(
name|d
operator|->
name|pcurs
operator|)
argument_list|)
return|;
ifdef|#
directive|ifdef
name|Q_SYMBIAN_HAS_SYSTEM_CURSORS
comment|// don't construct shape cursors, QApplication_s60 will use the system cursor instead
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|bm
operator|)
condition|)
return|return
literal|0
return|;
endif|#
directive|endif
name|d
operator|->
name|pcurs
operator|=
name|RWsPointerCursor
argument_list|(
name|S60
operator|->
name|wsSession
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|pcurs
operator|.
name|Construct
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|constructCursorSprite
argument_list|(
name|d
operator|->
name|pcurs
argument_list|)
expr_stmt|;
name|d
operator|->
name|pcurs
operator|.
name|Activate
argument_list|()
expr_stmt|;
return|return
cast|reinterpret_cast
argument_list|<
name|Qt
operator|::
name|HANDLE
argument_list|>
argument_list|(
operator|&
operator|(
name|d
operator|->
name|pcurs
operator|)
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_SYMBIAN_HAS_SYSTEM_CURSORS
end_ifndef
begin_comment
comment|/*  * Loads a single cursor shape from resources and appends it to a native sprite.  * Animated cursors (e.g. the busy cursor) have multiple members.  */
end_comment
begin_function
DECL|function|loadShapeFromResource
name|void
name|QCursorData
operator|::
name|loadShapeFromResource
parameter_list|(
name|RWsSpriteBase
modifier|&
name|target
parameter_list|,
name|QString
name|resource
parameter_list|,
name|int
name|hx
parameter_list|,
name|int
name|hy
parameter_list|,
name|int
name|interval
parameter_list|)
block|{
name|QPixmap
name|pix
decl_stmt|;
name|CFbsBitmap
modifier|*
name|native
decl_stmt|;
name|QScopedPointer
argument_list|<
name|TSpriteMember
argument_list|>
name|member
argument_list|(
operator|new
name|TSpriteMember
argument_list|)
decl_stmt|;
name|member
operator|->
name|iInterval
operator|=
name|interval
expr_stmt|;
name|member
operator|->
name|iInvertMask
operator|=
literal|false
expr_stmt|;
name|member
operator|->
name|iMaskBitmap
operator|=
literal|0
expr_stmt|;
comment|// all shapes are RGBA
name|member
operator|->
name|iDrawMode
operator|=
name|CGraphicsContext
operator|::
name|EDrawModePEN
expr_stmt|;
name|member
operator|->
name|iOffset
operator|=
name|TPoint
argument_list|(
operator|-
name|hx
argument_list|,
operator|-
name|hy
argument_list|)
expr_stmt|;
name|QString
name|res
argument_list|(
name|QLatin1String
argument_list|(
literal|":/trolltech/symbian/cursors/images/%1.png"
argument_list|)
argument_list|)
decl_stmt|;
name|pix
operator|.
name|load
argument_list|(
name|res
operator|.
name|arg
argument_list|(
name|resource
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|=
name|pix
operator|.
name|toSymbianCFbsBitmap
argument_list|()
expr_stmt|;
name|member
operator|->
name|iBitmap
operator|=
name|native
expr_stmt|;
name|qt_symbian_throwIfError
argument_list|(
name|nativeSpriteMembers
operator|.
name|Append
argument_list|(
name|member
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|target
operator|.
name|AppendMember
argument_list|(
operator|*
operator|(
name|member
operator|.
name|take
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//TODO: after 4.6, connect with style& skins?
end_comment
begin_comment
comment|/*  * Constructs the native cursor from resources compiled into QtGui  * This is needed only when the platform doesn't have system cursors.  *  * System cursors are higher performance, since they are constructed once  * and shared by all applications by specifying the shape number.  * Due to symbian platform security considerations, and the fact most  * existing phones have a broken RWsPointerCursor, system cursors are not  * being used.  */
end_comment
begin_function
DECL|function|constructShapeSprite
name|void
name|QCursorData
operator|::
name|constructShapeSprite
parameter_list|(
name|RWsSpriteBase
modifier|&
name|target
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
switch|switch
condition|(
name|cshape
condition|)
block|{
default|default:
name|qWarning
argument_list|(
literal|"QCursorData::constructShapeSprite unknown shape %d"
argument_list|,
name|cshape
argument_list|)
expr_stmt|;
comment|//fall through and give arrow cursor
case|case
name|Qt
operator|::
name|ArrowCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"pointer"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UpArrowCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"uparrow"
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|CrossCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"cross"
argument_list|)
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WaitCursor
case|:
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<=
literal|12
condition|;
name|i
operator|++
control|)
block|{
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"wait%1"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|IBeamCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"ibeam"
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeVerCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"sizever"
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeHorCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"sizehor"
argument_list|)
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeBDiagCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"sizebdiag"
argument_list|)
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeFDiagCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"sizefdiag"
argument_list|)
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeAllCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"sizeall"
argument_list|)
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BlankCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"blank"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SplitVCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"splitv"
argument_list|)
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SplitHCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"splith"
argument_list|)
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|PointingHandCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"handpoint"
argument_list|)
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ForbiddenCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"forbidden"
argument_list|)
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WhatsThisCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"whatsthis"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BusyCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"busy3"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"busy6"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"busy9"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"busy12"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|OpenHandCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"openhand"
argument_list|)
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ClosedHandCursor
case|:
name|loadShapeFromResource
argument_list|(
name|target
argument_list|,
name|QLatin1String
argument_list|(
literal|"closehand"
argument_list|)
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*  * Common code between the sprite workaround and standard modes of operation.  * RWsSpriteBase is the base class for both RWsSprite and RWsPointerCursor.  * It is called from both handle() and qt_s60_show_pointer_sprite()  */
end_comment
begin_function
DECL|function|constructCursorSprite
name|void
name|QCursorData
operator|::
name|constructCursorSprite
parameter_list|(
name|RWsSpriteBase
modifier|&
name|target
parameter_list|)
block|{
name|int
name|count
init|=
name|nativeSpriteMembers
operator|.
name|Count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
condition|)
block|{
comment|// already constructed
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
name|target
operator|.
name|AppendMember
argument_list|(
operator|*
operator|(
name|nativeSpriteMembers
index|[
name|i
index|]
operator|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|bm
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_SYMBIAN_HAS_SYSTEM_CURSORS
comment|//shape cursor
name|constructShapeSprite
argument_list|(
name|target
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
name|QScopedPointer
argument_list|<
name|TSpriteMember
argument_list|>
name|member
argument_list|(
operator|new
name|TSpriteMember
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|//construct mono cursor
name|member
operator|->
name|iBitmap
operator|=
name|bm
operator|->
name|toSymbianCFbsBitmap
argument_list|()
expr_stmt|;
name|member
operator|->
name|iMaskBitmap
operator|=
name|bmm
operator|->
name|toSymbianCFbsBitmap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//construct normal cursor
name|member
operator|->
name|iBitmap
operator|=
name|pixmap
operator|.
name|toSymbianCFbsBitmap
argument_list|()
expr_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|hasAlphaChannel
argument_list|()
condition|)
block|{
name|member
operator|->
name|iMaskBitmap
operator|=
literal|0
expr_stmt|;
comment|//use alpha blending
block|}
elseif|else
if|if
condition|(
name|pixmap
operator|.
name|hasAlpha
argument_list|()
condition|)
block|{
name|member
operator|->
name|iMaskBitmap
operator|=
name|pixmap
operator|.
name|mask
argument_list|()
operator|.
name|toSymbianCFbsBitmap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|member
operator|->
name|iMaskBitmap
operator|=
literal|0
expr_stmt|;
comment|//opaque rectangle cursor (due to EDrawModePEN)
block|}
block|}
name|member
operator|->
name|iDrawMode
operator|=
name|CGraphicsContext
operator|::
name|EDrawModePEN
expr_stmt|;
name|member
operator|->
name|iInvertMask
operator|=
name|EFalse
expr_stmt|;
name|member
operator|->
name|iInterval
operator|=
literal|0
expr_stmt|;
name|member
operator|->
name|iOffset
operator|=
name|TPoint
argument_list|(
operator|-
operator|(
name|hx
operator|)
argument_list|,
operator|-
operator|(
name|hy
operator|)
argument_list|)
expr_stmt|;
comment|//Symbian hotspot coordinates are negative
name|qt_symbian_throwIfError
argument_list|(
name|nativeSpriteMembers
operator|.
name|Append
argument_list|(
name|member
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|target
operator|.
name|AppendMember
argument_list|(
operator|*
operator|(
name|member
operator|.
name|take
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * shows the pointer sprite by constructing a native handle, and registering  * it with the window server.  * Only used when the sprite workaround is in use.  */
end_comment
begin_function
DECL|function|qt_symbian_show_pointer_sprite
name|void
name|qt_symbian_show_pointer_sprite
parameter_list|()
block|{
if|if
condition|(
name|cursorSprite
operator|.
name|d
condition|)
block|{
if|if
condition|(
name|cursorSprite
operator|.
name|d
operator|->
name|scurs
operator|.
name|WsHandle
argument_list|()
condition|)
name|cursorSprite
operator|.
name|d
operator|->
name|scurs
operator|.
name|Close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cursorSprite
operator|=
name|QCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
block|}
name|cursorSprite
operator|.
name|d
operator|->
name|scurs
operator|=
name|RWsSprite
argument_list|(
name|S60
operator|->
name|wsSession
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|pos
init|=
name|QCursor
operator|::
name|pos
argument_list|()
decl_stmt|;
name|cursorSprite
operator|.
name|d
operator|->
name|scurs
operator|.
name|Construct
argument_list|(
name|S60
operator|->
name|windowGroup
argument_list|()
argument_list|,
name|TPoint
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|ESpriteNoChildClip
operator||
name|ESpriteNoShadows
argument_list|)
expr_stmt|;
name|cursorSprite
operator|.
name|d
operator|->
name|constructCursorSprite
argument_list|(
name|cursorSprite
operator|.
name|d
operator|->
name|scurs
argument_list|)
expr_stmt|;
name|cursorSprite
operator|.
name|d
operator|->
name|scurs
operator|.
name|Activate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * hides the pointer sprite by closing the native handle.  * Only used when the sprite workaround is in use.  */
end_comment
begin_function
DECL|function|qt_symbian_hide_pointer_sprite
name|void
name|qt_symbian_hide_pointer_sprite
parameter_list|()
block|{
if|if
condition|(
name|cursorSprite
operator|.
name|d
condition|)
block|{
name|cursorSprite
operator|.
name|d
operator|->
name|scurs
operator|.
name|Close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*  * Changes the cursor sprite to the cursor specified.  * Only used when the sprite workaround is in use.  */
end_comment
begin_function
DECL|function|qt_symbian_set_pointer_sprite
name|void
name|qt_symbian_set_pointer_sprite
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
if|if
condition|(
name|S60
operator|->
name|mouseInteractionEnabled
condition|)
name|qt_symbian_hide_pointer_sprite
argument_list|()
expr_stmt|;
name|cursorSprite
operator|=
name|cursor
expr_stmt|;
if|if
condition|(
name|S60
operator|->
name|mouseInteractionEnabled
condition|)
name|qt_symbian_show_pointer_sprite
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * When using sprites as a workaround on phones that have a broken  * RWsPointerCursor, this function is called in response to pointer events  * and when QCursor::setPos() is called.  * Performance is worse than a real pointer cursor, due to extra context  * switches vs. the window server moving the cursor by itself.  */
end_comment
begin_function
DECL|function|qt_symbian_move_cursor_sprite
name|void
name|qt_symbian_move_cursor_sprite
parameter_list|()
block|{
if|if
condition|(
name|S60
operator|->
name|mouseInteractionEnabled
condition|)
block|{
name|cursorSprite
operator|.
name|d
operator|->
name|scurs
operator|.
name|SetPosition
argument_list|(
name|TPoint
argument_list|(
name|S60
operator|->
name|lastCursorPos
operator|.
name|x
argument_list|()
argument_list|,
name|S60
operator|->
name|lastCursorPos
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*  * Translate from Qt::CursorShape to OS system pointer cursor list index.  * Currently we control the implementation of the system pointer cursor list,  * so this function is trivial. That may not always be the case.  */
end_comment
begin_function
DECL|function|qt_symbian_translate_cursor_shape
name|TInt
name|qt_symbian_translate_cursor_shape
parameter_list|(
name|Qt
operator|::
name|CursorShape
name|shape
parameter_list|)
block|{
return|return
operator|(
name|TInt
operator|)
name|shape
return|;
block|}
end_function
begin_comment
comment|/*   Internal function called from QWidget::setCursor()    force is true if this function is called from dispatchEnterLeave, it means that the    mouse is actually directly under this widget. */
end_comment
begin_function
DECL|function|qt_symbian_set_cursor
name|void
name|qt_symbian_set_cursor
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|force
parameter_list|)
block|{
specifier|static
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|lastUnderMouse
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|force
condition|)
block|{
name|lastUnderMouse
operator|=
name|w
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|&&
name|lastUnderMouse
operator|&&
name|lastUnderMouse
operator|->
name|effectiveWinId
argument_list|()
operator|==
name|w
operator|->
name|effectiveWinId
argument_list|()
condition|)
block|{
name|w
operator|=
name|lastUnderMouse
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|S60
operator|->
name|curWin
operator|&&
name|w
operator|&&
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
return|return;
name|QWidget
modifier|*
name|cW
init|=
name|w
operator|&&
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
condition|?
name|w
else|:
name|QWidget
operator|::
name|find
argument_list|(
name|S60
operator|->
name|curWin
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cW
operator|||
name|cW
operator|->
name|window
argument_list|()
operator|!=
name|w
operator|->
name|window
argument_list|()
operator|||
operator|!
name|cW
operator|->
name|isVisible
argument_list|()
operator|||
operator|!
name|cW
operator|->
name|underMouse
argument_list|()
operator|||
name|QApplication
operator|::
name|overrideCursor
argument_list|()
condition|)
return|return;
ifndef|#
directive|ifndef
name|Q_SYMBIAN_FIXED_POINTER_CURSORS
if|if
condition|(
name|S60
operator|->
name|brokenPointerCursors
condition|)
name|qt_symbian_set_pointer_sprite
argument_list|(
name|cW
operator|->
name|cursor
argument_list|()
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|qt_symbian_setWindowCursor
argument_list|(
name|cW
operator|->
name|cursor
argument_list|()
argument_list|,
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * Makes the specified cursor appear above a specific native window group  * Called from QSymbianControl and QApplication::restoreOverrideCursor  *  * Window server is needed for this, so there is no equivalent when using  * the sprite workaround.  */
end_comment
begin_function
DECL|function|qt_symbian_setWindowGroupCursor
name|void
name|qt_symbian_setWindowGroupCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|,
name|RWindowTreeNode
modifier|&
name|node
parameter_list|)
block|{
name|Qt
operator|::
name|HANDLE
name|handle
init|=
name|cursor
operator|.
name|handle
argument_list|()
decl_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
name|RWsPointerCursor
modifier|*
name|pcurs
init|=
cast|reinterpret_cast
argument_list|<
name|RWsPointerCursor
operator|*
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|node
operator|.
name|SetCustomPointerCursor
argument_list|(
operator|*
name|pcurs
argument_list|)
expr_stmt|;
block|}
else|else
ifdef|#
directive|ifdef
name|Q_SYMBIAN_HAS_SYSTEM_CURSORS
block|{
name|TInt
name|shape
init|=
name|qt_symbian_translate_cursor_shape
argument_list|(
name|cursor
operator|.
name|shape
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|.
name|SetPointerCursor
argument_list|(
name|shape
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|qWarning
argument_list|(
literal|"qt_s60_setWindowGroupCursor - null handle"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*  * Makes the specified cursor appear above a specific native window  * Called from QSymbianControl and QApplication::restoreOverrideCursor  *  * Window server is needed for this, so there is no equivalent when using  * the sprite workaround.  */
end_comment
begin_function
DECL|function|qt_symbian_setWindowCursor
name|void
name|qt_symbian_setWindowCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|,
specifier|const
name|CCoeControl
modifier|*
name|wid
parameter_list|)
block|{
comment|//find the window for this control
while|while
condition|(
operator|!
name|wid
operator|->
name|OwnsWindow
argument_list|()
condition|)
block|{
name|wid
operator|=
name|wid
operator|->
name|Parent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|wid
condition|)
return|return;
block|}
name|RWindowTreeNode
modifier|*
name|node
init|=
name|wid
operator|->
name|DrawableWindow
argument_list|()
decl_stmt|;
name|qt_symbian_setWindowGroupCursor
argument_list|(
name|cursor
argument_list|,
operator|*
name|node
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * Makes the specified cursor appear everywhere.  * Called from QApplication::setOverrideCursor  */
end_comment
begin_function
DECL|function|qt_symbian_setGlobalCursor
name|void
name|qt_symbian_setGlobalCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_SYMBIAN_FIXED_POINTER_CURSORS
if|if
condition|(
name|S60
operator|->
name|brokenPointerCursors
condition|)
block|{
name|qt_symbian_set_pointer_sprite
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
comment|//because of the internals of window server, we need to force the cursor
comment|//to be set in all child windows too, otherwise when the cursor is over
comment|//the child window it may show a widget cursor or arrow cursor instead,
comment|//depending on construction order.
name|QListIterator
argument_list|<
name|WId
argument_list|>
name|iter
argument_list|(
name|QWidgetPrivate
operator|::
name|mapper
operator|->
name|uniqueKeys
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CCoeControl
modifier|*
name|ctrl
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctrl
operator|->
name|OwnsWindow
argument_list|()
condition|)
block|{
name|RWindowTreeNode
modifier|*
name|node
init|=
name|ctrl
operator|->
name|DrawableWindow
argument_list|()
decl_stmt|;
name|qt_symbian_setWindowGroupCursor
argument_list|(
name|cursor
argument_list|,
operator|*
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CURSOR
end_comment
end_unit
