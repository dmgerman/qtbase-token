begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qclipboard.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"private/qcore_symbian_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|SYMBIAN_ENABLE_SPLIT_HEADERS
end_ifdef
begin_include
include|#
directive|include
file|"txtclipboard.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"txtetext.h"
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_comment
comment|// Symbian's clipboard
end_comment
begin_include
include|#
directive|include
file|<baclipb.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|KQtCbDataStream
specifier|const
name|TUid
name|KQtCbDataStream
init|=
block|{
literal|0x2001B2DD
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|KPlainTextBegin
specifier|const
name|TInt
name|KPlainTextBegin
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QClipboardData
class|class
name|QClipboardData
block|{
public|public:
name|QClipboardData
parameter_list|()
constructor_decl|;
name|~
name|QClipboardData
parameter_list|()
destructor_decl|;
DECL|function|setSource
name|void
name|setSource
parameter_list|(
name|QMimeData
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
name|src
condition|)
return|return;
operator|delete
name|src
expr_stmt|;
name|src
operator|=
name|s
expr_stmt|;
block|}
DECL|function|source
name|QMimeData
modifier|*
name|source
parameter_list|()
block|{
return|return
name|src
return|;
block|}
DECL|function|connected
name|bool
name|connected
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
name|void
name|clear
parameter_list|()
function_decl|;
private|private:
DECL|member|src
name|QMimeData
modifier|*
name|src
decl_stmt|;
DECL|member|connection
name|bool
name|connection
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QClipboardData
name|QClipboardData
operator|::
name|QClipboardData
parameter_list|()
member_init_list|:
name|src
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|connection
argument_list|(
literal|true
argument_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QClipboardData
name|QClipboardData
operator|::
name|~
name|QClipboardData
parameter_list|()
block|{
name|connection
operator|=
literal|false
expr_stmt|;
operator|delete
name|src
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|clear
name|void
name|QClipboardData
operator|::
name|clear
parameter_list|()
block|{
name|QMimeData
modifier|*
name|newSrc
init|=
operator|new
name|QMimeData
decl_stmt|;
operator|delete
name|src
expr_stmt|;
name|src
operator|=
name|newSrc
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|internalCbData
specifier|static
name|QClipboardData
modifier|*
name|internalCbData
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|cleanupClipboardData
specifier|static
name|void
name|cleanupClipboardData
parameter_list|()
block|{
operator|delete
name|internalCbData
expr_stmt|;
name|internalCbData
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clipboardData
specifier|static
name|QClipboardData
modifier|*
name|clipboardData
parameter_list|()
block|{
if|if
condition|(
name|internalCbData
operator|==
literal|0
condition|)
block|{
name|internalCbData
operator|=
operator|new
name|QClipboardData
expr_stmt|;
if|if
condition|(
name|internalCbData
condition|)
block|{
if|if
condition|(
operator|!
name|internalCbData
operator|->
name|connected
argument_list|()
condition|)
block|{
operator|delete
name|internalCbData
expr_stmt|;
name|internalCbData
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|qAddPostRoutine
argument_list|(
name|cleanupClipboardData
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|internalCbData
return|;
block|}
end_function
begin_function
DECL|function|writeToStreamLX
name|void
name|writeToStreamLX
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|aData
parameter_list|,
name|RWriteStream
modifier|&
name|aStream
parameter_list|)
block|{
comment|// This function both leaves and throws exceptions. There must be no destructor
comment|// dependencies between cleanup styles, and no cleanup stack dependencies on stacked objects.
name|QStringList
name|headers
init|=
name|aData
operator|->
name|formats
argument_list|()
decl_stmt|;
name|aStream
operator|<<
name|TCardinality
argument_list|(
name|headers
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|const_iterator
name|iter
init|=
name|headers
operator|.
name|constBegin
argument_list|()
init|;
name|iter
operator|!=
name|headers
operator|.
name|constEnd
argument_list|()
condition|;
name|iter
operator|++
control|)
block|{
name|HBufC
modifier|*
name|stringData
init|=
name|TPtrC
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|TUint16
operator|*
argument_list|>
argument_list|(
operator|(
operator|*
name|iter
operator|)
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
operator|.
name|AllocLC
argument_list|()
decl_stmt|;
name|QByteArray
name|ba
init|=
name|aData
operator|->
name|data
argument_list|(
operator|(
operator|*
name|iter
operator|)
argument_list|)
decl_stmt|;
comment|// mime type
name|aStream
operator|<<
name|TCardinality
argument_list|(
name|stringData
operator|->
name|Size
argument_list|()
argument_list|)
expr_stmt|;
name|aStream
operator|<<
operator|*
operator|(
name|stringData
operator|)
expr_stmt|;
comment|// mime data
name|aStream
operator|<<
name|TCardinality
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|aStream
operator|.
name|WriteL
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|ba
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|stringData
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeToSymbianStoreLX
name|void
name|writeToSymbianStoreLX
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|aData
parameter_list|,
name|CClipboard
modifier|*
name|clipboard
parameter_list|)
block|{
comment|// This function both leaves and throws exceptions. There must be no destructor
comment|// dependencies between cleanup styles, and no cleanup stack dependencies on stacked objects.
if|if
condition|(
name|aData
operator|->
name|hasText
argument_list|()
condition|)
block|{
name|CPlainText
modifier|*
name|text
init|=
name|CPlainText
operator|::
name|NewL
argument_list|()
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|TPtrC
name|textPtr
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|aData
operator|->
name|text
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|text
operator|->
name|InsertL
argument_list|(
name|KPlainTextBegin
argument_list|,
name|textPtr
argument_list|)
expr_stmt|;
name|text
operator|->
name|CopyToStoreL
argument_list|(
name|clipboard
operator|->
name|Store
argument_list|()
argument_list|,
name|clipboard
operator|->
name|StreamDictionary
argument_list|()
argument_list|,
name|KPlainTextBegin
argument_list|,
name|textPtr
operator|.
name|Length
argument_list|()
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readSymbianStoreLX
name|void
name|readSymbianStoreLX
parameter_list|(
name|QMimeData
modifier|*
name|aData
parameter_list|,
name|CClipboard
modifier|*
name|clipboard
parameter_list|)
block|{
comment|// This function both leaves and throws exceptions. There must be no destructor
comment|// dependencies between cleanup styles, and no cleanup stack dependencies on stacked objects.
name|CPlainText
modifier|*
name|text
init|=
name|CPlainText
operator|::
name|NewL
argument_list|()
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|TInt
name|dataLength
init|=
name|text
operator|->
name|PasteFromStoreL
argument_list|(
name|clipboard
operator|->
name|Store
argument_list|()
argument_list|,
name|clipboard
operator|->
name|StreamDictionary
argument_list|()
argument_list|,
name|KPlainTextBegin
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataLength
operator|==
literal|0
condition|)
block|{
name|User
operator|::
name|Leave
argument_list|(
name|KErrNotFound
argument_list|)
expr_stmt|;
block|}
name|HBufC
modifier|*
name|hBuf
init|=
name|HBufC
operator|::
name|NewL
argument_list|(
name|dataLength
argument_list|)
decl_stmt|;
name|TPtr
name|buf
init|=
name|hBuf
operator|->
name|Des
argument_list|()
decl_stmt|;
name|text
operator|->
name|Extract
argument_list|(
name|buf
argument_list|,
name|KPlainTextBegin
argument_list|,
name|dataLength
argument_list|)
expr_stmt|;
name|QString
name|string
init|=
name|qt_TDesC2QString
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|aData
operator|->
name|setText
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readFromStreamLX
name|void
name|readFromStreamLX
parameter_list|(
name|QMimeData
modifier|*
name|aData
parameter_list|,
name|RReadStream
modifier|&
name|aStream
parameter_list|)
block|{
comment|// This function both leaves and throws exceptions. There must be no destructor
comment|// dependencies between cleanup styles, and no cleanup stack dependencies on stacked objects.
name|TCardinality
name|mimeTypeCount
decl_stmt|;
name|aStream
operator|>>
name|mimeTypeCount
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mimeTypeCount
condition|;
name|i
operator|++
control|)
block|{
comment|// mime type
name|TCardinality
name|mimeTypeSize
decl_stmt|;
name|aStream
operator|>>
name|mimeTypeSize
expr_stmt|;
name|HBufC
modifier|*
name|mimeTypeBuf
init|=
name|HBufC
operator|::
name|NewLC
argument_list|(
name|aStream
argument_list|,
name|mimeTypeSize
argument_list|)
decl_stmt|;
name|QString
name|mimeType
init|=
name|QString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|mimeTypeBuf
operator|->
name|Des
argument_list|()
operator|.
name|Ptr
argument_list|()
argument_list|)
argument_list|,
name|mimeTypeBuf
operator|->
name|Length
argument_list|()
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|mimeTypeBuf
argument_list|)
expr_stmt|;
comment|// mime data
name|TCardinality
name|dataSize
decl_stmt|;
name|aStream
operator|>>
name|dataSize
expr_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|.
name|reserve
argument_list|(
name|dataSize
argument_list|)
expr_stmt|;
name|aStream
operator|.
name|ReadL
argument_list|(
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|ba
operator|.
name|data_ptr
argument_list|()
operator|->
name|data
argument_list|)
argument_list|,
name|dataSize
argument_list|)
expr_stmt|;
name|ba
operator|.
name|data_ptr
argument_list|()
operator|->
name|size
operator|=
name|dataSize
expr_stmt|;
name|aData
operator|->
name|setData
argument_list|(
name|mimeType
argument_list|,
name|ba
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*****************************************************************************   QClipboard member functions  *****************************************************************************/
end_comment
begin_function
DECL|function|clear
name|void
name|QClipboard
operator|::
name|clear
parameter_list|(
name|Mode
name|mode
parameter_list|)
block|{
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mimeData
specifier|const
name|QMimeData
modifier|*
name|QClipboard
operator|::
name|mimeData
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|mode
operator|!=
name|Clipboard
condition|)
return|return
literal|0
return|;
name|QClipboardData
modifier|*
name|d
init|=
name|clipboardData
argument_list|()
decl_stmt|;
name|bool
name|dataExists
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
condition|)
block|{
name|TRAPD
argument_list|(
argument|err
argument_list|,
argument|{             RFs fs = qt_s60GetRFs();             CClipboard* cb = CClipboard::NewForReadingLC(fs);             Q_ASSERT(cb);
comment|//stream for qt
argument|RStoreReadStream stream;             TStreamId stid = (cb->StreamDictionary()).At(KQtCbDataStream);             if (stid !=
literal|0
argument|) {                 stream.OpenLC(cb->Store(),stid);                 QT_TRYCATCH_LEAVING(readFromStreamLX(d->source(),stream));                 CleanupStack::PopAndDestroy(&stream);                 dataExists =
literal|true
argument|;             }             else {
comment|//symbian clipboard
argument|RStoreReadStream symbianStream;                 TStreamId symbianStId = (cb->StreamDictionary()).At(KClipboardUidTypePlainText);                 if (symbianStId !=
literal|0
argument|) {                     symbianStream.OpenLC(cb->Store(), symbianStId);                     QT_TRYCATCH_LEAVING(readSymbianStoreLX(d->source(), cb));                     CleanupStack::PopAndDestroy(&symbianStream);                     dataExists =
literal|true
argument|;                 }             }             CleanupStack::PopAndDestroy(cb);         }
argument_list|)
empty_stmt|;
if|if
condition|(
name|err
operator|!=
name|KErrNone
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"clipboard is empty/err: "
operator|<<
name|err
expr_stmt|;
block|}
if|if
condition|(
name|dataExists
condition|)
block|{
return|return
name|d
operator|->
name|source
argument_list|()
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setMimeData
name|void
name|QClipboard
operator|::
name|setMimeData
parameter_list|(
name|QMimeData
modifier|*
name|src
parameter_list|,
name|Mode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|!=
name|Clipboard
condition|)
return|return;
name|QClipboardData
modifier|*
name|d
init|=
name|clipboardData
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
block|{
name|TRAPD
argument_list|(
argument|err
argument_list|,
argument|{             RFs fs = qt_s60GetRFs();             CClipboard* cb = CClipboard::NewForWritingLC(fs);
comment|//stream for qt
argument|RStoreWriteStream  stream;             TStreamId stid = stream.CreateLC(cb->Store());             QT_TRYCATCH_LEAVING(writeToStreamLX(src,stream));             d->setSource(src);             stream.CommitL();             (cb->StreamDictionary()).AssignL(KQtCbDataStream,stid);             cb->CommitL();
comment|//stream for symbian
argument|RStoreWriteStream symbianStream;             TStreamId symbianStId = symbianStream.CreateLC(cb->Store());             QT_TRYCATCH_LEAVING(writeToSymbianStoreLX(src, cb));             (cb->StreamDictionary()).AssignL(KClipboardUidTypePlainText, symbianStId);             cb->CommitL();             CleanupStack::PopAndDestroy(
literal|3
argument|,cb);         }
argument_list|)
empty_stmt|;
if|if
condition|(
name|err
operator|!=
name|KErrNone
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"clipboard write err :"
operator|<<
name|err
expr_stmt|;
block|}
block|}
name|emitChanged
argument_list|(
name|QClipboard
operator|::
name|Clipboard
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsMode
name|bool
name|QClipboard
operator|::
name|supportsMode
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|mode
operator|==
name|Clipboard
operator|)
return|;
block|}
end_function
begin_function
DECL|function|ownsMode
name|bool
name|QClipboard
operator|::
name|ownsMode
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|mode
operator|==
name|Clipboard
condition|)
name|qWarning
argument_list|(
literal|"QClipboard::ownsClipboard: UNIMPLEMENTED!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|event
name|bool
name|QClipboard
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
comment|/* e */
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|connectNotify
name|void
name|QClipboard
operator|::
name|connectNotify
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|ownerDestroyed
name|void
name|QClipboard
operator|::
name|ownerDestroyed
parameter_list|()
block|{ }
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CLIPBOARD
end_comment
end_unit
