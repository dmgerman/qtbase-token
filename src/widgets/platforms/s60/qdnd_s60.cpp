begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qdnd_p.h"
end_include
begin_include
include|#
directive|include
file|"qt_s60_p.h"
end_include
begin_include
include|#
directive|include
file|<coecntrl.h>
end_include
begin_comment
comment|// pointer cursor
end_comment
begin_include
include|#
directive|include
file|<w32std.h>
end_include
begin_include
include|#
directive|include
file|<gdi.h>
end_include
begin_include
include|#
directive|include
file|<QCursor>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|//### artistic impression of Symbians default DnD cursor ?
DECL|variable|defaultPm
specifier|static
name|QPixmap
modifier|*
name|defaultPm
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_pm_hotx
specifier|static
specifier|const
name|int
name|default_pm_hotx
init|=
operator|-
literal|50
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_pm_hoty
specifier|static
specifier|const
name|int
name|default_pm_hoty
init|=
operator|-
literal|50
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_pm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|default_pm
index|[]
init|=
block|{
literal|"13 9 3 1"
block|,
literal|".      c None"
block|,
literal|"       c #000000"
block|,
literal|"X      c #FFFFFF"
block|,
literal|"X X X X X X X"
block|,
literal|" X X X X X X "
block|,
literal|"X ......... X"
block|,
literal|" X.........X "
block|,
literal|"X ......... X"
block|,
literal|" X.........X "
block|,
literal|"X ......... X"
block|,
literal|" X X X X X X "
block|,
literal|"X X X X X X X"
block|, }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//### actions need to be redefined for S60
end_comment
begin_comment
comment|// Shift/Ctrl handling, and final drop status
end_comment
begin_decl_stmt
DECL|variable|global_accepted_action
specifier|static
name|Qt
operator|::
name|DropAction
name|global_accepted_action
init|=
name|Qt
operator|::
name|MoveAction
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|possible_actions
specifier|static
name|Qt
operator|::
name|DropActions
name|possible_actions
init|=
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
end_decl_stmt
begin_comment
comment|// static variables in place of a proper cross-process solution
end_comment
begin_decl_stmt
DECL|variable|drag_object
specifier|static
name|QDrag
modifier|*
name|drag_object
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_symbian_dnd_dragging
specifier|static
name|bool
name|qt_symbian_dnd_dragging
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|oldstate
specifier|static
name|Qt
operator|::
name|KeyboardModifiers
name|oldstate
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|updatePixmap
name|void
name|QDragManager
operator|::
name|updatePixmap
parameter_list|()
block|{
name|QPixmap
name|pm
decl_stmt|;
name|QPoint
name|pm_hot
argument_list|(
name|default_pm_hotx
argument_list|,
name|default_pm_hoty
argument_list|)
decl_stmt|;
if|if
condition|(
name|drag_object
condition|)
block|{
name|pm
operator|=
name|drag_object
operator|->
name|pixmap
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|)
name|pm_hot
operator|=
name|drag_object
operator|->
name|hotSpot
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|defaultPm
condition|)
name|defaultPm
operator|=
operator|new
name|QPixmap
argument_list|(
name|default_pm
argument_list|)
expr_stmt|;
name|pm
operator|=
operator|*
name|defaultPm
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursor
name|cursor
argument_list|(
name|pm
argument_list|,
name|pm_hot
operator|.
name|x
argument_list|()
argument_list|,
name|pm_hot
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|overrideCursor
operator|=
name|cursor
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QDragManager
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|move
name|void
name|QDragManager
operator|::
name|move
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|updateCursor
name|void
name|QDragManager
operator|::
name|updateCursor
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursor
name|cursor
init|=
name|willDrop
condition|?
name|overrideCursor
else|:
name|Qt
operator|::
name|ForbiddenCursor
decl_stmt|;
if|if
condition|(
operator|!
name|restoreCursor
condition|)
block|{
name|QApplication
operator|::
name|setOverrideCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|restoreCursor
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|QApplication
operator|::
name|changeOverrideCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|eventFilter
name|bool
name|QDragManager
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|beingCancelled
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|o
operator|->
name|isWidgetType
argument_list|()
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
block|{         }
case|case
name|QEvent
operator|::
name|MouseMove
case|:
block|{
if|if
condition|(
operator|!
name|object
condition|)
block|{
comment|//#### this should not happen
name|qWarning
argument_list|(
literal|"QDragManager::eventFilter: No object"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QMimeData
modifier|*
name|dropData
init|=
name|manager
operator|->
name|object
condition|?
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|data
else|:
name|manager
operator|->
name|dropData
decl_stmt|;
if|if
condition|(
name|manager
operator|->
name|object
condition|)
name|possible_actions
operator|=
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|possible_actions
expr_stmt|;
else|else
name|possible_actions
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|QMouseEvent
modifier|*
name|me
init|=
operator|(
name|QMouseEvent
operator|*
operator|)
name|e
decl_stmt|;
if|if
condition|(
name|me
operator|->
name|buttons
argument_list|()
condition|)
block|{
name|Qt
operator|::
name|DropAction
name|prevAction
init|=
name|global_accepted_action
decl_stmt|;
name|QWidget
modifier|*
name|cw
init|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|me
operator|->
name|globalPos
argument_list|()
argument_list|)
decl_stmt|;
comment|// map the Coords relative to the window.
if|if
condition|(
operator|!
name|cw
condition|)
return|return
literal|true
return|;
while|while
condition|(
name|cw
operator|&&
operator|!
name|cw
operator|->
name|acceptDrops
argument_list|()
operator|&&
operator|!
name|cw
operator|->
name|isWindow
argument_list|()
condition|)
name|cw
operator|=
name|cw
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
name|bool
name|oldWillDrop
init|=
name|willDrop
decl_stmt|;
if|if
condition|(
name|object
operator|->
name|target
argument_list|()
operator|!=
name|cw
condition|)
block|{
if|if
condition|(
name|object
operator|->
name|target
argument_list|()
condition|)
block|{
name|QDragLeaveEvent
name|dle
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|object
operator|->
name|target
argument_list|()
argument_list|,
operator|&
name|dle
argument_list|)
expr_stmt|;
name|willDrop
operator|=
literal|false
expr_stmt|;
name|global_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
if|if
condition|(
name|oldWillDrop
operator|!=
name|willDrop
condition|)
name|updateCursor
argument_list|()
expr_stmt|;
name|object
operator|->
name|d_func
argument_list|()
operator|->
name|target
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|cw
operator|&&
name|cw
operator|->
name|acceptDrops
argument_list|()
condition|)
block|{
name|object
operator|->
name|d_func
argument_list|()
operator|->
name|target
operator|=
name|cw
expr_stmt|;
name|QDragEnterEvent
name|dee
argument_list|(
name|cw
operator|->
name|mapFromGlobal
argument_list|(
name|me
operator|->
name|globalPos
argument_list|()
argument_list|)
argument_list|,
name|possible_actions
argument_list|,
name|dropData
argument_list|,
name|me
operator|->
name|buttons
argument_list|()
argument_list|,
name|me
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|object
operator|->
name|target
argument_list|()
argument_list|,
operator|&
name|dee
argument_list|)
expr_stmt|;
name|willDrop
operator|=
name|dee
operator|.
name|isAccepted
argument_list|()
operator|&&
name|dee
operator|.
name|dropAction
argument_list|()
operator|!=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|global_accepted_action
operator|=
name|willDrop
condition|?
name|dee
operator|.
name|dropAction
argument_list|()
else|:
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
if|if
condition|(
name|oldWillDrop
operator|!=
name|willDrop
condition|)
name|updateCursor
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|cw
condition|)
block|{
name|QDragMoveEvent
name|dme
argument_list|(
name|cw
operator|->
name|mapFromGlobal
argument_list|(
name|me
operator|->
name|globalPos
argument_list|()
argument_list|)
argument_list|,
name|possible_actions
argument_list|,
name|dropData
argument_list|,
name|me
operator|->
name|buttons
argument_list|()
argument_list|,
name|me
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|global_accepted_action
operator|!=
name|Qt
operator|::
name|IgnoreAction
condition|)
block|{
name|dme
operator|.
name|setDropAction
argument_list|(
name|global_accepted_action
argument_list|)
expr_stmt|;
name|dme
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|cw
argument_list|,
operator|&
name|dme
argument_list|)
expr_stmt|;
name|willDrop
operator|=
name|dme
operator|.
name|isAccepted
argument_list|()
expr_stmt|;
name|global_accepted_action
operator|=
name|willDrop
condition|?
name|dme
operator|.
name|dropAction
argument_list|()
else|:
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
if|if
condition|(
name|oldWillDrop
operator|!=
name|willDrop
condition|)
block|{
name|updatePixmap
argument_list|()
expr_stmt|;
name|updateCursor
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|global_accepted_action
operator|!=
name|prevAction
condition|)
name|emitActionChanged
argument_list|(
name|global_accepted_action
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
comment|// Eat all mouse events
block|}
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
block|{
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|restoreCursor
condition|)
block|{
name|QApplication
operator|::
name|restoreOverrideCursor
argument_list|()
expr_stmt|;
name|willDrop
operator|=
literal|false
expr_stmt|;
name|restoreCursor
operator|=
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|object
operator|&&
name|object
operator|->
name|target
argument_list|()
condition|)
block|{
name|QMouseEvent
modifier|*
name|me
init|=
operator|(
name|QMouseEvent
operator|*
operator|)
name|e
decl_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QMimeData
modifier|*
name|dropData
init|=
name|manager
operator|->
name|object
condition|?
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|data
else|:
name|manager
operator|->
name|dropData
decl_stmt|;
name|QDropEvent
name|de
argument_list|(
name|object
operator|->
name|target
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|me
operator|->
name|globalPos
argument_list|()
argument_list|)
argument_list|,
name|possible_actions
argument_list|,
name|dropData
argument_list|,
name|me
operator|->
name|buttons
argument_list|()
argument_list|,
name|me
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|object
operator|->
name|target
argument_list|()
argument_list|,
operator|&
name|de
argument_list|)
expr_stmt|;
if|if
condition|(
name|de
operator|.
name|isAccepted
argument_list|()
condition|)
name|global_accepted_action
operator|=
name|de
operator|.
name|dropAction
argument_list|()
expr_stmt|;
else|else
name|global_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
if|if
condition|(
name|object
condition|)
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|drag_object
operator|=
name|object
operator|=
literal|0
expr_stmt|;
block|}
name|eventLoop
operator|->
name|exit
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
comment|// Eat all mouse events
block|}
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|drag
name|Qt
operator|::
name|DropAction
name|QDragManager
operator|::
name|drag
parameter_list|(
name|QDrag
modifier|*
name|o
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|qt_symbian_dnd_dragging
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|==
name|o
operator|||
operator|!
name|o
operator|||
operator|!
name|o
operator|->
name|source
argument_list|()
condition|)
return|return
name|Qt
operator|::
name|IgnoreAction
return|;
if|if
condition|(
name|object
condition|)
block|{
name|cancel
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|beingCancelled
operator|=
literal|false
expr_stmt|;
block|}
name|object
operator|=
name|drag_object
operator|=
name|o
expr_stmt|;
name|oldstate
operator|=
name|Qt
operator|::
name|NoModifier
expr_stmt|;
comment|// #### Should use state that caused the drag
name|willDrop
operator|=
literal|false
expr_stmt|;
name|updatePixmap
argument_list|()
expr_stmt|;
name|updateCursor
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|qt_symbian_set_cursor_visible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//force cursor on even for touch phone
endif|#
directive|endif
name|object
operator|->
name|d_func
argument_list|()
operator|->
name|target
operator|=
literal|0
expr_stmt|;
name|qApp
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|global_accepted_action
operator|=
name|defaultAction
argument_list|(
name|dragPrivate
argument_list|()
operator|->
name|possible_actions
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|qt_symbian_dnd_dragging
operator|=
literal|true
expr_stmt|;
name|eventLoop
operator|=
operator|new
name|QEventLoop
expr_stmt|;
comment|// block
operator|(
name|void
operator|)
name|eventLoop
operator|->
name|exec
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
argument_list|)
expr_stmt|;
operator|delete
name|eventLoop
expr_stmt|;
name|eventLoop
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|qt_symbian_set_cursor_visible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|overrideCursor
operator|=
name|QCursor
argument_list|()
expr_stmt|;
comment|//deref the cursor data
name|qt_symbian_dnd_dragging
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
return|return
name|global_accepted_action
return|;
block|}
end_function
begin_function
DECL|function|cancel
name|void
name|QDragManager
operator|::
name|cancel
parameter_list|(
name|bool
name|deleteSource
parameter_list|)
block|{
name|beingCancelled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|object
operator|->
name|target
argument_list|()
condition|)
block|{
name|QDragLeaveEvent
name|dle
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|object
operator|->
name|target
argument_list|()
argument_list|,
operator|&
name|dle
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|drag_object
condition|)
block|{
if|if
condition|(
name|deleteSource
condition|)
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|drag_object
operator|=
name|object
operator|=
literal|0
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|restoreCursor
condition|)
block|{
name|QApplication
operator|::
name|restoreOverrideCursor
argument_list|()
expr_stmt|;
name|restoreCursor
operator|=
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
name|global_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drop
name|void
name|QDragManager
operator|::
name|drop
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|restoreCursor
condition|)
block|{
name|QApplication
operator|::
name|restoreOverrideCursor
argument_list|()
expr_stmt|;
name|restoreCursor
operator|=
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|retrieveData_sys
name|QVariant
name|QDropData
operator|::
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimetype
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|drag_object
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|QByteArray
name|data
init|=
name|drag_object
operator|->
name|mimeData
argument_list|()
operator|->
name|data
argument_list|(
name|mimetype
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|QVariant
operator|::
name|String
condition|)
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
name|data
argument_list|)
return|;
return|return
name|data
return|;
block|}
end_function
begin_function
DECL|function|hasFormat_sys
name|bool
name|QDropData
operator|::
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
return|return
name|formats
argument_list|()
operator|.
name|contains
argument_list|(
name|format
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|formats_sys
name|QStringList
name|QDropData
operator|::
name|formats_sys
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|drag_object
condition|)
return|return
name|drag_object
operator|->
name|mimeData
argument_list|()
operator|->
name|formats
argument_list|()
return|;
return|return
name|QStringList
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
end_unit
