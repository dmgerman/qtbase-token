begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfontengine_s60_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qendian.h"
end_include
begin_include
include|#
directive|include
file|"qglobal.h"
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|"qimage.h"
end_include
begin_include
include|#
directive|include
file|<private/qt_s60_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_s60_p.h>
end_include
begin_include
include|#
directive|include
file|<e32base.h>
end_include
begin_include
include|#
directive|include
file|<e32std.h>
end_include
begin_include
include|#
directive|include
file|<eikenv.h>
end_include
begin_include
include|#
directive|include
file|<gdi.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_SYMBIAN_HAS_GLYPHOUTLINE_API
argument_list|)
end_if
begin_include
include|#
directive|include
file|<graphics/gdi/gdiplatapi.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_SYMBIAN_HAS_GLYPHOUTLINE_API
end_comment
begin_comment
comment|// Replication of TGetFontTableParam& friends.
end_comment
begin_comment
comment|// There is unfortunately no compile time flag like SYMBIAN_FONT_TABLE_API
end_comment
begin_comment
comment|// that would help us to only replicate these things for Symbian versions
end_comment
begin_comment
comment|// that do not yet have the font table Api. Symbian's public SDK does
end_comment
begin_comment
comment|// generally not define any usable macros.
end_comment
begin_class
DECL|class|QSymbianTGetFontTableParam
class|class
name|QSymbianTGetFontTableParam
block|{
public|public:
DECL|member|iTag
name|TUint32
name|iTag
decl_stmt|;
DECL|member|iContent
name|TAny
modifier|*
name|iContent
decl_stmt|;
DECL|member|iLength
name|TInt
name|iLength
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|QSymbianKFontGetFontTable
specifier|const
name|TUid
name|QSymbianKFontGetFontTable
init|=
block|{
literal|0x102872C1
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QSymbianKFontReleaseFontTable
specifier|const
name|TUid
name|QSymbianKFontReleaseFontTable
init|=
block|{
literal|0x2002AC24
block|}
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QSymbianTypeFaceExtras
name|QSymbianTypeFaceExtras
operator|::
name|QSymbianTypeFaceExtras
parameter_list|(
name|CFont
modifier|*
name|cFont
parameter_list|,
name|COpenFont
modifier|*
name|openFont
parameter_list|)
member_init_list|:
name|m_cFont
argument_list|(
name|cFont
argument_list|)
member_init_list|,
name|m_symbolCMap
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_openFont
argument_list|(
name|openFont
argument_list|)
block|{
if|if
condition|(
operator|!
name|symbianFontTableApiAvailable
argument_list|()
condition|)
block|{
name|TAny
modifier|*
name|trueTypeExtension
init|=
name|NULL
decl_stmt|;
name|m_openFont
operator|->
name|ExtendedInterface
argument_list|(
name|KUidOpenFontTrueTypeExtension
argument_list|,
name|trueTypeExtension
argument_list|)
expr_stmt|;
name|m_trueTypeExtension
operator|=
cast|static_cast
argument_list|<
name|MOpenFontTrueTypeExtension
operator|*
argument_list|>
argument_list|(
name|trueTypeExtension
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|m_trueTypeExtension
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QSymbianTypeFaceExtras
name|QSymbianTypeFaceExtras
operator|::
name|~
name|QSymbianTypeFaceExtras
parameter_list|()
block|{
if|if
condition|(
name|symbianFontTableApiAvailable
argument_list|()
condition|)
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|ReleaseFont
argument_list|(
name|m_cFont
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|getSfntTable
name|QByteArray
name|QSymbianTypeFaceExtras
operator|::
name|getSfntTable
parameter_list|(
name|uint
name|tag
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|symbianFontTableApiAvailable
argument_list|()
condition|)
block|{
name|QSymbianTGetFontTableParam
name|fontTableParams
init|=
block|{
name|tag
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
if|if
condition|(
name|m_cFont
operator|->
name|ExtendedFunction
argument_list|(
name|QSymbianKFontGetFontTable
argument_list|,
operator|&
name|fontTableParams
argument_list|)
operator|==
name|KErrNone
condition|)
block|{
specifier|const
name|char
modifier|*
specifier|const
name|fontTableContent
init|=
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|fontTableParams
operator|.
name|iContent
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|fontTable
argument_list|(
name|fontTableContent
argument_list|,
name|fontTableParams
operator|.
name|iLength
argument_list|)
decl_stmt|;
name|m_cFont
operator|->
name|ExtendedFunction
argument_list|(
name|QSymbianKFontReleaseFontTable
argument_list|,
operator|&
name|fontTableParams
argument_list|)
expr_stmt|;
return|return
name|fontTable
return|;
block|}
return|return
name|QByteArray
argument_list|()
return|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|m_trueTypeExtension
operator|->
name|HasTrueTypeTable
argument_list|(
name|tag
argument_list|)
argument_list|)
expr_stmt|;
name|TInt
name|error
init|=
name|KErrNone
decl_stmt|;
name|TInt
name|tableByteLength
init|=
literal|0
decl_stmt|;
name|TAny
modifier|*
name|table
init|=
name|m_trueTypeExtension
operator|->
name|GetTrueTypeTable
argument_list|(
name|error
argument_list|,
name|tag
argument_list|,
operator|&
name|tableByteLength
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|table
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
name|result
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|table
argument_list|)
argument_list|,
name|tableByteLength
argument_list|)
decl_stmt|;
name|m_trueTypeExtension
operator|->
name|ReleaseTrueTypeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_function
begin_function
DECL|function|getSfntTableData
name|bool
name|QSymbianTypeFaceExtras
operator|::
name|getSfntTableData
parameter_list|(
name|uint
name|tag
parameter_list|,
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
modifier|*
name|length
parameter_list|)
specifier|const
block|{
name|bool
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|symbianFontTableApiAvailable
argument_list|()
condition|)
block|{
name|QSymbianTGetFontTableParam
name|fontTableParams
init|=
block|{
name|tag
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
if|if
condition|(
name|m_cFont
operator|->
name|ExtendedFunction
argument_list|(
name|QSymbianKFontGetFontTable
argument_list|,
operator|&
name|fontTableParams
argument_list|)
operator|==
name|KErrNone
condition|)
block|{
if|if
condition|(
operator|*
name|length
operator|>
literal|0
operator|&&
operator|*
name|length
operator|<
name|fontTableParams
operator|.
name|iLength
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
comment|// Caller did not allocate enough memory
block|}
else|else
block|{
operator|*
name|length
operator|=
name|fontTableParams
operator|.
name|iLength
expr_stmt|;
if|if
condition|(
name|buffer
condition|)
name|memcpy
argument_list|(
name|buffer
argument_list|,
name|fontTableParams
operator|.
name|iContent
argument_list|,
name|fontTableParams
operator|.
name|iLength
argument_list|)
expr_stmt|;
block|}
name|m_cFont
operator|->
name|ExtendedFunction
argument_list|(
name|QSymbianKFontReleaseFontTable
argument_list|,
operator|&
name|fontTableParams
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|m_trueTypeExtension
operator|->
name|HasTrueTypeTable
argument_list|(
name|tag
argument_list|)
condition|)
return|return
literal|false
return|;
name|TInt
name|error
init|=
name|KErrNone
decl_stmt|;
name|TInt
name|tableByteLength
decl_stmt|;
name|TAny
modifier|*
name|table
init|=
name|m_trueTypeExtension
operator|->
name|GetTrueTypeTable
argument_list|(
name|error
argument_list|,
name|tag
argument_list|,
operator|&
name|tableByteLength
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
name|KErrNone
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|*
name|length
operator|>
literal|0
operator|&&
operator|*
name|length
operator|<
name|tableByteLength
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
comment|// Caller did not allocate enough memory
block|}
else|else
block|{
operator|*
name|length
operator|=
name|tableByteLength
expr_stmt|;
if|if
condition|(
name|buffer
condition|)
name|memcpy
argument_list|(
name|buffer
argument_list|,
name|table
argument_list|,
name|tableByteLength
argument_list|)
expr_stmt|;
block|}
name|m_trueTypeExtension
operator|->
name|ReleaseTrueTypeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|cmap
specifier|const
name|uchar
modifier|*
name|QSymbianTypeFaceExtras
operator|::
name|cmap
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_cmapTable
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|QByteArray
name|cmapTable
init|=
name|getSfntTable
argument_list|(
name|MAKE_TAG
argument_list|(
literal|'c'
argument_list|,
literal|'m'
argument_list|,
literal|'a'
argument_list|,
literal|'p'
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|cmap
init|=
name|QFontEngine
operator|::
name|getCMap
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|cmapTable
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|cmapTable
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|m_symbolCMap
argument_list|,
operator|&
name|size
argument_list|)
decl_stmt|;
name|m_cmapTable
operator|=
name|QByteArray
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|cmap
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|m_cmapTable
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isSymbolCMap
name|bool
name|QSymbianTypeFaceExtras
operator|::
name|isSymbolCMap
parameter_list|()
specifier|const
block|{
return|return
name|m_symbolCMap
return|;
block|}
end_function
begin_function
DECL|function|fontOwner
name|CFont
modifier|*
name|QSymbianTypeFaceExtras
operator|::
name|fontOwner
parameter_list|()
specifier|const
block|{
return|return
name|m_cFont
return|;
block|}
end_function
begin_function
DECL|function|unitsPerEm
name|QFixed
name|QSymbianTypeFaceExtras
operator|::
name|unitsPerEm
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_unitsPerEm
operator|.
name|value
argument_list|()
operator|!=
literal|0
condition|)
return|return
name|m_unitsPerEm
return|;
specifier|const
name|QByteArray
name|head
init|=
name|getSfntTable
argument_list|(
name|MAKE_TAG
argument_list|(
literal|'h'
argument_list|,
literal|'e'
argument_list|,
literal|'a'
argument_list|,
literal|'d'
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|unitsPerEmOffset
init|=
literal|18
decl_stmt|;
if|if
condition|(
name|head
operator|.
name|size
argument_list|()
operator|>
name|unitsPerEmOffset
operator|+
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
condition|)
block|{
specifier|const
name|uchar
modifier|*
name|tableData
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|head
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|unitsPerEm
init|=
name|tableData
operator|+
name|unitsPerEmOffset
decl_stmt|;
name|m_unitsPerEm
operator|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|unitsPerEm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Bitmap font? Corrupt font?
comment|// We return -1 and let the QFontEngineS60 return the pixel size.
name|m_unitsPerEm
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|m_unitsPerEm
return|;
block|}
end_function
begin_function
DECL|function|symbianFontTableApiAvailable
name|bool
name|QSymbianTypeFaceExtras
operator|::
name|symbianFontTableApiAvailable
parameter_list|()
block|{
enum|enum
name|FontTableApiAvailability
block|{
name|Unknown
block|,
name|Available
block|,
name|Unavailable
block|}
enum|;
specifier|static
name|FontTableApiAvailability
name|availability
init|=
name|QSysInfo
operator|::
name|symbianVersion
argument_list|()
operator|<
name|QSysInfo
operator|::
name|SV_SF_3
condition|?
name|Unavailable
else|:
name|Unknown
decl_stmt|;
if|if
condition|(
name|availability
operator|==
name|Unknown
condition|)
block|{
comment|// Actually, we should ask CFeatureDiscovery::IsFeatureSupportedL()
comment|// with FfFontTable here. But since at the time of writing, the
comment|// FfFontTable flag check either gave false positives or false
comment|// negatives. Here comes an implicit check via CFont::ExtendedFunction.
name|QSymbianTGetFontTableParam
name|fontTableParams
init|=
block|{
name|MAKE_TAG
argument_list|(
literal|'O'
argument_list|,
literal|'S'
argument_list|,
literal|'/'
argument_list|,
literal|'2'
argument_list|)
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|QSymbianFbsHeapLock
name|lock
argument_list|(
name|QSymbianFbsHeapLock
operator|::
name|Unlock
argument_list|)
decl_stmt|;
name|CFont
modifier|*
name|font
decl_stmt|;
specifier|const
name|TInt
name|getFontErr
init|=
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|GetNearestFontInTwips
argument_list|(
name|font
argument_list|,
name|TFontSpec
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|getFontErr
operator|==
name|KErrNone
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|->
name|ExtendedFunction
argument_list|(
name|QSymbianKFontGetFontTable
argument_list|,
operator|&
name|fontTableParams
argument_list|)
operator|==
name|KErrNone
condition|)
block|{
name|font
operator|->
name|ExtendedFunction
argument_list|(
name|QSymbianKFontReleaseFontTable
argument_list|,
operator|&
name|fontTableParams
argument_list|)
expr_stmt|;
name|availability
operator|=
name|Available
expr_stmt|;
block|}
else|else
block|{
name|availability
operator|=
name|Unavailable
expr_stmt|;
block|}
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|ReleaseFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|lock
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
return|return
name|availability
operator|==
name|Available
return|;
block|}
end_function
begin_comment
comment|// duplicated from qfontengine_xyz.cpp
end_comment
begin_function
DECL|function|getChar
specifier|static
specifier|inline
name|unsigned
name|int
name|getChar
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
modifier|&
name|i
parameter_list|,
specifier|const
name|int
name|len
parameter_list|)
block|{
name|uint
name|ucs4
init|=
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
index|[
name|i
index|]
operator|.
name|isHighSurrogate
argument_list|()
operator|&&
name|i
operator|<
name|len
operator|-
literal|1
operator|&&
name|str
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|isLowSurrogate
argument_list|()
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|ucs4
operator|=
name|QChar
operator|::
name|surrogateToUcs4
argument_list|(
name|ucs4
argument_list|,
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ucs4
return|;
block|}
end_function
begin_function_decl
specifier|extern
name|QString
name|qt_symbian_fontNameWithAppFontMarker
parameter_list|(
specifier|const
name|QString
modifier|&
name|fontName
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// qfontdatabase_s60.cpp
end_comment
begin_function
DECL|function|fontWithSize
name|CFont
modifier|*
name|QFontEngineS60
operator|::
name|fontWithSize
parameter_list|(
name|qreal
name|size
parameter_list|)
specifier|const
block|{
name|CFont
modifier|*
name|result
init|=
literal|0
decl_stmt|;
specifier|const
name|QString
name|family
init|=
name|qt_symbian_fontNameWithAppFontMarker
argument_list|(
name|QFontEngine
operator|::
name|fontDef
operator|.
name|family
argument_list|)
decl_stmt|;
name|TFontSpec
name|fontSpec
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|family
argument_list|)
argument_list|,
name|TInt
argument_list|(
name|size
argument_list|)
argument_list|)
decl_stmt|;
name|fontSpec
operator|.
name|iFontStyle
operator|.
name|SetBitmapType
argument_list|(
name|EAntiAliasedGlyphBitmap
argument_list|)
expr_stmt|;
name|fontSpec
operator|.
name|iFontStyle
operator|.
name|SetPosture
argument_list|(
name|QFontEngine
operator|::
name|fontDef
operator|.
name|style
operator|==
name|QFont
operator|::
name|StyleNormal
condition|?
name|EPostureUpright
else|:
name|EPostureItalic
argument_list|)
expr_stmt|;
name|fontSpec
operator|.
name|iFontStyle
operator|.
name|SetStrokeWeight
argument_list|(
name|QFontEngine
operator|::
name|fontDef
operator|.
name|weight
operator|>
name|QFont
operator|::
name|Normal
condition|?
name|EStrokeWeightBold
else|:
name|EStrokeWeightNormal
argument_list|)
expr_stmt|;
specifier|const
name|TInt
name|errorCode
init|=
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|GetNearestFontToDesignHeightInPixels
argument_list|(
name|result
argument_list|,
name|fontSpec
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|result
operator|&&
operator|(
name|errorCode
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|setFontScale
name|void
name|QFontEngineS60
operator|::
name|setFontScale
parameter_list|(
name|qreal
name|scale
parameter_list|)
block|{
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|scale
argument_list|,
name|qreal
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|m_originalFont
condition|)
name|m_originalFont
operator|=
name|fontWithSize
argument_list|(
name|m_originalFontSizeInPixels
argument_list|)
expr_stmt|;
name|m_activeFont
operator|=
name|m_originalFont
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|qreal
name|scaledFontSizeInPixels
init|=
name|m_originalFontSizeInPixels
operator|*
name|scale
decl_stmt|;
if|if
condition|(
operator|!
name|m_scaledFont
operator|||
operator|(
name|TInt
argument_list|(
name|scaledFontSizeInPixels
argument_list|)
operator|!=
name|TInt
argument_list|(
name|m_scaledFontSizeInPixels
argument_list|)
operator|)
condition|)
block|{
name|releaseFont
argument_list|(
name|m_scaledFont
argument_list|)
expr_stmt|;
name|m_scaledFontSizeInPixels
operator|=
name|scaledFontSizeInPixels
expr_stmt|;
name|m_scaledFont
operator|=
name|fontWithSize
argument_list|(
name|m_scaledFontSizeInPixels
argument_list|)
expr_stmt|;
block|}
name|m_activeFont
operator|=
name|m_scaledFont
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|releaseFont
name|void
name|QFontEngineS60
operator|::
name|releaseFont
parameter_list|(
name|CFont
modifier|*
modifier|&
name|font
parameter_list|)
block|{
if|if
condition|(
name|font
condition|)
block|{
name|S60
operator|->
name|screenDevice
argument_list|()
operator|->
name|ReleaseFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|font
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QFontEngineS60
name|QFontEngineS60
operator|::
name|QFontEngineS60
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
specifier|const
name|QSymbianTypeFaceExtras
modifier|*
name|extras
parameter_list|)
member_init_list|:
name|m_extras
argument_list|(
name|extras
argument_list|)
member_init_list|,
name|m_originalFont
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_originalFontSizeInPixels
argument_list|(
operator|(
name|request
operator|.
name|pixelSize
operator|>=
literal|0
operator|)
condition|?
name|request
operator|.
name|pixelSize
else|:
name|pointsToPixels
argument_list|(
name|request
operator|.
name|pointSize
argument_list|)
argument_list|)
member_init_list|,
name|m_scaledFont
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_scaledFontSizeInPixels
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_activeFont
argument_list|(
literal|0
argument_list|)
block|{
name|QFontEngine
operator|::
name|fontDef
operator|=
name|request
expr_stmt|;
name|setFontScale
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
name|cache_cost
operator|=
sizeof|sizeof
argument_list|(
name|QFontEngineS60
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QFontEngineS60
name|QFontEngineS60
operator|::
name|~
name|QFontEngineS60
parameter_list|()
block|{
name|releaseFont
argument_list|(
name|m_originalFont
argument_list|)
expr_stmt|;
name|releaseFont
argument_list|(
name|m_scaledFont
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|emSquareSize
name|QFixed
name|QFontEngineS60
operator|::
name|emSquareSize
parameter_list|()
specifier|const
block|{
specifier|const
name|QFixed
name|unitsPerEm
init|=
name|m_extras
operator|->
name|unitsPerEm
argument_list|()
decl_stmt|;
return|return
name|unitsPerEm
operator|.
name|toInt
argument_list|()
operator|==
operator|-
literal|1
condition|?
name|QFixed
operator|::
name|fromReal
argument_list|(
name|m_originalFontSizeInPixels
argument_list|)
else|:
name|unitsPerEm
return|;
block|}
end_function
begin_function
DECL|function|stringToCMap
name|bool
name|QFontEngineS60
operator|::
name|stringToCMap
parameter_list|(
specifier|const
name|QChar
modifier|*
name|characters
parameter_list|,
name|int
name|len
parameter_list|,
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|int
modifier|*
name|nglyphs
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|*
name|nglyphs
operator|<
name|len
condition|)
block|{
operator|*
name|nglyphs
operator|=
name|len
expr_stmt|;
return|return
literal|false
return|;
block|}
name|HB_Glyph
modifier|*
name|g
init|=
name|glyphs
operator|->
name|glyphs
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|cmap
init|=
name|m_extras
operator|->
name|cmap
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|isRtl
init|=
operator|(
name|flags
operator|&
name|QTextEngine
operator|::
name|RightToLeft
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|characters
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
decl_stmt|;
operator|*
name|g
operator|++
operator|=
name|QFontEngine
operator|::
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
operator|(
name|isRtl
operator|&&
operator|!
name|m_extras
operator|->
name|isSymbolCMap
argument_list|()
operator|)
condition|?
name|QChar
operator|::
name|mirroredChar
argument_list|(
name|uc
argument_list|)
else|:
name|uc
argument_list|)
expr_stmt|;
block|}
name|glyphs
operator|->
name|numGlyphs
operator|=
name|g
operator|-
name|glyphs
operator|->
name|glyphs
expr_stmt|;
operator|*
name|nglyphs
operator|=
name|glyphs
operator|->
name|numGlyphs
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QTextEngine
operator|::
name|GlyphIndicesOnly
condition|)
return|return
literal|true
return|;
name|recalcAdvances
argument_list|(
name|glyphs
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|recalcAdvances
name|void
name|QFontEngineS60
operator|::
name|recalcAdvances
parameter_list|(
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|TOpenFontCharMetrics
name|metrics
decl_stmt|;
specifier|const
name|TUint8
modifier|*
name|glyphBitmapBytes
decl_stmt|;
name|TSize
name|glyphBitmapSize
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|->
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
name|getCharacterData
argument_list|(
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|,
name|metrics
argument_list|,
name|glyphBitmapBytes
argument_list|,
name|glyphBitmapSize
argument_list|)
expr_stmt|;
name|glyphs
operator|->
name|advances_x
index|[
name|i
index|]
operator|=
name|metrics
operator|.
name|HorizAdvance
argument_list|()
expr_stmt|;
name|glyphs
operator|->
name|advances_y
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_SYMBIAN_HAS_GLYPHOUTLINE_API
end_ifdef
begin_function_decl
specifier|static
name|bool
name|parseGlyphPathData
parameter_list|(
specifier|const
name|char
modifier|*
name|dataStr
parameter_list|,
specifier|const
name|char
modifier|*
name|dataEnd
parameter_list|,
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|qreal
name|fontPixelSize
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|,
name|bool
name|hinted
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_SYMBIAN_HAS_GLYPHOUTLINE_API
end_comment
begin_function
DECL|function|addGlyphsToPath
name|void
name|QFontEngineS60
operator|::
name|addGlyphsToPath
parameter_list|(
name|glyph_t
modifier|*
name|glyphs
parameter_list|,
name|QFixedPoint
modifier|*
name|positions
parameter_list|,
name|int
name|nglyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_SYMBIAN_HAS_GLYPHOUTLINE_API
name|Q_UNUSED
argument_list|(
argument|flags
argument_list|)
name|RGlyphOutlineIterator
name|iterator
decl_stmt|;
specifier|const
name|TInt
name|error
init|=
name|iterator
operator|.
name|Open
argument_list|(
operator|*
name|m_activeFont
argument_list|,
name|glyphs
argument_list|,
name|nglyphs
argument_list|)
decl_stmt|;
if|if
condition|(
name|KErrNone
operator|!=
name|error
condition|)
return|return;
specifier|const
name|qreal
name|fontSizeInPixels
init|=
name|qreal
argument_list|(
name|m_activeFont
operator|->
name|HeightInPixels
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
do|do
block|{
specifier|const
name|TUint8
modifier|*
name|outlineUint8
init|=
name|iterator
operator|.
name|Outline
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|outlineChar
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|outlineUint8
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|outlineEnd
init|=
name|outlineChar
operator|+
name|iterator
operator|.
name|OutlineLength
argument_list|()
decl_stmt|;
name|parseGlyphPathData
argument_list|(
name|outlineChar
argument_list|,
name|outlineEnd
argument_list|,
operator|*
name|path
argument_list|,
name|fontSizeInPixels
argument_list|,
name|positions
index|[
name|count
operator|++
index|]
operator|.
name|toPointF
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|KErrNone
operator|==
name|iterator
operator|.
name|Next
argument_list|()
operator|&&
name|count
operator|<=
name|nglyphs
condition|)
do|;
name|iterator
operator|.
name|Close
argument_list|()
expr_stmt|;
else|#
directive|else
comment|// Q_SYMBIAN_HAS_GLYPHOUTLINE_API
name|QFontEngine
operator|::
name|addGlyphsToPath
argument_list|(
name|glyphs
argument_list|,
name|positions
argument_list|,
name|nglyphs
argument_list|,
name|path
argument_list|,
name|flags
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//Q_SYMBIAN_HAS_GLYPHOUTLINE_API
block|}
end_function
begin_function
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngineS60
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
comment|// Note: On some Symbian versions (apparently<= Symbian^1), this
comment|// function will return gray values 0x00, 0x10 ... 0xe0, 0xf0 due
comment|// to a bug. The glyphs are nowhere perfectly opaque.
comment|// This has been fixed for Symbian^3.
name|TOpenFontCharMetrics
name|metrics
decl_stmt|;
specifier|const
name|TUint8
modifier|*
name|glyphBitmapBytes
decl_stmt|;
name|TSize
name|glyphBitmapSize
decl_stmt|;
name|getCharacterData
argument_list|(
name|glyph
argument_list|,
name|metrics
argument_list|,
name|glyphBitmapBytes
argument_list|,
name|glyphBitmapSize
argument_list|)
expr_stmt|;
name|QImage
name|result
argument_list|(
name|glyphBitmapBytes
argument_list|,
name|glyphBitmapSize
operator|.
name|iWidth
argument_list|,
name|glyphBitmapSize
operator|.
name|iHeight
argument_list|,
name|glyphBitmapSize
operator|.
name|iWidth
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
name|result
operator|.
name|setColorTable
argument_list|(
name|grayPalette
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineS60
operator|::
name|boundingBox
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|)
block|{
if|if
condition|(
name|glyphs
operator|.
name|numGlyphs
operator|==
literal|0
condition|)
return|return
name|glyph_metrics_t
argument_list|()
return|;
name|QFixed
name|w
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
operator|++
name|i
control|)
name|w
operator|+=
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|glyph_metrics_t
argument_list|(
literal|0
argument_list|,
operator|-
name|ascent
argument_list|()
argument_list|,
name|w
operator|-
name|lastRightBearing
argument_list|(
name|glyphs
argument_list|)
argument_list|,
name|ascent
argument_list|()
operator|+
name|descent
argument_list|()
operator|+
literal|1
argument_list|,
name|w
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|boundingBox_const
name|glyph_metrics_t
name|QFontEngineS60
operator|::
name|boundingBox_const
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
specifier|const
block|{
name|TOpenFontCharMetrics
name|metrics
decl_stmt|;
specifier|const
name|TUint8
modifier|*
name|glyphBitmapBytes
decl_stmt|;
name|TSize
name|glyphBitmapSize
decl_stmt|;
name|getCharacterData
argument_list|(
name|glyph
argument_list|,
name|metrics
argument_list|,
name|glyphBitmapBytes
argument_list|,
name|glyphBitmapSize
argument_list|)
expr_stmt|;
specifier|const
name|glyph_metrics_t
name|result
argument_list|(
name|metrics
operator|.
name|HorizBearingX
argument_list|()
argument_list|,
operator|-
name|metrics
operator|.
name|HorizBearingY
argument_list|()
argument_list|,
name|metrics
operator|.
name|Width
argument_list|()
argument_list|,
name|metrics
operator|.
name|Height
argument_list|()
argument_list|,
name|metrics
operator|.
name|HorizAdvance
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineS60
operator|::
name|boundingBox
parameter_list|(
name|glyph_t
name|glyph
parameter_list|)
block|{
return|return
name|boundingBox_const
argument_list|(
name|glyph
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ascent
name|QFixed
name|QFontEngineS60
operator|::
name|ascent
parameter_list|()
specifier|const
block|{
comment|// Workaround for QTBUG-8013
comment|// Stroke based fonts may return an incorrect FontMaxAscent of 0.
specifier|const
name|QFixed
name|ascent
init|=
name|m_originalFont
operator|->
name|FontMaxAscent
argument_list|()
decl_stmt|;
return|return
operator|(
name|ascent
operator|>
literal|0
operator|)
condition|?
name|ascent
else|:
name|QFixed
operator|::
name|fromReal
argument_list|(
name|m_originalFontSizeInPixels
argument_list|)
operator|-
name|descent
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|descent
name|QFixed
name|QFontEngineS60
operator|::
name|descent
parameter_list|()
specifier|const
block|{
return|return
name|m_originalFont
operator|->
name|FontMaxDescent
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|leading
name|QFixed
name|QFontEngineS60
operator|::
name|leading
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|maxCharWidth
name|qreal
name|QFontEngineS60
operator|::
name|maxCharWidth
parameter_list|()
specifier|const
block|{
return|return
name|m_originalFont
operator|->
name|MaxCharWidthInPixels
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|name
specifier|const
name|char
modifier|*
name|QFontEngineS60
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
literal|"QFontEngineS60"
return|;
block|}
end_function
begin_function
DECL|function|canRender
name|bool
name|QFontEngineS60
operator|::
name|canRender
parameter_list|(
specifier|const
name|QChar
modifier|*
name|string
parameter_list|,
name|int
name|len
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|cmap
init|=
name|m_extras
operator|->
name|cmap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|string
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|QFontEngine
operator|::
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
argument_list|)
operator|==
literal|0
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|getSfntTable
name|QByteArray
name|QFontEngineS60
operator|::
name|getSfntTable
parameter_list|(
name|uint
name|tag
parameter_list|)
specifier|const
block|{
return|return
name|m_extras
operator|->
name|getSfntTable
argument_list|(
name|tag
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getSfntTableData
name|bool
name|QFontEngineS60
operator|::
name|getSfntTableData
parameter_list|(
name|uint
name|tag
parameter_list|,
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
modifier|*
name|length
parameter_list|)
specifier|const
block|{
return|return
name|m_extras
operator|->
name|getSfntTableData
argument_list|(
name|tag
argument_list|,
name|buffer
argument_list|,
name|length
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|type
name|QFontEngine
operator|::
name|Type
name|QFontEngineS60
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QFontEngine
operator|::
name|S60FontEngine
return|;
block|}
end_function
begin_function
DECL|function|getCharacterData
name|void
name|QFontEngineS60
operator|::
name|getCharacterData
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|TOpenFontCharMetrics
modifier|&
name|metrics
parameter_list|,
specifier|const
name|TUint8
modifier|*
modifier|&
name|bitmap
parameter_list|,
name|TSize
modifier|&
name|bitmapSize
parameter_list|)
specifier|const
block|{
comment|// Setting the most significant bit tells GetCharacterData
comment|// that 'code' is a Glyph ID, rather than a UTF-16 value
specifier|const
name|TUint
name|specialCode
init|=
operator|(
name|TUint
operator|)
name|glyph
operator||
literal|0x80000000
decl_stmt|;
specifier|const
name|CFont
operator|::
name|TCharacterDataAvailability
name|availability
init|=
name|m_activeFont
operator|->
name|GetCharacterData
argument_list|(
name|specialCode
argument_list|,
name|metrics
argument_list|,
name|bitmap
argument_list|,
name|bitmapSize
argument_list|)
decl_stmt|;
specifier|const
name|glyph_t
name|fallbackGlyph
init|=
literal|'?'
decl_stmt|;
if|if
condition|(
name|availability
operator|!=
name|CFont
operator|::
name|EAllCharacterData
condition|)
block|{
specifier|const
name|CFont
operator|::
name|TCharacterDataAvailability
name|fallbackAvailability
init|=
name|m_activeFont
operator|->
name|GetCharacterData
argument_list|(
name|fallbackGlyph
argument_list|,
name|metrics
argument_list|,
name|bitmap
argument_list|,
name|bitmapSize
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fallbackAvailability
operator|==
name|CFont
operator|::
name|EAllCharacterData
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_SYMBIAN_HAS_GLYPHOUTLINE_API
end_ifdef
begin_function
DECL|function|skipSpacesAndComma
specifier|static
specifier|inline
name|void
name|skipSpacesAndComma
parameter_list|(
specifier|const
name|char
modifier|*
modifier|&
name|str
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
name|strEnd
parameter_list|)
block|{
while|while
condition|(
name|str
operator|<=
name|strEnd
operator|&&
operator|(
operator|*
name|str
operator|==
literal|' '
operator|||
operator|*
name|str
operator|==
literal|','
operator|)
condition|)
operator|++
name|str
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parseGlyphPathData
specifier|static
name|bool
name|parseGlyphPathData
parameter_list|(
specifier|const
name|char
modifier|*
name|svgPath
parameter_list|,
specifier|const
name|char
modifier|*
name|svgPathEnd
parameter_list|,
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|qreal
name|fontPixelSize
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|,
name|bool
name|hinted
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|hinted
argument_list|)
name|QPointF
name|p1
decl_stmt|,
name|p2
decl_stmt|,
name|firstSubPathPoint
decl_stmt|;
name|qreal
modifier|*
name|elementValues
index|[]
init|=
block|{
operator|&
name|p1
operator|.
name|rx
argument_list|()
block|,
operator|&
name|p1
operator|.
name|ry
argument_list|()
block|,
operator|&
name|p2
operator|.
name|rx
argument_list|()
block|,
operator|&
name|p2
operator|.
name|ry
argument_list|()
block|}
decl_stmt|;
specifier|const
name|int
name|unitsPerEm
init|=
literal|2048
decl_stmt|;
comment|// See: http://en.wikipedia.org/wiki/Em_%28typography%29
specifier|const
name|qreal
name|resizeFactor
init|=
name|fontPixelSize
operator|/
name|unitsPerEm
decl_stmt|;
while|while
condition|(
name|svgPath
operator|<
name|svgPathEnd
condition|)
block|{
name|skipSpacesAndComma
argument_list|(
name|svgPath
argument_list|,
name|svgPathEnd
argument_list|)
expr_stmt|;
specifier|const
name|char
name|pathElem
init|=
operator|*
name|svgPath
operator|++
decl_stmt|;
name|skipSpacesAndComma
argument_list|(
name|svgPath
argument_list|,
name|svgPathEnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|pathElem
operator|!=
literal|'Z'
condition|)
block|{
name|char
modifier|*
name|endStr
init|=
literal|0
decl_stmt|;
name|int
name|elementValuesCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
comment|// 4 = size of elementValues[]
name|qreal
name|coordinateValue
init|=
name|strtod
argument_list|(
name|svgPath
argument_list|,
operator|&
name|endStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|svgPath
operator|==
name|endStr
condition|)
break|break;
if|if
condition|(
name|i
operator|%
literal|2
condition|)
comment|// Flip vertically
name|coordinateValue
operator|=
operator|-
name|coordinateValue
expr_stmt|;
operator|*
name|elementValues
index|[
name|i
index|]
operator|=
name|coordinateValue
operator|*
name|resizeFactor
expr_stmt|;
name|elementValuesCount
operator|++
expr_stmt|;
name|svgPath
operator|=
name|endStr
expr_stmt|;
name|skipSpacesAndComma
argument_list|(
name|svgPath
argument_list|,
name|svgPathEnd
argument_list|)
expr_stmt|;
block|}
name|p1
operator|+=
name|offset
expr_stmt|;
if|if
condition|(
name|elementValuesCount
operator|==
literal|2
condition|)
name|p2
operator|=
name|firstSubPathPoint
expr_stmt|;
else|else
name|p2
operator|+=
name|offset
expr_stmt|;
block|}
switch|switch
condition|(
name|pathElem
condition|)
block|{
case|case
literal|'M'
case|:
name|firstSubPathPoint
operator|=
name|p1
expr_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
name|p1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'Z'
case|:
name|path
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'L'
case|:
name|path
operator|.
name|lineTo
argument_list|(
name|p1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'Q'
case|:
name|path
operator|.
name|quadTo
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_SYMBIAN_HAS_GLYPHOUTLINE_API
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
