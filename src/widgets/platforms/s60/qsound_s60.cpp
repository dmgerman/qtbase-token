begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SOUND
end_ifndef
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qsound.h"
end_include
begin_include
include|#
directive|include
file|"qsound_p.h"
end_include
begin_include
include|#
directive|include
file|"qfileinfo.h"
end_include
begin_include
include|#
directive|include
file|<private/qcore_symbian_p.h>
end_include
begin_include
include|#
directive|include
file|<e32std.h>
end_include
begin_include
include|#
directive|include
file|<mdaaudiosampleplayer.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class_decl
class_decl|class
name|QAuServerS60
class_decl|;
end_class_decl
begin_class
DECL|class|QAuBucketS60
class|class
name|QAuBucketS60
super|:
specifier|public
name|QAuBucket
super|,
specifier|public
name|MMdaAudioPlayerCallback
block|{
public|public:
name|QAuBucketS60
parameter_list|(
name|QAuServerS60
modifier|*
name|server
parameter_list|,
name|QSound
modifier|*
name|sound
parameter_list|)
constructor_decl|;
name|~
name|QAuBucketS60
parameter_list|()
destructor_decl|;
name|void
name|play
parameter_list|()
function_decl|;
name|void
name|stop
parameter_list|()
function_decl|;
DECL|function|sound
specifier|inline
name|QSound
modifier|*
name|sound
parameter_list|()
specifier|const
block|{
return|return
name|m_sound
return|;
block|}
public|public:
comment|// from MMdaAudioPlayerCallback
name|void
name|MapcInitComplete
parameter_list|(
name|TInt
name|aError
parameter_list|,
specifier|const
name|TTimeIntervalMicroSeconds
modifier|&
name|aDuration
parameter_list|)
function_decl|;
name|void
name|MapcPlayComplete
parameter_list|(
name|TInt
name|aError
parameter_list|)
function_decl|;
private|private:
DECL|member|m_sound
name|QSound
modifier|*
name|m_sound
decl_stmt|;
DECL|member|m_server
name|QAuServerS60
modifier|*
name|m_server
decl_stmt|;
DECL|member|m_prepared
name|bool
name|m_prepared
decl_stmt|;
DECL|member|m_playCalled
name|bool
name|m_playCalled
decl_stmt|;
DECL|member|m_playUtility
name|CMdaAudioPlayerUtility
modifier|*
name|m_playUtility
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QAuServerS60
class|class
name|QAuServerS60
super|:
specifier|public
name|QAuServer
block|{
public|public:
name|QAuServerS60
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
constructor_decl|;
DECL|function|init
name|void
name|init
parameter_list|(
name|QSound
modifier|*
name|s
parameter_list|)
block|{
name|QAuBucketS60
modifier|*
name|bucket
init|=
operator|new
name|QAuBucketS60
argument_list|(
name|this
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|setBucket
argument_list|(
name|s
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
DECL|function|play
name|void
name|play
parameter_list|(
name|QSound
modifier|*
name|s
parameter_list|)
block|{
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|play
argument_list|()
expr_stmt|;
block|}
DECL|function|stop
name|void
name|stop
parameter_list|(
name|QSound
modifier|*
name|s
parameter_list|)
block|{
name|bucket
argument_list|(
name|s
argument_list|)
operator|->
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|function|okay
name|bool
name|okay
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
name|void
name|play
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
function_decl|;
protected|protected:
name|void
name|playCompleted
parameter_list|(
name|QAuBucketS60
modifier|*
name|bucket
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
protected|protected:
DECL|function|bucket
name|QAuBucketS60
modifier|*
name|bucket
parameter_list|(
name|QSound
modifier|*
name|s
parameter_list|)
block|{
return|return
operator|(
name|QAuBucketS60
operator|*
operator|)
name|QAuServer
operator|::
name|bucket
argument_list|(
name|s
argument_list|)
return|;
block|}
friend|friend
class_decl|class
name|QAuBucketS60
class_decl|;
comment|// static QSound::play(filename) cannot be stopped, meaning that playCompleted
comment|// will get always called and QSound gets removed form this list.
DECL|member|staticPlayingSounds
name|QList
argument_list|<
name|QSound
modifier|*
argument_list|>
name|staticPlayingSounds
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QAuServerS60
name|QAuServerS60
operator|::
name|QAuServerS60
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAuServer
argument_list|(
name|parent
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"QAuServerS60"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|play
name|void
name|QAuServerS60
operator|::
name|play
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
block|{
name|QSound
modifier|*
name|s
init|=
operator|new
name|QSound
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|staticPlayingSounds
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|play
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|playCompleted
name|void
name|QAuServerS60
operator|::
name|playCompleted
parameter_list|(
name|QAuBucketS60
modifier|*
name|bucket
parameter_list|,
name|int
name|error
parameter_list|)
block|{
name|QSound
modifier|*
name|sound
init|=
name|bucket
operator|->
name|sound
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|error
condition|)
block|{
comment|// We need to handle repeats by ourselves, since with Symbian API we don't
comment|// know how many loops have been played when user asks it
if|if
condition|(
name|decLoop
argument_list|(
name|sound
argument_list|)
condition|)
block|{
name|play
argument_list|(
name|sound
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|staticPlayingSounds
operator|.
name|removeAll
argument_list|(
name|sound
argument_list|)
condition|)
operator|delete
name|sound
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// We don't have a way to inform about errors -> just decrement loops
comment|// in order that QSound::isFinished will return true;
while|while
condition|(
name|decLoop
argument_list|(
name|sound
argument_list|)
operator|>
literal|0
condition|)
block|{}
if|if
condition|(
name|staticPlayingSounds
operator|.
name|removeAll
argument_list|(
name|sound
argument_list|)
condition|)
operator|delete
name|sound
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_new_audio_server
name|QAuServer
modifier|*
name|qt_new_audio_server
parameter_list|()
block|{
return|return
operator|new
name|QAuServerS60
argument_list|(
name|qApp
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QAuBucketS60
name|QAuBucketS60
operator|::
name|QAuBucketS60
parameter_list|(
name|QAuServerS60
modifier|*
name|server
parameter_list|,
name|QSound
modifier|*
name|sound
parameter_list|)
member_init_list|:
name|m_sound
argument_list|(
name|sound
argument_list|)
member_init_list|,
name|m_server
argument_list|(
name|server
argument_list|)
member_init_list|,
name|m_prepared
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_playCalled
argument_list|(
literal|false
argument_list|)
block|{
name|QString
name|filepath
init|=
name|QFileInfo
argument_list|(
name|m_sound
operator|->
name|fileName
argument_list|()
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
name|filepath
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|filepath
argument_list|)
expr_stmt|;
name|TPtrC
name|filepathPtr
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|filepath
argument_list|)
argument_list|)
decl_stmt|;
name|TRAPD
argument_list|(
argument|err
argument_list|,
argument|m_playUtility = CMdaAudioPlayerUtility::NewL(*this);                m_playUtility->OpenFileL(filepathPtr)
argument_list|)
empty_stmt|;
if|if
condition|(
name|err
condition|)
block|{
name|m_server
operator|->
name|playCompleted
argument_list|(
name|this
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|play
name|void
name|QAuBucketS60
operator|::
name|play
parameter_list|()
block|{
if|if
condition|(
name|m_prepared
condition|)
block|{
comment|// OpenFileL call is completed we can start playing immediately
name|m_playUtility
operator|->
name|Play
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|m_playCalled
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stop
name|void
name|QAuBucketS60
operator|::
name|stop
parameter_list|()
block|{
name|m_playCalled
operator|=
literal|false
expr_stmt|;
name|m_playUtility
operator|->
name|Stop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|MapcPlayComplete
name|void
name|QAuBucketS60
operator|::
name|MapcPlayComplete
parameter_list|(
name|TInt
name|aError
parameter_list|)
block|{
name|m_server
operator|->
name|playCompleted
argument_list|(
name|this
argument_list|,
name|aError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|MapcInitComplete
name|void
name|QAuBucketS60
operator|::
name|MapcInitComplete
parameter_list|(
name|TInt
name|aError
parameter_list|,
specifier|const
name|TTimeIntervalMicroSeconds
modifier|&
comment|/*aDuration*/
parameter_list|)
block|{
if|if
condition|(
name|aError
condition|)
block|{
name|m_server
operator|->
name|playCompleted
argument_list|(
name|this
argument_list|,
name|aError
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_prepared
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|m_playCalled
condition|)
block|{
name|play
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_destructor
DECL|function|~QAuBucketS60
name|QAuBucketS60
operator|::
name|~
name|QAuBucketS60
parameter_list|()
block|{
if|if
condition|(
name|m_playUtility
condition|)
block|{
name|m_playUtility
operator|->
name|Stop
argument_list|()
expr_stmt|;
name|m_playUtility
operator|->
name|Close
argument_list|()
expr_stmt|;
block|}
operator|delete
name|m_playUtility
expr_stmt|;
block|}
end_destructor
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SOUND
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
