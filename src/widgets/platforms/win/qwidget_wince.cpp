begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|"qguifunctions_wince.h"
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|const
name|QString
name|qt_reg_winclass
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// defined in qapplication_win.cpp
end_comment
begin_extern
extern|extern
literal|"C"
name|LRESULT
name|QT_WIN_CALLBACK
name|QtWndProc
parameter_list|(
name|HWND
parameter_list|,
name|UINT
parameter_list|,
name|WPARAM
parameter_list|,
name|LPARAM
parameter_list|)
function_decl|;
end_extern
begin_comment
comment|//#define TABLET_DEBUG
end_comment
begin_define
DECL|macro|PACKETDATA
define|#
directive|define
name|PACKETDATA
value|(PK_X | PK_Y | PK_BUTTONS | PK_NORMAL_PRESSURE | PK_TANGENT_PRESSURE \                      | PK_ORIENTATION | PK_CURSOR | PK_Z)
end_define
begin_define
DECL|macro|PACKETMODE
define|#
directive|define
name|PACKETMODE
value|0
end_define
begin_typedef
DECL|typedef|PtrWTOpen
typedef|typedef
name|HCTX
function_decl|(
name|API
modifier|*
name|PtrWTOpen
function_decl|)
parameter_list|(
name|HWND
parameter_list|,
name|LPLOGCONTEXT
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTClose
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTClose
function_decl|)
parameter_list|(
name|HCTX
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTInfo
typedef|typedef
name|UINT
function_decl|(
name|API
modifier|*
name|PtrWTInfo
function_decl|)
parameter_list|(
name|UINT
parameter_list|,
name|UINT
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTEnable
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTEnable
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTOverlap
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTOverlap
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTPacketsGet
typedef|typedef
name|int
function_decl|(
name|API
modifier|*
name|PtrWTPacketsGet
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|int
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTGet
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTGet
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|LPLOGCONTEXT
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTQueueSizeGet
typedef|typedef
name|int
function_decl|(
name|API
modifier|*
name|PtrWTQueueSizeGet
function_decl|)
parameter_list|(
name|HCTX
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTQueueSizeSet
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTQueueSizeSet
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
end_ifndef
begin_function_decl
specifier|static
name|void
name|qt_tablet_init_wce
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|qt_tablet_cleanup_wce
parameter_list|()
function_decl|;
end_function_decl
begin_function
DECL|function|qt_tablet_init_wce
specifier|static
name|void
name|qt_tablet_init_wce
parameter_list|()
block|{
specifier|static
name|bool
name|firstTime
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|firstTime
condition|)
return|return;
name|firstTime
operator|=
literal|false
expr_stmt|;
name|qt_tablet_widget
operator|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qt_tablet_widget
operator|->
name|createWinId
argument_list|()
expr_stmt|;
name|qt_tablet_widget
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt internal tablet widget"
argument_list|)
argument_list|)
expr_stmt|;
name|LOGCONTEXT
name|lcMine
decl_stmt|;
name|qAddPostRoutine
argument_list|(
name|qt_tablet_cleanup_wce
argument_list|)
expr_stmt|;
name|struct
name|tagAXIS
name|tpOri
index|[
literal|3
index|]
decl_stmt|;
if|if
condition|(
name|ptrWTInfo
operator|&&
name|ptrWTOpen
operator|&&
name|ptrWTQueueSizeGet
operator|&&
name|ptrWTQueueSizeSet
condition|)
block|{
comment|// make sure we have WinTab
if|if
condition|(
operator|!
name|ptrWTInfo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|TABLET_DEBUG
name|qWarning
argument_list|(
literal|"QWidget: Wintab services not available"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
comment|// some tablets don't support tilt, check if it is possible,
name|qt_tablet_tilt_support
operator|=
name|ptrWTInfo
argument_list|(
name|WTI_DEVICES
argument_list|,
name|DVC_ORIENTATION
argument_list|,
operator|&
name|tpOri
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_tablet_tilt_support
condition|)
block|{
comment|// check for azimuth and altitude
name|qt_tablet_tilt_support
operator|=
name|tpOri
index|[
literal|0
index|]
operator|.
name|axResolution
operator|&&
name|tpOri
index|[
literal|1
index|]
operator|.
name|axResolution
expr_stmt|;
block|}
comment|// build our context from the default context
name|ptrWTInfo
argument_list|(
name|WTI_DEFSYSCTX
argument_list|,
literal|0
argument_list|,
operator|&
name|lcMine
argument_list|)
expr_stmt|;
comment|// Go for the raw coordinates, the tablet event will return good stuff
name|lcMine
operator|.
name|lcOptions
operator||=
name|CXO_MESSAGES
operator||
name|CXO_CSRMESSAGES
expr_stmt|;
name|lcMine
operator|.
name|lcPktData
operator|=
name|PACKETDATA
expr_stmt|;
name|lcMine
operator|.
name|lcPktMode
operator|=
name|PACKETMODE
expr_stmt|;
name|lcMine
operator|.
name|lcMoveMask
operator|=
name|PACKETDATA
expr_stmt|;
name|lcMine
operator|.
name|lcOutOrgX
operator|=
literal|0
expr_stmt|;
name|lcMine
operator|.
name|lcOutExtX
operator|=
name|lcMine
operator|.
name|lcInExtX
expr_stmt|;
name|lcMine
operator|.
name|lcOutOrgY
operator|=
literal|0
expr_stmt|;
name|lcMine
operator|.
name|lcOutExtY
operator|=
operator|-
name|lcMine
operator|.
name|lcInExtY
expr_stmt|;
name|qt_tablet_context
operator|=
name|ptrWTOpen
argument_list|(
name|qt_tablet_widget
operator|->
name|winId
argument_list|()
argument_list|,
operator|&
name|lcMine
argument_list|,
literal|true
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TABLET_DEBUG
name|qDebug
argument_list|(
literal|"Tablet is %p"
argument_list|,
name|qt_tablet_context
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|qt_tablet_context
condition|)
block|{
ifdef|#
directive|ifdef
name|TABLET_DEBUG
name|qWarning
argument_list|(
literal|"QWidget: Failed to open the tablet"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
comment|// Set the size of the Packet Queue to the correct size...
name|int
name|currSize
init|=
name|ptrWTQueueSizeGet
argument_list|(
name|qt_tablet_context
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ptrWTQueueSizeSet
argument_list|(
name|qt_tablet_context
argument_list|,
name|QT_TABLET_NPACKETQSIZE
argument_list|)
condition|)
block|{
comment|// Ideally one might want to use a smaller
comment|// multiple, but for now, since we managed to destroy
comment|// the existing Q with the previous call, set it back
comment|// to the other size, which should work.  If not,
comment|// there will be trouble.
if|if
condition|(
operator|!
name|ptrWTQueueSizeSet
argument_list|(
name|qt_tablet_context
argument_list|,
name|currSize
argument_list|)
condition|)
block|{
name|Q_ASSERT_X
argument_list|(
literal|0
argument_list|,
literal|"Qt::Internal"
argument_list|,
literal|"There is no packet queue for"
literal|" the tablet. The tablet will not work"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_tablet_cleanup_wce
specifier|static
name|void
name|qt_tablet_cleanup_wce
parameter_list|()
block|{
if|if
condition|(
name|ptrWTClose
condition|)
name|ptrWTClose
argument_list|(
name|qt_tablet_context
argument_list|)
expr_stmt|;
operator|delete
name|qt_tablet_widget
expr_stmt|;
name|qt_tablet_widget
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABLETEVENT
end_comment
begin_comment
comment|// The internal qWinRequestConfig, defined in qapplication_win.cpp, stores move,
end_comment
begin_comment
comment|// resize and setGeometry requests for a widget that is already
end_comment
begin_comment
comment|// processing a config event. The purpose is to avoid recursion.
end_comment
begin_comment
comment|//
end_comment
begin_function_decl
name|void
name|qWinRequestConfig
parameter_list|(
name|WId
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|create_sys
name|void
name|QWidgetPrivate
operator|::
name|create_sys
parameter_list|(
name|WId
name|window
parameter_list|,
name|bool
name|initializeWindow
parameter_list|,
name|bool
name|destroyOldWindow
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
specifier|static
name|int
name|sw
init|=
operator|-
literal|1
decl_stmt|,
name|sh
init|=
operator|-
literal|1
decl_stmt|;
name|Qt
operator|::
name|WindowType
name|type
init|=
name|q
operator|->
name|windowType
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|data
operator|.
name|window_flags
decl_stmt|;
name|bool
name|topLevel
init|=
operator|(
name|flags
operator|&
name|Qt
operator|::
name|Window
operator|)
decl_stmt|;
name|bool
name|popup
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|)
decl_stmt|;
name|bool
name|dialog
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Dialog
operator|||
name|type
operator|==
name|Qt
operator|::
name|Sheet
operator|||
operator|(
name|flags
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
operator|)
operator|)
decl_stmt|;
name|bool
name|desktop
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Desktop
operator|)
decl_stmt|;
name|bool
name|tool
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|type
operator|==
name|Qt
operator|::
name|Drawer
operator|)
decl_stmt|;
name|HINSTANCE
name|appinst
init|=
name|qWinAppInst
argument_list|()
decl_stmt|;
name|HWND
name|parentw
decl_stmt|,
name|destroyw
init|=
literal|0
decl_stmt|;
name|WId
name|id
decl_stmt|;
name|QString
name|windowClassName
init|=
name|qt_reg_winclass
argument_list|(
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|window
condition|)
comment|// always initialize
name|initializeWindow
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|popup
condition|)
name|flags
operator||=
name|Qt
operator|::
name|WindowStaysOnTopHint
expr_stmt|;
comment|// a popup stays on top
if|if
condition|(
name|flags
operator|&
operator|(
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator||
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator|)
condition|)
block|{
name|flags
operator||=
name|Qt
operator|::
name|WindowSystemMenuHint
expr_stmt|;
name|flags
operator||=
name|Qt
operator|::
name|WindowTitleHint
expr_stmt|;
name|flags
operator|&=
operator|~
name|Qt
operator|::
name|FramelessWindowHint
expr_stmt|;
block|}
if|if
condition|(
name|sw
operator|<
literal|0
condition|)
block|{
comment|// get the (primary) screen size
name|sw
operator|=
name|GetSystemMetrics
argument_list|(
name|SM_CXSCREEN
argument_list|)
expr_stmt|;
name|sh
operator|=
name|GetSystemMetrics
argument_list|(
name|SM_CYSCREEN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|desktop
condition|)
block|{
comment|// desktop widget
name|popup
operator|=
literal|false
expr_stmt|;
comment|// force this flags off
name|data
operator|.
name|crect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|GetSystemMetrics
argument_list|(
name|SM_CXSCREEN
argument_list|)
argument_list|,
name|GetSystemMetrics
argument_list|(
name|SM_CYSCREEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parentw
operator|=
name|q
operator|->
name|parentWidget
argument_list|()
condition|?
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|effectiveWinId
argument_list|()
else|:
literal|0
expr_stmt|;
name|QString
name|title
decl_stmt|;
name|int
name|style
init|=
name|WS_CHILD
decl_stmt|;
name|int
name|exsty
init|=
name|WS_EX_NOPARENTNOTIFY
decl_stmt|;
if|if
condition|(
name|topLevel
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|&&
operator|!
name|tool
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
name|style
operator|=
operator|(
name|WS_OVERLAPPED
operator|)
operator||
name|WS_SYSMENU
expr_stmt|;
else|else
name|style
operator|=
name|WS_POPUP
expr_stmt|;
if|if
condition|(
operator|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
operator|||
operator|(
name|type
operator|==
name|Qt
operator|::
name|SplashScreen
operator|)
condition|)
block|{
name|style
operator|=
name|WS_POPUP
expr_stmt|;
name|exsty
operator||=
name|WS_EX_NOANIMATION
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
name|style
operator||=
name|WS_CAPTION
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|style
operator||=
name|WS_SYSMENU
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|exsty
operator||=
name|WS_EX_CONTEXTHELP
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE_WM
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
name|style
operator||=
name|WS_MINIMIZEBOX
expr_stmt|;
if|if
condition|(
name|shouldShowMaximizeButton
argument_list|()
condition|)
name|style
operator||=
name|WS_MAXIMIZEBOX
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|tool
condition|)
name|exsty
operator||=
name|WS_EX_TOOLWINDOW
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dialog
condition|)
block|{
name|style
operator|=
name|WS_BORDER
operator||
name|WS_CAPTION
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowOkButtonHint
condition|)
name|exsty
operator||=
name|WS_EX_CAPTIONOKBTN
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowCancelButtonHint
operator|||
name|flags
operator|&
name|Qt
operator|::
name|WA_DeleteOnClose
condition|)
name|style
operator||=
name|WS_SYSMENU
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|exsty
operator||=
name|WS_EX_CONTEXTHELP
expr_stmt|;
block|}
if|if
condition|(
name|popup
condition|)
block|{
name|style
operator|=
name|WS_POPUP
expr_stmt|;
name|exsty
operator||=
name|WS_EX_NOANIMATION
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
block|{
name|title
operator|=
name|q
operator|->
name|isWindow
argument_list|()
condition|?
name|qAppName
argument_list|()
else|:
name|q
operator|->
name|objectName
argument_list|()
expr_stmt|;
block|}
comment|// The Qt::WA_WState_Created flag is checked by translateConfigEvent() in
comment|// qapplication_win.cpp. We switch it off temporarily to avoid move
comment|// and resize events during creationt
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
condition|)
block|{
comment|// override the old window
if|if
condition|(
name|destroyOldWindow
condition|)
name|destroyw
operator|=
name|data
operator|.
name|winid
expr_stmt|;
name|id
operator|=
name|window
expr_stmt|;
name|setWinId
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|LONG
name|res
init|=
name|SetWindowLong
argument_list|(
name|window
argument_list|,
name|GWL_STYLE
argument_list|,
name|style
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
name|qErrnoWarning
argument_list|(
literal|"QWidget::create: Failed to set window style"
argument_list|)
expr_stmt|;
name|res
operator|=
name|SetWindowLong
argument_list|(
name|window
argument_list|,
name|GWL_WNDPROC
argument_list|,
operator|(
name|LONG
operator|)
name|QtWndProc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
name|qErrnoWarning
argument_list|(
literal|"QWidget::create: Failed to set window procedure"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|desktop
condition|)
block|{
comment|// desktop widget
name|id
operator|=
name|GetDesktopWindow
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|id
condition|)
block|{
comment|//Create a dummy desktop
name|RECT
name|r
decl_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_GETWORKAREA
argument_list|,
literal|0
argument_list|,
operator|&
name|r
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|id
operator|=
name|CreateWindow
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|windowClassName
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|title
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|style
argument_list|,
name|r
operator|.
name|left
argument_list|,
name|r
operator|.
name|top
argument_list|,
name|r
operator|.
name|right
operator|-
name|r
operator|.
name|left
argument_list|,
name|r
operator|.
name|bottom
operator|-
name|r
operator|.
name|top
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|appinst
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|setWinId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topLevel
condition|)
block|{
comment|// create top-level widget
specifier|const
name|bool
name|wasMoved
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|)
decl_stmt|;
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
if|if
condition|(
name|qt_wince_is_mobile
argument_list|()
condition|)
block|{
name|x
operator|=
name|wasMoved
condition|?
name|data
operator|.
name|crect
operator|.
name|left
argument_list|()
else|:
name|CW_USEDEFAULT
expr_stmt|;
name|y
operator|=
name|wasMoved
condition|?
name|data
operator|.
name|crect
operator|.
name|top
argument_list|()
else|:
name|CW_USEDEFAULT
expr_stmt|;
block|}
else|else
block|{
name|x
operator|=
name|wasMoved
condition|?
name|data
operator|.
name|crect
operator|.
name|left
argument_list|()
else|:
literal|100
expr_stmt|;
name|y
operator|=
name|wasMoved
condition|?
name|data
operator|.
name|crect
operator|.
name|top
argument_list|()
else|:
literal|100
expr_stmt|;
block|}
name|int
name|w
init|=
name|CW_USEDEFAULT
decl_stmt|;
name|int
name|h
init|=
name|CW_USEDEFAULT
decl_stmt|;
comment|// Adjust for framestrut when needed
name|RECT
name|rect
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
if|if
condition|(
name|AdjustWindowRectEx
argument_list|(
operator|&
name|rect
argument_list|,
name|style
argument_list|,
name|FALSE
argument_list|,
name|exsty
argument_list|)
condition|)
block|{
name|QTLWExtra
modifier|*
name|td
init|=
name|maybeTopData
argument_list|()
decl_stmt|;
if|if
condition|(
name|wasMoved
operator|&&
operator|(
name|td
operator|&&
operator|!
name|td
operator|->
name|posFromMove
operator|)
condition|)
block|{
name|x
operator|=
name|data
operator|.
name|crect
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|left
expr_stmt|;
name|y
operator|=
name|data
operator|.
name|crect
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|top
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
condition|)
block|{
name|w
operator|=
name|data
operator|.
name|crect
operator|.
name|width
argument_list|()
operator|+
operator|(
name|rect
operator|.
name|right
operator|-
name|rect
operator|.
name|left
operator|)
expr_stmt|;
name|h
operator|=
name|data
operator|.
name|crect
operator|.
name|height
argument_list|()
operator|+
operator|(
name|rect
operator|.
name|bottom
operator|-
name|rect
operator|.
name|top
operator|)
expr_stmt|;
block|}
block|}
name|id
operator|=
name|CreateWindowEx
argument_list|(
name|exsty
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|windowClassName
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|title
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|style
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|appinst
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|id
condition|)
name|qErrnoWarning
argument_list|(
literal|"QWidget::create: Failed to create window"
argument_list|)
expr_stmt|;
name|setWinId
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
operator|||
operator|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
condition|)
name|SetWindowPos
argument_list|(
name|id
argument_list|,
name|HWND_TOPMOST
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
operator|||
name|paintOnScreen
argument_list|()
condition|)
block|{
comment|// create child widget
name|id
operator|=
name|CreateWindowEx
argument_list|(
name|exsty
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|windowClassName
operator|.
name|utf16
argument_list|()
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|title
operator|.
name|utf16
argument_list|()
argument_list|,
name|style
argument_list|,
name|data
operator|.
name|crect
operator|.
name|left
argument_list|()
argument_list|,
name|data
operator|.
name|crect
operator|.
name|top
argument_list|()
argument_list|,
name|data
operator|.
name|crect
operator|.
name|width
argument_list|()
argument_list|,
name|data
operator|.
name|crect
operator|.
name|height
argument_list|()
argument_list|,
name|parentw
argument_list|,
name|NULL
argument_list|,
name|appinst
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|id
condition|)
name|qErrnoWarning
argument_list|(
literal|"QWidget::create: Failed to create window"
argument_list|)
expr_stmt|;
name|SetWindowPos
argument_list|(
name|id
argument_list|,
name|HWND_TOP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
argument_list|)
expr_stmt|;
name|setWinId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|desktop
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topLevel
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
name|RECT
name|cr
decl_stmt|;
name|GetClientRect
argument_list|(
name|id
argument_list|,
operator|&
name|cr
argument_list|)
expr_stmt|;
comment|// one cannot trust cr.left and cr.top, use a correction POINT instead
name|POINT
name|pt
decl_stmt|;
name|pt
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|pt
operator|.
name|y
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
operator|||
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|)
condition|)
name|ClientToScreen
argument_list|(
name|id
argument_list|,
operator|&
name|pt
argument_list|)
expr_stmt|;
name|data
operator|.
name|crect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|pt
operator|.
name|x
operator|+
name|cr
operator|.
name|right
operator|-
literal|1
argument_list|,
name|pt
operator|.
name|y
operator|+
name|cr
operator|.
name|bottom
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|fstrut_dirty
condition|)
block|{
comment|// be nice to activeqt
name|updateFrameStrut
argument_list|()
expr_stmt|;
block|}
block|}
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
expr_stmt|;
comment|// accept move/resize events
name|hd
operator|=
literal|0
expr_stmt|;
comment|// no display context
if|if
condition|(
name|window
condition|)
block|{
comment|// got window from outside
if|if
condition|(
name|IsWindowVisible
argument_list|(
name|window
argument_list|)
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extra
operator|&&
operator|!
name|extra
operator|->
name|mask
operator|.
name|isEmpty
argument_list|()
condition|)
name|setMask_sys
argument_list|(
name|extra
operator|->
name|mask
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_NON_COMMERCIAL
argument_list|)
name|QT_NC_WIDGET_CREATE
endif|#
directive|endif
if|if
condition|(
name|q
operator|->
name|hasFocus
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
condition|)
name|q
operator|->
name|inputContext
argument_list|()
operator|->
name|setFocusWidget
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|destroyw
condition|)
block|{
name|DestroyWindow
argument_list|(
name|destroyw
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
if|if
condition|(
name|q
operator|!=
name|qt_tablet_widget
operator|&&
name|QWidgetPrivate
operator|::
name|mapper
condition|)
name|qt_tablet_init_wce
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TABLETEVENT
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DropSiteRegistered
argument_list|)
condition|)
name|registerDropSite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|maybeTopData
argument_list|()
operator|&&
name|maybeTopData
argument_list|()
operator|->
name|opacity
operator|!=
literal|255
condition|)
name|q
operator|->
name|setWindowOpacity
argument_list|(
name|maybeTopData
argument_list|()
operator|->
name|opacity
operator|/
literal|255.
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|topLevel
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|ShowWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|SW_SHOW
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*   \internal   Platform-specific part of QWidget::show(). */
end_comment
begin_function
DECL|function|show_sys
name|void
name|QWidgetPrivate
operator|::
name|show_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_NON_COMMERCIAL
argument_list|)
name|QT_NC_SHOW_WINDOW
endif|#
directive|endif
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
condition|)
return|return;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|sm
init|=
name|SW_SHOW
decl_stmt|;
name|bool
name|fakedMaximize
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_WS_WINCE_WM
if|if
condition|(
name|q
operator|->
name|isMinimized
argument_list|()
condition|)
block|{
name|sm
operator|=
name|SW_SHOWMINIMIZED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|->
name|isMaximized
argument_list|()
condition|)
block|{
name|sm
operator|=
name|SW_SHOWMAXIMIZED
expr_stmt|;
comment|// Windows will not behave correctly when we try to maximize a window which does not
comment|// have minimize nor maximize buttons in the window frame. Windows would then ignore
comment|// non-available geometry, and rather maximize the widget to the full screen, minus the
comment|// window frame (caption). So, we do a trick here, by adding a maximize button before
comment|// maximizing the widget, and then remove the maximize button afterwards.
name|Qt
operator|::
name|WindowFlags
modifier|&
name|flags
init|=
name|data
operator|.
name|window_flags
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|&&
operator|!
operator|(
name|flags
operator|&
operator|(
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|)
condition|)
block|{
name|fakedMaximize
operator|=
name|TRUE
expr_stmt|;
name|int
name|style
init|=
name|GetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|)
decl_stmt|;
name|SetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|,
name|style
operator||
name|WS_MAXIMIZEBOX
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
else|#
directive|else
comment|// Imitate minimizing on Windows mobile by hiding the widget.
if|if
condition|(
name|q
operator|->
name|isMinimized
argument_list|()
condition|)
name|sm
operator|=
name|SW_HIDE
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|q
operator|->
name|isHidden
argument_list|()
condition|)
block|{
name|sm
operator|=
name|SW_HIDE
expr_stmt|;
block|}
block|}
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_ShowWithoutActivating
argument_list|)
operator|||
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
operator|||
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
operator|||
operator|(
name|q
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Tool
operator|)
condition|)
block|{
name|sm
operator|=
name|SW_SHOWNOACTIVATE
expr_stmt|;
block|}
name|ShowWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|sm
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isMaximized
argument_list|()
operator|&&
name|q
operator|->
name|isWindow
argument_list|()
condition|)
name|qt_wince_maximize
argument_list|(
name|q
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE_WM
if|if
condition|(
operator|!
name|qt_wince_is_mobile
argument_list|()
operator|&&
name|q
operator|->
name|isFullScreen
argument_list|()
condition|)
block|{
name|HWND
name|handle
init|=
name|FindWindow
argument_list|(
literal|L"HHTaskBar"
argument_list|,
literal|L""
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
name|ShowWindow
argument_list|(
name|handle
argument_list|,
name|SW_HIDE
argument_list|)
expr_stmt|;
name|EnableWindow
argument_list|(
name|handle
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fakedMaximize
condition|)
block|{
name|int
name|style
init|=
name|GetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|)
decl_stmt|;
name|SetWindowLong
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|,
name|style
operator|&
operator|~
name|WS_MAXIMIZEBOX
argument_list|)
expr_stmt|;
name|SetWindowPos
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
operator||
name|SWP_NOZORDER
operator||
name|SWP_NOOWNERZORDER
operator||
name|SWP_FRAMECHANGED
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|fakedMaximize
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|sm
operator|==
name|SW_SHOW
condition|)
name|SetForegroundWindow
argument_list|(
name|q
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowState
name|void
name|QWidget
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowStates
name|newstate
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|WindowStates
name|oldstate
init|=
name|windowState
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldstate
operator|==
name|newstate
condition|)
return|return;
name|int
name|max
init|=
name|SW_SHOWNORMAL
decl_stmt|;
name|int
name|normal
init|=
name|SW_SHOWNOACTIVATE
decl_stmt|;
if|if
condition|(
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
operator|&&
operator|!
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
name|newstate
operator||=
name|Qt
operator|::
name|WindowActive
expr_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|normal
operator|=
name|SW_SHOWNORMAL
expr_stmt|;
if|if
condition|(
name|isWindow
argument_list|()
condition|)
block|{
name|createWinId
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure the initial size is valid, since we store it as normalGeometry below.
if|if
condition|(
operator|(
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
operator|&&
operator|!
name|isVisible
argument_list|()
operator|)
condition|)
name|adjustSize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|&&
operator|!
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
condition|)
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|&&
operator|!
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
condition|)
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|!=
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
block|{
name|int
name|style
init|=
name|GetWindowLong
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|)
operator||
name|WS_BORDER
operator||
name|WS_POPUP
operator||
name|WS_CAPTION
decl_stmt|;
name|SetWindowLong
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|SetWindowLong
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
name|GWL_EXSTYLE
argument_list|,
name|GetWindowLong
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
name|GWL_EXSTYLE
argument_list|)
operator|&
operator|~
name|WS_EX_NODRAG
argument_list|)
expr_stmt|;
name|qt_wince_unmaximize
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
name|qt_wince_maximize
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
operator|!
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
block|{
name|ShowWindow
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|?
name|max
else|:
name|normal
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
condition|)
block|{
name|QRect
name|r
init|=
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|&&
name|r
operator|.
name|width
argument_list|()
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|pos
argument_list|()
operator|!=
name|r
operator|.
name|topLeft
argument_list|()
operator|||
name|size
argument_list|()
operator|!=
name|r
operator|.
name|size
argument_list|()
condition|)
block|{
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setGeometry
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|d
operator|->
name|updateFrameStrut
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
operator|!=
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
condition|)
block|{
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|.
name|width
argument_list|()
operator|<
literal|0
operator|&&
operator|!
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
name|d
operator|->
name|topData
argument_list|()
operator|->
name|savedFlags
operator|=
operator|(
name|Qt
operator|::
name|WindowFlags
operator|)
name|GetWindowLong
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|)
expr_stmt|;
name|UINT
name|style
init|=
name|WS_CLIPCHILDREN
operator||
name|WS_CLIPSIBLINGS
operator||
name|WS_POPUP
decl_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|style
operator||=
name|WS_VISIBLE
expr_stmt|;
name|SetWindowLong
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|UINT
name|swpf
init|=
name|SWP_FRAMECHANGED
decl_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|swpf
operator||=
name|SWP_NOACTIVATE
expr_stmt|;
name|qt_wince_full_screen
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
literal|true
argument_list|,
name|swpf
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateFrameStrut
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|UINT
name|style
init|=
name|d
operator|->
name|topData
argument_list|()
operator|->
name|savedFlags
decl_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|style
operator||=
name|WS_VISIBLE
expr_stmt|;
name|SetWindowLong
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
name|GWL_STYLE
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|UINT
name|swpf
init|=
name|SWP_FRAMECHANGED
operator||
name|SWP_NOZORDER
operator||
name|SWP_NOSIZE
operator||
name|SWP_NOMOVE
decl_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|swpf
operator||=
name|SWP_NOACTIVATE
expr_stmt|;
name|qt_wince_full_screen
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|swpf
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateFrameStrut
argument_list|()
expr_stmt|;
comment|// preserve maximized state
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
name|ShowWindow
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|?
name|max
else|:
name|normal
argument_list|)
expr_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
name|qt_wince_maximize
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
block|{
name|QRect
name|r
init|=
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
decl_stmt|;
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isValid
argument_list|()
condition|)
name|setGeometry
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|(
name|oldstate
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
operator|!=
operator|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
block|{
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
name|qt_wince_minimize
argument_list|(
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
name|ShowWindow
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|qt_wince_maximize
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ShowWindow
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
name|normal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|data
operator|->
name|window_state
operator|=
name|newstate
expr_stmt|;
name|QWindowStateChangeEvent
name|e
argument_list|(
name|oldstate
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteSysExtra
name|void
name|QWidgetPrivate
operator|::
name|deleteSysExtra
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qt_wince_is_mobile
argument_list|()
operator|&&
name|q
operator|->
name|isFullScreen
argument_list|()
condition|)
block|{
name|HWND
name|handle
init|=
name|FindWindow
argument_list|(
literal|L"HHTaskBar"
argument_list|,
literal|L""
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
name|ShowWindow
argument_list|(
name|handle
argument_list|,
name|SW_SHOWNORMAL
argument_list|)
expr_stmt|;
name|EnableWindow
argument_list|(
name|handle
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setWindowOpacity_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowOpacity_sys
parameter_list|(
name|qreal
name|level
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|level
argument_list|)
expr_stmt|;
return|return;
block|}
end_function
begin_comment
comment|// The procedure does nothing, but is required for mousegrabbing to work
end_comment
begin_function
DECL|function|qJournalRecordProc
name|LRESULT
name|QT_WIN_CALLBACK
name|qJournalRecordProc
parameter_list|(
name|int
name|nCode
parameter_list|,
name|WPARAM
name|wParam
parameter_list|,
name|LPARAM
name|lParam
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|nCode
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|wParam
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|lParam
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|grabMouse
name|void
name|QWidget
operator|::
name|grabMouse
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
if|if
condition|(
name|mouseGrb
condition|)
name|mouseGrb
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|SetCapture
argument_list|(
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|mouseGrb
operator|=
name|this
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|grabMouse
name|void
name|QWidget
operator|::
name|grabMouse
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
if|if
condition|(
name|mouseGrb
condition|)
name|mouseGrb
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|SetCapture
argument_list|(
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|mouseGrbCur
operator|=
operator|new
name|QCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|SetCursor
argument_list|(
name|mouseGrbCur
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|mouseGrb
operator|=
name|this
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|releaseMouse
name|void
name|QWidget
operator|::
name|releaseMouse
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
operator|&&
name|mouseGrb
operator|==
name|this
condition|)
block|{
name|ReleaseCapture
argument_list|()
expr_stmt|;
if|if
condition|(
name|journalRec
condition|)
block|{
name|journalRec
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|mouseGrbCur
condition|)
block|{
operator|delete
name|mouseGrbCur
expr_stmt|;
name|mouseGrbCur
operator|=
literal|0
expr_stmt|;
block|}
name|mouseGrb
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|show
name|void
name|QWidget
operator|::
name|show
parameter_list|()
block|{
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|windowFlags
argument_list|()
operator|&
literal|0xff
decl_stmt|;
name|int
name|threshold
init|=
name|qApp
operator|->
name|autoMaximizeThreshold
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|threshold
operator|<
literal|0
operator|)
operator|||
operator|(
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
operator|||
operator|(
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
block|{
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|height
init|=
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|screenHeight
init|=
operator|(
name|qreal
argument_list|(
name|threshold
argument_list|)
operator|/
literal|100.0f
operator|*
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|this
argument_list|)
operator|.
name|height
argument_list|()
operator|)
decl_stmt|;
name|bool
name|maximize
init|=
name|height
operator|>
name|screenHeight
decl_stmt|;
if|if
condition|(
operator|!
name|maximize
condition|)
block|{
comment|// If we do not maximize yet we check the widget and its child widgets whether they are
comment|//vertically expanding. If one of the widgets is expanding we maximize.
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|list
init|=
name|findChildren
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|bool
name|expandingChild
init|=
name|sizePolicy
argument_list|()
operator|.
name|verticalPolicy
argument_list|()
operator|==
name|QSizePolicy
operator|::
name|Expanding
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|!
name|expandingChild
condition|;
operator|++
name|i
control|)
block|{
name|expandingChild
operator|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|sizePolicy
argument_list|()
operator|.
name|verticalPolicy
argument_list|()
operator|==
name|QSizePolicy
operator|::
name|Expanding
expr_stmt|;
block|}
name|maximize
operator|=
name|expandingChild
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|minimumSizeHint
argument_list|()
operator|.
name|height
argument_list|()
operator|>
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|this
argument_list|)
operator|.
name|height
argument_list|()
operator|)
operator|||
operator|(
name|minimumSizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|>
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|this
argument_list|)
operator|.
name|width
argument_list|()
operator|)
condition|)
name|maximize
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|(
name|flags
operator|==
name|Qt
operator|::
name|Window
operator|||
name|flags
operator|==
name|Qt
operator|::
name|Dialog
operator|)
operator|&&
name|maximize
condition|)
block|{
name|setWindowState
argument_list|(
operator|(
name|windowState
argument_list|()
operator|&
operator|~
operator|(
name|Qt
operator|::
name|WindowMinimized
operator||
name|Qt
operator|::
name|WindowFullScreen
operator|)
operator|)
operator||
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_WS_WINCE
end_comment
end_unit
