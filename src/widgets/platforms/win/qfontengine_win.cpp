begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_if
if|#
directive|if
name|_WIN32_WINNT
operator|<
literal|0x0500
end_if
begin_undef
DECL|macro|_WIN32_WINNT
undef|#
directive|undef
name|_WIN32_WINNT
end_undef
begin_define
DECL|macro|_WIN32_WINNT
define|#
directive|define
name|_WIN32_WINNT
value|0x0500
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qfontengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextengine_p.h"
end_include
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|<qpaintdevice.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<qendian.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<qthreadstorage.h>
end_include
begin_include
include|#
directive|include
file|<private/qunicodetables_p.h>
end_include
begin_include
include|#
directive|include
file|<qbitmap.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|"qpaintengine.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qnativeimage_p.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qguifunctions_wince.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//### mingw needed define
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|TT_PRIM_CSPLINE
end_ifndef
begin_define
DECL|macro|TT_PRIM_CSPLINE
define|#
directive|define
name|TT_PRIM_CSPLINE
value|3
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|MAKE_TAG
end_ifdef
begin_undef
DECL|macro|MAKE_TAG
undef|#
directive|undef
name|MAKE_TAG
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// GetFontData expects the tags in little endian ;(
end_comment
begin_define
DECL|macro|MAKE_TAG
define|#
directive|define
name|MAKE_TAG
parameter_list|(
name|ch1
parameter_list|,
name|ch2
parameter_list|,
name|ch3
parameter_list|,
name|ch4
parameter_list|)
value|(\     (((quint32)(ch4))<< 24) | \     (((quint32)(ch3))<< 16) | \     (((quint32)(ch2))<< 8) | \     ((quint32)(ch1)) \    )
end_define
begin_comment
comment|// common DC for all fonts
end_comment
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QtHDC
class|class
name|QtHDC
block|{
DECL|member|_hdc
name|HDC
name|_hdc
decl_stmt|;
public|public:
DECL|function|QtHDC
name|QtHDC
parameter_list|()
block|{
name|HDC
name|displayDC
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|_hdc
operator|=
name|CreateCompatibleDC
argument_list|(
name|displayDC
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|displayDC
argument_list|)
expr_stmt|;
block|}
DECL|function|~QtHDC
name|~
name|QtHDC
parameter_list|()
block|{
if|if
condition|(
name|_hdc
condition|)
name|DeleteDC
argument_list|(
name|_hdc
argument_list|)
expr_stmt|;
block|}
DECL|function|hdc
name|HDC
name|hdc
parameter_list|()
specifier|const
block|{
return|return
name|_hdc
return|;
block|}
block|}
class|;
end_class
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_THREAD
end_ifndef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QThreadStorage<QtHDC *>
argument_list|,
argument|local_shared_dc
argument_list|)
end_macro
begin_function
DECL|function|shared_dc
name|HDC
name|shared_dc
parameter_list|()
block|{
name|QtHDC
modifier|*
modifier|&
name|hdc
init|=
name|local_shared_dc
argument_list|()
operator|->
name|localData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hdc
condition|)
name|hdc
operator|=
operator|new
name|QtHDC
expr_stmt|;
return|return
name|hdc
operator|->
name|hdc
argument_list|()
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|shared_dc
name|HDC
name|shared_dc
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_WS_WINCE
end_ifndef
begin_typedef
DECL|typedef|PtrGetCharWidthI
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrGetCharWidthI
function_decl|)
parameter_list|(
name|HDC
parameter_list|,
name|UINT
parameter_list|,
name|UINT
parameter_list|,
name|LPWORD
parameter_list|,
name|LPINT
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrGetCharWidthI
specifier|static
name|PtrGetCharWidthI
name|ptrGetCharWidthI
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|resolvedGetCharWidthI
specifier|static
name|bool
name|resolvedGetCharWidthI
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|resolveGetCharWidthI
specifier|static
name|void
name|resolveGetCharWidthI
parameter_list|()
block|{
if|if
condition|(
name|resolvedGetCharWidthI
condition|)
return|return;
name|resolvedGetCharWidthI
operator|=
literal|true
expr_stmt|;
name|ptrGetCharWidthI
operator|=
operator|(
name|PtrGetCharWidthI
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"gdi32"
argument_list|)
argument_list|,
literal|"GetCharWidthI"
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(Q_WS_WINCE)
end_comment
begin_comment
comment|// defined in qtextengine_win.cpp
end_comment
begin_typedef
DECL|typedef|SCRIPT_CACHE
typedef|typedef
name|void
modifier|*
name|SCRIPT_CACHE
typedef|;
end_typedef
begin_typedef
DECL|typedef|fScriptFreeCache
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|fScriptFreeCache
function_decl|)
parameter_list|(
name|SCRIPT_CACHE
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
specifier|extern
name|fScriptFreeCache
name|ScriptFreeCache
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|getUInt
specifier|static
specifier|inline
name|quint32
name|getUInt
parameter_list|(
name|unsigned
name|char
modifier|*
name|p
parameter_list|)
block|{
name|quint32
name|val
decl_stmt|;
name|val
operator|=
operator|*
name|p
operator|++
operator|<<
literal|24
expr_stmt|;
name|val
operator||=
operator|*
name|p
operator|++
operator|<<
literal|16
expr_stmt|;
name|val
operator||=
operator|*
name|p
operator|++
operator|<<
literal|8
expr_stmt|;
name|val
operator||=
operator|*
name|p
expr_stmt|;
return|return
name|val
return|;
block|}
end_function
begin_function
DECL|function|getUShort
specifier|static
specifier|inline
name|quint16
name|getUShort
parameter_list|(
name|unsigned
name|char
modifier|*
name|p
parameter_list|)
block|{
name|quint16
name|val
decl_stmt|;
name|val
operator|=
operator|*
name|p
operator|++
operator|<<
literal|8
expr_stmt|;
name|val
operator||=
operator|*
name|p
expr_stmt|;
return|return
name|val
return|;
block|}
end_function
begin_comment
comment|// general font engine
end_comment
begin_function
DECL|function|lineThickness
name|QFixed
name|QFontEngineWin
operator|::
name|lineThickness
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|lineWidth
operator|>
literal|0
condition|)
return|return
name|lineWidth
return|;
return|return
name|QFontEngine
operator|::
name|lineThickness
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getOutlineTextMetric
specifier|static
name|OUTLINETEXTMETRIC
modifier|*
name|getOutlineTextMetric
parameter_list|(
name|HDC
name|hdc
parameter_list|)
block|{
name|int
name|size
decl_stmt|;
name|size
operator|=
name|GetOutlineTextMetrics
argument_list|(
name|hdc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|OUTLINETEXTMETRIC
modifier|*
name|otm
init|=
operator|(
name|OUTLINETEXTMETRIC
operator|*
operator|)
name|malloc
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|GetOutlineTextMetrics
argument_list|(
name|hdc
argument_list|,
name|size
argument_list|,
name|otm
argument_list|)
expr_stmt|;
return|return
name|otm
return|;
block|}
end_function
begin_function
DECL|function|getCMap
name|void
name|QFontEngineWin
operator|::
name|getCMap
parameter_list|()
block|{
name|ttf
operator|=
call|(
name|bool
call|)
argument_list|(
name|tm
operator|.
name|tmPitchAndFamily
operator|&
name|TMPF_TRUETYPE
argument_list|)
expr_stmt|;
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
expr_stmt|;
name|bool
name|symb
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ttf
condition|)
block|{
name|cmapTable
operator|=
name|getSfntTable
argument_list|(
name|qbswap
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|MAKE_TAG
argument_list|(
literal|'c'
argument_list|,
literal|'m'
argument_list|,
literal|'a'
argument_list|,
literal|'p'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
name|cmap
operator|=
name|QFontEngine
operator|::
name|getCMap
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|cmapTable
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|cmapTable
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|symb
argument_list|,
operator|&
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cmap
condition|)
block|{
name|ttf
operator|=
literal|false
expr_stmt|;
name|symb
operator|=
literal|false
expr_stmt|;
block|}
name|symbol
operator|=
name|symb
expr_stmt|;
name|designToDevice
operator|=
literal|1
expr_stmt|;
name|_faceId
operator|.
name|index
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|cmap
condition|)
block|{
name|OUTLINETEXTMETRIC
modifier|*
name|otm
init|=
name|getOutlineTextMetric
argument_list|(
name|hdc
argument_list|)
decl_stmt|;
name|designToDevice
operator|=
name|QFixed
argument_list|(
operator|(
name|int
operator|)
name|otm
operator|->
name|otmEMSquare
argument_list|)
operator|/
name|int
argument_list|(
name|otm
operator|->
name|otmTextMetrics
operator|.
name|tmHeight
argument_list|)
expr_stmt|;
name|unitsPerEm
operator|=
name|otm
operator|->
name|otmEMSquare
expr_stmt|;
name|x_height
operator|=
operator|(
name|int
operator|)
name|otm
operator|->
name|otmsXHeight
expr_stmt|;
name|loadKerningPairs
argument_list|(
name|designToDevice
argument_list|)
expr_stmt|;
name|_faceId
operator|.
name|filename
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
operator|(
operator|(
name|char
operator|*
operator|)
name|otm
operator|+
operator|(
name|quintptr
operator|)
name|otm
operator|->
name|otmpFullName
operator|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
name|lineWidth
operator|=
name|otm
operator|->
name|otmsUnderscoreSize
expr_stmt|;
name|fsType
operator|=
name|otm
operator|->
name|otmfsType
expr_stmt|;
name|free
argument_list|(
name|otm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unitsPerEm
operator|=
name|tm
operator|.
name|tmHeight
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|getChar
specifier|inline
name|unsigned
name|int
name|getChar
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
modifier|&
name|i
parameter_list|,
specifier|const
name|int
name|len
parameter_list|)
block|{
name|uint
name|ucs4
init|=
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
index|[
name|i
index|]
operator|.
name|isHighSurrogate
argument_list|()
operator|&&
name|i
operator|<
name|len
operator|-
literal|1
operator|&&
name|str
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|isLowSurrogate
argument_list|()
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|ucs4
operator|=
name|QChar
operator|::
name|surrogateToUcs4
argument_list|(
name|ucs4
argument_list|,
name|str
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ucs4
return|;
block|}
end_function
begin_function
DECL|function|getGlyphIndexes
name|int
name|QFontEngineWin
operator|::
name|getGlyphIndexes
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
name|numChars
parameter_list|,
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|bool
name|mirrored
parameter_list|)
specifier|const
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|glyph_pos
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|mirrored
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
block|{
else|#
directive|else
if|if
condition|(
name|symbol
condition|)
block|{
for|for
control|(
init|;
name|i
operator|<
name|numChars
condition|;
operator|++
name|i
operator|,
operator|++
name|glyph_pos
control|)
block|{
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|str
argument_list|,
name|i
argument_list|,
name|numChars
argument_list|)
decl_stmt|;
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|&&
name|uc
operator|<
literal|0x100
condition|)
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
operator|+
literal|0xf000
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ttf
condition|)
block|{
for|for
control|(
init|;
name|i
operator|<
name|numChars
condition|;
operator|++
name|i
operator|,
operator|++
name|glyph_pos
control|)
block|{
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|str
argument_list|,
name|i
argument_list|,
name|numChars
argument_list|)
decl_stmt|;
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|QChar
operator|::
name|mirroredChar
argument_list|(
name|uc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
endif|#
directive|endif
name|wchar_t
name|first
init|=
name|tm
operator|.
name|tmFirstChar
decl_stmt|;
name|wchar_t
name|last
init|=
name|tm
operator|.
name|tmLastChar
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|numChars
condition|;
operator|++
name|i
operator|,
operator|++
name|glyph_pos
control|)
block|{
name|uint
name|ucs
init|=
name|QChar
operator|::
name|mirroredChar
argument_list|(
name|getChar
argument_list|(
name|str
argument_list|,
name|i
argument_list|,
name|numChars
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
ifdef|#
directive|ifdef
name|Q_WS_WINCE
name|tm
operator|.
name|tmFirstChar
operator|>
literal|60000
operator|||
comment|// see line 375
endif|#
directive|endif
name|ucs
operator|>=
name|first
operator|&&
name|ucs
operator|<=
name|last
condition|)
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|ucs
expr_stmt|;
else|else
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
block|{
else|#
directive|else
if|if
condition|(
name|symbol
condition|)
block|{
for|for
control|(
init|;
name|i
operator|<
name|numChars
condition|;
operator|++
name|i
operator|,
operator|++
name|glyph_pos
control|)
block|{
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|str
argument_list|,
name|i
argument_list|,
name|numChars
argument_list|)
decl_stmt|;
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
operator|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|&&
name|uc
operator|<
literal|0x100
condition|)
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
operator|+
literal|0xf000
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ttf
condition|)
block|{
for|for
control|(
init|;
name|i
operator|<
name|numChars
condition|;
operator|++
name|i
operator|,
operator|++
name|glyph_pos
control|)
block|{
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|str
argument_list|,
name|i
argument_list|,
name|numChars
argument_list|)
decl_stmt|;
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
endif|#
directive|endif
name|wchar_t
name|first
init|=
name|tm
operator|.
name|tmFirstChar
decl_stmt|;
name|wchar_t
name|last
init|=
name|tm
operator|.
name|tmLastChar
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|numChars
condition|;
operator|++
name|i
operator|,
operator|++
name|glyph_pos
control|)
block|{
name|uint
name|uc
init|=
name|getChar
argument_list|(
name|str
argument_list|,
name|i
argument_list|,
name|numChars
argument_list|)
decl_stmt|;
if|if
condition|(
ifdef|#
directive|ifdef
name|Q_WS_WINCE
name|tm
operator|.
name|tmFirstChar
operator|>
literal|60000
operator|||
comment|// see comment in QFontEngineWin
endif|#
directive|endif
name|uc
operator|>=
name|first
operator|&&
name|uc
operator|<=
name|last
condition|)
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
name|uc
expr_stmt|;
else|else
name|glyphs
operator|->
name|glyphs
index|[
name|glyph_pos
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
name|glyphs
operator|->
name|numGlyphs
operator|=
name|glyph_pos
expr_stmt|;
return|return
name|glyph_pos
return|;
block|}
DECL|function|QFontEngineWin
name|QFontEngineWin
operator|::
name|QFontEngineWin
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|HFONT
name|_hfont
parameter_list|,
name|bool
name|stockFont
parameter_list|,
name|LOGFONT
name|lf
parameter_list|)
block|{
comment|//qDebug("regular windows font engine created: font='%s', size=%d", name, lf.lfHeight);
name|_name
operator|=
name|name
expr_stmt|;
name|cmap
operator|=
literal|0
expr_stmt|;
name|hfont
operator|=
name|_hfont
expr_stmt|;
name|logfont
operator|=
name|lf
expr_stmt|;
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
expr_stmt|;
name|this
operator|->
name|stockFont
operator|=
name|stockFont
expr_stmt|;
name|fontDef
operator|.
name|pixelSize
operator|=
operator|-
name|lf
operator|.
name|lfHeight
expr_stmt|;
name|lbearing
operator|=
name|SHRT_MIN
expr_stmt|;
name|rbearing
operator|=
name|SHRT_MIN
expr_stmt|;
name|synthesized_flags
operator|=
operator|-
literal|1
expr_stmt|;
name|lineWidth
operator|=
operator|-
literal|1
expr_stmt|;
name|x_height
operator|=
operator|-
literal|1
expr_stmt|;
name|BOOL
name|res
init|=
name|GetTextMetrics
argument_list|(
name|hdc
argument_list|,
operator|&
name|tm
argument_list|)
decl_stmt|;
name|fontDef
operator|.
name|fixedPitch
operator|=
operator|!
operator|(
name|tm
operator|.
name|tmPitchAndFamily
operator|&
name|TMPF_FIXED_PITCH
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"QFontEngineWin: GetTextMetrics failed"
argument_list|)
expr_stmt|;
name|ZeroMemory
argument_list|(
operator|&
name|tm
argument_list|,
sizeof|sizeof
argument_list|(
name|TEXTMETRIC
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cache_cost
operator|=
name|tm
operator|.
name|tmHeight
operator|*
name|tm
operator|.
name|tmAveCharWidth
operator|*
literal|2000
expr_stmt|;
name|getCMap
argument_list|()
expr_stmt|;
name|widthCache
operator|=
literal|0
expr_stmt|;
name|widthCacheSize
operator|=
literal|0
expr_stmt|;
name|designAdvances
operator|=
literal|0
expr_stmt|;
name|designAdvancesSize
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
if|if
condition|(
operator|!
name|resolvedGetCharWidthI
condition|)
name|resolveGetCharWidthI
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|~QFontEngineWin
name|QFontEngineWin
operator|::
name|~
name|QFontEngineWin
parameter_list|()
block|{
if|if
condition|(
name|designAdvances
condition|)
name|free
argument_list|(
name|designAdvances
argument_list|)
expr_stmt|;
if|if
condition|(
name|widthCache
condition|)
name|free
argument_list|(
name|widthCache
argument_list|)
expr_stmt|;
comment|// make sure we aren't by accident still selected
name|SelectObject
argument_list|(
name|shared_dc
argument_list|()
argument_list|,
operator|(
name|HFONT
operator|)
name|GetStockObject
argument_list|(
name|SYSTEM_FONT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stockFont
condition|)
block|{
if|if
condition|(
operator|!
name|DeleteObject
argument_list|(
name|hfont
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
literal|"QFontEngineWin: failed to delete non-stock font..."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|selectDesignFont
name|HGDIOBJ
name|QFontEngineWin
operator|::
name|selectDesignFont
parameter_list|()
specifier|const
block|{
name|LOGFONT
name|f
init|=
name|logfont
decl_stmt|;
name|f
operator|.
name|lfHeight
operator|=
name|unitsPerEm
expr_stmt|;
name|HFONT
name|designFont
init|=
name|CreateFontIndirect
argument_list|(
operator|&
name|f
argument_list|)
decl_stmt|;
return|return
name|SelectObject
argument_list|(
name|shared_dc
argument_list|()
argument_list|,
name|designFont
argument_list|)
return|;
block|}
DECL|function|stringToCMap
name|bool
name|QFontEngineWin
operator|::
name|stringToCMap
parameter_list|(
specifier|const
name|QChar
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|int
modifier|*
name|nglyphs
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|*
name|nglyphs
operator|<
name|len
condition|)
block|{
operator|*
name|nglyphs
operator|=
name|len
expr_stmt|;
return|return
literal|false
return|;
block|}
operator|*
name|nglyphs
operator|=
name|getGlyphIndexes
argument_list|(
name|str
argument_list|,
name|len
argument_list|,
name|glyphs
argument_list|,
name|flags
operator|&
name|QTextEngine
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QTextEngine
operator|::
name|GlyphIndicesOnly
condition|)
return|return
literal|true
return|;
name|recalcAdvances
argument_list|(
name|glyphs
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|calculateTTFGlyphWidth
specifier|inline
name|void
name|calculateTTFGlyphWidth
parameter_list|(
name|HDC
name|hdc
parameter_list|,
name|UINT
name|glyph
parameter_list|,
name|int
modifier|&
name|width
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
name|GetCharWidth32
argument_list|(
name|hdc
argument_list|,
name|glyph
argument_list|,
name|glyph
argument_list|,
operator|&
name|width
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|ptrGetCharWidthI
condition|)
name|ptrGetCharWidthI
argument_list|(
name|hdc
argument_list|,
name|glyph
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|&
name|width
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|recalcAdvances
name|void
name|QFontEngineWin
operator|::
name|recalcAdvances
parameter_list|(
name|QGlyphLayout
modifier|*
name|glyphs
parameter_list|,
name|QTextEngine
operator|::
name|ShaperFlags
name|flags
parameter_list|)
specifier|const
block|{
name|HGDIOBJ
name|oldFont
init|=
literal|0
decl_stmt|;
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
if|if
condition|(
name|ttf
operator|&&
operator|(
name|flags
operator|&
name|QTextEngine
operator|::
name|DesignMetrics
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|->
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
name|unsigned
name|int
name|glyph
init|=
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|int
argument_list|(
name|glyph
argument_list|)
operator|>=
name|designAdvancesSize
condition|)
block|{
name|int
name|newSize
init|=
operator|(
name|glyph
operator|+
literal|256
operator|)
operator|>>
literal|8
operator|<<
literal|8
decl_stmt|;
name|designAdvances
operator|=
name|q_check_ptr
argument_list|(
operator|(
name|QFixed
operator|*
operator|)
name|realloc
argument_list|(
name|designAdvances
argument_list|,
name|newSize
operator|*
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|designAdvancesSize
init|;
name|i
operator|<
name|newSize
condition|;
operator|++
name|i
control|)
name|designAdvances
index|[
name|i
index|]
operator|=
operator|-
literal|1000000
expr_stmt|;
name|designAdvancesSize
operator|=
name|newSize
expr_stmt|;
block|}
if|if
condition|(
name|designAdvances
index|[
name|glyph
index|]
operator|<
operator|-
literal|999999
condition|)
block|{
if|if
condition|(
operator|!
name|oldFont
condition|)
name|oldFont
operator|=
name|selectDesignFont
argument_list|()
expr_stmt|;
name|int
name|width
init|=
literal|0
decl_stmt|;
name|calculateTTFGlyphWidth
argument_list|(
name|hdc
argument_list|,
name|glyph
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|designAdvances
index|[
name|glyph
index|]
operator|=
name|QFixed
argument_list|(
name|width
argument_list|)
operator|/
name|designToDevice
expr_stmt|;
block|}
name|glyphs
operator|->
name|advances_x
index|[
name|i
index|]
operator|=
name|designAdvances
index|[
name|glyph
index|]
expr_stmt|;
name|glyphs
operator|->
name|advances_y
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|oldFont
condition|)
name|DeleteObject
argument_list|(
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|oldFont
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|->
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
name|unsigned
name|int
name|glyph
init|=
name|glyphs
operator|->
name|glyphs
index|[
name|i
index|]
decl_stmt|;
name|glyphs
operator|->
name|advances_y
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|glyph
operator|>=
name|widthCacheSize
condition|)
block|{
name|int
name|newSize
init|=
operator|(
name|glyph
operator|+
literal|256
operator|)
operator|>>
literal|8
operator|<<
literal|8
decl_stmt|;
name|widthCache
operator|=
name|q_check_ptr
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|)
name|realloc
argument_list|(
name|widthCache
argument_list|,
name|newSize
operator|*
sizeof|sizeof
argument_list|(
name|QFixed
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|widthCache
operator|+
name|widthCacheSize
argument_list|,
literal|0
argument_list|,
name|newSize
operator|-
name|widthCacheSize
argument_list|)
expr_stmt|;
name|widthCacheSize
operator|=
name|newSize
expr_stmt|;
block|}
name|glyphs
operator|->
name|advances_x
index|[
name|i
index|]
operator|=
name|widthCache
index|[
name|glyph
index|]
expr_stmt|;
comment|// font-width cache failed
if|if
condition|(
name|glyphs
operator|->
name|advances_x
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
name|int
name|width
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|oldFont
condition|)
name|oldFont
operator|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ttf
condition|)
block|{
name|QChar
name|ch
index|[
literal|2
index|]
init|=
block|{
name|ushort
argument_list|(
name|glyph
argument_list|)
block|,
literal|0
block|}
decl_stmt|;
name|int
name|chrLen
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|glyph
operator|>
literal|0xffff
condition|)
block|{
name|ch
index|[
literal|0
index|]
operator|=
name|QChar
operator|::
name|highSurrogate
argument_list|(
name|glyph
argument_list|)
expr_stmt|;
name|ch
index|[
literal|1
index|]
operator|=
name|QChar
operator|::
name|lowSurrogate
argument_list|(
name|glyph
argument_list|)
expr_stmt|;
operator|++
name|chrLen
expr_stmt|;
block|}
name|SIZE
name|size
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|GetTextExtentPoint32
argument_list|(
name|hdc
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|ch
argument_list|,
name|chrLen
argument_list|,
operator|&
name|size
argument_list|)
expr_stmt|;
name|width
operator|=
name|size
operator|.
name|cx
expr_stmt|;
block|}
else|else
block|{
name|calculateTTFGlyphWidth
argument_list|(
name|hdc
argument_list|,
name|glyph
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
name|glyphs
operator|->
name|advances_x
index|[
name|i
index|]
operator|=
name|width
expr_stmt|;
comment|// if glyph's within cache range, store it for later
if|if
condition|(
name|width
operator|>
literal|0
operator|&&
name|width
operator|<
literal|0x100
condition|)
name|widthCache
index|[
name|glyph
index|]
operator|=
name|width
expr_stmt|;
block|}
block|}
if|if
condition|(
name|oldFont
condition|)
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|oldFont
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineWin
operator|::
name|boundingBox
parameter_list|(
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|)
block|{
if|if
condition|(
name|glyphs
operator|.
name|numGlyphs
operator|==
literal|0
condition|)
return|return
name|glyph_metrics_t
argument_list|()
return|;
name|QFixed
name|w
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphs
operator|.
name|numGlyphs
condition|;
operator|++
name|i
control|)
name|w
operator|+=
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|glyph_metrics_t
argument_list|(
literal|0
argument_list|,
operator|-
name|tm
operator|.
name|tmAscent
argument_list|,
name|w
operator|-
name|lastRightBearing
argument_list|(
name|glyphs
argument_list|)
argument_list|,
name|tm
operator|.
name|tmHeight
argument_list|,
name|w
argument_list|,
literal|0
argument_list|)
return|;
block|}
ifndef|#
directive|ifndef
name|Q_WS_WINCE
DECL|function|getOutlineMetrics
name|bool
name|QFontEngineWin
operator|::
name|getOutlineMetrics
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|,
name|glyph_metrics_t
modifier|*
name|metrics
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|metrics
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
name|GLYPHMETRICS
name|gm
decl_stmt|;
name|DWORD
name|res
init|=
literal|0
decl_stmt|;
name|MAT2
name|mat
decl_stmt|;
name|mat
operator|.
name|eM11
operator|.
name|value
operator|=
name|mat
operator|.
name|eM22
operator|.
name|value
operator|=
literal|1
expr_stmt|;
name|mat
operator|.
name|eM11
operator|.
name|fract
operator|=
name|mat
operator|.
name|eM22
operator|.
name|fract
operator|=
literal|0
expr_stmt|;
name|mat
operator|.
name|eM21
operator|.
name|value
operator|=
name|mat
operator|.
name|eM12
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|mat
operator|.
name|eM21
operator|.
name|fract
operator|=
name|mat
operator|.
name|eM12
operator|.
name|fract
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
comment|// We need to set the transform using the HDC's world
comment|// matrix rather than using the MAT2 above, because the
comment|// results provided when transforming via MAT2 does not
comment|// match the glyphs that are drawn using a WorldTransform
name|XFORM
name|xform
decl_stmt|;
name|xform
operator|.
name|eM11
operator|=
name|t
operator|.
name|m11
argument_list|()
expr_stmt|;
name|xform
operator|.
name|eM12
operator|=
name|t
operator|.
name|m12
argument_list|()
expr_stmt|;
name|xform
operator|.
name|eM21
operator|=
name|t
operator|.
name|m21
argument_list|()
expr_stmt|;
name|xform
operator|.
name|eM22
operator|=
name|t
operator|.
name|m22
argument_list|()
expr_stmt|;
name|xform
operator|.
name|eDx
operator|=
literal|0
expr_stmt|;
name|xform
operator|.
name|eDy
operator|=
literal|0
expr_stmt|;
name|SetGraphicsMode
argument_list|(
name|hdc
argument_list|,
name|GM_ADVANCED
argument_list|)
expr_stmt|;
name|SetWorldTransform
argument_list|(
name|hdc
argument_list|,
operator|&
name|xform
argument_list|)
expr_stmt|;
block|}
name|uint
name|format
init|=
name|GGO_METRICS
decl_stmt|;
if|if
condition|(
name|ttf
condition|)
name|format
operator||=
name|GGO_GLYPH_INDEX
expr_stmt|;
name|res
operator|=
name|GetGlyphOutline
argument_list|(
name|hdc
argument_list|,
name|glyph
argument_list|,
name|format
argument_list|,
operator|&
name|gm
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|mat
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
name|XFORM
name|xform
decl_stmt|;
name|xform
operator|.
name|eM11
operator|=
name|xform
operator|.
name|eM22
operator|=
literal|1
expr_stmt|;
name|xform
operator|.
name|eM12
operator|=
name|xform
operator|.
name|eM21
operator|=
name|xform
operator|.
name|eDx
operator|=
name|xform
operator|.
name|eDy
operator|=
literal|0
expr_stmt|;
name|SetWorldTransform
argument_list|(
name|hdc
argument_list|,
operator|&
name|xform
argument_list|)
expr_stmt|;
name|SetGraphicsMode
argument_list|(
name|hdc
argument_list|,
name|GM_COMPATIBLE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|res
operator|!=
name|GDI_ERROR
condition|)
block|{
operator|*
name|metrics
operator|=
name|glyph_metrics_t
argument_list|(
name|gm
operator|.
name|gmptGlyphOrigin
operator|.
name|x
argument_list|,
operator|-
name|gm
operator|.
name|gmptGlyphOrigin
operator|.
name|y
argument_list|,
operator|(
name|int
operator|)
name|gm
operator|.
name|gmBlackBoxX
argument_list|,
operator|(
name|int
operator|)
name|gm
operator|.
name|gmBlackBoxY
argument_list|,
name|gm
operator|.
name|gmCellIncX
argument_list|,
name|gm
operator|.
name|gmCellIncY
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
endif|#
directive|endif
DECL|function|boundingBox
name|glyph_metrics_t
name|QFontEngineWin
operator|::
name|boundingBox
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
expr_stmt|;
name|glyph_metrics_t
name|glyphMetrics
decl_stmt|;
name|bool
name|success
init|=
name|getOutlineMetrics
argument_list|(
name|glyph
argument_list|,
name|t
argument_list|,
operator|&
name|glyphMetrics
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ttf
operator|&&
operator|!
name|success
condition|)
block|{
comment|// Bitmap fonts
name|wchar_t
name|ch
init|=
name|glyph
decl_stmt|;
name|ABCFLOAT
name|abc
decl_stmt|;
name|GetCharABCWidthsFloat
argument_list|(
name|hdc
argument_list|,
name|ch
argument_list|,
name|ch
argument_list|,
operator|&
name|abc
argument_list|)
expr_stmt|;
name|int
name|width
init|=
name|qRound
argument_list|(
name|abc
operator|.
name|abcfB
argument_list|)
decl_stmt|;
return|return
name|glyph_metrics_t
argument_list|(
name|QFixed
operator|::
name|fromReal
argument_list|(
name|abc
operator|.
name|abcfA
argument_list|)
argument_list|,
operator|-
name|tm
operator|.
name|tmAscent
argument_list|,
name|width
argument_list|,
name|tm
operator|.
name|tmHeight
argument_list|,
name|width
argument_list|,
literal|0
argument_list|)
operator|.
name|transformed
argument_list|(
name|t
argument_list|)
return|;
block|}
return|return
name|glyphMetrics
return|;
else|#
directive|else
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
name|HGDIOBJ
name|oldFont
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
decl_stmt|;
name|ABC
name|abc
decl_stmt|;
name|int
name|width
decl_stmt|;
name|int
name|advance
decl_stmt|;
ifdef|#
directive|ifdef
name|GWES_MGTT
comment|// true type fonts
if|if
condition|(
name|GetCharABCWidths
argument_list|(
name|hdc
argument_list|,
name|glyph
argument_list|,
name|glyph
argument_list|,
operator|&
name|abc
argument_list|)
condition|)
block|{
name|width
operator|=
name|qAbs
argument_list|(
name|abc
operator|.
name|abcA
argument_list|)
operator|+
name|abc
operator|.
name|abcB
operator|+
name|qAbs
argument_list|(
name|abc
operator|.
name|abcC
argument_list|)
expr_stmt|;
name|advance
operator|=
name|abc
operator|.
name|abcA
operator|+
name|abc
operator|.
name|abcB
operator|+
name|abc
operator|.
name|abcC
expr_stmt|;
block|}
elseif|else
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|GWES_MGRAST
argument_list|)
operator|||
name|defined
argument_list|(
name|GWES_MGRAST2
argument_list|)
comment|// raster fonts
if|if
condition|(
name|GetCharWidth32
argument_list|(
name|hdc
argument_list|,
name|glyph
argument_list|,
name|glyph
argument_list|,
operator|&
name|width
argument_list|)
condition|)
block|{
name|advance
operator|=
name|width
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
comment|// fallback
name|width
operator|=
name|tm
operator|.
name|tmMaxCharWidth
expr_stmt|;
name|advance
operator|=
name|width
expr_stmt|;
block|}
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|oldFont
argument_list|)
expr_stmt|;
return|return
name|glyph_metrics_t
argument_list|(
literal|0
argument_list|,
operator|-
name|tm
operator|.
name|tmAscent
argument_list|,
name|width
argument_list|,
name|tm
operator|.
name|tmHeight
argument_list|,
name|advance
argument_list|,
literal|0
argument_list|)
operator|.
name|transformed
argument_list|(
name|t
argument_list|)
return|;
endif|#
directive|endif
block|}
DECL|function|ascent
name|QFixed
name|QFontEngineWin
operator|::
name|ascent
parameter_list|()
specifier|const
block|{
return|return
name|tm
operator|.
name|tmAscent
return|;
block|}
DECL|function|descent
name|QFixed
name|QFontEngineWin
operator|::
name|descent
parameter_list|()
specifier|const
block|{
comment|// ### we substract 1 to even out the historical +1 in QFontMetrics's
comment|// ### height=asc+desc+1 equation. Fix in Qt5.
return|return
name|tm
operator|.
name|tmDescent
operator|-
literal|1
return|;
block|}
DECL|function|leading
name|QFixed
name|QFontEngineWin
operator|::
name|leading
parameter_list|()
specifier|const
block|{
return|return
name|tm
operator|.
name|tmExternalLeading
return|;
block|}
DECL|function|xHeight
name|QFixed
name|QFontEngineWin
operator|::
name|xHeight
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|x_height
operator|>=
literal|0
condition|)
return|return
name|x_height
return|;
return|return
name|QFontEngine
operator|::
name|xHeight
argument_list|()
return|;
block|}
DECL|function|averageCharWidth
name|QFixed
name|QFontEngineWin
operator|::
name|averageCharWidth
parameter_list|()
specifier|const
block|{
return|return
name|tm
operator|.
name|tmAveCharWidth
return|;
block|}
DECL|function|maxCharWidth
name|qreal
name|QFontEngineWin
operator|::
name|maxCharWidth
parameter_list|()
specifier|const
block|{
return|return
name|tm
operator|.
name|tmMaxCharWidth
return|;
block|}
DECL|enumerator|max_font_count
enum|enum
block|{
name|max_font_count
init|=
literal|256
block|}
enum|;
DECL|variable|char_table
specifier|static
specifier|const
name|ushort
name|char_table
index|[]
init|=
block|{
literal|40
block|,
literal|67
block|,
literal|70
block|,
literal|75
block|,
literal|86
block|,
literal|88
block|,
literal|89
block|,
literal|91
block|,
literal|102
block|,
literal|114
block|,
literal|124
block|,
literal|127
block|,
literal|205
block|,
literal|645
block|,
literal|884
block|,
literal|922
block|,
literal|1070
block|,
literal|12386
block|,
literal|0
block|}
decl_stmt|;
DECL|variable|char_table_entries
specifier|static
specifier|const
name|int
name|char_table_entries
init|=
sizeof|sizeof
argument_list|(
name|char_table
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_MINGW
DECL|function|getGlyphBearings
name|void
name|QFontEngineWin
operator|::
name|getGlyphBearings
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|qreal
modifier|*
name|leftBearing
parameter_list|,
name|qreal
modifier|*
name|rightBearing
parameter_list|)
block|{
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
if|if
condition|(
name|ttf
condition|)
endif|#
directive|endif
block|{
name|ABC
name|abcWidths
decl_stmt|;
name|GetCharABCWidthsI
argument_list|(
name|hdc
argument_list|,
name|glyph
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|&
name|abcWidths
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftBearing
condition|)
operator|*
name|leftBearing
operator|=
name|abcWidths
operator|.
name|abcA
expr_stmt|;
if|if
condition|(
name|rightBearing
condition|)
operator|*
name|rightBearing
operator|=
name|abcWidths
operator|.
name|abcC
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_WS_WINCE
else|else
block|{
name|QFontEngine
operator|::
name|getGlyphBearings
argument_list|(
name|glyph
argument_list|,
name|leftBearing
argument_list|,
name|rightBearing
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
endif|#
directive|endif
comment|// Q_CC_MINGW
DECL|function|minLeftBearing
name|qreal
name|QFontEngineWin
operator|::
name|minLeftBearing
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|lbearing
operator|==
name|SHRT_MIN
condition|)
name|minRightBearing
argument_list|()
expr_stmt|;
comment|// calculates both
return|return
name|lbearing
return|;
block|}
DECL|function|minRightBearing
name|qreal
name|QFontEngineWin
operator|::
name|minRightBearing
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|Q_WS_WINCE
if|if
condition|(
name|rbearing
operator|==
name|SHRT_MIN
condition|)
block|{
name|int
name|ml
init|=
literal|0
decl_stmt|;
name|int
name|mr
init|=
literal|0
decl_stmt|;
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
expr_stmt|;
if|if
condition|(
name|ttf
condition|)
block|{
name|ABC
modifier|*
name|abc
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
name|tm
operator|.
name|tmLastChar
operator|-
name|tm
operator|.
name|tmFirstChar
decl_stmt|;
if|if
condition|(
name|n
operator|<=
name|max_font_count
condition|)
block|{
name|abc
operator|=
operator|new
name|ABC
index|[
name|n
operator|+
literal|1
index|]
expr_stmt|;
name|GetCharABCWidths
argument_list|(
name|hdc
argument_list|,
name|tm
operator|.
name|tmFirstChar
argument_list|,
name|tm
operator|.
name|tmLastChar
argument_list|,
name|abc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|abc
operator|=
operator|new
name|ABC
index|[
name|char_table_entries
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|char_table_entries
condition|;
name|i
operator|++
control|)
name|GetCharABCWidths
argument_list|(
name|hdc
argument_list|,
name|char_table
index|[
name|i
index|]
argument_list|,
name|char_table
index|[
name|i
index|]
argument_list|,
name|abc
operator|+
name|i
argument_list|)
expr_stmt|;
name|n
operator|=
name|char_table_entries
expr_stmt|;
block|}
name|ml
operator|=
name|abc
index|[
literal|0
index|]
operator|.
name|abcA
expr_stmt|;
name|mr
operator|=
name|abc
index|[
literal|0
index|]
operator|.
name|abcC
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|abc
index|[
name|i
index|]
operator|.
name|abcA
operator|+
name|abc
index|[
name|i
index|]
operator|.
name|abcB
operator|+
name|abc
index|[
name|i
index|]
operator|.
name|abcC
operator|!=
literal|0
condition|)
block|{
name|ml
operator|=
name|qMin
argument_list|(
name|ml
argument_list|,
name|abc
index|[
name|i
index|]
operator|.
name|abcA
argument_list|)
expr_stmt|;
name|mr
operator|=
name|qMin
argument_list|(
name|mr
argument_list|,
name|abc
index|[
name|i
index|]
operator|.
name|abcC
argument_list|)
expr_stmt|;
block|}
block|}
operator|delete
index|[]
name|abc
expr_stmt|;
block|}
name|lbearing
operator|=
name|ml
expr_stmt|;
name|rbearing
operator|=
name|mr
expr_stmt|;
block|}
return|return
name|rbearing
return|;
else|#
directive|else
if|if
condition|(
name|rbearing
operator|==
name|SHRT_MIN
condition|)
block|{
name|int
name|ml
init|=
literal|0
decl_stmt|;
name|int
name|mr
init|=
literal|0
decl_stmt|;
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
expr_stmt|;
if|if
condition|(
name|ttf
condition|)
block|{
name|ABC
modifier|*
name|abc
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
name|tm
operator|.
name|tmLastChar
operator|-
name|tm
operator|.
name|tmFirstChar
decl_stmt|;
if|if
condition|(
name|n
operator|<=
name|max_font_count
condition|)
block|{
name|abc
operator|=
operator|new
name|ABC
index|[
name|n
operator|+
literal|1
index|]
expr_stmt|;
name|GetCharABCWidths
argument_list|(
name|hdc
argument_list|,
name|tm
operator|.
name|tmFirstChar
argument_list|,
name|tm
operator|.
name|tmLastChar
argument_list|,
name|abc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|abc
operator|=
operator|new
name|ABC
index|[
name|char_table_entries
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|char_table_entries
condition|;
name|i
operator|++
control|)
name|GetCharABCWidths
argument_list|(
name|hdc
argument_list|,
name|char_table
index|[
name|i
index|]
argument_list|,
name|char_table
index|[
name|i
index|]
argument_list|,
name|abc
operator|+
name|i
argument_list|)
expr_stmt|;
name|n
operator|=
name|char_table_entries
expr_stmt|;
block|}
name|ml
operator|=
name|abc
index|[
literal|0
index|]
operator|.
name|abcA
expr_stmt|;
name|mr
operator|=
name|abc
index|[
literal|0
index|]
operator|.
name|abcC
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|abc
index|[
name|i
index|]
operator|.
name|abcA
operator|+
name|abc
index|[
name|i
index|]
operator|.
name|abcB
operator|+
name|abc
index|[
name|i
index|]
operator|.
name|abcC
operator|!=
literal|0
condition|)
block|{
name|ml
operator|=
name|qMin
argument_list|(
name|ml
argument_list|,
name|abc
index|[
name|i
index|]
operator|.
name|abcA
argument_list|)
expr_stmt|;
name|mr
operator|=
name|qMin
argument_list|(
name|mr
argument_list|,
name|abc
index|[
name|i
index|]
operator|.
name|abcC
argument_list|)
expr_stmt|;
block|}
block|}
operator|delete
index|[]
name|abc
expr_stmt|;
block|}
else|else
block|{
name|ABCFLOAT
modifier|*
name|abc
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
name|tm
operator|.
name|tmLastChar
operator|-
name|tm
operator|.
name|tmFirstChar
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|n
operator|<=
name|max_font_count
condition|)
block|{
name|abc
operator|=
operator|new
name|ABCFLOAT
index|[
name|n
index|]
expr_stmt|;
name|GetCharABCWidthsFloat
argument_list|(
name|hdc
argument_list|,
name|tm
operator|.
name|tmFirstChar
argument_list|,
name|tm
operator|.
name|tmLastChar
argument_list|,
name|abc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|abc
operator|=
operator|new
name|ABCFLOAT
index|[
name|char_table_entries
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|char_table_entries
condition|;
name|i
operator|++
control|)
name|GetCharABCWidthsFloat
argument_list|(
name|hdc
argument_list|,
name|char_table
index|[
name|i
index|]
argument_list|,
name|char_table
index|[
name|i
index|]
argument_list|,
name|abc
operator|+
name|i
argument_list|)
expr_stmt|;
name|n
operator|=
name|char_table_entries
expr_stmt|;
block|}
name|float
name|fml
init|=
name|abc
index|[
literal|0
index|]
operator|.
name|abcfA
decl_stmt|;
name|float
name|fmr
init|=
name|abc
index|[
literal|0
index|]
operator|.
name|abcfC
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|abc
index|[
name|i
index|]
operator|.
name|abcfA
operator|+
name|abc
index|[
name|i
index|]
operator|.
name|abcfB
operator|+
name|abc
index|[
name|i
index|]
operator|.
name|abcfC
operator|!=
literal|0
condition|)
block|{
name|fml
operator|=
name|qMin
argument_list|(
name|fml
argument_list|,
name|abc
index|[
name|i
index|]
operator|.
name|abcfA
argument_list|)
expr_stmt|;
name|fmr
operator|=
name|qMin
argument_list|(
name|fmr
argument_list|,
name|abc
index|[
name|i
index|]
operator|.
name|abcfC
argument_list|)
expr_stmt|;
block|}
block|}
name|ml
operator|=
name|int
argument_list|(
name|fml
operator|-
literal|0.9999
argument_list|)
expr_stmt|;
name|mr
operator|=
name|int
argument_list|(
name|fmr
operator|-
literal|0.9999
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|abc
expr_stmt|;
block|}
name|lbearing
operator|=
name|ml
expr_stmt|;
name|rbearing
operator|=
name|mr
expr_stmt|;
block|}
return|return
name|rbearing
return|;
endif|#
directive|endif
block|}
DECL|function|name
specifier|const
name|char
modifier|*
name|QFontEngineWin
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|canRender
name|bool
name|QFontEngineWin
operator|::
name|canRender
parameter_list|(
specifier|const
name|QChar
modifier|*
name|string
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|symbol
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|string
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|uc
operator|<
literal|0x100
condition|)
block|{
if|if
condition|(
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
operator|+
literal|0xf000
argument_list|)
operator|==
literal|0
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ttf
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|unsigned
name|int
name|uc
init|=
name|getChar
argument_list|(
name|string
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|getTrueTypeGlyphIndex
argument_list|(
name|cmap
argument_list|,
name|uc
argument_list|)
operator|==
literal|0
condition|)
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|len
operator|--
condition|)
block|{
if|if
condition|(
name|tm
operator|.
name|tmFirstChar
operator|>
name|string
operator|->
name|unicode
argument_list|()
operator|||
name|tm
operator|.
name|tmLastChar
operator|<
name|string
operator|->
name|unicode
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|type
name|QFontEngine
operator|::
name|Type
name|QFontEngineWin
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QFontEngine
operator|::
name|Win
return|;
block|}
DECL|function|qt_fixed_to_double
specifier|static
specifier|inline
name|double
name|qt_fixed_to_double
parameter_list|(
specifier|const
name|FIXED
modifier|&
name|p
parameter_list|)
block|{
return|return
operator|(
operator|(
name|p
operator|.
name|value
operator|<<
literal|16
operator|)
operator|+
name|p
operator|.
name|fract
operator|)
operator|/
literal|65536.0
return|;
block|}
DECL|function|qt_to_qpointf
specifier|static
specifier|inline
name|QPointF
name|qt_to_qpointf
parameter_list|(
specifier|const
name|POINTFX
modifier|&
name|pt
parameter_list|,
name|qreal
name|scale
parameter_list|)
block|{
return|return
name|QPointF
argument_list|(
name|qt_fixed_to_double
argument_list|(
name|pt
operator|.
name|x
argument_list|)
operator|*
name|scale
argument_list|,
operator|-
name|qt_fixed_to_double
argument_list|(
name|pt
operator|.
name|y
argument_list|)
operator|*
name|scale
argument_list|)
return|;
block|}
ifndef|#
directive|ifndef
name|GGO_UNHINTED
DECL|macro|GGO_UNHINTED
define|#
directive|define
name|GGO_UNHINTED
value|0x0100
endif|#
directive|endif
DECL|function|addGlyphToPath
specifier|static
name|bool
name|addGlyphToPath
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
specifier|const
name|QFixedPoint
modifier|&
name|position
parameter_list|,
name|HDC
name|hdc
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|bool
name|ttf
parameter_list|,
name|glyph_metrics_t
modifier|*
name|metric
init|=
literal|0
parameter_list|,
name|qreal
name|scale
init|=
literal|1
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
name|Q_UNUSED
argument_list|(
name|glyph
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|hdc
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|MAT2
name|mat
decl_stmt|;
name|mat
operator|.
name|eM11
operator|.
name|value
operator|=
name|mat
operator|.
name|eM22
operator|.
name|value
operator|=
literal|1
expr_stmt|;
name|mat
operator|.
name|eM11
operator|.
name|fract
operator|=
name|mat
operator|.
name|eM22
operator|.
name|fract
operator|=
literal|0
expr_stmt|;
name|mat
operator|.
name|eM21
operator|.
name|value
operator|=
name|mat
operator|.
name|eM12
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|mat
operator|.
name|eM21
operator|.
name|fract
operator|=
name|mat
operator|.
name|eM12
operator|.
name|fract
operator|=
literal|0
expr_stmt|;
name|uint
name|glyphFormat
init|=
name|GGO_NATIVE
decl_stmt|;
if|if
condition|(
name|ttf
condition|)
name|glyphFormat
operator||=
name|GGO_GLYPH_INDEX
expr_stmt|;
name|GLYPHMETRICS
name|gMetric
decl_stmt|;
name|memset
argument_list|(
operator|&
name|gMetric
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|GLYPHMETRICS
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|bufferSize
init|=
name|GDI_ERROR
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
name|bufferSize
operator|=
name|GetGlyphOutline
argument_list|(
name|hdc
argument_list|,
name|glyph
argument_list|,
name|glyphFormat
argument_list|,
operator|&
name|gMetric
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|mat
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|(
name|DWORD
operator|)
name|bufferSize
operator|==
name|GDI_ERROR
condition|)
block|{
return|return
literal|false
return|;
block|}
name|void
modifier|*
name|dataBuffer
init|=
operator|new
name|char
index|[
name|bufferSize
index|]
decl_stmt|;
name|DWORD
name|ret
init|=
name|GDI_ERROR
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
name|ret
operator|=
name|GetGlyphOutline
argument_list|(
name|hdc
argument_list|,
name|glyph
argument_list|,
name|glyphFormat
argument_list|,
operator|&
name|gMetric
argument_list|,
name|bufferSize
argument_list|,
name|dataBuffer
argument_list|,
operator|&
name|mat
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|ret
operator|==
name|GDI_ERROR
condition|)
block|{
operator|delete
index|[]
operator|(
name|char
operator|*
operator|)
name|dataBuffer
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|metric
condition|)
block|{
comment|// #### obey scale
operator|*
name|metric
operator|=
name|glyph_metrics_t
argument_list|(
name|gMetric
operator|.
name|gmptGlyphOrigin
operator|.
name|x
argument_list|,
operator|-
name|gMetric
operator|.
name|gmptGlyphOrigin
operator|.
name|y
argument_list|,
operator|(
name|int
operator|)
name|gMetric
operator|.
name|gmBlackBoxX
argument_list|,
operator|(
name|int
operator|)
name|gMetric
operator|.
name|gmBlackBoxY
argument_list|,
name|gMetric
operator|.
name|gmCellIncX
argument_list|,
name|gMetric
operator|.
name|gmCellIncY
argument_list|)
expr_stmt|;
block|}
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|headerOffset
init|=
literal|0
decl_stmt|;
name|TTPOLYGONHEADER
modifier|*
name|ttph
init|=
literal|0
decl_stmt|;
name|QPointF
name|oset
init|=
name|position
operator|.
name|toPointF
argument_list|()
decl_stmt|;
while|while
condition|(
name|headerOffset
operator|<
name|bufferSize
condition|)
block|{
name|ttph
operator|=
operator|(
name|TTPOLYGONHEADER
operator|*
operator|)
operator|(
operator|(
name|char
operator|*
operator|)
name|dataBuffer
operator|+
name|headerOffset
operator|)
expr_stmt|;
name|QPointF
name|lastPoint
argument_list|(
name|qt_to_qpointf
argument_list|(
name|ttph
operator|->
name|pfxStart
argument_list|,
name|scale
argument_list|)
argument_list|)
decl_stmt|;
name|path
operator|->
name|moveTo
argument_list|(
name|lastPoint
operator|+
name|oset
argument_list|)
expr_stmt|;
name|offset
operator|+=
sizeof|sizeof
argument_list|(
name|TTPOLYGONHEADER
argument_list|)
expr_stmt|;
name|TTPOLYCURVE
modifier|*
name|curve
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|int
argument_list|(
name|headerOffset
operator|+
name|ttph
operator|->
name|cb
argument_list|)
condition|)
block|{
name|curve
operator|=
operator|(
name|TTPOLYCURVE
operator|*
operator|)
operator|(
operator|(
name|char
operator|*
operator|)
operator|(
name|dataBuffer
operator|)
operator|+
name|offset
operator|)
expr_stmt|;
switch|switch
condition|(
name|curve
operator|->
name|wType
condition|)
block|{
case|case
name|TT_PRIM_LINE
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|curve
operator|->
name|cpfx
condition|;
operator|++
name|i
control|)
block|{
name|QPointF
name|p
init|=
name|qt_to_qpointf
argument_list|(
name|curve
operator|->
name|apfx
index|[
name|i
index|]
argument_list|,
name|scale
argument_list|)
operator|+
name|oset
decl_stmt|;
name|path
operator|->
name|lineTo
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|TT_PRIM_QSPLINE
case|:
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|elm
init|=
name|path
operator|->
name|elementAt
argument_list|(
name|path
operator|->
name|elementCount
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QPointF
name|prev
argument_list|(
name|elm
operator|.
name|x
argument_list|,
name|elm
operator|.
name|y
argument_list|)
decl_stmt|;
name|QPointF
name|endPoint
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|curve
operator|->
name|cpfx
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|QPointF
name|p1
init|=
name|qt_to_qpointf
argument_list|(
name|curve
operator|->
name|apfx
index|[
name|i
index|]
argument_list|,
name|scale
argument_list|)
operator|+
name|oset
decl_stmt|;
name|QPointF
name|p2
init|=
name|qt_to_qpointf
argument_list|(
name|curve
operator|->
name|apfx
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|scale
argument_list|)
operator|+
name|oset
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|curve
operator|->
name|cpfx
operator|-
literal|2
condition|)
block|{
name|endPoint
operator|=
name|QPointF
argument_list|(
operator|(
name|p1
operator|.
name|x
argument_list|()
operator|+
name|p2
operator|.
name|x
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|p1
operator|.
name|y
argument_list|()
operator|+
name|p2
operator|.
name|y
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endPoint
operator|=
name|p2
expr_stmt|;
block|}
name|path
operator|->
name|quadTo
argument_list|(
name|p1
argument_list|,
name|endPoint
argument_list|)
expr_stmt|;
name|prev
operator|=
name|endPoint
expr_stmt|;
block|}
break|break;
block|}
case|case
name|TT_PRIM_CSPLINE
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|curve
operator|->
name|cpfx
condition|;
control|)
block|{
name|QPointF
name|p2
init|=
name|qt_to_qpointf
argument_list|(
name|curve
operator|->
name|apfx
index|[
name|i
operator|++
index|]
argument_list|,
name|scale
argument_list|)
operator|+
name|oset
decl_stmt|;
name|QPointF
name|p3
init|=
name|qt_to_qpointf
argument_list|(
name|curve
operator|->
name|apfx
index|[
name|i
operator|++
index|]
argument_list|,
name|scale
argument_list|)
operator|+
name|oset
decl_stmt|;
name|QPointF
name|p4
init|=
name|qt_to_qpointf
argument_list|(
name|curve
operator|->
name|apfx
index|[
name|i
operator|++
index|]
argument_list|,
name|scale
argument_list|)
operator|+
name|oset
decl_stmt|;
name|path
operator|->
name|cubicTo
argument_list|(
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
name|qWarning
argument_list|(
literal|"QFontEngineWin::addOutlineToPath, unhandled switch case"
argument_list|)
expr_stmt|;
block|}
name|offset
operator|+=
sizeof|sizeof
argument_list|(
name|TTPOLYCURVE
argument_list|)
operator|+
operator|(
name|curve
operator|->
name|cpfx
operator|-
literal|1
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|POINTFX
argument_list|)
expr_stmt|;
block|}
name|path
operator|->
name|closeSubpath
argument_list|()
expr_stmt|;
name|headerOffset
operator|+=
name|ttph
operator|->
name|cb
expr_stmt|;
block|}
operator|delete
index|[]
operator|(
name|char
operator|*
operator|)
name|dataBuffer
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|addGlyphsToPath
name|void
name|QFontEngineWin
operator|::
name|addGlyphsToPath
parameter_list|(
name|glyph_t
modifier|*
name|glyphs
parameter_list|,
name|QFixedPoint
modifier|*
name|positions
parameter_list|,
name|int
name|nglyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
parameter_list|)
block|{
name|LOGFONT
name|lf
init|=
name|logfont
decl_stmt|;
comment|// The sign must be negative here to make sure we match against character height instead of
comment|// hinted cell height. This ensures that we get linear matching, and we need this for
comment|// paths since we later on apply a scaling transform to the glyph outline to get the
comment|// font at the correct pixel size.
name|lf
operator|.
name|lfHeight
operator|=
operator|-
name|unitsPerEm
expr_stmt|;
name|lf
operator|.
name|lfWidth
operator|=
literal|0
expr_stmt|;
name|HFONT
name|hf
init|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
decl_stmt|;
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
name|HGDIOBJ
name|oldfont
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nglyphs
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|addGlyphToPath
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|,
name|positions
index|[
name|i
index|]
argument_list|,
name|hdc
argument_list|,
name|path
argument_list|,
name|ttf
argument_list|,
comment|/*metric*/
literal|0
argument_list|,
name|qreal
argument_list|(
name|fontDef
operator|.
name|pixelSize
argument_list|)
operator|/
name|unitsPerEm
argument_list|)
condition|)
block|{
comment|// Some windows fonts, like "Modern", are vector stroke
comment|// fonts, which are reported as TMPF_VECTOR but do not
comment|// support GetGlyphOutline, and thus we set this bit so
comment|// that addOutLineToPath can check it and return safely...
name|hasOutline
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|DeleteObject
argument_list|(
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|oldfont
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|addOutlineToPath
name|void
name|QFontEngineWin
operator|::
name|addOutlineToPath
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
specifier|const
name|QGlyphLayout
modifier|&
name|glyphs
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|QTextItem
operator|::
name|RenderFlags
name|flags
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
if|if
condition|(
name|tm
operator|.
name|tmPitchAndFamily
operator|&
operator|(
name|TMPF_TRUETYPE
operator||
name|TMPF_VECTOR
operator|)
condition|)
block|{
name|hasOutline
operator|=
literal|true
expr_stmt|;
name|QFontEngine
operator|::
name|addOutlineToPath
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|glyphs
argument_list|,
name|path
argument_list|,
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasOutline
condition|)
block|{
comment|// has_outline is set to false if addGlyphToPath gets
comment|// false from GetGlyphOutline, meaning its not an outline
comment|// font.
return|return;
block|}
block|}
endif|#
directive|endif
name|QFontEngine
operator|::
name|addBitmapFontToPath
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|glyphs
argument_list|,
name|path
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
DECL|function|faceId
name|QFontEngine
operator|::
name|FaceId
name|QFontEngineWin
operator|::
name|faceId
parameter_list|()
specifier|const
block|{
return|return
name|_faceId
return|;
block|}
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<qdebug.h>
name|QT_END_INCLUDE_NAMESPACE
DECL|function|synthesized
name|int
name|QFontEngineWin
operator|::
name|synthesized
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|synthesized_flags
operator|==
operator|-
literal|1
condition|)
block|{
name|synthesized_flags
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|ttf
condition|)
block|{
specifier|const
name|DWORD
name|HEAD
init|=
name|MAKE_TAG
argument_list|(
literal|'h'
argument_list|,
literal|'e'
argument_list|,
literal|'a'
argument_list|,
literal|'d'
argument_list|)
decl_stmt|;
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
expr_stmt|;
name|uchar
name|data
index|[
literal|4
index|]
decl_stmt|;
name|GetFontData
argument_list|(
name|hdc
argument_list|,
name|HEAD
argument_list|,
literal|44
argument_list|,
operator|&
name|data
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|USHORT
name|macStyle
init|=
name|getUShort
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|.
name|tmItalic
operator|&&
operator|!
operator|(
name|macStyle
operator|&
literal|2
operator|)
condition|)
name|synthesized_flags
operator|=
name|SynthesizedItalic
expr_stmt|;
if|if
condition|(
name|fontDef
operator|.
name|stretch
operator|!=
literal|100
operator|&&
name|ttf
condition|)
name|synthesized_flags
operator||=
name|SynthesizedStretch
expr_stmt|;
if|if
condition|(
name|tm
operator|.
name|tmWeight
operator|>=
literal|500
operator|&&
operator|!
operator|(
name|macStyle
operator|&
literal|1
operator|)
condition|)
name|synthesized_flags
operator||=
name|SynthesizedBold
expr_stmt|;
comment|//qDebug()<< "font is"<< _name<<
comment|//    "it="<< (macStyle& 2)<< fontDef.style<< "flags="<< synthesized_flags;
block|}
block|}
return|return
name|synthesized_flags
return|;
block|}
DECL|function|emSquareSize
name|QFixed
name|QFontEngineWin
operator|::
name|emSquareSize
parameter_list|()
specifier|const
block|{
return|return
name|unitsPerEm
return|;
block|}
DECL|function|properties
name|QFontEngine
operator|::
name|Properties
name|QFontEngineWin
operator|::
name|properties
parameter_list|()
specifier|const
block|{
name|LOGFONT
name|lf
init|=
name|logfont
decl_stmt|;
name|lf
operator|.
name|lfHeight
operator|=
name|unitsPerEm
expr_stmt|;
name|HFONT
name|hf
init|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
decl_stmt|;
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
name|HGDIOBJ
name|oldfont
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hf
argument_list|)
decl_stmt|;
name|OUTLINETEXTMETRIC
modifier|*
name|otm
init|=
name|getOutlineTextMetric
argument_list|(
name|hdc
argument_list|)
decl_stmt|;
name|Properties
name|p
decl_stmt|;
name|p
operator|.
name|emSquare
operator|=
name|unitsPerEm
expr_stmt|;
name|p
operator|.
name|italicAngle
operator|=
name|otm
operator|->
name|otmItalicAngle
expr_stmt|;
name|p
operator|.
name|postscriptName
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
operator|(
operator|(
name|char
operator|*
operator|)
name|otm
operator|+
operator|(
name|quintptr
operator|)
name|otm
operator|->
name|otmpFamilyName
operator|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
name|p
operator|.
name|postscriptName
operator|+=
name|QString
operator|::
name|fromWCharArray
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
operator|(
operator|(
name|char
operator|*
operator|)
name|otm
operator|+
operator|(
name|quintptr
operator|)
name|otm
operator|->
name|otmpStyleName
operator|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
name|p
operator|.
name|postscriptName
operator|=
name|QFontEngine
operator|::
name|convertToPostscriptFontFamilyName
argument_list|(
name|p
operator|.
name|postscriptName
argument_list|)
expr_stmt|;
name|p
operator|.
name|boundingBox
operator|=
name|QRectF
argument_list|(
name|otm
operator|->
name|otmrcFontBox
operator|.
name|left
argument_list|,
operator|-
name|otm
operator|->
name|otmrcFontBox
operator|.
name|top
argument_list|,
name|otm
operator|->
name|otmrcFontBox
operator|.
name|right
operator|-
name|otm
operator|->
name|otmrcFontBox
operator|.
name|left
argument_list|,
name|otm
operator|->
name|otmrcFontBox
operator|.
name|top
operator|-
name|otm
operator|->
name|otmrcFontBox
operator|.
name|bottom
argument_list|)
expr_stmt|;
name|p
operator|.
name|ascent
operator|=
name|otm
operator|->
name|otmAscent
expr_stmt|;
name|p
operator|.
name|descent
operator|=
operator|-
name|otm
operator|->
name|otmDescent
expr_stmt|;
name|p
operator|.
name|leading
operator|=
operator|(
name|int
operator|)
name|otm
operator|->
name|otmLineGap
expr_stmt|;
name|p
operator|.
name|capHeight
operator|=
literal|0
expr_stmt|;
name|p
operator|.
name|lineWidth
operator|=
name|otm
operator|->
name|otmsUnderscoreSize
expr_stmt|;
name|free
argument_list|(
name|otm
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|oldfont
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|function|getUnscaledGlyph
name|void
name|QFontEngineWin
operator|::
name|getUnscaledGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QPainterPath
modifier|*
name|path
parameter_list|,
name|glyph_metrics_t
modifier|*
name|metrics
parameter_list|)
block|{
name|LOGFONT
name|lf
init|=
name|logfont
decl_stmt|;
name|lf
operator|.
name|lfHeight
operator|=
name|unitsPerEm
expr_stmt|;
name|int
name|flags
init|=
name|synthesized
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|SynthesizedItalic
condition|)
name|lf
operator|.
name|lfItalic
operator|=
literal|false
expr_stmt|;
name|lf
operator|.
name|lfWidth
operator|=
literal|0
expr_stmt|;
name|HFONT
name|hf
init|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
decl_stmt|;
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
name|HGDIOBJ
name|oldfont
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hf
argument_list|)
decl_stmt|;
name|QFixedPoint
name|p
decl_stmt|;
name|p
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|p
operator|.
name|y
operator|=
literal|0
expr_stmt|;
name|addGlyphToPath
argument_list|(
name|glyph
argument_list|,
name|p
argument_list|,
name|hdc
argument_list|,
name|path
argument_list|,
name|ttf
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|oldfont
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|getSfntTableData
name|bool
name|QFontEngineWin
operator|::
name|getSfntTableData
parameter_list|(
name|uint
name|tag
parameter_list|,
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
modifier|*
name|length
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|ttf
condition|)
return|return
literal|false
return|;
name|HDC
name|hdc
init|=
name|shared_dc
argument_list|()
decl_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
expr_stmt|;
name|DWORD
name|t
init|=
name|qbswap
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tag
argument_list|)
decl_stmt|;
operator|*
name|length
operator|=
name|GetFontData
argument_list|(
name|hdc
argument_list|,
name|t
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
operator|*
name|length
argument_list|)
expr_stmt|;
return|return
operator|*
name|length
operator|!=
name|GDI_ERROR
return|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|CLEARTYPE_QUALITY
argument_list|)
DECL|macro|CLEARTYPE_QUALITY
define|#
directive|define
name|CLEARTYPE_QUALITY
value|5
endif|#
directive|endif
specifier|extern
name|bool
name|qt_cleartype_enabled
decl_stmt|;
DECL|function|drawGDIGlyph
name|QNativeImage
modifier|*
name|QFontEngineWin
operator|::
name|drawGDIGlyph
parameter_list|(
name|HFONT
name|font
parameter_list|,
name|glyph_t
name|glyph
parameter_list|,
name|int
name|margin
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|,
name|QImage
operator|::
name|Format
name|mask_format
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|mask_format
argument_list|)
name|glyph_metrics_t
name|gm
init|=
name|boundingBox
argument_list|(
name|glyph
argument_list|)
decl_stmt|;
comment|//     printf(" -> for glyph %4x\n", glyph);
name|int
name|gx
init|=
name|gm
operator|.
name|x
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|gy
init|=
name|gm
operator|.
name|y
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|iw
init|=
name|gm
operator|.
name|width
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|ih
init|=
name|gm
operator|.
name|height
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|iw
operator|<=
literal|0
operator|||
name|ih
operator|<=
literal|0
condition|)
return|return
literal|0
return|;
name|bool
name|has_transformation
init|=
name|t
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|unsigned
name|int
name|options
init|=
name|ttf
condition|?
name|ETO_GLYPH_INDEX
else|:
literal|0
decl_stmt|;
name|XFORM
name|xform
decl_stmt|;
if|if
condition|(
name|has_transformation
condition|)
block|{
name|xform
operator|.
name|eM11
operator|=
name|t
operator|.
name|m11
argument_list|()
expr_stmt|;
name|xform
operator|.
name|eM12
operator|=
name|t
operator|.
name|m12
argument_list|()
expr_stmt|;
name|xform
operator|.
name|eM21
operator|=
name|t
operator|.
name|m21
argument_list|()
expr_stmt|;
name|xform
operator|.
name|eM22
operator|=
name|t
operator|.
name|m22
argument_list|()
expr_stmt|;
name|xform
operator|.
name|eDx
operator|=
name|margin
expr_stmt|;
name|xform
operator|.
name|eDy
operator|=
name|margin
expr_stmt|;
name|QtHDC
name|qthdc
decl_stmt|;
name|HDC
name|hdc
init|=
name|qthdc
operator|.
name|hdc
argument_list|()
decl_stmt|;
name|SetGraphicsMode
argument_list|(
name|hdc
argument_list|,
name|GM_ADVANCED
argument_list|)
expr_stmt|;
name|SetWorldTransform
argument_list|(
name|hdc
argument_list|,
operator|&
name|xform
argument_list|)
expr_stmt|;
name|HGDIOBJ
name|old_font
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|font
argument_list|)
decl_stmt|;
name|int
name|ggo_options
init|=
name|GGO_METRICS
operator||
operator|(
name|ttf
condition|?
name|GGO_GLYPH_INDEX
else|:
literal|0
operator|)
decl_stmt|;
name|GLYPHMETRICS
name|tgm
decl_stmt|;
name|MAT2
name|mat
decl_stmt|;
name|memset
argument_list|(
operator|&
name|mat
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|mat
argument_list|)
argument_list|)
expr_stmt|;
name|mat
operator|.
name|eM11
operator|.
name|value
operator|=
name|mat
operator|.
name|eM22
operator|.
name|value
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|GetGlyphOutline
argument_list|(
name|hdc
argument_list|,
name|glyph
argument_list|,
name|ggo_options
argument_list|,
operator|&
name|tgm
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|mat
argument_list|)
operator|==
name|GDI_ERROR
condition|)
block|{
name|qWarning
argument_list|(
literal|"QWinFontEngine: unable to query transformed glyph metrics..."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|iw
operator|=
name|tgm
operator|.
name|gmBlackBoxX
expr_stmt|;
name|ih
operator|=
name|tgm
operator|.
name|gmBlackBoxY
expr_stmt|;
name|xform
operator|.
name|eDx
operator|-=
name|tgm
operator|.
name|gmptGlyphOrigin
operator|.
name|x
expr_stmt|;
name|xform
operator|.
name|eDy
operator|+=
name|tgm
operator|.
name|gmptGlyphOrigin
operator|.
name|y
expr_stmt|;
name|SetGraphicsMode
argument_list|(
name|hdc
argument_list|,
name|GM_COMPATIBLE
argument_list|)
expr_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|old_font
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
comment|// else winc
name|unsigned
name|int
name|options
init|=
literal|0
decl_stmt|;
ifdef|#
directive|ifdef
name|DEBUG
name|Q_ASSERT
argument_list|(
operator|!
name|has_transformation
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|has_transformation
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|QNativeImage
modifier|*
name|ni
init|=
operator|new
name|QNativeImage
argument_list|(
name|iw
operator|+
literal|2
operator|*
name|margin
operator|+
literal|4
argument_list|,
name|ih
operator|+
literal|2
operator|*
name|margin
operator|+
literal|4
argument_list|,
name|QNativeImage
operator|::
name|systemFormat
argument_list|()
argument_list|,
operator|!
name|qt_cleartype_enabled
argument_list|)
decl_stmt|;
comment|/*If cleartype is enabled we use the standard system format even on Windows CE       and not the special textbuffer format we have to use if cleartype is disabled*/
name|ni
operator|->
name|image
operator|.
name|fill
argument_list|(
literal|0xffffffff
argument_list|)
expr_stmt|;
name|HDC
name|hdc
init|=
name|ni
operator|->
name|hdc
decl_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|GetStockObject
argument_list|(
name|NULL_BRUSH
argument_list|)
argument_list|)
expr_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|GetStockObject
argument_list|(
name|BLACK_PEN
argument_list|)
argument_list|)
expr_stmt|;
name|SetTextColor
argument_list|(
name|hdc
argument_list|,
name|RGB
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|SetBkMode
argument_list|(
name|hdc
argument_list|,
name|TRANSPARENT
argument_list|)
expr_stmt|;
name|SetTextAlign
argument_list|(
name|hdc
argument_list|,
name|TA_BASELINE
argument_list|)
expr_stmt|;
name|HGDIOBJ
name|old_font
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|font
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
name|has_transformation
condition|)
block|{
name|SetGraphicsMode
argument_list|(
name|hdc
argument_list|,
name|GM_ADVANCED
argument_list|)
expr_stmt|;
name|SetWorldTransform
argument_list|(
name|hdc
argument_list|,
operator|&
name|xform
argument_list|)
expr_stmt|;
name|ExtTextOut
argument_list|(
name|hdc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|options
argument_list|,
literal|0
argument_list|,
operator|(
name|LPCWSTR
operator|)
operator|&
name|glyph
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|ExtTextOut
argument_list|(
name|hdc
argument_list|,
operator|-
name|gx
operator|+
name|margin
argument_list|,
operator|-
name|gy
operator|+
name|margin
argument_list|,
name|options
argument_list|,
literal|0
argument_list|,
operator|(
name|LPCWSTR
operator|)
operator|&
name|glyph
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|old_font
argument_list|)
expr_stmt|;
return|return
name|ni
return|;
block|}
specifier|extern
name|uint
name|qt_pow_gamma
index|[
literal|256
index|]
decl_stmt|;
DECL|function|alphaMapForGlyph
name|QImage
name|QFontEngineWin
operator|::
name|alphaMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|xform
parameter_list|)
block|{
name|HFONT
name|font
init|=
name|hfont
decl_stmt|;
if|if
condition|(
name|qt_cleartype_enabled
condition|)
block|{
name|LOGFONT
name|lf
init|=
name|logfont
decl_stmt|;
name|lf
operator|.
name|lfQuality
operator|=
name|ANTIALIASED_QUALITY
expr_stmt|;
name|font
operator|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
expr_stmt|;
block|}
name|QImage
operator|::
name|Format
name|mask_format
init|=
name|QNativeImage
operator|::
name|systemFormat
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|mask_format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
endif|#
directive|endif
name|QNativeImage
modifier|*
name|mask
init|=
name|drawGDIGlyph
argument_list|(
name|font
argument_list|,
name|glyph
argument_list|,
literal|0
argument_list|,
name|xform
argument_list|,
name|mask_format
argument_list|)
decl_stmt|;
if|if
condition|(
name|mask
operator|==
literal|0
condition|)
return|return
name|QImage
argument_list|()
return|;
name|QImage
name|indexed
argument_list|(
name|mask
operator|->
name|width
argument_list|()
argument_list|,
name|mask
operator|->
name|height
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
comment|// ### This part is kinda pointless, but we'll crash later if we don't because some
comment|// code paths expects there to be colortables for index8-bit...
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colors
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|colors
index|[
name|i
index|]
operator|=
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|indexed
operator|.
name|setColorTable
argument_list|(
name|colors
argument_list|)
expr_stmt|;
comment|// Copy data... Cannot use QPainter here as GDI has messed up the
comment|// Alpha channel of the ni.image pixels...
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|mask
operator|->
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|uchar
modifier|*
name|dest
init|=
name|indexed
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|mask
operator|->
name|image
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_RGB16
condition|)
block|{
specifier|const
name|qint16
modifier|*
name|src
init|=
operator|(
name|qint16
operator|*
operator|)
operator|(
operator|(
specifier|const
name|QImage
operator|&
operator|)
name|mask
operator|->
name|image
operator|)
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|mask
operator|->
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
name|dest
index|[
name|x
index|]
operator|=
literal|255
operator|-
name|qGray
argument_list|(
name|src
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
name|uint
operator|*
operator|)
operator|(
operator|(
specifier|const
name|QImage
operator|&
operator|)
name|mask
operator|->
name|image
operator|)
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|mask
operator|->
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|dest
index|[
name|x
index|]
operator|=
literal|255
operator|-
name|qGray
argument_list|(
name|src
index|[
name|x
index|]
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|QNativeImage
operator|::
name|systemFormat
argument_list|()
operator|==
name|QImage
operator|::
name|Format_RGB16
condition|)
name|dest
index|[
name|x
index|]
operator|=
literal|255
operator|-
name|qGray
argument_list|(
name|src
index|[
name|x
index|]
argument_list|)
expr_stmt|;
else|else
name|dest
index|[
name|x
index|]
operator|=
literal|255
operator|-
operator|(
name|qt_pow_gamma
index|[
name|qGray
argument_list|(
name|src
index|[
name|x
index|]
argument_list|)
index|]
operator|*
literal|255.
operator|/
literal|2047.
operator|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
block|}
comment|// Cleanup...
operator|delete
name|mask
expr_stmt|;
if|if
condition|(
name|qt_cleartype_enabled
condition|)
block|{
name|DeleteObject
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
return|return
name|indexed
return|;
block|}
DECL|macro|SPI_GETFONTSMOOTHINGCONTRAST
define|#
directive|define
name|SPI_GETFONTSMOOTHINGCONTRAST
value|0x200C
DECL|macro|SPI_SETFONTSMOOTHINGCONTRAST
define|#
directive|define
name|SPI_SETFONTSMOOTHINGCONTRAST
value|0x200D
DECL|function|alphaRGBMapForGlyph
name|QImage
name|QFontEngineWin
operator|::
name|alphaRGBMapForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QFixed
parameter_list|,
name|int
name|margin
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|)
block|{
name|HFONT
name|font
init|=
name|hfont
decl_stmt|;
name|int
name|contrast
decl_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_GETFONTSMOOTHINGCONTRAST
argument_list|,
literal|0
argument_list|,
operator|&
name|contrast
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_SETFONTSMOOTHINGCONTRAST
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|1000
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QNativeImage
modifier|*
name|mask
init|=
name|drawGDIGlyph
argument_list|(
name|font
argument_list|,
name|glyph
argument_list|,
name|margin
argument_list|,
name|t
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_SETFONTSMOOTHINGCONTRAST
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|contrast
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
operator|==
literal|0
condition|)
return|return
name|QImage
argument_list|()
return|;
comment|// Gracefully handle the odd case when the display is 16-bit
specifier|const
name|QImage
name|source
init|=
name|mask
operator|->
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|32
condition|?
name|mask
operator|->
name|image
else|:
name|mask
operator|->
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QImage
name|rgbMask
argument_list|(
name|mask
operator|->
name|width
argument_list|()
argument_list|,
name|mask
operator|->
name|height
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|mask
operator|->
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|uint
modifier|*
name|dest
init|=
operator|(
name|uint
operator|*
operator|)
name|rgbMask
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|src
init|=
operator|(
name|uint
operator|*
operator|)
name|source
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|mask
operator|->
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|dest
index|[
name|x
index|]
operator|=
literal|0xffffffff
operator|-
operator|(
literal|0x00ffffff
operator|&
name|src
index|[
name|x
index|]
operator|)
expr_stmt|;
block|}
block|}
operator|delete
name|mask
expr_stmt|;
return|return
name|rgbMask
return|;
block|}
comment|// From qfontdatabase_win.cpp
specifier|extern
name|QFontEngine
modifier|*
name|qt_load_font_engine_win
argument_list|(
specifier|const
name|QFontDef
operator|&
name|request
argument_list|)
decl_stmt|;
DECL|function|cloneWithSize
name|QFontEngine
modifier|*
name|QFontEngineWin
operator|::
name|cloneWithSize
parameter_list|(
name|qreal
name|pixelSize
parameter_list|)
specifier|const
block|{
name|QFontDef
name|request
init|=
name|fontDef
decl_stmt|;
name|QString
name|actualFontName
init|=
name|request
operator|.
name|family
decl_stmt|;
if|if
condition|(
operator|!
name|uniqueFamilyName
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|family
operator|=
name|uniqueFamilyName
expr_stmt|;
name|request
operator|.
name|pixelSize
operator|=
name|pixelSize
expr_stmt|;
name|QFontEngine
modifier|*
name|fontEngine
init|=
name|qt_load_font_engine_win
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontEngine
operator|!=
name|NULL
condition|)
name|fontEngine
operator|->
name|fontDef
operator|.
name|family
operator|=
name|actualFontName
expr_stmt|;
return|return
name|fontEngine
return|;
block|}
comment|// -------------------------------------- Multi font engine
DECL|function|QFontEngineMultiWin
name|QFontEngineMultiWin
operator|::
name|QFontEngineMultiWin
parameter_list|(
name|QFontEngine
modifier|*
name|first
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|fallbacks
parameter_list|)
member_init_list|:
name|QFontEngineMulti
argument_list|(
name|fallbacks
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
member_init_list|,
name|fallbacks
argument_list|(
name|fallbacks
argument_list|)
block|{
name|engines
index|[
literal|0
index|]
operator|=
name|first
expr_stmt|;
name|first
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|fontDef
operator|=
name|engines
index|[
literal|0
index|]
operator|->
name|fontDef
expr_stmt|;
name|cache_cost
operator|=
name|first
operator|->
name|cache_cost
expr_stmt|;
block|}
DECL|function|loadEngine
name|void
name|QFontEngineMultiWin
operator|::
name|loadEngine
parameter_list|(
name|int
name|at
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|at
operator|<
name|engines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|engines
operator|.
name|at
argument_list|(
name|at
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QString
name|fam
init|=
name|fallbacks
operator|.
name|at
argument_list|(
name|at
operator|-
literal|1
argument_list|)
decl_stmt|;
name|LOGFONT
name|lf
init|=
cast|static_cast
argument_list|<
name|QFontEngineWin
operator|*
argument_list|>
argument_list|(
name|engines
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|->
name|logfont
decl_stmt|;
name|memcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
name|fam
operator|.
name|utf16
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|*
name|qMin
argument_list|(
name|fam
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
comment|// 32 = Windows hard-coded
name|HFONT
name|hfont
init|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
decl_stmt|;
name|bool
name|stockFont
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|hfont
operator|==
literal|0
condition|)
block|{
name|hfont
operator|=
operator|(
name|HFONT
operator|)
name|GetStockObject
argument_list|(
name|ANSI_VAR_FONT
argument_list|)
expr_stmt|;
name|stockFont
operator|=
literal|true
expr_stmt|;
block|}
name|engines
index|[
name|at
index|]
operator|=
operator|new
name|QFontEngineWin
argument_list|(
name|fam
argument_list|,
name|hfont
argument_list|,
name|stockFont
argument_list|,
name|lf
argument_list|)
expr_stmt|;
name|engines
index|[
name|at
index|]
operator|->
name|ref
operator|.
name|ref
argument_list|()
expr_stmt|;
name|engines
index|[
name|at
index|]
operator|->
name|fontDef
operator|=
name|fontDef
expr_stmt|;
comment|// TODO: increase cost in QFontCache for the font engine loaded here
block|}
name|QT_END_NAMESPACE
end_function
end_unit
