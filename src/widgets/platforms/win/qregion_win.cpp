begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qatomic.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"qimage.h"
end_include
begin_include
include|#
directive|include
file|"qpolygon.h"
end_include
begin_include
include|#
directive|include
file|"qregion.h"
end_include
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_include
include|#
directive|include
file|"qpainterpath.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|shared_empty
name|QRegion
operator|::
name|QRegionData
name|QRegion
operator|::
name|shared_empty
init|=
block|{
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|1
argument_list|)
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_tryCreateRegion
name|HRGN
name|qt_tryCreateRegion
parameter_list|(
name|QRegion
operator|::
name|RegionType
name|type
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|top
parameter_list|,
name|int
name|right
parameter_list|,
name|int
name|bottom
parameter_list|)
block|{
specifier|const
name|int
name|tries
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tries
condition|;
operator|++
name|i
control|)
block|{
name|HRGN
name|region
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QRegion
operator|::
name|Rectangle
case|:
name|region
operator|=
name|CreateRectRgn
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
break|break;
case|case
name|QRegion
operator|::
name|Ellipse
case|:
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|region
operator|=
name|CreateEllipticRgn
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
block|}
if|if
condition|(
name|region
condition|)
block|{
if|if
condition|(
name|GetRegionData
argument_list|(
name|region
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
return|return
name|region
return|;
else|else
name|DeleteObject
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qt_region_from_HRGN
name|QRegion
name|qt_region_from_HRGN
parameter_list|(
name|HRGN
name|rgn
parameter_list|)
block|{
name|int
name|numBytes
init|=
name|GetRegionData
argument_list|(
name|rgn
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|numBytes
operator|==
literal|0
condition|)
return|return
name|QRegion
argument_list|()
return|;
name|char
modifier|*
name|buf
init|=
operator|new
name|char
index|[
name|numBytes
index|]
decl_stmt|;
if|if
condition|(
name|buf
operator|==
literal|0
condition|)
return|return
name|QRegion
argument_list|()
return|;
name|RGNDATA
modifier|*
name|rd
init|=
cast|reinterpret_cast
argument_list|<
name|RGNDATA
operator|*
argument_list|>
argument_list|(
name|buf
argument_list|)
decl_stmt|;
if|if
condition|(
name|GetRegionData
argument_list|(
name|rgn
argument_list|,
name|numBytes
argument_list|,
name|rd
argument_list|)
operator|==
literal|0
condition|)
block|{
operator|delete
index|[]
name|buf
expr_stmt|;
return|return
name|QRegion
argument_list|()
return|;
block|}
name|QRegion
name|region
decl_stmt|;
name|RECT
modifier|*
name|r
init|=
cast|reinterpret_cast
argument_list|<
name|RECT
operator|*
argument_list|>
argument_list|(
name|rd
operator|->
name|Buffer
argument_list|)
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rd
operator|->
name|rdh
operator|.
name|nCount
condition|;
operator|++
name|i
control|)
block|{
name|QRect
name|rect
decl_stmt|;
name|rect
operator|.
name|setCoords
argument_list|(
name|r
operator|->
name|left
argument_list|,
name|r
operator|->
name|top
argument_list|,
name|r
operator|->
name|right
operator|-
literal|1
argument_list|,
name|r
operator|->
name|bottom
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|++
name|r
expr_stmt|;
name|region
operator||=
name|rect
expr_stmt|;
block|}
operator|delete
index|[]
name|buf
expr_stmt|;
return|return
name|region
return|;
block|}
end_function
begin_function
DECL|function|qt_win_dispose_rgn
name|void
name|qt_win_dispose_rgn
parameter_list|(
name|HRGN
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
condition|)
name|DeleteObject
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_add_rect
specifier|static
name|void
name|qt_add_rect
parameter_list|(
name|HRGN
modifier|&
name|winRegion
parameter_list|,
name|QRect
name|r
parameter_list|)
block|{
name|HRGN
name|rgn
init|=
name|CreateRectRgn
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rgn
condition|)
block|{
name|HRGN
name|dest
init|=
name|CreateRectRgn
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|CombineRgn
argument_list|(
name|dest
argument_list|,
name|winRegion
argument_list|,
name|rgn
argument_list|,
name|RGN_OR
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|DeleteObject
argument_list|(
name|winRegion
argument_list|)
expr_stmt|;
name|winRegion
operator|=
name|dest
expr_stmt|;
block|}
name|DeleteObject
argument_list|(
name|rgn
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ensureHandle
name|void
name|QRegion
operator|::
name|ensureHandle
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|rgn
condition|)
name|DeleteObject
argument_list|(
name|d
operator|->
name|rgn
argument_list|)
expr_stmt|;
name|d
operator|->
name|rgn
operator|=
name|CreateRectRgn
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|qt_rgn
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|qt_rgn
operator|->
name|numRects
operator|==
literal|1
condition|)
block|{
name|QRect
name|r
init|=
name|d
operator|->
name|qt_rgn
operator|->
name|extents
decl_stmt|;
name|qt_add_rect
argument_list|(
name|d
operator|->
name|rgn
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|qt_rgn
operator|->
name|numRects
condition|;
name|i
operator|++
control|)
block|{
name|QRect
name|r
init|=
name|d
operator|->
name|qt_rgn
operator|->
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|qt_add_rect
argument_list|(
name|d
operator|->
name|rgn
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
