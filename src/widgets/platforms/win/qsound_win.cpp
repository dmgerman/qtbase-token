begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsound.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SOUND
end_ifndef
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|"qpointer.h"
end_include
begin_include
include|#
directive|include
file|"qsound_p.h"
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QAuServerWindows
class|class
name|QAuServerWindows
super|:
specifier|public
name|QAuServer
block|{
name|Q_OBJECT
public|public:
name|QAuServerWindows
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
constructor_decl|;
name|~
name|QAuServerWindows
parameter_list|()
destructor_decl|;
name|void
name|playHelper
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|int
name|loop
parameter_list|,
name|QSound
modifier|*
name|snd
parameter_list|)
function_decl|;
name|void
name|play
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|int
name|loop
parameter_list|)
function_decl|;
name|void
name|play
parameter_list|(
name|QSound
modifier|*
parameter_list|)
function_decl|;
name|void
name|stop
parameter_list|(
name|QSound
modifier|*
parameter_list|)
function_decl|;
name|bool
name|okay
parameter_list|()
function_decl|;
DECL|function|decLoop
name|int
name|decLoop
parameter_list|(
name|QSound
modifier|*
name|snd
parameter_list|)
block|{
return|return
name|QAuServer
operator|::
name|decLoop
argument_list|(
name|snd
argument_list|)
return|;
block|}
DECL|member|current
name|HANDLE
name|current
decl_stmt|;
DECL|member|mutex
name|HANDLE
name|mutex
decl_stmt|;
DECL|member|event
name|HANDLE
name|event
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QAuServerWindows
name|QAuServerWindows
operator|::
name|QAuServerWindows
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAuServer
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|current
argument_list|(
literal|0
argument_list|)
block|{
name|mutex
operator|=
name|CreateMutex
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|event
operator|=
name|CreateEvent
argument_list|(
literal|0
argument_list|,
name|FALSE
argument_list|,
name|FALSE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QAuServerWindows
name|QAuServerWindows
operator|::
name|~
name|QAuServerWindows
parameter_list|()
block|{
name|HANDLE
name|mtx
init|=
name|mutex
decl_stmt|;
name|WaitForSingleObject
argument_list|(
name|mtx
argument_list|,
name|INFINITE
argument_list|)
expr_stmt|;
name|mutex
operator|=
literal|0
expr_stmt|;
name|ReleaseMutex
argument_list|(
name|mtx
argument_list|)
expr_stmt|;
name|CloseHandle
argument_list|(
name|mtx
argument_list|)
expr_stmt|;
name|CloseHandle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_struct
DECL|struct|SoundInfo
struct|struct
name|SoundInfo
block|{
DECL|function|SoundInfo
name|SoundInfo
parameter_list|(
specifier|const
name|QString
modifier|&
name|fn
parameter_list|,
name|int
name|lp
parameter_list|,
name|QSound
modifier|*
name|snd
parameter_list|,
name|QAuServerWindows
modifier|*
name|srv
parameter_list|)
member_init_list|:
name|sound
argument_list|(
name|snd
argument_list|)
member_init_list|,
name|server
argument_list|(
name|srv
argument_list|)
member_init_list|,
name|filename
argument_list|(
name|fn
argument_list|)
member_init_list|,
name|loops
argument_list|(
name|lp
argument_list|)
block|{     }
DECL|member|sound
name|QSound
modifier|*
name|sound
decl_stmt|;
DECL|member|server
name|QAuServerWindows
modifier|*
name|server
decl_stmt|;
DECL|member|filename
name|QString
name|filename
decl_stmt|;
DECL|member|loops
name|int
name|loops
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|SoundPlayProc
name|DWORD
name|WINAPI
name|SoundPlayProc
parameter_list|(
name|LPVOID
name|param
parameter_list|)
block|{
name|SoundInfo
modifier|*
name|info
init|=
operator|(
name|SoundInfo
operator|*
operator|)
name|param
decl_stmt|;
comment|// copy data before waking up GUI thread
name|QAuServerWindows
modifier|*
name|server
init|=
name|info
operator|->
name|server
decl_stmt|;
name|QSound
modifier|*
name|sound
init|=
name|info
operator|->
name|sound
decl_stmt|;
name|int
name|loops
init|=
name|info
operator|->
name|loops
decl_stmt|;
name|QString
name|filename
init|=
name|info
operator|->
name|filename
decl_stmt|;
name|HANDLE
name|mutex
init|=
name|server
operator|->
name|mutex
decl_stmt|;
name|HANDLE
name|event
init|=
name|server
operator|->
name|event
decl_stmt|;
name|info
operator|=
literal|0
expr_stmt|;
comment|// server must not be destroyed until thread finishes
comment|// and all other sounds have to wait
name|WaitForSingleObject
argument_list|(
name|mutex
argument_list|,
name|INFINITE
argument_list|)
expr_stmt|;
if|if
condition|(
name|loops
operator|<=
literal|1
condition|)
block|{
name|server
operator|->
name|current
operator|=
literal|0
expr_stmt|;
name|int
name|flags
init|=
name|SND_FILENAME
operator||
name|SND_ASYNC
decl_stmt|;
if|if
condition|(
name|loops
operator|==
operator|-
literal|1
condition|)
name|flags
operator||=
name|SND_LOOP
expr_stmt|;
name|PlaySound
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|filename
operator|.
name|utf16
argument_list|()
argument_list|,
literal|0
argument_list|,
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|sound
operator|&&
name|loops
operator|==
literal|1
condition|)
name|server
operator|->
name|decLoop
argument_list|(
name|sound
argument_list|)
expr_stmt|;
comment|// GUI thread continues, but we are done as well.
name|SetEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// signal GUI thread to continue - sound might be reset!
name|QPointer
argument_list|<
name|QSound
argument_list|>
name|guarded_sound
init|=
name|sound
decl_stmt|;
name|SetEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|l
init|=
literal|0
init|;
name|l
operator|<
name|loops
operator|&&
name|server
operator|->
name|current
condition|;
operator|++
name|l
control|)
block|{
name|PlaySound
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|filename
operator|.
name|utf16
argument_list|()
argument_list|,
literal|0
argument_list|,
name|SND_FILENAME
operator||
name|SND_SYNC
argument_list|)
expr_stmt|;
if|if
condition|(
name|guarded_sound
condition|)
name|server
operator|->
name|decLoop
argument_list|(
name|guarded_sound
argument_list|)
expr_stmt|;
block|}
name|server
operator|->
name|current
operator|=
literal|0
expr_stmt|;
block|}
name|ReleaseMutex
argument_list|(
name|mutex
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|playHelper
name|void
name|QAuServerWindows
operator|::
name|playHelper
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|int
name|loop
parameter_list|,
name|QSound
modifier|*
name|snd
parameter_list|)
block|{
if|if
condition|(
name|loop
operator|==
literal|0
condition|)
return|return;
comment|// busy?
if|if
condition|(
name|WaitForSingleObject
argument_list|(
name|mutex
argument_list|,
literal|0
argument_list|)
operator|==
name|WAIT_TIMEOUT
condition|)
return|return;
name|ReleaseMutex
argument_list|(
name|mutex
argument_list|)
expr_stmt|;
name|DWORD
name|threadid
init|=
literal|0
decl_stmt|;
name|SoundInfo
name|info
argument_list|(
name|filename
argument_list|,
name|loop
argument_list|,
name|snd
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|current
operator|=
name|CreateThread
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|SoundPlayProc
argument_list|,
operator|&
name|info
argument_list|,
literal|0
argument_list|,
operator|&
name|threadid
argument_list|)
expr_stmt|;
name|CloseHandle
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|WaitForSingleObject
argument_list|(
name|event
argument_list|,
name|INFINITE
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|play
name|void
name|QAuServerWindows
operator|::
name|play
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|int
name|loop
parameter_list|)
block|{
name|playHelper
argument_list|(
name|filename
argument_list|,
name|loop
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|play
name|void
name|QAuServerWindows
operator|::
name|play
parameter_list|(
name|QSound
modifier|*
name|s
parameter_list|)
block|{
name|playHelper
argument_list|(
name|s
operator|->
name|fileName
argument_list|()
argument_list|,
name|s
operator|->
name|loops
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stop
name|void
name|QAuServerWindows
operator|::
name|stop
parameter_list|(
name|QSound
modifier|*
parameter_list|)
block|{
comment|// stop unlooped sound
if|if
condition|(
operator|!
name|current
condition|)
name|PlaySound
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// stop after loop is done
name|current
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|okay
name|bool
name|QAuServerWindows
operator|::
name|okay
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|qt_new_audio_server
name|QAuServer
modifier|*
name|qt_new_audio_server
parameter_list|()
block|{
return|return
operator|new
name|QAuServerWindows
argument_list|(
name|qApp
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qsound_win.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SOUND
end_comment
end_unit
