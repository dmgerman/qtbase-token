begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|"qguifunctions_wince.h"
end_include
begin_include
include|#
directive|include
file|"qmenubar.h"
end_include
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_mobile
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_high_dpi
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_smartphone
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_pocket_pc
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_function_decl
specifier|extern
name|void
name|qt_wince_hide_taskbar
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE_WM
end_ifdef
begin_include
include|#
directive|include
file|<windowsm.h>
end_include
begin_include
include|#
directive|include
file|<tpcshell.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_WINCE_GESTURES
end_ifdef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_include
include|#
directive|include
file|<gesture.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"private/qeventdispatcher_win_p.h"
end_include
begin_include
include|#
directive|include
file|"qeventloop.h"
end_include
begin_include
include|#
directive|include
file|"qclipboard.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qpointer.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_include
include|#
directive|include
file|"qmetaobject.h"
end_include
begin_include
include|#
directive|include
file|"qmime.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapcache.h"
end_include
begin_include
include|#
directive|include
file|"qsessionmanager.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qwhatsthis.h"
end_include
begin_comment
comment|// ######## dependency
end_comment
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qcolormap.h"
end_include
begin_include
include|#
directive|include
file|"qlayout.h"
end_include
begin_include
include|#
directive|include
file|"qtooltip.h"
end_include
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_include
include|#
directive|include
file|"qscrollbar.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_NON_COMMERCIAL
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qnc_win.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"private/qwininputcontext_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qcursor_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qmath_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qbackingstore_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwindowsurface_raster_p.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|<private/qkeymapper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qlocale_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|"qevent_p.h"
end_include
begin_comment
comment|//#define ALIEN_DEBUG
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_THREAD
end_ifndef
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qaccessible.h"
end_include
begin_include
include|#
directive|include
file|<oleacc.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|WM_GETOBJECT
end_ifndef
begin_define
DECL|macro|WM_GETOBJECT
define|#
directive|define
name|WM_GETOBJECT
value|0x003D
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|WINABLEAPI
argument_list|)
end_if
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<bldver.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<winable.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|GID_ZOOM
end_ifndef
begin_define
DECL|macro|GID_ZOOM
define|#
directive|define
name|GID_ZOOM
value|3
end_define
begin_define
DECL|macro|GID_TWOFINGERTAP
define|#
directive|define
name|GID_TWOFINGERTAP
value|6
end_define
begin_define
DECL|macro|GID_PRESSANDTAP
define|#
directive|define
name|GID_PRESSANDTAP
value|7
end_define
begin_define
DECL|macro|GID_ROLLOVER
define|#
directive|define
name|GID_ROLLOVER
value|GID_PRESSANDTAP
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|WM_TOUCH
end_ifndef
begin_define
DECL|macro|WM_TOUCH
define|#
directive|define
name|WM_TOUCH
value|0x0240
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|TOUCHEVENTF_MOVE
end_ifndef
begin_define
DECL|macro|TOUCHEVENTF_MOVE
define|#
directive|define
name|TOUCHEVENTF_MOVE
value|0x0001
end_define
begin_define
DECL|macro|TOUCHEVENTF_DOWN
define|#
directive|define
name|TOUCHEVENTF_DOWN
value|0x0002
end_define
begin_define
DECL|macro|TOUCHEVENTF_UP
define|#
directive|define
name|TOUCHEVENTF_UP
value|0x0004
end_define
begin_define
DECL|macro|TOUCHEVENTF_INRANGE
define|#
directive|define
name|TOUCHEVENTF_INRANGE
value|0x0008
end_define
begin_define
DECL|macro|TOUCHEVENTF_PRIMARY
define|#
directive|define
name|TOUCHEVENTF_PRIMARY
value|0x0010
end_define
begin_define
DECL|macro|TOUCHEVENTF_NOCOALESCE
define|#
directive|define
name|TOUCHEVENTF_NOCOALESCE
value|0x0020
end_define
begin_define
DECL|macro|TOUCHEVENTF_PEN
define|#
directive|define
name|TOUCHEVENTF_PEN
value|0x0040
end_define
begin_define
DECL|macro|TOUCHEVENTF_PALM
define|#
directive|define
name|TOUCHEVENTF_PALM
value|0x0080
end_define
begin_define
DECL|macro|TOUCHINPUTMASKF_TIMEFROMSYSTEM
define|#
directive|define
name|TOUCHINPUTMASKF_TIMEFROMSYSTEM
value|0x0001
end_define
begin_define
DECL|macro|TOUCHINPUTMASKF_EXTRAINFO
define|#
directive|define
name|TOUCHINPUTMASKF_EXTRAINFO
value|0x0002
end_define
begin_define
DECL|macro|TOUCHINPUTMASKF_CONTACTAREA
define|#
directive|define
name|TOUCHINPUTMASKF_CONTACTAREA
value|0x0004
end_define
begin_typedef
DECL|struct|tagTOUCHINPUT
typedef|typedef
struct|struct
name|tagTOUCHINPUT
block|{
DECL|member|x
name|LONG
name|x
decl_stmt|;
DECL|member|y
name|LONG
name|y
decl_stmt|;
DECL|member|hSource
name|HANDLE
name|hSource
decl_stmt|;
DECL|member|dwID
name|DWORD
name|dwID
decl_stmt|;
DECL|member|dwFlags
name|DWORD
name|dwFlags
decl_stmt|;
DECL|member|dwMask
name|DWORD
name|dwMask
decl_stmt|;
DECL|member|dwTime
name|DWORD
name|dwTime
decl_stmt|;
DECL|member|dwExtraInfo
name|ULONG_PTR
name|dwExtraInfo
decl_stmt|;
DECL|member|cxContact
name|DWORD
name|cxContact
decl_stmt|;
DECL|member|cyContact
name|DWORD
name|cyContact
decl_stmt|;
block|}
DECL|typedef|TOUCHINPUT
DECL|typedef|PTOUCHINPUT
name|TOUCHINPUT
operator|,
typedef|*
name|PTOUCHINPUT
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<windowsx.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<ctype.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_define
DECL|macro|PACKETDATA
define|#
directive|define
name|PACKETDATA
value|(PK_X | PK_Y | PK_BUTTONS | PK_NORMAL_PRESSURE | PK_TANGENT_PRESSURE \                      | PK_ORIENTATION | PK_CURSOR | PK_Z)
end_define
begin_define
DECL|macro|PACKETMODE
define|#
directive|define
name|PACKETMODE
value|0
end_define
begin_include
include|#
directive|include
file|<wintab.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|CSR_TYPE
end_ifndef
begin_define
DECL|macro|CSR_TYPE
define|#
directive|define
name|CSR_TYPE
value|20
end_define
begin_comment
DECL|macro|CSR_TYPE
comment|// Some old Wacom wintab.h may not provide this constant.
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<pktdef.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__CYGWIN32__
argument_list|)
end_if
begin_define
DECL|macro|__INSIDE_CYGWIN32__
define|#
directive|define
name|__INSIDE_CYGWIN32__
end_define
begin_include
include|#
directive|include
file|<mywinsock.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|IMR_RECONVERTSTRING
end_ifndef
begin_define
DECL|macro|IMR_RECONVERTSTRING
define|#
directive|define
name|IMR_RECONVERTSTRING
value|4
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|IMR_CONFIRMRECONVERTSTRING
end_ifndef
begin_define
DECL|macro|IMR_CONFIRMRECONVERTSTRING
define|#
directive|define
name|IMR_CONFIRMRECONVERTSTRING
value|0x0005
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE
end_ifdef
begin_ifndef
ifndef|#
directive|ifndef
name|SHRG_RETURNCMD
end_ifndef
begin_struct
DECL|struct|SHRGINFO
struct|struct
name|SHRGINFO
block|{
DECL|member|cbSize
name|DWORD
name|cbSize
decl_stmt|;
DECL|member|hwndClient
name|HWND
name|hwndClient
decl_stmt|;
DECL|member|ptDown
name|POINT
name|ptDown
decl_stmt|;
DECL|member|dwFlags
name|DWORD
name|dwFlags
decl_stmt|;
block|}
struct|;
end_struct
begin_define
DECL|macro|GN_CONTEXTMENU
define|#
directive|define
name|GN_CONTEXTMENU
value|1000
end_define
begin_define
DECL|macro|SHRG_RETURNCMD
define|#
directive|define
name|SHRG_RETURNCMD
value|0x00000001
end_define
begin_define
DECL|macro|SHRG_NOANIMATION
define|#
directive|define
name|SHRG_NOANIMATION
value|0x00000010
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|SPI_SETSIPINFO
end_ifndef
begin_define
DECL|macro|SPI_SETSIPINFO
define|#
directive|define
name|SPI_SETSIPINFO
value|224
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_typedef
DECL|typedef|AygRecognizeGesture
typedef|typedef
name|DWORD
function_decl|(
name|API
modifier|*
name|AygRecognizeGesture
function_decl|)
parameter_list|(
name|SHRGINFO
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrRecognizeGesture
specifier|static
name|AygRecognizeGesture
name|ptrRecognizeGesture
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|aygResolved
specifier|static
name|bool
name|aygResolved
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|resolveAygLibs
specifier|static
name|void
name|resolveAygLibs
parameter_list|()
block|{
if|if
condition|(
operator|!
name|aygResolved
condition|)
block|{
name|aygResolved
operator|=
literal|true
expr_stmt|;
name|QSystemLibrary
name|ayglib
argument_list|(
name|QLatin1String
argument_list|(
literal|"aygshell"
argument_list|)
argument_list|)
decl_stmt|;
name|ptrRecognizeGesture
operator|=
operator|(
name|AygRecognizeGesture
operator|)
name|ayglib
operator|.
name|resolve
argument_list|(
literal|"SHRecognizeGesture"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_GESTURES
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|SPI_SETFONTSMOOTHINGTYPE
end_ifndef
begin_define
DECL|macro|SPI_SETFONTSMOOTHINGTYPE
define|#
directive|define
name|SPI_SETFONTSMOOTHINGTYPE
value|0x200B
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|SPI_GETFONTSMOOTHINGTYPE
end_ifndef
begin_define
DECL|macro|SPI_GETFONTSMOOTHINGTYPE
define|#
directive|define
name|SPI_GETFONTSMOOTHINGTYPE
value|0x200A
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|FE_FONTSMOOTHINGCLEARTYPE
end_ifndef
begin_define
DECL|macro|FE_FONTSMOOTHINGCLEARTYPE
define|#
directive|define
name|FE_FONTSMOOTHINGCLEARTYPE
value|0x0002
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|qt_fontsmoothing_gamma
name|Q_WIDGETS_EXPORT
name|qreal
name|qt_fontsmoothing_gamma
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_cleartype_enabled
name|Q_WIDGETS_EXPORT
name|bool
name|qt_cleartype_enabled
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_win_owndc_required
name|Q_WIDGETS_EXPORT
name|bool
name|qt_win_owndc_required
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qt_win_owndc_required
comment|// CS_OWNDC is required if we use the GL graphicssystem as default
end_comment
begin_typedef
DECL|typedef|PtrWTOpen
typedef|typedef
name|HCTX
function_decl|(
name|API
modifier|*
name|PtrWTOpen
function_decl|)
parameter_list|(
name|HWND
parameter_list|,
name|LPLOGCONTEXT
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTClose
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTClose
function_decl|)
parameter_list|(
name|HCTX
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTInfo
typedef|typedef
name|UINT
function_decl|(
name|API
modifier|*
name|PtrWTInfo
function_decl|)
parameter_list|(
name|UINT
parameter_list|,
name|UINT
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTEnable
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTEnable
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTOverlap
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTOverlap
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTPacketsGet
typedef|typedef
name|int
function_decl|(
name|API
modifier|*
name|PtrWTPacketsGet
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|int
parameter_list|,
name|LPVOID
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTGet
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTGet
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|LPLOGCONTEXT
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTQueueSizeGet
typedef|typedef
name|int
function_decl|(
name|API
modifier|*
name|PtrWTQueueSizeGet
function_decl|)
parameter_list|(
name|HCTX
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWTQueueSizeSet
typedef|typedef
name|BOOL
function_decl|(
name|API
modifier|*
name|PtrWTQueueSizeSet
function_decl|)
parameter_list|(
name|HCTX
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrWTInfo
specifier|static
name|PtrWTInfo
name|ptrWTInfo
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWTEnable
specifier|static
name|PtrWTEnable
name|ptrWTEnable
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWTOverlap
specifier|static
name|PtrWTOverlap
name|ptrWTOverlap
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWTPacketsGet
specifier|static
name|PtrWTPacketsGet
name|ptrWTPacketsGet
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWTGet
specifier|static
name|PtrWTGet
name|ptrWTGet
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|localPacketBuf
specifier|static
name|PACKET
name|localPacketBuf
index|[
name|QT_TABLET_NPACKETQSIZE
index|]
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|localPacketBuf
comment|// our own tablet packet queue.
end_comment
begin_decl_stmt
DECL|variable|qt_tablet_context
name|HCTX
name|qt_tablet_context
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qt_tablet_context
comment|// the hardware context for the tablet (like a window handle)
end_comment
begin_decl_stmt
DECL|variable|qt_tablet_tilt_support
name|bool
name|qt_tablet_tilt_support
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
end_ifndef
begin_function_decl
specifier|static
name|void
name|tabletInit
parameter_list|(
specifier|const
name|quint64
name|uniqueId
parameter_list|,
specifier|const
name|UINT
name|csr_type
parameter_list|,
name|HCTX
name|hTab
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|tabletUpdateCursor
parameter_list|(
name|QTabletDeviceData
modifier|&
name|tdd
parameter_list|,
specifier|const
name|UINT
name|currentCursor
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|initWinTabFunctions
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|// resolve the WINTAB api functions
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABLETEVENT
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_function_decl
specifier|extern
name|IAccessible
modifier|*
name|qt_createWindowsAccessible
parameter_list|(
name|QAccessibleInterface
modifier|*
name|object
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
begin_decl_stmt
specifier|extern
name|bool
name|qt_tabletChokeMouse
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|QWidget
modifier|*
name|qt_get_tablet_widget
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|bool
name|qt_sendSpontaneousEvent
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|QRegion
name|qt_dirtyRegion
parameter_list|(
name|QWidget
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_typedef
DECL|typedef|QTabletCursorInfo
typedef|typedef
name|QHash
argument_list|<
name|quint64
argument_list|,
name|QTabletDeviceData
argument_list|>
name|QTabletCursorInfo
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QTabletCursorInfo
argument_list|,
argument|tCursorInfo
argument_list|)
end_macro
begin_decl_stmt
DECL|variable|currentTabletPointer
name|QTabletDeviceData
name|currentTabletPointer
decl_stmt|;
end_decl_stmt
begin_comment
comment|// from qregion_win.cpp
end_comment
begin_function_decl
specifier|extern
name|HRGN
name|qt_tryCreateRegion
parameter_list|(
name|QRegion
operator|::
name|RegionType
name|type
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|top
parameter_list|,
name|int
name|right
parameter_list|,
name|int
name|bottom
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// support for on-the-fly changes of the XP theme engine
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|WM_THEMECHANGED
end_ifndef
begin_define
DECL|macro|WM_THEMECHANGED
define|#
directive|define
name|WM_THEMECHANGED
value|0x031A
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|COLOR_MENUHILIGHT
end_ifndef
begin_define
DECL|macro|COLOR_MENUHILIGHT
define|#
directive|define
name|COLOR_MENUHILIGHT
value|29
end_define
begin_define
DECL|macro|COLOR_MENUBAR
define|#
directive|define
name|COLOR_MENUBAR
value|30
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// support for xbuttons
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|WM_XBUTTONDOWN
end_ifndef
begin_define
DECL|macro|WM_XBUTTONDOWN
define|#
directive|define
name|WM_XBUTTONDOWN
value|0x020B
end_define
begin_define
DECL|macro|WM_XBUTTONUP
define|#
directive|define
name|WM_XBUTTONUP
value|0x020C
end_define
begin_define
DECL|macro|WM_XBUTTONDBLCLK
define|#
directive|define
name|WM_XBUTTONDBLCLK
value|0x020D
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GET_KEYSTATE_WPARAM
end_ifndef
begin_define
DECL|macro|GET_KEYSTATE_WPARAM
define|#
directive|define
name|GET_KEYSTATE_WPARAM
parameter_list|(
name|wParam
parameter_list|)
value|(LOWORD(wParam))
end_define
begin_define
DECL|macro|GET_XBUTTON_WPARAM
define|#
directive|define
name|GET_XBUTTON_WPARAM
parameter_list|(
name|wParam
parameter_list|)
value|(HIWORD(wParam))
end_define
begin_define
DECL|macro|XBUTTON1
define|#
directive|define
name|XBUTTON1
value|0x0001
end_define
begin_define
DECL|macro|XBUTTON2
define|#
directive|define
name|XBUTTON2
value|0x0002
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|MK_XBUTTON1
end_ifndef
begin_define
DECL|macro|MK_XBUTTON1
define|#
directive|define
name|MK_XBUTTON1
value|0x0020
end_define
begin_define
DECL|macro|MK_XBUTTON2
define|#
directive|define
name|MK_XBUTTON2
value|0x0040
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// support for multi-media-keys
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|WM_APPCOMMAND
end_ifndef
begin_define
DECL|macro|WM_APPCOMMAND
define|#
directive|define
name|WM_APPCOMMAND
value|0x0319
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|FAPPCOMMAND_MOUSE
end_ifndef
begin_define
DECL|macro|FAPPCOMMAND_MOUSE
define|#
directive|define
name|FAPPCOMMAND_MOUSE
value|0x8000
end_define
begin_define
DECL|macro|FAPPCOMMAND_KEY
define|#
directive|define
name|FAPPCOMMAND_KEY
value|0
end_define
begin_define
DECL|macro|FAPPCOMMAND_OEM
define|#
directive|define
name|FAPPCOMMAND_OEM
value|0x1000
end_define
begin_define
DECL|macro|FAPPCOMMAND_MASK
define|#
directive|define
name|FAPPCOMMAND_MASK
value|0xF000
end_define
begin_define
DECL|macro|GET_APPCOMMAND_LPARAM
define|#
directive|define
name|GET_APPCOMMAND_LPARAM
parameter_list|(
name|lParam
parameter_list|)
value|((short)(HIWORD(lParam)& ~FAPPCOMMAND_MASK))
end_define
begin_define
DECL|macro|GET_DEVICE_LPARAM
define|#
directive|define
name|GET_DEVICE_LPARAM
parameter_list|(
name|lParam
parameter_list|)
value|((WORD)(HIWORD(lParam)& FAPPCOMMAND_MASK))
end_define
begin_define
DECL|macro|GET_MOUSEORKEY_LPARAM
define|#
directive|define
name|GET_MOUSEORKEY_LPARAM
value|GET_DEVICE_LPARAM
end_define
begin_define
DECL|macro|GET_FLAGS_LPARAM
define|#
directive|define
name|GET_FLAGS_LPARAM
parameter_list|(
name|lParam
parameter_list|)
value|(LOWORD(lParam))
end_define
begin_define
DECL|macro|GET_KEYSTATE_LPARAM
define|#
directive|define
name|GET_KEYSTATE_LPARAM
parameter_list|(
name|lParam
parameter_list|)
value|GET_FLAGS_LPARAM(lParam)
end_define
begin_define
DECL|macro|APPCOMMAND_BROWSER_BACKWARD
define|#
directive|define
name|APPCOMMAND_BROWSER_BACKWARD
value|1
end_define
begin_define
DECL|macro|APPCOMMAND_BROWSER_FORWARD
define|#
directive|define
name|APPCOMMAND_BROWSER_FORWARD
value|2
end_define
begin_define
DECL|macro|APPCOMMAND_BROWSER_REFRESH
define|#
directive|define
name|APPCOMMAND_BROWSER_REFRESH
value|3
end_define
begin_define
DECL|macro|APPCOMMAND_BROWSER_STOP
define|#
directive|define
name|APPCOMMAND_BROWSER_STOP
value|4
end_define
begin_define
DECL|macro|APPCOMMAND_BROWSER_SEARCH
define|#
directive|define
name|APPCOMMAND_BROWSER_SEARCH
value|5
end_define
begin_define
DECL|macro|APPCOMMAND_BROWSER_FAVORITES
define|#
directive|define
name|APPCOMMAND_BROWSER_FAVORITES
value|6
end_define
begin_define
DECL|macro|APPCOMMAND_BROWSER_HOME
define|#
directive|define
name|APPCOMMAND_BROWSER_HOME
value|7
end_define
begin_define
DECL|macro|APPCOMMAND_VOLUME_MUTE
define|#
directive|define
name|APPCOMMAND_VOLUME_MUTE
value|8
end_define
begin_define
DECL|macro|APPCOMMAND_VOLUME_DOWN
define|#
directive|define
name|APPCOMMAND_VOLUME_DOWN
value|9
end_define
begin_define
DECL|macro|APPCOMMAND_VOLUME_UP
define|#
directive|define
name|APPCOMMAND_VOLUME_UP
value|10
end_define
begin_define
DECL|macro|APPCOMMAND_MEDIA_NEXTTRACK
define|#
directive|define
name|APPCOMMAND_MEDIA_NEXTTRACK
value|11
end_define
begin_define
DECL|macro|APPCOMMAND_MEDIA_PREVIOUSTRACK
define|#
directive|define
name|APPCOMMAND_MEDIA_PREVIOUSTRACK
value|12
end_define
begin_define
DECL|macro|APPCOMMAND_MEDIA_STOP
define|#
directive|define
name|APPCOMMAND_MEDIA_STOP
value|13
end_define
begin_define
DECL|macro|APPCOMMAND_MEDIA_PLAY_PAUSE
define|#
directive|define
name|APPCOMMAND_MEDIA_PLAY_PAUSE
value|14
end_define
begin_define
DECL|macro|APPCOMMAND_LAUNCH_MAIL
define|#
directive|define
name|APPCOMMAND_LAUNCH_MAIL
value|15
end_define
begin_define
DECL|macro|APPCOMMAND_LAUNCH_MEDIA_SELECT
define|#
directive|define
name|APPCOMMAND_LAUNCH_MEDIA_SELECT
value|16
end_define
begin_define
DECL|macro|APPCOMMAND_LAUNCH_APP1
define|#
directive|define
name|APPCOMMAND_LAUNCH_APP1
value|17
end_define
begin_define
DECL|macro|APPCOMMAND_LAUNCH_APP2
define|#
directive|define
name|APPCOMMAND_LAUNCH_APP2
value|18
end_define
begin_define
DECL|macro|APPCOMMAND_BASS_DOWN
define|#
directive|define
name|APPCOMMAND_BASS_DOWN
value|19
end_define
begin_define
DECL|macro|APPCOMMAND_BASS_BOOST
define|#
directive|define
name|APPCOMMAND_BASS_BOOST
value|20
end_define
begin_define
DECL|macro|APPCOMMAND_BASS_UP
define|#
directive|define
name|APPCOMMAND_BASS_UP
value|21
end_define
begin_define
DECL|macro|APPCOMMAND_TREBLE_DOWN
define|#
directive|define
name|APPCOMMAND_TREBLE_DOWN
value|22
end_define
begin_define
DECL|macro|APPCOMMAND_TREBLE_UP
define|#
directive|define
name|APPCOMMAND_TREBLE_UP
value|23
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// FAPPCOMMAND_MOUSE
end_comment
begin_comment
comment|// New commands from Windows XP (some even Sp1)
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|APPCOMMAND_MICROPHONE_VOLUME_MUTE
end_ifndef
begin_define
DECL|macro|APPCOMMAND_MICROPHONE_VOLUME_MUTE
define|#
directive|define
name|APPCOMMAND_MICROPHONE_VOLUME_MUTE
value|24
end_define
begin_define
DECL|macro|APPCOMMAND_MICROPHONE_VOLUME_DOWN
define|#
directive|define
name|APPCOMMAND_MICROPHONE_VOLUME_DOWN
value|25
end_define
begin_define
DECL|macro|APPCOMMAND_MICROPHONE_VOLUME_UP
define|#
directive|define
name|APPCOMMAND_MICROPHONE_VOLUME_UP
value|26
end_define
begin_define
DECL|macro|APPCOMMAND_HELP
define|#
directive|define
name|APPCOMMAND_HELP
value|27
end_define
begin_define
DECL|macro|APPCOMMAND_FIND
define|#
directive|define
name|APPCOMMAND_FIND
value|28
end_define
begin_define
DECL|macro|APPCOMMAND_NEW
define|#
directive|define
name|APPCOMMAND_NEW
value|29
end_define
begin_define
DECL|macro|APPCOMMAND_OPEN
define|#
directive|define
name|APPCOMMAND_OPEN
value|30
end_define
begin_define
DECL|macro|APPCOMMAND_CLOSE
define|#
directive|define
name|APPCOMMAND_CLOSE
value|31
end_define
begin_define
DECL|macro|APPCOMMAND_SAVE
define|#
directive|define
name|APPCOMMAND_SAVE
value|32
end_define
begin_define
DECL|macro|APPCOMMAND_PRINT
define|#
directive|define
name|APPCOMMAND_PRINT
value|33
end_define
begin_define
DECL|macro|APPCOMMAND_UNDO
define|#
directive|define
name|APPCOMMAND_UNDO
value|34
end_define
begin_define
DECL|macro|APPCOMMAND_REDO
define|#
directive|define
name|APPCOMMAND_REDO
value|35
end_define
begin_define
DECL|macro|APPCOMMAND_COPY
define|#
directive|define
name|APPCOMMAND_COPY
value|36
end_define
begin_define
DECL|macro|APPCOMMAND_CUT
define|#
directive|define
name|APPCOMMAND_CUT
value|37
end_define
begin_define
DECL|macro|APPCOMMAND_PASTE
define|#
directive|define
name|APPCOMMAND_PASTE
value|38
end_define
begin_define
DECL|macro|APPCOMMAND_REPLY_TO_MAIL
define|#
directive|define
name|APPCOMMAND_REPLY_TO_MAIL
value|39
end_define
begin_define
DECL|macro|APPCOMMAND_FORWARD_MAIL
define|#
directive|define
name|APPCOMMAND_FORWARD_MAIL
value|40
end_define
begin_define
DECL|macro|APPCOMMAND_SEND_MAIL
define|#
directive|define
name|APPCOMMAND_SEND_MAIL
value|41
end_define
begin_define
DECL|macro|APPCOMMAND_SPELL_CHECK
define|#
directive|define
name|APPCOMMAND_SPELL_CHECK
value|42
end_define
begin_define
DECL|macro|APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE
define|#
directive|define
name|APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE
value|43
end_define
begin_define
DECL|macro|APPCOMMAND_MIC_ON_OFF_TOGGLE
define|#
directive|define
name|APPCOMMAND_MIC_ON_OFF_TOGGLE
value|44
end_define
begin_define
DECL|macro|APPCOMMAND_CORRECTION_LIST
define|#
directive|define
name|APPCOMMAND_CORRECTION_LIST
value|45
end_define
begin_define
DECL|macro|APPCOMMAND_MEDIA_PLAY
define|#
directive|define
name|APPCOMMAND_MEDIA_PLAY
value|46
end_define
begin_define
DECL|macro|APPCOMMAND_MEDIA_PAUSE
define|#
directive|define
name|APPCOMMAND_MEDIA_PAUSE
value|47
end_define
begin_define
DECL|macro|APPCOMMAND_MEDIA_RECORD
define|#
directive|define
name|APPCOMMAND_MEDIA_RECORD
value|48
end_define
begin_define
DECL|macro|APPCOMMAND_MEDIA_FAST_FORWARD
define|#
directive|define
name|APPCOMMAND_MEDIA_FAST_FORWARD
value|49
end_define
begin_define
DECL|macro|APPCOMMAND_MEDIA_REWIND
define|#
directive|define
name|APPCOMMAND_MEDIA_REWIND
value|50
end_define
begin_define
DECL|macro|APPCOMMAND_MEDIA_CHANNEL_UP
define|#
directive|define
name|APPCOMMAND_MEDIA_CHANNEL_UP
value|51
end_define
begin_define
DECL|macro|APPCOMMAND_MEDIA_CHANNEL_DOWN
define|#
directive|define
name|APPCOMMAND_MEDIA_CHANNEL_DOWN
value|52
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// APPCOMMAND_MICROPHONE_VOLUME_MUTE
end_comment
begin_if
if|#
directive|if
operator|(
name|_WIN32_WINNT
operator|<
literal|0x0400
operator|)
end_if
begin_comment
comment|// This struct is defined in winuser.h if the _WIN32_WINNT>= 0x0400 -- in the
end_comment
begin_comment
comment|// other cases we have to define it on our own.
end_comment
begin_typedef
DECL|struct|tagTRACKMOUSEEVENT
typedef|typedef
struct|struct
name|tagTRACKMOUSEEVENT
block|{
DECL|member|cbSize
name|DWORD
name|cbSize
decl_stmt|;
DECL|member|dwFlags
name|DWORD
name|dwFlags
decl_stmt|;
DECL|member|hwndTrack
name|HWND
name|hwndTrack
decl_stmt|;
DECL|member|dwHoverTime
name|DWORD
name|dwHoverTime
decl_stmt|;
block|}
DECL|typedef|TRACKMOUSEEVENT
DECL|typedef|LPTRACKMOUSEEVENT
name|TRACKMOUSEEVENT
operator|,
typedef|*
name|LPTRACKMOUSEEVENT
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|WM_MOUSELEAVE
end_ifndef
begin_define
DECL|macro|WM_MOUSELEAVE
define|#
directive|define
name|WM_MOUSELEAVE
value|0x02A3
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|"private/qwidget_p.h"
name|QT_END_INCLUDE_NAMESPACE
specifier|static
name|int
name|translateButtonState
parameter_list|(
name|int
name|s
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|button
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// ##### get rid of this!
end_comment
begin_function
DECL|function|qt_colorref2qrgb
name|QRgb
name|qt_colorref2qrgb
parameter_list|(
name|COLORREF
name|col
parameter_list|)
block|{
return|return
name|qRgb
argument_list|(
name|GetRValue
argument_list|(
name|col
argument_list|)
argument_list|,
name|GetGValue
argument_list|(
name|col
argument_list|)
argument_list|,
name|GetBValue
argument_list|(
name|col
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   Internal variables and functions  *****************************************************************************/
end_comment
begin_decl_stmt
DECL|variable|curWin
specifier|static
name|HWND
name|curWin
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|curWin
comment|// current window
end_comment
begin_decl_stmt
DECL|variable|displayDC
specifier|static
name|HDC
name|displayDC
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|displayDC
comment|// display device context
end_comment
begin_comment
comment|// Session management
end_comment
begin_decl_stmt
DECL|variable|sm_blockUserInput
specifier|static
name|bool
name|sm_blockUserInput
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sm_smActive
specifier|static
name|bool
name|sm_smActive
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|QSessionManager
modifier|*
name|qt_session_manager_self
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sm_cancel
specifier|static
name|bool
name|sm_cancel
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|replayPopupMouseEvent
specifier|static
name|bool
name|replayPopupMouseEvent
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|replayPopupMouseEvent
comment|// replay handling when popups close
end_comment
begin_comment
comment|// ignore the next release event if return from a modal widget
end_comment
begin_decl_stmt
DECL|variable|qt_win_ignoreNextMouseReleaseEvent
name|Q_WIDGETS_EXPORT
name|bool
name|qt_win_ignoreNextMouseReleaseEvent
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
end_if
begin_decl_stmt
DECL|variable|appNoGrab
specifier|static
name|bool
name|appNoGrab
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|appNoGrab
comment|// mouse/keyboard grabbing
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|app_do_modal
specifier|static
name|bool
name|app_do_modal
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|app_do_modal
comment|// modal mode
end_comment
begin_decl_stmt
specifier|extern
name|QWidgetList
modifier|*
name|qt_modal_stack
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|QDesktopWidget
modifier|*
name|qt_desktopWidget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|popupButtonFocus
specifier|static
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|popupButtonFocus
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|static
name|bool
name|qt_try_modal
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|MSG
modifier|*
parameter_list|,
name|int
modifier|&
name|ret
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|qt_button_down
name|QWidget
modifier|*
name|qt_button_down
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qt_button_down
comment|// widget got last button-down
end_comment
begin_decl_stmt
DECL|variable|qt_last_mouse_receiver
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|qt_last_mouse_receiver
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|autoCaptureWnd
specifier|static
name|HWND
name|autoCaptureWnd
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|imeParentWnd
specifier|static
name|HWND
name|imeParentWnd
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|static
name|void
name|setAutoCapture
parameter_list|(
name|HWND
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// automatic capture
end_comment
begin_function_decl
specifier|static
name|void
name|releaseAutoCapture
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|unregWinClasses
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|QCursor
modifier|*
name|qt_grab_cursor
parameter_list|()
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
end_if
begin_define
DECL|macro|__export
define|#
directive|define
name|__export
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_extern
extern|extern
literal|"C"
name|LRESULT
name|QT_WIN_CALLBACK
name|QtWndProc
parameter_list|(
name|HWND
parameter_list|,
name|UINT
parameter_list|,
name|WPARAM
parameter_list|,
name|LPARAM
parameter_list|)
function_decl|;
end_extern
begin_class
DECL|class|QETWidget
class|class
name|QETWidget
super|:
specifier|public
name|QWidget
comment|// event translator widget
block|{
public|public:
DECL|function|xtra
name|QWExtra
modifier|*
name|xtra
parameter_list|()
block|{
return|return
name|d_func
argument_list|()
operator|->
name|extraData
argument_list|()
return|;
block|}
DECL|function|topData
name|QTLWExtra
modifier|*
name|topData
parameter_list|()
block|{
return|return
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
return|;
block|}
DECL|function|maybeTopData
name|QTLWExtra
modifier|*
name|maybeTopData
parameter_list|()
block|{
return|return
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
return|;
block|}
DECL|function|syncBackingStore
name|void
name|syncBackingStore
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|syncBackingStore
argument_list|(
name|rgn
argument_list|)
expr_stmt|;
block|}
DECL|function|syncBackingStore
name|void
name|syncBackingStore
parameter_list|()
block|{
name|d_func
argument_list|()
operator|->
name|syncBackingStore
argument_list|()
expr_stmt|;
block|}
DECL|function|dataPtr
name|QWidgetData
modifier|*
name|dataPtr
parameter_list|()
block|{
return|return
name|data
return|;
block|}
DECL|function|dptr
name|QWidgetPrivate
modifier|*
name|dptr
parameter_list|()
block|{
return|return
name|d_func
argument_list|()
return|;
block|}
DECL|function|frameStrut
name|QRect
name|frameStrut
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|frameStrut
argument_list|()
return|;
block|}
DECL|function|winEvent
name|bool
name|winEvent
parameter_list|(
name|MSG
modifier|*
name|m
parameter_list|,
name|long
modifier|*
name|r
parameter_list|)
block|{
return|return
name|QWidget
operator|::
name|winEvent
argument_list|(
name|m
argument_list|,
name|r
argument_list|)
return|;
block|}
DECL|function|markFrameStrutDirty
name|void
name|markFrameStrutDirty
parameter_list|()
block|{
name|data
operator|->
name|fstrut_dirty
operator|=
literal|1
expr_stmt|;
block|}
name|bool
name|translateMouseEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
function_decl|;
name|bool
name|translateWheelEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
function_decl|;
name|bool
name|translatePaintEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
function_decl|;
name|bool
name|translateConfigEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
function_decl|;
name|bool
name|translateCloseEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
function_decl|;
name|bool
name|translateTabletEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|,
name|PACKET
modifier|*
name|localPacketBuf
parameter_list|,
name|int
name|numPackets
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
name|bool
name|translateGestureEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|,
specifier|const
name|GESTUREINFO
modifier|&
name|gi
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|repolishStyle
parameter_list|(
name|QStyle
modifier|&
name|style
parameter_list|)
function_decl|;
DECL|function|showChildren
specifier|inline
name|void
name|showChildren
parameter_list|(
name|bool
name|spontaneous
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|showChildren
argument_list|(
name|spontaneous
argument_list|)
expr_stmt|;
block|}
DECL|function|hideChildren
specifier|inline
name|void
name|hideChildren
parameter_list|(
name|bool
name|spontaneous
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|hideChildren
argument_list|(
name|spontaneous
argument_list|)
expr_stmt|;
block|}
DECL|function|testWindowState
specifier|inline
name|uint
name|testWindowState
parameter_list|(
name|uint
name|teststate
parameter_list|)
block|{
return|return
name|dataPtr
argument_list|()
operator|->
name|window_state
operator|&
name|teststate
return|;
block|}
DECL|function|setWindowTitle_helper
specifier|inline
name|void
name|setWindowTitle_helper
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|setWindowTitle_helper
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
DECL|function|forceUpdate
specifier|inline
name|void
name|forceUpdate
parameter_list|()
block|{
name|QTLWExtra
modifier|*
name|tlwExtra
init|=
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
if|if
condition|(
name|tlwExtra
operator|&&
name|tlwExtra
operator|->
name|backingStore
condition|)
name|tlwExtra
operator|->
name|backingStore
operator|->
name|markDirty
argument_list|(
name|rect
argument_list|()
argument_list|,
name|this
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|// need to get default font?
end_comment
begin_decl_stmt
specifier|extern
name|bool
name|qt_app_has_font
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|QFont
name|qt_LOGFONTtoQFont
parameter_list|(
name|LOGFONT
modifier|&
name|lf
parameter_list|,
name|bool
name|scale
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|qt_set_windows_color_resources
specifier|static
name|void
name|qt_set_windows_color_resources
parameter_list|()
block|{
comment|// Do the color settings
name|QPalette
name|pal
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_WINDOWTEXT
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_BTNFACE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_BTNHIGHLIGHT
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_BTNSHADOW
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Mid
argument_list|,
name|pal
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_WINDOWTEXT
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|BrightText
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_BTNHIGHLIGHT
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_WINDOW
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_BTNFACE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_BTNTEXT
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_3DLIGHT
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_3DDKSHADOW
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_HIGHLIGHT
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_HIGHLIGHTTEXT
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
comment|// ### hardcoded until I find out how to get it from the system settings.
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|LinkVisited
argument_list|,
name|pal
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|dark
argument_list|(
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Link
argument_list|,
name|pal
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|light
argument_list|(
literal|130
argument_list|)
argument_list|)
expr_stmt|;
comment|// Background == Base on Windows CE
if|if
condition|(
name|qt_wince_is_smartphone
argument_list|()
operator|||
name|qt_wince_is_pocket_pc
argument_list|()
condition|)
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Background
argument_list|,
name|pal
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Link
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|LinkVisited
argument_list|,
name|Qt
operator|::
name|magenta
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|pal
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|,
name|pal
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Light
argument_list|,
name|pal
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|,
name|pal
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pal
operator|.
name|midlight
argument_list|()
operator|==
name|pal
operator|.
name|button
argument_list|()
condition|)
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|pal
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|lighter
argument_list|(
literal|110
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pal
operator|.
name|background
argument_list|()
operator|!=
name|pal
operator|.
name|base
argument_list|()
condition|)
block|{
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QColor
name|bg
init|=
name|pal
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
specifier|const
name|QColor
name|fg
init|=
name|pal
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|,
name|btn
init|=
name|pal
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|QColor
name|disabled
argument_list|(
operator|(
name|fg
operator|.
name|red
argument_list|()
operator|+
name|btn
operator|.
name|red
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|fg
operator|.
name|green
argument_list|()
operator|+
name|btn
operator|.
name|green
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|fg
operator|.
name|blue
argument_list|()
operator|+
name|btn
operator|.
name|blue
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
decl_stmt|;
name|pal
operator|.
name|setColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|pal
operator|.
name|foreground
argument_list|()
argument_list|,
name|pal
operator|.
name|button
argument_list|()
argument_list|,
name|pal
operator|.
name|light
argument_list|()
argument_list|,
name|pal
operator|.
name|dark
argument_list|()
argument_list|,
name|pal
operator|.
name|mid
argument_list|()
argument_list|,
name|pal
operator|.
name|text
argument_list|()
argument_list|,
name|pal
operator|.
name|brightText
argument_list|()
argument_list|,
name|pal
operator|.
name|base
argument_list|()
argument_list|,
name|pal
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_HIGHLIGHT
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_HIGHLIGHTTEXT
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|bg
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|setSystemPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|initializeWidgetPaletteHash
argument_list|()
expr_stmt|;
name|QColor
name|ttip
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_INFOBK
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QColor
name|ttipText
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_INFOTEXT
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
name|QPalette
name|tiplabel
argument_list|(
name|pal
argument_list|)
decl_stmt|;
name|tiplabel
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|ttip
argument_list|)
expr_stmt|;
name|tiplabel
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|,
name|ttip
argument_list|)
expr_stmt|;
name|tiplabel
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|ttipText
argument_list|)
expr_stmt|;
name|tiplabel
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|ttipText
argument_list|)
expr_stmt|;
name|tiplabel
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|ttipText
argument_list|)
expr_stmt|;
name|tiplabel
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|ttip
argument_list|)
expr_stmt|;
name|tiplabel
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|,
name|ttip
argument_list|)
expr_stmt|;
name|tiplabel
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|ttipText
argument_list|)
expr_stmt|;
name|tiplabel
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|ttipText
argument_list|)
expr_stmt|;
name|tiplabel
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|ttipText
argument_list|)
expr_stmt|;
specifier|const
name|QColor
name|fg
init|=
name|tiplabel
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|,
name|btn
init|=
name|tiplabel
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|QColor
name|disabled
argument_list|(
operator|(
name|fg
operator|.
name|red
argument_list|()
operator|+
name|btn
operator|.
name|red
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|fg
operator|.
name|green
argument_list|()
operator|+
name|btn
operator|.
name|green
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|fg
operator|.
name|blue
argument_list|()
operator|+
name|btn
operator|.
name|blue
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
decl_stmt|;
name|tiplabel
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|tiplabel
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|tiplabel
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|tiplabel
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|BrightText
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|QToolTip
operator|::
name|setPalette
argument_list|(
name|tiplabel
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_TOOLTIP
block|}
block|}
end_function
begin_function
DECL|function|qt_set_windows_font_resources
specifier|static
name|void
name|qt_set_windows_font_resources
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|NONCLIENTMETRICS
name|ncm
decl_stmt|;
name|ncm
operator|.
name|cbSize
operator|=
name|FIELD_OFFSET
argument_list|(
name|NONCLIENTMETRICS
argument_list|,
name|lfMessageFont
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|LOGFONT
argument_list|)
expr_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_GETNONCLIENTMETRICS
argument_list|,
name|ncm
operator|.
name|cbSize
argument_list|,
operator|&
name|ncm
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QFont
name|menuFont
init|=
name|qt_LOGFONTtoQFont
argument_list|(
name|ncm
operator|.
name|lfMenuFont
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QFont
name|messageFont
init|=
name|qt_LOGFONTtoQFont
argument_list|(
name|ncm
operator|.
name|lfMessageFont
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QFont
name|statusFont
init|=
name|qt_LOGFONTtoQFont
argument_list|(
name|ncm
operator|.
name|lfStatusFont
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QFont
name|titleFont
init|=
name|qt_LOGFONTtoQFont
argument_list|(
name|ncm
operator|.
name|lfCaptionFont
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOGFONT
name|lfIconTitleFont
decl_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_GETICONTITLELOGFONT
argument_list|,
sizeof|sizeof
argument_list|(
name|lfIconTitleFont
argument_list|)
argument_list|,
operator|&
name|lfIconTitleFont
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QFont
name|iconTitleFont
init|=
name|qt_LOGFONTtoQFont
argument_list|(
name|lfIconTitleFont
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|setFont
argument_list|(
name|menuFont
argument_list|,
literal|"QMenu"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setFont
argument_list|(
name|menuFont
argument_list|,
literal|"QMenuBar"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setFont
argument_list|(
name|messageFont
argument_list|,
literal|"QMessageBox"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setFont
argument_list|(
name|statusFont
argument_list|,
literal|"QTipLabel"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setFont
argument_list|(
name|statusFont
argument_list|,
literal|"QStatusBar"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setFont
argument_list|(
name|titleFont
argument_list|,
literal|"Q3TitleBar"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setFont
argument_list|(
name|titleFont
argument_list|,
literal|"QWorkspaceTitleBar"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setFont
argument_list|(
name|iconTitleFont
argument_list|,
literal|"QAbstractItemView"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setFont
argument_list|(
name|iconTitleFont
argument_list|,
literal|"QDockWidgetTitle"
argument_list|)
expr_stmt|;
else|#
directive|else
name|LOGFONT
name|lf
decl_stmt|;
name|HGDIOBJ
name|stockFont
init|=
name|GetStockObject
argument_list|(
name|SYSTEM_FONT
argument_list|)
decl_stmt|;
name|GetObject
argument_list|(
name|stockFont
argument_list|,
sizeof|sizeof
argument_list|(
name|lf
argument_list|)
argument_list|,
operator|&
name|lf
argument_list|)
expr_stmt|;
name|QFont
name|systemFont
init|=
name|qt_LOGFONTtoQFont
argument_list|(
name|lf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QApplicationPrivate
operator|::
name|setSystemFont
argument_list|(
name|systemFont
argument_list|)
expr_stmt|;
name|QFont
name|smallerFont
init|=
name|systemFont
decl_stmt|;
if|if
condition|(
name|qt_wince_is_mobile
argument_list|()
condition|)
block|{
name|smallerFont
operator|.
name|setPointSize
argument_list|(
name|systemFont
operator|.
name|pointSize
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setFont
argument_list|(
name|smallerFont
argument_list|,
literal|"QTabBar"
argument_list|)
expr_stmt|;
name|smallerFont
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setFont
argument_list|(
name|smallerFont
argument_list|,
literal|"QAbstractButton"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// Q_WS_WINCE
block|}
end_function
begin_function
DECL|function|qt_win_read_cleartype_settings
specifier|static
name|void
name|qt_win_read_cleartype_settings
parameter_list|()
block|{
name|UINT
name|result
init|=
literal|0
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
if|if
condition|(
name|SystemParametersInfo
argument_list|(
name|SPI_GETFONTSMOOTHING
argument_list|,
literal|0
argument_list|,
operator|&
name|result
argument_list|,
literal|0
argument_list|)
condition|)
name|qt_cleartype_enabled
operator|=
name|result
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|SystemParametersInfo
argument_list|(
name|SPI_GETFONTSMOOTHINGTYPE
argument_list|,
literal|0
argument_list|,
operator|&
name|result
argument_list|,
literal|0
argument_list|)
condition|)
name|qt_cleartype_enabled
operator|=
operator|(
name|result
operator|==
name|FE_FONTSMOOTHINGCLEARTYPE
operator|)
expr_stmt|;
endif|#
directive|endif
name|int
name|winSmooth
decl_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
literal|0x200C
comment|/* SPI_GETFONTSMOOTHINGCONTRAST */
argument_list|,
literal|0
argument_list|,
operator|&
name|winSmooth
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|qt_fontsmoothing_gamma
operator|=
name|winSmooth
operator|/
name|qreal
argument_list|(
literal|1000.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qt_fontsmoothing_gamma
operator|=
literal|1.0
expr_stmt|;
block|}
comment|// Safeguard ourselves against corrupt registry values...
if|if
condition|(
name|qt_fontsmoothing_gamma
operator|>
literal|5
operator|||
name|qt_fontsmoothing_gamma
operator|<
literal|1
condition|)
name|qt_fontsmoothing_gamma
operator|=
name|qreal
argument_list|(
literal|1.4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_set_windows_resources
specifier|static
name|void
name|qt_set_windows_resources
parameter_list|()
block|{
if|if
condition|(
name|QApplication
operator|::
name|type
argument_list|()
operator|!=
name|QApplication
operator|::
name|Tty
condition|)
operator|(
name|void
operator|)
name|QApplication
operator|::
name|style
argument_list|()
expr_stmt|;
comment|// trigger creation of application style
name|qt_set_windows_font_resources
argument_list|()
expr_stmt|;
name|qt_set_windows_color_resources
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initializeWidgetPaletteHash
name|void
name|QApplicationPrivate
operator|::
name|initializeWidgetPaletteHash
parameter_list|()
block|{
name|QPalette
name|pal
init|=
operator|*
name|QApplicationPrivate
operator|::
name|sys_pal
decl_stmt|;
name|QColor
name|menuCol
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_MENU
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QColor
name|menuText
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_MENUTEXT
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|BOOL
name|isFlat
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
operator|&&
name|QSysInfo
operator|::
name|WindowsVersion
operator|<
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
condition|)
name|SystemParametersInfo
argument_list|(
name|SPI_GETFLATMENU
argument_list|,
literal|0
argument_list|,
operator|&
name|isFlat
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QPalette
name|menu
argument_list|(
name|pal
argument_list|)
decl_stmt|;
comment|// we might need a special color group for the menu.
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|menuCol
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|menuText
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|menuText
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|menuText
argument_list|)
expr_stmt|;
specifier|const
name|QColor
name|fg
init|=
name|menu
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|,
name|btn
init|=
name|menu
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|QColor
name|disabled
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_GRAYTEXT
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|QColor
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
operator|&&
name|QSysInfo
operator|::
name|WindowsVersion
operator|<
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
operator|&&
name|isFlat
condition|?
name|COLOR_MENUHILIGHT
else|:
name|COLOR_HIGHLIGHT
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|menu
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|menu
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|menu
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|menu
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|menu
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|menu
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|menu
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|menu
argument_list|,
literal|"QMenu"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
operator|&&
name|QSysInfo
operator|::
name|WindowsVersion
operator|<
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
operator|&&
name|isFlat
condition|)
block|{
name|QColor
name|menubar
argument_list|(
name|qt_colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_MENUBAR
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|menubar
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|menubar
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|menubar
argument_list|)
expr_stmt|;
block|}
name|QApplication
operator|::
name|setPalette
argument_list|(
name|menu
argument_list|,
literal|"QMenuBar"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_set_windows_updateScrollBar
specifier|static
name|void
name|qt_set_windows_updateScrollBar
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QList
argument_list|<
name|QObject
modifier|*
argument_list|>
name|children
init|=
name|widget
operator|->
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QObject
modifier|*
name|o
init|=
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|o
operator|->
name|isWidgetType
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
condition|)
name|qt_set_windows_updateScrollBar
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
if|if
condition|(
name|qobject_cast
argument_list|<
name|QScrollBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|widget
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*****************************************************************************   qt_init() - initializes Qt for Windows  *****************************************************************************/
end_comment
begin_typedef
DECL|typedef|PtrSetProcessDPIAware
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrSetProcessDPIAware
function_decl|)
parameter_list|(
name|VOID
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrSetProcessDPIAware
specifier|static
name|PtrSetProcessDPIAware
name|ptrSetProcessDPIAware
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrUpdateLayeredWindow
name|PtrUpdateLayeredWindow
name|ptrUpdateLayeredWindow
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrUpdateLayeredWindowIndirect
name|PtrUpdateLayeredWindowIndirect
name|ptrUpdateLayeredWindowIndirect
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_updateLayeredWindowIndirect
specifier|static
name|BOOL
name|WINAPI
name|qt_updateLayeredWindowIndirect
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
specifier|const
name|Q_UPDATELAYEREDWINDOWINFO
modifier|*
name|info
parameter_list|)
block|{
return|return
call|(
modifier|*
name|ptrUpdateLayeredWindow
call|)
argument_list|(
name|hwnd
argument_list|,
name|info
operator|->
name|hdcDst
argument_list|,
name|info
operator|->
name|pptDst
argument_list|,
name|info
operator|->
name|psize
argument_list|,
name|info
operator|->
name|hdcSrc
argument_list|,
name|info
operator|->
name|pptSrc
argument_list|,
name|info
operator|->
name|crKey
argument_list|,
name|info
operator|->
name|pblend
argument_list|,
name|info
operator|->
name|dwFlags
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_init
name|void
name|qt_init
parameter_list|(
name|QApplicationPrivate
modifier|*
name|priv
parameter_list|,
name|int
parameter_list|)
block|{
name|int
name|argc
init|=
name|priv
operator|->
name|argc
decl_stmt|;
name|char
modifier|*
modifier|*
name|argv
init|=
name|priv
operator|->
name|argv
decl_stmt|;
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
comment|// Get command line params
name|j
operator|=
name|argc
condition|?
literal|1
else|:
literal|0
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
name|argc
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|argv
index|[
name|i
index|]
operator|&&
operator|*
name|argv
index|[
name|i
index|]
operator|!=
literal|'-'
condition|)
block|{
name|argv
index|[
name|j
operator|++
index|]
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
if|if
condition|(
name|qstrcmp
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|,
literal|"-nograb"
argument_list|)
operator|==
literal|0
condition|)
name|appNoGrab
operator|=
operator|!
name|appNoGrab
expr_stmt|;
else|else
endif|#
directive|endif
comment|// QT_DEBUG
name|argv
index|[
name|j
operator|++
index|]
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|j
operator|<
name|priv
operator|->
name|argc
condition|)
block|{
name|priv
operator|->
name|argv
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
name|priv
operator|->
name|argc
operator|=
name|j
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_WS_WINCE
comment|// No message boxes but important ones
name|SetErrorMode
argument_list|(
name|SetErrorMode
argument_list|(
literal|0
argument_list|)
operator||
name|SEM_FAILCRITICALERRORS
operator||
name|SEM_NOOPENFILEERRORBOX
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|Q_WS_WINCE
comment|// Initialize OLE/COM
comment|//         S_OK means success and S_FALSE means that it has already
comment|//         been initialized
name|HRESULT
name|r
decl_stmt|;
name|r
operator|=
name|OleInitialize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|S_OK
operator|&&
name|r
operator|!=
name|S_FALSE
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt: Could not initialize OLE (error %x)"
argument_list|,
operator|(
name|unsigned
name|int
operator|)
name|r
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// Misc. initialization
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
name|GdiSetBatchLimit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// initialize key mapper
name|QKeyMapper
operator|::
name|changeKeyboard
argument_list|()
expr_stmt|;
name|QColormap
operator|::
name|initialize
argument_list|()
expr_stmt|;
name|QFont
operator|::
name|initialize
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursorData
operator|::
name|initialize
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|setObjectName
argument_list|(
name|priv
operator|->
name|appName
argument_list|()
argument_list|)
expr_stmt|;
comment|// default font
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|HGDIOBJ
name|stockFont
init|=
name|GetStockObject
argument_list|(
name|DEFAULT_GUI_FONT
argument_list|)
decl_stmt|;
else|#
directive|else
name|HGDIOBJ
name|stockFont
init|=
name|GetStockObject
argument_list|(
name|SYSTEM_FONT
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|LOGFONT
name|lf
decl_stmt|;
name|GetObject
argument_list|(
name|stockFont
argument_list|,
sizeof|sizeof
argument_list|(
name|lf
argument_list|)
argument_list|,
operator|&
name|lf
argument_list|)
expr_stmt|;
name|QFont
name|systemFont
init|=
name|qt_LOGFONTtoQFont
argument_list|(
name|lf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
if|if
condition|(
name|systemFont
operator|.
name|family
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"MS Shell Dlg"
argument_list|)
condition|)
block|{
name|systemFont
operator|.
name|setFamily
argument_list|(
name|QLatin1String
argument_list|(
literal|"MS Shell Dlg 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QApplicationPrivate
operator|::
name|setSystemFont
argument_list|(
name|systemFont
argument_list|)
expr_stmt|;
comment|// QFont::locale_init();  ### Uncomment when it does something on Windows
if|if
condition|(
name|QApplication
operator|::
name|desktopSettingsAware
argument_list|()
condition|)
name|qt_set_windows_resources
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
name|initWinTabFunctions
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TABLETEVENT
name|QApplicationPrivate
operator|::
name|inputContext
operator|=
operator|new
name|QWinInputContext
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Read the initial cleartype settings...
name|qt_win_read_cleartype_settings
argument_list|()
expr_stmt|;
name|qt_win_owndc_required
operator|=
literal|false
expr_stmt|;
specifier|extern
name|void
name|qt_win_initialize_directdraw
argument_list|()
decl_stmt|;
name|qt_win_initialize_directdraw
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|ptrUpdateLayeredWindowIndirect
operator|=
operator|(
name|PtrUpdateLayeredWindowIndirect
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"user32"
argument_list|)
argument_list|,
literal|"UpdateLayeredWindowIndirect"
argument_list|)
expr_stmt|;
name|ptrUpdateLayeredWindow
operator|=
operator|(
name|PtrUpdateLayeredWindow
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"user32"
argument_list|)
argument_list|,
literal|"UpdateLayeredWindow"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ptrUpdateLayeredWindow
operator|&&
operator|!
name|ptrUpdateLayeredWindowIndirect
condition|)
name|ptrUpdateLayeredWindowIndirect
operator|=
name|qt_updateLayeredWindowIndirect
expr_stmt|;
comment|// Notify Vista and Windows 7 that we support highter DPI settings
name|ptrSetProcessDPIAware
operator|=
operator|(
name|PtrSetProcessDPIAware
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"user32"
argument_list|)
argument_list|,
literal|"SetProcessDPIAware"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ptrSetProcessDPIAware
condition|)
name|ptrSetProcessDPIAware
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
name|priv
operator|->
name|GetGestureInfo
operator|=
literal|0
expr_stmt|;
name|priv
operator|->
name|GetGestureExtraArgs
operator|=
literal|0
expr_stmt|;
name|priv
operator|->
name|CloseGestureInfoHandle
operator|=
literal|0
expr_stmt|;
name|priv
operator|->
name|SetGestureConfig
operator|=
literal|0
expr_stmt|;
name|priv
operator|->
name|GetGestureConfig
operator|=
literal|0
expr_stmt|;
name|priv
operator|->
name|BeginPanningFeedback
operator|=
literal|0
expr_stmt|;
name|priv
operator|->
name|UpdatePanningFeedback
operator|=
literal|0
expr_stmt|;
name|priv
operator|->
name|EndPanningFeedback
operator|=
literal|0
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE_WM
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_WINCE_GESTURES
argument_list|)
name|priv
operator|->
name|GetGestureInfo
operator|=
operator|(
name|PtrGetGestureInfo
operator|)
operator|&
name|TKGetGestureInfo
expr_stmt|;
name|priv
operator|->
name|GetGestureExtraArgs
operator|=
operator|(
name|PtrGetGestureExtraArgs
operator|)
operator|&
name|TKGetGestureExtraArguments
expr_stmt|;
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_NATIVE_GESTURES
argument_list|)
name|priv
operator|->
name|GetGestureInfo
operator|=
operator|(
name|PtrGetGestureInfo
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"user32"
argument_list|)
argument_list|,
literal|"GetGestureInfo"
argument_list|)
expr_stmt|;
name|priv
operator|->
name|GetGestureExtraArgs
operator|=
operator|(
name|PtrGetGestureExtraArgs
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"user32"
argument_list|)
argument_list|,
literal|"GetGestureExtraArgs"
argument_list|)
expr_stmt|;
name|priv
operator|->
name|CloseGestureInfoHandle
operator|=
operator|(
name|PtrCloseGestureInfoHandle
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"user32"
argument_list|)
argument_list|,
literal|"CloseGestureInfoHandle"
argument_list|)
expr_stmt|;
name|priv
operator|->
name|SetGestureConfig
operator|=
operator|(
name|PtrSetGestureConfig
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"user32"
argument_list|)
argument_list|,
literal|"SetGestureConfig"
argument_list|)
expr_stmt|;
name|priv
operator|->
name|GetGestureConfig
operator|=
operator|(
name|PtrGetGestureConfig
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"user32"
argument_list|)
argument_list|,
literal|"GetGestureConfig"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_NATIVE_GESTURES
name|QSystemLibrary
name|libTheme
argument_list|(
name|QLatin1String
argument_list|(
literal|"uxtheme"
argument_list|)
argument_list|)
decl_stmt|;
name|priv
operator|->
name|BeginPanningFeedback
operator|=
operator|(
name|PtrBeginPanningFeedback
operator|)
name|libTheme
operator|.
name|resolve
argument_list|(
literal|"BeginPanningFeedback"
argument_list|)
expr_stmt|;
name|priv
operator|->
name|UpdatePanningFeedback
operator|=
operator|(
name|PtrUpdatePanningFeedback
operator|)
name|libTheme
operator|.
name|resolve
argument_list|(
literal|"UpdatePanningFeedback"
argument_list|)
expr_stmt|;
name|priv
operator|->
name|EndPanningFeedback
operator|=
operator|(
name|PtrEndPanningFeedback
operator|)
name|libTheme
operator|.
name|resolve
argument_list|(
literal|"EndPanningFeedback"
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
comment|// QT_NO_GESTURES
block|}
end_function
begin_comment
comment|/*****************************************************************************   qt_cleanup() - cleans up when the application is finished  *****************************************************************************/
end_comment
begin_function
DECL|function|qt_cleanup
name|void
name|qt_cleanup
parameter_list|()
block|{
name|unregWinClasses
argument_list|()
expr_stmt|;
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursorData
operator|::
name|cleanup
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QFont
operator|::
name|cleanup
argument_list|()
expr_stmt|;
name|QColormap
operator|::
name|cleanup
argument_list|()
expr_stmt|;
if|if
condition|(
name|displayDC
condition|)
block|{
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|displayDC
argument_list|)
expr_stmt|;
name|displayDC
operator|=
literal|0
expr_stmt|;
block|}
operator|delete
name|QApplicationPrivate
operator|::
name|inputContext
expr_stmt|;
name|QApplicationPrivate
operator|::
name|inputContext
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
comment|// Deinitialize OLE/COM
name|OleUninitialize
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*****************************************************************************   Platform specific global and internal functions  *****************************************************************************/
end_comment
begin_function
DECL|function|qt_win_display_dc
name|Q_WIDGETS_EXPORT
name|HDC
name|qt_win_display_dc
parameter_list|()
comment|// get display DC
block|{
name|Q_ASSERT
argument_list|(
name|qApp
operator|&&
name|qApp
operator|->
name|thread
argument_list|()
operator|==
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|displayDC
condition|)
name|displayDC
operator|=
name|GetDC
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|displayDC
return|;
block|}
end_function
begin_function
DECL|function|qt_nograb
name|bool
name|qt_nograb
parameter_list|()
comment|// application no-grab option
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
return|return
name|appNoGrab
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_typedef
DECL|typedef|WinClassNameHash
typedef|typedef
name|QHash
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|WinClassNameHash
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|WinClassNameHash
argument_list|,
argument|winclassNames
argument_list|)
end_macro
begin_comment
comment|//
end_comment
begin_comment
comment|// If 0 is passed as the widget pointer, register a window class
end_comment
begin_comment
comment|// for QWidget as default. This is used in QGLTemporaryContext
end_comment
begin_comment
comment|// during GL initialization, where we don't want to use temporary
end_comment
begin_comment
comment|// QWidgets or QGLWidgets, neither do we want to have separate code
end_comment
begin_comment
comment|// to register window classes.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|qt_reg_winclass
specifier|const
name|QString
name|qt_reg_winclass
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
comment|// register window class
block|{
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|w
condition|?
name|w
operator|->
name|windowFlags
argument_list|()
else|:
operator|(
name|Qt
operator|::
name|WindowFlags
operator|)
literal|0
decl_stmt|;
name|Qt
operator|::
name|WindowFlags
name|type
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
decl_stmt|;
name|uint
name|style
decl_stmt|;
name|bool
name|icon
decl_stmt|;
name|QString
name|cname
decl_stmt|;
if|if
condition|(
name|w
operator|&&
name|qt_widget_private
argument_list|(
name|w
argument_list|)
operator|->
name|isGLWidget
condition|)
block|{
name|cname
operator|=
name|QLatin1String
argument_list|(
literal|"QGLWidget"
argument_list|)
expr_stmt|;
name|style
operator|=
name|CS_DBLCLKS
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|style
operator||=
name|CS_OWNDC
expr_stmt|;
endif|#
directive|endif
name|icon
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|w
operator|&&
operator|(
name|flags
operator|&
name|Qt
operator|::
name|MSWindowsOwnDC
operator|)
condition|)
block|{
name|cname
operator|=
name|QLatin1String
argument_list|(
literal|"QWidgetOwnDC"
argument_list|)
expr_stmt|;
name|style
operator|=
name|CS_DBLCLKS
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|style
operator||=
name|CS_OWNDC
expr_stmt|;
endif|#
directive|endif
name|icon
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|w
operator|&&
operator|(
name|type
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
condition|)
block|{
name|style
operator|=
name|CS_DBLCLKS
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|inherits
argument_list|(
literal|"QTipLabel"
argument_list|)
operator|||
name|w
operator|->
name|inherits
argument_list|(
literal|"QAlphaWidget"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
operator|&&
name|QSysInfo
operator|::
name|WindowsVersion
operator|<
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
condition|)
block|{
name|style
operator||=
name|CS_DROPSHADOW
expr_stmt|;
block|}
name|cname
operator|=
name|QLatin1String
argument_list|(
literal|"QToolTip"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cname
operator|=
name|QLatin1String
argument_list|(
literal|"QTool"
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|style
operator||=
name|CS_SAVEBITS
expr_stmt|;
endif|#
directive|endif
name|icon
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|w
operator|&&
operator|(
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|)
condition|)
block|{
name|cname
operator|=
name|QLatin1String
argument_list|(
literal|"QPopup"
argument_list|)
expr_stmt|;
name|style
operator|=
name|CS_DBLCLKS
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|style
operator||=
name|CS_SAVEBITS
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
operator|&&
name|QSysInfo
operator|::
name|WindowsVersion
operator|<
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
condition|)
name|style
operator||=
name|CS_DROPSHADOW
expr_stmt|;
name|icon
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|cname
operator|=
name|QLatin1String
argument_list|(
literal|"QWidget"
argument_list|)
expr_stmt|;
name|style
operator|=
name|CS_DBLCLKS
expr_stmt|;
name|icon
operator|=
literal|true
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_WS_WINCE
comment|// force CS_OWNDC when the GL graphics system is
comment|// used as the default renderer
if|if
condition|(
name|qt_win_owndc_required
condition|)
name|style
operator||=
name|CS_OWNDC
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_WINCE
comment|// We need to register the classes with the
comment|// unique ID on WinCE to make sure we can
comment|// move the windows to the front when starting
comment|// a second instance.
name|wchar_t
name|uniqueAppID
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|GetModuleFileName
argument_list|(
literal|0
argument_list|,
name|uniqueAppID
argument_list|,
name|MAX_PATH
argument_list|)
expr_stmt|;
name|cname
operator|=
name|QString
operator|::
name|number
argument_list|(
name|RegisterWindowMessage
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|uniqueAppID
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|)
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// since multiple Qt versions can be used in one process
comment|// each one has to have window class names with a unique name
comment|// The first instance gets the unmodified name; if the class
comment|// has already been registered by another instance of Qt then
comment|// add an instance-specific ID, the address of the window proc.
specifier|static
name|int
name|classExists
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|classExists
operator|==
operator|-
literal|1
condition|)
block|{
name|WNDCLASS
name|wcinfo
decl_stmt|;
name|classExists
operator|=
name|GetClassInfo
argument_list|(
operator|(
name|HINSTANCE
operator|)
name|qWinAppInst
argument_list|()
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|cname
operator|.
name|utf16
argument_list|()
argument_list|,
operator|&
name|wcinfo
argument_list|)
expr_stmt|;
name|classExists
operator|=
name|classExists
operator|&&
name|wcinfo
operator|.
name|lpfnWndProc
operator|!=
name|QtWndProc
expr_stmt|;
block|}
if|if
condition|(
name|classExists
condition|)
name|cname
operator|+=
name|QString
operator|::
name|number
argument_list|(
operator|(
name|quintptr
operator|)
name|QtWndProc
argument_list|)
expr_stmt|;
if|if
condition|(
name|winclassNames
argument_list|()
operator|->
name|contains
argument_list|(
name|cname
argument_list|)
condition|)
comment|// already registered in our list
return|return
name|cname
return|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|WNDCLASSEX
name|wc
decl_stmt|;
name|wc
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|WNDCLASSEX
argument_list|)
expr_stmt|;
else|#
directive|else
name|WNDCLASS
name|wc
decl_stmt|;
endif|#
directive|endif
name|wc
operator|.
name|style
operator|=
name|style
expr_stmt|;
name|wc
operator|.
name|lpfnWndProc
operator|=
operator|(
name|WNDPROC
operator|)
name|QtWndProc
expr_stmt|;
name|wc
operator|.
name|cbClsExtra
operator|=
literal|0
expr_stmt|;
name|wc
operator|.
name|cbWndExtra
operator|=
literal|0
expr_stmt|;
name|wc
operator|.
name|hInstance
operator|=
name|qWinAppInst
argument_list|()
expr_stmt|;
if|if
condition|(
name|icon
condition|)
block|{
name|wc
operator|.
name|hIcon
operator|=
operator|(
name|HICON
operator|)
name|LoadImage
argument_list|(
name|qWinAppInst
argument_list|()
argument_list|,
literal|L"IDI_ICON1"
argument_list|,
name|IMAGE_ICON
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|LR_DEFAULTSIZE
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
if|if
condition|(
name|wc
operator|.
name|hIcon
condition|)
block|{
name|int
name|sw
init|=
name|GetSystemMetrics
argument_list|(
name|SM_CXSMICON
argument_list|)
decl_stmt|;
name|int
name|sh
init|=
name|GetSystemMetrics
argument_list|(
name|SM_CYSMICON
argument_list|)
decl_stmt|;
name|wc
operator|.
name|hIconSm
operator|=
operator|(
name|HICON
operator|)
name|LoadImage
argument_list|(
name|qWinAppInst
argument_list|()
argument_list|,
literal|L"IDI_ICON1"
argument_list|,
name|IMAGE_ICON
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wc
operator|.
name|hIcon
operator|=
operator|(
name|HICON
operator|)
name|LoadImage
argument_list|(
literal|0
argument_list|,
name|IDI_APPLICATION
argument_list|,
name|IMAGE_ICON
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|LR_DEFAULTSIZE
operator||
name|LR_SHARED
argument_list|)
expr_stmt|;
name|wc
operator|.
name|hIconSm
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
block|}
else|else
block|{
name|wc
operator|.
name|hIcon
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|wc
operator|.
name|hIconSm
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
name|wc
operator|.
name|hCursor
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|HBRUSH
name|brush
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|w
operator|&&
operator|!
name|qt_widget_private
argument_list|(
name|w
argument_list|)
operator|->
name|isGLWidget
condition|)
name|brush
operator|=
operator|(
name|HBRUSH
operator|)
name|GetSysColorBrush
argument_list|(
name|COLOR_WINDOW
argument_list|)
expr_stmt|;
name|wc
operator|.
name|hbrBackground
operator|=
name|brush
expr_stmt|;
else|#
directive|else
name|wc
operator|.
name|hbrBackground
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|wc
operator|.
name|lpszMenuName
operator|=
literal|0
expr_stmt|;
name|wc
operator|.
name|lpszClassName
operator|=
operator|(
name|wchar_t
operator|*
operator|)
name|cname
operator|.
name|utf16
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|ATOM
name|atom
init|=
name|RegisterClassEx
argument_list|(
operator|&
name|wc
argument_list|)
decl_stmt|;
else|#
directive|else
name|ATOM
name|atom
init|=
name|RegisterClass
argument_list|(
operator|&
name|wc
argument_list|)
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
operator|!
name|atom
condition|)
name|qErrnoWarning
argument_list|(
literal|"QApplication::regClass: Registering window class failed."
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|atom
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|winclassNames
argument_list|()
operator|->
name|insert
argument_list|(
name|cname
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|cname
return|;
block|}
end_function
begin_function
DECL|function|qt_getRegisteredWndClass
name|Q_WIDGETS_EXPORT
specifier|const
name|QString
name|qt_getRegisteredWndClass
parameter_list|()
block|{
return|return
name|qt_reg_winclass
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|unregWinClasses
specifier|static
name|void
name|unregWinClasses
parameter_list|()
block|{
name|WinClassNameHash
modifier|*
name|hash
init|=
name|winclassNames
argument_list|()
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|hash
operator|->
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|hash
operator|->
name|constEnd
argument_list|()
condition|)
block|{
name|UnregisterClass
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|it
operator|.
name|key
argument_list|()
operator|.
name|utf16
argument_list|()
argument_list|,
name|qWinAppInst
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
name|hash
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   Safe configuration (move,resize,setGeometry) mechanism to avoid   recursion when processing messages.  *****************************************************************************/
end_comment
begin_struct
DECL|struct|QWinConfigRequest
struct|struct
name|QWinConfigRequest
block|{
DECL|member|id
name|WId
name|id
decl_stmt|;
comment|// widget to be configured
DECL|member|req
name|int
name|req
decl_stmt|;
comment|// 0=move, 1=resize, 2=setGeo
DECL|member|x
DECL|member|y
DECL|member|w
DECL|member|h
name|int
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
comment|// request parameters
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|configRequests
specifier|static
name|QList
argument_list|<
name|QWinConfigRequest
modifier|*
argument_list|>
modifier|*
name|configRequests
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qWinRequestConfig
name|void
name|qWinRequestConfig
parameter_list|(
name|WId
name|id
parameter_list|,
name|int
name|req
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
if|if
condition|(
operator|!
name|configRequests
condition|)
comment|// create queue
name|configRequests
operator|=
operator|new
name|QList
argument_list|<
name|QWinConfigRequest
operator|*
argument_list|>
expr_stmt|;
name|QWinConfigRequest
modifier|*
name|r
init|=
operator|new
name|QWinConfigRequest
decl_stmt|;
name|r
operator|->
name|id
operator|=
name|id
expr_stmt|;
comment|// create new request
name|r
operator|->
name|req
operator|=
name|req
expr_stmt|;
name|r
operator|->
name|x
operator|=
name|x
expr_stmt|;
name|r
operator|->
name|y
operator|=
name|y
expr_stmt|;
name|r
operator|->
name|w
operator|=
name|w
expr_stmt|;
name|r
operator|->
name|h
operator|=
name|h
expr_stmt|;
name|configRequests
operator|->
name|append
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// store request in queue
block|}
end_function
begin_function
DECL|function|qWinProcessConfigRequests
specifier|static
name|void
name|qWinProcessConfigRequests
parameter_list|()
comment|// perform requests in queue
block|{
if|if
condition|(
operator|!
name|configRequests
condition|)
return|return;
name|QWinConfigRequest
modifier|*
name|r
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|configRequests
operator|->
name|isEmpty
argument_list|()
condition|)
break|break;
name|r
operator|=
name|configRequests
operator|->
name|takeLast
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|QWidget
operator|::
name|find
argument_list|(
name|r
operator|->
name|id
argument_list|)
decl_stmt|;
name|QRect
name|rect
argument_list|(
name|r
operator|->
name|x
argument_list|,
name|r
operator|->
name|y
argument_list|,
name|r
operator|->
name|w
argument_list|,
name|r
operator|->
name|h
argument_list|)
decl_stmt|;
name|int
name|req
init|=
name|r
operator|->
name|req
decl_stmt|;
operator|delete
name|r
expr_stmt|;
if|if
condition|(
name|w
condition|)
block|{
comment|// widget exists
if|if
condition|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ConfigPending
argument_list|)
condition|)
return|return;
comment|// biting our tail
if|if
condition|(
name|req
operator|==
literal|0
condition|)
name|w
operator|->
name|move
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|req
operator|==
literal|1
condition|)
name|w
operator|->
name|resize
argument_list|(
name|rect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|w
operator|->
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
operator|delete
name|configRequests
expr_stmt|;
name|configRequests
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*****************************************************************************     GUI event dispatcher  *****************************************************************************/
end_comment
begin_class
DECL|class|QGuiEventDispatcherWin32
class|class
name|QGuiEventDispatcherWin32
super|:
specifier|public
name|QEventDispatcherWin32
block|{
name|Q_DECLARE_PRIVATE
parameter_list|(
name|QEventDispatcherWin32
parameter_list|)
specifier|public
private|:
name|QGuiEventDispatcherWin32
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|bool
name|processEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QGuiEventDispatcherWin32
name|QGuiEventDispatcherWin32
operator|::
name|QGuiEventDispatcherWin32
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QEventDispatcherWin32
argument_list|(
name|parent
argument_list|)
block|{
name|createInternalHwnd
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|processEvents
name|bool
name|QGuiEventDispatcherWin32
operator|::
name|processEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QEventDispatcherWin32
operator|::
name|processEvents
argument_list|(
name|flags
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|configRequests
condition|)
comment|// any pending configs?
name|qWinProcessConfigRequests
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|createEventDispatcher
name|void
name|QApplicationPrivate
operator|::
name|createEventDispatcher
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QApplication
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|type
argument_list|()
operator|!=
name|QApplication
operator|::
name|Tty
condition|)
name|eventDispatcher
operator|=
operator|new
name|QGuiEventDispatcherWin32
argument_list|(
name|q
argument_list|)
expr_stmt|;
else|else
name|eventDispatcher
operator|=
operator|new
name|QEventDispatcherWin32
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   Platform specific QApplication members  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_comment
comment|/*****************************************************************************   QApplication cursor stack  *****************************************************************************/
end_comment
begin_function
DECL|function|setOverrideCursor
name|void
name|QApplication
operator|::
name|setOverrideCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|prepend
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|SetCursor
argument_list|(
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|first
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|restoreOverrideCursor
name|void
name|QApplication
operator|::
name|restoreOverrideCursor
parameter_list|()
block|{
if|if
condition|(
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SetCursor
argument_list|(
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|cursor_list
operator|.
name|first
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWidget
modifier|*
name|w
init|=
name|QWidget
operator|::
name|find
argument_list|(
name|curWin
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
condition|)
name|SetCursor
argument_list|(
name|w
operator|->
name|cursor
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|SetCursor
argument_list|(
name|QCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*   Internal function called from QWidget::setCursor()    force is true if this function is called from dispatchEnterLeave, it means that the    mouse is actually directly under this widget. */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|qt_win_set_cursor
name|void
name|qt_win_set_cursor
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|force
parameter_list|)
block|{
specifier|static
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|lastUnderMouse
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|force
condition|)
block|{
name|lastUnderMouse
operator|=
name|w
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|&&
name|lastUnderMouse
operator|&&
name|lastUnderMouse
operator|->
name|effectiveWinId
argument_list|()
operator|==
name|w
operator|->
name|effectiveWinId
argument_list|()
condition|)
block|{
name|w
operator|=
name|lastUnderMouse
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|curWin
operator|&&
name|w
operator|&&
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
return|return;
name|QWidget
modifier|*
name|cW
init|=
name|w
operator|&&
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
condition|?
name|w
else|:
name|QWidget
operator|::
name|find
argument_list|(
name|curWin
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cW
operator|||
name|cW
operator|->
name|window
argument_list|()
operator|!=
name|w
operator|->
name|window
argument_list|()
operator|||
operator|!
name|cW
operator|->
name|isVisible
argument_list|()
operator|||
operator|!
name|cW
operator|->
name|underMouse
argument_list|()
operator|||
name|QApplication
operator|::
name|overrideCursor
argument_list|()
condition|)
return|return;
name|SetCursor
argument_list|(
name|cW
operator|->
name|cursor
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CURSOR
end_comment
begin_function
DECL|function|qt_win_getKeyboardModifiers
name|Qt
operator|::
name|KeyboardModifiers
name|qt_win_getKeyboardModifiers
parameter_list|()
block|{
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|Qt
operator|::
name|NoModifier
decl_stmt|;
if|if
condition|(
name|GetKeyState
argument_list|(
name|VK_SHIFT
argument_list|)
operator|<
literal|0
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|GetKeyState
argument_list|(
name|VK_CONTROL
argument_list|)
operator|<
literal|0
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|GetKeyState
argument_list|(
name|VK_MENU
argument_list|)
operator|<
literal|0
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
return|return
name|modifiers
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   Routines to find a Qt widget from a screen position  *****************************************************************************/
end_comment
begin_function
DECL|function|topLevelAt
name|QWidget
modifier|*
name|QApplication
operator|::
name|topLevelAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|POINT
name|p
decl_stmt|;
name|HWND
name|win
decl_stmt|;
name|QWidget
modifier|*
name|w
decl_stmt|;
name|p
operator|.
name|x
operator|=
name|pos
operator|.
name|x
argument_list|()
expr_stmt|;
name|p
operator|.
name|y
operator|=
name|pos
operator|.
name|y
argument_list|()
expr_stmt|;
name|win
operator|=
name|WindowFromPoint
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|win
condition|)
return|return
literal|0
return|;
name|w
operator|=
name|QWidget
operator|::
name|find
argument_list|(
name|win
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|w
operator|&&
name|win
condition|)
block|{
name|win
operator|=
name|GetParent
argument_list|(
name|win
argument_list|)
expr_stmt|;
name|w
operator|=
name|QWidget
operator|::
name|find
argument_list|(
name|win
argument_list|)
expr_stmt|;
block|}
return|return
name|w
condition|?
name|w
operator|->
name|window
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|beep
name|void
name|QApplication
operator|::
name|beep
parameter_list|()
block|{
name|MessageBeep
argument_list|(
name|MB_OK
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|alert_widget
specifier|static
name|void
name|alert_widget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|duration
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|duration
argument_list|)
expr_stmt|;
else|#
directive|else
name|bool
name|stopFlash
init|=
name|duration
operator|<
literal|0
decl_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|(
operator|!
name|widget
operator|->
name|isActiveWindow
argument_list|()
operator|||
name|stopFlash
operator|)
condition|)
block|{
name|DWORD
name|timeOut
init|=
name|GetCaretBlinkTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeOut
operator|<=
literal|0
condition|)
name|timeOut
operator|=
literal|250
expr_stmt|;
name|UINT
name|flashCount
decl_stmt|;
if|if
condition|(
name|duration
operator|==
literal|0
condition|)
name|flashCount
operator|=
literal|10
expr_stmt|;
else|else
name|flashCount
operator|=
name|duration
operator|/
name|timeOut
expr_stmt|;
name|FLASHWINFO
name|info
decl_stmt|;
name|info
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|info
operator|.
name|hwnd
operator|=
name|widget
operator|->
name|window
argument_list|()
operator|->
name|winId
argument_list|()
expr_stmt|;
name|info
operator|.
name|dwFlags
operator|=
name|stopFlash
condition|?
name|FLASHW_STOP
else|:
name|FLASHW_TRAY
expr_stmt|;
name|info
operator|.
name|dwTimeout
operator|=
name|stopFlash
condition|?
literal|0
else|:
name|timeOut
expr_stmt|;
name|info
operator|.
name|uCount
operator|=
name|stopFlash
condition|?
literal|0
else|:
name|flashCount
expr_stmt|;
name|FlashWindowEx
argument_list|(
operator|&
name|info
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|alert
name|void
name|QApplication
operator|::
name|alert
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|duration
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|checkInstance
argument_list|(
literal|"alert"
argument_list|)
condition|)
return|return;
if|if
condition|(
name|widget
condition|)
block|{
name|alert_widget
argument_list|(
name|widget
argument_list|,
name|duration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QWidgetList
name|toplevels
argument_list|(
name|topLevelWidgets
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toplevels
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|topLevel
init|=
name|toplevels
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|alert_widget
argument_list|(
name|topLevel
argument_list|,
name|duration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|appName
name|QString
name|QApplicationPrivate
operator|::
name|appName
parameter_list|()
specifier|const
block|{
return|return
name|QCoreApplicationPrivate
operator|::
name|appName
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   Main event loop  *****************************************************************************/
end_comment
begin_function_decl
specifier|extern
name|uint
name|qGlobalPostedEventsCount
parameter_list|()
function_decl|;
end_function_decl
begin_function
DECL|function|winFocus
name|void
name|QApplication
operator|::
name|winFocus
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|bool
name|gotFocus
parameter_list|)
block|{
if|if
condition|(
name|d_func
argument_list|()
operator|->
name|inPopupMode
argument_list|()
condition|)
comment|// some delayed focus event to ignore
return|return;
if|if
condition|(
name|gotFocus
condition|)
block|{
name|setActiveWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|active_window
operator|&&
operator|(
name|QApplicationPrivate
operator|::
name|active_window
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Dialog
operator|)
condition|)
block|{
comment|// raise the entire application, not just the dialog
name|QWidget
modifier|*
name|mw
init|=
name|QApplicationPrivate
operator|::
name|active_window
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
while|while
condition|(
name|mw
operator|->
name|parentWidget
argument_list|()
operator|&&
operator|(
name|mw
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Dialog
operator|)
condition|)
name|mw
operator|=
name|mw
operator|->
name|parentWidget
argument_list|()
operator|->
name|window
argument_list|()
expr_stmt|;
if|if
condition|(
name|mw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|&&
name|mw
operator|!=
name|QApplicationPrivate
operator|::
name|active_window
condition|)
name|SetWindowPos
argument_list|(
name|mw
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|HWND_TOP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// On Desktop Windows, we set the first parent of the dialog on top
comment|// Child windows will be automatically set above again.
comment|// On Windows CE we pass no parent in CreateWindowEx as otherwise
comment|// dialogs get embedded into the parent window. Thus we need to
comment|// manually iterate and reactivate all windows from bottom up.
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|raiseList
decl_stmt|;
name|raiseList
operator|.
name|push_back
argument_list|(
name|mw
argument_list|)
expr_stmt|;
while|while
condition|(
name|mw
operator|->
name|parentWidget
argument_list|()
operator|&&
operator|(
name|mw
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Dialog
operator|)
condition|)
block|{
name|mw
operator|=
name|mw
operator|->
name|parentWidget
argument_list|()
operator|->
name|window
argument_list|()
expr_stmt|;
name|raiseList
operator|.
name|push_back
argument_list|(
name|mw
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|raiseList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mw
operator|=
name|raiseList
operator|.
name|takeLast
argument_list|()
expr_stmt|;
if|if
condition|(
name|mw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
block|{
name|HWND
name|state
init|=
name|HWND_TOP
decl_stmt|;
if|if
condition|(
name|mw
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
name|state
operator|=
name|HWND_BOTTOM
expr_stmt|;
elseif|else
if|if
condition|(
name|mw
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
condition|)
name|state
operator|=
name|HWND_TOPMOST
expr_stmt|;
name|SetWindowPos
argument_list|(
name|mw
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|state
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
block|}
else|else
block|{
name|setActiveWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// QtWndProc() receives all messages from the main event loop
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
DECL|variable|inLoop
specifier|static
name|bool
name|inLoop
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|inputcharset
specifier|static
name|int
name|inputcharset
init|=
name|CP_ACP
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|RETURN
define|#
directive|define
name|RETURN
parameter_list|(
name|x
parameter_list|)
value|{ inLoop=false;return x; }
end_define
begin_function
DECL|function|qt_is_translatable_mouse_event
specifier|static
name|bool
name|qt_is_translatable_mouse_event
parameter_list|(
name|UINT
name|message
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|message
operator|>=
name|WM_MOUSEFIRST
operator|&&
name|message
operator|<=
name|WM_MOUSELAST
operator|)
operator|||
operator|(
name|message
operator|>=
name|WM_XBUTTONDOWN
operator|&&
name|message
operator|<=
name|WM_XBUTTONDBLCLK
operator|)
operator|)
operator|&&
name|message
operator|!=
name|WM_MOUSEWHEEL
operator|&&
name|message
operator|!=
name|WM_MOUSEHWHEEL
operator|)
ifndef|#
directive|ifndef
name|Q_WS_WINCE
operator|||
operator|(
name|message
operator|>=
name|WM_NCMOUSEMOVE
operator|&&
name|message
operator|<=
name|WM_NCMBUTTONDBLCLK
operator|)
endif|#
directive|endif
return|;
block|}
end_function
begin_extern
DECL|function|QtWndProc
extern|extern
literal|"C"
name|LRESULT
name|QT_WIN_CALLBACK
name|QtWndProc
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|UINT
name|message
parameter_list|,
name|WPARAM
name|wParam
parameter_list|,
name|LPARAM
name|lParam
parameter_list|)
block|{
name|bool
name|result
init|=
literal|true
decl_stmt|;
name|QEvent
operator|::
name|Type
name|evt_type
init|=
name|QEvent
operator|::
name|None
decl_stmt|;
name|QETWidget
modifier|*
name|widget
init|=
literal|0
decl_stmt|;
comment|// there is no need to process pakcets from tablet unless
comment|// it is actually on the tablet, a flag to let us know...
name|int
name|nPackets
decl_stmt|;
comment|// the number of packets we get from the queue
name|long
name|res
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|qApp
condition|)
comment|// unstable app state
name|RETURN
argument_list|(
argument|QWinInputContext::DefWindowProc(hwnd,message,wParam,lParam)
argument_list|)
name|QScopedLoopLevelCounter
name|loopLevelCounter
argument_list|(
name|QThreadData
operator|::
name|get2
argument_list|(
name|qApp
operator|->
name|thread
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|#
directive|if
literal|0
comment|// make sure we update widgets also when the user resizes
block|if (inLoop&& qApp->loopLevel())         qApp->sendPostedEvents(0, QEvent::Paint);
endif|#
directive|endif
name|inLoop
operator|=
literal|true
expr_stmt|;
name|MSG
name|msg
decl_stmt|;
name|msg
operator|.
name|hwnd
operator|=
name|hwnd
expr_stmt|;
comment|// create MSG structure
name|msg
operator|.
name|message
operator|=
name|message
expr_stmt|;
comment|// time and pt fields ignored
name|msg
operator|.
name|wParam
operator|=
name|wParam
expr_stmt|;
name|msg
operator|.
name|lParam
operator|=
name|lParam
expr_stmt|;
name|msg
operator|.
name|pt
operator|.
name|x
operator|=
name|GET_X_LPARAM
argument_list|(
name|lParam
argument_list|)
expr_stmt|;
name|msg
operator|.
name|pt
operator|.
name|y
operator|=
name|GET_Y_LPARAM
argument_list|(
name|lParam
argument_list|)
expr_stmt|;
comment|// If it's a non-client-area message the coords are screen coords, otherwise they are
comment|// client coords.
ifndef|#
directive|ifndef
name|Q_WS_WINCE
if|if
condition|(
name|message
argument_list|<
name|WM_NCMOUSEMOVE
operator|||
name|message
argument_list|>
name|WM_NCMBUTTONDBLCLK
condition|)
endif|#
directive|endif
name|ClientToScreen
argument_list|(
name|msg
operator|.
name|hwnd
argument_list|,
operator|&
name|msg
operator|.
name|pt
argument_list|)
expr_stmt|;
comment|/*     // sometimes the autograb is not released, so the clickevent is sent     // to the wrong window. We ignore this for now, because it doesn't     // cause any problems.     if (msg.message == WM_LBUTTONDOWN || msg.message == WM_RBUTTONDOWN || msg.message == WM_MBUTTONDOWN) {         HWND handle = WindowFromPoint(msg.pt);         if (msg.hwnd != handle) {             msg.hwnd = handle;             hwnd = handle;         }     }     */
if|#
directive|if
name|defined
argument_list|(
name|QT_NON_COMMERCIAL
argument_list|)
name|QT_NC_WNDPROC
endif|#
directive|endif
comment|// send through app filter
if|if
condition|(
name|qApp
operator|->
name|filterEvent
argument_list|(
operator|&
name|msg
argument_list|,
operator|&
name|res
argument_list|)
condition|)
return|return
name|res
return|;
comment|// close any opened ime candidate window (enabled only on a popup widget)
if|if
condition|(
name|imeParentWnd
operator|&&
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|&&
operator|(
name|message
operator|==
name|WM_MBUTTONDOWN
operator|||
name|message
operator|==
name|WM_XBUTTONDOWN
operator|||
name|message
operator|==
name|WM_LBUTTONDOWN
operator|||
name|message
operator|==
name|WM_RBUTTONDOWN
ifndef|#
directive|ifndef
name|Q_WS_WINCE
operator|||
name|message
operator|==
name|WM_NCMBUTTONDOWN
operator|||
name|message
operator|==
name|WM_NCLBUTTONDOWN
operator|||
name|message
operator|==
name|WM_NCRBUTTONDOWN
operator|)
condition|)
block|{
else|#
directive|else
block|)
block|)
block|{
endif|#
directive|endif
operator|::
name|SendMessage
argument_list|(
name|imeParentWnd
argument_list|,
name|WM_IME_ENDCOMPOSITION
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_extern
begin_switch
switch|switch
condition|(
name|message
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_WS_WINCE
ifndef|#
directive|ifndef
name|QT_NO_SESSIONMANAGER
case|case
name|WM_QUERYENDSESSION
case|:
block|{
if|if
condition|(
name|sm_smActive
condition|)
comment|// bogus message from windows
name|RETURN
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sm_smActive
operator|=
literal|true
expr_stmt|;
name|sm_blockUserInput
operator|=
literal|true
expr_stmt|;
comment|// prevent user-interaction outside interaction windows
name|sm_cancel
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|qt_session_manager_self
condition|)
name|qApp
operator|->
name|commitData
argument_list|(
operator|*
name|qt_session_manager_self
argument_list|)
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|ENDSESSION_LOGOFF
condition|)
block|{
name|_flushall
argument_list|()
expr_stmt|;
block|}
name|RETURN
argument_list|(
operator|!
name|sm_cancel
argument_list|)
expr_stmt|;
block|}
case|case
name|WM_ENDSESSION
case|:
block|{
name|sm_smActive
operator|=
literal|false
expr_stmt|;
name|sm_blockUserInput
operator|=
literal|false
expr_stmt|;
name|bool
name|endsession
init|=
operator|(
name|bool
operator|)
name|wParam
decl_stmt|;
comment|// we receive the message for each toplevel window included internal hidden ones,
comment|// but the aboutToQuit signal should be emitted only once.
name|QApplicationPrivate
modifier|*
name|qAppPriv
init|=
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|endsession
operator|&&
operator|!
name|qAppPriv
operator|->
name|aboutToQuitEmitted
condition|)
block|{
name|qAppPriv
operator|->
name|aboutToQuitEmitted
operator|=
literal|true
expr_stmt|;
name|int
name|index
init|=
name|QApplication
operator|::
name|staticMetaObject
operator|.
name|indexOfSignal
argument_list|(
literal|"aboutToQuit()"
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|qt_metacall
argument_list|(
name|QMetaObject
operator|::
name|InvokeMetaMethod
argument_list|,
name|index
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// since the process will be killed immediately quit() has no real effect
name|QApplication
operator|::
name|quit
argument_list|()
expr_stmt|;
block|}
name|RETURN
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
case|case
name|WM_DISPLAYCHANGE
case|:
if|if
condition|(
name|QApplication
operator|::
name|type
argument_list|()
operator|==
name|QApplication
operator|::
name|Tty
condition|)
break|break;
if|if
condition|(
name|qt_desktopWidget
condition|)
block|{
name|qt_desktopWidget
operator|->
name|move
argument_list|(
name|GetSystemMetrics
argument_list|(
literal|76
argument_list|)
argument_list|,
name|GetSystemMetrics
argument_list|(
literal|77
argument_list|)
argument_list|)
expr_stmt|;
name|QSize
name|sz
argument_list|(
name|GetSystemMetrics
argument_list|(
literal|78
argument_list|)
argument_list|,
name|GetSystemMetrics
argument_list|(
literal|79
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sz
operator|==
name|qt_desktopWidget
operator|->
name|size
argument_list|()
condition|)
block|{
comment|// a screen resized without changing size of the virtual desktop
name|QResizeEvent
name|rs
argument_list|(
name|sz
argument_list|,
name|qt_desktopWidget
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|qt_desktopWidget
argument_list|,
operator|&
name|rs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qt_desktopWidget
operator|->
name|resize
argument_list|(
name|sz
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
case|case
name|WM_SETTINGCHANGE
case|:
ifdef|#
directive|ifdef
name|Q_WS_WINCE
comment|// CE SIP hide/show
if|if
condition|(
name|qt_desktopWidget
operator|&&
name|wParam
operator|==
name|SPI_SETSIPINFO
condition|)
block|{
name|QResizeEvent
name|re
argument_list|(
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// Calculated by QDesktopWidget
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|qt_desktopWidget
argument_list|,
operator|&
name|re
argument_list|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
comment|// ignore spurious XP message when user logs in again after locking
if|if
condition|(
name|QApplication
operator|::
name|type
argument_list|()
operator|==
name|QApplication
operator|::
name|Tty
condition|)
break|break;
if|if
condition|(
name|QApplication
operator|::
name|desktopSettingsAware
argument_list|()
operator|&&
name|wParam
operator|!=
name|SPI_SETWORKAREA
condition|)
block|{
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|QWidget
operator|::
name|find
argument_list|(
name|hwnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
condition|)
block|{
if|if
condition|(
name|wParam
operator|==
name|SPI_SETNONCLIENTMETRICS
condition|)
name|widget
operator|->
name|markFrameStrutDirty
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|qt_desktopWidget
operator|&&
name|wParam
operator|==
name|SPI_SETWORKAREA
condition|)
block|{
name|qt_desktopWidget
operator|->
name|move
argument_list|(
name|GetSystemMetrics
argument_list|(
literal|76
argument_list|)
argument_list|,
name|GetSystemMetrics
argument_list|(
literal|77
argument_list|)
argument_list|)
expr_stmt|;
name|QSize
name|sz
argument_list|(
name|GetSystemMetrics
argument_list|(
literal|78
argument_list|)
argument_list|,
name|GetSystemMetrics
argument_list|(
literal|79
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sz
operator|==
name|qt_desktopWidget
operator|->
name|size
argument_list|()
condition|)
block|{
comment|// a screen resized without changing size of the virtual desktop
name|QResizeEvent
name|rs
argument_list|(
name|sz
argument_list|,
name|qt_desktopWidget
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|qt_desktopWidget
argument_list|,
operator|&
name|rs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qt_desktopWidget
operator|->
name|resize
argument_list|(
name|sz
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wParam
operator|==
name|SPI_SETFONTSMOOTHINGTYPE
condition|)
block|{
name|qt_win_read_cleartype_settings
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|w
operator|->
name|isVisible
argument_list|()
condition|)
continue|continue;
operator|(
operator|(
name|QETWidget
operator|*
operator|)
name|w
operator|)
operator|->
name|forceUpdate
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
name|WM_SYSCOLORCHANGE
case|:
if|if
condition|(
name|QApplication
operator|::
name|type
argument_list|()
operator|==
name|QApplication
operator|::
name|Tty
condition|)
break|break;
if|if
condition|(
name|QApplication
operator|::
name|desktopSettingsAware
argument_list|()
condition|)
block|{
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|QWidget
operator|::
name|find
argument_list|(
name|hwnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|parentWidget
argument_list|()
condition|)
name|qt_set_windows_color_resources
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|WM_LBUTTONDOWN
case|:
case|case
name|WM_MBUTTONDOWN
case|:
case|case
name|WM_RBUTTONDOWN
case|:
case|case
name|WM_XBUTTONDOWN
case|:
case|case
name|WM_LBUTTONDBLCLK
case|:
case|case
name|WM_RBUTTONDBLCLK
case|:
case|case
name|WM_MBUTTONDBLCLK
case|:
case|case
name|WM_XBUTTONDBLCLK
case|:
if|if
condition|(
name|qt_win_ignoreNextMouseReleaseEvent
condition|)
name|qt_win_ignoreNextMouseReleaseEvent
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|WM_LBUTTONUP
case|:
case|case
name|WM_MBUTTONUP
case|:
case|case
name|WM_RBUTTONUP
case|:
case|case
name|WM_XBUTTONUP
case|:
if|if
condition|(
name|qt_win_ignoreNextMouseReleaseEvent
condition|)
block|{
name|qt_win_ignoreNextMouseReleaseEvent
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|qt_button_down
operator|&&
name|qt_button_down
operator|->
name|internalWinId
argument_list|()
operator|==
name|autoCaptureWnd
condition|)
block|{
name|releaseAutoCapture
argument_list|()
expr_stmt|;
name|qt_button_down
operator|=
literal|0
expr_stmt|;
block|}
name|RETURN
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
end_switch
begin_if
if|if
condition|(
operator|!
name|widget
condition|)
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|QWidget
operator|::
name|find
argument_list|(
name|hwnd
argument_list|)
expr_stmt|;
end_if
begin_if
if|if
condition|(
operator|!
name|widget
condition|)
comment|// don't know this widget
goto|goto
name|do_default
goto|;
end_if
begin_if
if|if
condition|(
name|app_do_modal
condition|)
block|{
comment|// modal event handling
name|int
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|qt_try_modal
argument_list|(
name|widget
argument_list|,
operator|&
name|msg
argument_list|,
name|ret
argument_list|)
condition|)
name|RETURN
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
end_if
begin_expr_stmt
name|res
operator|=
literal|0
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|widget
operator|->
name|winEvent
argument_list|(
operator|&
name|msg
argument_list|,
operator|&
name|res
argument_list|)
condition|)
comment|// send through widget filter
name|RETURN
argument_list|(
name|res
argument_list|)
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|qt_is_translatable_mouse_event
argument_list|(
name|message
argument_list|)
condition|)
block|{
if|if
condition|(
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// in popup mode
name|POINT
name|curPos
init|=
name|msg
operator|.
name|pt
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|curPos
operator|.
name|x
argument_list|,
name|curPos
operator|.
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
condition|)
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|w
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qt_tabletChokeMouse
condition|)
block|{
name|result
operator|=
name|widget
operator|->
name|translateMouseEvent
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// mouse event
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_CONTEXTMENU
argument_list|)
if|if
condition|(
name|message
operator|==
name|WM_LBUTTONDOWN
operator|&&
name|widget
operator|!=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|alienWidget
init|=
name|widget
decl_stmt|;
if|if
condition|(
operator|(
name|alienWidget
operator|!=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|)
operator|&&
operator|(
name|alienWidget
operator|->
name|contextMenuPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|PreventContextMenu
operator|)
condition|)
block|{
name|QPoint
name|pos
argument_list|(
name|GET_X_LPARAM
argument_list|(
name|lParam
argument_list|)
argument_list|,
name|GET_Y_LPARAM
argument_list|(
name|lParam
argument_list|)
argument_list|)
decl_stmt|;
name|QPoint
name|globalPos
parameter_list|(
name|msg
operator|.
name|pt
operator|.
name|x
parameter_list|,
name|msg
operator|.
name|pt
operator|.
name|y
parameter_list|)
function_decl|;
comment|// In case we are using Alien, then the widget to
comment|// send the context menu event is a different one
if|if
condition|(
operator|!
name|alienWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
operator|&&
operator|!
name|alienWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_PaintOnScreen
argument_list|)
condition|)
block|{
name|alienWidget
operator|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
if|if
condition|(
name|alienWidget
condition|)
name|pos
operator|=
name|alienWidget
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|alienWidget
condition|)
block|{
name|SHRGINFO
name|shrg
decl_stmt|;
name|shrg
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|shrg
argument_list|)
expr_stmt|;
name|shrg
operator|.
name|hwndClient
operator|=
name|hwnd
expr_stmt|;
name|shrg
operator|.
name|ptDown
operator|.
name|x
operator|=
name|GET_X_LPARAM
argument_list|(
name|lParam
argument_list|)
expr_stmt|;
name|shrg
operator|.
name|ptDown
operator|.
name|y
operator|=
name|GET_Y_LPARAM
argument_list|(
name|lParam
argument_list|)
expr_stmt|;
name|shrg
operator|.
name|dwFlags
operator|=
name|SHRG_RETURNCMD
operator||
name|SHRG_NOANIMATION
expr_stmt|;
name|resolveAygLibs
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
if|if
condition|(
name|ptrRecognizeGesture
operator|&&
operator|(
name|ptrRecognizeGesture
argument_list|(
operator|&
name|shrg
argument_list|)
operator|==
name|GN_CONTEXTMENU
operator|)
condition|)
block|{
if|if
condition|(
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
condition|)
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|->
name|close
argument_list|()
expr_stmt|;
name|QContextMenuEvent
name|e
parameter_list|(
name|QContextMenuEvent
operator|::
name|Mouse
parameter_list|,
name|pos
parameter_list|,
name|globalPos
parameter_list|)
function_decl|;
name|result
operator|=
name|qt_sendSpontaneousEvent
argument_list|(
name|alienWidget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_GESTURES
block|}
block|}
block|}
endif|#
directive|endif
block|}
else|else
block|{
comment|// Sometimes we only get a WM_MOUSEMOVE message
comment|// and sometimes we get both a WM_MOUSEMOVE and
comment|// a WM_LBUTTONDOWN/UP, this creates a spurious mouse
comment|// press/release event, using the PeekMessage
comment|// will help us fix this.  This leaves us with a
comment|// question:
comment|//    This effectively kills using the mouse AND the
comment|//    tablet simultaneously, well creates wacky input.
comment|//    Is this going to be a problem? (probably not)
name|bool
name|next_is_button
init|=
literal|false
decl_stmt|;
name|bool
name|is_mouse_move
init|=
operator|(
name|message
operator|==
name|WM_MOUSEMOVE
operator|)
decl_stmt|;
if|if
condition|(
name|is_mouse_move
condition|)
block|{
name|MSG
name|msg1
decl_stmt|;
if|if
condition|(
name|PeekMessage
argument_list|(
operator|&
name|msg1
argument_list|,
name|msg
operator|.
name|hwnd
argument_list|,
name|WM_MOUSEFIRST
argument_list|,
name|WM_MOUSELAST
argument_list|,
name|PM_NOREMOVE
argument_list|)
condition|)
name|next_is_button
operator|=
operator|(
name|msg1
operator|.
name|message
operator|==
name|WM_LBUTTONUP
operator|||
name|msg1
operator|.
name|message
operator|==
name|WM_LBUTTONDOWN
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|is_mouse_move
operator|||
operator|(
name|is_mouse_move
operator|&&
operator|!
name|next_is_button
operator|)
condition|)
name|qt_tabletChokeMouse
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|message
condition|)
block|{
case|case
name|WM_TOUCH
case|:
name|result
operator|=
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|translateTouchEvent
argument_list|(
name|msg
argument_list|)
expr_stmt|;
break|break;
case|case
name|WM_KEYDOWN
case|:
comment|// keyboard event
case|case
name|WM_SYSKEYDOWN
case|:
name|qt_keymapper_private
argument_list|()
operator|->
name|updateKeyMap
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// fall-through intended
case|case
name|WM_KEYUP
case|:
case|case
name|WM_SYSKEYUP
case|:
if|#
directive|if
name|Q_OS_WINCE_WM
case|case
name|WM_HOTKEY
case|:
if|if
condition|(
name|HIWORD
argument_list|(
name|msg
operator|.
name|lParam
argument_list|)
operator|==
name|VK_TBACK
condition|)
block|{
specifier|const
name|bool
name|hotKeyDown
init|=
operator|!
operator|(
name|LOWORD
argument_list|(
name|msg
operator|.
name|lParam
argument_list|)
operator|&
name|MOD_KEYUP
operator|)
decl_stmt|;
name|msg
operator|.
name|lParam
operator|=
literal|0x69
operator|<<
literal|16
expr_stmt|;
name|msg
operator|.
name|wParam
operator|=
name|VK_BACK
expr_stmt|;
if|if
condition|(
name|hotKeyDown
condition|)
block|{
name|msg
operator|.
name|message
operator|=
name|WM_KEYDOWN
expr_stmt|;
name|qt_keymapper_private
argument_list|()
operator|->
name|updateKeyMap
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|.
name|message
operator|=
name|WM_KEYUP
expr_stmt|;
block|}
block|}
comment|// fall-through intended
endif|#
directive|endif
case|case
name|WM_IME_CHAR
case|:
case|case
name|WM_IME_KEYDOWN
case|:
case|case
name|WM_CHAR
case|:
block|{
name|MSG
name|msg1
decl_stmt|;
name|bool
name|anyMsg
init|=
name|PeekMessage
argument_list|(
operator|&
name|msg1
argument_list|,
name|msg
operator|.
name|hwnd
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|PM_NOREMOVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|anyMsg
operator|&&
name|msg1
operator|.
name|message
operator|==
name|WM_DEADCHAR
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
comment|// consume event since there is a dead char next
break|break;
block|}
name|QWidget
modifier|*
name|g
init|=
name|QWidget
operator|::
name|keyboardGrabber
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|&&
name|qt_get_tablet_widget
argument_list|()
operator|&&
name|hwnd
operator|==
name|qt_get_tablet_widget
argument_list|()
operator|->
name|winId
argument_list|()
condition|)
block|{
comment|// if we get an event for the internal tablet widget,
comment|// then don't send it to the keyboard grabber, but
comment|// send it to the widget itself (we don't use it right
comment|// now, just in case).
name|g
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|g
condition|)
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|g
expr_stmt|;
elseif|else
if|if
condition|(
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
condition|)
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|->
name|focusWidget
argument_list|()
condition|?
operator|(
name|QETWidget
operator|*
operator|)
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|->
name|focusWidget
argument_list|()
else|:
operator|(
name|QETWidget
operator|*
operator|)
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|QApplication
operator|::
name|focusWidget
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|widget
operator|||
name|widget
operator|->
name|internalWinId
argument_list|()
operator|==
name|GetFocus
argument_list|()
condition|)
comment|// We faked the message to go to exactly that widget.
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|widget
operator|->
name|window
argument_list|()
expr_stmt|;
if|if
condition|(
name|widget
operator|->
name|isEnabled
argument_list|()
condition|)
name|result
operator|=
name|sm_blockUserInput
condition|?
literal|true
else|:
name|qt_keymapper_private
argument_list|()
operator|->
name|translateKeyEvent
argument_list|(
name|widget
argument_list|,
name|msg
argument_list|,
name|g
operator|!=
literal|0
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|WM_SYSCHAR
case|:
name|result
operator|=
literal|true
expr_stmt|;
comment|// consume event
break|break;
case|case
name|WM_MOUSEWHEEL
case|:
case|case
name|WM_MOUSEHWHEEL
case|:
name|result
operator|=
name|widget
operator|->
name|translateWheelEvent
argument_list|(
name|msg
argument_list|)
expr_stmt|;
break|break;
case|case
name|WM_APPCOMMAND
case|:
block|{
name|uint
name|cmd
init|=
name|GET_APPCOMMAND_LPARAM
argument_list|(
name|lParam
argument_list|)
decl_stmt|;
name|uint
name|uDevice
init|=
name|GET_DEVICE_LPARAM
argument_list|(
name|lParam
argument_list|)
decl_stmt|;
name|uint
name|dwKeys
init|=
name|GET_KEYSTATE_LPARAM
argument_list|(
name|lParam
argument_list|)
decl_stmt|;
name|int
name|state
init|=
name|translateButtonState
argument_list|(
name|dwKeys
argument_list|,
name|QEvent
operator|::
name|KeyPress
argument_list|,
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|uDevice
condition|)
block|{
case|case
name|FAPPCOMMAND_KEY
case|:
block|{
name|int
name|key
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|cmd
condition|)
block|{
case|case
name|APPCOMMAND_BASS_BOOST
case|:
name|key
operator|=
name|Qt
operator|::
name|Key_BassBoost
expr_stmt|;
break|break;
case|case
name|APPCOMMAND_BASS_DOWN
case|:
name|key
operator|=
name|Qt
operator|::
name|Key_BassDown
expr_stmt|;
break|break;
case|case
name|APPCOMMAND_BASS_UP
case|:
name|key
operator|=
name|Qt
operator|::
name|Key_BassUp
expr_stmt|;
break|break;
case|case
name|APPCOMMAND_TREBLE_DOWN
case|:
name|key
operator|=
name|Qt
operator|::
name|Key_TrebleDown
expr_stmt|;
break|break;
case|case
name|APPCOMMAND_TREBLE_UP
case|:
name|key
operator|=
name|Qt
operator|::
name|Key_TrebleUp
expr_stmt|;
break|break;
case|case
name|APPCOMMAND_HELP
case|:
name|key
operator|=
name|Qt
operator|::
name|Key_Help
expr_stmt|;
break|break;
case|case
name|APPCOMMAND_FIND
case|:
name|key
operator|=
name|Qt
operator|::
name|Key_Search
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|key
condition|)
block|{
name|bool
name|res
init|=
literal|false
decl_stmt|;
name|QWidget
modifier|*
name|g
init|=
name|QWidget
operator|::
name|keyboardGrabber
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
condition|)
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|g
expr_stmt|;
elseif|else
if|if
condition|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|QApplication
operator|::
name|focusWidget
argument_list|()
expr_stmt|;
else|else
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|widget
operator|->
name|window
argument_list|()
expr_stmt|;
if|if
condition|(
name|widget
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|res
operator|=
name|QKeyMapper
operator|::
name|sendKeyEvent
argument_list|(
name|widget
argument_list|,
name|g
operator|!=
literal|0
argument_list|,
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|key
argument_list|,
name|Qt
operator|::
name|KeyboardModifier
argument_list|(
name|state
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|res
condition|)
return|return
literal|true
return|;
block|}
block|}
break|break;
default|default:
break|break;
block|}
name|result
operator|=
literal|false
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
case|case
name|WM_NCHITTEST
case|:
if|if
condition|(
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|QPoint
name|pos
init|=
name|widget
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|GET_X_LPARAM
argument_list|(
name|lParam
argument_list|)
argument_list|,
name|GET_Y_LPARAM
argument_list|(
name|lParam
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// don't show resize-cursors for fixed-size widgets
name|QRect
name|fs
init|=
name|widget
operator|->
name|frameStrut
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|widget
operator|->
name|isMinimized
argument_list|()
condition|)
block|{
if|if
condition|(
name|widget
operator|->
name|minimumHeight
argument_list|()
operator|==
name|widget
operator|->
name|maximumHeight
argument_list|()
condition|)
block|{
if|if
condition|(
name|pos
operator|.
name|y
argument_list|()
operator|<
operator|-
operator|(
name|fs
operator|.
name|top
argument_list|()
operator|-
name|fs
operator|.
name|left
argument_list|()
operator|)
condition|)
return|return
name|HTCAPTION
return|;
if|if
condition|(
name|pos
operator|.
name|y
argument_list|()
operator|>=
name|widget
operator|->
name|height
argument_list|()
condition|)
return|return
name|HTBORDER
return|;
block|}
if|if
condition|(
name|widget
operator|->
name|minimumWidth
argument_list|()
operator|==
name|widget
operator|->
name|maximumWidth
argument_list|()
operator|&&
operator|(
name|pos
operator|.
name|x
argument_list|()
operator|<
literal|0
operator|||
name|pos
operator|.
name|x
argument_list|()
operator|>=
name|widget
operator|->
name|width
argument_list|()
operator|)
condition|)
return|return
name|HTBORDER
return|;
block|}
block|}
name|result
operator|=
literal|false
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|WM_SYSCOMMAND
case|:
block|{
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|bool
name|window_state_change
init|=
literal|false
decl_stmt|;
name|Qt
operator|::
name|WindowStates
name|oldstate
init|=
name|Qt
operator|::
name|WindowStates
argument_list|(
name|widget
operator|->
name|dataPtr
argument_list|()
operator|->
name|window_state
argument_list|)
decl_stmt|;
comment|// MSDN:In WM_SYSCOMMAND messages, the four low-order bits of the wParam parameter are
comment|// used internally by the system. To obtain the correct result when testing the value of
comment|// wParam, an application must combine the value 0xFFF0 with the wParam value by using
comment|// the bitwise AND operator.
switch|switch
condition|(
literal|0xfff0
operator|&
name|wParam
condition|)
block|{
case|case
name|SC_CONTEXTHELP
case|:
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
name|QWhatsThis
operator|::
name|enterWhatsThisMode
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|DefWindowProc
argument_list|(
name|hwnd
argument_list|,
name|WM_NCPAINT
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
if|#
directive|if
name|defined
argument_list|(
name|QT_NON_COMMERCIAL
argument_list|)
name|QT_NC_SYSCOMMAND
endif|#
directive|endif
case|case
name|SC_MINIMIZE
case|:
name|window_state_change
operator|=
literal|true
expr_stmt|;
name|widget
operator|->
name|dataPtr
argument_list|()
operator|->
name|window_state
operator||=
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
if|if
condition|(
name|widget
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|QHideEvent
name|e
decl_stmt|;
name|qt_sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|widget
operator|->
name|hideChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|title
init|=
name|widget
operator|->
name|windowIconText
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
name|widget
operator|->
name|setWindowTitle_helper
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|SC_MAXIMIZE
case|:
if|if
condition|(
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
name|widget
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|widget
operator|->
name|geometry
argument_list|()
expr_stmt|;
case|case
name|SC_RESTORE
case|:
name|window_state_change
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|(
literal|0xfff0
operator|&
name|wParam
operator|)
operator|==
name|SC_MAXIMIZE
condition|)
name|widget
operator|->
name|dataPtr
argument_list|()
operator|->
name|window_state
operator||=
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|widget
operator|->
name|isMinimized
argument_list|()
condition|)
name|widget
operator|->
name|dataPtr
argument_list|()
operator|->
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
if|if
condition|(
name|widget
operator|->
name|isMinimized
argument_list|()
condition|)
block|{
name|widget
operator|->
name|dataPtr
argument_list|()
operator|->
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
name|widget
operator|->
name|showChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QShowEvent
name|e
decl_stmt|;
name|qt_sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|title
init|=
name|widget
operator|->
name|windowTitle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
name|widget
operator|->
name|setWindowTitle_helper
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|window_state_change
condition|)
block|{
name|QWindowStateChangeEvent
name|e
parameter_list|(
name|oldstate
parameter_list|)
function_decl|;
name|qt_sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// #ifndef Q_OS_WINCE
break|break;
block|}
case|case
name|WM_SETTINGCHANGE
case|:
if|if
condition|(
name|QApplication
operator|::
name|type
argument_list|()
operator|==
name|QApplication
operator|::
name|Tty
condition|)
break|break;
if|if
condition|(
operator|!
name|msg
operator|.
name|wParam
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_WINCE
comment|// On Windows CE, lParam parameter is a constant, not a char pointer.
if|if
condition|(
name|msg
operator|.
name|lParam
operator|==
name|INI_INTL
condition|)
block|{
else|#
directive|else
name|QString
name|area
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|msg
operator|.
name|lParam
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|==
name|QLatin1String
argument_list|(
literal|"intl"
argument_list|)
condition|)
block|{
endif|#
directive|endif
name|QLocalePrivate
operator|::
name|updateSystemPrivate
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetLocale
argument_list|)
condition|)
name|widget
operator|->
name|dptr
argument_list|()
operator|->
name|setLocale_helper
argument_list|(
name|QLocale
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QEvent
name|e
parameter_list|(
name|QEvent
operator|::
name|LocaleChange
parameter_list|)
function_decl|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|qApp
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|msg
operator|.
name|wParam
operator|==
name|SPI_SETICONTITLELOGFONT
condition|)
block|{
if|if
condition|(
name|QApplication
operator|::
name|desktopSettingsAware
argument_list|()
condition|)
block|{
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|QWidget
operator|::
name|find
argument_list|(
name|hwnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|parentWidget
argument_list|()
condition|)
block|{
name|qt_set_windows_font_resources
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|msg
operator|.
name|wParam
operator|==
name|SPI_SETNONCLIENTMETRICS
condition|)
block|{
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|QWidget
operator|::
name|find
argument_list|(
name|hwnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|parentWidget
argument_list|()
condition|)
block|{
name|qt_set_windows_updateScrollBar
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QEvent
name|e
parameter_list|(
name|QEvent
operator|::
name|LayoutRequest
parameter_list|)
function_decl|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|WM_PAINT
case|:
comment|// paint event
case|case
name|WM_ERASEBKGND
case|:
comment|// erase window background
name|result
operator|=
name|widget
operator|->
name|translatePaintEvent
argument_list|(
name|msg
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
case|case
name|WM_ENTERSIZEMOVE
case|:
name|autoCaptureWnd
operator|=
name|hwnd
expr_stmt|;
break|break;
case|case
name|WM_EXITSIZEMOVE
case|:
name|autoCaptureWnd
operator|=
literal|0
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|WM_MOVE
case|:
comment|// move window
case|case
name|WM_SIZE
case|:
comment|// resize window
name|result
operator|=
name|widget
operator|->
name|translateConfigEvent
argument_list|(
name|msg
argument_list|)
expr_stmt|;
break|break;
case|case
name|WM_ACTIVATEAPP
case|:
if|if
condition|(
name|wParam
operator|==
name|FALSE
condition|)
block|{
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Another application was activated while our popups are open,
comment|// then close all popups.  In case some popup refuses to close,
comment|// we give up after 1024 attempts (to avoid an infinite loop).
name|int
name|maxiter
init|=
literal|1024
decl_stmt|;
name|QWidget
modifier|*
name|popup
decl_stmt|;
while|while
condition|(
operator|(
name|popup
operator|=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|)
operator|&&
name|maxiter
operator|--
condition|)
name|popup
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|WM_ACTIVATE
case|:
if|if
condition|(
name|QApplication
operator|::
name|type
argument_list|()
operator|==
name|QApplication
operator|::
name|Tty
condition|)
break|break;
if|if
condition|(
name|ptrWTOverlap
operator|&&
name|ptrWTEnable
condition|)
block|{
comment|// cooperate with other tablet applications, but when
comment|// we get focus, I want to use the tablet...
if|if
condition|(
name|qt_tablet_context
operator|&&
name|GET_WM_ACTIVATE_STATE
argument_list|(
name|wParam
argument_list|,
name|lParam
argument_list|)
condition|)
block|{
if|if
condition|(
name|ptrWTEnable
argument_list|(
name|qt_tablet_context
argument_list|,
literal|true
argument_list|)
condition|)
name|ptrWTOverlap
argument_list|(
name|qt_tablet_context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|&&
name|LOWORD
argument_list|(
name|wParam
argument_list|)
operator|==
name|WA_INACTIVE
operator|&&
name|QWidget
operator|::
name|find
argument_list|(
operator|(
name|HWND
operator|)
name|lParam
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Another application was activated while our popups are open,
comment|// then close all popups.  In case some popup refuses to close,
comment|// we give up after 1024 attempts (to avoid an infinite loop).
name|int
name|maxiter
init|=
literal|1024
decl_stmt|;
name|QWidget
modifier|*
name|popup
decl_stmt|;
while|while
condition|(
operator|(
name|popup
operator|=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|)
operator|&&
name|maxiter
operator|--
condition|)
name|popup
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOWORD
argument_list|(
name|wParam
argument_list|)
operator|!=
name|WA_INACTIVE
condition|)
block|{
comment|// WM_ACTIVATEAPP handles the "true" false case, as this is only when the application
comment|// loses focus. Doing it here would result in the widget getting focus to not know
comment|// where it got it from; it would simply get a 0 value as the old focus widget.
ifdef|#
directive|ifdef
name|Q_WS_WINCE
block|{
ifdef|#
directive|ifdef
name|Q_WS_WINCE_WM
comment|// On Windows mobile we do not receive WM_SYSCOMMAND / SC_MINIMIZE messages.
comment|// Thus we have to unset the minimized state explicitly. We must do this for all
comment|// top-level widgets, because we get the HWND of a random widget here.
foreach|foreach
control|(
name|QWidget
modifier|*
name|tlw
decl|,
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
control|)
block|{
if|if
condition|(
name|tlw
operator|->
name|isMinimized
argument_list|()
condition|)
name|tlw
operator|->
name|setWindowState
argument_list|(
name|tlw
operator|->
name|windowState
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|WindowMinimized
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
comment|// On Windows CE we do not receive WM_SYSCOMMAND / SC_MINIMIZE messages.
comment|// Thus we have to unset the minimized state explicitly.
if|if
condition|(
name|widget
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
name|widget
operator|->
name|setWindowState
argument_list|(
name|widget
operator|->
name|windowState
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|WindowMinimized
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_WS_WINCE_WM
else|#
directive|else
if|if
condition|(
operator|!
operator|(
name|widget
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
block|{
endif|#
directive|endif
comment|// Ignore the activate message send by WindowsXP to a minimized window
ifdef|#
directive|ifdef
name|Q_WS_WINCE_WM
if|if
condition|(
name|widget
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
name|qt_wince_hide_taskbar
argument_list|(
name|widget
operator|->
name|winId
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|winFocus
argument_list|(
name|widget
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// reset any window alert flashes
name|alert_widget
argument_list|(
name|widget
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Windows tries to activate a modally blocked window.
comment|// This happens when restoring an application after "Show Desktop"
if|if
condition|(
name|app_do_modal
operator|&&
name|LOWORD
argument_list|(
name|wParam
argument_list|)
operator|==
name|WA_ACTIVE
condition|)
block|{
name|QWidget
modifier|*
name|top
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|tryModalHelper
argument_list|(
name|widget
argument_list|,
operator|&
name|top
argument_list|)
operator|&&
name|top
operator|&&
name|widget
operator|!=
name|top
condition|)
block|{
if|if
condition|(
name|top
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|top
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// This is the case when native file dialogs are shown
name|QWidget
modifier|*
name|p
init|=
operator|(
name|top
operator|->
name|parentWidget
argument_list|()
condition|?
name|top
operator|->
name|parentWidget
argument_list|()
operator|->
name|window
argument_list|()
else|:
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|p
operator|&&
name|p
operator|->
name|isVisible
argument_list|()
condition|)
name|p
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
case|case
name|WM_MOUSEACTIVATE
case|:
if|if
condition|(
name|widget
operator|->
name|window
argument_list|()
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Tool
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|widget
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|window
argument_list|()
operator|->
name|focusWidget
argument_list|()
condition|)
block|{
while|while
condition|(
name|w
operator|&&
operator|(
name|w
operator|->
name|focusPolicy
argument_list|()
operator|&
name|Qt
operator|::
name|ClickFocus
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|w
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|fw
init|=
name|w
decl_stmt|;
while|while
condition|(
operator|(
name|fw
operator|=
name|fw
operator|->
name|nextInFocusChain
argument_list|()
operator|)
operator|!=
name|w
operator|&&
name|fw
operator|->
name|focusPolicy
argument_list|()
operator|==
name|Qt
operator|::
name|NoFocus
condition|)
empty_stmt|;
if|if
condition|(
name|fw
operator|!=
name|w
condition|)
break|break;
name|QWidget
modifier|*
name|pw
init|=
name|w
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
while|while
condition|(
name|pw
condition|)
block|{
name|pw
operator|=
name|pw
operator|->
name|window
argument_list|()
expr_stmt|;
if|if
condition|(
name|pw
operator|&&
name|pw
operator|->
name|isVisible
argument_list|()
operator|&&
name|pw
operator|->
name|focusWidget
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|pw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|SetWindowPos
argument_list|(
name|pw
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|HWND_TOP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOSIZE
operator||
name|SWP_NOMOVE
argument_list|)
expr_stmt|;
break|break;
block|}
name|pw
operator|=
name|pw
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
name|RETURN
argument_list|(
name|MA_NOACTIVATE
argument_list|)
expr_stmt|;
block|}
name|w
operator|=
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|RETURN
argument_list|(
name|MA_ACTIVATE
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|WM_SHOWWINDOW
case|:
if|if
condition|(
name|lParam
operator|==
name|SW_PARENTOPENING
condition|)
block|{
if|if
condition|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
condition|)
name|RETURN
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|widget
operator|->
name|isWindow
argument_list|()
operator|&&
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|)
operator|&&
operator|!
name|widget
operator|->
name|testWindowState
argument_list|(
name|Qt
operator|::
name|WindowMinimized
argument_list|)
condition|)
block|{
if|if
condition|(
name|lParam
operator|==
name|SW_PARENTOPENING
condition|)
block|{
name|QShowEvent
name|e
decl_stmt|;
name|qt_sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lParam
operator|==
name|SW_PARENTCLOSING
condition|)
block|{
name|QHideEvent
name|e
decl_stmt|;
name|qt_sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|widget
operator|->
name|hideChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|wParam
operator|&&
name|autoCaptureWnd
operator|==
name|widget
operator|->
name|internalWinId
argument_list|()
condition|)
name|releaseAutoCapture
argument_list|()
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|WM_PALETTECHANGED
case|:
comment|// our window changed palette
if|if
condition|(
name|QColormap
operator|::
name|hPal
argument_list|()
operator|&&
operator|(
name|WId
operator|)
name|wParam
operator|==
name|widget
operator|->
name|internalWinId
argument_list|()
condition|)
name|RETURN
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// otherwise: FALL THROUGH!
comment|// FALL THROUGH
case|case
name|WM_QUERYNEWPALETTE
case|:
comment|// realize own palette
if|if
condition|(
name|QColormap
operator|::
name|hPal
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|HDC
name|hdc
init|=
name|GetDC
argument_list|(
name|widget
operator|->
name|internalWinId
argument_list|()
argument_list|)
decl_stmt|;
name|HPALETTE
name|hpalOld
init|=
name|SelectPalette
argument_list|(
name|hdc
argument_list|,
name|QColormap
operator|::
name|hPal
argument_list|()
argument_list|,
name|FALSE
argument_list|)
decl_stmt|;
name|uint
name|n
init|=
name|RealizePalette
argument_list|(
name|hdc
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
name|InvalidateRect
argument_list|(
name|widget
operator|->
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
name|SelectPalette
argument_list|(
name|hdc
argument_list|,
name|hpalOld
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
name|RealizePalette
argument_list|(
name|hdc
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
name|widget
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
name|RETURN
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|WM_CLOSE
case|:
comment|// close window
name|widget
operator|->
name|translateCloseEvent
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|RETURN
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// always handled
case|case
name|WM_DESTROY
case|:
comment|// destroy window
if|if
condition|(
name|hwnd
operator|==
name|curWin
condition|)
block|{
name|QWidget
modifier|*
name|enter
init|=
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
decl_stmt|;
if|if
condition|(
name|enter
operator|==
name|widget
condition|)
name|enter
operator|=
literal|0
expr_stmt|;
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
name|enter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|curWin
operator|=
name|enter
condition|?
name|enter
operator|->
name|effectiveWinId
argument_list|()
else|:
literal|0
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
name|enter
expr_stmt|;
block|}
if|if
condition|(
name|widget
operator|==
name|popupButtonFocus
condition|)
name|popupButtonFocus
operator|=
literal|0
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
case|case
name|WM_WINDOWPOSCHANGING
case|:
block|{
name|result
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|WINDOWPOS
modifier|*
name|winPos
init|=
operator|(
name|WINDOWPOS
operator|*
operator|)
name|lParam
decl_stmt|;
if|if
condition|(
name|widget
operator|->
name|layout
argument_list|()
operator|&&
name|widget
operator|->
name|layout
argument_list|()
operator|->
name|hasHeightForWidth
argument_list|()
operator|&&
operator|!
operator|(
name|winPos
operator|->
name|flags
operator|&
operator|(
name|SWP_NOCOPYBITS
operator||
name|SWP_NOSIZE
operator|)
operator|)
condition|)
block|{
name|QRect
name|fs
init|=
name|widget
operator|->
name|frameStrut
argument_list|()
decl_stmt|;
name|QRect
name|rect
init|=
name|widget
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QRect
name|newRect
init|=
name|QRect
argument_list|(
name|winPos
operator|->
name|x
operator|+
name|fs
operator|.
name|left
argument_list|()
argument_list|,
name|winPos
operator|->
name|y
operator|+
name|fs
operator|.
name|top
argument_list|()
argument_list|,
name|winPos
operator|->
name|cx
operator|-
name|fs
operator|.
name|left
argument_list|()
operator|-
name|fs
operator|.
name|right
argument_list|()
argument_list|,
name|winPos
operator|->
name|cy
operator|-
name|fs
operator|.
name|top
argument_list|()
operator|-
name|fs
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
name|QSize
name|newSize
init|=
name|QLayout
operator|::
name|closestAcceptableSize
argument_list|(
name|widget
argument_list|,
name|newRect
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|dh
init|=
name|newSize
operator|.
name|height
argument_list|()
operator|-
name|newRect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|dw
init|=
name|newSize
operator|.
name|width
argument_list|()
operator|-
name|newRect
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dw
operator|&&
operator|!
name|dh
condition|)
break|break;
comment|// Size OK
if|if
condition|(
name|rect
operator|.
name|y
argument_list|()
operator|!=
name|newRect
operator|.
name|y
argument_list|()
condition|)
block|{
name|newRect
operator|.
name|setTop
argument_list|(
name|newRect
operator|.
name|top
argument_list|()
operator|-
name|dh
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newRect
operator|.
name|setBottom
argument_list|(
name|newRect
operator|.
name|bottom
argument_list|()
operator|+
name|dh
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rect
operator|.
name|x
argument_list|()
operator|!=
name|newRect
operator|.
name|x
argument_list|()
condition|)
block|{
name|newRect
operator|.
name|setLeft
argument_list|(
name|newRect
operator|.
name|left
argument_list|()
operator|-
name|dw
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newRect
operator|.
name|setRight
argument_list|(
name|newRect
operator|.
name|right
argument_list|()
operator|+
name|dw
argument_list|)
expr_stmt|;
block|}
name|winPos
operator|->
name|x
operator|=
name|newRect
operator|.
name|x
argument_list|()
operator|-
name|fs
operator|.
name|left
argument_list|()
expr_stmt|;
name|winPos
operator|->
name|y
operator|=
name|newRect
operator|.
name|y
argument_list|()
operator|-
name|fs
operator|.
name|top
argument_list|()
expr_stmt|;
name|winPos
operator|->
name|cx
operator|=
name|newRect
operator|.
name|width
argument_list|()
operator|+
name|fs
operator|.
name|left
argument_list|()
operator|+
name|fs
operator|.
name|right
argument_list|()
expr_stmt|;
name|winPos
operator|->
name|cy
operator|=
name|newRect
operator|.
name|height
argument_list|()
operator|+
name|fs
operator|.
name|top
argument_list|()
operator|+
name|fs
operator|.
name|bottom
argument_list|()
expr_stmt|;
name|RETURN
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|widget
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
block|{
name|winPos
operator|->
name|hwndInsertAfter
operator|=
name|HWND_BOTTOM
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|WM_GETMINMAXINFO
case|:
if|if
condition|(
name|widget
operator|->
name|xtra
argument_list|()
condition|)
block|{
name|MINMAXINFO
modifier|*
name|mmi
init|=
operator|(
name|MINMAXINFO
operator|*
operator|)
name|lParam
decl_stmt|;
name|QWExtra
modifier|*
name|x
init|=
name|widget
operator|->
name|xtra
argument_list|()
decl_stmt|;
name|QRect
name|fs
init|=
name|widget
operator|->
name|frameStrut
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|->
name|minw
operator|>
literal|0
condition|)
name|mmi
operator|->
name|ptMinTrackSize
operator|.
name|x
operator|=
name|x
operator|->
name|minw
operator|+
name|fs
operator|.
name|right
argument_list|()
operator|+
name|fs
operator|.
name|left
argument_list|()
expr_stmt|;
if|if
condition|(
name|x
operator|->
name|minh
operator|>
literal|0
condition|)
name|mmi
operator|->
name|ptMinTrackSize
operator|.
name|y
operator|=
name|x
operator|->
name|minh
operator|+
name|fs
operator|.
name|top
argument_list|()
operator|+
name|fs
operator|.
name|bottom
argument_list|()
expr_stmt|;
name|qint32
name|maxw
init|=
operator|(
name|x
operator|->
name|maxw
operator|>=
name|x
operator|->
name|minw
operator|)
condition|?
name|x
operator|->
name|maxw
else|:
name|x
operator|->
name|minw
decl_stmt|;
name|qint32
name|maxh
init|=
operator|(
name|x
operator|->
name|maxh
operator|>=
name|x
operator|->
name|minh
operator|)
condition|?
name|x
operator|->
name|maxh
else|:
name|x
operator|->
name|minh
decl_stmt|;
if|if
condition|(
name|maxw
operator|<
name|QWIDGETSIZE_MAX
condition|)
block|{
name|mmi
operator|->
name|ptMaxTrackSize
operator|.
name|x
operator|=
name|maxw
operator|+
name|fs
operator|.
name|right
argument_list|()
operator|+
name|fs
operator|.
name|left
argument_list|()
expr_stmt|;
comment|// windows with title bar have an implicit size limit of 112 pixels
if|if
condition|(
name|widget
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
name|mmi
operator|->
name|ptMaxTrackSize
operator|.
name|x
operator|=
name|qMax
argument_list|<
name|long
argument_list|>
argument_list|(
name|mmi
operator|->
name|ptMaxTrackSize
operator|.
name|x
argument_list|,
literal|112
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxh
operator|<
name|QWIDGETSIZE_MAX
condition|)
name|mmi
operator|->
name|ptMaxTrackSize
operator|.
name|y
operator|=
name|maxh
operator|+
name|fs
operator|.
name|top
argument_list|()
operator|+
name|fs
operator|.
name|bottom
argument_list|()
expr_stmt|;
name|RETURN
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
case|case
name|WM_CONTEXTMENU
case|:
block|{
comment|// it's not VK_APPS or Shift+F10, but a click in the NC area
if|if
condition|(
name|lParam
operator|!=
operator|(
name|int
operator|)
literal|0xffffffff
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|QWidget
modifier|*
name|fw
init|=
name|QWidget
operator|::
name|keyboardGrabber
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fw
condition|)
block|{
if|if
condition|(
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
condition|)
name|fw
operator|=
operator|(
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|->
name|focusWidget
argument_list|()
condition|?
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|->
name|focusWidget
argument_list|()
else|:
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
name|fw
operator|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|widget
condition|)
name|fw
operator|=
name|widget
operator|->
name|window
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fw
operator|&&
name|fw
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|QPoint
name|pos
init|=
name|fw
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImMicroFocus
argument_list|)
operator|.
name|toRect
argument_list|()
operator|.
name|center
argument_list|()
decl_stmt|;
name|QContextMenuEvent
name|e
argument_list|(
name|QContextMenuEvent
operator|::
name|Keyboard
argument_list|,
name|pos
argument_list|,
name|fw
operator|->
name|mapToGlobal
argument_list|(
name|pos
argument_list|)
argument_list|,
name|qt_win_getKeyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|qt_sendSpontaneousEvent
argument_list|(
name|fw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
endif|#
directive|endif
case|case
name|WM_IME_STARTCOMPOSITION
case|:
case|case
name|WM_IME_ENDCOMPOSITION
case|:
case|case
name|WM_IME_COMPOSITION
case|:
block|{
name|QWidget
modifier|*
name|fw
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
decl_stmt|;
name|QWinInputContext
modifier|*
name|im
init|=
name|fw
condition|?
name|qobject_cast
argument_list|<
name|QWinInputContext
operator|*
argument_list|>
argument_list|(
name|fw
operator|->
name|inputContext
argument_list|()
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|fw
operator|&&
name|im
condition|)
block|{
if|if
condition|(
name|message
operator|==
name|WM_IME_STARTCOMPOSITION
condition|)
name|result
operator|=
name|im
operator|->
name|startComposition
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|message
operator|==
name|WM_IME_ENDCOMPOSITION
condition|)
name|result
operator|=
name|im
operator|->
name|endComposition
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|message
operator|==
name|WM_IME_COMPOSITION
condition|)
name|result
operator|=
name|im
operator|->
name|composition
argument_list|(
name|lParam
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|WM_IME_REQUEST
case|:
block|{
name|QWidget
modifier|*
name|fw
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
decl_stmt|;
name|QWinInputContext
modifier|*
name|im
init|=
name|fw
condition|?
name|qobject_cast
argument_list|<
name|QWinInputContext
operator|*
argument_list|>
argument_list|(
name|fw
operator|->
name|inputContext
argument_list|()
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|fw
operator|&&
name|im
condition|)
block|{
if|if
condition|(
name|wParam
operator|==
name|IMR_RECONVERTSTRING
condition|)
block|{
name|int
name|ret
init|=
name|im
operator|->
name|reconvertString
argument_list|(
operator|(
name|RECONVERTSTRING
operator|*
operator|)
name|lParam
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
return|return
name|ret
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|wParam
operator|==
name|IMR_CONFIRMRECONVERTSTRING
condition|)
block|{
name|RETURN
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// in all other cases, call DefWindowProc()
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
break|break;
block|}
ifndef|#
directive|ifndef
name|Q_WS_WINCE
case|case
name|WM_CHANGECBCHAIN
case|:
case|case
name|WM_DRAWCLIPBOARD
case|:
endif|#
directive|endif
case|case
name|WM_RENDERFORMAT
case|:
case|case
name|WM_RENDERALLFORMATS
case|:
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
case|case
name|WM_DESTROYCLIPBOARD
case|:
if|if
condition|(
name|qt_clipboard
condition|)
block|{
name|QClipboardEvent
name|e
argument_list|(
cast|reinterpret_cast
argument_list|<
name|QEventPrivate
operator|*
argument_list|>
argument_list|(
operator|&
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|qt_sendSpontaneousEvent
argument_list|(
name|qt_clipboard
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|RETURN
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
literal|false
expr_stmt|;
break|break;
endif|#
directive|endif
comment|//QT_NO_CLIPBOARD
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
case|case
name|WM_GETOBJECT
case|:
block|{
comment|/* On Win64, lParam can be 0x00000000fffffffc or 0xfffffffffffffffc (!),                    but MSDN says that lParam should be converted to a DWORD                    before its compared against OBJID_CLIENT                 */
specifier|const
name|DWORD
name|dwObjId
init|=
operator|(
name|DWORD
operator|)
name|lParam
decl_stmt|;
comment|// Ignoring all requests while starting up
if|if
condition|(
name|QApplication
operator|::
name|startingUp
argument_list|()
operator|||
name|QApplication
operator|::
name|closingDown
argument_list|()
operator|||
name|dwObjId
operator|!=
name|OBJID_CLIENT
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
typedef|typedef
name|LRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrLresultFromObject
function_decl|)
parameter_list|(
name|REFIID
parameter_list|,
name|WPARAM
parameter_list|,
name|LPUNKNOWN
parameter_list|)
function_decl|;
specifier|static
name|PtrLresultFromObject
name|ptrLresultFromObject
init|=
literal|0
decl_stmt|;
specifier|static
name|bool
name|oleaccChecked
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|oleaccChecked
condition|)
block|{
name|oleaccChecked
operator|=
literal|true
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|ptrLresultFromObject
operator|=
operator|(
name|PtrLresultFromObject
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"oleacc"
argument_list|)
argument_list|,
literal|"LresultFromObject"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|ptrLresultFromObject
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|acc
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|acc
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
comment|// and get an instance of the IAccessibile implementation
name|IAccessible
modifier|*
name|iface
init|=
name|qt_createWindowsAccessible
argument_list|(
name|acc
argument_list|)
decl_stmt|;
name|res
operator|=
name|ptrLresultFromObject
argument_list|(
name|IID_IAccessible
argument_list|,
name|wParam
argument_list|,
name|iface
argument_list|)
expr_stmt|;
comment|// ref == 2
name|iface
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|// the client will release the object again, and then it will destroy itself
if|if
condition|(
name|res
operator|>
literal|0
condition|)
name|RETURN
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|WM_GETTEXT
case|:
if|if
condition|(
operator|!
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|acc
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|acc
condition|)
block|{
name|QString
name|text
init|=
name|acc
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|text
operator|=
name|widget
operator|->
name|objectName
argument_list|()
expr_stmt|;
name|ret
operator|=
name|qMin
argument_list|<
name|int
argument_list|>
argument_list|(
name|wParam
operator|-
literal|1
argument_list|,
name|text
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|resize
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
operator|(
name|void
operator|*
operator|)
name|lParam
argument_list|,
name|text
operator|.
name|utf16
argument_list|()
argument_list|,
operator|(
name|text
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|acc
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ret
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|RETURN
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
literal|false
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|WT_PACKET
case|:
if|if
condition|(
name|ptrWTPacketsGet
condition|)
block|{
if|if
condition|(
operator|(
name|nPackets
operator|=
name|ptrWTPacketsGet
argument_list|(
name|qt_tablet_context
argument_list|,
name|QT_TABLET_NPACKETQSIZE
argument_list|,
operator|&
name|localPacketBuf
argument_list|)
operator|)
condition|)
block|{
name|result
operator|=
name|widget
operator|->
name|translateTabletEvent
argument_list|(
name|msg
argument_list|,
name|localPacketBuf
argument_list|,
name|nPackets
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|WT_PROXIMITY
case|:
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
if|if
condition|(
name|ptrWTPacketsGet
operator|&&
name|ptrWTInfo
condition|)
block|{
specifier|const
name|bool
name|enteredProximity
init|=
name|LOWORD
argument_list|(
name|lParam
argument_list|)
operator|!=
literal|0
decl_stmt|;
name|PACKET
name|proximityBuffer
index|[
literal|1
index|]
decl_stmt|;
comment|// we are only interested in the first packet in this case
specifier|const
name|int
name|totalPacks
init|=
name|ptrWTPacketsGet
argument_list|(
name|qt_tablet_context
argument_list|,
literal|1
argument_list|,
name|proximityBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|totalPacks
operator|>
literal|0
condition|)
block|{
specifier|const
name|UINT
name|currentCursor
init|=
name|proximityBuffer
index|[
literal|0
index|]
operator|.
name|pkCursor
decl_stmt|;
name|UINT
name|csr_physid
decl_stmt|;
name|ptrWTInfo
argument_list|(
name|WTI_CURSORS
operator|+
name|currentCursor
argument_list|,
name|CSR_PHYSID
argument_list|,
operator|&
name|csr_physid
argument_list|)
expr_stmt|;
name|UINT
name|csr_type
decl_stmt|;
name|ptrWTInfo
argument_list|(
name|WTI_CURSORS
operator|+
name|currentCursor
argument_list|,
name|CSR_TYPE
argument_list|,
operator|&
name|csr_type
argument_list|)
expr_stmt|;
specifier|const
name|UINT
name|deviceIdMask
init|=
literal|0xFF6
decl_stmt|;
comment|// device type mask&& device color mask
name|quint64
name|uniqueId
init|=
operator|(
name|csr_type
operator|&
name|deviceIdMask
operator|)
decl_stmt|;
name|uniqueId
operator|=
operator|(
name|uniqueId
operator|<<
literal|32
operator|)
operator||
name|csr_physid
expr_stmt|;
comment|// initialising and updating the cursor should be done in response to
comment|// WT_CSRCHANGE. We do it in WT_PROXIMITY because some wintab never send
comment|// the event WT_CSRCHANGE even if asked with CXO_CSRMESSAGES
specifier|const
name|QTabletCursorInfo
modifier|*
specifier|const
name|globalCursorInfo
init|=
name|tCursorInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|globalCursorInfo
operator|->
name|contains
argument_list|(
name|uniqueId
argument_list|)
condition|)
name|tabletInit
argument_list|(
name|uniqueId
argument_list|,
name|csr_type
argument_list|,
name|qt_tablet_context
argument_list|)
expr_stmt|;
name|currentTabletPointer
operator|=
name|globalCursorInfo
operator|->
name|value
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
name|tabletUpdateCursor
argument_list|(
name|currentTabletPointer
argument_list|,
name|currentCursor
argument_list|)
expr_stmt|;
block|}
name|qt_tabletChokeMouse
operator|=
literal|false
expr_stmt|;
name|QTabletEvent
name|tabletProximity
argument_list|(
name|enteredProximity
condition|?
name|QEvent
operator|::
name|TabletEnterProximity
else|:
name|QEvent
operator|::
name|TabletLeaveProximity
argument_list|,
name|QPoint
argument_list|()
argument_list|,
name|QPoint
argument_list|()
argument_list|,
name|QPointF
argument_list|()
argument_list|,
name|currentTabletPointer
operator|.
name|currentDevice
argument_list|,
name|currentTabletPointer
operator|.
name|currentPointerType
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|currentTabletPointer
operator|.
name|llId
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|qApp
argument_list|,
operator|&
name|tabletProximity
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_TABLETEVENT
break|break;
ifdef|#
directive|ifdef
name|Q_WS_WINCE_WM
case|case
name|WM_SETFOCUS
case|:
block|{
name|HIMC
name|hC
decl_stmt|;
name|hC
operator|=
name|ImmGetContext
argument_list|(
name|hwnd
argument_list|)
expr_stmt|;
name|ImmSetOpenStatus
argument_list|(
name|hC
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
name|ImmEscape
argument_list|(
name|NULL
argument_list|,
name|hC
argument_list|,
name|IME_ESC_SET_MODE
argument_list|,
operator|(
name|LPVOID
operator|)
name|IM_SPELL
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
case|case
name|WM_KILLFOCUS
case|:
if|if
condition|(
operator|!
name|QWidget
operator|::
name|find
argument_list|(
operator|(
name|HWND
operator|)
name|wParam
argument_list|)
condition|)
block|{
comment|// we don't get focus, so unset it now
if|if
condition|(
operator|!
name|widget
operator|->
name|hasFocus
argument_list|()
condition|)
comment|// work around Windows bug after minimizing/restoring
name|widget
operator|=
operator|(
name|QETWidget
operator|*
operator|)
name|QApplication
operator|::
name|focusWidget
argument_list|()
expr_stmt|;
name|HWND
name|focus
init|=
operator|::
name|GetFocus
argument_list|()
decl_stmt|;
comment|//if there is a current widget and the new widget belongs to the same toplevel window
comment|//or if the current widget was embedded into non-qt window (i.e. we won't get WM_ACTIVATEAPP)
comment|//then we clear the focus on the widget
comment|//in case the new widget belongs to a different widget hierarchy, clearing the focus
comment|//will be handled because the active window will change
specifier|const
name|bool
name|embedded
init|=
name|widget
operator|&&
operator|(
operator|(
name|QETWidget
operator|*
operator|)
name|widget
operator|->
name|window
argument_list|()
operator|)
operator|->
name|topData
argument_list|()
operator|->
name|embedded
decl_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|(
name|embedded
operator|||
operator|::
name|IsChild
argument_list|(
name|widget
operator|->
name|window
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|focus
argument_list|)
operator|)
condition|)
block|{
name|widget
operator|->
name|clearFocus
argument_list|()
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
name|WM_THEMECHANGED
case|:
if|if
condition|(
operator|(
name|widget
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
operator|||
operator|!
name|qApp
operator|||
name|QApplication
operator|::
name|closingDown
argument_list|()
operator|||
name|QApplication
operator|::
name|type
argument_list|()
operator|==
name|QApplication
operator|::
name|Tty
condition|)
break|break;
if|if
condition|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Polished
argument_list|)
condition|)
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|unpolish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Polished
argument_list|)
condition|)
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|polish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|->
name|repolishStyle
argument_list|(
operator|*
name|QApplication
operator|::
name|style
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|->
name|isVisible
argument_list|()
condition|)
name|widget
operator|->
name|update
argument_list|()
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
case|case
name|WM_INPUTLANGCHANGE
case|:
block|{
name|wchar_t
name|info
index|[
literal|7
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|GetLocaleInfo
argument_list|(
name|MAKELCID
argument_list|(
name|lParam
argument_list|,
name|SORT_DEFAULT
argument_list|)
argument_list|,
name|LOCALE_IDEFAULTANSICODEPAGE
argument_list|,
name|info
argument_list|,
literal|6
argument_list|)
condition|)
block|{
name|inputcharset
operator|=
name|CP_ACP
expr_stmt|;
block|}
else|else
block|{
name|inputcharset
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|info
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
name|QKeyMapper
operator|::
name|changeKeyboard
argument_list|()
expr_stmt|;
break|break;
block|}
else|#
directive|else
case|case
name|WM_COMMAND
case|:
block|{
name|bool
name|OkCommand
init|=
operator|(
name|LOWORD
argument_list|(
name|wParam
argument_list|)
operator|==
literal|0x1
operator|)
decl_stmt|;
name|bool
name|CancelCommand
init|=
operator|(
name|LOWORD
argument_list|(
name|wParam
argument_list|)
operator|==
literal|0x2
operator|)
decl_stmt|;
if|if
condition|(
name|OkCommand
condition|)
name|QApplication
operator|::
name|postEvent
argument_list|(
name|widget
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|OkRequest
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|CancelCommand
condition|)
name|widget
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
else|else
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
name|QMenuBar
operator|::
name|wceCommands
argument_list|(
name|LOWORD
argument_list|(
name|wParam
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|result
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
name|WM_HELP
case|:
name|QApplication
operator|::
name|postEvent
argument_list|(
name|widget
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|HelpRequest
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|WM_MOUSELEAVE
case|:
comment|// We receive a mouse leave for curWin, meaning
comment|// the mouse was moved outside our widgets
if|if
condition|(
name|widget
operator|->
name|internalWinId
argument_list|()
operator|==
name|curWin
condition|)
block|{
name|bool
name|dispatch
init|=
operator|!
name|widget
operator|->
name|underMouse
argument_list|()
decl_stmt|;
comment|// hasMouse is updated when dispatching enter/leave,
comment|// so test if it is actually up-to-date
if|if
condition|(
operator|!
name|dispatch
condition|)
block|{
name|QRect
name|geom
init|=
name|widget
operator|->
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|widget
operator|->
name|parentWidget
argument_list|()
operator|&&
operator|!
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|QPoint
name|gp
init|=
name|widget
operator|->
name|parentWidget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|widget
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
name|geom
operator|.
name|setX
argument_list|(
name|gp
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|geom
operator|.
name|setY
argument_list|(
name|gp
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QPoint
name|cpos
init|=
name|QCursor
operator|::
name|pos
argument_list|()
decl_stmt|;
name|dispatch
operator|=
operator|!
name|geom
operator|.
name|contains
argument_list|(
name|cpos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dispatch
operator|&&
operator|!
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|hittest
init|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|cpos
argument_list|)
decl_stmt|;
name|dispatch
operator|=
operator|!
name|hittest
operator|||
name|hittest
operator|->
name|internalWinId
argument_list|()
operator|!=
name|curWin
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dispatch
condition|)
block|{
name|HRGN
name|hrgn
init|=
name|qt_tryCreateRegion
argument_list|(
name|QRegion
operator|::
name|Rectangle
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|GetWindowRgn
argument_list|(
name|curWin
argument_list|,
name|hrgn
argument_list|)
operator|!=
name|ERROR
condition|)
block|{
name|QPoint
name|lcpos
init|=
name|widget
operator|->
name|mapFromGlobal
argument_list|(
name|cpos
argument_list|)
decl_stmt|;
name|dispatch
operator|=
operator|!
name|PtInRegion
argument_list|(
name|hrgn
argument_list|,
name|lcpos
operator|.
name|x
argument_list|()
argument_list|,
name|lcpos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DeleteObject
argument_list|(
name|hrgn
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dispatch
condition|)
block|{
if|if
condition|(
name|qt_last_mouse_receiver
operator|&&
operator|!
name|qt_last_mouse_receiver
operator|->
name|internalWinId
argument_list|()
condition|)
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
literal|0
argument_list|,
name|qt_last_mouse_receiver
argument_list|)
expr_stmt|;
else|else
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
literal|0
argument_list|,
name|QWidget
operator|::
name|find
argument_list|(
operator|(
name|WId
operator|)
name|curWin
argument_list|)
argument_list|)
expr_stmt|;
name|curWin
operator|=
literal|0
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
literal|0
expr_stmt|;
block|}
block|}
break|break;
case|case
name|WM_CANCELMODE
case|:
block|{
comment|// this goes through QMenuBar's event filter
name|QEvent
name|e
parameter_list|(
name|QEvent
operator|::
name|ActivationChange
parameter_list|)
function_decl|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|qApp
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|WM_IME_NOTIFY
case|:
comment|// special handling for ime, only for widgets in a popup
if|if
condition|(
name|wParam
operator|==
name|IMN_OPENCANDIDATE
condition|)
block|{
name|imeParentWnd
operator|=
name|hwnd
expr_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
condition|)
block|{
comment|// temporarily disable the mouse grab to allow mouse input in
comment|// the ime candidate window. The actual handle is untouched
if|if
condition|(
name|autoCaptureWnd
condition|)
name|ReleaseCapture
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|wParam
operator|==
name|IMN_CLOSECANDIDATE
condition|)
block|{
name|imeParentWnd
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
condition|)
block|{
comment|// undo the action above, when candidate window is closed
if|if
condition|(
name|autoCaptureWnd
condition|)
name|SetCapture
argument_list|(
name|autoCaptureWnd
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|=
literal|false
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_WINCE_GESTURES
argument_list|)
case|case
name|WM_GESTURE
case|:
block|{
name|GESTUREINFO
name|gi
decl_stmt|;
name|memset
argument_list|(
operator|&
name|gi
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|GESTUREINFO
argument_list|)
argument_list|)
expr_stmt|;
name|gi
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|GESTUREINFO
argument_list|)
expr_stmt|;
name|QApplicationPrivate
modifier|*
name|qAppPriv
init|=
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
decl_stmt|;
name|BOOL
name|bResult
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|qAppPriv
operator|->
name|GetGestureInfo
condition|)
name|bResult
operator|=
name|qAppPriv
operator|->
name|GetGestureInfo
argument_list|(
operator|(
name|HANDLE
operator|)
name|msg
operator|.
name|lParam
argument_list|,
operator|&
name|gi
argument_list|)
expr_stmt|;
if|if
condition|(
name|bResult
condition|)
block|{
if|if
condition|(
name|gi
operator|.
name|dwID
operator|==
name|GID_BEGIN
condition|)
block|{
comment|// find the alien widget for the gesture position.
comment|// This might not be accurate as the position is the center
comment|// point of two fingers for multi-finger gestures.
name|QPoint
name|pt
parameter_list|(
name|gi
operator|.
name|ptsLocation
operator|.
name|x
parameter_list|,
name|gi
operator|.
name|ptsLocation
operator|.
name|y
parameter_list|)
function_decl|;
name|QWidget
modifier|*
name|w
init|=
name|widget
operator|->
name|childAt
argument_list|(
name|widget
operator|->
name|mapFromGlobal
argument_list|(
name|pt
argument_list|)
argument_list|)
decl_stmt|;
name|qAppPriv
operator|->
name|gestureWidget
operator|=
name|w
condition|?
name|w
else|:
name|widget
expr_stmt|;
block|}
if|if
condition|(
name|qAppPriv
operator|->
name|gestureWidget
condition|)
cast|static_cast
argument_list|<
name|QETWidget
operator|*
argument_list|>
argument_list|(
name|qAppPriv
operator|->
name|gestureWidget
argument_list|)
operator|->
name|translateGestureEvent
argument_list|(
name|msg
argument_list|,
name|gi
argument_list|)
expr_stmt|;
if|if
condition|(
name|qAppPriv
operator|->
name|CloseGestureInfoHandle
condition|)
name|qAppPriv
operator|->
name|CloseGestureInfoHandle
argument_list|(
operator|(
name|HANDLE
operator|)
name|msg
operator|.
name|lParam
argument_list|)
expr_stmt|;
if|if
condition|(
name|gi
operator|.
name|dwID
operator|==
name|GID_END
condition|)
name|qAppPriv
operator|->
name|gestureWidget
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|DWORD
name|dwErr
init|=
name|GetLastError
argument_list|()
decl_stmt|;
if|if
condition|(
name|dwErr
operator|>
literal|0
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"translateGestureEvent: error = "
operator|<<
name|dwErr
expr_stmt|;
block|}
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
comment|// !defined(Q_WS_WINCE) || defined(QT_WINCE_GESTURES)
endif|#
directive|endif
comment|// QT_NO_GESTURES
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
case|case
name|WM_SETCURSOR
case|:
block|{
name|QCursor
modifier|*
name|ovr
init|=
name|QApplication
operator|::
name|overrideCursor
argument_list|()
decl_stmt|;
if|if
condition|(
name|ovr
condition|)
block|{
name|SetCursor
argument_list|(
name|ovr
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|RETURN
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
default|default:
name|result
operator|=
literal|false
expr_stmt|;
comment|// event was not processed
break|break;
block|}
block|}
if|if
condition|(
name|evt_type
operator|!=
name|QEvent
operator|::
name|None
condition|)
block|{
comment|// simple event
name|QEvent
name|e
parameter_list|(
name|evt_type
parameter_list|)
function_decl|;
name|result
operator|=
name|qt_sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
condition|)
name|RETURN
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|do_default
label|:
name|RETURN
argument_list|(
argument|QWinInputContext::DefWindowProc(hwnd,message,wParam,lParam)
argument_list|)
block|}
comment|/*****************************************************************************   Modal widgets; We have implemented our own modal widget mechanism   to get total control.   A modal widget without a parent becomes application-modal.   A modal widget with a parent becomes modal to its parent and grandparents..    QApplicationPrivate::enterModal()         Enters modal state         Arguments:             QWidget *widget        A modal widget    QApplicationPrivate::leaveModal()         Leaves modal state for a widget         Arguments:             QWidget *widget        A modal widget  *****************************************************************************/
DECL|function|modalState
name|bool
name|QApplicationPrivate
operator|::
name|modalState
parameter_list|()
block|{
return|return
name|app_do_modal
return|;
block|}
DECL|function|enterModal_sys
name|void
name|QApplicationPrivate
operator|::
name|enterModal_sys
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
operator|!
name|qt_modal_stack
condition|)
name|qt_modal_stack
operator|=
operator|new
name|QWidgetList
expr_stmt|;
name|releaseAutoCapture
argument_list|()
expr_stmt|;
name|ClipCursor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|leave
init|=
name|qt_last_mouse_receiver
decl_stmt|;
if|if
condition|(
operator|!
name|leave
condition|)
name|leave
operator|=
name|QWidget
operator|::
name|find
argument_list|(
operator|(
name|WId
operator|)
name|curWin
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
literal|0
argument_list|,
name|leave
argument_list|)
expr_stmt|;
name|qt_modal_stack
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|app_do_modal
operator|=
literal|true
expr_stmt|;
name|curWin
operator|=
literal|0
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
literal|0
expr_stmt|;
name|qt_win_ignoreNextMouseReleaseEvent
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|leaveModal_sys
name|void
name|QApplicationPrivate
operator|::
name|leaveModal_sys
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|qt_modal_stack
operator|&&
name|qt_modal_stack
operator|->
name|removeAll
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|qt_modal_stack
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
operator|delete
name|qt_modal_stack
expr_stmt|;
name|qt_modal_stack
operator|=
literal|0
expr_stmt|;
name|QPoint
name|p
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
decl_stmt|;
name|app_do_modal
operator|=
literal|false
expr_stmt|;
comment|// necessary, we may get recursively into qt_try_modal below
name|QWidget
modifier|*
name|w
init|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|leave
init|=
name|qt_last_mouse_receiver
decl_stmt|;
if|if
condition|(
operator|!
name|leave
condition|)
name|leave
operator|=
name|QWidget
operator|::
name|find
argument_list|(
operator|(
name|WId
operator|)
name|curWin
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|grabber
init|=
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
condition|)
block|{
name|w
operator|=
name|grabber
expr_stmt|;
if|if
condition|(
name|leave
operator|==
name|w
condition|)
name|leave
operator|=
literal|0
expr_stmt|;
block|}
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
name|w
argument_list|,
name|leave
argument_list|)
expr_stmt|;
comment|// send synthetic enter event
name|curWin
operator|=
name|w
condition|?
name|w
operator|->
name|effectiveWinId
argument_list|()
else|:
literal|0
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
name|w
expr_stmt|;
block|}
name|qt_win_ignoreNextMouseReleaseEvent
operator|=
literal|true
expr_stmt|;
block|}
name|app_do_modal
operator|=
name|qt_modal_stack
operator|!=
literal|0
expr_stmt|;
block|}
DECL|function|qt_try_modal
name|bool
name|qt_try_modal
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|MSG
modifier|*
name|msg
parameter_list|,
name|int
modifier|&
name|ret
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|Q_UNUSED
argument_list|(
name|ret
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QWidget
modifier|*
name|top
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|tryModalHelper
argument_list|(
name|widget
argument_list|,
operator|&
name|top
argument_list|)
condition|)
return|return
literal|true
return|;
name|int
name|type
init|=
name|msg
operator|->
name|message
decl_stmt|;
name|bool
name|block_event
init|=
literal|false
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_WINCE
if|if
condition|(
name|type
operator|!=
name|WM_NCHITTEST
condition|)
block|{
endif|#
directive|endif
if|if
condition|(
operator|(
name|type
operator|>=
name|WM_MOUSEFIRST
operator|&&
name|type
operator|<=
name|WM_MOUSELAST
operator|)
operator|||
name|type
operator|==
name|WM_MOUSEWHEEL
operator|||
name|type
operator|==
name|WM_MOUSEHWHEEL
operator|||
name|type
operator|==
name|WM_MOUSELEAVE
operator|||
operator|(
name|type
operator|>=
name|WM_KEYFIRST
operator|&&
name|type
operator|<=
name|WM_KEYLAST
operator|)
ifndef|#
directive|ifndef
name|Q_WS_WINCE
operator|||
name|type
operator|==
name|WM_NCMOUSEMOVE
endif|#
directive|endif
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|WM_MOUSEMOVE
ifndef|#
directive|ifndef
name|Q_WS_WINCE
operator|||
name|type
operator|==
name|WM_NCMOUSEMOVE
endif|#
directive|endif
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursor
modifier|*
name|c
init|=
name|qt_grab_cursor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|c
condition|)
name|c
operator|=
name|QApplication
operator|::
name|overrideCursor
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
condition|)
comment|// application cursor defined
name|SetCursor
argument_list|(
name|c
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|SetCursor
argument_list|(
name|QCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_CURSOR
block|}
name|block_event
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|WM_CLOSE
condition|)
block|{
name|block_event
operator|=
literal|true
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_WS_WINCE
elseif|else
if|if
condition|(
name|type
operator|==
name|WM_MOUSEACTIVATE
operator|||
name|type
operator|==
name|WM_NCLBUTTONDOWN
condition|)
block|{
if|if
condition|(
operator|!
name|top
operator|->
name|isActiveWindow
argument_list|()
condition|)
block|{
name|top
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QApplication
operator|::
name|beep
argument_list|()
expr_stmt|;
block|}
name|block_event
operator|=
literal|true
expr_stmt|;
name|ret
operator|=
name|MA_NOACTIVATEANDEAT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|WM_SYSCOMMAND
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|msg
operator|->
name|wParam
operator|==
name|SC_RESTORE
operator|&&
name|widget
operator|->
name|isMinimized
argument_list|()
operator|)
condition|)
name|block_event
operator|=
literal|true
expr_stmt|;
block|}
block|}
endif|#
directive|endif
return|return
operator|!
name|block_event
return|;
block|}
comment|/*****************************************************************************   Popup widget mechanism    openPopup()         Adds a widget to the list of popup widgets         Arguments:             QWidget *widget        The popup widget to be added    closePopup()         Removes a widget from the list of popup widgets         Arguments:             QWidget *widget        The popup widget to be removed  *****************************************************************************/
DECL|function|openPopup
name|void
name|QApplicationPrivate
operator|::
name|openPopup
parameter_list|(
name|QWidget
modifier|*
name|popup
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|popupWidgets
condition|)
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|=
operator|new
name|QWidgetList
expr_stmt|;
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|append
argument_list|(
name|popup
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|popup
operator|->
name|isEnabled
argument_list|()
condition|)
return|return;
comment|// close any opened 'ime candidate window'
if|if
condition|(
name|imeParentWnd
condition|)
operator|::
name|SendMessage
argument_list|(
name|imeParentWnd
argument_list|,
name|WM_IME_ENDCOMPOSITION
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|count
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|qt_nograb
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|popup
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|setAutoCapture
argument_list|(
name|popup
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
comment|// grab mouse/keyboard
block|}
comment|// Popups are not focus-handled by the window system (the first
comment|// popup grabbed the keyboard), so we have to do that manually: A
comment|// new popup gets the focus
if|if
condition|(
name|popup
operator|->
name|focusWidget
argument_list|()
condition|)
block|{
name|popup
operator|->
name|focusWidget
argument_list|()
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// this was the first popup
if|if
condition|(
name|QWidget
modifier|*
name|fw
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
block|{
name|QFocusEvent
name|e
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|,
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|fw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|closePopup
name|void
name|QApplicationPrivate
operator|::
name|closePopup
parameter_list|(
name|QWidget
modifier|*
name|popup
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|popupWidgets
condition|)
return|return;
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|removeAll
argument_list|(
name|popup
argument_list|)
expr_stmt|;
name|POINT
name|curPos
decl_stmt|;
name|GetCursorPos
argument_list|(
operator|&
name|curPos
argument_list|)
expr_stmt|;
comment|// close any opened 'ime candidate window'
if|if
condition|(
name|imeParentWnd
condition|)
operator|::
name|SendMessage
argument_list|(
name|imeParentWnd
argument_list|,
name|WM_IME_ENDCOMPOSITION
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
comment|// this was the last popup
operator|delete
name|QApplicationPrivate
operator|::
name|popupWidgets
expr_stmt|;
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|=
literal|0
expr_stmt|;
name|replayPopupMouseEvent
operator|=
operator|(
operator|!
name|popup
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|QPoint
argument_list|(
name|curPos
operator|.
name|x
argument_list|,
name|curPos
operator|.
name|y
argument_list|)
argument_list|)
operator|&&
operator|!
name|popup
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoMouseReplay
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|popup
operator|->
name|isEnabled
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|qt_nograb
argument_list|()
condition|)
comment|// grabbing not disabled
name|releaseAutoCapture
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|fw
init|=
name|QApplicationPrivate
operator|::
name|active_window
condition|?
name|QApplicationPrivate
operator|::
name|active_window
operator|->
name|focusWidget
argument_list|()
else|:
name|QApplication
operator|::
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|fw
condition|)
block|{
if|if
condition|(
name|fw
operator|!=
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
block|{
name|fw
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFocusEvent
name|e
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|,
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|fw
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Popups are not focus-handled by the window system (the
comment|// first popup grabbed the keyboard), so we have to do that
comment|// manually: A popup was closed, so the previous popup gets
comment|// the focus.
name|QWidget
modifier|*
name|aw
init|=
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|popupWidgets
operator|->
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|aw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|setAutoCapture
argument_list|(
name|aw
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QWidget
modifier|*
name|fw
init|=
name|aw
operator|->
name|focusWidget
argument_list|()
condition|)
name|fw
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*****************************************************************************   Event translation; translates Windows events to Qt events  *****************************************************************************/
comment|//
comment|// Auto-capturing for mouse press and mouse release
comment|//
DECL|function|setAutoCapture
specifier|static
name|void
name|setAutoCapture
parameter_list|(
name|HWND
name|h
parameter_list|)
block|{
if|if
condition|(
name|autoCaptureWnd
condition|)
name|releaseAutoCapture
argument_list|()
expr_stmt|;
name|autoCaptureWnd
operator|=
name|h
expr_stmt|;
name|SetCapture
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
DECL|function|releaseAutoCapture
specifier|static
name|void
name|releaseAutoCapture
parameter_list|()
block|{
if|if
condition|(
name|autoCaptureWnd
condition|)
block|{
name|ReleaseCapture
argument_list|()
expr_stmt|;
name|autoCaptureWnd
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|//
comment|// Mouse event translation
comment|//
comment|// Non-client mouse messages are not translated
comment|//
DECL|variable|mouseTbl
specifier|static
specifier|const
name|ushort
name|mouseTbl
index|[]
init|=
block|{
name|WM_MOUSEMOVE
block|,
name|QEvent
operator|::
name|MouseMove
block|,
literal|0
block|,
name|WM_LBUTTONDOWN
block|,
name|QEvent
operator|::
name|MouseButtonPress
block|,
name|Qt
operator|::
name|LeftButton
block|,
name|WM_LBUTTONUP
block|,
name|QEvent
operator|::
name|MouseButtonRelease
block|,
name|Qt
operator|::
name|LeftButton
block|,
name|WM_LBUTTONDBLCLK
block|,
name|QEvent
operator|::
name|MouseButtonDblClick
block|,
name|Qt
operator|::
name|LeftButton
block|,
name|WM_RBUTTONDOWN
block|,
name|QEvent
operator|::
name|MouseButtonPress
block|,
name|Qt
operator|::
name|RightButton
block|,
name|WM_RBUTTONUP
block|,
name|QEvent
operator|::
name|MouseButtonRelease
block|,
name|Qt
operator|::
name|RightButton
block|,
name|WM_RBUTTONDBLCLK
block|,
name|QEvent
operator|::
name|MouseButtonDblClick
block|,
name|Qt
operator|::
name|RightButton
block|,
name|WM_MBUTTONDOWN
block|,
name|QEvent
operator|::
name|MouseButtonPress
block|,
name|Qt
operator|::
name|MidButton
block|,
name|WM_MBUTTONUP
block|,
name|QEvent
operator|::
name|MouseButtonRelease
block|,
name|Qt
operator|::
name|MidButton
block|,
name|WM_MBUTTONDBLCLK
block|,
name|QEvent
operator|::
name|MouseButtonDblClick
block|,
name|Qt
operator|::
name|MidButton
block|,
comment|// use XButton1 for now, the real X button is decided later
name|WM_XBUTTONDOWN
block|,
name|QEvent
operator|::
name|MouseButtonPress
block|,
name|Qt
operator|::
name|XButton1
block|,
name|WM_XBUTTONUP
block|,
name|QEvent
operator|::
name|MouseButtonRelease
block|,
name|Qt
operator|::
name|XButton1
block|,
name|WM_XBUTTONDBLCLK
block|,
name|QEvent
operator|::
name|MouseButtonDblClick
block|,
name|Qt
operator|::
name|XButton1
block|,
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|WM_NCMOUSEMOVE
block|,
name|QEvent
operator|::
name|NonClientAreaMouseMove
block|,
literal|0
block|,
name|WM_NCLBUTTONDOWN
block|,
name|QEvent
operator|::
name|NonClientAreaMouseButtonPress
block|,
name|Qt
operator|::
name|LeftButton
block|,
name|WM_NCLBUTTONUP
block|,
name|QEvent
operator|::
name|NonClientAreaMouseButtonRelease
block|,
name|Qt
operator|::
name|LeftButton
block|,
name|WM_NCLBUTTONDBLCLK
block|,
name|QEvent
operator|::
name|NonClientAreaMouseButtonDblClick
block|,
name|Qt
operator|::
name|LeftButton
block|,
name|WM_NCRBUTTONDOWN
block|,
name|QEvent
operator|::
name|NonClientAreaMouseButtonPress
block|,
name|Qt
operator|::
name|RightButton
block|,
name|WM_NCRBUTTONUP
block|,
name|QEvent
operator|::
name|NonClientAreaMouseButtonRelease
block|,
name|Qt
operator|::
name|RightButton
block|,
name|WM_NCRBUTTONDBLCLK
block|,
name|QEvent
operator|::
name|NonClientAreaMouseButtonDblClick
block|,
name|Qt
operator|::
name|RightButton
block|,
name|WM_NCMBUTTONDOWN
block|,
name|QEvent
operator|::
name|NonClientAreaMouseButtonPress
block|,
name|Qt
operator|::
name|MidButton
block|,
name|WM_NCMBUTTONUP
block|,
name|QEvent
operator|::
name|NonClientAreaMouseButtonRelease
block|,
name|Qt
operator|::
name|MidButton
block|,
name|WM_NCMBUTTONDBLCLK
block|,
name|QEvent
operator|::
name|NonClientAreaMouseButtonDblClick
block|,
name|Qt
operator|::
name|MidButton
block|,
endif|#
directive|endif
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
DECL|function|translateButtonState
specifier|static
name|int
name|translateButtonState
parameter_list|(
name|int
name|s
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|button
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|int
name|bst
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|s
operator|&
name|MK_LBUTTON
condition|)
name|bst
operator||=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|MK_MBUTTON
condition|)
name|bst
operator||=
name|Qt
operator|::
name|MidButton
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|MK_RBUTTON
condition|)
name|bst
operator||=
name|Qt
operator|::
name|RightButton
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|MK_SHIFT
condition|)
name|bst
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|MK_CONTROL
condition|)
name|bst
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|MK_XBUTTON1
condition|)
name|bst
operator||=
name|Qt
operator|::
name|XButton1
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|MK_XBUTTON2
condition|)
name|bst
operator||=
name|Qt
operator|::
name|XButton2
expr_stmt|;
if|if
condition|(
name|GetKeyState
argument_list|(
name|VK_MENU
argument_list|)
operator|<
literal|0
condition|)
name|bst
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
if|if
condition|(
operator|(
name|GetKeyState
argument_list|(
name|VK_LWIN
argument_list|)
operator|<
literal|0
operator|)
operator|||
operator|(
name|GetKeyState
argument_list|(
name|VK_RWIN
argument_list|)
operator|<
literal|0
operator|)
condition|)
name|bst
operator||=
name|Qt
operator|::
name|MetaModifier
expr_stmt|;
return|return
name|bst
return|;
block|}
DECL|function|qt_win_eatMouseMove
name|void
name|qt_win_eatMouseMove
parameter_list|()
block|{
comment|// after closing a windows dialog with a double click (i.e. open a file)
comment|// the message queue still contains a dubious WM_MOUSEMOVE message where
comment|// the left button is reported to be down (wParam != 0).
comment|// remove all those messages (usually 1) and post the last one with a
comment|// reset button state
name|MSG
name|msg
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
while|while
condition|(
name|PeekMessage
argument_list|(
operator|&
name|msg
argument_list|,
literal|0
argument_list|,
name|WM_MOUSEMOVE
argument_list|,
name|WM_MOUSEMOVE
argument_list|,
name|PM_REMOVE
argument_list|)
condition|)
empty_stmt|;
if|if
condition|(
name|msg
operator|.
name|message
operator|==
name|WM_MOUSEMOVE
condition|)
name|PostMessage
argument_list|(
name|msg
operator|.
name|hwnd
argument_list|,
name|msg
operator|.
name|message
argument_list|,
literal|0
argument_list|,
name|msg
operator|.
name|lParam
argument_list|)
expr_stmt|;
block|}
comment|// In DnD, the mouse release event never appears, so the
comment|// mouse button state machine must be manually reset
DECL|function|winMouseButtonUp
name|void
name|QApplication
operator|::
name|winMouseButtonUp
parameter_list|()
block|{
name|qt_button_down
operator|=
literal|0
expr_stmt|;
name|releaseAutoCapture
argument_list|()
expr_stmt|;
block|}
DECL|function|repolishStyle
name|void
name|QETWidget
operator|::
name|repolishStyle
parameter_list|(
name|QStyle
modifier|&
parameter_list|)
block|{
name|QEvent
name|e
argument_list|(
name|QEvent
operator|::
name|StyleChange
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
DECL|function|translateMouseEvent
name|bool
name|QETWidget
operator|::
name|translateMouseEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isWindow
argument_list|()
operator|&&
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
condition|)
name|Q_ASSERT
argument_list|(
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
specifier|static
name|QPoint
name|pos
decl_stmt|;
specifier|static
name|POINT
name|gpos
init|=
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|}
decl_stmt|;
name|QEvent
operator|::
name|Type
name|type
decl_stmt|;
comment|// event parameters
name|int
name|button
decl_stmt|;
name|int
name|state
decl_stmt|;
name|int
name|i
decl_stmt|;
if|if
condition|(
name|sm_blockUserInput
condition|)
comment|//block user interaction during session management
return|return
literal|true
return|;
comment|// Compress mouse move events
if|if
condition|(
name|msg
operator|.
name|message
operator|==
name|WM_MOUSEMOVE
condition|)
block|{
name|MSG
name|mouseMsg
decl_stmt|;
while|while
condition|(
name|PeekMessage
argument_list|(
operator|&
name|mouseMsg
argument_list|,
name|msg
operator|.
name|hwnd
argument_list|,
name|WM_MOUSEFIRST
argument_list|,
name|WM_MOUSELAST
argument_list|,
name|PM_NOREMOVE
argument_list|)
condition|)
block|{
if|if
condition|(
name|mouseMsg
operator|.
name|message
operator|==
name|WM_MOUSEMOVE
condition|)
block|{
DECL|macro|PEEKMESSAGE_IS_BROKEN
define|#
directive|define
name|PEEKMESSAGE_IS_BROKEN
value|1
ifdef|#
directive|ifdef
name|PEEKMESSAGE_IS_BROKEN
comment|// Since the Windows PeekMessage() function doesn't
comment|// correctly return the wParam for WM_MOUSEMOVE events
comment|// if there is a key release event in the queue
comment|// _before_ the mouse event, we have to also consider
comment|// key release events (kls 2003-05-13):
name|MSG
name|keyMsg
decl_stmt|;
name|bool
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|PeekMessage
argument_list|(
operator|&
name|keyMsg
argument_list|,
literal|0
argument_list|,
name|WM_KEYFIRST
argument_list|,
name|WM_KEYLAST
argument_list|,
name|PM_NOREMOVE
argument_list|)
condition|)
block|{
if|if
condition|(
name|keyMsg
operator|.
name|time
operator|<
name|mouseMsg
operator|.
name|time
condition|)
block|{
if|if
condition|(
operator|(
name|keyMsg
operator|.
name|lParam
operator|&
literal|0xC0000000
operator|)
operator|==
literal|0x40000000
condition|)
block|{
name|PeekMessage
argument_list|(
operator|&
name|keyMsg
argument_list|,
literal|0
argument_list|,
name|keyMsg
operator|.
name|message
argument_list|,
name|keyMsg
operator|.
name|message
argument_list|,
name|PM_REMOVE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
break|break;
comment|// no key event before the WM_MOUSEMOVE event
block|}
block|}
if|if
condition|(
name|done
condition|)
break|break;
else|#
directive|else
comment|// Actually the following 'if' should work instead of
comment|// the above key event checking, but apparently
comment|// PeekMessage() is broken :-(
if|if
condition|(
name|mouseMsg
operator|.
name|wParam
operator|!=
name|msg
operator|.
name|wParam
condition|)
break|break;
comment|// leave the message in the queue because
comment|// the key state has changed
endif|#
directive|endif
name|MSG
modifier|*
name|msgPtr
init|=
operator|(
name|MSG
operator|*
operator|)
operator|(
operator|&
name|msg
operator|)
decl_stmt|;
comment|// Update the passed in MSG structure with the
comment|// most recent one.
name|msgPtr
operator|->
name|lParam
operator|=
name|mouseMsg
operator|.
name|lParam
expr_stmt|;
name|msgPtr
operator|->
name|wParam
operator|=
name|mouseMsg
operator|.
name|wParam
expr_stmt|;
comment|// Extract the x,y coordinates from the lParam as we do in the WndProc
name|msgPtr
operator|->
name|pt
operator|.
name|x
operator|=
name|GET_X_LPARAM
argument_list|(
name|mouseMsg
operator|.
name|lParam
argument_list|)
expr_stmt|;
name|msgPtr
operator|->
name|pt
operator|.
name|y
operator|=
name|GET_Y_LPARAM
argument_list|(
name|mouseMsg
operator|.
name|lParam
argument_list|)
expr_stmt|;
name|ClientToScreen
argument_list|(
name|msg
operator|.
name|hwnd
argument_list|,
operator|&
operator|(
name|msgPtr
operator|->
name|pt
operator|)
argument_list|)
expr_stmt|;
comment|// Remove the mouse move message
name|PeekMessage
argument_list|(
operator|&
name|mouseMsg
argument_list|,
name|msg
operator|.
name|hwnd
argument_list|,
name|WM_MOUSEMOVE
argument_list|,
name|WM_MOUSEMOVE
argument_list|,
name|PM_REMOVE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
comment|// there was no more WM_MOUSEMOVE event
block|}
block|}
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
operator|(
name|UINT
operator|)
name|mouseTbl
index|[
name|i
index|]
operator|!=
name|msg
operator|.
name|message
operator|&&
name|mouseTbl
index|[
name|i
index|]
condition|;
name|i
operator|+=
literal|3
control|)
empty_stmt|;
if|if
condition|(
operator|!
name|mouseTbl
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
name|type
operator|=
operator|(
name|QEvent
operator|::
name|Type
operator|)
name|mouseTbl
index|[
operator|++
name|i
index|]
expr_stmt|;
comment|// event type
name|button
operator|=
name|mouseTbl
index|[
operator|++
name|i
index|]
expr_stmt|;
comment|// which button
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|XButton1
condition|)
block|{
switch|switch
condition|(
name|GET_XBUTTON_WPARAM
argument_list|(
name|msg
operator|.
name|wParam
argument_list|)
condition|)
block|{
case|case
name|XBUTTON1
case|:
name|button
operator|=
name|Qt
operator|::
name|XButton1
expr_stmt|;
break|break;
case|case
name|XBUTTON2
case|:
name|button
operator|=
name|Qt
operator|::
name|XButton2
expr_stmt|;
break|break;
block|}
block|}
ifndef|#
directive|ifndef
name|Q_OS_WINCE
specifier|static
name|bool
name|trackMouseEventLookup
init|=
literal|false
decl_stmt|;
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrTrackMouseEvent
function_decl|)
parameter_list|(
name|LPTRACKMOUSEEVENT
parameter_list|)
function_decl|;
specifier|static
name|PtrTrackMouseEvent
name|ptrTrackMouseEvent
init|=
literal|0
decl_stmt|;
endif|#
directive|endif
name|state
operator|=
name|translateButtonState
argument_list|(
name|msg
operator|.
name|wParam
argument_list|,
name|type
argument_list|,
name|button
argument_list|)
expr_stmt|;
comment|// button state
specifier|const
name|QPoint
name|widgetPos
init|=
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|msg
operator|.
name|pt
operator|.
name|x
argument_list|,
name|msg
operator|.
name|pt
operator|.
name|y
argument_list|)
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|alienWidget
init|=
operator|!
name|internalWinId
argument_list|()
condition|?
name|this
else|:
name|childAt
argument_list|(
name|widgetPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|alienWidget
operator|&&
name|alienWidget
operator|->
name|internalWinId
argument_list|()
condition|)
name|alienWidget
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseMove
operator|||
name|type
operator|==
name|QEvent
operator|::
name|NonClientAreaMouseMove
operator|||
name|type
operator|==
name|QEvent
operator|::
name|TabletMove
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|state
operator|&
name|Qt
operator|::
name|MouseButtonMask
operator|)
condition|)
name|qt_button_down
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursor
modifier|*
name|c
init|=
name|qt_grab_cursor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|c
condition|)
name|c
operator|=
name|QApplication
operator|::
name|overrideCursor
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
condition|)
comment|// application cursor defined
name|SetCursor
argument_list|(
name|c
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|type
operator|!=
name|QEvent
operator|::
name|NonClientAreaMouseMove
operator|&&
operator|!
name|qt_button_down
condition|)
block|{
comment|// use  widget cursor if widget is enabled
name|QWidget
modifier|*
name|w
init|=
name|alienWidget
condition|?
name|alienWidget
else|:
name|this
decl_stmt|;
while|while
condition|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|w
operator|->
name|isEnabled
argument_list|()
condition|)
name|w
operator|=
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
name|SetCursor
argument_list|(
name|w
operator|->
name|cursor
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_CURSOR
name|HWND
name|id
init|=
name|effectiveWinId
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|mouseGrabber
init|=
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|activePopupWidget
init|=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|mouseGrabber
condition|)
block|{
if|if
condition|(
operator|!
name|activePopupWidget
operator|||
operator|(
name|activePopupWidget
operator|==
name|this
operator|&&
operator|!
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|widgetPos
argument_list|)
operator|)
condition|)
name|id
operator|=
name|mouseGrabber
operator|->
name|effectiveWinId
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|NonClientAreaMouseMove
condition|)
block|{
name|id
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|curWin
operator|!=
name|id
condition|)
block|{
comment|// new current window
if|if
condition|(
name|id
operator|==
literal|0
condition|)
block|{
name|QWidget
modifier|*
name|leave
init|=
name|qt_last_mouse_receiver
decl_stmt|;
if|if
condition|(
operator|!
name|leave
condition|)
name|leave
operator|=
name|QWidget
operator|::
name|find
argument_list|(
name|curWin
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
literal|0
argument_list|,
name|leave
argument_list|)
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
literal|0
expr_stmt|;
name|curWin
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|QWidget
modifier|*
name|leave
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|curWin
operator|&&
name|qt_last_mouse_receiver
condition|)
name|leave
operator|=
name|qt_last_mouse_receiver
expr_stmt|;
else|else
name|leave
operator|=
name|QWidget
operator|::
name|find
argument_list|(
name|curWin
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|enter
init|=
name|alienWidget
condition|?
name|alienWidget
else|:
name|this
decl_stmt|;
if|if
condition|(
name|mouseGrabber
operator|&&
name|activePopupWidget
condition|)
block|{
if|if
condition|(
name|leave
operator|!=
name|mouseGrabber
condition|)
name|enter
operator|=
name|mouseGrabber
expr_stmt|;
else|else
name|enter
operator|=
name|activePopupWidget
operator|==
name|this
condition|?
name|this
else|:
name|mouseGrabber
expr_stmt|;
block|}
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
name|enter
argument_list|,
name|leave
argument_list|)
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
name|enter
expr_stmt|;
name|curWin
operator|=
name|enter
condition|?
name|enter
operator|->
name|effectiveWinId
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
name|curWin
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|trackMouseEventLookup
condition|)
block|{
name|trackMouseEventLookup
operator|=
literal|true
expr_stmt|;
name|ptrTrackMouseEvent
operator|=
operator|(
name|PtrTrackMouseEvent
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"comctl32"
argument_list|)
argument_list|,
literal|"_TrackMouseEvent"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ptrTrackMouseEvent
operator|&&
operator|!
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|inPopupMode
argument_list|()
condition|)
block|{
comment|// We always have to set the tracking, since
comment|// Windows detects more leaves than we do..
name|TRACKMOUSEEVENT
name|tme
decl_stmt|;
name|tme
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|TRACKMOUSEEVENT
argument_list|)
expr_stmt|;
name|tme
operator|.
name|dwFlags
operator|=
literal|0x00000002
expr_stmt|;
comment|// TME_LEAVE
name|tme
operator|.
name|hwndTrack
operator|=
name|curWin
expr_stmt|;
comment|// Track on window receiving msgs
name|tme
operator|.
name|dwHoverTime
operator|=
operator|(
name|DWORD
operator|)
operator|-
literal|1
expr_stmt|;
comment|// HOVER_DEFAULT
name|ptrTrackMouseEvent
argument_list|(
operator|&
name|tme
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// Q_OS_WINCE
block|}
name|POINT
name|curPos
init|=
name|msg
operator|.
name|pt
decl_stmt|;
if|if
condition|(
name|curPos
operator|.
name|x
operator|==
name|gpos
operator|.
name|x
operator|&&
name|curPos
operator|.
name|y
operator|==
name|gpos
operator|.
name|y
condition|)
return|return
literal|true
return|;
comment|// same global position
name|gpos
operator|=
name|curPos
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|ScreenToClient
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|curPos
argument_list|)
expr_stmt|;
name|pos
operator|.
name|rx
argument_list|()
operator|=
name|curPos
operator|.
name|x
expr_stmt|;
name|pos
operator|.
name|ry
argument_list|()
operator|=
name|curPos
operator|.
name|y
expr_stmt|;
name|pos
operator|=
name|d_func
argument_list|()
operator|->
name|mapFromWS
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gpos
operator|=
name|msg
operator|.
name|pt
expr_stmt|;
name|pos
operator|=
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|gpos
operator|.
name|x
argument_list|,
name|gpos
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
comment|// mouse button pressed
if|if
condition|(
operator|!
name|qt_button_down
operator|&&
operator|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|||
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonDblClick
operator|)
condition|)
block|{
name|QWidget
modifier|*
name|tlw
init|=
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|child
init|=
name|tlw
operator|->
name|childAt
argument_list|(
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|pos
argument_list|)
argument_list|)
condition|)
name|qt_button_down
operator|=
name|child
expr_stmt|;
else|else
name|qt_button_down
operator|=
name|this
expr_stmt|;
block|}
block|}
name|bool
name|res
init|=
literal|false
decl_stmt|;
name|bool
name|nonClientAreaEvent
init|=
name|type
operator|>=
name|QEvent
operator|::
name|NonClientAreaMouseMove
operator|&&
name|type
operator|<=
name|QEvent
operator|::
name|NonClientAreaMouseButtonDblClick
decl_stmt|;
if|if
condition|(
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|inPopupMode
argument_list|()
condition|)
block|{
comment|// in popup mode
if|if
condition|(
name|nonClientAreaEvent
condition|)
return|return
literal|false
return|;
name|replayPopupMouseEvent
operator|=
literal|false
expr_stmt|;
name|QWidget
modifier|*
name|activePopupWidget
init|=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|target
init|=
name|activePopupWidget
decl_stmt|;
specifier|const
name|QPoint
name|globalPos
argument_list|(
name|gpos
operator|.
name|x
argument_list|,
name|gpos
operator|.
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|!=
name|this
condition|)
block|{
if|if
condition|(
operator|(
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
operator|&&
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
operator|&&
literal|0
condition|)
name|target
operator|=
name|this
expr_stmt|;
else|else
comment|// send to last popup
name|pos
operator|=
name|target
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
block|}
name|QWidget
modifier|*
name|popupChild
init|=
name|target
operator|->
name|childAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|bool
name|releaseAfter
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
name|popupButtonFocus
operator|=
name|popupChild
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
case|case
name|QEvent
operator|::
name|TabletRelease
case|:
name|releaseAfter
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
comment|// nothing for mouse move
block|}
if|if
condition|(
name|target
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|popupButtonFocus
condition|)
block|{
name|target
operator|=
name|popupButtonFocus
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|popupChild
condition|)
block|{
name|target
operator|=
name|popupChild
expr_stmt|;
block|}
name|pos
operator|=
name|target
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
name|QMouseEvent
name|e
argument_list|(
name|type
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|,
name|Qt
operator|::
name|MouseButton
argument_list|(
name|button
argument_list|)
argument_list|,
name|Qt
operator|::
name|MouseButtons
argument_list|(
name|state
operator|&
name|Qt
operator|::
name|MouseButtonMask
argument_list|)
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|state
operator|&
name|Qt
operator|::
name|KeyboardModifierMask
argument_list|)
argument_list|)
decl_stmt|;
name|res
operator|=
name|QApplicationPrivate
operator|::
name|sendMouseEvent
argument_list|(
name|target
argument_list|,
operator|&
name|e
argument_list|,
name|alienWidget
argument_list|,
name|this
argument_list|,
operator|&
name|qt_button_down
argument_list|,
name|qt_last_mouse_receiver
argument_list|)
expr_stmt|;
name|res
operator|=
name|res
operator|&&
name|e
operator|.
name|isAccepted
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// close disabled popups when a mouse button is pressed or released
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|target
operator|->
name|close
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|releaseAfter
condition|)
block|{
name|popupButtonFocus
operator|=
literal|0
expr_stmt|;
name|qt_button_down
operator|=
literal|0
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|&&
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|!=
name|activePopupWidget
operator|&&
name|ptrTrackMouseEvent
operator|&&
name|curWin
condition|)
block|{
comment|// Since curWin is already the window we clicked on,
comment|// we have to setup the mouse tracking here.
name|TRACKMOUSEEVENT
name|tme
decl_stmt|;
name|tme
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|TRACKMOUSEEVENT
argument_list|)
expr_stmt|;
name|tme
operator|.
name|dwFlags
operator|=
literal|0x00000002
expr_stmt|;
comment|// TME_LEAVE
name|tme
operator|.
name|hwndTrack
operator|=
name|curWin
expr_stmt|;
comment|// Track on window receiving msgs
name|tme
operator|.
name|dwHoverTime
operator|=
operator|(
name|DWORD
operator|)
operator|-
literal|1
expr_stmt|;
comment|// HOVER_DEFAULT
name|ptrTrackMouseEvent
argument_list|(
operator|&
name|tme
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|&&
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|!=
name|activePopupWidget
operator|&&
name|replayPopupMouseEvent
condition|)
block|{
comment|// the popup disappeared. Replay the event
name|QWidget
modifier|*
name|w
init|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|gpos
operator|.
name|x
argument_list|,
name|gpos
operator|.
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|&&
operator|!
name|QApplicationPrivate
operator|::
name|isBlockedByModal
argument_list|(
name|w
argument_list|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|HWND
name|hwndTarget
init|=
name|w
operator|->
name|effectiveWinId
argument_list|()
decl_stmt|;
if|if
condition|(
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
operator|==
literal|0
condition|)
name|setAutoCapture
argument_list|(
name|hwndTarget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isActiveWindow
argument_list|()
condition|)
name|w
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
name|POINT
name|widgetpt
init|=
name|gpos
decl_stmt|;
name|ScreenToClient
argument_list|(
name|hwndTarget
argument_list|,
operator|&
name|widgetpt
argument_list|)
expr_stmt|;
name|LPARAM
name|lParam
init|=
name|MAKELPARAM
argument_list|(
name|widgetpt
operator|.
name|x
argument_list|,
name|widgetpt
operator|.
name|y
argument_list|)
decl_stmt|;
name|PostMessage
argument_list|(
name|hwndTarget
argument_list|,
name|msg
operator|.
name|message
argument_list|,
name|msg
operator|.
name|wParam
argument_list|,
name|lParam
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
operator|&&
name|button
operator|==
name|Qt
operator|::
name|RightButton
operator|&&
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|==
name|activePopupWidget
condition|)
block|{
comment|// popup still alive and received right-button-release
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CONTEXTMENU
argument_list|)
name|QContextMenuEvent
name|e2
argument_list|(
name|QContextMenuEvent
operator|::
name|Mouse
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|,
name|qt_win_getKeyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|res2
init|=
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|target
argument_list|,
operator|&
name|e2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
comment|// RMB not accepted
name|res
operator|=
name|res2
operator|&&
name|e2
operator|.
name|isAccepted
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
block|}
else|else
block|{
comment|// not popup mode
name|int
name|bs
init|=
name|state
operator|&
name|Qt
operator|::
name|MouseButtonMask
decl_stmt|;
if|if
condition|(
operator|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|||
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonDblClick
operator|)
operator|&&
name|bs
operator|==
name|button
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
operator|==
literal|0
condition|)
name|setAutoCapture
argument_list|(
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
operator|&&
name|bs
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
operator|==
literal|0
condition|)
name|releaseAutoCapture
argument_list|()
expr_stmt|;
block|}
specifier|const
name|QPoint
name|globalPos
argument_list|(
name|gpos
operator|.
name|x
argument_list|,
name|gpos
operator|.
name|y
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
name|QApplicationPrivate
operator|::
name|pickMouseReceiver
argument_list|(
name|this
argument_list|,
name|globalPos
argument_list|,
name|pos
argument_list|,
name|type
argument_list|,
name|Qt
operator|::
name|MouseButtons
argument_list|(
name|bs
argument_list|)
argument_list|,
name|qt_button_down
argument_list|,
name|alienWidget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
return|return
literal|false
return|;
comment|// don't send event
name|QMouseEvent
name|e
argument_list|(
name|type
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|,
name|Qt
operator|::
name|MouseButton
argument_list|(
name|button
argument_list|)
argument_list|,
name|Qt
operator|::
name|MouseButtons
argument_list|(
name|state
operator|&
name|Qt
operator|::
name|MouseButtonMask
argument_list|)
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|state
operator|&
name|Qt
operator|::
name|KeyboardModifierMask
argument_list|)
argument_list|)
decl_stmt|;
name|res
operator|=
name|QApplicationPrivate
operator|::
name|sendMouseEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|,
name|alienWidget
argument_list|,
name|this
argument_list|,
operator|&
name|qt_button_down
argument_list|,
name|qt_last_mouse_receiver
argument_list|)
expr_stmt|;
comment|// non client area events are only informational, you cannot "handle" them
name|res
operator|=
name|res
operator|&&
name|e
operator|.
name|isAccepted
argument_list|()
operator|&&
operator|!
name|nonClientAreaEvent
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CONTEXTMENU
argument_list|)
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
operator|&&
name|button
operator|==
name|Qt
operator|::
name|RightButton
condition|)
block|{
name|QContextMenuEvent
name|e2
argument_list|(
name|QContextMenuEvent
operator|::
name|Mouse
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|,
name|qt_win_getKeyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|res2
init|=
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
name|res
operator|=
name|res2
operator|&&
name|e2
operator|.
name|isAccepted
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|type
operator|!=
name|QEvent
operator|::
name|MouseMove
condition|)
name|pos
operator|.
name|rx
argument_list|()
operator|=
name|pos
operator|.
name|ry
argument_list|()
operator|=
operator|-
literal|9999
expr_stmt|;
comment|// init for move compression
block|}
return|return
name|res
return|;
block|}
DECL|function|translateWheelEvent
name|bool
name|QETWidget
operator|::
name|translateWheelEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
block|{
name|int
name|state
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|sm_blockUserInput
condition|)
comment|// block user interaction during session management
return|return
literal|true
return|;
name|state
operator|=
name|translateButtonState
argument_list|(
name|GET_KEYSTATE_WPARAM
argument_list|(
name|msg
operator|.
name|wParam
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|delta
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|message
operator|==
name|WM_MOUSEWHEEL
operator|||
name|msg
operator|.
name|message
operator|==
name|WM_MOUSEHWHEEL
condition|)
name|delta
operator|=
operator|(
name|short
operator|)
name|HIWORD
argument_list|(
name|msg
operator|.
name|wParam
argument_list|)
expr_stmt|;
else|else
name|delta
operator|=
operator|(
name|int
operator|)
name|msg
operator|.
name|wParam
expr_stmt|;
name|Qt
operator|::
name|Orientation
name|orient
init|=
operator|(
name|msg
operator|.
name|message
operator|==
name|WM_MOUSEHWHEEL
operator|||
name|state
operator|&
name|Qt
operator|::
name|AltModifier
if|#
directive|if
literal|0
comment|// disabled for now - Trenton's one-wheel mouse makes trouble...
comment|// "delta" for usual wheels is +-120. +-240 seems to indicate
comment|// the second wheel see more recent MSDN for WM_MOUSEWHEEL
expr|(
comment|//<- parantheses added to make update happy, remove if the
comment|// #if 0 is removed
expr||| delta == 240 || delta == -240)?Qt::Horizontal:Vertical;     if (delta == 240 || delta == -240)         delta /= 2;
endif|#
directive|endif
operator|)
condition|?
name|Qt
operator|::
name|Horizontal
else|:
name|Qt
operator|::
name|Vertical
decl_stmt|;
comment|// according to the MSDN documentation on WM_MOUSEHWHEEL:
comment|// a positive value indicates that the wheel was rotated to the right;
comment|// a negative value indicates that the wheel was rotated to the left.
comment|// Qt defines this value as the exact opposite, so we have to flip the value!
if|if
condition|(
name|msg
operator|.
name|message
operator|==
name|WM_MOUSEHWHEEL
condition|)
name|delta
operator|=
operator|-
name|delta
expr_stmt|;
name|QPoint
name|globalPos
decl_stmt|;
name|globalPos
operator|.
name|rx
argument_list|()
operator|=
operator|(
name|short
operator|)
name|LOWORD
argument_list|(
name|msg
operator|.
name|lParam
argument_list|)
expr_stmt|;
name|globalPos
operator|.
name|ry
argument_list|()
operator|=
operator|(
name|short
operator|)
name|HIWORD
argument_list|(
name|msg
operator|.
name|lParam
argument_list|)
expr_stmt|;
comment|// if there is a widget under the mouse and it is not shadowed
comment|// by modality, we send the event to it first
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|globalPos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|||
operator|!
name|qt_try_modal
argument_list|(
name|w
argument_list|,
operator|(
name|MSG
operator|*
operator|)
operator|&
name|msg
argument_list|,
name|ret
argument_list|)
condition|)
block|{
comment|//synaptics touchpad shows its own widget at this position
comment|//so widgetAt() will fail with that HWND, try child of this widget
name|w
operator|=
name|this
operator|->
name|childAt
argument_list|(
name|this
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
name|w
operator|=
name|this
expr_stmt|;
block|}
comment|// send the event to the widget or its ancestors
block|{
name|QWidget
modifier|*
name|popup
init|=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|popup
operator|&&
name|w
operator|->
name|window
argument_list|()
operator|!=
name|popup
condition|)
name|popup
operator|->
name|close
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
name|QWheelEvent
name|e
argument_list|(
name|w
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
argument_list|,
name|globalPos
argument_list|,
name|delta
argument_list|,
name|Qt
operator|::
name|MouseButtons
argument_list|(
name|state
operator|&
name|Qt
operator|::
name|MouseButtonMask
argument_list|)
argument_list|,
name|Qt
operator|::
name|KeyboardModifier
argument_list|(
name|state
operator|&
name|Qt
operator|::
name|KeyboardModifierMask
argument_list|)
argument_list|,
name|orient
argument_list|)
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|w
argument_list|,
operator|&
name|e
argument_list|)
condition|)
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|orient
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_WHEELEVENT
return|return
literal|true
return|;
block|}
comment|// send the event to the widget that has the focus or its ancestors, if different
if|if
condition|(
name|w
operator|!=
name|QApplication
operator|::
name|focusWidget
argument_list|()
operator|&&
operator|(
name|w
operator|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
operator|)
condition|)
block|{
name|QWidget
modifier|*
name|popup
init|=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|popup
operator|&&
name|w
operator|->
name|window
argument_list|()
operator|!=
name|popup
condition|)
name|popup
operator|->
name|close
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
name|QWheelEvent
name|e
argument_list|(
name|w
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
argument_list|,
name|globalPos
argument_list|,
name|delta
argument_list|,
name|Qt
operator|::
name|MouseButtons
argument_list|(
name|state
operator|&
name|Qt
operator|::
name|MouseButtonMask
argument_list|)
argument_list|,
name|Qt
operator|::
name|KeyboardModifier
argument_list|(
name|state
operator|&
name|Qt
operator|::
name|KeyboardModifierMask
argument_list|)
argument_list|,
name|orient
argument_list|)
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|w
argument_list|,
operator|&
name|e
argument_list|)
condition|)
endif|#
directive|endif
comment|//QT_NO_WHEELEVENT
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|//
comment|// Windows Wintab to QTabletEvent translation
comment|//
comment|// the following is adapted from the wintab syspress example (public domain)
comment|/* -------------------------------------------------------------------------- */
comment|// Initialize the "static" information of a cursor device (pen, airbrush, etc).
comment|// The QTabletDeviceData is initialized with the data that do not change in time
comment|// (number of button, type of device, etc) but do not initialize the variable data
comment|// (e.g.: pen or eraser)
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
DECL|function|tabletInit
specifier|static
name|void
name|tabletInit
parameter_list|(
specifier|const
name|quint64
name|uniqueId
parameter_list|,
specifier|const
name|UINT
name|csr_type
parameter_list|,
name|HCTX
name|hTab
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|ptrWTInfo
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|ptrWTGet
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|tCursorInfo
argument_list|()
operator|->
name|contains
argument_list|(
name|uniqueId
argument_list|)
argument_list|)
expr_stmt|;
comment|/* browse WinTab's many info items to discover pressure handling. */
name|AXIS
name|np
decl_stmt|;
name|LOGCONTEXT
name|lc
decl_stmt|;
comment|/* get the current context for its device variable. */
name|ptrWTGet
argument_list|(
name|hTab
argument_list|,
operator|&
name|lc
argument_list|)
expr_stmt|;
comment|/* get the size of the pressure axis. */
name|QTabletDeviceData
name|tdd
decl_stmt|;
name|tdd
operator|.
name|llId
operator|=
name|uniqueId
expr_stmt|;
name|ptrWTInfo
argument_list|(
name|WTI_DEVICES
operator|+
name|lc
operator|.
name|lcDevice
argument_list|,
name|DVC_NPRESSURE
argument_list|,
operator|&
name|np
argument_list|)
expr_stmt|;
name|tdd
operator|.
name|minPressure
operator|=
name|int
argument_list|(
name|np
operator|.
name|axMin
argument_list|)
expr_stmt|;
name|tdd
operator|.
name|maxPressure
operator|=
name|int
argument_list|(
name|np
operator|.
name|axMax
argument_list|)
expr_stmt|;
name|ptrWTInfo
argument_list|(
name|WTI_DEVICES
operator|+
name|lc
operator|.
name|lcDevice
argument_list|,
name|DVC_TPRESSURE
argument_list|,
operator|&
name|np
argument_list|)
expr_stmt|;
name|tdd
operator|.
name|minTanPressure
operator|=
name|int
argument_list|(
name|np
operator|.
name|axMin
argument_list|)
expr_stmt|;
name|tdd
operator|.
name|maxTanPressure
operator|=
name|int
argument_list|(
name|np
operator|.
name|axMax
argument_list|)
expr_stmt|;
name|LOGCONTEXT
name|lcMine
decl_stmt|;
comment|/* get default region */
name|ptrWTInfo
argument_list|(
name|WTI_DEFCONTEXT
argument_list|,
literal|0
argument_list|,
operator|&
name|lcMine
argument_list|)
expr_stmt|;
name|tdd
operator|.
name|minX
operator|=
literal|0
expr_stmt|;
name|tdd
operator|.
name|maxX
operator|=
name|int
argument_list|(
name|lcMine
operator|.
name|lcInExtX
argument_list|)
operator|-
name|int
argument_list|(
name|lcMine
operator|.
name|lcInOrgX
argument_list|)
expr_stmt|;
name|tdd
operator|.
name|minY
operator|=
literal|0
expr_stmt|;
name|tdd
operator|.
name|maxY
operator|=
name|int
argument_list|(
name|lcMine
operator|.
name|lcInExtY
argument_list|)
operator|-
name|int
argument_list|(
name|lcMine
operator|.
name|lcInOrgY
argument_list|)
expr_stmt|;
name|tdd
operator|.
name|minZ
operator|=
literal|0
expr_stmt|;
name|tdd
operator|.
name|maxZ
operator|=
name|int
argument_list|(
name|lcMine
operator|.
name|lcInExtZ
argument_list|)
operator|-
name|int
argument_list|(
name|lcMine
operator|.
name|lcInOrgZ
argument_list|)
expr_stmt|;
specifier|const
name|uint
name|cursorTypeBitMask
init|=
literal|0x0F06
decl_stmt|;
comment|// bitmask to find the specific cursor type (see Wacom FAQ)
if|if
condition|(
operator|(
operator|(
name|csr_type
operator|&
literal|0x0006
operator|)
operator|==
literal|0x0002
operator|)
operator|&&
operator|(
operator|(
name|csr_type
operator|&
name|cursorTypeBitMask
operator|)
operator|!=
literal|0x0902
operator|)
condition|)
block|{
name|tdd
operator|.
name|currentDevice
operator|=
name|QTabletEvent
operator|::
name|Stylus
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|csr_type
operator|&
name|cursorTypeBitMask
condition|)
block|{
case|case
literal|0x0802
case|:
name|tdd
operator|.
name|currentDevice
operator|=
name|QTabletEvent
operator|::
name|Stylus
expr_stmt|;
break|break;
case|case
literal|0x0902
case|:
name|tdd
operator|.
name|currentDevice
operator|=
name|QTabletEvent
operator|::
name|Airbrush
expr_stmt|;
break|break;
case|case
literal|0x0004
case|:
name|tdd
operator|.
name|currentDevice
operator|=
name|QTabletEvent
operator|::
name|FourDMouse
expr_stmt|;
break|break;
case|case
literal|0x0006
case|:
name|tdd
operator|.
name|currentDevice
operator|=
name|QTabletEvent
operator|::
name|Puck
expr_stmt|;
break|break;
case|case
literal|0x0804
case|:
name|tdd
operator|.
name|currentDevice
operator|=
name|QTabletEvent
operator|::
name|RotationStylus
expr_stmt|;
break|break;
default|default:
name|tdd
operator|.
name|currentDevice
operator|=
name|QTabletEvent
operator|::
name|NoDevice
expr_stmt|;
block|}
block|}
name|tCursorInfo
argument_list|()
operator|->
name|insert
argument_list|(
name|uniqueId
argument_list|,
name|tdd
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_TABLETEVENT
comment|// Update the "dynamic" information of a cursor device (pen, airbrush, etc).
comment|// The dynamic information is the information of QTabletDeviceData that can change
comment|// in time (eraser or pen if a device is turned around).
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
DECL|function|tabletUpdateCursor
specifier|static
name|void
name|tabletUpdateCursor
parameter_list|(
name|QTabletDeviceData
modifier|&
name|tdd
parameter_list|,
specifier|const
name|UINT
name|currentCursor
parameter_list|)
block|{
switch|switch
condition|(
name|currentCursor
operator|%
literal|3
condition|)
block|{
comment|// %3 for dual track
case|case
literal|0
case|:
name|tdd
operator|.
name|currentPointerType
operator|=
name|QTabletEvent
operator|::
name|Cursor
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|tdd
operator|.
name|currentPointerType
operator|=
name|QTabletEvent
operator|::
name|Pen
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|tdd
operator|.
name|currentPointerType
operator|=
name|QTabletEvent
operator|::
name|Eraser
expr_stmt|;
break|break;
default|default:
name|tdd
operator|.
name|currentPointerType
operator|=
name|QTabletEvent
operator|::
name|UnknownPointer
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_TABLETEVENT
DECL|function|translateTabletEvent
name|bool
name|QETWidget
operator|::
name|translateTabletEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|,
name|PACKET
modifier|*
name|localPacketBuf
parameter_list|,
name|int
name|numPackets
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|POINT
name|ptNew
decl_stmt|;
specifier|static
name|DWORD
name|btnNew
decl_stmt|,
name|btnOld
decl_stmt|,
name|btnChange
decl_stmt|;
name|qreal
name|prsNew
decl_stmt|;
name|ORIENTATION
name|ort
decl_stmt|;
specifier|static
name|bool
name|button_pressed
init|=
literal|false
decl_stmt|;
name|int
name|i
decl_stmt|,
name|tiltX
decl_stmt|,
name|tiltY
decl_stmt|;
name|bool
name|sendEvent
init|=
literal|false
decl_stmt|;
name|QEvent
operator|::
name|Type
name|t
decl_stmt|;
name|int
name|z
init|=
literal|0
decl_stmt|;
name|qreal
name|rotation
init|=
literal|0.0
decl_stmt|;
name|qreal
name|tangentialPressure
decl_stmt|;
comment|// the most common event that we get...
name|t
operator|=
name|QEvent
operator|::
name|TabletMove
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|numPackets
condition|;
name|i
operator|++
control|)
block|{
comment|// get the unique ID of the device...
name|btnOld
operator|=
name|btnNew
expr_stmt|;
name|btnNew
operator|=
name|localPacketBuf
index|[
name|i
index|]
operator|.
name|pkButtons
expr_stmt|;
name|btnChange
operator|=
name|btnOld
operator|^
name|btnNew
expr_stmt|;
if|if
condition|(
name|btnNew
operator|&
name|btnChange
condition|)
block|{
name|button_pressed
operator|=
literal|true
expr_stmt|;
name|t
operator|=
name|QEvent
operator|::
name|TabletPress
expr_stmt|;
block|}
name|ptNew
operator|.
name|x
operator|=
name|UINT
argument_list|(
name|localPacketBuf
index|[
name|i
index|]
operator|.
name|pkX
argument_list|)
expr_stmt|;
name|ptNew
operator|.
name|y
operator|=
name|UINT
argument_list|(
name|localPacketBuf
index|[
name|i
index|]
operator|.
name|pkY
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
name|z
operator|=
operator|(
name|currentTabletPointer
operator|.
name|currentDevice
operator|==
name|QTabletEvent
operator|::
name|FourDMouse
operator|)
condition|?
name|UINT
argument_list|(
name|localPacketBuf
index|[
name|i
index|]
operator|.
name|pkZ
argument_list|)
else|:
literal|0
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|z
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TABLETEVENT
name|prsNew
operator|=
literal|0.0
expr_stmt|;
name|QRect
name|desktopArea
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QPointF
name|hiResGlobal
init|=
name|currentTabletPointer
operator|.
name|scaleCoord
argument_list|(
name|ptNew
operator|.
name|x
argument_list|,
name|ptNew
operator|.
name|y
argument_list|,
name|desktopArea
operator|.
name|left
argument_list|()
argument_list|,
name|desktopArea
operator|.
name|width
argument_list|()
argument_list|,
name|desktopArea
operator|.
name|top
argument_list|()
argument_list|,
name|desktopArea
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|btnNew
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
if|if
condition|(
name|currentTabletPointer
operator|.
name|currentPointerType
operator|==
name|QTabletEvent
operator|::
name|Pen
operator|||
name|currentTabletPointer
operator|.
name|currentPointerType
operator|==
name|QTabletEvent
operator|::
name|Eraser
condition|)
name|prsNew
operator|=
name|localPacketBuf
index|[
name|i
index|]
operator|.
name|pkNormalPressure
operator|/
name|qreal
argument_list|(
name|currentTabletPointer
operator|.
name|maxPressure
operator|-
name|currentTabletPointer
operator|.
name|minPressure
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
comment|// QT_NO_TABLETEVENT
name|prsNew
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|button_pressed
condition|)
block|{
comment|// One button press, should only give one button release
name|t
operator|=
name|QEvent
operator|::
name|TabletRelease
expr_stmt|;
name|button_pressed
operator|=
literal|false
expr_stmt|;
block|}
name|QPoint
name|globalPos
argument_list|(
name|qRound
argument_list|(
name|hiResGlobal
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|hiResGlobal
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
name|QEvent
operator|::
name|TabletPress
condition|)
block|{
name|qt_button_down
operator|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
block|}
comment|// make sure the tablet event get's sent to the proper widget...
name|QWidget
modifier|*
name|w
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|qt_button_down
condition|)
name|w
operator|=
name|qt_button_down
expr_stmt|;
comment|// Pass it to the thing that's grabbed it.
else|else
name|w
operator|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
name|w
operator|=
name|this
expr_stmt|;
if|if
condition|(
name|t
operator|==
name|QEvent
operator|::
name|TabletRelease
condition|)
block|{
if|if
condition|(
name|qt_win_ignoreNextMouseReleaseEvent
condition|)
block|{
name|qt_win_ignoreNextMouseReleaseEvent
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|qt_button_down
operator|&&
name|qt_button_down
operator|->
name|internalWinId
argument_list|()
operator|==
name|autoCaptureWnd
condition|)
block|{
name|releaseAutoCapture
argument_list|()
expr_stmt|;
name|qt_button_down
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
name|QPoint
name|localPos
init|=
name|w
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
if|if
condition|(
name|currentTabletPointer
operator|.
name|currentDevice
operator|==
name|QTabletEvent
operator|::
name|Airbrush
condition|)
block|{
name|tangentialPressure
operator|=
name|localPacketBuf
index|[
name|i
index|]
operator|.
name|pkTangentPressure
operator|/
name|qreal
argument_list|(
name|currentTabletPointer
operator|.
name|maxTanPressure
operator|-
name|currentTabletPointer
operator|.
name|minTanPressure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tangentialPressure
operator|=
literal|0.0
expr_stmt|;
block|}
else|#
directive|else
name|tangentialPressure
operator|=
literal|0.0
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TABLETEVENT
if|if
condition|(
operator|!
name|qt_tablet_tilt_support
condition|)
block|{
name|tiltX
operator|=
name|tiltY
operator|=
literal|0
expr_stmt|;
name|rotation
operator|=
literal|0.0
expr_stmt|;
block|}
else|else
block|{
name|ort
operator|=
name|localPacketBuf
index|[
name|i
index|]
operator|.
name|pkOrientation
expr_stmt|;
comment|// convert from azimuth and altitude to x tilt and y tilt
comment|// what follows is the optimized version.  Here are the equations
comment|// I used to get to this point (in case things change :)
comment|// X = sin(azimuth) * cos(altitude)
comment|// Y = cos(azimuth) * cos(altitude)
comment|// Z = sin(altitude)
comment|// X Tilt = arctan(X / Z)
comment|// Y Tilt = arctan(Y / Z)
name|double
name|radAzim
init|=
operator|(
name|ort
operator|.
name|orAzimuth
operator|/
literal|10
operator|)
operator|*
operator|(
name|Q_PI
operator|/
literal|180
operator|)
decl_stmt|;
comment|//double radAlt = abs(ort.orAltitude / 10) * (Q_PI / 180);
name|double
name|tanAlt
init|=
name|tan
argument_list|(
operator|(
name|abs
argument_list|(
name|ort
operator|.
name|orAltitude
operator|/
literal|10
argument_list|)
operator|)
operator|*
operator|(
name|Q_PI
operator|/
literal|180
operator|)
argument_list|)
decl_stmt|;
name|double
name|degX
init|=
name|atan
argument_list|(
name|sin
argument_list|(
name|radAzim
argument_list|)
operator|/
name|tanAlt
argument_list|)
decl_stmt|;
name|double
name|degY
init|=
name|atan
argument_list|(
name|cos
argument_list|(
name|radAzim
argument_list|)
operator|/
name|tanAlt
argument_list|)
decl_stmt|;
name|tiltX
operator|=
name|int
argument_list|(
name|degX
operator|*
operator|(
literal|180
operator|/
name|Q_PI
operator|)
argument_list|)
expr_stmt|;
name|tiltY
operator|=
name|int
argument_list|(
operator|-
name|degY
operator|*
operator|(
literal|180
operator|/
name|Q_PI
operator|)
argument_list|)
expr_stmt|;
name|rotation
operator|=
name|ort
operator|.
name|orTwist
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
name|QTabletEvent
name|e
argument_list|(
name|t
argument_list|,
name|localPos
argument_list|,
name|globalPos
argument_list|,
name|hiResGlobal
argument_list|,
name|currentTabletPointer
operator|.
name|currentDevice
argument_list|,
name|currentTabletPointer
operator|.
name|currentPointerType
argument_list|,
name|prsNew
argument_list|,
name|tiltX
argument_list|,
name|tiltY
argument_list|,
name|tangentialPressure
argument_list|,
name|rotation
argument_list|,
name|z
argument_list|,
name|QApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|currentTabletPointer
operator|.
name|llId
argument_list|)
decl_stmt|;
name|sendEvent
operator|=
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|w
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TABLETEVENT
block|}
return|return
name|sendEvent
return|;
block|}
specifier|extern
name|bool
name|qt_is_gui_used
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
DECL|function|initWinTabFunctions
specifier|static
name|void
name|initWinTabFunctions
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
return|return;
else|#
directive|else
if|if
condition|(
operator|!
name|qt_is_gui_used
condition|)
return|return;
name|QSystemLibrary
name|library
argument_list|(
name|QLatin1String
argument_list|(
literal|"wintab32"
argument_list|)
argument_list|)
decl_stmt|;
name|ptrWTInfo
operator|=
operator|(
name|PtrWTInfo
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTInfoW"
argument_list|)
expr_stmt|;
name|ptrWTGet
operator|=
operator|(
name|PtrWTGet
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTGetW"
argument_list|)
expr_stmt|;
name|ptrWTEnable
operator|=
operator|(
name|PtrWTEnable
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTEnable"
argument_list|)
expr_stmt|;
name|ptrWTOverlap
operator|=
operator|(
name|PtrWTEnable
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTOverlap"
argument_list|)
expr_stmt|;
name|ptrWTPacketsGet
operator|=
operator|(
name|PtrWTPacketsGet
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTPacketsGet"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_WINCE
block|}
endif|#
directive|endif
comment|// QT_NO_TABLETEVENT
comment|//
comment|// Paint event translation
comment|//
DECL|function|translatePaintEvent
name|bool
name|QETWidget
operator|::
name|translatePaintEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isWindow
argument_list|()
operator|&&
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
condition|)
name|Q_ASSERT
argument_list|(
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|GetUpdateRect
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
name|FALSE
argument_list|)
condition|)
block|{
comment|// The update bounding rect is invalid
name|d_func
argument_list|()
operator|->
name|hd
operator|=
literal|0
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingUpdate
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|msg
operator|.
name|message
operator|==
name|WM_ERASEBKGND
condition|)
return|return
literal|true
return|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingUpdate
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_func
argument_list|()
operator|->
name|isGLWidget
condition|)
block|{
if|if
condition|(
name|d_func
argument_list|()
operator|->
name|usesDoubleBufferedGLContext
condition|)
name|InvalidateRect
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QRegion
name|dirtyInBackingStore
argument_list|(
name|qt_dirtyRegion
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
comment|// Make sure the invalidated region contains the region we're about to repaint.
comment|// BeginPaint will set the clip to the invalidated region and it is impossible
comment|// to enlarge it afterwards (only shrink it). Using GetDCEx is not suffient
comment|// as it may return an invalid context (especially on Windows Vista).
if|if
condition|(
operator|!
name|dirtyInBackingStore
operator|.
name|isEmpty
argument_list|()
condition|)
name|InvalidateRgn
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
name|dirtyInBackingStore
operator|.
name|handle
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|PAINTSTRUCT
name|ps
decl_stmt|;
name|d_func
argument_list|()
operator|->
name|hd
operator|=
name|BeginPaint
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|ps
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|updateRect
argument_list|(
name|QPoint
argument_list|(
name|ps
operator|.
name|rcPaint
operator|.
name|left
argument_list|,
name|ps
operator|.
name|rcPaint
operator|.
name|top
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|ps
operator|.
name|rcPaint
operator|.
name|right
argument_list|,
name|ps
operator|.
name|rcPaint
operator|.
name|bottom
argument_list|)
argument_list|)
decl_stmt|;
comment|// Mapping region from system to qt (32 bit) coordinate system.
name|d_func
argument_list|()
operator|->
name|syncBackingStore
argument_list|(
name|updateRect
operator|.
name|translated
argument_list|(
name|data
operator|->
name|wrect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|hd
operator|=
literal|0
expr_stmt|;
name|EndPaint
argument_list|(
name|internalWinId
argument_list|()
argument_list|,
operator|&
name|ps
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|//
comment|// Window move and resize (configure) events
comment|//
DECL|function|translateConfigEvent
name|bool
name|QETWidget
operator|::
name|translateConfigEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
comment|// in QWidget::create()
return|return
literal|true
return|;
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ConfigPending
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|isWindow
argument_list|()
condition|)
return|return
literal|true
return|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ConfigPending
argument_list|)
expr_stmt|;
comment|// set config flag
name|QRect
name|cr
init|=
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|message
operator|==
name|WM_SIZE
condition|)
block|{
comment|// resize event
name|WORD
name|a
init|=
name|LOWORD
argument_list|(
name|msg
operator|.
name|lParam
argument_list|)
decl_stmt|;
name|WORD
name|b
init|=
name|HIWORD
argument_list|(
name|msg
operator|.
name|lParam
argument_list|)
decl_stmt|;
name|QSize
name|oldSize
init|=
name|size
argument_list|()
decl_stmt|;
name|QSize
name|newSize
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WINCE_WM
if|if
condition|(
name|isFullScreen
argument_list|()
operator|&&
operator|(
name|oldSize
operator|.
name|width
argument_list|()
operator|==
name|newSize
operator|.
name|height
argument_list|()
operator|)
operator|&&
operator|(
name|oldSize
operator|.
name|height
argument_list|()
operator|==
name|newSize
operator|.
name|width
argument_list|()
operator|)
condition|)
name|qt_wince_hide_taskbar
argument_list|(
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|cr
operator|.
name|setSize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|.
name|wParam
operator|!=
name|SIZE_MINIMIZED
condition|)
name|data
operator|->
name|crect
operator|=
name|cr
expr_stmt|;
if|if
condition|(
name|isWindow
argument_list|()
condition|)
block|{
comment|// update title/icon text
name|d_func
argument_list|()
operator|->
name|createTLExtra
argument_list|()
expr_stmt|;
comment|// Capture SIZE_MINIMIZED without preceding WM_SYSCOMMAND
comment|// (like Windows+M)
if|if
condition|(
name|msg
operator|.
name|wParam
operator|==
name|SIZE_MINIMIZED
operator|&&
operator|!
name|isMinimized
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_WS_WINCE
specifier|const
name|QString
name|title
init|=
name|windowIconText
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
name|d_func
argument_list|()
operator|->
name|setWindowTitle_helper
argument_list|(
name|title
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|data
operator|->
name|window_state
operator||=
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
name|QHideEvent
name|e
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|hideChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|msg
operator|.
name|wParam
operator|!=
name|SIZE_MINIMIZED
condition|)
block|{
name|bool
name|window_state_changed
init|=
literal|false
decl_stmt|;
name|Qt
operator|::
name|WindowStates
name|oldstate
init|=
name|Qt
operator|::
name|WindowStates
argument_list|(
name|dataPtr
argument_list|()
operator|->
name|window_state
argument_list|)
decl_stmt|;
if|if
condition|(
name|isMinimized
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_WS_WINCE
specifier|const
name|QString
name|title
init|=
name|windowTitle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
name|d_func
argument_list|()
operator|->
name|setWindowTitle_helper
argument_list|(
name|title
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|data
operator|->
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
name|showChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QShowEvent
name|e
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
comment|// Capture SIZE_MAXIMIZED and SIZE_RESTORED without preceding WM_SYSCOMMAND
comment|// (Aero Snap on Win7)
block|}
elseif|else
if|if
condition|(
name|msg
operator|.
name|wParam
operator|==
name|SIZE_MAXIMIZED
operator|&&
operator|!
name|isMaximized
argument_list|()
condition|)
block|{
name|data
operator|->
name|window_state
operator||=
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
name|window_state_changed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|msg
operator|.
name|wParam
operator|==
name|SIZE_RESTORED
operator|&&
name|isMaximized
argument_list|()
condition|)
block|{
name|data
operator|->
name|window_state
operator|&=
operator|~
operator|(
name|Qt
operator|::
name|WindowMaximized
operator|)
expr_stmt|;
name|window_state_changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|window_state_changed
condition|)
block|{
name|QWindowStateChangeEvent
name|e
argument_list|(
name|oldstate
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|msg
operator|.
name|wParam
operator|!=
name|SIZE_MINIMIZED
operator|&&
name|oldSize
operator|!=
name|newSize
condition|)
block|{
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
name|QTLWExtra
modifier|*
name|tlwExtra
init|=
name|maybeTopData
argument_list|()
decl_stmt|;
specifier|static
name|bool
name|slowResize
init|=
name|qgetenv
argument_list|(
literal|"QT_SLOW_TOPLEVEL_RESIZE"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|hasStaticContents
init|=
name|tlwExtra
operator|&&
name|tlwExtra
operator|->
name|backingStore
operator|&&
name|tlwExtra
operator|->
name|backingStore
operator|->
name|hasStaticContents
argument_list|()
decl_stmt|;
comment|// If we have a backing store with static contents, we have to disable the top-level
comment|// resize optimization in order to get invalidated regions for resized widgets.
comment|// The optimization discards all invalidateBuffer() calls since we're going to
comment|// repaint everything anyways, but that's not the case with static contents.
if|if
condition|(
operator|!
name|slowResize
operator|&&
name|tlwExtra
operator|&&
operator|!
name|hasStaticContents
condition|)
name|tlwExtra
operator|->
name|inTopLevelResize
operator|=
literal|true
expr_stmt|;
name|QResizeEvent
name|e
argument_list|(
name|newSize
argument_list|,
name|oldSize
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_func
argument_list|()
operator|->
name|paintOnScreen
argument_list|()
condition|)
block|{
name|QRegion
name|updateRegion
argument_list|(
name|rect
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_StaticContents
argument_list|)
condition|)
name|updateRegion
operator|-=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|oldSize
operator|.
name|width
argument_list|()
argument_list|,
name|oldSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|syncBackingStore
argument_list|(
name|updateRegion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d_func
argument_list|()
operator|->
name|syncBackingStore
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|slowResize
operator|&&
name|tlwExtra
condition|)
name|tlwExtra
operator|->
name|inTopLevelResize
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|QResizeEvent
modifier|*
name|e
init|=
operator|new
name|QResizeEvent
argument_list|(
name|newSize
argument_list|,
name|oldSize
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|postEvent
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|msg
operator|.
name|message
operator|==
name|WM_MOVE
condition|)
block|{
comment|// move event
name|int
name|a
init|=
operator|(
name|int
operator|)
operator|(
name|short
operator|)
name|LOWORD
argument_list|(
name|msg
operator|.
name|lParam
argument_list|)
decl_stmt|;
name|int
name|b
init|=
operator|(
name|int
operator|)
operator|(
name|short
operator|)
name|HIWORD
argument_list|(
name|msg
operator|.
name|lParam
argument_list|)
decl_stmt|;
name|QPoint
name|oldPos
init|=
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|QPoint
name|newCPos
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
comment|// Ignore silly Windows move event to wild pos after iconify.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
if|if
condition|(
operator|!
name|IsIconic
argument_list|(
name|internalWinId
argument_list|()
argument_list|)
operator|&&
name|newCPos
operator|!=
name|oldPos
condition|)
block|{
endif|#
directive|endif
name|cr
operator|.
name|moveTopLeft
argument_list|(
name|newCPos
argument_list|)
expr_stmt|;
name|data
operator|->
name|crect
operator|=
name|cr
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
name|QMoveEvent
name|e
argument_list|(
name|newCPos
argument_list|,
name|oldPos
argument_list|)
decl_stmt|;
comment|// cpos (client position)
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QMoveEvent
modifier|*
name|e
init|=
operator|new
name|QMoveEvent
argument_list|(
name|newCPos
argument_list|,
name|oldPos
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|postEvent
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
block|}
endif|#
directive|endif
block|}
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ConfigPending
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// clear config flag
return|return
literal|true
return|;
block|}
comment|//
comment|// Close window event translation.
comment|//
comment|// This class is a friend of QApplication because it needs to emit the
comment|// lastWindowClosed() signal when the last top level widget is closed.
comment|//
DECL|function|translateCloseEvent
name|bool
name|QETWidget
operator|::
name|translateCloseEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
parameter_list|)
block|{
return|return
name|d_func
argument_list|()
operator|->
name|close_helper
argument_list|(
name|QWidgetPrivate
operator|::
name|CloseWithSpontaneousEvent
argument_list|)
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
DECL|function|translateGestureEvent
name|bool
name|QETWidget
operator|::
name|translateGestureEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
parameter_list|,
specifier|const
name|GESTUREINFO
modifier|&
name|gi
parameter_list|)
block|{
specifier|const
name|QPoint
name|widgetPos
init|=
name|QPoint
argument_list|(
name|gi
operator|.
name|ptsLocation
operator|.
name|x
argument_list|,
name|gi
operator|.
name|ptsLocation
operator|.
name|y
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|alienWidget
init|=
operator|!
name|internalWinId
argument_list|()
condition|?
name|this
else|:
name|childAt
argument_list|(
name|widgetPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|alienWidget
operator|&&
name|alienWidget
operator|->
name|internalWinId
argument_list|()
condition|)
name|alienWidget
operator|=
literal|0
expr_stmt|;
name|QWidget
modifier|*
name|widget
init|=
name|alienWidget
condition|?
name|alienWidget
else|:
name|this
decl_stmt|;
name|QNativeGestureEvent
name|event
decl_stmt|;
name|event
operator|.
name|sequenceId
operator|=
name|gi
operator|.
name|dwSequenceID
expr_stmt|;
name|event
operator|.
name|position
operator|=
name|QPoint
argument_list|(
name|gi
operator|.
name|ptsLocation
operator|.
name|x
argument_list|,
name|gi
operator|.
name|ptsLocation
operator|.
name|y
argument_list|)
expr_stmt|;
name|event
operator|.
name|argument
operator|=
name|gi
operator|.
name|ullArguments
expr_stmt|;
switch|switch
condition|(
name|gi
operator|.
name|dwID
condition|)
block|{
case|case
name|GID_BEGIN
case|:
name|event
operator|.
name|gestureType
operator|=
name|QNativeGestureEvent
operator|::
name|GestureBegin
expr_stmt|;
break|break;
case|case
name|GID_END
case|:
name|event
operator|.
name|gestureType
operator|=
name|QNativeGestureEvent
operator|::
name|GestureEnd
expr_stmt|;
break|break;
case|case
name|GID_ZOOM
case|:
name|event
operator|.
name|gestureType
operator|=
name|QNativeGestureEvent
operator|::
name|Zoom
expr_stmt|;
break|break;
case|case
name|GID_PAN
case|:
name|event
operator|.
name|gestureType
operator|=
name|QNativeGestureEvent
operator|::
name|Pan
expr_stmt|;
break|break;
case|case
name|GID_ROTATE
case|:
name|event
operator|.
name|gestureType
operator|=
name|QNativeGestureEvent
operator|::
name|Rotate
expr_stmt|;
break|break;
case|case
name|GID_TWOFINGERTAP
case|:
case|case
name|GID_ROLLOVER
case|:
default|default:
break|break;
block|}
if|if
condition|(
name|event
operator|.
name|gestureType
operator|!=
name|QNativeGestureEvent
operator|::
name|None
condition|)
name|qt_sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_GESTURES
DECL|function|setCursorFlashTime
name|void
name|QApplication
operator|::
name|setCursorFlashTime
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|SetCaretBlinkTime
argument_list|(
name|msecs
operator|/
literal|2
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|cursor_flash_time
operator|=
name|msecs
expr_stmt|;
block|}
DECL|function|cursorFlashTime
name|int
name|QApplication
operator|::
name|cursorFlashTime
parameter_list|()
block|{
name|int
name|blink
init|=
operator|(
name|int
operator|)
name|GetCaretBlinkTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|blink
condition|)
return|return
name|QApplicationPrivate
operator|::
name|cursor_flash_time
return|;
if|if
condition|(
name|blink
operator|>
literal|0
condition|)
return|return
literal|2
operator|*
name|blink
return|;
return|return
literal|0
return|;
block|}
DECL|function|setDoubleClickInterval
name|void
name|QApplication
operator|::
name|setDoubleClickInterval
parameter_list|(
name|int
name|ms
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_WS_WINCE
name|SetDoubleClickTime
argument_list|(
name|ms
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QApplicationPrivate
operator|::
name|mouse_double_click_time
operator|=
name|ms
expr_stmt|;
block|}
DECL|function|doubleClickInterval
name|int
name|QApplication
operator|::
name|doubleClickInterval
parameter_list|()
block|{
name|int
name|ms
init|=
name|GetDoubleClickTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|!=
literal|0
condition|)
return|return
name|ms
return|;
return|return
name|QApplicationPrivate
operator|::
name|mouse_double_click_time
return|;
block|}
DECL|function|setKeyboardInputInterval
name|void
name|QApplication
operator|::
name|setKeyboardInputInterval
parameter_list|(
name|int
name|ms
parameter_list|)
block|{
name|QApplicationPrivate
operator|::
name|keyboard_input_time
operator|=
name|ms
expr_stmt|;
block|}
DECL|function|keyboardInputInterval
name|int
name|QApplication
operator|::
name|keyboardInputInterval
parameter_list|()
block|{
comment|// FIXME: get from the system
return|return
name|QApplicationPrivate
operator|::
name|keyboard_input_time
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
DECL|function|setWheelScrollLines
name|void
name|QApplication
operator|::
name|setWheelScrollLines
parameter_list|(
name|int
name|n
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|SPI_SETWHEELSCROLLLINES
if|if
condition|(
name|n
operator|<
literal|0
condition|)
name|n
operator|=
literal|0
expr_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_SETWHEELSCROLLLINES
argument_list|,
operator|(
name|uint
operator|)
name|n
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
name|QApplicationPrivate
operator|::
name|wheel_scroll_lines
operator|=
name|n
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|wheelScrollLines
name|int
name|QApplication
operator|::
name|wheelScrollLines
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|SPI_GETWHEELSCROLLLINES
name|uint
name|i
init|=
literal|3
decl_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_GETWHEELSCROLLLINES
argument_list|,
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
argument_list|,
operator|&
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
name|INT_MAX
condition|)
name|i
operator|=
name|INT_MAX
expr_stmt|;
return|return
name|i
return|;
else|#
directive|else
return|return
name|QApplicationPrivate
operator|::
name|wheel_scroll_lines
return|;
endif|#
directive|endif
block|}
endif|#
directive|endif
comment|//QT_NO_WHEELEVENT
DECL|variable|effect_override
specifier|static
name|bool
name|effect_override
init|=
literal|false
decl_stmt|;
DECL|function|setEffectEnabled
name|void
name|QApplication
operator|::
name|setEffectEnabled
parameter_list|(
name|Qt
operator|::
name|UIEffect
name|effect
parameter_list|,
name|bool
name|enable
parameter_list|)
block|{
name|effect_override
operator|=
literal|true
expr_stmt|;
switch|switch
condition|(
name|effect
condition|)
block|{
case|case
name|Qt
operator|::
name|UI_AnimateMenu
case|:
name|QApplicationPrivate
operator|::
name|animate_menu
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_FadeMenu
case|:
name|QApplicationPrivate
operator|::
name|fade_menu
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_AnimateCombo
case|:
name|QApplicationPrivate
operator|::
name|animate_combo
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_AnimateTooltip
case|:
name|QApplicationPrivate
operator|::
name|animate_tooltip
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_FadeTooltip
case|:
name|QApplicationPrivate
operator|::
name|fade_tooltip
operator|=
name|enable
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_AnimateToolBox
case|:
name|QApplicationPrivate
operator|::
name|animate_toolbox
operator|=
name|enable
expr_stmt|;
break|break;
default|default:
name|QApplicationPrivate
operator|::
name|animate_ui
operator|=
name|enable
expr_stmt|;
break|break;
block|}
block|}
DECL|function|isEffectEnabled
name|bool
name|QApplication
operator|::
name|isEffectEnabled
parameter_list|(
name|Qt
operator|::
name|UIEffect
name|effect
parameter_list|)
block|{
if|if
condition|(
name|QColormap
operator|::
name|instance
argument_list|()
operator|.
name|depth
argument_list|()
operator|<
literal|16
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|effect_override
operator|&&
name|desktopSettingsAware
argument_list|()
condition|)
block|{
comment|// we know that they can be used when we are here
name|BOOL
name|enabled
init|=
literal|false
decl_stmt|;
name|UINT
name|api
decl_stmt|;
switch|switch
condition|(
name|effect
condition|)
block|{
case|case
name|Qt
operator|::
name|UI_AnimateMenu
case|:
name|api
operator|=
name|SPI_GETMENUANIMATION
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_FadeMenu
case|:
name|api
operator|=
name|SPI_GETMENUFADE
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_AnimateCombo
case|:
name|api
operator|=
name|SPI_GETCOMBOBOXANIMATION
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_AnimateTooltip
case|:
name|api
operator|=
name|SPI_GETTOOLTIPANIMATION
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UI_FadeTooltip
case|:
name|api
operator|=
name|SPI_GETTOOLTIPFADE
expr_stmt|;
break|break;
default|default:
name|api
operator|=
name|SPI_GETUIEFFECTS
expr_stmt|;
break|break;
block|}
name|SystemParametersInfo
argument_list|(
name|api
argument_list|,
literal|0
argument_list|,
operator|&
name|enabled
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|enabled
return|;
block|}
switch|switch
condition|(
name|effect
condition|)
block|{
case|case
name|Qt
operator|::
name|UI_AnimateMenu
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_menu
return|;
case|case
name|Qt
operator|::
name|UI_FadeMenu
case|:
return|return
name|QApplicationPrivate
operator|::
name|fade_menu
return|;
case|case
name|Qt
operator|::
name|UI_AnimateCombo
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_combo
return|;
case|case
name|Qt
operator|::
name|UI_AnimateTooltip
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_tooltip
return|;
case|case
name|Qt
operator|::
name|UI_FadeTooltip
case|:
return|return
name|QApplicationPrivate
operator|::
name|fade_tooltip
return|;
case|case
name|Qt
operator|::
name|UI_AnimateToolBox
case|:
return|return
name|QApplicationPrivate
operator|::
name|animate_toolbox
return|;
default|default:
return|return
name|QApplicationPrivate
operator|::
name|animate_ui
return|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_SESSIONMANAGER
DECL|function|allowsInteraction
name|bool
name|QSessionManager
operator|::
name|allowsInteraction
parameter_list|()
block|{
name|sm_blockUserInput
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|allowsErrorInteraction
name|bool
name|QSessionManager
operator|::
name|allowsErrorInteraction
parameter_list|()
block|{
name|sm_blockUserInput
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|release
name|void
name|QSessionManager
operator|::
name|release
parameter_list|()
block|{
if|if
condition|(
name|sm_smActive
condition|)
name|sm_blockUserInput
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|cancel
name|void
name|QSessionManager
operator|::
name|cancel
parameter_list|()
block|{
name|sm_cancel
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
comment|//QT_NO_SESSIONMANAGER
DECL|member|HasTouchSupport
name|bool
name|QApplicationPrivate
operator|::
name|HasTouchSupport
init|=
literal|false
decl_stmt|;
DECL|member|RegisterTouchWindow
name|PtrRegisterTouchWindow
name|QApplicationPrivate
operator|::
name|RegisterTouchWindow
init|=
literal|0
decl_stmt|;
DECL|member|GetTouchInputInfo
name|PtrGetTouchInputInfo
name|QApplicationPrivate
operator|::
name|GetTouchInputInfo
init|=
literal|0
decl_stmt|;
DECL|member|CloseTouchInputHandle
name|PtrCloseTouchInputHandle
name|QApplicationPrivate
operator|::
name|CloseTouchInputHandle
init|=
literal|0
decl_stmt|;
DECL|function|initializeMultitouch_sys
name|void
name|QApplicationPrivate
operator|::
name|initializeMultitouch_sys
parameter_list|()
block|{
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|WV_WINDOWS7
condition|)
block|{
specifier|static
specifier|const
name|int
name|QT_SM_DIGITIZER
init|=
literal|94
decl_stmt|;
name|int
name|value
init|=
name|GetSystemMetrics
argument_list|(
name|QT_SM_DIGITIZER
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|int
name|QT_NID_INTEGRATED_TOUCH
init|=
literal|0x01
decl_stmt|;
specifier|static
specifier|const
name|int
name|QT_NID_EXTERNAL_TOUCH
init|=
literal|0x02
decl_stmt|;
specifier|static
specifier|const
name|int
name|QT_NID_MULTI_INPUT
init|=
literal|0x40
decl_stmt|;
name|QApplicationPrivate
operator|::
name|HasTouchSupport
operator|=
name|value
operator|&
operator|(
name|QT_NID_INTEGRATED_TOUCH
operator||
name|QT_NID_EXTERNAL_TOUCH
operator||
name|QT_NID_MULTI_INPUT
operator|)
expr_stmt|;
block|}
name|QSystemLibrary
name|library
argument_list|(
name|QLatin1String
argument_list|(
literal|"user32"
argument_list|)
argument_list|)
decl_stmt|;
comment|// MinGW (g++ 3.4.5) accepts only C casts.
name|RegisterTouchWindow
operator|=
call|(
name|PtrRegisterTouchWindow
call|)
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"RegisterTouchWindow"
argument_list|)
argument_list|)
expr_stmt|;
name|GetTouchInputInfo
operator|=
call|(
name|PtrGetTouchInputInfo
call|)
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"GetTouchInputInfo"
argument_list|)
argument_list|)
expr_stmt|;
name|CloseTouchInputHandle
operator|=
call|(
name|PtrCloseTouchInputHandle
call|)
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"CloseTouchInputHandle"
argument_list|)
argument_list|)
expr_stmt|;
name|touchInputIDToTouchPointID
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|cleanupMultitouch_sys
name|void
name|QApplicationPrivate
operator|::
name|cleanupMultitouch_sys
parameter_list|()
block|{
name|touchInputIDToTouchPointID
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|translateTouchEvent
name|bool
name|QApplicationPrivate
operator|::
name|translateTouchEvent
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
block|{
name|QWidget
modifier|*
name|widgetForHwnd
init|=
name|QWidget
operator|::
name|find
argument_list|(
name|msg
operator|.
name|hwnd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|widgetForHwnd
condition|)
return|return
literal|false
return|;
name|QRect
name|screenGeometry
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|widgetForHwnd
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
name|touchPoints
decl_stmt|;
name|QVector
argument_list|<
name|TOUCHINPUT
argument_list|>
name|winTouchInputs
argument_list|(
name|msg
operator|.
name|wParam
argument_list|)
decl_stmt|;
name|memset
argument_list|(
name|winTouchInputs
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|TOUCHINPUT
argument_list|)
operator|*
name|winTouchInputs
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|TouchPointStates
name|allStates
init|=
literal|0
decl_stmt|;
name|QApplicationPrivate
operator|::
name|GetTouchInputInfo
argument_list|(
operator|(
name|HANDLE
operator|)
name|msg
operator|.
name|lParam
argument_list|,
name|msg
operator|.
name|wParam
argument_list|,
name|winTouchInputs
operator|.
name|data
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|TOUCHINPUT
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|winTouchInputs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|TOUCHINPUT
modifier|&
name|touchInput
init|=
name|winTouchInputs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|touchPointID
init|=
name|touchInputIDToTouchPointID
operator|.
name|value
argument_list|(
name|touchInput
operator|.
name|dwID
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|touchPointID
operator|==
operator|-
literal|1
condition|)
block|{
name|touchPointID
operator|=
name|touchInputIDToTouchPointID
operator|.
name|count
argument_list|()
expr_stmt|;
name|touchInputIDToTouchPointID
operator|.
name|insert
argument_list|(
name|touchInput
operator|.
name|dwID
argument_list|,
name|touchPointID
argument_list|)
expr_stmt|;
block|}
name|QTouchEvent
operator|::
name|TouchPoint
name|touchPoint
argument_list|(
name|touchPointID
argument_list|)
decl_stmt|;
comment|// update state
name|QPointF
name|screenPos
argument_list|(
name|qreal
argument_list|(
name|touchInput
operator|.
name|x
argument_list|)
operator|/
name|qreal
argument_list|(
literal|100.
argument_list|)
argument_list|,
name|qreal
argument_list|(
name|touchInput
operator|.
name|y
argument_list|)
operator|/
name|qreal
argument_list|(
literal|100.
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
name|screenRect
decl_stmt|;
if|if
condition|(
name|touchInput
operator|.
name|dwMask
operator|&
name|TOUCHINPUTMASKF_CONTACTAREA
condition|)
name|screenRect
operator|.
name|setSize
argument_list|(
name|QSizeF
argument_list|(
name|qreal
argument_list|(
name|touchInput
operator|.
name|cxContact
argument_list|)
operator|/
name|qreal
argument_list|(
literal|100.
argument_list|)
argument_list|,
name|qreal
argument_list|(
name|touchInput
operator|.
name|cyContact
argument_list|)
operator|/
name|qreal
argument_list|(
literal|100.
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|screenRect
operator|.
name|moveCenter
argument_list|(
name|screenPos
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|TouchPointStates
name|state
decl_stmt|;
if|if
condition|(
name|touchInput
operator|.
name|dwFlags
operator|&
name|TOUCHEVENTF_DOWN
condition|)
block|{
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|touchInput
operator|.
name|dwFlags
operator|&
name|TOUCHEVENTF_UP
condition|)
block|{
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
operator|(
name|screenPos
operator|==
name|touchPoint
operator|.
name|screenPos
argument_list|()
condition|?
name|Qt
operator|::
name|TouchPointStationary
else|:
name|Qt
operator|::
name|TouchPointMoved
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|touchInput
operator|.
name|dwFlags
operator|&
name|TOUCHEVENTF_PRIMARY
condition|)
name|state
operator||=
name|Qt
operator|::
name|TouchPointPrimary
expr_stmt|;
name|touchPoint
operator|.
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setScreenRect
argument_list|(
name|screenRect
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setNormalizedPos
argument_list|(
name|QPointF
argument_list|(
name|screenPos
operator|.
name|x
argument_list|()
operator|/
name|screenGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|screenPos
operator|.
name|y
argument_list|()
operator|/
name|screenGeometry
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|allStates
operator||=
name|state
expr_stmt|;
name|touchPoints
operator|.
name|append
argument_list|(
name|touchPoint
argument_list|)
expr_stmt|;
block|}
name|QApplicationPrivate
operator|::
name|CloseTouchInputHandle
argument_list|(
operator|(
name|HANDLE
operator|)
name|msg
operator|.
name|lParam
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|allStates
operator|&
name|Qt
operator|::
name|TouchPointStateMask
operator|)
operator|==
name|Qt
operator|::
name|TouchPointReleased
condition|)
block|{
comment|// all touch points released, forget the ids we've seen, they may not be reused
name|touchInputIDToTouchPointID
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|translateRawTouchEvent
argument_list|(
name|widgetForHwnd
argument_list|,
name|QTouchEvent
operator|::
name|TouchScreen
argument_list|,
name|touchPoints
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|QT_END_NAMESPACE
end_if
end_unit
