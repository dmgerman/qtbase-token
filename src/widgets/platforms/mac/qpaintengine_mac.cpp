begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qbitmap.h>
end_include
begin_include
include|#
directive|include
file|<qpaintdevice.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<qpainterpath.h>
end_include
begin_include
include|#
directive|include
file|<qpixmapcache.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qprintengine_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<qprinter.h>
end_include
begin_include
include|#
directive|include
file|<qstack.h>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qwidget.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<private/qfont_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_coretext_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qnumeric_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainterpath_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qtextengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_cocoa_helpers_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
specifier|extern
name|int
name|qt_antialiasing_threshold
decl_stmt|;
end_decl_stmt
begin_comment
comment|// QApplication.cpp
end_comment
begin_comment
comment|/*****************************************************************************   External functions  *****************************************************************************/
end_comment
begin_function_decl
specifier|extern
name|CGImageRef
name|qt_mac_create_imagemask
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|px
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//qpixmap_mac.cpp
end_comment
begin_function_decl
specifier|extern
name|QPoint
name|qt_mac_posInWindow
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//qwidget_mac.cpp
end_comment
begin_function_decl
specifier|extern
name|OSWindowRef
name|qt_mac_window_for
parameter_list|(
specifier|const
name|QWidget
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//qwidget_mac.cpp
end_comment
begin_function_decl
specifier|extern
name|CGContextRef
name|qt_mac_cg_context
parameter_list|(
specifier|const
name|QPaintDevice
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//qpaintdevice_mac.cpp
end_comment
begin_function_decl
specifier|extern
name|void
name|qt_mac_dispose_rgn
parameter_list|(
name|RgnHandle
name|r
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//qregion_mac.cpp
end_comment
begin_function_decl
specifier|extern
name|QPixmap
name|qt_pixmapForBrush
parameter_list|(
name|int
parameter_list|,
name|bool
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//qbrush.cpp
end_comment
begin_function_decl
name|void
name|qt_mac_clip_cg
parameter_list|(
name|CGContextRef
name|hd
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|,
name|CGAffineTransform
modifier|*
name|orig_xform
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//Implemented for qt_mac_p.h
end_comment
begin_constructor
DECL|function|QMacCGContext
name|QMacCGContext
operator|::
name|QMacCGContext
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|)
block|{
name|QPaintEngine
modifier|*
name|pe
init|=
name|p
operator|->
name|paintEngine
argument_list|()
decl_stmt|;
if|if
condition|(
name|pe
operator|->
name|type
argument_list|()
operator|==
name|QPaintEngine
operator|::
name|MacPrinter
condition|)
name|pe
operator|=
cast|static_cast
argument_list|<
name|QMacPrintEngine
operator|*
argument_list|>
argument_list|(
name|pe
argument_list|)
operator|->
name|paintEngine
argument_list|()
expr_stmt|;
name|pe
operator|->
name|syncState
argument_list|()
expr_stmt|;
name|context
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|pe
operator|->
name|type
argument_list|()
operator|==
name|QPaintEngine
operator|::
name|CoreGraphics
condition|)
name|context
operator|=
cast|static_cast
argument_list|<
name|QCoreGraphicsPaintEngine
operator|*
argument_list|>
argument_list|(
name|pe
argument_list|)
operator|->
name|handle
argument_list|()
expr_stmt|;
name|int
name|devType
init|=
name|p
operator|->
name|device
argument_list|()
operator|->
name|devType
argument_list|()
decl_stmt|;
if|if
condition|(
name|pe
operator|->
name|type
argument_list|()
operator|==
name|QPaintEngine
operator|::
name|Raster
operator|&&
operator|(
name|devType
operator|==
name|QInternal
operator|::
name|Widget
operator|||
name|devType
operator|==
name|QInternal
operator|::
name|Pixmap
operator|||
name|devType
operator|==
name|QInternal
operator|::
name|Image
operator|)
condition|)
block|{
specifier|extern
name|CGColorSpaceRef
name|qt_mac_colorSpaceForDeviceType
argument_list|(
specifier|const
name|QPaintDevice
operator|*
name|paintDevice
argument_list|)
decl_stmt|;
name|CGColorSpaceRef
name|colorspace
init|=
name|qt_mac_colorSpaceForDeviceType
argument_list|(
name|pe
operator|->
name|paintDevice
argument_list|()
argument_list|)
decl_stmt|;
name|uint
name|flags
init|=
name|kCGImageAlphaPremultipliedFirst
decl_stmt|;
ifdef|#
directive|ifdef
name|kCGBitmapByteOrder32Host
comment|//only needed because CGImage.h added symbols in the minor version
name|flags
operator||=
name|kCGBitmapByteOrder32Host
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QImage
modifier|*
name|image
init|=
operator|(
specifier|const
name|QImage
operator|*
operator|)
name|pe
operator|->
name|paintDevice
argument_list|()
decl_stmt|;
name|context
operator|=
name|CGBitmapContextCreate
argument_list|(
operator|(
name|void
operator|*
operator|)
name|image
operator|->
name|bits
argument_list|()
argument_list|,
name|image
operator|->
name|width
argument_list|()
argument_list|,
name|image
operator|->
name|height
argument_list|()
argument_list|,
literal|8
argument_list|,
name|image
operator|->
name|bytesPerLine
argument_list|()
argument_list|,
name|colorspace
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|CGContextTranslateCTM
argument_list|(
name|context
argument_list|,
literal|0
argument_list|,
name|image
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|CGContextScaleCTM
argument_list|(
name|context
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|devType
operator|==
name|QInternal
operator|::
name|Widget
condition|)
block|{
name|QRegion
name|clip
init|=
name|p
operator|->
name|paintEngine
argument_list|()
operator|->
name|systemClip
argument_list|()
decl_stmt|;
name|QTransform
name|native
init|=
name|p
operator|->
name|deviceTransform
argument_list|()
decl_stmt|;
name|QTransform
name|logical
init|=
name|p
operator|->
name|combinedTransform
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|->
name|hasClipping
argument_list|()
condition|)
block|{
name|QRegion
name|r
init|=
name|p
operator|->
name|clipRegion
argument_list|()
decl_stmt|;
name|r
operator|.
name|translate
argument_list|(
name|native
operator|.
name|dx
argument_list|()
argument_list|,
name|native
operator|.
name|dy
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clip
operator|.
name|isEmpty
argument_list|()
condition|)
name|clip
operator|=
name|r
expr_stmt|;
else|else
name|clip
operator|&=
name|r
expr_stmt|;
block|}
name|qt_mac_clip_cg
argument_list|(
name|context
argument_list|,
name|clip
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|CGContextTranslateCTM
argument_list|(
name|context
argument_list|,
name|native
operator|.
name|dx
argument_list|()
argument_list|,
name|native
operator|.
name|dy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|CGContextRetain
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_comment
comment|/*****************************************************************************   QCoreGraphicsPaintEngine utility functions  *****************************************************************************/
end_comment
begin_comment
comment|//conversion
end_comment
begin_function
DECL|function|qt_mac_convert_color_to_cg
specifier|inline
specifier|static
name|float
name|qt_mac_convert_color_to_cg
parameter_list|(
name|int
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|float
operator|)
name|c
operator|*
literal|1000
operator|/
literal|255
operator|)
operator|/
literal|1000
return|;
block|}
end_function
begin_function
DECL|function|qt_mac_convert_color_from_cg
specifier|inline
specifier|static
name|int
name|qt_mac_convert_color_from_cg
parameter_list|(
name|float
name|c
parameter_list|)
block|{
return|return
name|qRound
argument_list|(
name|c
operator|*
literal|255
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_mac_convert_transform_to_cg
name|CGAffineTransform
name|qt_mac_convert_transform_to_cg
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|t
parameter_list|)
block|{
return|return
name|CGAffineTransformMake
argument_list|(
name|t
operator|.
name|m11
argument_list|()
argument_list|,
name|t
operator|.
name|m12
argument_list|()
argument_list|,
name|t
operator|.
name|m21
argument_list|()
argument_list|,
name|t
operator|.
name|m22
argument_list|()
argument_list|,
name|t
operator|.
name|dx
argument_list|()
argument_list|,
name|t
operator|.
name|dy
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_mac_colorSpaceForDeviceType
name|CGColorSpaceRef
name|qt_mac_colorSpaceForDeviceType
parameter_list|(
specifier|const
name|QPaintDevice
modifier|*
name|paintDevice
parameter_list|)
block|{
name|bool
name|isWidget
init|=
operator|(
name|paintDevice
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
operator|)
decl_stmt|;
return|return
name|QCoreGraphicsPaintEngine
operator|::
name|macDisplayColorSpace
argument_list|(
name|isWidget
condition|?
cast|static_cast
argument_list|<
specifier|const
name|QWidget
operator|*
argument_list|>
argument_list|(
name|paintDevice
argument_list|)
else|:
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|cgColorForQColor
specifier|inline
specifier|static
name|QCFType
argument_list|<
name|CGColorRef
argument_list|>
name|cgColorForQColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|col
parameter_list|,
name|QPaintDevice
modifier|*
name|pdev
parameter_list|)
block|{
name|CGFloat
name|components
index|[]
init|=
block|{
name|qt_mac_convert_color_to_cg
argument_list|(
name|col
operator|.
name|red
argument_list|()
argument_list|)
block|,
name|qt_mac_convert_color_to_cg
argument_list|(
name|col
operator|.
name|green
argument_list|()
argument_list|)
block|,
name|qt_mac_convert_color_to_cg
argument_list|(
name|col
operator|.
name|blue
argument_list|()
argument_list|)
block|,
name|qt_mac_convert_color_to_cg
argument_list|(
argument|col.alpha()
argument_list|)
block|}
decl_stmt|;
return|return
name|CGColorCreate
argument_list|(
name|qt_mac_colorSpaceForDeviceType
argument_list|(
name|pdev
argument_list|)
argument_list|,
name|components
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// There's architectural problems with using native gradients
end_comment
begin_comment
comment|// on the Mac at the moment, so disable them.
end_comment
begin_comment
comment|// #define QT_MAC_USE_NATIVE_GRADIENTS
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_MAC_USE_NATIVE_GRADIENTS
end_ifdef
begin_function
DECL|function|drawGradientNatively
specifier|static
name|bool
name|drawGradientNatively
parameter_list|(
specifier|const
name|QGradient
modifier|*
name|gradient
parameter_list|)
block|{
return|return
name|gradient
operator|->
name|spread
argument_list|()
operator|==
name|QGradient
operator|::
name|PadSpread
return|;
block|}
end_function
begin_comment
comment|// gradiant callback
end_comment
begin_function
DECL|function|qt_mac_color_gradient_function
specifier|static
name|void
name|qt_mac_color_gradient_function
parameter_list|(
name|void
modifier|*
name|info
parameter_list|,
specifier|const
name|CGFloat
modifier|*
name|in
parameter_list|,
name|CGFloat
modifier|*
name|out
parameter_list|)
block|{
name|QBrush
modifier|*
name|brush
init|=
cast|static_cast
argument_list|<
name|QBrush
operator|*
argument_list|>
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|brush
operator|&&
name|brush
operator|->
name|gradient
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QGradientStops
name|stops
init|=
name|brush
operator|->
name|gradient
argument_list|()
operator|->
name|stops
argument_list|()
decl_stmt|;
specifier|const
name|int
name|n
init|=
name|stops
operator|.
name|count
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|n
operator|>=
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QGradientStop
modifier|*
name|begin
init|=
name|stops
operator|.
name|constBegin
argument_list|()
decl_stmt|;
specifier|const
name|QGradientStop
modifier|*
name|end
init|=
name|begin
operator|+
name|n
decl_stmt|;
name|qreal
name|p
init|=
name|in
index|[
literal|0
index|]
decl_stmt|;
specifier|const
name|QGradientStop
modifier|*
name|i
init|=
name|begin
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|end
operator|&&
name|i
operator|->
name|first
operator|<
name|p
condition|)
operator|++
name|i
expr_stmt|;
name|QRgb
name|c
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|begin
condition|)
block|{
name|c
operator|=
name|begin
operator|->
name|second
operator|.
name|rgba
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|end
condition|)
block|{
name|c
operator|=
operator|(
name|end
operator|-
literal|1
operator|)
operator|->
name|second
operator|.
name|rgba
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QGradientStop
modifier|&
name|s1
init|=
operator|*
operator|(
name|i
operator|-
literal|1
operator|)
decl_stmt|;
specifier|const
name|QGradientStop
modifier|&
name|s2
init|=
operator|*
name|i
decl_stmt|;
name|qreal
name|p1
init|=
name|s1
operator|.
name|first
decl_stmt|;
name|qreal
name|p2
init|=
name|s2
operator|.
name|first
decl_stmt|;
name|QRgb
name|c1
init|=
name|s1
operator|.
name|second
operator|.
name|rgba
argument_list|()
decl_stmt|;
name|QRgb
name|c2
init|=
name|s2
operator|.
name|second
operator|.
name|rgba
argument_list|()
decl_stmt|;
name|int
name|idist
init|=
literal|256
operator|*
operator|(
name|p
operator|-
name|p1
operator|)
operator|/
operator|(
name|p2
operator|-
name|p1
operator|)
decl_stmt|;
name|int
name|dist
init|=
literal|256
operator|-
name|idist
decl_stmt|;
name|c
operator|=
name|qRgba
argument_list|(
name|INTERPOLATE_PIXEL_256
argument_list|(
name|qRed
argument_list|(
name|c1
argument_list|)
argument_list|,
name|dist
argument_list|,
name|qRed
argument_list|(
name|c2
argument_list|)
argument_list|,
name|idist
argument_list|)
argument_list|,
name|INTERPOLATE_PIXEL_256
argument_list|(
name|qGreen
argument_list|(
name|c1
argument_list|)
argument_list|,
name|dist
argument_list|,
name|qGreen
argument_list|(
name|c2
argument_list|)
argument_list|,
name|idist
argument_list|)
argument_list|,
name|INTERPOLATE_PIXEL_256
argument_list|(
name|qBlue
argument_list|(
name|c1
argument_list|)
argument_list|,
name|dist
argument_list|,
name|qBlue
argument_list|(
name|c2
argument_list|)
argument_list|,
name|idist
argument_list|)
argument_list|,
name|INTERPOLATE_PIXEL_256
argument_list|(
name|qAlpha
argument_list|(
name|c1
argument_list|)
argument_list|,
name|dist
argument_list|,
name|qAlpha
argument_list|(
name|c2
argument_list|)
argument_list|,
name|idist
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
index|[
literal|0
index|]
operator|=
name|qt_mac_convert_color_to_cg
argument_list|(
name|qRed
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|out
index|[
literal|1
index|]
operator|=
name|qt_mac_convert_color_to_cg
argument_list|(
name|qGreen
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|out
index|[
literal|2
index|]
operator|=
name|qt_mac_convert_color_to_cg
argument_list|(
name|qBlue
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|out
index|[
literal|3
index|]
operator|=
name|qt_mac_convert_color_to_cg
argument_list|(
name|qAlpha
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//clipping handling
end_comment
begin_function
DECL|function|resetClip
name|void
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|resetClip
parameter_list|()
block|{
specifier|static
name|bool
name|inReset
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|inReset
condition|)
return|return;
name|inReset
operator|=
literal|true
expr_stmt|;
name|CGAffineTransform
name|old_xform
init|=
name|CGContextGetCTM
argument_list|(
name|hd
argument_list|)
decl_stmt|;
comment|//setup xforms
name|CGContextConcatCTM
argument_list|(
name|hd
argument_list|,
name|CGAffineTransformInvert
argument_list|(
name|old_xform
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|stackCount
operator|>
literal|0
condition|)
block|{
name|restoreGraphicsState
argument_list|()
expr_stmt|;
block|}
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|inReset
operator|=
literal|false
expr_stmt|;
comment|//reset xforms
name|CGContextConcatCTM
argument_list|(
name|hd
argument_list|,
name|CGAffineTransformInvert
argument_list|(
name|CGContextGetCTM
argument_list|(
name|hd
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CGContextConcatCTM
argument_list|(
name|hd
argument_list|,
name|old_xform
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_mac_compose_rect
specifier|static
name|CGRect
name|qt_mac_compose_rect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
name|float
name|off
init|=
literal|0
parameter_list|)
block|{
return|return
name|CGRectMake
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|+
name|off
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|off
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_mac_compose_path
specifier|static
name|CGMutablePathRef
name|qt_mac_compose_path
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|p
parameter_list|,
name|float
name|off
init|=
literal|0
parameter_list|)
block|{
name|CGMutablePathRef
name|ret
init|=
name|CGPathCreateMutable
argument_list|()
decl_stmt|;
name|QPointF
name|startPt
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|elm
init|=
name|p
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|elm
operator|.
name|type
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|p
operator|.
name|elementAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|x
operator|==
name|startPt
operator|.
name|x
argument_list|()
operator|&&
name|p
operator|.
name|elementAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|y
operator|==
name|startPt
operator|.
name|y
argument_list|()
condition|)
name|CGPathCloseSubpath
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|startPt
operator|=
name|QPointF
argument_list|(
name|elm
operator|.
name|x
argument_list|,
name|elm
operator|.
name|y
argument_list|)
expr_stmt|;
name|CGPathMoveToPoint
argument_list|(
name|ret
argument_list|,
literal|0
argument_list|,
name|elm
operator|.
name|x
operator|+
name|off
argument_list|,
name|elm
operator|.
name|y
operator|+
name|off
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|CGPathAddLineToPoint
argument_list|(
name|ret
argument_list|,
literal|0
argument_list|,
name|elm
operator|.
name|x
operator|+
name|off
argument_list|,
name|elm
operator|.
name|y
operator|+
name|off
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
name|Q_ASSERT
argument_list|(
name|p
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|type
operator|==
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|p
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|.
name|type
operator|==
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
name|CGPathAddCurveToPoint
argument_list|(
name|ret
argument_list|,
literal|0
argument_list|,
name|elm
operator|.
name|x
operator|+
name|off
argument_list|,
name|elm
operator|.
name|y
operator|+
name|off
argument_list|,
name|p
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|x
operator|+
name|off
argument_list|,
name|p
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|y
operator|+
name|off
argument_list|,
name|p
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|.
name|x
operator|+
name|off
argument_list|,
name|p
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|.
name|y
operator|+
name|off
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
break|break;
default|default:
name|qFatal
argument_list|(
literal|"QCoreGraphicsPaintEngine::drawPath(), unhandled type: %d"
argument_list|,
name|elm
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|isEmpty
argument_list|()
operator|&&
name|p
operator|.
name|elementAt
argument_list|(
name|p
operator|.
name|elementCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|x
operator|==
name|startPt
operator|.
name|x
argument_list|()
operator|&&
name|p
operator|.
name|elementAt
argument_list|(
name|p
operator|.
name|elementCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|y
operator|==
name|startPt
operator|.
name|y
argument_list|()
condition|)
name|CGPathCloseSubpath
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_decl_stmt
DECL|member|m_genericColorSpace
name|CGColorSpaceRef
name|QCoreGraphicsPaintEngine
operator|::
name|m_genericColorSpace
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_displayColorSpaceHash
name|QHash
argument_list|<
name|CGDirectDisplayID
argument_list|,
name|CGColorSpaceRef
argument_list|>
name|QCoreGraphicsPaintEngine
operator|::
name|m_displayColorSpaceHash
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_postRoutineRegistered
name|bool
name|QCoreGraphicsPaintEngine
operator|::
name|m_postRoutineRegistered
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|macGenericColorSpace
name|CGColorSpaceRef
name|QCoreGraphicsPaintEngine
operator|::
name|macGenericColorSpace
parameter_list|()
block|{
if|#
directive|if
literal|0
block|if (!m_genericColorSpace) {
if|#
directive|if
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
name|MAC_OS_X_VERSION_10_4
block|if (QSysInfo::MacintoshVersion>= QSysInfo::MV_10_4) {             m_genericColorSpace = CGColorSpaceCreateWithName(kCGColorSpaceGenericRGB);         } else
endif|#
directive|endif
block|{             m_genericColorSpace = CGColorSpaceCreateDeviceRGB();         }         if (!m_postRoutineRegistered) {             m_postRoutineRegistered = true;             qAddPostRoutine(QCoreGraphicsPaintEngine::cleanUpMacColorSpaces);         }     }     return m_genericColorSpace;
else|#
directive|else
comment|// Just return the main display colorspace for the moment.
return|return
name|macDisplayColorSpace
argument_list|()
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qt_mac_clip_cg
name|void
name|qt_mac_clip_cg
parameter_list|(
name|CGContextRef
name|hd
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|,
name|CGAffineTransform
modifier|*
name|orig_xform
parameter_list|)
block|{
name|CGAffineTransform
name|old_xform
init|=
name|CGAffineTransformIdentity
decl_stmt|;
if|if
condition|(
name|orig_xform
condition|)
block|{
comment|//setup xforms
name|old_xform
operator|=
name|CGContextGetCTM
argument_list|(
name|hd
argument_list|)
expr_stmt|;
name|CGContextConcatCTM
argument_list|(
name|hd
argument_list|,
name|CGAffineTransformInvert
argument_list|(
name|old_xform
argument_list|)
argument_list|)
expr_stmt|;
name|CGContextConcatCTM
argument_list|(
name|hd
argument_list|,
operator|*
name|orig_xform
argument_list|)
expr_stmt|;
block|}
comment|//do the clipping
name|CGContextBeginPath
argument_list|(
name|hd
argument_list|)
expr_stmt|;
if|if
condition|(
name|rgn
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CGContextAddRect
argument_list|(
name|hd
argument_list|,
name|CGRectMake
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
name|MAC_OS_X_VERSION_10_5
operator|)
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|>=
name|QSysInfo
operator|::
name|MV_10_5
condition|)
block|{
name|QCFType
argument_list|<
name|HIMutableShapeRef
argument_list|>
name|shape
init|=
name|rgn
operator|.
name|toHIMutableShape
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|HIShapeIsEmpty
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|HIShapeReplacePathInCGContext
argument_list|(
name|shape
argument_list|,
name|hd
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|rgn
operator|.
name|rects
argument_list|()
decl_stmt|;
specifier|const
name|int
name|count
init|=
name|rects
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QRect
modifier|&
name|r
init|=
name|rects
index|[
name|i
index|]
decl_stmt|;
name|CGRect
name|mac_r
init|=
name|CGRectMake
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|CGContextAddRect
argument_list|(
name|hd
argument_list|,
name|mac_r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|CGContextClip
argument_list|(
name|hd
argument_list|)
expr_stmt|;
if|if
condition|(
name|orig_xform
condition|)
block|{
comment|//reset xforms
name|CGContextConcatCTM
argument_list|(
name|hd
argument_list|,
name|CGAffineTransformInvert
argument_list|(
name|CGContextGetCTM
argument_list|(
name|hd
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CGContextConcatCTM
argument_list|(
name|hd
argument_list|,
name|old_xform
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//pattern handling (tiling)
end_comment
begin_if
if|#
directive|if
literal|1
end_if
begin_define
DECL|macro|QMACPATTERN_MASK_MULTIPLIER
define|#
directive|define
name|QMACPATTERN_MASK_MULTIPLIER
value|32
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|QMACPATTERN_MASK_MULTIPLIER
define|#
directive|define
name|QMACPATTERN_MASK_MULTIPLIER
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|QMacPattern
class|class
name|QMacPattern
block|{
public|public:
DECL|function|QMacPattern
name|QMacPattern
parameter_list|()
member_init_list|:
name|as_mask
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|pdev
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|image
argument_list|(
literal|0
argument_list|)
block|{
name|data
operator|.
name|bytes
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|~QMacPattern
name|~
name|QMacPattern
parameter_list|()
block|{
name|CGImageRelease
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
DECL|function|width
name|int
name|width
parameter_list|()
block|{
if|if
condition|(
name|image
condition|)
return|return
name|CGImageGetWidth
argument_list|(
name|image
argument_list|)
return|;
if|if
condition|(
name|data
operator|.
name|bytes
condition|)
return|return
literal|8
operator|*
name|QMACPATTERN_MASK_MULTIPLIER
return|;
return|return
name|data
operator|.
name|pixmap
operator|.
name|width
argument_list|()
return|;
block|}
DECL|function|height
name|int
name|height
parameter_list|()
block|{
if|if
condition|(
name|image
condition|)
return|return
name|CGImageGetHeight
argument_list|(
name|image
argument_list|)
return|;
if|if
condition|(
name|data
operator|.
name|bytes
condition|)
return|return
literal|8
operator|*
name|QMACPATTERN_MASK_MULTIPLIER
return|;
return|return
name|data
operator|.
name|pixmap
operator|.
name|height
argument_list|()
return|;
block|}
comment|//input
DECL|member|foreground
name|QColor
name|foreground
decl_stmt|;
DECL|member|as_mask
name|bool
name|as_mask
decl_stmt|;
struct|struct
block|{
DECL|member|pixmap
name|QPixmap
name|pixmap
decl_stmt|;
DECL|member|bytes
specifier|const
name|uchar
modifier|*
name|bytes
decl_stmt|;
DECL|member|data
block|}
name|data
struct|;
DECL|member|pdev
name|QPaintDevice
modifier|*
name|pdev
decl_stmt|;
comment|//output
DECL|member|image
name|CGImageRef
name|image
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|qt_mac_draw_pattern
specifier|static
name|void
name|qt_mac_draw_pattern
parameter_list|(
name|void
modifier|*
name|info
parameter_list|,
name|CGContextRef
name|c
parameter_list|)
block|{
name|QMacPattern
modifier|*
name|pat
init|=
operator|(
name|QMacPattern
operator|*
operator|)
name|info
decl_stmt|;
name|int
name|w
init|=
literal|0
decl_stmt|,
name|h
init|=
literal|0
decl_stmt|;
name|bool
name|isBitmap
init|=
operator|(
name|pat
operator|->
name|data
operator|.
name|pixmap
operator|.
name|depth
argument_list|()
operator|==
literal|1
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|pat
operator|->
name|image
condition|)
block|{
comment|//lazy cache
if|if
condition|(
name|pat
operator|->
name|as_mask
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|pat
operator|->
name|data
operator|.
name|bytes
argument_list|)
expr_stmt|;
name|w
operator|=
name|h
operator|=
literal|8
expr_stmt|;
if|#
directive|if
operator|(
name|QMACPATTERN_MASK_MULTIPLIER
operator|==
literal|1
operator|)
name|CGDataProviderRef
name|provider
init|=
name|CGDataProviderCreateWithData
argument_list|(
literal|0
argument_list|,
name|pat
operator|->
name|data
operator|.
name|bytes
argument_list|,
name|w
operator|*
name|h
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|pat
operator|->
name|image
operator|=
name|CGImageMaskCreate
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|provider
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|CGDataProviderRelease
argument_list|(
name|provider
argument_list|)
expr_stmt|;
else|#
directive|else
specifier|const
name|int
name|numBytes
init|=
operator|(
name|w
operator|*
name|h
operator|)
operator|/
sizeof|sizeof
argument_list|(
name|uchar
argument_list|)
decl_stmt|;
name|uchar
name|xor_bytes
index|[
name|numBytes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBytes
condition|;
operator|++
name|i
control|)
name|xor_bytes
index|[
name|i
index|]
operator|=
name|pat
operator|->
name|data
operator|.
name|bytes
index|[
name|i
index|]
operator|^
literal|0xFF
expr_stmt|;
name|CGDataProviderRef
name|provider
init|=
name|CGDataProviderCreateWithData
argument_list|(
literal|0
argument_list|,
name|xor_bytes
argument_list|,
name|w
operator|*
name|h
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|CGImageRef
name|swatch
init|=
name|CGImageMaskCreate
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|provider
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CGDataProviderRelease
argument_list|(
name|provider
argument_list|)
expr_stmt|;
specifier|const
name|QColor
name|c0
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|,
name|c1
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|QPixmap
name|pm
argument_list|(
name|w
operator|*
name|QMACPATTERN_MASK_MULTIPLIER
argument_list|,
name|h
operator|*
name|QMACPATTERN_MASK_MULTIPLIER
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|CGContextRef
name|pm_ctx
init|=
name|qt_mac_cg_context
argument_list|(
operator|&
name|pm
argument_list|)
decl_stmt|;
name|CGContextSetFillColorWithColor
argument_list|(
name|c
argument_list|,
name|cgColorForQColor
argument_list|(
name|c1
argument_list|,
name|pat
operator|->
name|pdev
argument_list|)
argument_list|)
expr_stmt|;
name|CGRect
name|rect
init|=
name|CGRectMake
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|QMACPATTERN_MASK_MULTIPLIER
condition|;
operator|++
name|x
control|)
block|{
name|rect
operator|.
name|origin
operator|.
name|x
operator|=
name|x
operator|*
name|w
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|QMACPATTERN_MASK_MULTIPLIER
condition|;
operator|++
name|y
control|)
block|{
name|rect
operator|.
name|origin
operator|.
name|y
operator|=
name|y
operator|*
name|h
expr_stmt|;
name|qt_mac_drawCGImage
argument_list|(
name|pm_ctx
argument_list|,
operator|&
name|rect
argument_list|,
name|swatch
argument_list|)
expr_stmt|;
block|}
block|}
name|pat
operator|->
name|image
operator|=
name|qt_mac_create_imagemask
argument_list|(
name|pm
argument_list|,
name|pm
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|CGImageRelease
argument_list|(
name|swatch
argument_list|)
expr_stmt|;
name|CGContextRelease
argument_list|(
name|pm_ctx
argument_list|)
expr_stmt|;
name|w
operator|*=
name|QMACPATTERN_MASK_MULTIPLIER
expr_stmt|;
name|h
operator|*=
name|QMACPATTERN_MASK_MULTIPLIER
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|w
operator|=
name|pat
operator|->
name|data
operator|.
name|pixmap
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|pat
operator|->
name|data
operator|.
name|pixmap
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|isBitmap
condition|)
name|pat
operator|->
name|image
operator|=
name|qt_mac_create_imagemask
argument_list|(
name|pat
operator|->
name|data
operator|.
name|pixmap
argument_list|,
name|pat
operator|->
name|data
operator|.
name|pixmap
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|pat
operator|->
name|image
operator|=
operator|(
name|CGImageRef
operator|)
name|pat
operator|->
name|data
operator|.
name|pixmap
operator|.
name|macCGHandle
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|w
operator|=
name|CGImageGetWidth
argument_list|(
name|pat
operator|->
name|image
argument_list|)
expr_stmt|;
name|h
operator|=
name|CGImageGetHeight
argument_list|(
name|pat
operator|->
name|image
argument_list|)
expr_stmt|;
block|}
comment|//draw
name|bool
name|needRestore
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|CGImageIsMask
argument_list|(
name|pat
operator|->
name|image
argument_list|)
condition|)
block|{
name|CGContextSaveGState
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|CGContextSetFillColorWithColor
argument_list|(
name|c
argument_list|,
name|cgColorForQColor
argument_list|(
name|pat
operator|->
name|foreground
argument_list|,
name|pat
operator|->
name|pdev
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CGRect
name|rect
init|=
name|CGRectMake
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|qt_mac_drawCGImage
argument_list|(
name|c
argument_list|,
operator|&
name|rect
argument_list|,
name|pat
operator|->
name|image
argument_list|)
expr_stmt|;
if|if
condition|(
name|needRestore
condition|)
name|CGContextRestoreGState
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_mac_dispose_pattern
specifier|static
name|void
name|qt_mac_dispose_pattern
parameter_list|(
name|void
modifier|*
name|info
parameter_list|)
block|{
name|QMacPattern
modifier|*
name|pat
init|=
operator|(
name|QMacPattern
operator|*
operator|)
name|info
decl_stmt|;
operator|delete
name|pat
expr_stmt|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   QCoreGraphicsPaintEngine member functions  *****************************************************************************/
end_comment
begin_function
DECL|function|qt_mac_cg_features
specifier|inline
specifier|static
name|QPaintEngine
operator|::
name|PaintEngineFeatures
name|qt_mac_cg_features
parameter_list|()
block|{
return|return
name|QPaintEngine
operator|::
name|PaintEngineFeatures
argument_list|(
name|QPaintEngine
operator|::
name|AllFeatures
operator|&
operator|~
name|QPaintEngine
operator|::
name|PaintOutsidePaintEvent
operator|&
operator|~
name|QPaintEngine
operator|::
name|PerspectiveTransform
operator|&
operator|~
name|QPaintEngine
operator|::
name|ConicalGradientFill
operator|&
operator|~
name|QPaintEngine
operator|::
name|LinearGradientFill
operator|&
operator|~
name|QPaintEngine
operator|::
name|RadialGradientFill
operator|&
operator|~
name|QPaintEngine
operator|::
name|BrushStroke
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QCoreGraphicsPaintEngine
name|QCoreGraphicsPaintEngine
operator|::
name|QCoreGraphicsPaintEngine
parameter_list|()
member_init_list|:
name|QPaintEngine
argument_list|(
operator|*
operator|(
operator|new
name|QCoreGraphicsPaintEnginePrivate
operator|)
argument_list|,
name|qt_mac_cg_features
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QCoreGraphicsPaintEngine
name|QCoreGraphicsPaintEngine
operator|::
name|QCoreGraphicsPaintEngine
parameter_list|(
name|QPaintEnginePrivate
modifier|&
name|dptr
parameter_list|)
member_init_list|:
name|QPaintEngine
argument_list|(
name|dptr
argument_list|,
name|qt_mac_cg_features
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QCoreGraphicsPaintEngine
name|QCoreGraphicsPaintEngine
operator|::
name|~
name|QCoreGraphicsPaintEngine
parameter_list|()
block|{ }
end_destructor
begin_function
name|bool
DECL|function|begin
name|QCoreGraphicsPaintEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|isActive
argument_list|()
condition|)
block|{
comment|// already active painting
name|qWarning
argument_list|(
literal|"QCoreGraphicsPaintEngine::begin: Painter already active"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//initialization
name|d
operator|->
name|pdev
operator|=
name|pdev
expr_stmt|;
name|d
operator|->
name|complexXForm
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|cosmeticPen
operator|=
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CosmeticSetPenWidth
expr_stmt|;
name|d
operator|->
name|cosmeticPenSize
operator|=
literal|1
expr_stmt|;
name|d
operator|->
name|current
operator|.
name|clipEnabled
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|pixelSize
operator|=
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|d
operator|->
name|hd
operator|=
name|qt_mac_cg_context
argument_list|(
name|pdev
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hd
condition|)
block|{
name|d
operator|->
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|d
operator|->
name|orig_xform
operator|=
name|CGContextGetCTM
argument_list|(
name|d
operator|->
name|hd
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|shading
condition|)
block|{
name|CGShadingRelease
argument_list|(
name|d
operator|->
name|shading
argument_list|)
expr_stmt|;
name|d
operator|->
name|shading
operator|=
literal|0
expr_stmt|;
block|}
name|d
operator|->
name|setClip
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//clear the context's clipping
block|}
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
condition|)
block|{
comment|// device is a widget
name|QWidget
modifier|*
name|w
init|=
operator|(
name|QWidget
operator|*
operator|)
name|d
operator|->
name|pdev
decl_stmt|;
name|bool
name|unclipped
init|=
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_PaintUnclipped
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|unclipped
condition|)
name|qWarning
argument_list|(
literal|"QCoreGraphicsPaintEngine::begin: Does not support clipped desktop on Mac OS X"
argument_list|)
expr_stmt|;
comment|// ## need to do [qt_mac_window_for(w) makeKeyAndOrderFront]; (need to rename the file)
block|}
elseif|else
if|if
condition|(
name|unclipped
condition|)
block|{
name|qWarning
argument_list|(
literal|"QCoreGraphicsPaintEngine::begin: Does not support unclipped painting"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Pixmap
condition|)
block|{
comment|// device is a pixmap
name|QPixmap
modifier|*
name|pm
init|=
operator|(
name|QPixmap
operator|*
operator|)
name|d
operator|->
name|pdev
decl_stmt|;
if|if
condition|(
name|pm
operator|->
name|isNull
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QCoreGraphicsPaintEngine::begin: Cannot paint null pixmap"
argument_list|)
expr_stmt|;
name|end
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|setDirty
argument_list|(
name|QPaintEngine
operator|::
name|DirtyPen
argument_list|)
expr_stmt|;
name|setDirty
argument_list|(
name|QPaintEngine
operator|::
name|DirtyBrush
argument_list|)
expr_stmt|;
name|setDirty
argument_list|(
name|QPaintEngine
operator|::
name|DirtyBackground
argument_list|)
expr_stmt|;
name|setDirty
argument_list|(
name|QPaintEngine
operator|::
name|DirtyHints
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
name|bool
DECL|function|end
name|QCoreGraphicsPaintEngine
operator|::
name|end
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
operator|&&
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|pdev
argument_list|)
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
condition|)
block|{
comment|//        // ### need to do [qt_mac_window_for(static_cast<QWidget *>(d->pdev)) orderOut]; (need to rename)
block|}
if|if
condition|(
name|d
operator|->
name|shading
condition|)
block|{
name|CGShadingRelease
argument_list|(
name|d
operator|->
name|shading
argument_list|)
expr_stmt|;
name|d
operator|->
name|shading
operator|=
literal|0
expr_stmt|;
block|}
name|d
operator|->
name|pdev
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hd
condition|)
block|{
name|d
operator|->
name|restoreGraphicsState
argument_list|()
expr_stmt|;
name|CGContextSynchronize
argument_list|(
name|d
operator|->
name|hd
argument_list|)
expr_stmt|;
name|CGContextRelease
argument_list|(
name|d
operator|->
name|hd
argument_list|)
expr_stmt|;
name|d
operator|->
name|hd
operator|=
literal|0
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
name|void
DECL|function|updateState
name|QCoreGraphicsPaintEngine
operator|::
name|updateState
parameter_list|(
specifier|const
name|QPaintEngineState
modifier|&
name|state
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|QPaintEngine
operator|::
name|DirtyFlags
name|flags
init|=
name|state
operator|.
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyTransform
condition|)
name|updateMatrix
argument_list|(
name|state
operator|.
name|transform
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyClipEnabled
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|isClipEnabled
argument_list|()
condition|)
name|updateClipPath
argument_list|(
name|painter
argument_list|()
operator|->
name|clipPath
argument_list|()
argument_list|,
name|Qt
operator|::
name|ReplaceClip
argument_list|)
expr_stmt|;
else|else
name|updateClipPath
argument_list|(
name|QPainterPath
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoClip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyClipPath
condition|)
block|{
name|updateClipPath
argument_list|(
name|state
operator|.
name|clipPath
argument_list|()
argument_list|,
name|state
operator|.
name|clipOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|DirtyClipRegion
condition|)
block|{
name|updateClipRegion
argument_list|(
name|state
operator|.
name|clipRegion
argument_list|()
argument_list|,
name|state
operator|.
name|clipOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If the clip has changed we need to update all other states
comment|// too, since they are included in the system context on OSX,
comment|// and changing the clip resets that context back to scratch.
if|if
condition|(
name|flags
operator|&
operator|(
name|DirtyClipPath
operator||
name|DirtyClipRegion
operator||
name|DirtyClipEnabled
operator|)
condition|)
name|flags
operator||=
name|AllDirty
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyPen
condition|)
name|updatePen
argument_list|(
name|state
operator|.
name|pen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
operator|(
name|DirtyBrush
operator||
name|DirtyBrushOrigin
operator|)
condition|)
name|updateBrush
argument_list|(
name|state
operator|.
name|brush
argument_list|()
argument_list|,
name|state
operator|.
name|brushOrigin
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyFont
condition|)
name|updateFont
argument_list|(
name|state
operator|.
name|font
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyOpacity
condition|)
name|updateOpacity
argument_list|(
name|state
operator|.
name|opacity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyHints
condition|)
name|updateRenderHints
argument_list|(
name|state
operator|.
name|renderHints
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyCompositionMode
condition|)
name|updateCompositionMode
argument_list|(
name|state
operator|.
name|compositionMode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
operator|(
name|DirtyPen
operator||
name|DirtyTransform
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|current
operator|.
name|pen
operator|.
name|isCosmetic
argument_list|()
condition|)
block|{
name|d
operator|->
name|cosmeticPen
operator|=
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CosmeticNone
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|current
operator|.
name|transform
operator|.
name|m11
argument_list|()
operator|<
name|d
operator|->
name|current
operator|.
name|transform
operator|.
name|m22
argument_list|()
operator|-
literal|1.0
operator|||
name|d
operator|->
name|current
operator|.
name|transform
operator|.
name|m11
argument_list|()
operator|>
name|d
operator|->
name|current
operator|.
name|transform
operator|.
name|m22
argument_list|()
operator|+
literal|1.0
condition|)
block|{
name|d
operator|->
name|cosmeticPen
operator|=
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CosmeticTransformPath
expr_stmt|;
name|d
operator|->
name|cosmeticPenSize
operator|=
name|d
operator|->
name|adjustPenWidth
argument_list|(
name|d
operator|->
name|current
operator|.
name|pen
operator|.
name|widthF
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|cosmeticPenSize
condition|)
name|d
operator|->
name|cosmeticPenSize
operator|=
literal|1.0
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|cosmeticPen
operator|=
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CosmeticSetPenWidth
expr_stmt|;
specifier|static
specifier|const
name|float
name|sqrt2
init|=
name|sqrt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|qreal
name|width
init|=
name|d
operator|->
name|current
operator|.
name|pen
operator|.
name|widthF
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|width
condition|)
name|width
operator|=
literal|1
expr_stmt|;
name|d
operator|->
name|cosmeticPenSize
operator|=
name|sqrt
argument_list|(
name|pow
argument_list|(
name|d
operator|->
name|pixelSize
operator|.
name|y
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|+
name|pow
argument_list|(
name|d
operator|->
name|pixelSize
operator|.
name|x
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|/
name|sqrt2
operator|*
name|width
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
name|void
DECL|function|updatePen
name|QCoreGraphicsPaintEngine
operator|::
name|updatePen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|current
operator|.
name|pen
operator|=
name|pen
expr_stmt|;
name|d
operator|->
name|setStrokePen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|updateBrush
name|QCoreGraphicsPaintEngine
operator|::
name|updateBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|brushOrigin
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|current
operator|.
name|brush
operator|=
name|brush
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_MAC_USE_NATIVE_GRADIENTS
comment|// Quartz supports only pad spread
if|if
condition|(
specifier|const
name|QGradient
modifier|*
name|gradient
init|=
name|brush
operator|.
name|gradient
argument_list|()
condition|)
block|{
if|if
condition|(
name|drawGradientNatively
argument_list|(
name|gradient
argument_list|)
condition|)
block|{
name|gccaps
operator||=
name|QPaintEngine
operator|::
name|LinearGradientFill
operator||
name|QPaintEngine
operator|::
name|RadialGradientFill
expr_stmt|;
block|}
else|else
block|{
name|gccaps
operator|&=
operator|~
operator|(
name|QPaintEngine
operator|::
name|LinearGradientFill
operator||
name|QPaintEngine
operator|::
name|RadialGradientFill
operator|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|shading
condition|)
block|{
name|CGShadingRelease
argument_list|(
name|d
operator|->
name|shading
argument_list|)
expr_stmt|;
name|d
operator|->
name|shading
operator|=
literal|0
expr_stmt|;
block|}
name|d
operator|->
name|setFillBrush
argument_list|(
name|brushOrigin
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|updateOpacity
name|QCoreGraphicsPaintEngine
operator|::
name|updateOpacity
parameter_list|(
name|qreal
name|opacity
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|CGContextSetAlpha
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|opacity
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|updateFont
name|QCoreGraphicsPaintEngine
operator|::
name|updateFont
parameter_list|(
specifier|const
name|QFont
modifier|&
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|updatePen
argument_list|(
name|d
operator|->
name|current
operator|.
name|pen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|updateMatrix
name|QCoreGraphicsPaintEngine
operator|::
name|updateMatrix
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_is_nan
argument_list|(
name|transform
operator|.
name|m11
argument_list|()
argument_list|)
operator|||
name|qt_is_nan
argument_list|(
name|transform
operator|.
name|m12
argument_list|()
argument_list|)
operator|||
name|qt_is_nan
argument_list|(
name|transform
operator|.
name|m13
argument_list|()
argument_list|)
operator|||
name|qt_is_nan
argument_list|(
name|transform
operator|.
name|m21
argument_list|()
argument_list|)
operator|||
name|qt_is_nan
argument_list|(
name|transform
operator|.
name|m22
argument_list|()
argument_list|)
operator|||
name|qt_is_nan
argument_list|(
name|transform
operator|.
name|m23
argument_list|()
argument_list|)
operator|||
name|qt_is_nan
argument_list|(
name|transform
operator|.
name|m31
argument_list|()
argument_list|)
operator|||
name|qt_is_nan
argument_list|(
name|transform
operator|.
name|m32
argument_list|()
argument_list|)
operator|||
name|qt_is_nan
argument_list|(
name|transform
operator|.
name|m33
argument_list|()
argument_list|)
condition|)
return|return;
name|d
operator|->
name|current
operator|.
name|transform
operator|=
name|transform
expr_stmt|;
name|d
operator|->
name|setTransform
argument_list|(
name|transform
operator|.
name|isIdentity
argument_list|()
condition|?
literal|0
else|:
operator|&
name|transform
argument_list|)
expr_stmt|;
name|d
operator|->
name|complexXForm
operator|=
operator|(
name|transform
operator|.
name|m11
argument_list|()
operator|!=
literal|1
operator|||
name|transform
operator|.
name|m22
argument_list|()
operator|!=
literal|1
operator|||
name|transform
operator|.
name|m12
argument_list|()
operator|!=
literal|0
operator|||
name|transform
operator|.
name|m21
argument_list|()
operator|!=
literal|0
operator|)
expr_stmt|;
name|d
operator|->
name|pixelSize
operator|=
name|d
operator|->
name|devicePixelSize
argument_list|(
name|d
operator|->
name|hd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|updateClipPath
name|QCoreGraphicsPaintEngine
operator|::
name|updateClipPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|p
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|NoClip
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|current
operator|.
name|clipEnabled
condition|)
block|{
name|d
operator|->
name|current
operator|.
name|clipEnabled
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|current
operator|.
name|clip
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|d
operator|->
name|setClip
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|current
operator|.
name|clipEnabled
condition|)
name|op
operator|=
name|Qt
operator|::
name|ReplaceClip
expr_stmt|;
name|d
operator|->
name|current
operator|.
name|clipEnabled
operator|=
literal|true
expr_stmt|;
name|QRegion
name|clipRegion
argument_list|(
name|p
operator|.
name|toFillPolygon
argument_list|()
operator|.
name|toPolygon
argument_list|()
argument_list|,
name|p
operator|.
name|fillRule
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|ReplaceClip
condition|)
block|{
name|d
operator|->
name|current
operator|.
name|clip
operator|=
name|clipRegion
expr_stmt|;
name|d
operator|->
name|setClip
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CGRect
name|rect
init|=
name|CGRectMake
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|CGContextClipToRect
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CGMutablePathRef
name|path
init|=
name|qt_mac_compose_path
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|CGContextBeginPath
argument_list|(
name|d
operator|->
name|hd
argument_list|)
expr_stmt|;
name|CGContextAddPath
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|fillRule
argument_list|()
operator|==
name|Qt
operator|::
name|WindingFill
condition|)
name|CGContextClip
argument_list|(
name|d
operator|->
name|hd
argument_list|)
expr_stmt|;
else|else
name|CGContextEOClip
argument_list|(
name|d
operator|->
name|hd
argument_list|)
expr_stmt|;
name|CGPathRelease
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|IntersectClip
condition|)
block|{
name|d
operator|->
name|current
operator|.
name|clip
operator|=
name|d
operator|->
name|current
operator|.
name|clip
operator|.
name|intersected
argument_list|(
name|clipRegion
argument_list|)
expr_stmt|;
name|d
operator|->
name|setClip
argument_list|(
operator|&
name|d
operator|->
name|current
operator|.
name|clip
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
name|void
DECL|function|updateClipRegion
name|QCoreGraphicsPaintEngine
operator|::
name|updateClipRegion
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|clipRegion
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|NoClip
condition|)
block|{
name|d
operator|->
name|current
operator|.
name|clipEnabled
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|current
operator|.
name|clip
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|d
operator|->
name|setClip
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|current
operator|.
name|clipEnabled
condition|)
name|op
operator|=
name|Qt
operator|::
name|ReplaceClip
expr_stmt|;
name|d
operator|->
name|current
operator|.
name|clipEnabled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|IntersectClip
condition|)
name|d
operator|->
name|current
operator|.
name|clip
operator|=
name|d
operator|->
name|current
operator|.
name|clip
operator|.
name|intersected
argument_list|(
name|clipRegion
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|ReplaceClip
condition|)
name|d
operator|->
name|current
operator|.
name|clip
operator|=
name|clipRegion
expr_stmt|;
name|d
operator|->
name|setClip
argument_list|(
operator|&
name|d
operator|->
name|current
operator|.
name|clip
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
name|void
DECL|function|drawPath
name|QCoreGraphicsPaintEngine
operator|::
name|drawPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|p
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|compositionMode
argument_list|()
operator|==
name|QPainter
operator|::
name|CompositionMode_Destination
condition|)
return|return;
name|CGMutablePathRef
name|path
init|=
name|qt_mac_compose_path
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|uchar
name|ops
init|=
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CGStroke
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|fillRule
argument_list|()
operator|==
name|Qt
operator|::
name|WindingFill
condition|)
name|ops
operator||=
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CGFill
expr_stmt|;
else|else
name|ops
operator||=
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CGEOFill
expr_stmt|;
name|CGContextBeginPath
argument_list|(
name|d
operator|->
name|hd
argument_list|)
expr_stmt|;
name|d
operator|->
name|drawPath
argument_list|(
name|ops
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|CGPathRelease
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|drawRects
name|QCoreGraphicsPaintEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRectF
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|compositionMode
argument_list|()
operator|==
name|QPainter
operator|::
name|CompositionMode_Destination
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
name|QRectF
name|r
init|=
name|rects
index|[
name|i
index|]
decl_stmt|;
name|CGMutablePathRef
name|path
init|=
name|CGPathCreateMutable
argument_list|()
decl_stmt|;
name|CGPathAddRect
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|qt_mac_compose_rect
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|drawPath
argument_list|(
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CGFill
operator||
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CGStroke
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|CGPathRelease
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
name|void
DECL|function|drawPoints
name|QCoreGraphicsPaintEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|compositionMode
argument_list|()
operator|==
name|QPainter
operator|::
name|CompositionMode_Destination
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|current
operator|.
name|pen
operator|.
name|capStyle
argument_list|()
operator|==
name|Qt
operator|::
name|FlatCap
condition|)
name|CGContextSetLineCap
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|kCGLineCapSquare
argument_list|)
expr_stmt|;
name|CGMutablePathRef
name|path
init|=
name|CGPathCreateMutable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointCount
condition|;
name|i
operator|++
control|)
block|{
name|float
name|x
init|=
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
decl_stmt|,
name|y
init|=
name|points
index|[
name|i
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
name|CGPathMoveToPoint
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|CGPathAddLineToPoint
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|x
operator|+
literal|0.001
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
name|bool
name|doRestore
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|cosmeticPen
operator|==
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CosmeticNone
operator|&&
operator|!
operator|(
name|state
operator|->
name|renderHints
argument_list|()
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
condition|)
block|{
comment|//we don't want adjusted pens for point rendering
name|doRestore
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|CGContextSetLineWidth
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|d
operator|->
name|current
operator|.
name|pen
operator|.
name|widthF
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|drawPath
argument_list|(
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CGStroke
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|doRestore
condition|)
name|d
operator|->
name|restoreGraphicsState
argument_list|()
expr_stmt|;
name|CGPathRelease
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|current
operator|.
name|pen
operator|.
name|capStyle
argument_list|()
operator|==
name|Qt
operator|::
name|FlatCap
condition|)
name|CGContextSetLineCap
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|kCGLineCapButt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|drawEllipse
name|QCoreGraphicsPaintEngine
operator|::
name|drawEllipse
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|compositionMode
argument_list|()
operator|==
name|QPainter
operator|::
name|CompositionMode_Destination
condition|)
return|return;
name|CGMutablePathRef
name|path
init|=
name|CGPathCreateMutable
argument_list|()
decl_stmt|;
name|CGAffineTransform
name|transform
init|=
name|CGAffineTransformMakeScale
argument_list|(
name|r
operator|.
name|width
argument_list|()
operator|/
name|r
operator|.
name|height
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|CGPathAddArc
argument_list|(
name|path
argument_list|,
operator|&
name|transform
argument_list|,
operator|(
name|r
operator|.
name|x
argument_list|()
operator|+
operator|(
name|r
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|)
operator|)
operator|/
operator|(
name|r
operator|.
name|width
argument_list|()
operator|/
name|r
operator|.
name|height
argument_list|()
operator|)
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
operator|(
name|r
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|)
argument_list|,
name|r
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
literal|0
argument_list|,
operator|(
literal|2
operator|*
name|M_PI
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|drawPath
argument_list|(
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CGFill
operator||
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CGStroke
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|CGPathRelease
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|drawPolygon
name|QCoreGraphicsPaintEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|compositionMode
argument_list|()
operator|==
name|QPainter
operator|::
name|CompositionMode_Destination
condition|)
return|return;
name|CGMutablePathRef
name|path
init|=
name|CGPathCreateMutable
argument_list|()
decl_stmt|;
name|CGPathMoveToPoint
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
argument_list|,
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
name|pointCount
condition|;
operator|++
name|x
control|)
name|CGPathAddLineToPoint
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|points
index|[
name|x
index|]
operator|.
name|x
argument_list|()
argument_list|,
name|points
index|[
name|x
index|]
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|!=
name|PolylineMode
operator|&&
name|points
index|[
literal|0
index|]
operator|!=
name|points
index|[
name|pointCount
operator|-
literal|1
index|]
condition|)
name|CGPathAddLineToPoint
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
argument_list|,
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|uint
name|op
init|=
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CGStroke
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
name|PolylineMode
condition|)
name|op
operator||=
name|mode
operator|==
name|OddEvenMode
condition|?
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CGEOFill
else|:
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CGFill
expr_stmt|;
name|d
operator|->
name|drawPath
argument_list|(
name|op
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|CGPathRelease
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|drawLines
name|QCoreGraphicsPaintEngine
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLineF
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|compositionMode
argument_list|()
operator|==
name|QPainter
operator|::
name|CompositionMode_Destination
condition|)
return|return;
name|CGMutablePathRef
name|path
init|=
name|CGPathCreateMutable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QPointF
name|start
init|=
name|lines
index|[
name|i
index|]
operator|.
name|p1
argument_list|()
decl_stmt|,
name|end
init|=
name|lines
index|[
name|i
index|]
operator|.
name|p2
argument_list|()
decl_stmt|;
name|CGPathMoveToPoint
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|start
operator|.
name|x
argument_list|()
argument_list|,
name|start
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|CGPathAddLineToPoint
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|end
operator|.
name|x
argument_list|()
argument_list|,
name|end
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|drawPath
argument_list|(
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CGStroke
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|CGPathRelease
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QCoreGraphicsPaintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|compositionMode
argument_list|()
operator|==
name|QPainter
operator|::
name|CompositionMode_Destination
condition|)
return|return;
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|bool
name|differentSize
init|=
operator|(
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pm
operator|.
name|width
argument_list|()
argument_list|,
name|pm
operator|.
name|height
argument_list|()
argument_list|)
operator|!=
name|sr
operator|)
decl_stmt|,
name|doRestore
init|=
literal|false
decl_stmt|;
name|CGRect
name|rect
init|=
name|CGRectMake
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CGImageRef
argument_list|>
name|image
decl_stmt|;
name|bool
name|isBitmap
init|=
operator|(
name|pm
operator|.
name|depth
argument_list|()
operator|==
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|isBitmap
condition|)
block|{
name|doRestore
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|saveGraphicsState
argument_list|()
expr_stmt|;
specifier|const
name|QColor
modifier|&
name|col
init|=
name|d
operator|->
name|current
operator|.
name|pen
operator|.
name|color
argument_list|()
decl_stmt|;
name|CGContextSetFillColorWithColor
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|cgColorForQColor
argument_list|(
name|col
argument_list|,
name|d
operator|->
name|pdev
argument_list|)
argument_list|)
expr_stmt|;
name|image
operator|=
name|qt_mac_create_imagemask
argument_list|(
name|pm
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|differentSize
condition|)
block|{
name|QCFType
argument_list|<
name|CGImageRef
argument_list|>
name|img
init|=
name|pm
operator|.
name|toMacCGImageRef
argument_list|()
decl_stmt|;
name|image
operator|=
name|CGImageCreateWithImageInRect
argument_list|(
name|img
argument_list|,
name|CGRectMake
argument_list|(
name|qRound
argument_list|(
name|sr
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|sr
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|sr
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|sr
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|image
operator|=
operator|(
name|CGImageRef
operator|)
name|pm
operator|.
name|macCGHandle
argument_list|()
expr_stmt|;
block|}
name|qt_mac_drawCGImage
argument_list|(
name|d
operator|->
name|hd
argument_list|,
operator|&
name|rect
argument_list|,
name|image
argument_list|)
expr_stmt|;
if|if
condition|(
name|doRestore
condition|)
name|d
operator|->
name|restoreGraphicsState
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QCoreGraphicsPaintEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|img
operator|.
name|isNull
argument_list|()
operator|||
name|state
operator|->
name|compositionMode
argument_list|()
operator|==
name|QPainter
operator|::
name|CompositionMode_Destination
condition|)
return|return;
specifier|const
name|QImage
modifier|*
name|image
decl_stmt|;
name|QCFType
argument_list|<
name|CGImageRef
argument_list|>
name|cgimage
init|=
name|qt_mac_createCGImageFromQImage
argument_list|(
name|img
argument_list|,
operator|&
name|image
argument_list|)
decl_stmt|;
name|CGRect
name|rect
init|=
name|CGRectMake
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|)
operator|!=
name|sr
condition|)
name|cgimage
operator|=
name|CGImageCreateWithImageInRect
argument_list|(
name|cgimage
argument_list|,
name|CGRectMake
argument_list|(
name|sr
operator|.
name|x
argument_list|()
argument_list|,
name|sr
operator|.
name|y
argument_list|()
argument_list|,
name|sr
operator|.
name|width
argument_list|()
argument_list|,
name|sr
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|qt_mac_drawCGImage
argument_list|(
name|d
operator|->
name|hd
argument_list|,
operator|&
name|rect
argument_list|,
name|cgimage
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initialize
name|void
name|QCoreGraphicsPaintEngine
operator|::
name|initialize
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|QCoreGraphicsPaintEngine
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
name|CGContextRef
DECL|function|handle
name|QCoreGraphicsPaintEngine
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|hd
return|;
block|}
end_function
begin_function
name|void
DECL|function|drawTiledPixmap
name|QCoreGraphicsPaintEngine
operator|::
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|compositionMode
argument_list|()
operator|==
name|QPainter
operator|::
name|CompositionMode_Destination
condition|)
return|return;
comment|//save the old state
name|d
operator|->
name|saveGraphicsState
argument_list|()
expr_stmt|;
comment|//setup the pattern
name|QMacPattern
modifier|*
name|qpattern
init|=
operator|new
name|QMacPattern
decl_stmt|;
name|qpattern
operator|->
name|data
operator|.
name|pixmap
operator|=
name|pixmap
expr_stmt|;
name|qpattern
operator|->
name|foreground
operator|=
name|d
operator|->
name|current
operator|.
name|pen
operator|.
name|color
argument_list|()
expr_stmt|;
name|qpattern
operator|->
name|pdev
operator|=
name|d
operator|->
name|pdev
expr_stmt|;
name|CGPatternCallbacks
name|callbks
decl_stmt|;
name|callbks
operator|.
name|version
operator|=
literal|0
expr_stmt|;
name|callbks
operator|.
name|drawPattern
operator|=
name|qt_mac_draw_pattern
expr_stmt|;
name|callbks
operator|.
name|releaseInfo
operator|=
name|qt_mac_dispose_pattern
expr_stmt|;
specifier|const
name|int
name|width
init|=
name|qpattern
operator|->
name|width
argument_list|()
decl_stmt|,
name|height
init|=
name|qpattern
operator|->
name|height
argument_list|()
decl_stmt|;
name|CGAffineTransform
name|trans
init|=
name|CGContextGetCTM
argument_list|(
name|d
operator|->
name|hd
argument_list|)
decl_stmt|;
name|CGPatternRef
name|pat
init|=
name|CGPatternCreate
argument_list|(
name|qpattern
argument_list|,
name|CGRectMake
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
argument_list|,
name|trans
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|kCGPatternTilingNoDistortion
argument_list|,
literal|true
argument_list|,
operator|&
name|callbks
argument_list|)
decl_stmt|;
name|CGColorSpaceRef
name|cs
init|=
name|CGColorSpaceCreatePattern
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CGContextSetFillColorSpace
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|CGFloat
name|component
init|=
literal|1.0
decl_stmt|;
comment|//just one
name|CGContextSetFillPattern
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|pat
argument_list|,
operator|&
name|component
argument_list|)
expr_stmt|;
name|CGSize
name|phase
init|=
name|CGSizeApplyAffineTransform
argument_list|(
name|CGSizeMake
argument_list|(
operator|-
operator|(
name|p
operator|.
name|x
argument_list|()
operator|-
name|r
operator|.
name|x
argument_list|()
operator|)
argument_list|,
operator|-
operator|(
name|p
operator|.
name|y
argument_list|()
operator|-
name|r
operator|.
name|y
argument_list|()
operator|)
argument_list|)
argument_list|,
name|trans
argument_list|)
decl_stmt|;
name|CGContextSetPatternPhase
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|phase
argument_list|)
expr_stmt|;
comment|//fill the rectangle
name|CGRect
name|mac_rect
init|=
name|CGRectMake
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|CGContextFillRect
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|mac_rect
argument_list|)
expr_stmt|;
comment|//restore the state
name|d
operator|->
name|restoreGraphicsState
argument_list|()
expr_stmt|;
comment|//cleanup
name|CGColorSpaceRelease
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|CGPatternRelease
argument_list|(
name|pat
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTextItem
name|void
name|QCoreGraphicsPaintEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|current
operator|.
name|transform
operator|.
name|type
argument_list|()
operator|==
name|QTransform
operator|::
name|TxProject
ifndef|#
directive|ifndef
name|QMAC_NATIVE_GRADIENTS
operator|||
name|painter
argument_list|()
operator|->
name|pen
argument_list|()
operator|.
name|brush
argument_list|()
operator|.
name|gradient
argument_list|()
comment|//Just let the base engine "emulate" the gradient
endif|#
directive|endif
condition|)
block|{
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|pos
argument_list|,
name|item
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|state
operator|->
name|compositionMode
argument_list|()
operator|==
name|QPainter
operator|::
name|CompositionMode_Destination
condition|)
return|return;
specifier|const
name|QTextItemInt
modifier|&
name|ti
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|QPen
name|oldPen
init|=
name|painter
argument_list|()
operator|->
name|pen
argument_list|()
decl_stmt|;
name|QBrush
name|oldBrush
init|=
name|painter
argument_list|()
operator|->
name|brush
argument_list|()
decl_stmt|;
name|QPointF
name|oldBrushOrigin
init|=
name|painter
argument_list|()
operator|->
name|brushOrigin
argument_list|()
decl_stmt|;
name|updatePen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|updateBrush
argument_list|(
name|oldPen
operator|.
name|brush
argument_list|()
argument_list|,
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|type
argument_list|()
operator|==
name|QPaintEngine
operator|::
name|CoreGraphics
argument_list|)
expr_stmt|;
name|QFontEngine
modifier|*
name|fe
init|=
name|ti
operator|.
name|fontEngine
decl_stmt|;
specifier|const
name|bool
name|textAA
init|=
name|state
operator|->
name|renderHints
argument_list|()
operator|&
name|QPainter
operator|::
name|TextAntialiasing
operator|&&
name|fe
operator|->
name|fontDef
operator|.
name|pointSize
operator|>
name|qt_antialiasing_threshold
operator|&&
operator|!
operator|(
name|fe
operator|->
name|fontDef
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoAntialias
operator|)
decl_stmt|;
specifier|const
name|bool
name|lineAA
init|=
name|state
operator|->
name|renderHints
argument_list|()
operator|&
name|QPainter
operator|::
name|Antialiasing
decl_stmt|;
if|if
condition|(
name|textAA
operator|!=
name|lineAA
condition|)
name|CGContextSetShouldAntialias
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|textAA
argument_list|)
expr_stmt|;
if|if
condition|(
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
condition|)
block|{
switch|switch
condition|(
name|fe
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QFontEngine
operator|::
name|Mac
case|:
cast|static_cast
argument_list|<
name|QCoreTextFontEngine
operator|*
argument_list|>
argument_list|(
name|fe
argument_list|)
operator|->
name|draw
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|,
name|ti
argument_list|,
name|paintDevice
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFontEngine
operator|::
name|Box
case|:
name|d
operator|->
name|drawBoxTextItem
argument_list|(
name|pos
argument_list|,
name|ti
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|textAA
operator|!=
name|lineAA
condition|)
name|CGContextSetShouldAntialias
argument_list|(
name|d
operator|->
name|hd
argument_list|,
operator|!
name|textAA
argument_list|)
expr_stmt|;
name|updatePen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
name|updateBrush
argument_list|(
name|oldBrush
argument_list|,
name|oldBrushOrigin
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|QPainter
operator|::
name|RenderHints
DECL|function|supportedRenderHints
name|QCoreGraphicsPaintEngine
operator|::
name|supportedRenderHints
parameter_list|()
specifier|const
block|{
return|return
name|QPainter
operator|::
name|RenderHints
argument_list|(
name|QPainter
operator|::
name|Antialiasing
operator||
name|QPainter
operator|::
name|TextAntialiasing
operator||
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|)
return|;
block|}
end_function
begin_enum
DECL|enum|CGCompositeMode
enum|enum
name|CGCompositeMode
block|{
DECL|enumerator|kCGCompositeModeClear
name|kCGCompositeModeClear
init|=
literal|0
block|,
DECL|enumerator|kCGCompositeModeCopy
name|kCGCompositeModeCopy
init|=
literal|1
block|,
DECL|enumerator|kCGCompositeModeSourceOver
name|kCGCompositeModeSourceOver
init|=
literal|2
block|,
DECL|enumerator|kCGCompositeModeSourceIn
name|kCGCompositeModeSourceIn
init|=
literal|3
block|,
DECL|enumerator|kCGCompositeModeSourceOut
name|kCGCompositeModeSourceOut
init|=
literal|4
block|,
DECL|enumerator|kCGCompositeModeSourceAtop
name|kCGCompositeModeSourceAtop
init|=
literal|5
block|,
DECL|enumerator|kCGCompositeModeDestinationOver
name|kCGCompositeModeDestinationOver
init|=
literal|6
block|,
DECL|enumerator|kCGCompositeModeDestinationIn
name|kCGCompositeModeDestinationIn
init|=
literal|7
block|,
DECL|enumerator|kCGCompositeModeDestinationOut
name|kCGCompositeModeDestinationOut
init|=
literal|8
block|,
DECL|enumerator|kCGCompositeModeDestinationAtop
name|kCGCompositeModeDestinationAtop
init|=
literal|9
block|,
DECL|enumerator|kCGCompositeModeXOR
name|kCGCompositeModeXOR
init|=
literal|10
block|,
DECL|enumerator|kCGCompositeModePlusDarker
name|kCGCompositeModePlusDarker
init|=
literal|11
block|,
comment|// (max (0, (1-d) + (1-s)))
DECL|enumerator|kCGCompositeModePlusLighter
name|kCGCompositeModePlusLighter
init|=
literal|12
block|,
comment|// (min (1, s + d))
block|}
enum|;
end_enum
begin_extern
extern|extern
literal|"C"
block|{
specifier|extern
name|void
name|CGContextSetCompositeOperation
parameter_list|(
name|CGContextRef
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
end_extern
begin_comment
comment|// private function, but is in all versions of OS X.
end_comment
begin_function
name|void
DECL|function|updateCompositionMode
name|QCoreGraphicsPaintEngine
operator|::
name|updateCompositionMode
parameter_list|(
name|QPainter
operator|::
name|CompositionMode
name|mode
parameter_list|)
block|{
if|#
directive|if
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
name|MAC_OS_X_VERSION_10_5
operator|)
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|>=
name|QSysInfo
operator|::
name|MV_10_5
condition|)
block|{
name|int
name|cg_mode
init|=
name|kCGBlendModeNormal
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|QPainter
operator|::
name|CompositionMode_Multiply
case|:
name|cg_mode
operator|=
name|kCGBlendModeMultiply
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Screen
case|:
name|cg_mode
operator|=
name|kCGBlendModeScreen
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Overlay
case|:
name|cg_mode
operator|=
name|kCGBlendModeOverlay
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Darken
case|:
name|cg_mode
operator|=
name|kCGBlendModeDarken
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Lighten
case|:
name|cg_mode
operator|=
name|kCGBlendModeLighten
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_ColorDodge
case|:
name|cg_mode
operator|=
name|kCGBlendModeColorDodge
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_ColorBurn
case|:
name|cg_mode
operator|=
name|kCGBlendModeColorBurn
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_HardLight
case|:
name|cg_mode
operator|=
name|kCGBlendModeHardLight
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SoftLight
case|:
name|cg_mode
operator|=
name|kCGBlendModeSoftLight
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Difference
case|:
name|cg_mode
operator|=
name|kCGBlendModeDifference
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Exclusion
case|:
name|cg_mode
operator|=
name|kCGBlendModeExclusion
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Plus
case|:
name|cg_mode
operator|=
name|kCGBlendModePlusLighter
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceOver
case|:
name|cg_mode
operator|=
name|kCGBlendModeNormal
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationOver
case|:
name|cg_mode
operator|=
name|kCGBlendModeDestinationOver
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Clear
case|:
name|cg_mode
operator|=
name|kCGBlendModeClear
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Source
case|:
name|cg_mode
operator|=
name|kCGBlendModeCopy
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Destination
case|:
name|cg_mode
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceIn
case|:
name|cg_mode
operator|=
name|kCGBlendModeSourceIn
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationIn
case|:
name|cg_mode
operator|=
name|kCGCompositeModeDestinationIn
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceOut
case|:
name|cg_mode
operator|=
name|kCGBlendModeSourceOut
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationOut
case|:
name|cg_mode
operator|=
name|kCGBlendModeDestinationOver
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceAtop
case|:
name|cg_mode
operator|=
name|kCGBlendModeSourceAtop
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationAtop
case|:
name|cg_mode
operator|=
name|kCGBlendModeDestinationAtop
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Xor
case|:
name|cg_mode
operator|=
name|kCGBlendModeXOR
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|cg_mode
operator|>
operator|-
literal|1
condition|)
block|{
name|CGContextSetBlendMode
argument_list|(
name|d_func
argument_list|()
operator|->
name|hd
argument_list|,
name|CGBlendMode
argument_list|(
name|cg_mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
endif|#
directive|endif
comment|// The standard porter duff ops.
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|>=
name|QSysInfo
operator|::
name|MV_10_3
operator|&&
name|mode
operator|<=
name|QPainter
operator|::
name|CompositionMode_Xor
condition|)
block|{
name|int
name|cg_mode
init|=
name|kCGCompositeModeCopy
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|QPainter
operator|::
name|CompositionMode_SourceOver
case|:
name|cg_mode
operator|=
name|kCGCompositeModeSourceOver
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationOver
case|:
name|cg_mode
operator|=
name|kCGCompositeModeDestinationOver
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Clear
case|:
name|cg_mode
operator|=
name|kCGCompositeModeClear
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QCoreGraphicsPaintEngine: Unhandled composition mode %d"
argument_list|,
operator|(
name|int
operator|)
name|mode
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Source
case|:
name|cg_mode
operator|=
name|kCGCompositeModeCopy
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Destination
case|:
name|cg_mode
operator|=
name|CGCompositeMode
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceIn
case|:
name|cg_mode
operator|=
name|kCGCompositeModeSourceIn
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationIn
case|:
name|cg_mode
operator|=
name|kCGCompositeModeDestinationIn
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceOut
case|:
name|cg_mode
operator|=
name|kCGCompositeModeSourceOut
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationOut
case|:
name|cg_mode
operator|=
name|kCGCompositeModeDestinationOut
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceAtop
case|:
name|cg_mode
operator|=
name|kCGCompositeModeSourceAtop
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationAtop
case|:
name|cg_mode
operator|=
name|kCGCompositeModeDestinationAtop
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Xor
case|:
name|cg_mode
operator|=
name|kCGCompositeModeXOR
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|cg_mode
operator|>
operator|-
literal|1
condition|)
name|CGContextSetCompositeOperation
argument_list|(
name|d_func
argument_list|()
operator|->
name|hd
argument_list|,
name|CGCompositeMode
argument_list|(
name|cg_mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
name|MAC_OS_X_VERSION_10_4
operator|)
name|bool
name|needPrivateAPI
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|>=
name|QSysInfo
operator|::
name|MV_10_4
condition|)
block|{
name|int
name|cg_mode
init|=
name|kCGBlendModeNormal
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|QPainter
operator|::
name|CompositionMode_Multiply
case|:
name|cg_mode
operator|=
name|kCGBlendModeMultiply
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Screen
case|:
name|cg_mode
operator|=
name|kCGBlendModeScreen
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Overlay
case|:
name|cg_mode
operator|=
name|kCGBlendModeOverlay
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Darken
case|:
name|cg_mode
operator|=
name|kCGBlendModeDarken
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Lighten
case|:
name|cg_mode
operator|=
name|kCGBlendModeLighten
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_ColorDodge
case|:
name|cg_mode
operator|=
name|kCGBlendModeColorDodge
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_ColorBurn
case|:
name|cg_mode
operator|=
name|kCGBlendModeColorBurn
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_HardLight
case|:
name|cg_mode
operator|=
name|kCGBlendModeHardLight
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SoftLight
case|:
name|cg_mode
operator|=
name|kCGBlendModeSoftLight
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Difference
case|:
name|cg_mode
operator|=
name|kCGBlendModeDifference
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Exclusion
case|:
name|cg_mode
operator|=
name|kCGBlendModeExclusion
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Plus
case|:
name|needPrivateAPI
operator|=
literal|true
expr_stmt|;
name|cg_mode
operator|=
name|kCGCompositeModePlusLighter
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
operator|!
name|needPrivateAPI
condition|)
name|CGContextSetBlendMode
argument_list|(
name|d_func
argument_list|()
operator|->
name|hd
argument_list|,
name|CGBlendMode
argument_list|(
name|cg_mode
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|CGContextSetCompositeOperation
argument_list|(
name|d_func
argument_list|()
operator|->
name|hd
argument_list|,
name|CGCompositeMode
argument_list|(
name|cg_mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
block|}
end_function
begin_function
name|void
DECL|function|updateRenderHints
name|QCoreGraphicsPaintEngine
operator|::
name|updateRenderHints
parameter_list|(
name|QPainter
operator|::
name|RenderHints
name|hints
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|CGContextSetShouldAntialias
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|hints
operator|&
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|CGFloat
name|ScaleFactor
init|=
name|qt_mac_get_scalefactor
argument_list|()
decl_stmt|;
if|if
condition|(
name|ScaleFactor
operator|>
literal|1.
condition|)
block|{
name|CGContextSetInterpolationQuality
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|kCGInterpolationHigh
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CGContextSetInterpolationQuality
argument_list|(
name|d
operator|->
name|hd
argument_list|,
operator|(
name|hints
operator|&
name|QPainter
operator|::
name|SmoothPixmapTransform
operator|)
condition|?
name|kCGInterpolationHigh
else|:
name|kCGInterpolationNone
argument_list|)
expr_stmt|;
block|}
name|bool
name|textAntialiasing
init|=
operator|(
name|hints
operator|&
name|QPainter
operator|::
name|TextAntialiasing
operator|)
operator|==
name|QPainter
operator|::
name|TextAntialiasing
decl_stmt|;
if|if
condition|(
operator|!
name|textAntialiasing
operator|||
name|d
operator|->
name|disabledSmoothFonts
condition|)
block|{
name|d
operator|->
name|disabledSmoothFonts
operator|=
operator|!
name|textAntialiasing
expr_stmt|;
name|CGContextSetShouldSmoothFonts
argument_list|(
name|d
operator|->
name|hd
argument_list|,
name|textAntialiasing
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*     Returns the size of one device pixel in user-space coordinates. */
end_comment
begin_function
DECL|function|devicePixelSize
name|QPointF
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|devicePixelSize
parameter_list|(
name|CGContextRef
parameter_list|)
block|{
name|QPointF
name|p1
init|=
name|current
operator|.
name|transform
operator|.
name|inverted
argument_list|()
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QPointF
name|p2
init|=
name|current
operator|.
name|transform
operator|.
name|inverted
argument_list|()
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QPointF
argument_list|(
name|qAbs
argument_list|(
name|p2
operator|.
name|x
argument_list|()
operator|-
name|p1
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qAbs
argument_list|(
name|p2
operator|.
name|y
argument_list|()
operator|-
name|p1
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     Adjusts the pen width so we get correct line widths in the     non-transformed, aliased case. */
end_comment
begin_function
DECL|function|adjustPenWidth
name|float
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|adjustPenWidth
parameter_list|(
name|float
name|penWidth
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|float
name|ret
init|=
name|penWidth
decl_stmt|;
if|if
condition|(
operator|!
name|complexXForm
operator|&&
operator|!
operator|(
name|q
operator|->
name|state
operator|->
name|renderHints
argument_list|()
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
condition|)
block|{
if|if
condition|(
name|penWidth
operator|<
literal|2
condition|)
name|ret
operator|=
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|penWidth
operator|<
literal|3
condition|)
name|ret
operator|=
literal|1.5
expr_stmt|;
else|else
name|ret
operator|=
name|penWidth
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
name|void
DECL|function|setStrokePen
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|setStrokePen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
comment|//pencap
name|CGLineCap
name|cglinecap
init|=
name|kCGLineCapButt
decl_stmt|;
if|if
condition|(
name|pen
operator|.
name|capStyle
argument_list|()
operator|==
name|Qt
operator|::
name|SquareCap
condition|)
name|cglinecap
operator|=
name|kCGLineCapSquare
expr_stmt|;
elseif|else
if|if
condition|(
name|pen
operator|.
name|capStyle
argument_list|()
operator|==
name|Qt
operator|::
name|RoundCap
condition|)
name|cglinecap
operator|=
name|kCGLineCapRound
expr_stmt|;
name|CGContextSetLineCap
argument_list|(
name|hd
argument_list|,
name|cglinecap
argument_list|)
expr_stmt|;
name|CGContextSetLineWidth
argument_list|(
name|hd
argument_list|,
name|adjustPenWidth
argument_list|(
name|pen
operator|.
name|widthF
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//join
name|CGLineJoin
name|cglinejoin
init|=
name|kCGLineJoinMiter
decl_stmt|;
if|if
condition|(
name|pen
operator|.
name|joinStyle
argument_list|()
operator|==
name|Qt
operator|::
name|BevelJoin
condition|)
name|cglinejoin
operator|=
name|kCGLineJoinBevel
expr_stmt|;
elseif|else
if|if
condition|(
name|pen
operator|.
name|joinStyle
argument_list|()
operator|==
name|Qt
operator|::
name|RoundJoin
condition|)
name|cglinejoin
operator|=
name|kCGLineJoinRound
expr_stmt|;
name|CGContextSetLineJoin
argument_list|(
name|hd
argument_list|,
name|cglinejoin
argument_list|)
expr_stmt|;
comment|//    CGContextSetMiterLimit(hd, pen.miterLimit());
comment|//pen style
name|QVector
argument_list|<
name|CGFloat
argument_list|>
name|linedashes
decl_stmt|;
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|CustomDashLine
condition|)
block|{
name|QVector
argument_list|<
name|qreal
argument_list|>
name|customs
init|=
name|pen
operator|.
name|dashPattern
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|customs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|linedashes
operator|.
name|append
argument_list|(
name|customs
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|DashLine
condition|)
block|{
name|linedashes
operator|.
name|append
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|linedashes
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|DotLine
condition|)
block|{
name|linedashes
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|linedashes
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|DashDotLine
condition|)
block|{
name|linedashes
operator|.
name|append
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|linedashes
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|linedashes
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|linedashes
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|DashDotDotLine
condition|)
block|{
name|linedashes
operator|.
name|append
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|linedashes
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|linedashes
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|linedashes
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|linedashes
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|linedashes
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|const
name|CGFloat
name|cglinewidth
init|=
name|pen
operator|.
name|widthF
argument_list|()
operator|<=
literal|0.0f
condition|?
literal|1.0f
else|:
name|float
argument_list|(
name|pen
operator|.
name|widthF
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|linedashes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|linedashes
index|[
name|i
index|]
operator|*=
name|cglinewidth
expr_stmt|;
if|if
condition|(
name|cglinewidth
operator|<
literal|3
operator|&&
operator|(
name|cglinecap
operator|==
name|kCGLineCapSquare
operator|||
name|cglinecap
operator|==
name|kCGLineCapRound
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|i
operator|%
literal|2
operator|)
condition|)
name|linedashes
index|[
name|i
index|]
operator|+=
name|cglinewidth
operator|/
literal|2
expr_stmt|;
else|else
name|linedashes
index|[
name|i
index|]
operator|-=
name|cglinewidth
operator|/
literal|2
expr_stmt|;
block|}
block|}
name|CGContextSetLineDash
argument_list|(
name|hd
argument_list|,
name|pen
operator|.
name|dashOffset
argument_list|()
operator|*
name|cglinewidth
argument_list|,
name|linedashes
operator|.
name|data
argument_list|()
argument_list|,
name|linedashes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// color
name|CGContextSetStrokeColorWithColor
argument_list|(
name|hd
argument_list|,
name|cgColorForQColor
argument_list|(
name|pen
operator|.
name|color
argument_list|()
argument_list|,
name|pdev
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Add our own patterns here to deal with the fact that the coordinate system
end_comment
begin_comment
comment|// is flipped vertically with Quartz2D.
end_comment
begin_function
DECL|function|qt_mac_patternForBrush
specifier|static
specifier|const
name|uchar
modifier|*
name|qt_mac_patternForBrush
parameter_list|(
name|int
name|brushStyle
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|brushStyle
operator|>
name|Qt
operator|::
name|SolidPattern
operator|&&
name|brushStyle
operator|<
name|Qt
operator|::
name|LinearGradientPattern
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|uchar
name|dense1_pat
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x44
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x44
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|dense2_pat
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x22
block|,
literal|0x00
block|,
literal|0x88
block|,
literal|0x00
block|,
literal|0x22
block|,
literal|0x00
block|,
literal|0x88
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|dense3_pat
index|[]
init|=
block|{
literal|0x11
block|,
literal|0xaa
block|,
literal|0x44
block|,
literal|0xaa
block|,
literal|0x11
block|,
literal|0xaa
block|,
literal|0x44
block|,
literal|0xaa
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|dense4_pat
index|[]
init|=
block|{
literal|0xaa
block|,
literal|0x55
block|,
literal|0xaa
block|,
literal|0x55
block|,
literal|0xaa
block|,
literal|0x55
block|,
literal|0xaa
block|,
literal|0x55
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|dense5_pat
index|[]
init|=
block|{
literal|0xee
block|,
literal|0x55
block|,
literal|0xbb
block|,
literal|0x55
block|,
literal|0xee
block|,
literal|0x55
block|,
literal|0xbb
block|,
literal|0x55
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|dense6_pat
index|[]
init|=
block|{
literal|0xff
block|,
literal|0xdd
block|,
literal|0xff
block|,
literal|0x77
block|,
literal|0xff
block|,
literal|0xdd
block|,
literal|0xff
block|,
literal|0x77
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|dense7_pat
index|[]
init|=
block|{
literal|0xff
block|,
literal|0xff
block|,
literal|0xbb
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xbb
block|,
literal|0xff
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|hor_pat
index|[]
init|=
block|{
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|ver_pat
index|[]
init|=
block|{
literal|0xef
block|,
literal|0xef
block|,
literal|0xef
block|,
literal|0xef
block|,
literal|0xef
block|,
literal|0xef
block|,
literal|0xef
block|,
literal|0xef
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|cross_pat
index|[]
init|=
block|{
literal|0xef
block|,
literal|0xef
block|,
literal|0xef
block|,
literal|0xef
block|,
literal|0x00
block|,
literal|0xef
block|,
literal|0xef
block|,
literal|0xef
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|fdiag_pat
index|[]
init|=
block|{
literal|0x7f
block|,
literal|0xbf
block|,
literal|0xdf
block|,
literal|0xef
block|,
literal|0xf7
block|,
literal|0xfb
block|,
literal|0xfd
block|,
literal|0xfe
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|bdiag_pat
index|[]
init|=
block|{
literal|0xfe
block|,
literal|0xfd
block|,
literal|0xfb
block|,
literal|0xf7
block|,
literal|0xef
block|,
literal|0xdf
block|,
literal|0xbf
block|,
literal|0x7f
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|dcross_pat
index|[]
init|=
block|{
literal|0x7e
block|,
literal|0xbd
block|,
literal|0xdb
block|,
literal|0xe7
block|,
literal|0xe7
block|,
literal|0xdb
block|,
literal|0xbd
block|,
literal|0x7e
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
modifier|*
specifier|const
name|pat_tbl
index|[]
init|=
block|{
name|dense1_pat
block|,
name|dense2_pat
block|,
name|dense3_pat
block|,
name|dense4_pat
block|,
name|dense5_pat
block|,
name|dense6_pat
block|,
name|dense7_pat
block|,
name|hor_pat
block|,
name|ver_pat
block|,
name|cross_pat
block|,
name|bdiag_pat
block|,
name|fdiag_pat
block|,
name|dcross_pat
block|}
decl_stmt|;
return|return
name|pat_tbl
index|[
name|brushStyle
operator|-
name|Qt
operator|::
name|Dense1Pattern
index|]
return|;
block|}
end_function
begin_function
DECL|function|setFillBrush
name|void
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|setFillBrush
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|)
block|{
comment|// pattern
name|Qt
operator|::
name|BrushStyle
name|bs
init|=
name|current
operator|.
name|brush
operator|.
name|style
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_MAC_USE_NATIVE_GRADIENTS
if|if
condition|(
name|bs
operator|==
name|Qt
operator|::
name|LinearGradientPattern
operator|||
name|bs
operator|==
name|Qt
operator|::
name|RadialGradientPattern
condition|)
block|{
specifier|const
name|QGradient
modifier|*
name|grad
init|=
cast|static_cast
argument_list|<
specifier|const
name|QGradient
operator|*
argument_list|>
argument_list|(
name|current
operator|.
name|brush
operator|.
name|gradient
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|drawGradientNatively
argument_list|(
name|grad
argument_list|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|grad
operator|->
name|spread
argument_list|()
operator|==
name|QGradient
operator|::
name|PadSpread
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|CGFloat
name|domain
index|[]
init|=
block|{
literal|0.0f
block|,
operator|+
literal|1.0f
block|}
decl_stmt|;
specifier|static
specifier|const
name|CGFunctionCallbacks
name|callbacks
init|=
block|{
literal|0
block|,
name|qt_mac_color_gradient_function
block|,
literal|0
block|}
decl_stmt|;
name|CGFunctionRef
name|fill_func
init|=
name|CGFunctionCreate
argument_list|(
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
operator|&
name|current
operator|.
name|brush
argument_list|)
argument_list|,
literal|1
argument_list|,
name|domain
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
operator|&
name|callbacks
argument_list|)
decl_stmt|;
name|CGColorSpaceRef
name|colorspace
init|=
name|qt_mac_colorSpaceForDeviceType
argument_list|(
name|pdev
argument_list|)
decl_stmt|;
if|if
condition|(
name|bs
operator|==
name|Qt
operator|::
name|LinearGradientPattern
condition|)
block|{
specifier|const
name|QLinearGradient
modifier|*
name|linearGrad
init|=
cast|static_cast
argument_list|<
specifier|const
name|QLinearGradient
operator|*
argument_list|>
argument_list|(
name|grad
argument_list|)
decl_stmt|;
specifier|const
name|QPointF
name|start
argument_list|(
name|linearGrad
operator|->
name|start
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QPointF
name|stop
argument_list|(
name|linearGrad
operator|->
name|finalStop
argument_list|()
argument_list|)
decl_stmt|;
name|shading
operator|=
name|CGShadingCreateAxial
argument_list|(
name|colorspace
argument_list|,
name|CGPointMake
argument_list|(
name|start
operator|.
name|x
argument_list|()
argument_list|,
name|start
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|CGPointMake
argument_list|(
name|stop
operator|.
name|x
argument_list|()
argument_list|,
name|stop
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|fill_func
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|bs
operator|==
name|Qt
operator|::
name|RadialGradientPattern
argument_list|)
expr_stmt|;
specifier|const
name|QRadialGradient
modifier|*
name|radialGrad
init|=
cast|static_cast
argument_list|<
specifier|const
name|QRadialGradient
operator|*
argument_list|>
argument_list|(
name|grad
argument_list|)
decl_stmt|;
name|QPointF
name|center
argument_list|(
name|radialGrad
operator|->
name|center
argument_list|()
argument_list|)
decl_stmt|;
name|QPointF
name|focal
argument_list|(
name|radialGrad
operator|->
name|focalPoint
argument_list|()
argument_list|)
decl_stmt|;
name|qreal
name|radius
init|=
name|radialGrad
operator|->
name|radius
argument_list|()
decl_stmt|;
name|qreal
name|focalRadius
init|=
name|radialGrad
operator|->
name|focalRadius
argument_list|()
decl_stmt|;
name|shading
operator|=
name|CGShadingCreateRadial
argument_list|(
name|colorspace
argument_list|,
name|CGPointMake
argument_list|(
name|focal
operator|.
name|x
argument_list|()
argument_list|,
name|focal
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|focalRadius
argument_list|,
name|CGPointMake
argument_list|(
name|center
operator|.
name|x
argument_list|()
argument_list|,
name|center
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|radius
argument_list|,
name|fill_func
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|CGFunctionRelease
argument_list|(
name|fill_func
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
endif|#
directive|endif
if|if
condition|(
name|bs
operator|!=
name|Qt
operator|::
name|SolidPattern
operator|&&
name|bs
operator|!=
name|Qt
operator|::
name|NoBrush
ifndef|#
directive|ifndef
name|QT_MAC_USE_NATIVE_GRADIENTS
operator|&&
operator|(
name|bs
argument_list|<
name|Qt
operator|::
name|LinearGradientPattern
operator|||
name|bs
argument_list|>
name|Qt
operator|::
name|ConicalGradientPattern
operator|)
endif|#
directive|endif
condition|)
block|{
name|QMacPattern
modifier|*
name|qpattern
init|=
operator|new
name|QMacPattern
decl_stmt|;
name|qpattern
operator|->
name|pdev
operator|=
name|pdev
expr_stmt|;
name|CGFloat
name|components
index|[
literal|4
index|]
init|=
block|{
literal|1.0
block|,
literal|1.0
block|,
literal|1.0
block|,
literal|1.0
block|}
decl_stmt|;
name|CGColorSpaceRef
name|base_colorspace
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bs
operator|==
name|Qt
operator|::
name|TexturePattern
condition|)
block|{
name|qpattern
operator|->
name|data
operator|.
name|pixmap
operator|=
name|current
operator|.
name|brush
operator|.
name|texture
argument_list|()
expr_stmt|;
if|if
condition|(
name|qpattern
operator|->
name|data
operator|.
name|pixmap
operator|.
name|isQBitmap
argument_list|()
condition|)
block|{
specifier|const
name|QColor
modifier|&
name|col
init|=
name|current
operator|.
name|brush
operator|.
name|color
argument_list|()
decl_stmt|;
name|components
index|[
literal|0
index|]
operator|=
name|qt_mac_convert_color_to_cg
argument_list|(
name|col
operator|.
name|red
argument_list|()
argument_list|)
expr_stmt|;
name|components
index|[
literal|1
index|]
operator|=
name|qt_mac_convert_color_to_cg
argument_list|(
name|col
operator|.
name|green
argument_list|()
argument_list|)
expr_stmt|;
name|components
index|[
literal|2
index|]
operator|=
name|qt_mac_convert_color_to_cg
argument_list|(
name|col
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
name|base_colorspace
operator|=
name|QCoreGraphicsPaintEngine
operator|::
name|macGenericColorSpace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|qpattern
operator|->
name|as_mask
operator|=
literal|true
expr_stmt|;
name|qpattern
operator|->
name|data
operator|.
name|bytes
operator|=
name|qt_mac_patternForBrush
argument_list|(
name|bs
argument_list|)
expr_stmt|;
specifier|const
name|QColor
modifier|&
name|col
init|=
name|current
operator|.
name|brush
operator|.
name|color
argument_list|()
decl_stmt|;
name|components
index|[
literal|0
index|]
operator|=
name|qt_mac_convert_color_to_cg
argument_list|(
name|col
operator|.
name|red
argument_list|()
argument_list|)
expr_stmt|;
name|components
index|[
literal|1
index|]
operator|=
name|qt_mac_convert_color_to_cg
argument_list|(
name|col
operator|.
name|green
argument_list|()
argument_list|)
expr_stmt|;
name|components
index|[
literal|2
index|]
operator|=
name|qt_mac_convert_color_to_cg
argument_list|(
name|col
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
name|base_colorspace
operator|=
name|QCoreGraphicsPaintEngine
operator|::
name|macGenericColorSpace
argument_list|()
expr_stmt|;
block|}
name|int
name|width
init|=
name|qpattern
operator|->
name|width
argument_list|()
decl_stmt|,
name|height
init|=
name|qpattern
operator|->
name|height
argument_list|()
decl_stmt|;
name|qpattern
operator|->
name|foreground
operator|=
name|current
operator|.
name|brush
operator|.
name|color
argument_list|()
expr_stmt|;
name|CGColorSpaceRef
name|fill_colorspace
init|=
name|CGColorSpaceCreatePattern
argument_list|(
name|base_colorspace
argument_list|)
decl_stmt|;
name|CGContextSetFillColorSpace
argument_list|(
name|hd
argument_list|,
name|fill_colorspace
argument_list|)
expr_stmt|;
name|CGAffineTransform
name|xform
init|=
name|CGContextGetCTM
argument_list|(
name|hd
argument_list|)
decl_stmt|;
name|xform
operator|=
name|CGAffineTransformConcat
argument_list|(
name|qt_mac_convert_transform_to_cg
argument_list|(
name|current
operator|.
name|brush
operator|.
name|transform
argument_list|()
argument_list|)
argument_list|,
name|xform
argument_list|)
expr_stmt|;
name|xform
operator|=
name|CGAffineTransformTranslate
argument_list|(
name|xform
argument_list|,
name|offset
operator|.
name|x
argument_list|()
argument_list|,
name|offset
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|CGPatternCallbacks
name|callbks
decl_stmt|;
name|callbks
operator|.
name|version
operator|=
literal|0
expr_stmt|;
name|callbks
operator|.
name|drawPattern
operator|=
name|qt_mac_draw_pattern
expr_stmt|;
name|callbks
operator|.
name|releaseInfo
operator|=
name|qt_mac_dispose_pattern
expr_stmt|;
name|CGPatternRef
name|fill_pattern
init|=
name|CGPatternCreate
argument_list|(
name|qpattern
argument_list|,
name|CGRectMake
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
argument_list|,
name|xform
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|kCGPatternTilingNoDistortion
argument_list|,
operator|!
name|base_colorspace
argument_list|,
operator|&
name|callbks
argument_list|)
decl_stmt|;
name|CGContextSetFillPattern
argument_list|(
name|hd
argument_list|,
name|fill_pattern
argument_list|,
name|components
argument_list|)
expr_stmt|;
name|CGPatternRelease
argument_list|(
name|fill_pattern
argument_list|)
expr_stmt|;
name|CGColorSpaceRelease
argument_list|(
name|fill_colorspace
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bs
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
name|CGContextSetFillColorWithColor
argument_list|(
name|hd
argument_list|,
name|cgColorForQColor
argument_list|(
name|current
operator|.
name|brush
operator|.
name|color
argument_list|()
argument_list|,
name|pdev
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
name|void
DECL|function|setClip
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|setClip
parameter_list|(
specifier|const
name|QRegion
modifier|*
name|rgn
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|hd
condition|)
block|{
name|resetClip
argument_list|()
expr_stmt|;
name|QRegion
name|sysClip
init|=
name|q
operator|->
name|systemClip
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sysClip
operator|.
name|isEmpty
argument_list|()
condition|)
name|qt_mac_clip_cg
argument_list|(
name|hd
argument_list|,
name|sysClip
argument_list|,
operator|&
name|orig_xform
argument_list|)
expr_stmt|;
if|if
condition|(
name|rgn
condition|)
name|qt_mac_clip_cg
argument_list|(
name|hd
argument_list|,
operator|*
name|rgn
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_struct
DECL|struct|qt_mac_cg_transform_path
struct|struct
name|qt_mac_cg_transform_path
block|{
DECL|member|path
name|CGMutablePathRef
name|path
decl_stmt|;
DECL|member|transform
name|CGAffineTransform
name|transform
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|qt_mac_cg_transform_path_apply
name|void
name|qt_mac_cg_transform_path_apply
parameter_list|(
name|void
modifier|*
name|info
parameter_list|,
specifier|const
name|CGPathElement
modifier|*
name|element
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|info
operator|&&
name|element
argument_list|)
expr_stmt|;
name|qt_mac_cg_transform_path
modifier|*
name|t
init|=
operator|(
name|qt_mac_cg_transform_path
operator|*
operator|)
name|info
decl_stmt|;
switch|switch
condition|(
name|element
operator|->
name|type
condition|)
block|{
case|case
name|kCGPathElementMoveToPoint
case|:
name|CGPathMoveToPoint
argument_list|(
name|t
operator|->
name|path
argument_list|,
operator|&
name|t
operator|->
name|transform
argument_list|,
name|element
operator|->
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|,
name|element
operator|->
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|)
expr_stmt|;
break|break;
case|case
name|kCGPathElementAddLineToPoint
case|:
name|CGPathAddLineToPoint
argument_list|(
name|t
operator|->
name|path
argument_list|,
operator|&
name|t
operator|->
name|transform
argument_list|,
name|element
operator|->
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|,
name|element
operator|->
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|)
expr_stmt|;
break|break;
case|case
name|kCGPathElementAddQuadCurveToPoint
case|:
name|CGPathAddQuadCurveToPoint
argument_list|(
name|t
operator|->
name|path
argument_list|,
operator|&
name|t
operator|->
name|transform
argument_list|,
name|element
operator|->
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|,
name|element
operator|->
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|,
name|element
operator|->
name|points
index|[
literal|1
index|]
operator|.
name|x
argument_list|,
name|element
operator|->
name|points
index|[
literal|1
index|]
operator|.
name|y
argument_list|)
expr_stmt|;
break|break;
case|case
name|kCGPathElementAddCurveToPoint
case|:
name|CGPathAddCurveToPoint
argument_list|(
name|t
operator|->
name|path
argument_list|,
operator|&
name|t
operator|->
name|transform
argument_list|,
name|element
operator|->
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|,
name|element
operator|->
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|,
name|element
operator|->
name|points
index|[
literal|1
index|]
operator|.
name|x
argument_list|,
name|element
operator|->
name|points
index|[
literal|1
index|]
operator|.
name|y
argument_list|,
name|element
operator|->
name|points
index|[
literal|2
index|]
operator|.
name|x
argument_list|,
name|element
operator|->
name|points
index|[
literal|2
index|]
operator|.
name|y
argument_list|)
expr_stmt|;
break|break;
case|case
name|kCGPathElementCloseSubpath
case|:
name|CGPathCloseSubpath
argument_list|(
name|t
operator|->
name|path
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qDebug
argument_list|()
operator|<<
literal|"Unhandled path transform type: "
operator|<<
name|element
operator|->
name|type
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawPath
name|void
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|drawPath
parameter_list|(
name|uchar
name|ops
parameter_list|,
name|CGMutablePathRef
name|path
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QCoreGraphicsPaintEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|(
name|ops
operator|&
operator|(
name|CGFill
operator||
name|CGEOFill
operator|)
operator|)
operator|!=
operator|(
name|CGFill
operator||
name|CGEOFill
operator|)
argument_list|)
expr_stmt|;
comment|//can't really happen
if|if
condition|(
operator|(
name|ops
operator|&
operator|(
name|CGFill
operator||
name|CGEOFill
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|shading
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|CGContextBeginPath
argument_list|(
name|hd
argument_list|)
expr_stmt|;
name|CGContextAddPath
argument_list|(
name|hd
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|saveGraphicsState
argument_list|()
expr_stmt|;
if|if
condition|(
name|ops
operator|&
name|CGFill
condition|)
name|CGContextClip
argument_list|(
name|hd
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ops
operator|&
name|CGEOFill
condition|)
name|CGContextEOClip
argument_list|(
name|hd
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|brush
operator|.
name|gradient
argument_list|()
operator|->
name|coordinateMode
argument_list|()
operator|==
name|QGradient
operator|::
name|ObjectBoundingMode
condition|)
block|{
name|CGRect
name|boundingBox
init|=
name|CGPathGetBoundingBox
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|CGContextConcatCTM
argument_list|(
name|hd
argument_list|,
name|CGAffineTransformMake
argument_list|(
name|boundingBox
operator|.
name|size
operator|.
name|width
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|boundingBox
operator|.
name|size
operator|.
name|height
argument_list|,
name|boundingBox
operator|.
name|origin
operator|.
name|x
argument_list|,
name|boundingBox
operator|.
name|origin
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CGContextDrawShading
argument_list|(
name|hd
argument_list|,
name|shading
argument_list|)
expr_stmt|;
name|restoreGraphicsState
argument_list|()
expr_stmt|;
name|ops
operator|&=
operator|~
name|CGFill
expr_stmt|;
name|ops
operator|&=
operator|~
name|CGEOFill
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|current
operator|.
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
condition|)
block|{
name|ops
operator|&=
operator|~
name|CGFill
expr_stmt|;
name|ops
operator|&=
operator|~
name|CGEOFill
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|ops
operator|&
name|CGStroke
operator|)
operator|&&
name|current
operator|.
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoPen
condition|)
name|ops
operator|&=
operator|~
name|CGStroke
expr_stmt|;
if|if
condition|(
name|ops
operator|&
operator|(
name|CGEOFill
operator||
name|CGFill
operator|)
condition|)
block|{
name|CGContextBeginPath
argument_list|(
name|hd
argument_list|)
expr_stmt|;
name|CGContextAddPath
argument_list|(
name|hd
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|ops
operator|&
name|CGEOFill
condition|)
block|{
name|CGContextEOFillPath
argument_list|(
name|hd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CGContextFillPath
argument_list|(
name|hd
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Avoid saving and restoring the context if we can.
specifier|const
name|bool
name|needContextSave
init|=
operator|(
name|cosmeticPen
operator|!=
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CosmeticNone
operator|||
operator|!
operator|(
name|q
operator|->
name|state
operator|->
name|renderHints
argument_list|()
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|ops
operator|&
name|CGStroke
condition|)
block|{
if|if
condition|(
name|needContextSave
condition|)
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|CGContextBeginPath
argument_list|(
name|hd
argument_list|)
expr_stmt|;
comment|// Translate a fraction of a pixel size in the y direction
comment|// to make sure that primitives painted at pixel borders
comment|// fills the right pixel. This is needed since the y xais
comment|// in the Quartz coordinate system is inverted compared to Qt.
if|if
condition|(
operator|!
operator|(
name|q
operator|->
name|state
operator|->
name|renderHints
argument_list|()
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidLine
operator|||
name|current
operator|.
name|pen
operator|.
name|width
argument_list|()
operator|>=
literal|3
condition|)
name|CGContextTranslateCTM
argument_list|(
name|hd
argument_list|,
name|double
argument_list|(
name|pixelSize
operator|.
name|x
argument_list|()
argument_list|)
operator|*
literal|0.25
argument_list|,
name|double
argument_list|(
name|pixelSize
operator|.
name|y
argument_list|()
argument_list|)
operator|*
literal|0.25
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|current
operator|.
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|DotLine
operator|&&
name|QSysInfo
operator|::
name|MacintoshVersion
operator|==
name|QSysInfo
operator|::
name|MV_10_3
condition|)
empty_stmt|;
comment|// Do nothing.
else|else
name|CGContextTranslateCTM
argument_list|(
name|hd
argument_list|,
literal|0
argument_list|,
name|double
argument_list|(
name|pixelSize
operator|.
name|y
argument_list|()
argument_list|)
operator|*
literal|0.1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cosmeticPen
operator|!=
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CosmeticNone
condition|)
block|{
comment|// If antialiazing is enabled, use the cosmetic pen size directly.
if|if
condition|(
name|q
operator|->
name|state
operator|->
name|renderHints
argument_list|()
operator|&
name|QPainter
operator|::
name|Antialiasing
condition|)
name|CGContextSetLineWidth
argument_list|(
name|hd
argument_list|,
name|cosmeticPenSize
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|current
operator|.
name|pen
operator|.
name|widthF
argument_list|()
operator|<=
literal|1
condition|)
name|CGContextSetLineWidth
argument_list|(
name|hd
argument_list|,
name|cosmeticPenSize
operator|*
literal|0.9f
argument_list|)
expr_stmt|;
else|else
name|CGContextSetLineWidth
argument_list|(
name|hd
argument_list|,
name|cosmeticPenSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cosmeticPen
operator|==
name|QCoreGraphicsPaintEnginePrivate
operator|::
name|CosmeticTransformPath
condition|)
block|{
name|qt_mac_cg_transform_path
name|t
decl_stmt|;
name|t
operator|.
name|transform
operator|=
name|qt_mac_convert_transform_to_cg
argument_list|(
name|current
operator|.
name|transform
argument_list|)
expr_stmt|;
name|t
operator|.
name|path
operator|=
name|CGPathCreateMutable
argument_list|()
expr_stmt|;
name|CGPathApply
argument_list|(
name|path
argument_list|,
operator|&
name|t
argument_list|,
name|qt_mac_cg_transform_path_apply
argument_list|)
expr_stmt|;
comment|//transform the path
name|setTransform
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//unset the context transform
name|CGContextSetLineWidth
argument_list|(
name|hd
argument_list|,
name|cosmeticPenSize
argument_list|)
expr_stmt|;
name|CGContextAddPath
argument_list|(
name|hd
argument_list|,
name|t
operator|.
name|path
argument_list|)
expr_stmt|;
name|CGPathRelease
argument_list|(
name|t
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CGContextAddPath
argument_list|(
name|hd
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|CGContextStrokePath
argument_list|(
name|hd
argument_list|)
expr_stmt|;
if|if
condition|(
name|needContextSave
condition|)
name|restoreGraphicsState
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
