begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmime.h"
end_include
begin_comment
comment|//#define USE_INTERNET_CONFIG
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|USE_INTERNET_CONFIG
end_ifndef
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|"qfileinfo.h"
end_include
begin_include
include|#
directive|include
file|"qtextstream.h"
end_include
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<sys/fcntl.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qimagewriter.h"
end_include
begin_include
include|#
directive|include
file|"qimagereader.h"
end_include
begin_include
include|#
directive|include
file|"qdatastream.h"
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|"qregexp.h"
end_include
begin_include
include|#
directive|include
file|"qurl.h"
end_include
begin_include
include|#
directive|include
file|"qmap.h"
end_include
begin_include
include|#
directive|include
file|<private/qt_mac_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC32
end_ifdef
begin_include
include|#
directive|include
file|<QuickTime/QuickTime.h>
end_include
begin_include
include|#
directive|include
file|<qlibrary.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|CGImageRef
name|qt_mac_createCGImageFromQImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|QImage
modifier|*
modifier|*
name|imagePtr
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// qpaintengine_mac.cpp
end_comment
begin_typedef
DECL|typedef|MimeList
typedef|typedef
name|QList
argument_list|<
name|QMacPasteboardMime
modifier|*
argument_list|>
name|MimeList
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|MimeList
argument_list|,
argument|globalMimeList
argument_list|)
end_macro
begin_function
DECL|function|cleanup_mimes
specifier|static
name|void
name|cleanup_mimes
parameter_list|()
block|{
name|MimeList
modifier|*
name|mimes
init|=
name|globalMimeList
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|mimes
operator|->
name|isEmpty
argument_list|()
condition|)
operator|delete
name|mimes
operator|->
name|takeFirst
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QStringList
argument_list|,
argument|globalDraggedTypesList
argument_list|)
end_macro
begin_comment
comment|/*!     \fn void qRegisterDraggedTypes(const QStringList&types)     \relates QMacPasteboardMime      Registers the given \a types as custom pasteboard types.      This function should be called to enable the Drag and Drop events      for custom pasteboard types on Cocoa implementations. This is required      in addition to a QMacPasteboardMime subclass implementation. By default      drag and drop is enabled for all standard pasteboard types.       \sa QMacPasteboardMime */
end_comment
begin_function
DECL|function|qRegisterDraggedTypes
name|Q_WIDGETS_EXPORT
name|void
name|qRegisterDraggedTypes
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|types
parameter_list|)
block|{
operator|(
operator|*
name|globalDraggedTypesList
argument_list|()
operator|)
operator|+=
name|types
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qEnabledDraggedTypes
specifier|const
name|QStringList
modifier|&
name|qEnabledDraggedTypes
parameter_list|()
block|{
return|return
operator|(
operator|*
name|globalDraggedTypesList
argument_list|()
operator|)
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   QDnD debug facilities  *****************************************************************************/
end_comment
begin_comment
comment|//#define DEBUG_MIME_MAPS
end_comment
begin_comment
comment|//functions
end_comment
begin_function_decl
specifier|extern
name|QString
name|qt_mac_from_pascal_string
parameter_list|(
specifier|const
name|Str255
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//qglobal.cpp
end_comment
begin_function_decl
specifier|extern
name|void
name|qt_mac_from_pascal_string
parameter_list|(
name|QString
parameter_list|,
name|Str255
parameter_list|,
name|TextEncoding
name|encoding
init|=
literal|0
parameter_list|,
name|int
name|len
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//qglobal.cpp
end_comment
begin_decl_stmt
DECL|variable|qt_mac_mime_type
name|ScrapFlavorType
name|qt_mac_mime_type
init|=
literal|'CUTE'
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_mac_mime_typeUTI
name|CFStringRef
name|qt_mac_mime_typeUTI
init|=
name|CFSTR
argument_list|(
literal|"com.pasteboard.trolltech.marker"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!   \class QMacPasteboardMime   \brief The QMacPasteboardMime class converts between a MIME type and a   \l{http://developer.apple.com/macosx/uniformtypeidentifiers.html}{Uniform   Type Identifier (UTI)} format.   \since 4.2    \ingroup draganddrop   \inmodule QtWidgets    Qt's drag and drop and clipboard facilities use the MIME   standard. On X11, this maps trivially to the Xdnd protocol. On   Mac, although some applications use MIME to describe clipboard   contents, it is more common to use Apple's UTI format.    QMacPasteboardMime's role is to bridge the gap between MIME and UTI;   By subclasses this class, one can extend Qt's drag and drop   and clipboard handling to convert to and from unsupported, or proprietary, UTI formats.    A subclass of QMacPasteboardMime will automatically be registered, and active, upon instantiation.    Qt has predefined support for the following UTIs:   \list     \i public.utf8-plain-text - converts to "text/plain"     \i public.utf16-plain-text - converts to "text/plain"     \i public.html - converts to "text/html"     \i public.url - converts to "text/uri-list"     \i public.file-url - converts to "text/uri-list"     \i public.tiff - converts to "application/x-qt-image"     \i public.vcard - converts to "text/plain"     \i com.apple.traditional-mac-plain-text - converts to "text/plain"     \i com.apple.pict - converts to "application/x-qt-image"   \endlist    When working with MIME data, Qt will interate through all instances of QMacPasteboardMime to   find an instance that can convert to, or from, a specific MIME type. It will do this by calling   canConvert() on each instance, starting with (and choosing) the last created instance first.   The actual conversions will be done by using convertToMime() and convertFromMime().    \note The API uses the term "flavor" in some cases. This is for backwards   compatibility reasons, and should now be understood as UTIs. */
end_comment
begin_comment
comment|/*! \enum QMacPasteboardMime::QMacPasteboardMimeType     \internal */
end_comment
begin_comment
comment|/*!   Constructs a new conversion object of type \a t, adding it to the   globally accessed list of available convertors. */
end_comment
begin_constructor
DECL|function|QMacPasteboardMime
name|QMacPasteboardMime
operator|::
name|QMacPasteboardMime
parameter_list|(
name|char
name|t
parameter_list|)
member_init_list|:
name|type
argument_list|(
name|t
argument_list|)
block|{
name|globalMimeList
argument_list|()
operator|->
name|append
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Destroys a conversion object, removing it from the global   list of available convertors. */
end_comment
begin_destructor
DECL|function|~QMacPasteboardMime
name|QMacPasteboardMime
operator|::
name|~
name|QMacPasteboardMime
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QApplication
operator|::
name|closingDown
argument_list|()
condition|)
name|globalMimeList
argument_list|()
operator|->
name|removeAll
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_class
DECL|class|QMacPasteboardMimeAny
class|class
name|QMacPasteboardMimeAny
super|:
specifier|public
name|QMacPasteboardMime
block|{
private|private:
public|public:
DECL|function|QMacPasteboardMimeAny
name|QMacPasteboardMimeAny
parameter_list|()
member_init_list|:
name|QMacPasteboardMime
argument_list|(
name|MIME_QT_CONVERTOR
operator||
name|MIME_ALL
argument_list|)
block|{     }
DECL|function|~QMacPasteboardMimeAny
name|~
name|QMacPasteboardMimeAny
parameter_list|()
block|{     }
name|QString
name|convertorName
parameter_list|()
function_decl|;
name|QString
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
function_decl|;
name|QString
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
function_decl|;
name|bool
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QVariant
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|convertorName
name|QString
name|QMacPasteboardMimeAny
operator|::
name|convertorName
parameter_list|()
block|{
return|return
name|QLatin1String
argument_list|(
literal|"Any-Mime"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|flavorFor
name|QString
name|QMacPasteboardMimeAny
operator|::
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
block|{
comment|// do not handle the mime type name in the drag pasteboard
if|if
condition|(
name|mime
operator|==
name|QLatin1String
argument_list|(
literal|"application/x-qt-mime-type-name"
argument_list|)
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|ret
init|=
name|QLatin1String
argument_list|(
literal|"com.trolltech.anymime."
argument_list|)
operator|+
name|mime
decl_stmt|;
return|return
name|ret
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"--"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mimeFor
name|QString
name|QMacPasteboardMimeAny
operator|::
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
block|{
specifier|const
name|QString
name|any_prefix
init|=
name|QLatin1String
argument_list|(
literal|"com.trolltech.anymime."
argument_list|)
decl_stmt|;
if|if
condition|(
name|flav
operator|.
name|size
argument_list|()
operator|>
name|any_prefix
operator|.
name|length
argument_list|()
operator|&&
name|flav
operator|.
name|startsWith
argument_list|(
name|any_prefix
argument_list|)
condition|)
return|return
name|flav
operator|.
name|mid
argument_list|(
name|any_prefix
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"--"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|canConvert
name|bool
name|QMacPasteboardMimeAny
operator|::
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
return|return
name|mimeFor
argument_list|(
name|flav
argument_list|)
operator|==
name|mime
return|;
block|}
end_function
begin_function
DECL|function|convertToMime
name|QVariant
name|QMacPasteboardMimeAny
operator|::
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
name|qWarning
argument_list|(
literal|"QMacPasteboardMimeAny: Cannot handle multiple member data"
argument_list|)
expr_stmt|;
name|QVariant
name|ret
decl_stmt|;
if|if
condition|(
name|mime
operator|==
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
name|ret
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|data
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ret
operator|=
name|data
operator|.
name|first
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|convertFromMime
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QMacPasteboardMimeAny
operator|::
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
parameter_list|)
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|ret
decl_stmt|;
if|if
condition|(
name|mime
operator|==
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
name|ret
operator|.
name|append
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|append
argument_list|(
name|data
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_class
DECL|class|QMacPasteboardMimeTypeName
class|class
name|QMacPasteboardMimeTypeName
super|:
specifier|public
name|QMacPasteboardMime
block|{
private|private:
public|public:
DECL|function|QMacPasteboardMimeTypeName
name|QMacPasteboardMimeTypeName
parameter_list|()
member_init_list|:
name|QMacPasteboardMime
argument_list|(
name|MIME_QT_CONVERTOR
operator||
name|MIME_ALL
argument_list|)
block|{     }
DECL|function|~QMacPasteboardMimeTypeName
name|~
name|QMacPasteboardMimeTypeName
parameter_list|()
block|{     }
name|QString
name|convertorName
parameter_list|()
function_decl|;
name|QString
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
function_decl|;
name|QString
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
function_decl|;
name|bool
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QVariant
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|convertorName
name|QString
name|QMacPasteboardMimeTypeName
operator|::
name|convertorName
parameter_list|()
block|{
return|return
name|QLatin1String
argument_list|(
literal|"Qt-Mime-Type"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|flavorFor
name|QString
name|QMacPasteboardMimeTypeName
operator|::
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
block|{
if|if
condition|(
name|mime
operator|==
name|QLatin1String
argument_list|(
literal|"application/x-qt-mime-type-name"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"com.trolltech.qt.MimeTypeName"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mimeFor
name|QString
name|QMacPasteboardMimeTypeName
operator|::
name|mimeFor
parameter_list|(
name|QString
parameter_list|)
block|{
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|canConvert
name|bool
name|QMacPasteboardMimeTypeName
operator|::
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
name|QString
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|convertToMime
name|QVariant
name|QMacPasteboardMimeTypeName
operator|::
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
parameter_list|,
name|QString
parameter_list|)
block|{
name|QVariant
name|ret
decl_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|convertFromMime
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QMacPasteboardMimeTypeName
operator|::
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
name|QVariant
parameter_list|,
name|QString
parameter_list|)
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|ret
decl_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|QString
argument_list|(
literal|"x-qt-mime-type-name"
argument_list|)
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_class
DECL|class|QMacPasteboardMimePlainText
class|class
name|QMacPasteboardMimePlainText
super|:
specifier|public
name|QMacPasteboardMime
block|{
public|public:
DECL|function|QMacPasteboardMimePlainText
name|QMacPasteboardMimePlainText
parameter_list|()
member_init_list|:
name|QMacPasteboardMime
argument_list|(
name|MIME_ALL
argument_list|)
block|{ }
name|QString
name|convertorName
parameter_list|()
function_decl|;
name|QString
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
function_decl|;
name|QString
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
function_decl|;
name|bool
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QVariant
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|convertorName
name|QString
name|QMacPasteboardMimePlainText
operator|::
name|convertorName
parameter_list|()
block|{
return|return
name|QLatin1String
argument_list|(
literal|"PlainText"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|flavorFor
name|QString
name|QMacPasteboardMimePlainText
operator|::
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
block|{
if|if
condition|(
name|mime
operator|==
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"com.apple.traditional-mac-plain-text"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mimeFor
name|QString
name|QMacPasteboardMimePlainText
operator|::
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
block|{
if|if
condition|(
name|flav
operator|==
name|QLatin1String
argument_list|(
literal|"com.apple.traditional-mac-plain-text"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|canConvert
name|bool
name|QMacPasteboardMimePlainText
operator|::
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
return|return
name|flavorFor
argument_list|(
name|mime
argument_list|)
operator|==
name|flav
return|;
block|}
end_function
begin_function
DECL|function|convertToMime
name|QVariant
name|QMacPasteboardMimePlainText
operator|::
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimetype
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flavor
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
name|qWarning
argument_list|(
literal|"QMacPasteboardMimePlainText: Cannot handle multiple member data"
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
modifier|&
name|firstData
init|=
name|data
operator|.
name|first
argument_list|()
decl_stmt|;
name|QVariant
name|ret
decl_stmt|;
if|if
condition|(
name|flavor
operator|==
name|QCFString
argument_list|(
name|QLatin1String
argument_list|(
literal|"com.apple.traditional-mac-plain-text"
argument_list|)
argument_list|)
condition|)
block|{
name|QCFString
name|str
argument_list|(
name|CFStringCreateWithBytes
argument_list|(
name|kCFAllocatorDefault
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|UInt8
operator|*
argument_list|>
argument_list|(
name|firstData
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|firstData
operator|.
name|size
argument_list|()
argument_list|,
name|CFStringGetSystemEncoding
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|ret
operator|=
name|QString
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QMime::convertToMime: unhandled mimetype: %s"
argument_list|,
name|qPrintable
argument_list|(
name|mimetype
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|convertFromMime
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QMacPasteboardMimePlainText
operator|::
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flavor
parameter_list|)
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|ret
decl_stmt|;
name|QString
name|string
init|=
name|data
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|flavor
operator|==
name|QCFString
argument_list|(
name|QLatin1String
argument_list|(
literal|"com.apple.traditional-mac-plain-text"
argument_list|)
argument_list|)
condition|)
name|ret
operator|.
name|append
argument_list|(
name|string
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_class
DECL|class|QMacPasteboardMimeUnicodeText
class|class
name|QMacPasteboardMimeUnicodeText
super|:
specifier|public
name|QMacPasteboardMime
block|{
public|public:
DECL|function|QMacPasteboardMimeUnicodeText
name|QMacPasteboardMimeUnicodeText
parameter_list|()
member_init_list|:
name|QMacPasteboardMime
argument_list|(
name|MIME_ALL
argument_list|)
block|{ }
name|QString
name|convertorName
parameter_list|()
function_decl|;
name|QString
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
function_decl|;
name|QString
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
function_decl|;
name|bool
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QVariant
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|convertorName
name|QString
name|QMacPasteboardMimeUnicodeText
operator|::
name|convertorName
parameter_list|()
block|{
return|return
name|QLatin1String
argument_list|(
literal|"UnicodeText"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|flavorFor
name|QString
name|QMacPasteboardMimeUnicodeText
operator|::
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
block|{
if|if
condition|(
name|mime
operator|==
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"public.utf16-plain-text"
argument_list|)
return|;
name|int
name|i
init|=
name|mime
operator|.
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"charset="
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|QString
name|cs
argument_list|(
name|mime
operator|.
name|mid
argument_list|(
name|i
operator|+
literal|8
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
name|i
operator|=
name|cs
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
name|cs
operator|=
name|cs
operator|.
name|left
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|==
name|QLatin1String
argument_list|(
literal|"system"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"public.utf8-plain-text"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|cs
operator|==
name|QLatin1String
argument_list|(
literal|"iso-10646-ucs-2"
argument_list|)
operator|||
name|cs
operator|==
name|QLatin1String
argument_list|(
literal|"utf16"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"public.utf16-plain-text"
argument_list|)
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mimeFor
name|QString
name|QMacPasteboardMimeUnicodeText
operator|::
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
block|{
if|if
condition|(
name|flav
operator|==
name|QLatin1String
argument_list|(
literal|"public.utf16-plain-text"
argument_list|)
operator|||
name|flav
operator|==
name|QLatin1String
argument_list|(
literal|"public.utf8-plain-text"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|canConvert
name|bool
name|QMacPasteboardMimeUnicodeText
operator|::
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
return|return
name|flavorFor
argument_list|(
name|mime
argument_list|)
operator|==
name|flav
return|;
block|}
end_function
begin_function
DECL|function|convertToMime
name|QVariant
name|QMacPasteboardMimeUnicodeText
operator|::
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimetype
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flavor
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
name|qWarning
argument_list|(
literal|"QMacPasteboardMimeUnicodeText: Cannot handle multiple member data"
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
modifier|&
name|firstData
init|=
name|data
operator|.
name|first
argument_list|()
decl_stmt|;
comment|// I can only handle two types (system and unicode) so deal with them that way
name|QVariant
name|ret
decl_stmt|;
if|if
condition|(
name|flavor
operator|==
name|QLatin1String
argument_list|(
literal|"public.utf8-plain-text"
argument_list|)
condition|)
block|{
name|QCFString
name|str
argument_list|(
name|CFStringCreateWithBytes
argument_list|(
name|kCFAllocatorDefault
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|UInt8
operator|*
argument_list|>
argument_list|(
name|firstData
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|firstData
operator|.
name|size
argument_list|()
argument_list|,
name|CFStringGetSystemEncoding
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|ret
operator|=
name|QString
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flavor
operator|==
name|QLatin1String
argument_list|(
literal|"public.utf16-plain-text"
argument_list|)
condition|)
block|{
name|ret
operator|=
name|QString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|firstData
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|firstData
operator|.
name|size
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QMime::convertToMime: unhandled mimetype: %s"
argument_list|,
name|qPrintable
argument_list|(
name|mimetype
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|convertFromMime
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QMacPasteboardMimeUnicodeText
operator|::
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flavor
parameter_list|)
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|ret
decl_stmt|;
name|QString
name|string
init|=
name|data
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|flavor
operator|==
name|QLatin1String
argument_list|(
literal|"public.utf8-plain-text"
argument_list|)
condition|)
name|ret
operator|.
name|append
argument_list|(
name|string
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|flavor
operator|==
name|QLatin1String
argument_list|(
literal|"public.utf16-plain-text"
argument_list|)
condition|)
name|ret
operator|.
name|append
argument_list|(
name|QByteArray
argument_list|(
operator|(
name|char
operator|*
operator|)
name|string
operator|.
name|utf16
argument_list|()
argument_list|,
name|string
operator|.
name|length
argument_list|()
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_class
DECL|class|QMacPasteboardMimeHTMLText
class|class
name|QMacPasteboardMimeHTMLText
super|:
specifier|public
name|QMacPasteboardMime
block|{
public|public:
DECL|function|QMacPasteboardMimeHTMLText
name|QMacPasteboardMimeHTMLText
parameter_list|()
member_init_list|:
name|QMacPasteboardMime
argument_list|(
name|MIME_ALL
argument_list|)
block|{ }
name|QString
name|convertorName
parameter_list|()
function_decl|;
name|QString
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
function_decl|;
name|QString
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
function_decl|;
name|bool
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QVariant
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|convertorName
name|QString
name|QMacPasteboardMimeHTMLText
operator|::
name|convertorName
parameter_list|()
block|{
return|return
name|QLatin1String
argument_list|(
literal|"HTML"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|flavorFor
name|QString
name|QMacPasteboardMimeHTMLText
operator|::
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
block|{
if|if
condition|(
name|mime
operator|==
name|QLatin1String
argument_list|(
literal|"text/html"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"public.html"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mimeFor
name|QString
name|QMacPasteboardMimeHTMLText
operator|::
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
block|{
if|if
condition|(
name|flav
operator|==
name|QLatin1String
argument_list|(
literal|"public.html"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"text/html"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|canConvert
name|bool
name|QMacPasteboardMimeHTMLText
operator|::
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
return|return
name|flavorFor
argument_list|(
name|mime
argument_list|)
operator|==
name|flav
return|;
block|}
end_function
begin_function
DECL|function|convertToMime
name|QVariant
name|QMacPasteboardMimeHTMLText
operator|::
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flavor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|canConvert
argument_list|(
name|mimeType
argument_list|,
name|flavor
argument_list|)
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|data
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
name|qWarning
argument_list|(
literal|"QMacPasteboardMimeHTMLText: Cannot handle multiple member data"
argument_list|)
expr_stmt|;
return|return
name|data
operator|.
name|first
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|convertFromMime
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QMacPasteboardMimeHTMLText
operator|::
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flavor
parameter_list|)
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|canConvert
argument_list|(
name|mime
argument_list|,
name|flavor
argument_list|)
condition|)
return|return
name|ret
return|;
name|ret
operator|.
name|append
argument_list|(
name|data
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC32
end_ifdef
begin_comment
comment|// This can be removed once 10.6 is the minimum (or we have to require 64-bit) whichever comes first.
end_comment
begin_typedef
DECL|typedef|PtrGraphicsImportSetDataHandle
typedef|typedef
name|ComponentResult
function_decl|(
modifier|*
name|PtrGraphicsImportSetDataHandle
function_decl|)
parameter_list|(
name|GraphicsImportComponent
parameter_list|,
name|Handle
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGraphicsImportCreateCGImage
typedef|typedef
name|ComponentResult
function_decl|(
modifier|*
name|PtrGraphicsImportCreateCGImage
function_decl|)
parameter_list|(
name|GraphicsImportComponent
parameter_list|,
name|CGImageRef
modifier|*
parameter_list|,
name|UInt32
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGraphicsExportSetInputCGImage
typedef|typedef
name|ComponentResult
function_decl|(
modifier|*
name|PtrGraphicsExportSetInputCGImage
function_decl|)
parameter_list|(
name|GraphicsExportComponent
parameter_list|,
name|CGImageRef
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGraphicsExportSetOutputHandle
typedef|typedef
name|ComponentResult
function_decl|(
modifier|*
name|PtrGraphicsExportSetOutputHandle
function_decl|)
parameter_list|(
name|GraphicsExportComponent
parameter_list|,
name|Handle
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGraphicsExportDoExport
typedef|typedef
name|ComponentResult
function_decl|(
modifier|*
name|PtrGraphicsExportDoExport
function_decl|)
parameter_list|(
name|GraphicsExportComponent
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrGraphicsImportSetDataHandle
specifier|static
name|PtrGraphicsImportSetDataHandle
name|ptrGraphicsImportSetDataHandle
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrGraphicsImportCreateCGImage
specifier|static
name|PtrGraphicsImportCreateCGImage
name|ptrGraphicsImportCreateCGImage
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrGraphicsExportSetInputCGImage
specifier|static
name|PtrGraphicsExportSetInputCGImage
name|ptrGraphicsExportSetInputCGImage
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrGraphicsExportSetOutputHandle
specifier|static
name|PtrGraphicsExportSetOutputHandle
name|ptrGraphicsExportSetOutputHandle
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrGraphicsExportDoExport
specifier|static
name|PtrGraphicsExportDoExport
name|ptrGraphicsExportDoExport
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|resolveMimeQuickTimeSymbols
specifier|static
name|bool
name|resolveMimeQuickTimeSymbols
parameter_list|()
block|{
if|if
condition|(
name|ptrGraphicsImportSetDataHandle
operator|==
literal|0
condition|)
block|{
name|QLibrary
name|library
argument_list|(
name|QLatin1String
argument_list|(
literal|"/System/Library/Frameworks/QuickTime.framework/QuickTime"
argument_list|)
argument_list|)
decl_stmt|;
name|ptrGraphicsImportSetDataHandle
operator|=
cast|reinterpret_cast
argument_list|<
name|PtrGraphicsImportSetDataHandle
argument_list|>
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"GraphicsImportSetDataHandle"
argument_list|)
argument_list|)
expr_stmt|;
name|ptrGraphicsImportCreateCGImage
operator|=
cast|reinterpret_cast
argument_list|<
name|PtrGraphicsImportCreateCGImage
argument_list|>
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"GraphicsImportCreateCGImage"
argument_list|)
argument_list|)
expr_stmt|;
name|ptrGraphicsExportSetInputCGImage
operator|=
cast|reinterpret_cast
argument_list|<
name|PtrGraphicsExportSetInputCGImage
argument_list|>
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"GraphicsExportSetInputCGImage"
argument_list|)
argument_list|)
expr_stmt|;
name|ptrGraphicsExportSetOutputHandle
operator|=
cast|reinterpret_cast
argument_list|<
name|PtrGraphicsExportSetOutputHandle
argument_list|>
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"GraphicsExportSetOutputHandle"
argument_list|)
argument_list|)
expr_stmt|;
name|ptrGraphicsExportDoExport
operator|=
cast|reinterpret_cast
argument_list|<
name|PtrGraphicsExportDoExport
argument_list|>
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"GraphicsExportDoExport"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ptrGraphicsImportSetDataHandle
operator|!=
literal|0
operator|&&
name|ptrGraphicsImportCreateCGImage
operator|!=
literal|0
operator|&&
name|ptrGraphicsExportSetInputCGImage
operator|!=
literal|0
operator|&&
name|ptrGraphicsExportSetOutputHandle
operator|!=
literal|0
operator|&&
name|ptrGraphicsExportDoExport
operator|!=
literal|0
return|;
block|}
end_function
begin_class
DECL|class|QMacPasteboardMimePict
class|class
name|QMacPasteboardMimePict
super|:
specifier|public
name|QMacPasteboardMime
block|{
public|public:
DECL|function|QMacPasteboardMimePict
name|QMacPasteboardMimePict
parameter_list|()
member_init_list|:
name|QMacPasteboardMime
argument_list|(
name|MIME_ALL
argument_list|)
block|{ }
name|QString
name|convertorName
parameter_list|()
function_decl|;
name|QString
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
function_decl|;
name|QString
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
function_decl|;
name|bool
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QVariant
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|convertorName
name|QString
name|QMacPasteboardMimePict
operator|::
name|convertorName
parameter_list|()
block|{
return|return
name|QLatin1String
argument_list|(
literal|"Pict"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|flavorFor
name|QString
name|QMacPasteboardMimePict
operator|::
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
block|{
if|if
condition|(
name|mime
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/x-qt-image"
argument_list|)
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"com.apple.pict"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mimeFor
name|QString
name|QMacPasteboardMimePict
operator|::
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
block|{
if|if
condition|(
name|flav
operator|==
name|QLatin1String
argument_list|(
literal|"com.apple.pict"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"application/x-qt-image"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|canConvert
name|bool
name|QMacPasteboardMimePict
operator|::
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
return|return
name|flav
operator|==
name|QLatin1String
argument_list|(
literal|"com.apple.pict"
argument_list|)
operator|&&
name|mime
operator|==
name|QLatin1String
argument_list|(
literal|"application/x-qt-image"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convertToMime
name|QVariant
name|QMacPasteboardMimePict
operator|::
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
name|qWarning
argument_list|(
literal|"QMacPasteboardMimePict: Cannot handle multiple member data"
argument_list|)
expr_stmt|;
name|QVariant
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|resolveMimeQuickTimeSymbols
argument_list|()
condition|)
return|return
name|ret
return|;
if|if
condition|(
operator|!
name|canConvert
argument_list|(
name|mime
argument_list|,
name|flav
argument_list|)
condition|)
return|return
name|ret
return|;
specifier|const
name|QByteArray
modifier|&
name|a
init|=
name|data
operator|.
name|first
argument_list|()
decl_stmt|;
comment|// This function expects the 512 header (just to skip it, so create the extra space for it).
name|Handle
name|pic
init|=
name|NewHandle
argument_list|(
name|a
operator|.
name|size
argument_list|()
operator|+
literal|512
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
operator|*
name|pic
operator|+
literal|512
argument_list|,
name|a
operator|.
name|constData
argument_list|()
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|GraphicsImportComponent
name|graphicsImporter
decl_stmt|;
name|ComponentResult
name|result
init|=
name|OpenADefaultComponent
argument_list|(
name|GraphicsImporterComponentType
argument_list|,
name|kQTFileTypePicture
argument_list|,
operator|&
name|graphicsImporter
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CGImageRef
argument_list|>
name|cgImage
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
name|result
operator|=
name|ptrGraphicsImportSetDataHandle
argument_list|(
name|graphicsImporter
argument_list|,
name|pic
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
name|result
operator|=
name|ptrGraphicsImportCreateCGImage
argument_list|(
name|graphicsImporter
argument_list|,
operator|&
name|cgImage
argument_list|,
name|kGraphicsImportCreateCGImageUsingCurrentSettings
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
name|ret
operator|=
name|QVariant
argument_list|(
name|QPixmap
operator|::
name|fromMacCGImageRef
argument_list|(
name|cgImage
argument_list|)
operator|.
name|toImage
argument_list|()
argument_list|)
expr_stmt|;
name|CloseComponent
argument_list|(
name|graphicsImporter
argument_list|)
expr_stmt|;
name|DisposeHandle
argument_list|(
name|pic
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|convertFromMime
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QMacPasteboardMimePict
operator|::
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|variant
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|resolveMimeQuickTimeSymbols
argument_list|()
condition|)
return|return
name|ret
return|;
if|if
condition|(
operator|!
name|canConvert
argument_list|(
name|mime
argument_list|,
name|flav
argument_list|)
condition|)
return|return
name|ret
return|;
name|QCFType
argument_list|<
name|CGImageRef
argument_list|>
name|cgimage
init|=
name|qt_mac_createCGImageFromQImage
argument_list|(
name|qvariant_cast
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
decl_stmt|;
name|Handle
name|pic
init|=
name|NewHandle
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|GraphicsExportComponent
name|graphicsExporter
decl_stmt|;
name|ComponentResult
name|result
init|=
name|OpenADefaultComponent
argument_list|(
name|GraphicsExporterComponentType
argument_list|,
name|kQTFileTypePicture
argument_list|,
operator|&
name|graphicsExporter
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|unsigned
name|long
name|sizeWritten
decl_stmt|;
name|result
operator|=
name|ptrGraphicsExportSetInputCGImage
argument_list|(
name|graphicsExporter
argument_list|,
name|cgimage
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
name|result
operator|=
name|ptrGraphicsExportSetOutputHandle
argument_list|(
name|graphicsExporter
argument_list|,
name|pic
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
name|result
operator|=
name|ptrGraphicsExportDoExport
argument_list|(
name|graphicsExporter
argument_list|,
operator|&
name|sizeWritten
argument_list|)
expr_stmt|;
name|CloseComponent
argument_list|(
name|graphicsExporter
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|GetHandleSize
argument_list|(
operator|(
name|Handle
operator|)
name|pic
argument_list|)
decl_stmt|;
comment|// Skip the Picture File header (512 bytes) and feed the raw data
name|QByteArray
name|ar
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
operator|*
name|pic
operator|+
literal|512
argument_list|)
argument_list|,
name|size
operator|-
literal|512
argument_list|)
decl_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|DisposeHandle
argument_list|(
name|pic
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_WS_MAC32
end_comment
begin_class
DECL|class|QMacPasteboardMimeTiff
class|class
name|QMacPasteboardMimeTiff
super|:
specifier|public
name|QMacPasteboardMime
block|{
public|public:
DECL|function|QMacPasteboardMimeTiff
name|QMacPasteboardMimeTiff
parameter_list|()
member_init_list|:
name|QMacPasteboardMime
argument_list|(
name|MIME_ALL
argument_list|)
block|{ }
name|QString
name|convertorName
parameter_list|()
function_decl|;
name|QString
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
function_decl|;
name|QString
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
function_decl|;
name|bool
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QVariant
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|convertorName
name|QString
name|QMacPasteboardMimeTiff
operator|::
name|convertorName
parameter_list|()
block|{
return|return
name|QLatin1String
argument_list|(
literal|"Tiff"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|flavorFor
name|QString
name|QMacPasteboardMimeTiff
operator|::
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
block|{
if|if
condition|(
name|mime
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/x-qt-image"
argument_list|)
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"public.tiff"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mimeFor
name|QString
name|QMacPasteboardMimeTiff
operator|::
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
block|{
if|if
condition|(
name|flav
operator|==
name|QLatin1String
argument_list|(
literal|"public.tiff"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"application/x-qt-image"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|canConvert
name|bool
name|QMacPasteboardMimeTiff
operator|::
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
return|return
name|flav
operator|==
name|QLatin1String
argument_list|(
literal|"public.tiff"
argument_list|)
operator|&&
name|mime
operator|==
name|QLatin1String
argument_list|(
literal|"application/x-qt-image"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convertToMime
name|QVariant
name|QMacPasteboardMimeTiff
operator|::
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
name|qWarning
argument_list|(
literal|"QMacPasteboardMimeTiff: Cannot handle multiple member data"
argument_list|)
expr_stmt|;
name|QVariant
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|canConvert
argument_list|(
name|mime
argument_list|,
name|flav
argument_list|)
condition|)
return|return
name|ret
return|;
specifier|const
name|QByteArray
modifier|&
name|a
init|=
name|data
operator|.
name|first
argument_list|()
decl_stmt|;
name|QCFType
argument_list|<
name|CGImageRef
argument_list|>
name|image
decl_stmt|;
name|QCFType
argument_list|<
name|CFDataRef
argument_list|>
name|tiffData
init|=
name|CFDataCreateWithBytesNoCopy
argument_list|(
literal|0
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|UInt8
operator|*
argument_list|>
argument_list|(
name|a
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|,
name|kCFAllocatorNull
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CGImageSourceRef
argument_list|>
name|imageSource
init|=
name|CGImageSourceCreateWithData
argument_list|(
name|tiffData
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|image
operator|=
name|CGImageSourceCreateImageAtIndex
argument_list|(
name|imageSource
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|!=
literal|0
condition|)
name|ret
operator|=
name|QVariant
argument_list|(
name|QPixmap
operator|::
name|fromMacCGImageRef
argument_list|(
name|image
argument_list|)
operator|.
name|toImage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|convertFromMime
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QMacPasteboardMimeTiff
operator|::
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|variant
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|canConvert
argument_list|(
name|mime
argument_list|,
name|flav
argument_list|)
condition|)
return|return
name|ret
return|;
name|QImage
name|img
init|=
name|qvariant_cast
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CGImageRef
argument_list|>
name|cgimage
init|=
name|qt_mac_createCGImageFromQImage
argument_list|(
name|img
argument_list|)
decl_stmt|;
if|#
directive|if
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
name|MAC_OS_X_VERSION_10_4
operator|)
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|>=
name|QSysInfo
operator|::
name|MV_10_4
condition|)
block|{
name|QCFType
argument_list|<
name|CFMutableDataRef
argument_list|>
name|data
init|=
name|CFDataCreateMutable
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CGImageDestinationRef
argument_list|>
name|imageDestination
init|=
name|CGImageDestinationCreateWithData
argument_list|(
name|data
argument_list|,
name|kUTTypeTIFF
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageDestination
operator|!=
literal|0
condition|)
block|{
name|CFTypeRef
name|keys
index|[
literal|2
index|]
decl_stmt|;
name|QCFType
argument_list|<
name|CFTypeRef
argument_list|>
name|values
index|[
literal|2
index|]
decl_stmt|;
name|QCFType
argument_list|<
name|CFDictionaryRef
argument_list|>
name|options
decl_stmt|;
name|keys
index|[
literal|0
index|]
operator|=
name|kCGImagePropertyPixelWidth
expr_stmt|;
name|keys
index|[
literal|1
index|]
operator|=
name|kCGImagePropertyPixelHeight
expr_stmt|;
name|int
name|width
init|=
name|img
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|img
operator|.
name|height
argument_list|()
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|CFNumberCreate
argument_list|(
literal|0
argument_list|,
name|kCFNumberIntType
argument_list|,
operator|&
name|width
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|CFNumberCreate
argument_list|(
literal|0
argument_list|,
name|kCFNumberIntType
argument_list|,
operator|&
name|height
argument_list|)
expr_stmt|;
name|options
operator|=
name|CFDictionaryCreate
argument_list|(
literal|0
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
operator|*
argument_list|>
argument_list|(
name|keys
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
operator|*
argument_list|>
argument_list|(
name|values
argument_list|)
argument_list|,
literal|2
argument_list|,
operator|&
name|kCFTypeDictionaryKeyCallBacks
argument_list|,
operator|&
name|kCFTypeDictionaryValueCallBacks
argument_list|)
expr_stmt|;
name|CGImageDestinationAddImage
argument_list|(
name|imageDestination
argument_list|,
name|cgimage
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|CGImageDestinationFinalize
argument_list|(
name|imageDestination
argument_list|)
expr_stmt|;
block|}
name|QByteArray
name|ar
argument_list|(
name|CFDataGetLength
argument_list|(
name|data
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|CFDataGetBytes
argument_list|(
name|data
argument_list|,
name|CFRangeMake
argument_list|(
literal|0
argument_list|,
name|ar
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|UInt8
operator|*
argument_list|>
argument_list|(
name|ar
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|ar
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAC32
name|Handle
name|tiff
init|=
name|NewHandle
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolveMimeQuickTimeSymbols
argument_list|()
condition|)
block|{
name|GraphicsExportComponent
name|graphicsExporter
decl_stmt|;
name|ComponentResult
name|result
init|=
name|OpenADefaultComponent
argument_list|(
name|GraphicsExporterComponentType
argument_list|,
name|kQTFileTypeTIFF
argument_list|,
operator|&
name|graphicsExporter
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|unsigned
name|long
name|sizeWritten
decl_stmt|;
name|result
operator|=
name|ptrGraphicsExportSetInputCGImage
argument_list|(
name|graphicsExporter
argument_list|,
name|cgimage
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
name|result
operator|=
name|ptrGraphicsExportSetOutputHandle
argument_list|(
name|graphicsExporter
argument_list|,
name|tiff
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
name|result
operator|=
name|ptrGraphicsExportDoExport
argument_list|(
name|graphicsExporter
argument_list|,
operator|&
name|sizeWritten
argument_list|)
expr_stmt|;
name|CloseComponent
argument_list|(
name|graphicsExporter
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|size
init|=
name|GetHandleSize
argument_list|(
operator|(
name|Handle
operator|)
name|tiff
argument_list|)
decl_stmt|;
name|QByteArray
name|ar
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
operator|*
name|tiff
argument_list|)
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|DisposeHandle
argument_list|(
name|tiff
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|ret
return|;
block|}
end_function
begin_class
DECL|class|QMacPasteboardMimeFileUri
class|class
name|QMacPasteboardMimeFileUri
super|:
specifier|public
name|QMacPasteboardMime
block|{
public|public:
DECL|function|QMacPasteboardMimeFileUri
name|QMacPasteboardMimeFileUri
parameter_list|()
member_init_list|:
name|QMacPasteboardMime
argument_list|(
name|MIME_ALL
argument_list|)
block|{ }
name|QString
name|convertorName
parameter_list|()
function_decl|;
name|QString
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
function_decl|;
name|QString
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
function_decl|;
name|bool
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QVariant
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|convertorName
name|QString
name|QMacPasteboardMimeFileUri
operator|::
name|convertorName
parameter_list|()
block|{
return|return
name|QLatin1String
argument_list|(
literal|"FileURL"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|flavorFor
name|QString
name|QMacPasteboardMimeFileUri
operator|::
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
block|{
if|if
condition|(
name|mime
operator|==
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
condition|)
return|return
name|QCFString
argument_list|(
name|UTTypeCreatePreferredIdentifierForTag
argument_list|(
name|kUTTagClassOSType
argument_list|,
name|CFSTR
argument_list|(
literal|"furl"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mimeFor
name|QString
name|QMacPasteboardMimeFileUri
operator|::
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
block|{
if|if
condition|(
name|flav
operator|==
name|QCFString
argument_list|(
name|UTTypeCreatePreferredIdentifierForTag
argument_list|(
name|kUTTagClassOSType
argument_list|,
name|CFSTR
argument_list|(
literal|"furl"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|canConvert
name|bool
name|QMacPasteboardMimeFileUri
operator|::
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
return|return
name|mime
operator|==
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
operator|&&
name|flav
operator|==
name|QCFString
argument_list|(
name|UTTypeCreatePreferredIdentifierForTag
argument_list|(
name|kUTTagClassOSType
argument_list|,
name|CFSTR
argument_list|(
literal|"furl"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convertToMime
name|QVariant
name|QMacPasteboardMimeFileUri
operator|::
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
if|if
condition|(
operator|!
name|canConvert
argument_list|(
name|mime
argument_list|,
name|flav
argument_list|)
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|ret
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QUrl
name|url
init|=
name|QUrl
operator|::
name|fromEncoded
argument_list|(
name|data
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|host
argument_list|()
operator|.
name|toLower
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"localhost"
argument_list|)
condition|)
name|url
operator|.
name|setHost
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|.
name|setPath
argument_list|(
name|url
operator|.
name|path
argument_list|()
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
return|return
name|QVariant
argument_list|(
name|ret
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convertFromMime
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QMacPasteboardMimeFileUri
operator|::
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|canConvert
argument_list|(
name|mime
argument_list|,
name|flav
argument_list|)
condition|)
return|return
name|ret
return|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|urls
init|=
name|data
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|urls
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QUrl
name|url
init|=
name|urls
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|scheme
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|url
operator|.
name|setScheme
argument_list|(
name|QLatin1String
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|.
name|scheme
argument_list|()
operator|.
name|toLower
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
if|if
condition|(
name|url
operator|.
name|host
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|url
operator|.
name|setHost
argument_list|(
name|QLatin1String
argument_list|(
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|url
operator|.
name|setPath
argument_list|(
name|url
operator|.
name|path
argument_list|()
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|append
argument_list|(
name|url
operator|.
name|toEncoded
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_class
DECL|class|QMacPasteboardMimeUrl
class|class
name|QMacPasteboardMimeUrl
super|:
specifier|public
name|QMacPasteboardMime
block|{
public|public:
DECL|function|QMacPasteboardMimeUrl
name|QMacPasteboardMimeUrl
parameter_list|()
member_init_list|:
name|QMacPasteboardMime
argument_list|(
name|MIME_ALL
argument_list|)
block|{ }
name|QString
name|convertorName
parameter_list|()
function_decl|;
name|QString
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
function_decl|;
name|QString
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
function_decl|;
name|bool
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QVariant
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|convertorName
name|QString
name|QMacPasteboardMimeUrl
operator|::
name|convertorName
parameter_list|()
block|{
return|return
name|QLatin1String
argument_list|(
literal|"URL"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|flavorFor
name|QString
name|QMacPasteboardMimeUrl
operator|::
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
block|{
if|if
condition|(
name|mime
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"public.url"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mimeFor
name|QString
name|QMacPasteboardMimeUrl
operator|::
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
block|{
if|if
condition|(
name|flav
operator|==
name|QLatin1String
argument_list|(
literal|"public.url"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|canConvert
name|bool
name|QMacPasteboardMimeUrl
operator|::
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
return|return
name|flav
operator|==
name|QLatin1String
argument_list|(
literal|"public.url"
argument_list|)
operator|&&
name|mime
operator|==
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convertToMime
name|QVariant
name|QMacPasteboardMimeUrl
operator|::
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
if|if
condition|(
operator|!
name|canConvert
argument_list|(
name|mime
argument_list|,
name|flav
argument_list|)
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|ret
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QUrl
name|url
init|=
name|QUrl
operator|::
name|fromEncoded
argument_list|(
name|data
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|host
argument_list|()
operator|.
name|toLower
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"localhost"
argument_list|)
condition|)
name|url
operator|.
name|setHost
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|.
name|setPath
argument_list|(
name|url
operator|.
name|path
argument_list|()
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
return|return
name|QVariant
argument_list|(
name|ret
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convertFromMime
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QMacPasteboardMimeUrl
operator|::
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|canConvert
argument_list|(
name|mime
argument_list|,
name|flav
argument_list|)
condition|)
return|return
name|ret
return|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|urls
init|=
name|data
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|urls
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QUrl
name|url
init|=
name|urls
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|scheme
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|url
operator|.
name|setScheme
argument_list|(
name|QLatin1String
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|.
name|scheme
argument_list|()
operator|.
name|toLower
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
if|if
condition|(
name|url
operator|.
name|host
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|url
operator|.
name|setHost
argument_list|(
name|QLatin1String
argument_list|(
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|url
operator|.
name|setPath
argument_list|(
name|url
operator|.
name|path
argument_list|()
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|append
argument_list|(
name|url
operator|.
name|toEncoded
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_class
DECL|class|QMacPasteboardMimeVCard
class|class
name|QMacPasteboardMimeVCard
super|:
specifier|public
name|QMacPasteboardMime
block|{
public|public:
DECL|function|QMacPasteboardMimeVCard
name|QMacPasteboardMimeVCard
parameter_list|()
member_init_list|:
name|QMacPasteboardMime
argument_list|(
name|MIME_ALL
argument_list|)
block|{ }
name|QString
name|convertorName
parameter_list|()
function_decl|;
name|QString
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
function_decl|;
name|QString
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
function_decl|;
name|bool
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QVariant
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|convertorName
name|QString
name|QMacPasteboardMimeVCard
operator|::
name|convertorName
parameter_list|()
block|{
return|return
name|QString
argument_list|(
literal|"VCard"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|canConvert
name|bool
name|QMacPasteboardMimeVCard
operator|::
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
return|return
name|mimeFor
argument_list|(
name|flav
argument_list|)
operator|==
name|mime
return|;
block|}
end_function
begin_function
DECL|function|flavorFor
name|QString
name|QMacPasteboardMimeVCard
operator|::
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
block|{
if|if
condition|(
name|mime
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"public.vcard"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mimeFor
name|QString
name|QMacPasteboardMimeVCard
operator|::
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
block|{
if|if
condition|(
name|flav
operator|==
name|QLatin1String
argument_list|(
literal|"public.vcard"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|convertToMime
name|QVariant
name|QMacPasteboardMimeVCard
operator|::
name|convertToMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|data
parameter_list|,
name|QString
parameter_list|)
block|{
name|QByteArray
name|cards
decl_stmt|;
if|if
condition|(
name|mime
operator|==
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|cards
operator|+=
name|data
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|QVariant
argument_list|(
name|cards
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convertFromMime
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QMacPasteboardMimeVCard
operator|::
name|convertFromMime
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QVariant
name|data
parameter_list|,
name|QString
parameter_list|)
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|ret
decl_stmt|;
if|if
condition|(
name|mime
operator|==
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
name|ret
operator|.
name|append
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!   \internal    This is an internal function. */
end_comment
begin_function
DECL|function|initialize
name|void
name|QMacPasteboardMime
operator|::
name|initialize
parameter_list|()
block|{
if|if
condition|(
name|globalMimeList
argument_list|()
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
name|qAddPostRoutine
argument_list|(
name|cleanup_mimes
argument_list|)
expr_stmt|;
comment|//standard types that we wrap
operator|new
name|QMacPasteboardMimeTiff
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC32
comment|// 10.6 does automatic synthesis to and from PICT to standard image types (like TIFF),
comment|// so don't bother doing it ourselves, especially since it's not available in 64-bit.
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|<
name|QSysInfo
operator|::
name|MV_10_6
condition|)
operator|new
name|QMacPasteboardMimePict
expr_stmt|;
endif|#
directive|endif
operator|new
name|QMacPasteboardMimeUnicodeText
expr_stmt|;
operator|new
name|QMacPasteboardMimePlainText
expr_stmt|;
operator|new
name|QMacPasteboardMimeHTMLText
expr_stmt|;
operator|new
name|QMacPasteboardMimeFileUri
expr_stmt|;
operator|new
name|QMacPasteboardMimeUrl
expr_stmt|;
operator|new
name|QMacPasteboardMimeTypeName
expr_stmt|;
operator|new
name|QMacPasteboardMimeVCard
expr_stmt|;
comment|//make sure our "non-standard" types are always last! --Sam
operator|new
name|QMacPasteboardMimeAny
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   Returns the most-recently created QMacPasteboardMime of type \a t that can convert   between the \a mime and \a flav formats.  Returns 0 if no such convertor   exists. */
end_comment
begin_function
name|QMacPasteboardMime
modifier|*
DECL|function|convertor
name|QMacPasteboardMime
operator|::
name|convertor
parameter_list|(
name|uchar
name|t
parameter_list|,
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
name|MimeList
modifier|*
name|mimes
init|=
name|globalMimeList
argument_list|()
decl_stmt|;
for|for
control|(
name|MimeList
operator|::
name|const_iterator
name|it
init|=
name|mimes
operator|->
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|mimes
operator|->
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_MIME_MAPS
name|qDebug
argument_list|(
literal|"QMacPasteboardMime::convertor: seeing if %s (%d) can convert %s to %d[%c%c%c%c] [%d]"
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|->
name|convertorName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|->
name|type
operator|&
name|t
argument_list|,
name|mime
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|flav
argument_list|,
operator|(
name|flav
operator|>>
literal|24
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
name|flav
operator|>>
literal|16
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
name|flav
operator|>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
name|flav
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|->
name|canConvert
argument_list|(
name|mime
argument_list|,
name|flav
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
operator|*
name|it
operator|)
operator|->
name|countFlavors
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|f
init|=
operator|(
operator|*
name|it
operator|)
operator|->
name|flavor
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|qDebug
argument_list|(
literal|"  %d) %d[%c%c%c%c] [%s]"
argument_list|,
name|i
argument_list|,
name|f
argument_list|,
operator|(
name|f
operator|>>
literal|24
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
name|f
operator|>>
literal|16
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
name|f
operator|>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
name|f
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|->
name|convertorName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|(
operator|(
operator|*
name|it
operator|)
operator|->
name|type
operator|&
name|t
operator|)
operator|&&
operator|(
operator|*
name|it
operator|)
operator|->
name|canConvert
argument_list|(
name|mime
argument_list|,
name|flav
argument_list|)
condition|)
return|return
operator|(
operator|*
name|it
operator|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!   Returns a MIME type of type \a t for \a flav, or 0 if none exists. */
end_comment
begin_function
DECL|function|flavorToMime
name|QString
name|QMacPasteboardMime
operator|::
name|flavorToMime
parameter_list|(
name|uchar
name|t
parameter_list|,
name|QString
name|flav
parameter_list|)
block|{
name|MimeList
modifier|*
name|mimes
init|=
name|globalMimeList
argument_list|()
decl_stmt|;
for|for
control|(
name|MimeList
operator|::
name|const_iterator
name|it
init|=
name|mimes
operator|->
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|mimes
operator|->
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_MIME_MAPS
name|qDebug
argument_list|(
literal|"QMacMIme::flavorToMime: attempting %s (%d) for flavor %d[%c%c%c%c] [%s]"
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|->
name|convertorName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|->
name|type
operator|&
name|t
argument_list|,
name|flav
argument_list|,
operator|(
name|flav
operator|>>
literal|24
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
name|flav
operator|>>
literal|16
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
name|flav
operator|>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
name|flav
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|->
name|mimeFor
argument_list|(
name|flav
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|->
name|type
operator|&
name|t
condition|)
block|{
name|QString
name|mimeType
init|=
operator|(
operator|*
name|it
operator|)
operator|->
name|mimeFor
argument_list|(
name|flav
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mimeType
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|mimeType
return|;
block|}
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Returns a list of all currently defined QMacPasteboardMime objects of type \a t. */
end_comment
begin_function
DECL|function|all
name|QList
argument_list|<
name|QMacPasteboardMime
modifier|*
argument_list|>
name|QMacPasteboardMime
operator|::
name|all
parameter_list|(
name|uchar
name|t
parameter_list|)
block|{
name|MimeList
name|ret
decl_stmt|;
name|MimeList
modifier|*
name|mimes
init|=
name|globalMimeList
argument_list|()
decl_stmt|;
for|for
control|(
name|MimeList
operator|::
name|const_iterator
name|it
init|=
name|mimes
operator|->
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|mimes
operator|->
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|->
name|type
operator|&
name|t
condition|)
name|ret
operator|.
name|append
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!   \fn QString QMacPasteboardMime::convertorName()    Returns a name for the convertor.    All subclasses must reimplement this pure virtual function. */
end_comment
begin_comment
comment|/*!   \fn bool QMacPasteboardMime::canConvert(const QString&mime, QString flav)    Returns true if the convertor can convert (both ways) between   \a mime and \a flav; otherwise returns false.    All subclasses must reimplement this pure virtual function. */
end_comment
begin_comment
comment|/*!   \fn QString QMacPasteboardMime::mimeFor(QString flav)    Returns the MIME UTI used for Mac flavor \a flav, or 0 if this   convertor does not support \a flav.    All subclasses must reimplement this pure virtual function. */
end_comment
begin_comment
comment|/*!   \fn QString QMacPasteboardMime::flavorFor(const QString&mime)    Returns the Mac UTI used for MIME type \a mime, or 0 if this   convertor does not support \a mime.    All subclasses must reimplement this pure virtual function. */
end_comment
begin_comment
comment|/*!     \fn QVariant QMacPasteboardMime::convertToMime(const QString&mime, QList<QByteArray> data, QString flav)      Returns \a data converted from Mac UTI \a flav to MIME type \a     mime.      Note that Mac flavors must all be self-terminating. The input \a     data may contain trailing data.      All subclasses must reimplement this pure virtual function. */
end_comment
begin_comment
comment|/*!   \fn QList<QByteArray> QMacPasteboardMime::convertFromMime(const QString&mime, QVariant data, QString flav)    Returns \a data converted from MIME type \a mime     to Mac UTI \a flav.    Note that Mac flavors must all be self-terminating.  The return   value may contain trailing data.    All subclasses must reimplement this pure virtual function. */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
