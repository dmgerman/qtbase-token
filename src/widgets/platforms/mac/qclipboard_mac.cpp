begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qclipboard.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qt_mac_p.h>
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qurl.h"
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|"qt_cocoa_helpers_mac_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|QT_USE_NAMESPACE
comment|/*****************************************************************************   QClipboard debug facilities  *****************************************************************************/
comment|//#define DEBUG_PASTEBOARD
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
comment|/*****************************************************************************   QClipboard member functions for mac.  *****************************************************************************/
DECL|variable|qt_mac_pasteboards
specifier|static
name|QMacPasteboard
modifier|*
name|qt_mac_pasteboards
index|[
literal|2
index|]
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_mac_pasteboard
specifier|static
specifier|inline
name|QMacPasteboard
modifier|*
name|qt_mac_pasteboard
parameter_list|(
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|mode
operator|==
name|QClipboard
operator|::
name|Clipboard
operator|||
name|mode
operator|==
name|QClipboard
operator|::
name|FindBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|QClipboard
operator|::
name|Clipboard
condition|)
return|return
name|qt_mac_pasteboards
index|[
literal|0
index|]
return|;
else|else
return|return
name|qt_mac_pasteboards
index|[
literal|1
index|]
return|;
block|}
end_function
begin_function
DECL|function|qt_mac_cleanupPasteboard
specifier|static
name|void
name|qt_mac_cleanupPasteboard
parameter_list|()
block|{
operator|delete
name|qt_mac_pasteboards
index|[
literal|0
index|]
expr_stmt|;
operator|delete
name|qt_mac_pasteboards
index|[
literal|1
index|]
expr_stmt|;
name|qt_mac_pasteboards
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|qt_mac_pasteboards
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_mac_updateScrap
specifier|static
name|bool
name|qt_mac_updateScrap
parameter_list|(
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|qt_mac_pasteboards
index|[
literal|0
index|]
condition|)
block|{
name|qt_mac_pasteboards
index|[
literal|0
index|]
operator|=
operator|new
name|QMacPasteboard
argument_list|(
name|kPasteboardClipboard
argument_list|,
name|QMacPasteboardMime
operator|::
name|MIME_CLIP
argument_list|)
expr_stmt|;
name|qt_mac_pasteboards
index|[
literal|1
index|]
operator|=
operator|new
name|QMacPasteboard
argument_list|(
name|kPasteboardFind
argument_list|,
name|QMacPasteboardMime
operator|::
name|MIME_CLIP
argument_list|)
expr_stmt|;
name|qAddPostRoutine
argument_list|(
name|qt_mac_cleanupPasteboard
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|qt_mac_pasteboard
argument_list|(
name|mode
argument_list|)
operator|->
name|sync
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QClipboard
operator|::
name|clear
parameter_list|(
name|Mode
name|mode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|supportsMode
argument_list|(
name|mode
argument_list|)
condition|)
return|return;
name|qt_mac_updateScrap
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|qt_mac_pasteboard
argument_list|(
name|mode
argument_list|)
operator|->
name|clear
argument_list|()
expr_stmt|;
name|setMimeData
argument_list|(
literal|0
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ownerDestroyed
name|void
name|QClipboard
operator|::
name|ownerDestroyed
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|connectNotify
name|void
name|QClipboard
operator|::
name|connectNotify
parameter_list|(
specifier|const
name|char
modifier|*
name|signal
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|signal
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|event
name|bool
name|QClipboard
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|Clipboard
condition|)
return|return
name|QObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
if|if
condition|(
name|qt_mac_updateScrap
argument_list|(
name|QClipboard
operator|::
name|Clipboard
argument_list|)
condition|)
block|{
name|emitChanged
argument_list|(
name|QClipboard
operator|::
name|Clipboard
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qt_mac_updateScrap
argument_list|(
name|QClipboard
operator|::
name|FindBuffer
argument_list|)
condition|)
block|{
name|emitChanged
argument_list|(
name|QClipboard
operator|::
name|FindBuffer
argument_list|)
expr_stmt|;
block|}
return|return
name|QObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mimeData
specifier|const
name|QMimeData
modifier|*
name|QClipboard
operator|::
name|mimeData
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|supportsMode
argument_list|(
name|mode
argument_list|)
condition|)
return|return
literal|0
return|;
name|qt_mac_updateScrap
argument_list|(
name|mode
argument_list|)
expr_stmt|;
return|return
name|qt_mac_pasteboard
argument_list|(
name|mode
argument_list|)
operator|->
name|mimeData
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMimeData
name|void
name|QClipboard
operator|::
name|setMimeData
parameter_list|(
name|QMimeData
modifier|*
name|src
parameter_list|,
name|Mode
name|mode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|supportsMode
argument_list|(
name|mode
argument_list|)
condition|)
return|return;
name|qt_mac_updateScrap
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|qt_mac_pasteboard
argument_list|(
name|mode
argument_list|)
operator|->
name|setMimeData
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|emitChanged
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsMode
name|bool
name|QClipboard
operator|::
name|supportsMode
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|mode
operator|==
name|Clipboard
operator|||
name|mode
operator|==
name|FindBuffer
operator|)
return|;
block|}
end_function
begin_function
DECL|function|ownsMode
name|bool
name|QClipboard
operator|::
name|ownsMode
parameter_list|(
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|mode
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CLIPBOARD
end_comment
begin_comment
comment|/*****************************************************************************    QMacPasteboard code *****************************************************************************/
end_comment
begin_constructor
DECL|function|QMacPasteboard
name|QMacPasteboard
operator|::
name|QMacPasteboard
parameter_list|(
name|PasteboardRef
name|p
parameter_list|,
name|uchar
name|mt
parameter_list|)
block|{
name|mac_mime_source
operator|=
literal|false
expr_stmt|;
name|mime_type
operator|=
name|mt
condition|?
name|mt
else|:
name|uchar
argument_list|(
name|QMacPasteboardMime
operator|::
name|MIME_ALL
argument_list|)
expr_stmt|;
name|paste
operator|=
name|p
expr_stmt|;
name|CFRetain
argument_list|(
name|paste
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QMacPasteboard
name|QMacPasteboard
operator|::
name|QMacPasteboard
parameter_list|(
name|uchar
name|mt
parameter_list|)
block|{
name|mac_mime_source
operator|=
literal|false
expr_stmt|;
name|mime_type
operator|=
name|mt
condition|?
name|mt
else|:
name|uchar
argument_list|(
name|QMacPasteboardMime
operator|::
name|MIME_ALL
argument_list|)
expr_stmt|;
name|paste
operator|=
literal|0
expr_stmt|;
name|OSStatus
name|err
init|=
name|PasteboardCreate
argument_list|(
literal|0
argument_list|,
operator|&
name|paste
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
block|{
name|PasteboardSetPromiseKeeper
argument_list|(
name|paste
argument_list|,
name|promiseKeeper
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|(
literal|"PasteBoard: Error creating pasteboard: [%d]"
argument_list|,
operator|(
name|int
operator|)
name|err
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_constructor
DECL|function|QMacPasteboard
name|QMacPasteboard
operator|::
name|QMacPasteboard
parameter_list|(
name|CFStringRef
name|name
parameter_list|,
name|uchar
name|mt
parameter_list|)
block|{
name|mac_mime_source
operator|=
literal|false
expr_stmt|;
name|mime_type
operator|=
name|mt
condition|?
name|mt
else|:
name|uchar
argument_list|(
name|QMacPasteboardMime
operator|::
name|MIME_ALL
argument_list|)
expr_stmt|;
name|paste
operator|=
literal|0
expr_stmt|;
name|OSStatus
name|err
init|=
name|PasteboardCreate
argument_list|(
name|name
argument_list|,
operator|&
name|paste
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
block|{
name|PasteboardSetPromiseKeeper
argument_list|(
name|paste
argument_list|,
name|promiseKeeper
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|(
literal|"PasteBoard: Error creating pasteboard: %s [%d]"
argument_list|,
name|QCFString
operator|::
name|toQString
argument_list|(
name|name
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|err
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QMacPasteboard
name|QMacPasteboard
operator|::
name|~
name|QMacPasteboard
parameter_list|()
block|{
comment|// commit all promises for paste after exit close
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|promises
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|Promise
modifier|&
name|promise
init|=
name|promises
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCFString
name|flavor
init|=
name|QCFString
argument_list|(
name|promise
operator|.
name|convertor
operator|->
name|flavorFor
argument_list|(
name|promise
operator|.
name|mime
argument_list|)
argument_list|)
decl_stmt|;
name|promiseKeeper
argument_list|(
name|paste
argument_list|,
operator|(
name|PasteboardItemID
operator|)
name|promise
operator|.
name|itemId
argument_list|,
name|flavor
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|paste
condition|)
name|CFRelease
argument_list|(
name|paste
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
name|PasteboardRef
DECL|function|pasteBoard
name|QMacPasteboard
operator|::
name|pasteBoard
parameter_list|()
specifier|const
block|{
return|return
name|paste
return|;
block|}
end_function
begin_function
DECL|function|promiseKeeper
name|OSStatus
name|QMacPasteboard
operator|::
name|promiseKeeper
parameter_list|(
name|PasteboardRef
name|paste
parameter_list|,
name|PasteboardItemID
name|id
parameter_list|,
name|CFStringRef
name|flavor
parameter_list|,
name|void
modifier|*
name|_qpaste
parameter_list|)
block|{
name|QMacPasteboard
modifier|*
name|qpaste
init|=
operator|(
name|QMacPasteboard
operator|*
operator|)
name|_qpaste
decl_stmt|;
specifier|const
name|long
name|promise_id
init|=
operator|(
name|long
operator|)
name|id
decl_stmt|;
comment|// Find the kept promise
specifier|const
name|QString
name|flavorAsQString
init|=
name|QCFString
operator|::
name|toQString
argument_list|(
name|flavor
argument_list|)
decl_stmt|;
name|QMacPasteboard
operator|::
name|Promise
name|promise
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qpaste
operator|->
name|promises
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QMacPasteboard
operator|::
name|Promise
name|tmp
init|=
name|qpaste
operator|->
name|promises
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|itemId
operator|==
name|promise_id
operator|&&
name|tmp
operator|.
name|convertor
operator|->
name|canConvert
argument_list|(
name|tmp
operator|.
name|mime
argument_list|,
name|flavorAsQString
argument_list|)
condition|)
block|{
name|promise
operator|=
name|tmp
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|promise
operator|.
name|itemId
operator|&&
name|flavorAsQString
operator|==
name|QLatin1String
argument_list|(
literal|"com.trolltech.qt.MimeTypeName"
argument_list|)
condition|)
block|{
comment|// we have promised this data, but wont be able to convert, so return null data.
comment|// This helps in making the application/x-qt-mime-type-name hidden from normal use.
name|QByteArray
name|ba
decl_stmt|;
name|QCFType
argument_list|<
name|CFDataRef
argument_list|>
name|data
init|=
name|CFDataCreate
argument_list|(
literal|0
argument_list|,
operator|(
name|UInt8
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|PasteboardPutItemFlavor
argument_list|(
name|paste
argument_list|,
name|id
argument_list|,
name|flavor
argument_list|,
name|data
argument_list|,
name|kPasteboardFlavorNoFlags
argument_list|)
expr_stmt|;
return|return
name|noErr
return|;
block|}
if|if
condition|(
operator|!
name|promise
operator|.
name|itemId
condition|)
block|{
comment|// There was no promise that could deliver data for the
comment|// given id and flavor. This should not happend.
name|qDebug
argument_list|(
literal|"Pasteboard: %d: Request for %ld, %s, but no promise found!"
argument_list|,
name|__LINE__
argument_list|,
name|promise_id
argument_list|,
name|qPrintable
argument_list|(
name|flavorAsQString
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cantGetFlavorErr
return|;
block|}
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|"PasteBoard: Calling in promise for %s[%ld] [%s] (%s) [%d]"
argument_list|,
name|qPrintable
argument_list|(
name|promise
operator|.
name|mime
argument_list|)
argument_list|,
name|promise_id
argument_list|,
name|qPrintable
argument_list|(
name|flavorAsQString
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|promise
operator|.
name|convertor
operator|->
name|convertorName
argument_list|()
argument_list|)
argument_list|,
name|promise
operator|.
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|md
init|=
name|promise
operator|.
name|convertor
operator|->
name|convertFromMime
argument_list|(
name|promise
operator|.
name|mime
argument_list|,
name|promise
operator|.
name|data
argument_list|,
name|flavorAsQString
argument_list|)
decl_stmt|;
if|if
condition|(
name|md
operator|.
name|size
argument_list|()
operator|<=
name|promise
operator|.
name|offset
condition|)
return|return
name|cantGetFlavorErr
return|;
specifier|const
name|QByteArray
modifier|&
name|ba
init|=
name|md
index|[
name|promise
operator|.
name|offset
index|]
decl_stmt|;
name|QCFType
argument_list|<
name|CFDataRef
argument_list|>
name|data
init|=
name|CFDataCreate
argument_list|(
literal|0
argument_list|,
operator|(
name|UInt8
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|PasteboardPutItemFlavor
argument_list|(
name|paste
argument_list|,
name|id
argument_list|,
name|flavor
argument_list|,
name|data
argument_list|,
name|kPasteboardFlavorNoFlags
argument_list|)
expr_stmt|;
return|return
name|noErr
return|;
block|}
end_function
begin_function
name|bool
DECL|function|hasOSType
name|QMacPasteboard
operator|::
name|hasOSType
parameter_list|(
name|int
name|c_flavor
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|paste
condition|)
return|return
literal|false
return|;
name|sync
argument_list|()
expr_stmt|;
name|ItemCount
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|PasteboardGetItemCount
argument_list|(
name|paste
argument_list|,
operator|&
name|cnt
argument_list|)
operator|||
operator|!
name|cnt
condition|)
return|return
literal|false
return|;
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|"PasteBoard: hasOSType [%c%c%c%c]"
argument_list|,
operator|(
name|c_flavor
operator|>>
literal|24
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
name|c_flavor
operator|>>
literal|16
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
name|c_flavor
operator|>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|,
operator|(
name|c_flavor
operator|>>
literal|0
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|uint
name|index
init|=
literal|1
init|;
name|index
operator|<=
name|cnt
condition|;
operator|++
name|index
control|)
block|{
name|PasteboardItemID
name|id
decl_stmt|;
if|if
condition|(
name|PasteboardGetItemIdentifier
argument_list|(
name|paste
argument_list|,
name|index
argument_list|,
operator|&
name|id
argument_list|)
operator|!=
name|noErr
condition|)
return|return
literal|false
return|;
name|QCFType
argument_list|<
name|CFArrayRef
argument_list|>
name|types
decl_stmt|;
if|if
condition|(
name|PasteboardCopyItemFlavors
argument_list|(
name|paste
argument_list|,
name|id
argument_list|,
operator|&
name|types
argument_list|)
operator|!=
name|noErr
condition|)
return|return
literal|false
return|;
specifier|const
name|int
name|type_count
init|=
name|CFArrayGetCount
argument_list|(
name|types
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|type_count
condition|;
operator|++
name|i
control|)
block|{
name|CFStringRef
name|flavor
init|=
operator|(
name|CFStringRef
operator|)
name|CFArrayGetValueAtIndex
argument_list|(
name|types
argument_list|,
name|i
argument_list|)
decl_stmt|;
specifier|const
name|int
name|os_flavor
init|=
name|UTGetOSTypeFromString
argument_list|(
name|UTTypeCopyPreferredTagWithClass
argument_list|(
name|flavor
argument_list|,
name|kUTTagClassOSType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|os_flavor
operator|==
name|c_flavor
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|"  - Found!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
block|}
block|}
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|"  - NotFound!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
end_function
begin_function
name|bool
DECL|function|hasFlavor
name|QMacPasteboard
operator|::
name|hasFlavor
parameter_list|(
name|QString
name|c_flavor
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|paste
condition|)
return|return
literal|false
return|;
name|sync
argument_list|()
expr_stmt|;
name|ItemCount
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|PasteboardGetItemCount
argument_list|(
name|paste
argument_list|,
operator|&
name|cnt
argument_list|)
operator|||
operator|!
name|cnt
condition|)
return|return
literal|false
return|;
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|"PasteBoard: hasFlavor [%s]"
argument_list|,
name|qPrintable
argument_list|(
name|c_flavor
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|uint
name|index
init|=
literal|1
init|;
name|index
operator|<=
name|cnt
condition|;
operator|++
name|index
control|)
block|{
name|PasteboardItemID
name|id
decl_stmt|;
if|if
condition|(
name|PasteboardGetItemIdentifier
argument_list|(
name|paste
argument_list|,
name|index
argument_list|,
operator|&
name|id
argument_list|)
operator|!=
name|noErr
condition|)
return|return
literal|false
return|;
name|PasteboardFlavorFlags
name|flags
decl_stmt|;
if|if
condition|(
name|PasteboardGetItemFlavorFlags
argument_list|(
name|paste
argument_list|,
name|id
argument_list|,
name|QCFString
argument_list|(
name|c_flavor
argument_list|)
argument_list|,
operator|&
name|flags
argument_list|)
operator|==
name|noErr
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|"  - Found!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
block|}
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|"  - NotFound!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
end_function
begin_class
DECL|class|QMacPasteboardMimeSource
class|class
name|QMacPasteboardMimeSource
super|:
specifier|public
name|QMimeData
block|{
DECL|member|paste
specifier|const
name|QMacPasteboard
modifier|*
name|paste
decl_stmt|;
public|public:
DECL|function|QMacPasteboardMimeSource
name|QMacPasteboardMimeSource
parameter_list|(
specifier|const
name|QMacPasteboard
modifier|*
name|p
parameter_list|)
member_init_list|:
name|QMimeData
argument_list|()
member_init_list|,
name|paste
argument_list|(
name|p
argument_list|)
block|{ }
DECL|function|~QMacPasteboardMimeSource
name|~
name|QMacPasteboardMimeSource
parameter_list|()
block|{ }
DECL|function|formats
specifier|virtual
name|QStringList
name|formats
parameter_list|()
specifier|const
block|{
return|return
name|paste
operator|->
name|formats
argument_list|()
return|;
block|}
DECL|function|retrieveData
specifier|virtual
name|QVariant
name|retrieveData
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|)
specifier|const
block|{
return|return
name|paste
operator|->
name|retrieveData
argument_list|(
name|format
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
name|QMimeData
DECL|function|mimeData
modifier|*
name|QMacPasteboard
operator|::
name|mimeData
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|mime
condition|)
block|{
name|mac_mime_source
operator|=
literal|true
expr_stmt|;
name|mime
operator|=
operator|new
name|QMacPasteboardMimeSource
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|mime
return|;
block|}
end_function
begin_class
DECL|class|QMacMimeData
class|class
name|QMacMimeData
super|:
specifier|public
name|QMimeData
block|{
public|public:
DECL|function|variantData
name|QVariant
name|variantData
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
block|{
return|return
name|retrieveData
argument_list|(
name|mime
argument_list|,
name|QVariant
operator|::
name|Invalid
argument_list|)
return|;
block|}
private|private:
name|QMacMimeData
parameter_list|()
constructor_decl|;
block|}
class|;
end_class
begin_function
name|void
DECL|function|setMimeData
name|QMacPasteboard
operator|::
name|setMimeData
parameter_list|(
name|QMimeData
modifier|*
name|mime_src
parameter_list|)
block|{
if|if
condition|(
operator|!
name|paste
condition|)
return|return;
if|if
condition|(
name|mime
operator|==
name|mime_src
operator|||
operator|(
operator|!
name|mime_src
operator|&&
name|mime
operator|&&
name|mac_mime_source
operator|)
condition|)
return|return;
name|mac_mime_source
operator|=
literal|false
expr_stmt|;
operator|delete
name|mime
expr_stmt|;
name|mime
operator|=
name|mime_src
expr_stmt|;
name|QList
argument_list|<
name|QMacPasteboardMime
modifier|*
argument_list|>
name|availableConverters
init|=
name|QMacPasteboardMime
operator|::
name|all
argument_list|(
name|mime_type
argument_list|)
decl_stmt|;
if|if
condition|(
name|mime
operator|!=
literal|0
condition|)
block|{
name|clear_helper
argument_list|()
expr_stmt|;
name|QStringList
name|formats
init|=
name|mime_src
operator|->
name|formats
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_MAC_USE_COCOA
comment|// QMimeData sub classes reimplementing the formats() might not expose the
comment|// temporary "application/x-qt-mime-type-name" mimetype. So check the existence
comment|// of this mime type while doing drag and drop.
name|QString
name|dummyMimeType
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/x-qt-mime-type-name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|formats
operator|.
name|contains
argument_list|(
name|dummyMimeType
argument_list|)
condition|)
block|{
name|QByteArray
name|dummyType
init|=
name|mime_src
operator|->
name|data
argument_list|(
name|dummyMimeType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dummyType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|formats
operator|.
name|append
argument_list|(
name|dummyMimeType
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|formats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|f
control|)
block|{
name|QString
name|mimeType
init|=
name|formats
operator|.
name|at
argument_list|(
name|f
argument_list|)
decl_stmt|;
for|for
control|(
name|QList
argument_list|<
name|QMacPasteboardMime
operator|*
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|availableConverters
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|availableConverters
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QMacPasteboardMime
modifier|*
name|c
init|=
operator|(
operator|*
name|it
operator|)
decl_stmt|;
name|QString
name|flavor
argument_list|(
name|c
operator|->
name|flavorFor
argument_list|(
name|mimeType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|flavor
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVariant
name|mimeData
init|=
cast|static_cast
argument_list|<
name|QMacMimeData
operator|*
argument_list|>
argument_list|(
name|mime_src
argument_list|)
operator|->
name|variantData
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
if|#
directive|if
literal|0
comment|//### Grrr, why didn't I put in a virtual int QMacPasteboardMime::count()? --Sam
block|const int numItems = c->convertFromMime(mimeType, mimeData, flavor).size();
else|#
directive|else
name|int
name|numItems
init|=
literal|1
decl_stmt|;
comment|//this is a hack but it is much faster than allowing conversion above
if|if
condition|(
name|c
operator|->
name|convertorName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"FileURL"
argument_list|)
condition|)
name|numItems
operator|=
name|mime_src
operator|->
name|urls
argument_list|()
operator|.
name|count
argument_list|()
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|int
name|item
init|=
literal|0
init|;
name|item
operator|<
name|numItems
condition|;
operator|++
name|item
control|)
block|{
specifier|const
name|int
name|itemID
init|=
name|item
operator|+
literal|1
decl_stmt|;
comment|//id starts at 1
name|promises
operator|.
name|append
argument_list|(
name|QMacPasteboard
operator|::
name|Promise
argument_list|(
name|itemID
argument_list|,
name|c
argument_list|,
name|mimeType
argument_list|,
name|mimeData
argument_list|,
name|item
argument_list|)
argument_list|)
expr_stmt|;
name|PasteboardPutItemFlavor
argument_list|(
name|paste
argument_list|,
operator|(
name|PasteboardItemID
operator|)
name|itemID
argument_list|,
name|QCFString
argument_list|(
name|flavor
argument_list|)
argument_list|,
literal|0
argument_list|,
name|kPasteboardFlavorNoFlags
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|" -  adding %d %s [%s]<%s> [%d]"
argument_list|,
name|itemID
argument_list|,
name|qPrintable
argument_list|(
name|mimeType
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|flavor
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|c
operator|->
name|convertorName
argument_list|()
argument_list|)
argument_list|,
name|item
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
name|QStringList
DECL|function|formats
name|QMacPasteboard
operator|::
name|formats
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|paste
condition|)
return|return
name|QStringList
argument_list|()
return|;
name|sync
argument_list|()
expr_stmt|;
name|QStringList
name|ret
decl_stmt|;
name|ItemCount
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|PasteboardGetItemCount
argument_list|(
name|paste
argument_list|,
operator|&
name|cnt
argument_list|)
operator|||
operator|!
name|cnt
condition|)
return|return
name|ret
return|;
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|"PasteBoard: Formats [%d]"
argument_list|,
operator|(
name|int
operator|)
name|cnt
argument_list|)
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|uint
name|index
init|=
literal|1
init|;
name|index
operator|<=
name|cnt
condition|;
operator|++
name|index
control|)
block|{
name|PasteboardItemID
name|id
decl_stmt|;
if|if
condition|(
name|PasteboardGetItemIdentifier
argument_list|(
name|paste
argument_list|,
name|index
argument_list|,
operator|&
name|id
argument_list|)
operator|!=
name|noErr
condition|)
continue|continue;
name|QCFType
argument_list|<
name|CFArrayRef
argument_list|>
name|types
decl_stmt|;
if|if
condition|(
name|PasteboardCopyItemFlavors
argument_list|(
name|paste
argument_list|,
name|id
argument_list|,
operator|&
name|types
argument_list|)
operator|!=
name|noErr
condition|)
continue|continue;
specifier|const
name|int
name|type_count
init|=
name|CFArrayGetCount
argument_list|(
name|types
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|type_count
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|flavor
init|=
name|QCFString
operator|::
name|toQString
argument_list|(
operator|(
name|CFStringRef
operator|)
name|CFArrayGetValueAtIndex
argument_list|(
name|types
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|" -%s"
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
name|flavor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|mimeType
init|=
name|QMacPasteboardMime
operator|::
name|flavorToMime
argument_list|(
name|mime_type
argument_list|,
name|flavor
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mimeType
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|ret
operator|.
name|contains
argument_list|(
name|mimeType
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|"   -<%d> %s [%s]"
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|mimeType
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
name|flavor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ret
operator|<<
name|mimeType
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
name|bool
DECL|function|hasFormat
name|QMacPasteboard
operator|::
name|hasFormat
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|paste
condition|)
return|return
literal|false
return|;
name|sync
argument_list|()
expr_stmt|;
name|ItemCount
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|PasteboardGetItemCount
argument_list|(
name|paste
argument_list|,
operator|&
name|cnt
argument_list|)
operator|||
operator|!
name|cnt
condition|)
return|return
literal|false
return|;
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|"PasteBoard: hasFormat [%s]"
argument_list|,
name|qPrintable
argument_list|(
name|format
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|uint
name|index
init|=
literal|1
init|;
name|index
operator|<=
name|cnt
condition|;
operator|++
name|index
control|)
block|{
name|PasteboardItemID
name|id
decl_stmt|;
if|if
condition|(
name|PasteboardGetItemIdentifier
argument_list|(
name|paste
argument_list|,
name|index
argument_list|,
operator|&
name|id
argument_list|)
operator|!=
name|noErr
condition|)
continue|continue;
name|QCFType
argument_list|<
name|CFArrayRef
argument_list|>
name|types
decl_stmt|;
if|if
condition|(
name|PasteboardCopyItemFlavors
argument_list|(
name|paste
argument_list|,
name|id
argument_list|,
operator|&
name|types
argument_list|)
operator|!=
name|noErr
condition|)
continue|continue;
specifier|const
name|int
name|type_count
init|=
name|CFArrayGetCount
argument_list|(
name|types
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|type_count
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|flavor
init|=
name|QCFString
operator|::
name|toQString
argument_list|(
operator|(
name|CFStringRef
operator|)
name|CFArrayGetValueAtIndex
argument_list|(
name|types
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|" -%s [0x%x]"
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
name|flavor
argument_list|)
argument_list|)
argument_list|,
name|mime_type
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|mimeType
init|=
name|QMacPasteboardMime
operator|::
name|flavorToMime
argument_list|(
name|mime_type
argument_list|,
name|flavor
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
if|if
condition|(
operator|!
name|mimeType
operator|.
name|isEmpty
argument_list|()
condition|)
name|qDebug
argument_list|(
literal|"   - %s"
argument_list|,
name|qPrintable
argument_list|(
name|mimeType
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|mimeType
operator|==
name|format
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
name|QVariant
DECL|function|retrieveData
name|QMacPasteboard
operator|::
name|retrieveData
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|,
name|QVariant
operator|::
name|Type
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|paste
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|sync
argument_list|()
expr_stmt|;
name|ItemCount
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|PasteboardGetItemCount
argument_list|(
name|paste
argument_list|,
operator|&
name|cnt
argument_list|)
operator|||
operator|!
name|cnt
condition|)
return|return
name|QByteArray
argument_list|()
return|;
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|"Pasteboard: retrieveData [%s]"
argument_list|,
name|qPrintable
argument_list|(
name|format
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QList
argument_list|<
name|QMacPasteboardMime
modifier|*
argument_list|>
name|mimes
init|=
name|QMacPasteboardMime
operator|::
name|all
argument_list|(
name|mime_type
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|mime
init|=
literal|0
init|;
name|mime
operator|<
name|mimes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|mime
control|)
block|{
name|QMacPasteboardMime
modifier|*
name|c
init|=
name|mimes
operator|.
name|at
argument_list|(
name|mime
argument_list|)
decl_stmt|;
name|QString
name|c_flavor
init|=
name|c
operator|->
name|flavorFor
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c_flavor
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Handle text/plain a little differently. Try handling Unicode first.
name|bool
name|checkForUtf16
init|=
operator|(
name|c_flavor
operator|==
name|QLatin1String
argument_list|(
literal|"com.apple.traditional-mac-plain-text"
argument_list|)
operator|||
name|c_flavor
operator|==
name|QLatin1String
argument_list|(
literal|"public.utf8-plain-text"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|checkForUtf16
operator|||
name|c_flavor
operator|==
name|QLatin1String
argument_list|(
literal|"public.utf16-plain-text"
argument_list|)
condition|)
block|{
comment|// Try to get the NSStringPboardType from NSPasteboard, newlines are mapped
comment|// correctly (as '\n') in this data. The 'public.utf16-plain-text' type
comment|// usually maps newlines to '\r' instead.
name|QString
name|str
init|=
name|qt_mac_get_pasteboardString
argument_list|(
name|paste
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|str
return|;
block|}
if|if
condition|(
name|checkForUtf16
operator|&&
name|hasFlavor
argument_list|(
name|QLatin1String
argument_list|(
literal|"public.utf16-plain-text"
argument_list|)
argument_list|)
condition|)
name|c_flavor
operator|=
name|QLatin1String
argument_list|(
literal|"public.utf16-plain-text"
argument_list|)
expr_stmt|;
name|QVariant
name|ret
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|retList
decl_stmt|;
for|for
control|(
name|uint
name|index
init|=
literal|1
init|;
name|index
operator|<=
name|cnt
condition|;
operator|++
name|index
control|)
block|{
name|PasteboardItemID
name|id
decl_stmt|;
if|if
condition|(
name|PasteboardGetItemIdentifier
argument_list|(
name|paste
argument_list|,
name|index
argument_list|,
operator|&
name|id
argument_list|)
operator|!=
name|noErr
condition|)
continue|continue;
name|QCFType
argument_list|<
name|CFArrayRef
argument_list|>
name|types
decl_stmt|;
if|if
condition|(
name|PasteboardCopyItemFlavors
argument_list|(
name|paste
argument_list|,
name|id
argument_list|,
operator|&
name|types
argument_list|)
operator|!=
name|noErr
condition|)
continue|continue;
specifier|const
name|int
name|type_count
init|=
name|CFArrayGetCount
argument_list|(
name|types
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|type_count
condition|;
operator|++
name|i
control|)
block|{
name|CFStringRef
name|flavor
init|=
cast|static_cast
argument_list|<
name|CFStringRef
argument_list|>
argument_list|(
name|CFArrayGetValueAtIndex
argument_list|(
name|types
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|c_flavor
operator|==
name|QCFString
operator|::
name|toQString
argument_list|(
name|flavor
argument_list|)
condition|)
block|{
name|QCFType
argument_list|<
name|CFDataRef
argument_list|>
name|macBuffer
decl_stmt|;
if|if
condition|(
name|PasteboardCopyItemFlavorData
argument_list|(
name|paste
argument_list|,
name|id
argument_list|,
name|flavor
argument_list|,
operator|&
name|macBuffer
argument_list|)
operator|==
name|noErr
condition|)
block|{
name|QByteArray
name|buffer
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|CFDataGetBytePtr
argument_list|(
name|macBuffer
argument_list|)
argument_list|,
name|CFDataGetLength
argument_list|(
name|macBuffer
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|"  - %s [%s] (%s)"
argument_list|,
name|qPrintable
argument_list|(
name|format
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QCFString
operator|::
name|toQString
argument_list|(
name|flavor
argument_list|)
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|c
operator|->
name|convertorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|buffer
operator|.
name|detach
argument_list|()
expr_stmt|;
comment|//detach since we release the macBuffer
name|retList
operator|.
name|append
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
break|break;
comment|//skip to next element
block|}
block|}
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|"  - NoMatch %s [%s] (%s)"
argument_list|,
name|qPrintable
argument_list|(
name|c_flavor
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QCFString
operator|::
name|toQString
argument_list|(
name|flavor
argument_list|)
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|c
operator|->
name|convertorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
block|}
if|if
condition|(
operator|!
name|retList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|=
name|c
operator|->
name|convertToMime
argument_list|(
name|format
argument_list|,
name|retList
argument_list|,
name|c_flavor
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|clear_helper
name|void
name|QMacPasteboard
operator|::
name|clear_helper
parameter_list|()
block|{
if|if
condition|(
name|paste
condition|)
name|PasteboardClear
argument_list|(
name|paste
argument_list|)
expr_stmt|;
name|promises
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|clear
name|QMacPasteboard
operator|::
name|clear
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
name|qDebug
argument_list|(
literal|"PasteBoard: clear!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|clear_helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
name|bool
DECL|function|sync
name|QMacPasteboard
operator|::
name|sync
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|paste
condition|)
return|return
literal|false
return|;
specifier|const
name|bool
name|fromGlobal
init|=
name|PasteboardSynchronize
argument_list|(
name|paste
argument_list|)
operator|&
name|kPasteboardModified
decl_stmt|;
if|if
condition|(
name|fromGlobal
condition|)
cast|const_cast
argument_list|<
name|QMacPasteboard
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|setMimeData
argument_list|(
literal|0
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_PASTEBOARD
if|if
condition|(
name|fromGlobal
condition|)
name|qDebug
argument_list|(
literal|"Pasteboard: Synchronize!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|fromGlobal
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
