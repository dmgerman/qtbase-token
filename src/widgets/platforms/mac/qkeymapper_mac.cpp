begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qt_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<private/qevent_p.h>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qinputcontext.h>
end_include
begin_include
include|#
directive|include
file|<private/qkeymapper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qmacinputcontext_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|QT_USE_NAMESPACE
comment|/*****************************************************************************   QKeyMapper debug facilities  *****************************************************************************/
comment|//#define DEBUG_KEY_BINDINGS
comment|//#define DEBUG_KEY_BINDINGS_MODIFIERS
comment|//#define DEBUG_KEY_MAPS
comment|/*****************************************************************************   Internal variables and functions  *****************************************************************************/
DECL|variable|qt_mac_eat_unicode_key
name|bool
name|qt_mac_eat_unicode_key
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|bool
name|qt_sendSpontaneousEvent
parameter_list|(
name|QObject
modifier|*
name|obj
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//qapplication_mac.cpp
end_comment
begin_function
DECL|function|qt_mac_secure_keyboard
name|Q_WIDGETS_EXPORT
name|void
name|qt_mac_secure_keyboard
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
specifier|static
name|bool
name|secure
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|b
operator|!=
name|secure
condition|)
block|{
name|b
condition|?
name|EnableSecureEventInput
argument_list|()
else|:
name|DisableSecureEventInput
argument_list|()
expr_stmt|;
name|secure
operator|=
name|b
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*     \internal     A Mac KeyboardLayoutItem has 8 possible states:         1. Unmodified         2. Shift         3. Control         4. Control + Shift         5. Alt         6. Alt + Shift         7. Alt + Control         8. Alt + Control + Shift         9. Meta         10. Meta + Shift         11. Meta + Control         12. Meta + Control + Shift         13. Meta + Alt         14. Meta + Alt + Shift         15. Meta + Alt + Control         16. Meta + Alt + Control + Shift */
end_comment
begin_struct
DECL|struct|KeyboardLayoutItem
struct|struct
name|KeyboardLayoutItem
block|{
DECL|member|dirty
name|bool
name|dirty
decl_stmt|;
DECL|member|qtKey
name|quint32
name|qtKey
index|[
literal|16
index|]
decl_stmt|;
comment|// Can by any Qt::Key_<foo>, or unicode character
block|}
struct|;
end_struct
begin_comment
comment|// Possible modifier states.
end_comment
begin_comment
comment|// NOTE: The order of these states match the order in QKeyMapperPrivate::updatePossibleKeyCodes()!
end_comment
begin_decl_stmt
DECL|variable|ModsTbl
specifier|static
specifier|const
name|Qt
operator|::
name|KeyboardModifiers
name|ModsTbl
index|[]
init|=
block|{
name|Qt
operator|::
name|NoModifier
block|,
comment|// 0
name|Qt
operator|::
name|ShiftModifier
block|,
comment|// 1
name|Qt
operator|::
name|ControlModifier
block|,
comment|// 2
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|ShiftModifier
block|,
comment|// 3
name|Qt
operator|::
name|AltModifier
block|,
comment|// 4
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ShiftModifier
block|,
comment|// 5
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ControlModifier
block|,
comment|// 6
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
block|,
comment|// 7
name|Qt
operator|::
name|MetaModifier
block|,
comment|// 8
name|Qt
operator|::
name|MetaModifier
operator||
name|Qt
operator|::
name|ShiftModifier
block|,
comment|// 9
name|Qt
operator|::
name|MetaModifier
operator||
name|Qt
operator|::
name|ControlModifier
block|,
comment|// 10
name|Qt
operator|::
name|MetaModifier
operator||
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|ShiftModifier
block|,
comment|// 11
name|Qt
operator|::
name|MetaModifier
operator||
name|Qt
operator|::
name|AltModifier
block|,
comment|// 12
name|Qt
operator|::
name|MetaModifier
operator||
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ShiftModifier
block|,
comment|// 13
name|Qt
operator|::
name|MetaModifier
operator||
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ControlModifier
block|,
comment|// 14
name|Qt
operator|::
name|MetaModifier
operator||
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
block|,
comment|// 15
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* key maps */
end_comment
begin_struct
DECL|struct|qt_mac_enum_mapper
struct|struct
name|qt_mac_enum_mapper
block|{
DECL|member|mac_code
name|int
name|mac_code
decl_stmt|;
DECL|member|qt_code
name|int
name|qt_code
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_KEY_BINDINGS
argument_list|)
DECL|macro|QT_MAC_MAP_ENUM
define|#
directive|define
name|QT_MAC_MAP_ENUM
parameter_list|(
name|x
parameter_list|)
value|x, #x
DECL|member|desc
specifier|const
name|char
modifier|*
name|desc
decl_stmt|;
else|#
directive|else
DECL|macro|QT_MAC_MAP_ENUM
define|#
directive|define
name|QT_MAC_MAP_ENUM
parameter_list|(
name|x
parameter_list|)
value|x
endif|#
directive|endif
block|}
struct|;
end_struct
begin_comment
comment|//modifiers
end_comment
begin_decl_stmt
DECL|variable|qt_mac_modifier_symbols
specifier|static
name|qt_mac_enum_mapper
name|qt_mac_modifier_symbols
index|[]
init|=
block|{
block|{
name|shiftKey
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::ShiftModifier
argument_list|)
block|}
block|,
block|{
name|rightShiftKey
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::ShiftModifier
argument_list|)
block|}
block|,
block|{
name|controlKey
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::MetaModifier
argument_list|)
block|}
block|,
block|{
name|rightControlKey
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::MetaModifier
argument_list|)
block|}
block|,
block|{
name|cmdKey
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::ControlModifier
argument_list|)
block|}
block|,
block|{
name|optionKey
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::AltModifier
argument_list|)
block|}
block|,
block|{
name|rightOptionKey
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::AltModifier
argument_list|)
block|}
block|,
block|{
name|kEventKeyModifierNumLockMask
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::KeypadModifier
argument_list|)
block|}
block|,
block|{
literal|0
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
literal|0
argument_list|)
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_mac_get_modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|qt_mac_get_modifiers
parameter_list|(
name|int
name|keys
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS_MODIFIERS
name|qDebug
argument_list|(
literal|"Qt: internal: **Mapping modifiers: %d (0x%04x)"
argument_list|,
name|keys
argument_list|,
name|keys
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Qt
operator|::
name|KeyboardModifiers
name|ret
init|=
name|Qt
operator|::
name|NoModifier
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|qt_mac_modifier_symbols
index|[
name|i
index|]
operator|.
name|qt_code
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keys
operator|&
name|qt_mac_modifier_symbols
index|[
name|i
index|]
operator|.
name|mac_code
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS_MODIFIERS
name|qDebug
argument_list|(
literal|"Qt: internal: got modifier: %s"
argument_list|,
name|qt_mac_modifier_symbols
index|[
name|i
index|]
operator|.
name|desc
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ret
operator||=
name|Qt
operator|::
name|KeyboardModifier
argument_list|(
name|qt_mac_modifier_symbols
index|[
name|i
index|]
operator|.
name|qt_code
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|qApp
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_MacDontSwapCtrlAndMeta
argument_list|)
condition|)
block|{
name|Qt
operator|::
name|KeyboardModifiers
name|oldModifiers
init|=
name|ret
decl_stmt|;
name|ret
operator|&=
operator|~
operator|(
name|Qt
operator|::
name|MetaModifier
operator||
name|Qt
operator|::
name|ControlModifier
operator|)
expr_stmt|;
if|if
condition|(
name|oldModifiers
operator|&
name|Qt
operator|::
name|ControlModifier
condition|)
name|ret
operator||=
name|Qt
operator|::
name|MetaModifier
expr_stmt|;
if|if
condition|(
name|oldModifiers
operator|&
name|Qt
operator|::
name|MetaModifier
condition|)
name|ret
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|qt_mac_get_mac_modifiers
specifier|static
name|int
name|qt_mac_get_mac_modifiers
parameter_list|(
name|Qt
operator|::
name|KeyboardModifiers
name|keys
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS_MODIFIERS
name|qDebug
argument_list|(
literal|"Qt: internal: **Mapping modifiers: %d (0x%04x)"
argument_list|,
operator|(
name|int
operator|)
name|keys
argument_list|,
operator|(
name|int
operator|)
name|keys
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|qt_mac_modifier_symbols
index|[
name|i
index|]
operator|.
name|qt_code
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keys
operator|&
name|qt_mac_modifier_symbols
index|[
name|i
index|]
operator|.
name|qt_code
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS_MODIFIERS
name|qDebug
argument_list|(
literal|"Qt: internal: got modifier: %s"
argument_list|,
name|qt_mac_modifier_symbols
index|[
name|i
index|]
operator|.
name|desc
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ret
operator||=
name|qt_mac_modifier_symbols
index|[
name|i
index|]
operator|.
name|mac_code
expr_stmt|;
block|}
block|}
if|if
condition|(
name|qApp
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_MacDontSwapCtrlAndMeta
argument_list|)
condition|)
block|{
name|int
name|oldModifiers
init|=
name|ret
decl_stmt|;
name|ret
operator|&=
operator|~
operator|(
name|controlKeyBit
operator||
name|cmdKeyBit
operator|)
expr_stmt|;
if|if
condition|(
name|oldModifiers
operator|&
name|controlKeyBit
condition|)
name|ret
operator||=
name|cmdKeyBit
expr_stmt|;
if|if
condition|(
name|oldModifiers
operator|&
name|cmdKeyBit
condition|)
name|ret
operator||=
name|controlKeyBit
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|qt_mac_send_modifiers_changed
name|void
name|qt_mac_send_modifiers_changed
parameter_list|(
name|quint32
name|modifiers
parameter_list|,
name|QObject
modifier|*
name|object
parameter_list|)
block|{
specifier|static
name|quint32
name|cachedModifiers
init|=
literal|0
decl_stmt|;
name|quint32
name|lastModifiers
init|=
name|cachedModifiers
decl_stmt|,
name|changedModifiers
init|=
name|lastModifiers
operator|^
name|modifiers
decl_stmt|;
name|cachedModifiers
operator|=
name|modifiers
expr_stmt|;
comment|//check the bits
specifier|static
name|qt_mac_enum_mapper
name|modifier_key_symbols
index|[]
init|=
block|{
block|{
name|shiftKeyBit
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Shift
argument_list|)
block|}
block|,
block|{
name|rightShiftKeyBit
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Shift
argument_list|)
block|}
block|,
comment|//???
block|{
name|controlKeyBit
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Meta
argument_list|)
block|}
block|,
block|{
name|rightControlKeyBit
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Meta
argument_list|)
block|}
block|,
comment|//???
block|{
name|cmdKeyBit
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Control
argument_list|)
block|}
block|,
block|{
name|optionKeyBit
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Alt
argument_list|)
block|}
block|,
block|{
name|rightOptionKeyBit
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Alt
argument_list|)
block|}
block|,
comment|//???
block|{
name|alphaLockBit
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_CapsLock
argument_list|)
block|}
block|,
block|{
name|kEventKeyModifierNumLockBit
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_NumLock
argument_list|)
block|}
block|,
block|{
literal|0
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
literal|0
argument_list|)
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|32
condition|;
name|i
operator|++
control|)
block|{
comment|//just check each bit
if|if
condition|(
operator|!
operator|(
name|changedModifiers
operator|&
operator|(
literal|1
operator|<<
name|i
operator|)
operator|)
condition|)
continue|continue;
name|QEvent
operator|::
name|Type
name|etype
init|=
name|QEvent
operator|::
name|KeyPress
decl_stmt|;
if|if
condition|(
name|lastModifiers
operator|&
operator|(
literal|1
operator|<<
name|i
operator|)
condition|)
name|etype
operator|=
name|QEvent
operator|::
name|KeyRelease
expr_stmt|;
name|int
name|key
init|=
literal|0
decl_stmt|;
for|for
control|(
name|uint
name|x
init|=
literal|0
init|;
name|modifier_key_symbols
index|[
name|x
index|]
operator|.
name|mac_code
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|modifier_key_symbols
index|[
name|x
index|]
operator|.
name|mac_code
operator|==
name|i
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS_MODIFIERS
name|qDebug
argument_list|(
literal|"got modifier changed: %s"
argument_list|,
name|modifier_key_symbols
index|[
name|x
index|]
operator|.
name|desc
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|key
operator|=
name|modifier_key_symbols
index|[
name|x
index|]
operator|.
name|qt_code
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|key
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS_MODIFIERS
name|qDebug
argument_list|(
literal|"could not get modifier changed: %d"
argument_list|,
name|i
argument_list|)
expr_stmt|;
endif|#
directive|endif
continue|continue;
block|}
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS_MODIFIERS
name|qDebug
argument_list|(
literal|"KeyEvent (modif): Sending %s to %s::%s: %d - 0x%08x"
argument_list|,
name|etype
operator|==
name|QEvent
operator|::
name|KeyRelease
condition|?
literal|"KeyRelease"
else|:
literal|"KeyPress"
argument_list|,
name|object
condition|?
name|object
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
else|:
literal|"none"
argument_list|,
name|object
condition|?
name|object
operator|->
name|objectName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
else|:
literal|""
argument_list|,
name|key
argument_list|,
operator|(
name|int
operator|)
name|modifiers
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QKeyEvent
name|ke
argument_list|(
name|etype
argument_list|,
name|key
argument_list|,
name|qt_mac_get_modifiers
argument_list|(
name|modifiers
operator|^
operator|(
literal|1
operator|<<
name|i
operator|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|qt_sendSpontaneousEvent
argument_list|(
name|object
argument_list|,
operator|&
name|ke
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//keyboard keys (non-modifiers)
end_comment
begin_decl_stmt
DECL|variable|qt_mac_keyboard_symbols
specifier|static
name|qt_mac_enum_mapper
name|qt_mac_keyboard_symbols
index|[]
init|=
block|{
block|{
name|kHomeCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Home
argument_list|)
block|}
block|,
block|{
name|kEnterCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Enter
argument_list|)
block|}
block|,
block|{
name|kEndCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_End
argument_list|)
block|}
block|,
block|{
name|kBackspaceCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Backspace
argument_list|)
block|}
block|,
block|{
name|kTabCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Tab
argument_list|)
block|}
block|,
block|{
name|kPageUpCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_PageUp
argument_list|)
block|}
block|,
block|{
name|kPageDownCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_PageDown
argument_list|)
block|}
block|,
block|{
name|kReturnCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Return
argument_list|)
block|}
block|,
block|{
name|kEscapeCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Escape
argument_list|)
block|}
block|,
block|{
name|kLeftArrowCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Left
argument_list|)
block|}
block|,
block|{
name|kRightArrowCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Right
argument_list|)
block|}
block|,
block|{
name|kUpArrowCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Up
argument_list|)
block|}
block|,
block|{
name|kDownArrowCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Down
argument_list|)
block|}
block|,
block|{
name|kHelpCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Help
argument_list|)
block|}
block|,
block|{
name|kDeleteCharCode
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Delete
argument_list|)
block|}
block|,
comment|//ascii maps, for debug
block|{
literal|':'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Colon
argument_list|)
block|}
block|,
block|{
literal|';'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Semicolon
argument_list|)
block|}
block|,
block|{
literal|'<'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Less
argument_list|)
block|}
block|,
block|{
literal|'='
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Equal
argument_list|)
block|}
block|,
block|{
literal|'>'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Greater
argument_list|)
block|}
block|,
block|{
literal|'?'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Question
argument_list|)
block|}
block|,
block|{
literal|'@'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_At
argument_list|)
block|}
block|,
block|{
literal|' '
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Space
argument_list|)
block|}
block|,
block|{
literal|'!'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Exclam
argument_list|)
block|}
block|,
block|{
literal|'"'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_QuoteDbl
argument_list|)
block|}
block|,
block|{
literal|'#'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_NumberSign
argument_list|)
block|}
block|,
block|{
literal|'$'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Dollar
argument_list|)
block|}
block|,
block|{
literal|'%'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Percent
argument_list|)
block|}
block|,
block|{
literal|'&'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Ampersand
argument_list|)
block|}
block|,
block|{
literal|'\''
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Apostrophe
argument_list|)
block|}
block|,
block|{
literal|'('
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_ParenLeft
argument_list|)
block|}
block|,
block|{
literal|')'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_ParenRight
argument_list|)
block|}
block|,
block|{
literal|'*'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Asterisk
argument_list|)
block|}
block|,
block|{
literal|'+'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Plus
argument_list|)
block|}
block|,
block|{
literal|','
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Comma
argument_list|)
block|}
block|,
block|{
literal|'-'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Minus
argument_list|)
block|}
block|,
block|{
literal|'.'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Period
argument_list|)
block|}
block|,
block|{
literal|'/'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Slash
argument_list|)
block|}
block|,
block|{
literal|'['
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_BracketLeft
argument_list|)
block|}
block|,
block|{
literal|']'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_BracketRight
argument_list|)
block|}
block|,
block|{
literal|'\\'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Backslash
argument_list|)
block|}
block|,
block|{
literal|'_'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Underscore
argument_list|)
block|}
block|,
block|{
literal|'`'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_QuoteLeft
argument_list|)
block|}
block|,
block|{
literal|'{'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_BraceLeft
argument_list|)
block|}
block|,
block|{
literal|'}'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_BraceRight
argument_list|)
block|}
block|,
block|{
literal|'|'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Bar
argument_list|)
block|}
block|,
block|{
literal|'~'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_AsciiTilde
argument_list|)
block|}
block|,
block|{
literal|'^'
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_AsciiCircum
argument_list|)
block|}
block|,
block|{
literal|0
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
literal|0
argument_list|)
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_mac_keyvkey_symbols
specifier|static
name|qt_mac_enum_mapper
name|qt_mac_keyvkey_symbols
index|[]
init|=
block|{
comment|//real scan codes
block|{
literal|122
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F1
argument_list|)
block|}
block|,
block|{
literal|120
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F2
argument_list|)
block|}
block|,
block|{
literal|99
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F3
argument_list|)
block|}
block|,
block|{
literal|118
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F4
argument_list|)
block|}
block|,
block|{
literal|96
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F5
argument_list|)
block|}
block|,
block|{
literal|97
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F6
argument_list|)
block|}
block|,
block|{
literal|98
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F7
argument_list|)
block|}
block|,
block|{
literal|100
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F8
argument_list|)
block|}
block|,
block|{
literal|101
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F9
argument_list|)
block|}
block|,
block|{
literal|109
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F10
argument_list|)
block|}
block|,
block|{
literal|103
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F11
argument_list|)
block|}
block|,
block|{
literal|111
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F12
argument_list|)
block|}
block|,
block|{
literal|105
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F13
argument_list|)
block|}
block|,
block|{
literal|107
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F14
argument_list|)
block|}
block|,
block|{
literal|113
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F15
argument_list|)
block|}
block|,
block|{
literal|106
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_F16
argument_list|)
block|}
block|,
block|{
literal|0
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
literal|0
argument_list|)
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_mac_private_unicode
specifier|static
name|qt_mac_enum_mapper
name|qt_mac_private_unicode
index|[]
init|=
block|{
block|{
literal|0xF700
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Up
argument_list|)
block|}
block|,
comment|//NSUpArrowFunctionKey
block|{
literal|0xF701
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Down
argument_list|)
block|}
block|,
comment|//NSDownArrowFunctionKey
block|{
literal|0xF702
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Left
argument_list|)
block|}
block|,
comment|//NSLeftArrowFunctionKey
block|{
literal|0xF703
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Right
argument_list|)
block|}
block|,
comment|//NSRightArrowFunctionKey
block|{
literal|0xF727
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Insert
argument_list|)
block|}
block|,
comment|//NSInsertFunctionKey
block|{
literal|0xF728
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Delete
argument_list|)
block|}
block|,
comment|//NSDeleteFunctionKey
block|{
literal|0xF729
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Home
argument_list|)
block|}
block|,
comment|//NSHomeFunctionKey
block|{
literal|0xF72B
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_End
argument_list|)
block|}
block|,
comment|//NSEndFunctionKey
block|{
literal|0xF72C
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_PageUp
argument_list|)
block|}
block|,
comment|//NSPageUpFunctionKey
block|{
literal|0xF72D
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_PageDown
argument_list|)
block|}
block|,
comment|//NSPageDownFunctionKey
block|{
literal|0xF72F
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_ScrollLock
argument_list|)
block|}
block|,
comment|//NSScrollLockFunctionKey
block|{
literal|0xF730
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Pause
argument_list|)
block|}
block|,
comment|//NSPauseFunctionKey
block|{
literal|0xF731
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_SysReq
argument_list|)
block|}
block|,
comment|//NSSysReqFunctionKey
block|{
literal|0xF735
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Menu
argument_list|)
block|}
block|,
comment|//NSMenuFunctionKey
block|{
literal|0xF738
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Print
argument_list|)
block|}
block|,
comment|//NSPrintFunctionKey
block|{
literal|0xF73A
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Clear
argument_list|)
block|}
block|,
comment|//NSClearDisplayFunctionKey
block|{
literal|0xF73D
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Insert
argument_list|)
block|}
block|,
comment|//NSInsertCharFunctionKey
block|{
literal|0xF73E
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Delete
argument_list|)
block|}
block|,
comment|//NSDeleteCharFunctionKey
block|{
literal|0xF741
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Select
argument_list|)
block|}
block|,
comment|//NSSelectFunctionKey
block|{
literal|0xF742
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Execute
argument_list|)
block|}
block|,
comment|//NSExecuteFunctionKey
block|{
literal|0xF746
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Help
argument_list|)
block|}
block|,
comment|//NSHelpFunctionKey
block|{
literal|0xF747
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
argument|Qt::Key_Mode_switch
argument_list|)
block|}
block|,
comment|//NSModeSwitchFunctionKey
block|{
literal|0
block|,
name|QT_MAC_MAP_ENUM
argument_list|(
literal|0
argument_list|)
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_mac_get_key
specifier|static
name|int
name|qt_mac_get_key
parameter_list|(
name|int
name|modif
parameter_list|,
specifier|const
name|QChar
modifier|&
name|key
parameter_list|,
name|int
name|virtualKey
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS
name|qDebug
argument_list|(
literal|"**Mapping key: %d (0x%04x) - %d (0x%04x)"
argument_list|,
name|key
operator|.
name|unicode
argument_list|()
argument_list|,
name|key
operator|.
name|unicode
argument_list|()
argument_list|,
name|virtualKey
argument_list|,
name|virtualKey
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|key
operator|==
name|kClearCharCode
operator|&&
name|virtualKey
operator|==
literal|0x47
condition|)
return|return
name|Qt
operator|::
name|Key_Clear
return|;
if|if
condition|(
name|key
operator|.
name|isDigit
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS
name|qDebug
argument_list|(
literal|"%d: got key: %d"
argument_list|,
name|__LINE__
argument_list|,
name|key
operator|.
name|digitValue
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|key
operator|.
name|digitValue
argument_list|()
operator|+
name|Qt
operator|::
name|Key_0
return|;
block|}
if|if
condition|(
name|key
operator|.
name|isLetter
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS
name|qDebug
argument_list|(
literal|"%d: got key: %d"
argument_list|,
name|__LINE__
argument_list|,
operator|(
name|key
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
operator|-
literal|'A'
operator|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
operator|(
name|key
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
operator|-
literal|'A'
operator|)
operator|+
name|Qt
operator|::
name|Key_A
return|;
block|}
if|if
condition|(
name|key
operator|.
name|isSymbol
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS
name|qDebug
argument_list|(
literal|"%d: got key: %d"
argument_list|,
name|__LINE__
argument_list|,
operator|(
name|key
operator|.
name|unicode
argument_list|()
operator|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|key
operator|.
name|unicode
argument_list|()
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|qt_mac_keyboard_symbols
index|[
name|i
index|]
operator|.
name|qt_code
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|qt_mac_keyboard_symbols
index|[
name|i
index|]
operator|.
name|mac_code
operator|==
name|key
condition|)
block|{
comment|/* To work like Qt for X11 we issue Backtab when Shift + Tab are pressed */
if|if
condition|(
name|qt_mac_keyboard_symbols
index|[
name|i
index|]
operator|.
name|qt_code
operator|==
name|Qt
operator|::
name|Key_Tab
operator|&&
operator|(
name|modif
operator|&
name|Qt
operator|::
name|ShiftModifier
operator|)
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS
name|qDebug
argument_list|(
literal|"%d: got key: Qt::Key_Backtab"
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|Qt
operator|::
name|Key_Backtab
return|;
block|}
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS
name|qDebug
argument_list|(
literal|"%d: got key: %s"
argument_list|,
name|__LINE__
argument_list|,
name|qt_mac_keyboard_symbols
index|[
name|i
index|]
operator|.
name|desc
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|qt_mac_keyboard_symbols
index|[
name|i
index|]
operator|.
name|qt_code
return|;
block|}
block|}
comment|//last ditch try to match the scan code
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|qt_mac_keyvkey_symbols
index|[
name|i
index|]
operator|.
name|qt_code
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|qt_mac_keyvkey_symbols
index|[
name|i
index|]
operator|.
name|mac_code
operator|==
name|virtualKey
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS
name|qDebug
argument_list|(
literal|"%d: got key: %s"
argument_list|,
name|__LINE__
argument_list|,
name|qt_mac_keyvkey_symbols
index|[
name|i
index|]
operator|.
name|desc
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|qt_mac_keyvkey_symbols
index|[
name|i
index|]
operator|.
name|qt_code
return|;
block|}
block|}
comment|// check if they belong to key codes in private unicode range
if|if
condition|(
name|key
operator|>=
literal|0xf700
operator|&&
name|key
operator|<=
literal|0xf747
condition|)
block|{
if|if
condition|(
name|key
operator|>=
literal|0xf704
operator|&&
name|key
operator|<=
literal|0xf726
condition|)
block|{
return|return
name|Qt
operator|::
name|Key_F1
operator|+
operator|(
name|key
operator|.
name|unicode
argument_list|()
operator|-
literal|0xf704
operator|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|qt_mac_private_unicode
index|[
name|i
index|]
operator|.
name|qt_code
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|qt_mac_private_unicode
index|[
name|i
index|]
operator|.
name|mac_code
operator|==
name|key
condition|)
block|{
return|return
name|qt_mac_private_unicode
index|[
name|i
index|]
operator|.
name|qt_code
return|;
block|}
block|}
block|}
comment|//oh well
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS
name|qDebug
argument_list|(
literal|"Unknown case.. %s:%d %d[%d] %d"
argument_list|,
name|__FILE__
argument_list|,
name|__LINE__
argument_list|,
name|key
operator|.
name|unicode
argument_list|()
argument_list|,
name|key
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|virtualKey
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|Qt
operator|::
name|Key_unknown
return|;
block|}
end_function
begin_function
DECL|function|qt_KeyEventComparatorProc
specifier|static
name|Boolean
name|qt_KeyEventComparatorProc
parameter_list|(
name|EventRef
name|inEvent
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|UInt32
name|ekind
init|=
name|GetEventKind
argument_list|(
name|inEvent
argument_list|)
decl_stmt|,
name|eclass
init|=
name|GetEventClass
argument_list|(
name|inEvent
argument_list|)
decl_stmt|;
return|return
operator|(
name|eclass
operator|==
name|kEventClassKeyboard
operator|&&
operator|(
name|void
operator|*
operator|)
name|ekind
operator|==
name|data
operator|)
return|;
block|}
end_function
begin_function
DECL|function|translateKeyEventInternal
specifier|static
name|bool
name|translateKeyEventInternal
parameter_list|(
name|EventHandlerCallRef
name|er
parameter_list|,
name|EventRef
name|keyEvent
parameter_list|,
name|int
modifier|*
name|qtKey
parameter_list|,
name|QChar
modifier|*
name|outChar
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
modifier|*
name|outModifiers
parameter_list|,
name|bool
modifier|*
name|outHandled
parameter_list|)
block|{
specifier|const
name|UInt32
name|ekind
init|=
name|GetEventKind
argument_list|(
name|keyEvent
argument_list|)
decl_stmt|;
block|{
name|UInt32
name|mac_modifiers
init|=
literal|0
decl_stmt|;
name|GetEventParameter
argument_list|(
name|keyEvent
argument_list|,
name|kEventParamKeyModifiers
argument_list|,
name|typeUInt32
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|mac_modifiers
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|&
name|mac_modifiers
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS_MODIFIERS
name|qDebug
argument_list|(
literal|"************ Mapping modifiers and key ***********"
argument_list|)
expr_stmt|;
endif|#
directive|endif
operator|*
name|outModifiers
operator|=
name|qt_mac_get_modifiers
argument_list|(
name|mac_modifiers
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS_MODIFIERS
name|qDebug
argument_list|(
literal|"------------ Mapping modifiers and key -----------"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
comment|//get keycode
name|UInt32
name|keyCode
init|=
literal|0
decl_stmt|;
name|GetEventParameter
argument_list|(
name|keyEvent
argument_list|,
name|kEventParamKeyCode
argument_list|,
name|typeUInt32
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|keyCode
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|&
name|keyCode
argument_list|)
expr_stmt|;
comment|//get mac mapping
specifier|static
name|UInt32
name|tmp_unused_state
init|=
literal|0L
decl_stmt|;
specifier|const
name|UCKeyboardLayout
modifier|*
name|uchrData
init|=
literal|0
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC32
argument_list|)
name|KeyboardLayoutRef
name|keyLayoutRef
init|=
literal|0
decl_stmt|;
name|KLGetCurrentKeyboardLayout
argument_list|(
operator|&
name|keyLayoutRef
argument_list|)
expr_stmt|;
name|OSStatus
name|err
decl_stmt|;
if|if
condition|(
name|keyLayoutRef
operator|!=
literal|0
condition|)
block|{
name|err
operator|=
name|KLGetKeyboardLayoutProperty
argument_list|(
name|keyLayoutRef
argument_list|,
name|kKLuchrData
argument_list|,
operator|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|uchrData
argument_list|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|noErr
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt::internal::unable to get keyboardlayout %ld %s:%d"
argument_list|,
name|long
argument_list|(
name|err
argument_list|)
argument_list|,
name|__FILE__
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
block|}
block|}
else|#
directive|else
name|QCFType
argument_list|<
name|TISInputSourceRef
argument_list|>
name|inputSource
init|=
name|TISCopyCurrentKeyboardInputSource
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|inputSource
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|CFDataRef
name|data
init|=
cast|static_cast
argument_list|<
name|CFDataRef
argument_list|>
argument_list|(
name|TISGetInputSourceProperty
argument_list|(
name|inputSource
argument_list|,
name|kTISPropertyUnicodeKeyLayoutData
argument_list|)
argument_list|)
decl_stmt|;
name|uchrData
operator|=
name|data
condition|?
cast|reinterpret_cast
argument_list|<
specifier|const
name|UCKeyboardLayout
operator|*
argument_list|>
argument_list|(
name|CFDataGetBytePtr
argument_list|(
name|data
argument_list|)
argument_list|)
else|:
literal|0
expr_stmt|;
endif|#
directive|endif
operator|*
name|qtKey
operator|=
name|Qt
operator|::
name|Key_unknown
expr_stmt|;
if|if
condition|(
name|uchrData
condition|)
block|{
comment|// The easy stuff; use the unicode stuff!
name|UniChar
name|string
index|[
literal|4
index|]
decl_stmt|;
name|UniCharCount
name|actualLength
decl_stmt|;
name|UInt32
name|currentModifiers
init|=
name|GetCurrentEventKeyModifiers
argument_list|()
decl_stmt|;
name|UInt32
name|currentModifiersWOAltOrControl
init|=
name|currentModifiers
operator|&
operator|~
operator|(
name|controlKey
operator||
name|optionKey
operator|)
decl_stmt|;
name|int
name|keyAction
decl_stmt|;
switch|switch
condition|(
name|ekind
condition|)
block|{
default|default:
case|case
name|kEventRawKeyDown
case|:
name|keyAction
operator|=
name|kUCKeyActionDown
expr_stmt|;
break|break;
case|case
name|kEventRawKeyUp
case|:
name|keyAction
operator|=
name|kUCKeyActionUp
expr_stmt|;
break|break;
case|case
name|kEventRawKeyRepeat
case|:
name|keyAction
operator|=
name|kUCKeyActionAutoKey
expr_stmt|;
break|break;
block|}
name|OSStatus
name|err
init|=
name|UCKeyTranslate
argument_list|(
name|uchrData
argument_list|,
name|keyCode
argument_list|,
name|keyAction
argument_list|,
operator|(
operator|(
name|currentModifiersWOAltOrControl
operator|>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
argument_list|,
name|LMGetKbdType
argument_list|()
argument_list|,
name|kUCKeyTranslateNoDeadKeysMask
argument_list|,
operator|&
name|tmp_unused_state
argument_list|,
literal|4
argument_list|,
operator|&
name|actualLength
argument_list|,
name|string
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
block|{
operator|*
name|outChar
operator|=
name|QChar
argument_list|(
name|string
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
operator|*
name|qtKey
operator|=
name|qt_mac_get_key
argument_list|(
operator|*
name|outModifiers
argument_list|,
operator|*
name|outChar
argument_list|,
name|keyCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentModifiersWOAltOrControl
operator|!=
name|currentModifiers
condition|)
block|{
comment|// Now get the real char.
name|err
operator|=
name|UCKeyTranslate
argument_list|(
name|uchrData
argument_list|,
name|keyCode
argument_list|,
name|keyAction
argument_list|,
operator|(
operator|(
name|currentModifiers
operator|>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
argument_list|,
name|LMGetKbdType
argument_list|()
argument_list|,
name|kUCKeyTranslateNoDeadKeysMask
argument_list|,
operator|&
name|tmp_unused_state
argument_list|,
literal|4
argument_list|,
operator|&
name|actualLength
argument_list|,
name|string
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
operator|*
name|outChar
operator|=
name|QChar
argument_list|(
name|string
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Qt::internal::UCKeyTranslate is returnining %ld %s:%d"
argument_list|,
name|long
argument_list|(
name|err
argument_list|)
argument_list|,
name|__FILE__
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|Q_OS_MAC32
else|else
block|{
comment|// The road less travelled; use KeyTranslate
specifier|const
name|void
modifier|*
name|keyboard_layout
decl_stmt|;
name|KeyboardLayoutRef
name|keyLayoutRef
init|=
literal|0
decl_stmt|;
name|KLGetCurrentKeyboardLayout
argument_list|(
operator|&
name|keyLayoutRef
argument_list|)
expr_stmt|;
name|err
operator|=
name|KLGetKeyboardLayoutProperty
argument_list|(
name|keyLayoutRef
argument_list|,
name|kKLKCHRData
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|keyboard_layout
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|translatedChar
init|=
name|KeyTranslate
argument_list|(
name|keyboard_layout
argument_list|,
operator|(
name|GetCurrentEventKeyModifiers
argument_list|()
operator|&
operator|(
name|kEventKeyModifierNumLockMask
operator||
name|shiftKey
operator||
name|cmdKey
operator||
name|rightShiftKey
operator||
name|alphaLock
operator|)
operator|)
operator||
name|keyCode
argument_list|,
operator|&
name|tmp_unused_state
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|translatedChar
condition|)
block|{
if|if
condition|(
name|outHandled
condition|)
block|{
name|qt_mac_eat_unicode_key
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|er
condition|)
name|CallNextEventHandler
argument_list|(
name|er
argument_list|,
name|keyEvent
argument_list|)
expr_stmt|;
operator|*
name|outHandled
operator|=
name|qt_mac_eat_unicode_key
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|//map it into qt keys
operator|*
name|qtKey
operator|=
name|qt_mac_get_key
argument_list|(
operator|*
name|outModifiers
argument_list|,
name|QChar
argument_list|(
name|translatedChar
argument_list|)
argument_list|,
name|keyCode
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|outModifiers
operator|&
operator|(
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ControlModifier
operator|)
condition|)
block|{
if|if
condition|(
name|translatedChar
operator|&
operator|(
literal|1
operator|<<
literal|7
operator|)
condition|)
comment|//high ascii
name|translatedChar
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|//now get the real ascii value
name|UInt32
name|tmp_mod
init|=
literal|0L
decl_stmt|;
specifier|static
name|UInt32
name|tmp_state
init|=
literal|0L
decl_stmt|;
if|if
condition|(
operator|*
name|outModifiers
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
name|tmp_mod
operator||=
name|shiftKey
expr_stmt|;
if|if
condition|(
operator|*
name|outModifiers
operator|&
name|Qt
operator|::
name|MetaModifier
condition|)
name|tmp_mod
operator||=
name|controlKey
expr_stmt|;
if|if
condition|(
operator|*
name|outModifiers
operator|&
name|Qt
operator|::
name|ControlModifier
condition|)
name|tmp_mod
operator||=
name|cmdKey
expr_stmt|;
if|if
condition|(
name|GetCurrentEventKeyModifiers
argument_list|()
operator|&
name|alphaLock
condition|)
comment|//no Qt mapper
name|tmp_mod
operator||=
name|alphaLock
expr_stmt|;
if|if
condition|(
operator|*
name|outModifiers
operator|&
name|Qt
operator|::
name|AltModifier
condition|)
name|tmp_mod
operator||=
name|optionKey
expr_stmt|;
if|if
condition|(
operator|*
name|outModifiers
operator|&
name|Qt
operator|::
name|KeypadModifier
condition|)
name|tmp_mod
operator||=
name|kEventKeyModifierNumLockMask
expr_stmt|;
name|translatedChar
operator|=
name|KeyTranslate
argument_list|(
name|keyboard_layout
argument_list|,
name|tmp_mod
operator||
name|keyCode
argument_list|,
operator|&
name|tmp_state
argument_list|)
expr_stmt|;
block|}
block|{
name|ByteCount
name|unilen
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|GetEventParameter
argument_list|(
name|keyEvent
argument_list|,
name|kEventParamKeyUnicodes
argument_list|,
name|typeUnicodeText
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|unilen
argument_list|,
literal|0
argument_list|)
operator|==
name|noErr
operator|&&
name|unilen
operator|==
literal|2
condition|)
block|{
name|GetEventParameter
argument_list|(
name|keyEvent
argument_list|,
name|kEventParamKeyUnicodes
argument_list|,
name|typeUnicodeText
argument_list|,
literal|0
argument_list|,
name|unilen
argument_list|,
literal|0
argument_list|,
name|outChar
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|translatedChar
condition|)
block|{
specifier|static
name|QTextCodec
modifier|*
name|c
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|c
condition|)
name|c
operator|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"Apple Roman"
argument_list|)
expr_stmt|;
name|char
name|tmpChar
init|=
operator|(
name|char
operator|)
name|translatedChar
decl_stmt|;
comment|// **sigh**
operator|*
name|outChar
operator|=
name|c
operator|->
name|toUnicode
argument_list|(
operator|&
name|tmpChar
argument_list|,
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|*
name|qtKey
operator|=
name|qt_mac_get_key
argument_list|(
operator|*
name|outModifiers
argument_list|,
name|QChar
argument_list|(
name|translatedChar
argument_list|)
argument_list|,
name|keyCode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
if|if
condition|(
operator|*
name|qtKey
operator|==
name|Qt
operator|::
name|Key_unknown
condition|)
operator|*
name|qtKey
operator|=
name|qt_mac_get_key
argument_list|(
operator|*
name|outModifiers
argument_list|,
operator|*
name|outChar
argument_list|,
name|keyCode
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_constructor
DECL|function|QKeyMapperPrivate
name|QKeyMapperPrivate
operator|::
name|QKeyMapperPrivate
parameter_list|()
block|{
name|memset
argument_list|(
name|keyLayout
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|keyLayout
argument_list|)
argument_list|)
expr_stmt|;
name|keyboard_layout_format
operator|.
name|unicode
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC32
name|keyboard_mode
operator|=
name|NullMode
expr_stmt|;
else|#
directive|else
name|currentInputSource
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QKeyMapperPrivate
name|QKeyMapperPrivate
operator|::
name|~
name|QKeyMapperPrivate
parameter_list|()
block|{
name|deleteLayouts
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
name|bool
DECL|function|updateKeyboard
name|QKeyMapperPrivate
operator|::
name|updateKeyboard
parameter_list|()
block|{
specifier|const
name|UCKeyboardLayout
modifier|*
name|uchrData
init|=
literal|0
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC32
name|KeyboardLayoutRef
name|keyLayoutRef
init|=
literal|0
decl_stmt|;
name|KLGetCurrentKeyboardLayout
argument_list|(
operator|&
name|keyLayoutRef
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyboard_mode
operator|!=
name|NullMode
operator|&&
name|currentKeyboardLayout
operator|==
name|keyLayoutRef
condition|)
return|return
literal|false
return|;
name|OSStatus
name|err
decl_stmt|;
if|if
condition|(
name|keyLayoutRef
operator|!=
literal|0
condition|)
block|{
name|err
operator|=
name|KLGetKeyboardLayoutProperty
argument_list|(
name|keyLayoutRef
argument_list|,
name|kKLuchrData
argument_list|,
cast|const_cast
argument_list|<
specifier|const
name|void
operator|*
operator|*
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|uchrData
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|noErr
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt::internal::unable to get unicode keyboardlayout %ld %s:%d"
argument_list|,
name|long
argument_list|(
name|err
argument_list|)
argument_list|,
name|__FILE__
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
block|}
block|}
else|#
directive|else
name|QCFType
argument_list|<
name|TISInputSourceRef
argument_list|>
name|source
init|=
name|TISCopyCurrentKeyboardInputSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyboard_mode
operator|!=
name|NullMode
operator|&&
name|source
operator|==
name|currentInputSource
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Q_ASSERT
argument_list|(
name|source
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|CFDataRef
name|data
init|=
cast|static_cast
argument_list|<
name|CFDataRef
argument_list|>
argument_list|(
name|TISGetInputSourceProperty
argument_list|(
name|source
argument_list|,
name|kTISPropertyUnicodeKeyLayoutData
argument_list|)
argument_list|)
decl_stmt|;
name|uchrData
operator|=
name|data
condition|?
cast|reinterpret_cast
argument_list|<
specifier|const
name|UCKeyboardLayout
operator|*
argument_list|>
argument_list|(
name|CFDataGetBytePtr
argument_list|(
name|data
argument_list|)
argument_list|)
else|:
literal|0
expr_stmt|;
endif|#
directive|endif
name|keyboard_kind
operator|=
name|LMGetKbdType
argument_list|()
expr_stmt|;
if|if
condition|(
name|uchrData
condition|)
block|{
name|keyboard_layout_format
operator|.
name|unicode
operator|=
name|uchrData
expr_stmt|;
name|keyboard_mode
operator|=
name|UnicodeMode
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_OS_MAC32
else|else
block|{
name|void
modifier|*
name|happy
decl_stmt|;
name|err
operator|=
name|KLGetKeyboardLayoutProperty
argument_list|(
name|keyLayoutRef
argument_list|,
name|kKLKCHRData
argument_list|,
cast|const_cast
argument_list|<
specifier|const
name|void
operator|*
operator|*
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|happy
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|noErr
condition|)
block|{
name|qFatal
argument_list|(
literal|"Qt::internal::unable to get non-unicode layout, cannot procede %ld %s:%d"
argument_list|,
name|long
argument_list|(
name|err
argument_list|)
argument_list|,
name|__FILE__
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
block|}
name|keyboard_layout_format
operator|.
name|other
operator|=
name|happy
expr_stmt|;
name|keyboard_mode
operator|=
name|OtherMode
expr_stmt|;
block|}
name|currentKeyboardLayout
operator|=
name|keyLayoutRef
expr_stmt|;
else|#
directive|else
name|currentInputSource
operator|=
name|source
expr_stmt|;
endif|#
directive|endif
name|keyboard_dead
operator|=
literal|0
expr_stmt|;
name|CFStringRef
name|iso639Code
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC32
ifndef|#
directive|ifndef
name|kKLLanguageCode
DECL|macro|kKLLanguageCode
define|#
directive|define
name|kKLLanguageCode
value|9
endif|#
directive|endif
name|KLGetKeyboardLayoutProperty
argument_list|(
name|currentKeyboardLayout
argument_list|,
name|kKLLanguageCode
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|iso639Code
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|CFArrayRef
name|array
init|=
cast|static_cast
argument_list|<
name|CFArrayRef
argument_list|>
argument_list|(
name|TISGetInputSourceProperty
argument_list|(
name|currentInputSource
argument_list|,
name|kTISPropertyInputSourceLanguages
argument_list|)
argument_list|)
decl_stmt|;
name|iso639Code
operator|=
cast|static_cast
argument_list|<
name|CFStringRef
argument_list|>
argument_list|(
name|CFArrayGetValueAtIndex
argument_list|(
name|array
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Actually a RFC3066bis, but it's close enough
endif|#
directive|endif
if|if
condition|(
name|iso639Code
condition|)
block|{
name|keyboardInputLocale
operator|=
name|QLocale
argument_list|(
name|QCFString
operator|::
name|toQString
argument_list|(
name|iso639Code
argument_list|)
argument_list|)
expr_stmt|;
name|keyboardInputDirection
operator|=
name|keyboardInputLocale
operator|.
name|textDirection
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|keyboardInputLocale
operator|=
name|QLocale
operator|::
name|c
argument_list|()
expr_stmt|;
name|keyboardInputDirection
operator|=
name|Qt
operator|::
name|LeftToRight
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
name|void
DECL|function|deleteLayouts
name|QKeyMapperPrivate
operator|::
name|deleteLayouts
parameter_list|()
block|{
name|keyboard_mode
operator|=
name|NullMode
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|255
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|keyLayout
index|[
name|i
index|]
condition|)
block|{
operator|delete
name|keyLayout
index|[
name|i
index|]
expr_stmt|;
name|keyLayout
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
name|void
DECL|function|clearMappings
name|QKeyMapperPrivate
operator|::
name|clearMappings
parameter_list|()
block|{
name|deleteLayouts
argument_list|()
expr_stmt|;
name|updateKeyboard
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
name|QList
argument_list|<
name|int
argument_list|>
DECL|function|possibleKeys
name|QKeyMapperPrivate
operator|::
name|possibleKeys
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|ret
decl_stmt|;
name|KeyboardLayoutItem
modifier|*
name|kbItem
init|=
name|keyLayout
index|[
name|e
operator|->
name|nativeVirtualKey
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|kbItem
condition|)
comment|// Key is not in any keyboard layout (e.g. eisu-key on Japanese keyboard)
return|return
name|ret
return|;
name|int
name|baseKey
init|=
name|kbItem
operator|->
name|qtKey
index|[
literal|0
index|]
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|keyMods
init|=
name|e
operator|->
name|modifiers
argument_list|()
decl_stmt|;
name|ret
operator|<<
name|int
argument_list|(
name|baseKey
operator|+
name|keyMods
argument_list|)
expr_stmt|;
comment|// The base key is _always_ valid, of course
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|8
condition|;
operator|++
name|i
control|)
block|{
name|Qt
operator|::
name|KeyboardModifiers
name|neededMods
init|=
name|ModsTbl
index|[
name|i
index|]
decl_stmt|;
name|int
name|key
init|=
name|kbItem
operator|->
name|qtKey
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|key
operator|&&
name|key
operator|!=
name|baseKey
operator|&&
operator|(
operator|(
name|keyMods
operator|&
name|neededMods
operator|)
operator|==
name|neededMods
operator|)
condition|)
name|ret
operator|<<
name|int
argument_list|(
name|key
operator|+
operator|(
name|keyMods
operator|&
operator|~
name|neededMods
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|translateKeyEvent
name|bool
name|QKeyMapperPrivate
operator|::
name|translateKeyEvent
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|EventHandlerCallRef
name|er
parameter_list|,
name|EventRef
name|event
parameter_list|,
name|void
modifier|*
name|info
parameter_list|,
name|bool
name|grab
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|GetEventClass
argument_list|(
name|event
argument_list|)
operator|==
name|kEventClassKeyboard
argument_list|)
expr_stmt|;
name|bool
name|handled_event
init|=
literal|true
decl_stmt|;
name|UInt32
name|ekind
init|=
name|GetEventKind
argument_list|(
name|event
argument_list|)
decl_stmt|;
comment|// unfortunately modifiers changed event looks quite different, so I have a separate
comment|// code path
if|if
condition|(
name|ekind
operator|==
name|kEventRawKeyModifiersChanged
condition|)
block|{
comment|//figure out changed modifiers, wish Apple would just send a delta
name|UInt32
name|modifiers
init|=
literal|0
decl_stmt|;
name|GetEventParameter
argument_list|(
name|event
argument_list|,
name|kEventParamKeyModifiers
argument_list|,
name|typeUInt32
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|modifiers
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|&
name|modifiers
argument_list|)
expr_stmt|;
name|qt_mac_send_modifiers_changed
argument_list|(
name|modifiers
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|QInputContext
modifier|*
name|currentContext
init|=
name|qApp
operator|->
name|inputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentContext
operator|&&
name|currentContext
operator|->
name|isComposing
argument_list|()
condition|)
block|{
if|if
condition|(
name|ekind
operator|==
name|kEventRawKeyDown
condition|)
block|{
name|QMacInputContext
modifier|*
name|context
init|=
name|qobject_cast
argument_list|<
name|QMacInputContext
operator|*
argument_list|>
argument_list|(
name|currentContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
condition|)
name|context
operator|->
name|setLastKeydownEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// Once we process the key down , we don't need to send the saved event again from
comment|// kEventTextInputUnicodeForKeyEvent, so clear it.
if|if
condition|(
name|currentContext
operator|&&
name|ekind
operator|==
name|kEventRawKeyDown
condition|)
block|{
name|QMacInputContext
modifier|*
name|context
init|=
name|qobject_cast
argument_list|<
name|QMacInputContext
operator|*
argument_list|>
argument_list|(
name|currentContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
condition|)
name|context
operator|->
name|setLastKeydownEvent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//get modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
decl_stmt|;
name|int
name|qtKey
decl_stmt|;
name|QChar
name|ourChar
decl_stmt|;
if|if
condition|(
name|translateKeyEventInternal
argument_list|(
name|er
argument_list|,
name|event
argument_list|,
operator|&
name|qtKey
argument_list|,
operator|&
name|ourChar
argument_list|,
operator|&
name|modifiers
argument_list|,
operator|&
name|handled_event
argument_list|)
operator|==
literal|false
condition|)
return|return
name|handled_event
return|;
name|QString
name|text
argument_list|(
name|ourChar
argument_list|)
decl_stmt|;
comment|/* This is actually wrong - but unfortunately it is the best that can be        done for now because of the Control/Meta mapping problems */
if|if
condition|(
name|modifiers
operator|&
operator|(
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|MetaModifier
operator|)
operator|&&
operator|!
name|qApp
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_MacDontSwapCtrlAndMeta
argument_list|)
condition|)
block|{
name|text
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|widget
condition|)
block|{
comment|// Try to compress key events.
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
operator|&&
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_KeyCompression
argument_list|)
condition|)
block|{
name|EventTime
name|lastTime
init|=
name|GetEventTime
argument_list|(
name|event
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|EventRef
name|releaseEvent
init|=
name|FindSpecificEventInQueue
argument_list|(
name|GetMainEventQueue
argument_list|()
argument_list|,
name|qt_KeyEventComparatorProc
argument_list|,
operator|(
name|void
operator|*
operator|)
name|kEventRawKeyUp
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|releaseEvent
condition|)
break|break;
specifier|const
name|EventTime
name|releaseTime
init|=
name|GetEventTime
argument_list|(
name|releaseEvent
argument_list|)
decl_stmt|;
if|if
condition|(
name|releaseTime
operator|<
name|lastTime
condition|)
break|break;
name|lastTime
operator|=
name|releaseTime
expr_stmt|;
name|EventRef
name|pressEvent
init|=
name|FindSpecificEventInQueue
argument_list|(
name|GetMainEventQueue
argument_list|()
argument_list|,
name|qt_KeyEventComparatorProc
argument_list|,
operator|(
name|void
operator|*
operator|)
name|kEventRawKeyDown
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pressEvent
condition|)
break|break;
specifier|const
name|EventTime
name|pressTime
init|=
name|GetEventTime
argument_list|(
name|pressEvent
argument_list|)
decl_stmt|;
if|if
condition|(
name|pressTime
operator|<
name|lastTime
condition|)
break|break;
name|lastTime
operator|=
name|pressTime
expr_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|compressMod
decl_stmt|;
name|int
name|compressQtKey
init|=
literal|0
decl_stmt|;
name|QChar
name|compressChar
decl_stmt|;
if|if
condition|(
name|translateKeyEventInternal
argument_list|(
name|er
argument_list|,
name|pressEvent
argument_list|,
operator|&
name|compressQtKey
argument_list|,
operator|&
name|compressChar
argument_list|,
operator|&
name|compressMod
argument_list|,
literal|0
argument_list|)
operator|==
literal|false
condition|)
block|{
break|break;
block|}
comment|// Copied from qapplication_x11.cpp (change both).
name|bool
name|stopCompression
init|=
comment|// 1) misc keys
operator|(
name|compressQtKey
operator|>=
name|Qt
operator|::
name|Key_Escape
operator|&&
name|compressQtKey
operator|<=
name|Qt
operator|::
name|Key_SysReq
operator|)
comment|// 2) cursor movement
operator|||
operator|(
name|compressQtKey
operator|>=
name|Qt
operator|::
name|Key_Home
operator|&&
name|compressQtKey
operator|<=
name|Qt
operator|::
name|Key_PageDown
operator|)
comment|// 3) extra keys
operator|||
operator|(
name|compressQtKey
operator|>=
name|Qt
operator|::
name|Key_Super_L
operator|&&
name|compressQtKey
operator|<=
name|Qt
operator|::
name|Key_Direction_R
operator|)
comment|// 4) something that a) doesn't translate to text or b) translates
comment|//    to newline text
operator|||
operator|(
name|compressQtKey
operator|==
literal|0
operator|)
operator|||
operator|(
name|compressChar
operator|==
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
operator|)
operator|||
operator|(
name|compressQtKey
operator|==
name|Qt
operator|::
name|Key_unknown
operator|)
decl_stmt|;
if|if
condition|(
name|compressMod
operator|==
name|modifiers
operator|&&
operator|!
name|compressChar
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|stopCompression
condition|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS
name|qDebug
argument_list|(
literal|"compressing away %c"
argument_list|,
name|compressChar
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|text
operator|+=
name|compressChar
expr_stmt|;
comment|// Clean up
name|RemoveEventFromQueue
argument_list|(
name|GetMainEventQueue
argument_list|()
argument_list|,
name|releaseEvent
argument_list|)
expr_stmt|;
name|RemoveEventFromQueue
argument_list|(
name|GetMainEventQueue
argument_list|()
argument_list|,
name|pressEvent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|DEBUG_KEY_BINDINGS
name|qDebug
argument_list|(
literal|"stoping compression.."
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
block|}
block|}
block|}
comment|// There is no way to get the scan code from carbon. But we cannot use the value 0, since
comment|// it indicates that the event originates from somewhere else than the keyboard
name|UInt32
name|macScanCode
init|=
literal|1
decl_stmt|;
name|UInt32
name|macVirtualKey
init|=
literal|0
decl_stmt|;
name|GetEventParameter
argument_list|(
name|event
argument_list|,
name|kEventParamKeyCode
argument_list|,
name|typeUInt32
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|macVirtualKey
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|&
name|macVirtualKey
argument_list|)
expr_stmt|;
name|UInt32
name|macModifiers
init|=
literal|0
decl_stmt|;
name|GetEventParameter
argument_list|(
name|event
argument_list|,
name|kEventParamKeyModifiers
argument_list|,
name|typeUInt32
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|macModifiers
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|&
name|macModifiers
argument_list|)
expr_stmt|;
comment|// The unicode characters in the range 0xF700-0xF747 are reserved
comment|// by Mac OS X for transient use as keyboard function keys. We
comment|// wont send 'text' for such key events. This is done to match
comment|// behavior on other platforms.
name|unsigned
name|int
modifier|*
name|unicodeKey
init|=
operator|(
name|unsigned
name|int
operator|*
operator|)
name|info
decl_stmt|;
if|if
condition|(
operator|*
name|unicodeKey
operator|>=
literal|0xf700
operator|&&
operator|*
name|unicodeKey
operator|<=
literal|0xf747
condition|)
name|text
operator|=
name|QString
argument_list|()
expr_stmt|;
name|bool
name|isAccepted
decl_stmt|;
name|handled_event
operator|=
name|QKeyMapper
operator|::
name|sendKeyEvent
argument_list|(
name|widget
argument_list|,
name|grab
argument_list|,
operator|(
name|ekind
operator|==
name|kEventRawKeyUp
operator|)
condition|?
name|QEvent
operator|::
name|KeyRelease
else|:
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|qtKey
argument_list|,
name|modifiers
argument_list|,
name|text
argument_list|,
name|ekind
operator|==
name|kEventRawKeyRepeat
argument_list|,
literal|0
argument_list|,
name|macScanCode
argument_list|,
name|macVirtualKey
argument_list|,
name|macModifiers
argument_list|,
operator|&
name|isAccepted
argument_list|)
expr_stmt|;
operator|*
name|unicodeKey
operator|=
operator|(
name|unsigned
name|int
operator|)
name|isAccepted
expr_stmt|;
block|}
return|return
name|handled_event
return|;
block|}
end_function
begin_function
name|void
DECL|function|updateKeyMap
name|QKeyMapperPrivate
operator|::
name|updateKeyMap
parameter_list|(
name|EventHandlerCallRef
parameter_list|,
name|EventRef
name|event
parameter_list|,
name|void
modifier|*
name|unicodeKey
comment|// unicode character from NSEvent (modifiers applied)
parameter_list|)
block|{
name|UInt32
name|macVirtualKey
init|=
literal|0
decl_stmt|;
name|GetEventParameter
argument_list|(
name|event
argument_list|,
name|kEventParamKeyCode
argument_list|,
name|typeUInt32
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|macVirtualKey
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|&
name|macVirtualKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateKeyboard
argument_list|()
condition|)
name|QKeyMapper
operator|::
name|changeKeyboard
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|keyLayout
index|[
name|macVirtualKey
index|]
condition|)
return|return;
name|UniCharCount
name|buffer_size
init|=
literal|10
decl_stmt|;
name|UniChar
name|buffer
index|[
name|buffer_size
index|]
decl_stmt|;
name|keyLayout
index|[
name|macVirtualKey
index|]
operator|=
operator|new
name|KeyboardLayoutItem
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
operator|++
name|i
control|)
block|{
name|UniCharCount
name|out_buffer_size
init|=
literal|0
decl_stmt|;
name|keyLayout
index|[
name|macVirtualKey
index|]
operator|->
name|qtKey
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC32
if|if
condition|(
name|keyboard_mode
operator|==
name|UnicodeMode
condition|)
block|{
endif|#
directive|endif
specifier|const
name|UInt32
name|keyModifier
init|=
operator|(
operator|(
name|qt_mac_get_mac_modifiers
argument_list|(
name|ModsTbl
index|[
name|i
index|]
argument_list|)
operator|>>
literal|8
operator|)
operator|&
literal|0xFF
operator|)
decl_stmt|;
name|OSStatus
name|err
init|=
name|UCKeyTranslate
argument_list|(
name|keyboard_layout_format
operator|.
name|unicode
argument_list|,
name|macVirtualKey
argument_list|,
name|kUCKeyActionDown
argument_list|,
name|keyModifier
argument_list|,
name|keyboard_kind
argument_list|,
literal|0
argument_list|,
operator|&
name|keyboard_dead
argument_list|,
name|buffer_size
argument_list|,
operator|&
name|out_buffer_size
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
operator|&&
name|out_buffer_size
condition|)
block|{
specifier|const
name|QChar
name|unicode
argument_list|(
name|buffer
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|qtkey
init|=
name|qt_mac_get_key
argument_list|(
name|keyModifier
argument_list|,
name|unicode
argument_list|,
name|macVirtualKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|qtkey
operator|==
name|Qt
operator|::
name|Key_unknown
condition|)
name|qtkey
operator|=
name|unicode
operator|.
name|unicode
argument_list|()
expr_stmt|;
name|keyLayout
index|[
name|macVirtualKey
index|]
operator|->
name|qtKey
index|[
name|i
index|]
operator|=
name|qtkey
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_WS_MAC32
else|else
block|{
specifier|const
name|QChar
name|unicode
argument_list|(
operator|*
operator|(
operator|(
name|UniChar
operator|*
operator|)
name|unicodeKey
operator|)
argument_list|)
decl_stmt|;
name|int
name|qtkey
init|=
name|qt_mac_get_key
argument_list|(
name|keyModifier
argument_list|,
name|unicode
argument_list|,
name|macVirtualKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|qtkey
operator|==
name|Qt
operator|::
name|Key_unknown
condition|)
name|qtkey
operator|=
name|unicode
operator|.
name|unicode
argument_list|()
expr_stmt|;
name|keyLayout
index|[
name|macVirtualKey
index|]
operator|->
name|qtKey
index|[
name|i
index|]
operator|=
name|qtkey
expr_stmt|;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_MAC32
block|}
else|else
block|{
specifier|const
name|UInt32
name|keyModifier
init|=
operator|(
name|qt_mac_get_mac_modifiers
argument_list|(
name|ModsTbl
index|[
name|i
index|]
argument_list|)
operator|)
decl_stmt|;
name|uchar
name|translatedChar
init|=
name|KeyTranslate
argument_list|(
name|keyboard_layout_format
operator|.
name|other
argument_list|,
name|keyModifier
operator||
name|macVirtualKey
argument_list|,
operator|&
name|keyboard_dead
argument_list|)
decl_stmt|;
if|if
condition|(
name|translatedChar
condition|)
block|{
specifier|static
name|QTextCodec
modifier|*
name|c
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|c
condition|)
name|c
operator|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"Apple Roman"
argument_list|)
expr_stmt|;
specifier|const
name|QChar
name|unicode
argument_list|(
name|c
operator|->
name|toUnicode
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|translatedChar
argument_list|,
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|qtkey
init|=
name|qt_mac_get_key
argument_list|(
name|keyModifier
argument_list|,
name|unicode
argument_list|,
name|macVirtualKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|qtkey
operator|==
name|Qt
operator|::
name|Key_unknown
condition|)
name|qtkey
operator|=
name|unicode
operator|.
name|unicode
argument_list|()
expr_stmt|;
name|keyLayout
index|[
name|macVirtualKey
index|]
operator|->
name|qtKey
index|[
name|i
index|]
operator|=
name|qtkey
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
ifdef|#
directive|ifdef
name|DEBUG_KEY_MAPS
name|qDebug
argument_list|(
literal|"updateKeyMap for virtual key = 0x%02x!"
argument_list|,
operator|(
name|uint
operator|)
name|macVirtualKey
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
operator|++
name|i
control|)
block|{
name|qDebug
argument_list|(
literal|"    [%d] (%d,0x%02x,'%c')"
argument_list|,
name|i
argument_list|,
name|keyLayout
index|[
name|macVirtualKey
index|]
operator|->
name|qtKey
index|[
name|i
index|]
argument_list|,
name|keyLayout
index|[
name|macVirtualKey
index|]
operator|->
name|qtKey
index|[
name|i
index|]
argument_list|,
name|keyLayout
index|[
name|macVirtualKey
index|]
operator|->
name|qtKey
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
name|bool
DECL|function|sendKeyEvent
name|QKeyMapper
operator|::
name|sendKeyEvent
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|bool
name|grab
parameter_list|,
name|QEvent
operator|::
name|Type
name|type
parameter_list|,
name|int
name|code
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|bool
name|autorepeat
parameter_list|,
name|int
name|count
parameter_list|,
name|quint32
name|nativeScanCode
parameter_list|,
name|quint32
name|nativeVirtualKey
parameter_list|,
name|quint32
name|nativeModifiers
parameter_list|,
name|bool
modifier|*
name|isAccepted
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|grab
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|bool
name|key_event
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|key_event
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_KEY_BINDINGS
argument_list|)
operator|||
name|defined
argument_list|(
name|DEBUG_KEY_BINDINGS_MODIFIERS
argument_list|)
name|qDebug
argument_list|(
literal|"KeyEvent: Sending %s to %s::%s: %s 0x%08x%s"
argument_list|,
name|type
operator|==
name|QEvent
operator|::
name|KeyRelease
condition|?
literal|"KeyRelease"
else|:
literal|"KeyPress"
argument_list|,
name|widget
condition|?
name|widget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
else|:
literal|"none"
argument_list|,
name|widget
condition|?
name|widget
operator|->
name|objectName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
else|:
literal|""
argument_list|,
name|text
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|int
argument_list|(
name|modifiers
argument_list|)
argument_list|,
name|autorepeat
condition|?
literal|" Repeat"
else|:
literal|""
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QKeyEventEx
name|ke
argument_list|(
name|type
argument_list|,
name|code
argument_list|,
name|modifiers
argument_list|,
name|text
argument_list|,
name|autorepeat
argument_list|,
name|qMax
argument_list|(
literal|1
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|nativeScanCode
argument_list|,
name|nativeVirtualKey
argument_list|,
name|nativeModifiers
argument_list|)
decl_stmt|;
name|bool
name|retMe
init|=
name|qt_sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|ke
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAccepted
condition|)
operator|*
name|isAccepted
operator|=
name|ke
operator|.
name|isAccepted
argument_list|()
expr_stmt|;
return|return
name|retMe
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
