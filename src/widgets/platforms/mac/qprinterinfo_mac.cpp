begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qprinterinfo.h"
end_include
begin_include
include|#
directive|include
file|"qprinterinfo_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qt_mac_p.h"
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
specifier|extern
name|QPrinter
operator|::
name|PaperSize
name|qSizeFTopaperSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|availablePrinters
name|QList
argument_list|<
name|QPrinterInfo
argument_list|>
name|QPrinterInfo
operator|::
name|availablePrinters
parameter_list|()
block|{
name|QList
argument_list|<
name|QPrinterInfo
argument_list|>
name|printers
decl_stmt|;
name|QCFType
argument_list|<
name|CFArrayRef
argument_list|>
name|array
decl_stmt|;
if|if
condition|(
name|PMServerCreatePrinterList
argument_list|(
name|kPMServerLocal
argument_list|,
operator|&
name|array
argument_list|)
operator|==
name|noErr
condition|)
block|{
name|CFIndex
name|count
init|=
name|CFArrayGetCount
argument_list|(
name|array
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|PMPrinter
name|printer
init|=
cast|static_cast
argument_list|<
name|PMPrinter
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|CFArrayGetValueAtIndex
argument_list|(
name|array
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|printerName
init|=
name|QCFString
operator|::
name|toQString
argument_list|(
name|PMPrinterGetName
argument_list|(
name|printer
argument_list|)
argument_list|)
decl_stmt|;
name|QPrinterInfo
name|printerInfo
argument_list|(
name|printerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|PMPrinterIsDefault
argument_list|(
name|printer
argument_list|)
condition|)
name|printerInfo
operator|.
name|d_ptr
operator|->
name|isDefault
operator|=
literal|true
expr_stmt|;
name|printers
operator|.
name|append
argument_list|(
name|printerInfo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|printers
return|;
block|}
end_function
begin_function
DECL|function|defaultPrinter
name|QPrinterInfo
name|QPrinterInfo
operator|::
name|defaultPrinter
parameter_list|()
block|{
name|QList
argument_list|<
name|QPrinterInfo
argument_list|>
name|printers
init|=
name|availablePrinters
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QPrinterInfo
modifier|&
name|printerInfo
decl|,
name|printers
control|)
block|{
if|if
condition|(
name|printerInfo
operator|.
name|isDefault
argument_list|()
condition|)
return|return
name|printerInfo
return|;
block|}
return|return
name|printers
operator|.
name|value
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|supportedPaperSizes
name|QList
argument_list|<
name|QPrinter
operator|::
name|PaperSize
argument_list|>
name|QPrinterInfo
operator|::
name|supportedPaperSizes
parameter_list|()
specifier|const
block|{
specifier|const
name|Q_D
argument_list|(
name|QPrinterInfo
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPrinter
operator|::
name|PaperSize
argument_list|>
name|paperSizes
decl_stmt|;
if|if
condition|(
name|isNull
argument_list|()
condition|)
return|return
name|paperSizes
return|;
name|PMPrinter
name|cfPrn
init|=
name|PMPrinterCreateFromPrinterID
argument_list|(
name|QCFString
operator|::
name|toCFStringRef
argument_list|(
name|d
operator|->
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cfPrn
condition|)
return|return
name|paperSizes
return|;
name|CFArrayRef
name|array
decl_stmt|;
if|if
condition|(
name|PMPrinterGetPaperList
argument_list|(
name|cfPrn
argument_list|,
operator|&
name|array
argument_list|)
operator|!=
name|noErr
condition|)
block|{
name|PMRelease
argument_list|(
name|cfPrn
argument_list|)
expr_stmt|;
return|return
name|paperSizes
return|;
block|}
name|int
name|count
init|=
name|CFArrayGetCount
argument_list|(
name|array
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|PMPaper
name|paper
init|=
cast|static_cast
argument_list|<
name|PMPaper
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|CFArrayGetValueAtIndex
argument_list|(
name|array
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|width
decl_stmt|,
name|height
decl_stmt|;
if|if
condition|(
name|PMPaperGetWidth
argument_list|(
name|paper
argument_list|,
operator|&
name|width
argument_list|)
operator|==
name|noErr
operator|&&
name|PMPaperGetHeight
argument_list|(
name|paper
argument_list|,
operator|&
name|height
argument_list|)
operator|==
name|noErr
condition|)
block|{
name|QSizeF
name|size
argument_list|(
name|width
operator|*
literal|0.3527
argument_list|,
name|height
operator|*
literal|0.3527
argument_list|)
decl_stmt|;
name|paperSizes
operator|.
name|append
argument_list|(
name|qSizeFTopaperSize
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|PMRelease
argument_list|(
name|cfPrn
argument_list|)
expr_stmt|;
return|return
name|paperSizes
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
