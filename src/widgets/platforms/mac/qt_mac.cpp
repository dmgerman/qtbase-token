begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qt_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qnativeimage_p.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|CopyCTThemeFont
specifier|static
name|CTFontRef
name|CopyCTThemeFont
parameter_list|(
name|ThemeFontID
name|themeID
parameter_list|)
block|{
name|CTFontUIFontType
name|ctID
init|=
name|HIThemeGetUIFontType
argument_list|(
name|themeID
argument_list|)
decl_stmt|;
return|return
name|CTFontCreateUIFontForLanguage
argument_list|(
name|ctID
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qfontForThemeFont
name|QFont
name|qfontForThemeFont
parameter_list|(
name|ThemeFontID
name|themeID
parameter_list|)
block|{
name|QCFType
argument_list|<
name|CTFontRef
argument_list|>
name|ctfont
init|=
name|CopyCTThemeFont
argument_list|(
name|themeID
argument_list|)
decl_stmt|;
name|QString
name|familyName
init|=
name|QCFString
argument_list|(
name|CTFontCopyFamilyName
argument_list|(
name|ctfont
argument_list|)
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CFDictionaryRef
argument_list|>
name|dict
init|=
name|CTFontCopyTraits
argument_list|(
name|ctfont
argument_list|)
decl_stmt|;
name|CFNumberRef
name|num
init|=
cast|static_cast
argument_list|<
name|CFNumberRef
argument_list|>
argument_list|(
name|CFDictionaryGetValue
argument_list|(
name|dict
argument_list|,
name|kCTFontWeightTrait
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|fW
decl_stmt|;
name|CFNumberGetValue
argument_list|(
name|num
argument_list|,
name|kCFNumberFloat32Type
argument_list|,
operator|&
name|fW
argument_list|)
expr_stmt|;
name|QFont
operator|::
name|Weight
name|wght
init|=
name|fW
operator|>
literal|0.
condition|?
name|QFont
operator|::
name|Bold
else|:
name|QFont
operator|::
name|Normal
decl_stmt|;
name|num
operator|=
cast|static_cast
argument_list|<
name|CFNumberRef
argument_list|>
argument_list|(
name|CFDictionaryGetValue
argument_list|(
name|dict
argument_list|,
name|kCTFontSlantTrait
argument_list|)
argument_list|)
expr_stmt|;
name|CFNumberGetValue
argument_list|(
name|num
argument_list|,
name|kCFNumberFloatType
argument_list|,
operator|&
name|fW
argument_list|)
expr_stmt|;
name|bool
name|italic
init|=
operator|(
name|fW
operator|!=
literal|0.0
operator|)
decl_stmt|;
return|return
name|QFont
argument_list|(
name|familyName
argument_list|,
name|CTFontGetSize
argument_list|(
name|ctfont
argument_list|)
argument_list|,
name|wght
argument_list|,
name|italic
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
name|MAC_OS_X_VERSION_10_5
operator|)
end_if
begin_function
DECL|function|leopardBrush
specifier|static
specifier|inline
name|QColor
name|leopardBrush
parameter_list|(
name|ThemeBrush
name|brush
parameter_list|)
block|{
name|QCFType
argument_list|<
name|CGColorRef
argument_list|>
name|cgClr
init|=
literal|0
decl_stmt|;
name|HIThemeBrushCreateCGColor
argument_list|(
name|brush
argument_list|,
operator|&
name|cgClr
argument_list|)
expr_stmt|;
return|return
name|qcolorFromCGColor
argument_list|(
name|cgClr
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qcolorForTheme
name|QColor
name|qcolorForTheme
parameter_list|(
name|ThemeBrush
name|brush
parameter_list|)
block|{
return|return
name|leopardBrush
argument_list|(
name|brush
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qcolorForThemeTextColor
name|QColor
name|qcolorForThemeTextColor
parameter_list|(
name|ThemeTextColor
name|themeColor
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC32
name|RGBColor
name|c
decl_stmt|;
name|GetThemeTextColor
argument_list|(
name|themeColor
argument_list|,
literal|32
argument_list|,
literal|true
argument_list|,
operator|&
name|c
argument_list|)
expr_stmt|;
name|QColor
name|color
init|=
name|QColor
argument_list|(
name|c
operator|.
name|red
operator|/
literal|256
argument_list|,
name|c
operator|.
name|green
operator|/
literal|256
argument_list|,
name|c
operator|.
name|blue
operator|/
literal|256
argument_list|)
decl_stmt|;
return|return
name|color
return|;
else|#
directive|else
comment|// There is no equivalent to GetThemeTextColor in 64-bit and it was rather bad that
comment|// I didn't file a request to implement this for Snow Leopard. So, in the meantime
comment|// I've encoded the values from the GetThemeTextColor. This is not exactly ideal
comment|// as if someone really wants to mess with themeing, these colors will be wrong.
comment|// It also means that we need to make sure the values for differences between
comment|// OS releases (and it will be likely that we are a step behind.)
switch|switch
condition|(
name|themeColor
condition|)
block|{
case|case
name|kThemeTextColorAlertActive
case|:
case|case
name|kThemeTextColorTabFrontActive
case|:
case|case
name|kThemeTextColorBevelButtonActive
case|:
case|case
name|kThemeTextColorListView
case|:
case|case
name|kThemeTextColorPlacardActive
case|:
case|case
name|kThemeTextColorPopupButtonActive
case|:
case|case
name|kThemeTextColorPopupLabelActive
case|:
case|case
name|kThemeTextColorPushButtonActive
case|:
return|return
name|Qt
operator|::
name|black
return|;
case|case
name|kThemeTextColorAlertInactive
case|:
case|case
name|kThemeTextColorDialogInactive
case|:
case|case
name|kThemeTextColorPlacardInactive
case|:
return|return
name|QColor
argument_list|(
literal|69
argument_list|,
literal|69
argument_list|,
literal|69
argument_list|,
literal|255
argument_list|)
return|;
case|case
name|kThemeTextColorPopupButtonInactive
case|:
case|case
name|kThemeTextColorPopupLabelInactive
case|:
case|case
name|kThemeTextColorPushButtonInactive
case|:
case|case
name|kThemeTextColorTabFrontInactive
case|:
case|case
name|kThemeTextColorBevelButtonInactive
case|:
return|return
name|QColor
argument_list|(
literal|127
argument_list|,
literal|127
argument_list|,
literal|127
argument_list|,
literal|255
argument_list|)
return|;
default|default:
block|{
name|QNativeImage
name|nativeImage
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
name|QNativeImage
operator|::
name|systemFormat
argument_list|()
argument_list|)
decl_stmt|;
name|CGRect
name|cgrect
init|=
name|CGRectMake
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|HIThemeSetTextFill
argument_list|(
name|themeColor
argument_list|,
literal|0
argument_list|,
name|nativeImage
operator|.
name|cg
argument_list|,
name|kHIThemeOrientationNormal
argument_list|)
expr_stmt|;
name|CGContextFillRect
argument_list|(
name|nativeImage
operator|.
name|cg
argument_list|,
name|cgrect
argument_list|)
expr_stmt|;
name|QColor
name|color
init|=
name|nativeImage
operator|.
name|image
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|QColor
argument_list|(
name|nativeImage
operator|.
name|image
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
