begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/**************************************************************************** ** ** Implementation of QXIMInputContext class ** ** Copyright (C) 2003-2004 immodule for Qt Project.  All rights reserved. ** ** This file is written to contribute to Nokia Corporation and/or its subsidiary(-ies) under their own ** license. You may use this file under your Qt license. Following ** description is copied from their original file headers. Contact ** immodule-qt@freedesktop.org if any conditions of this licensing are ** not clear to you. ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qximinputcontext_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_IM
argument_list|)
end_if
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XIM
argument_list|)
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|"qplatformdefs.h"
include|#
directive|include
file|"qapplication.h"
include|#
directive|include
file|"qwidget.h"
include|#
directive|include
file|"qstring.h"
include|#
directive|include
file|"qlist.h"
include|#
directive|include
file|"qtextcodec.h"
include|#
directive|include
file|"qevent.h"
include|#
directive|include
file|"qtextformat.h"
include|#
directive|include
file|"qx11info_x11.h"
include|#
directive|include
file|<stdlib.h>
include|#
directive|include
file|<limits.h>
name|QT_END_INCLUDE_NAMESPACE
comment|// #define QT_XIM_DEBUG
ifdef|#
directive|ifdef
name|QT_XIM_DEBUG
DECL|macro|XIM_DEBUG
define|#
directive|define
name|XIM_DEBUG
value|qDebug
else|#
directive|else
define|#
directive|define
name|XIM_DEBUG
value|if (0) qDebug
endif|#
directive|endif
comment|// from qapplication_x11.cpp
comment|// #### move to X11 struct
specifier|extern
name|XIMStyle
name|qt_xim_preferred_style
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|char
modifier|*
name|qt_ximServer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|qt_ximComposingKeycode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|QTextCodec
modifier|*
name|qt_input_mapper
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|xim_style
name|XIMStyle
name|QXIMInputContext
operator|::
name|xim_style
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|// moved from qapplication_x11.cpp
end_comment
begin_decl_stmt
DECL|variable|xim_default_style
specifier|static
specifier|const
name|XIMStyle
name|xim_default_style
init|=
name|XIMPreeditCallbacks
operator||
name|XIMStatusNothing
decl_stmt|;
end_decl_stmt
begin_extern
extern|extern
literal|"C"
block|{
ifdef|#
directive|ifdef
name|USE_X11R6_XIM
DECL|function|xim_create_callback
specifier|static
name|void
name|xim_create_callback
parameter_list|(
name|XIM
comment|/*im*/
parameter_list|,
name|XPointer
name|client_data
parameter_list|,
name|XPointer
comment|/*call_data*/
parameter_list|)
block|{
name|QXIMInputContext
modifier|*
name|qic
init|=
cast|reinterpret_cast
argument_list|<
name|QXIMInputContext
operator|*
argument_list|>
argument_list|(
name|client_data
argument_list|)
decl_stmt|;
comment|// qDebug("xim_create_callback");
name|qic
operator|->
name|create_xim
argument_list|()
expr_stmt|;
block|}
DECL|function|xim_destroy_callback
specifier|static
name|void
name|xim_destroy_callback
parameter_list|(
name|XIM
comment|/*im*/
parameter_list|,
name|XPointer
name|client_data
parameter_list|,
name|XPointer
comment|/*call_data*/
parameter_list|)
block|{
name|QXIMInputContext
modifier|*
name|qic
init|=
cast|reinterpret_cast
argument_list|<
name|QXIMInputContext
operator|*
argument_list|>
argument_list|(
name|client_data
argument_list|)
decl_stmt|;
comment|// qDebug("xim_destroy_callback");
name|qic
operator|->
name|close_xim
argument_list|()
expr_stmt|;
name|XRegisterIMInstantiateCallback
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|XIMProc
operator|)
name|xim_create_callback
argument_list|,
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|qic
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// USE_X11R6_XIM
DECL|function|xic_start_callback
specifier|static
name|int
name|xic_start_callback
parameter_list|(
name|XIC
parameter_list|,
name|XPointer
name|client_data
parameter_list|,
name|XPointer
parameter_list|)
block|{
name|QXIMInputContext
modifier|*
name|qic
init|=
operator|(
name|QXIMInputContext
operator|*
operator|)
name|client_data
decl_stmt|;
if|if
condition|(
operator|!
name|qic
condition|)
block|{
name|XIM_DEBUG
argument_list|(
literal|"xic_start_callback: no qic"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|QXIMInputContext
operator|::
name|ICData
modifier|*
name|data
init|=
name|qic
operator|->
name|icData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|data
condition|)
block|{
name|XIM_DEBUG
argument_list|(
literal|"xic_start_callback: no ic data"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|XIM_DEBUG
argument_list|(
literal|"xic_start_callback"
argument_list|)
expr_stmt|;
name|data
operator|->
name|clear
argument_list|()
expr_stmt|;
name|data
operator|->
name|composing
operator|=
literal|true
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|xic_draw_callback
specifier|static
name|int
name|xic_draw_callback
parameter_list|(
name|XIC
parameter_list|,
name|XPointer
name|client_data
parameter_list|,
name|XPointer
name|call_data
parameter_list|)
block|{
name|QXIMInputContext
modifier|*
name|qic
init|=
operator|(
name|QXIMInputContext
operator|*
operator|)
name|client_data
decl_stmt|;
if|if
condition|(
operator|!
name|qic
condition|)
block|{
name|XIM_DEBUG
argument_list|(
literal|"xic_draw_callback: no qic"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|QXIMInputContext
operator|::
name|ICData
modifier|*
name|data
init|=
name|qic
operator|->
name|icData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|data
condition|)
block|{
name|XIM_DEBUG
argument_list|(
literal|"xic_draw_callback: no ic data"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|XIM_DEBUG
argument_list|(
literal|"xic_draw_callback"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|data
operator|->
name|composing
condition|)
block|{
name|data
operator|->
name|clear
argument_list|()
expr_stmt|;
name|data
operator|->
name|composing
operator|=
literal|true
expr_stmt|;
block|}
name|XIMPreeditDrawCallbackStruct
modifier|*
name|drawstruct
init|=
operator|(
name|XIMPreeditDrawCallbackStruct
operator|*
operator|)
name|call_data
decl_stmt|;
name|XIMText
modifier|*
name|text
init|=
operator|(
name|XIMText
operator|*
operator|)
name|drawstruct
operator|->
name|text
decl_stmt|;
name|int
name|cursor
init|=
name|drawstruct
operator|->
name|caret
decl_stmt|,
name|sellen
init|=
literal|0
decl_stmt|,
name|selstart
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|drawstruct
operator|->
name|caret
operator|&&
operator|!
name|drawstruct
operator|->
name|chg_first
operator|&&
operator|!
name|drawstruct
operator|->
name|chg_length
operator|&&
operator|!
name|text
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|XIM_DEBUG
argument_list|(
literal|"compose emptied"
argument_list|)
expr_stmt|;
comment|// if the composition string has been emptied, we need
comment|// to send an InputMethodEnd event
name|QInputMethodEvent
name|e
decl_stmt|;
name|qic
operator|->
name|sendEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|data
operator|->
name|clear
argument_list|()
expr_stmt|;
comment|// if the commit string has coming after here, InputMethodStart
comment|// will be sent dynamically
block|}
return|return
literal|0
return|;
block|}
if|if
condition|(
name|text
condition|)
block|{
name|char
modifier|*
name|str
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|text
operator|->
name|encoding_is_wchar
condition|)
block|{
name|int
name|l
init|=
name|wcstombs
argument_list|(
name|NULL
argument_list|,
name|text
operator|->
name|string
operator|.
name|wide_char
argument_list|,
name|text
operator|->
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
operator|-
literal|1
condition|)
block|{
name|str
operator|=
operator|new
name|char
index|[
name|l
operator|+
literal|1
index|]
expr_stmt|;
name|wcstombs
argument_list|(
name|str
argument_list|,
name|text
operator|->
name|string
operator|.
name|wide_char
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|str
index|[
name|l
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
name|str
operator|=
name|text
operator|->
name|string
operator|.
name|multi_byte
expr_stmt|;
if|if
condition|(
operator|!
name|str
condition|)
return|return
literal|0
return|;
name|QString
name|s
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|->
name|encoding_is_wchar
condition|)
operator|delete
index|[]
name|str
expr_stmt|;
if|if
condition|(
name|drawstruct
operator|->
name|chg_length
operator|<
literal|0
condition|)
name|data
operator|->
name|text
operator|.
name|replace
argument_list|(
name|drawstruct
operator|->
name|chg_first
argument_list|,
name|INT_MAX
argument_list|,
name|s
argument_list|)
expr_stmt|;
else|else
name|data
operator|->
name|text
operator|.
name|replace
argument_list|(
name|drawstruct
operator|->
name|chg_first
argument_list|,
name|drawstruct
operator|->
name|chg_length
argument_list|,
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|->
name|selectedChars
operator|.
name|size
argument_list|()
operator|<
name|data
operator|->
name|text
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// expand the selectedChars array if the compose string is longer
name|int
name|from
init|=
name|data
operator|->
name|selectedChars
operator|.
name|size
argument_list|()
decl_stmt|;
name|data
operator|->
name|selectedChars
operator|.
name|resize
argument_list|(
name|data
operator|->
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
name|from
init|;
name|x
operator|<
name|data
operator|->
name|selectedChars
operator|.
name|size
argument_list|()
condition|;
operator|++
name|x
control|)
name|data
operator|->
name|selectedChars
operator|.
name|clearBit
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
comment|// determine if the changed chars are selected based on text->feedback
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|text
operator|->
name|length
condition|;
operator|++
name|x
control|)
name|data
operator|->
name|selectedChars
operator|.
name|setBit
argument_list|(
name|x
operator|+
name|drawstruct
operator|->
name|chg_first
argument_list|,
operator|(
name|text
operator|->
name|feedback
condition|?
operator|(
name|text
operator|->
name|feedback
index|[
name|x
index|]
operator|&
name|XIMReverse
operator|)
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
comment|// figure out where the selection starts, and how long it is
name|bool
name|started
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|qMin
argument_list|(
name|data
operator|->
name|selectedChars
operator|.
name|size
argument_list|()
argument_list|,
name|data
operator|->
name|text
operator|.
name|length
argument_list|()
argument_list|)
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|started
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|selectedChars
operator|.
name|testBit
argument_list|(
name|x
argument_list|)
condition|)
operator|++
name|sellen
expr_stmt|;
else|else
break|break;
block|}
else|else
block|{
if|if
condition|(
name|data
operator|->
name|selectedChars
operator|.
name|testBit
argument_list|(
name|x
argument_list|)
condition|)
block|{
name|selstart
operator|=
name|x
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
name|sellen
operator|=
literal|1
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|drawstruct
operator|->
name|chg_length
operator|==
literal|0
condition|)
name|drawstruct
operator|->
name|chg_length
operator|=
operator|-
literal|1
expr_stmt|;
name|data
operator|->
name|text
operator|.
name|remove
argument_list|(
name|drawstruct
operator|->
name|chg_first
argument_list|,
name|drawstruct
operator|->
name|chg_length
argument_list|)
expr_stmt|;
name|bool
name|qt_compose_emptied
init|=
name|data
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|qt_compose_emptied
condition|)
block|{
name|XIM_DEBUG
argument_list|(
literal|"compose emptied 2 text=%s"
argument_list|,
name|data
operator|->
name|text
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
comment|// if the composition string has been emptied, we need
comment|// to send an InputMethodEnd event
name|QInputMethodEvent
name|e
decl_stmt|;
name|qic
operator|->
name|sendEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|data
operator|->
name|clear
argument_list|()
expr_stmt|;
comment|// if the commit string has coming after here, InputMethodStart
comment|// will be sent dynamically
return|return
literal|0
return|;
block|}
block|}
name|XIM_DEBUG
argument_list|(
literal|"sending compose: '%s', cursor=%d, sellen=%d"
argument_list|,
name|data
operator|->
name|text
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|cursor
argument_list|,
name|sellen
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attrs
decl_stmt|;
if|if
condition|(
name|selstart
operator|>
literal|0
condition|)
name|attrs
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
literal|0
argument_list|,
name|selstart
argument_list|,
name|qic
operator|->
name|standardFormat
argument_list|(
name|QInputContext
operator|::
name|PreeditFormat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sellen
condition|)
name|attrs
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
name|selstart
argument_list|,
name|sellen
argument_list|,
name|qic
operator|->
name|standardFormat
argument_list|(
name|QInputContext
operator|::
name|SelectionFormat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|selstart
operator|+
name|sellen
operator|<
name|data
operator|->
name|text
operator|.
name|length
argument_list|()
condition|)
name|attrs
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
name|selstart
operator|+
name|sellen
argument_list|,
name|data
operator|->
name|text
operator|.
name|length
argument_list|()
operator|-
name|selstart
operator|-
name|sellen
argument_list|,
name|qic
operator|->
name|standardFormat
argument_list|(
name|QInputContext
operator|::
name|PreeditFormat
argument_list|)
argument_list|)
expr_stmt|;
name|attrs
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Cursor
argument_list|,
name|cursor
argument_list|,
name|sellen
condition|?
literal|0
else|:
literal|1
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|e
argument_list|(
name|data
operator|->
name|text
argument_list|,
name|attrs
argument_list|)
decl_stmt|;
name|data
operator|->
name|preeditEmpty
operator|=
name|data
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|qic
operator|->
name|sendEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|xic_done_callback
specifier|static
name|int
name|xic_done_callback
parameter_list|(
name|XIC
parameter_list|,
name|XPointer
name|client_data
parameter_list|,
name|XPointer
parameter_list|)
block|{
name|QXIMInputContext
modifier|*
name|qic
init|=
operator|(
name|QXIMInputContext
operator|*
operator|)
name|client_data
decl_stmt|;
if|if
condition|(
operator|!
name|qic
condition|)
return|return
literal|0
return|;
name|XIM_DEBUG
argument_list|(
literal|"xic_done_callback"
argument_list|)
expr_stmt|;
comment|// Don't send InputMethodEnd here. QXIMInputContext::x11FilterEvent()
comment|// handles InputMethodEnd with commit string.
return|return
literal|0
return|;
block|}
block|}
end_extern
begin_function
DECL|function|clear
name|void
name|QXIMInputContext
operator|::
name|ICData
operator|::
name|clear
parameter_list|()
block|{
name|text
operator|=
name|QString
argument_list|()
expr_stmt|;
name|selectedChars
operator|.
name|clear
argument_list|()
expr_stmt|;
name|composing
operator|=
literal|false
expr_stmt|;
name|preeditEmpty
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|icData
name|QXIMInputContext
operator|::
name|ICData
modifier|*
name|QXIMInputContext
operator|::
name|icData
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|focusWidget
argument_list|()
condition|)
return|return
name|ximData
operator|.
name|value
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/* The cache here is needed, as X11 leaks a few kb for every    XFreeFontSet call, so we avoid creating and deletion of fontsets as    much as possible */
end_comment
begin_decl_stmt
DECL|variable|fontsetCache
specifier|static
name|XFontSet
name|fontsetCache
index|[
literal|8
index|]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|fontsetRefCount
specifier|static
name|int
name|fontsetRefCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|fontsetnames
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|fontsetnames
index|[]
init|=
block|{
literal|"-*-fixed-medium-r-*-*-16-*,-*-*-medium-r-*-*-16-*"
block|,
literal|"-*-fixed-medium-i-*-*-16-*,-*-*-medium-i-*-*-16-*"
block|,
literal|"-*-fixed-bold-r-*-*-16-*,-*-*-bold-r-*-*-16-*"
block|,
literal|"-*-fixed-bold-i-*-*-16-*,-*-*-bold-i-*-*-16-*"
block|,
literal|"-*-fixed-medium-r-*-*-24-*,-*-*-medium-r-*-*-24-*"
block|,
literal|"-*-fixed-medium-i-*-*-24-*,-*-*-medium-i-*-*-24-*"
block|,
literal|"-*-fixed-bold-r-*-*-24-*,-*-*-bold-r-*-*-24-*"
block|,
literal|"-*-fixed-bold-i-*-*-24-*,-*-*-bold-i-*-*-24-*"
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|getFontSet
specifier|static
name|XFontSet
name|getFontSet
parameter_list|(
specifier|const
name|QFont
modifier|&
name|f
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|italic
argument_list|()
condition|)
name|i
operator||=
literal|1
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|bold
argument_list|()
condition|)
name|i
operator||=
literal|2
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|pointSize
argument_list|()
operator|>
literal|20
condition|)
name|i
operator|+=
literal|4
expr_stmt|;
if|if
condition|(
operator|!
name|fontsetCache
index|[
name|i
index|]
condition|)
block|{
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
name|int
name|missCount
decl_stmt|;
name|char
modifier|*
modifier|*
name|missList
decl_stmt|;
name|fontsetCache
index|[
name|i
index|]
operator|=
name|XCreateFontSet
argument_list|(
name|dpy
argument_list|,
name|fontsetnames
index|[
name|i
index|]
argument_list|,
operator|&
name|missList
argument_list|,
operator|&
name|missCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|missCount
operator|>
literal|0
condition|)
name|XFreeStringList
argument_list|(
name|missList
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fontsetCache
index|[
name|i
index|]
condition|)
block|{
name|fontsetCache
index|[
name|i
index|]
operator|=
name|XCreateFontSet
argument_list|(
name|dpy
argument_list|,
literal|"-*-fixed-*-*-*-*-16-*"
argument_list|,
operator|&
name|missList
argument_list|,
operator|&
name|missCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|missCount
operator|>
literal|0
condition|)
name|XFreeStringList
argument_list|(
name|missList
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fontsetCache
index|[
name|i
index|]
condition|)
name|fontsetCache
index|[
name|i
index|]
operator|=
operator|(
name|XFontSet
operator|)
operator|-
literal|1
expr_stmt|;
block|}
block|}
return|return
operator|(
name|fontsetCache
index|[
name|i
index|]
operator|==
operator|(
name|XFontSet
operator|)
operator|-
literal|1
operator|)
condition|?
literal|0
else|:
name|fontsetCache
index|[
name|i
index|]
return|;
block|}
end_function
begin_decl_stmt
specifier|extern
name|bool
name|qt_use_rtl_extensions
decl_stmt|;
end_decl_stmt
begin_comment
comment|// from qapplication_x11.cpp
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XKB
end_ifndef
begin_function_decl
specifier|extern
name|QLocale
name|q_getKeyboardLocale
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|layoutName
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|variantName
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QXIMInputContext
name|QXIMInputContext
operator|::
name|QXIMInputContext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_xim_preferred_style
condition|)
comment|// no configured input style, use the default
name|qt_xim_preferred_style
operator|=
name|xim_default_style
expr_stmt|;
name|xim
operator|=
literal|0
expr_stmt|;
name|QByteArray
name|ximServerName
argument_list|(
name|qt_ximServer
argument_list|)
decl_stmt|;
if|if
condition|(
name|qt_ximServer
condition|)
name|ximServerName
operator|.
name|prepend
argument_list|(
literal|"@im="
argument_list|)
expr_stmt|;
else|else
name|ximServerName
operator|=
literal|""
expr_stmt|;
if|if
condition|(
operator|!
name|XSupportsLocale
argument_list|()
condition|)
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
name|qWarning
argument_list|(
literal|"Qt: Locale not supported on X server"
argument_list|)
endif|#
directive|endif
expr_stmt|;
ifdef|#
directive|ifdef
name|USE_X11R6_XIM
elseif|else
if|if
condition|(
name|XSetLocaleModifiers
argument_list|(
name|ximServerName
operator|.
name|constData
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
name|qWarning
argument_list|(
literal|"Qt: Cannot set locale modifiers: %s"
argument_list|,
name|ximServerName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|XRegisterIMInstantiateCallback
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|XIMProc
operator|)
name|xim_create_callback
argument_list|,
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// !USE_X11R6_XIM
elseif|else
if|if
condition|(
name|XSetLocaleModifiers
argument_list|(
literal|""
argument_list|)
operator|==
literal|0
condition|)
name|qWarning
argument_list|(
literal|"Qt: Cannot set locale modifiers"
argument_list|)
expr_stmt|;
else|else
name|QXIMInputContext
operator|::
name|create_xim
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// USE_X11R6_XIM
ifndef|#
directive|ifndef
name|QT_NO_XKB
if|if
condition|(
name|X11
operator|->
name|use_xkb
condition|)
block|{
name|QByteArray
name|layoutName
decl_stmt|;
name|QByteArray
name|variantName
decl_stmt|;
name|Atom
name|type
init|=
name|XNone
decl_stmt|;
name|int
name|format
init|=
literal|0
decl_stmt|;
name|ulong
name|nitems
init|=
literal|0
decl_stmt|;
name|ulong
name|bytesAfter
init|=
literal|0
decl_stmt|;
name|uchar
modifier|*
name|data
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|XGetWindowProperty
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|RootWindow
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ATOM
argument_list|(
name|_XKB_RULES_NAMES
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|XA_STRING
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|bytesAfter
argument_list|,
operator|&
name|data
argument_list|)
operator|==
name|Success
operator|&&
name|type
operator|==
name|XA_STRING
operator|&&
name|format
operator|==
literal|8
operator|&&
name|nitems
operator|>
literal|2
condition|)
block|{
name|char
modifier|*
name|names
index|[
literal|5
index|]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|char
modifier|*
name|p
init|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|,
modifier|*
name|end
init|=
name|p
operator|+
name|nitems
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
do|do
block|{
name|names
index|[
name|i
operator|++
index|]
operator|=
name|p
expr_stmt|;
name|p
operator|+=
name|qstrlen
argument_list|(
name|p
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|<
name|end
condition|)
do|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|layoutNames
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|names
index|[
literal|2
index|]
argument_list|,
name|qstrlen
argument_list|(
name|names
index|[
literal|2
index|]
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|variantNames
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|names
index|[
literal|3
index|]
argument_list|,
name|qstrlen
argument_list|(
name|names
index|[
literal|3
index|]
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|layoutNames
operator|.
name|count
argument_list|()
argument_list|,
name|variantNames
operator|.
name|count
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QByteArray
name|variantName
init|=
name|variantNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|int
name|dashPos
init|=
name|variantName
operator|.
name|indexOf
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dashPos
operator|>=
literal|0
condition|)
name|variantName
operator|.
name|truncate
argument_list|(
name|dashPos
argument_list|)
expr_stmt|;
name|QLocale
name|keyboardInputLocale
init|=
name|q_getKeyboardLocale
argument_list|(
name|layoutNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|variantName
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyboardInputLocale
operator|.
name|textDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|qt_use_rtl_extensions
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_XKB
block|}
end_constructor
begin_comment
comment|/*!\internal   Creates the application input method. */
end_comment
begin_function
DECL|function|create_xim
name|void
name|QXIMInputContext
operator|::
name|create_xim
parameter_list|()
block|{
operator|++
name|fontsetRefCount
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XIM
name|xim
operator|=
name|XOpenIM
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|xim
condition|)
block|{
ifdef|#
directive|ifdef
name|USE_X11R6_XIM
name|XIMCallback
name|destroy
decl_stmt|;
name|destroy
operator|.
name|callback
operator|=
operator|(
name|XIMProc
operator|)
name|xim_destroy_callback
expr_stmt|;
name|destroy
operator|.
name|client_data
operator|=
name|XPointer
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|XSetIMValues
argument_list|(
name|xim
argument_list|,
name|XNDestroyCallback
argument_list|,
operator|&
name|destroy
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
operator|!=
literal|0
condition|)
name|qWarning
argument_list|(
literal|"Xlib doesn't support destroy callback"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// USE_X11R6_XIM
name|XIMStyles
modifier|*
name|styles
init|=
literal|0
decl_stmt|;
name|XGetIMValues
argument_list|(
name|xim
argument_list|,
name|XNQueryInputStyle
argument_list|,
operator|&
name|styles
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|styles
condition|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
operator|!
name|xim_style
operator|&&
name|i
operator|<
name|styles
operator|->
name|count_styles
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|styles
operator|->
name|supported_styles
index|[
name|i
index|]
operator|==
name|qt_xim_preferred_style
condition|)
block|{
name|xim_style
operator|=
name|qt_xim_preferred_style
expr_stmt|;
break|break;
block|}
block|}
comment|// if the preferred input style couldn't be found, look for
comment|// Nothing
for|for
control|(
name|i
operator|=
literal|0
init|;
operator|!
name|xim_style
operator|&&
name|i
operator|<
name|styles
operator|->
name|count_styles
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|styles
operator|->
name|supported_styles
index|[
name|i
index|]
operator|==
operator|(
name|XIMPreeditNothing
operator||
name|XIMStatusNothing
operator|)
condition|)
block|{
name|xim_style
operator|=
name|XIMPreeditNothing
operator||
name|XIMStatusNothing
expr_stmt|;
break|break;
block|}
block|}
comment|// ... and failing that, None.
for|for
control|(
name|i
operator|=
literal|0
init|;
operator|!
name|xim_style
operator|&&
name|i
operator|<
name|styles
operator|->
name|count_styles
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|styles
operator|->
name|supported_styles
index|[
name|i
index|]
operator|==
operator|(
name|XIMPreeditNone
operator||
name|XIMStatusNone
operator|)
condition|)
block|{
name|xim_style
operator|=
name|XIMPreeditNone
operator||
name|XIMStatusNone
expr_stmt|;
break|break;
block|}
block|}
comment|// qDebug("QApplication: using im style %lx", xim_style);
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|styles
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|xim_style
condition|)
block|{
ifdef|#
directive|ifdef
name|USE_X11R6_XIM
name|XUnregisterIMInstantiateCallback
argument_list|(
name|X11
operator|->
name|display
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|XIMProc
operator|)
name|xim_create_callback
argument_list|,
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// USE_X11R6_XIM
if|if
condition|(
name|QWidget
modifier|*
name|focusWidget
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
block|{
comment|// reinitialize input context after the input method
comment|// server (like SCIM) has been launched without
comment|// requiring the user to manually switch focus.
if|if
condition|(
name|focusWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
operator|&&
name|focusWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
operator|&&
name|focusWidget
operator|->
name|isEnabled
argument_list|()
condition|)
name|setFocusWidget
argument_list|(
name|focusWidget
argument_list|)
expr_stmt|;
block|}
comment|// following code fragment is not required for immodule
comment|// version of XIM
if|#
directive|if
literal|0
block|QWidgetList list = qApp->topLevelWidgets();             for (int i = 0; i< list.size(); ++i) {                 QWidget *w = list.at(i);                 w->d->createTLSysExtra();             }
endif|#
directive|endif
block|}
else|else
block|{
comment|// Give up
name|qWarning
argument_list|(
literal|"No supported input style found."
literal|"  See InputMethod documentation."
argument_list|)
expr_stmt|;
name|close_xim
argument_list|()
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_XIM
block|}
end_function
begin_comment
comment|/*!\internal   Closes the application input method. */
end_comment
begin_function
DECL|function|close_xim
name|void
name|QXIMInputContext
operator|::
name|close_xim
parameter_list|()
block|{
for|for
control|(
name|QHash
argument_list|<
name|WId
argument_list|,
name|ICData
operator|*
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|ximData
operator|.
name|constBegin
argument_list|()
init|,
name|e
init|=
name|ximData
operator|.
name|constEnd
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
block|{
name|ICData
modifier|*
name|data
init|=
name|i
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|ic
condition|)
name|XDestroyIC
argument_list|(
name|data
operator|->
name|ic
argument_list|)
expr_stmt|;
operator|delete
name|data
expr_stmt|;
block|}
name|ximData
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|--
name|fontsetRefCount
operator|==
literal|0
condition|)
block|{
name|Display
modifier|*
name|dpy
init|=
name|X11
operator|->
name|display
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fontsetCache
index|[
name|i
index|]
operator|&&
name|fontsetCache
index|[
name|i
index|]
operator|!=
operator|(
name|XFontSet
operator|)
operator|-
literal|1
condition|)
block|{
name|XFreeFontSet
argument_list|(
name|dpy
argument_list|,
name|fontsetCache
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|fontsetCache
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
name|setFocusWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|xim
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QXIMInputContext
name|QXIMInputContext
operator|::
name|~
name|QXIMInputContext
parameter_list|()
block|{
name|XIM
name|old_xim
init|=
name|xim
decl_stmt|;
comment|// close_xim clears xim pointer.
name|close_xim
argument_list|()
expr_stmt|;
if|if
condition|(
name|old_xim
condition|)
name|XCloseIM
argument_list|(
name|old_xim
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|identifierName
name|QString
name|QXIMInputContext
operator|::
name|identifierName
parameter_list|()
block|{
comment|// the name should be "xim" rather than "XIM" to be consistent
comment|// with corresponding immodule of GTK+
return|return
name|QLatin1String
argument_list|(
literal|"xim"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|language
name|QString
name|QXIMInputContext
operator|::
name|language
parameter_list|()
block|{
name|QString
name|language
decl_stmt|;
if|if
condition|(
name|xim
condition|)
block|{
name|QByteArray
name|locale
argument_list|(
name|XLocaleOfIM
argument_list|(
name|xim
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|locale
operator|.
name|startsWith
argument_list|(
literal|"zh"
argument_list|)
condition|)
block|{
comment|// Chinese language should be formed as "zh_CN", "zh_TW", "zh_HK"
name|language
operator|=
name|QLatin1String
argument_list|(
name|locale
operator|.
name|left
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// other languages should be two-letter ISO 639 language code
name|language
operator|=
name|QLatin1String
argument_list|(
name|locale
operator|.
name|left
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|language
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QXIMInputContext
operator|::
name|reset
parameter_list|()
block|{
name|QWidget
modifier|*
name|w
init|=
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
return|return;
name|ICData
modifier|*
name|data
init|=
name|ximData
operator|.
name|value
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
condition|)
return|return;
if|if
condition|(
name|data
operator|->
name|ic
condition|)
block|{
name|char
modifier|*
name|mb
init|=
name|XmbResetIC
argument_list|(
name|data
operator|->
name|ic
argument_list|)
decl_stmt|;
name|QInputMethodEvent
name|e
decl_stmt|;
if|if
condition|(
name|mb
condition|)
block|{
name|e
operator|.
name|setCommitString
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|mb
argument_list|)
argument_list|)
expr_stmt|;
name|XFree
argument_list|(
name|mb
argument_list|)
expr_stmt|;
name|data
operator|->
name|preeditEmpty
operator|=
literal|false
expr_stmt|;
comment|// force sending an event
block|}
if|if
condition|(
operator|!
name|data
operator|->
name|preeditEmpty
condition|)
block|{
name|sendEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
block|}
name|data
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|widgetDestroyed
name|void
name|QXIMInputContext
operator|::
name|widgetDestroyed
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|QInputContext
operator|::
name|widgetDestroyed
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|ICData
modifier|*
name|data
init|=
name|ximData
operator|.
name|take
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
condition|)
return|return;
name|data
operator|->
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|->
name|ic
condition|)
name|XDestroyIC
argument_list|(
name|data
operator|->
name|ic
argument_list|)
expr_stmt|;
operator|delete
name|data
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseHandler
name|void
name|QXIMInputContext
operator|::
name|mouseHandler
parameter_list|(
name|int
name|pos
parameter_list|,
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|MouseButtonPress
condition|)
return|return;
name|XIM_DEBUG
argument_list|(
literal|"QXIMInputContext::mouseHandler pos=%d"
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|focusWidget
argument_list|()
condition|)
block|{
name|ICData
modifier|*
name|data
init|=
name|ximData
operator|.
name|value
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
condition|)
return|return;
if|if
condition|(
name|pos
argument_list|<
literal|0
operator|||
name|pos
argument_list|>
name|data
operator|->
name|text
operator|.
name|length
argument_list|()
condition|)
name|reset
argument_list|()
expr_stmt|;
comment|// ##### handle mouse position
block|}
block|}
end_function
begin_function
DECL|function|isComposing
name|bool
name|QXIMInputContext
operator|::
name|isComposing
parameter_list|()
specifier|const
block|{
name|QWidget
modifier|*
name|w
init|=
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
return|return
literal|false
return|;
name|ICData
modifier|*
name|data
init|=
name|ximData
operator|.
name|value
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
condition|)
return|return
literal|false
return|;
return|return
name|data
operator|->
name|composing
return|;
block|}
end_function
begin_function
DECL|function|setFocusWidget
name|void
name|QXIMInputContext
operator|::
name|setFocusWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
operator|!
name|xim
condition|)
return|return;
name|QWidget
modifier|*
name|oldFocus
init|=
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldFocus
operator|==
name|w
condition|)
return|return;
if|if
condition|(
name|language
argument_list|()
operator|!=
name|QLatin1String
argument_list|(
literal|"ja"
argument_list|)
condition|)
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|oldFocus
condition|)
block|{
name|ICData
modifier|*
name|data
init|=
name|ximData
operator|.
name|value
argument_list|(
name|oldFocus
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|&&
name|data
operator|->
name|ic
condition|)
name|XUnsetICFocus
argument_list|(
name|data
operator|->
name|ic
argument_list|)
expr_stmt|;
block|}
name|QInputContext
operator|::
name|setFocusWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|w
operator|||
name|w
operator|->
name|inputMethodHints
argument_list|()
operator|&
operator|(
name|Qt
operator|::
name|ImhExclusiveInputMask
operator||
name|Qt
operator|::
name|ImhHiddenText
operator|)
condition|)
return|return;
name|ICData
modifier|*
name|data
init|=
name|ximData
operator|.
name|value
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
condition|)
name|data
operator|=
name|createICData
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|->
name|ic
condition|)
name|XSetICFocus
argument_list|(
name|data
operator|->
name|ic
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|x11FilterEvent
name|bool
name|QXIMInputContext
operator|::
name|x11FilterEvent
parameter_list|(
name|QWidget
modifier|*
name|keywidget
parameter_list|,
name|XEvent
modifier|*
name|event
parameter_list|)
block|{
name|int
name|xkey_keycode
init|=
name|event
operator|->
name|xkey
operator|.
name|keycode
decl_stmt|;
if|if
condition|(
operator|!
name|keywidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|XFilterEvent
argument_list|(
name|event
argument_list|,
name|keywidget
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
condition|)
block|{
name|qt_ximComposingKeycode
operator|=
name|xkey_keycode
expr_stmt|;
comment|// ### not documented in xlib
name|update
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|event
operator|->
name|type
operator|!=
name|XKeyPress
operator|||
name|event
operator|->
name|xkey
operator|.
name|keycode
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
name|QWidget
modifier|*
name|w
init|=
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|keywidget
operator|!=
name|w
condition|)
return|return
literal|false
return|;
name|ICData
modifier|*
name|data
init|=
name|ximData
operator|.
name|value
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
condition|)
return|return
literal|false
return|;
comment|// input method has sent us a commit string
name|QByteArray
name|string
decl_stmt|;
name|string
operator|.
name|resize
argument_list|(
literal|513
argument_list|)
expr_stmt|;
name|KeySym
name|key
decl_stmt|;
comment|// unused
name|Status
name|status
decl_stmt|;
comment|// unused
name|QString
name|text
decl_stmt|;
name|int
name|count
init|=
name|XmbLookupString
argument_list|(
name|data
operator|->
name|ic
argument_list|,
operator|&
name|event
operator|->
name|xkey
argument_list|,
name|string
operator|.
name|data
argument_list|()
argument_list|,
name|string
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|key
argument_list|,
operator|&
name|status
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|XBufferOverflow
condition|)
block|{
name|string
operator|.
name|resize
argument_list|(
name|count
operator|+
literal|1
argument_list|)
expr_stmt|;
name|count
operator|=
name|XmbLookupString
argument_list|(
name|data
operator|->
name|ic
argument_list|,
operator|&
name|event
operator|->
name|xkey
argument_list|,
name|string
operator|.
name|data
argument_list|()
argument_list|,
name|string
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|key
argument_list|,
operator|&
name|status
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
comment|// XmbLookupString() gave us some text, convert it to unicode
name|text
operator|=
name|qt_input_mapper
operator|->
name|toUnicode
argument_list|(
name|string
operator|.
name|constData
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// codec couldn't convert to unicode? this can happen when running in the
comment|// C locale (or with no LANG set). try converting from latin-1
name|text
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|string
operator|.
name|constData
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
if|#
directive|if
literal|0
block|if (!(xim_style& XIMPreeditCallbacks) || !isComposing()) {
comment|// ############### send a regular key event here!
block|;     }
endif|#
directive|endif
name|QInputMethodEvent
name|e
decl_stmt|;
name|e
operator|.
name|setCommitString
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|sendEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|data
operator|->
name|clear
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|createICData
name|QXIMInputContext
operator|::
name|ICData
modifier|*
name|QXIMInputContext
operator|::
name|createICData
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|ICData
modifier|*
name|data
init|=
operator|new
name|ICData
decl_stmt|;
name|data
operator|->
name|widget
operator|=
name|w
expr_stmt|;
name|data
operator|->
name|preeditEmpty
operator|=
literal|true
expr_stmt|;
name|XVaNestedList
name|preedit_attr
init|=
literal|0
decl_stmt|;
name|XIMCallback
name|startcallback
decl_stmt|,
name|drawcallback
decl_stmt|,
name|donecallback
decl_stmt|;
name|QFont
name|font
init|=
name|w
operator|->
name|font
argument_list|()
decl_stmt|;
name|data
operator|->
name|fontset
operator|=
name|getFontSet
argument_list|(
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
name|xim_style
operator|&
name|XIMPreeditArea
condition|)
block|{
name|XRectangle
name|rect
decl_stmt|;
name|rect
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|rect
operator|.
name|y
operator|=
literal|0
expr_stmt|;
name|rect
operator|.
name|width
operator|=
name|w
operator|->
name|width
argument_list|()
expr_stmt|;
name|rect
operator|.
name|height
operator|=
name|w
operator|->
name|height
argument_list|()
expr_stmt|;
name|preedit_attr
operator|=
name|XVaCreateNestedList
argument_list|(
literal|0
argument_list|,
name|XNArea
argument_list|,
operator|&
name|rect
argument_list|,
name|XNFontSet
argument_list|,
name|data
operator|->
name|fontset
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xim_style
operator|&
name|XIMPreeditPosition
condition|)
block|{
name|XPoint
name|spot
decl_stmt|;
name|spot
operator|.
name|x
operator|=
literal|1
expr_stmt|;
name|spot
operator|.
name|y
operator|=
literal|1
expr_stmt|;
name|preedit_attr
operator|=
name|XVaCreateNestedList
argument_list|(
literal|0
argument_list|,
name|XNSpotLocation
argument_list|,
operator|&
name|spot
argument_list|,
name|XNFontSet
argument_list|,
name|data
operator|->
name|fontset
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xim_style
operator|&
name|XIMPreeditCallbacks
condition|)
block|{
name|startcallback
operator|.
name|client_data
operator|=
operator|(
name|XPointer
operator|)
name|this
expr_stmt|;
name|startcallback
operator|.
name|callback
operator|=
operator|(
name|XIMProc
operator|)
name|xic_start_callback
expr_stmt|;
name|drawcallback
operator|.
name|client_data
operator|=
operator|(
name|XPointer
operator|)
name|this
expr_stmt|;
name|drawcallback
operator|.
name|callback
operator|=
operator|(
name|XIMProc
operator|)
name|xic_draw_callback
expr_stmt|;
name|donecallback
operator|.
name|client_data
operator|=
operator|(
name|XPointer
operator|)
name|this
expr_stmt|;
name|donecallback
operator|.
name|callback
operator|=
operator|(
name|XIMProc
operator|)
name|xic_done_callback
expr_stmt|;
name|preedit_attr
operator|=
name|XVaCreateNestedList
argument_list|(
literal|0
argument_list|,
name|XNPreeditStartCallback
argument_list|,
operator|&
name|startcallback
argument_list|,
name|XNPreeditDrawCallback
argument_list|,
operator|&
name|drawcallback
argument_list|,
name|XNPreeditDoneCallback
argument_list|,
operator|&
name|donecallback
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preedit_attr
condition|)
block|{
name|data
operator|->
name|ic
operator|=
name|XCreateIC
argument_list|(
name|xim
argument_list|,
name|XNInputStyle
argument_list|,
name|xim_style
argument_list|,
name|XNClientWindow
argument_list|,
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
name|XNPreeditAttributes
argument_list|,
name|preedit_attr
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|XFree
argument_list|(
name|preedit_attr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|->
name|ic
operator|=
name|XCreateIC
argument_list|(
name|xim
argument_list|,
name|XNInputStyle
argument_list|,
name|xim_style
argument_list|,
name|XNClientWindow
argument_list|,
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|->
name|ic
condition|)
block|{
comment|// when resetting the input context, preserve the input state
operator|(
name|void
operator|)
name|XSetICValues
argument_list|(
name|data
operator|->
name|ic
argument_list|,
name|XNResetState
argument_list|,
name|XIMPreserveState
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Failed to create XIC"
argument_list|)
expr_stmt|;
block|}
name|ximData
index|[
name|w
operator|->
name|effectiveWinId
argument_list|()
index|]
operator|=
name|data
expr_stmt|;
return|return
name|data
return|;
block|}
end_function
begin_function
DECL|function|update
name|void
name|QXIMInputContext
operator|::
name|update
parameter_list|()
block|{
name|QWidget
modifier|*
name|w
init|=
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
return|return;
name|ICData
modifier|*
name|data
init|=
name|ximData
operator|.
name|value
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|||
operator|!
name|data
operator|->
name|ic
condition|)
return|return;
name|QRect
name|r
init|=
name|w
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImMicroFocus
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|QPoint
name|p
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|nativeParentWidget
argument_list|()
condition|)
name|p
operator|=
name|w
operator|->
name|mapTo
argument_list|(
name|w
operator|->
name|nativeParentWidget
argument_list|()
argument_list|,
name|QPoint
argument_list|(
operator|(
name|r
operator|.
name|left
argument_list|()
operator|+
name|r
operator|.
name|right
argument_list|()
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|,
name|r
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|p
operator|=
name|QPoint
argument_list|(
operator|(
name|r
operator|.
name|left
argument_list|()
operator|+
name|r
operator|.
name|right
argument_list|()
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|,
name|r
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|XPoint
name|spot
decl_stmt|;
name|spot
operator|.
name|x
operator|=
name|p
operator|.
name|x
argument_list|()
expr_stmt|;
name|spot
operator|.
name|y
operator|=
name|p
operator|.
name|y
argument_list|()
expr_stmt|;
name|r
operator|=
name|w
operator|->
name|rect
argument_list|()
expr_stmt|;
name|XRectangle
name|area
decl_stmt|;
name|area
operator|.
name|x
operator|=
name|r
operator|.
name|x
argument_list|()
expr_stmt|;
name|area
operator|.
name|y
operator|=
name|r
operator|.
name|y
argument_list|()
expr_stmt|;
name|area
operator|.
name|width
operator|=
name|r
operator|.
name|width
argument_list|()
expr_stmt|;
name|area
operator|.
name|height
operator|=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
name|XFontSet
name|fontset
init|=
name|getFontSet
argument_list|(
name|qvariant_cast
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|w
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImFont
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|fontset
operator|==
name|fontset
condition|)
name|fontset
operator|=
literal|0
expr_stmt|;
else|else
name|data
operator|->
name|fontset
operator|=
name|fontset
expr_stmt|;
name|XVaNestedList
name|preedit_attr
decl_stmt|;
if|if
condition|(
name|fontset
condition|)
name|preedit_attr
operator|=
name|XVaCreateNestedList
argument_list|(
literal|0
argument_list|,
name|XNSpotLocation
argument_list|,
operator|&
name|spot
argument_list|,
name|XNArea
argument_list|,
operator|&
name|area
argument_list|,
name|XNFontSet
argument_list|,
name|fontset
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
else|else
name|preedit_attr
operator|=
name|XVaCreateNestedList
argument_list|(
literal|0
argument_list|,
name|XNSpotLocation
argument_list|,
operator|&
name|spot
argument_list|,
name|XNArea
argument_list|,
operator|&
name|area
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|XSetICValues
argument_list|(
name|data
operator|->
name|ic
argument_list|,
name|XNPreeditAttributes
argument_list|,
name|preedit_attr
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|XFree
argument_list|(
name|preedit_attr
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|/*     When QT_NO_XIM is defined, we provide a dummy implementation for     this class. The reason for this is that the header file is moc'ed     regardless of QT_NO_XIM. The best would be to remove the file     completely from the pri file is QT_NO_XIM was defined, or for moc     to understand this preprocessor directive. Since the header does     not declare this class when QT_NO_XIM is defined, this is dead     code. */
end_comment
begin_function
name|bool
name|QXIMInputContext
operator|::
name|isComposing
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
name|QString
name|QXIMInputContext
operator|::
name|identifierName
parameter_list|()
block|{
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
name|void
name|QXIMInputContext
operator|::
name|mouseHandler
parameter_list|(
name|int
parameter_list|,
name|QMouseEvent
modifier|*
parameter_list|)
block|{}
end_function
begin_function
name|void
name|QXIMInputContext
operator|::
name|setFocusWidget
parameter_list|(
name|QWidget
modifier|*
parameter_list|)
block|{}
end_function
begin_function
name|void
name|QXIMInputContext
operator|::
name|reset
parameter_list|()
block|{}
end_function
begin_function
name|void
name|QXIMInputContext
operator|::
name|update
parameter_list|()
block|{}
end_function
begin_destructor
name|QXIMInputContext
operator|::
name|~
name|QXIMInputContext
parameter_list|()
block|{}
end_destructor
begin_function
name|void
name|QXIMInputContext
operator|::
name|widgetDestroyed
parameter_list|(
name|QWidget
modifier|*
parameter_list|)
block|{}
end_function
begin_function
name|QString
name|QXIMInputContext
operator|::
name|language
parameter_list|()
block|{
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
name|bool
name|QXIMInputContext
operator|::
name|x11FilterEvent
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|XEvent
modifier|*
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_XIM
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_IM
end_comment
end_unit
