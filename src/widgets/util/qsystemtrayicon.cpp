begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsystemtrayicon.h"
end_include
begin_include
include|#
directive|include
file|"qsystemtrayicon_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMTRAYICON
end_ifndef
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qpoint.h"
end_include
begin_include
include|#
directive|include
file|"qlabel.h"
end_include
begin_include
include|#
directive|include
file|"qpushbutton.h"
end_include
begin_include
include|#
directive|include
file|"qpainterpath.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qgridlayout.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"private/qlabel_p.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QSystemTrayIcon     \brief The QSystemTrayIcon class provides an icon for an application in the system tray.     \since 4.2     \ingroup desktop     \inmodule QtWidgets      Modern operating systems usually provide a special area on the desktop,     called the \e{system tray} or \e{notification area}, where long-running     applications can display icons and short messages.      \image system-tray.png The system tray on Windows XP.      The QSystemTrayIcon class can be used on the following platforms:      \list     \o All supported versions of Windows.     \o All window managers for X11 that implement the \l{freedesktop.org} system        tray specification, including recent versions of KDE and GNOME.     \o All supported versions of Mac OS X. Note that the Growl        notification system must be installed for        QSystemTrayIcon::showMessage() to display messages.     \endlist      To check whether a system tray is present on the user's desktop,     call the QSystemTrayIcon::isSystemTrayAvailable() static function.      To add a system tray entry, create a QSystemTrayIcon object, call setContextMenu()     to provide a context menu for the icon, and call show() to make it visible in the     system tray. Status notification messages ("balloon messages") can be displayed at     any time using showMessage().      If the system tray is unavailable when a system tray icon is constructed, but     becomes available later, QSystemTrayIcon will automatically add an entry for the     application in the system tray if the icon is \l visible.      The activated() signal is emitted when the user activates the icon.      Only on X11, when a tooltip is requested, the QSystemTrayIcon receives a QHelpEvent     of type QEvent::ToolTip. Additionally, the QSystemTrayIcon receives wheel events of     type QEvent::Wheel. These are not supported on any other platform.      \sa QDesktopServices, QDesktopWidget, {Desktop Integration}, {System Tray Icon Example} */
end_comment
begin_comment
comment|/*!     \enum QSystemTrayIcon::MessageIcon      This enum describes the icon that is shown when a balloon message is displayed.      \value NoIcon      No icon is shown.     \value Information An information icon is shown.     \value Warning     A standard warning icon is shown.     \value Critical    A critical warning icon is shown.      \sa QMessageBox */
end_comment
begin_comment
comment|/*!     Constructs a QSystemTrayIcon object with the given \a parent.      The icon is initially invisible.      \sa visible */
end_comment
begin_constructor
DECL|function|QSystemTrayIcon
name|QSystemTrayIcon
operator|::
name|QSystemTrayIcon
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QSystemTrayIconPrivate
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a QSystemTrayIcon object with the given \a icon and \a parent.      The icon is initially invisible.      \sa visible */
end_comment
begin_constructor
DECL|function|QSystemTrayIcon
name|QSystemTrayIcon
operator|::
name|QSystemTrayIcon
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QSystemTrayIconPrivate
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Removes the icon from the system tray and frees all allocated resources. */
end_comment
begin_destructor
DECL|function|~QSystemTrayIcon
name|QSystemTrayIcon
operator|::
name|~
name|QSystemTrayIcon
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QSystemTrayIcon
argument_list|)
expr_stmt|;
name|d
operator|->
name|remove_sys
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENU
end_ifndef
begin_comment
comment|/*!     Sets the specified \a menu to be the context menu for the system tray icon.      The menu will pop up when the user requests the context menu for the system     tray icon by clicking the mouse button.      On Mac OS X, this is currenly converted to a NSMenu, so the     aboutToHide() signal is not emitted.      \note The system tray icon does not take ownership of the menu. You must     ensure that it is deleted at the appropriate time by, for example, creating     the menu with a suitable parent object. */
end_comment
begin_function
DECL|function|setContextMenu
name|void
name|QSystemTrayIcon
operator|::
name|setContextMenu
parameter_list|(
name|QMenu
modifier|*
name|menu
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSystemTrayIcon
argument_list|)
expr_stmt|;
name|d
operator|->
name|menu
operator|=
name|menu
expr_stmt|;
name|d
operator|->
name|updateMenu_sys
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the current context menu for the system tray entry. */
end_comment
begin_function
DECL|function|contextMenu
name|QMenu
modifier|*
name|QSystemTrayIcon
operator|::
name|contextMenu
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSystemTrayIcon
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|menu
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MENU
end_comment
begin_comment
comment|/*!     \property QSystemTrayIcon::icon     \brief the system tray icon      On Windows, the system tray icon size is 16x16; on X11, the preferred size is     22x22. The icon will be scaled to the appropriate size as necessary. */
end_comment
begin_function
DECL|function|setIcon
name|void
name|QSystemTrayIcon
operator|::
name|setIcon
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSystemTrayIcon
argument_list|)
expr_stmt|;
name|d
operator|->
name|icon
operator|=
name|icon
expr_stmt|;
name|d
operator|->
name|updateIcon_sys
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|icon
name|QIcon
name|QSystemTrayIcon
operator|::
name|icon
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSystemTrayIcon
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|icon
return|;
block|}
end_function
begin_comment
comment|/*!     \property QSystemTrayIcon::toolTip     \brief the tooltip for the system tray entry      On some systems, the tooltip's length is limited. The tooltip will be truncated     if necessary. */
end_comment
begin_function
DECL|function|setToolTip
name|void
name|QSystemTrayIcon
operator|::
name|setToolTip
parameter_list|(
specifier|const
name|QString
modifier|&
name|tooltip
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSystemTrayIcon
argument_list|)
expr_stmt|;
name|d
operator|->
name|toolTip
operator|=
name|tooltip
expr_stmt|;
name|d
operator|->
name|updateToolTip_sys
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toolTip
name|QString
name|QSystemTrayIcon
operator|::
name|toolTip
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSystemTrayIcon
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|toolTip
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QSystemTrayIcon::show()      Shows the icon in the system tray.      \sa hide(), visible */
end_comment
begin_comment
comment|/*!     \fn void QSystemTrayIcon::hide()      Hides the system tray entry.      \sa show(), visible */
end_comment
begin_comment
comment|/*!     \since 4.3     Returns the geometry of the system tray icon in screen coordinates.      \sa visible */
end_comment
begin_function
DECL|function|geometry
name|QRect
name|QSystemTrayIcon
operator|::
name|geometry
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSystemTrayIcon
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|visible
condition|)
return|return
name|QRect
argument_list|()
return|;
return|return
name|d
operator|->
name|geometry_sys
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QSystemTrayIcon::visible     \brief whether the system tray entry is visible      Setting this property to true or calling show() makes the system tray icon     visible; setting this property to false or calling hide() hides it. */
end_comment
begin_function
DECL|function|setVisible
name|void
name|QSystemTrayIcon
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSystemTrayIcon
argument_list|)
expr_stmt|;
if|if
condition|(
name|visible
operator|==
name|d
operator|->
name|visible
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|icon
operator|.
name|isNull
argument_list|()
operator|&&
name|visible
condition|)
name|qWarning
argument_list|(
literal|"QSystemTrayIcon::setVisible: No Icon set"
argument_list|)
expr_stmt|;
name|d
operator|->
name|visible
operator|=
name|visible
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|visible
condition|)
name|d
operator|->
name|install_sys
argument_list|()
expr_stmt|;
else|else
name|d
operator|->
name|remove_sys
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isVisible
name|bool
name|QSystemTrayIcon
operator|::
name|isVisible
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSystemTrayIcon
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|visible
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QSystemTrayIcon
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ToolTip
condition|)
block|{
name|Q_D
argument_list|(
name|QSystemTrayIcon
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sys
operator|->
name|deliverToolTipEvent
argument_list|(
name|e
argument_list|)
return|;
block|}
endif|#
directive|endif
return|return
name|QObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \enum QSystemTrayIcon::ActivationReason       This enum describes the reason the system tray was activated.       \value Unknown     Unknown reason      \value Context     The context menu for the system tray entry was requested      \value DoubleClick The system tray entry was double clicked      \value Trigger     The system tray entry was clicked      \value MiddleClick The system tray entry was clicked with the middle mouse button       \sa activated() */
end_comment
begin_comment
comment|/*!     \fn void QSystemTrayIcon::activated(QSystemTrayIcon::ActivationReason reason)      This signal is emitted when the user activates the system tray icon. \a reason     specifies the reason for activation. QSystemTrayIcon::ActivationReason enumerates     the various reasons.      \sa QSystemTrayIcon::ActivationReason */
end_comment
begin_comment
comment|/*!     \fn void QSystemTrayIcon::messageClicked()      This signal is emitted when the message displayed using showMessage()     was clicked by the user.      Currently this signal is not sent on Mac OS X.      \note We follow Microsoft Windows XP/Vista behavior, so the     signal is also emitted when the user clicks on a tray icon with     a balloon message displayed.      \sa activated() */
end_comment
begin_comment
comment|/*!     Returns true if the system tray is available; otherwise returns false.      If the system tray is currently unavailable but becomes available later,     QSystemTrayIcon will automatically add an entry in the system tray if it     is \l visible. */
end_comment
begin_function
DECL|function|isSystemTrayAvailable
name|bool
name|QSystemTrayIcon
operator|::
name|isSystemTrayAvailable
parameter_list|()
block|{
return|return
name|QSystemTrayIconPrivate
operator|::
name|isSystemTrayAvailable_sys
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the system tray supports balloon messages; otherwise returns false.      \sa showMessage() */
end_comment
begin_function
DECL|function|supportsMessages
name|bool
name|QSystemTrayIcon
operator|::
name|supportsMessages
parameter_list|()
block|{
return|return
name|QSystemTrayIconPrivate
operator|::
name|supportsMessages_sys
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QSystemTrayIcon::showMessage(const QString&title, const QString&message, MessageIcon icon, int millisecondsTimeoutHint)     \since 4.3      Shows a balloon message for the entry with the given \a title, \a message and     \a icon for the time specified in \a millisecondsTimeoutHint. \a title and \a message     must be plain text strings.      Message can be clicked by the user; the messageClicked() signal will emitted when     this occurs.      Note that display of messages are dependent on the system configuration and user     preferences, and that messages may not appear at all. Hence, it should not be     relied upon as the sole means for providing critical information.      On Windows, the \a millisecondsTimeoutHint is usually ignored by the system     when the application has focus.      On Mac OS X, the Growl notification system must be installed for this function to     display messages.       \sa show() supportsMessages()   */
end_comment
begin_function
DECL|function|showMessage
name|void
name|QSystemTrayIcon
operator|::
name|showMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|msg
parameter_list|,
name|QSystemTrayIcon
operator|::
name|MessageIcon
name|icon
parameter_list|,
name|int
name|msecs
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSystemTrayIcon
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|visible
condition|)
name|d
operator|->
name|showMessage_sys
argument_list|(
name|title
argument_list|,
name|msg
argument_list|,
name|icon
argument_list|,
name|msecs
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//////////////////////////////////////////////////////////////////////
end_comment
begin_decl_stmt
DECL|variable|theSolitaryBalloonTip
specifier|static
name|QBalloonTip
modifier|*
name|theSolitaryBalloonTip
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|showBalloon
name|void
name|QBalloonTip
operator|::
name|showBalloon
parameter_list|(
name|QSystemTrayIcon
operator|::
name|MessageIcon
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|message
parameter_list|,
name|QSystemTrayIcon
modifier|*
name|trayIcon
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
name|int
name|timeout
parameter_list|,
name|bool
name|showArrow
parameter_list|)
block|{
name|hideBalloon
argument_list|()
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|isEmpty
argument_list|()
operator|&&
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|theSolitaryBalloonTip
operator|=
operator|new
name|QBalloonTip
argument_list|(
name|icon
argument_list|,
name|title
argument_list|,
name|message
argument_list|,
name|trayIcon
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
operator|<
literal|0
condition|)
name|timeout
operator|=
literal|10000
expr_stmt|;
comment|//10 s default
name|theSolitaryBalloonTip
operator|->
name|balloon
argument_list|(
name|pos
argument_list|,
name|timeout
argument_list|,
name|showArrow
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hideBalloon
name|void
name|QBalloonTip
operator|::
name|hideBalloon
parameter_list|()
block|{
if|if
condition|(
operator|!
name|theSolitaryBalloonTip
condition|)
return|return;
name|theSolitaryBalloonTip
operator|->
name|hide
argument_list|()
expr_stmt|;
operator|delete
name|theSolitaryBalloonTip
expr_stmt|;
name|theSolitaryBalloonTip
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isBalloonVisible
name|bool
name|QBalloonTip
operator|::
name|isBalloonVisible
parameter_list|()
block|{
return|return
name|theSolitaryBalloonTip
return|;
block|}
end_function
begin_constructor
DECL|function|QBalloonTip
name|QBalloonTip
operator|::
name|QBalloonTip
parameter_list|(
name|QSystemTrayIcon
operator|::
name|MessageIcon
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QString
modifier|&
name|message
parameter_list|,
name|QSystemTrayIcon
modifier|*
name|ti
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|ToolTip
argument_list|)
member_init_list|,
name|trayIcon
argument_list|(
name|ti
argument_list|)
member_init_list|,
name|timerId
argument_list|(
operator|-
literal|1
argument_list|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|ti
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|titleLabel
init|=
operator|new
name|QLabel
decl_stmt|;
name|titleLabel
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|titleLabel
operator|->
name|setText
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|QFont
name|f
init|=
name|titleLabel
operator|->
name|font
argument_list|()
decl_stmt|;
name|f
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WINCE
name|f
operator|.
name|setPointSize
argument_list|(
name|f
operator|.
name|pointSize
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|titleLabel
operator|->
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|titleLabel
operator|->
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
comment|// to maintain compat with windows
ifdef|#
directive|ifdef
name|Q_WS_WINCE
specifier|const
name|int
name|iconSize
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SmallIconSize
argument_list|)
decl_stmt|;
specifier|const
name|int
name|closeButtonSize
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SmallIconSize
argument_list|)
operator|-
literal|2
decl_stmt|;
else|#
directive|else
specifier|const
name|int
name|iconSize
init|=
literal|18
decl_stmt|;
specifier|const
name|int
name|closeButtonSize
init|=
literal|15
decl_stmt|;
endif|#
directive|endif
name|QPushButton
modifier|*
name|closeButton
init|=
operator|new
name|QPushButton
decl_stmt|;
name|closeButton
operator|->
name|setIcon
argument_list|(
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarCloseButton
argument_list|)
argument_list|)
expr_stmt|;
name|closeButton
operator|->
name|setIconSize
argument_list|(
name|QSize
argument_list|(
name|closeButtonSize
argument_list|,
name|closeButtonSize
argument_list|)
argument_list|)
expr_stmt|;
name|closeButton
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|closeButton
operator|->
name|setFixedSize
argument_list|(
name|closeButtonSize
argument_list|,
name|closeButtonSize
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|closeButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|msgLabel
init|=
operator|new
name|QLabel
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WINCE
name|f
operator|.
name|setBold
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|msgLabel
operator|->
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|msgLabel
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|msgLabel
operator|->
name|setText
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|msgLabel
operator|->
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|msgLabel
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignTop
operator||
name|Qt
operator|::
name|AlignLeft
argument_list|)
expr_stmt|;
comment|// smart size for the message label
ifdef|#
directive|ifdef
name|Q_WS_WINCE
name|int
name|limit
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|msgLabel
argument_list|)
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
else|#
directive|else
name|int
name|limit
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|msgLabel
argument_list|)
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|/
literal|3
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|msgLabel
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|>
name|limit
condition|)
block|{
name|msgLabel
operator|->
name|setWordWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|msgLabel
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|>
name|limit
condition|)
block|{
name|msgLabel
operator|->
name|d_func
argument_list|()
operator|->
name|ensureTextControl
argument_list|()
expr_stmt|;
if|if
condition|(
name|QWidgetTextControl
modifier|*
name|control
init|=
name|msgLabel
operator|->
name|d_func
argument_list|()
operator|->
name|control
condition|)
block|{
name|QTextOption
name|opt
init|=
name|control
operator|->
name|document
argument_list|()
operator|->
name|defaultTextOption
argument_list|()
decl_stmt|;
name|opt
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WrapAnywhere
argument_list|)
expr_stmt|;
name|control
operator|->
name|document
argument_list|()
operator|->
name|setDefaultTextOption
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|Q_WS_WINCE
comment|// Make sure that the text isn't wrapped "somewhere" in the balloon widget
comment|// in the case that we have a long title label.
name|setMaximumWidth
argument_list|(
name|limit
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// Here we allow the text being much smaller than the balloon widget
comment|// to emulate the weird standard windows behavior.
name|msgLabel
operator|->
name|setFixedSize
argument_list|(
name|limit
argument_list|,
name|msgLabel
operator|->
name|heightForWidth
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|QIcon
name|si
decl_stmt|;
switch|switch
condition|(
name|icon
condition|)
block|{
case|case
name|QSystemTrayIcon
operator|::
name|Warning
case|:
name|si
operator|=
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_MessageBoxWarning
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSystemTrayIcon
operator|::
name|Critical
case|:
name|si
operator|=
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_MessageBoxCritical
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSystemTrayIcon
operator|::
name|Information
case|:
name|si
operator|=
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_MessageBoxInformation
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSystemTrayIcon
operator|::
name|NoIcon
case|:
default|default:
break|break;
block|}
name|QGridLayout
modifier|*
name|layout
init|=
operator|new
name|QGridLayout
decl_stmt|;
if|if
condition|(
operator|!
name|si
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QLabel
modifier|*
name|iconLabel
init|=
operator|new
name|QLabel
decl_stmt|;
name|iconLabel
operator|->
name|setPixmap
argument_list|(
name|si
operator|.
name|pixmap
argument_list|(
name|iconSize
argument_list|,
name|iconSize
argument_list|)
argument_list|)
expr_stmt|;
name|iconLabel
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|iconLabel
operator|->
name|setMargin
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|iconLabel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|titleLabel
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|layout
operator|->
name|addWidget
argument_list|(
name|titleLabel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|layout
operator|->
name|addWidget
argument_list|(
name|closeButton
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|msgLabel
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setSizeConstraint
argument_list|(
name|QLayout
operator|::
name|SetFixedSize
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setMargin
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|QPalette
name|pal
init|=
name|palette
argument_list|()
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|QColor
argument_list|(
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xe1
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QBalloonTip
name|QBalloonTip
operator|::
name|~
name|QBalloonTip
parameter_list|()
block|{
name|theSolitaryBalloonTip
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|paintEvent
name|void
name|QBalloonTip
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|painter
operator|.
name|drawPixmap
argument_list|(
name|rect
argument_list|()
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|QBalloonTip
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|ev
parameter_list|)
block|{
name|QWidget
operator|::
name|resizeEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|balloon
name|void
name|QBalloonTip
operator|::
name|balloon
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
name|int
name|msecs
parameter_list|,
name|bool
name|showArrow
parameter_list|)
block|{
name|QRect
name|scr
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|QSize
name|sh
init|=
name|sizeHint
argument_list|()
decl_stmt|;
specifier|const
name|int
name|border
init|=
literal|1
decl_stmt|;
specifier|const
name|int
name|ah
init|=
literal|18
decl_stmt|,
name|ao
init|=
literal|18
decl_stmt|,
name|aw
init|=
literal|18
decl_stmt|,
name|rc
init|=
literal|7
decl_stmt|;
name|bool
name|arrowAtTop
init|=
operator|(
name|pos
operator|.
name|y
argument_list|()
operator|+
name|sh
operator|.
name|height
argument_list|()
operator|+
name|ah
operator|<
name|scr
operator|.
name|height
argument_list|()
operator|)
decl_stmt|;
name|bool
name|arrowAtLeft
init|=
operator|(
name|pos
operator|.
name|x
argument_list|()
operator|+
name|sh
operator|.
name|width
argument_list|()
operator|-
name|ao
operator|<
name|scr
operator|.
name|width
argument_list|()
operator|)
decl_stmt|;
name|setContentsMargins
argument_list|(
name|border
operator|+
literal|3
argument_list|,
name|border
operator|+
operator|(
name|arrowAtTop
condition|?
name|ah
else|:
literal|0
operator|)
operator|+
literal|2
argument_list|,
name|border
operator|+
literal|3
argument_list|,
name|border
operator|+
operator|(
name|arrowAtTop
condition|?
literal|0
else|:
name|ah
operator|)
operator|+
literal|2
argument_list|)
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
name|sh
operator|=
name|sizeHint
argument_list|()
expr_stmt|;
name|int
name|ml
decl_stmt|,
name|mr
decl_stmt|,
name|mt
decl_stmt|,
name|mb
decl_stmt|;
name|QSize
name|sz
init|=
name|sizeHint
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|arrowAtTop
condition|)
block|{
name|ml
operator|=
name|mt
operator|=
literal|0
expr_stmt|;
name|mr
operator|=
name|sz
operator|.
name|width
argument_list|()
operator|-
literal|1
expr_stmt|;
name|mb
operator|=
name|sz
operator|.
name|height
argument_list|()
operator|-
name|ah
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|ml
operator|=
literal|0
expr_stmt|;
name|mt
operator|=
name|ah
expr_stmt|;
name|mr
operator|=
name|sz
operator|.
name|width
argument_list|()
operator|-
literal|1
expr_stmt|;
name|mb
operator|=
name|sz
operator|.
name|height
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
name|QPainterPath
name|path
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_XSHAPE
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
comment|// XShape is required for setting the mask, so we just
comment|// draw an ugly square when its not available
name|path
operator|.
name|moveTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|sz
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|sz
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|sz
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
literal|0
argument_list|,
name|sz
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|move
argument_list|(
name|qMax
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|-
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|scr
operator|.
name|left
argument_list|()
argument_list|)
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|path
operator|.
name|moveTo
argument_list|(
name|ml
operator|+
name|rc
argument_list|,
name|mt
argument_list|)
expr_stmt|;
if|if
condition|(
name|arrowAtTop
operator|&&
name|arrowAtLeft
condition|)
block|{
if|if
condition|(
name|showArrow
condition|)
block|{
name|path
operator|.
name|lineTo
argument_list|(
name|ml
operator|+
name|ao
argument_list|,
name|mt
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|ml
operator|+
name|ao
argument_list|,
name|mt
operator|-
name|ah
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|ml
operator|+
name|ao
operator|+
name|aw
argument_list|,
name|mt
argument_list|)
expr_stmt|;
block|}
name|move
argument_list|(
name|qMax
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|-
name|ao
argument_list|,
name|scr
operator|.
name|left
argument_list|()
operator|+
literal|2
argument_list|)
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arrowAtTop
operator|&&
operator|!
name|arrowAtLeft
condition|)
block|{
if|if
condition|(
name|showArrow
condition|)
block|{
name|path
operator|.
name|lineTo
argument_list|(
name|mr
operator|-
name|ao
operator|-
name|aw
argument_list|,
name|mt
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|mr
operator|-
name|ao
argument_list|,
name|mt
operator|-
name|ah
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|mr
operator|-
name|ao
argument_list|,
name|mt
argument_list|)
expr_stmt|;
block|}
name|move
argument_list|(
name|qMin
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|-
name|sh
operator|.
name|width
argument_list|()
operator|+
name|ao
argument_list|,
name|scr
operator|.
name|right
argument_list|()
operator|-
name|sh
operator|.
name|width
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|path
operator|.
name|lineTo
argument_list|(
name|mr
operator|-
name|rc
argument_list|,
name|mt
argument_list|)
expr_stmt|;
name|path
operator|.
name|arcTo
argument_list|(
name|QRect
argument_list|(
name|mr
operator|-
name|rc
operator|*
literal|2
argument_list|,
name|mt
argument_list|,
name|rc
operator|*
literal|2
argument_list|,
name|rc
operator|*
literal|2
argument_list|)
argument_list|,
literal|90
argument_list|,
operator|-
literal|90
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|mr
argument_list|,
name|mb
operator|-
name|rc
argument_list|)
expr_stmt|;
name|path
operator|.
name|arcTo
argument_list|(
name|QRect
argument_list|(
name|mr
operator|-
name|rc
operator|*
literal|2
argument_list|,
name|mb
operator|-
name|rc
operator|*
literal|2
argument_list|,
name|rc
operator|*
literal|2
argument_list|,
name|rc
operator|*
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|-
literal|90
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|arrowAtTop
operator|&&
operator|!
name|arrowAtLeft
condition|)
block|{
if|if
condition|(
name|showArrow
condition|)
block|{
name|path
operator|.
name|lineTo
argument_list|(
name|mr
operator|-
name|ao
argument_list|,
name|mb
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|mr
operator|-
name|ao
argument_list|,
name|mb
operator|+
name|ah
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|mr
operator|-
name|ao
operator|-
name|aw
argument_list|,
name|mb
argument_list|)
expr_stmt|;
block|}
name|move
argument_list|(
name|qMin
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|-
name|sh
operator|.
name|width
argument_list|()
operator|+
name|ao
argument_list|,
name|scr
operator|.
name|right
argument_list|()
operator|-
name|sh
operator|.
name|width
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|,
name|pos
operator|.
name|y
argument_list|()
operator|-
name|sh
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|arrowAtTop
operator|&&
name|arrowAtLeft
condition|)
block|{
if|if
condition|(
name|showArrow
condition|)
block|{
name|path
operator|.
name|lineTo
argument_list|(
name|ao
operator|+
name|aw
argument_list|,
name|mb
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|ao
argument_list|,
name|mb
operator|+
name|ah
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|ao
argument_list|,
name|mb
argument_list|)
expr_stmt|;
block|}
name|move
argument_list|(
name|qMax
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|-
name|ao
argument_list|,
name|scr
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|)
argument_list|,
name|pos
operator|.
name|y
argument_list|()
operator|-
name|sh
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|path
operator|.
name|lineTo
argument_list|(
name|ml
operator|+
name|rc
argument_list|,
name|mb
argument_list|)
expr_stmt|;
name|path
operator|.
name|arcTo
argument_list|(
name|QRect
argument_list|(
name|ml
argument_list|,
name|mb
operator|-
name|rc
operator|*
literal|2
argument_list|,
name|rc
operator|*
literal|2
argument_list|,
name|rc
operator|*
literal|2
argument_list|)
argument_list|,
operator|-
literal|90
argument_list|,
operator|-
literal|90
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|ml
argument_list|,
name|mt
operator|+
name|rc
argument_list|)
expr_stmt|;
name|path
operator|.
name|arcTo
argument_list|(
name|QRect
argument_list|(
name|ml
argument_list|,
name|mt
argument_list|,
name|rc
operator|*
literal|2
argument_list|,
name|rc
operator|*
literal|2
argument_list|)
argument_list|,
literal|180
argument_list|,
operator|-
literal|90
argument_list|)
expr_stmt|;
comment|// Set the mask
name|QBitmap
name|bitmap
init|=
name|QBitmap
argument_list|(
name|sizeHint
argument_list|()
argument_list|)
decl_stmt|;
name|bitmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color0
argument_list|)
expr_stmt|;
name|QPainter
name|painter1
argument_list|(
operator|&
name|bitmap
argument_list|)
decl_stmt|;
name|painter1
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|color1
argument_list|,
name|border
argument_list|)
argument_list|)
expr_stmt|;
name|painter1
operator|.
name|setBrush
argument_list|(
name|QBrush
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
argument_list|)
expr_stmt|;
name|painter1
operator|.
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|setMask
argument_list|(
name|bitmap
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Draw the border
name|pixmap
operator|=
name|QPixmap
argument_list|(
name|sz
argument_list|)
expr_stmt|;
name|QPainter
name|painter2
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|painter2
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
operator|.
name|darker
argument_list|(
literal|160
argument_list|)
argument_list|,
name|border
argument_list|)
argument_list|)
expr_stmt|;
name|painter2
operator|.
name|setBrush
argument_list|(
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
name|painter2
operator|.
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|msecs
operator|>
literal|0
condition|)
name|timerId
operator|=
name|startTimer
argument_list|(
name|msecs
argument_list|)
expr_stmt|;
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QBalloonTip
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
condition|)
emit|emit
name|trayIcon
operator|->
name|messageClicked
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QBalloonTip
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|timerId
condition|)
block|{
name|killTimer
argument_list|(
name|timerId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|underMouse
argument_list|()
condition|)
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
name|QWidget
operator|::
name|timerEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qtsystray_sendActivated
name|void
name|qtsystray_sendActivated
parameter_list|(
name|QSystemTrayIcon
modifier|*
name|i
parameter_list|,
name|int
name|r
parameter_list|)
block|{
emit|emit
name|i
operator|->
name|activated
argument_list|(
operator|(
name|QSystemTrayIcon
operator|::
name|ActivationReason
operator|)
name|r
argument_list|)
emit|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SYSTEMTRAYICON
end_comment
end_unit
