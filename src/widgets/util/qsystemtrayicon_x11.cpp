begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"private/qt_x11_p.h"
end_include
begin_include
include|#
directive|include
file|"qlabel.h"
end_include
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qlist.h"
end_include
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"qtimer.h"
end_include
begin_include
include|#
directive|include
file|"qsystemtrayicon_p.h"
end_include
begin_include
include|#
directive|include
file|"qpaintengine.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMTRAYICON
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|sysTrayWindow
name|Window
name|QSystemTrayIconSys
operator|::
name|sysTrayWindow
init|=
name|XNone
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|trayIcons
name|QList
argument_list|<
name|QSystemTrayIconSys
modifier|*
argument_list|>
name|QSystemTrayIconSys
operator|::
name|trayIcons
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|oldEventFilter
name|QCoreApplication
operator|::
name|EventFilter
name|QSystemTrayIconSys
operator|::
name|oldEventFilter
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|sysTraySelection
name|Atom
name|QSystemTrayIconSys
operator|::
name|sysTraySelection
init|=
name|XNone
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|sysTrayVisual
name|XVisualInfo
name|QSystemTrayIconSys
operator|::
name|sysTrayVisual
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Locate the system tray
end_comment
begin_function
DECL|function|locateSystemTray
name|Window
name|QSystemTrayIconSys
operator|::
name|locateSystemTray
parameter_list|()
block|{
name|Display
modifier|*
name|display
init|=
name|QX11Info
operator|::
name|display
argument_list|()
decl_stmt|;
if|if
condition|(
name|sysTraySelection
operator|==
name|XNone
condition|)
block|{
name|int
name|screen
init|=
name|QX11Info
operator|::
name|appScreen
argument_list|()
decl_stmt|;
name|QString
name|net_sys_tray
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"_NET_SYSTEM_TRAY_S%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|screen
argument_list|)
decl_stmt|;
name|sysTraySelection
operator|=
name|XInternAtom
argument_list|(
name|display
argument_list|,
name|net_sys_tray
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|False
argument_list|)
expr_stmt|;
block|}
return|return
name|XGetSelectionOwner
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|sysTraySelection
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getSysTrayVisualInfo
name|XVisualInfo
modifier|*
name|QSystemTrayIconSys
operator|::
name|getSysTrayVisualInfo
parameter_list|()
block|{
name|Display
modifier|*
name|display
init|=
name|QX11Info
operator|::
name|display
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sysTrayVisual
operator|.
name|visual
condition|)
block|{
name|Window
name|win
init|=
name|locateSystemTray
argument_list|()
decl_stmt|;
if|if
condition|(
name|win
operator|!=
name|XNone
condition|)
block|{
name|Atom
name|actual_type
decl_stmt|;
name|int
name|actual_format
decl_stmt|;
name|ulong
name|nitems
decl_stmt|,
name|bytes_remaining
decl_stmt|;
name|uchar
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|int
name|result
init|=
name|XGetWindowProperty
argument_list|(
name|display
argument_list|,
name|win
argument_list|,
name|ATOM
argument_list|(
name|_NET_SYSTEM_TRAY_VISUAL
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|False
argument_list|,
name|XA_VISUALID
argument_list|,
operator|&
name|actual_type
argument_list|,
operator|&
name|actual_format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|bytes_remaining
argument_list|,
operator|&
name|data
argument_list|)
decl_stmt|;
name|VisualID
name|vid
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|Success
operator|&&
name|data
operator|&&
name|actual_type
operator|==
name|XA_VISUALID
operator|&&
name|actual_format
operator|==
literal|32
operator|&&
name|nitems
operator|==
literal|1
operator|&&
name|bytes_remaining
operator|==
literal|0
condition|)
name|vid
operator|=
operator|*
operator|(
name|VisualID
operator|*
operator|)
name|data
expr_stmt|;
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|vid
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|uint
name|mask
init|=
name|VisualIDMask
decl_stmt|;
name|XVisualInfo
modifier|*
name|vi
decl_stmt|,
name|rvi
decl_stmt|;
name|int
name|count
decl_stmt|;
name|rvi
operator|.
name|visualid
operator|=
name|vid
expr_stmt|;
name|vi
operator|=
name|XGetVisualInfo
argument_list|(
name|display
argument_list|,
name|mask
argument_list|,
operator|&
name|rvi
argument_list|,
operator|&
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|vi
condition|)
block|{
name|sysTrayVisual
operator|=
name|vi
index|[
literal|0
index|]
expr_stmt|;
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|vi
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sysTrayVisual
operator|.
name|depth
operator|!=
literal|32
condition|)
name|memset
argument_list|(
operator|&
name|sysTrayVisual
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sysTrayVisual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sysTrayVisual
operator|.
name|visual
condition|?
operator|&
name|sysTrayVisual
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|sysTrayTracker
name|bool
name|QSystemTrayIconSys
operator|::
name|sysTrayTracker
parameter_list|(
name|void
modifier|*
name|message
parameter_list|,
name|long
modifier|*
name|result
parameter_list|)
block|{
name|bool
name|retval
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|QSystemTrayIconSys
operator|::
name|oldEventFilter
condition|)
name|retval
operator|=
name|QSystemTrayIconSys
operator|::
name|oldEventFilter
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|trayIcons
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|retval
return|;
name|Display
modifier|*
name|display
init|=
name|QX11Info
operator|::
name|display
argument_list|()
decl_stmt|;
name|XEvent
modifier|*
name|ev
init|=
operator|(
name|XEvent
operator|*
operator|)
name|message
decl_stmt|;
if|if
condition|(
name|ev
operator|->
name|type
operator|==
name|DestroyNotify
operator|&&
name|ev
operator|->
name|xany
operator|.
name|window
operator|==
name|sysTrayWindow
condition|)
block|{
name|sysTrayWindow
operator|=
name|locateSystemTray
argument_list|()
expr_stmt|;
name|memset
argument_list|(
operator|&
name|sysTrayVisual
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sysTrayVisual
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trayIcons
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sysTrayWindow
operator|==
name|XNone
condition|)
block|{
name|QBalloonTip
operator|::
name|hideBalloon
argument_list|()
expr_stmt|;
name|trayIcons
index|[
name|i
index|]
operator|->
name|hide
argument_list|()
expr_stmt|;
comment|// still no luck
name|trayIcons
index|[
name|i
index|]
operator|->
name|destroy
argument_list|()
expr_stmt|;
name|trayIcons
index|[
name|i
index|]
operator|->
name|create
argument_list|()
expr_stmt|;
block|}
else|else
name|trayIcons
index|[
name|i
index|]
operator|->
name|addToTray
argument_list|()
expr_stmt|;
comment|// add it to the new tray
block|}
name|retval
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ev
operator|->
name|type
operator|==
name|ClientMessage
operator|&&
name|sysTrayWindow
operator|==
name|XNone
condition|)
block|{
specifier|static
name|Atom
name|manager_atom
init|=
name|XInternAtom
argument_list|(
name|display
argument_list|,
literal|"MANAGER"
argument_list|,
name|False
argument_list|)
decl_stmt|;
name|XClientMessageEvent
modifier|*
name|cm
init|=
operator|(
name|XClientMessageEvent
operator|*
operator|)
name|message
decl_stmt|;
if|if
condition|(
operator|(
name|cm
operator|->
name|message_type
operator|==
name|manager_atom
operator|)
operator|&&
operator|(
operator|(
name|Atom
operator|)
name|cm
operator|->
name|data
operator|.
name|l
index|[
literal|1
index|]
operator|==
name|sysTraySelection
operator|)
condition|)
block|{
name|sysTrayWindow
operator|=
name|cm
operator|->
name|data
operator|.
name|l
index|[
literal|2
index|]
expr_stmt|;
name|memset
argument_list|(
operator|&
name|sysTrayVisual
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sysTrayVisual
argument_list|)
argument_list|)
expr_stmt|;
name|XSelectInput
argument_list|(
name|display
argument_list|,
name|sysTrayWindow
argument_list|,
name|StructureNotifyMask
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trayIcons
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|trayIcons
index|[
name|i
index|]
operator|->
name|addToTray
argument_list|()
expr_stmt|;
block|}
name|retval
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ev
operator|->
name|type
operator|==
name|PropertyNotify
operator|&&
name|ev
operator|->
name|xproperty
operator|.
name|atom
operator|==
name|ATOM
argument_list|(
name|_NET_SYSTEM_TRAY_VISUAL
argument_list|)
operator|&&
name|ev
operator|->
name|xproperty
operator|.
name|window
operator|==
name|sysTrayWindow
condition|)
block|{
name|memset
argument_list|(
operator|&
name|sysTrayVisual
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sysTrayVisual
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trayIcons
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|trayIcons
index|[
name|i
index|]
operator|->
name|addToTray
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
end_function
begin_constructor
DECL|function|QSystemTrayIconSys
name|QSystemTrayIconSys
operator|::
name|QSystemTrayIconSys
parameter_list|(
name|QSystemTrayIcon
modifier|*
name|q
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|X11BypassWindowManagerHint
argument_list|)
member_init_list|,
name|q
argument_list|(
name|q
argument_list|)
member_init_list|,
name|colormap
argument_list|(
literal|0
argument_list|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AlwaysShowToolTips
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_QuitOnClose
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoSystemBackground
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PaintOnScreen
argument_list|)
expr_stmt|;
specifier|static
name|bool
name|eventFilterAdded
init|=
literal|false
decl_stmt|;
name|Display
modifier|*
name|display
init|=
name|QX11Info
operator|::
name|display
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|eventFilterAdded
condition|)
block|{
name|oldEventFilter
operator|=
name|qApp
operator|->
name|setEventFilter
argument_list|(
name|sysTrayTracker
argument_list|)
expr_stmt|;
name|eventFilterAdded
operator|=
literal|true
expr_stmt|;
name|Window
name|root
init|=
name|QX11Info
operator|::
name|appRootWindow
argument_list|()
decl_stmt|;
name|XWindowAttributes
name|attr
decl_stmt|;
name|XGetWindowAttributes
argument_list|(
name|display
argument_list|,
name|root
argument_list|,
operator|&
name|attr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|attr
operator|.
name|your_event_mask
operator|&
name|StructureNotifyMask
operator|)
operator|!=
name|StructureNotifyMask
condition|)
block|{
operator|(
name|void
operator|)
name|QApplication
operator|::
name|desktop
argument_list|()
expr_stmt|;
comment|// lame trick to ensure our event mask is not overridden
name|XSelectInput
argument_list|(
name|display
argument_list|,
name|root
argument_list|,
name|attr
operator|.
name|your_event_mask
operator||
name|StructureNotifyMask
argument_list|)
expr_stmt|;
comment|// for MANAGER selection
block|}
block|}
if|if
condition|(
name|trayIcons
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sysTrayWindow
operator|=
name|locateSystemTray
argument_list|()
expr_stmt|;
if|if
condition|(
name|sysTrayWindow
operator|!=
name|XNone
condition|)
name|XSelectInput
argument_list|(
name|display
argument_list|,
name|sysTrayWindow
argument_list|,
name|StructureNotifyMask
argument_list|)
expr_stmt|;
comment|// track tray events
block|}
name|trayIcons
operator|.
name|append
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
name|setToolTip
argument_list|(
name|q
operator|->
name|toolTip
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|sysTrayWindow
operator|!=
name|XNone
condition|)
name|addToTray
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QSystemTrayIconSys
name|QSystemTrayIconSys
operator|::
name|~
name|QSystemTrayIconSys
parameter_list|()
block|{
name|trayIcons
operator|.
name|removeAt
argument_list|(
name|trayIcons
operator|.
name|indexOf
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
name|QX11Info
operator|::
name|display
argument_list|()
decl_stmt|;
if|if
condition|(
name|trayIcons
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|sysTrayWindow
operator|==
name|XNone
condition|)
return|return;
if|if
condition|(
name|display
condition|)
name|XSelectInput
argument_list|(
name|display
argument_list|,
name|sysTrayWindow
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// stop tracking the tray
name|sysTrayWindow
operator|=
name|XNone
expr_stmt|;
block|}
if|if
condition|(
name|colormap
condition|)
name|XFreeColormap
argument_list|(
name|display
argument_list|,
name|colormap
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|addToTray
name|void
name|QSystemTrayIconSys
operator|::
name|addToTray
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|sysTrayWindow
operator|!=
name|XNone
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
name|QX11Info
operator|::
name|display
argument_list|()
decl_stmt|;
name|XVisualInfo
modifier|*
name|vi
init|=
name|getSysTrayVisualInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|vi
operator|&&
name|vi
operator|->
name|visual
condition|)
block|{
name|Window
name|root
init|=
name|RootWindow
argument_list|(
name|display
argument_list|,
name|vi
operator|->
name|screen
argument_list|)
decl_stmt|;
name|Window
name|p
init|=
name|root
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|pw
init|=
name|parentWidget
argument_list|()
condition|)
name|p
operator|=
name|pw
operator|->
name|effectiveWinId
argument_list|()
expr_stmt|;
name|colormap
operator|=
name|XCreateColormap
argument_list|(
name|display
argument_list|,
name|root
argument_list|,
name|vi
operator|->
name|visual
argument_list|,
name|AllocNone
argument_list|)
expr_stmt|;
name|XSetWindowAttributes
name|wsa
decl_stmt|;
name|wsa
operator|.
name|background_pixmap
operator|=
literal|0
expr_stmt|;
name|wsa
operator|.
name|colormap
operator|=
name|colormap
expr_stmt|;
name|wsa
operator|.
name|background_pixel
operator|=
literal|0
expr_stmt|;
name|wsa
operator|.
name|border_pixel
operator|=
literal|0
expr_stmt|;
name|Window
name|wid
init|=
name|XCreateWindow
argument_list|(
name|display
argument_list|,
name|p
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|vi
operator|->
name|depth
argument_list|,
name|InputOutput
argument_list|,
name|vi
operator|->
name|visual
argument_list|,
name|CWBackPixmap
operator||
name|CWBackPixel
operator||
name|CWBorderPixel
operator||
name|CWColormap
argument_list|,
operator|&
name|wsa
argument_list|)
decl_stmt|;
name|create
argument_list|(
name|wid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XSetWindowBackgroundPixmap
argument_list|(
name|display
argument_list|,
name|winId
argument_list|()
argument_list|,
name|ParentRelative
argument_list|)
expr_stmt|;
block|}
comment|// GNOME, NET WM Specification
specifier|static
name|Atom
name|netwm_tray_atom
init|=
name|XInternAtom
argument_list|(
name|display
argument_list|,
literal|"_NET_SYSTEM_TRAY_OPCODE"
argument_list|,
name|False
argument_list|)
decl_stmt|;
name|long
name|l
index|[
literal|5
index|]
init|=
block|{
name|CurrentTime
block|,
name|SYSTEM_TRAY_REQUEST_DOCK
block|,
name|winId
argument_list|()
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|XEvent
name|ev
decl_stmt|;
name|memset
argument_list|(
operator|&
name|ev
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|ev
argument_list|)
argument_list|)
expr_stmt|;
name|ev
operator|.
name|xclient
operator|.
name|type
operator|=
name|ClientMessage
expr_stmt|;
name|ev
operator|.
name|xclient
operator|.
name|window
operator|=
name|sysTrayWindow
expr_stmt|;
name|ev
operator|.
name|xclient
operator|.
name|message_type
operator|=
name|netwm_tray_atom
expr_stmt|;
name|ev
operator|.
name|xclient
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|memcpy
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|ev
operator|.
name|xclient
operator|.
name|data
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|l
argument_list|,
sizeof|sizeof
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
name|XSendEvent
argument_list|(
name|display
argument_list|,
name|sysTrayWindow
argument_list|,
name|False
argument_list|,
literal|0
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
name|setMinimumSize
argument_list|(
literal|22
argument_list|,
literal|22
argument_list|)
expr_stmt|;
comment|// required at least on GNOME
block|}
end_function
begin_function
DECL|function|updateIcon
name|void
name|QSystemTrayIconSys
operator|::
name|updateIcon
parameter_list|()
block|{
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|QSystemTrayIconSys
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|re
parameter_list|)
block|{
name|QWidget
operator|::
name|resizeEvent
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|updateIcon
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|QSystemTrayIconSys
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|getSysTrayVisualInfo
argument_list|()
condition|)
block|{
specifier|const
name|QRegion
name|oldSystemClip
init|=
name|p
operator|.
name|paintEngine
argument_list|()
operator|->
name|systemClip
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|clearedRect
init|=
name|oldSystemClip
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|XClearArea
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|winId
argument_list|()
argument_list|,
name|clearedRect
operator|.
name|x
argument_list|()
argument_list|,
name|clearedRect
operator|.
name|y
argument_list|()
argument_list|,
name|clearedRect
operator|.
name|width
argument_list|()
argument_list|,
name|clearedRect
operator|.
name|height
argument_list|()
argument_list|,
name|False
argument_list|)
expr_stmt|;
name|QPaintEngine
modifier|*
name|pe
init|=
name|p
operator|.
name|paintEngine
argument_list|()
decl_stmt|;
name|pe
operator|->
name|setSystemClip
argument_list|(
name|clearedRect
argument_list|)
expr_stmt|;
name|q
operator|->
name|icon
argument_list|()
operator|.
name|paint
argument_list|(
operator|&
name|p
argument_list|,
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|pe
operator|->
name|setSystemClip
argument_list|(
name|oldSystemClip
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|p
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceOver
argument_list|)
expr_stmt|;
name|q
operator|->
name|icon
argument_list|()
operator|.
name|paint
argument_list|(
operator|&
name|p
argument_list|,
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QSystemTrayIconSys
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|ev
parameter_list|)
block|{
name|QPoint
name|globalPos
init|=
name|ev
operator|->
name|globalPos
argument_list|()
decl_stmt|;
if|if
condition|(
name|ev
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|RightButton
operator|&&
name|q
operator|->
name|contextMenu
argument_list|()
condition|)
name|q
operator|->
name|contextMenu
argument_list|()
operator|->
name|popup
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
if|if
condition|(
name|QBalloonTip
operator|::
name|isBalloonVisible
argument_list|()
condition|)
block|{
emit|emit
name|q
operator|->
name|messageClicked
argument_list|()
emit|;
name|QBalloonTip
operator|::
name|hideBalloon
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ev
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
condition|)
emit|emit
name|q
operator|->
name|activated
argument_list|(
name|QSystemTrayIcon
operator|::
name|Trigger
argument_list|)
emit|;
elseif|else
if|if
condition|(
name|ev
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|RightButton
condition|)
emit|emit
name|q
operator|->
name|activated
argument_list|(
name|QSystemTrayIcon
operator|::
name|Context
argument_list|)
emit|;
elseif|else
if|if
condition|(
name|ev
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|MidButton
condition|)
emit|emit
name|q
operator|->
name|activated
argument_list|(
name|QSystemTrayIcon
operator|::
name|MiddleClick
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|mouseDoubleClickEvent
name|void
name|QSystemTrayIconSys
operator|::
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|ev
parameter_list|)
block|{
if|if
condition|(
name|ev
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
condition|)
emit|emit
name|q
operator|->
name|activated
argument_list|(
name|QSystemTrayIcon
operator|::
name|DoubleClick
argument_list|)
emit|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_function
DECL|function|wheelEvent
name|void
name|QSystemTrayIconSys
operator|::
name|wheelEvent
parameter_list|(
name|QWheelEvent
modifier|*
name|e
parameter_list|)
block|{
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|event
name|bool
name|QSystemTrayIconSys
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ToolTip
condition|)
block|{
return|return
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
name|e
argument_list|)
return|;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|x11Event
name|bool
name|QSystemTrayIconSys
operator|::
name|x11Event
parameter_list|(
name|XEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|ReparentNotify
condition|)
name|show
argument_list|()
expr_stmt|;
return|return
name|QWidget
operator|::
name|x11Event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|////////////////////////////////////////////////////////////////////////////
end_comment
begin_function
DECL|function|install_sys
name|void
name|QSystemTrayIconPrivate
operator|::
name|install_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSystemTrayIcon
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sys
condition|)
name|sys
operator|=
operator|new
name|QSystemTrayIconSys
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|geometry_sys
name|QRect
name|QSystemTrayIconPrivate
operator|::
name|geometry_sys
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|sys
condition|)
return|return
name|QRect
argument_list|()
return|;
return|return
name|QRect
argument_list|(
name|sys
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|sys
operator|->
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|remove_sys
name|void
name|QSystemTrayIconPrivate
operator|::
name|remove_sys
parameter_list|()
block|{
if|if
condition|(
operator|!
name|sys
condition|)
return|return;
name|QBalloonTip
operator|::
name|hideBalloon
argument_list|()
expr_stmt|;
name|sys
operator|->
name|hide
argument_list|()
expr_stmt|;
comment|// this should do the trick, but...
operator|delete
name|sys
expr_stmt|;
comment|// wm may resize system tray only for DestroyEvents
name|sys
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateIcon_sys
name|void
name|QSystemTrayIconPrivate
operator|::
name|updateIcon_sys
parameter_list|()
block|{
if|if
condition|(
operator|!
name|sys
condition|)
return|return;
name|sys
operator|->
name|updateIcon
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateMenu_sys
name|void
name|QSystemTrayIconPrivate
operator|::
name|updateMenu_sys
parameter_list|()
block|{  }
end_function
begin_function
DECL|function|updateToolTip_sys
name|void
name|QSystemTrayIconPrivate
operator|::
name|updateToolTip_sys
parameter_list|()
block|{
if|if
condition|(
operator|!
name|sys
condition|)
return|return;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
name|sys
operator|->
name|setToolTip
argument_list|(
name|toolTip
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isSystemTrayAvailable_sys
name|bool
name|QSystemTrayIconPrivate
operator|::
name|isSystemTrayAvailable_sys
parameter_list|()
block|{
return|return
name|QSystemTrayIconSys
operator|::
name|locateSystemTray
argument_list|()
operator|!=
name|XNone
return|;
block|}
end_function
begin_function
DECL|function|supportsMessages_sys
name|bool
name|QSystemTrayIconPrivate
operator|::
name|supportsMessages_sys
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|showMessage_sys
name|void
name|QSystemTrayIconPrivate
operator|::
name|showMessage_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|message
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
name|QSystemTrayIcon
operator|::
name|MessageIcon
name|icon
parameter_list|,
name|int
name|msecs
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sys
condition|)
return|return;
name|QPoint
name|g
init|=
name|sys
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QBalloonTip
operator|::
name|showBalloon
argument_list|(
name|icon
argument_list|,
name|message
argument_list|,
name|title
argument_list|,
name|sys
operator|->
name|q
argument_list|,
name|QPoint
argument_list|(
name|g
operator|.
name|x
argument_list|()
operator|+
name|sys
operator|->
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|g
operator|.
name|y
argument_list|()
operator|+
name|sys
operator|->
name|height
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|,
name|msecs
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_SYSTEMTRAYICON
end_comment
end_unit
