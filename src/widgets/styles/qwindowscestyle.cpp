begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowscestyle_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSCE
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_PLUGIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qpainterpath.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qdockwidget.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbar.h"
end_include
begin_include
include|#
directive|include
file|"qpaintengine.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscestyle_p_p.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qdrawutil.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|windowsItemFrame
specifier|static
specifier|const
name|int
name|windowsItemFrame
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsItemFrame
comment|// menu item frame width
end_comment
begin_decl_stmt
DECL|variable|windowsItemHMargin
specifier|static
specifier|const
name|int
name|windowsItemHMargin
init|=
literal|3
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsItemHMargin
comment|// menu item hor text margin
end_comment
begin_decl_stmt
DECL|variable|windowsItemVMargin
specifier|static
specifier|const
name|int
name|windowsItemVMargin
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsItemVMargin
comment|// menu item ver text margin
end_comment
begin_decl_stmt
DECL|variable|windowsArrowHMargin
specifier|static
specifier|const
name|int
name|windowsArrowHMargin
init|=
literal|6
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsArrowHMargin
comment|// arrow horizontal margin
end_comment
begin_decl_stmt
DECL|variable|windowsRightBorder
specifier|static
specifier|const
name|int
name|windowsRightBorder
init|=
literal|15
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsRightBorder
comment|// right border on windows
end_comment
begin_decl_stmt
DECL|variable|windowsCheckMarkWidth
specifier|static
specifier|const
name|int
name|windowsCheckMarkWidth
init|=
literal|14
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsCheckMarkWidth
comment|// checkmarks width on windows
end_comment
begin_decl_stmt
DECL|variable|windowsCEitemViewCheckBoxSize
specifier|static
specifier|const
name|int
name|windowsCEitemViewCheckBoxSize
init|=
literal|14
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|windowsCEFrameGroupBoxOffset
specifier|static
specifier|const
name|int
name|windowsCEFrameGroupBoxOffset
init|=
literal|9
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|windowsCEIndicatorSize
specifier|static
specifier|const
name|int
name|windowsCEIndicatorSize
init|=
literal|14
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|windowsCEExclusiveIndicatorSize
specifier|static
specifier|const
name|int
name|windowsCEExclusiveIndicatorSize
init|=
literal|14
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|windowsCESliderThickness
specifier|static
specifier|const
name|int
name|windowsCESliderThickness
init|=
literal|24
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|windowsCEIconSize
specifier|static
specifier|const
name|int
name|windowsCEIconSize
init|=
literal|16
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|windowsCECheckBoxGradientColorBegin
specifier|static
specifier|const
name|QColor
name|windowsCECheckBoxGradientColorBegin
init|=
name|QColor
argument_list|(
literal|222
argument_list|,
literal|224
argument_list|,
literal|214
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|windowsCECheckBoxGradientColorEnd
specifier|static
specifier|const
name|QColor
name|windowsCECheckBoxGradientColorEnd
init|=
name|QColor
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enum|QSliderDirection
DECL|enumerator|SlUp
DECL|enumerator|SlDown
DECL|enumerator|SlLeft
DECL|enumerator|SlRight
enum|enum
name|QSliderDirection
block|{
name|SlUp
block|,
name|SlDown
block|,
name|SlLeft
block|,
name|SlRight
block|}
enum|;
end_enum
begin_constructor
DECL|function|QWindowsCEStyle
name|QWindowsCEStyle
operator|::
name|QWindowsCEStyle
parameter_list|()
member_init_list|:
name|QWindowsStyle
argument_list|()
block|{
name|qApp
operator|->
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_FadeMenu
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateMenu
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsCEStyle
name|QWindowsCEStyle
operator|::
name|~
name|QWindowsCEStyle
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|drawPrimitive
name|void
name|QWindowsCEStyle
operator|::
name|drawPrimitive
parameter_list|(
name|PrimitiveElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|bool
name|doRestore
init|=
literal|false
decl_stmt|;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|PE_PanelButtonTool
case|:
block|{
if|if
condition|(
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
operator|(
name|widget
operator|&&
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
operator|)
operator|||
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
operator|(
name|widget
operator|&&
name|widget
operator|->
name|inherits
argument_list|(
literal|"QDockWidgetTitleButton"
argument_list|)
operator|)
operator|||
endif|#
directive|endif
operator|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
operator|)
condition|)
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|option
operator|->
name|palette
argument_list|,
name|option
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_On
operator|)
condition|)
block|{
name|QBrush
name|fill
init|=
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|midlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
decl_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|windowsItemFrame
argument_list|,
name|windowsItemFrame
argument_list|,
operator|-
name|windowsItemFrame
argument_list|,
operator|-
name|windowsItemFrame
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|PE_IndicatorButtonDropDown
case|:
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
argument_list|,
name|option
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|PE_IndicatorTabTear
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|bool
name|rtl
init|=
name|tab
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
decl_stmt|;
name|QRect
name|rect
init|=
name|tab
operator|->
name|rect
decl_stmt|;
name|QPainterPath
name|path
decl_stmt|;
name|rect
operator|.
name|setTop
argument_list|(
name|rect
operator|.
name|top
argument_list|()
operator|+
operator|(
operator|(
name|tab
operator|->
name|state
operator|&
name|State_Selected
operator|)
condition|?
literal|1
else|:
literal|3
operator|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setBottom
argument_list|(
name|rect
operator|.
name|bottom
argument_list|()
operator|-
operator|(
operator|(
name|tab
operator|->
name|state
operator|&
name|State_Selected
operator|)
condition|?
literal|0
else|:
literal|2
operator|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
name|QPoint
argument_list|(
name|rtl
condition|?
name|rect
operator|.
name|right
argument_list|()
else|:
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|jags
init|=
literal|1
init|;
name|jags
operator|<=
name|count
condition|;
operator|++
name|jags
operator|,
name|rtl
operator|=
operator|!
name|rtl
control|)
name|path
operator|.
name|lineTo
argument_list|(
name|QPoint
argument_list|(
name|rtl
condition|?
name|rect
operator|.
name|left
argument_list|()
else|:
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|+
name|jags
operator|*
name|rect
operator|.
name|height
argument_list|()
operator|/
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|tab
operator|->
name|palette
operator|.
name|light
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|.8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_TABBAR
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
case|case
name|PE_IndicatorToolBarSeparator
case|:
comment|//nothing to draw on WindowsCE
break|break;
case|case
name|PE_IndicatorToolBarHandle
case|:
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
name|int
name|x
init|=
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|-
literal|4
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|x
operator|-=
literal|2
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|>
literal|4
condition|)
block|{
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
argument_list|(
name|painter
argument_list|,
name|x
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEPanel
argument_list|(
name|painter
argument_list|,
name|x
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEPanel
argument_list|(
name|painter
argument_list|,
name|x
operator|+
literal|3
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x
operator|+
literal|4
argument_list|,
literal|2
argument_list|,
name|x
operator|+
literal|4
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|>
literal|4
condition|)
block|{
name|int
name|y
init|=
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
literal|4
decl_stmt|;
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEPanel
argument_list|(
name|painter
argument_list|,
literal|2
argument_list|,
name|y
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
argument_list|,
literal|3
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEPanel
argument_list|(
name|painter
argument_list|,
literal|2
argument_list|,
name|y
operator|+
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
argument_list|,
literal|3
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
endif|#
directive|endif
comment|// QT_NO_TOOLBAR
case|case
name|PE_FrameButtonTool
case|:
block|{
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|inherits
argument_list|(
literal|"QDockWidgetTitleButton"
argument_list|)
condition|)
block|{
if|if
condition|(
specifier|const
name|QDockWidget
modifier|*
name|dw
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parent
argument_list|()
argument_list|)
condition|)
if|if
condition|(
name|dw
operator|->
name|isFloating
argument_list|()
condition|)
block|{
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|option
operator|->
name|palette
argument_list|,
name|option
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
name|QBrush
name|fill
decl_stmt|;
name|bool
name|stippled
decl_stmt|;
name|bool
name|panel
init|=
operator|(
name|element
operator|==
name|PE_PanelButtonTool
operator|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|||
operator|(
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|&&
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
operator|)
operator|)
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_On
operator|)
condition|)
block|{
name|fill
operator|=
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
name|stippled
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|fill
operator|=
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|stippled
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Raised
operator||
name|State_Sunken
operator||
name|State_On
operator|)
condition|)
block|{
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_AutoRaise
condition|)
block|{
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Enabled
operator||
name|State_Sunken
operator||
name|State_On
operator|)
condition|)
block|{
if|if
condition|(
name|panel
condition|)
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEPanel
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
argument_list|,
name|option
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
else|else
name|qDrawShadeRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
argument_list|,
name|option
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stippled
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
argument_list|,
name|option
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
name|panel
condition|?
operator|&
name|fill
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|PE_PanelButtonBevel
case|:
block|{
name|QBrush
name|fill
decl_stmt|;
name|bool
name|panel
init|=
name|element
operator|!=
name|PE_FrameButtonBevel
decl_stmt|;
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|option
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_On
operator|)
condition|)
name|fill
operator|=
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
else|else
name|fill
operator|=
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Raised
operator||
name|State_On
operator||
name|State_Sunken
operator|)
condition|)
block|{
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
argument_list|,
name|option
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
name|panel
condition|?
operator|&
name|fill
else|:
literal|0
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|panel
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|PE_FrameGroupBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|frame
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|fr
init|=
name|frame
operator|->
name|rect
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|frame
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|fr
operator|.
name|x
argument_list|()
argument_list|,
name|fr
operator|.
name|y
argument_list|()
argument_list|,
name|fr
operator|.
name|x
argument_list|()
operator|+
name|fr
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|fr
operator|.
name|y
argument_list|()
operator|+
name|fr
operator|.
name|height
argument_list|()
operator|-
name|windowsCEFrameGroupBoxOffset
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_IndicatorCheckBox
case|:
block|{
name|QBrush
name|fill
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_NoChange
condition|)
name|fill
operator|=
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|fill
operator|=
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|fill
operator|=
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
expr_stmt|;
else|else
name|fill
operator|=
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|doRestore
operator|=
literal|true
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//fall through...
block|}
case|case
name|PE_IndicatorViewItemCheck
case|:
block|{
if|if
condition|(
operator|!
name|doRestore
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|doRestore
operator|=
literal|true
expr_stmt|;
block|}
name|int
name|arrowSize
init|=
literal|2
decl_stmt|;
if|if
condition|(
name|element
operator|==
name|PE_IndicatorViewItemCheck
condition|)
block|{
name|QLinearGradient
name|linearGradient
argument_list|(
name|QPoint
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|linearGradient
operator|.
name|setColorAt
argument_list|(
literal|0
argument_list|,
name|windowsCECheckBoxGradientColorBegin
argument_list|)
expr_stmt|;
name|linearGradient
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|windowsCECheckBoxGradientColorEnd
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|linearGradient
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_NoChange
condition|)
name|painter
operator|->
name|setBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|link
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|windowsCEitemViewCheckBoxSize
argument_list|,
name|windowsCEitemViewCheckBoxSize
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|brightText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|arrowSize
operator|=
literal|3
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Off
operator|)
condition|)
block|{
name|QLineF
name|lines
index|[
literal|9
index|]
decl_stmt|;
name|int
name|i
decl_stmt|,
name|xx
decl_stmt|,
name|yy
decl_stmt|;
name|xx
operator|=
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|4
expr_stmt|;
name|yy
operator|=
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|6
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|lines
index|[
name|i
index|]
operator|=
name|QLineF
argument_list|(
name|xx
argument_list|,
name|yy
argument_list|,
name|xx
argument_list|,
name|yy
operator|+
name|arrowSize
argument_list|)
expr_stmt|;
operator|++
name|xx
expr_stmt|;
operator|++
name|yy
expr_stmt|;
block|}
name|yy
operator|-=
literal|2
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|4
init|;
name|i
operator|<
literal|9
condition|;
operator|++
name|i
control|)
block|{
name|lines
index|[
name|i
index|]
operator|=
name|QLineF
argument_list|(
name|xx
argument_list|,
name|yy
argument_list|,
name|xx
argument_list|,
name|yy
operator|+
name|arrowSize
argument_list|)
expr_stmt|;
operator|++
name|xx
expr_stmt|;
operator|--
name|yy
expr_stmt|;
block|}
name|painter
operator|->
name|drawLines
argument_list|(
name|lines
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doRestore
condition|)
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorRadioButton
case|:
block|{
name|QRect
name|ir
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawEllipse
argument_list|(
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawArc
argument_list|(
name|option
operator|->
name|rect
argument_list|,
literal|0
argument_list|,
literal|360
operator|*
literal|16
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawArc
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|,
literal|40
operator|*
literal|16
argument_list|,
literal|180
operator|*
literal|16
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|11
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|12
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawEllipse
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|2
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|PE_PanelMenuBar
case|:
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
case|case
name|PE_PanelButtonCommand
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QBrush
name|fill
decl_stmt|;
name|State
name|flags
init|=
name|option
operator|->
name|state
decl_stmt|;
name|QPalette
name|pal
init|=
name|option
operator|->
name|palette
decl_stmt|;
name|QRect
name|r
init|=
name|option
operator|->
name|rect
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Sunken
operator|)
operator|&&
operator|(
name|flags
operator|&
name|State_On
operator|)
condition|)
name|fill
operator|=
name|QBrush
argument_list|(
name|pal
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
else|else
name|fill
operator|=
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|DefaultButton
operator|&&
name|flags
operator|&
name|State_Sunken
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|pal
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|fill
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|r
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
operator|(
name|State_Raised
operator||
name|State_Sunken
operator||
name|State_On
operator||
name|State_Sunken
operator|)
condition|)
block|{
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
argument_list|(
name|painter
argument_list|,
name|r
argument_list|,
name|pal
argument_list|,
name|flags
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|r
argument_list|,
name|fill
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PE_FrameDefaultButton
case|:
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorSpinPlus
case|:
case|case
name|PE_IndicatorSpinMinus
case|:
block|{
name|QRect
name|r
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|int
name|fw
init|=
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|+
literal|2
decl_stmt|;
name|QRect
name|br
init|=
name|r
operator|.
name|adjusted
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|step
init|=
operator|(
name|br
operator|.
name|width
argument_list|()
operator|+
literal|4
operator|)
operator|/
literal|5
decl_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|br
operator|.
name|x
argument_list|()
operator|+
name|offset
argument_list|,
name|br
operator|.
name|y
argument_list|()
operator|+
name|offset
operator|+
name|br
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
name|step
operator|/
literal|2
argument_list|,
name|br
operator|.
name|width
argument_list|()
argument_list|,
name|step
argument_list|,
name|option
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|==
name|PE_IndicatorSpinPlus
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|br
operator|.
name|x
argument_list|()
operator|+
name|br
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|-
name|step
operator|/
literal|2
operator|+
name|offset
argument_list|,
name|br
operator|.
name|y
argument_list|()
operator|+
name|offset
operator|+
literal|4
argument_list|,
name|step
argument_list|,
name|br
operator|.
name|height
argument_list|()
operator|-
literal|7
argument_list|,
name|option
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorSpinUp
case|:
case|case
name|PE_IndicatorSpinDown
case|:
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QPoint
name|points
index|[
literal|7
index|]
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|PE_IndicatorSpinUp
case|:
name|points
index|[
literal|0
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|4
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|5
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|6
index|]
operator|=
name|QPoint
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_IndicatorSpinDown
case|:
name|points
index|[
literal|0
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|4
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|5
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|6
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|3
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|translate
argument_list|(
name|pixelMetric
argument_list|(
name|PM_ButtonShiftHorizontal
argument_list|)
argument_list|,
name|pixelMetric
argument_list|(
name|PM_ButtonShiftVertical
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
block|{
name|painter
operator|->
name|translate
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|2
index|]
argument_list|,
name|points
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|4
index|]
argument_list|,
name|points
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|points
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|translate
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|2
index|]
argument_list|,
name|points
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|4
index|]
argument_list|,
name|points
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|points
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|mid
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|2
index|]
argument_list|,
name|points
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|4
index|]
argument_list|,
name|points
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|points
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorArrowUp
case|:
case|case
name|PE_IndicatorArrowDown
case|:
case|case
name|PE_IndicatorArrowRight
case|:
case|case
name|PE_IndicatorArrowLeft
case|:
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QPoint
name|points
index|[
literal|9
index|]
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|PE_IndicatorArrowUp
case|:
name|points
index|[
literal|0
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|=
name|QPoint
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|=
name|QPoint
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|4
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|5
index|]
operator|=
name|QPoint
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|6
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|7
index|]
operator|=
name|QPoint
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|8
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowDown
case|:
name|points
index|[
literal|0
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|4
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|=
name|QPoint
argument_list|(
literal|4
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|3
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|=
name|QPoint
argument_list|(
literal|3
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|4
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|5
index|]
operator|=
name|QPoint
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|6
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|7
index|]
operator|=
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|8
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowRight
case|:
name|points
index|[
literal|0
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|3
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|points
index|[
literal|4
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|5
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|6
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|7
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|8
index|]
operator|=
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowLeft
case|:
name|points
index|[
literal|0
index|]
operator|=
name|QPoint
argument_list|(
literal|1
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|=
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|points
index|[
literal|4
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|5
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|6
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|7
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|8
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|translate
argument_list|(
name|pixelMetric
argument_list|(
name|PM_ButtonShiftHorizontal
argument_list|)
argument_list|,
name|pixelMetric
argument_list|(
name|PM_ButtonShiftVertical
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
block|{
name|painter
operator|->
name|translate
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|2
index|]
argument_list|,
name|points
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|4
index|]
argument_list|,
name|points
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|6
index|]
argument_list|,
name|points
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|points
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|translate
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|2
index|]
argument_list|,
name|points
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|4
index|]
argument_list|,
name|points
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|6
index|]
argument_list|,
name|points
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|points
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|mid
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|2
index|]
argument_list|,
name|points
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|4
index|]
argument_list|,
name|points
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|6
index|]
argument_list|,
name|points
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|points
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|PE_FrameWindow
case|:
block|{
name|QPalette
name|popupPal
init|=
name|option
operator|->
name|palette
decl_stmt|;
name|popupPal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|popupPal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEPanel
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|popupPal
argument_list|,
name|option
operator|->
name|state
operator|&
name|State_Sunken
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_Frame
case|:
case|case
name|PE_FrameMenu
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|frame
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QPalette
name|popupPal
init|=
name|frame
operator|->
name|palette
decl_stmt|;
name|QRect
name|r
init|=
name|frame
operator|->
name|rect
decl_stmt|;
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|r
argument_list|,
name|frame
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_FrameStatusBar
case|:
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEPanel
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_FrameTabWidget
case|:
block|{
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|QPalette
name|pal
init|=
name|option
operator|->
name|palette
decl_stmt|;
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|QWindowsStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|drawControl
name|void
name|QWindowsCEStyle
operator|::
name|drawControl
parameter_list|(
name|ControlElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|element
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_MENU
case|case
name|CE_MenuTearoff
case|:
block|{
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Selected
condition|)
block|{
if|if
condition|(
name|pixelMetric
argument_list|(
name|PM_MenuPanelWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|>
literal|1
condition|)
name|qDrawShadePanel
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|qDrawShadePanel
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|DashLine
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|4
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|DashLine
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|4
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CE_MenuBarItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|mbi
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|bool
name|active
init|=
name|mbi
operator|->
name|state
operator|&
name|State_Selected
decl_stmt|;
name|bool
name|hasFocus
init|=
name|mbi
operator|->
name|state
operator|&
name|State_HasFocus
decl_stmt|;
name|bool
name|down
init|=
name|mbi
operator|->
name|state
operator|&
name|State_Sunken
decl_stmt|;
name|QStyleOptionMenuItem
name|newMbi
init|=
operator|*
name|mbi
decl_stmt|;
if|if
condition|(
name|active
operator|||
name|hasFocus
condition|)
block|{
name|QBrush
name|b
init|=
name|mbi
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
decl_stmt|;
if|if
condition|(
name|active
operator|&&
name|down
condition|)
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|mbi
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
name|uint
name|alignment
init|=
name|Qt
operator|::
name|AlignCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|TextDontClip
operator||
name|Qt
operator|::
name|TextSingleLine
decl_stmt|;
if|if
condition|(
operator|!
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|mbi
argument_list|,
name|widget
argument_list|)
condition|)
name|alignment
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QFont
name|f
init|=
name|painter
operator|->
name|font
argument_list|()
decl_stmt|;
name|f
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QPixmap
name|pix
init|=
name|mbi
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|)
argument_list|,
operator|(
name|mbi
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|?
name|QIcon
operator|::
name|Normal
else|:
name|QIcon
operator|::
name|Disabled
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pix
operator|.
name|isNull
argument_list|()
condition|)
name|drawItemPixmap
argument_list|(
name|painter
argument_list|,
name|mbi
operator|->
name|rect
argument_list|,
name|alignment
argument_list|,
name|pix
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|active
operator|&&
name|down
condition|)
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|mbi
operator|->
name|rect
argument_list|,
name|alignment
argument_list|,
name|mbi
operator|->
name|palette
argument_list|,
name|mbi
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|mbi
operator|->
name|text
argument_list|,
name|QPalette
operator|::
name|Light
argument_list|)
expr_stmt|;
else|else
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|mbi
operator|->
name|rect
argument_list|,
name|alignment
argument_list|,
name|mbi
operator|->
name|palette
argument_list|,
name|mbi
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|mbi
operator|->
name|text
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|CE_MenuBarEmptyArea
case|:
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoSystemBackground
argument_list|)
condition|)
block|{
name|painter
operator|->
name|eraseRect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|r
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|-
literal|2
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|r
operator|.
name|x
argument_list|()
operator|-
literal|2
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|r
operator|.
name|x
argument_list|()
operator|-
literal|1
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|,
name|r
operator|.
name|x
argument_list|()
operator|-
literal|2
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
case|case
name|CE_MenuItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|menuitem
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
name|menuitem
operator|->
name|rect
operator|.
name|getRect
argument_list|(
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
name|int
name|tab
init|=
name|menuitem
operator|->
name|tabWidth
decl_stmt|;
name|bool
name|dis
init|=
operator|!
operator|(
name|menuitem
operator|->
name|state
operator|&
name|State_Enabled
operator|)
decl_stmt|;
name|bool
name|checked
init|=
name|menuitem
operator|->
name|checkType
operator|!=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
condition|?
name|menuitem
operator|->
name|checked
else|:
literal|false
decl_stmt|;
name|bool
name|act
init|=
name|menuitem
operator|->
name|state
operator|&
name|State_Selected
decl_stmt|;
comment|// windows always has a check column, regardless whether we have an icon or not
name|int
name|checkcol
init|=
name|qMax
argument_list|(
name|menuitem
operator|->
name|maxIconWidth
argument_list|,
name|windowsCheckMarkWidth
argument_list|)
decl_stmt|;
name|QBrush
name|fill
init|=
name|menuitem
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|act
condition|?
name|QPalette
operator|::
name|Highlight
else|:
name|QPalette
operator|::
name|Button
argument_list|)
decl_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|menuitem
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|Separator
condition|)
block|{
name|int
name|yoff
init|=
name|y
operator|-
literal|1
operator|+
name|h
operator|/
literal|2
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x
operator|+
literal|4
argument_list|,
name|yoff
operator|+
literal|1
argument_list|,
name|x
operator|+
name|w
operator|-
literal|8
argument_list|,
name|yoff
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|QRect
name|vCheckRect
init|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|checkcol
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|checked
condition|)
block|{
if|if
condition|(
name|act
operator|&&
operator|!
name|dis
condition|)
block|{
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|vCheckRect
argument_list|,
name|menuitem
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|menuitem
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QBrush
name|fill
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
decl_stmt|;
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|vCheckRect
argument_list|,
name|menuitem
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|act
condition|)
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|vCheckRect
argument_list|,
name|menuitem
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// On Windows Style, if we have a checkable item and an icon we
comment|// draw the icon recessed to indicate an item is checked. If we
comment|// have no icon, we draw a checkmark instead.
if|if
condition|(
operator|!
name|menuitem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|dis
condition|?
name|QIcon
operator|::
name|Disabled
else|:
name|QIcon
operator|::
name|Normal
decl_stmt|;
if|if
condition|(
name|act
operator|&&
operator|!
name|dis
condition|)
name|mode
operator|=
name|QIcon
operator|::
name|Active
expr_stmt|;
name|QPixmap
name|pixmap
decl_stmt|;
if|if
condition|(
name|checked
condition|)
name|pixmap
operator|=
name|menuitem
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|)
argument_list|,
name|mode
argument_list|,
name|QIcon
operator|::
name|On
argument_list|)
expr_stmt|;
else|else
name|pixmap
operator|=
name|menuitem
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|)
argument_list|,
name|mode
argument_list|)
expr_stmt|;
specifier|const
name|int
name|pixw
init|=
name|pixmap
operator|.
name|width
argument_list|()
operator|/
name|pixmap
operator|.
name|devicePixelRatio
argument_list|()
decl_stmt|;
specifier|const
name|int
name|pixh
init|=
name|pixmap
operator|.
name|height
argument_list|()
operator|/
name|pixmap
operator|.
name|devicePixelRatio
argument_list|()
decl_stmt|;
if|if
condition|(
name|act
operator|&&
operator|!
name|dis
operator|&&
operator|!
name|checked
condition|)
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|vCheckRect
argument_list|,
name|menuitem
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|menuitem
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|QRect
name|pmr
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pixw
argument_list|,
name|pixh
argument_list|)
decl_stmt|;
name|pmr
operator|.
name|moveCenter
argument_list|(
name|vCheckRect
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|pmr
operator|.
name|topLeft
argument_list|()
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|checked
condition|)
block|{
name|QStyleOptionMenuItem
name|newMi
init|=
operator|*
name|menuitem
decl_stmt|;
name|newMi
operator|.
name|state
operator|=
name|State_None
expr_stmt|;
if|if
condition|(
operator|!
name|dis
condition|)
name|newMi
operator|.
name|state
operator||=
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|act
condition|)
name|newMi
operator|.
name|state
operator||=
name|State_On
expr_stmt|;
name|newMi
operator|.
name|rect
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|windowsItemFrame
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|windowsItemFrame
argument_list|,
name|checkcol
operator|-
literal|2
operator|*
name|windowsItemFrame
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|windowsItemFrame
argument_list|)
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_IndicatorMenuCheckMark
argument_list|,
operator|&
name|newMi
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setPen
argument_list|(
name|act
condition|?
name|menuitem
operator|->
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
else|:
name|menuitem
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QColor
name|discol
decl_stmt|;
if|if
condition|(
name|dis
condition|)
block|{
name|discol
operator|=
name|menuitem
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|discol
argument_list|)
expr_stmt|;
block|}
name|int
name|xm
init|=
name|windowsItemFrame
operator|+
name|checkcol
operator|+
name|windowsItemHMargin
decl_stmt|;
name|int
name|xpos
init|=
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|xm
decl_stmt|;
name|QRect
name|textRect
argument_list|(
name|xpos
argument_list|,
name|y
operator|+
name|windowsItemVMargin
argument_list|,
name|w
operator|-
name|xm
operator|-
name|windowsRightBorder
operator|-
name|tab
operator|+
literal|1
argument_list|,
name|h
operator|-
literal|2
operator|*
name|windowsItemVMargin
argument_list|)
decl_stmt|;
name|QRect
name|vTextRect
init|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|textRect
argument_list|)
decl_stmt|;
name|QString
name|s
init|=
name|menuitem
operator|->
name|text
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// draw text
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|int
name|t
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|text_flags
init|=
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|TextDontClip
operator||
name|Qt
operator|::
name|TextSingleLine
decl_stmt|;
if|if
condition|(
operator|!
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|menuitem
argument_list|,
name|widget
argument_list|)
condition|)
name|text_flags
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
name|text_flags
operator||=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
if|if
condition|(
name|t
operator|>=
literal|0
condition|)
block|{
name|QRect
name|vShortcutRect
init|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|textRect
operator|.
name|topRight
argument_list|()
argument_list|,
name|QPoint
argument_list|(
name|menuitem
operator|->
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|textRect
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dis
operator|&&
operator|!
name|act
condition|)
name|painter
operator|->
name|setPen
argument_list|(
name|discol
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawText
argument_list|(
name|vShortcutRect
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|mid
argument_list|(
name|t
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|QFont
name|font
init|=
name|menuitem
operator|->
name|font
decl_stmt|;
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|DefaultItem
condition|)
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
name|dis
operator|&&
operator|!
name|act
condition|)
name|painter
operator|->
name|setPen
argument_list|(
name|discol
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawText
argument_list|(
name|vTextRect
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|SubMenu
condition|)
block|{
comment|// draw sub menu arrow
name|int
name|dim
init|=
operator|(
name|h
operator|-
literal|2
operator|*
name|windowsItemFrame
operator|)
operator|/
literal|2
decl_stmt|;
name|PrimitiveElement
name|arrow
decl_stmt|;
name|arrow
operator|=
operator|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
condition|?
name|PE_IndicatorSpinDown
else|:
name|PE_IndicatorSpinUp
expr_stmt|;
name|xpos
operator|=
name|x
operator|+
name|w
operator|-
name|windowsArrowHMargin
operator|-
name|windowsItemFrame
operator|-
name|dim
expr_stmt|;
name|QRect
name|vSubMenuRect
init|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|xpos
argument_list|,
name|y
operator|+
name|h
operator|/
literal|2
operator|-
name|dim
operator|/
literal|2
argument_list|,
name|dim
argument_list|,
name|dim
argument_list|)
argument_list|)
decl_stmt|;
name|QStyleOptionMenuItem
name|newMI
init|=
operator|*
name|menuitem
decl_stmt|;
name|newMI
operator|.
name|rect
operator|=
name|vSubMenuRect
expr_stmt|;
name|newMI
operator|.
name|state
operator|=
name|dis
condition|?
name|State_None
else|:
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|act
condition|)
name|newMI
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|newMI
operator|.
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|arrow
argument_list|,
operator|&
name|newMI
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_MENU
case|case
name|CE_MenuVMargin
case|:
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
break|break;
case|case
name|CE_MenuEmptyArea
case|:
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|CE_TabBarTab
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|drawControl
argument_list|(
name|CE_TabBarTabShape
argument_list|,
name|tab
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|drawControl
argument_list|(
name|CE_TabBarTabLabel
argument_list|,
name|tab
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CE_TabBarTabShape
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|bool
name|rtlHorTabs
init|=
operator|(
name|tab
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|&&
operator|(
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedNorth
operator|||
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedSouth
operator|)
operator|)
decl_stmt|;
name|bool
name|selected
init|=
name|tab
operator|->
name|state
operator|&
name|State_Selected
decl_stmt|;
name|bool
name|lastTab
init|=
operator|(
operator|(
operator|!
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|End
operator|)
operator|||
operator|(
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|Beginning
operator|)
operator|)
decl_stmt|;
name|bool
name|firstTab
init|=
operator|(
operator|(
operator|!
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|Beginning
operator|)
operator|||
operator|(
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|End
operator|)
operator|)
decl_stmt|;
name|bool
name|onlyOne
init|=
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|OnlyOneTab
decl_stmt|;
name|bool
name|previousSelected
init|=
operator|(
operator|(
operator|!
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|selectedPosition
operator|==
name|QStyleOptionTab
operator|::
name|PreviousIsSelected
operator|)
operator|||
operator|(
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|selectedPosition
operator|==
name|QStyleOptionTab
operator|::
name|NextIsSelected
operator|)
operator|)
decl_stmt|;
name|bool
name|nextSelected
init|=
operator|(
operator|(
operator|!
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|selectedPosition
operator|==
name|QStyleOptionTab
operator|::
name|NextIsSelected
operator|)
operator|||
operator|(
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|selectedPosition
operator|==
name|QStyleOptionTab
operator|::
name|PreviousIsSelected
operator|)
operator|)
decl_stmt|;
name|int
name|tabBarAlignment
init|=
name|styleHint
argument_list|(
name|SH_TabBar_Alignment
argument_list|,
name|tab
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|bool
name|leftAligned
init|=
operator|(
operator|!
name|rtlHorTabs
operator|&&
name|tabBarAlignment
operator|==
name|Qt
operator|::
name|AlignLeft
operator|)
operator|||
operator|(
name|rtlHorTabs
operator|&&
name|tabBarAlignment
operator|==
name|Qt
operator|::
name|AlignRight
operator|)
decl_stmt|;
name|bool
name|rightAligned
init|=
operator|(
operator|!
name|rtlHorTabs
operator|&&
name|tabBarAlignment
operator|==
name|Qt
operator|::
name|AlignRight
operator|)
operator|||
operator|(
name|rtlHorTabs
operator|&&
name|tabBarAlignment
operator|==
name|Qt
operator|::
name|AlignLeft
operator|)
decl_stmt|;
name|QColor
name|light
init|=
name|tab
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|QColor
name|midlight
init|=
name|tab
operator|->
name|palette
operator|.
name|midlight
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|QColor
name|dark
init|=
name|tab
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|QColor
name|shadow
init|=
name|tab
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|QColor
name|background
init|=
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|int
name|borderThinkness
init|=
name|pixelMetric
argument_list|(
name|PM_TabBarBaseOverlap
argument_list|,
name|tab
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|selected
condition|)
name|borderThinkness
operator|/=
literal|2
expr_stmt|;
name|QRect
name|r2
argument_list|(
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|int
name|x1
init|=
name|r2
operator|.
name|left
argument_list|()
decl_stmt|;
name|int
name|x2
init|=
name|r2
operator|.
name|right
argument_list|()
decl_stmt|;
name|int
name|y1
init|=
name|r2
operator|.
name|top
argument_list|()
decl_stmt|;
name|int
name|y2
init|=
name|r2
operator|.
name|bottom
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|tab
operator|->
name|shape
condition|)
block|{
default|default:
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|tab
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
block|{
if|if
condition|(
operator|!
name|selected
condition|)
block|{
name|y1
operator|+=
literal|2
expr_stmt|;
name|x1
operator|+=
name|firstTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
name|x2
operator|-=
name|lastTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
block|}
name|painter
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
operator|(
name|x2
operator|-
name|x1
operator|)
operator|-
literal|1
argument_list|,
operator|(
name|y2
operator|-
name|y1
operator|)
operator|-
literal|2
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete border
if|if
condition|(
name|selected
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|background
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|x2
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
operator|+
literal|1
argument_list|,
name|x2
argument_list|,
name|y2
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
comment|// Left
if|if
condition|(
name|firstTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|previousSelected
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
name|x1
argument_list|,
name|y2
operator|-
operator|(
operator|(
name|onlyOne
operator|||
name|firstTab
operator|)
operator|&&
name|selected
operator|&&
name|leftAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|midlight
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
operator|(
operator|(
name|onlyOne
operator|||
name|firstTab
operator|)
operator|&&
name|selected
operator|&&
name|leftAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Top
block|{
name|int
name|beg
init|=
name|x1
operator|+
operator|(
name|previousSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|int
name|end
init|=
name|x2
operator|-
operator|(
name|nextSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|beg
argument_list|,
name|y1
argument_list|,
name|end
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|midlight
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|beg
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|end
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Right
if|if
condition|(
name|lastTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|nextSelected
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
name|x2
argument_list|,
name|y2
operator|-
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y2
operator|-
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
block|{
if|if
condition|(
operator|!
name|selected
condition|)
block|{
name|y2
operator|-=
literal|2
expr_stmt|;
name|x1
operator|+=
name|firstTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
name|x2
operator|-=
name|lastTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
block|}
name|painter
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
operator|(
name|x2
operator|-
name|x1
operator|)
operator|-
literal|1
argument_list|,
operator|(
name|y2
operator|-
name|y1
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete border
if|if
condition|(
name|selected
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|background
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
operator|-
literal|1
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y1
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y1
argument_list|)
expr_stmt|;
block|}
comment|// Left
if|if
condition|(
name|firstTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|previousSelected
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
operator|-
literal|2
argument_list|,
name|x1
argument_list|,
name|y1
operator|+
operator|(
operator|(
name|onlyOne
operator|||
name|firstTab
operator|)
operator|&&
name|selected
operator|&&
name|leftAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|midlight
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
literal|2
argument_list|,
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
operator|(
operator|(
name|onlyOne
operator|||
name|firstTab
operator|)
operator|&&
name|selected
operator|&&
name|leftAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Bottom
block|{
name|int
name|beg
init|=
name|x1
operator|+
operator|(
name|previousSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|int
name|end
init|=
name|x2
operator|-
operator|(
name|nextSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|beg
argument_list|,
name|y2
argument_list|,
name|end
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|beg
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|end
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Right
if|if
condition|(
name|lastTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|nextSelected
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y2
operator|-
literal|2
argument_list|,
name|x2
argument_list|,
name|y1
operator|+
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y2
operator|-
literal|2
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y1
operator|+
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
block|{
if|if
condition|(
operator|!
name|selected
condition|)
block|{
name|x1
operator|+=
literal|2
expr_stmt|;
name|y1
operator|+=
name|firstTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
name|y2
operator|-=
name|lastTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
block|}
name|painter
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
operator|(
name|x2
operator|-
name|x1
operator|)
operator|-
literal|2
argument_list|,
operator|(
name|y2
operator|-
name|y1
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete border
if|if
condition|(
name|selected
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|background
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
comment|// Top
if|if
condition|(
name|firstTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|previousSelected
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|2
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
operator|(
operator|(
name|onlyOne
operator|||
name|firstTab
operator|)
operator|&&
name|selected
operator|&&
name|leftAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|midlight
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|2
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x2
operator|-
operator|(
operator|(
name|onlyOne
operator|||
name|firstTab
operator|)
operator|&&
name|selected
operator|&&
name|leftAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Left
block|{
name|int
name|beg
init|=
name|y1
operator|+
operator|(
name|previousSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|int
name|end
init|=
name|y2
operator|-
operator|(
name|nextSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|beg
argument_list|,
name|x1
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|midlight
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|beg
argument_list|,
name|x1
operator|+
literal|1
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
comment|// Bottom
if|if
condition|(
name|lastTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|nextSelected
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|3
argument_list|,
name|y2
argument_list|,
name|x2
operator|-
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|x1
operator|+
literal|2
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|3
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|x2
operator|-
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|x1
operator|+
literal|2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
block|{
if|if
condition|(
operator|!
name|selected
condition|)
block|{
name|x2
operator|-=
literal|2
expr_stmt|;
name|y1
operator|+=
name|firstTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
name|y2
operator|-=
name|lastTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
block|}
name|painter
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x1
operator|+
literal|2
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
operator|(
name|x2
operator|-
name|x1
operator|)
operator|-
literal|1
argument_list|,
operator|(
name|y2
operator|-
name|y1
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete border
if|if
condition|(
name|selected
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|background
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
argument_list|,
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Top
if|if
condition|(
name|firstTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|previousSelected
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|2
argument_list|,
name|y1
argument_list|,
name|x1
operator|+
operator|(
operator|(
name|onlyOne
operator|||
name|firstTab
operator|)
operator|&&
name|selected
operator|&&
name|leftAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|midlight
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|3
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x1
operator|+
operator|(
operator|(
name|onlyOne
operator|||
name|firstTab
operator|)
operator|&&
name|selected
operator|&&
name|leftAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y1
argument_list|)
expr_stmt|;
block|}
comment|// Right
block|{
name|int
name|beg
init|=
name|y1
operator|+
operator|(
name|previousSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|int
name|end
init|=
name|y2
operator|-
operator|(
name|nextSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|beg
argument_list|,
name|x2
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|beg
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
comment|// Bottom
if|if
condition|(
name|lastTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|nextSelected
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|2
argument_list|,
name|y2
argument_list|,
name|x1
operator|+
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|2
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|x1
operator|+
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_TABBAR
case|case
name|CE_ToolBar
case|:
block|{
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topRight
argument_list|()
operator|.
name|x
argument_list|()
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
operator|.
name|x
argument_list|()
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|bottomLeft
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomLeft
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topRight
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
case|case
name|CE_ScrollBarSubLine
case|:
case|case
name|CE_ScrollBarAddLine
case|:
block|{
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
block|{
name|QStyleOption
name|buttonOpt
init|=
operator|*
name|option
decl_stmt|;
name|drawPrimitive
argument_list|(
name|PE_PanelButtonBevel
argument_list|,
operator|&
name|buttonOpt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStyleOption
name|buttonOpt
init|=
operator|*
name|option
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|buttonOpt
operator|.
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|buttonOpt
operator|.
name|state
operator||=
name|State_Raised
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_PanelButtonBevel
argument_list|,
operator|&
name|buttonOpt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|PrimitiveElement
name|arrow
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
if|if
condition|(
name|element
operator|==
name|CE_ScrollBarAddLine
condition|)
name|arrow
operator|=
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
name|PE_IndicatorArrowRight
else|:
name|PE_IndicatorArrowLeft
expr_stmt|;
else|else
name|arrow
operator|=
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
name|PE_IndicatorArrowLeft
else|:
name|PE_IndicatorArrowRight
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|element
operator|==
name|CE_ScrollBarAddLine
condition|)
name|arrow
operator|=
name|PE_IndicatorArrowDown
expr_stmt|;
else|else
name|arrow
operator|=
name|PE_IndicatorArrowUp
expr_stmt|;
block|}
name|drawPrimitive
argument_list|(
name|arrow
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CE_ScrollBarAddPage
case|:
case|case
name|CE_ScrollBarSubPage
case|:
block|{
name|QBrush
name|br
decl_stmt|;
name|QBrush
name|bg
init|=
name|painter
operator|->
name|background
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|BGMode
name|bg_mode
init|=
name|painter
operator|->
name|backgroundMode
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBackgroundMode
argument_list|(
name|Qt
operator|::
name|OpaqueMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
block|{
name|br
operator|=
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBackground
argument_list|(
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|br
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPixmap
name|pm
init|=
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|)
operator|.
name|texture
argument_list|()
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|br
operator|=
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|?
name|QBrush
argument_list|(
name|pm
argument_list|)
else|:
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
else|else
name|br
operator|=
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|?
name|QBrush
argument_list|(
name|pm
argument_list|)
else|:
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBackground
argument_list|(
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|br
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBackground
argument_list|(
name|bg
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBackgroundMode
argument_list|(
name|bg_mode
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CE_ScrollBarSlider
case|:
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
block|{
name|QStyleOptionButton
name|buttonOpt
decl_stmt|;
name|buttonOpt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|option
argument_list|)
expr_stmt|;
name|buttonOpt
operator|.
name|state
operator|=
name|State_Enabled
operator||
name|State_Raised
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_PanelButtonBevel
argument_list|,
operator|&
name|buttonOpt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QPixmap
name|pm
init|=
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|)
operator|.
name|texture
argument_list|()
decl_stmt|;
name|QBrush
name|br
init|=
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|?
name|QBrush
argument_list|(
name|pm
argument_list|)
else|:
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|br
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBackgroundMode
argument_list|(
name|Qt
operator|::
name|OpaqueMode
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStyleOptionButton
name|buttonOpt
decl_stmt|;
name|buttonOpt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|option
argument_list|)
expr_stmt|;
name|buttonOpt
operator|.
name|state
operator|=
name|State_Enabled
operator||
name|State_Raised
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_PanelButtonBevel
argument_list|,
operator|&
name|buttonOpt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SCROLLBAR
case|case
name|CE_HeaderSection
case|:
block|{
name|QBrush
name|fill
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_On
condition|)
name|fill
operator|=
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
else|else
name|fill
operator|=
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Raised
operator||
name|State_Sunken
operator|)
condition|)
block|{
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
argument_list|,
name|option
operator|->
name|state
operator|&
name|State_Sunken
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|CE_DockWidgetTitle
case|:
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|CE_PushButtonLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QFont
name|f
init|=
name|painter
operator|->
name|font
argument_list|()
decl_stmt|;
name|f
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QRect
name|ir
init|=
name|btn
operator|->
name|rect
decl_stmt|;
name|uint
name|tf
init|=
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
decl_stmt|;
if|if
condition|(
operator|!
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
condition|)
name|tf
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
if|if
condition|(
name|btn
operator|->
name|state
operator|&
operator|(
name|State_On
operator||
name|State_Sunken
operator|)
condition|)
name|ir
operator|.
name|translate
argument_list|(
name|pixelMetric
argument_list|(
name|PM_ButtonShiftHorizontal
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
name|pixelMetric
argument_list|(
name|PM_ButtonShiftVertical
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|btn
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|btn
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|QIcon
operator|::
name|Normal
else|:
name|QIcon
operator|::
name|Disabled
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|QIcon
operator|::
name|Normal
operator|&&
name|btn
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|mode
operator|=
name|QIcon
operator|::
name|Active
expr_stmt|;
name|QIcon
operator|::
name|State
name|state
init|=
name|QIcon
operator|::
name|Off
decl_stmt|;
if|if
condition|(
name|btn
operator|->
name|state
operator|&
name|State_On
condition|)
name|state
operator|=
name|QIcon
operator|::
name|On
expr_stmt|;
name|QPixmap
name|pixmap
init|=
name|btn
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|btn
operator|->
name|iconSize
argument_list|,
name|mode
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|int
name|pixw
init|=
name|pixmap
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|pixh
init|=
name|pixmap
operator|.
name|height
argument_list|()
decl_stmt|;
comment|//Center the icon if there is no text
name|QPoint
name|point
decl_stmt|;
if|if
condition|(
name|btn
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|point
operator|=
name|QPoint
argument_list|(
name|ir
operator|.
name|x
argument_list|()
operator|+
name|ir
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|-
name|pixw
operator|/
literal|2
argument_list|,
name|ir
operator|.
name|y
argument_list|()
operator|+
name|ir
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
name|pixh
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|point
operator|=
name|QPoint
argument_list|(
name|ir
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|,
name|ir
operator|.
name|y
argument_list|()
operator|+
name|ir
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
name|pixh
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|btn
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|point
operator|.
name|rx
argument_list|()
operator|+=
name|pixw
expr_stmt|;
if|if
condition|(
operator|(
name|btn
operator|->
name|state
operator|&
operator|(
name|State_On
operator||
name|State_Sunken
operator|)
operator|)
operator|&&
name|btn
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|point
operator|.
name|rx
argument_list|()
operator|-=
name|pixelMetric
argument_list|(
name|PM_ButtonShiftHorizontal
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|*
literal|2
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|visualPos
argument_list|(
name|btn
operator|->
name|direction
argument_list|,
name|btn
operator|->
name|rect
argument_list|,
name|point
argument_list|)
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|btn
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|ir
operator|.
name|translate
argument_list|(
operator|-
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|ir
operator|.
name|translate
argument_list|(
name|pixw
operator|+
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ir
operator|.
name|setWidth
argument_list|(
name|ir
operator|.
name|width
argument_list|()
operator|-
operator|(
name|pixw
operator|+
literal|4
operator|)
argument_list|)
expr_stmt|;
comment|// left-align text if there is
if|if
condition|(
operator|!
name|btn
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|tf
operator||=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
block|}
else|else
block|{
name|tf
operator||=
name|Qt
operator|::
name|AlignHCenter
expr_stmt|;
block|}
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|ir
argument_list|,
name|tf
argument_list|,
name|btn
operator|->
name|palette
argument_list|,
operator|(
name|btn
operator|->
name|state
operator|&
name|State_Enabled
operator|)
argument_list|,
name|btn
operator|->
name|text
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|drawComplexControl
name|void
name|QWindowsCEStyle
operator|::
name|drawComplexControl
parameter_list|(
name|ComplexControl
name|control
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|control
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|CC_Slider
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|thickness
init|=
name|pixelMetric
argument_list|(
name|PM_SliderControlThickness
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|ticks
init|=
name|slider
operator|->
name|tickPosition
decl_stmt|;
name|QRect
name|groove
init|=
name|subControlRect
argument_list|(
name|CC_Slider
argument_list|,
name|slider
argument_list|,
name|SC_SliderGroove
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|handle
init|=
name|subControlRect
argument_list|(
name|CC_Slider
argument_list|,
name|slider
argument_list|,
name|SC_SliderHandle
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|slider
operator|->
name|subControls
operator|&
name|SC_SliderGroove
operator|)
operator|&&
name|groove
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|mid
init|=
name|thickness
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksAbove
condition|)
name|mid
operator|+=
name|len
operator|/
literal|8
expr_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksBelow
condition|)
name|mid
operator|-=
name|len
operator|/
literal|8
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|slider
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEPanel
argument_list|(
name|painter
argument_list|,
name|groove
operator|.
name|x
argument_list|()
argument_list|,
name|groove
operator|.
name|y
argument_list|()
operator|+
name|mid
operator|-
literal|2
argument_list|,
name|groove
operator|.
name|width
argument_list|()
argument_list|,
literal|4
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|groove
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|groove
operator|.
name|y
argument_list|()
operator|+
name|mid
operator|-
literal|1
argument_list|,
name|groove
operator|.
name|x
argument_list|()
operator|+
name|groove
operator|.
name|width
argument_list|()
operator|-
literal|3
argument_list|,
name|groove
operator|.
name|y
argument_list|()
operator|+
name|mid
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEPanel
argument_list|(
name|painter
argument_list|,
name|groove
operator|.
name|x
argument_list|()
operator|+
name|mid
operator|-
literal|2
argument_list|,
name|groove
operator|.
name|y
argument_list|()
argument_list|,
literal|4
argument_list|,
name|groove
operator|.
name|height
argument_list|()
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|groove
operator|.
name|x
argument_list|()
operator|+
name|mid
operator|-
literal|1
argument_list|,
name|groove
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|groove
operator|.
name|x
argument_list|()
operator|+
name|mid
operator|-
literal|1
argument_list|,
name|groove
operator|.
name|y
argument_list|()
operator|+
name|groove
operator|.
name|height
argument_list|()
operator|-
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|slider
operator|->
name|subControls
operator|&
name|SC_SliderTickmarks
condition|)
block|{
name|QStyleOptionSlider
name|tmpSlider
init|=
operator|*
name|slider
decl_stmt|;
name|tmpSlider
operator|.
name|subControls
operator|=
name|SC_SliderTickmarks
expr_stmt|;
name|QCommonStyle
operator|::
name|drawComplexControl
argument_list|(
name|control
argument_list|,
operator|&
name|tmpSlider
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|slider
operator|->
name|subControls
operator|&
name|SC_SliderHandle
condition|)
block|{
comment|// 4444440
comment|// 4333310
comment|// 4322210
comment|// 4322210
comment|// 4322210
comment|// 4322210
comment|// *43210*
comment|// **440**
comment|// ***0***
specifier|const
name|QColor
name|c0
init|=
name|slider
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
specifier|const
name|QColor
name|c1
init|=
name|slider
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
comment|// const QColor c2 = g.button();
specifier|const
name|QColor
name|c3
init|=
name|slider
operator|->
name|palette
operator|.
name|midlight
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
specifier|const
name|QColor
name|c4
init|=
name|slider
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|QBrush
name|handleBrush
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Enabled
condition|)
block|{
name|handleBrush
operator|=
name|slider
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleBrush
operator|=
name|QBrush
argument_list|(
name|slider
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
block|}
name|int
name|x
init|=
name|handle
operator|.
name|x
argument_list|()
decl_stmt|,
name|y
init|=
name|handle
operator|.
name|y
argument_list|()
decl_stmt|,
name|wi
init|=
name|handle
operator|.
name|width
argument_list|()
decl_stmt|,
name|he
init|=
name|handle
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|x1
init|=
name|x
decl_stmt|;
name|int
name|x2
init|=
name|x
operator|+
name|wi
operator|-
literal|1
decl_stmt|;
name|int
name|y1
init|=
name|y
decl_stmt|;
name|int
name|y2
init|=
name|y
operator|+
name|he
operator|-
literal|1
decl_stmt|;
name|Qt
operator|::
name|Orientation
name|orient
init|=
name|slider
operator|->
name|orientation
decl_stmt|;
name|bool
name|tickAbove
init|=
name|slider
operator|->
name|tickPosition
operator|==
name|QSlider
operator|::
name|TicksAbove
decl_stmt|;
name|bool
name|tickBelow
init|=
name|slider
operator|->
name|tickPosition
operator|==
name|QSlider
operator|::
name|TicksBelow
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|slider
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|SE_SliderFocusRect
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fropt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|tickAbove
operator|&&
name|tickBelow
operator|)
operator|||
operator|(
operator|!
name|tickAbove
operator|&&
operator|!
name|tickBelow
operator|)
condition|)
block|{
name|Qt
operator|::
name|BGMode
name|oldMode
init|=
name|painter
operator|->
name|backgroundMode
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setBackgroundMode
argument_list|(
name|Qt
operator|::
name|OpaqueMode
argument_list|)
expr_stmt|;
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
argument_list|(
name|painter
argument_list|,
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|wi
argument_list|,
name|he
argument_list|)
argument_list|,
name|slider
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
operator|&
name|handleBrush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBackgroundMode
argument_list|(
name|oldMode
argument_list|)
expr_stmt|;
name|QBrush
name|fill
init|=
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|QRectF
argument_list|(
name|x1
operator|+
literal|2
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
name|x2
operator|-
name|x1
operator|-
literal|3
argument_list|,
name|y2
operator|-
name|y1
operator|-
literal|3
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
return|return;
block|}
name|QSliderDirection
name|dir
decl_stmt|;
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
if|if
condition|(
name|tickAbove
condition|)
name|dir
operator|=
name|SlUp
expr_stmt|;
else|else
name|dir
operator|=
name|SlDown
expr_stmt|;
elseif|else
if|if
condition|(
name|tickAbove
condition|)
name|dir
operator|=
name|SlLeft
expr_stmt|;
else|else
name|dir
operator|=
name|SlRight
expr_stmt|;
name|QPolygon
name|a
decl_stmt|;
name|int
name|d
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|dir
condition|)
block|{
case|case
name|SlUp
case|:
name|x2
operator|++
expr_stmt|;
name|y1
operator|=
name|y1
operator|+
name|wi
operator|/
literal|2
expr_stmt|;
name|d
operator|=
operator|(
name|wi
operator|+
literal|1
operator|)
operator|/
literal|2
operator|-
literal|1
expr_stmt|;
name|a
operator|.
name|setPoints
argument_list|(
literal|5
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|,
name|x1
operator|+
name|d
argument_list|,
name|y1
operator|-
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|SlDown
case|:
name|x2
operator|++
expr_stmt|;
name|y2
operator|=
name|y2
operator|-
name|wi
operator|/
literal|2
expr_stmt|;
name|d
operator|=
operator|(
name|wi
operator|+
literal|1
operator|)
operator|/
literal|2
operator|-
literal|1
expr_stmt|;
name|a
operator|.
name|setPoints
argument_list|(
literal|5
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|x1
operator|+
name|d
argument_list|,
name|y2
operator|+
name|d
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
break|break;
case|case
name|SlLeft
case|:
name|d
operator|=
operator|(
name|he
operator|+
literal|1
operator|)
operator|/
literal|2
operator|-
literal|1
expr_stmt|;
name|x1
operator|=
name|x1
operator|+
name|he
operator|/
literal|2
expr_stmt|;
name|a
operator|.
name|setPoints
argument_list|(
literal|5
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
operator|-
name|d
argument_list|,
name|y1
operator|+
name|d
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|y1
operator|--
expr_stmt|;
break|break;
case|case
name|SlRight
case|:
name|d
operator|=
operator|(
name|he
operator|+
literal|1
operator|)
operator|/
literal|2
operator|-
literal|1
expr_stmt|;
name|x2
operator|=
name|x2
operator|-
name|he
operator|/
literal|2
expr_stmt|;
name|a
operator|.
name|setPoints
argument_list|(
literal|5
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
operator|+
name|d
argument_list|,
name|y1
operator|+
name|d
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|y1
operator|--
expr_stmt|;
break|break;
block|}
name|QBrush
name|oldBrush
init|=
name|painter
operator|->
name|brush
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|handleBrush
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|BGMode
name|oldMode
init|=
name|painter
operator|->
name|backgroundMode
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setBackgroundMode
argument_list|(
name|Qt
operator|::
name|OpaqueMode
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPolygon
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|QBrush
name|fill
init|=
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|QRectF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
name|y1
operator|+
literal|1
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|oldBrush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBackgroundMode
argument_list|(
name|oldMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|!=
name|SlUp
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x2
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
name|SlLeft
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x1
operator|+
literal|1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
name|SlRight
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
name|SlDown
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|dir
condition|)
block|{
case|case
name|SlUp
case|:
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|QRectF
argument_list|(
name|x1
operator|+
literal|3
argument_list|,
name|y1
operator|-
name|d
operator|+
literal|2
argument_list|,
name|x2
operator|-
name|x1
operator|-
literal|4
argument_list|,
name|y1
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
operator|+
name|d
argument_list|,
name|y1
operator|-
name|d
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|d
operator|=
name|wi
operator|-
name|d
operator|-
literal|1
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|d
argument_list|,
name|y1
operator|-
name|d
argument_list|)
expr_stmt|;
name|d
operator|--
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
argument_list|,
name|x1
operator|+
literal|1
operator|+
name|d
operator|-
literal|1
argument_list|,
name|y1
operator|-
name|d
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
literal|1
operator|-
name|d
argument_list|,
name|y1
operator|-
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|SlDown
case|:
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|QRectF
argument_list|(
name|x1
operator|+
literal|3
argument_list|,
name|y2
operator|-
name|d
argument_list|,
name|x2
operator|-
name|x1
operator|-
literal|4
argument_list|,
name|y2
operator|-
literal|8
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|,
name|x1
operator|+
name|d
argument_list|,
name|y2
operator|+
name|d
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|d
operator|=
name|wi
operator|-
name|d
operator|-
literal|1
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
operator|-
name|d
argument_list|,
name|y2
operator|+
name|d
argument_list|)
expr_stmt|;
name|d
operator|--
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y2
argument_list|,
name|x1
operator|+
literal|1
operator|+
name|d
operator|-
literal|1
argument_list|,
name|y2
operator|+
name|d
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y2
argument_list|,
name|x2
operator|-
literal|1
operator|-
name|d
argument_list|,
name|y2
operator|+
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|SlLeft
case|:
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|QRectF
argument_list|(
name|x1
operator|-
name|d
operator|+
literal|2
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
name|x1
argument_list|,
name|y2
operator|-
name|y1
operator|-
literal|3
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
operator|-
name|d
argument_list|,
name|y1
operator|+
name|d
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|d
operator|=
name|he
operator|-
name|d
operator|-
literal|1
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|,
name|x1
operator|-
name|d
argument_list|,
name|y2
operator|-
name|d
argument_list|)
expr_stmt|;
name|d
operator|--
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x1
operator|-
name|d
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|1
operator|+
name|d
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|x1
operator|-
name|d
argument_list|,
name|y2
operator|-
literal|1
operator|-
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|SlRight
case|:
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|QRectF
argument_list|(
name|x2
operator|-
name|d
operator|-
literal|4
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
name|x2
operator|-
literal|4
argument_list|,
name|y2
operator|-
name|y1
operator|-
literal|3
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y1
argument_list|,
name|x2
operator|+
name|d
argument_list|,
name|y1
operator|+
name|d
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|d
operator|=
name|he
operator|-
name|d
operator|-
literal|1
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
operator|+
name|d
argument_list|,
name|y2
operator|-
name|d
argument_list|)
expr_stmt|;
name|d
operator|--
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x2
operator|+
name|d
operator|-
literal|1
argument_list|,
name|y1
operator|+
literal|1
operator|+
name|d
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|x2
operator|+
name|d
argument_list|,
name|y2
operator|-
literal|1
operator|-
name|d
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SLIDER
case|case
name|CC_ToolButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|toolbutton
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|button
decl_stmt|,
name|menuarea
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
name|bool
name|flat
init|=
operator|!
operator|(
name|widget
condition|?
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
else|:
literal|0
operator|)
decl_stmt|;
else|#
directive|else
name|bool
name|flat
init|=
literal|true
decl_stmt|;
endif|#
directive|endif
name|button
operator|=
name|subControlRect
argument_list|(
name|control
argument_list|,
name|toolbutton
argument_list|,
name|SC_ToolButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|menuarea
operator|=
name|subControlRect
argument_list|(
name|control
argument_list|,
name|toolbutton
argument_list|,
name|SC_ToolButtonMenu
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|flat
operator|&&
operator|(
name|toolbutton
operator|->
name|subControls
operator|&
name|SC_ToolButtonMenu
operator|)
condition|)
block|{
name|menuarea
operator|.
name|setLeft
argument_list|(
name|menuarea
operator|.
name|left
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
name|button
operator|.
name|setRight
argument_list|(
name|button
operator|.
name|right
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
name|State
name|bflags
init|=
name|toolbutton
operator|->
name|state
decl_stmt|;
if|if
condition|(
name|bflags
operator|&
name|State_AutoRaise
condition|)
if|if
condition|(
operator|!
operator|(
name|bflags
operator|&
name|State_MouseOver
operator|)
condition|)
block|{
name|bflags
operator|&=
operator|~
name|State_Raised
expr_stmt|;
block|}
name|State
name|mflags
init|=
name|bflags
decl_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|activeSubControls
operator|&
name|SC_ToolButton
condition|)
name|bflags
operator||=
name|State_Sunken
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|activeSubControls
operator|&
name|SC_ToolButtonMenu
condition|)
name|mflags
operator||=
name|State_Sunken
expr_stmt|;
name|QStyleOption
name|tool
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|tool
operator|.
name|palette
operator|=
name|toolbutton
operator|->
name|palette
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|subControls
operator|&
name|SC_ToolButton
condition|)
block|{
name|tool
operator|.
name|rect
operator|=
name|button
expr_stmt|;
name|tool
operator|.
name|state
operator|=
name|bflags
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_PanelButtonTool
argument_list|,
operator|&
name|tool
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toolbutton
operator|->
name|subControls
operator|&
name|SC_ToolButtonMenu
condition|)
block|{
name|tool
operator|.
name|rect
operator|=
name|menuarea
expr_stmt|;
name|tool
operator|.
name|state
operator|=
name|mflags
expr_stmt|;
name|tool
operator|.
name|state
operator|=
name|bflags
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_IndicatorButtonDropDown
argument_list|,
operator|&
name|tool
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|flat
condition|)
block|{
comment|//connect buttons
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|tool
operator|.
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|tool
operator|.
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|-
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|-
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|tool
operator|.
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|tool
operator|.
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|tool
operator|.
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tool
operator|.
name|state
operator|&
name|State_Sunken
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|tool
operator|.
name|palette
operator|.
name|midlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|tool
operator|.
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|tool
operator|.
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|tool
operator|.
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|tool
operator|.
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|tool
operator|.
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|tool
operator|.
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|tool
operator|.
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|tool
operator|.
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|tool
operator|.
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|tool
operator|.
name|palette
operator|.
name|midlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|tool
operator|.
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|tool
operator|.
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|tool
operator|.
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|flat
condition|)
block|{
name|tool
operator|.
name|rect
operator|.
name|adjust
argument_list|(
operator|-
literal|3
argument_list|,
literal|0
argument_list|,
operator|-
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|tool
operator|.
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tool
operator|.
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|drawLine
argument_list|(
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|10
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
name|tool
operator|.
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|10
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|drawLine
argument_list|(
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|9
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
name|tool
operator|.
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|tool
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|9
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tool
operator|.
name|rect
operator|.
name|adjust
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|tool
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toolbutton
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fr
decl_stmt|;
name|fr
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|toolbutton
argument_list|)
expr_stmt|;
name|fr
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|features
operator|&
name|QStyleOptionToolButton
operator|::
name|Menu
condition|)
name|fr
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuButtonIndicator
argument_list|,
name|toolbutton
argument_list|,
name|widget
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fr
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|QStyleOptionToolButton
name|label
init|=
operator|*
name|toolbutton
decl_stmt|;
name|int
name|fw
init|=
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|label
operator|.
name|rect
operator|=
name|button
operator|.
name|adjusted
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|)
expr_stmt|;
name|drawControl
argument_list|(
name|CE_ToolButtonLabel
argument_list|,
operator|&
name|label
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
case|case
name|CC_GroupBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|groupBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
comment|// Draw frame
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QFont
name|f
init|=
name|painter
operator|->
name|font
argument_list|()
decl_stmt|;
name|f
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QStyleOptionGroupBox
name|groupBoxFont
init|=
operator|*
name|groupBox
decl_stmt|;
name|groupBoxFont
operator|.
name|fontMetrics
operator|=
name|QFontMetrics
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QRect
name|textRect
init|=
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
operator|&
name|groupBoxFont
argument_list|,
name|SC_GroupBoxLabel
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|checkBoxRect
init|=
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|option
argument_list|,
name|SC_GroupBoxCheckBox
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxFrame
condition|)
block|{
name|QStyleOptionFrameV2
name|frame
decl_stmt|;
name|frame
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|groupBox
argument_list|)
expr_stmt|;
name|frame
operator|.
name|features
operator|=
name|groupBox
operator|->
name|features
expr_stmt|;
name|frame
operator|.
name|lineWidth
operator|=
name|groupBox
operator|->
name|lineWidth
expr_stmt|;
name|frame
operator|.
name|midLineWidth
operator|=
name|groupBox
operator|->
name|midLineWidth
expr_stmt|;
name|frame
operator|.
name|rect
operator|=
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|option
argument_list|,
name|SC_GroupBoxFrame
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QRegion
name|region
argument_list|(
name|groupBox
operator|->
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|groupBox
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bool
name|ltr
init|=
name|groupBox
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
decl_stmt|;
name|QRect
name|finalRect
init|=
name|checkBoxRect
operator|.
name|united
argument_list|(
name|textRect
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
condition|)
name|finalRect
operator|.
name|adjust
argument_list|(
name|ltr
condition|?
operator|-
literal|4
else|:
literal|0
argument_list|,
literal|0
argument_list|,
name|ltr
condition|?
literal|0
else|:
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|region
operator|-=
name|finalRect
expr_stmt|;
block|}
name|painter
operator|->
name|setClipRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_FrameGroupBox
argument_list|,
operator|&
name|frame
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
comment|// Draw title
if|if
condition|(
operator|(
name|groupBox
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxLabel
operator|)
operator|&&
operator|!
name|groupBox
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QColor
name|textColor
init|=
name|groupBox
operator|->
name|textColor
decl_stmt|;
if|if
condition|(
name|textColor
operator|.
name|isValid
argument_list|()
condition|)
name|painter
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|int
name|alignment
init|=
name|int
argument_list|(
name|groupBox
operator|->
name|textAlignment
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_UnderlineShortcut
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
condition|)
name|alignment
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|textRect
argument_list|,
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|AlignHCenter
operator||
name|alignment
argument_list|,
name|groupBox
operator|->
name|palette
argument_list|,
name|groupBox
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|groupBox
operator|->
name|text
argument_list|,
name|textColor
operator|.
name|isValid
argument_list|()
condition|?
name|QPalette
operator|::
name|NoRole
else|:
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|groupBox
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|=
name|textRect
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fropt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Draw checkbox
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|SC_GroupBoxCheckBox
condition|)
block|{
name|QStyleOptionButton
name|box
decl_stmt|;
name|box
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|groupBox
argument_list|)
expr_stmt|;
name|box
operator|.
name|rect
operator|=
name|checkBoxRect
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_IndicatorCheckBox
argument_list|,
operator|&
name|box
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_GROUPBOX
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cmb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QBrush
name|editBrush
init|=
name|cmb
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|cmb
operator|->
name|subControls
operator|&
name|SC_ComboBoxFrame
operator|)
operator|&&
name|cmb
operator|->
name|frame
condition|)
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEPanel
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
operator|&
name|editBrush
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|editBrush
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmb
operator|->
name|subControls
operator|&
name|SC_ComboBoxArrow
condition|)
block|{
name|State
name|flags
init|=
name|State_None
decl_stmt|;
name|QRect
name|ar
init|=
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|cmb
argument_list|,
name|SC_ComboBoxArrow
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmb
operator|->
name|activeSubControls
operator|==
name|SC_ComboBoxArrow
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|ar
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
argument_list|(
name|painter
argument_list|,
name|ar
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
operator|&
name|cmb
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Make qDrawWinButton use the right colors for drawing the shade of the button
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
argument_list|(
name|painter
argument_list|,
name|ar
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
operator|&
name|cmb
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ar
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|flags
operator||=
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|cmb
operator|->
name|activeSubControls
operator|==
name|SC_ComboBoxArrow
condition|)
name|flags
operator||=
name|State_Sunken
expr_stmt|;
name|QStyleOption
name|arrowOpt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|arrowOpt
operator|.
name|rect
operator|=
name|ar
expr_stmt|;
name|arrowOpt
operator|.
name|palette
operator|=
name|cmb
operator|->
name|palette
expr_stmt|;
name|arrowOpt
operator|.
name|state
operator|=
name|flags
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|arrowOpt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmb
operator|->
name|subControls
operator|&
name|SC_ComboBoxEditField
condition|)
block|{
name|QRect
name|re
init|=
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|cmb
argument_list|,
name|SC_ComboBoxEditField
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmb
operator|->
name|state
operator|&
name|State_HasFocus
operator|&&
operator|!
name|cmb
operator|->
name|editable
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|re
operator|.
name|x
argument_list|()
argument_list|,
name|re
operator|.
name|y
argument_list|()
argument_list|,
name|re
operator|.
name|width
argument_list|()
argument_list|,
name|re
operator|.
name|height
argument_list|()
argument_list|,
name|cmb
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmb
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBackground
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|highlight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBackground
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmb
operator|->
name|state
operator|&
name|State_HasFocus
operator|&&
operator|!
name|cmb
operator|->
name|editable
condition|)
block|{
name|QStyleOptionFocusRect
name|focus
decl_stmt|;
name|focus
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|cmb
argument_list|)
expr_stmt|;
name|focus
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|SE_ComboBoxFocusRect
argument_list|,
name|cmb
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|focus
operator|.
name|state
operator||=
name|State_FocusAtBorder
expr_stmt|;
name|focus
operator|.
name|backgroundColor
operator|=
name|cmb
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|focus
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|sb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOptionSpinBox
name|copy
init|=
operator|*
name|sb
decl_stmt|;
name|PrimitiveElement
name|pe
decl_stmt|;
if|if
condition|(
name|sb
operator|->
name|frame
operator|&&
operator|(
name|sb
operator|->
name|subControls
operator|&
name|SC_SpinBoxFrame
operator|)
condition|)
block|{
name|QRect
name|r
init|=
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|sb
argument_list|,
name|SC_SpinBoxFrame
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEPanel
argument_list|(
name|painter
argument_list|,
name|r
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|QPalette
name|shadePal
argument_list|(
name|option
operator|->
name|palette
argument_list|)
decl_stmt|;
name|shadePal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|shadePal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|reverse
init|=
name|QApplication
operator|::
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
decl_stmt|;
if|if
condition|(
name|sb
operator|->
name|subControls
operator|&
name|SC_SpinBoxUp
condition|)
block|{
name|copy
operator|.
name|subControls
operator|=
name|SC_SpinBoxUp
expr_stmt|;
name|QPalette
name|pal2
init|=
name|sb
operator|->
name|palette
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|sb
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepUpEnabled
operator|)
condition|)
block|{
name|pal2
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Enabled
expr_stmt|;
block|}
name|copy
operator|.
name|palette
operator|=
name|pal2
expr_stmt|;
if|if
condition|(
name|sb
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxUp
operator|&&
operator|(
name|sb
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
block|{
name|copy
operator|.
name|state
operator||=
name|State_On
expr_stmt|;
name|copy
operator|.
name|state
operator||=
name|State_Sunken
expr_stmt|;
block|}
else|else
block|{
name|copy
operator|.
name|state
operator||=
name|State_Raised
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Sunken
expr_stmt|;
block|}
if|if
condition|(
name|reverse
condition|)
name|pe
operator|=
operator|(
name|sb
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|PlusMinus
condition|?
name|PE_IndicatorSpinMinus
else|:
name|PE_IndicatorSpinDown
operator|)
expr_stmt|;
else|else
name|pe
operator|=
operator|(
name|sb
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|PlusMinus
condition|?
name|PE_IndicatorSpinPlus
else|:
name|PE_IndicatorSpinUp
operator|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|=
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|sb
argument_list|,
name|SC_SpinBoxUp
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
argument_list|(
name|painter
argument_list|,
name|copy
operator|.
name|rect
argument_list|,
name|option
operator|->
name|palette
argument_list|,
name|copy
operator|.
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
operator|&
name|copy
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
operator|-
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|copy
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|->
name|subControls
operator|&
name|SC_SpinBoxDown
condition|)
block|{
name|copy
operator|.
name|subControls
operator|=
name|SC_SpinBoxDown
expr_stmt|;
name|copy
operator|.
name|state
operator|=
name|sb
operator|->
name|state
expr_stmt|;
name|QPalette
name|pal2
init|=
name|sb
operator|->
name|palette
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|sb
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepDownEnabled
operator|)
condition|)
block|{
name|pal2
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Enabled
expr_stmt|;
block|}
name|copy
operator|.
name|palette
operator|=
name|pal2
expr_stmt|;
if|if
condition|(
name|sb
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxDown
operator|&&
operator|(
name|sb
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
block|{
name|copy
operator|.
name|state
operator||=
name|State_On
expr_stmt|;
name|copy
operator|.
name|state
operator||=
name|State_Sunken
expr_stmt|;
block|}
else|else
block|{
name|copy
operator|.
name|state
operator||=
name|State_Raised
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Sunken
expr_stmt|;
block|}
if|if
condition|(
name|reverse
condition|)
name|pe
operator|=
operator|(
name|sb
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|PlusMinus
condition|?
name|PE_IndicatorSpinPlus
else|:
name|PE_IndicatorSpinUp
operator|)
expr_stmt|;
else|else
name|pe
operator|=
operator|(
name|sb
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|PlusMinus
condition|?
name|PE_IndicatorSpinMinus
else|:
name|PE_IndicatorSpinDown
operator|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|=
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|sb
argument_list|,
name|SC_SpinBoxDown
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
argument_list|(
name|painter
argument_list|,
name|copy
operator|.
name|rect
argument_list|,
name|shadePal
argument_list|,
name|copy
operator|.
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
operator|&
name|copy
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
operator|-
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|pe
operator|==
name|PE_IndicatorArrowUp
operator|||
name|pe
operator|==
name|PE_IndicatorArrowDown
condition|)
block|{
name|copy
operator|.
name|rect
operator|=
name|copy
operator|.
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|copy
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|copy
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|->
name|frame
operator|&&
operator|(
name|sb
operator|->
name|subControls
operator|&
name|SC_SpinBoxFrame
operator|)
condition|)
block|{
name|QRect
name|r
init|=
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|sb
argument_list|,
name|SC_SpinBoxEditField
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|+
literal|1
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|-
literal|2
argument_list|,
name|r
operator|.
name|x
argument_list|()
operator|+
literal|1
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|midlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|-
literal|1
argument_list|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SPINBOX
default|default:
name|QWindowsStyle
operator|::
name|drawComplexControl
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|drawItemText
name|void
name|QWindowsCEStyle
operator|::
name|drawItemText
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|alignment
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|,
name|bool
name|enabled
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QPalette
operator|::
name|ColorRole
name|textRole
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QPen
name|savedPen
decl_stmt|;
if|if
condition|(
name|textRole
operator|!=
name|QPalette
operator|::
name|NoRole
condition|)
block|{
name|savedPen
operator|=
name|painter
operator|->
name|pen
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|pal
operator|.
name|color
argument_list|(
name|textRole
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
name|QPen
name|pen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|pal
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
comment|//painter->drawText(rect.adjusted(1, 1, 1, 1), alignment, text);
name|painter
operator|->
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|drawText
argument_list|(
name|rect
argument_list|,
name|alignment
argument_list|,
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|textRole
operator|!=
name|QPalette
operator|::
name|NoRole
condition|)
name|painter
operator|->
name|setPen
argument_list|(
name|savedPen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeFromContents
name|QSize
name|QWindowsCEStyle
operator|::
name|sizeFromContents
parameter_list|(
name|ContentsType
name|type
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QSize
name|newSize
init|=
name|QWindowsStyle
operator|::
name|sizeFromContents
argument_list|(
name|type
argument_list|,
name|option
argument_list|,
name|size
argument_list|,
name|widget
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CT_PushButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|newSize
operator|=
name|QWindowsStyle
operator|::
name|sizeFromContents
argument_list|(
name|type
argument_list|,
name|option
argument_list|,
name|size
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|int
name|w
init|=
name|newSize
operator|.
name|width
argument_list|()
decl_stmt|,
name|h
init|=
name|newSize
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|defwidth
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|AutoDefaultButton
condition|)
name|defwidth
operator|=
literal|2
operator|*
name|pixelMetric
argument_list|(
name|PM_ButtonDefaultIndicator
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|<
literal|75
operator|+
name|defwidth
operator|&&
name|btn
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|w
operator|=
literal|75
operator|+
name|defwidth
expr_stmt|;
if|if
condition|(
name|h
operator|<
literal|23
operator|+
name|defwidth
condition|)
name|h
operator|=
literal|23
operator|+
name|defwidth
expr_stmt|;
name|newSize
operator|=
name|QSize
argument_list|(
name|w
operator|+
literal|14
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CT_RadioButton
case|:
case|case
name|CT_CheckBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|bool
name|isRadio
init|=
operator|(
name|type
operator|==
name|CT_RadioButton
operator|)
decl_stmt|;
name|QRect
name|irect
init|=
name|visualRect
argument_list|(
name|btn
operator|->
name|direction
argument_list|,
name|btn
operator|->
name|rect
argument_list|,
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonIndicator
else|:
name|SE_CheckBoxIndicator
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|pixelMetric
argument_list|(
name|isRadio
condition|?
name|PM_ExclusiveIndicatorHeight
else|:
name|PM_IndicatorHeight
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|margins
init|=
operator|(
operator|!
name|btn
operator|->
name|icon
operator|.
name|isNull
argument_list|()
operator|&&
name|btn
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|0
else|:
literal|10
decl_stmt|;
name|newSize
operator|+=
name|QSize
argument_list|(
name|irect
operator|.
name|right
argument_list|()
operator|+
name|margins
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|newSize
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|newSize
operator|.
name|height
argument_list|()
argument_list|,
name|h
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CT_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cmb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|fw
init|=
name|cmb
operator|->
name|frame
condition|?
name|pixelMetric
argument_list|(
name|PM_ComboBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|*
literal|2
else|:
literal|0
decl_stmt|;
name|newSize
operator|=
name|QSize
argument_list|(
name|newSize
operator|.
name|width
argument_list|()
operator|+
name|fw
operator|-
literal|1
argument_list|,
name|qMax
argument_list|(
literal|24
argument_list|,
name|newSize
operator|.
name|height
argument_list|()
operator|+
name|fw
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CT_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spnb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|fw
init|=
name|spnb
operator|->
name|frame
condition|?
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|*
literal|2
else|:
literal|0
decl_stmt|;
name|newSize
operator|=
name|QSize
argument_list|(
name|newSize
operator|.
name|width
argument_list|()
operator|+
name|fw
operator|-
literal|5
argument_list|,
name|newSize
operator|.
name|height
argument_list|()
operator|+
name|fw
operator|-
literal|6
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
case|case
name|CT_LineEdit
case|:
name|newSize
operator|+=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_MenuBarItem
case|:
name|newSize
operator|+=
name|QSize
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_MenuItem
case|:
name|newSize
operator|+=
name|QSize
argument_list|(
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_MenuBar
case|:
name|newSize
operator|+=
name|QSize
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_ToolButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|b
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|b
operator|->
name|toolButtonStyle
operator|!=
name|Qt
operator|::
name|ToolButtonIconOnly
condition|)
name|newSize
operator|=
name|QSize
argument_list|(
name|newSize
operator|.
name|width
argument_list|()
operator|+
literal|1
argument_list|,
name|newSize
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
else|else
name|newSize
operator|=
name|QSize
argument_list|(
name|newSize
operator|.
name|width
argument_list|()
operator|+
literal|1
argument_list|,
name|newSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|newSize
return|;
block|}
end_function
begin_function
DECL|function|subElementRect
name|QRect
name|QWindowsCEStyle
operator|::
name|subElementRect
parameter_list|(
name|SubElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QRect
name|rect
init|=
name|QWindowsStyle
operator|::
name|subElementRect
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|SE_ComboBoxFocusRect
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|margin
init|=
name|cb
operator|->
name|frame
condition|?
literal|3
else|:
literal|0
decl_stmt|;
name|rect
operator|.
name|setRect
argument_list|(
name|margin
argument_list|,
name|margin
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
operator|*
name|margin
operator|-
literal|20
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|margin
argument_list|)
expr_stmt|;
name|rect
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
default|default:
break|break;
block|}
return|return
name|rect
return|;
block|}
end_function
begin_function
DECL|function|subControlRect
name|QRect
name|QWindowsCEStyle
operator|::
name|subControlRect
parameter_list|(
name|ComplexControl
name|control
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|SubControl
name|subControl
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QRect
name|rect
init|=
name|QWindowsStyle
operator|::
name|subControlRect
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|subControl
argument_list|,
name|widget
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|control
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|CC_Slider
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|tickOffset
init|=
name|pixelMetric
argument_list|(
name|PM_SliderTickmarkOffset
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|thickness
init|=
name|pixelMetric
argument_list|(
name|PM_SliderControlThickness
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_SliderHandle
case|:
block|{
name|int
name|sliderPos
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|bool
name|horizontal
init|=
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
decl_stmt|;
name|sliderPos
operator|=
name|sliderPositionFromValue
argument_list|(
name|slider
operator|->
name|minimum
argument_list|,
name|slider
operator|->
name|maximum
argument_list|,
name|slider
operator|->
name|sliderPosition
argument_list|,
operator|(
name|horizontal
condition|?
name|slider
operator|->
name|rect
operator|.
name|width
argument_list|()
else|:
name|slider
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|)
operator|-
name|len
argument_list|,
name|slider
operator|->
name|upsideDown
argument_list|)
expr_stmt|;
if|if
condition|(
name|horizontal
condition|)
name|rect
operator|.
name|setRect
argument_list|(
name|slider
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|sliderPos
argument_list|,
name|slider
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|tickOffset
argument_list|,
name|len
argument_list|,
name|thickness
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|setRect
argument_list|(
name|slider
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|tickOffset
argument_list|,
name|slider
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|sliderPos
argument_list|,
name|thickness
argument_list|,
name|len
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
name|rect
operator|=
name|visualRect
argument_list|(
name|slider
operator|->
name|direction
argument_list|,
name|slider
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_SLIDER
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|x
init|=
name|cb
operator|->
name|rect
operator|.
name|x
argument_list|()
decl_stmt|,
name|y
init|=
name|cb
operator|->
name|rect
operator|.
name|y
argument_list|()
decl_stmt|,
name|wi
init|=
name|cb
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|,
name|he
init|=
name|cb
operator|->
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|xpos
init|=
name|x
decl_stmt|;
name|int
name|margin
init|=
name|cb
operator|->
name|frame
condition|?
literal|3
else|:
literal|0
decl_stmt|;
name|int
name|bmarg
init|=
name|cb
operator|->
name|frame
condition|?
literal|2
else|:
literal|0
decl_stmt|;
name|xpos
operator|+=
name|wi
operator|-
operator|(
name|he
operator|-
literal|2
operator|*
name|bmarg
operator|)
operator|-
name|bmarg
expr_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_ComboBoxArrow
case|:
name|rect
operator|.
name|setRect
argument_list|(
name|xpos
argument_list|,
name|y
operator|+
name|bmarg
argument_list|,
name|he
operator|-
literal|2
operator|*
name|bmarg
argument_list|,
name|he
operator|-
literal|2
operator|*
name|bmarg
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ComboBoxEditField
case|:
name|rect
operator|.
name|setRect
argument_list|(
name|x
operator|+
name|margin
argument_list|,
name|y
operator|+
name|margin
argument_list|,
name|wi
operator|-
literal|2
operator|*
name|margin
operator|-
operator|(
name|he
operator|-
literal|2
operator|*
name|bmarg
operator|)
argument_list|,
name|he
operator|-
literal|2
operator|*
name|margin
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ComboBoxListBoxPopup
case|:
name|rect
operator|=
name|cb
operator|->
name|rect
expr_stmt|;
break|break;
case|case
name|SC_ComboBoxFrame
case|:
name|rect
operator|=
name|cb
operator|->
name|rect
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|rect
operator|=
name|visualRect
argument_list|(
name|cb
operator|->
name|direction
argument_list|,
name|cb
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|//QT_NO_COMBOBOX
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinbox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QSize
name|bs
decl_stmt|;
name|int
name|fw
init|=
name|spinbox
operator|->
name|frame
condition|?
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|spinbox
argument_list|,
name|widget
argument_list|)
else|:
literal|0
decl_stmt|;
name|bs
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
literal|18
argument_list|,
operator|(
name|spinbox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
name|fw
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1.6 -approximate golden mean
name|bs
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
literal|18
argument_list|,
name|qMin
argument_list|(
operator|(
name|bs
operator|.
name|height
argument_list|()
operator|*
literal|8
operator|/
literal|5
operator|)
argument_list|,
operator|(
name|spinbox
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|4
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bs
operator|=
name|bs
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|y
init|=
name|fw
decl_stmt|;
name|int
name|x
decl_stmt|,
name|lx
decl_stmt|,
name|rx
decl_stmt|;
name|x
operator|=
name|spinbox
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|y
operator|-
name|bs
operator|.
name|width
argument_list|()
operator|*
literal|2
expr_stmt|;
name|lx
operator|=
name|fw
expr_stmt|;
name|rx
operator|=
name|x
operator|-
name|fw
expr_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_SpinBoxUp
case|:
name|rect
operator|=
name|QRect
argument_list|(
name|x
operator|+
name|bs
operator|.
name|width
argument_list|()
argument_list|,
name|y
argument_list|,
name|bs
operator|.
name|width
argument_list|()
argument_list|,
name|bs
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_SpinBoxDown
case|:
name|rect
operator|=
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|bs
operator|.
name|width
argument_list|()
argument_list|,
name|bs
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_SpinBoxEditField
case|:
if|if
condition|(
name|spinbox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|)
block|{
name|rect
operator|=
name|QRect
argument_list|(
name|lx
argument_list|,
name|fw
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
operator|*
name|fw
operator|-
literal|2
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|fw
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rect
operator|=
name|QRect
argument_list|(
name|lx
argument_list|,
name|fw
argument_list|,
name|rx
operator|-
literal|2
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|fw
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SC_SpinBoxFrame
case|:
name|rect
operator|=
name|spinbox
operator|->
name|rect
expr_stmt|;
default|default:
break|break;
block|}
name|rect
operator|=
name|visualRect
argument_list|(
name|spinbox
operator|->
name|direction
argument_list|,
name|spinbox
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// Qt_NO_SPINBOX
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
case|case
name|CC_GroupBox
case|:
block|{
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|groupBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_GroupBoxFrame
case|:
comment|// FALL THROUGH
case|case
name|SC_GroupBoxContents
case|:
block|{
name|int
name|topMargin
init|=
literal|0
decl_stmt|;
name|int
name|topHeight
init|=
literal|0
decl_stmt|;
name|int
name|bottomMargin
init|=
literal|0
decl_stmt|;
name|int
name|noLabelMargin
init|=
literal|0
decl_stmt|;
name|QRect
name|frameRect
init|=
name|groupBox
operator|->
name|rect
decl_stmt|;
name|int
name|verticalAlignment
init|=
name|styleHint
argument_list|(
name|SH_GroupBox_TextLabelVerticalAlignment
argument_list|,
name|groupBox
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|text
operator|.
name|size
argument_list|()
condition|)
block|{
name|topHeight
operator|=
name|groupBox
operator|->
name|fontMetrics
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|verticalAlignment
operator|&
name|Qt
operator|::
name|AlignVCenter
condition|)
name|topMargin
operator|=
name|topHeight
operator|/
literal|2
expr_stmt|;
elseif|else
if|if
condition|(
name|verticalAlignment
operator|&
name|Qt
operator|::
name|AlignTop
condition|)
name|topMargin
operator|=
operator|-
name|topHeight
operator|/
literal|2
expr_stmt|;
block|}
else|else
block|{
name|topHeight
operator|=
name|groupBox
operator|->
name|fontMetrics
operator|.
name|height
argument_list|()
expr_stmt|;
name|noLabelMargin
operator|=
name|topHeight
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|verticalAlignment
operator|&
name|Qt
operator|::
name|AlignVCenter
condition|)
block|{
name|topMargin
operator|=
name|topHeight
operator|/
literal|4
operator|-
literal|4
expr_stmt|;
name|bottomMargin
operator|=
name|topHeight
operator|/
literal|4
operator|-
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|verticalAlignment
operator|&
name|Qt
operator|::
name|AlignTop
condition|)
block|{
name|topMargin
operator|=
name|topHeight
operator|/
literal|2
operator|-
literal|4
expr_stmt|;
name|bottomMargin
operator|=
name|topHeight
operator|/
literal|2
operator|-
literal|4
expr_stmt|;
block|}
block|}
if|if
condition|(
name|subControl
operator|==
name|SC_GroupBoxFrame
condition|)
block|{
name|frameRect
operator|.
name|setTop
argument_list|(
name|topMargin
argument_list|)
expr_stmt|;
name|frameRect
operator|.
name|setBottom
argument_list|(
name|frameRect
operator|.
name|height
argument_list|()
operator|+
name|bottomMargin
argument_list|)
expr_stmt|;
name|rect
operator|=
name|frameRect
expr_stmt|;
break|break;
block|}
name|int
name|frameWidth
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
name|groupBox
operator|->
name|features
operator|&
name|QStyleOptionFrameV2
operator|::
name|Flat
operator|)
operator|==
literal|0
condition|)
name|frameWidth
operator|=
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|groupBox
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|rect
operator|=
name|frameRect
operator|.
name|adjusted
argument_list|(
name|frameWidth
argument_list|,
name|frameWidth
operator|+
name|topHeight
argument_list|,
operator|-
name|frameWidth
argument_list|,
operator|-
name|frameWidth
operator|-
name|noLabelMargin
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SC_GroupBoxCheckBox
case|:
comment|// FALL THROUGH
case|case
name|SC_GroupBoxLabel
case|:
block|{
name|QFontMetrics
name|fontMetrics
init|=
name|groupBox
operator|->
name|fontMetrics
decl_stmt|;
name|int
name|h
init|=
name|fontMetrics
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|tw
init|=
name|fontMetrics
operator|.
name|size
argument_list|(
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|groupBox
operator|->
name|text
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|marg
init|=
operator|(
name|groupBox
operator|->
name|features
operator|&
name|QStyleOptionFrameV2
operator|::
name|Flat
operator|)
condition|?
literal|0
else|:
literal|8
decl_stmt|;
name|rect
operator|=
name|groupBox
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|marg
argument_list|,
literal|0
argument_list|,
operator|-
name|marg
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setHeight
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|int
name|indicatorWidth
init|=
name|pixelMetric
argument_list|(
name|PM_IndicatorWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|indicatorSpace
init|=
name|pixelMetric
argument_list|(
name|PM_CheckBoxLabelSpacing
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|-
literal|1
decl_stmt|;
name|bool
name|hasCheckBox
init|=
name|groupBox
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
decl_stmt|;
name|int
name|checkBoxSize
init|=
name|hasCheckBox
condition|?
operator|(
name|indicatorWidth
operator|+
name|indicatorSpace
operator|)
else|:
literal|0
decl_stmt|;
comment|// Adjusted rect for label + indicatorWidth + indicatorSpace
name|QRect
name|totalRect
init|=
name|alignedRect
argument_list|(
name|groupBox
operator|->
name|direction
argument_list|,
name|groupBox
operator|->
name|textAlignment
argument_list|,
name|QSize
argument_list|(
name|tw
operator|+
name|checkBoxSize
argument_list|,
name|h
argument_list|)
argument_list|,
name|rect
argument_list|)
decl_stmt|;
comment|// Adjust totalRect if checkbox is set
if|if
condition|(
name|hasCheckBox
condition|)
block|{
name|bool
name|ltr
init|=
name|groupBox
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
decl_stmt|;
name|int
name|left
init|=
literal|0
decl_stmt|;
comment|// Adjust for check box
if|if
condition|(
name|subControl
operator|==
name|SC_GroupBoxCheckBox
condition|)
block|{
name|int
name|indicatorHeight
init|=
name|pixelMetric
argument_list|(
name|PM_IndicatorHeight
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|left
operator|=
name|ltr
condition|?
name|totalRect
operator|.
name|left
argument_list|()
else|:
operator|(
name|totalRect
operator|.
name|right
argument_list|()
operator|-
name|indicatorWidth
operator|)
expr_stmt|;
name|int
name|top
init|=
name|totalRect
operator|.
name|top
argument_list|()
operator|+
operator|(
name|fontMetrics
operator|.
name|height
argument_list|()
operator|-
name|indicatorHeight
operator|)
operator|/
literal|2
decl_stmt|;
name|totalRect
operator|.
name|setRect
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|indicatorWidth
argument_list|,
name|indicatorHeight
argument_list|)
expr_stmt|;
comment|// Adjust for label
block|}
else|else
block|{
name|left
operator|=
name|ltr
condition|?
operator|(
name|totalRect
operator|.
name|left
argument_list|()
operator|+
name|checkBoxSize
operator|-
literal|2
operator|)
else|:
name|totalRect
operator|.
name|left
argument_list|()
expr_stmt|;
name|totalRect
operator|.
name|setRect
argument_list|(
name|left
argument_list|,
name|totalRect
operator|.
name|top
argument_list|()
argument_list|,
name|totalRect
operator|.
name|width
argument_list|()
operator|-
name|checkBoxSize
argument_list|,
name|totalRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|rect
operator|=
name|totalRect
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
block|}
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_GROUPBOX
default|default:
break|break;
block|}
return|return
name|rect
return|;
block|}
end_function
begin_function
DECL|function|hitTestComplexControl
name|QStyle
operator|::
name|SubControl
name|QWindowsCEStyle
operator|::
name|hitTestComplexControl
parameter_list|(
name|ComplexControl
name|control
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
comment|/*switch (control) {     default:         break;     }*/
return|return
name|QWindowsStyle
operator|::
name|hitTestComplexControl
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|pos
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|standardPalette
name|QPalette
name|QWindowsCEStyle
operator|::
name|standardPalette
parameter_list|()
specifier|const
block|{
name|QPalette
name|palette
argument_list|(
name|Qt
operator|::
name|black
argument_list|,
name|QColor
argument_list|(
literal|198
argument_list|,
literal|195
argument_list|,
literal|198
argument_list|)
argument_list|,
name|QColor
argument_list|(
literal|222
argument_list|,
literal|223
argument_list|,
literal|222
argument_list|)
argument_list|,
name|QColor
argument_list|(
literal|132
argument_list|,
literal|130
argument_list|,
literal|132
argument_list|)
argument_list|,
name|QColor
argument_list|(
literal|198
argument_list|,
literal|195
argument_list|,
literal|198
argument_list|)
argument_list|,
name|Qt
operator|::
name|black
argument_list|,
name|Qt
operator|::
name|white
argument_list|,
name|Qt
operator|::
name|white
argument_list|,
name|QColor
argument_list|(
literal|198
argument_list|,
literal|195
argument_list|,
literal|198
argument_list|)
argument_list|)
decl_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|QColor
argument_list|(
literal|198
argument_list|,
literal|195
argument_list|,
literal|198
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|QColor
argument_list|(
literal|198
argument_list|,
literal|195
argument_list|,
literal|198
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|132
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|QColor
argument_list|(
literal|222
argument_list|,
literal|223
argument_list|,
literal|222
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|,
name|QColor
argument_list|(
literal|132
argument_list|,
literal|130
argument_list|,
literal|132
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Mid
argument_list|,
name|QColor
argument_list|(
literal|132
argument_list|,
literal|130
argument_list|,
literal|132
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|BrightText
argument_list|,
name|QColor
argument_list|(
literal|33
argument_list|,
literal|162
argument_list|,
literal|33
argument_list|)
argument_list|)
expr_stmt|;
comment|//color for ItemView checked indicator (arrow)
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Link
argument_list|,
name|QColor
argument_list|(
literal|24
argument_list|,
literal|81
argument_list|,
literal|132
argument_list|)
argument_list|)
expr_stmt|;
comment|// color for the box around the ItemView indicator
return|return
name|palette
return|;
block|}
end_function
begin_function
DECL|function|polish
name|void
name|QWindowsCEStyle
operator|::
name|polish
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
block|{
name|QWindowsStyle
operator|::
name|polish
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|polish
name|void
name|QWindowsCEStyle
operator|::
name|polish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QWindowsStyle
operator|::
name|polish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|polish
name|void
name|QWindowsCEStyle
operator|::
name|polish
parameter_list|(
name|QPalette
modifier|&
name|palette
parameter_list|)
block|{
name|QWindowsStyle
operator|::
name|polish
argument_list|(
name|palette
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pixelMetric
name|int
name|QWindowsCEStyle
operator|::
name|pixelMetric
parameter_list|(
name|PixelMetric
name|pm
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|int
name|ret
decl_stmt|;
switch|switch
condition|(
name|pm
condition|)
block|{
case|case
name|PM_DefaultFrameWidth
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_MenuBarHMargin
case|:
name|ret
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|PM_MenuBarVMargin
case|:
name|ret
operator|=
literal|2
expr_stmt|;
break|break;
comment|/*case PM_MenuBarItemSpacing:         ret = 2;         break;*/
case|case
name|PM_MenuButtonIndicator
case|:
name|ret
operator|=
literal|10
expr_stmt|;
break|break;
case|case
name|PM_SpinBoxFrameWidth
case|:
name|ret
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|PM_ButtonDefaultIndicator
case|:
case|case
name|PM_ButtonShiftHorizontal
case|:
case|case
name|PM_ButtonShiftVertical
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|PM_TabBarTabShiftHorizontal
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|PM_TabBarTabShiftVertical
case|:
name|ret
operator|=
literal|6
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|PM_MaximumDragDistance
case|:
name|ret
operator|=
literal|60
expr_stmt|;
break|break;
case|case
name|PM_IndicatorWidth
case|:
name|ret
operator|=
name|windowsCEIndicatorSize
expr_stmt|;
break|break;
case|case
name|PM_IndicatorHeight
case|:
name|ret
operator|=
name|windowsCEIndicatorSize
expr_stmt|;
break|break;
case|case
name|PM_ExclusiveIndicatorWidth
case|:
name|ret
operator|=
name|windowsCEExclusiveIndicatorSize
expr_stmt|;
break|break;
case|case
name|PM_ExclusiveIndicatorHeight
case|:
name|ret
operator|=
name|windowsCEExclusiveIndicatorSize
expr_stmt|;
empty_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|PM_SliderLength
case|:
name|ret
operator|=
literal|12
expr_stmt|;
break|break;
case|case
name|PM_SliderThickness
case|:
name|ret
operator|=
name|windowsCESliderThickness
expr_stmt|;
break|break;
case|case
name|PM_TabBarScrollButtonWidth
case|:
name|ret
operator|=
literal|18
expr_stmt|;
break|break;
comment|// Returns the number of pixels to use for the business part of the
comment|// slider (i.e., the non-tickmark portion). The remaining space is shared
comment|// equally between the tickmark regions.
case|case
name|PM_SliderControlThickness
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|sl
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|int
name|space
init|=
operator|(
name|sl
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|sl
operator|->
name|rect
operator|.
name|height
argument_list|()
else|:
name|sl
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|ticks
init|=
name|sl
operator|->
name|tickPosition
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksAbove
condition|)
operator|++
name|n
expr_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksBelow
condition|)
operator|++
name|n
expr_stmt|;
if|if
condition|(
operator|!
name|n
condition|)
block|{
name|ret
operator|=
name|space
expr_stmt|;
break|break;
block|}
name|int
name|thick
init|=
literal|12
decl_stmt|;
if|if
condition|(
name|ticks
operator|!=
name|QSlider
operator|::
name|TicksBothSides
operator|&&
name|ticks
operator|!=
name|QSlider
operator|::
name|NoTicks
condition|)
name|thick
operator|+=
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|,
name|sl
argument_list|,
name|widget
argument_list|)
operator|/
literal|4
expr_stmt|;
name|space
operator|-=
name|thick
expr_stmt|;
if|if
condition|(
name|space
operator|>
literal|0
condition|)
name|thick
operator|+=
operator|(
name|space
operator|*
literal|2
operator|)
operator|/
operator|(
name|n
operator|+
literal|2
operator|)
expr_stmt|;
name|ret
operator|=
name|thick
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
literal|0
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SLIDER
ifndef|#
directive|ifndef
name|QT_NO_MENU
case|case
name|PM_SmallIconSize
case|:
name|ret
operator|=
name|windowsCEIconSize
expr_stmt|;
break|break;
case|case
name|PM_ButtonMargin
case|:
name|ret
operator|=
literal|6
expr_stmt|;
break|break;
case|case
name|PM_LargeIconSize
case|:
name|ret
operator|=
literal|32
expr_stmt|;
break|break;
case|case
name|PM_IconViewIconSize
case|:
name|ret
operator|=
name|pixelMetric
argument_list|(
name|PM_LargeIconSize
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|PM_ToolBarIconSize
case|:
name|ret
operator|=
name|windowsCEIconSize
expr_stmt|;
break|break;
case|case
name|PM_DockWidgetTitleMargin
case|:
name|ret
operator|=
literal|2
expr_stmt|;
break|break;
if|#
directive|if
name|defined
argument_list|(
name|Q_DEAD_CODE_FROM_QT4_WIN
argument_list|)
comment|//    case PM_DockWidgetFrameWidth:
comment|//        ret = GetSystemMetrics(SM_CXFRAME);
comment|//        break;
else|#
directive|else
case|case
name|PM_DockWidgetFrameWidth
case|:
name|ret
operator|=
literal|4
expr_stmt|;
break|break;
endif|#
directive|endif
comment|// Q_DEAD_CODE_FROM_QT4_WIN
break|break;
endif|#
directive|endif
comment|// QT_NO_MENU
case|case
name|PM_TitleBarHeight
case|:
name|ret
operator|=
literal|30
expr_stmt|;
break|break;
case|case
name|PM_ScrollBarExtent
case|:
name|ret
operator|=
literal|19
expr_stmt|;
break|break;
case|case
name|PM_SplitterWidth
case|:
name|ret
operator|=
name|qMax
argument_list|(
literal|4
argument_list|,
name|QApplication
operator|::
name|globalStrut
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
break|break;
if|#
directive|if
name|defined
argument_list|(
name|Q_DEAD_CODE_FROM_QT4_WIN
argument_list|)
case|case
name|PM_MDIFrameWidth
case|:
name|ret
operator|=
literal|3
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|PM_ToolBarItemMargin
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_ToolBarItemSpacing
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|PM_ToolBarHandleExtent
case|:
name|ret
operator|=
literal|10
expr_stmt|;
break|break;
case|case
name|PM_ButtonIconSize
case|:
name|ret
operator|=
literal|22
expr_stmt|;
break|break;
default|default:
name|ret
operator|=
name|QWindowsStyle
operator|::
name|pixelMetric
argument_list|(
name|pm
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|standardPixmap
name|QPixmap
name|QWindowsCEStyle
operator|::
name|standardPixmap
parameter_list|(
name|StandardPixmap
name|standardPixmap
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_IMAGEFORMAT_XPM
comment|/*switch (standardPixmap) {      default:         break;     }*/
endif|#
directive|endif
comment|//QT_NO_IMAGEFORMAT_XPM
return|return
name|QWindowsStyle
operator|::
name|standardPixmap
argument_list|(
name|standardPixmap
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|styleHint
name|int
name|QWindowsCEStyle
operator|::
name|styleHint
parameter_list|(
name|StyleHint
name|hint
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QStyleHintReturn
modifier|*
name|returnData
parameter_list|)
specifier|const
block|{
name|int
name|ret
decl_stmt|;
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|SH_TabBar_ElideMode
case|:
name|ret
operator|=
name|Qt
operator|::
name|ElideMiddle
expr_stmt|;
break|break;
case|case
name|SH_EtchDisabledText
case|:
name|ret
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|SH_RequestSoftwareInputPanel
case|:
name|ret
operator|=
name|RSIP_OnMouseClick
expr_stmt|;
break|break;
default|default:
name|ret
operator|=
name|QWindowsStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|drawWinShades
name|void
name|QWindowsCEStylePrivate
operator|::
name|drawWinShades
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c1
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c2
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c3
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c4
parameter_list|,
specifier|const
name|QBrush
modifier|*
name|fill
parameter_list|)
block|{
if|if
condition|(
name|w
operator|<
literal|2
operator|||
name|h
operator|<
literal|2
condition|)
comment|// can't do anything with that
return|return;
name|QPen
name|oldPen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
name|QPoint
name|a
index|[
literal|3
index|]
init|=
block|{
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
operator|+
name|h
operator|-
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
block|,
name|QPoint
argument_list|(
argument|x+w-
literal|2
argument_list|,
argument|y
argument_list|)
block|}
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|a
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QPoint
name|b
index|[
literal|3
index|]
init|=
block|{
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
operator|+
name|h
operator|-
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
name|x
operator|+
name|w
operator|-
literal|1
argument_list|,
name|y
operator|+
name|h
operator|-
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
argument|x+w-
literal|1
argument_list|,
argument|y
argument_list|)
block|}
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|b
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|>
literal|4
operator|&&
name|h
operator|>
literal|4
condition|)
block|{
name|QPoint
name|c
index|[
literal|3
index|]
init|=
block|{
name|QPoint
argument_list|(
name|x
operator|+
literal|1
argument_list|,
name|y
operator|+
name|h
operator|-
literal|3
argument_list|)
block|,
name|QPoint
argument_list|(
name|x
operator|+
literal|1
argument_list|,
name|y
operator|+
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
argument|x+w-
literal|3
argument_list|,
argument|y+
literal|1
argument_list|)
block|}
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|c
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QPoint
name|d
index|[
literal|3
index|]
init|=
block|{
name|QPoint
argument_list|(
name|x
operator|+
literal|1
argument_list|,
name|y
operator|+
name|h
operator|-
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
name|x
operator|+
name|w
operator|-
literal|2
argument_list|,
name|y
operator|+
name|h
operator|-
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
argument|x+w-
literal|2
argument_list|,
argument|y+
literal|1
argument_list|)
block|}
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|d
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|fill
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x
operator|+
literal|2
argument_list|,
name|y
operator|+
literal|2
argument_list|,
name|w
operator|-
literal|4
argument_list|,
name|h
operator|-
literal|4
argument_list|)
argument_list|,
operator|*
name|fill
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawWinCEShades
name|void
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEShades
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c1
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c2
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c3
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c4
parameter_list|,
specifier|const
name|QBrush
modifier|*
name|fill
parameter_list|)
block|{
if|if
condition|(
name|w
operator|<
literal|2
operator|||
name|h
operator|<
literal|2
condition|)
comment|// can't do anything with that
return|return;
name|QPen
name|oldPen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
name|QPoint
name|b
index|[
literal|3
index|]
init|=
block|{
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
operator|+
name|h
operator|-
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
name|x
operator|+
name|w
operator|-
literal|1
argument_list|,
name|y
operator|+
name|h
operator|-
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
argument|x+w-
literal|1
argument_list|,
argument|y
argument_list|)
block|}
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|b
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|>
literal|4
operator|&&
name|h
operator|>
literal|4
condition|)
block|{
name|QPoint
name|c
index|[
literal|3
index|]
init|=
block|{
name|QPoint
argument_list|(
name|x
operator|+
literal|1
argument_list|,
name|y
operator|+
name|h
operator|-
literal|3
argument_list|)
block|,
name|QPoint
argument_list|(
name|x
operator|+
literal|1
argument_list|,
name|y
operator|+
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
argument|x+w-
literal|3
argument_list|,
argument|y+
literal|1
argument_list|)
block|}
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|c
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QPoint
name|d
index|[
literal|5
index|]
init|=
block|{
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
operator|+
name|h
operator|-
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
name|x
operator|+
name|w
operator|-
literal|2
argument_list|,
name|y
operator|+
name|h
operator|-
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
name|x
operator|+
name|w
operator|-
literal|2
argument_list|,
name|y
argument_list|)
block|,
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
block|,
name|QPoint
argument_list|(
argument|x
argument_list|,
argument|y+h-
literal|2
argument_list|)
block|}
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|d
argument_list|,
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|fill
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x
operator|+
literal|2
argument_list|,
name|y
operator|+
literal|2
argument_list|,
name|w
operator|-
literal|4
argument_list|,
name|h
operator|-
literal|4
argument_list|)
argument_list|,
operator|*
name|fill
argument_list|)
expr_stmt|;
block|}
name|QPoint
name|a
index|[
literal|3
index|]
init|=
block|{
name|QPoint
argument_list|(
name|x
operator|+
literal|1
argument_list|,
name|y
operator|+
name|h
operator|-
literal|3
argument_list|)
block|,
name|QPoint
argument_list|(
name|x
operator|+
literal|1
argument_list|,
name|y
operator|+
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
argument|x+w-
literal|3
argument_list|,
argument|y+
literal|1
argument_list|)
block|}
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|a
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawWinCEShadesSunken
name|void
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEShadesSunken
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c1
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c2
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c3
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c4
parameter_list|,
specifier|const
name|QBrush
modifier|*
name|fill
parameter_list|)
block|{
if|if
condition|(
name|w
operator|<
literal|2
operator|||
name|h
operator|<
literal|2
condition|)
comment|// can't do anything with that
return|return;
name|QPen
name|oldPen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
name|QPoint
name|b
index|[
literal|3
index|]
init|=
block|{
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
operator|+
name|h
operator|-
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
name|x
operator|+
name|w
operator|-
literal|1
argument_list|,
name|y
operator|+
name|h
operator|-
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
argument|x+w-
literal|1
argument_list|,
argument|y
argument_list|)
block|}
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|b
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|>
literal|4
operator|&&
name|h
operator|>
literal|4
condition|)
block|{
name|QPoint
name|d
index|[
literal|3
index|]
init|=
block|{
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
operator|+
name|h
operator|-
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
name|x
operator|+
name|w
operator|-
literal|2
argument_list|,
name|y
operator|+
name|h
operator|-
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
argument|x+w-
literal|2
argument_list|,
argument|y
argument_list|)
block|}
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|d
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QPoint
name|c
index|[
literal|3
index|]
init|=
block|{
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
operator|+
name|h
operator|-
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
block|,
name|QPoint
argument_list|(
argument|x+w-
literal|2
argument_list|,
argument|y
argument_list|)
block|}
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|c
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|fill
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x
operator|+
literal|2
argument_list|,
name|y
operator|+
literal|2
argument_list|,
name|w
operator|-
literal|4
argument_list|,
name|h
operator|-
literal|4
argument_list|)
argument_list|,
operator|*
name|fill
argument_list|)
expr_stmt|;
block|}
name|QPoint
name|a
index|[
literal|3
index|]
init|=
block|{
name|QPoint
argument_list|(
name|x
operator|+
literal|1
argument_list|,
name|y
operator|+
name|h
operator|-
literal|3
argument_list|)
block|,
name|QPoint
argument_list|(
name|x
operator|+
literal|1
argument_list|,
name|y
operator|+
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
argument|x+w-
literal|3
argument_list|,
argument|y+
literal|1
argument_list|)
block|}
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|a
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawWinCEButton
name|void
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|,
name|bool
name|sunken
parameter_list|,
specifier|const
name|QBrush
modifier|*
name|fill
parameter_list|)
block|{
if|if
condition|(
name|sunken
condition|)
name|drawWinCEShadesSunken
argument_list|(
name|p
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|pal
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|pal
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|pal
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|pal
operator|.
name|midlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|fill
argument_list|)
expr_stmt|;
else|else
name|drawWinCEShades
argument_list|(
name|p
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|pal
operator|.
name|midlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|pal
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|pal
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|pal
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|fill
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawWinCEPanel
name|void
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEPanel
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|,
name|bool
name|sunken
parameter_list|,
specifier|const
name|QBrush
modifier|*
name|fill
parameter_list|)
block|{
if|if
condition|(
name|sunken
condition|)
name|drawWinShades
argument_list|(
name|p
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|pal
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|pal
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|pal
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|pal
operator|.
name|midlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|fill
argument_list|)
expr_stmt|;
else|else
name|drawWinShades
argument_list|(
name|p
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|pal
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|pal
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|pal
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|pal
operator|.
name|midlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|fill
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawWinCEButton
name|void
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEButton
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|,
name|bool
name|sunken
parameter_list|,
specifier|const
name|QBrush
modifier|*
name|fill
parameter_list|)
block|{
name|drawWinCEButton
argument_list|(
name|p
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|pal
argument_list|,
name|sunken
argument_list|,
name|fill
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawWinCEPanel
name|void
name|QWindowsCEStylePrivate
operator|::
name|drawWinCEPanel
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|,
name|bool
name|sunken
parameter_list|,
specifier|const
name|QBrush
modifier|*
name|fill
parameter_list|)
block|{
name|drawWinCEPanel
argument_list|(
name|p
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|pal
argument_list|,
name|sunken
argument_list|,
name|fill
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STYLE_WINDOWSCE
end_comment
end_unit
