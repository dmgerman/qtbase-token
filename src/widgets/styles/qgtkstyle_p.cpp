begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgtkstyle_p_p.h"
end_include
begin_comment
comment|// This file is responsible for resolving all GTK functions we use
end_comment
begin_comment
comment|// dynamically. This is done to avoid link-time dependancy on GTK
end_comment
begin_comment
comment|// as well as crashes occurring due to usage of the GTK_QT engines
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Additionally we create a map of common GTK widgets that we can pass
end_comment
begin_comment
comment|// to the GTK theme engine as many engines resort to querying the
end_comment
begin_comment
comment|// actual widget pointers for details that are not covered by the
end_comment
begin_comment
comment|// state flags
end_comment
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_GTK
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtCore/QEvent>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFile>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextStream>
end_include
begin_include
include|#
directive|include
file|<QtCore/QHash>
end_include
begin_include
include|#
directive|include
file|<QtCore/QUrl>
end_include
begin_include
include|#
directive|include
file|<QtCore/QLibrary>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<private/qgtk2painter_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qiconloader_p.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QMenu>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QStyle>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPixmapCache>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QStatusBar>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QToolBar>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QToolButton>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_MAC
end_ifndef
begin_comment
comment|// X11 Includes:
end_comment
begin_comment
comment|// the following is necessary to work around breakage in many versions
end_comment
begin_comment
comment|// of XFree86's Xlib.h still in use
end_comment
begin_comment
comment|// ### which versions?
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_XLIB_H_
argument_list|)
end_if
begin_comment
comment|// crude hack, but...
end_comment
begin_error
error|#
directive|error
literal|"cannot include<X11/Xlib.h> before this file"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|XRegisterIMInstantiateCallback
define|#
directive|define
name|XRegisterIMInstantiateCallback
value|qt_XRegisterIMInstantiateCallback
end_define
begin_define
DECL|macro|XUnregisterIMInstantiateCallback
define|#
directive|define
name|XUnregisterIMInstantiateCallback
value|qt_XUnregisterIMInstantiateCallback
end_define
begin_define
DECL|macro|XSetIMValues
define|#
directive|define
name|XSetIMValues
value|qt_XSetIMValues
end_define
begin_include
include|#
directive|include
file|<X11/Xlib.h>
end_include
begin_undef
DECL|macro|XRegisterIMInstantiateCallback
undef|#
directive|undef
name|XRegisterIMInstantiateCallback
end_undef
begin_undef
DECL|macro|XUnregisterIMInstantiateCallback
undef|#
directive|undef
name|XUnregisterIMInstantiateCallback
end_undef
begin_undef
DECL|macro|XSetIMValues
undef|#
directive|undef
name|XSetIMValues
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_GLOBAL_STATIC
argument_list|(
name|QGtkStyleUpdateScheduler
argument_list|,
name|styleScheduler
argument_list|)
DECL|member|gtk_container_forall
name|Ptr_gtk_container_forall
name|QGtkStylePrivate
operator|::
name|gtk_container_forall
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_init
name|Ptr_gtk_init
name|QGtkStylePrivate
operator|::
name|gtk_init
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_style_attach
name|Ptr_gtk_style_attach
name|QGtkStylePrivate
operator|::
name|gtk_style_attach
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_window_new
name|Ptr_gtk_window_new
name|QGtkStylePrivate
operator|::
name|gtk_window_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_destroy
name|Ptr_gtk_widget_destroy
name|QGtkStylePrivate
operator|::
name|gtk_widget_destroy
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_realize
name|Ptr_gtk_widget_realize
name|QGtkStylePrivate
operator|::
name|gtk_widget_realize
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_set_default_direction
name|Ptr_gtk_widget_set_default_direction
name|QGtkStylePrivate
operator|::
name|gtk_widget_set_default_direction
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_modify_fg
name|Ptr_gtk_widget_modify_color
name|QGtkStylePrivate
operator|::
name|gtk_widget_modify_fg
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_modify_bg
name|Ptr_gtk_widget_modify_color
name|QGtkStylePrivate
operator|::
name|gtk_widget_modify_bg
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_arrow_new
name|Ptr_gtk_arrow_new
name|QGtkStylePrivate
operator|::
name|gtk_arrow_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_menu_item_new_with_label
name|Ptr_gtk_menu_item_new_with_label
name|QGtkStylePrivate
operator|::
name|gtk_menu_item_new_with_label
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_check_menu_item_new_with_label
name|Ptr_gtk_check_menu_item_new_with_label
name|QGtkStylePrivate
operator|::
name|gtk_check_menu_item_new_with_label
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_menu_bar_new
name|Ptr_gtk_menu_bar_new
name|QGtkStylePrivate
operator|::
name|gtk_menu_bar_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_menu_new
name|Ptr_gtk_menu_new
name|QGtkStylePrivate
operator|::
name|gtk_menu_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_button_new
name|Ptr_gtk_button_new
name|QGtkStylePrivate
operator|::
name|gtk_button_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_tool_button_new
name|Ptr_gtk_tool_button_new
name|QGtkStylePrivate
operator|::
name|gtk_tool_button_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_hbutton_box_new
name|Ptr_gtk_hbutton_box_new
name|QGtkStylePrivate
operator|::
name|gtk_hbutton_box_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_check_button_new
name|Ptr_gtk_check_button_new
name|QGtkStylePrivate
operator|::
name|gtk_check_button_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_radio_button_new
name|Ptr_gtk_radio_button_new
name|QGtkStylePrivate
operator|::
name|gtk_radio_button_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_spin_button_new
name|Ptr_gtk_spin_button_new
name|QGtkStylePrivate
operator|::
name|gtk_spin_button_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_frame_new
name|Ptr_gtk_frame_new
name|QGtkStylePrivate
operator|::
name|gtk_frame_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_expander_new
name|Ptr_gtk_expander_new
name|QGtkStylePrivate
operator|::
name|gtk_expander_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_statusbar_new
name|Ptr_gtk_statusbar_new
name|QGtkStylePrivate
operator|::
name|gtk_statusbar_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_entry_new
name|Ptr_gtk_entry_new
name|QGtkStylePrivate
operator|::
name|gtk_entry_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_hscale_new
name|Ptr_gtk_hscale_new
name|QGtkStylePrivate
operator|::
name|gtk_hscale_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_vscale_new
name|Ptr_gtk_vscale_new
name|QGtkStylePrivate
operator|::
name|gtk_vscale_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_hscrollbar_new
name|Ptr_gtk_hscrollbar_new
name|QGtkStylePrivate
operator|::
name|gtk_hscrollbar_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_vscrollbar_new
name|Ptr_gtk_vscrollbar_new
name|QGtkStylePrivate
operator|::
name|gtk_vscrollbar_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_scrolled_window_new
name|Ptr_gtk_scrolled_window_new
name|QGtkStylePrivate
operator|::
name|gtk_scrolled_window_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_notebook_new
name|Ptr_gtk_notebook_new
name|QGtkStylePrivate
operator|::
name|gtk_notebook_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_toolbar_new
name|Ptr_gtk_toolbar_new
name|QGtkStylePrivate
operator|::
name|gtk_toolbar_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_toolbar_insert
name|Ptr_gtk_toolbar_insert
name|QGtkStylePrivate
operator|::
name|gtk_toolbar_insert
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_separator_tool_item_new
name|Ptr_gtk_separator_tool_item_new
name|QGtkStylePrivate
operator|::
name|gtk_separator_tool_item_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_tree_view_new
name|Ptr_gtk_tree_view_new
name|QGtkStylePrivate
operator|::
name|gtk_tree_view_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_combo_box_new
name|Ptr_gtk_combo_box_new
name|QGtkStylePrivate
operator|::
name|gtk_combo_box_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_combo_box_entry_new
name|Ptr_gtk_combo_box_entry_new
name|QGtkStylePrivate
operator|::
name|gtk_combo_box_entry_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_progress_bar_new
name|Ptr_gtk_progress_bar_new
name|QGtkStylePrivate
operator|::
name|gtk_progress_bar_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_container_add
name|Ptr_gtk_container_add
name|QGtkStylePrivate
operator|::
name|gtk_container_add
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_menu_shell_append
name|Ptr_gtk_menu_shell_append
name|QGtkStylePrivate
operator|::
name|gtk_menu_shell_append
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_range_get_adjustment
name|Ptr_gtk_range_get_adjustment
name|QGtkStylePrivate
operator|::
name|gtk_range_get_adjustment
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_range_set_adjustment
name|Ptr_gtk_range_set_adjustment
name|QGtkStylePrivate
operator|::
name|gtk_range_set_adjustment
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_range_set_inverted
name|Ptr_gtk_range_set_inverted
name|QGtkStylePrivate
operator|::
name|gtk_range_set_inverted
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_icon_factory_lookup_default
name|Ptr_gtk_icon_factory_lookup_default
name|QGtkStylePrivate
operator|::
name|gtk_icon_factory_lookup_default
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_icon_theme_get_default
name|Ptr_gtk_icon_theme_get_default
name|QGtkStylePrivate
operator|::
name|gtk_icon_theme_get_default
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_get_style
name|Ptr_gtk_widget_get_style
name|QGtkStylePrivate
operator|::
name|gtk_widget_get_style
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_style_get
name|Ptr_gtk_widget_style_get
name|QGtkStylePrivate
operator|::
name|gtk_widget_style_get
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_icon_set_render_icon
name|Ptr_gtk_icon_set_render_icon
name|QGtkStylePrivate
operator|::
name|gtk_icon_set_render_icon
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_fixed_new
name|Ptr_gtk_fixed_new
name|QGtkStylePrivate
operator|::
name|gtk_fixed_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_tree_view_column_new
name|Ptr_gtk_tree_view_column_new
name|QGtkStylePrivate
operator|::
name|gtk_tree_view_column_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_tree_view_get_column
name|Ptr_gtk_tree_view_get_column
name|QGtkStylePrivate
operator|::
name|gtk_tree_view_get_column
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_tree_view_append_column
name|Ptr_gtk_tree_view_append_column
name|QGtkStylePrivate
operator|::
name|gtk_tree_view_append_column
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_adjustment_configure
name|Ptr_gtk_adjustment_configure
name|QGtkStylePrivate
operator|::
name|gtk_adjustment_configure
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_adjustment_new
name|Ptr_gtk_adjustment_new
name|QGtkStylePrivate
operator|::
name|gtk_adjustment_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_menu_item_set_submenu
name|Ptr_gtk_menu_item_set_submenu
name|QGtkStylePrivate
operator|::
name|gtk_menu_item_set_submenu
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_settings_get_default
name|Ptr_gtk_settings_get_default
name|QGtkStylePrivate
operator|::
name|gtk_settings_get_default
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_separator_menu_item_new
name|Ptr_gtk_separator_menu_item_new
name|QGtkStylePrivate
operator|::
name|gtk_separator_menu_item_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_size_allocate
name|Ptr_gtk_widget_size_allocate
name|QGtkStylePrivate
operator|::
name|gtk_widget_size_allocate
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_size_request
name|Ptr_gtk_widget_size_request
name|QGtkStylePrivate
operator|::
name|gtk_widget_size_request
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_set_direction
name|Ptr_gtk_widget_set_direction
name|QGtkStylePrivate
operator|::
name|gtk_widget_set_direction
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_path
name|Ptr_gtk_widget_path
name|QGtkStylePrivate
operator|::
name|gtk_widget_path
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_container_get_type
name|Ptr_gtk_container_get_type
name|QGtkStylePrivate
operator|::
name|gtk_container_get_type
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_window_get_type
name|Ptr_gtk_window_get_type
name|QGtkStylePrivate
operator|::
name|gtk_window_get_type
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_get_type
name|Ptr_gtk_widget_get_type
name|QGtkStylePrivate
operator|::
name|gtk_widget_get_type
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_get_parent
name|Ptr_gtk_widget_get_parent
name|QGtkStylePrivate
operator|::
name|gtk_widget_get_parent
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_is_toplevel
name|Ptr_gtk_widget_is_toplevel
name|QGtkStylePrivate
operator|::
name|gtk_widget_is_toplevel
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_get_toplevel
name|Ptr_gtk_widget_get_toplevel
name|QGtkStylePrivate
operator|::
name|gtk_widget_get_toplevel
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_rc_get_style_by_paths
name|Ptr_gtk_rc_get_style_by_paths
name|QGtkStylePrivate
operator|::
name|gtk_rc_get_style_by_paths
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_check_version
name|Ptr_gtk_check_version
name|QGtkStylePrivate
operator|::
name|gtk_check_version
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_border_free
name|Ptr_gtk_border_free
name|QGtkStylePrivate
operator|::
name|gtk_border_free
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_get_allocation
name|Ptr_gtk_widget_get_allocation
name|QGtkStylePrivate
operator|::
name|gtk_widget_get_allocation
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_set_allocation
name|Ptr_gtk_widget_set_allocation
name|QGtkStylePrivate
operator|::
name|gtk_widget_set_allocation
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_set_can_default
name|Ptr_gtk_widget_set_can_default
name|QGtkStylePrivate
operator|::
name|gtk_widget_set_can_default
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_window_set_default
name|Ptr_gtk_window_set_default
name|QGtkStylePrivate
operator|::
name|gtk_window_set_default
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gdk_event_new
name|Ptr_gdk_event_new
name|QGtkStylePrivate
operator|::
name|gdk_event_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gdk_event_free
name|Ptr_gdk_event_free
name|QGtkStylePrivate
operator|::
name|gdk_event_free
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_widget_send_focus_change
name|Ptr_gtk_widget_send_focus_change
name|QGtkStylePrivate
operator|::
name|gtk_widget_send_focus_change
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pango_font_description_get_size
name|Ptr_pango_font_description_get_size
name|QGtkStylePrivate
operator|::
name|pango_font_description_get_size
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pango_font_description_get_weight
name|Ptr_pango_font_description_get_weight
name|QGtkStylePrivate
operator|::
name|pango_font_description_get_weight
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pango_font_description_get_family
name|Ptr_pango_font_description_get_family
name|QGtkStylePrivate
operator|::
name|pango_font_description_get_family
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pango_font_description_get_style
name|Ptr_pango_font_description_get_style
name|QGtkStylePrivate
operator|::
name|pango_font_description_get_style
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_file_filter_new
name|Ptr_gtk_file_filter_new
name|QGtkStylePrivate
operator|::
name|gtk_file_filter_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_file_filter_set_name
name|Ptr_gtk_file_filter_set_name
name|QGtkStylePrivate
operator|::
name|gtk_file_filter_set_name
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_file_filter_add_pattern
name|Ptr_gtk_file_filter_add_pattern
name|QGtkStylePrivate
operator|::
name|gtk_file_filter_add_pattern
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_file_chooser_add_filter
name|Ptr_gtk_file_chooser_add_filter
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_add_filter
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_file_chooser_set_filter
name|Ptr_gtk_file_chooser_set_filter
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_set_filter
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_file_chooser_get_filter
name|Ptr_gtk_file_chooser_get_filter
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_get_filter
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_file_chooser_dialog_new
name|Ptr_gtk_file_chooser_dialog_new
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_dialog_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_file_chooser_set_current_folder
name|Ptr_gtk_file_chooser_set_current_folder
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_set_current_folder
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_file_chooser_get_filename
name|Ptr_gtk_file_chooser_get_filename
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_get_filename
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_file_chooser_get_filenames
name|Ptr_gtk_file_chooser_get_filenames
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_get_filenames
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_file_chooser_set_current_name
name|Ptr_gtk_file_chooser_set_current_name
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_set_current_name
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_dialog_run
name|Ptr_gtk_dialog_run
name|QGtkStylePrivate
operator|::
name|gtk_dialog_run
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gtk_file_chooser_set_filename
name|Ptr_gtk_file_chooser_set_filename
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_set_filename
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gdk_pixbuf_get_pixels
name|Ptr_gdk_pixbuf_get_pixels
name|QGtkStylePrivate
operator|::
name|gdk_pixbuf_get_pixels
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gdk_pixbuf_get_width
name|Ptr_gdk_pixbuf_get_width
name|QGtkStylePrivate
operator|::
name|gdk_pixbuf_get_width
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gdk_pixbuf_get_height
name|Ptr_gdk_pixbuf_get_height
name|QGtkStylePrivate
operator|::
name|gdk_pixbuf_get_height
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gdk_pixbuf_new
name|Ptr_gdk_pixbuf_new
name|QGtkStylePrivate
operator|::
name|gdk_pixbuf_new
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gdk_pixbuf_unref
name|Ptr_gdk_pixbuf_unref
name|QGtkStylePrivate
operator|::
name|gdk_pixbuf_unref
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gdk_color_free
name|Ptr_gdk_color_free
name|QGtkStylePrivate
operator|::
name|gdk_color_free
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gdk_x11_window_set_user_time
name|Ptr_gdk_x11_window_set_user_time
name|QGtkStylePrivate
operator|::
name|gdk_x11_window_set_user_time
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gdk_x11_drawable_get_xid
name|Ptr_gdk_x11_drawable_get_xid
name|QGtkStylePrivate
operator|::
name|gdk_x11_drawable_get_xid
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gdk_x11_drawable_get_xdisplay
name|Ptr_gdk_x11_drawable_get_xdisplay
name|QGtkStylePrivate
operator|::
name|gdk_x11_drawable_get_xdisplay
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gconf_client_get_default
name|Ptr_gconf_client_get_default
name|QGtkStylePrivate
operator|::
name|gconf_client_get_default
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gconf_client_get_string
name|Ptr_gconf_client_get_string
name|QGtkStylePrivate
operator|::
name|gconf_client_get_string
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gconf_client_get_bool
name|Ptr_gconf_client_get_bool
name|QGtkStylePrivate
operator|::
name|gconf_client_get_bool
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gnome_icon_lookup_sync
name|Ptr_gnome_icon_lookup_sync
name|QGtkStylePrivate
operator|::
name|gnome_icon_lookup_sync
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gnome_vfs_init
name|Ptr_gnome_vfs_init
name|QGtkStylePrivate
operator|::
name|gnome_vfs_init
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_MAC
end_ifndef
begin_typedef
DECL|typedef|x11ErrorHandler
typedef|typedef
name|int
function_decl|(
modifier|*
name|x11ErrorHandler
function_decl|)
parameter_list|(
name|Display
modifier|*
parameter_list|,
name|XErrorEvent
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
parameter_list|(
name|QGtkStylePrivate
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|gtkStyleSetCallback
specifier|static
name|void
name|gtkStyleSetCallback
parameter_list|(
name|GtkWidget
modifier|*
parameter_list|)
block|{
name|qRegisterMetaType
argument_list|<
name|QGtkStylePrivate
operator|*
argument_list|>
argument_list|()
expr_stmt|;
comment|// We have to let this function return and complete the event
comment|// loop to ensure that all gtk widgets have been styled before
comment|// updating
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|styleScheduler
argument_list|()
argument_list|,
literal|"updateTheme"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|update_toolbar_style
specifier|static
name|void
name|update_toolbar_style
parameter_list|(
name|GtkWidget
modifier|*
name|gtkToolBar
parameter_list|,
name|GParamSpec
modifier|*
parameter_list|,
name|gpointer
parameter_list|)
block|{
name|GtkToolbarStyle
name|toolbar_style
init|=
name|GTK_TOOLBAR_ICONS
decl_stmt|;
name|g_object_get
argument_list|(
name|gtkToolBar
argument_list|,
literal|"toolbar-style"
argument_list|,
operator|&
name|toolbar_style
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|QWidgetList
name|widgets
init|=
name|QApplication
operator|::
name|allWidgets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|widgets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|widget
init|=
name|widgets
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|qobject_cast
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|QEvent
name|event
argument_list|(
name|QEvent
operator|::
name|StyleChange
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|classPath
specifier|static
name|QHashableLatin1Literal
name|classPath
parameter_list|(
name|GtkWidget
modifier|*
name|widget
parameter_list|)
block|{
name|char
modifier|*
name|class_path
decl_stmt|;
name|QGtkStylePrivate
operator|::
name|gtk_widget_path
argument_list|(
name|widget
argument_list|,
name|NULL
argument_list|,
operator|&
name|class_path
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|char
modifier|*
name|copy
init|=
name|class_path
decl_stmt|;
if|if
condition|(
name|strncmp
argument_list|(
name|copy
argument_list|,
literal|"GtkWindow."
argument_list|,
literal|10
argument_list|)
operator|==
literal|0
condition|)
name|copy
operator|+=
literal|10
expr_stmt|;
if|if
condition|(
name|strncmp
argument_list|(
name|copy
argument_list|,
literal|"GtkFixed."
argument_list|,
literal|9
argument_list|)
operator|==
literal|0
condition|)
name|copy
operator|+=
literal|9
expr_stmt|;
name|copy
operator|=
name|strdup
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|g_free
argument_list|(
name|class_path
argument_list|)
expr_stmt|;
return|return
name|QHashableLatin1Literal
operator|::
name|fromData
argument_list|(
name|copy
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|eventFilter
name|bool
name|QGtkStyleFilter
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|obj
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ApplicationPaletteChange
condition|)
block|{
comment|// Only do this the first time since this will also
comment|// generate applicationPaletteChange events
if|if
condition|(
operator|!
name|qt_app_palettes_hash
argument_list|()
operator|||
name|qt_app_palettes_hash
argument_list|()
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
name|stylePrivate
operator|->
name|applyCustomPaletteHash
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|QObject
operator|::
name|eventFilter
argument_list|(
name|obj
argument_list|,
name|e
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
DECL|member|instances
name|QList
argument_list|<
name|QGtkStylePrivate
modifier|*
argument_list|>
name|QGtkStylePrivate
operator|::
name|instances
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|widgetMap
name|QGtkStylePrivate
operator|::
name|WidgetMap
modifier|*
name|QGtkStylePrivate
operator|::
name|widgetMap
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QGtkStylePrivate
name|QGtkStylePrivate
operator|::
name|QGtkStylePrivate
parameter_list|()
member_init_list|:
name|QCommonStylePrivate
argument_list|()
member_init_list|,
name|filter
argument_list|(
name|this
argument_list|)
block|{
name|instances
operator|.
name|append
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|animationFps
operator|=
literal|60
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGtkStylePrivate
name|QGtkStylePrivate
operator|::
name|~
name|QGtkStylePrivate
parameter_list|()
block|{
name|instances
operator|.
name|removeOne
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|init
name|void
name|QGtkStylePrivate
operator|::
name|init
parameter_list|()
block|{
name|resolveGtk
argument_list|()
expr_stmt|;
name|initGtkWidgets
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|gtkPainter
name|QGtkPainter
modifier|*
name|QGtkStylePrivate
operator|::
name|gtkPainter
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
comment|// TODO: choose between gtk2 and gtk3
specifier|static
name|QGtk2Painter
name|instance
decl_stmt|;
name|instance
operator|.
name|reset
argument_list|(
name|painter
argument_list|)
expr_stmt|;
return|return
operator|&
name|instance
return|;
block|}
end_function
begin_function
DECL|function|gtkWidget
name|GtkWidget
modifier|*
name|QGtkStylePrivate
operator|::
name|gtkWidget
parameter_list|(
specifier|const
name|QHashableLatin1Literal
modifier|&
name|path
parameter_list|)
block|{
name|GtkWidget
modifier|*
name|widget
init|=
name|gtkWidgetMap
argument_list|()
operator|->
name|value
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
block|{
comment|// Theme might have rearranged widget internals
name|widget
operator|=
name|gtkWidgetMap
argument_list|()
operator|->
name|value
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|widget
return|;
block|}
end_function
begin_function
DECL|function|gtkStyle
name|GtkStyle
modifier|*
name|QGtkStylePrivate
operator|::
name|gtkStyle
parameter_list|(
specifier|const
name|QHashableLatin1Literal
modifier|&
name|path
parameter_list|)
block|{
if|if
condition|(
name|GtkWidget
modifier|*
name|w
init|=
name|gtkWidgetMap
argument_list|()
operator|->
name|value
argument_list|(
name|path
argument_list|)
condition|)
return|return
name|QGtkStylePrivate
operator|::
name|gtk_widget_get_style
argument_list|(
name|w
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|gtkWidgetSetFocus
name|void
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
parameter_list|(
name|GtkWidget
modifier|*
name|widget
parameter_list|,
name|bool
name|focus
parameter_list|)
block|{
if|if
condition|(
name|QGtkStylePrivate
operator|::
name|gtk_widget_send_focus_change
condition|)
block|{
name|GdkEvent
modifier|*
name|event
init|=
name|QGtkStylePrivate
operator|::
name|gdk_event_new
argument_list|(
name|GDK_FOCUS_CHANGE
argument_list|)
decl_stmt|;
name|event
operator|->
name|focus_change
operator|.
name|type
operator|=
name|GDK_FOCUS_CHANGE
expr_stmt|;
name|event
operator|->
name|focus_change
operator|.
name|in
operator|=
name|focus
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gtk_widget_send_focus_change
argument_list|(
name|widget
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gdk_event_free
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|defined
argument_list|(
name|GTK_WIDGET_SET_FLAGS
argument_list|)
operator|&&
name|defined
argument_list|(
name|GTK_WIDGET_UNSET_FLAGS
argument_list|)
if|if
condition|(
name|focus
condition|)
name|GTK_WIDGET_SET_FLAGS
argument_list|(
name|widget
argument_list|,
name|GTK_HAS_FOCUS
argument_list|)
expr_stmt|;
else|else
name|GTK_WIDGET_UNSET_FLAGS
argument_list|(
name|widget
argument_list|,
name|GTK_HAS_FOCUS
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_comment
comment|/*! \internal  *  Get references to gtk functions after we dynamically load the library.  */
end_comment
begin_function
DECL|function|resolveGtk
name|void
name|QGtkStylePrivate
operator|::
name|resolveGtk
parameter_list|()
specifier|const
block|{
comment|// enforce the "0" suffix, so we'll open libgtk-x11-2.0.so.0
name|QLibrary
name|libgtk
argument_list|(
name|QLS
argument_list|(
literal|"gtk-x11-2.0"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|gtk_init
operator|=
operator|(
name|Ptr_gtk_init
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_init"
argument_list|)
expr_stmt|;
name|gtk_window_new
operator|=
operator|(
name|Ptr_gtk_window_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_window_new"
argument_list|)
expr_stmt|;
name|gtk_style_attach
operator|=
operator|(
name|Ptr_gtk_style_attach
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_style_attach"
argument_list|)
expr_stmt|;
name|gtk_widget_destroy
operator|=
operator|(
name|Ptr_gtk_widget_destroy
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_destroy"
argument_list|)
expr_stmt|;
name|gtk_widget_realize
operator|=
operator|(
name|Ptr_gtk_widget_realize
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_realize"
argument_list|)
expr_stmt|;
name|gtk_file_chooser_set_current_folder
operator|=
operator|(
name|Ptr_gtk_file_chooser_set_current_folder
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_file_chooser_set_current_folder"
argument_list|)
expr_stmt|;
name|gtk_file_filter_new
operator|=
operator|(
name|Ptr_gtk_file_filter_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_file_filter_new"
argument_list|)
expr_stmt|;
name|gtk_file_filter_set_name
operator|=
operator|(
name|Ptr_gtk_file_filter_set_name
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_file_filter_set_name"
argument_list|)
expr_stmt|;
name|gtk_file_filter_add_pattern
operator|=
operator|(
name|Ptr_gtk_file_filter_add_pattern
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_file_filter_add_pattern"
argument_list|)
expr_stmt|;
name|gtk_file_chooser_add_filter
operator|=
operator|(
name|Ptr_gtk_file_chooser_add_filter
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_file_chooser_add_filter"
argument_list|)
expr_stmt|;
name|gtk_file_chooser_set_filter
operator|=
operator|(
name|Ptr_gtk_file_chooser_set_filter
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_file_chooser_set_filter"
argument_list|)
expr_stmt|;
name|gtk_file_chooser_get_filter
operator|=
operator|(
name|Ptr_gtk_file_chooser_get_filter
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_file_chooser_get_filter"
argument_list|)
expr_stmt|;
name|gtk_file_chooser_dialog_new
operator|=
operator|(
name|Ptr_gtk_file_chooser_dialog_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_file_chooser_dialog_new"
argument_list|)
expr_stmt|;
name|gtk_file_chooser_set_current_folder
operator|=
operator|(
name|Ptr_gtk_file_chooser_set_current_folder
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_file_chooser_set_current_folder"
argument_list|)
expr_stmt|;
name|gtk_file_chooser_get_filename
operator|=
operator|(
name|Ptr_gtk_file_chooser_get_filename
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_file_chooser_get_filename"
argument_list|)
expr_stmt|;
name|gtk_file_chooser_get_filenames
operator|=
operator|(
name|Ptr_gtk_file_chooser_get_filenames
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_file_chooser_get_filenames"
argument_list|)
expr_stmt|;
name|gtk_file_chooser_set_current_name
operator|=
operator|(
name|Ptr_gtk_file_chooser_set_current_name
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_file_chooser_set_current_name"
argument_list|)
expr_stmt|;
name|gtk_dialog_run
operator|=
operator|(
name|Ptr_gtk_dialog_run
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_dialog_run"
argument_list|)
expr_stmt|;
name|gtk_file_chooser_set_filename
operator|=
operator|(
name|Ptr_gtk_file_chooser_set_filename
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_file_chooser_set_filename"
argument_list|)
expr_stmt|;
name|gdk_pixbuf_get_pixels
operator|=
operator|(
name|Ptr_gdk_pixbuf_get_pixels
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gdk_pixbuf_get_pixels"
argument_list|)
expr_stmt|;
name|gdk_pixbuf_get_width
operator|=
operator|(
name|Ptr_gdk_pixbuf_get_width
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gdk_pixbuf_get_width"
argument_list|)
expr_stmt|;
name|gdk_pixbuf_get_height
operator|=
operator|(
name|Ptr_gdk_pixbuf_get_height
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gdk_pixbuf_get_height"
argument_list|)
expr_stmt|;
name|gdk_pixbuf_new
operator|=
operator|(
name|Ptr_gdk_pixbuf_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gdk_pixbuf_new"
argument_list|)
expr_stmt|;
name|gdk_pixbuf_unref
operator|=
operator|(
name|Ptr_gdk_pixbuf_unref
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gdk_pixbuf_unref"
argument_list|)
expr_stmt|;
name|gdk_color_free
operator|=
operator|(
name|Ptr_gdk_color_free
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gdk_color_free"
argument_list|)
expr_stmt|;
name|gdk_x11_window_set_user_time
operator|=
operator|(
name|Ptr_gdk_x11_window_set_user_time
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gdk_x11_window_set_user_time"
argument_list|)
expr_stmt|;
name|gdk_x11_drawable_get_xid
operator|=
operator|(
name|Ptr_gdk_x11_drawable_get_xid
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gdk_x11_drawable_get_xid"
argument_list|)
expr_stmt|;
name|gdk_x11_drawable_get_xdisplay
operator|=
operator|(
name|Ptr_gdk_x11_drawable_get_xdisplay
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gdk_x11_drawable_get_xdisplay"
argument_list|)
expr_stmt|;
name|gtk_widget_set_default_direction
operator|=
operator|(
name|Ptr_gtk_widget_set_default_direction
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_set_default_direction"
argument_list|)
expr_stmt|;
name|gtk_widget_modify_fg
operator|=
operator|(
name|Ptr_gtk_widget_modify_color
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_modify_fg"
argument_list|)
expr_stmt|;
name|gtk_widget_modify_bg
operator|=
operator|(
name|Ptr_gtk_widget_modify_color
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_modify_bg"
argument_list|)
expr_stmt|;
name|gtk_arrow_new
operator|=
operator|(
name|Ptr_gtk_arrow_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_arrow_new"
argument_list|)
expr_stmt|;
name|gtk_menu_item_new_with_label
operator|=
operator|(
name|Ptr_gtk_menu_item_new_with_label
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_menu_item_new_with_label"
argument_list|)
expr_stmt|;
name|gtk_check_menu_item_new_with_label
operator|=
operator|(
name|Ptr_gtk_check_menu_item_new_with_label
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_check_menu_item_new_with_label"
argument_list|)
expr_stmt|;
name|gtk_menu_bar_new
operator|=
operator|(
name|Ptr_gtk_menu_bar_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_menu_bar_new"
argument_list|)
expr_stmt|;
name|gtk_menu_new
operator|=
operator|(
name|Ptr_gtk_menu_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_menu_new"
argument_list|)
expr_stmt|;
name|gtk_toolbar_new
operator|=
operator|(
name|Ptr_gtk_toolbar_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_toolbar_new"
argument_list|)
expr_stmt|;
name|gtk_separator_tool_item_new
operator|=
operator|(
name|Ptr_gtk_separator_tool_item_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_separator_tool_item_new"
argument_list|)
expr_stmt|;
name|gtk_toolbar_insert
operator|=
operator|(
name|Ptr_gtk_toolbar_insert
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_toolbar_insert"
argument_list|)
expr_stmt|;
name|gtk_button_new
operator|=
operator|(
name|Ptr_gtk_button_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_button_new"
argument_list|)
expr_stmt|;
name|gtk_tool_button_new
operator|=
operator|(
name|Ptr_gtk_tool_button_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_tool_button_new"
argument_list|)
expr_stmt|;
name|gtk_hbutton_box_new
operator|=
operator|(
name|Ptr_gtk_hbutton_box_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_hbutton_box_new"
argument_list|)
expr_stmt|;
name|gtk_check_button_new
operator|=
operator|(
name|Ptr_gtk_check_button_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_check_button_new"
argument_list|)
expr_stmt|;
name|gtk_radio_button_new
operator|=
operator|(
name|Ptr_gtk_radio_button_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_radio_button_new"
argument_list|)
expr_stmt|;
name|gtk_notebook_new
operator|=
operator|(
name|Ptr_gtk_notebook_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_notebook_new"
argument_list|)
expr_stmt|;
name|gtk_progress_bar_new
operator|=
operator|(
name|Ptr_gtk_progress_bar_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_progress_bar_new"
argument_list|)
expr_stmt|;
name|gtk_spin_button_new
operator|=
operator|(
name|Ptr_gtk_spin_button_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_spin_button_new"
argument_list|)
expr_stmt|;
name|gtk_hscale_new
operator|=
operator|(
name|Ptr_gtk_hscale_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_hscale_new"
argument_list|)
expr_stmt|;
name|gtk_vscale_new
operator|=
operator|(
name|Ptr_gtk_vscale_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_vscale_new"
argument_list|)
expr_stmt|;
name|gtk_hscrollbar_new
operator|=
operator|(
name|Ptr_gtk_hscrollbar_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_hscrollbar_new"
argument_list|)
expr_stmt|;
name|gtk_vscrollbar_new
operator|=
operator|(
name|Ptr_gtk_vscrollbar_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_vscrollbar_new"
argument_list|)
expr_stmt|;
name|gtk_scrolled_window_new
operator|=
operator|(
name|Ptr_gtk_scrolled_window_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_scrolled_window_new"
argument_list|)
expr_stmt|;
name|gtk_menu_shell_append
operator|=
operator|(
name|Ptr_gtk_menu_shell_append
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_menu_shell_append"
argument_list|)
expr_stmt|;
name|gtk_entry_new
operator|=
operator|(
name|Ptr_gtk_entry_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_entry_new"
argument_list|)
expr_stmt|;
name|gtk_tree_view_new
operator|=
operator|(
name|Ptr_gtk_tree_view_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_tree_view_new"
argument_list|)
expr_stmt|;
name|gtk_combo_box_new
operator|=
operator|(
name|Ptr_gtk_combo_box_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_combo_box_new"
argument_list|)
expr_stmt|;
name|gtk_combo_box_entry_new
operator|=
operator|(
name|Ptr_gtk_combo_box_entry_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_combo_box_entry_new"
argument_list|)
expr_stmt|;
name|gtk_range_get_adjustment
operator|=
operator|(
name|Ptr_gtk_range_get_adjustment
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_range_get_adjustment"
argument_list|)
expr_stmt|;
name|gtk_range_set_adjustment
operator|=
operator|(
name|Ptr_gtk_range_set_adjustment
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_range_set_adjustment"
argument_list|)
expr_stmt|;
name|gtk_range_set_inverted
operator|=
operator|(
name|Ptr_gtk_range_set_inverted
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_range_set_inverted"
argument_list|)
expr_stmt|;
name|gtk_container_add
operator|=
operator|(
name|Ptr_gtk_container_add
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_container_add"
argument_list|)
expr_stmt|;
name|gtk_icon_factory_lookup_default
operator|=
operator|(
name|Ptr_gtk_icon_factory_lookup_default
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_icon_factory_lookup_default"
argument_list|)
expr_stmt|;
name|gtk_icon_theme_get_default
operator|=
operator|(
name|Ptr_gtk_icon_theme_get_default
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_icon_theme_get_default"
argument_list|)
expr_stmt|;
name|gtk_widget_get_style
operator|=
operator|(
name|Ptr_gtk_widget_get_style
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_get_style"
argument_list|)
expr_stmt|;
name|gtk_widget_style_get
operator|=
operator|(
name|Ptr_gtk_widget_style_get
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_style_get"
argument_list|)
expr_stmt|;
name|gtk_icon_set_render_icon
operator|=
operator|(
name|Ptr_gtk_icon_set_render_icon
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_icon_set_render_icon"
argument_list|)
expr_stmt|;
name|gtk_fixed_new
operator|=
operator|(
name|Ptr_gtk_fixed_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_fixed_new"
argument_list|)
expr_stmt|;
name|gtk_tree_view_column_new
operator|=
operator|(
name|Ptr_gtk_tree_view_column_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_tree_view_column_new"
argument_list|)
expr_stmt|;
name|gtk_tree_view_append_column
operator|=
operator|(
name|Ptr_gtk_tree_view_append_column
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_tree_view_append_column"
argument_list|)
expr_stmt|;
name|gtk_tree_view_get_column
operator|=
operator|(
name|Ptr_gtk_tree_view_get_column
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_tree_view_get_column"
argument_list|)
expr_stmt|;
name|gtk_adjustment_configure
operator|=
operator|(
name|Ptr_gtk_adjustment_configure
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_adjustment_configure"
argument_list|)
expr_stmt|;
name|gtk_adjustment_new
operator|=
operator|(
name|Ptr_gtk_adjustment_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_adjustment_new"
argument_list|)
expr_stmt|;
name|gtk_menu_item_set_submenu
operator|=
operator|(
name|Ptr_gtk_menu_item_set_submenu
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_menu_item_set_submenu"
argument_list|)
expr_stmt|;
name|gtk_settings_get_default
operator|=
operator|(
name|Ptr_gtk_settings_get_default
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_settings_get_default"
argument_list|)
expr_stmt|;
name|gtk_separator_menu_item_new
operator|=
operator|(
name|Ptr_gtk_separator_menu_item_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_separator_menu_item_new"
argument_list|)
expr_stmt|;
name|gtk_frame_new
operator|=
operator|(
name|Ptr_gtk_frame_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_frame_new"
argument_list|)
expr_stmt|;
name|gtk_expander_new
operator|=
operator|(
name|Ptr_gtk_expander_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_expander_new"
argument_list|)
expr_stmt|;
name|gtk_statusbar_new
operator|=
operator|(
name|Ptr_gtk_statusbar_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_statusbar_new"
argument_list|)
expr_stmt|;
name|gtk_container_forall
operator|=
operator|(
name|Ptr_gtk_container_forall
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_container_forall"
argument_list|)
expr_stmt|;
name|gtk_widget_size_allocate
operator|=
operator|(
name|Ptr_gtk_widget_size_allocate
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_size_allocate"
argument_list|)
expr_stmt|;
name|gtk_widget_size_request
operator|=
operator|(
name|Ptr_gtk_widget_size_request
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_size_request"
argument_list|)
expr_stmt|;
name|gtk_widget_set_direction
operator|=
operator|(
name|Ptr_gtk_widget_set_direction
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_set_direction"
argument_list|)
expr_stmt|;
name|gtk_widget_path
operator|=
operator|(
name|Ptr_gtk_widget_path
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_path"
argument_list|)
expr_stmt|;
name|gtk_container_get_type
operator|=
operator|(
name|Ptr_gtk_container_get_type
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_container_get_type"
argument_list|)
expr_stmt|;
name|gtk_window_get_type
operator|=
operator|(
name|Ptr_gtk_window_get_type
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_window_get_type"
argument_list|)
expr_stmt|;
name|gtk_widget_get_type
operator|=
operator|(
name|Ptr_gtk_widget_get_type
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_get_type"
argument_list|)
expr_stmt|;
name|gtk_widget_get_parent
operator|=
operator|(
name|Ptr_gtk_widget_get_parent
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_get_parent"
argument_list|)
expr_stmt|;
name|gtk_widget_is_toplevel
operator|=
operator|(
name|Ptr_gtk_widget_is_toplevel
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_is_toplevel"
argument_list|)
expr_stmt|;
name|gtk_widget_get_toplevel
operator|=
operator|(
name|Ptr_gtk_widget_get_toplevel
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_get_toplevel"
argument_list|)
expr_stmt|;
name|gtk_rc_get_style_by_paths
operator|=
operator|(
name|Ptr_gtk_rc_get_style_by_paths
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_rc_get_style_by_paths"
argument_list|)
expr_stmt|;
name|gtk_check_version
operator|=
operator|(
name|Ptr_gtk_check_version
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_check_version"
argument_list|)
expr_stmt|;
name|gtk_border_free
operator|=
operator|(
name|Ptr_gtk_border_free
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_border_free"
argument_list|)
expr_stmt|;
name|gtk_widget_get_allocation
operator|=
operator|(
name|Ptr_gtk_widget_get_allocation
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_get_allocation"
argument_list|)
expr_stmt|;
name|gtk_widget_set_allocation
operator|=
operator|(
name|Ptr_gtk_widget_set_allocation
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_set_allocation"
argument_list|)
expr_stmt|;
name|gtk_widget_set_can_default
operator|=
operator|(
name|Ptr_gtk_widget_set_can_default
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_set_can_default"
argument_list|)
expr_stmt|;
name|gtk_window_set_default
operator|=
operator|(
name|Ptr_gtk_window_set_default
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_window_set_default"
argument_list|)
expr_stmt|;
name|gdk_event_new
operator|=
operator|(
name|Ptr_gdk_event_new
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gdk_event_new"
argument_list|)
expr_stmt|;
name|gdk_event_free
operator|=
operator|(
name|Ptr_gdk_event_free
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gdk_event_free"
argument_list|)
expr_stmt|;
name|gtk_widget_send_focus_change
operator|=
operator|(
name|Ptr_gtk_widget_send_focus_change
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"gtk_widget_send_focus_change"
argument_list|)
expr_stmt|;
name|pango_font_description_get_size
operator|=
operator|(
name|Ptr_pango_font_description_get_size
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"pango_font_description_get_size"
argument_list|)
expr_stmt|;
name|pango_font_description_get_weight
operator|=
operator|(
name|Ptr_pango_font_description_get_weight
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"pango_font_description_get_weight"
argument_list|)
expr_stmt|;
name|pango_font_description_get_family
operator|=
operator|(
name|Ptr_pango_font_description_get_family
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"pango_font_description_get_family"
argument_list|)
expr_stmt|;
name|pango_font_description_get_style
operator|=
operator|(
name|Ptr_pango_font_description_get_style
operator|)
name|libgtk
operator|.
name|resolve
argument_list|(
literal|"pango_font_description_get_style"
argument_list|)
expr_stmt|;
name|gnome_icon_lookup_sync
operator|=
operator|(
name|Ptr_gnome_icon_lookup_sync
operator|)
name|QLibrary
operator|::
name|resolve
argument_list|(
name|QLS
argument_list|(
literal|"gnomeui-2"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"gnome_icon_lookup_sync"
argument_list|)
expr_stmt|;
name|gnome_vfs_init
operator|=
operator|(
name|Ptr_gnome_vfs_init
operator|)
name|QLibrary
operator|::
name|resolve
argument_list|(
name|QLS
argument_list|(
literal|"gnomevfs-2"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"gnome_vfs_init"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* \internal  * Initializes a number of gtk menu widgets.  * The widgets are cached.  */
end_comment
begin_function
DECL|function|initGtkMenu
name|void
name|QGtkStylePrivate
operator|::
name|initGtkMenu
parameter_list|()
specifier|const
block|{
comment|// Create menubar
name|GtkWidget
modifier|*
name|gtkMenuBar
init|=
name|QGtkStylePrivate
operator|::
name|gtk_menu_bar_new
argument_list|()
decl_stmt|;
name|setupGtkWidget
argument_list|(
name|gtkMenuBar
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkMenuBarItem
init|=
name|QGtkStylePrivate
operator|::
name|gtk_menu_item_new_with_label
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|gtk_menu_shell_append
argument_list|(
operator|(
name|GtkMenuShell
operator|*
operator|)
operator|(
name|gtkMenuBar
operator|)
argument_list|,
name|gtkMenuBarItem
argument_list|)
expr_stmt|;
name|gtk_widget_realize
argument_list|(
name|gtkMenuBarItem
argument_list|)
expr_stmt|;
comment|// Create menu
name|GtkWidget
modifier|*
name|gtkMenu
init|=
name|QGtkStylePrivate
operator|::
name|gtk_menu_new
argument_list|()
decl_stmt|;
name|gtk_menu_item_set_submenu
argument_list|(
operator|(
name|GtkMenuItem
operator|*
operator|)
operator|(
name|gtkMenuBarItem
operator|)
argument_list|,
name|gtkMenu
argument_list|)
expr_stmt|;
name|gtk_widget_realize
argument_list|(
name|gtkMenu
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkMenuItem
init|=
name|QGtkStylePrivate
operator|::
name|gtk_menu_item_new_with_label
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|gtk_menu_shell_append
argument_list|(
operator|(
name|GtkMenuShell
operator|*
operator|)
name|gtkMenu
argument_list|,
name|gtkMenuItem
argument_list|)
expr_stmt|;
name|gtk_widget_realize
argument_list|(
name|gtkMenuItem
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkCheckMenuItem
init|=
name|QGtkStylePrivate
operator|::
name|gtk_check_menu_item_new_with_label
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|gtk_menu_shell_append
argument_list|(
operator|(
name|GtkMenuShell
operator|*
operator|)
name|gtkMenu
argument_list|,
name|gtkCheckMenuItem
argument_list|)
expr_stmt|;
name|gtk_widget_realize
argument_list|(
name|gtkCheckMenuItem
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkMenuSeparator
init|=
name|QGtkStylePrivate
operator|::
name|gtk_separator_menu_item_new
argument_list|()
decl_stmt|;
name|gtk_menu_shell_append
argument_list|(
operator|(
name|GtkMenuShell
operator|*
operator|)
name|gtkMenu
argument_list|,
name|gtkMenuSeparator
argument_list|)
expr_stmt|;
name|addAllSubWidgets
argument_list|(
name|gtkMenuBar
argument_list|)
expr_stmt|;
name|addAllSubWidgets
argument_list|(
name|gtkMenu
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initGtkTreeview
name|void
name|QGtkStylePrivate
operator|::
name|initGtkTreeview
parameter_list|()
specifier|const
block|{
name|GtkWidget
modifier|*
name|gtkTreeView
init|=
name|gtk_tree_view_new
argument_list|()
decl_stmt|;
name|gtk_tree_view_append_column
argument_list|(
operator|(
name|GtkTreeView
operator|*
operator|)
name|gtkTreeView
argument_list|,
name|gtk_tree_view_column_new
argument_list|()
argument_list|)
expr_stmt|;
name|gtk_tree_view_append_column
argument_list|(
operator|(
name|GtkTreeView
operator|*
operator|)
name|gtkTreeView
argument_list|,
name|gtk_tree_view_column_new
argument_list|()
argument_list|)
expr_stmt|;
name|gtk_tree_view_append_column
argument_list|(
operator|(
name|GtkTreeView
operator|*
operator|)
name|gtkTreeView
argument_list|,
name|gtk_tree_view_column_new
argument_list|()
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|gtkTreeView
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* \internal  * Initializes a number of gtk widgets that we can later on use to determine some of our styles.  * The widgets are cached.  */
end_comment
begin_function
DECL|function|initGtkWidgets
name|void
name|QGtkStylePrivate
operator|::
name|initGtkWidgets
parameter_list|()
specifier|const
block|{
comment|// From gtkmain.c
name|uid_t
name|ruid
init|=
name|getuid
argument_list|()
decl_stmt|;
name|uid_t
name|rgid
init|=
name|getgid
argument_list|()
decl_stmt|;
name|uid_t
name|euid
init|=
name|geteuid
argument_list|()
decl_stmt|;
name|uid_t
name|egid
init|=
name|getegid
argument_list|()
decl_stmt|;
if|if
condition|(
name|ruid
operator|!=
name|euid
operator|||
name|rgid
operator|!=
name|egid
condition|)
block|{
name|qWarning
argument_list|(
literal|"\nThis process is currently running setuid or setgid.\nGTK+ does not allow this "
literal|"therefore Qt cannot use the GTK+ integration.\nTry launching your app using \'gksudo\', "
literal|"\'kdesudo\' or a similar tool.\n\n"
literal|"See http://www.gtk.org/setuid.html for more information.\n"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|QGtkStylePrivate
operator|::
name|gtk_init
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_MAC
comment|// Gtk will set the Qt error handler so we have to reset it afterwards
name|x11ErrorHandler
name|qt_x_errhandler
init|=
name|XSetErrorHandler
argument_list|(
literal|0
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QGtkStylePrivate
operator|::
name|gtk_init
argument_list|(
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|XSetErrorHandler
argument_list|(
name|qt_x_errhandler
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// make a window
name|GtkWidget
modifier|*
name|gtkWindow
init|=
name|QGtkStylePrivate
operator|::
name|gtk_window_new
argument_list|(
name|GTK_WINDOW_POPUP
argument_list|)
decl_stmt|;
name|QGtkStylePrivate
operator|::
name|gtk_widget_realize
argument_list|(
name|gtkWindow
argument_list|)
expr_stmt|;
name|QHashableLatin1Literal
name|widgetPath
init|=
name|QHashableLatin1Literal
operator|::
name|fromData
argument_list|(
name|strdup
argument_list|(
literal|"GtkWindow"
argument_list|)
argument_list|)
decl_stmt|;
name|removeWidgetFromMap
argument_list|(
name|widgetPath
argument_list|)
expr_stmt|;
name|gtkWidgetMap
argument_list|()
operator|->
name|insert
argument_list|(
name|widgetPath
argument_list|,
name|gtkWindow
argument_list|)
expr_stmt|;
comment|// Make all other widgets. respect the text direction
if|if
condition|(
name|qApp
operator|->
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|QGtkStylePrivate
operator|::
name|gtk_widget_set_default_direction
argument_list|(
name|GTK_TEXT_DIR_RTL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|gtkWidgetMap
argument_list|()
operator|->
name|contains
argument_list|(
literal|"GtkButton"
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkButton
init|=
name|QGtkStylePrivate
operator|::
name|gtk_button_new
argument_list|()
decl_stmt|;
name|addWidget
argument_list|(
name|gtkButton
argument_list|)
expr_stmt|;
name|g_signal_connect
argument_list|(
name|gtkButton
argument_list|,
literal|"style-set"
argument_list|,
name|G_CALLBACK
argument_list|(
name|gtkStyleSetCallback
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_tool_button_new
argument_list|(
name|NULL
argument_list|,
literal|"Qt"
argument_list|)
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_arrow_new
argument_list|(
name|GTK_ARROW_DOWN
argument_list|,
name|GTK_SHADOW_NONE
argument_list|)
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_hbutton_box_new
argument_list|()
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_check_button_new
argument_list|()
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_radio_button_new
argument_list|(
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_combo_box_new
argument_list|()
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_combo_box_entry_new
argument_list|()
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|entry
init|=
name|QGtkStylePrivate
operator|::
name|gtk_entry_new
argument_list|()
decl_stmt|;
comment|// gtk-im-context-none is supported in gtk+ since 2.19.5
comment|// and also exists in gtk3
comment|// http://git.gnome.org/browse/gtk+/tree/gtk/gtkimmulticontext.c?id=2.19.5#n33
comment|// reason that we don't use gtk-im-context-simple here is,
comment|// gtk-im-context-none has less overhead, and 2.19.5 is
comment|// relatively old. and even for older gtk+, it will fallback
comment|// to gtk-im-context-simple if gtk-im-context-none doesn't
comment|// exists.
name|g_object_set
argument_list|(
name|entry
argument_list|,
literal|"im-module"
argument_list|,
literal|"gtk-im-context-none"
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_frame_new
argument_list|(
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_expander_new
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_statusbar_new
argument_list|()
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_hscale_new
argument_list|(
operator|(
name|QGtkStylePrivate
operator|::
name|gtk_adjustment_new
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_hscrollbar_new
argument_list|(
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_scrolled_window_new
argument_list|(
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
name|initGtkMenu
argument_list|()
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_notebook_new
argument_list|()
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_progress_bar_new
argument_list|()
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_spin_button_new
argument_list|(
operator|(
name|QGtkStylePrivate
operator|::
name|gtk_adjustment_new
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|)
argument_list|,
literal|0.1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|toolbar
init|=
name|gtk_toolbar_new
argument_list|()
decl_stmt|;
name|g_signal_connect
argument_list|(
name|toolbar
argument_list|,
literal|"notify::toolbar-style"
argument_list|,
name|G_CALLBACK
argument_list|(
name|update_toolbar_style
argument_list|)
argument_list|,
name|toolbar
argument_list|)
expr_stmt|;
name|gtk_toolbar_insert
argument_list|(
operator|(
name|GtkToolbar
operator|*
operator|)
name|toolbar
argument_list|,
name|gtk_separator_tool_item_new
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|toolbar
argument_list|)
expr_stmt|;
name|initGtkTreeview
argument_list|()
expr_stmt|;
name|addWidget
argument_list|(
name|gtk_vscale_new
argument_list|(
operator|(
name|QGtkStylePrivate
operator|::
name|gtk_adjustment_new
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|addWidget
argument_list|(
name|gtk_vscrollbar_new
argument_list|(
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
comment|// Rebuild map
block|{
comment|// When styles change subwidgets can get rearranged
comment|// as with the combo box. We need to update the widget map
comment|// to reflect this;
name|QHash
argument_list|<
name|QHashableLatin1Literal
argument_list|,
name|GtkWidget
modifier|*
argument_list|>
name|oldMap
init|=
operator|*
name|gtkWidgetMap
argument_list|()
decl_stmt|;
name|gtkWidgetMap
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QHashIterator
argument_list|<
name|QHashableLatin1Literal
argument_list|,
name|GtkWidget
modifier|*
argument_list|>
name|it
argument_list|(
name|oldMap
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|strchr
argument_list|(
name|it
operator|.
name|key
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
literal|'.'
argument_list|)
condition|)
block|{
name|addAllSubWidgets
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|free
argument_list|(
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|it
operator|.
name|key
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QGtkStyle could not resolve GTK. Make sure you have installed the proper libraries."
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \internal  * destroys all previously buffered widgets.  */
end_comment
begin_function
DECL|function|cleanupGtkWidgets
name|void
name|QGtkStylePrivate
operator|::
name|cleanupGtkWidgets
parameter_list|()
block|{
if|if
condition|(
operator|!
name|widgetMap
condition|)
return|return;
if|if
condition|(
name|widgetMap
operator|->
name|contains
argument_list|(
literal|"GtkWindow"
argument_list|)
condition|)
comment|// Gtk will destroy all children
name|gtk_widget_destroy
argument_list|(
name|widgetMap
operator|->
name|value
argument_list|(
literal|"GtkWindow"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|QHash
argument_list|<
name|QHashableLatin1Literal
argument_list|,
name|GtkWidget
operator|*
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|widgetMap
operator|->
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|widgetMap
operator|->
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|free
argument_list|(
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|it
operator|.
name|key
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resolveGConf
specifier|static
name|bool
name|resolveGConf
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGtkStylePrivate
operator|::
name|gconf_client_get_default
condition|)
block|{
name|QGtkStylePrivate
operator|::
name|gconf_client_get_default
operator|=
operator|(
name|Ptr_gconf_client_get_default
operator|)
name|QLibrary
operator|::
name|resolve
argument_list|(
name|QLS
argument_list|(
literal|"gconf-2"
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|"gconf_client_get_default"
argument_list|)
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gconf_client_get_string
operator|=
operator|(
name|Ptr_gconf_client_get_string
operator|)
name|QLibrary
operator|::
name|resolve
argument_list|(
name|QLS
argument_list|(
literal|"gconf-2"
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|"gconf_client_get_string"
argument_list|)
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gconf_client_get_bool
operator|=
operator|(
name|Ptr_gconf_client_get_bool
operator|)
name|QLibrary
operator|::
name|resolve
argument_list|(
name|QLS
argument_list|(
literal|"gconf-2"
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|"gconf_client_get_bool"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|QGtkStylePrivate
operator|::
name|gconf_client_get_default
operator|!=
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|getGConfString
name|QString
name|QGtkStylePrivate
operator|::
name|getGConfString
parameter_list|(
specifier|const
name|QString
modifier|&
name|value
parameter_list|,
specifier|const
name|QString
modifier|&
name|fallback
parameter_list|)
block|{
name|QString
name|retVal
init|=
name|fallback
decl_stmt|;
if|if
condition|(
name|resolveGConf
argument_list|()
condition|)
block|{
name|g_type_init
argument_list|()
expr_stmt|;
name|GConfClient
modifier|*
name|client
init|=
name|gconf_client_get_default
argument_list|()
decl_stmt|;
name|GError
modifier|*
name|err
init|=
literal|0
decl_stmt|;
name|char
modifier|*
name|str
init|=
name|gconf_client_get_string
argument_list|(
name|client
argument_list|,
name|qPrintable
argument_list|(
name|value
argument_list|)
argument_list|,
operator|&
name|err
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|err
condition|)
block|{
name|retVal
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|g_free
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
name|g_object_unref
argument_list|(
name|client
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
condition|)
name|g_error_free
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
end_function
begin_function
DECL|function|getGConfBool
name|bool
name|QGtkStylePrivate
operator|::
name|getGConfBool
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|bool
name|fallback
parameter_list|)
block|{
name|bool
name|retVal
init|=
name|fallback
decl_stmt|;
if|if
condition|(
name|resolveGConf
argument_list|()
condition|)
block|{
name|g_type_init
argument_list|()
expr_stmt|;
name|GConfClient
modifier|*
name|client
init|=
name|gconf_client_get_default
argument_list|()
decl_stmt|;
name|GError
modifier|*
name|err
init|=
literal|0
decl_stmt|;
name|bool
name|result
init|=
name|gconf_client_get_bool
argument_list|(
name|client
argument_list|,
name|qPrintable
argument_list|(
name|key
argument_list|)
argument_list|,
operator|&
name|err
argument_list|)
decl_stmt|;
name|g_object_unref
argument_list|(
name|client
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|err
condition|)
name|retVal
operator|=
name|result
expr_stmt|;
else|else
name|g_error_free
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
end_function
begin_function
DECL|function|getThemeName
name|QString
name|QGtkStylePrivate
operator|::
name|getThemeName
parameter_list|()
block|{
name|QString
name|themeName
decl_stmt|;
comment|// Read the theme name from GtkSettings
name|GtkSettings
modifier|*
name|settings
init|=
name|QGtkStylePrivate
operator|::
name|gtk_settings_get_default
argument_list|()
decl_stmt|;
name|gchararray
name|value
decl_stmt|;
name|g_object_get
argument_list|(
name|settings
argument_list|,
literal|"gtk-theme-name"
argument_list|,
operator|&
name|value
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|themeName
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|g_free
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|themeName
return|;
block|}
end_function
begin_comment
comment|// Get size of the arrow controls in a GtkSpinButton
end_comment
begin_function
DECL|function|getSpinboxArrowSize
name|int
name|QGtkStylePrivate
operator|::
name|getSpinboxArrowSize
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|MIN_ARROW_WIDTH
init|=
literal|6
decl_stmt|;
name|GtkWidget
modifier|*
name|spinButton
init|=
name|gtkWidget
argument_list|(
literal|"GtkSpinButton"
argument_list|)
decl_stmt|;
name|GtkStyle
modifier|*
name|style
init|=
name|QGtkStylePrivate
operator|::
name|gtk_widget_get_style
argument_list|(
name|spinButton
argument_list|)
decl_stmt|;
name|gint
name|size
init|=
name|pango_font_description_get_size
argument_list|(
name|style
operator|->
name|font_desc
argument_list|)
decl_stmt|;
name|gint
name|arrow_size
decl_stmt|;
name|arrow_size
operator|=
name|qMax
argument_list|(
name|PANGO_PIXELS
argument_list|(
name|size
argument_list|)
argument_list|,
name|MIN_ARROW_WIDTH
argument_list|)
operator|+
name|style
operator|->
name|xthickness
expr_stmt|;
name|arrow_size
operator|+=
name|arrow_size
operator|%
literal|2
operator|+
literal|1
expr_stmt|;
return|return
name|arrow_size
return|;
block|}
end_function
begin_function
DECL|function|isKDE4Session
name|bool
name|QGtkStylePrivate
operator|::
name|isKDE4Session
parameter_list|()
block|{
specifier|static
name|int
name|version
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|version
operator|==
operator|-
literal|1
condition|)
name|version
operator|=
name|qgetenv
argument_list|(
literal|"KDE_SESSION_VERSION"
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
return|return
operator|(
name|version
operator|==
literal|4
operator|)
return|;
block|}
end_function
begin_function
DECL|function|applyCustomPaletteHash
name|void
name|QGtkStylePrivate
operator|::
name|applyCustomPaletteHash
parameter_list|()
block|{
name|QPalette
name|menuPal
init|=
name|gtkWidgetPalette
argument_list|(
literal|"GtkMenu"
argument_list|)
decl_stmt|;
name|GdkColor
name|gdkBg
init|=
name|QGtkStylePrivate
operator|::
name|gtk_widget_get_style
argument_list|(
name|gtkWidget
argument_list|(
literal|"GtkMenu"
argument_list|)
argument_list|)
operator|->
name|bg
index|[
name|GTK_STATE_NORMAL
index|]
decl_stmt|;
name|QColor
name|bgColor
argument_list|(
name|gdkBg
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkBg
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkBg
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|menuPal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|bgColor
argument_list|)
expr_stmt|;
name|menuPal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|bgColor
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setPalette
argument_list|(
name|menuPal
argument_list|,
literal|"QMenu"
argument_list|)
expr_stmt|;
name|QPalette
name|toolbarPal
init|=
name|gtkWidgetPalette
argument_list|(
literal|"GtkToolbar"
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|setPalette
argument_list|(
name|toolbarPal
argument_list|,
literal|"QToolBar"
argument_list|)
expr_stmt|;
name|QPalette
name|menuBarPal
init|=
name|gtkWidgetPalette
argument_list|(
literal|"GtkMenuBar"
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|setPalette
argument_list|(
name|menuBarPal
argument_list|,
literal|"QMenuBar"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal  *  Returns the gtk Widget that should be used to determine text foreground and background colors. */
end_comment
begin_function
DECL|function|getTextColorWidget
name|GtkWidget
modifier|*
name|QGtkStylePrivate
operator|::
name|getTextColorWidget
parameter_list|()
specifier|const
block|{
return|return
name|gtkWidget
argument_list|(
literal|"GtkEntry"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setupGtkWidget
name|void
name|QGtkStylePrivate
operator|::
name|setupGtkWidget
parameter_list|(
name|GtkWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|Q_GTK_IS_WIDGET
argument_list|(
name|widget
argument_list|)
condition|)
block|{
specifier|static
name|GtkWidget
modifier|*
name|protoLayout
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|protoLayout
condition|)
block|{
name|protoLayout
operator|=
name|QGtkStylePrivate
operator|::
name|gtk_fixed_new
argument_list|()
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gtk_container_add
argument_list|(
operator|(
name|GtkContainer
operator|*
operator|)
operator|(
name|gtkWidgetMap
argument_list|()
operator|->
name|value
argument_list|(
literal|"GtkWindow"
argument_list|)
operator|)
argument_list|,
name|protoLayout
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|protoLayout
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QGtkStylePrivate
operator|::
name|gtk_widget_get_parent
argument_list|(
name|widget
argument_list|)
operator|&&
operator|!
name|QGtkStylePrivate
operator|::
name|gtk_widget_is_toplevel
argument_list|(
name|widget
argument_list|)
condition|)
name|QGtkStylePrivate
operator|::
name|gtk_container_add
argument_list|(
operator|(
name|GtkContainer
operator|*
operator|)
operator|(
name|protoLayout
operator|)
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gtk_widget_realize
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|removeWidgetFromMap
name|void
name|QGtkStylePrivate
operator|::
name|removeWidgetFromMap
parameter_list|(
specifier|const
name|QHashableLatin1Literal
modifier|&
name|path
parameter_list|)
block|{
name|WidgetMap
modifier|*
name|map
init|=
name|gtkWidgetMap
argument_list|()
decl_stmt|;
name|WidgetMap
operator|::
name|iterator
name|it
init|=
name|map
operator|->
name|find
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|map
operator|->
name|end
argument_list|()
condition|)
block|{
name|free
argument_list|(
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|it
operator|.
name|key
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|->
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|addWidgetToMap
name|void
name|QGtkStylePrivate
operator|::
name|addWidgetToMap
parameter_list|(
name|GtkWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|Q_GTK_IS_WIDGET
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|gtk_widget_realize
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QHashableLatin1Literal
name|widgetPath
init|=
name|classPath
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|removeWidgetFromMap
argument_list|(
name|widgetPath
argument_list|)
expr_stmt|;
name|gtkWidgetMap
argument_list|()
operator|->
name|insert
argument_list|(
name|widgetPath
argument_list|,
name|widget
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|DUMP_GTK_WIDGET_TREE
name|qWarning
argument_list|(
literal|"Inserted Gtk Widget: %s"
argument_list|,
name|widgetPath
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|addAllSubWidgets
name|void
name|QGtkStylePrivate
operator|::
name|addAllSubWidgets
parameter_list|(
name|GtkWidget
modifier|*
name|widget
parameter_list|,
name|gpointer
name|v
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|addWidgetToMap
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|G_TYPE_CHECK_INSTANCE_TYPE
argument_list|(
operator|(
name|widget
operator|)
argument_list|,
name|gtk_container_get_type
argument_list|()
argument_list|)
condition|)
name|gtk_container_forall
argument_list|(
operator|(
name|GtkContainer
operator|*
operator|)
name|widget
argument_list|,
name|addAllSubWidgets
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Updates window/windowtext palette based on the indicated gtk widget
end_comment
begin_function
DECL|function|gtkWidgetPalette
name|QPalette
name|QGtkStylePrivate
operator|::
name|gtkWidgetPalette
parameter_list|(
specifier|const
name|QHashableLatin1Literal
modifier|&
name|gtkWidgetName
parameter_list|)
specifier|const
block|{
name|GtkWidget
modifier|*
name|gtkWidget
init|=
name|QGtkStylePrivate
operator|::
name|gtkWidget
argument_list|(
name|gtkWidgetName
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|gtkWidget
argument_list|)
expr_stmt|;
name|QPalette
name|pal
init|=
name|QApplication
operator|::
name|palette
argument_list|()
decl_stmt|;
name|GdkColor
name|gdkBg
init|=
name|gtk_widget_get_style
argument_list|(
name|gtkWidget
argument_list|)
operator|->
name|bg
index|[
name|GTK_STATE_NORMAL
index|]
decl_stmt|;
name|GdkColor
name|gdkText
init|=
name|gtk_widget_get_style
argument_list|(
name|gtkWidget
argument_list|)
operator|->
name|fg
index|[
name|GTK_STATE_NORMAL
index|]
decl_stmt|;
name|GdkColor
name|gdkDisabledText
init|=
name|gtk_widget_get_style
argument_list|(
name|gtkWidget
argument_list|)
operator|->
name|fg
index|[
name|GTK_STATE_INSENSITIVE
index|]
decl_stmt|;
name|QColor
name|bgColor
argument_list|(
name|gdkBg
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkBg
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkBg
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|QColor
name|textColor
argument_list|(
name|gdkText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|QColor
name|disabledTextColor
argument_list|(
name|gdkDisabledText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkDisabledText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkDisabledText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|bgColor
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|bgColor
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|textColor
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|disabledTextColor
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|textColor
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|disabledTextColor
argument_list|)
expr_stmt|;
return|return
name|pal
return|;
block|}
end_function
begin_function
DECL|function|updateTheme
name|void
name|QGtkStyleUpdateScheduler
operator|::
name|updateTheme
parameter_list|()
block|{
specifier|static
name|QString
name|oldTheme
argument_list|(
name|QLS
argument_list|(
literal|"qt_not_set"
argument_list|)
argument_list|)
decl_stmt|;
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
name|QFont
name|font
init|=
name|QGtkStylePrivate
operator|::
name|getThemeFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|font
argument_list|()
operator|!=
name|font
condition|)
name|qApp
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldTheme
operator|!=
name|QGtkStylePrivate
operator|::
name|getThemeName
argument_list|()
condition|)
block|{
name|oldTheme
operator|=
name|QGtkStylePrivate
operator|::
name|getThemeName
argument_list|()
expr_stmt|;
name|QPalette
name|newPalette
init|=
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|standardPalette
argument_list|()
decl_stmt|;
name|QApplicationPrivate
operator|::
name|setSystemPalette
argument_list|(
name|newPalette
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|newPalette
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QGtkStylePrivate
operator|::
name|instances
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QGtkStylePrivate
operator|::
name|instances
operator|.
name|last
argument_list|()
operator|->
name|initGtkWidgets
argument_list|()
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|instances
operator|.
name|last
argument_list|()
operator|->
name|applyCustomPaletteHash
argument_list|()
expr_stmt|;
block|}
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|widgets
init|=
name|QApplication
operator|::
name|allWidgets
argument_list|()
decl_stmt|;
comment|// Notify all widgets that size metrics might have changed
foreach|foreach
control|(
name|QWidget
modifier|*
name|widget
decl|,
name|widgets
control|)
block|{
name|QEvent
name|e
argument_list|(
name|QEvent
operator|::
name|StyleChange
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|QIconLoader
operator|::
name|instance
argument_list|()
operator|->
name|updateSystemTheme
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addWidget
name|void
name|QGtkStylePrivate
operator|::
name|addWidget
parameter_list|(
name|GtkWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|widget
condition|)
block|{
name|setupGtkWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|addAllSubWidgets
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Fetch the application font from the pango font description
end_comment
begin_comment
comment|// contained in the theme.
end_comment
begin_function
DECL|function|getThemeFont
name|QFont
name|QGtkStylePrivate
operator|::
name|getThemeFont
parameter_list|()
block|{
name|QFont
name|font
decl_stmt|;
name|GtkStyle
modifier|*
name|style
init|=
name|gtkStyle
argument_list|()
decl_stmt|;
if|if
condition|(
name|style
operator|&&
name|qApp
operator|->
name|desktopSettingsAware
argument_list|()
condition|)
block|{
name|PangoFontDescription
modifier|*
name|gtk_font
init|=
name|style
operator|->
name|font_desc
decl_stmt|;
name|font
operator|.
name|setPointSizeF
argument_list|(
call|(
name|float
call|)
argument_list|(
name|pango_font_description_get_size
argument_list|(
name|gtk_font
argument_list|)
argument_list|)
operator|/
name|PANGO_SCALE
argument_list|)
expr_stmt|;
name|QString
name|family
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|pango_font_description_get_family
argument_list|(
name|gtk_font
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
name|font
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|int
name|weight
init|=
name|pango_font_description_get_weight
argument_list|(
name|gtk_font
argument_list|)
decl_stmt|;
if|if
condition|(
name|weight
operator|>=
name|PANGO_WEIGHT_HEAVY
condition|)
name|font
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Black
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|>=
name|PANGO_WEIGHT_BOLD
condition|)
name|font
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|>=
name|PANGO_WEIGHT_SEMIBOLD
condition|)
name|font
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|DemiBold
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|>=
name|PANGO_WEIGHT_NORMAL
condition|)
name|font
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
else|else
name|font
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Light
argument_list|)
expr_stmt|;
name|PangoStyle
name|fontstyle
init|=
name|pango_font_description_get_style
argument_list|(
name|gtk_font
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontstyle
operator|==
name|PANGO_STYLE_ITALIC
condition|)
name|font
operator|.
name|setStyle
argument_list|(
name|QFont
operator|::
name|StyleItalic
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|fontstyle
operator|==
name|PANGO_STYLE_OBLIQUE
condition|)
name|font
operator|.
name|setStyle
argument_list|(
name|QFont
operator|::
name|StyleOblique
argument_list|)
expr_stmt|;
else|else
name|font
operator|.
name|setStyle
argument_list|(
name|QFont
operator|::
name|StyleNormal
argument_list|)
expr_stmt|;
block|}
return|return
name|font
return|;
block|}
end_function
begin_comment
comment|// ----------- Native file dialogs -----------
end_comment
begin_comment
comment|// Extract filter list from expressions of type: foo (*.a *.b *.c)"
end_comment
begin_function
DECL|function|extract_filter
name|QStringList
name|QGtkStylePrivate
operator|::
name|extract_filter
parameter_list|(
specifier|const
name|QString
modifier|&
name|rawFilter
parameter_list|)
block|{
name|QString
name|result
init|=
name|rawFilter
decl_stmt|;
name|QRegExp
name|r
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"^([^()]*)\\(([a-zA-Z0-9_.*? +;#\\-\\[\\]@\\{\\}/!<>\\$%&=^~:\\|]*)\\)$"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|r
operator|.
name|indexIn
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
name|result
operator|=
name|r
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function_decl
specifier|extern
name|QStringList
name|qt_make_filter_list
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FILEDIALOG
end_ifndef
begin_function
DECL|function|setupGtkFileChooser
name|void
name|QGtkStylePrivate
operator|::
name|setupGtkFileChooser
parameter_list|(
name|GtkWidget
modifier|*
name|gtkFileChooser
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|,
name|QFileDialog
operator|::
name|Options
name|options
parameter_list|,
name|bool
name|isSaveDialog
parameter_list|,
name|QHash
argument_list|<
name|GtkFileFilter
modifier|*
argument_list|,
name|QString
argument_list|>
modifier|*
name|filterMap
parameter_list|)
block|{
name|g_object_set
argument_list|(
name|gtkFileChooser
argument_list|,
literal|"do-overwrite-confirmation"
argument_list|,
name|gboolean
argument_list|(
operator|!
operator|(
name|options
operator|&
name|QFileDialog
operator|::
name|DontConfirmOverwrite
operator|)
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|g_object_set
argument_list|(
name|gtkFileChooser
argument_list|,
literal|"local_only"
argument_list|,
name|gboolean
argument_list|(
literal|true
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|filters
init|=
name|qt_make_filter_list
argument_list|(
name|filter
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|rawfilter
decl|,
name|filters
control|)
block|{
name|GtkFileFilter
modifier|*
name|gtkFilter
init|=
name|QGtkStylePrivate
operator|::
name|gtk_file_filter_new
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|rawfilter
operator|.
name|left
argument_list|(
name|rawfilter
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QStringList
name|extensions
init|=
name|extract_filter
argument_list|(
name|rawfilter
argument_list|)
decl_stmt|;
name|QGtkStylePrivate
operator|::
name|gtk_file_filter_set_name
argument_list|(
name|gtkFilter
argument_list|,
name|qPrintable
argument_list|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|?
name|extensions
operator|.
name|join
argument_list|(
name|QLS
argument_list|(
literal|", "
argument_list|)
argument_list|)
else|:
name|name
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|fileExtension
decl|,
name|extensions
control|)
block|{
comment|// Note Gtk file dialogs are by default case sensitive
comment|// and only supports basic glob syntax so we
comment|// rewrite .xyz to .[xX][yY][zZ]
name|QString
name|caseInsensitive
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileExtension
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QChar
name|ch
init|=
name|fileExtension
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|isLetter
argument_list|()
condition|)
block|{
name|caseInsensitive
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'['
argument_list|)
operator|+
name|ch
operator|.
name|toLower
argument_list|()
operator|+
name|ch
operator|.
name|toUpper
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|']'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|caseInsensitive
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
name|QGtkStylePrivate
operator|::
name|gtk_file_filter_add_pattern
argument_list|(
name|gtkFilter
argument_list|,
name|qPrintable
argument_list|(
name|caseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterMap
condition|)
name|filterMap
operator|->
name|insert
argument_list|(
name|gtkFilter
argument_list|,
name|rawfilter
argument_list|)
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_add_filter
argument_list|(
operator|(
name|GtkFileChooser
operator|*
operator|)
name|gtkFileChooser
argument_list|,
name|gtkFilter
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedFilter
operator|&&
operator|(
name|rawfilter
operator|==
operator|*
name|selectedFilter
operator|)
condition|)
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_set_filter
argument_list|(
operator|(
name|GtkFileChooser
operator|*
operator|)
name|gtkFileChooser
argument_list|,
name|gtkFilter
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Using the currently active window is not entirely correct, however
comment|// it gives more sensible behavior for applications that do not provide a
comment|// parent
name|QWidget
modifier|*
name|modalFor
init|=
name|parent
condition|?
name|parent
operator|->
name|window
argument_list|()
else|:
name|qApp
operator|->
name|activeWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|modalFor
condition|)
block|{
name|QGtkStylePrivate
operator|::
name|gtk_widget_realize
argument_list|(
name|gtkFileChooser
argument_list|)
expr_stmt|;
comment|// Creates X window
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|XSetTransientForHint
argument_list|(
name|QGtkStylePrivate
operator|::
name|gdk_x11_drawable_get_xdisplay
argument_list|(
name|gtkFileChooser
operator|->
name|window
argument_list|)
argument_list|,
name|QGtkStylePrivate
operator|::
name|gdk_x11_drawable_get_xid
argument_list|(
name|gtkFileChooser
operator|->
name|window
argument_list|)
argument_list|,
name|modalFor
operator|->
name|winId
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|QGtkStylePrivate
operator|::
name|gdk_x11_window_set_user_time
argument_list|(
name|gtkFileChooser
operator|->
name|window
argument_list|,
name|QX11Info
operator|::
name|appUserTime
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|}
name|QFileInfo
name|fileinfo
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|isEmpty
argument_list|()
condition|)
name|fileinfo
operator|.
name|setFile
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
expr_stmt|;
name|fileinfo
operator|.
name|makeAbsolute
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileinfo
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_set_current_folder
argument_list|(
operator|(
name|GtkFileChooser
operator|*
operator|)
name|gtkFileChooser
argument_list|,
name|qPrintable
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isSaveDialog
condition|)
block|{
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_set_current_folder
argument_list|(
operator|(
name|GtkFileChooser
operator|*
operator|)
name|gtkFileChooser
argument_list|,
name|qPrintable
argument_list|(
name|fileinfo
operator|.
name|absolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_set_current_name
argument_list|(
operator|(
name|GtkFileChooser
operator|*
operator|)
name|gtkFileChooser
argument_list|,
name|qPrintable
argument_list|(
name|fileinfo
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_set_filename
argument_list|(
operator|(
name|GtkFileChooser
operator|*
operator|)
name|gtkFileChooser
argument_list|,
name|qPrintable
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|openFilename
name|QString
name|QGtkStylePrivate
operator|::
name|openFilename
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|,
name|QFileDialog
operator|::
name|Options
name|options
parameter_list|)
block|{
name|QHash
argument_list|<
name|GtkFileFilter
modifier|*
argument_list|,
name|QString
argument_list|>
name|filterMap
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkFileChooser
init|=
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_dialog_new
argument_list|(
name|qPrintable
argument_list|(
name|caption
argument_list|)
argument_list|,
name|NULL
argument_list|,
name|GTK_FILE_CHOOSER_ACTION_OPEN
argument_list|,
name|GTK_STOCK_CANCEL
argument_list|,
name|GTK_RESPONSE_CANCEL
argument_list|,
name|GTK_STOCK_OPEN
argument_list|,
name|GTK_RESPONSE_ACCEPT
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|setupGtkFileChooser
argument_list|(
name|gtkFileChooser
argument_list|,
name|parent
argument_list|,
name|dir
argument_list|,
name|filter
argument_list|,
name|selectedFilter
argument_list|,
name|options
argument_list|,
literal|false
argument_list|,
operator|&
name|filterMap
argument_list|)
expr_stmt|;
name|QWidget
name|modal_widget
decl_stmt|;
name|modal_widget
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoChildEventsForParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modal_widget
operator|.
name|setParent
argument_list|(
name|parent
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
expr_stmt|;
name|modal_widget
operator|.
name|createWinId
argument_list|()
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|showModalWindow
argument_list|(
name|modal_widget
operator|.
name|windowHandle
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|filename
decl_stmt|;
if|if
condition|(
name|QGtkStylePrivate
operator|::
name|gtk_dialog_run
argument_list|(
operator|(
name|GtkDialog
operator|*
operator|)
name|gtkFileChooser
argument_list|)
operator|==
name|GTK_RESPONSE_ACCEPT
condition|)
block|{
name|char
modifier|*
name|gtk_filename
init|=
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_get_filename
argument_list|(
operator|(
name|GtkFileChooser
operator|*
operator|)
name|gtkFileChooser
argument_list|)
decl_stmt|;
name|filename
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|gtk_filename
argument_list|)
expr_stmt|;
name|g_free
argument_list|(
name|gtk_filename
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedFilter
condition|)
block|{
name|GtkFileFilter
modifier|*
name|gtkFilter
init|=
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_get_filter
argument_list|(
operator|(
name|GtkFileChooser
operator|*
operator|)
name|gtkFileChooser
argument_list|)
decl_stmt|;
operator|*
name|selectedFilter
operator|=
name|filterMap
operator|.
name|value
argument_list|(
name|gtkFilter
argument_list|)
expr_stmt|;
block|}
block|}
name|QApplicationPrivate
operator|::
name|hideModalWindow
argument_list|(
name|modal_widget
operator|.
name|windowHandle
argument_list|()
argument_list|)
expr_stmt|;
name|gtk_widget_destroy
argument_list|(
name|gtkFileChooser
argument_list|)
expr_stmt|;
return|return
name|filename
return|;
block|}
end_function
begin_function
DECL|function|openDirectory
name|QString
name|QGtkStylePrivate
operator|::
name|openDirectory
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
name|QFileDialog
operator|::
name|Options
name|options
parameter_list|)
block|{
name|QHash
argument_list|<
name|GtkFileFilter
modifier|*
argument_list|,
name|QString
argument_list|>
name|filterMap
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkFileChooser
init|=
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_dialog_new
argument_list|(
name|qPrintable
argument_list|(
name|caption
argument_list|)
argument_list|,
name|NULL
argument_list|,
name|GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER
argument_list|,
name|GTK_STOCK_CANCEL
argument_list|,
name|GTK_RESPONSE_CANCEL
argument_list|,
name|GTK_STOCK_OPEN
argument_list|,
name|GTK_RESPONSE_ACCEPT
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|setupGtkFileChooser
argument_list|(
name|gtkFileChooser
argument_list|,
name|parent
argument_list|,
name|dir
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|QWidget
name|modal_widget
decl_stmt|;
name|modal_widget
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoChildEventsForParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modal_widget
operator|.
name|setParent
argument_list|(
name|parent
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
expr_stmt|;
name|modal_widget
operator|.
name|createWinId
argument_list|()
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|showModalWindow
argument_list|(
name|modal_widget
operator|.
name|windowHandle
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|filename
decl_stmt|;
if|if
condition|(
name|QGtkStylePrivate
operator|::
name|gtk_dialog_run
argument_list|(
operator|(
name|GtkDialog
operator|*
operator|)
name|gtkFileChooser
argument_list|)
operator|==
name|GTK_RESPONSE_ACCEPT
condition|)
block|{
name|char
modifier|*
name|gtk_filename
init|=
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_get_filename
argument_list|(
operator|(
name|GtkFileChooser
operator|*
operator|)
name|gtkFileChooser
argument_list|)
decl_stmt|;
name|filename
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|gtk_filename
argument_list|)
expr_stmt|;
name|g_free
argument_list|(
name|gtk_filename
argument_list|)
expr_stmt|;
block|}
name|QApplicationPrivate
operator|::
name|hideModalWindow
argument_list|(
name|modal_widget
operator|.
name|windowHandle
argument_list|()
argument_list|)
expr_stmt|;
name|gtk_widget_destroy
argument_list|(
name|gtkFileChooser
argument_list|)
expr_stmt|;
return|return
name|filename
return|;
block|}
end_function
begin_function
DECL|function|openFilenames
name|QStringList
name|QGtkStylePrivate
operator|::
name|openFilenames
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|,
name|QFileDialog
operator|::
name|Options
name|options
parameter_list|)
block|{
name|QStringList
name|filenames
decl_stmt|;
name|QHash
argument_list|<
name|GtkFileFilter
modifier|*
argument_list|,
name|QString
argument_list|>
name|filterMap
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkFileChooser
init|=
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_dialog_new
argument_list|(
name|qPrintable
argument_list|(
name|caption
argument_list|)
argument_list|,
name|NULL
argument_list|,
name|GTK_FILE_CHOOSER_ACTION_OPEN
argument_list|,
name|GTK_STOCK_CANCEL
argument_list|,
name|GTK_RESPONSE_CANCEL
argument_list|,
name|GTK_STOCK_OPEN
argument_list|,
name|GTK_RESPONSE_ACCEPT
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|setupGtkFileChooser
argument_list|(
name|gtkFileChooser
argument_list|,
name|parent
argument_list|,
name|dir
argument_list|,
name|filter
argument_list|,
name|selectedFilter
argument_list|,
name|options
argument_list|,
literal|false
argument_list|,
operator|&
name|filterMap
argument_list|)
expr_stmt|;
name|g_object_set
argument_list|(
name|gtkFileChooser
argument_list|,
literal|"select-multiple"
argument_list|,
name|gboolean
argument_list|(
literal|true
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|QWidget
name|modal_widget
decl_stmt|;
name|modal_widget
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoChildEventsForParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modal_widget
operator|.
name|setParent
argument_list|(
name|parent
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
expr_stmt|;
name|modal_widget
operator|.
name|createWinId
argument_list|()
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|showModalWindow
argument_list|(
name|modal_widget
operator|.
name|windowHandle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|gtk_dialog_run
argument_list|(
operator|(
name|GtkDialog
operator|*
operator|)
name|gtkFileChooser
argument_list|)
operator|==
name|GTK_RESPONSE_ACCEPT
condition|)
block|{
name|GSList
modifier|*
name|gtk_file_names
init|=
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_get_filenames
argument_list|(
operator|(
name|GtkFileChooser
operator|*
operator|)
name|gtkFileChooser
argument_list|)
decl_stmt|;
for|for
control|(
name|GSList
modifier|*
name|iterator
init|=
name|gtk_file_names
init|;
name|iterator
condition|;
name|iterator
operator|=
name|iterator
operator|->
name|next
control|)
name|filenames
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|iterator
operator|->
name|data
argument_list|)
expr_stmt|;
name|g_slist_free
argument_list|(
name|gtk_file_names
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedFilter
condition|)
block|{
name|GtkFileFilter
modifier|*
name|gtkFilter
init|=
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_get_filter
argument_list|(
operator|(
name|GtkFileChooser
operator|*
operator|)
name|gtkFileChooser
argument_list|)
decl_stmt|;
operator|*
name|selectedFilter
operator|=
name|filterMap
operator|.
name|value
argument_list|(
name|gtkFilter
argument_list|)
expr_stmt|;
block|}
block|}
name|QApplicationPrivate
operator|::
name|hideModalWindow
argument_list|(
name|modal_widget
operator|.
name|windowHandle
argument_list|()
argument_list|)
expr_stmt|;
name|gtk_widget_destroy
argument_list|(
name|gtkFileChooser
argument_list|)
expr_stmt|;
return|return
name|filenames
return|;
block|}
end_function
begin_function
DECL|function|saveFilename
name|QString
name|QGtkStylePrivate
operator|::
name|saveFilename
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|,
name|QFileDialog
operator|::
name|Options
name|options
parameter_list|)
block|{
name|QHash
argument_list|<
name|GtkFileFilter
modifier|*
argument_list|,
name|QString
argument_list|>
name|filterMap
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkFileChooser
init|=
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_dialog_new
argument_list|(
name|qPrintable
argument_list|(
name|caption
argument_list|)
argument_list|,
name|NULL
argument_list|,
name|GTK_FILE_CHOOSER_ACTION_SAVE
argument_list|,
name|GTK_STOCK_CANCEL
argument_list|,
name|GTK_RESPONSE_CANCEL
argument_list|,
name|GTK_STOCK_SAVE
argument_list|,
name|GTK_RESPONSE_ACCEPT
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|setupGtkFileChooser
argument_list|(
name|gtkFileChooser
argument_list|,
name|parent
argument_list|,
name|dir
argument_list|,
name|filter
argument_list|,
name|selectedFilter
argument_list|,
name|options
argument_list|,
literal|true
argument_list|,
operator|&
name|filterMap
argument_list|)
expr_stmt|;
name|QWidget
name|modal_widget
decl_stmt|;
name|modal_widget
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoChildEventsForParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modal_widget
operator|.
name|setParent
argument_list|(
name|parent
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
expr_stmt|;
name|modal_widget
operator|.
name|createWinId
argument_list|()
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|showModalWindow
argument_list|(
name|modal_widget
operator|.
name|windowHandle
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|filename
decl_stmt|;
if|if
condition|(
name|QGtkStylePrivate
operator|::
name|gtk_dialog_run
argument_list|(
operator|(
name|GtkDialog
operator|*
operator|)
name|gtkFileChooser
argument_list|)
operator|==
name|GTK_RESPONSE_ACCEPT
condition|)
block|{
name|char
modifier|*
name|gtk_filename
init|=
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_get_filename
argument_list|(
operator|(
name|GtkFileChooser
operator|*
operator|)
name|gtkFileChooser
argument_list|)
decl_stmt|;
name|filename
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|gtk_filename
argument_list|)
expr_stmt|;
name|g_free
argument_list|(
name|gtk_filename
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedFilter
condition|)
block|{
name|GtkFileFilter
modifier|*
name|gtkFilter
init|=
name|QGtkStylePrivate
operator|::
name|gtk_file_chooser_get_filter
argument_list|(
operator|(
name|GtkFileChooser
operator|*
operator|)
name|gtkFileChooser
argument_list|)
decl_stmt|;
operator|*
name|selectedFilter
operator|=
name|filterMap
operator|.
name|value
argument_list|(
name|gtkFilter
argument_list|)
expr_stmt|;
block|}
block|}
name|QApplicationPrivate
operator|::
name|hideModalWindow
argument_list|(
name|modal_widget
operator|.
name|windowHandle
argument_list|()
argument_list|)
expr_stmt|;
name|gtk_widget_destroy
argument_list|(
name|gtkFileChooser
argument_list|)
expr_stmt|;
return|return
name|filename
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|getFilesystemIcon
name|QIcon
name|QGtkStylePrivate
operator|::
name|getFilesystemIcon
parameter_list|(
specifier|const
name|QFileInfo
modifier|&
name|info
parameter_list|)
block|{
name|QIcon
name|icon
decl_stmt|;
if|if
condition|(
name|gnome_vfs_init
operator|&&
name|gnome_icon_lookup_sync
condition|)
block|{
name|gnome_vfs_init
argument_list|()
expr_stmt|;
name|GtkIconTheme
modifier|*
name|theme
init|=
name|gtk_icon_theme_get_default
argument_list|()
decl_stmt|;
name|QByteArray
name|fileurl
init|=
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|info
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
operator|.
name|toEncoded
argument_list|()
decl_stmt|;
name|char
modifier|*
name|icon_name
init|=
name|gnome_icon_lookup_sync
argument_list|(
name|theme
argument_list|,
name|NULL
argument_list|,
name|fileurl
operator|.
name|data
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|GNOME_ICON_LOOKUP_FLAGS_NONE
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|QString
name|iconName
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|icon_name
argument_list|)
decl_stmt|;
name|g_free
argument_list|(
name|icon_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|iconName
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
return|return
name|QIcon
argument_list|(
name|iconName
argument_list|)
return|;
return|return
name|QIcon
operator|::
name|fromTheme
argument_list|(
name|iconName
argument_list|)
return|;
block|}
return|return
name|icon
return|;
block|}
end_function
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QHashableLatin1Literal
modifier|&
name|l1
parameter_list|,
specifier|const
name|QHashableLatin1Literal
modifier|&
name|l2
parameter_list|)
block|{
return|return
name|l1
operator|.
name|size
argument_list|()
operator|==
name|l2
operator|.
name|size
argument_list|()
operator|||
name|qstrcmp
argument_list|(
name|l1
operator|.
name|data
argument_list|()
argument_list|,
name|l2
operator|.
name|data
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
end_function
begin_comment
comment|// copied from qHash.cpp
end_comment
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|QHashableLatin1Literal
modifier|&
name|key
parameter_list|)
block|{
name|int
name|n
init|=
name|key
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|p
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|key
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|uint
name|h
init|=
literal|0
decl_stmt|;
name|uint
name|g
decl_stmt|;
while|while
condition|(
name|n
operator|--
condition|)
block|{
name|h
operator|=
operator|(
name|h
operator|<<
literal|4
operator|)
operator|+
operator|*
name|p
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|g
operator|=
operator|(
name|h
operator|&
literal|0xf0000000
operator|)
operator|)
operator|!=
literal|0
condition|)
name|h
operator|^=
name|g
operator|>>
literal|23
expr_stmt|;
name|h
operator|&=
operator|~
name|g
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(QT_NO_STYLE_GTK)
end_comment
end_unit
