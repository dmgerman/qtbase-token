begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsstyle_p.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsstyle_p_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWS
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_PLUGIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qdrawutil.h"
end_include
begin_comment
comment|// for now
end_comment
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"qmenubar.h"
end_include
begin_include
include|#
directive|include
file|<private/qmenubar_p.h>
end_include
begin_include
include|#
directive|include
file|"qpaintengine.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qrubberband.h"
end_include
begin_include
include|#
directive|include
file|"qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"qtabbar.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qmainwindow.h"
end_include
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|"qtextstream.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapcache.h"
end_include
begin_include
include|#
directive|include
file|"qwizard.h"
end_include
begin_include
include|#
directive|include
file|"qlistview.h"
end_include
begin_include
include|#
directive|include
file|<private/qmath_p.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformtheme.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qstylehelper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qstyleanimation_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|"qt_windows.h"
name|QT_END_INCLUDE_NAMESPACE
ifndef|#
directive|ifndef
name|COLOR_GRADIENTACTIVECAPTION
DECL|macro|COLOR_GRADIENTACTIVECAPTION
define|#
directive|define
name|COLOR_GRADIENTACTIVECAPTION
value|27
endif|#
directive|endif
ifndef|#
directive|ifndef
name|COLOR_GRADIENTINACTIVECAPTION
DECL|macro|COLOR_GRADIENTINACTIVECAPTION
define|#
directive|define
name|COLOR_GRADIENTINACTIVECAPTION
value|28
endif|#
directive|endif
decl|typedef struct
argument_list|{
DECL|member|cbSize
name|DWORD
name|cbSize
argument_list|;
DECL|member|hIcon
name|HICON
name|hIcon
argument_list|;
DECL|member|iSysImageIndex
name|int
name|iSysImageIndex
argument_list|;
DECL|member|iIcon
name|int
name|iIcon
argument_list|;
DECL|member|szPath
name|WCHAR
name|szPath
index|[
name|MAX_PATH
index|]
argument_list|; }
DECL|typedef|QSHSTOCKICONINFO
name|QSHSTOCKICONINFO
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|_SHGFI_SMALLICON
define|#
directive|define
name|_SHGFI_SMALLICON
value|0x000000001
end_define
begin_define
DECL|macro|_SHGFI_LARGEICON
define|#
directive|define
name|_SHGFI_LARGEICON
value|0x000000000
end_define
begin_define
DECL|macro|_SHGFI_ICON
define|#
directive|define
name|_SHGFI_ICON
value|0x000000100
end_define
begin_define
DECL|macro|_SIID_SHIELD
define|#
directive|define
name|_SIID_SHIELD
value|77
end_define
begin_typedef
DECL|typedef|PtrSHGetStockIconInfo
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrSHGetStockIconInfo
function_decl|)
parameter_list|(
name|int
name|siid
parameter_list|,
name|int
name|uFlags
parameter_list|,
name|QSHSTOCKICONINFO
modifier|*
name|psii
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|pSHGetStockIconInfo
specifier|static
name|PtrSHGetStockIconInfo
name|pSHGetStockIconInfo
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function_decl
name|Q_GUI_EXPORT
name|HICON
name|qt_pixmapToWinHICON
parameter_list|(
specifier|const
name|QPixmap
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_GUI_EXPORT
name|QPixmap
name|qt_pixmapFromWinHICON
parameter_list|(
name|HICON
name|icon
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_OS_WIN
end_comment
begin_decl_stmt
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<limits.h>
name|QT_END_INCLUDE_NAMESPACE
type|enum
DECL|enum|QSliderDirection
DECL|enumerator|SlUp
DECL|enumerator|SlDown
DECL|enumerator|SlLeft
DECL|enumerator|SlRight
name|QSliderDirection
argument_list|{
name|SlUp
argument_list|,
name|SlDown
argument_list|,
name|SlLeft
argument_list|,
name|SlRight
argument_list|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*     \internal */
end_comment
begin_constructor
DECL|function|QWindowsStylePrivate
name|QWindowsStylePrivate
operator|::
name|QWindowsStylePrivate
parameter_list|()
member_init_list|:
name|alt_down
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|menuBarTimer
argument_list|(
literal|0
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
operator|&&
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
operator|)
condition|)
block|{
name|QSystemLibrary
name|shellLib
argument_list|(
name|QLatin1String
argument_list|(
literal|"shell32"
argument_list|)
argument_list|)
decl_stmt|;
name|pSHGetStockIconInfo
operator|=
operator|(
name|PtrSHGetStockIconInfo
operator|)
name|shellLib
operator|.
name|resolve
argument_list|(
literal|"SHGetStockIconInfo"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_constructor
begin_comment
comment|// Returns true if the toplevel parent of \a widget has seen the Alt-key
end_comment
begin_function
DECL|function|hasSeenAlt
name|bool
name|QWindowsStylePrivate
operator|::
name|hasSeenAlt
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|widget
operator|=
name|widget
operator|->
name|window
argument_list|()
expr_stmt|;
return|return
name|seenAlt
operator|.
name|contains
argument_list|(
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|eventFilter
name|bool
name|QWindowsStyle
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
comment|// Records Alt- and Focus events
if|if
condition|(
operator|!
name|o
operator|->
name|isWidgetType
argument_list|()
condition|)
return|return
name|QObject
operator|::
name|eventFilter
argument_list|(
name|o
argument_list|,
name|e
argument_list|)
return|;
name|QWidget
modifier|*
name|widget
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|Q_D
argument_list|(
name|QWindowsStyle
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|KeyPress
case|:
if|if
condition|(
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Alt
condition|)
block|{
name|widget
operator|=
name|widget
operator|->
name|window
argument_list|()
expr_stmt|;
comment|// Alt has been pressed - find all widgets that care
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|l
init|=
name|widget
operator|->
name|findChildren
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|pos
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|l
operator|.
name|at
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|isWindow
argument_list|()
operator|||
operator|!
name|w
operator|->
name|isVisible
argument_list|()
operator|||
name|w
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
condition|)
name|l
operator|.
name|removeAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
comment|// Update states before repainting
name|d
operator|->
name|seenAlt
operator|.
name|append
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|d
operator|->
name|alt_down
operator|=
literal|true
expr_stmt|;
comment|// Repaint all relevant widgets
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|pos
control|)
name|l
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|QEvent
operator|::
name|KeyRelease
case|:
if|if
condition|(
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Alt
condition|)
block|{
name|widget
operator|=
name|widget
operator|->
name|window
argument_list|()
expr_stmt|;
comment|// Update state and repaint the menu bars.
name|d
operator|->
name|alt_down
operator|=
literal|false
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
name|QList
argument_list|<
name|QMenuBar
modifier|*
argument_list|>
name|l
init|=
name|widget
operator|->
name|findChildren
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|update
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
break|break;
case|case
name|QEvent
operator|::
name|Close
case|:
comment|// Reset widget when closing
name|d
operator|->
name|seenAlt
operator|.
name|removeAll
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|d
operator|->
name|seenAlt
operator|.
name|removeAll
argument_list|(
name|widget
operator|->
name|window
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|QCommonStyle
operator|::
name|eventFilter
argument_list|(
name|o
argument_list|,
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsStyle     \brief The QWindowsStyle class provides a Microsoft Windows-like look and feel.      \ingroup appearance     \inmodule QtWidgets     \internal      This style is Qt's default GUI style on Windows.      \image qwindowsstyle.png     \sa QWindowsVistaStyle, QMacStyle, QFusionStyle */
end_comment
begin_comment
comment|/*!     Constructs a QWindowsStyle object. */
end_comment
begin_constructor
DECL|function|QWindowsStyle
name|QWindowsStyle
operator|::
name|QWindowsStyle
parameter_list|()
member_init_list|:
name|QCommonStyle
argument_list|(
operator|*
operator|new
name|QWindowsStylePrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \internal      Constructs a QWindowsStyle object. */
end_comment
begin_constructor
DECL|function|QWindowsStyle
name|QWindowsStyle
operator|::
name|QWindowsStyle
parameter_list|(
name|QWindowsStylePrivate
modifier|&
name|dd
parameter_list|)
member_init_list|:
name|QCommonStyle
argument_list|(
name|dd
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*! Destroys the QWindowsStyle object. */
end_comment
begin_destructor
DECL|function|~QWindowsStyle
name|QWindowsStyle
operator|::
name|~
name|QWindowsStyle
parameter_list|()
block|{ }
end_destructor
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_function
DECL|function|colorref2qrgb
specifier|static
specifier|inline
name|QRgb
name|colorref2qrgb
parameter_list|(
name|COLORREF
name|col
parameter_list|)
block|{
return|return
name|qRgb
argument_list|(
name|GetRValue
argument_list|(
name|col
argument_list|)
argument_list|,
name|GetGValue
argument_list|(
name|col
argument_list|)
argument_list|,
name|GetBValue
argument_list|(
name|col
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|polish
name|void
name|QWindowsStyle
operator|::
name|polish
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
block|{
name|QCommonStyle
operator|::
name|polish
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|QWindowsStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
comment|// We only need the overhead when shortcuts are sometimes hidden
if|if
condition|(
operator|!
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
literal|0
argument_list|)
operator|&&
name|app
condition|)
name|app
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|activeCaptionColor
operator|=
name|app
operator|->
name|palette
argument_list|()
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|d
operator|->
name|activeGradientCaptionColor
operator|=
name|app
operator|->
name|palette
argument_list|()
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|d
operator|->
name|inactiveCaptionColor
operator|=
name|app
operator|->
name|palette
argument_list|()
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|d
operator|->
name|inactiveGradientCaptionColor
operator|=
name|app
operator|->
name|palette
argument_list|()
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|d
operator|->
name|inactiveCaptionText
operator|=
name|app
operator|->
name|palette
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
comment|//fetch native title bar colors
if|if
condition|(
name|app
operator|->
name|desktopSettingsAware
argument_list|()
condition|)
block|{
name|DWORD
name|activeCaption
init|=
name|GetSysColor
argument_list|(
name|COLOR_ACTIVECAPTION
argument_list|)
decl_stmt|;
name|DWORD
name|gradientActiveCaption
init|=
name|GetSysColor
argument_list|(
name|COLOR_GRADIENTACTIVECAPTION
argument_list|)
decl_stmt|;
name|DWORD
name|inactiveCaption
init|=
name|GetSysColor
argument_list|(
name|COLOR_INACTIVECAPTION
argument_list|)
decl_stmt|;
name|DWORD
name|gradientInactiveCaption
init|=
name|GetSysColor
argument_list|(
name|COLOR_GRADIENTINACTIVECAPTION
argument_list|)
decl_stmt|;
name|DWORD
name|inactiveCaptionText
init|=
name|GetSysColor
argument_list|(
name|COLOR_INACTIVECAPTIONTEXT
argument_list|)
decl_stmt|;
name|d
operator|->
name|activeCaptionColor
operator|=
name|colorref2qrgb
argument_list|(
name|activeCaption
argument_list|)
expr_stmt|;
name|d
operator|->
name|activeGradientCaptionColor
operator|=
name|colorref2qrgb
argument_list|(
name|gradientActiveCaption
argument_list|)
expr_stmt|;
name|d
operator|->
name|inactiveCaptionColor
operator|=
name|colorref2qrgb
argument_list|(
name|inactiveCaption
argument_list|)
expr_stmt|;
name|d
operator|->
name|inactiveGradientCaptionColor
operator|=
name|colorref2qrgb
argument_list|(
name|gradientInactiveCaption
argument_list|)
expr_stmt|;
name|d
operator|->
name|inactiveCaptionText
operator|=
name|colorref2qrgb
argument_list|(
name|inactiveCaptionText
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|unpolish
name|void
name|QWindowsStyle
operator|::
name|unpolish
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
block|{
name|QCommonStyle
operator|::
name|unpolish
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|app
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|polish
name|void
name|QWindowsStyle
operator|::
name|polish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QCommonStyle
operator|::
name|polish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|unpolish
name|void
name|QWindowsStyle
operator|::
name|unpolish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QCommonStyle
operator|::
name|unpolish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|polish
name|void
name|QWindowsStyle
operator|::
name|polish
parameter_list|(
name|QPalette
modifier|&
name|pal
parameter_list|)
block|{
name|QCommonStyle
operator|::
name|polish
argument_list|(
name|pal
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|pixelMetric
name|int
name|QWindowsStyle
operator|::
name|pixelMetric
parameter_list|(
name|PixelMetric
name|pm
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|int
name|ret
decl_stmt|;
switch|switch
condition|(
name|pm
condition|)
block|{
case|case
name|PM_ButtonDefaultIndicator
case|:
case|case
name|PM_ButtonShiftHorizontal
case|:
case|case
name|PM_ButtonShiftVertical
case|:
case|case
name|PM_MenuHMargin
case|:
case|case
name|PM_MenuVMargin
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_DockWidgetSeparatorExtent
case|:
name|ret
operator|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|4.
argument_list|)
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|PM_TabBarTabShiftHorizontal
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|PM_TabBarTabShiftVertical
case|:
name|ret
operator|=
literal|2
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|PM_MaximumDragDistance
case|:
name|ret
operator|=
name|QCommonStyle
operator|::
name|pixelMetric
argument_list|(
name|PM_MaximumDragDistance
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
name|ret
operator|=
literal|60
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|PM_SliderLength
case|:
name|ret
operator|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|11.
argument_list|)
argument_list|)
expr_stmt|;
break|break;
comment|// Returns the number of pixels to use for the business part of the
comment|// slider (i.e., the non-tickmark portion). The remaining space is shared
comment|// equally between the tickmark regions.
case|case
name|PM_SliderControlThickness
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|sl
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|int
name|space
init|=
operator|(
name|sl
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|sl
operator|->
name|rect
operator|.
name|height
argument_list|()
else|:
name|sl
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|ticks
init|=
name|sl
operator|->
name|tickPosition
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksAbove
condition|)
operator|++
name|n
expr_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksBelow
condition|)
operator|++
name|n
expr_stmt|;
if|if
condition|(
operator|!
name|n
condition|)
block|{
name|ret
operator|=
name|space
expr_stmt|;
break|break;
block|}
name|int
name|thick
init|=
literal|6
decl_stmt|;
comment|// Magic constant to get 5 + 16 + 5
if|if
condition|(
name|ticks
operator|!=
name|QSlider
operator|::
name|TicksBothSides
operator|&&
name|ticks
operator|!=
name|QSlider
operator|::
name|NoTicks
condition|)
name|thick
operator|+=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|,
name|sl
argument_list|,
name|widget
argument_list|)
operator|/
literal|4
expr_stmt|;
name|space
operator|-=
name|thick
expr_stmt|;
if|if
condition|(
name|space
operator|>
literal|0
condition|)
name|thick
operator|+=
operator|(
name|space
operator|*
literal|2
operator|)
operator|/
operator|(
name|n
operator|+
literal|2
operator|)
expr_stmt|;
name|ret
operator|=
name|thick
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
literal|0
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SLIDER
ifndef|#
directive|ifndef
name|QT_NO_MENU
case|case
name|PM_MenuBarHMargin
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|PM_MenuBarVMargin
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|PM_MenuBarPanelWidth
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|PM_SmallIconSize
case|:
name|ret
operator|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|16.
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PM_LargeIconSize
case|:
name|ret
operator|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|32.
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PM_IconViewIconSize
case|:
name|ret
operator|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_LargeIconSize
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|PM_DockWidgetTitleMargin
case|:
name|ret
operator|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|2.
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PM_DockWidgetTitleBarButtonMargin
case|:
name|ret
operator|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|4.
argument_list|)
argument_list|)
expr_stmt|;
break|break;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
case|case
name|PM_DockWidgetFrameWidth
case|:
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|ret
operator|=
name|GetSystemMetrics
argument_list|(
name|SM_CXDLGFRAME
argument_list|)
expr_stmt|;
else|#
directive|else
name|ret
operator|=
name|GetSystemMetrics
argument_list|(
name|SM_CXFRAME
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
else|#
directive|else
case|case
name|PM_DockWidgetFrameWidth
case|:
name|ret
operator|=
literal|4
expr_stmt|;
break|break;
endif|#
directive|endif
comment|// Q_WS_WIN
break|break;
endif|#
directive|endif
comment|// QT_NO_MENU
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
case|case
name|PM_TitleBarHeight
case|:
if|if
condition|(
name|widget
operator|&&
operator|(
name|widget
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Tool
operator|)
condition|)
block|{
comment|// MS always use one less than they say
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|ret
operator|=
name|GetSystemMetrics
argument_list|(
name|SM_CYCAPTION
argument_list|)
operator|-
literal|1
expr_stmt|;
else|#
directive|else
name|ret
operator|=
name|GetSystemMetrics
argument_list|(
name|SM_CYSMCAPTION
argument_list|)
operator|-
literal|1
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|ret
operator|=
name|GetSystemMetrics
argument_list|(
name|SM_CYCAPTION
argument_list|)
operator|-
literal|1
expr_stmt|;
block|}
break|break;
case|case
name|PM_ScrollBarExtent
case|:
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|NONCLIENTMETRICS
name|ncm
decl_stmt|;
name|ncm
operator|.
name|cbSize
operator|=
name|FIELD_OFFSET
argument_list|(
name|NONCLIENTMETRICS
argument_list|,
name|lfMessageFont
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|LOGFONT
argument_list|)
expr_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
name|SPI_GETNONCLIENTMETRICS
argument_list|,
sizeof|sizeof
argument_list|(
name|NONCLIENTMETRICS
argument_list|)
argument_list|,
operator|&
name|ncm
argument_list|,
literal|0
argument_list|)
condition|)
name|ret
operator|=
name|qMax
argument_list|(
name|ncm
operator|.
name|iScrollHeight
argument_list|,
name|ncm
operator|.
name|iScrollWidth
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|ret
operator|=
name|QCommonStyle
operator|::
name|pixelMetric
argument_list|(
name|pm
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// Q_OS_WIN
case|case
name|PM_SplitterWidth
case|:
name|ret
operator|=
name|qMax
argument_list|(
literal|4
argument_list|,
name|QApplication
operator|::
name|globalStrut
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
break|break;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
case|case
name|PM_MdiSubWindowFrameWidth
case|:
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|ret
operator|=
name|GetSystemMetrics
argument_list|(
name|SM_CYDLGFRAME
argument_list|)
expr_stmt|;
else|#
directive|else
name|ret
operator|=
name|GetSystemMetrics
argument_list|(
name|SM_CYFRAME
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
endif|#
directive|endif
case|case
name|PM_ToolBarItemMargin
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_ToolBarItemSpacing
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|PM_ToolBarHandleExtent
case|:
name|ret
operator|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|10.
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|ret
operator|=
name|QCommonStyle
operator|::
name|pixelMetric
argument_list|(
name|pm
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!  \reimp  */
end_comment
begin_function
DECL|function|standardPixmap
name|QPixmap
name|QWindowsStyle
operator|::
name|standardPixmap
parameter_list|(
name|StandardPixmap
name|standardPixmap
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QPixmap
name|desktopIcon
decl_stmt|;
switch|switch
condition|(
name|standardPixmap
condition|)
block|{
case|case
name|SP_DriveCDIcon
case|:
case|case
name|SP_DriveDVDIcon
case|:
case|case
name|SP_DriveNetIcon
case|:
case|case
name|SP_DriveHDIcon
case|:
case|case
name|SP_DriveFDIcon
case|:
case|case
name|SP_FileIcon
case|:
case|case
name|SP_FileLinkIcon
case|:
case|case
name|SP_DirLinkIcon
case|:
case|case
name|SP_DirClosedIcon
case|:
case|case
name|SP_DesktopIcon
case|:
case|case
name|SP_ComputerIcon
case|:
case|case
name|SP_DirOpenIcon
case|:
case|case
name|SP_FileDialogNewFolder
case|:
case|case
name|SP_DirHomeIcon
case|:
case|case
name|SP_TrashIcon
case|:
case|case
name|SP_VistaShield
case|:
if|if
condition|(
specifier|const
name|QPlatformTheme
modifier|*
name|theme
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
condition|)
block|{
name|QPlatformTheme
operator|::
name|StandardPixmap
name|sp
init|=
cast|static_cast
argument_list|<
name|QPlatformTheme
operator|::
name|StandardPixmap
argument_list|>
argument_list|(
name|standardPixmap
argument_list|)
decl_stmt|;
name|desktopIcon
operator|=
name|theme
operator|->
name|standardPixmap
argument_list|(
name|sp
argument_list|,
name|QSizeF
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SP_MessageBoxInformation
case|:
case|case
name|SP_MessageBoxWarning
case|:
case|case
name|SP_MessageBoxCritical
case|:
case|case
name|SP_MessageBoxQuestion
case|:
if|if
condition|(
specifier|const
name|QPlatformTheme
modifier|*
name|theme
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
condition|)
block|{
name|QPlatformTheme
operator|::
name|StandardPixmap
name|sp
init|=
cast|static_cast
argument_list|<
name|QPlatformTheme
operator|::
name|StandardPixmap
argument_list|>
argument_list|(
name|standardPixmap
argument_list|)
decl_stmt|;
name|desktopIcon
operator|=
name|theme
operator|->
name|standardPixmap
argument_list|(
name|sp
argument_list|,
name|QSizeF
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
if|if
condition|(
operator|!
name|desktopIcon
operator|.
name|isNull
argument_list|()
condition|)
block|{
return|return
name|desktopIcon
return|;
block|}
endif|#
directive|endif
return|return
name|QCommonStyle
operator|::
name|standardPixmap
argument_list|(
name|standardPixmap
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|styleHint
name|int
name|QWindowsStyle
operator|::
name|styleHint
parameter_list|(
name|StyleHint
name|hint
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QStyleHintReturn
modifier|*
name|returnData
parameter_list|)
specifier|const
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|SH_EtchDisabledText
case|:
case|case
name|SH_Slider_SnapToValue
case|:
case|case
name|SH_PrintDialog_RightAlignButtons
case|:
case|case
name|SH_FontDialog_SelectAssociatedText
case|:
case|case
name|SH_Menu_AllowActiveAndDisabled
case|:
case|case
name|SH_MenuBar_AltKeyNavigation
case|:
case|case
name|SH_MenuBar_MouseTracking
case|:
case|case
name|SH_Menu_MouseTracking
case|:
case|case
name|SH_ComboBox_ListMouseTracking
case|:
case|case
name|SH_ScrollBar_StopMouseOverSlider
case|:
case|case
name|SH_MainWindow_SpaceBelowMenuBar
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|SH_ItemView_ShowDecorationSelected
case|:
ifndef|#
directive|ifndef
name|QT_NO_LISTVIEW
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QListView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|ret
operator|=
literal|1
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|SH_ItemView_ChangeHighlightOnFocus
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|SH_ToolBox_SelectedPageTitleBold
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
case|case
name|SH_UnderlineShortcut
case|:
block|{
name|ret
operator|=
literal|1
expr_stmt|;
name|BOOL
name|cues
init|=
literal|false
decl_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_GETKEYBOARDCUES
argument_list|,
literal|0
argument_list|,
operator|&
name|cues
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ret
operator|=
name|int
argument_list|(
name|cues
argument_list|)
expr_stmt|;
comment|// Do nothing if we always paint underlines
name|Q_D
argument_list|(
specifier|const
name|QWindowsStyle
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ret
operator|&&
name|widget
operator|&&
name|d
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
specifier|const
name|QMenuBar
modifier|*
name|menuBar
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|menuBar
operator|&&
name|qobject_cast
argument_list|<
specifier|const
name|QMenu
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|QApplication
operator|::
name|activeWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|&&
name|w
operator|!=
name|widget
condition|)
name|menuBar
operator|=
name|w
operator|->
name|findChild
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// If we paint a menu bar draw underlines if is in the keyboardState
if|if
condition|(
name|menuBar
condition|)
block|{
if|if
condition|(
name|menuBar
operator|->
name|d_func
argument_list|()
operator|->
name|keyboardState
operator|||
name|d
operator|->
name|altDown
argument_list|()
condition|)
name|ret
operator|=
literal|1
expr_stmt|;
comment|// Otherwise draw underlines if the toplevel widget has seen an alt-press
block|}
elseif|else
endif|#
directive|endif
comment|// QT_NO_MENUBAR
if|if
condition|(
name|d
operator|->
name|hasSeenAlt
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|1
expr_stmt|;
block|}
block|}
break|break;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
case|case
name|SH_RubberBand_Mask
case|:
if|if
condition|(
specifier|const
name|QStyleOptionRubberBand
modifier|*
name|rbOpt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionRubberBand
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|rbOpt
operator|->
name|shape
operator|==
name|QRubberBand
operator|::
name|Rectangle
condition|)
block|{
name|ret
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|QStyleHintReturnMask
modifier|*
name|mask
init|=
name|qstyleoption_cast
argument_list|<
name|QStyleHintReturnMask
operator|*
argument_list|>
argument_list|(
name|returnData
argument_list|)
condition|)
block|{
name|mask
operator|->
name|region
operator|=
name|opt
operator|->
name|rect
expr_stmt|;
name|int
name|size
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
name|size
operator|=
literal|4
expr_stmt|;
name|mask
operator|->
name|region
operator|-=
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|size
argument_list|,
name|size
argument_list|,
operator|-
name|size
argument_list|,
operator|-
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_RUBBERBAND
case|case
name|SH_LineEdit_PasswordCharacter
case|:
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
if|if
condition|(
name|widget
operator|&&
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
operator|&&
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
operator|)
condition|)
block|{
specifier|const
name|QFontMetrics
modifier|&
name|fm
init|=
name|widget
operator|->
name|fontMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|fm
operator|.
name|inFont
argument_list|(
name|QChar
argument_list|(
literal|0x25CF
argument_list|)
argument_list|)
condition|)
name|ret
operator|=
literal|0x25CF
expr_stmt|;
elseif|else
if|if
condition|(
name|fm
operator|.
name|inFont
argument_list|(
name|QChar
argument_list|(
literal|0x2022
argument_list|)
argument_list|)
condition|)
name|ret
operator|=
literal|0x2022
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|ret
condition|)
name|ret
operator|=
literal|'*'
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_WIZARD
case|case
name|SH_WizardStyle
case|:
name|ret
operator|=
name|QWizard
operator|::
name|ModernStyle
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|SH_ItemView_ArrowKeysNavigateIntoChildren
case|:
name|ret
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SH_DialogButtonBox_ButtonsHaveIcons
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
name|ret
operator|=
name|QCommonStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|drawPrimitive
name|void
name|QWindowsStyle
operator|::
name|drawPrimitive
parameter_list|(
name|PrimitiveElement
name|pe
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
comment|// Used to restore across fallthrough cases. Currently only used in PE_IndicatorCheckBox
name|bool
name|doRestore
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|pe
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
case|case
name|PE_IndicatorToolBarSeparator
case|:
block|{
name|QRect
name|rect
init|=
name|opt
operator|->
name|rect
decl_stmt|;
specifier|const
name|int
name|margin
init|=
literal|2
decl_stmt|;
name|QPen
name|oldPen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
specifier|const
name|int
name|offset
init|=
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|bottomLeft
argument_list|()
operator|.
name|x
argument_list|()
operator|+
name|offset
argument_list|,
name|rect
operator|.
name|bottomLeft
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|margin
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
operator|.
name|x
argument_list|()
operator|+
name|offset
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
operator|.
name|y
argument_list|()
operator|+
name|margin
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|bottomLeft
argument_list|()
operator|.
name|x
argument_list|()
operator|+
name|offset
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|bottomLeft
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|margin
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
operator|.
name|x
argument_list|()
operator|+
name|offset
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
operator|.
name|y
argument_list|()
operator|+
name|margin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Draw vertical separator
specifier|const
name|int
name|offset
init|=
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|.
name|x
argument_list|()
operator|+
name|margin
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
operator|.
name|y
argument_list|()
operator|+
name|offset
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|margin
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
operator|.
name|y
argument_list|()
operator|+
name|offset
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|.
name|x
argument_list|()
operator|+
name|margin
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
operator|.
name|y
argument_list|()
operator|+
name|offset
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|margin
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
operator|.
name|y
argument_list|()
operator|+
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_IndicatorToolBarHandle
case|:
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
name|int
name|x
init|=
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|-
literal|4
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|x
operator|-=
literal|2
expr_stmt|;
if|if
condition|(
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|>
literal|4
condition|)
block|{
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|x
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|4
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|x
operator|+
literal|3
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|4
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|>
literal|4
condition|)
block|{
name|int
name|y
init|=
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
literal|4
decl_stmt|;
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
literal|2
argument_list|,
name|y
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|4
argument_list|,
literal|3
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
literal|2
argument_list|,
name|y
operator|+
literal|3
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|4
argument_list|,
literal|3
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
endif|#
directive|endif
comment|// QT_NO_TOOLBAR
case|case
name|PE_FrameButtonTool
case|:
case|case
name|PE_PanelButtonTool
case|:
block|{
name|QPen
name|oldPen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|w
operator|&&
name|w
operator|->
name|inherits
argument_list|(
literal|"QDockWidgetTitleButton"
argument_list|)
condition|)
block|{
if|if
condition|(
specifier|const
name|QWidget
modifier|*
name|dw
init|=
name|w
operator|->
name|parentWidget
argument_list|()
condition|)
if|if
condition|(
name|dw
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|qDrawWinButton
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
name|opt
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
name|QBrush
name|fill
decl_stmt|;
name|bool
name|stippled
decl_stmt|;
name|bool
name|panel
init|=
operator|(
name|pe
operator|==
name|PE_PanelButtonTool
operator|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Sunken
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|||
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_MouseOver
operator|&&
name|opt
operator|->
name|state
operator|&
name|State_AutoRaise
operator|)
operator|)
operator|&&
operator|(
name|opt
operator|->
name|state
operator|&
name|State_On
operator|)
condition|)
block|{
name|fill
operator|=
name|QBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
name|stippled
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|fill
operator|=
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|stippled
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|opt
operator|->
name|state
operator|&
operator|(
name|State_Raised
operator||
name|State_Sunken
operator||
name|State_On
operator|)
condition|)
block|{
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_AutoRaise
condition|)
block|{
if|if
condition|(
name|opt
operator|->
name|state
operator|&
operator|(
name|State_Enabled
operator||
name|State_Sunken
operator||
name|State_On
operator|)
condition|)
block|{
if|if
condition|(
name|panel
condition|)
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
name|opt
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
literal|1
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
else|else
name|qDrawShadeRect
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
name|opt
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stippled
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qDrawWinButton
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
name|opt
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
name|panel
condition|?
operator|&
name|fill
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_PanelButtonCommand
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QBrush
name|fill
decl_stmt|;
name|State
name|flags
init|=
name|opt
operator|->
name|state
decl_stmt|;
name|QPalette
name|pal
init|=
name|opt
operator|->
name|palette
decl_stmt|;
name|QRect
name|r
init|=
name|opt
operator|->
name|rect
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Sunken
operator|)
operator|&&
operator|(
name|flags
operator|&
name|State_On
operator|)
condition|)
name|fill
operator|=
name|QBrush
argument_list|(
name|pal
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
else|else
name|fill
operator|=
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|DefaultButton
operator|&&
name|flags
operator|&
name|State_Sunken
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|pal
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|fill
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|r
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
operator|(
name|State_Raised
operator||
name|State_On
operator||
name|State_Sunken
operator|)
condition|)
block|{
name|qDrawWinButton
argument_list|(
name|p
argument_list|,
name|r
argument_list|,
name|pal
argument_list|,
name|flags
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|r
argument_list|,
name|fill
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PE_FrameDefaultButton
case|:
block|{
name|QPen
name|oldPen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|opt
operator|->
name|rect
decl_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorCheckBox
case|:
block|{
name|QBrush
name|fill
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_NoChange
condition|)
name|fill
operator|=
name|QBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|fill
operator|=
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|fill
operator|=
name|opt
operator|->
name|palette
operator|.
name|base
argument_list|()
expr_stmt|;
else|else
name|fill
operator|=
name|opt
operator|->
name|palette
operator|.
name|background
argument_list|()
expr_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|doRestore
operator|=
literal|true
expr_stmt|;
name|qDrawWinPanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_NoChange
condition|)
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Fall through!
case|case
name|PE_IndicatorViewItemCheck
case|:
if|if
condition|(
operator|!
name|doRestore
condition|)
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|doRestore
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|pe
operator|==
name|PE_IndicatorViewItemCheck
condition|)
block|{
specifier|const
name|QStyleOptionViewItem
modifier|*
name|itemViewOpt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|itemViewOpt
operator|&&
name|itemViewOpt
operator|->
name|showDecorationSelected
operator|&&
name|opt
operator|->
name|state
operator|&
name|State_Selected
condition|?
name|opt
operator|->
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
else|:
name|opt
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_NoChange
condition|)
name|p
operator|->
name|setBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
literal|11
argument_list|,
literal|11
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Off
operator|)
condition|)
block|{
name|QLineF
name|lines
index|[
literal|7
index|]
decl_stmt|;
name|int
name|i
decl_stmt|,
name|xx
decl_stmt|,
name|yy
decl_stmt|;
name|xx
operator|=
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|3
expr_stmt|;
name|yy
operator|=
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|5
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|lines
index|[
name|i
index|]
operator|=
name|QLineF
argument_list|(
name|xx
argument_list|,
name|yy
argument_list|,
name|xx
argument_list|,
name|yy
operator|+
literal|2
argument_list|)
expr_stmt|;
operator|++
name|xx
expr_stmt|;
operator|++
name|yy
expr_stmt|;
block|}
name|yy
operator|-=
literal|2
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|3
init|;
name|i
operator|<
literal|7
condition|;
operator|++
name|i
control|)
block|{
name|lines
index|[
name|i
index|]
operator|=
name|QLineF
argument_list|(
name|xx
argument_list|,
name|yy
argument_list|,
name|xx
argument_list|,
name|yy
operator|+
literal|2
argument_list|)
expr_stmt|;
operator|++
name|xx
expr_stmt|;
operator|--
name|yy
expr_stmt|;
block|}
name|p
operator|->
name|drawLines
argument_list|(
name|lines
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doRestore
condition|)
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
case|case
name|PE_FrameFocusRect
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFocusRect
modifier|*
name|fropt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFocusRect
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
comment|//### check for d->alt_down
if|if
condition|(
operator|!
operator|(
name|fropt
operator|->
name|state
operator|&
name|State_KeyboardFocusChange
operator|)
operator|&&
operator|!
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|opt
argument_list|)
condition|)
return|return;
name|QRect
name|r
init|=
name|opt
operator|->
name|rect
decl_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setBackgroundMode
argument_list|(
name|Qt
operator|::
name|TransparentMode
argument_list|)
expr_stmt|;
name|QColor
name|bg_col
init|=
name|fropt
operator|->
name|backgroundColor
decl_stmt|;
if|if
condition|(
operator|!
name|bg_col
operator|.
name|isValid
argument_list|()
condition|)
name|bg_col
operator|=
name|p
operator|->
name|background
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
comment|// Create an "XOR" color.
name|QColor
name|patternCol
argument_list|(
operator|(
name|bg_col
operator|.
name|red
argument_list|()
operator|^
literal|0xff
operator|)
operator|&
literal|0xff
argument_list|,
operator|(
name|bg_col
operator|.
name|green
argument_list|()
operator|^
literal|0xff
operator|)
operator|&
literal|0xff
argument_list|,
operator|(
name|bg_col
operator|.
name|blue
argument_list|()
operator|^
literal|0xff
operator|)
operator|&
literal|0xff
argument_list|)
decl_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|QBrush
argument_list|(
name|patternCol
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrushOrigin
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Top
name|p
operator|->
name|drawRect
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|bottom
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Bottom
name|p
operator|->
name|drawRect
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
literal|1
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|// Left
name|p
operator|->
name|drawRect
argument_list|(
name|r
operator|.
name|right
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
literal|1
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|// Right
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|PE_IndicatorRadioButton
case|:
block|{
DECL|macro|PTSARRLEN
define|#
directive|define
name|PTSARRLEN
parameter_list|(
name|x
parameter_list|)
value|sizeof(x)/(sizeof(QPoint))
specifier|static
specifier|const
name|QPoint
name|pts1
index|[]
init|=
block|{
comment|// dark lines
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|9
argument_list|)
block|,
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
block|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|)
block|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
block|,
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
block|,
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
block|,
name|QPoint
argument_list|(
literal|7
argument_list|,
literal|0
argument_list|)
block|,
name|QPoint
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
literal|9
argument_list|,
literal|1
argument_list|)
block|}
decl_stmt|;
specifier|static
specifier|const
name|QPoint
name|pts2
index|[]
init|=
block|{
comment|// black lines
name|QPoint
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
block|,
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
block|,
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
block|,
name|QPoint
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
block|,
name|QPoint
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
literal|7
argument_list|,
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
literal|9
argument_list|,
literal|2
argument_list|)
block|}
decl_stmt|;
specifier|static
specifier|const
name|QPoint
name|pts3
index|[]
init|=
block|{
comment|// background lines
name|QPoint
argument_list|(
literal|2
argument_list|,
literal|9
argument_list|)
block|,
name|QPoint
argument_list|(
literal|3
argument_list|,
literal|9
argument_list|)
block|,
name|QPoint
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|)
block|,
name|QPoint
argument_list|(
literal|7
argument_list|,
literal|10
argument_list|)
block|,
name|QPoint
argument_list|(
literal|8
argument_list|,
literal|9
argument_list|)
block|,
name|QPoint
argument_list|(
literal|9
argument_list|,
literal|9
argument_list|)
block|,
name|QPoint
argument_list|(
literal|9
argument_list|,
literal|8
argument_list|)
block|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|7
argument_list|)
block|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|4
argument_list|)
block|,
name|QPoint
argument_list|(
literal|9
argument_list|,
literal|3
argument_list|)
block|}
decl_stmt|;
specifier|static
specifier|const
name|QPoint
name|pts4
index|[]
init|=
block|{
comment|// white lines
name|QPoint
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
block|,
name|QPoint
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
block|,
name|QPoint
argument_list|(
literal|4
argument_list|,
literal|11
argument_list|)
block|,
name|QPoint
argument_list|(
literal|7
argument_list|,
literal|11
argument_list|)
block|,
name|QPoint
argument_list|(
literal|8
argument_list|,
literal|10
argument_list|)
block|,
name|QPoint
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
block|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|9
argument_list|)
block|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|8
argument_list|)
block|,
name|QPoint
argument_list|(
literal|11
argument_list|,
literal|7
argument_list|)
block|,
name|QPoint
argument_list|(
literal|11
argument_list|,
literal|4
argument_list|)
block|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|3
argument_list|)
block|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|)
block|}
decl_stmt|;
specifier|static
specifier|const
name|QPoint
name|pts5
index|[]
init|=
block|{
comment|// inner fill
name|QPoint
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
literal|7
argument_list|,
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
literal|9
argument_list|,
literal|4
argument_list|)
block|,
name|QPoint
argument_list|(
literal|9
argument_list|,
literal|7
argument_list|)
block|,
name|QPoint
argument_list|(
literal|7
argument_list|,
literal|9
argument_list|)
block|,
name|QPoint
argument_list|(
literal|4
argument_list|,
literal|9
argument_list|)
block|,
name|QPoint
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|)
block|,
name|QPoint
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
block|}
decl_stmt|;
comment|// make sure the indicator is square
name|QRect
name|ir
init|=
name|opt
operator|->
name|rect
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|<
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
condition|)
block|{
name|ir
operator|.
name|setTop
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
operator|(
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
expr_stmt|;
name|ir
operator|.
name|setHeight
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|<
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
condition|)
block|{
name|ir
operator|.
name|setLeft
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|left
argument_list|()
operator|+
operator|(
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
expr_stmt|;
name|ir
operator|.
name|setWidth
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Qt4CompatiblePainting
argument_list|)
expr_stmt|;
name|bool
name|down
init|=
name|opt
operator|->
name|state
operator|&
name|State_Sunken
decl_stmt|;
name|bool
name|enabled
init|=
name|opt
operator|->
name|state
operator|&
name|State_Enabled
decl_stmt|;
name|bool
name|on
init|=
name|opt
operator|->
name|state
operator|&
name|State_On
decl_stmt|;
name|QPolygon
name|a
decl_stmt|;
comment|//center when rect is larger than indicator size
name|int
name|xOffset
init|=
literal|0
decl_stmt|;
name|int
name|yOffset
init|=
literal|0
decl_stmt|;
name|int
name|indicatorWidth
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ExclusiveIndicatorWidth
argument_list|)
decl_stmt|;
name|int
name|indicatorHeight
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ExclusiveIndicatorWidth
argument_list|)
decl_stmt|;
if|if
condition|(
name|ir
operator|.
name|width
argument_list|()
operator|>
name|indicatorWidth
condition|)
name|xOffset
operator|+=
operator|(
name|ir
operator|.
name|width
argument_list|()
operator|-
name|indicatorWidth
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|ir
operator|.
name|height
argument_list|()
operator|>
name|indicatorHeight
condition|)
name|yOffset
operator|+=
operator|(
name|ir
operator|.
name|height
argument_list|()
operator|-
name|indicatorHeight
operator|)
operator|/
literal|2
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
name|xOffset
argument_list|,
name|yOffset
argument_list|)
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
name|ir
operator|.
name|x
argument_list|()
argument_list|,
name|ir
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|pts1
argument_list|,
name|PTSARRLEN
argument_list|(
name|pts1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|pts2
argument_list|,
name|PTSARRLEN
argument_list|(
name|pts2
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|midlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|pts3
argument_list|,
name|PTSARRLEN
argument_list|(
name|pts3
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|pts4
argument_list|,
name|PTSARRLEN
argument_list|(
name|pts4
argument_list|)
argument_list|)
expr_stmt|;
name|QColor
name|fillColor
init|=
operator|(
name|down
operator|||
operator|!
name|enabled
operator|)
condition|?
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
else|:
name|opt
operator|->
name|palette
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|fillColor
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|fillColor
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolygon
argument_list|(
name|pts5
argument_list|,
name|PTSARRLEN
argument_list|(
name|pts5
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
operator|-
name|ir
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|ir
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
comment|// restore translate
if|if
condition|(
name|on
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|ir
operator|.
name|x
argument_list|()
operator|+
literal|5
argument_list|,
name|ir
operator|.
name|y
argument_list|()
operator|+
literal|4
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|ir
operator|.
name|x
argument_list|()
operator|+
literal|4
argument_list|,
name|ir
operator|.
name|y
argument_list|()
operator|+
literal|5
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_FRAME
case|case
name|PE_Frame
case|:
case|case
name|PE_FrameMenu
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|frame
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|frame
operator|->
name|lineWidth
operator|==
literal|2
operator|||
name|pe
operator|==
name|PE_Frame
condition|)
block|{
name|QPalette
name|popupPal
init|=
name|frame
operator|->
name|palette
decl_stmt|;
if|if
condition|(
name|pe
operator|==
name|PE_FrameMenu
condition|)
block|{
name|popupPal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|frame
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|popupPal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|frame
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pe
operator|==
name|PE_Frame
operator|&&
operator|(
name|frame
operator|->
name|state
operator|&
name|State_Raised
operator|)
condition|)
name|qDrawWinButton
argument_list|(
name|p
argument_list|,
name|frame
operator|->
name|rect
argument_list|,
name|popupPal
argument_list|,
name|frame
operator|->
name|state
operator|&
name|State_Sunken
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|pe
operator|==
name|PE_Frame
operator|&&
operator|(
name|frame
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
block|{
name|popupPal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|frame
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|qDrawWinPanel
argument_list|(
name|p
argument_list|,
name|frame
operator|->
name|rect
argument_list|,
name|popupPal
argument_list|,
name|frame
operator|->
name|state
operator|&
name|State_Sunken
argument_list|)
expr_stmt|;
block|}
else|else
name|qDrawWinPanel
argument_list|(
name|p
argument_list|,
name|frame
operator|->
name|rect
argument_list|,
name|popupPal
argument_list|,
name|frame
operator|->
name|state
operator|&
name|State_Sunken
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QPalette
name|popupPal
init|=
name|opt
operator|->
name|palette
decl_stmt|;
name|popupPal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|popupPal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|qDrawWinPanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|popupPal
argument_list|,
name|opt
operator|->
name|state
operator|&
name|State_Sunken
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_FRAME
case|case
name|PE_FrameButtonBevel
case|:
case|case
name|PE_PanelButtonBevel
case|:
block|{
name|QBrush
name|fill
decl_stmt|;
name|bool
name|panel
init|=
name|pe
operator|!=
name|PE_FrameButtonBevel
decl_stmt|;
name|p
operator|->
name|setBrushOrigin
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Sunken
operator|)
operator|&&
operator|(
name|opt
operator|->
name|state
operator|&
name|State_On
operator|)
condition|)
name|fill
operator|=
name|QBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
else|else
name|fill
operator|=
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
operator|(
name|State_Raised
operator||
name|State_On
operator||
name|State_Sunken
operator|)
condition|)
block|{
name|qDrawWinButton
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
name|opt
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
name|panel
condition|?
operator|&
name|fill
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|panel
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|drawRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|PE_FrameWindow
case|:
block|{
name|QPalette
name|popupPal
init|=
name|opt
operator|->
name|palette
decl_stmt|;
name|popupPal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|popupPal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|qDrawWinPanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|popupPal
argument_list|,
name|opt
operator|->
name|state
operator|&
name|State_Sunken
argument_list|)
expr_stmt|;
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
case|case
name|PE_IndicatorDockWidgetResizeHandle
case|:
break|break;
case|case
name|PE_FrameDockWidget
case|:
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameWindow
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
case|case
name|PE_FrameStatusBarItem
case|:
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_IndicatorProgressChunk
case|:
block|{
name|bool
name|vertical
init|=
literal|false
decl_stmt|,
name|inverted
init|=
literal|false
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|pb2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|vertical
operator|=
operator|(
name|pb2
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
expr_stmt|;
name|inverted
operator|=
name|pb2
operator|->
name|invertedAppearance
expr_stmt|;
block|}
name|int
name|space
init|=
literal|2
decl_stmt|;
name|int
name|chunksize
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ProgressBarChunkWidth
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
operator|-
name|space
decl_stmt|;
if|if
condition|(
operator|!
name|vertical
condition|)
block|{
if|if
condition|(
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|<=
name|chunksize
condition|)
name|space
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|inverted
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|space
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|space
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|space
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|<=
name|chunksize
condition|)
name|space
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|inverted
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|space
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|space
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|space
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PE_FrameTabWidget
case|:
block|{
name|qDrawWinButton
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|drawControl
name|void
name|QWindowsStyle
operator|::
name|drawControl
parameter_list|(
name|ControlElement
name|ce
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|ce
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
case|case
name|CE_RubberBand
case|:
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionRubberBand
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
comment|// ### workaround for slow general painter path
name|QPixmap
name|tiledPixmap
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|QPainter
name|pixmapPainter
argument_list|(
operator|&
name|tiledPixmap
argument_list|)
decl_stmt|;
name|pixmapPainter
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|pixmapPainter
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
name|pixmapPainter
operator|.
name|setBackground
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|pixmapPainter
operator|.
name|setBackgroundMode
argument_list|(
name|Qt
operator|::
name|OpaqueMode
argument_list|)
expr_stmt|;
name|pixmapPainter
operator|.
name|drawRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|tiledPixmap
operator|.
name|width
argument_list|()
argument_list|,
name|tiledPixmap
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|pixmapPainter
operator|.
name|end
argument_list|()
expr_stmt|;
name|tiledPixmap
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|tiledPixmap
operator|.
name|toImage
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|QRect
name|r
init|=
name|opt
operator|->
name|rect
decl_stmt|;
name|QStyleHintReturnMask
name|mask
decl_stmt|;
if|if
condition|(
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_RubberBand_Mask
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|,
operator|&
name|mask
argument_list|)
condition|)
name|p
operator|->
name|setClipRegion
argument_list|(
name|mask
operator|.
name|region
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawTiledPixmap
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|tiledPixmap
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
return|return;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_RUBBERBAND
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_MENU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_MAINWINDOW
argument_list|)
case|case
name|CE_MenuBarEmptyArea
case|:
if|if
condition|(
name|widget
operator|&&
name|qobject_cast
argument_list|<
specifier|const
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
name|QPen
name|oldPen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MENU
case|case
name|CE_MenuItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|menuitem
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|int
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
name|menuitem
operator|->
name|rect
operator|.
name|getRect
argument_list|(
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
name|int
name|tab
init|=
name|menuitem
operator|->
name|tabWidth
decl_stmt|;
name|bool
name|dis
init|=
operator|!
operator|(
name|menuitem
operator|->
name|state
operator|&
name|State_Enabled
operator|)
decl_stmt|;
name|bool
name|checked
init|=
name|menuitem
operator|->
name|checkType
operator|!=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
condition|?
name|menuitem
operator|->
name|checked
else|:
literal|false
decl_stmt|;
name|bool
name|act
init|=
name|menuitem
operator|->
name|state
operator|&
name|State_Selected
decl_stmt|;
comment|// windows always has a check column, regardless whether we have an icon or not
name|int
name|checkcol
init|=
name|qMax
argument_list|<
name|int
argument_list|>
argument_list|(
name|menuitem
operator|->
name|maxIconWidth
argument_list|,
name|QWindowsStylePrivate
operator|::
name|windowsCheckMarkWidth
argument_list|)
decl_stmt|;
name|QBrush
name|fill
init|=
name|menuitem
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|act
condition|?
name|QPalette
operator|::
name|Highlight
else|:
name|QPalette
operator|::
name|Button
argument_list|)
decl_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|menuitem
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|Separator
condition|)
block|{
name|int
name|yoff
init|=
name|y
operator|-
literal|1
operator|+
name|h
operator|/
literal|2
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x
operator|+
literal|2
argument_list|,
name|yoff
argument_list|,
name|x
operator|+
name|w
operator|-
literal|4
argument_list|,
name|yoff
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x
operator|+
literal|2
argument_list|,
name|yoff
operator|+
literal|1
argument_list|,
name|x
operator|+
name|w
operator|-
literal|4
argument_list|,
name|yoff
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|QRect
name|vCheckRect
init|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|checkcol
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|menuitem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
operator|&&
name|checked
condition|)
block|{
if|if
condition|(
name|act
condition|)
block|{
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|vCheckRect
argument_list|,
name|menuitem
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
operator|&
name|menuitem
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QBrush
name|fill
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
decl_stmt|;
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|vCheckRect
argument_list|,
name|menuitem
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|act
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|vCheckRect
argument_list|,
name|menuitem
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// On Windows Style, if we have a checkable item and an icon we
comment|// draw the icon recessed to indicate an item is checked. If we
comment|// have no icon, we draw a checkmark instead.
if|if
condition|(
operator|!
name|menuitem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|dis
condition|?
name|QIcon
operator|::
name|Disabled
else|:
name|QIcon
operator|::
name|Normal
decl_stmt|;
if|if
condition|(
name|act
operator|&&
operator|!
name|dis
condition|)
name|mode
operator|=
name|QIcon
operator|::
name|Active
expr_stmt|;
name|QPixmap
name|pixmap
decl_stmt|;
if|if
condition|(
name|checked
condition|)
name|pixmap
operator|=
name|menuitem
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
argument_list|,
name|mode
argument_list|,
name|QIcon
operator|::
name|On
argument_list|)
expr_stmt|;
else|else
name|pixmap
operator|=
name|menuitem
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|int
name|pixw
init|=
name|pixmap
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|pixh
init|=
name|pixmap
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|act
operator|&&
operator|!
name|dis
operator|&&
operator|!
name|checked
condition|)
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|vCheckRect
argument_list|,
name|menuitem
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
operator|&
name|menuitem
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|QRect
name|pmr
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pixw
argument_list|,
name|pixh
argument_list|)
decl_stmt|;
name|pmr
operator|.
name|moveCenter
argument_list|(
name|vCheckRect
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPixmap
argument_list|(
name|pmr
operator|.
name|topLeft
argument_list|()
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|checked
condition|)
block|{
name|QStyleOptionMenuItem
name|newMi
init|=
operator|*
name|menuitem
decl_stmt|;
name|newMi
operator|.
name|state
operator|=
name|State_None
expr_stmt|;
if|if
condition|(
operator|!
name|dis
condition|)
name|newMi
operator|.
name|state
operator||=
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|act
condition|)
name|newMi
operator|.
name|state
operator||=
name|State_On
expr_stmt|;
name|newMi
operator|.
name|rect
operator|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|QWindowsStylePrivate
operator|::
name|windowsItemFrame
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|QWindowsStylePrivate
operator|::
name|windowsItemFrame
argument_list|,
name|checkcol
operator|-
literal|2
operator|*
name|QWindowsStylePrivate
operator|::
name|windowsItemFrame
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|QWindowsStylePrivate
operator|::
name|windowsItemFrame
argument_list|)
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorMenuCheckMark
argument_list|,
operator|&
name|newMi
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|setPen
argument_list|(
name|act
condition|?
name|menuitem
operator|->
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
else|:
name|menuitem
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QColor
name|discol
decl_stmt|;
if|if
condition|(
name|dis
condition|)
block|{
name|discol
operator|=
name|menuitem
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|discol
argument_list|)
expr_stmt|;
block|}
name|int
name|xm
init|=
name|int
argument_list|(
name|QWindowsStylePrivate
operator|::
name|windowsItemFrame
argument_list|)
operator|+
name|checkcol
operator|+
name|int
argument_list|(
name|QWindowsStylePrivate
operator|::
name|windowsItemHMargin
argument_list|)
decl_stmt|;
name|int
name|xpos
init|=
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|xm
decl_stmt|;
name|QRect
name|textRect
argument_list|(
name|xpos
argument_list|,
name|y
operator|+
name|QWindowsStylePrivate
operator|::
name|windowsItemVMargin
argument_list|,
name|w
operator|-
name|xm
operator|-
name|QWindowsStylePrivate
operator|::
name|windowsRightBorder
operator|-
name|tab
operator|+
literal|1
argument_list|,
name|h
operator|-
literal|2
operator|*
name|QWindowsStylePrivate
operator|::
name|windowsItemVMargin
argument_list|)
decl_stmt|;
name|QRect
name|vTextRect
init|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|textRect
argument_list|)
decl_stmt|;
name|QString
name|s
init|=
name|menuitem
operator|->
name|text
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// draw text
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|int
name|t
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|text_flags
init|=
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|TextDontClip
operator||
name|Qt
operator|::
name|TextSingleLine
decl_stmt|;
if|if
condition|(
operator|!
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|menuitem
argument_list|,
name|widget
argument_list|)
condition|)
name|text_flags
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
name|text_flags
operator||=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
if|if
condition|(
name|t
operator|>=
literal|0
condition|)
block|{
name|QRect
name|vShortcutRect
init|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|textRect
operator|.
name|topRight
argument_list|()
argument_list|,
name|QPoint
argument_list|(
name|menuitem
operator|->
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|textRect
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dis
operator|&&
operator|!
name|act
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_EtchDisabledText
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawText
argument_list|(
name|vShortcutRect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|mid
argument_list|(
name|t
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|discol
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|drawText
argument_list|(
name|vShortcutRect
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|mid
argument_list|(
name|t
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|QFont
name|font
init|=
name|menuitem
operator|->
name|font
decl_stmt|;
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|DefaultItem
condition|)
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|p
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
name|dis
operator|&&
operator|!
name|act
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_EtchDisabledText
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawText
argument_list|(
name|vTextRect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|discol
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|drawText
argument_list|(
name|vTextRect
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|SubMenu
condition|)
block|{
comment|// draw sub menu arrow
name|int
name|dim
init|=
operator|(
name|h
operator|-
literal|2
operator|*
name|QWindowsStylePrivate
operator|::
name|windowsItemFrame
operator|)
operator|/
literal|2
decl_stmt|;
name|PrimitiveElement
name|arrow
decl_stmt|;
name|arrow
operator|=
operator|(
name|opt
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
condition|?
name|PE_IndicatorArrowLeft
else|:
name|PE_IndicatorArrowRight
expr_stmt|;
name|xpos
operator|=
name|x
operator|+
name|w
operator|-
name|QWindowsStylePrivate
operator|::
name|windowsArrowHMargin
operator|-
name|QWindowsStylePrivate
operator|::
name|windowsItemFrame
operator|-
name|dim
expr_stmt|;
name|QRect
name|vSubMenuRect
init|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|xpos
argument_list|,
name|y
operator|+
name|h
operator|/
literal|2
operator|-
name|dim
operator|/
literal|2
argument_list|,
name|dim
argument_list|,
name|dim
argument_list|)
argument_list|)
decl_stmt|;
name|QStyleOptionMenuItem
name|newMI
init|=
operator|*
name|menuitem
decl_stmt|;
name|newMI
operator|.
name|rect
operator|=
name|vSubMenuRect
expr_stmt|;
name|newMI
operator|.
name|state
operator|=
name|dis
condition|?
name|State_None
else|:
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|act
condition|)
name|newMI
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|newMI
operator|.
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|arrow
argument_list|,
operator|&
name|newMI
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_MENU
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
case|case
name|CE_MenuBarItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|mbi
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|bool
name|active
init|=
name|mbi
operator|->
name|state
operator|&
name|State_Selected
decl_stmt|;
name|bool
name|hasFocus
init|=
name|mbi
operator|->
name|state
operator|&
name|State_HasFocus
decl_stmt|;
name|bool
name|down
init|=
name|mbi
operator|->
name|state
operator|&
name|State_Sunken
decl_stmt|;
name|QStyleOptionMenuItem
name|newMbi
init|=
operator|*
name|mbi
decl_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|mbi
operator|->
name|rect
argument_list|,
name|mbi
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|active
operator|||
name|hasFocus
condition|)
block|{
name|QBrush
name|b
init|=
name|mbi
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
decl_stmt|;
if|if
condition|(
name|active
operator|&&
name|down
condition|)
name|p
operator|->
name|setBrushOrigin
argument_list|(
name|p
operator|->
name|brushOrigin
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|active
operator|&&
name|hasFocus
condition|)
name|qDrawShadeRect
argument_list|(
name|p
argument_list|,
name|mbi
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|mbi
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|mbi
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|mbi
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|mbi
operator|->
name|palette
argument_list|,
name|active
operator|&&
name|down
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|&
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|active
operator|&&
name|down
condition|)
block|{
name|newMbi
operator|.
name|rect
operator|.
name|translate
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ButtonShiftHorizontal
argument_list|,
name|mbi
argument_list|,
name|widget
argument_list|)
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ButtonShiftVertical
argument_list|,
name|mbi
argument_list|,
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrushOrigin
argument_list|(
name|p
operator|->
name|brushOrigin
argument_list|()
operator|-
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|newMbi
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_MENUBAR
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|CE_TabBarTabShape
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|bool
name|rtlHorTabs
init|=
operator|(
name|tab
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|&&
operator|(
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedNorth
operator|||
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedSouth
operator|)
operator|)
decl_stmt|;
name|bool
name|selected
init|=
name|tab
operator|->
name|state
operator|&
name|State_Selected
decl_stmt|;
name|bool
name|lastTab
init|=
operator|(
operator|(
operator|!
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|End
operator|)
operator|||
operator|(
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|Beginning
operator|)
operator|)
decl_stmt|;
name|bool
name|firstTab
init|=
operator|(
operator|(
operator|!
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|Beginning
operator|)
operator|||
operator|(
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|End
operator|)
operator|)
decl_stmt|;
name|bool
name|onlyOne
init|=
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|OnlyOneTab
decl_stmt|;
name|bool
name|previousSelected
init|=
operator|(
operator|(
operator|!
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|selectedPosition
operator|==
name|QStyleOptionTab
operator|::
name|PreviousIsSelected
operator|)
operator|||
operator|(
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|selectedPosition
operator|==
name|QStyleOptionTab
operator|::
name|NextIsSelected
operator|)
operator|)
decl_stmt|;
name|bool
name|nextSelected
init|=
operator|(
operator|(
operator|!
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|selectedPosition
operator|==
name|QStyleOptionTab
operator|::
name|NextIsSelected
operator|)
operator|||
operator|(
name|rtlHorTabs
operator|&&
name|tab
operator|->
name|selectedPosition
operator|==
name|QStyleOptionTab
operator|::
name|PreviousIsSelected
operator|)
operator|)
decl_stmt|;
name|int
name|tabBarAlignment
init|=
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_TabBar_Alignment
argument_list|,
name|tab
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|bool
name|leftAligned
init|=
operator|(
operator|!
name|rtlHorTabs
operator|&&
name|tabBarAlignment
operator|==
name|Qt
operator|::
name|AlignLeft
operator|)
operator|||
operator|(
name|rtlHorTabs
operator|&&
name|tabBarAlignment
operator|==
name|Qt
operator|::
name|AlignRight
operator|)
decl_stmt|;
name|bool
name|rightAligned
init|=
operator|(
operator|!
name|rtlHorTabs
operator|&&
name|tabBarAlignment
operator|==
name|Qt
operator|::
name|AlignRight
operator|)
operator|||
operator|(
name|rtlHorTabs
operator|&&
name|tabBarAlignment
operator|==
name|Qt
operator|::
name|AlignLeft
operator|)
decl_stmt|;
name|QColor
name|light
init|=
name|tab
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|QColor
name|dark
init|=
name|tab
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|QColor
name|shadow
init|=
name|tab
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|int
name|borderThinkness
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_TabBarBaseOverlap
argument_list|,
name|tab
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|selected
condition|)
name|borderThinkness
operator|/=
literal|2
expr_stmt|;
name|QRect
name|r2
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
decl_stmt|;
name|int
name|x1
init|=
name|r2
operator|.
name|left
argument_list|()
decl_stmt|;
name|int
name|x2
init|=
name|r2
operator|.
name|right
argument_list|()
decl_stmt|;
name|int
name|y1
init|=
name|r2
operator|.
name|top
argument_list|()
decl_stmt|;
name|int
name|y2
init|=
name|r2
operator|.
name|bottom
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|tab
operator|->
name|shape
condition|)
block|{
default|default:
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
name|tab
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
block|{
if|if
condition|(
operator|!
name|selected
condition|)
block|{
name|y1
operator|+=
literal|2
expr_stmt|;
name|x1
operator|+=
name|onlyOne
operator|||
name|firstTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
name|x2
operator|-=
name|onlyOne
operator|||
name|lastTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
block|}
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
operator|(
name|x2
operator|-
name|x1
operator|)
operator|-
literal|1
argument_list|,
operator|(
name|y2
operator|-
name|y1
operator|)
operator|-
literal|2
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete border
if|if
condition|(
name|selected
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x1
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|x2
operator|-
name|x1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
operator|-
name|x1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Left
if|if
condition|(
name|firstTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|previousSelected
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|light
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
name|x1
argument_list|,
name|y2
operator|-
operator|(
operator|(
name|onlyOne
operator|||
name|firstTab
operator|)
operator|&&
name|selected
operator|&&
name|leftAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Top
block|{
name|int
name|beg
init|=
name|x1
operator|+
operator|(
name|previousSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|int
name|end
init|=
name|x2
operator|-
operator|(
name|nextSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|light
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|beg
argument_list|,
name|y1
argument_list|,
name|end
argument_list|,
name|y1
argument_list|)
expr_stmt|;
block|}
comment|// Right
if|if
condition|(
name|lastTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|nextSelected
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
name|x2
argument_list|,
name|y2
operator|-
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y2
operator|-
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
block|{
if|if
condition|(
operator|!
name|selected
condition|)
block|{
name|y2
operator|-=
literal|2
expr_stmt|;
name|x1
operator|+=
name|firstTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
name|x2
operator|-=
name|lastTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
block|}
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
operator|(
name|x2
operator|-
name|x1
operator|)
operator|-
literal|1
argument_list|,
operator|(
name|y2
operator|-
name|y1
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete border
if|if
condition|(
name|selected
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
operator|(
name|x2
operator|-
literal|1
operator|)
operator|-
name|x1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
operator|(
name|x2
operator|-
literal|1
operator|)
operator|-
name|x1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Left
if|if
condition|(
name|firstTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|previousSelected
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|light
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
operator|-
literal|2
argument_list|,
name|x1
argument_list|,
name|y1
operator|+
operator|(
operator|(
name|onlyOne
operator|||
name|firstTab
operator|)
operator|&&
name|selected
operator|&&
name|leftAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Bottom
block|{
name|int
name|beg
init|=
name|x1
operator|+
operator|(
name|previousSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|int
name|end
init|=
name|x2
operator|-
operator|(
name|nextSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|beg
argument_list|,
name|y2
argument_list|,
name|end
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|beg
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|end
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Right
if|if
condition|(
name|lastTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|nextSelected
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y2
operator|-
literal|2
argument_list|,
name|x2
argument_list|,
name|y1
operator|+
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y2
operator|-
literal|2
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y1
operator|+
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
block|{
if|if
condition|(
operator|!
name|selected
condition|)
block|{
name|x1
operator|+=
literal|2
expr_stmt|;
name|y1
operator|+=
name|firstTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
name|y2
operator|-=
name|lastTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
block|}
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
operator|(
name|x2
operator|-
name|x1
operator|)
operator|-
literal|2
argument_list|,
operator|(
name|y2
operator|-
name|y1
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete border
if|if
condition|(
name|selected
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y1
argument_list|,
literal|1
argument_list|,
name|y2
operator|-
name|y1
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x2
argument_list|,
name|y1
argument_list|,
literal|1
argument_list|,
name|y2
operator|-
name|y1
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Top
if|if
condition|(
name|firstTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|previousSelected
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|light
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|2
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
operator|(
operator|(
name|onlyOne
operator|||
name|firstTab
operator|)
operator|&&
name|selected
operator|&&
name|leftAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Left
block|{
name|int
name|beg
init|=
name|y1
operator|+
operator|(
name|previousSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|int
name|end
init|=
name|y2
operator|-
operator|(
name|nextSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|light
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|beg
argument_list|,
name|x1
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
comment|// Bottom
if|if
condition|(
name|lastTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|nextSelected
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|3
argument_list|,
name|y2
argument_list|,
name|x2
operator|-
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|x1
operator|+
literal|2
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|3
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|x2
operator|-
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|x1
operator|+
literal|2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
block|{
if|if
condition|(
operator|!
name|selected
condition|)
block|{
name|x2
operator|-=
literal|2
expr_stmt|;
name|y1
operator|+=
name|firstTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
name|y2
operator|-=
name|lastTab
condition|?
name|borderThinkness
else|:
literal|0
expr_stmt|;
block|}
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x1
operator|+
literal|2
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
operator|(
name|x2
operator|-
name|x1
operator|)
operator|-
literal|1
argument_list|,
operator|(
name|y2
operator|-
name|y1
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete border
if|if
condition|(
name|selected
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
argument_list|,
literal|1
argument_list|,
operator|(
name|y2
operator|-
literal|1
operator|)
operator|-
name|y1
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
literal|1
argument_list|,
operator|(
name|y2
operator|-
literal|1
operator|)
operator|-
name|y1
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Top
if|if
condition|(
name|firstTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|previousSelected
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|light
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|2
argument_list|,
name|y1
argument_list|,
name|x1
operator|+
operator|(
operator|(
name|onlyOne
operator|||
name|firstTab
operator|)
operator|&&
name|selected
operator|&&
name|leftAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Right
block|{
name|int
name|beg
init|=
name|y1
operator|+
operator|(
name|previousSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|int
name|end
init|=
name|y2
operator|-
operator|(
name|nextSelected
condition|?
literal|0
else|:
literal|2
operator|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|beg
argument_list|,
name|x2
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|beg
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
comment|// Bottom
if|if
condition|(
name|lastTab
operator|||
name|selected
operator|||
name|onlyOne
operator|||
operator|!
name|nextSelected
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|2
argument_list|,
name|y2
argument_list|,
name|x1
operator|+
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|2
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|x1
operator|+
operator|(
operator|(
name|onlyOne
operator|||
name|lastTab
operator|)
operator|&&
name|selected
operator|&&
name|rightAligned
condition|?
literal|0
else|:
name|borderThinkness
operator|)
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_TABBAR
case|case
name|CE_ToolBoxTabShape
case|:
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
name|opt
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
literal|1
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SPLITTER
case|case
name|CE_Splitter
case|:
name|p
operator|->
name|eraseRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
comment|// QT_NO_SPLITTER
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
case|case
name|CE_ScrollBarSubLine
case|:
case|case
name|CE_ScrollBarAddLine
case|:
block|{
if|if
condition|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStyleOption
name|buttonOpt
init|=
operator|*
name|opt
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|buttonOpt
operator|.
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|buttonOpt
operator|.
name|state
operator||=
name|State_Raised
expr_stmt|;
name|QPalette
name|pal
argument_list|(
name|opt
operator|->
name|palette
argument_list|)
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|qDrawWinButton
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|pal
argument_list|,
name|opt
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PrimitiveElement
name|arrow
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
if|if
condition|(
name|ce
operator|==
name|CE_ScrollBarAddLine
condition|)
name|arrow
operator|=
name|opt
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
name|PE_IndicatorArrowRight
else|:
name|PE_IndicatorArrowLeft
expr_stmt|;
else|else
name|arrow
operator|=
name|opt
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
name|PE_IndicatorArrowLeft
else|:
name|PE_IndicatorArrowRight
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ce
operator|==
name|CE_ScrollBarAddLine
condition|)
name|arrow
operator|=
name|PE_IndicatorArrowDown
expr_stmt|;
else|else
name|arrow
operator|=
name|PE_IndicatorArrowUp
expr_stmt|;
block|}
name|QStyleOption
name|arrowOpt
init|=
operator|*
name|opt
decl_stmt|;
name|arrowOpt
operator|.
name|rect
operator|=
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|arrow
argument_list|,
operator|&
name|arrowOpt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CE_ScrollBarAddPage
case|:
case|case
name|CE_ScrollBarSubPage
case|:
block|{
name|QBrush
name|br
decl_stmt|;
name|QBrush
name|bg
init|=
name|p
operator|->
name|background
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|BGMode
name|bg_mode
init|=
name|p
operator|->
name|backgroundMode
argument_list|()
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBackgroundMode
argument_list|(
name|Qt
operator|::
name|OpaqueMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Sunken
condition|)
block|{
name|br
operator|=
name|QBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBackground
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|br
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPixmap
name|pm
init|=
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|)
operator|.
name|texture
argument_list|()
decl_stmt|;
name|br
operator|=
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|?
name|QBrush
argument_list|(
name|pm
argument_list|)
else|:
name|QBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBackground
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|br
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|drawRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBackground
argument_list|(
name|bg
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBackgroundMode
argument_list|(
name|bg_mode
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CE_ScrollBarSlider
case|:
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
block|{
name|QPixmap
name|pm
init|=
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|)
operator|.
name|texture
argument_list|()
decl_stmt|;
name|QBrush
name|br
init|=
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|?
name|QBrush
argument_list|(
name|pm
argument_list|)
else|:
name|QBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|br
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBackgroundMode
argument_list|(
name|Qt
operator|::
name|OpaqueMode
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStyleOptionButton
name|buttonOpt
decl_stmt|;
name|buttonOpt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|opt
argument_list|)
expr_stmt|;
name|buttonOpt
operator|.
name|state
operator|=
name|State_Enabled
operator||
name|State_Raised
expr_stmt|;
name|QPalette
name|pal
argument_list|(
name|opt
operator|->
name|palette
argument_list|)
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|qDrawWinButton
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|pal
argument_list|,
literal|false
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SCROLLBAR
case|case
name|CE_HeaderSection
case|:
block|{
name|QBrush
name|fill
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_On
condition|)
name|fill
operator|=
name|QBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
else|else
name|fill
operator|=
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
operator|(
name|State_Raised
operator||
name|State_Sunken
operator|)
condition|)
block|{
name|qDrawWinButton
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
name|opt
operator|->
name|state
operator|&
name|State_Sunken
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
case|case
name|CE_ToolBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolBar
modifier|*
name|toolbar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolBar
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
comment|// Reserve the beveled appearance only for mainwindow toolbars
if|if
condition|(
operator|!
operator|(
name|widget
operator|&&
name|qobject_cast
argument_list|<
specifier|const
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
operator|)
condition|)
break|break;
name|QRect
name|rect
init|=
name|opt
operator|->
name|rect
decl_stmt|;
name|bool
name|paintLeftBorder
init|=
literal|true
decl_stmt|;
name|bool
name|paintRightBorder
init|=
literal|true
decl_stmt|;
name|bool
name|paintBottomBorder
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|toolbar
operator|->
name|toolBarArea
condition|)
block|{
case|case
name|Qt
operator|::
name|BottomToolBarArea
case|:
switch|switch
condition|(
name|toolbar
operator|->
name|positionOfLine
condition|)
block|{
case|case
name|QStyleOptionToolBar
operator|::
name|Beginning
case|:
case|case
name|QStyleOptionToolBar
operator|::
name|OnlyOne
case|:
name|paintBottomBorder
operator|=
literal|false
expr_stmt|;
default|default:
break|break;
block|}
case|case
name|Qt
operator|::
name|TopToolBarArea
case|:
switch|switch
condition|(
name|toolbar
operator|->
name|positionWithinLine
condition|)
block|{
case|case
name|QStyleOptionToolBar
operator|::
name|Beginning
case|:
name|paintLeftBorder
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|QStyleOptionToolBar
operator|::
name|End
case|:
name|paintRightBorder
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|QStyleOptionToolBar
operator|::
name|OnlyOne
case|:
name|paintRightBorder
operator|=
literal|false
expr_stmt|;
name|paintLeftBorder
operator|=
literal|false
expr_stmt|;
default|default:
break|break;
block|}
if|if
condition|(
name|opt
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
block|{
comment|//reverse layout changes the order of Beginning/end
name|bool
name|tmp
init|=
name|paintLeftBorder
decl_stmt|;
name|paintRightBorder
operator|=
name|paintLeftBorder
expr_stmt|;
name|paintLeftBorder
operator|=
name|tmp
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|RightToolBarArea
case|:
switch|switch
condition|(
name|toolbar
operator|->
name|positionOfLine
condition|)
block|{
case|case
name|QStyleOptionToolBar
operator|::
name|Beginning
case|:
case|case
name|QStyleOptionToolBar
operator|::
name|OnlyOne
case|:
name|paintRightBorder
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
case|case
name|Qt
operator|::
name|LeftToolBarArea
case|:
switch|switch
condition|(
name|toolbar
operator|->
name|positionOfLine
condition|)
block|{
case|case
name|QStyleOptionToolBar
operator|::
name|Beginning
case|:
case|case
name|QStyleOptionToolBar
operator|::
name|OnlyOne
case|:
name|paintLeftBorder
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
default|default:
break|break;
block|}
comment|//draw top border
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|paintLeftBorder
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomLeft
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomLeft
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|paintRightBorder
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topRight
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|paintBottomBorder
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|bottomLeft
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomLeft
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_TOOLBAR
case|case
name|CE_ProgressBarContents
case|:
if|if
condition|(
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|pb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRect
name|rect
init|=
name|pb
operator|->
name|rect
decl_stmt|;
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|bool
name|vertical
init|=
literal|false
decl_stmt|;
name|bool
name|inverted
init|=
literal|false
decl_stmt|;
comment|// Get extra style options if version 2
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|pb2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
decl_stmt|;
if|if
condition|(
name|pb2
condition|)
block|{
name|vertical
operator|=
operator|(
name|pb2
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
expr_stmt|;
name|inverted
operator|=
name|pb2
operator|->
name|invertedAppearance
expr_stmt|;
block|}
name|QMatrix
name|m
decl_stmt|;
if|if
condition|(
name|vertical
condition|)
block|{
name|rect
operator|=
name|QRect
argument_list|(
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
comment|// flip width and height
name|m
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
expr_stmt|;
name|m
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|-
operator|(
name|rect
operator|.
name|height
argument_list|()
operator|+
name|rect
operator|.
name|y
argument_list|()
operator|*
literal|2
operator|)
argument_list|)
expr_stmt|;
block|}
name|QPalette
name|pal2
init|=
name|pb
operator|->
name|palette
decl_stmt|;
comment|// Correct the highlight color if it is the same as the background
if|if
condition|(
name|pal2
operator|.
name|highlight
argument_list|()
operator|==
name|pal2
operator|.
name|background
argument_list|()
condition|)
name|pal2
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|pb
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|reverse
init|=
operator|(
operator|(
operator|!
name|vertical
operator|&&
operator|(
name|pb
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
operator|)
operator|||
name|vertical
operator|)
decl_stmt|;
if|if
condition|(
name|inverted
condition|)
name|reverse
operator|=
operator|!
name|reverse
expr_stmt|;
name|int
name|w
init|=
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
name|Q_D
argument_list|(
specifier|const
name|QWindowsStyle
argument_list|)
expr_stmt|;
if|if
condition|(
name|pb
operator|->
name|minimum
operator|==
literal|0
operator|&&
name|pb
operator|->
name|maximum
operator|==
literal|0
condition|)
block|{
specifier|const
name|int
name|unit_width
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ProgressBarChunkWidth
argument_list|,
name|pb
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QStyleOptionProgressBarV2
name|pbBits
init|=
operator|*
name|pb
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|unit_width
operator|>
literal|0
argument_list|)
expr_stmt|;
name|pbBits
operator|.
name|rect
operator|=
name|rect
expr_stmt|;
name|pbBits
operator|.
name|palette
operator|=
name|pal2
expr_stmt|;
name|int
name|step
init|=
literal|0
decl_stmt|;
name|int
name|chunkCount
init|=
name|w
operator|/
name|unit_width
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|QProgressStyleAnimation
modifier|*
name|animation
init|=
name|qobject_cast
argument_list|<
name|QProgressStyleAnimation
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|animation
argument_list|(
name|opt
operator|->
name|styleObject
argument_list|)
argument_list|)
condition|)
name|step
operator|=
operator|(
name|animation
operator|->
name|animationStep
argument_list|()
operator|/
literal|3
operator|)
operator|%
name|chunkCount
expr_stmt|;
else|else
name|d
operator|->
name|startAnimation
argument_list|(
operator|new
name|QProgressStyleAnimation
argument_list|(
name|d
operator|->
name|animationFps
argument_list|,
name|opt
operator|->
name|styleObject
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|chunksInRow
init|=
literal|5
decl_stmt|;
name|int
name|myY
init|=
name|pbBits
operator|.
name|rect
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|myHeight
init|=
name|pbBits
operator|.
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|chunksToDraw
init|=
name|chunksInRow
decl_stmt|;
if|if
condition|(
name|step
operator|>
name|chunkCount
operator|-
literal|5
condition|)
name|chunksToDraw
operator|=
operator|(
name|chunkCount
operator|-
name|step
operator|)
expr_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setClipRect
argument_list|(
name|m
operator|.
name|mapRect
argument_list|(
name|QRectF
argument_list|(
name|rect
argument_list|)
argument_list|)
operator|.
name|toRect
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|x0
init|=
name|reverse
condition|?
name|rect
operator|.
name|left
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
operator|-
name|unit_width
operator|*
operator|(
name|step
operator|)
operator|-
name|unit_width
else|:
name|rect
operator|.
name|left
argument_list|()
operator|+
name|unit_width
operator|*
name|step
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunksToDraw
condition|;
operator|++
name|i
control|)
block|{
name|pbBits
operator|.
name|rect
operator|.
name|setRect
argument_list|(
name|x0
operator|+
name|x
argument_list|,
name|myY
argument_list|,
name|unit_width
argument_list|,
name|myHeight
argument_list|)
expr_stmt|;
name|pbBits
operator|.
name|rect
operator|=
name|m
operator|.
name|mapRect
argument_list|(
name|QRectF
argument_list|(
name|pbBits
operator|.
name|rect
argument_list|)
argument_list|)
operator|.
name|toRect
argument_list|()
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorProgressChunk
argument_list|,
operator|&
name|pbBits
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|x
operator|+=
name|reverse
condition|?
operator|-
name|unit_width
else|:
name|unit_width
expr_stmt|;
block|}
comment|//Draw wrap-around chunks
if|if
condition|(
name|step
operator|>
name|chunkCount
operator|-
literal|5
condition|)
block|{
name|x0
operator|=
name|reverse
condition|?
name|rect
operator|.
name|left
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
operator|-
name|unit_width
else|:
name|rect
operator|.
name|left
argument_list|()
expr_stmt|;
name|x
operator|=
literal|0
expr_stmt|;
name|int
name|chunksToDraw
init|=
name|step
operator|-
operator|(
name|chunkCount
operator|-
name|chunksInRow
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunksToDraw
condition|;
operator|++
name|i
control|)
block|{
name|pbBits
operator|.
name|rect
operator|.
name|setRect
argument_list|(
name|x0
operator|+
name|x
argument_list|,
name|myY
argument_list|,
name|unit_width
argument_list|,
name|myHeight
argument_list|)
expr_stmt|;
name|pbBits
operator|.
name|rect
operator|=
name|m
operator|.
name|mapRect
argument_list|(
name|QRectF
argument_list|(
name|pbBits
operator|.
name|rect
argument_list|)
argument_list|)
operator|.
name|toRect
argument_list|()
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorProgressChunk
argument_list|,
operator|&
name|pbBits
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|x
operator|+=
name|reverse
condition|?
operator|-
name|unit_width
else|:
name|unit_width
expr_stmt|;
block|}
block|}
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
comment|//restore state
block|}
else|else
block|{
name|d
operator|->
name|stopAnimation
argument_list|(
name|opt
operator|->
name|styleObject
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
case|case
name|CE_DockWidgetTitle
case|:
if|if
condition|(
specifier|const
name|QStyleOptionDockWidget
modifier|*
name|dwOpt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidget
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QWindowsStyle
argument_list|)
expr_stmt|;
specifier|const
name|QStyleOptionDockWidgetV2
modifier|*
name|v2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidgetV2
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
decl_stmt|;
name|bool
name|verticalTitleBar
init|=
name|v2
operator|==
literal|0
condition|?
literal|false
else|:
name|v2
operator|->
name|verticalTitleBar
decl_stmt|;
name|QRect
name|rect
init|=
name|dwOpt
operator|->
name|rect
decl_stmt|;
name|QRect
name|r
init|=
name|rect
decl_stmt|;
if|if
condition|(
name|verticalTitleBar
condition|)
block|{
name|QSize
name|s
init|=
name|r
operator|.
name|size
argument_list|()
decl_stmt|;
name|s
operator|.
name|transpose
argument_list|()
expr_stmt|;
name|r
operator|.
name|setSize
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
operator|-
name|r
operator|.
name|left
argument_list|()
argument_list|,
operator|-
name|r
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bool
name|floating
init|=
literal|false
decl_stmt|;
name|bool
name|active
init|=
name|dwOpt
operator|->
name|state
operator|&
name|State_Active
decl_stmt|;
name|QColor
name|inactiveCaptionTextColor
init|=
name|d
operator|->
name|inactiveCaptionText
decl_stmt|;
if|if
condition|(
name|dwOpt
operator|->
name|movable
condition|)
block|{
name|QColor
name|left
decl_stmt|,
name|right
decl_stmt|;
comment|//Titlebar gradient
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|floating
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|active
condition|)
block|{
name|left
operator|=
name|d
operator|->
name|activeCaptionColor
expr_stmt|;
name|right
operator|=
name|d
operator|->
name|activeGradientCaptionColor
expr_stmt|;
block|}
else|else
block|{
name|left
operator|=
name|d
operator|->
name|inactiveCaptionColor
expr_stmt|;
name|right
operator|=
name|d
operator|->
name|inactiveGradientCaptionColor
expr_stmt|;
block|}
name|QBrush
name|fillBrush
argument_list|(
name|left
argument_list|)
decl_stmt|;
if|if
condition|(
name|left
operator|!=
name|right
condition|)
block|{
name|QPoint
name|p1
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|QPoint
name|p2
argument_list|(
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|QLinearGradient
name|lg
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
decl_stmt|;
name|lg
operator|.
name|setColorAt
argument_list|(
literal|0
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|lg
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|fillBrush
operator|=
name|lg
expr_stmt|;
block|}
name|p
operator|->
name|fillRect
argument_list|(
name|r
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|fillBrush
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|dwOpt
operator|->
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFont
name|oldFont
init|=
name|p
operator|->
name|font
argument_list|()
decl_stmt|;
if|if
condition|(
name|floating
condition|)
block|{
name|QFont
name|font
init|=
name|oldFont
decl_stmt|;
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|p
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
name|QPalette
name|palette
init|=
name|dwOpt
operator|->
name|palette
decl_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|inactiveCaptionTextColor
argument_list|)
expr_stmt|;
name|QRect
name|titleRect
init|=
name|subElementRect
argument_list|(
name|SE_DockWidgetTitleBarText
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|verticalTitleBar
condition|)
block|{
name|titleRect
operator|=
name|QRect
argument_list|(
name|r
operator|.
name|left
argument_list|()
operator|+
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|titleRect
operator|.
name|bottom
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|titleRect
operator|.
name|left
argument_list|()
operator|-
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|titleRect
operator|.
name|height
argument_list|()
argument_list|,
name|titleRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|p
argument_list|,
name|titleRect
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|palette
argument_list|,
name|dwOpt
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|dwOpt
operator|->
name|title
argument_list|,
name|floating
condition|?
operator|(
name|active
condition|?
name|QPalette
operator|::
name|BrightText
else|:
name|QPalette
operator|::
name|Window
operator|)
else|:
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
name|p
operator|->
name|setFont
argument_list|(
name|oldFont
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verticalTitleBar
condition|)
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
return|return;
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
default|default:
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|subElementRect
name|QRect
name|QWindowsStyle
operator|::
name|subElementRect
parameter_list|(
name|SubElement
name|sr
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|QRect
name|r
decl_stmt|;
switch|switch
condition|(
name|sr
condition|)
block|{
case|case
name|SE_SliderFocusRect
case|:
case|case
name|SE_ToolBoxTabContents
case|:
name|r
operator|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_DockWidgetTitleBarText
case|:
block|{
name|r
operator|=
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|sr
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
expr_stmt|;
specifier|const
name|QStyleOptionDockWidgetV2
modifier|*
name|v2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidgetV2
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
decl_stmt|;
name|bool
name|verticalTitleBar
init|=
name|v2
operator|==
literal|0
condition|?
literal|false
else|:
name|v2
operator|->
name|verticalTitleBar
decl_stmt|;
name|int
name|m
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DockWidgetTitleMargin
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|verticalTitleBar
condition|)
block|{
name|r
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|m
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|opt
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|r
operator|.
name|adjust
argument_list|(
name|m
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|r
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|m
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|SE_ProgressBarContents
case|:
name|r
operator|=
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|SE_ProgressBarGroove
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|r
operator|.
name|adjust
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
break|break;
default|default:
name|r
operator|=
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|sr
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|drawComplexControl
name|void
name|QWindowsStyle
operator|::
name|drawComplexControl
parameter_list|(
name|ComplexControl
name|cc
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|cc
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|CC_Slider
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|int
name|thickness
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderControlThickness
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|ticks
init|=
name|slider
operator|->
name|tickPosition
decl_stmt|;
name|QRect
name|groove
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_Slider
argument_list|,
name|slider
argument_list|,
name|SC_SliderGroove
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|handle
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_Slider
argument_list|,
name|slider
argument_list|,
name|SC_SliderHandle
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|slider
operator|->
name|subControls
operator|&
name|SC_SliderGroove
operator|)
operator|&&
name|groove
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|mid
init|=
name|thickness
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksAbove
condition|)
name|mid
operator|+=
name|len
operator|/
literal|8
expr_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksBelow
condition|)
name|mid
operator|-=
name|len
operator|/
literal|8
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|slider
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|qDrawWinPanel
argument_list|(
name|p
argument_list|,
name|groove
operator|.
name|x
argument_list|()
argument_list|,
name|groove
operator|.
name|y
argument_list|()
operator|+
name|mid
operator|-
literal|2
argument_list|,
name|groove
operator|.
name|width
argument_list|()
argument_list|,
literal|4
argument_list|,
name|slider
operator|->
name|palette
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|groove
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|groove
operator|.
name|y
argument_list|()
operator|+
name|mid
operator|-
literal|1
argument_list|,
name|groove
operator|.
name|x
argument_list|()
operator|+
name|groove
operator|.
name|width
argument_list|()
operator|-
literal|3
argument_list|,
name|groove
operator|.
name|y
argument_list|()
operator|+
name|mid
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qDrawWinPanel
argument_list|(
name|p
argument_list|,
name|groove
operator|.
name|x
argument_list|()
operator|+
name|mid
operator|-
literal|2
argument_list|,
name|groove
operator|.
name|y
argument_list|()
argument_list|,
literal|4
argument_list|,
name|groove
operator|.
name|height
argument_list|()
argument_list|,
name|slider
operator|->
name|palette
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|groove
operator|.
name|x
argument_list|()
operator|+
name|mid
operator|-
literal|1
argument_list|,
name|groove
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|groove
operator|.
name|x
argument_list|()
operator|+
name|mid
operator|-
literal|1
argument_list|,
name|groove
operator|.
name|y
argument_list|()
operator|+
name|groove
operator|.
name|height
argument_list|()
operator|-
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|slider
operator|->
name|subControls
operator|&
name|SC_SliderTickmarks
condition|)
block|{
name|QStyleOptionSlider
name|tmpSlider
init|=
operator|*
name|slider
decl_stmt|;
name|tmpSlider
operator|.
name|subControls
operator|=
name|SC_SliderTickmarks
expr_stmt|;
name|QCommonStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|tmpSlider
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|slider
operator|->
name|subControls
operator|&
name|SC_SliderHandle
condition|)
block|{
comment|// 4444440
comment|// 4333310
comment|// 4322210
comment|// 4322210
comment|// 4322210
comment|// 4322210
comment|// *43210*
comment|// **410**
comment|// ***0***
specifier|const
name|QColor
name|c0
init|=
name|slider
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
specifier|const
name|QColor
name|c1
init|=
name|slider
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
comment|// const QColor c2 = g.button();
specifier|const
name|QColor
name|c3
init|=
name|slider
operator|->
name|palette
operator|.
name|midlight
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
specifier|const
name|QColor
name|c4
init|=
name|slider
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|QBrush
name|handleBrush
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Enabled
condition|)
block|{
name|handleBrush
operator|=
name|slider
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleBrush
operator|=
name|QBrush
argument_list|(
name|slider
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
block|}
name|int
name|x
init|=
name|handle
operator|.
name|x
argument_list|()
decl_stmt|,
name|y
init|=
name|handle
operator|.
name|y
argument_list|()
decl_stmt|,
name|wi
init|=
name|handle
operator|.
name|width
argument_list|()
decl_stmt|,
name|he
init|=
name|handle
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|x1
init|=
name|x
decl_stmt|;
name|int
name|x2
init|=
name|x
operator|+
name|wi
operator|-
literal|1
decl_stmt|;
name|int
name|y1
init|=
name|y
decl_stmt|;
name|int
name|y2
init|=
name|y
operator|+
name|he
operator|-
literal|1
decl_stmt|;
name|Qt
operator|::
name|Orientation
name|orient
init|=
name|slider
operator|->
name|orientation
decl_stmt|;
name|bool
name|tickAbove
init|=
name|slider
operator|->
name|tickPosition
operator|==
name|QSlider
operator|::
name|TicksAbove
decl_stmt|;
name|bool
name|tickBelow
init|=
name|slider
operator|->
name|tickPosition
operator|==
name|QSlider
operator|::
name|TicksBelow
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|slider
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|SE_SliderFocusRect
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fropt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|tickAbove
operator|&&
name|tickBelow
operator|)
operator|||
operator|(
operator|!
name|tickAbove
operator|&&
operator|!
name|tickBelow
operator|)
condition|)
block|{
name|Qt
operator|::
name|BGMode
name|oldMode
init|=
name|p
operator|->
name|backgroundMode
argument_list|()
decl_stmt|;
name|p
operator|->
name|setBackgroundMode
argument_list|(
name|Qt
operator|::
name|OpaqueMode
argument_list|)
expr_stmt|;
name|qDrawWinButton
argument_list|(
name|p
argument_list|,
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|wi
argument_list|,
name|he
argument_list|)
argument_list|,
name|slider
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
operator|&
name|handleBrush
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBackgroundMode
argument_list|(
name|oldMode
argument_list|)
expr_stmt|;
return|return;
block|}
name|QSliderDirection
name|dir
decl_stmt|;
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
if|if
condition|(
name|tickAbove
condition|)
name|dir
operator|=
name|SlUp
expr_stmt|;
else|else
name|dir
operator|=
name|SlDown
expr_stmt|;
elseif|else
if|if
condition|(
name|tickAbove
condition|)
name|dir
operator|=
name|SlLeft
expr_stmt|;
else|else
name|dir
operator|=
name|SlRight
expr_stmt|;
name|QPolygon
name|a
decl_stmt|;
name|int
name|d
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|dir
condition|)
block|{
case|case
name|SlUp
case|:
name|y1
operator|=
name|y1
operator|+
name|wi
operator|/
literal|2
expr_stmt|;
name|d
operator|=
operator|(
name|wi
operator|+
literal|1
operator|)
operator|/
literal|2
operator|-
literal|1
expr_stmt|;
name|a
operator|.
name|setPoints
argument_list|(
literal|5
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|,
name|x1
operator|+
name|d
argument_list|,
name|y1
operator|-
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|SlDown
case|:
name|y2
operator|=
name|y2
operator|-
name|wi
operator|/
literal|2
expr_stmt|;
name|d
operator|=
operator|(
name|wi
operator|+
literal|1
operator|)
operator|/
literal|2
operator|-
literal|1
expr_stmt|;
name|a
operator|.
name|setPoints
argument_list|(
literal|5
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|x1
operator|+
name|d
argument_list|,
name|y2
operator|+
name|d
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
break|break;
case|case
name|SlLeft
case|:
name|d
operator|=
operator|(
name|he
operator|+
literal|1
operator|)
operator|/
literal|2
operator|-
literal|1
expr_stmt|;
name|x1
operator|=
name|x1
operator|+
name|he
operator|/
literal|2
expr_stmt|;
name|a
operator|.
name|setPoints
argument_list|(
literal|5
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
operator|-
name|d
argument_list|,
name|y1
operator|+
name|d
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
break|break;
case|case
name|SlRight
case|:
name|d
operator|=
operator|(
name|he
operator|+
literal|1
operator|)
operator|/
literal|2
operator|-
literal|1
expr_stmt|;
name|x2
operator|=
name|x2
operator|-
name|he
operator|/
literal|2
expr_stmt|;
name|a
operator|.
name|setPoints
argument_list|(
literal|5
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
operator|+
name|d
argument_list|,
name|y1
operator|+
name|d
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
break|break;
block|}
name|QBrush
name|oldBrush
init|=
name|p
operator|->
name|brush
argument_list|()
decl_stmt|;
name|bool
name|oldQt4CompatiblePainting
init|=
name|p
operator|->
name|testRenderHint
argument_list|(
name|QPainter
operator|::
name|Qt4CompatiblePainting
argument_list|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|handleBrush
argument_list|)
expr_stmt|;
name|p
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Qt4CompatiblePainting
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|BGMode
name|oldMode
init|=
name|p
operator|->
name|backgroundMode
argument_list|()
decl_stmt|;
name|p
operator|->
name|setBackgroundMode
argument_list|(
name|Qt
operator|::
name|OpaqueMode
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolygon
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|oldBrush
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBackgroundMode
argument_list|(
name|oldMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|!=
name|SlUp
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x2
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
name|SlLeft
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x1
operator|+
literal|1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
name|SlRight
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
name|SlDown
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|dir
condition|)
block|{
case|case
name|SlUp
case|:
name|p
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
operator|+
name|d
argument_list|,
name|y1
operator|-
name|d
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|d
operator|=
name|wi
operator|-
name|d
operator|-
literal|1
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|d
argument_list|,
name|y1
operator|-
name|d
argument_list|)
expr_stmt|;
name|d
operator|--
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y1
argument_list|,
name|x1
operator|+
literal|1
operator|+
name|d
argument_list|,
name|y1
operator|-
name|d
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
literal|1
operator|-
name|d
argument_list|,
name|y1
operator|-
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|SlDown
case|:
name|p
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|,
name|x1
operator|+
name|d
argument_list|,
name|y2
operator|+
name|d
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|d
operator|=
name|wi
operator|-
name|d
operator|-
literal|1
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
operator|-
name|d
argument_list|,
name|y2
operator|+
name|d
argument_list|)
expr_stmt|;
name|d
operator|--
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
operator|+
literal|1
argument_list|,
name|y2
argument_list|,
name|x1
operator|+
literal|1
operator|+
name|d
argument_list|,
name|y2
operator|+
name|d
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
operator|-
literal|1
argument_list|,
name|y2
argument_list|,
name|x2
operator|-
literal|1
operator|-
name|d
argument_list|,
name|y2
operator|+
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|SlLeft
case|:
name|p
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
operator|-
name|d
argument_list|,
name|y1
operator|+
name|d
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|d
operator|=
name|he
operator|-
name|d
operator|-
literal|1
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|,
name|x1
operator|-
name|d
argument_list|,
name|y2
operator|-
name|d
argument_list|)
expr_stmt|;
name|d
operator|--
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x1
operator|-
name|d
argument_list|,
name|y1
operator|+
literal|1
operator|+
name|d
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|x1
operator|-
name|d
argument_list|,
name|y2
operator|-
literal|1
operator|-
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|SlRight
case|:
name|p
operator|->
name|setPen
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y1
argument_list|,
name|x2
operator|+
name|d
argument_list|,
name|y1
operator|+
name|d
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|d
operator|=
name|he
operator|-
name|d
operator|-
literal|1
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
operator|+
name|d
argument_list|,
name|y2
operator|-
name|d
argument_list|)
expr_stmt|;
name|d
operator|--
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x2
operator|+
name|d
argument_list|,
name|y1
operator|+
literal|1
operator|+
name|d
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|x2
operator|+
name|d
argument_list|,
name|y2
operator|-
literal|1
operator|-
name|d
argument_list|)
expr_stmt|;
break|break;
block|}
name|p
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Qt4CompatiblePainting
argument_list|,
name|oldQt4CompatiblePainting
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SLIDER
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
case|case
name|CC_ScrollBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|scrollbar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionSlider
name|newScrollbar
init|=
operator|*
name|scrollbar
decl_stmt|;
if|if
condition|(
name|scrollbar
operator|->
name|minimum
operator|==
name|scrollbar
operator|->
name|maximum
condition|)
name|newScrollbar
operator|.
name|state
operator|&=
operator|~
name|State_Enabled
expr_stmt|;
comment|//do not draw the slider.
name|QCommonStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|newScrollbar
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SCROLLBAR
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cmb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QBrush
name|editBrush
init|=
name|cmb
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|cmb
operator|->
name|subControls
operator|&
name|SC_ComboBoxFrame
operator|)
condition|)
block|{
if|if
condition|(
name|cmb
operator|->
name|frame
condition|)
block|{
name|QPalette
name|shadePal
init|=
name|opt
operator|->
name|palette
decl_stmt|;
name|shadePal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|shadePal
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|qDrawWinPanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|shadePal
argument_list|,
literal|true
argument_list|,
operator|&
name|editBrush
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|editBrush
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cmb
operator|->
name|subControls
operator|&
name|SC_ComboBoxArrow
condition|)
block|{
name|State
name|flags
init|=
name|State_None
decl_stmt|;
name|QRect
name|ar
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|cmb
argument_list|,
name|SC_ComboBoxArrow
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|bool
name|sunkenArrow
init|=
name|cmb
operator|->
name|activeSubControls
operator|==
name|SC_ComboBoxArrow
operator|&&
name|cmb
operator|->
name|state
operator|&
name|State_Sunken
decl_stmt|;
if|if
condition|(
name|sunkenArrow
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|ar
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Make qDrawWinButton use the right colors for drawing the shade of the button
name|QPalette
name|pal
argument_list|(
name|cmb
operator|->
name|palette
argument_list|)
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|cmb
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|cmb
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|qDrawWinButton
argument_list|(
name|p
argument_list|,
name|ar
argument_list|,
name|pal
argument_list|,
literal|false
argument_list|,
operator|&
name|cmb
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ar
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|flags
operator||=
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|flags
operator||=
name|State_HasFocus
expr_stmt|;
if|if
condition|(
name|sunkenArrow
condition|)
name|flags
operator||=
name|State_Sunken
expr_stmt|;
name|QStyleOption
name|arrowOpt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|arrowOpt
operator|.
name|rect
operator|=
name|ar
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|arrowOpt
operator|.
name|palette
operator|=
name|cmb
operator|->
name|palette
expr_stmt|;
name|arrowOpt
operator|.
name|state
operator|=
name|flags
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|arrowOpt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmb
operator|->
name|subControls
operator|&
name|SC_ComboBoxEditField
condition|)
block|{
name|QRect
name|re
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|cmb
argument_list|,
name|SC_ComboBoxEditField
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmb
operator|->
name|state
operator|&
name|State_HasFocus
operator|&&
operator|!
name|cmb
operator|->
name|editable
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|re
operator|.
name|x
argument_list|()
argument_list|,
name|re
operator|.
name|y
argument_list|()
argument_list|,
name|re
operator|.
name|width
argument_list|()
argument_list|,
name|re
operator|.
name|height
argument_list|()
argument_list|,
name|cmb
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmb
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBackground
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|highlight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|setPen
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBackground
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmb
operator|->
name|state
operator|&
name|State_HasFocus
operator|&&
operator|!
name|cmb
operator|->
name|editable
condition|)
block|{
name|QStyleOptionFocusRect
name|focus
decl_stmt|;
name|focus
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|cmb
argument_list|)
expr_stmt|;
name|focus
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|SE_ComboBoxFocusRect
argument_list|,
name|cmb
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|focus
operator|.
name|state
operator||=
name|State_FocusAtBorder
expr_stmt|;
name|focus
operator|.
name|backgroundColor
operator|=
name|cmb
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|focus
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|sb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionSpinBox
name|copy
init|=
operator|*
name|sb
decl_stmt|;
name|PrimitiveElement
name|pe
decl_stmt|;
name|bool
name|enabled
init|=
name|opt
operator|->
name|state
operator|&
name|State_Enabled
decl_stmt|;
if|if
condition|(
name|sb
operator|->
name|frame
operator|&&
operator|(
name|sb
operator|->
name|subControls
operator|&
name|SC_SpinBoxFrame
operator|)
condition|)
block|{
name|QBrush
name|editBrush
init|=
name|sb
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
decl_stmt|;
name|QRect
name|r
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|sb
argument_list|,
name|SC_SpinBoxFrame
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QPalette
name|shadePal
init|=
name|sb
operator|->
name|palette
decl_stmt|;
name|shadePal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|shadePal
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|qDrawWinPanel
argument_list|(
name|p
argument_list|,
name|r
argument_list|,
name|shadePal
argument_list|,
literal|true
argument_list|,
operator|&
name|editBrush
argument_list|)
expr_stmt|;
block|}
name|QPalette
name|shadePal
argument_list|(
name|opt
operator|->
name|palette
argument_list|)
decl_stmt|;
name|shadePal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|shadePal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sb
operator|->
name|subControls
operator|&
name|SC_SpinBoxUp
condition|)
block|{
name|copy
operator|.
name|subControls
operator|=
name|SC_SpinBoxUp
expr_stmt|;
name|QPalette
name|pal2
init|=
name|sb
operator|->
name|palette
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|sb
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepUpEnabled
operator|)
condition|)
block|{
name|pal2
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Enabled
expr_stmt|;
block|}
name|copy
operator|.
name|palette
operator|=
name|pal2
expr_stmt|;
if|if
condition|(
name|sb
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxUp
operator|&&
operator|(
name|sb
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
block|{
name|copy
operator|.
name|state
operator||=
name|State_On
expr_stmt|;
name|copy
operator|.
name|state
operator||=
name|State_Sunken
expr_stmt|;
block|}
else|else
block|{
name|copy
operator|.
name|state
operator||=
name|State_Raised
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Sunken
expr_stmt|;
block|}
name|pe
operator|=
operator|(
name|sb
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|PlusMinus
condition|?
name|PE_IndicatorSpinPlus
else|:
name|PE_IndicatorSpinUp
operator|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|sb
argument_list|,
name|SC_SpinBoxUp
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|qDrawWinButton
argument_list|(
name|p
argument_list|,
name|copy
operator|.
name|rect
argument_list|,
name|shadePal
argument_list|,
name|copy
operator|.
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
operator|&
name|copy
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
operator|-
literal|5
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|enabled
operator|||
operator|!
operator|(
name|sb
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepUpEnabled
operator|)
operator|)
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_EtchDisabledText
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
condition|)
block|{
name|QStyleOptionSpinBox
name|lightCopy
init|=
name|copy
decl_stmt|;
name|lightCopy
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|lightCopy
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|copy
operator|.
name|palette
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|lightCopy
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|copy
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|->
name|subControls
operator|&
name|SC_SpinBoxDown
condition|)
block|{
name|copy
operator|.
name|subControls
operator|=
name|SC_SpinBoxDown
expr_stmt|;
name|copy
operator|.
name|state
operator|=
name|sb
operator|->
name|state
expr_stmt|;
name|QPalette
name|pal2
init|=
name|sb
operator|->
name|palette
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|sb
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepDownEnabled
operator|)
condition|)
block|{
name|pal2
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Enabled
expr_stmt|;
block|}
name|copy
operator|.
name|palette
operator|=
name|pal2
expr_stmt|;
if|if
condition|(
name|sb
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxDown
operator|&&
operator|(
name|sb
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
block|{
name|copy
operator|.
name|state
operator||=
name|State_On
expr_stmt|;
name|copy
operator|.
name|state
operator||=
name|State_Sunken
expr_stmt|;
block|}
else|else
block|{
name|copy
operator|.
name|state
operator||=
name|State_Raised
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Sunken
expr_stmt|;
block|}
name|pe
operator|=
operator|(
name|sb
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|PlusMinus
condition|?
name|PE_IndicatorSpinMinus
else|:
name|PE_IndicatorSpinDown
operator|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|sb
argument_list|,
name|SC_SpinBoxDown
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|qDrawWinButton
argument_list|(
name|p
argument_list|,
name|copy
operator|.
name|rect
argument_list|,
name|shadePal
argument_list|,
name|copy
operator|.
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
operator|&
name|copy
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
operator|-
literal|5
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|enabled
operator|||
operator|!
operator|(
name|sb
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepDownEnabled
operator|)
operator|)
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_EtchDisabledText
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
condition|)
block|{
name|QStyleOptionSpinBox
name|lightCopy
init|=
name|copy
decl_stmt|;
name|lightCopy
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|lightCopy
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|copy
operator|.
name|palette
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|lightCopy
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|copy
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SPINBOX
default|default:
name|QCommonStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|sizeFromContents
name|QSize
name|QWindowsStyle
operator|::
name|sizeFromContents
parameter_list|(
name|ContentsType
name|ct
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QSize
modifier|&
name|csz
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QSize
name|sz
argument_list|(
name|csz
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ct
condition|)
block|{
case|case
name|CT_PushButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|sz
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|csz
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|int
name|w
init|=
name|sz
operator|.
name|width
argument_list|()
decl_stmt|,
name|h
init|=
name|sz
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|defwidth
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|AutoDefaultButton
condition|)
name|defwidth
operator|=
literal|2
operator|*
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ButtonDefaultIndicator
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|int
name|minwidth
init|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|75.
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|minheight
init|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|23.
argument_list|)
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_QWS_SMALL_PUSHBUTTON
if|if
condition|(
name|w
operator|<
name|minwidth
operator|+
name|defwidth
operator|&&
operator|!
name|btn
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|w
operator|=
name|minwidth
operator|+
name|defwidth
expr_stmt|;
if|if
condition|(
name|h
operator|<
name|minheight
operator|+
name|defwidth
condition|)
name|h
operator|=
name|minheight
operator|+
name|defwidth
expr_stmt|;
endif|#
directive|endif
name|sz
operator|=
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_MENU
case|case
name|CT_MenuItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|mi
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|int
name|w
init|=
name|sz
operator|.
name|width
argument_list|()
decl_stmt|;
name|sz
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|csz
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|mi
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|Separator
condition|)
block|{
name|sz
operator|=
name|QSize
argument_list|(
literal|10
argument_list|,
name|QWindowsStylePrivate
operator|::
name|windowsSepHeight
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mi
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|sz
operator|.
name|setHeight
argument_list|(
name|sz
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|w
operator|-=
literal|6
expr_stmt|;
block|}
if|if
condition|(
name|mi
operator|->
name|menuItemType
operator|!=
name|QStyleOptionMenuItem
operator|::
name|Separator
operator|&&
operator|!
name|mi
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|int
name|iconExtent
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|sz
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|sz
operator|.
name|height
argument_list|()
argument_list|,
name|mi
operator|->
name|icon
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
name|iconExtent
argument_list|,
name|iconExtent
argument_list|)
argument_list|)
operator|.
name|height
argument_list|()
operator|+
literal|2
operator|*
name|QWindowsStylePrivate
operator|::
name|windowsItemFrame
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|maxpmw
init|=
name|mi
operator|->
name|maxIconWidth
decl_stmt|;
name|int
name|tabSpacing
init|=
literal|20
decl_stmt|;
if|if
condition|(
name|mi
operator|->
name|text
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
condition|)
name|w
operator|+=
name|tabSpacing
expr_stmt|;
elseif|else
if|if
condition|(
name|mi
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|SubMenu
condition|)
name|w
operator|+=
literal|2
operator|*
name|QWindowsStylePrivate
operator|::
name|windowsArrowHMargin
expr_stmt|;
elseif|else
if|if
condition|(
name|mi
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|DefaultItem
condition|)
block|{
comment|// adjust the font and add the difference in size.
comment|// it would be better if the font could be adjusted in the initStyleOption qmenu func!!
name|QFontMetrics
name|fm
argument_list|(
name|mi
operator|->
name|font
argument_list|)
decl_stmt|;
name|QFont
name|fontBold
init|=
name|mi
operator|->
name|font
decl_stmt|;
name|fontBold
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QFontMetrics
name|fmBold
argument_list|(
name|fontBold
argument_list|)
decl_stmt|;
name|w
operator|+=
name|fmBold
operator|.
name|width
argument_list|(
name|mi
operator|->
name|text
argument_list|)
operator|-
name|fm
operator|.
name|width
argument_list|(
name|mi
operator|->
name|text
argument_list|)
expr_stmt|;
block|}
name|int
name|checkcol
init|=
name|qMax
argument_list|<
name|int
argument_list|>
argument_list|(
name|maxpmw
argument_list|,
name|QWindowsStylePrivate
operator|::
name|windowsCheckMarkWidth
argument_list|)
decl_stmt|;
comment|// Windows always shows a check column
name|w
operator|+=
name|checkcol
expr_stmt|;
name|w
operator|+=
name|int
argument_list|(
name|QWindowsStylePrivate
operator|::
name|windowsRightBorder
argument_list|)
operator|+
literal|10
expr_stmt|;
name|sz
operator|.
name|setWidth
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_MENU
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
case|case
name|CT_MenuBarItem
case|:
if|if
condition|(
operator|!
name|sz
operator|.
name|isEmpty
argument_list|()
condition|)
name|sz
operator|+=
name|QSize
argument_list|(
name|QWindowsStylePrivate
operator|::
name|windowsItemHMargin
operator|*
literal|4
argument_list|,
name|QWindowsStylePrivate
operator|::
name|windowsItemVMargin
operator|*
literal|2
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|CT_ToolButton
case|:
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
return|return
name|sz
operator|+=
name|QSize
argument_list|(
literal|7
argument_list|,
literal|6
argument_list|)
return|;
comment|// Otherwise, fall through
default|default:
name|sz
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|csz
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
return|return
name|sz
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|standardIcon
name|QIcon
name|QWindowsStyle
operator|::
name|standardIcon
parameter_list|(
name|StandardPixmap
name|standardIcon
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
return|return
name|QCommonStyle
operator|::
name|standardIcon
argument_list|(
name|standardIcon
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STYLE_WINDOWS
end_comment
end_unit
