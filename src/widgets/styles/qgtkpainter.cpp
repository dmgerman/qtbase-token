begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgtkpainter_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_GTK
argument_list|)
end_if
begin_comment
comment|// This class is primarily a wrapper around the gtk painter functions
end_comment
begin_comment
comment|// and takes care of converting all such calls into cached Qt pixmaps.
end_comment
begin_include
include|#
directive|include
file|<private/qstylehelper_p.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QWidget>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QStyleOption>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPixmapCache>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|macro|GTK_OBJECT_FLAGS
undef|#
directive|undef
name|GTK_OBJECT_FLAGS
DECL|macro|GTK_OBJECT_FLAGS
define|#
directive|define
name|GTK_OBJECT_FLAGS
parameter_list|(
name|obj
parameter_list|)
value|(((GtkObject*)(obj))->flags)
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
DECL|macro|QT_RED
define|#
directive|define
name|QT_RED
value|3
DECL|macro|QT_GREEN
define|#
directive|define
name|QT_GREEN
value|2
DECL|macro|QT_BLUE
define|#
directive|define
name|QT_BLUE
value|1
DECL|macro|QT_ALPHA
define|#
directive|define
name|QT_ALPHA
value|0
else|#
directive|else
define|#
directive|define
name|QT_RED
value|0
define|#
directive|define
name|QT_GREEN
value|1
define|#
directive|define
name|QT_BLUE
value|2
define|#
directive|define
name|QT_ALPHA
value|3
endif|#
directive|endif
DECL|macro|GTK_RED
define|#
directive|define
name|GTK_RED
value|2
DECL|macro|GTK_GREEN
define|#
directive|define
name|GTK_GREEN
value|1
DECL|macro|GTK_BLUE
define|#
directive|define
name|GTK_BLUE
value|0
DECL|macro|GTK_ALPHA
define|#
directive|define
name|GTK_ALPHA
value|3
comment|// To recover alpha we apply the gtk painting function two times to
comment|// white, and black window backgrounds. This can be used to
comment|// recover the premultiplied alpha channel
DECL|function|renderTheme
name|QPixmap
name|QGtkPainter
operator|::
name|renderTheme
parameter_list|(
name|uchar
modifier|*
name|bdata
parameter_list|,
name|uchar
modifier|*
name|wdata
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
specifier|const
name|int
name|bytecount
init|=
name|rect
operator|.
name|width
argument_list|()
operator|*
name|rect
operator|.
name|height
argument_list|()
operator|*
literal|4
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|bytecount
condition|;
name|index
operator|+=
literal|4
control|)
block|{
name|uchar
name|val
init|=
name|bdata
index|[
name|index
operator|+
name|GTK_BLUE
index|]
decl_stmt|;
if|if
condition|(
name|m_alpha
condition|)
block|{
name|int
name|alphaval
init|=
name|qMax
argument_list|(
name|bdata
index|[
name|index
operator|+
name|GTK_BLUE
index|]
operator|-
name|wdata
index|[
name|index
operator|+
name|GTK_BLUE
index|]
argument_list|,
name|bdata
index|[
name|index
operator|+
name|GTK_GREEN
index|]
operator|-
name|wdata
index|[
name|index
operator|+
name|GTK_GREEN
index|]
argument_list|)
decl_stmt|;
name|alphaval
operator|=
name|qMax
argument_list|(
name|alphaval
argument_list|,
name|bdata
index|[
name|index
operator|+
name|GTK_RED
index|]
operator|-
name|wdata
index|[
name|index
operator|+
name|GTK_RED
index|]
argument_list|)
operator|+
literal|255
expr_stmt|;
name|bdata
index|[
name|index
operator|+
name|QT_ALPHA
index|]
operator|=
name|alphaval
expr_stmt|;
block|}
name|bdata
index|[
name|index
operator|+
name|QT_RED
index|]
operator|=
name|bdata
index|[
name|index
operator|+
name|GTK_RED
index|]
expr_stmt|;
name|bdata
index|[
name|index
operator|+
name|QT_GREEN
index|]
operator|=
name|bdata
index|[
name|index
operator|+
name|GTK_GREEN
index|]
expr_stmt|;
name|bdata
index|[
name|index
operator|+
name|QT_BLUE
index|]
operator|=
name|val
expr_stmt|;
block|}
name|QImage
name|converted
argument_list|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bdata
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|m_alpha
condition|?
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
else|:
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_hflipped
operator|||
name|m_vflipped
condition|)
block|{
return|return
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|converted
operator|.
name|mirrored
argument_list|(
name|m_hflipped
argument_list|,
name|m_vflipped
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// on raster graphicssystem we need to do a copy here, because
comment|// we intend to deallocate the qimage bits shortly after...
return|return
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|converted
operator|.
name|copy
argument_list|()
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|// This macro is responsible for painting any GtkStyle painting function onto a QPixmap
end_comment
begin_define
DECL|macro|DRAW_TO_CACHE
define|#
directive|define
name|DRAW_TO_CACHE
parameter_list|(
name|draw_func
parameter_list|)
define|\
value|if (rect.width()> QWIDGETSIZE_MAX || rect.height()> QWIDGETSIZE_MAX)                         \         return;                                                                                    \     QRect pixmapRect(0, 0, rect.width(), rect.height());                                           \     {                                                                                              \         GdkPixmap *pixmap = QGtkStylePrivate::gdk_pixmap_new((GdkDrawable*)(m_window->window),                    \                                             rect.width(), rect.height(), -1);                      \         if (!pixmap)                                                                               \             return;                                                                                \         style = QGtkStylePrivate::gtk_style_attach (style, m_window->window);                                  \         QGtkStylePrivate::gdk_draw_rectangle(pixmap, m_alpha ? style->black_gc : *style->bg_gc, true,                \                            0, 0, rect.width(), rect.height());                                     \         draw_func;                                                                                 \         GdkPixbuf *imgb = QGtkStylePrivate::gdk_pixbuf_new(GDK_COLORSPACE_RGB, true, 8, rect.width(), rect.height());\         if (!imgb)                                                                                 \             return;                                                                                \         imgb = QGtkStylePrivate::gdk_pixbuf_get_from_drawable(imgb, pixmap, NULL, 0, 0, 0, 0,                  \                                             rect.width(), rect.height());                          \         uchar* bdata = (uchar*)QGtkStylePrivate::gdk_pixbuf_get_pixels(imgb);                                  \         if (m_alpha) {                                                                             \             QGtkStylePrivate::gdk_draw_rectangle(pixmap, style->white_gc, true, 0, 0, rect.width(), rect.height());  \             draw_func;                                                                             \             GdkPixbuf *imgw = QGtkStylePrivate::gdk_pixbuf_new(GDK_COLORSPACE_RGB, true, 8, rect.              \                                              width(), rect.height());                              \             if (!imgw)                                                                             \                 return;                                                                            \             imgw = QGtkStylePrivate::gdk_pixbuf_get_from_drawable(imgw, pixmap, NULL, 0, 0, 0, 0,              \                                                 rect.width(), rect.height());                      \             uchar* wdata = (uchar*)QGtkStylePrivate::gdk_pixbuf_get_pixels(imgw);                                    \             cache = renderTheme(bdata, wdata, rect);                                               \             QGtkStylePrivate::gdk_pixbuf_unref(imgw);                                                          \         } else {                                                                                   \             cache = renderTheme(bdata, 0, rect);                                                   \         }                                                                                          \         QGtkStylePrivate::gdk_drawable_unref(pixmap);                                                          \         QGtkStylePrivate::gdk_pixbuf_unref(imgb);                                                              \     }
end_define
begin_constructor
DECL|function|QGtkPainter
name|QGtkPainter
operator|::
name|QGtkPainter
parameter_list|(
name|QPainter
modifier|*
name|_painter
parameter_list|)
member_init_list|:
name|m_window
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtkWidget
argument_list|(
literal|"GtkWindow"
argument_list|)
argument_list|)
member_init_list|,
name|m_painter
argument_list|(
name|_painter
argument_list|)
member_init_list|,
name|m_alpha
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|m_hflipped
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_vflipped
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_usePixmapCache
argument_list|(
literal|true
argument_list|)
block|{}
end_constructor
begin_function
DECL|function|uniqueName
specifier|static
name|QString
name|uniqueName
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkShadowType
name|shadow
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|GtkWidget
modifier|*
name|widget
init|=
literal|0
parameter_list|)
block|{
comment|// Note the widget arg should ideally use the widget path, though would compromise performance
name|QString
name|tmp
init|=
name|key
operator|%
name|HexString
argument_list|<
name|uint
argument_list|>
argument_list|(
name|state
argument_list|)
operator|%
name|HexString
argument_list|<
name|uint
argument_list|>
argument_list|(
name|shadow
argument_list|)
operator|%
name|HexString
argument_list|<
name|uint
argument_list|>
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
operator|%
name|HexString
argument_list|<
name|uint
argument_list|>
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|)
operator|%
name|HexString
argument_list|<
name|quint64
argument_list|>
argument_list|(
name|quint64
argument_list|(
name|widget
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|tmp
return|;
block|}
end_function
begin_function
DECL|function|gtkState
name|GtkStateType
name|QGtkPainter
operator|::
name|gtkState
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|)
block|{
name|GtkStateType
name|state
init|=
name|GTK_STATE_NORMAL
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
condition|)
name|state
operator|=
name|GTK_STATE_INSENSITIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_MouseOver
condition|)
name|state
operator|=
name|GTK_STATE_PRELIGHT
expr_stmt|;
return|return
name|state
return|;
block|}
end_function
begin_function
DECL|function|getStyle
name|GtkStyle
modifier|*
name|QGtkPainter
operator|::
name|getStyle
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|gtkWidget
argument_list|)
expr_stmt|;
name|GtkStyle
modifier|*
name|style
init|=
name|gtkWidget
operator|->
name|style
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|style
argument_list|)
expr_stmt|;
return|return
name|style
return|;
block|}
end_function
begin_function
DECL|function|getIcon
name|QPixmap
name|QGtkPainter
operator|::
name|getIcon
parameter_list|(
specifier|const
name|char
modifier|*
name|iconName
parameter_list|,
name|GtkIconSize
name|size
parameter_list|)
block|{
name|GtkStyle
modifier|*
name|style
init|=
name|QGtkStylePrivate
operator|::
name|gtkStyle
argument_list|()
decl_stmt|;
name|GtkIconSet
modifier|*
name|iconSet
init|=
name|QGtkStylePrivate
operator|::
name|gtk_icon_factory_lookup_default
argument_list|(
name|iconName
argument_list|)
decl_stmt|;
name|GdkPixbuf
modifier|*
name|icon
init|=
name|QGtkStylePrivate
operator|::
name|gtk_icon_set_render_icon
argument_list|(
name|iconSet
argument_list|,
name|style
argument_list|,
name|GTK_TEXT_DIR_LTR
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|size
argument_list|,
name|NULL
argument_list|,
literal|"button"
argument_list|)
decl_stmt|;
name|uchar
modifier|*
name|data
init|=
operator|(
name|uchar
operator|*
operator|)
name|QGtkStylePrivate
operator|::
name|gdk_pixbuf_get_pixels
argument_list|(
name|icon
argument_list|)
decl_stmt|;
name|int
name|width
init|=
name|QGtkStylePrivate
operator|::
name|gdk_pixbuf_get_width
argument_list|(
name|icon
argument_list|)
decl_stmt|;
name|int
name|height
init|=
name|QGtkStylePrivate
operator|::
name|gdk_pixbuf_get_height
argument_list|(
name|icon
argument_list|)
decl_stmt|;
name|QImage
name|converted
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|uchar
modifier|*
name|tdata
init|=
operator|(
name|uchar
operator|*
operator|)
name|converted
operator|.
name|bits
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|height
operator|*
name|width
operator|*
literal|4
condition|;
name|index
operator|+=
literal|4
control|)
block|{
comment|//int index = y * rowstride + x;
name|tdata
index|[
name|index
operator|+
name|QT_RED
index|]
operator|=
name|data
index|[
name|index
operator|+
name|GTK_RED
index|]
expr_stmt|;
name|tdata
index|[
name|index
operator|+
name|QT_GREEN
index|]
operator|=
name|data
index|[
name|index
operator|+
name|GTK_GREEN
index|]
expr_stmt|;
name|tdata
index|[
name|index
operator|+
name|QT_BLUE
index|]
operator|=
name|data
index|[
name|index
operator|+
name|GTK_BLUE
index|]
expr_stmt|;
name|tdata
index|[
name|index
operator|+
name|QT_ALPHA
index|]
operator|=
name|data
index|[
name|index
operator|+
name|GTK_ALPHA
index|]
expr_stmt|;
block|}
name|QGtkStylePrivate
operator|::
name|gdk_pixbuf_unref
argument_list|(
name|icon
argument_list|)
expr_stmt|;
comment|// should we free iconset?
return|return
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|converted
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Note currently painted without alpha for performance reasons
end_comment
begin_function
DECL|function|paintBoxGap
name|void
name|QGtkPainter
operator|::
name|paintBoxGap
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|gchar
modifier|*
name|part
parameter_list|,
specifier|const
name|QRect
modifier|&
name|paintRect
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkShadowType
name|shadow
parameter_list|,
name|GtkPositionType
name|gap_side
parameter_list|,
name|gint
name|x
parameter_list|,
name|gint
name|width
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|)
block|{
if|if
condition|(
operator|!
name|paintRect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QRect
name|rect
init|=
name|paintRect
decl_stmt|;
comment|// To avoid exhausting cache on large tabframes we cheat a bit by
comment|// tiling the center part.
specifier|const
name|int
name|maxHeight
init|=
literal|256
decl_stmt|;
specifier|const
name|int
name|border
init|=
literal|16
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|height
argument_list|()
operator|>
name|maxHeight
operator|&&
operator|(
name|gap_side
operator|==
name|GTK_POS_TOP
operator|||
name|gap_side
operator|==
name|GTK_POS_BOTTOM
operator|)
condition|)
name|rect
operator|.
name|setHeight
argument_list|(
literal|2
operator|*
name|border
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|QLS
argument_list|(
name|part
argument_list|)
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|gtkWidget
argument_list|)
operator|%
name|HexString
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|gap_side
argument_list|)
operator|%
name|HexString
argument_list|<
name|gint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|%
name|HexString
argument_list|<
name|gint
argument_list|>
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_paint_box_gap
argument_list|(
name|style
argument_list|,
name|pixmap
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|NULL
argument_list|,
name|gtkWidget
argument_list|,
operator|(
name|gchar
operator|*
operator|)
name|part
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|gap_side
argument_list|,
name|x
argument_list|,
name|width
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rect
operator|.
name|size
argument_list|()
operator|!=
name|paintRect
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// We assume we can stretch the middle tab part
comment|// Note: the side effect of this is that pinstripe patterns will get fuzzy
specifier|const
name|QSize
name|size
init|=
name|cache
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// top part
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
name|paintRect
operator|.
name|left
argument_list|()
argument_list|,
name|paintRect
operator|.
name|top
argument_list|()
argument_list|,
name|paintRect
operator|.
name|width
argument_list|()
argument_list|,
name|border
argument_list|)
argument_list|,
name|cache
argument_list|,
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|border
argument_list|)
argument_list|)
expr_stmt|;
comment|// tiled center part
name|QPixmap
name|tilePart
argument_list|(
name|cache
operator|.
name|width
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QPainter
name|scanLinePainter
argument_list|(
operator|&
name|tilePart
argument_list|)
decl_stmt|;
name|scanLinePainter
operator|.
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|tilePart
operator|.
name|width
argument_list|()
argument_list|,
name|tilePart
operator|.
name|height
argument_list|()
argument_list|)
argument_list|,
name|cache
argument_list|,
name|QRect
argument_list|(
literal|0
argument_list|,
name|border
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|scanLinePainter
operator|.
name|end
argument_list|()
expr_stmt|;
name|m_painter
operator|->
name|drawTiledPixmap
argument_list|(
name|QRect
argument_list|(
name|paintRect
operator|.
name|left
argument_list|()
argument_list|,
name|paintRect
operator|.
name|top
argument_list|()
operator|+
name|border
argument_list|,
name|paintRect
operator|.
name|width
argument_list|()
argument_list|,
name|paintRect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|border
argument_list|)
argument_list|,
name|tilePart
argument_list|)
expr_stmt|;
comment|// bottom part
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
name|paintRect
operator|.
name|left
argument_list|()
argument_list|,
name|paintRect
operator|.
name|top
argument_list|()
operator|+
name|paintRect
operator|.
name|height
argument_list|()
operator|-
name|border
argument_list|,
name|paintRect
operator|.
name|width
argument_list|()
argument_list|,
name|border
argument_list|)
argument_list|,
name|cache
argument_list|,
name|QRect
argument_list|(
literal|0
argument_list|,
name|size
operator|.
name|height
argument_list|()
operator|-
name|border
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|border
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|paintRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintBox
name|void
name|QGtkPainter
operator|::
name|paintBox
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|gchar
modifier|*
name|part
parameter_list|,
specifier|const
name|QRect
modifier|&
name|paintRect
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkShadowType
name|shadow
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|,
specifier|const
name|QString
modifier|&
name|pmKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|paintRect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QRect
name|rect
init|=
name|paintRect
decl_stmt|;
comment|// To avoid exhausting cache on large tabframes we cheat a bit by
comment|// tiling the center part.
specifier|const
name|int
name|maxHeight
init|=
literal|256
decl_stmt|;
specifier|const
name|int
name|maxArea
init|=
literal|256
operator|*
literal|512
decl_stmt|;
specifier|const
name|int
name|border
init|=
literal|32
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|height
argument_list|()
operator|>
name|maxHeight
operator|&&
operator|(
name|rect
operator|.
name|width
argument_list|()
operator|*
name|rect
operator|.
name|height
argument_list|()
operator|>
name|maxArea
operator|)
condition|)
name|rect
operator|.
name|setHeight
argument_list|(
literal|2
operator|*
name|border
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|QLS
argument_list|(
name|part
argument_list|)
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|gtkWidget
argument_list|)
operator|%
name|pmKey
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_paint_box
argument_list|(
name|style
argument_list|,
name|pixmap
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|NULL
argument_list|,
name|gtkWidget
argument_list|,
name|part
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rect
operator|.
name|size
argument_list|()
operator|!=
name|paintRect
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// We assume we can stretch the middle tab part
comment|// Note: the side effect of this is that pinstripe patterns will get fuzzy
specifier|const
name|QSize
name|size
init|=
name|cache
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// top part
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
name|paintRect
operator|.
name|left
argument_list|()
argument_list|,
name|paintRect
operator|.
name|top
argument_list|()
argument_list|,
name|paintRect
operator|.
name|width
argument_list|()
argument_list|,
name|border
argument_list|)
argument_list|,
name|cache
argument_list|,
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|border
argument_list|)
argument_list|)
expr_stmt|;
comment|// tiled center part
name|QPixmap
name|tilePart
argument_list|(
name|cache
operator|.
name|width
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QPainter
name|scanLinePainter
argument_list|(
operator|&
name|tilePart
argument_list|)
decl_stmt|;
name|scanLinePainter
operator|.
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|tilePart
operator|.
name|width
argument_list|()
argument_list|,
name|tilePart
operator|.
name|height
argument_list|()
argument_list|)
argument_list|,
name|cache
argument_list|,
name|QRect
argument_list|(
literal|0
argument_list|,
name|border
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|scanLinePainter
operator|.
name|end
argument_list|()
expr_stmt|;
name|m_painter
operator|->
name|drawTiledPixmap
argument_list|(
name|QRect
argument_list|(
name|paintRect
operator|.
name|left
argument_list|()
argument_list|,
name|paintRect
operator|.
name|top
argument_list|()
operator|+
name|border
argument_list|,
name|paintRect
operator|.
name|width
argument_list|()
argument_list|,
name|paintRect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|border
argument_list|)
argument_list|,
name|tilePart
argument_list|)
expr_stmt|;
comment|// bottom part
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
name|paintRect
operator|.
name|left
argument_list|()
argument_list|,
name|paintRect
operator|.
name|top
argument_list|()
operator|+
name|paintRect
operator|.
name|height
argument_list|()
operator|-
name|border
argument_list|,
name|paintRect
operator|.
name|width
argument_list|()
argument_list|,
name|border
argument_list|)
argument_list|,
name|cache
argument_list|,
name|QRect
argument_list|(
literal|0
argument_list|,
name|size
operator|.
name|height
argument_list|()
operator|-
name|border
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|border
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|paintRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintHline
name|void
name|QGtkPainter
operator|::
name|paintHline
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|gchar
modifier|*
name|part
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|,
name|int
name|x1
parameter_list|,
name|int
name|x2
parameter_list|,
name|int
name|y
parameter_list|,
specifier|const
name|QString
modifier|&
name|pmKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|QLS
argument_list|(
name|part
argument_list|)
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|gtkWidget
argument_list|)
operator|%
name|HexString
argument_list|<
name|int
argument_list|>
argument_list|(
name|x1
argument_list|)
operator|%
name|HexString
argument_list|<
name|int
argument_list|>
argument_list|(
name|x2
argument_list|)
operator|%
name|HexString
argument_list|<
name|int
argument_list|>
argument_list|(
name|y
argument_list|)
operator|%
name|pmKey
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_paint_hline
argument_list|(
name|style
argument_list|,
name|pixmap
argument_list|,
name|state
argument_list|,
name|NULL
argument_list|,
name|gtkWidget
argument_list|,
name|part
argument_list|,
name|x1
argument_list|,
name|x2
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintVline
name|void
name|QGtkPainter
operator|::
name|paintVline
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|gchar
modifier|*
name|part
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|,
name|int
name|y1
parameter_list|,
name|int
name|y2
parameter_list|,
name|int
name|x
parameter_list|,
specifier|const
name|QString
modifier|&
name|pmKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|QLS
argument_list|(
name|part
argument_list|)
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|gtkWidget
argument_list|)
operator|%
name|HexString
argument_list|<
name|int
argument_list|>
argument_list|(
name|y1
argument_list|)
operator|%
name|HexString
argument_list|<
name|int
argument_list|>
argument_list|(
name|y2
argument_list|)
operator|%
name|HexString
argument_list|<
name|int
argument_list|>
argument_list|(
name|x
argument_list|)
operator|%
name|pmKey
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_paint_vline
argument_list|(
name|style
argument_list|,
name|pixmap
argument_list|,
name|state
argument_list|,
name|NULL
argument_list|,
name|gtkWidget
argument_list|,
name|part
argument_list|,
name|y1
argument_list|,
name|y2
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintExpander
name|void
name|QGtkPainter
operator|::
name|paintExpander
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|gchar
modifier|*
name|part
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkExpanderStyle
name|expander_state
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|,
specifier|const
name|QString
modifier|&
name|pmKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|QLS
argument_list|(
name|part
argument_list|)
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|gtkWidget
argument_list|)
operator|%
name|HexString
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|expander_state
argument_list|)
operator|%
name|pmKey
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_paint_expander
argument_list|(
name|style
argument_list|,
name|pixmap
argument_list|,
name|state
argument_list|,
name|NULL
argument_list|,
name|gtkWidget
argument_list|,
name|part
argument_list|,
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|expander_state
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintFocus
name|void
name|QGtkPainter
operator|::
name|paintFocus
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|gchar
modifier|*
name|part
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|,
specifier|const
name|QString
modifier|&
name|pmKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|QLS
argument_list|(
name|part
argument_list|)
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|gtkWidget
argument_list|)
operator|%
name|pmKey
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_paint_focus
argument_list|(
name|style
argument_list|,
name|pixmap
argument_list|,
name|state
argument_list|,
name|NULL
argument_list|,
name|gtkWidget
argument_list|,
name|part
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintResizeGrip
name|void
name|QGtkPainter
operator|::
name|paintResizeGrip
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|gchar
modifier|*
name|part
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkShadowType
name|shadow
parameter_list|,
name|GdkWindowEdge
name|edge
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|,
specifier|const
name|QString
modifier|&
name|pmKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|QLS
argument_list|(
name|part
argument_list|)
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|gtkWidget
argument_list|)
operator|%
name|pmKey
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_paint_resize_grip
argument_list|(
name|style
argument_list|,
name|pixmap
argument_list|,
name|state
argument_list|,
name|NULL
argument_list|,
name|gtkWidget
argument_list|,
name|part
argument_list|,
name|edge
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintArrow
name|void
name|QGtkPainter
operator|::
name|paintArrow
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|gchar
modifier|*
name|part
parameter_list|,
specifier|const
name|QRect
modifier|&
name|arrowrect
parameter_list|,
name|GtkArrowType
name|arrow_type
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkShadowType
name|shadow
parameter_list|,
name|gboolean
name|fill
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|,
specifier|const
name|QString
modifier|&
name|pmKey
parameter_list|)
block|{
name|QRect
name|rect
init|=
name|m_cliprect
operator|.
name|isValid
argument_list|()
condition|?
name|m_cliprect
else|:
name|arrowrect
decl_stmt|;
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|QLS
argument_list|(
name|part
argument_list|)
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
operator|%
name|HexString
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|arrow_type
argument_list|)
operator|%
name|pmKey
decl_stmt|;
name|GdkRectangle
name|gtkCliprect
init|=
block|{
literal|0
block|,
literal|0
block|,
name|rect
operator|.
name|width
argument_list|()
block|,
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|int
name|xOffset
init|=
name|m_cliprect
operator|.
name|isValid
argument_list|()
condition|?
name|arrowrect
operator|.
name|x
argument_list|()
operator|-
name|m_cliprect
operator|.
name|x
argument_list|()
else|:
literal|0
decl_stmt|;
name|int
name|yOffset
init|=
name|m_cliprect
operator|.
name|isValid
argument_list|()
condition|?
name|arrowrect
operator|.
name|y
argument_list|()
operator|-
name|m_cliprect
operator|.
name|y
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
argument|QGtkStylePrivate::gtk_paint_arrow (style, pixmap, state, shadow,&gtkCliprect,                                          gtkWidget,                                          part,                                          arrow_type, fill,                                          xOffset, yOffset,                                          arrowrect.width(),                                          arrowrect.height())
argument_list|)
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintHandle
name|void
name|QGtkPainter
operator|::
name|paintHandle
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|gchar
modifier|*
name|part
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkShadowType
name|shadow
parameter_list|,
name|GtkOrientation
name|orientation
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|QLS
argument_list|(
name|part
argument_list|)
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
operator|%
name|HexString
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|orientation
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_paint_handle
argument_list|(
name|style
argument_list|,
name|pixmap
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|NULL
argument_list|,
name|gtkWidget
argument_list|,
name|part
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|orientation
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintSlider
name|void
name|QGtkPainter
operator|::
name|paintSlider
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|gchar
modifier|*
name|part
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkShadowType
name|shadow
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|,
name|GtkOrientation
name|orientation
parameter_list|,
specifier|const
name|QString
modifier|&
name|pmKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|QLS
argument_list|(
name|part
argument_list|)
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|gtkWidget
argument_list|)
operator|%
name|pmKey
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_paint_slider
argument_list|(
name|style
argument_list|,
name|pixmap
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|NULL
argument_list|,
name|gtkWidget
argument_list|,
name|part
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|orientation
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintShadow
name|void
name|QGtkPainter
operator|::
name|paintShadow
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|gchar
modifier|*
name|part
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkShadowType
name|shadow
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|,
specifier|const
name|QString
modifier|&
name|pmKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|QLS
argument_list|(
name|part
argument_list|)
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
operator|%
name|pmKey
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_paint_shadow
argument_list|(
name|style
argument_list|,
name|pixmap
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|NULL
argument_list|,
name|gtkWidget
argument_list|,
name|part
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintFlatBox
name|void
name|QGtkPainter
operator|::
name|paintFlatBox
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|gchar
modifier|*
name|part
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkShadowType
name|shadow
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|,
specifier|const
name|QString
modifier|&
name|pmKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|QLS
argument_list|(
name|part
argument_list|)
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
operator|%
name|pmKey
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_paint_flat_box
argument_list|(
name|style
argument_list|,
name|pixmap
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|NULL
argument_list|,
name|gtkWidget
argument_list|,
name|part
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintExtention
name|void
name|QGtkPainter
operator|::
name|paintExtention
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|gchar
modifier|*
name|part
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkShadowType
name|shadow
parameter_list|,
name|GtkPositionType
name|gap_pos
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|QLS
argument_list|(
name|part
argument_list|)
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|gtkWidget
argument_list|)
operator|%
name|HexString
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|gap_pos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_paint_extension
argument_list|(
name|style
argument_list|,
name|pixmap
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|NULL
argument_list|,
name|gtkWidget
argument_list|,
operator|(
name|gchar
operator|*
operator|)
name|part
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|gap_pos
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintOption
name|void
name|QGtkPainter
operator|::
name|paintOption
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|QRect
modifier|&
name|radiorect
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkShadowType
name|shadow
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|,
specifier|const
name|QString
modifier|&
name|detail
parameter_list|)
block|{
name|QRect
name|rect
init|=
name|m_cliprect
operator|.
name|isValid
argument_list|()
condition|?
name|m_cliprect
else|:
name|radiorect
decl_stmt|;
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|detail
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|GdkRectangle
name|gtkCliprect
init|=
block|{
literal|0
block|,
literal|0
block|,
name|rect
operator|.
name|width
argument_list|()
block|,
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|int
name|xOffset
init|=
name|m_cliprect
operator|.
name|isValid
argument_list|()
condition|?
name|radiorect
operator|.
name|x
argument_list|()
operator|-
name|m_cliprect
operator|.
name|x
argument_list|()
else|:
literal|0
decl_stmt|;
name|int
name|yOffset
init|=
name|m_cliprect
operator|.
name|isValid
argument_list|()
condition|?
name|radiorect
operator|.
name|y
argument_list|()
operator|-
name|m_cliprect
operator|.
name|y
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_paint_option
argument_list|(
name|style
argument_list|,
name|pixmap
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
operator|&
name|gtkCliprect
argument_list|,
name|gtkWidget
argument_list|,
name|detail
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|xOffset
argument_list|,
name|yOffset
argument_list|,
name|radiorect
operator|.
name|width
argument_list|()
argument_list|,
name|radiorect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintCheckbox
name|void
name|QGtkPainter
operator|::
name|paintCheckbox
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|,
specifier|const
name|QRect
modifier|&
name|checkrect
parameter_list|,
name|GtkStateType
name|state
parameter_list|,
name|GtkShadowType
name|shadow
parameter_list|,
name|GtkStyle
modifier|*
name|style
parameter_list|,
specifier|const
name|QString
modifier|&
name|detail
parameter_list|)
block|{
name|QRect
name|rect
init|=
name|m_cliprect
operator|.
name|isValid
argument_list|()
condition|?
name|m_cliprect
else|:
name|checkrect
decl_stmt|;
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPixmap
name|cache
decl_stmt|;
name|QString
name|pixmapName
init|=
name|uniqueName
argument_list|(
name|detail
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|GdkRectangle
name|gtkCliprect
init|=
block|{
literal|0
block|,
literal|0
block|,
name|rect
operator|.
name|width
argument_list|()
block|,
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|int
name|xOffset
init|=
name|m_cliprect
operator|.
name|isValid
argument_list|()
condition|?
name|checkrect
operator|.
name|x
argument_list|()
operator|-
name|m_cliprect
operator|.
name|x
argument_list|()
else|:
literal|0
decl_stmt|;
name|int
name|yOffset
init|=
name|m_cliprect
operator|.
name|isValid
argument_list|()
condition|?
name|checkrect
operator|.
name|y
argument_list|()
operator|-
name|m_cliprect
operator|.
name|y
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|m_usePixmapCache
operator|||
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
condition|)
block|{
name|DRAW_TO_CACHE
argument_list|(
name|QGtkStylePrivate
operator|::
name|gtk_paint_check
argument_list|(
name|style
argument_list|,
name|pixmap
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
operator|&
name|gtkCliprect
argument_list|,
name|gtkWidget
argument_list|,
name|detail
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|xOffset
argument_list|,
name|yOffset
argument_list|,
name|checkrect
operator|.
name|width
argument_list|()
argument_list|,
name|checkrect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usePixmapCache
condition|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//!defined(QT_NO_STYLE_GTK)
end_comment
end_unit
