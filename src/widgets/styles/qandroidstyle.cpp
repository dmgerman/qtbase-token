begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 BogDan Vatra<bogdan@kde.org> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qandroidstyle_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_ANDROID
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_PLUGIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QFont>
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<qdrawutil.h>
end_include
begin_include
include|#
directive|include
file|<QPixmapCache>
end_include
begin_include
include|#
directive|include
file|<QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QStyleOption>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QJsonDocument>
end_include
begin_include
include|#
directive|include
file|<QJsonObject>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformnativeinterface.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformtheme.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
namespace|namespace
block|{
DECL|member|NO_COLOR
specifier|const
name|quint32
name|NO_COLOR
init|=
literal|1
decl_stmt|;
DECL|member|TRANSPARENT_COLOR
specifier|const
name|quint32
name|TRANSPARENT_COLOR
init|=
literal|0
decl_stmt|;
block|}
end_namespace
begin_constructor
DECL|function|QAndroidStyle
name|QAndroidStyle
operator|::
name|QAndroidStyle
parameter_list|()
member_init_list|:
name|QFusionStyle
argument_list|()
block|{
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
name|checkBoxControl
operator|=
name|NULL
expr_stmt|;
name|QPlatformNativeInterface
modifier|*
name|nativeInterface
init|=
name|QGuiApplication
operator|::
name|platformNativeInterface
argument_list|()
decl_stmt|;
name|QPalette
modifier|*
name|standardPalette
init|=
cast|reinterpret_cast
argument_list|<
name|QPalette
operator|*
argument_list|>
argument_list|(
name|nativeInterface
operator|->
name|nativeResourceForIntegration
argument_list|(
literal|"AndroidStandardPalette"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|standardPalette
condition|)
name|m_standardPalette
operator|=
operator|*
name|standardPalette
expr_stmt|;
name|QHash
argument_list|<
name|QByteArray
argument_list|,
name|QFont
argument_list|>
modifier|*
name|qwidgetsFonts
init|=
cast|reinterpret_cast
argument_list|<
name|QHash
argument_list|<
name|QByteArray
argument_list|,
name|QFont
argument_list|>
operator|*
argument_list|>
argument_list|(
name|nativeInterface
operator|->
name|nativeResourceForIntegration
argument_list|(
literal|"AndroidQWidgetFonts"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|qwidgetsFonts
condition|)
block|{
for|for
control|(
name|auto
name|it
init|=
name|qwidgetsFonts
operator|->
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|qwidgetsFonts
operator|->
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|QApplication
operator|::
name|setFont
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|qwidgetsFonts
operator|->
name|clear
argument_list|()
expr_stmt|;
comment|// free the memory
block|}
name|QJsonObject
modifier|*
name|object
init|=
cast|reinterpret_cast
argument_list|<
name|QJsonObject
operator|*
argument_list|>
argument_list|(
name|nativeInterface
operator|->
name|nativeResourceForIntegration
argument_list|(
literal|"AndroidStyleData"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|object
condition|)
return|return;
for|for
control|(
name|QJsonObject
operator|::
name|const_iterator
name|objectIterator
init|=
name|object
operator|->
name|constBegin
argument_list|()
init|;
name|objectIterator
operator|!=
name|object
operator|->
name|constEnd
argument_list|()
condition|;
operator|++
name|objectIterator
control|)
block|{
name|QString
name|key
init|=
name|objectIterator
operator|.
name|key
argument_list|()
decl_stmt|;
name|QJsonValue
name|value
init|=
name|objectIterator
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isObject
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Style.json structure is unrecognized."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QJsonObject
name|item
init|=
name|value
operator|.
name|toObject
argument_list|()
decl_stmt|;
name|QAndroidStyle
operator|::
name|ItemType
name|itemType
init|=
name|qtControl
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|QC_UnknownType
operator|==
name|itemType
condition|)
continue|continue;
switch|switch
condition|(
name|itemType
condition|)
block|{
case|case
name|QC_Checkbox
case|:
name|checkBoxControl
operator|=
operator|new
name|AndroidCompoundButtonControl
argument_list|(
name|item
operator|.
name|toVariantMap
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
name|m_androidControlsHash
index|[
name|int
argument_list|(
name|itemType
argument_list|)
index|]
operator|=
name|checkBoxControl
expr_stmt|;
break|break;
case|case
name|QC_RadioButton
case|:
name|m_androidControlsHash
index|[
name|int
argument_list|(
name|itemType
argument_list|)
index|]
operator|=
operator|new
name|AndroidCompoundButtonControl
argument_list|(
name|item
operator|.
name|toVariantMap
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
break|break;
case|case
name|QC_ProgressBar
case|:
name|m_androidControlsHash
index|[
name|int
argument_list|(
name|itemType
argument_list|)
index|]
operator|=
operator|new
name|AndroidProgressBarControl
argument_list|(
name|item
operator|.
name|toVariantMap
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
break|break;
case|case
name|QC_Slider
case|:
name|m_androidControlsHash
index|[
name|int
argument_list|(
name|itemType
argument_list|)
index|]
operator|=
operator|new
name|AndroidSeekBarControl
argument_list|(
name|item
operator|.
name|toVariantMap
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
break|break;
case|case
name|QC_Combobox
case|:
name|m_androidControlsHash
index|[
name|int
argument_list|(
name|itemType
argument_list|)
index|]
operator|=
operator|new
name|AndroidSpinnerControl
argument_list|(
name|item
operator|.
name|toVariantMap
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
break|break;
default|default:
name|m_androidControlsHash
index|[
name|int
argument_list|(
name|itemType
argument_list|)
index|]
operator|=
operator|new
name|AndroidControl
argument_list|(
name|item
operator|.
name|toVariantMap
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
operator|*
name|object
operator|=
name|QJsonObject
argument_list|()
expr_stmt|;
comment|// free memory
block|}
end_constructor
begin_destructor
DECL|function|~QAndroidStyle
name|QAndroidStyle
operator|::
name|~
name|QAndroidStyle
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_androidControlsHash
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|qtControl
name|QAndroidStyle
operator|::
name|ItemType
name|QAndroidStyle
operator|::
name|qtControl
parameter_list|(
specifier|const
name|QString
modifier|&
name|android
parameter_list|)
block|{
if|if
condition|(
name|android
operator|==
name|QLatin1String
argument_list|(
literal|"buttonStyle"
argument_list|)
condition|)
return|return
name|QC_Button
return|;
if|if
condition|(
name|android
operator|==
name|QLatin1String
argument_list|(
literal|"editTextStyle"
argument_list|)
condition|)
return|return
name|QC_EditText
return|;
if|if
condition|(
name|android
operator|==
name|QLatin1String
argument_list|(
literal|"radioButtonStyle"
argument_list|)
condition|)
return|return
name|QC_RadioButton
return|;
if|if
condition|(
name|android
operator|==
name|QLatin1String
argument_list|(
literal|"checkboxStyle"
argument_list|)
condition|)
return|return
name|QC_Checkbox
return|;
if|if
condition|(
name|android
operator|==
name|QLatin1String
argument_list|(
literal|"textViewStyle"
argument_list|)
condition|)
return|return
name|QC_View
return|;
if|if
condition|(
name|android
operator|==
name|QLatin1String
argument_list|(
literal|"buttonStyleToggle"
argument_list|)
condition|)
return|return
name|QC_Switch
return|;
if|if
condition|(
name|android
operator|==
name|QLatin1String
argument_list|(
literal|"spinnerStyle"
argument_list|)
condition|)
return|return
name|QC_Combobox
return|;
if|if
condition|(
name|android
operator|==
name|QLatin1String
argument_list|(
literal|"progressBarStyleHorizontal"
argument_list|)
condition|)
return|return
name|QC_ProgressBar
return|;
if|if
condition|(
name|android
operator|==
name|QLatin1String
argument_list|(
literal|"seekBarStyle"
argument_list|)
condition|)
return|return
name|QC_Slider
return|;
return|return
name|QC_UnknownType
return|;
block|}
end_function
begin_function
DECL|function|qtControl
name|QAndroidStyle
operator|::
name|ItemType
name|QAndroidStyle
operator|::
name|qtControl
parameter_list|(
name|QStyle
operator|::
name|ComplexControl
name|control
parameter_list|)
block|{
switch|switch
condition|(
name|control
condition|)
block|{
case|case
name|CC_ComboBox
case|:
return|return
name|QC_Combobox
return|;
case|case
name|CC_Slider
case|:
return|return
name|QC_Slider
return|;
default|default:
return|return
name|QC_UnknownType
return|;
block|}
block|}
end_function
begin_function
DECL|function|qtControl
name|QAndroidStyle
operator|::
name|ItemType
name|QAndroidStyle
operator|::
name|qtControl
parameter_list|(
name|QStyle
operator|::
name|ContentsType
name|contentsType
parameter_list|)
block|{
switch|switch
condition|(
name|contentsType
condition|)
block|{
case|case
name|CT_PushButton
case|:
return|return
name|QC_Button
return|;
case|case
name|CT_CheckBox
case|:
return|return
name|QC_Checkbox
return|;
case|case
name|CT_RadioButton
case|:
return|return
name|QC_RadioButton
return|;
case|case
name|CT_ComboBox
case|:
return|return
name|QC_Combobox
return|;
case|case
name|CT_ProgressBar
case|:
return|return
name|QC_ProgressBar
return|;
case|case
name|CT_Slider
case|:
return|return
name|QC_Slider
return|;
case|case
name|CT_ScrollBar
case|:
return|return
name|QC_Slider
return|;
case|case
name|CT_TabWidget
case|:
return|return
name|QC_Tab
return|;
case|case
name|CT_TabBarTab
case|:
return|return
name|QC_TabButton
return|;
case|case
name|CT_LineEdit
case|:
return|return
name|QC_EditText
return|;
case|case
name|CT_GroupBox
case|:
return|return
name|QC_GroupBox
return|;
default|default:
return|return
name|QC_UnknownType
return|;
block|}
block|}
end_function
begin_function
DECL|function|qtControl
name|QAndroidStyle
operator|::
name|ItemType
name|QAndroidStyle
operator|::
name|qtControl
parameter_list|(
name|QStyle
operator|::
name|ControlElement
name|controlElement
parameter_list|)
block|{
switch|switch
condition|(
name|controlElement
condition|)
block|{
case|case
name|CE_PushButton
case|:
case|case
name|CE_PushButtonBevel
case|:
case|case
name|CE_PushButtonLabel
case|:
return|return
name|QC_Button
return|;
case|case
name|CE_CheckBox
case|:
case|case
name|CE_CheckBoxLabel
case|:
return|return
name|QC_Checkbox
return|;
case|case
name|CE_RadioButton
case|:
case|case
name|CE_RadioButtonLabel
case|:
return|return
name|QC_RadioButton
return|;
case|case
name|CE_TabBarTab
case|:
case|case
name|CE_TabBarTabShape
case|:
case|case
name|CE_TabBarTabLabel
case|:
return|return
name|QC_Tab
return|;
case|case
name|CE_ProgressBar
case|:
case|case
name|CE_ProgressBarGroove
case|:
case|case
name|CE_ProgressBarContents
case|:
case|case
name|CE_ProgressBarLabel
case|:
return|return
name|QC_ProgressBar
return|;
case|case
name|CE_ComboBoxLabel
case|:
return|return
name|QC_Combobox
return|;
case|case
name|CE_ShapedFrame
case|:
return|return
name|QC_View
return|;
default|default:
return|return
name|QC_UnknownType
return|;
block|}
block|}
end_function
begin_function
DECL|function|qtControl
name|QAndroidStyle
operator|::
name|ItemType
name|QAndroidStyle
operator|::
name|qtControl
parameter_list|(
name|QStyle
operator|::
name|PrimitiveElement
name|primitiveElement
parameter_list|)
block|{
switch|switch
condition|(
name|primitiveElement
condition|)
block|{
case|case
name|QStyle
operator|::
name|PE_PanelLineEdit
case|:
case|case
name|QStyle
operator|::
name|PE_FrameLineEdit
case|:
return|return
name|QC_EditText
return|;
case|case
name|QStyle
operator|::
name|PE_IndicatorViewItemCheck
case|:
case|case
name|QStyle
operator|::
name|PE_IndicatorCheckBox
case|:
return|return
name|QC_Checkbox
return|;
case|case
name|QStyle
operator|::
name|PE_FrameWindow
case|:
case|case
name|QStyle
operator|::
name|PE_Widget
case|:
case|case
name|QStyle
operator|::
name|PE_Frame
case|:
case|case
name|QStyle
operator|::
name|PE_FrameFocusRect
case|:
return|return
name|QC_View
return|;
default|default:
return|return
name|QC_UnknownType
return|;
block|}
block|}
end_function
begin_function
DECL|function|qtControl
name|QAndroidStyle
operator|::
name|ItemType
name|QAndroidStyle
operator|::
name|qtControl
parameter_list|(
name|QStyle
operator|::
name|SubElement
name|subElement
parameter_list|)
block|{
switch|switch
condition|(
name|subElement
condition|)
block|{
case|case
name|QStyle
operator|::
name|SE_LineEditContents
case|:
return|return
name|QC_EditText
return|;
case|case
name|QStyle
operator|::
name|SE_PushButtonContents
case|:
case|case
name|QStyle
operator|::
name|SE_PushButtonFocusRect
case|:
return|return
name|QC_Button
return|;
case|case
name|SE_RadioButtonContents
case|:
return|return
name|QC_RadioButton
return|;
case|case
name|SE_CheckBoxContents
case|:
return|return
name|QC_Checkbox
return|;
default|default:
return|return
name|QC_UnknownType
return|;
block|}
block|}
end_function
begin_function
DECL|function|drawPrimitive
name|void
name|QAndroidStyle
operator|::
name|drawPrimitive
parameter_list|(
name|PrimitiveElement
name|pe
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
specifier|const
name|ItemType
name|itemType
init|=
name|qtControl
argument_list|(
name|pe
argument_list|)
decl_stmt|;
name|AndroidControlsHash
operator|::
name|const_iterator
name|it
init|=
name|itemType
operator|!=
name|QC_UnknownType
condition|?
name|m_androidControlsHash
operator|.
name|find
argument_list|(
name|itemType
argument_list|)
else|:
name|m_androidControlsHash
operator|.
name|end
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_androidControlsHash
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|itemType
operator|!=
name|QC_EditText
condition|)
block|{
name|it
operator|.
name|value
argument_list|()
operator|->
name|drawControl
argument_list|(
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStyleOption
name|copy
argument_list|(
operator|*
name|opt
argument_list|)
decl_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
name|it
operator|.
name|value
argument_list|()
operator|->
name|drawControl
argument_list|(
operator|&
name|copy
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|pe
operator|==
name|PE_FrameGroupBox
condition|)
block|{
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|frame
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
specifier|const
name|QStyleOptionFrameV2
modifier|*
name|frame2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrameV2
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame2
operator|&&
operator|(
name|frame2
operator|->
name|features
operator|&
name|QStyleOptionFrameV2
operator|::
name|Flat
operator|)
condition|)
block|{
name|QRect
name|fr
init|=
name|frame
operator|->
name|rect
decl_stmt|;
name|QPoint
name|p1
argument_list|(
name|fr
operator|.
name|x
argument_list|()
argument_list|,
name|fr
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|QPoint
name|p2
argument_list|(
name|fr
operator|.
name|x
argument_list|()
operator|+
name|fr
operator|.
name|width
argument_list|()
argument_list|,
name|p1
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|qDrawShadeLine
argument_list|(
name|p
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|,
name|frame
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
name|frame
operator|->
name|lineWidth
argument_list|,
name|frame
operator|->
name|midLineWidth
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qDrawShadeRect
argument_list|(
name|p
argument_list|,
name|frame
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|frame
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|frame
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|frame
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|frame
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
name|frame
operator|->
name|lineWidth
argument_list|,
name|frame
operator|->
name|midLineWidth
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|QFusionStyle
operator|::
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawControl
name|void
name|QAndroidStyle
operator|::
name|drawControl
parameter_list|(
name|QStyle
operator|::
name|ControlElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
specifier|const
name|ItemType
name|itemType
init|=
name|qtControl
argument_list|(
name|element
argument_list|)
decl_stmt|;
name|AndroidControlsHash
operator|::
name|const_iterator
name|it
init|=
name|itemType
operator|!=
name|QC_UnknownType
condition|?
name|m_androidControlsHash
operator|.
name|find
argument_list|(
name|itemType
argument_list|)
else|:
name|m_androidControlsHash
operator|.
name|end
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_androidControlsHash
operator|.
name|end
argument_list|()
condition|)
block|{
name|AndroidControl
modifier|*
name|androidControl
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|androidControl
operator|->
name|drawControl
argument_list|(
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|itemType
condition|)
block|{
case|case
name|QC_Button
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|buttonOption
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QMargins
name|padding
init|=
name|androidControl
operator|->
name|padding
argument_list|()
decl_stmt|;
name|QStyleOptionButton
name|copy
argument_list|(
operator|*
name|buttonOption
argument_list|)
decl_stmt|;
name|copy
operator|.
name|rect
operator|.
name|adjust
argument_list|(
name|padding
operator|.
name|left
argument_list|()
argument_list|,
name|padding
operator|.
name|top
argument_list|()
argument_list|,
operator|-
name|padding
operator|.
name|right
argument_list|()
argument_list|,
operator|-
name|padding
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|QFusionStyle
operator|::
name|drawControl
argument_list|(
name|CE_PushButtonLabel
argument_list|,
operator|&
name|copy
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QC_Checkbox
case|:
case|case
name|QC_RadioButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
specifier|const
name|bool
name|isRadio
init|=
operator|(
name|element
operator|==
name|CE_RadioButton
operator|)
decl_stmt|;
name|QStyleOptionButton
name|subopt
argument_list|(
operator|*
name|btn
argument_list|)
decl_stmt|;
name|subopt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonContents
else|:
name|SE_CheckBoxContents
argument_list|,
name|btn
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|QFusionStyle
operator|::
name|drawControl
argument_list|(
name|isRadio
condition|?
name|CE_RadioButtonLabel
else|:
name|CE_CheckBoxLabel
argument_list|,
operator|&
name|subopt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QC_Combobox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|comboboxOption
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QMargins
name|padding
init|=
name|androidControl
operator|->
name|padding
argument_list|()
decl_stmt|;
name|QStyleOptionComboBox
name|copy
argument_list|(
operator|*
name|comboboxOption
argument_list|)
decl_stmt|;
name|copy
operator|.
name|rect
operator|.
name|adjust
argument_list|(
name|padding
operator|.
name|left
argument_list|()
argument_list|,
name|padding
operator|.
name|top
argument_list|()
argument_list|,
operator|-
name|padding
operator|.
name|right
argument_list|()
argument_list|,
operator|-
name|padding
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|QFusionStyle
operator|::
name|drawControl
argument_list|(
name|CE_ComboBoxLabel
argument_list|,
name|comboboxOption
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|QFusionStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|QFusionStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|subElementRect
name|QRect
name|QAndroidStyle
operator|::
name|subElementRect
parameter_list|(
name|SubElement
name|subElement
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
specifier|const
name|ItemType
name|itemType
init|=
name|qtControl
argument_list|(
name|subElement
argument_list|)
decl_stmt|;
name|AndroidControlsHash
operator|::
name|const_iterator
name|it
init|=
name|itemType
operator|!=
name|QC_UnknownType
condition|?
name|m_androidControlsHash
operator|.
name|find
argument_list|(
name|itemType
argument_list|)
else|:
name|m_androidControlsHash
operator|.
name|end
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_androidControlsHash
operator|.
name|end
argument_list|()
condition|)
return|return
name|it
operator|.
name|value
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|subElement
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
return|return
name|QFusionStyle
operator|::
name|subElementRect
argument_list|(
name|subElement
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|drawComplexControl
name|void
name|QAndroidStyle
operator|::
name|drawComplexControl
parameter_list|(
name|ComplexControl
name|cc
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
specifier|const
name|ItemType
name|itemType
init|=
name|qtControl
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|AndroidControlsHash
operator|::
name|const_iterator
name|it
init|=
name|itemType
operator|!=
name|QC_UnknownType
condition|?
name|m_androidControlsHash
operator|.
name|find
argument_list|(
name|itemType
argument_list|)
else|:
name|m_androidControlsHash
operator|.
name|end
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_androidControlsHash
operator|.
name|end
argument_list|()
condition|)
block|{
name|it
operator|.
name|value
argument_list|()
operator|->
name|drawControl
argument_list|(
name|opt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cc
operator|==
name|CC_GroupBox
condition|)
block|{
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|groupBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
comment|// Draw frame
name|QRect
name|textRect
init|=
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|opt
argument_list|,
name|SC_GroupBoxLabel
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|checkBoxRect
decl_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|SC_GroupBoxCheckBox
condition|)
name|checkBoxRect
operator|=
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|opt
argument_list|,
name|SC_GroupBoxCheckBox
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxFrame
condition|)
block|{
name|QStyleOptionFrameV2
name|frame
decl_stmt|;
name|frame
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|groupBox
argument_list|)
expr_stmt|;
name|frame
operator|.
name|features
operator|=
name|groupBox
operator|->
name|features
expr_stmt|;
name|frame
operator|.
name|lineWidth
operator|=
name|groupBox
operator|->
name|lineWidth
expr_stmt|;
name|frame
operator|.
name|midLineWidth
operator|=
name|groupBox
operator|->
name|midLineWidth
expr_stmt|;
name|frame
operator|.
name|rect
operator|=
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|opt
argument_list|,
name|SC_GroupBoxFrame
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|QRegion
name|region
argument_list|(
name|groupBox
operator|->
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|groupBox
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bool
name|ltr
init|=
name|groupBox
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
decl_stmt|;
name|QRect
name|finalRect
decl_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
condition|)
block|{
name|finalRect
operator|=
name|checkBoxRect
operator|.
name|united
argument_list|(
name|textRect
argument_list|)
expr_stmt|;
name|finalRect
operator|.
name|adjust
argument_list|(
name|ltr
condition|?
operator|-
literal|4
else|:
literal|0
argument_list|,
literal|0
argument_list|,
name|ltr
condition|?
literal|0
else|:
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|finalRect
operator|=
name|textRect
expr_stmt|;
block|}
name|region
operator|-=
name|finalRect
expr_stmt|;
block|}
name|p
operator|->
name|setClipRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_FrameGroupBox
argument_list|,
operator|&
name|frame
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
comment|// Draw title
if|if
condition|(
operator|(
name|groupBox
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxLabel
operator|)
operator|&&
operator|!
name|groupBox
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QColor
name|textColor
init|=
name|groupBox
operator|->
name|textColor
decl_stmt|;
if|if
condition|(
name|textColor
operator|.
name|isValid
argument_list|()
condition|)
name|p
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|int
name|alignment
init|=
name|int
argument_list|(
name|groupBox
operator|->
name|textAlignment
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_UnderlineShortcut
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
condition|)
name|alignment
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
name|drawItemText
argument_list|(
name|p
argument_list|,
name|textRect
argument_list|,
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|AlignHCenter
operator||
name|alignment
argument_list|,
name|groupBox
operator|->
name|palette
argument_list|,
name|groupBox
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|groupBox
operator|->
name|text
argument_list|,
name|textColor
operator|.
name|isValid
argument_list|()
condition|?
name|QPalette
operator|::
name|NoRole
else|:
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|groupBox
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|=
name|textRect
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fropt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Draw checkbox
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|SC_GroupBoxCheckBox
condition|)
block|{
name|QStyleOptionButton
name|box
decl_stmt|;
name|box
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|groupBox
argument_list|)
expr_stmt|;
name|box
operator|.
name|rect
operator|=
name|checkBoxRect
expr_stmt|;
name|checkBoxControl
operator|->
name|drawControl
argument_list|(
operator|&
name|box
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
name|QFusionStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hitTestComplexControl
name|QStyle
operator|::
name|SubControl
name|QAndroidStyle
operator|::
name|hitTestComplexControl
parameter_list|(
name|ComplexControl
name|cc
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|opt
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
specifier|const
name|ItemType
name|itemType
init|=
name|qtControl
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|AndroidControlsHash
operator|::
name|const_iterator
name|it
init|=
name|itemType
operator|!=
name|QC_UnknownType
condition|?
name|m_androidControlsHash
operator|.
name|find
argument_list|(
name|itemType
argument_list|)
else|:
name|m_androidControlsHash
operator|.
name|end
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_androidControlsHash
operator|.
name|end
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|cc
condition|)
block|{
case|case
name|CC_Slider
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRect
name|r
init|=
name|it
operator|.
name|value
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|slider
argument_list|,
name|SC_SliderHandle
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isValid
argument_list|()
operator|&&
name|r
operator|.
name|contains
argument_list|(
name|pt
argument_list|)
condition|)
block|{
return|return
name|SC_SliderHandle
return|;
block|}
else|else
block|{
name|r
operator|=
name|it
operator|.
name|value
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|slider
argument_list|,
name|SC_SliderGroove
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isValid
argument_list|()
operator|&&
name|r
operator|.
name|contains
argument_list|(
name|pt
argument_list|)
condition|)
return|return
name|SC_SliderGroove
return|;
block|}
block|}
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|QFusionStyle
operator|::
name|hitTestComplexControl
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|pt
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|subControlRect
name|QRect
name|QAndroidStyle
operator|::
name|subControlRect
parameter_list|(
name|ComplexControl
name|cc
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|opt
parameter_list|,
name|SubControl
name|sc
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
specifier|const
name|ItemType
name|itemType
init|=
name|qtControl
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|AndroidControlsHash
operator|::
name|const_iterator
name|it
init|=
name|itemType
operator|!=
name|QC_UnknownType
condition|?
name|m_androidControlsHash
operator|.
name|find
argument_list|(
name|itemType
argument_list|)
else|:
name|m_androidControlsHash
operator|.
name|end
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_androidControlsHash
operator|.
name|end
argument_list|()
condition|)
return|return
name|it
operator|.
name|value
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|opt
argument_list|,
name|sc
argument_list|,
name|widget
argument_list|)
return|;
name|QRect
name|rect
init|=
name|opt
operator|->
name|rect
decl_stmt|;
switch|switch
condition|(
name|cc
condition|)
block|{
case|case
name|CC_GroupBox
case|:
block|{
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|groupBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QSize
name|textSize
init|=
name|opt
operator|->
name|fontMetrics
operator|.
name|boundingRect
argument_list|(
name|groupBox
operator|->
name|text
argument_list|)
operator|.
name|size
argument_list|()
operator|+
name|QSize
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QSize
name|checkBoxSize
init|=
name|checkBoxControl
operator|->
name|size
argument_list|(
name|opt
argument_list|)
decl_stmt|;
name|int
name|indicatorWidth
init|=
name|checkBoxSize
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|indicatorHeight
init|=
name|checkBoxSize
operator|.
name|height
argument_list|()
decl_stmt|;
name|QRect
name|checkBoxRect
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
condition|)
block|{
name|checkBoxRect
operator|.
name|setWidth
argument_list|(
name|indicatorWidth
argument_list|)
expr_stmt|;
name|checkBoxRect
operator|.
name|setHeight
argument_list|(
name|indicatorHeight
argument_list|)
expr_stmt|;
block|}
name|checkBoxRect
operator|.
name|moveLeft
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QRect
name|textRect
init|=
name|checkBoxRect
decl_stmt|;
name|textRect
operator|.
name|setSize
argument_list|(
name|textSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
condition|)
name|textRect
operator|.
name|translate
argument_list|(
name|indicatorWidth
operator|+
literal|5
argument_list|,
operator|(
name|indicatorHeight
operator|-
name|textSize
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|sc
operator|==
name|SC_GroupBoxFrame
condition|)
block|{
name|rect
operator|=
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rect
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
name|textRect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setHeight
argument_list|(
name|rect
operator|.
name|height
argument_list|()
operator|-
name|textRect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sc
operator|==
name|SC_GroupBoxContents
condition|)
block|{
name|QRect
name|frameRect
init|=
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|groupBox
operator|->
name|lineWidth
argument_list|)
decl_stmt|;
name|int
name|margin
init|=
literal|3
decl_stmt|;
name|int
name|leftMarginExtension
init|=
literal|0
decl_stmt|;
name|int
name|topMargin
init|=
name|qMax
argument_list|(
name|pixelMetric
argument_list|(
name|PM_ExclusiveIndicatorHeight
argument_list|)
argument_list|,
name|opt
operator|->
name|fontMetrics
operator|.
name|height
argument_list|()
argument_list|)
operator|+
name|groupBox
operator|->
name|lineWidth
decl_stmt|;
name|frameRect
operator|.
name|adjust
argument_list|(
name|leftMarginExtension
operator|+
name|margin
argument_list|,
name|margin
operator|+
name|topMargin
argument_list|,
operator|-
name|margin
argument_list|,
operator|-
name|margin
operator|-
name|groupBox
operator|->
name|lineWidth
argument_list|)
expr_stmt|;
name|frameRect
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
name|textRect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|rect
operator|=
name|frameRect
expr_stmt|;
name|rect
operator|.
name|setHeight
argument_list|(
name|rect
operator|.
name|height
argument_list|()
operator|-
name|textRect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sc
operator|==
name|SC_GroupBoxCheckBox
condition|)
block|{
name|rect
operator|=
name|checkBoxRect
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sc
operator|==
name|SC_GroupBoxLabel
condition|)
block|{
name|rect
operator|=
name|textRect
expr_stmt|;
block|}
return|return
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
return|;
block|}
return|return
name|rect
return|;
block|}
default|default:
break|break;
block|}
return|return
name|QFusionStyle
operator|::
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|sc
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|pixelMetric
name|int
name|QAndroidStyle
operator|::
name|pixelMetric
parameter_list|(
name|PixelMetric
name|metric
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|PM_ButtonMargin
case|:
case|case
name|PM_FocusFrameVMargin
case|:
case|case
name|PM_FocusFrameHMargin
case|:
case|case
name|PM_ComboBoxFrameWidth
case|:
case|case
name|PM_SpinBoxFrameWidth
case|:
case|case
name|PM_ScrollBarExtent
case|:
return|return
literal|0
return|;
case|case
name|PM_IndicatorWidth
case|:
return|return
name|checkBoxControl
operator|->
name|size
argument_list|(
name|option
argument_list|)
operator|.
name|width
argument_list|()
return|;
case|case
name|PM_IndicatorHeight
case|:
return|return
name|checkBoxControl
operator|->
name|size
argument_list|(
name|option
argument_list|)
operator|.
name|height
argument_list|()
return|;
default|default:
return|return
name|QFusionStyle
operator|::
name|pixelMetric
argument_list|(
name|metric
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|sizeFromContents
name|QSize
name|QAndroidStyle
operator|::
name|sizeFromContents
parameter_list|(
name|ContentsType
name|ct
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QSize
modifier|&
name|contentsSize
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|QSize
name|sz
init|=
name|QFusionStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|contentsSize
argument_list|,
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|ct
operator|==
name|CT_HeaderSection
condition|)
block|{
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|hdr
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|bool
name|nullIcon
init|=
name|hdr
operator|->
name|icon
operator|.
name|isNull
argument_list|()
decl_stmt|;
name|int
name|margin
init|=
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_HeaderMargin
argument_list|,
name|hdr
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|int
name|iconSize
init|=
name|nullIcon
condition|?
literal|0
else|:
name|checkBoxControl
operator|->
name|size
argument_list|(
name|opt
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
name|QSize
name|txt
decl_stmt|;
comment|/*  * These next 4 lines are a bad hack to fix a bug in case a QStyleSheet is applied at QApplication level.  * In that case, even if the stylesheet does not refer to headers, the header font is changed to application  * font, which is wrong. Even worst, hdr->fontMetrics(...) does not report the proper size.  */
if|if
condition|(
name|qApp
operator|->
name|styleSheet
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|txt
operator|=
name|hdr
operator|->
name|fontMetrics
operator|.
name|size
argument_list|(
literal|0
argument_list|,
name|hdr
operator|->
name|text
argument_list|)
expr_stmt|;
else|else
name|txt
operator|=
name|qApp
operator|->
name|fontMetrics
argument_list|()
operator|.
name|size
argument_list|(
literal|0
argument_list|,
name|hdr
operator|->
name|text
argument_list|)
expr_stmt|;
name|sz
operator|.
name|setHeight
argument_list|(
name|margin
operator|+
name|qMax
argument_list|(
name|iconSize
argument_list|,
name|txt
operator|.
name|height
argument_list|()
argument_list|)
operator|+
name|margin
argument_list|)
expr_stmt|;
name|sz
operator|.
name|setWidth
argument_list|(
operator|(
name|nullIcon
condition|?
literal|0
else|:
name|margin
operator|)
operator|+
name|iconSize
operator|+
operator|(
name|hdr
operator|->
name|text
operator|.
name|isNull
argument_list|()
condition|?
literal|0
else|:
name|margin
operator|)
operator|+
name|txt
operator|.
name|width
argument_list|()
operator|+
name|margin
argument_list|)
expr_stmt|;
if|if
condition|(
name|hdr
operator|->
name|sortIndicator
operator|!=
name|QStyleOptionHeader
operator|::
name|None
condition|)
block|{
name|int
name|margin
init|=
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_HeaderMargin
argument_list|,
name|hdr
argument_list|,
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|hdr
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|sz
operator|.
name|rwidth
argument_list|()
operator|+=
name|sz
operator|.
name|height
argument_list|()
operator|+
name|margin
expr_stmt|;
else|else
name|sz
operator|.
name|rheight
argument_list|()
operator|+=
name|sz
operator|.
name|width
argument_list|()
operator|+
name|margin
expr_stmt|;
block|}
return|return
name|sz
return|;
block|}
block|}
specifier|const
name|ItemType
name|itemType
init|=
name|qtControl
argument_list|(
name|ct
argument_list|)
decl_stmt|;
name|AndroidControlsHash
operator|::
name|const_iterator
name|it
init|=
name|itemType
operator|!=
name|QC_UnknownType
condition|?
name|m_androidControlsHash
operator|.
name|find
argument_list|(
name|itemType
argument_list|)
else|:
name|m_androidControlsHash
operator|.
name|end
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_androidControlsHash
operator|.
name|end
argument_list|()
condition|)
return|return
name|it
operator|.
name|value
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|opt
argument_list|,
name|sz
argument_list|,
name|w
argument_list|)
return|;
if|if
condition|(
name|ct
operator|==
name|CT_GroupBox
condition|)
block|{
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|groupBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QSize
name|textSize
init|=
name|opt
operator|->
name|fontMetrics
operator|.
name|boundingRect
argument_list|(
name|groupBox
operator|->
name|text
argument_list|)
operator|.
name|size
argument_list|()
operator|+
name|QSize
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QSize
name|checkBoxSize
init|=
name|checkBoxControl
operator|->
name|size
argument_list|(
name|opt
argument_list|)
decl_stmt|;
name|int
name|indicatorWidth
init|=
name|checkBoxSize
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|indicatorHeight
init|=
name|checkBoxSize
operator|.
name|height
argument_list|()
decl_stmt|;
name|QRect
name|checkBoxRect
decl_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
condition|)
block|{
name|checkBoxRect
operator|.
name|setWidth
argument_list|(
name|indicatorWidth
argument_list|)
expr_stmt|;
name|checkBoxRect
operator|.
name|setHeight
argument_list|(
name|indicatorHeight
argument_list|)
expr_stmt|;
block|}
name|checkBoxRect
operator|.
name|moveLeft
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QRect
name|textRect
init|=
name|checkBoxRect
decl_stmt|;
name|textRect
operator|.
name|setSize
argument_list|(
name|textSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
condition|)
name|textRect
operator|.
name|translate
argument_list|(
name|indicatorWidth
operator|+
literal|5
argument_list|,
operator|(
name|indicatorHeight
operator|-
name|textSize
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
expr_stmt|;
name|QRect
name|u
init|=
name|textRect
operator|.
name|united
argument_list|(
name|checkBoxRect
argument_list|)
decl_stmt|;
name|sz
operator|=
name|QSize
argument_list|(
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
operator|+
name|u
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sz
return|;
block|}
end_function
begin_function
DECL|function|standardPixmap
name|QPixmap
name|QAndroidStyle
operator|::
name|standardPixmap
parameter_list|(
name|StandardPixmap
name|standardPixmap
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
return|return
name|QFusionStyle
operator|::
name|standardPixmap
argument_list|(
name|standardPixmap
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|generatedIconPixmap
name|QPixmap
name|QAndroidStyle
operator|::
name|generatedIconPixmap
parameter_list|(
name|QIcon
operator|::
name|Mode
name|iconMode
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|)
specifier|const
block|{
return|return
name|QFusionStyle
operator|::
name|generatedIconPixmap
argument_list|(
name|iconMode
argument_list|,
name|pixmap
argument_list|,
name|opt
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|styleHint
name|int
name|QAndroidStyle
operator|::
name|styleHint
parameter_list|(
name|QStyle
operator|::
name|StyleHint
name|hint
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QStyleHintReturn
modifier|*
name|returnData
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|SH_Slider_AbsoluteSetButtons
case|:
return|return
name|Qt
operator|::
name|LeftButton
return|;
case|case
name|SH_Slider_PageSetButtons
case|:
return|return
literal|0
return|;
case|case
name|SH_RequestSoftwareInputPanel
case|:
return|return
name|RSIP_OnMouseClick
return|;
default|default:
return|return
name|QFusionStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|option
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|standardPalette
name|QPalette
name|QAndroidStyle
operator|::
name|standardPalette
parameter_list|()
specifier|const
block|{
return|return
name|m_standardPalette
return|;
block|}
end_function
begin_function
DECL|function|polish
name|void
name|QAndroidStyle
operator|::
name|polish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyledBackground
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unpolish
name|void
name|QAndroidStyle
operator|::
name|unpolish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyledBackground
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|AndroidDrawable
name|QAndroidStyle
operator|::
name|AndroidDrawable
operator|::
name|AndroidDrawable
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|drawable
parameter_list|,
name|QAndroidStyle
operator|::
name|ItemType
name|itemType
parameter_list|)
block|{
name|initPadding
argument_list|(
name|drawable
argument_list|)
expr_stmt|;
name|m_itemType
operator|=
name|itemType
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~AndroidDrawable
name|QAndroidStyle
operator|::
name|AndroidDrawable
operator|::
name|~
name|AndroidDrawable
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initPadding
name|void
name|QAndroidStyle
operator|::
name|AndroidDrawable
operator|::
name|initPadding
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|drawable
parameter_list|)
block|{
name|QVariantMap
operator|::
name|const_iterator
name|it
init|=
name|drawable
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"padding"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|drawable
operator|.
name|end
argument_list|()
condition|)
name|m_padding
operator|=
name|extractMargins
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|padding
specifier|const
name|QMargins
modifier|&
name|QAndroidStyle
operator|::
name|AndroidDrawable
operator|::
name|padding
parameter_list|()
specifier|const
block|{
return|return
name|m_padding
return|;
block|}
end_function
begin_function
DECL|function|size
name|QSize
name|QAndroidStyle
operator|::
name|AndroidDrawable
operator|::
name|size
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|type
argument_list|()
operator|==
name|Image
operator|||
name|type
argument_list|()
operator|==
name|NinePatch
condition|)
return|return
cast|static_cast
argument_list|<
specifier|const
name|QAndroidStyle
operator|::
name|AndroidImageDrawable
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|size
argument_list|()
return|;
return|return
name|QSize
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|fromMap
name|QAndroidStyle
operator|::
name|AndroidDrawable
modifier|*
name|QAndroidStyle
operator|::
name|AndroidDrawable
operator|::
name|fromMap
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|drawable
parameter_list|,
name|ItemType
name|itemType
parameter_list|)
block|{
specifier|const
name|QString
name|type
init|=
name|drawable
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"image"
argument_list|)
condition|)
return|return
operator|new
name|QAndroidStyle
operator|::
name|AndroidImageDrawable
argument_list|(
name|drawable
argument_list|,
name|itemType
argument_list|)
return|;
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"9patch"
argument_list|)
condition|)
return|return
operator|new
name|QAndroidStyle
operator|::
name|Android9PatchDrawable
argument_list|(
name|drawable
argument_list|,
name|itemType
argument_list|)
return|;
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"stateslist"
argument_list|)
condition|)
return|return
operator|new
name|QAndroidStyle
operator|::
name|AndroidStateDrawable
argument_list|(
name|drawable
argument_list|,
name|itemType
argument_list|)
return|;
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"layer"
argument_list|)
condition|)
return|return
operator|new
name|QAndroidStyle
operator|::
name|AndroidLayerDrawable
argument_list|(
name|drawable
argument_list|,
name|itemType
argument_list|)
return|;
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"gradient"
argument_list|)
condition|)
return|return
operator|new
name|QAndroidStyle
operator|::
name|AndroidGradientDrawable
argument_list|(
name|drawable
argument_list|,
name|itemType
argument_list|)
return|;
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"clipDrawable"
argument_list|)
condition|)
return|return
operator|new
name|QAndroidStyle
operator|::
name|AndroidClipDrawable
argument_list|(
name|drawable
argument_list|,
name|itemType
argument_list|)
return|;
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"color"
argument_list|)
condition|)
return|return
operator|new
name|QAndroidStyle
operator|::
name|AndroidColorDrawable
argument_list|(
name|drawable
argument_list|,
name|itemType
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|extractMargins
name|QMargins
name|QAndroidStyle
operator|::
name|AndroidDrawable
operator|::
name|extractMargins
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|value
parameter_list|)
block|{
name|QMargins
name|m
decl_stmt|;
name|m
operator|.
name|setLeft
argument_list|(
name|value
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"left"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setRight
argument_list|(
name|value
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"right"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setTop
argument_list|(
name|value
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"top"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setBottom
argument_list|(
name|value
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"bottom"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
end_function
begin_function
DECL|function|setPaddingLeftToSizeWidth
name|void
name|QAndroidStyle
operator|::
name|AndroidDrawable
operator|::
name|setPaddingLeftToSizeWidth
parameter_list|()
block|{
name|QSize
name|sz
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_padding
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|sz
operator|.
name|isNull
argument_list|()
condition|)
name|m_padding
operator|.
name|setLeft
argument_list|(
name|sz
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|AndroidImageDrawable
name|QAndroidStyle
operator|::
name|AndroidImageDrawable
operator|::
name|AndroidImageDrawable
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|drawable
parameter_list|,
name|QAndroidStyle
operator|::
name|ItemType
name|itemType
parameter_list|)
member_init_list|:
name|AndroidDrawable
argument_list|(
name|drawable
argument_list|,
name|itemType
argument_list|)
block|{
name|m_filePath
operator|=
name|drawable
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"path"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|m_size
operator|.
name|setHeight
argument_list|(
name|drawable
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"height"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|m_size
operator|.
name|setWidth
argument_list|(
name|drawable
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"width"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|type
name|QAndroidStyle
operator|::
name|AndroidDrawableType
name|QAndroidStyle
operator|::
name|AndroidImageDrawable
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QAndroidStyle
operator|::
name|Image
return|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QAndroidStyle
operator|::
name|AndroidImageDrawable
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_hashKey
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_hashKey
operator|=
name|QFileInfo
argument_list|(
name|m_filePath
argument_list|)
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QPixmap
name|pm
decl_stmt|;
if|if
condition|(
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|m_hashKey
argument_list|,
operator|&
name|pm
argument_list|)
condition|)
block|{
name|pm
operator|.
name|load
argument_list|(
name|m_filePath
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|m_hashKey
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|drawPixmap
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
operator|(
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|pm
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|size
name|QSize
name|QAndroidStyle
operator|::
name|AndroidImageDrawable
operator|::
name|size
parameter_list|()
specifier|const
block|{
return|return
name|m_size
return|;
block|}
end_function
begin_constructor
DECL|function|AndroidColorDrawable
name|QAndroidStyle
operator|::
name|AndroidColorDrawable
operator|::
name|AndroidColorDrawable
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|drawable
parameter_list|,
name|ItemType
name|itemType
parameter_list|)
member_init_list|:
name|AndroidDrawable
argument_list|(
name|drawable
argument_list|,
name|itemType
argument_list|)
block|{
name|m_color
operator|.
name|setRgba
argument_list|(
name|QRgb
argument_list|(
name|drawable
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"color"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|type
name|QAndroidStyle
operator|::
name|AndroidDrawableType
name|QAndroidStyle
operator|::
name|AndroidColorDrawable
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QAndroidStyle
operator|::
name|Color
return|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QAndroidStyle
operator|::
name|AndroidColorDrawable
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|)
specifier|const
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|m_color
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|Android9PatchDrawable
name|QAndroidStyle
operator|::
name|Android9PatchDrawable
operator|::
name|Android9PatchDrawable
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|drawable
parameter_list|,
name|QAndroidStyle
operator|::
name|ItemType
name|itemType
parameter_list|)
member_init_list|:
name|AndroidImageDrawable
argument_list|(
name|drawable
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"drawable"
argument_list|)
argument_list|)
operator|.
name|toMap
argument_list|()
argument_list|,
name|itemType
argument_list|)
block|{
name|initPadding
argument_list|(
name|drawable
argument_list|)
expr_stmt|;
name|QVariantMap
name|chunk
init|=
name|drawable
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"chunkInfo"
argument_list|)
argument_list|)
operator|.
name|toMap
argument_list|()
decl_stmt|;
name|extractIntArray
argument_list|(
name|chunk
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"xdivs"
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|m_chunkData
operator|.
name|xDivs
argument_list|)
expr_stmt|;
name|extractIntArray
argument_list|(
name|chunk
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"ydivs"
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|m_chunkData
operator|.
name|yDivs
argument_list|)
expr_stmt|;
name|extractIntArray
argument_list|(
name|chunk
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"colors"
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|m_chunkData
operator|.
name|colors
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|type
name|QAndroidStyle
operator|::
name|AndroidDrawableType
name|QAndroidStyle
operator|::
name|Android9PatchDrawable
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QAndroidStyle
operator|::
name|NinePatch
return|;
block|}
end_function
begin_function
DECL|function|calculateStretch
name|int
name|QAndroidStyle
operator|::
name|Android9PatchDrawable
operator|::
name|calculateStretch
parameter_list|(
name|int
name|boundsLimit
parameter_list|,
name|int
name|startingPoint
parameter_list|,
name|int
name|srcSpace
parameter_list|,
name|int
name|numStrechyPixelsRemaining
parameter_list|,
name|int
name|numFixedPixelsRemaining
parameter_list|)
block|{
name|int
name|spaceRemaining
init|=
name|boundsLimit
operator|-
name|startingPoint
decl_stmt|;
name|int
name|stretchySpaceRemaining
init|=
name|spaceRemaining
operator|-
name|numFixedPixelsRemaining
decl_stmt|;
return|return
operator|(
name|float
argument_list|(
name|srcSpace
argument_list|)
operator|*
name|stretchySpaceRemaining
operator|/
name|numStrechyPixelsRemaining
operator|+
literal|.5
operator|)
return|;
block|}
end_function
begin_function
DECL|function|extractIntArray
name|void
name|QAndroidStyle
operator|::
name|Android9PatchDrawable
operator|::
name|extractIntArray
parameter_list|(
specifier|const
name|QVariantList
modifier|&
name|values
parameter_list|,
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|array
parameter_list|)
block|{
foreach|foreach
control|(
name|QVariant
name|value
decl|,
name|values
control|)
name|array
operator|<<
name|value
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QAndroidStyle
operator|::
name|Android9PatchDrawable
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_hashKey
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_hashKey
operator|=
name|QFileInfo
argument_list|(
name|m_filePath
argument_list|)
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QPixmap
name|pixmap
decl_stmt|;
if|if
condition|(
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|m_hashKey
argument_list|,
operator|&
name|pixmap
argument_list|)
condition|)
block|{
name|pixmap
operator|.
name|load
argument_list|(
name|m_filePath
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|m_hashKey
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QRect
modifier|&
name|bounds
init|=
name|opt
operator|->
name|rect
decl_stmt|;
comment|// shamelessly stolen from Android's sources (NinepatchImpl.cpp) and adapted for Qt
specifier|const
name|int
name|pixmapWidth
init|=
name|pixmap
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|pixmapHeight
init|=
name|pixmap
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|bounds
operator|.
name|isNull
argument_list|()
operator|||
operator|!
name|pixmapWidth
operator|||
operator|!
name|pixmapHeight
condition|)
return|return;
name|QPainter
operator|::
name|RenderHints
name|savedHints
init|=
name|painter
operator|->
name|renderHints
argument_list|()
decl_stmt|;
comment|// The patchs doesn't need smooth transform !
name|painter
operator|->
name|setRenderHints
argument_list|(
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QRectF
name|dst
decl_stmt|;
name|QRectF
name|src
decl_stmt|;
specifier|const
name|qint32
name|x0
init|=
name|m_chunkData
operator|.
name|xDivs
index|[
literal|0
index|]
decl_stmt|;
specifier|const
name|qint32
name|y0
init|=
name|m_chunkData
operator|.
name|yDivs
index|[
literal|0
index|]
decl_stmt|;
specifier|const
name|quint8
name|numXDivs
init|=
name|m_chunkData
operator|.
name|xDivs
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|const
name|quint8
name|numYDivs
init|=
name|m_chunkData
operator|.
name|yDivs
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|i
decl_stmt|;
name|int
name|j
decl_stmt|;
name|int
name|colorIndex
init|=
literal|0
decl_stmt|;
name|quint32
name|color
decl_stmt|;
name|bool
name|xIsStretchable
decl_stmt|;
specifier|const
name|bool
name|initialXIsStretchable
init|=
operator|(
name|x0
operator|==
literal|0
operator|)
decl_stmt|;
name|bool
name|yIsStretchable
init|=
operator|(
name|y0
operator|==
literal|0
operator|)
decl_stmt|;
specifier|const
name|int
name|bitmapWidth
init|=
name|pixmap
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|bitmapHeight
init|=
name|pixmap
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
modifier|*
name|dstRights
init|=
cast|static_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
name|alloca
argument_list|(
operator|(
name|numXDivs
operator|+
literal|1
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|dstRightsHaveBeenCached
init|=
literal|false
decl_stmt|;
name|int
name|numStretchyXPixelsRemaining
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|numXDivs
condition|;
name|i
operator|+=
literal|2
control|)
name|numStretchyXPixelsRemaining
operator|+=
name|m_chunkData
operator|.
name|xDivs
index|[
name|i
operator|+
literal|1
index|]
operator|-
name|m_chunkData
operator|.
name|xDivs
index|[
name|i
index|]
expr_stmt|;
name|int
name|numFixedXPixelsRemaining
init|=
name|bitmapWidth
operator|-
name|numStretchyXPixelsRemaining
decl_stmt|;
name|int
name|numStretchyYPixelsRemaining
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|numYDivs
condition|;
name|i
operator|+=
literal|2
control|)
name|numStretchyYPixelsRemaining
operator|+=
name|m_chunkData
operator|.
name|yDivs
index|[
name|i
operator|+
literal|1
index|]
operator|-
name|m_chunkData
operator|.
name|yDivs
index|[
name|i
index|]
expr_stmt|;
name|int
name|numFixedYPixelsRemaining
init|=
name|bitmapHeight
operator|-
name|numStretchyYPixelsRemaining
decl_stmt|;
name|src
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setTop
argument_list|(
name|bounds
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
comment|// The first row always starts with the top being at y=0 and the bottom
comment|// being either yDivs[1] (if yDivs[0]=0) of yDivs[0].  In the former case
comment|// the first row is stretchable along the Y axis, otherwise it is fixed.
comment|// The last row always ends with the bottom being bitmap.height and the top
comment|// being either yDivs[numYDivs-2] (if yDivs[numYDivs-1]=bitmap.height) or
comment|// yDivs[numYDivs-1]. In the former case the last row is stretchable along
comment|// the Y axis, otherwise it is fixed.
comment|//
comment|// The first and last columns are similarly treated with respect to the X
comment|// axis.
comment|//
comment|// The above is to help explain some of the special casing that goes on the
comment|// code below.
comment|// The initial yDiv and whether the first row is considered stretchable or
comment|// not depends on whether yDiv[0] was zero or not.
for|for
control|(
name|j
operator|=
name|yIsStretchable
condition|?
literal|1
else|:
literal|0
init|;
name|j
operator|<=
name|numYDivs
operator|&&
name|src
operator|.
name|top
argument_list|()
operator|<
name|bitmapHeight
condition|;
name|j
operator|++
operator|,
name|yIsStretchable
operator|=
operator|!
name|yIsStretchable
control|)
block|{
name|src
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setLeft
argument_list|(
name|bounds
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|==
name|numYDivs
condition|)
block|{
name|src
operator|.
name|setBottom
argument_list|(
name|bitmapHeight
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setBottom
argument_list|(
name|bounds
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|src
operator|.
name|setBottom
argument_list|(
name|m_chunkData
operator|.
name|yDivs
index|[
name|j
index|]
argument_list|)
expr_stmt|;
specifier|const
name|int
name|srcYSize
init|=
name|src
operator|.
name|bottom
argument_list|()
operator|-
name|src
operator|.
name|top
argument_list|()
decl_stmt|;
if|if
condition|(
name|yIsStretchable
condition|)
block|{
name|dst
operator|.
name|setBottom
argument_list|(
name|dst
operator|.
name|top
argument_list|()
operator|+
name|calculateStretch
argument_list|(
name|bounds
operator|.
name|bottom
argument_list|()
argument_list|,
name|dst
operator|.
name|top
argument_list|()
argument_list|,
name|srcYSize
argument_list|,
name|numStretchyYPixelsRemaining
argument_list|,
name|numFixedYPixelsRemaining
argument_list|)
argument_list|)
expr_stmt|;
name|numStretchyYPixelsRemaining
operator|-=
name|srcYSize
expr_stmt|;
block|}
else|else
block|{
name|dst
operator|.
name|setBottom
argument_list|(
name|dst
operator|.
name|top
argument_list|()
operator|+
name|srcYSize
argument_list|)
expr_stmt|;
name|numFixedYPixelsRemaining
operator|-=
name|srcYSize
expr_stmt|;
block|}
block|}
name|xIsStretchable
operator|=
name|initialXIsStretchable
expr_stmt|;
comment|// The initial xDiv and whether the first column is considered
comment|// stretchable or not depends on whether xDiv[0] was zero or not.
for|for
control|(
name|i
operator|=
name|xIsStretchable
condition|?
literal|1
else|:
literal|0
init|;
name|i
operator|<=
name|numXDivs
operator|&&
name|src
operator|.
name|left
argument_list|()
operator|<
name|bitmapWidth
condition|;
name|i
operator|++
operator|,
name|xIsStretchable
operator|=
operator|!
name|xIsStretchable
control|)
block|{
name|color
operator|=
name|m_chunkData
operator|.
name|colors
index|[
name|colorIndex
operator|++
index|]
expr_stmt|;
if|if
condition|(
name|color
operator|!=
name|TRANSPARENT_COLOR
condition|)
name|color
operator|=
name|NO_COLOR
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|numXDivs
condition|)
block|{
name|src
operator|.
name|setRight
argument_list|(
name|bitmapWidth
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setRight
argument_list|(
name|bounds
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|src
operator|.
name|setRight
argument_list|(
name|m_chunkData
operator|.
name|xDivs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|dstRightsHaveBeenCached
condition|)
block|{
name|dst
operator|.
name|setRight
argument_list|(
name|dstRights
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|int
name|srcXSize
init|=
name|src
operator|.
name|right
argument_list|()
operator|-
name|src
operator|.
name|left
argument_list|()
decl_stmt|;
if|if
condition|(
name|xIsStretchable
condition|)
block|{
name|dst
operator|.
name|setRight
argument_list|(
name|dst
operator|.
name|left
argument_list|()
operator|+
name|calculateStretch
argument_list|(
name|bounds
operator|.
name|right
argument_list|()
argument_list|,
name|dst
operator|.
name|left
argument_list|()
argument_list|,
name|srcXSize
argument_list|,
name|numStretchyXPixelsRemaining
argument_list|,
name|numFixedXPixelsRemaining
argument_list|)
argument_list|)
expr_stmt|;
name|numStretchyXPixelsRemaining
operator|-=
name|srcXSize
expr_stmt|;
block|}
else|else
block|{
name|dst
operator|.
name|setRight
argument_list|(
name|dst
operator|.
name|left
argument_list|()
operator|+
name|srcXSize
argument_list|)
expr_stmt|;
name|numFixedXPixelsRemaining
operator|-=
name|srcXSize
expr_stmt|;
block|}
name|dstRights
index|[
name|i
index|]
operator|=
name|dst
operator|.
name|right
argument_list|()
expr_stmt|;
block|}
block|}
comment|// If this horizontal patch is too small to be displayed, leave
comment|// the destination left edge where it is and go on to the next patch
comment|// in the source.
if|if
condition|(
name|src
operator|.
name|left
argument_list|()
operator|>=
name|src
operator|.
name|right
argument_list|()
condition|)
block|{
name|src
operator|.
name|setLeft
argument_list|(
name|src
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Make sure that we actually have room to draw any bits
if|if
condition|(
name|dst
operator|.
name|right
argument_list|()
operator|<=
name|dst
operator|.
name|left
argument_list|()
operator|||
name|dst
operator|.
name|bottom
argument_list|()
operator|<=
name|dst
operator|.
name|top
argument_list|()
condition|)
block|{
goto|goto
name|nextDiv
goto|;
block|}
comment|// If this patch is transparent, skip and don't draw.
if|if
condition|(
name|color
operator|==
name|TRANSPARENT_COLOR
condition|)
goto|goto
name|nextDiv
goto|;
if|if
condition|(
name|color
operator|!=
name|NO_COLOR
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|dst
argument_list|,
name|QRgb
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|drawPixmap
argument_list|(
name|dst
argument_list|,
name|pixmap
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|nextDiv
label|:
name|src
operator|.
name|setLeft
argument_list|(
name|src
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setLeft
argument_list|(
name|dst
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|src
operator|.
name|setTop
argument_list|(
name|src
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setTop
argument_list|(
name|dst
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|dstRightsHaveBeenCached
operator|=
literal|true
expr_stmt|;
block|}
name|painter
operator|->
name|setRenderHints
argument_list|(
name|savedHints
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|AndroidGradientDrawable
name|QAndroidStyle
operator|::
name|AndroidGradientDrawable
operator|::
name|AndroidGradientDrawable
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|drawable
parameter_list|,
name|QAndroidStyle
operator|::
name|ItemType
name|itemType
parameter_list|)
member_init_list|:
name|AndroidDrawable
argument_list|(
name|drawable
argument_list|,
name|itemType
argument_list|)
member_init_list|,
name|m_orientation
argument_list|(
name|TOP_BOTTOM
argument_list|)
block|{
name|m_radius
operator|=
name|drawable
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"radius"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_radius
operator|<
literal|0
condition|)
name|m_radius
operator|=
literal|0
expr_stmt|;
name|QVariantList
name|colors
init|=
name|drawable
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"colors"
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|QVariantList
name|positions
init|=
name|drawable
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"positions"
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|colors
operator|.
name|size
argument_list|()
operator|<
name|positions
operator|.
name|size
argument_list|()
condition|?
name|colors
operator|.
name|size
argument_list|()
else|:
name|positions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|min
condition|;
name|i
operator|++
control|)
name|m_gradient
operator|.
name|setColorAt
argument_list|(
name|positions
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
name|QRgb
argument_list|(
name|colors
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|orientation
init|=
name|drawable
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"orientation"
argument_list|)
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
literal|"TOP_BOTTOM"
condition|)
comment|// draw the gradient from the top to the bottom
name|m_orientation
operator|=
name|TOP_BOTTOM
expr_stmt|;
elseif|else
if|if
condition|(
name|orientation
operator|==
literal|"TR_BL"
condition|)
comment|// draw the gradient from the top-right to the bottom-left
name|m_orientation
operator|=
name|TR_BL
expr_stmt|;
elseif|else
if|if
condition|(
name|orientation
operator|==
literal|"RIGHT_LEFT"
condition|)
comment|// draw the gradient from the right to the left
name|m_orientation
operator|=
name|RIGHT_LEFT
expr_stmt|;
elseif|else
if|if
condition|(
name|orientation
operator|==
literal|"BR_TL"
condition|)
comment|// draw the gradient from the bottom-right to the top-left
name|m_orientation
operator|=
name|BR_TL
expr_stmt|;
elseif|else
if|if
condition|(
name|orientation
operator|==
literal|"BOTTOM_TOP"
condition|)
comment|// draw the gradient from the bottom to the top
name|m_orientation
operator|=
name|BOTTOM_TOP
expr_stmt|;
elseif|else
if|if
condition|(
name|orientation
operator|==
literal|"BL_TR"
condition|)
comment|// draw the gradient from the bottom-left to the top-right
name|m_orientation
operator|=
name|BL_TR
expr_stmt|;
elseif|else
if|if
condition|(
name|orientation
operator|==
literal|"LEFT_RIGHT"
condition|)
comment|// draw the gradient from the left to the right
name|m_orientation
operator|=
name|LEFT_RIGHT
expr_stmt|;
elseif|else
if|if
condition|(
name|orientation
operator|==
literal|"TL_BR"
condition|)
comment|// draw the gradient from the top-left to the bottom-right
name|m_orientation
operator|=
name|TL_BR
expr_stmt|;
else|else
name|qWarning
argument_list|(
literal|"AndroidGradientDrawable: unknown orientation"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|type
name|QAndroidStyle
operator|::
name|AndroidDrawableType
name|QAndroidStyle
operator|::
name|AndroidGradientDrawable
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QAndroidStyle
operator|::
name|Gradient
return|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QAndroidStyle
operator|::
name|AndroidGradientDrawable
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|width
init|=
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|m_orientation
condition|)
block|{
case|case
name|TOP_BOTTOM
case|:
comment|// draw the gradient from the top to the bottom
name|m_gradient
operator|.
name|setStart
argument_list|(
name|width
operator|/
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_gradient
operator|.
name|setFinalStop
argument_list|(
name|width
operator|/
literal|2
argument_list|,
name|height
argument_list|)
expr_stmt|;
break|break;
case|case
name|TR_BL
case|:
comment|// draw the gradient from the top-right to the bottom-left
name|m_gradient
operator|.
name|setStart
argument_list|(
name|width
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_gradient
operator|.
name|setFinalStop
argument_list|(
literal|0
argument_list|,
name|height
argument_list|)
expr_stmt|;
break|break;
case|case
name|RIGHT_LEFT
case|:
comment|// draw the gradient from the right to the left
name|m_gradient
operator|.
name|setStart
argument_list|(
name|width
argument_list|,
name|height
operator|/
literal|2
argument_list|)
expr_stmt|;
name|m_gradient
operator|.
name|setFinalStop
argument_list|(
literal|0
argument_list|,
name|height
operator|/
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|BR_TL
case|:
comment|// draw the gradient from the bottom-right to the top-left
name|m_gradient
operator|.
name|setStart
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|m_gradient
operator|.
name|setFinalStop
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|BOTTOM_TOP
case|:
comment|// draw the gradient from the bottom to the top
name|m_gradient
operator|.
name|setStart
argument_list|(
name|width
operator|/
literal|2
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|m_gradient
operator|.
name|setFinalStop
argument_list|(
name|width
operator|/
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|BL_TR
case|:
comment|// draw the gradient from the bottom-left to the top-right
name|m_gradient
operator|.
name|setStart
argument_list|(
literal|0
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|m_gradient
operator|.
name|setFinalStop
argument_list|(
name|width
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEFT_RIGHT
case|:
comment|// draw the gradient from the left to the right
name|m_gradient
operator|.
name|setStart
argument_list|(
literal|0
argument_list|,
name|height
operator|/
literal|2
argument_list|)
expr_stmt|;
name|m_gradient
operator|.
name|setFinalStop
argument_list|(
name|width
argument_list|,
name|height
operator|/
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|TL_BR
case|:
comment|// draw the gradient from the top-left to the bottom-right
name|m_gradient
operator|.
name|setStart
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_gradient
operator|.
name|setFinalStop
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
break|break;
block|}
specifier|const
name|QBrush
modifier|&
name|oldBrush
init|=
name|painter
operator|->
name|brush
argument_list|()
decl_stmt|;
specifier|const
name|QPen
name|oldPen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|m_gradient
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRoundedRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|m_radius
argument_list|,
name|m_radius
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|oldBrush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|size
name|QSize
name|QAndroidStyle
operator|::
name|AndroidGradientDrawable
operator|::
name|size
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
name|m_radius
operator|*
literal|2
argument_list|,
name|m_radius
operator|*
literal|2
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|AndroidClipDrawable
name|QAndroidStyle
operator|::
name|AndroidClipDrawable
operator|::
name|AndroidClipDrawable
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|drawable
parameter_list|,
name|QAndroidStyle
operator|::
name|ItemType
name|itemType
parameter_list|)
member_init_list|:
name|AndroidDrawable
argument_list|(
name|drawable
argument_list|,
name|itemType
argument_list|)
block|{
name|m_drawable
operator|=
name|fromMap
argument_list|(
name|drawable
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"drawable"
argument_list|)
argument_list|)
operator|.
name|toMap
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
name|m_factor
operator|=
literal|0
expr_stmt|;
name|m_orientation
operator|=
name|Qt
operator|::
name|Horizontal
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~AndroidClipDrawable
name|QAndroidStyle
operator|::
name|AndroidClipDrawable
operator|::
name|~
name|AndroidClipDrawable
parameter_list|()
block|{
operator|delete
name|m_drawable
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|type
name|QAndroidStyle
operator|::
name|AndroidDrawableType
name|QAndroidStyle
operator|::
name|AndroidClipDrawable
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QAndroidStyle
operator|::
name|Clip
return|;
block|}
end_function
begin_function
DECL|function|setFactor
name|void
name|QAndroidStyle
operator|::
name|AndroidClipDrawable
operator|::
name|setFactor
parameter_list|(
name|double
name|factor
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|m_factor
operator|=
name|factor
expr_stmt|;
name|m_orientation
operator|=
name|orientation
expr_stmt|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QAndroidStyle
operator|::
name|AndroidClipDrawable
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|)
specifier|const
block|{
name|QStyleOption
name|copy
argument_list|(
operator|*
name|opt
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|copy
operator|.
name|rect
operator|.
name|setWidth
argument_list|(
name|copy
operator|.
name|rect
operator|.
name|width
argument_list|()
operator|*
name|m_factor
argument_list|)
expr_stmt|;
else|else
name|copy
operator|.
name|rect
operator|.
name|setHeight
argument_list|(
name|copy
operator|.
name|rect
operator|.
name|height
argument_list|()
operator|*
name|m_factor
argument_list|)
expr_stmt|;
name|m_drawable
operator|->
name|draw
argument_list|(
name|painter
argument_list|,
operator|&
name|copy
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|AndroidStateDrawable
name|QAndroidStyle
operator|::
name|AndroidStateDrawable
operator|::
name|AndroidStateDrawable
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|drawable
parameter_list|,
name|QAndroidStyle
operator|::
name|ItemType
name|itemType
parameter_list|)
member_init_list|:
name|AndroidDrawable
argument_list|(
name|drawable
argument_list|,
name|itemType
argument_list|)
block|{
name|QVariantList
name|states
init|=
name|drawable
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"stateslist"
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QVariant
name|stateVariant
decl|,
name|states
control|)
block|{
name|QVariantMap
name|state
init|=
name|stateVariant
operator|.
name|toMap
argument_list|()
decl_stmt|;
specifier|const
name|int
name|s
init|=
name|extractState
argument_list|(
name|state
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"states"
argument_list|)
argument_list|)
operator|.
name|toMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|s
condition|)
continue|continue;
specifier|const
name|AndroidDrawable
modifier|*
name|ad
init|=
name|fromMap
argument_list|(
name|state
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"drawable"
argument_list|)
argument_list|)
operator|.
name|toMap
argument_list|()
argument_list|,
name|itemType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ad
condition|)
continue|continue;
name|StateType
name|item
decl_stmt|;
name|item
operator|.
name|first
operator|=
name|s
expr_stmt|;
name|item
operator|.
name|second
operator|=
name|ad
expr_stmt|;
name|m_states
operator|<<
name|item
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~AndroidStateDrawable
name|QAndroidStyle
operator|::
name|AndroidStateDrawable
operator|::
name|~
name|AndroidStateDrawable
parameter_list|()
block|{
foreach|foreach
control|(
specifier|const
name|StateType
name|type
decl|,
name|m_states
control|)
operator|delete
name|type
operator|.
name|second
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|type
name|QAndroidStyle
operator|::
name|AndroidDrawableType
name|QAndroidStyle
operator|::
name|AndroidStateDrawable
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QAndroidStyle
operator|::
name|State
return|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QAndroidStyle
operator|::
name|AndroidStateDrawable
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|)
specifier|const
block|{
specifier|const
name|AndroidDrawable
modifier|*
name|drawable
init|=
name|bestAndroidStateMatch
argument_list|(
name|opt
argument_list|)
decl_stmt|;
if|if
condition|(
name|drawable
condition|)
name|drawable
operator|->
name|draw
argument_list|(
name|painter
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeImage
name|QSize
name|QAndroidStyle
operator|::
name|AndroidStateDrawable
operator|::
name|sizeImage
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|)
specifier|const
block|{
name|QSize
name|s
decl_stmt|;
specifier|const
name|AndroidDrawable
modifier|*
name|drawable
init|=
name|bestAndroidStateMatch
argument_list|(
name|opt
argument_list|)
decl_stmt|;
if|if
condition|(
name|drawable
condition|)
name|s
operator|=
name|drawable
operator|->
name|size
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|bestAndroidStateMatch
specifier|const
name|QAndroidStyle
operator|::
name|AndroidDrawable
modifier|*
name|QAndroidStyle
operator|::
name|AndroidStateDrawable
operator|::
name|bestAndroidStateMatch
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|)
specifier|const
block|{
specifier|const
name|AndroidDrawable
modifier|*
name|bestMatch
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|opt
condition|)
block|{
if|if
condition|(
name|m_states
operator|.
name|size
argument_list|()
condition|)
return|return
name|m_states
index|[
literal|0
index|]
operator|.
name|second
return|;
return|return
name|bestMatch
return|;
block|}
name|uint
name|bestCost
init|=
literal|0xffff
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|StateType
modifier|&
name|state
decl|,
name|m_states
control|)
block|{
if|if
condition|(
name|int
argument_list|(
name|opt
operator|->
name|state
argument_list|)
operator|==
name|state
operator|.
name|first
condition|)
return|return
name|state
operator|.
name|second
return|;
name|uint
name|cost
init|=
literal|1
decl_stmt|;
name|int
name|difference
init|=
name|int
argument_list|(
name|opt
operator|->
name|state
operator|^
name|state
operator|.
name|first
argument_list|)
decl_stmt|;
if|if
condition|(
name|difference
operator|&
name|QStyle
operator|::
name|State_Active
condition|)
name|cost
operator|<<=
literal|1
expr_stmt|;
if|if
condition|(
name|difference
operator|&
name|QStyle
operator|::
name|State_Enabled
condition|)
name|cost
operator|<<=
literal|1
expr_stmt|;
if|if
condition|(
name|difference
operator|&
name|QStyle
operator|::
name|State_Raised
condition|)
name|cost
operator|<<=
literal|1
expr_stmt|;
if|if
condition|(
name|difference
operator|&
name|QStyle
operator|::
name|State_Sunken
condition|)
name|cost
operator|<<=
literal|1
expr_stmt|;
if|if
condition|(
name|difference
operator|&
name|QStyle
operator|::
name|State_Off
condition|)
name|cost
operator|<<=
literal|1
expr_stmt|;
if|if
condition|(
name|difference
operator|&
name|QStyle
operator|::
name|State_On
condition|)
name|cost
operator|<<=
literal|1
expr_stmt|;
if|if
condition|(
name|difference
operator|&
name|QStyle
operator|::
name|State_HasFocus
condition|)
name|cost
operator|<<=
literal|1
expr_stmt|;
if|if
condition|(
name|difference
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
name|cost
operator|<<=
literal|1
expr_stmt|;
if|if
condition|(
name|cost
operator|<
name|bestCost
condition|)
block|{
name|bestCost
operator|=
name|cost
expr_stmt|;
name|bestMatch
operator|=
name|state
operator|.
name|second
expr_stmt|;
block|}
block|}
return|return
name|bestMatch
return|;
block|}
end_function
begin_function
DECL|function|extractState
name|int
name|QAndroidStyle
operator|::
name|AndroidStateDrawable
operator|::
name|extractState
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|value
parameter_list|)
block|{
name|int
name|state
init|=
name|QStyle
operator|::
name|State_Enabled
operator||
name|QStyle
operator|::
name|State_Active
decl_stmt|;
empty_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
name|key
decl|,
name|value
operator|.
name|keys
argument_list|()
control|)
block|{
name|bool
name|val
init|=
name|value
operator|.
name|value
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"enabled"
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
condition|)
name|state
operator||=
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
else|else
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"window_focused"
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
condition|)
name|state
operator||=
name|QStyle
operator|::
name|State_Active
expr_stmt|;
else|else
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Active
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"focused"
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
condition|)
name|state
operator||=
name|QStyle
operator|::
name|State_HasFocus
expr_stmt|;
else|else
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_HasFocus
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"checked"
argument_list|)
condition|)
block|{
name|state
operator||=
name|val
condition|?
name|QStyle
operator|::
name|State_On
else|:
name|QStyle
operator|::
name|State_Off
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"pressed"
argument_list|)
condition|)
block|{
name|state
operator||=
name|val
condition|?
name|QStyle
operator|::
name|State_Sunken
else|:
name|QStyle
operator|::
name|State_Raised
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"selected"
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
condition|)
name|state
operator||=
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
else|else
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"active"
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
condition|)
name|state
operator||=
name|QStyle
operator|::
name|State_Active
expr_stmt|;
else|else
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Active
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"multiline"
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"background"
argument_list|)
operator|&&
name|val
condition|)
return|return
operator|-
literal|1
return|;
block|}
return|return
name|state
return|;
block|}
end_function
begin_function
DECL|function|setPaddingLeftToSizeWidth
name|void
name|QAndroidStyle
operator|::
name|AndroidStateDrawable
operator|::
name|setPaddingLeftToSizeWidth
parameter_list|()
block|{
foreach|foreach
control|(
specifier|const
name|StateType
name|type
decl|,
name|m_states
control|)
cast|const_cast
argument_list|<
name|AndroidDrawable
operator|*
argument_list|>
argument_list|(
name|type
operator|.
name|second
argument_list|)
operator|->
name|setPaddingLeftToSizeWidth
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|AndroidLayerDrawable
name|QAndroidStyle
operator|::
name|AndroidLayerDrawable
operator|::
name|AndroidLayerDrawable
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|drawable
parameter_list|,
name|QAndroidStyle
operator|::
name|ItemType
name|itemType
parameter_list|)
member_init_list|:
name|AndroidDrawable
argument_list|(
name|drawable
argument_list|,
name|itemType
argument_list|)
block|{
name|m_id
operator|=
literal|0
expr_stmt|;
name|m_factor
operator|=
literal|1
expr_stmt|;
name|m_orientation
operator|=
name|Qt
operator|::
name|Horizontal
expr_stmt|;
name|QVariantList
name|layers
init|=
name|drawable
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"layers"
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QVariant
name|layer
decl|,
name|layers
control|)
block|{
name|QVariantMap
name|layerMap
init|=
name|layer
operator|.
name|toMap
argument_list|()
decl_stmt|;
name|AndroidDrawable
modifier|*
name|ad
init|=
name|fromMap
argument_list|(
name|layerMap
argument_list|,
name|itemType
argument_list|)
decl_stmt|;
if|if
condition|(
name|ad
condition|)
block|{
name|LayerType
name|l
decl_stmt|;
name|l
operator|.
name|second
operator|=
name|ad
expr_stmt|;
name|l
operator|.
name|first
operator|=
name|layerMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"id"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|m_layers
operator|<<
name|l
expr_stmt|;
block|}
block|}
block|}
end_constructor
begin_destructor
DECL|function|~AndroidLayerDrawable
name|QAndroidStyle
operator|::
name|AndroidLayerDrawable
operator|::
name|~
name|AndroidLayerDrawable
parameter_list|()
block|{
foreach|foreach
control|(
specifier|const
name|LayerType
modifier|&
name|layer
decl|,
name|m_layers
control|)
operator|delete
name|layer
operator|.
name|second
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|type
name|QAndroidStyle
operator|::
name|AndroidDrawableType
name|QAndroidStyle
operator|::
name|AndroidLayerDrawable
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QAndroidStyle
operator|::
name|Layer
return|;
block|}
end_function
begin_function
DECL|function|setFactor
name|void
name|QAndroidStyle
operator|::
name|AndroidLayerDrawable
operator|::
name|setFactor
parameter_list|(
name|int
name|id
parameter_list|,
name|double
name|factor
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|m_id
operator|=
name|id
expr_stmt|;
name|m_factor
operator|=
name|factor
expr_stmt|;
name|m_orientation
operator|=
name|orientation
expr_stmt|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QAndroidStyle
operator|::
name|AndroidLayerDrawable
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|)
specifier|const
block|{
foreach|foreach
control|(
specifier|const
name|LayerType
modifier|&
name|layer
decl|,
name|m_layers
control|)
block|{
if|if
condition|(
name|layer
operator|.
name|first
operator|==
name|m_id
condition|)
block|{
name|QStyleOption
name|copy
argument_list|(
operator|*
name|opt
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|copy
operator|.
name|rect
operator|.
name|setWidth
argument_list|(
name|copy
operator|.
name|rect
operator|.
name|width
argument_list|()
operator|*
name|m_factor
argument_list|)
expr_stmt|;
else|else
name|copy
operator|.
name|rect
operator|.
name|setHeight
argument_list|(
name|copy
operator|.
name|rect
operator|.
name|height
argument_list|()
operator|*
name|m_factor
argument_list|)
expr_stmt|;
name|layer
operator|.
name|second
operator|->
name|draw
argument_list|(
name|painter
argument_list|,
operator|&
name|copy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|layer
operator|.
name|second
operator|->
name|draw
argument_list|(
name|painter
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|layer
name|QAndroidStyle
operator|::
name|AndroidDrawable
modifier|*
name|QAndroidStyle
operator|::
name|AndroidLayerDrawable
operator|::
name|layer
parameter_list|(
name|int
name|id
parameter_list|)
specifier|const
block|{
foreach|foreach
control|(
specifier|const
name|LayerType
modifier|&
name|layer
decl|,
name|m_layers
control|)
if|if
condition|(
name|layer
operator|.
name|first
operator|==
name|id
condition|)
return|return
name|layer
operator|.
name|second
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|size
name|QSize
name|QAndroidStyle
operator|::
name|AndroidLayerDrawable
operator|::
name|size
parameter_list|()
specifier|const
block|{
name|QSize
name|sz
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|LayerType
modifier|&
name|layer
decl|,
name|m_layers
control|)
name|sz
operator|=
name|sz
operator|.
name|expandedTo
argument_list|(
name|layer
operator|.
name|second
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
block|}
end_function
begin_constructor
DECL|function|AndroidControl
name|QAndroidStyle
operator|::
name|AndroidControl
operator|::
name|AndroidControl
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|control
parameter_list|,
name|QAndroidStyle
operator|::
name|ItemType
name|itemType
parameter_list|)
block|{
name|QVariantMap
operator|::
name|const_iterator
name|it
init|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"View_background"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
name|m_background
operator|=
name|AndroidDrawable
operator|::
name|fromMap
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|toMap
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
else|else
name|m_background
operator|=
literal|0
expr_stmt|;
name|it
operator|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"View_minWidth"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
name|m_minSize
operator|.
name|setWidth
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"View_minHeight"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
name|m_minSize
operator|.
name|setHeight
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"View_maxWidth"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
name|m_maxSize
operator|.
name|setWidth
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"View_maxHeight"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
name|m_maxSize
operator|.
name|setHeight
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~AndroidControl
name|QAndroidStyle
operator|::
name|AndroidControl
operator|::
name|~
name|AndroidControl
parameter_list|()
block|{
operator|delete
name|m_background
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|drawControl
name|void
name|QAndroidStyle
operator|::
name|AndroidControl
operator|::
name|drawControl
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
comment|/* w */
parameter_list|)
block|{
if|if
condition|(
name|m_background
condition|)
block|{
name|m_background
operator|->
name|draw
argument_list|(
name|p
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|frame
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|frame
operator|->
name|state
operator|&
name|State_Sunken
operator|)
operator|||
operator|(
name|frame
operator|->
name|state
operator|&
name|State_Raised
operator|)
condition|)
block|{
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|frame
operator|->
name|rect
argument_list|,
name|frame
operator|->
name|palette
argument_list|,
name|frame
operator|->
name|state
operator|&
name|State_Sunken
argument_list|,
name|frame
operator|->
name|lineWidth
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qDrawPlainRect
argument_list|(
name|p
argument_list|,
name|frame
operator|->
name|rect
argument_list|,
name|frame
operator|->
name|palette
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|frame
operator|->
name|lineWidth
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
specifier|const
name|QStyleOptionFocusRect
modifier|*
name|fropt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFocusRect
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QColor
name|bg
init|=
name|fropt
operator|->
name|backgroundColor
decl_stmt|;
name|QPen
name|oldPen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
if|if
condition|(
name|bg
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|h
decl_stmt|,
name|s
decl_stmt|,
name|v
decl_stmt|;
name|bg
operator|.
name|getHsv
argument_list|(
operator|&
name|h
argument_list|,
operator|&
name|s
argument_list|,
operator|&
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|>=
literal|128
condition|)
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QRect
name|focusRect
init|=
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|focusRect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//draw pen inclusive
name|p
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Background
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|subElementRect
name|QRect
name|QAndroidStyle
operator|::
name|AndroidControl
operator|::
name|subElementRect
parameter_list|(
name|QStyle
operator|::
name|SubElement
comment|/* subElement */
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
comment|/* widget */
parameter_list|)
specifier|const
block|{
if|if
condition|(
specifier|const
name|AndroidDrawable
modifier|*
name|drawable
init|=
name|backgroundDrawable
argument_list|()
condition|)
block|{
if|if
condition|(
name|drawable
operator|->
name|type
argument_list|()
operator|==
name|State
condition|)
name|drawable
operator|=
cast|static_cast
argument_list|<
specifier|const
name|AndroidStateDrawable
operator|*
argument_list|>
argument_list|(
name|backgroundDrawable
argument_list|()
argument_list|)
operator|->
name|bestAndroidStateMatch
argument_list|(
name|option
argument_list|)
expr_stmt|;
specifier|const
name|QMargins
modifier|&
name|padding
init|=
name|drawable
operator|->
name|padding
argument_list|()
decl_stmt|;
name|QRect
name|r
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|padding
operator|.
name|left
argument_list|()
argument_list|,
name|padding
operator|.
name|top
argument_list|()
argument_list|,
operator|-
name|padding
operator|.
name|right
argument_list|()
argument_list|,
operator|-
name|padding
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|width
argument_list|()
operator|<
name|m_minSize
operator|.
name|width
argument_list|()
condition|)
name|r
operator|.
name|setWidth
argument_list|(
name|m_minSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|height
argument_list|()
operator|<
name|m_minSize
operator|.
name|height
argument_list|()
condition|)
name|r
operator|.
name|setHeight
argument_list|(
name|m_minSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|r
argument_list|)
return|;
block|}
return|return
name|option
operator|->
name|rect
return|;
block|}
end_function
begin_function
DECL|function|subControlRect
name|QRect
name|QAndroidStyle
operator|::
name|AndroidControl
operator|::
name|subControlRect
parameter_list|(
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|QStyle
operator|::
name|SubControl
comment|/*sc*/
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
return|return
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_CustomBase
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sizeFromContents
name|QSize
name|QAndroidStyle
operator|::
name|AndroidControl
operator|::
name|sizeFromContents
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QSize
modifier|&
name|contentsSize
parameter_list|,
specifier|const
name|QWidget
modifier|*
comment|/* w */
parameter_list|)
specifier|const
block|{
name|QSize
name|sz
decl_stmt|;
if|if
condition|(
specifier|const
name|AndroidDrawable
modifier|*
name|drawable
init|=
name|backgroundDrawable
argument_list|()
condition|)
block|{
if|if
condition|(
name|drawable
operator|->
name|type
argument_list|()
operator|==
name|State
condition|)
name|drawable
operator|=
cast|static_cast
argument_list|<
specifier|const
name|AndroidStateDrawable
operator|*
argument_list|>
argument_list|(
name|backgroundDrawable
argument_list|()
argument_list|)
operator|->
name|bestAndroidStateMatch
argument_list|(
name|opt
argument_list|)
expr_stmt|;
specifier|const
name|QMargins
modifier|&
name|padding
init|=
name|drawable
operator|->
name|padding
argument_list|()
decl_stmt|;
name|sz
operator|.
name|setWidth
argument_list|(
name|padding
operator|.
name|left
argument_list|()
operator|+
name|padding
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|sz
operator|.
name|setHeight
argument_list|(
name|padding
operator|.
name|top
argument_list|()
operator|+
name|padding
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|isEmpty
argument_list|()
condition|)
name|sz
operator|=
name|drawable
operator|->
name|size
argument_list|()
expr_stmt|;
block|}
name|sz
operator|+=
name|contentsSize
expr_stmt|;
if|if
condition|(
name|contentsSize
operator|.
name|height
argument_list|()
operator|<
name|opt
operator|->
name|fontMetrics
operator|.
name|height
argument_list|()
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|sz
operator|.
name|height
argument_list|()
operator|+
operator|(
name|opt
operator|->
name|fontMetrics
operator|.
name|height
argument_list|()
operator|-
name|contentsSize
operator|.
name|height
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|<
name|m_minSize
operator|.
name|height
argument_list|()
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|m_minSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|<
name|m_minSize
operator|.
name|width
argument_list|()
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
name|m_minSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
block|}
end_function
begin_function
DECL|function|padding
name|QMargins
name|QAndroidStyle
operator|::
name|AndroidControl
operator|::
name|padding
parameter_list|()
block|{
if|if
condition|(
specifier|const
name|AndroidDrawable
modifier|*
name|drawable
init|=
name|m_background
condition|)
block|{
if|if
condition|(
name|drawable
operator|->
name|type
argument_list|()
operator|==
name|State
condition|)
name|drawable
operator|=
cast|static_cast
argument_list|<
specifier|const
name|AndroidStateDrawable
operator|*
argument_list|>
argument_list|(
name|m_background
argument_list|)
operator|->
name|bestAndroidStateMatch
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|drawable
operator|->
name|padding
argument_list|()
return|;
block|}
return|return
name|QMargins
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|size
name|QSize
name|QAndroidStyle
operator|::
name|AndroidControl
operator|::
name|size
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|AndroidDrawable
modifier|*
name|drawable
init|=
name|backgroundDrawable
argument_list|()
condition|)
block|{
if|if
condition|(
name|drawable
operator|->
name|type
argument_list|()
operator|==
name|State
condition|)
name|drawable
operator|=
cast|static_cast
argument_list|<
specifier|const
name|AndroidStateDrawable
operator|*
argument_list|>
argument_list|(
name|backgroundDrawable
argument_list|()
argument_list|)
operator|->
name|bestAndroidStateMatch
argument_list|(
name|option
argument_list|)
expr_stmt|;
return|return
name|drawable
operator|->
name|size
argument_list|()
return|;
block|}
return|return
name|QSize
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|backgroundDrawable
specifier|const
name|QAndroidStyle
operator|::
name|AndroidDrawable
modifier|*
name|QAndroidStyle
operator|::
name|AndroidControl
operator|::
name|backgroundDrawable
parameter_list|()
specifier|const
block|{
return|return
name|m_background
return|;
block|}
end_function
begin_constructor
DECL|function|AndroidCompoundButtonControl
name|QAndroidStyle
operator|::
name|AndroidCompoundButtonControl
operator|::
name|AndroidCompoundButtonControl
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|control
parameter_list|,
name|ItemType
name|itemType
parameter_list|)
member_init_list|:
name|AndroidControl
argument_list|(
name|control
argument_list|,
name|itemType
argument_list|)
block|{
name|QVariantMap
operator|::
name|const_iterator
name|it
init|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"CompoundButton_button"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
block|{
name|m_button
operator|=
name|AndroidDrawable
operator|::
name|fromMap
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|toMap
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
cast|const_cast
argument_list|<
name|AndroidDrawable
operator|*
argument_list|>
argument_list|(
name|m_button
argument_list|)
operator|->
name|setPaddingLeftToSizeWidth
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|m_button
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~AndroidCompoundButtonControl
name|QAndroidStyle
operator|::
name|AndroidCompoundButtonControl
operator|::
name|~
name|AndroidCompoundButtonControl
parameter_list|()
block|{
operator|delete
name|m_button
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|drawControl
name|void
name|QAndroidStyle
operator|::
name|AndroidCompoundButtonControl
operator|::
name|drawControl
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|AndroidControl
operator|::
name|drawControl
argument_list|(
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_button
condition|)
name|m_button
operator|->
name|draw
argument_list|(
name|p
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|padding
name|QMargins
name|QAndroidStyle
operator|::
name|AndroidCompoundButtonControl
operator|::
name|padding
parameter_list|()
block|{
if|if
condition|(
name|m_button
condition|)
return|return
name|m_button
operator|->
name|padding
argument_list|()
return|;
return|return
name|AndroidControl
operator|::
name|padding
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|size
name|QSize
name|QAndroidStyle
operator|::
name|AndroidCompoundButtonControl
operator|::
name|size
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|)
block|{
if|if
condition|(
name|m_button
condition|)
block|{
if|if
condition|(
name|m_button
operator|->
name|type
argument_list|()
operator|==
name|State
condition|)
return|return
cast|static_cast
argument_list|<
specifier|const
name|AndroidStateDrawable
operator|*
argument_list|>
argument_list|(
name|m_button
argument_list|)
operator|->
name|bestAndroidStateMatch
argument_list|(
name|option
argument_list|)
operator|->
name|size
argument_list|()
return|;
return|return
name|m_button
operator|->
name|size
argument_list|()
return|;
block|}
return|return
name|AndroidControl
operator|::
name|size
argument_list|(
name|option
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|backgroundDrawable
specifier|const
name|QAndroidStyle
operator|::
name|AndroidDrawable
modifier|*
name|QAndroidStyle
operator|::
name|AndroidCompoundButtonControl
operator|::
name|backgroundDrawable
parameter_list|()
specifier|const
block|{
return|return
name|m_background
condition|?
name|m_background
else|:
name|m_button
return|;
block|}
end_function
begin_constructor
DECL|function|AndroidProgressBarControl
name|QAndroidStyle
operator|::
name|AndroidProgressBarControl
operator|::
name|AndroidProgressBarControl
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|control
parameter_list|,
name|ItemType
name|itemType
parameter_list|)
member_init_list|:
name|AndroidControl
argument_list|(
name|control
argument_list|,
name|itemType
argument_list|)
block|{
name|QVariantMap
operator|::
name|const_iterator
name|it
init|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"ProgressBar_indeterminateDrawable"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
name|m_indeterminateDrawable
operator|=
name|AndroidDrawable
operator|::
name|fromMap
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|toMap
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
else|else
name|m_indeterminateDrawable
operator|=
literal|0
expr_stmt|;
name|it
operator|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"ProgressBar_progressDrawable"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
name|m_progressDrawable
operator|=
name|AndroidDrawable
operator|::
name|fromMap
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|toMap
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
else|else
name|m_progressDrawable
operator|=
literal|0
expr_stmt|;
name|it
operator|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"ProgressBar_progress_id"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
name|m_progressId
operator|=
name|it
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|it
operator|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"ProgressBar_secondaryProgress_id"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
name|m_secondaryProgress_id
operator|=
name|it
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|it
operator|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"ProgressBar_minWidth"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
name|m_minSize
operator|.
name|setWidth
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"ProgressBar_minHeight"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
name|m_minSize
operator|.
name|setHeight
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"ProgressBar_maxWidth"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
name|m_maxSize
operator|.
name|setWidth
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"ProgressBar_maxHeight"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
name|m_maxSize
operator|.
name|setHeight
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~AndroidProgressBarControl
name|QAndroidStyle
operator|::
name|AndroidProgressBarControl
operator|::
name|~
name|AndroidProgressBarControl
parameter_list|()
block|{
operator|delete
name|m_progressDrawable
expr_stmt|;
operator|delete
name|m_indeterminateDrawable
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|drawControl
name|void
name|QAndroidStyle
operator|::
name|AndroidProgressBarControl
operator|::
name|drawControl
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
comment|/* w */
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_progressDrawable
condition|)
return|return;
if|if
condition|(
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|progressBarOption
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOptionProgressBarV2
name|progressBarV2
argument_list|(
operator|*
name|progressBarOption
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_progressDrawable
operator|->
name|type
argument_list|()
operator|==
name|QAndroidStyle
operator|::
name|Layer
condition|)
block|{
name|QAndroidStyle
operator|::
name|AndroidDrawable
modifier|*
name|clipDrawable
init|=
cast|static_cast
argument_list|<
name|QAndroidStyle
operator|::
name|AndroidLayerDrawable
operator|*
argument_list|>
argument_list|(
name|m_progressDrawable
argument_list|)
operator|->
name|layer
argument_list|(
name|m_progressId
argument_list|)
decl_stmt|;
if|if
condition|(
name|clipDrawable
operator|->
name|type
argument_list|()
operator|==
name|QAndroidStyle
operator|::
name|Clip
condition|)
cast|static_cast
argument_list|<
name|QAndroidStyle
operator|::
name|AndroidClipDrawable
operator|*
argument_list|>
argument_list|(
name|clipDrawable
argument_list|)
operator|->
name|setFactor
argument_list|(
name|double
argument_list|(
name|progressBarV2
operator|.
name|progress
argument_list|)
operator|/
name|double
argument_list|(
name|progressBarV2
operator|.
name|maximum
operator|-
name|progressBarV2
operator|.
name|minimum
argument_list|)
argument_list|,
name|progressBarV2
operator|.
name|orientation
argument_list|)
expr_stmt|;
else|else
cast|static_cast
argument_list|<
name|QAndroidStyle
operator|::
name|AndroidLayerDrawable
operator|*
argument_list|>
argument_list|(
name|m_progressDrawable
argument_list|)
operator|->
name|setFactor
argument_list|(
name|m_progressId
argument_list|,
name|double
argument_list|(
name|progressBarV2
operator|.
name|progress
argument_list|)
operator|/
name|double
argument_list|(
name|progressBarV2
operator|.
name|maximum
operator|-
name|progressBarV2
operator|.
name|minimum
argument_list|)
argument_list|,
name|progressBarV2
operator|.
name|orientation
argument_list|)
expr_stmt|;
block|}
name|m_progressDrawable
operator|->
name|draw
argument_list|(
name|p
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|subElementRect
name|QRect
name|QAndroidStyle
operator|::
name|AndroidProgressBarControl
operator|::
name|subElementRect
parameter_list|(
name|QStyle
operator|::
name|SubElement
name|subElement
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|progressBarOption
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOptionProgressBarV2
name|progressBarV2
argument_list|(
operator|*
name|progressBarOption
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|horizontal
init|=
name|progressBarV2
operator|.
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
decl_stmt|;
if|if
condition|(
operator|!
name|m_background
condition|)
return|return
name|option
operator|->
name|rect
return|;
name|QMargins
name|padding
init|=
name|m_background
operator|->
name|padding
argument_list|()
decl_stmt|;
name|QRect
name|p
argument_list|(
name|padding
operator|.
name|left
argument_list|()
argument_list|,
name|padding
operator|.
name|top
argument_list|()
argument_list|,
name|padding
operator|.
name|right
argument_list|()
operator|-
name|padding
operator|.
name|left
argument_list|()
argument_list|,
name|padding
operator|.
name|bottom
argument_list|()
operator|-
name|padding
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
name|padding
operator|=
name|m_indeterminateDrawable
operator|->
name|padding
argument_list|()
expr_stmt|;
name|p
operator||=
name|QRect
argument_list|(
name|padding
operator|.
name|left
argument_list|()
argument_list|,
name|padding
operator|.
name|top
argument_list|()
argument_list|,
name|padding
operator|.
name|right
argument_list|()
operator|-
name|padding
operator|.
name|left
argument_list|()
argument_list|,
name|padding
operator|.
name|bottom
argument_list|()
operator|-
name|padding
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|padding
operator|=
name|m_progressDrawable
operator|->
name|padding
argument_list|()
expr_stmt|;
name|p
operator||=
name|QRect
argument_list|(
name|padding
operator|.
name|left
argument_list|()
argument_list|,
name|padding
operator|.
name|top
argument_list|()
argument_list|,
name|padding
operator|.
name|right
argument_list|()
operator|-
name|padding
operator|.
name|left
argument_list|()
argument_list|,
name|padding
operator|.
name|bottom
argument_list|()
operator|-
name|padding
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|p
operator|.
name|left
argument_list|()
argument_list|,
name|p
operator|.
name|top
argument_list|()
argument_list|,
operator|-
name|p
operator|.
name|right
argument_list|()
argument_list|,
operator|-
name|p
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|horizontal
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|height
argument_list|()
operator|<
name|m_minSize
operator|.
name|height
argument_list|()
condition|)
name|r
operator|.
name|setHeight
argument_list|(
name|m_minSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|height
argument_list|()
operator|>
name|m_maxSize
operator|.
name|height
argument_list|()
condition|)
name|r
operator|.
name|setHeight
argument_list|(
name|m_maxSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|r
operator|.
name|width
argument_list|()
operator|<
name|m_minSize
operator|.
name|width
argument_list|()
condition|)
name|r
operator|.
name|setWidth
argument_list|(
name|m_minSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|width
argument_list|()
operator|>
name|m_maxSize
operator|.
name|width
argument_list|()
condition|)
name|r
operator|.
name|setWidth
argument_list|(
name|m_maxSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|r
argument_list|)
return|;
block|}
return|return
name|AndroidControl
operator|::
name|subElementRect
argument_list|(
name|subElement
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sizeFromContents
name|QSize
name|QAndroidStyle
operator|::
name|AndroidProgressBarControl
operator|::
name|sizeFromContents
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QSize
modifier|&
name|contentsSize
parameter_list|,
specifier|const
name|QWidget
modifier|*
comment|/* w */
parameter_list|)
specifier|const
block|{
name|QSize
name|sz
argument_list|(
name|contentsSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|<
name|m_minSize
operator|.
name|height
argument_list|()
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|m_minSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|<
name|m_minSize
operator|.
name|width
argument_list|()
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
name|m_minSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|progressBarOption
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionProgressBarV2
name|progressBarV2
argument_list|(
operator|*
name|progressBarOption
argument_list|)
decl_stmt|;
if|if
condition|(
name|progressBarV2
operator|.
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
condition|)
block|{
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|>
name|m_maxSize
operator|.
name|height
argument_list|()
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|m_maxSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|>
name|m_maxSize
operator|.
name|width
argument_list|()
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
name|m_maxSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|contentsSize
return|;
block|}
end_function
begin_constructor
DECL|function|AndroidSeekBarControl
name|QAndroidStyle
operator|::
name|AndroidSeekBarControl
operator|::
name|AndroidSeekBarControl
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|control
parameter_list|,
name|ItemType
name|itemType
parameter_list|)
member_init_list|:
name|AndroidProgressBarControl
argument_list|(
name|control
argument_list|,
name|itemType
argument_list|)
block|{
name|QVariantMap
operator|::
name|const_iterator
name|it
init|=
name|control
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"SeekBar_thumb"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|control
operator|.
name|end
argument_list|()
condition|)
name|m_seekBarThumb
operator|=
name|AndroidDrawable
operator|::
name|fromMap
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|toMap
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
else|else
name|m_seekBarThumb
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~AndroidSeekBarControl
name|QAndroidStyle
operator|::
name|AndroidSeekBarControl
operator|::
name|~
name|AndroidSeekBarControl
parameter_list|()
block|{
operator|delete
name|m_seekBarThumb
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|drawControl
name|void
name|QAndroidStyle
operator|::
name|AndroidSeekBarControl
operator|::
name|drawControl
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
comment|/* w */
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_seekBarThumb
operator|||
operator|!
name|m_progressDrawable
condition|)
return|return;
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|styleOption
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|double
name|factor
init|=
name|double
argument_list|(
name|styleOption
operator|->
name|sliderPosition
operator|-
name|styleOption
operator|->
name|minimum
argument_list|)
operator|/
name|double
argument_list|(
name|styleOption
operator|->
name|maximum
operator|-
name|styleOption
operator|->
name|minimum
argument_list|)
decl_stmt|;
comment|// Android does not have a vertical slider. To support the vertical orientation, we rotate
comment|// the painter and pretend that we are horizontal.
if|if
condition|(
name|styleOption
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
condition|)
name|factor
operator|=
literal|1
operator|-
name|factor
expr_stmt|;
if|if
condition|(
name|m_progressDrawable
operator|->
name|type
argument_list|()
operator|==
name|QAndroidStyle
operator|::
name|Layer
condition|)
block|{
name|QAndroidStyle
operator|::
name|AndroidDrawable
modifier|*
name|clipDrawable
init|=
cast|static_cast
argument_list|<
name|QAndroidStyle
operator|::
name|AndroidLayerDrawable
operator|*
argument_list|>
argument_list|(
name|m_progressDrawable
argument_list|)
operator|->
name|layer
argument_list|(
name|m_progressId
argument_list|)
decl_stmt|;
if|if
condition|(
name|clipDrawable
operator|->
name|type
argument_list|()
operator|==
name|QAndroidStyle
operator|::
name|Clip
condition|)
cast|static_cast
argument_list|<
name|QAndroidStyle
operator|::
name|AndroidClipDrawable
operator|*
argument_list|>
argument_list|(
name|clipDrawable
argument_list|)
operator|->
name|setFactor
argument_list|(
name|factor
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
else|else
cast|static_cast
argument_list|<
name|QAndroidStyle
operator|::
name|AndroidLayerDrawable
operator|*
argument_list|>
argument_list|(
name|m_progressDrawable
argument_list|)
operator|->
name|setFactor
argument_list|(
name|m_progressId
argument_list|,
name|factor
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
block|}
specifier|const
name|AndroidDrawable
modifier|*
name|drawable
init|=
name|m_seekBarThumb
decl_stmt|;
if|if
condition|(
name|drawable
operator|->
name|type
argument_list|()
operator|==
name|State
condition|)
name|drawable
operator|=
cast|static_cast
argument_list|<
specifier|const
name|QAndroidStyle
operator|::
name|AndroidStateDrawable
operator|*
argument_list|>
argument_list|(
name|m_seekBarThumb
argument_list|)
operator|->
name|bestAndroidStateMatch
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|QStyleOption
name|copy
argument_list|(
operator|*
name|option
argument_list|)
decl_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|styleOption
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
condition|)
block|{
comment|// rotate the painter, and transform the rectangle to match
name|p
operator|->
name|rotate
argument_list|(
literal|90
argument_list|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|copy
operator|.
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|copy
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|-
name|copy
operator|.
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|copy
operator|.
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|copy
operator|.
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|copy
operator|.
name|rect
operator|.
name|setHeight
argument_list|(
name|m_progressDrawable
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|.
name|setWidth
argument_list|(
name|copy
operator|.
name|rect
operator|.
name|width
argument_list|()
operator|-
name|drawable
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|yTranslate
init|=
name|abs
argument_list|(
name|drawable
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|-
name|copy
operator|.
name|rect
operator|.
name|height
argument_list|()
argument_list|)
operator|/
literal|2
decl_stmt|;
name|copy
operator|.
name|rect
operator|.
name|translate
argument_list|(
name|drawable
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|yTranslate
argument_list|)
expr_stmt|;
name|m_progressDrawable
operator|->
name|draw
argument_list|(
name|p
argument_list|,
operator|&
name|copy
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|copy
operator|.
name|rect
operator|.
name|width
argument_list|()
operator|*
name|factor
operator|-
name|drawable
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|copy
operator|.
name|rect
operator|.
name|translate
argument_list|(
name|pos
argument_list|,
operator|-
name|yTranslate
argument_list|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|.
name|setSize
argument_list|(
name|drawable
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|m_seekBarThumb
operator|->
name|draw
argument_list|(
name|p
argument_list|,
operator|&
name|copy
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sizeFromContents
name|QSize
name|QAndroidStyle
operator|::
name|AndroidSeekBarControl
operator|::
name|sizeFromContents
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QSize
modifier|&
name|contentsSize
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|QSize
name|sz
init|=
name|AndroidProgressBarControl
operator|::
name|sizeFromContents
argument_list|(
name|opt
argument_list|,
name|contentsSize
argument_list|,
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_seekBarThumb
condition|)
return|return
name|sz
return|;
specifier|const
name|AndroidDrawable
modifier|*
name|drawable
init|=
name|m_seekBarThumb
decl_stmt|;
if|if
condition|(
name|drawable
operator|->
name|type
argument_list|()
operator|==
name|State
condition|)
name|drawable
operator|=
cast|static_cast
argument_list|<
specifier|const
name|QAndroidStyle
operator|::
name|AndroidStateDrawable
operator|*
argument_list|>
argument_list|(
name|m_seekBarThumb
argument_list|)
operator|->
name|bestAndroidStateMatch
argument_list|(
name|opt
argument_list|)
expr_stmt|;
return|return
name|sz
operator|.
name|expandedTo
argument_list|(
name|drawable
operator|->
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|subControlRect
name|QRect
name|QAndroidStyle
operator|::
name|AndroidSeekBarControl
operator|::
name|subControlRect
parameter_list|(
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|SubControl
name|sc
parameter_list|,
specifier|const
name|QWidget
modifier|*
comment|/* widget */
parameter_list|)
specifier|const
block|{
specifier|const
name|QStyleOptionSlider
modifier|*
name|styleOption
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_seekBarThumb
operator|&&
name|sc
operator|==
name|SC_SliderHandle
operator|&&
name|styleOption
condition|)
block|{
specifier|const
name|AndroidDrawable
modifier|*
name|drawable
init|=
name|m_seekBarThumb
decl_stmt|;
if|if
condition|(
name|drawable
operator|->
name|type
argument_list|()
operator|==
name|State
condition|)
name|drawable
operator|=
cast|static_cast
argument_list|<
specifier|const
name|QAndroidStyle
operator|::
name|AndroidStateDrawable
operator|*
argument_list|>
argument_list|(
name|m_seekBarThumb
argument_list|)
operator|->
name|bestAndroidStateMatch
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|QRect
name|r
argument_list|(
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|double
name|factor
init|=
name|double
argument_list|(
name|styleOption
operator|->
name|sliderPosition
operator|-
name|styleOption
operator|->
name|minimum
argument_list|)
operator|/
operator|(
name|styleOption
operator|->
name|maximum
operator|-
name|styleOption
operator|->
name|minimum
operator|)
decl_stmt|;
if|if
condition|(
name|styleOption
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
condition|)
block|{
name|int
name|pos
init|=
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|*
operator|(
literal|1
operator|-
name|factor
operator|)
operator|-
name|double
argument_list|(
name|drawable
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|r
operator|.
name|setY
argument_list|(
name|r
operator|.
name|y
argument_list|()
operator|+
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|pos
init|=
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|*
name|factor
operator|-
name|double
argument_list|(
name|drawable
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|r
operator|.
name|setX
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|+
name|pos
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setSize
argument_list|(
name|drawable
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
return|return
name|option
operator|->
name|rect
return|;
block|}
end_function
begin_constructor
DECL|function|AndroidSpinnerControl
name|QAndroidStyle
operator|::
name|AndroidSpinnerControl
operator|::
name|AndroidSpinnerControl
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|control
parameter_list|,
name|QAndroidStyle
operator|::
name|ItemType
name|itemType
parameter_list|)
member_init_list|:
name|AndroidControl
argument_list|(
name|control
argument_list|,
name|itemType
argument_list|)
block|{}
end_constructor
begin_function
DECL|function|subControlRect
name|QRect
name|QAndroidStyle
operator|::
name|AndroidSpinnerControl
operator|::
name|subControlRect
parameter_list|(
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|SubControl
name|sc
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|sc
operator|==
name|QStyle
operator|::
name|SC_ComboBoxListBoxPopup
condition|)
return|return
name|option
operator|->
name|rect
return|;
return|return
name|AndroidControl
operator|::
name|subControlRect
argument_list|(
name|option
argument_list|,
name|sc
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(QT_NO_STYLE_ANDROID) || defined(QT_PLUGIN)
end_comment
end_unit
