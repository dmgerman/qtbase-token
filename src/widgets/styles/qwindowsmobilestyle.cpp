begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsmobilestyle_p.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsmobilestyle_p_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSMOBILE
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_PLUGIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qpainterpath.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qdockwidget.h"
end_include
begin_include
include|#
directive|include
file|"qframe.h"
end_include
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"qpaintengine.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qgroupbox.h"
end_include
begin_include
include|#
directive|include
file|"qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"qlistview.h"
end_include
begin_include
include|#
directive|include
file|"qdrawutil.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbar.h"
end_include
begin_include
include|#
directive|include
file|"qabstractscrollarea.h"
end_include
begin_include
include|#
directive|include
file|"qabstractbutton.h"
end_include
begin_include
include|#
directive|include
file|"qcombobox.h"
end_include
begin_include
include|#
directive|include
file|"qscrollbar.h"
end_include
begin_include
include|#
directive|include
file|"qabstractitemview.h"
end_include
begin_include
include|#
directive|include
file|"qmenubar.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbutton.h"
end_include
begin_include
include|#
directive|include
file|"qtextedit.h"
end_include
begin_include
include|#
directive|include
file|"qdialog.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qtabwidget.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_high_dpi
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_smartphone
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_windows_mobile_65
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wince.cpp
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WINCE
end_comment
begin_include
include|#
directive|include
file|"qstylehelper_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|windowsItemFrame
specifier|static
specifier|const
name|int
name|windowsItemFrame
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsItemFrame
comment|// menu item frame width
end_comment
begin_decl_stmt
DECL|variable|windowsMobileitemViewCheckBoxSize
specifier|static
specifier|const
name|int
name|windowsMobileitemViewCheckBoxSize
init|=
literal|13
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|windowsMobileFrameGroupBoxOffset
specifier|static
specifier|const
name|int
name|windowsMobileFrameGroupBoxOffset
init|=
literal|9
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|windowsMobileIndicatorSize
specifier|static
specifier|const
name|int
name|windowsMobileIndicatorSize
init|=
literal|14
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|windowsMobileExclusiveIndicatorSize
specifier|static
specifier|const
name|int
name|windowsMobileExclusiveIndicatorSize
init|=
literal|14
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|windowsMobileSliderThickness
specifier|static
specifier|const
name|int
name|windowsMobileSliderThickness
init|=
literal|6
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|windowsMobileIconSize
specifier|static
specifier|const
name|int
name|windowsMobileIconSize
init|=
literal|16
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|PE_IndicatorArrowUpBig
specifier|static
specifier|const
name|int
name|PE_IndicatorArrowUpBig
init|=
literal|0xf000101
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|PE_IndicatorArrowDownBig
specifier|static
specifier|const
name|int
name|PE_IndicatorArrowDownBig
init|=
literal|0xf000102
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|PE_IndicatorArrowLeftBig
specifier|static
specifier|const
name|int
name|PE_IndicatorArrowLeftBig
init|=
literal|0xf000103
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|PE_IndicatorArrowRightBig
specifier|static
specifier|const
name|int
name|PE_IndicatorArrowRightBig
init|=
literal|0xf000104
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|radiobutton_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|radiobutton_xpm
index|[]
init|=
block|{
literal|"30 30 2 1"
block|,
literal|" 	c None"
block|,
literal|".	c #000000"
block|,
literal|"           ........           "
block|,
literal|"        ..............        "
block|,
literal|"       ....        ....       "
block|,
literal|"     ....            ....     "
block|,
literal|"    ...                ...    "
block|,
literal|"   ...                  ...   "
block|,
literal|"   ..                    ..   "
block|,
literal|"  ..                      ..  "
block|,
literal|" ...                      ... "
block|,
literal|" ..                        .. "
block|,
literal|" ..                        .. "
block|,
literal|"..                          .."
block|,
literal|"..                          .."
block|,
literal|"..                          .."
block|,
literal|"..                          .."
block|,
literal|"..                          .."
block|,
literal|"..                          .."
block|,
literal|"..                          .."
block|,
literal|"..                          .."
block|,
literal|" ..                        .. "
block|,
literal|" ..                        .. "
block|,
literal|" ...                      ... "
block|,
literal|"  ..                      ..  "
block|,
literal|"   ..                    ..   "
block|,
literal|"   ...                  ...   "
block|,
literal|"    ...                ...    "
block|,
literal|"     ....            ....     "
block|,
literal|"       ....        ....       "
block|,
literal|"        ..............        "
block|,
literal|"           ........           "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|radiobutton_low_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|radiobutton_low_xpm
index|[]
init|=
block|{
literal|"15 15 2 1"
block|,
literal|" 	c None"
block|,
literal|".	c #000000"
block|,
literal|"     .....     "
block|,
literal|"   ..     ..   "
block|,
literal|"  .         .  "
block|,
literal|" .           . "
block|,
literal|" .           . "
block|,
literal|".             ."
block|,
literal|".             ."
block|,
literal|".             ."
block|,
literal|".             ."
block|,
literal|".             ."
block|,
literal|" .           . "
block|,
literal|" .           . "
block|,
literal|"  .         .  "
block|,
literal|"   ..     ..   "
block|,
literal|"     .....     "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|arrowleft_big_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|arrowleft_big_xpm
index|[]
init|=
block|{
literal|"9 17 2 1"
block|,
literal|"  c None"
block|,
literal|". c #000000"
block|,
literal|"        ."
block|,
literal|"       .."
block|,
literal|"      ..."
block|,
literal|"     ...."
block|,
literal|"    ....."
block|,
literal|"   ......"
block|,
literal|"  ......."
block|,
literal|" ........"
block|,
literal|"........."
block|,
literal|" ........"
block|,
literal|"  ......."
block|,
literal|"   ......"
block|,
literal|"    ....."
block|,
literal|"     ...."
block|,
literal|"      ..."
block|,
literal|"       .."
block|,
literal|"        ."
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|arrowleft_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|arrowleft_xpm
index|[]
init|=
block|{
literal|"8 15 2 1"
block|,
literal|"  c None"
block|,
literal|". c #000000"
block|,
literal|"       ."
block|,
literal|"      .."
block|,
literal|"     ..."
block|,
literal|"    ...."
block|,
literal|"   ....."
block|,
literal|"  ......"
block|,
literal|" ......."
block|,
literal|"........"
block|,
literal|" ......."
block|,
literal|"  ......"
block|,
literal|"   ....."
block|,
literal|"    ...."
block|,
literal|"     ..."
block|,
literal|"      .."
block|,
literal|"       ."
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|horlines_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|horlines_xpm
index|[]
init|=
block|{
literal|"2 2 2 1"
block|,
literal|"  c None"
block|,
literal|". c #000000"
block|,
literal|"  "
block|,
literal|".."
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|vertlines_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|vertlines_xpm
index|[]
init|=
block|{
literal|"2 2 2 1"
block|,
literal|"  c None"
block|,
literal|". c #000000"
block|,
literal|". "
block|,
literal|". "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|radiochecked_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|radiochecked_xpm
index|[]
init|=
block|{
literal|"18 18 2 1"
block|,
literal|" 	c None"
block|,
literal|".	c #000000"
block|,
literal|"      ......      "
block|,
literal|"    ..........    "
block|,
literal|"  ..............  "
block|,
literal|"  ..............  "
block|,
literal|" ................ "
block|,
literal|" ................ "
block|,
literal|".................."
block|,
literal|".................."
block|,
literal|".................."
block|,
literal|".................."
block|,
literal|".................."
block|,
literal|".................."
block|,
literal|" ................ "
block|,
literal|" ................ "
block|,
literal|"  ..............  "
block|,
literal|"  ..............  "
block|,
literal|"    ..........    "
block|,
literal|"      ......      "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|radiochecked_low_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|radiochecked_low_xpm
index|[]
init|=
block|{
literal|"9 9 2 1"
block|,
literal|"         c None"
block|,
literal|".        c #000000"
block|,
literal|"   ...   "
block|,
literal|" ....... "
block|,
literal|" ....... "
block|,
literal|"........."
block|,
literal|"........."
block|,
literal|"........."
block|,
literal|" ....... "
block|,
literal|" ....... "
block|,
literal|"   ...   "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|arrowdown_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|arrowdown_xpm
index|[]
init|=
block|{
literal|"15 8 2 1"
block|,
literal|" 	c None"
block|,
literal|".	c #000000"
block|,
literal|"..............."
block|,
literal|" ............. "
block|,
literal|"  ...........  "
block|,
literal|"   .........   "
block|,
literal|"    .......    "
block|,
literal|"     .....     "
block|,
literal|"      ...      "
block|,
literal|"       .       "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|arrowdown_big_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|arrowdown_big_xpm
index|[]
init|=
block|{
literal|"17 9 2 1"
block|,
literal|" 	c None"
block|,
literal|".	c #000000"
block|,
literal|"................."
block|,
literal|" ............... "
block|,
literal|"  .............  "
block|,
literal|"   ...........   "
block|,
literal|"    .........    "
block|,
literal|"     .......     "
block|,
literal|"      .....      "
block|,
literal|"       ...       "
block|,
literal|"        .        "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|checkedlight_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|checkedlight_xpm
index|[]
init|=
block|{
literal|"24 24 2 1"
block|,
literal|" 	c None"
block|,
literal|".	c #000000"
block|,
literal|"                        "
block|,
literal|"                        "
block|,
literal|"                        "
block|,
literal|"                        "
block|,
literal|"                        "
block|,
literal|"                  .     "
block|,
literal|"                 ..     "
block|,
literal|"                ...     "
block|,
literal|"               ....     "
block|,
literal|"              .....     "
block|,
literal|"             ......     "
block|,
literal|"    .       ......      "
block|,
literal|"    ..     ......       "
block|,
literal|"    ...   ......        "
block|,
literal|"    .... ......         "
block|,
literal|"    ..........          "
block|,
literal|"    .........           "
block|,
literal|"     .......            "
block|,
literal|"      .....             "
block|,
literal|"       ...              "
block|,
literal|"        .               "
block|,
literal|"                        "
block|,
literal|"                        "
block|,
literal|"                        "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|checkedbold_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|checkedbold_xpm
index|[]
init|=
block|{
literal|"26 26 2 1"
block|,
literal|" 	c None"
block|,
literal|".	c #000000"
block|,
literal|"                          "
block|,
literal|"                          "
block|,
literal|"                          "
block|,
literal|"                          "
block|,
literal|"                          "
block|,
literal|"                          "
block|,
literal|"                    ..    "
block|,
literal|"                   ...    "
block|,
literal|"                  ....    "
block|,
literal|"                 .....    "
block|,
literal|"    ..          ......    "
block|,
literal|"    ...        .......    "
block|,
literal|"    ....      .......     "
block|,
literal|"    .....    .......      "
block|,
literal|"    ......  .......       "
block|,
literal|"    ..............        "
block|,
literal|"     ............         "
block|,
literal|"      ..........          "
block|,
literal|"       ........           "
block|,
literal|"        ......            "
block|,
literal|"         ....             "
block|,
literal|"          ..              "
block|,
literal|"                          "
block|,
literal|"                          "
block|,
literal|"                          "
block|,
literal|"                          "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|checkedbold_low_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|checkedbold_low_xpm
index|[]
init|=
block|{
literal|"9 8 2 1"
block|,
literal|" 	c None"
block|,
literal|".	c #000000"
block|,
literal|"        ."
block|,
literal|"       .."
block|,
literal|".     ..."
block|,
literal|"..   ... "
block|,
literal|"... ...  "
block|,
literal|" .....   "
block|,
literal|"  ...    "
block|,
literal|"   .     "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|checkedlight_low_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|checkedlight_low_xpm
index|[]
init|=
block|{
literal|"8 8 2 1"
block|,
literal|" 	c None"
block|,
literal|".	c #000000"
block|,
literal|"       ."
block|,
literal|"      .."
block|,
literal|"     ..."
block|,
literal|".   ... "
block|,
literal|".. ...  "
block|,
literal|".....   "
block|,
literal|" ...    "
block|,
literal|"  .     "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|highlightedradiobutton_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|highlightedradiobutton_xpm
index|[]
init|=
block|{
literal|"30 30 3 1"
block|,
literal|" 	c None"
block|,
literal|".	c #000000"
block|,
literal|"+	c #0078CC"
block|,
literal|"           ........           "
block|,
literal|"        ..............        "
block|,
literal|"       ....++++++++....       "
block|,
literal|"     ....++++++++++++....     "
block|,
literal|"    ...++++        ++++...    "
block|,
literal|"   ...+++            +++...   "
block|,
literal|"   ..++                ++..   "
block|,
literal|"  ..++                  ++..  "
block|,
literal|" ...++                  ++... "
block|,
literal|" ..++                    ++.. "
block|,
literal|" ..++                    ++.. "
block|,
literal|"..++                      ++.."
block|,
literal|"..++                      ++.."
block|,
literal|"..++                      ++.."
block|,
literal|"..++                      ++.."
block|,
literal|"..++                      ++.."
block|,
literal|"..++                      ++.."
block|,
literal|"..++                      ++.."
block|,
literal|"..++                      ++.."
block|,
literal|" ..++                    ++.. "
block|,
literal|" ..++                    ++.. "
block|,
literal|" ...++                  ++... "
block|,
literal|"  ..++                  ++..  "
block|,
literal|"   ..++                ++..   "
block|,
literal|"   ...+++            +++...   "
block|,
literal|"    ...++++        ++++...    "
block|,
literal|"     ....++++++++++++....     "
block|,
literal|"       ....++++++++....       "
block|,
literal|"        ..............        "
block|,
literal|"           ........           "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|highlightedradiobutton_low_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|highlightedradiobutton_low_xpm
index|[]
init|=
block|{
literal|"15 15 3 1"
block|,
literal|" 	c None"
block|,
literal|".	c #000000"
block|,
literal|"+	c #3192D6"
block|,
literal|"     .....     "
block|,
literal|"   ..+++++..   "
block|,
literal|"  .++     ++.  "
block|,
literal|" .+         +. "
block|,
literal|" .+         +. "
block|,
literal|".+           +."
block|,
literal|".+           +."
block|,
literal|".+           +."
block|,
literal|".+           +."
block|,
literal|".+           +."
block|,
literal|" .+         +. "
block|,
literal|" .+         +. "
block|,
literal|"  .++     ++.  "
block|,
literal|"   ..+++++..   "
block|,
literal|"     .....     "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|cross_big_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|cross_big_xpm
index|[]
init|=
block|{
literal|"28 28 4 1"
block|,
literal|" 	c #09454A"
block|,
literal|".	c #218C98"
block|,
literal|"+	c #47D8E5"
block|,
literal|"@	c #FDFFFC"
block|,
literal|"                            "
block|,
literal|"                            "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++..@@@..........@@@..++  "
block|,
literal|"  ++..@@@@........@@@@..++  "
block|,
literal|"  ++..@@@@@......@@@@@..++  "
block|,
literal|"  ++...@@@@@....@@@@@...++  "
block|,
literal|"  ++....@@@@@..@@@@@....++  "
block|,
literal|"  ++.....@@@@@@@@@@.....++  "
block|,
literal|"  ++......@@@@@@@@......++  "
block|,
literal|"  ++.......@@@@@@.......++  "
block|,
literal|"  ++.......@@@@@@.......++  "
block|,
literal|"  ++......@@@@@@@@......++  "
block|,
literal|"  ++.....@@@@@@@@@@.....++  "
block|,
literal|"  ++....@@@@@..@@@@@....++  "
block|,
literal|"  ++...@@@@@....@@@@@...++  "
block|,
literal|"  ++..@@@@@......@@@@@..++  "
block|,
literal|"  ++..@@@@........@@@@..++  "
block|,
literal|"  ++..@@@..........@@@..++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"                            "
block|,
literal|"                            "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|cross_small_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|cross_small_xpm
index|[]
init|=
block|{
literal|"14 14 4 1"
block|,
literal|" 	c #09454A"
block|,
literal|".	c #218C98"
block|,
literal|"+	c #47D8E5"
block|,
literal|"@	c #FCFFFC"
block|,
literal|"              "
block|,
literal|" ++++++++++++ "
block|,
literal|" +..........+ "
block|,
literal|" +.@@....@@.+ "
block|,
literal|" +.@@@..@@@.+ "
block|,
literal|" +..@@@@@@..+ "
block|,
literal|" +...@@@@...+ "
block|,
literal|" +...@@@@...+ "
block|,
literal|" +..@@@@@@..+ "
block|,
literal|" +.@@@..@@@.+ "
block|,
literal|" +.@@....@@.+ "
block|,
literal|" +..........+ "
block|,
literal|" ++++++++++++ "
block|,
literal|"              "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|max_big_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|max_big_xpm
index|[]
init|=
block|{
literal|"28 28 4 1"
block|,
literal|" 	c #09454A"
block|,
literal|".	c #218C98"
block|,
literal|"+	c #47D8E5"
block|,
literal|"@	c #FDFFFC"
block|,
literal|"                            "
block|,
literal|"                            "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++..@@@@@@@@@@@@@@@@..++  "
block|,
literal|"  ++..@@@@@@@@@@@@@@@@..++  "
block|,
literal|"  ++..@@@@@@@@@@@@@@@@..++  "
block|,
literal|"  ++..@@@@@@@@@@@@@@@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@@@@@@@@@@@@@@@..++  "
block|,
literal|"  ++..@@@@@@@@@@@@@@@@..++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"                            "
block|,
literal|"                            "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|max_small_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|max_small_xpm
index|[]
init|=
block|{
literal|"14 14 4 1"
block|,
literal|" 	c #09454A"
block|,
literal|".	c #218C98"
block|,
literal|"+	c #47D8E5"
block|,
literal|"@	c #FCFFFC"
block|,
literal|"              "
block|,
literal|" ++++++++++++ "
block|,
literal|" +..........+ "
block|,
literal|" +..........+ "
block|,
literal|" +.@@@@@@@@.+ "
block|,
literal|" +.@@@@@@@@.+ "
block|,
literal|" +.@......@.+ "
block|,
literal|" +.@......@.+ "
block|,
literal|" +.@......@.+ "
block|,
literal|" +.@@@@@@@@.+ "
block|,
literal|" +..........+ "
block|,
literal|" +..........+ "
block|,
literal|" ++++++++++++ "
block|,
literal|"              "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|normal_big_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|normal_big_xpm
index|[]
init|=
block|{
literal|"28 28 4 1"
block|,
literal|" 	c #09454A"
block|,
literal|".	c #218C98"
block|,
literal|"+	c #47D8E5"
block|,
literal|"@	c #FDFFFC"
block|,
literal|"                            "
block|,
literal|"                            "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++..@@@@@@@@@@@@@@@@..++  "
block|,
literal|"  ++..@@@@@@@@@@@@@@@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@............@@..++  "
block|,
literal|"  ++..@@@@@@@@@@@@@@@@..++  "
block|,
literal|"  ++..@@@@@@@@@@@@@@@@..++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"                            "
block|,
literal|"                            "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|normal_small_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|normal_small_xpm
index|[]
init|=
block|{
literal|"14 14 4 1"
block|,
literal|" 	c #09454A"
block|,
literal|".	c #218C98"
block|,
literal|"+	c #47D8E5"
block|,
literal|"@	c #FCFFFC"
block|,
literal|"              "
block|,
literal|" ++++++++++++ "
block|,
literal|" +..........+ "
block|,
literal|" +.@@@@@@@@.+ "
block|,
literal|" +.@......@.+ "
block|,
literal|" +.@......@.+ "
block|,
literal|" +.@......@.+ "
block|,
literal|" +.@......@.+ "
block|,
literal|" +.@......@.+ "
block|,
literal|" +.@......@.+ "
block|,
literal|" +.@@@@@@@@.+ "
block|,
literal|" +..........+ "
block|,
literal|" ++++++++++++ "
block|,
literal|"              "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|min_big_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|min_big_xpm
index|[]
init|=
block|{
literal|"28 28 4 1"
block|,
literal|" 	c #09454A"
block|,
literal|".	c #218C98"
block|,
literal|"+	c #47D8E5"
block|,
literal|"@	c #FDFFFC"
block|,
literal|"                            "
block|,
literal|"                            "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++..@@@@@@@@@@@@@@@@..++  "
block|,
literal|"  ++..@@@@@@@@@@@@@@@@..++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++....................++  "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"  ++++++++++++++++++++++++  "
block|,
literal|"                            "
block|,
literal|"                            "
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|min_small_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|min_small_xpm
index|[]
init|=
block|{
literal|"14 14 4 1"
block|,
literal|" 	c #09454A"
block|,
literal|".	c #218C98"
block|,
literal|"+	c #47D8E5"
block|,
literal|"@	c #FCFFFC"
block|,
literal|"              "
block|,
literal|" ++++++++++++ "
block|,
literal|" +..........+ "
block|,
literal|" +..........+ "
block|,
literal|" +..........+ "
block|,
literal|" +..........+ "
block|,
literal|" +..........+ "
block|,
literal|" +..........+ "
block|,
literal|" +..........+ "
block|,
literal|" +.@@@@@@@@.+ "
block|,
literal|" +..........+ "
block|,
literal|" +..........+ "
block|,
literal|" ++++++++++++ "
block|,
literal|"              "
block|}
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
end_ifdef
begin_decl_stmt
DECL|variable|sbhandleup_xpm
specifier|static
name|char
modifier|*
name|sbhandleup_xpm
index|[]
init|=
block|{
literal|"26 41 45 1"
block|,
literal|" 	c None"
block|,
literal|".	c #000000"
block|,
literal|"+	c #E7E7E7"
block|,
literal|"@	c #D6D7D6"
block|,
literal|"#	c #949294"
block|,
literal|"$	c #737573"
block|,
literal|"%	c #636563"
block|,
literal|"&	c #636163"
block|,
literal|"*	c #5A5D5A"
block|,
literal|"=	c #5A595A"
block|,
literal|"-	c #525552"
block|,
literal|";	c #525152"
block|,
literal|">	c #4A4D4A"
block|,
literal|",	c #7B797B"
block|,
literal|"'	c #CECFCE"
block|,
literal|")	c #CED3CE"
block|,
literal|"!	c #6B6D6B"
block|,
literal|"~	c #6B696B"
block|,
literal|"{	c #737173"
block|,
literal|"]	c #7B7D7B"
block|,
literal|"^	c #848684"
block|,
literal|"/	c #848284"
block|,
literal|"(	c #8C8A8C"
block|,
literal|"_	c #8C8E8C"
block|,
literal|":	c #B5B2B5"
block|,
literal|"<	c #FFFFFF"
block|,
literal|"[	c #949694"
block|,
literal|"}	c #B5B6B5"
block|,
literal|"|	c #9C9A9C"
block|,
literal|"1	c #ADAEAD"
block|,
literal|"2	c #9C9E9C"
block|,
literal|"3	c #BDBABD"
block|,
literal|"4	c #BDBEBD"
block|,
literal|"5	c #F7F3F7"
block|,
literal|"6	c #C6C3C6"
block|,
literal|"7	c #C6C7C6"
block|,
literal|"8	c #A5A2A5"
block|,
literal|"9	c #CECBCE"
block|,
literal|"0	c #FFFBFF"
block|,
literal|"a	c #ADAAAD"
block|,
literal|"b	c #A5A6A5"
block|,
literal|"c	c #D6D3D6"
block|,
literal|"d	c #B5BAB5"
block|,
literal|"e	c #DEDFDE"
block|,
literal|"f	c #DEDBDE"
block|,
literal|".........................."
block|,
literal|"+@#$%%&&&**===---;;;;>=,'+"
block|,
literal|"+@#$%%&&&**===---;;;;>=$'+"
block|,
literal|")$!!~~%%&&&**===---;;;;>;'"
block|,
literal|"#{$]],,$${{{!!~~%%%&&&*-;]"
block|,
literal|"#{$]],,$${{{!!~~%%%&&&*-;]"
block|,
literal|",$^//]],,$${{{!!~~%%%&&*;*"
block|,
literal|",,(^^//]],$${!!!!!~~%%%&-*"
block|,
literal|",,(^^//]],$${!!!!!~~%%%&-*"
block|,
literal|"]]_((^^//]$!%%~!{{!!~~%%-*"
block|,
literal|"//#__((^^]{:<<:~!{{{!!~~=*"
block|,
literal|"//#__((^^]{:<<:~!{{{!!~~=&"
block|,
literal|"//###__(/$:<<<<:~{${{!!~*&"
block|,
literal|"^^[[##_^]:<<<<<<}!{$${{!*%"
block|,
literal|"^^[[##_^]:<<<<<<}!{$${{!*%"
block|,
literal|"((|[[#_/:<<<<<<<<}!$$${{&~"
block|,
literal|"((||[#^1<<<<1:<<<<}!$$$$&~"
block|,
literal|"((||[#^1<<<<1:<<<<}!$$$$&~"
block|,
literal|"__2|#(1<<<<}],}<<<<}{$,$%~"
block|,
literal|"##2|_1<<<<}^((]3<<<<}{$,~!"
block|,
literal|"##2|_1<<<<}^((]3<<<<}{$,~!"
block|,
literal|"##2#1<<<<3^###(/4<<<<}{,~{"
block|,
literal|"##2#1<<<<3^###(/4<<<<}{,~!"
block|,
literal|"[[2_5<<<4(#|[[#_/6<<<<,,!{"
block|,
literal|"[|2_5<<4_[||||[[_/7<<<,]{$"
block|,
literal|"[|2_5<<4_[||||[[_/7<<<,]{$"
block|,
literal|"||8_5<6#|2222|||[_/9<<,]{$"
block|,
literal|"228#06[28888222||[_/'<,/$,"
block|,
literal|"228#06[28888222||[_/'<,/$,"
block|,
literal|"22a|6[8bbbb88822||[(/c](,]"
block|,
literal|"881b8baaabbbb88222|[(^(_,]"
block|,
literal|"881b8baaabbbb88222|[(^(_,]"
block|,
literal|"88111111aaabbb88822|[###]/"
block|,
literal|"bb:::11111aaabbb8822||[[/^"
block|,
literal|"bb:::11111aaabbb8822||[[//"
block|,
literal|"bb:::::1111aaabbb8822||[/("
block|,
literal|"3a1::::::1111aaabb8822|_^8"
block|,
literal|"da1::::::1111aaabb8822|_^8"
block|,
literal|"e1aaabbbb888822||[[##__((@"
block|,
literal|"+e4:aaabbbb88822||[[[#[b@+"
block|,
literal|"+e4:aaabbbb88822||[[[#[bf+"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sbhandledown_xpm
specifier|static
name|char
modifier|*
name|sbhandledown_xpm
index|[]
init|=
block|{
literal|"26 40 46 1"
block|,
literal|" 	c None"
block|,
literal|".	c #E7E7E7"
block|,
literal|"+	c #DEDFDE"
block|,
literal|"@	c #BDBEBD"
block|,
literal|"#	c #B5B2B5"
block|,
literal|"$	c #ADAAAD"
block|,
literal|"%	c #A5A6A5"
block|,
literal|"&	c #A5A2A5"
block|,
literal|"*	c #9C9E9C"
block|,
literal|"=	c #9C9A9C"
block|,
literal|"-	c #949694"
block|,
literal|";	c #949294"
block|,
literal|">	c #D6D7D6"
block|,
literal|",	c #DEDBDE"
block|,
literal|"'	c #D6DBD6"
block|,
literal|")	c #ADAEAD"
block|,
literal|"!	c #8C8E8C"
block|,
literal|"~	c #8C8A8C"
block|,
literal|"{	c #BDBABD"
block|,
literal|"]	c #848684"
block|,
literal|"^	c #B5BAB5"
block|,
literal|"/	c #848284"
block|,
literal|"(	c #848A84"
block|,
literal|"_	c #7B7D7B"
block|,
literal|":	c #7B797B"
block|,
literal|"<	c #C6C3C6"
block|,
literal|"[	c #D6D3D6"
block|,
literal|"}	c #FFFBFF"
block|,
literal|"|	c #CECFCE"
block|,
literal|"1	c #FFFFFF"
block|,
literal|"2	c #737573"
block|,
literal|"3	c #F7F3F7"
block|,
literal|"4	c #CECBCE"
block|,
literal|"5	c #737173"
block|,
literal|"6	c #C6C7C6"
block|,
literal|"7	c #6B6D6B"
block|,
literal|"8	c #B5B6B5"
block|,
literal|"9	c #6B696B"
block|,
literal|"0	c #636563"
block|,
literal|"a	c #636163"
block|,
literal|"b	c #5A5D5A"
block|,
literal|"c	c #5A595A"
block|,
literal|"d	c #525552"
block|,
literal|"e	c #525152"
block|,
literal|"f	c #4A4D4A"
block|,
literal|"g	c #C6CBC6"
block|,
literal|".+@#$$$%%%%&&&**==---;-%>."
block|,
literal|".+@#$$$%%%%&&&**==---;-%,."
block|,
literal|"')$$$%%%%&&&&**==--;;!!~~>"
block|,
literal|"{$)######))))$$$%%&&**=!]&"
block|,
literal|"^$)######))))$$$%%&&**=!]&"
block|,
literal|"%%#####))))$$$%%%&&**==-/("
block|,
literal|"%%###)))))$$$%%%&&**==--/]"
block|,
literal|"%%###)))))$$$%%%&&**==--//"
block|,
literal|"&&))))))$$$%%%&&&**=-;;;_/"
block|,
literal|"&&)%&%$$$%%%%&&***=-~]~!:_"
block|,
literal|"&&)%&%$$$%%%%&&***=-~]~!:_"
block|,
literal|"**$=<-&%%%%&&&**==-~/[_~:_"
block|,
literal|"**&;}<-*&&&&***==-!/|1:/2:"
block|,
literal|"**&;}<-*&&&&***==-!/|1:/2:"
block|,
literal|"==&!31<;=****===-!/411:_5:"
block|,
literal|"-=*!311@!-====--!/6111:_52"
block|,
literal|"-=*!311@!-====--!/6111:_52"
block|,
literal|"--*!3111@~;=--;!/<1111::75"
block|,
literal|";;*;)1111{];;;~/@111185:95"
block|,
literal|";;*;)1111{];;;~/@111185:97"
block|,
literal|";;*=!)11118]~~_{1111852:97"
block|,
literal|";;*=!)11118]~~_{1111852:97"
block|,
literal|"!!*=;~)11118_:81111852:207"
block|,
literal|"~~==-;])1111)#1111872222a9"
block|,
literal|"~~==-;])1111)#1111872222a9"
block|,
literal|"~~=--;!/#111111118722255a0"
block|,
literal|"]]--;;!]_#11111187522557b0"
block|,
literal|"]]--;;!]_#11111187522557b0"
block|,
literal|"//;;;!!~/2#1111#95255779ba"
block|,
literal|"//;!!~~]]_5#11#975557799cb"
block|,
literal|"//;!!~~]]_5#11#975557799ca"
block|,
literal|"__!~~]]//_27009755779900db"
block|,
literal|"::~]]//__:2257777799000adb"
block|,
literal|"::~]]//__:2257777799000adb"
block|,
literal|":2]//__::225557799000aabeb"
block|,
literal|";52__::225557799000aaabde_"
block|,
literal|";52__::225557799000aaabde_"
block|,
literal|"[2779900aaabbcccdddeeeefeg"
block|,
literal|".>;200aaabbcccdddeeeefc:|."
block|,
literal|".>;200aaabbcccdddeeeefc2|."
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sbgripdown_xpm
specifier|static
name|char
modifier|*
name|sbgripdown_xpm
index|[]
init|=
block|{
literal|"26 34 39 1"
block|,
literal|" 	c None"
block|,
literal|".	c #949294"
block|,
literal|"+	c #9C9E9C"
block|,
literal|"@	c #9C9A9C"
block|,
literal|"#	c #949694"
block|,
literal|"$	c #8C8E8C"
block|,
literal|"%	c #8C8A8C"
block|,
literal|"&	c #848684"
block|,
literal|"*	c #848284"
block|,
literal|"=	c #7B7D7B"
block|,
literal|"-	c #7B797B"
block|,
literal|";	c #6B696B"
block|,
literal|">	c #636563"
block|,
literal|",	c #737573"
block|,
literal|"'	c #636163"
block|,
literal|")	c #737173"
block|,
literal|"!	c #5A5D5A"
block|,
literal|"~	c #6B6D6B"
block|,
literal|"{	c #5A595A"
block|,
literal|"]	c #B5B6B5"
block|,
literal|"^	c #BDBEBD"
block|,
literal|"/	c #ADAEAD"
block|,
literal|"(	c #BDBABD"
block|,
literal|"_	c #525552"
block|,
literal|":	c #313031"
block|,
literal|"<	c #525152"
block|,
literal|"[	c #ADAAAD"
block|,
literal|"}	c #BDBAB5"
block|,
literal|"|	c #4A4D4A"
block|,
literal|"1	c #4A494A"
block|,
literal|"2	c #C6C3C6"
block|,
literal|"3	c #C6CBC6"
block|,
literal|"4	c #E7E7E7"
block|,
literal|"5	c #DEDFDE"
block|,
literal|"6	c #E7E3E7"
block|,
literal|"7	c #DEE3DE"
block|,
literal|"8	c #CECBCE"
block|,
literal|"9	c #8C928C"
block|,
literal|"0	c #CECFCE"
block|,
literal|"..+++@@@###...$$%&&**==-;>"
block|,
literal|"$.++@@@@##...$$%%&**==-->>"
block|,
literal|"$$+@@@@###..$$%%&&*==--,>>"
block|,
literal|"$$@@@@###..$$%%&&**==-,,>'"
block|,
literal|"%%@@@###..$$$%&&**==--,,''"
block|,
literal|"%%@@###..$$$%&&**==--,,)''"
block|,
literal|"%%@###...$$%%&&*==--,,))'!"
block|,
literal|"&&###...$$%%&&**==--,)))!!"
block|,
literal|"&&##...$$%%&&**==--,,))~!!"
block|,
literal|"&&#...$$%%&&**==--,,))~~!{"
block|,
literal|"**...$$%%&&**==--,,))~~;!{"
block|,
literal|"**..$$%%&&**===--,)))~~;{{"
block|,
literal|"**.$$%%&]^&===//,,))~~;;{{"
block|,
literal|"==$$%%&&]^*==-((,))~~;;>{_"
block|,
literal|"==$%%&&***::--,,::~~;;;>__"
block|,
literal|"==%%&&&**=::-,,)::~~;;>>__"
block|,
literal|"--%&&&**==--,,)))~~;;>>>__"
block|,
literal|"--&&&**==--,,)))~~;;>>>'_<"
block|,
literal|",-&&**==]^-,))[[~;;>>>''<<"
block|,
literal|",,&**==-]^-)))}};;>>>'''<<"
block|,
literal|",,**==--,,::)~~;::>>'''!<<"
block|,
literal|"))*==--,,)::~~;;::>'''!!<|"
block|,
literal|"))==--,,)))~~;;;>>'''!!!||"
block|,
literal|"))=--,,)))~~;;;>>'''!!!{||"
block|,
literal|"~~--,,)))~~;;;>>'''!!!{{||"
block|,
literal|"~~-,,)))~~;;>>>'''!!!{{{|1"
block|,
literal|";;,,)))~~;;>>>'''!!!{{{_1<"
block|,
literal|"~;,)))~~;;>>>'''!!!{{{__1'"
block|,
literal|"%>~))~~;;>>>'''!!!{{{__|1$"
block|,
literal|"2>>~~~;;>>>''!!!{{{{__<113"
block|,
literal|"4%'';;;>>>''!!!{{{{__<11%4"
block|,
literal|"45-!!'>>>''!!!{{{{_<|11)64"
block|,
literal|"447+!{{___<<<||||1111|+444"
block|,
literal|"444489~__<<<||||111>$04444"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sbgripup_xpm
specifier|static
name|char
modifier|*
name|sbgripup_xpm
index|[]
init|=
block|{
literal|"26 34 38 1"
block|,
literal|" 	c None"
block|,
literal|".	c #E7E7E7"
block|,
literal|"+	c #D6DBD6"
block|,
literal|"@	c #C6C7C6"
block|,
literal|"#	c #B5B6B5"
block|,
literal|"$	c #ADAEAD"
block|,
literal|"%	c #ADAAAD"
block|,
literal|"&	c #A5A6A5"
block|,
literal|"*	c #A5A2A5"
block|,
literal|"=	c #BDBEBD"
block|,
literal|"-	c #DEDFDE"
block|,
literal|";	c #C6CBC6"
block|,
literal|">	c #9C9E9C"
block|,
literal|",	c #E7E3E7"
block|,
literal|"'	c #BDBABD"
block|,
literal|")	c #B5B2B5"
block|,
literal|"!	c #9C9A9C"
block|,
literal|"~	c #DEE3DE"
block|,
literal|"{	c #949694"
block|,
literal|"]	c #D6D7D6"
block|,
literal|"^	c #949294"
block|,
literal|"/	c #DEDBDE"
block|,
literal|"(	c #8C8E8C"
block|,
literal|"_	c #8C8A8C"
block|,
literal|":	c #848684"
block|,
literal|"<	c #D6D3CE"
block|,
literal|"[	c #CECBCE"
block|,
literal|"}	c #D6D3D6"
block|,
literal|"|	c #848284"
block|,
literal|"1	c #313031"
block|,
literal|"2	c #7B7D7B"
block|,
literal|"3	c #CECFCE"
block|,
literal|"4	c #CECBC6"
block|,
literal|"5	c #7B797B"
block|,
literal|"6	c #737573"
block|,
literal|"7	c #737173"
block|,
literal|"8	c #6B6D6B"
block|,
literal|"9	c #6B696B"
block|,
literal|"....+@#$$%%%%&&&***$=-...."
block|,
literal|"...;$$$$$%%%&&&&**>>>>@..."
block|,
literal|".,'$$)#'#####)))$$$%*!!$~."
block|,
literal|".=$)#'''####))))$$$%%*!{'."
block|,
literal|"]$$''''#####)))$$$%%%&*{^/"
block|,
literal|"=$#'''#####)))$$$$%%&&&!^#"
block|,
literal|"$$'''#####))))$$$%%%&&*>(!"
block|,
literal|"$$''#####))))$$$%%%&&&*>(^"
block|,
literal|"$$######))))$$$$%%&&&**>(_"
block|,
literal|"%$#####))))$$$$%%%&&***>__"
block|,
literal|"%$####))))$$$$%%%&&&**>>__"
block|,
literal|"%%###)))))$$$%%%&&&**>>>_:"
block|,
literal|"%%##))))<])$$%[[&&***>>!::"
block|,
literal|"%%#)))))<]$$%%}<&&**>>!!:|"
block|,
literal|"&%)))))$$$11%%&&11*>>>!!:|"
block|,
literal|"&&))))$$$$11%&&&11*>>!!{||"
block|,
literal|"&&)))$$$$$%%%&&&**>>!!!{|2"
block|,
literal|"&&))$$$$$%%%&&&**>>>!!{{|2"
block|,
literal|"*&)$$$$$3]%&&&4@*>>!!{{{22"
block|,
literal|"**$$$$$%3]%&&&<<>>!!!{{^25"
block|,
literal|"**$$$$%%%%11&**>11!!{{^^25"
block|,
literal|"**$$$%%%%&11***>11!!{{^^55"
block|,
literal|"**$$%%%%&&&***>>!!!{{^^(55"
block|,
literal|">>$%%%%&&&***>>>!!{{^^((56"
block|,
literal|">>%%%%&&&&***>>!!!{{^^((66"
block|,
literal|">>%%%&&&&***>>!!!{{^^((_67"
block|,
literal|"!>%%&&&&***>>>!!{{{^^(__67"
block|,
literal|"!!%&&&&***>>>!!!{{^^((_:77"
block|,
literal|"!!&&&&***>>>!!!{{^^((__:77"
block|,
literal|"!!&&&****>>!!!{{^^^(__::78"
block|,
literal|"{!&&****>>>!!{{{^^((_::|88"
block|,
literal|"{{&****>>>!!!{{^^((__:||88"
block|,
literal|"{{****>>>!!!{{^^^(__::|289"
block|,
literal|"{{***>>>!!!{{{^^((_::||289"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sbgripmiddle_xpm
specifier|static
name|char
modifier|*
name|sbgripmiddle_xpm
index|[]
init|=
block|{
literal|"26 2 12 1"
block|,
literal|" 	c None"
block|,
literal|".	c #949294"
block|,
literal|"+	c #A5A2A5"
block|,
literal|"@	c #9C9E9C"
block|,
literal|"#	c #9C9A9C"
block|,
literal|"$	c #949694"
block|,
literal|"%	c #8C8E8C"
block|,
literal|"&	c #8C8A8C"
block|,
literal|"*	c #848684"
block|,
literal|"=	c #848284"
block|,
literal|"-	c #7B7D7B"
block|,
literal|";	c #6B696B"
block|,
literal|"..++@@@###$$$..%%&&*==--;;"
block|,
literal|"..++@@@###$$$..%%&&*==--;;"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|listviewhighmiddle_xpm
specifier|static
name|char
modifier|*
name|listviewhighmiddle_xpm
index|[]
init|=
block|{
literal|"8 46 197 2"
block|,
literal|"  	c None"
block|,
literal|". 	c #66759E"
block|,
literal|"+ 	c #6C789D"
block|,
literal|"@ 	c #6A789E"
block|,
literal|"# 	c #6B789E"
block|,
literal|"$ 	c #6A779D"
block|,
literal|"% 	c #6C789C"
block|,
literal|"& 	c #6F7D9B"
block|,
literal|"* 	c #6F7D9A"
block|,
literal|"= 	c #9DB6EE"
block|,
literal|"- 	c #9DB6ED"
block|,
literal|"; 	c #9CB6ED"
block|,
literal|"> 	c #A1B6EF"
block|,
literal|", 	c #A2B6F0"
block|,
literal|"' 	c #93AAE9"
block|,
literal|") 	c #95ABEA"
block|,
literal|"! 	c #94ABEA"
block|,
literal|"~ 	c #94A9E8"
block|,
literal|"{ 	c #8BA8EA"
block|,
literal|"] 	c #8BA7EA"
block|,
literal|"^ 	c #8AA7EA"
block|,
literal|"/ 	c #8EAAE8"
block|,
literal|"( 	c #8FAAE8"
block|,
literal|"_ 	c #88A2E7"
block|,
literal|": 	c #8CA3E8"
block|,
literal|"< 	c #8BA3E7"
block|,
literal|"[ 	c #8BA3E8"
block|,
literal|"} 	c #8BA2E7"
block|,
literal|"| 	c #8CA2E7"
block|,
literal|"1 	c #8DA2E7"
block|,
literal|"2 	c #87A1E8"
block|,
literal|"3 	c #87A1E9"
block|,
literal|"4 	c #86A0E8"
block|,
literal|"5 	c #86A1E7"
block|,
literal|"6 	c #87A2E7"
block|,
literal|"7 	c #859EE9"
block|,
literal|"8 	c #849DE9"
block|,
literal|"9 	c #869EE9"
block|,
literal|"0 	c #869FE9"
block|,
literal|"a 	c #7C9BEA"
block|,
literal|"b 	c #7C9CEA"
block|,
literal|"c 	c #7B9CEA"
block|,
literal|"d 	c #7C9BE9"
block|,
literal|"e 	c #7E9CE9"
block|,
literal|"f 	c #7B9AEA"
block|,
literal|"g 	c #7C99E9"
block|,
literal|"h 	c #7C9AEA"
block|,
literal|"i 	c #7B9AE8"
block|,
literal|"j 	c #7A9AEA"
block|,
literal|"k 	c #7996E1"
block|,
literal|"l 	c #7C96E4"
block|,
literal|"m 	c #7B96E3"
block|,
literal|"n 	c #7B95E3"
block|,
literal|"o 	c #7E95E5"
block|,
literal|"p 	c #7E95E6"
block|,
literal|"q 	c #7292E1"
block|,
literal|"r 	c #7490DF"
block|,
literal|"s 	c #7591E0"
block|,
literal|"t 	c #7590DF"
block|,
literal|"u 	c #7392E1"
block|,
literal|"v 	c #6D8CDE"
block|,
literal|"w 	c #6F8EDD"
block|,
literal|"x 	c #6E8DDD"
block|,
literal|"y 	c #6E8DDE"
block|,
literal|"z 	c #6F8EDE"
block|,
literal|"A 	c #6E8EDE"
block|,
literal|"B 	c #718EDD"
block|,
literal|"C 	c #728EDD"
block|,
literal|"D 	c #6B89E0"
block|,
literal|"E 	c #6C89DF"
block|,
literal|"F 	c #6D89E0"
block|,
literal|"G 	c #6D89DF"
block|,
literal|"H 	c #6C88DF"
block|,
literal|"I 	c #6D88DF"
block|,
literal|"J 	c #6D86DD"
block|,
literal|"K 	c #6086E0"
block|,
literal|"L 	c #6686E0"
block|,
literal|"M 	c #6586E0"
block|,
literal|"N 	c #6486E0"
block|,
literal|"O 	c #6485E0"
block|,
literal|"P 	c #6786DF"
block|,
literal|"Q 	c #5F85E0"
block|,
literal|"R 	c #6583DE"
block|,
literal|"S 	c #6683DE"
block|,
literal|"T 	c #6682DD"
block|,
literal|"U 	c #6086DF"
block|,
literal|"V 	c #5F86E0"
block|,
literal|"W 	c #567ED7"
block|,
literal|"X 	c #567ED8"
block|,
literal|"Y 	c #557DD7"
block|,
literal|"Z 	c #5A7FD8"
block|,
literal|"` 	c #6281DA"
block|,
literal|" .	c #5379D9"
block|,
literal|"..	c #5278D9"
block|,
literal|"+.	c #547BD8"
block|,
literal|"@.	c #4C73D7"
block|,
literal|"#.	c #4B72D2"
block|,
literal|"$.	c #4C73D4"
block|,
literal|"%.	c #4C73D3"
block|,
literal|"&.	c #4B72D4"
block|,
literal|"*.	c #4F75D3"
block|,
literal|"=.	c #5074D2"
block|,
literal|"-.	c #4971D0"
block|,
literal|";.	c #4871D0"
block|,
literal|">.	c #335ECF"
block|,
literal|",.	c #325ECB"
block|,
literal|"'.	c #335ECD"
block|,
literal|").	c #335ECE"
block|,
literal|"!.	c #325DCD"
block|,
literal|"~.	c #2E59C9"
block|,
literal|"{.	c #3059C9"
block|,
literal|"].	c #2F59C9"
block|,
literal|"^.	c #2F59C8"
block|,
literal|"/.	c #2B59CA"
block|,
literal|"(.	c #3355C6"
block|,
literal|"_.	c #3354C5"
block|,
literal|":.	c #3156C7"
block|,
literal|"<.	c #3056C7"
block|,
literal|"[.	c #3355C7"
block|,
literal|"}.	c #3355C5"
block|,
literal|"|.	c #254EBF"
block|,
literal|"1.	c #1F51C1"
block|,
literal|"2.	c #234FC0"
block|,
literal|"3.	c #234FBF"
block|,
literal|"4.	c #2350C0"
block|,
literal|"5.	c #1E50BE"
block|,
literal|"6.	c #1D50C0"
block|,
literal|"7.	c #264DBE"
block|,
literal|"8.	c #264CBD"
block|,
literal|"9.	c #254DBE"
block|,
literal|"0.	c #244EBF"
block|,
literal|"a.	c #254DBF"
block|,
literal|"b.	c #234CBF"
block|,
literal|"c.	c #244CC0"
block|,
literal|"d.	c #244BC0"
block|,
literal|"e.	c #234BC0"
block|,
literal|"f.	c #234BBF"
block|,
literal|"g.	c #234CBE"
block|,
literal|"h.	c #2049B7"
block|,
literal|"i.	c #2A49B5"
block|,
literal|"j.	c #2749B5"
block|,
literal|"k.	c #2749B6"
block|,
literal|"l.	c #2D49B4"
block|,
literal|"m.	c #2649B6"
block|,
literal|"n.	c #2946B5"
block|,
literal|"o.	c #2A48B6"
block|,
literal|"p.	c #2947B5"
block|,
literal|"q.	c #2946B6"
block|,
literal|"r.	c #2848B6"
block|,
literal|"s.	c #2549B5"
block|,
literal|"t.	c #2648B6"
block|,
literal|"u.	c #2744B5"
block|,
literal|"v.	c #2744B4"
block|,
literal|"w.	c #2744AF"
block|,
literal|"x.	c #2543B4"
block|,
literal|"y.	c #2543B2"
block|,
literal|"z.	c #2442B2"
block|,
literal|"A.	c #2442B3"
block|,
literal|"B.	c #2442B5"
block|,
literal|"C.	c #2543B3"
block|,
literal|"D.	c #1F40B1"
block|,
literal|"E.	c #1E40B1"
block|,
literal|"F.	c #243EAE"
block|,
literal|"G.	c #273BAC"
block|,
literal|"H.	c #263DAC"
block|,
literal|"I.	c #253CAB"
block|,
literal|"J.	c #273CAB"
block|,
literal|"K.	c #273CAC"
block|,
literal|"L.	c #263BAA"
block|,
literal|"M.	c #253CAE"
block|,
literal|"N.	c #263BA6"
block|,
literal|"O.	c #253BA5"
block|,
literal|"P.	c #253AA5"
block|,
literal|"Q.	c #253BA6"
block|,
literal|"R.	c #253CA7"
block|,
literal|"S.	c #263AA6"
block|,
literal|"T.	c #243CA6"
block|,
literal|"U.	c #253CA5"
block|,
literal|"V.	c #273BA8"
block|,
literal|"W.	c #2F4DA4"
block|,
literal|"X.	c #2F4DA3"
block|,
literal|"Y.	c #1B2F85"
block|,
literal|"Z.	c #B5B5B6"
block|,
literal|"`.	c #B5B5B5"
block|,
literal|" +	c #B5B6B6"
block|,
literal|".+	c #B5B4B6"
block|,
literal|"++	c #C2C3C5"
block|,
literal|"@+	c #C0C3C3"
block|,
literal|"#+	c #C1C3C4"
block|,
literal|"$+	c #E3E3E3"
block|,
literal|"%+	c #E3E3E4"
block|,
literal|"&+	c #E4E3E4"
block|,
literal|"*+	c #E2E3E4"
block|,
literal|"=+	c #ECEEEB"
block|,
literal|"-+	c #EBEDEA"
block|,
literal|";+	c #EEF0ED"
block|,
literal|">+	c #EFF0EE"
block|,
literal|". + @ @ # # $ % "
block|,
literal|"&& *&&&&& "
block|,
literal|"= = - = = ;> , "
block|,
literal|"' ) ! ! ! ) ' ~ "
block|,
literal|"{ ] { { { ^ / ( "
block|,
literal|"_ :< [ : } | 1 "
block|,
literal|"2 2 2 3 2 4 5 6 "
block|,
literal|"7 7 7 7 7 8 9 0 "
block|,
literal|"a b a a a c d e "
block|,
literal|"f g h h h h i j "
block|,
literal|"k l m m m n o p "
block|,
literal|"q q q q q q q q "
block|,
literal|"r r s s s t q u "
block|,
literal|"v w x y z A B C "
block|,
literal|"D E F F G F H I "
block|,
literal|"J K L M N O P Q "
block|,
literal|"R R S S S T U V "
block|,
literal|"W W X X X Y Z ` "
block|,
literal|" . . . . ...+.W "
block|,
literal|" . . . . ..... ."
block|,
literal|"@.#.$.$.%.&.*.=."
block|,
literal|"-.-.;.-.-.-.-.-."
block|,
literal|">.,.'.).).!.!.>."
block|,
literal|"~.{.].^.].^././."
block|,
literal|"(.(.(.(.(._.:.<."
block|,
literal|"(.(.[.[.[.[.(.}."
block|,
literal|"|.1.2.3.3.4.5.6."
block|,
literal|"7.7.7.7.7.8.9.0."
block|,
literal|"a.b.c.d.c.e.f.g."
block|,
literal|"h.i.j.k.j.k.l.m."
block|,
literal|"n.o.p.q.r.p.s.t."
block|,
literal|"u.u.v.u.u.u.u.u."
block|,
literal|"w.x.y.z.A.y.B.C."
block|,
literal|"D.D.E.D.D.D.D.D."
block|,
literal|"D.D.E.D.D.D.D.D."
block|,
literal|"F.G.H.I.J.K.L.M."
block|,
literal|"N.N.O.N.N.P.Q.R."
block|,
literal|"N.N.S.N.N.N.N.N."
block|,
literal|"T.N.T.T.T.U.N.V."
block|,
literal|"W.W.X.W.W.W.W.W."
block|,
literal|"W.W.W.W.W.W.W.W."
block|,
literal|"Y.Y.Y.Y.Y.Y.Y.Y."
block|,
literal|"Z.`. + +.+Z.`.`."
block|,
literal|"++@+#+#+#+#+@+@+"
block|,
literal|"$+%+&+&+*+%+%+%+"
block|,
literal|"=+-+;+-+-+>+-+-+"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|listviewhighcornerleft_xpm
specifier|static
name|char
modifier|*
name|listviewhighcornerleft_xpm
index|[]
init|=
block|{
literal|"100 46 1475 2"
block|,
literal|"  	c None"
block|,
literal|". 	c #FBFBFC"
block|,
literal|"+ 	c #E8EAE7"
block|,
literal|"@ 	c #758DC3"
block|,
literal|"# 	c #42599E"
block|,
literal|"$ 	c #28418A"
block|,
literal|"% 	c #19418F"
block|,
literal|"& 	c #3F5695"
block|,
literal|"* 	c #415896"
block|,
literal|"= 	c #435A98"
block|,
literal|"- 	c #445C99"
block|,
literal|"; 	c #465E9B"
block|,
literal|"> 	c #48609B"
block|,
literal|", 	c #49629C"
block|,
literal|"' 	c #4A639D"
block|,
literal|") 	c #49639D"
block|,
literal|"! 	c #4A629D"
block|,
literal|"~ 	c #4B639D"
block|,
literal|"{ 	c #4B649D"
block|,
literal|"] 	c #4C659D"
block|,
literal|"^ 	c #4D669D"
block|,
literal|"/ 	c #4E689D"
block|,
literal|"( 	c #506A9D"
block|,
literal|"_ 	c #516A9D"
block|,
literal|": 	c #536B9C"
block|,
literal|"< 	c #546C9C"
block|,
literal|"[ 	c #566D9B"
block|,
literal|"} 	c #576D9B"
block|,
literal|"| 	c #586E9C"
block|,
literal|"1 	c #5B6F9D"
block|,
literal|"2 	c #61739D"
block|,
literal|"3 	c #63749E"
block|,
literal|"4 	c #64749E"
block|,
literal|"5 	c #68769E"
block|,
literal|"6 	c #6A779E"
block|,
literal|"7 	c #6B789E"
block|,
literal|"8 	c #66759E"
block|,
literal|"9 	c #6C789D"
block|,
literal|"0 	c #EEF0ED"
block|,
literal|"a 	c #D0D3DC"
block|,
literal|"b 	c #3E51A3"
block|,
literal|"c 	c #28428B"
block|,
literal|"d 	c #29428C"
block|,
literal|"e 	c #425996"
block|,
literal|"f 	c #455C99"
block|,
literal|"g 	c #485F9C"
block|,
literal|"h 	c #49619E"
block|,
literal|"i 	c #4A63A0"
block|,
literal|"j 	c #4B64A1"
block|,
literal|"k 	c #4B65A1"
block|,
literal|"l 	c #4C66A2"
block|,
literal|"m 	c #4D67A2"
block|,
literal|"n 	c #4F69A1"
block|,
literal|"o 	c #516AA1"
block|,
literal|"p 	c #536CA0"
block|,
literal|"q 	c #556DA1"
block|,
literal|"r 	c #576EA0"
block|,
literal|"s 	c #586F9F"
block|,
literal|"t 	c #586E9F"
block|,
literal|"u 	c #596F9E"
block|,
literal|"v 	c #5A6F9E"
block|,
literal|"w 	c #5C709E"
block|,
literal|"x 	c #5E719E"
block|,
literal|"y 	c #5F729F"
block|,
literal|"z 	c #62739F"
block|,
literal|"A 	c #63739E"
block|,
literal|"B 	c #64749D"
block|,
literal|"C 	c #65749E"
block|,
literal|"D 	c #69769D"
block|,
literal|"E 	c #6C799E"
block|,
literal|"F 	c #6D799F"
block|,
literal|"G 	c #707D9F"
block|,
literal|"H 	c #717F9E"
block|,
literal|"I 	c #6E7AA1"
block|,
literal|"J 	c #6C789E"
block|,
literal|"K 	c #6F7C9C"
block|,
literal|"L 	c #6F7D9B"
block|,
literal|"M 	c #2A4AA0"
block|,
literal|"N 	c #4971D0"
block|,
literal|"O 	c #4C72D8"
block|,
literal|"P 	c #5472C0"
block|,
literal|"Q 	c #5573BF"
block|,
literal|"R 	c #5774BF"
block|,
literal|"S 	c #5875BF"
block|,
literal|"T 	c #5976C1"
block|,
literal|"U 	c #5A76C1"
block|,
literal|"V 	c #5C78C2"
block|,
literal|"W 	c #5E7AC2"
block|,
literal|"X 	c #607CC3"
block|,
literal|"Y 	c #627EC3"
block|,
literal|"Z 	c #637FC4"
block|,
literal|"` 	c #6581C5"
block|,
literal|" .	c #6682C6"
block|,
literal|"..	c #6783C7"
block|,
literal|"+.	c #6984C8"
block|,
literal|"@.	c #6B85C9"
block|,
literal|"#.	c #6D87CA"
block|,
literal|"$.	c #6F89CB"
block|,
literal|"%.	c #718CCD"
block|,
literal|"&.	c #748ECF"
block|,
literal|"*.	c #7690D0"
block|,
literal|"=.	c #7992D2"
block|,
literal|"-.	c #7A93D3"
block|,
literal|";.	c #7C95D5"
block|,
literal|">.	c #7F98D7"
block|,
literal|",.	c #8099D8"
block|,
literal|"'.	c #859CDB"
block|,
literal|").	c #8AA0DD"
block|,
literal|"!.	c #8DA3DF"
block|,
literal|"~.	c #8FA5E0"
block|,
literal|"{.	c #90A5E0"
block|,
literal|"].	c #91A6E1"
block|,
literal|"^.	c #91A5E1"
block|,
literal|"/.	c #90A4E0"
block|,
literal|"(.	c #8EA3DE"
block|,
literal|"_.	c #92A6E2"
block|,
literal|":.	c #8FA4DF"
block|,
literal|"<.	c #90A5DE"
block|,
literal|"[.	c #90A5DC"
block|,
literal|"}.	c #90A6DB"
block|,
literal|"|.	c #91A6E0"
block|,
literal|"1.	c #93A7E2"
block|,
literal|"2.	c #95AAE6"
block|,
literal|"3.	c #99AEEA"
block|,
literal|"4.	c #9AB2EA"
block|,
literal|"5.	c #99B1E9"
block|,
literal|"6.	c #99B1E7"
block|,
literal|"7.	c #98AFE6"
block|,
literal|"8.	c #93A8E2"
block|,
literal|"9.	c #97ACE7"
block|,
literal|"0.	c #9AB3EB"
block|,
literal|"a.	c #9DB5ED"
block|,
literal|"b.	c #9DB6EE"
block|,
literal|"c.	c #375095"
block|,
literal|"d.	c #4056AD"
block|,
literal|"e.	c #506DCD"
block|,
literal|"f.	c #4360CC"
block|,
literal|"g.	c #345ED6"
block|,
literal|"h.	c #335ECF"
block|,
literal|"i.	c #355ED6"
block|,
literal|"j.	c #355FD6"
block|,
literal|"k.	c #365FD6"
block|,
literal|"l.	c #355FD0"
block|,
literal|"m.	c #3760D5"
block|,
literal|"n.	c #3A63D4"
block|,
literal|"o.	c #3C63D1"
block|,
literal|"p.	c #3B63CD"
block|,
literal|"q.	c #3B63C9"
block|,
literal|"r.	c #3B62C9"
block|,
literal|"s.	c #3D63C8"
block|,
literal|"t.	c #4065C5"
block|,
literal|"u.	c #4567C5"
block|,
literal|"v.	c #496BC5"
block|,
literal|"w.	c #4F70C7"
block|,
literal|"x.	c #5273C8"
block|,
literal|"y.	c #5475CA"
block|,
literal|"z.	c #5777CB"
block|,
literal|"A.	c #5879CD"
block|,
literal|"B.	c #5A7BCE"
block|,
literal|"C.	c #5D7DCF"
block|,
literal|"D.	c #5F7ECF"
block|,
literal|"E.	c #617FD0"
block|,
literal|"F.	c #6381D1"
block|,
literal|"G.	c #6583D2"
block|,
literal|"H.	c #6785D2"
block|,
literal|"I.	c #6886D3"
block|,
literal|"J.	c #6A88D4"
block|,
literal|"K.	c #6C89D5"
block|,
literal|"L.	c #6E8BD6"
block|,
literal|"M.	c #708CD7"
block|,
literal|"N.	c #718DD8"
block|,
literal|"O.	c #738EDA"
block|,
literal|"P.	c #748FDB"
block|,
literal|"Q.	c #7691DC"
block|,
literal|"R.	c #7893DD"
block|,
literal|"S.	c #7994DD"
block|,
literal|"T.	c #7A96DE"
block|,
literal|"U.	c #7B97DF"
block|,
literal|"V.	c #7C98E0"
block|,
literal|"W.	c #7E9AE2"
block|,
literal|"X.	c #7F9BE3"
block|,
literal|"Y.	c #829DE4"
block|,
literal|"Z.	c #849FE5"
block|,
literal|"`.	c #87A0E6"
block|,
literal|" +	c #88A1E7"
block|,
literal|".+	c #89A2E6"
block|,
literal|"++	c #8CA3E7"
block|,
literal|"@+	c #8EA5E9"
block|,
literal|"#+	c #8EA6E9"
block|,
literal|"$+	c #8FA7E9"
block|,
literal|"%+	c #8FA8E8"
block|,
literal|"&+	c #8FA9E8"
block|,
literal|"*+	c #91A9E8"
block|,
literal|"=+	c #90A7E8"
block|,
literal|"-+	c #8FA8EA"
block|,
literal|";+	c #90AAEA"
block|,
literal|">+	c #93ABEA"
block|,
literal|",+	c #95ABEA"
block|,
literal|"'+	c #93ABE9"
block|,
literal|")+	c #94ABEA"
block|,
literal|"!+	c #90A9EA"
block|,
literal|"~+	c #93AAE9"
block|,
literal|"{+	c #273E7E"
block|,
literal|"]+	c #345ED5"
block|,
literal|"^+	c #3D60CE"
block|,
literal|"/+	c #3D60CF"
block|,
literal|"(+	c #345ECF"
block|,
literal|"_+	c #335ED0"
block|,
literal|":+	c #355FD3"
block|,
literal|"<+	c #3A60CE"
block|,
literal|"[+	c #3A5FCB"
block|,
literal|"}+	c #385FC9"
block|,
literal|"|+	c #3B60C8"
block|,
literal|"1+	c #3C63CB"
block|,
literal|"2+	c #3E64CB"
block|,
literal|"3+	c #4166CA"
block|,
literal|"4+	c #4568C9"
block|,
literal|"5+	c #4A6CC7"
block|,
literal|"6+	c #4F71C8"
block|,
literal|"7+	c #5172CA"
block|,
literal|"8+	c #5475CE"
block|,
literal|"9+	c #5678D3"
block|,
literal|"0+	c #597CD6"
block|,
literal|"a+	c #5C7ED7"
block|,
literal|"b+	c #5E7FD8"
block|,
literal|"c+	c #6181D9"
block|,
literal|"d+	c #6383DA"
block|,
literal|"e+	c #6585DA"
block|,
literal|"f+	c #6786DB"
block|,
literal|"g+	c #6988DC"
block|,
literal|"h+	c #6B8ADD"
block|,
literal|"i+	c #6D8BDE"
block|,
literal|"j+	c #6F8DDE"
block|,
literal|"k+	c #718EDF"
block|,
literal|"l+	c #728FE0"
block|,
literal|"m+	c #7390E1"
block|,
literal|"n+	c #7390E2"
block|,
literal|"o+	c #7491E3"
block|,
literal|"p+	c #7592E4"
block|,
literal|"q+	c #7693E4"
block|,
literal|"r+	c #7794E5"
block|,
literal|"s+	c #7894E5"
block|,
literal|"t+	c #7995E6"
block|,
literal|"u+	c #7B96E6"
block|,
literal|"v+	c #7C97E7"
block|,
literal|"w+	c #7D9AE8"
block|,
literal|"x+	c #7F9CE9"
block|,
literal|"y+	c #829DE9"
block|,
literal|"z+	c #849EE9"
block|,
literal|"A+	c #859EE9"
block|,
literal|"B+	c #87A0E7"
block|,
literal|"C+	c #8AA2E7"
block|,
literal|"D+	c #8BA3E8"
block|,
literal|"E+	c #89A2E7"
block|,
literal|"F+	c #8CA6EA"
block|,
literal|"G+	c #8BA6EA"
block|,
literal|"H+	c #8BA7EA"
block|,
literal|"I+	c #8CA3E8"
block|,
literal|"J+	c #8BA8EA"
block|,
literal|"K+	c #8CA7EA"
block|,
literal|"L+	c #8CA8EA"
block|,
literal|"M+	c #4659C7"
block|,
literal|"N+	c #355ECF"
block|,
literal|"O+	c #3660CF"
block|,
literal|"P+	c #3860CE"
block|,
literal|"Q+	c #3961CD"
block|,
literal|"R+	c #3B61CB"
block|,
literal|"S+	c #3B61CA"
block|,
literal|"T+	c #3D62CA"
block|,
literal|"U+	c #3D63CA"
block|,
literal|"V+	c #4165CB"
block|,
literal|"W+	c #456ACB"
block|,
literal|"X+	c #4B6FCD"
block|,
literal|"Y+	c #5174CE"
block|,
literal|"Z+	c #5275D1"
block|,
literal|"`+	c #5477D4"
block|,
literal|" @	c #5678D9"
block|,
literal|".@	c #587ADB"
block|,
literal|"+@	c #597BDB"
block|,
literal|"@@	c #5B7DDC"
block|,
literal|"#@	c #5E7FDC"
block|,
literal|"$@	c #6081DD"
block|,
literal|"%@	c #6283DE"
block|,
literal|"&@	c #6484DF"
block|,
literal|"*@	c #6787E0"
block|,
literal|"=@	c #6989E1"
block|,
literal|"-@	c #6B8BE1"
block|,
literal|";@	c #6D8DE2"
block|,
literal|">@	c #6F8EE3"
block|,
literal|",@	c #718FE4"
block|,
literal|"'@	c #7290E4"
block|,
literal|")@	c #7491E5"
block|,
literal|"!@	c #7692E6"
block|,
literal|"~@	c #7793E5"
block|,
literal|"{@	c #7894E6"
block|,
literal|"]@	c #7895E7"
block|,
literal|"^@	c #7996E8"
block|,
literal|"/@	c #7A97E8"
block|,
literal|"(@	c #7B98E9"
block|,
literal|"_@	c #7D99E8"
block|,
literal|":@	c #7F9AE8"
block|,
literal|"<@	c #7F9BE9"
block|,
literal|"[@	c #7F9CEA"
block|,
literal|"}@	c #859EE8"
block|,
literal|"|@	c #859FE8"
block|,
literal|"1@	c #85A0E9"
block|,
literal|"2@	c #869FE9"
block|,
literal|"3@	c #86A1E7"
block|,
literal|"4@	c #86A0E9"
block|,
literal|"5@	c #87A1E7"
block|,
literal|"6@	c #88A2E7"
block|,
literal|"7@	c #87A1E9"
block|,
literal|"8@	c #5A6FCA"
block|,
literal|"9@	c #365FCF"
block|,
literal|"0@	c #345ED0"
block|,
literal|"a@	c #385FCC"
block|,
literal|"b@	c #385FCE"
block|,
literal|"c@	c #3A61CC"
block|,
literal|"d@	c #3B62CD"
block|,
literal|"e@	c #3E64CD"
block|,
literal|"f@	c #4167CF"
block|,
literal|"g@	c #4469CF"
block|,
literal|"h@	c #486CD1"
block|,
literal|"i@	c #4D71D2"
block|,
literal|"j@	c #5175D4"
block|,
literal|"k@	c #5376D6"
block|,
literal|"l@	c #5578DA"
block|,
literal|"m@	c #5679DC"
block|,
literal|"n@	c #587BDD"
block|,
literal|"o@	c #5A7DDE"
block|,
literal|"p@	c #5D80DE"
block|,
literal|"q@	c #5F82DF"
block|,
literal|"r@	c #6284DF"
block|,
literal|"s@	c #6585E0"
block|,
literal|"t@	c #6787E1"
block|,
literal|"u@	c #6988E2"
block|,
literal|"v@	c #6B8AE2"
block|,
literal|"w@	c #6D8CE3"
block|,
literal|"x@	c #6E8DE3"
block|,
literal|"y@	c #708EE4"
block|,
literal|"z@	c #718FE3"
block|,
literal|"A@	c #7391E4"
block|,
literal|"B@	c #7592E5"
block|,
literal|"C@	c #7895E5"
block|,
literal|"D@	c #7996E6"
block|,
literal|"E@	c #7A97E6"
block|,
literal|"F@	c #7B98E7"
block|,
literal|"G@	c #7A98E8"
block|,
literal|"H@	c #7B99E9"
block|,
literal|"I@	c #7E9AE9"
block|,
literal|"J@	c #7D9AE9"
block|,
literal|"K@	c #7E9AEA"
block|,
literal|"L@	c #809CE9"
block|,
literal|"M@	c #819DE8"
block|,
literal|"N@	c #7F9BEA"
block|,
literal|"O@	c #819DE9"
block|,
literal|"P@	c #819CE9"
block|,
literal|"Q@	c #839EE9"
block|,
literal|"R@	c #839EE8"
block|,
literal|"S@	c #839DEA"
block|,
literal|"T@	c #859FE9"
block|,
literal|"U@	c #87A0E8"
block|,
literal|"V@	c #86A0E8"
block|,
literal|"W@	c #87A1E8"
block|,
literal|"X@	c #3760CF"
block|,
literal|"Y@	c #3A61CE"
block|,
literal|"Z@	c #3A62CD"
block|,
literal|"`@	c #3F66CE"
block|,
literal|" #	c #4368D0"
block|,
literal|".#	c #466CD2"
block|,
literal|"+#	c #496DD5"
block|,
literal|"@#	c #4E72D6"
block|,
literal|"##	c #5175D8"
block|,
literal|"$#	c #5276DA"
block|,
literal|"%#	c #5578DC"
block|,
literal|"&#	c #577ADC"
block|,
literal|"*#	c #597CDD"
block|,
literal|"=#	c #5B7DDD"
block|,
literal|"-#	c #5D7FDE"
block|,
literal|";#	c #5E81DE"
block|,
literal|">#	c #6183DF"
block|,
literal|",#	c #6386DF"
block|,
literal|"'#	c #6687E0"
block|,
literal|")#	c #6888E0"
block|,
literal|"!#	c #6A89E1"
block|,
literal|"~#	c #6C8AE1"
block|,
literal|"{#	c #6E8CE2"
block|,
literal|"]#	c #6F8DE2"
block|,
literal|"^#	c #7390E4"
block|,
literal|"/#	c #7390E3"
block|,
literal|"(#	c #7491E4"
block|,
literal|"_#	c #7693E5"
block|,
literal|":#	c #7895E6"
block|,
literal|"<#	c #7896E6"
block|,
literal|"[#	c #7997E7"
block|,
literal|"}#	c #7B97E7"
block|,
literal|"|#	c #7B98E8"
block|,
literal|"1#	c #7C98E8"
block|,
literal|"2#	c #7E9BE9"
block|,
literal|"3#	c #809CEA"
block|,
literal|"4#	c #819CEA"
block|,
literal|"5#	c #839DE9"
block|,
literal|"6#	c #365FD0"
block|,
literal|"7#	c #3660D0"
block|,
literal|"8#	c #3961CF"
block|,
literal|"9#	c #3B63CF"
block|,
literal|"0#	c #3D64D0"
block|,
literal|"a#	c #4067D0"
block|,
literal|"b#	c #4469D2"
block|,
literal|"c#	c #466BD3"
block|,
literal|"d#	c #496ED5"
block|,
literal|"e#	c #4C71D6"
block|,
literal|"f#	c #4E72D8"
block|,
literal|"g#	c #5074D9"
block|,
literal|"h#	c #5376DB"
block|,
literal|"i#	c #5578DB"
block|,
literal|"j#	c #587ADC"
block|,
literal|"k#	c #5B7CDC"
block|,
literal|"l#	c #5D7EDD"
block|,
literal|"m#	c #5F80DD"
block|,
literal|"n#	c #6081DE"
block|,
literal|"o#	c #6383DE"
block|,
literal|"p#	c #6686DF"
block|,
literal|"q#	c #6887E0"
block|,
literal|"r#	c #6988E0"
block|,
literal|"s#	c #6B89E1"
block|,
literal|"t#	c #6C8AE0"
block|,
literal|"u#	c #6E8CE1"
block|,
literal|"v#	c #708EE2"
block|,
literal|"w#	c #718FE2"
block|,
literal|"x#	c #7290E3"
block|,
literal|"y#	c #7391E2"
block|,
literal|"z#	c #7492E1"
block|,
literal|"A#	c #7592E2"
block|,
literal|"B#	c #7691E3"
block|,
literal|"C#	c #7591E3"
block|,
literal|"D#	c #7692E3"
block|,
literal|"E#	c #7693E3"
block|,
literal|"F#	c #7793E4"
block|,
literal|"G#	c #7893E4"
block|,
literal|"H#	c #7994E5"
block|,
literal|"I#	c #7D97E8"
block|,
literal|"J#	c #7E98E8"
block|,
literal|"K#	c #7D98E8"
block|,
literal|"L#	c #7D99E9"
block|,
literal|"M#	c #7D9BEA"
block|,
literal|"N#	c #7D9CEA"
block|,
literal|"O#	c #7E99E8"
block|,
literal|"P#	c #7D9AEA"
block|,
literal|"Q#	c #7C9BEA"
block|,
literal|"R#	c #7C9CEA"
block|,
literal|"S#	c #355FCF"
block|,
literal|"T#	c #3860D0"
block|,
literal|"U#	c #3A62D0"
block|,
literal|"V#	c #3C64D1"
block|,
literal|"W#	c #4167D1"
block|,
literal|"X#	c #4369D3"
block|,
literal|"Y#	c #466BD4"
block|,
literal|"Z#	c #486DD5"
block|,
literal|"`#	c #4A6ED7"
block|,
literal|" $	c #4C70D8"
block|,
literal|".$	c #5478D9"
block|,
literal|"+$	c #577BDA"
block|,
literal|"@$	c #597DDB"
block|,
literal|"#$	c #5B7EDB"
block|,
literal|"$$	c #5D7FDC"
block|,
literal|"%$	c #6182DE"
block|,
literal|"&$	c #6284DE"
block|,
literal|"*$	c #6485DF"
block|,
literal|"=$	c #6586DF"
block|,
literal|"-$	c #6787DF"
block|,
literal|";$	c #6888DF"
block|,
literal|">$	c #6A8ADF"
block|,
literal|",$	c #6C8BE0"
block|,
literal|"'$	c #6D8CE0"
block|,
literal|")$	c #6E8DE1"
block|,
literal|"!$	c #6F8DE1"
block|,
literal|"~$	c #708EE1"
block|,
literal|"{$	c #718FE0"
block|,
literal|"]$	c #728FE1"
block|,
literal|"^$	c #7390E0"
block|,
literal|"/$	c #738FE0"
block|,
literal|"($	c #7490E1"
block|,
literal|"_$	c #7590E1"
block|,
literal|":$	c #7591E1"
block|,
literal|"<$	c #7592E1"
block|,
literal|"[$	c #7692E2"
block|,
literal|"}$	c #7794E2"
block|,
literal|"|$	c #7894E3"
block|,
literal|"1$	c #7996E3"
block|,
literal|"2$	c #7A96E5"
block|,
literal|"3$	c #7B98E6"
block|,
literal|"4$	c #7B9AE8"
block|,
literal|"5$	c #7C99E8"
block|,
literal|"6$	c #7C96E5"
block|,
literal|"7$	c #7D97E7"
block|,
literal|"8$	c #7C99E9"
block|,
literal|"9$	c #7B9AE9"
block|,
literal|"0$	c #7B9AEA"
block|,
literal|"a$	c #5B6DCF"
block|,
literal|"b$	c #305EC8"
block|,
literal|"c$	c #335ECE"
block|,
literal|"d$	c #305ECA"
block|,
literal|"e$	c #345FCF"
block|,
literal|"f$	c #3761D0"
block|,
literal|"g$	c #3A62D1"
block|,
literal|"h$	c #3C64D2"
block|,
literal|"i$	c #4066D3"
block|,
literal|"j$	c #466BD5"
block|,
literal|"k$	c #486ED6"
block|,
literal|"l$	c #4A6ED6"
block|,
literal|"m$	c #4D71D8"
block|,
literal|"n$	c #4F72D9"
block|,
literal|"o$	c #5073D9"
block|,
literal|"p$	c #4F72D8"
block|,
literal|"q$	c #5074D8"
block|,
literal|"r$	c #5276D9"
block|,
literal|"s$	c #587ADA"
block|,
literal|"t$	c #5B7CDB"
block|,
literal|"u$	c #5D7EDC"
block|,
literal|"v$	c #5F7FDD"
block|,
literal|"w$	c #6081DC"
block|,
literal|"x$	c #6182DD"
block|,
literal|"y$	c #6283DD"
block|,
literal|"z$	c #6484DE"
block|,
literal|"A$	c #6585DD"
block|,
literal|"B$	c #6787DE"
block|,
literal|"C$	c #6988DF"
block|,
literal|"D$	c #6A89DE"
block|,
literal|"E$	c #6C8ADF"
block|,
literal|"F$	c #6D8BDF"
block|,
literal|"G$	c #6E8CE0"
block|,
literal|"H$	c #6F8DE0"
block|,
literal|"I$	c #718EE0"
block|,
literal|"J$	c #728FDF"
block|,
literal|"K$	c #728FDE"
block|,
literal|"L$	c #7290E0"
block|,
literal|"M$	c #7190E0"
block|,
literal|"N$	c #7291E0"
block|,
literal|"O$	c #7191E0"
block|,
literal|"P$	c #7392E1"
block|,
literal|"Q$	c #7493E1"
block|,
literal|"R$	c #7594E1"
block|,
literal|"S$	c #7594E2"
block|,
literal|"T$	c #7694E2"
block|,
literal|"U$	c #7695E2"
block|,
literal|"V$	c #7A96E4"
block|,
literal|"W$	c #7895E2"
block|,
literal|"X$	c #7A96E2"
block|,
literal|"Y$	c #7A96E3"
block|,
literal|"Z$	c #7B96E3"
block|,
literal|"`$	c #7996E1"
block|,
literal|" %	c #7C96E4"
block|,
literal|".%	c #305EC9"
block|,
literal|"+%	c #315ECC"
block|,
literal|"@%	c #325ECE"
block|,
literal|"#%	c #3760D0"
block|,
literal|"$%	c #3962D1"
block|,
literal|"%%	c #3E66D3"
block|,
literal|"&%	c #4268D4"
block|,
literal|"*%	c #446BD5"
block|,
literal|"=%	c #476CD6"
block|,
literal|"-%	c #496ED7"
block|,
literal|";%	c #4B6FD7"
block|,
literal|">%	c #4C70D7"
block|,
literal|",%	c #4E71D7"
block|,
literal|"'%	c #5074D7"
block|,
literal|")%	c #5276D8"
block|,
literal|"!%	c #5376D8"
block|,
literal|"~%	c #5779DA"
block|,
literal|"{%	c #597ADA"
block|,
literal|"]%	c #5A7BDB"
block|,
literal|"^%	c #5B7CDA"
block|,
literal|"/%	c #5D7EDB"
block|,
literal|"(%	c #5E7FDB"
block|,
literal|"_%	c #6182DB"
block|,
literal|":%	c #6384DC"
block|,
literal|"<%	c #6586DD"
block|,
literal|"[%	c #6686DC"
block|,
literal|"}%	c #6887DD"
block|,
literal|"|%	c #6988DD"
block|,
literal|"1%	c #6A8ADE"
block|,
literal|"2%	c #6B8BDE"
block|,
literal|"3%	c #6C8CDE"
block|,
literal|"4%	c #6E8DDF"
block|,
literal|"5%	c #6E8CDF"
block|,
literal|"6%	c #6D8DDF"
block|,
literal|"7%	c #6C8BDF"
block|,
literal|"8%	c #6F8DDF"
block|,
literal|"9%	c #718FDF"
block|,
literal|"0%	c #7290DF"
block|,
literal|"a%	c #7391E0"
block|,
literal|"b%	c #7491E0"
block|,
literal|"c%	c #7292E1"
block|,
literal|"d%	c #3959C5"
block|,
literal|"e%	c #345BC5"
block|,
literal|"f%	c #315EC8"
block|,
literal|"g%	c #355BC5"
block|,
literal|"h%	c #325EC8"
block|,
literal|"i%	c #315ECB"
block|,
literal|"j%	c #345DCC"
block|,
literal|"k%	c #335ECD"
block|,
literal|"l%	c #345ECD"
block|,
literal|"m%	c #355FCE"
block|,
literal|"n%	c #3862D0"
block|,
literal|"o%	c #3E66D2"
block|,
literal|"p%	c #456BD5"
block|,
literal|"q%	c #476CD5"
block|,
literal|"r%	c #4B6ED7"
block|,
literal|"s%	c #4B6FD6"
block|,
literal|"t%	c #4B6FD5"
block|,
literal|"u%	c #4D71D6"
block|,
literal|"v%	c #5073D7"
block|,
literal|"w%	c #5174D7"
block|,
literal|"x%	c #5275D8"
block|,
literal|"y%	c #5577D8"
block|,
literal|"z%	c #5678D8"
block|,
literal|"A%	c #5779D9"
block|,
literal|"B%	c #587AD8"
block|,
literal|"C%	c #597CD9"
block|,
literal|"D%	c #5B7DD9"
block|,
literal|"E%	c #5D7FDA"
block|,
literal|"F%	c #5F80DB"
block|,
literal|"G%	c #6182DC"
block|,
literal|"H%	c #6484DC"
block|,
literal|"I%	c #6585DC"
block|,
literal|"J%	c #6787DD"
block|,
literal|"K%	c #6988DE"
block|,
literal|"L%	c #6B8ADE"
block|,
literal|"M%	c #6B8ADF"
block|,
literal|"N%	c #6989DE"
block|,
literal|"O%	c #6B89DE"
block|,
literal|"P%	c #6E8BDF"
block|,
literal|"Q%	c #708CDE"
block|,
literal|"R%	c #708DDF"
block|,
literal|"S%	c #708FDF"
block|,
literal|"T%	c #728EDF"
block|,
literal|"U%	c #6F8EDD"
block|,
literal|"V%	c #728EDD"
block|,
literal|"W%	c #7390DF"
block|,
literal|"X%	c #7490DF"
block|,
literal|"Y%	c #335DC8"
block|,
literal|"Z%	c #3759C5"
block|,
literal|"`%	c #3859C5"
block|,
literal|"&	c #335EC8"
block|,
literal|".&	c #325DCA"
block|,
literal|"+&	c #345CCB"
block|,
literal|"@&	c #335DCC"
block|,
literal|"#&	c #345DCD"
block|,
literal|"$&	c #355FCD"
block|,
literal|"%&	c #3861D0"
block|,
literal|"&&	c #3B64D1"
block|,
literal|"*&	c #3E65D2"
block|,
literal|"=&	c #4168D3"
block|,
literal|"-&	c #456AD5"
block|,
literal|";&	c #4B6ED5"
block|,
literal|">&	c #4C6FD4"
block|,
literal|",&	c #4D70D5"
block|,
literal|"'&	c #4F72D6"
block|,
literal|")&	c #5173D6"
block|,
literal|"!&	c #5375D7"
block|,
literal|"~&	c #5476D8"
block|,
literal|"{&	c #5577D7"
block|,
literal|"]&	c #5477D8"
block|,
literal|"^&	c #5677D8"
block|,
literal|"/&	c #5879D9"
block|,
literal|"(&	c #597AD9"
block|,
literal|"_&	c #5C7DDA"
block|,
literal|":&	c #6080DC"
block|,
literal|"<&	c #6080DB"
block|,
literal|"[&	c #6181DC"
block|,
literal|"}&	c #6282DC"
block|,
literal|"|&	c #6383DD"
block|,
literal|"1&	c #6484DD"
block|,
literal|"2&	c #6686DE"
block|,
literal|"3&	c #6685DE"
block|,
literal|"4&	c #6786DE"
block|,
literal|"5&	c #6687DE"
block|,
literal|"6&	c #6887DE"
block|,
literal|"7&	c #6987DE"
block|,
literal|"8&	c #6788DF"
block|,
literal|"9&	c #6785DF"
block|,
literal|"0&	c #6B89DF"
block|,
literal|"a&	c #6C89DF"
block|,
literal|"b&	c #6F8DDD"
block|,
literal|"c&	c #6D8CDE"
block|,
literal|"d&	c #445BBB"
block|,
literal|"e&	c #3759BE"
block|,
literal|"f&	c #375AC6"
block|,
literal|"g&	c #355CC8"
block|,
literal|"h&	c #345CCA"
block|,
literal|"i&	c #355ECC"
block|,
literal|"j&	c #365FCD"
block|,
literal|"k&	c #3761CE"
block|,
literal|"l&	c #3A63D0"
block|,
literal|"m&	c #3D65D1"
block|,
literal|"n&	c #466AD4"
block|,
literal|"o&	c #476BD4"
block|,
literal|"p&	c #486CD3"
block|,
literal|"q&	c #4A6ED4"
block|,
literal|"r&	c #4B6ED4"
block|,
literal|"s&	c #4E71D6"
block|,
literal|"t&	c #4F71D5"
block|,
literal|"u&	c #5072D6"
block|,
literal|"v&	c #5274D7"
block|,
literal|"w&	c #5273D7"
block|,
literal|"x&	c #5274D6"
block|,
literal|"y&	c #5476D7"
block|,
literal|"z&	c #5779D8"
block|,
literal|"A&	c #587AD9"
block|,
literal|"B&	c #5A7CDA"
block|,
literal|"C&	c #5C7DDB"
block|,
literal|"D&	c #5D7EDA"
block|,
literal|"E&	c #6081DA"
block|,
literal|"F&	c #6181DB"
block|,
literal|"G&	c #6283DC"
block|,
literal|"H&	c #6483DD"
block|,
literal|"I&	c #6483DE"
block|,
literal|"J&	c #6585DE"
block|,
literal|"K&	c #6786DF"
block|,
literal|"L&	c #6886DE"
block|,
literal|"M&	c #6887DF"
block|,
literal|"N&	c #6987DF"
block|,
literal|"O&	c #6A88DF"
block|,
literal|"P&	c #6786E0"
block|,
literal|"Q&	c #6A86DE"
block|,
literal|"R&	c #6B89E0"
block|,
literal|"S&	c #365BC8"
block|,
literal|"T&	c #365CC8"
block|,
literal|"U&	c #375DCA"
block|,
literal|"V&	c #375FCB"
block|,
literal|"W&	c #3860CD"
block|,
literal|"X&	c #3C63D0"
block|,
literal|"Y&	c #4167D2"
block|,
literal|"Z&	c #4268D2"
block|,
literal|"`&	c #4368D2"
block|,
literal|" *	c #4367D2"
block|,
literal|".*	c #4568D2"
block|,
literal|"+*	c #466AD2"
block|,
literal|"@*	c #496CD3"
block|,
literal|"#*	c #4A6DD3"
block|,
literal|"$*	c #4A6DD4"
block|,
literal|"%*	c #4D70D4"
block|,
literal|"&*	c #4F72D5"
block|,
literal|"**	c #4C70D4"
block|,
literal|"=*	c #4E72D5"
block|,
literal|"-*	c #5173D5"
block|,
literal|";*	c #5375D6"
block|,
literal|">*	c #597BDA"
block|,
literal|",*	c #5B7DDA"
block|,
literal|"'*	c #5C7EDB"
block|,
literal|")*	c #5D7FDB"
block|,
literal|"!*	c #5E80DB"
block|,
literal|"~*	c #5E81DA"
block|,
literal|"{*	c #5F81DB"
block|,
literal|"]*	c #5F82DB"
block|,
literal|"^*	c #6384DD"
block|,
literal|"/*	c #6384DE"
block|,
literal|"(*	c #6585DF"
block|,
literal|"_*	c #6486E0"
block|,
literal|":*	c #6583DD"
block|,
literal|"<*	c #6386E0"
block|,
literal|"[*	c #6686E0"
block|,
literal|"}*	c #6B86DD"
block|,
literal|"|*	c #6D86DD"
block|,
literal|"1*	c #6086E0"
block|,
literal|"2*	c #5573CD"
block|,
literal|"3*	c #3959C3"
block|,
literal|"4*	c #3959C4"
block|,
literal|"5*	c #3759C0"
block|,
literal|"6*	c #375BC7"
block|,
literal|"7*	c #365CC7"
block|,
literal|"8*	c #395FCC"
block|,
literal|"9*	c #3B62CE"
block|,
literal|"0*	c #3E64D0"
block|,
literal|"a*	c #4066D1"
block|,
literal|"b*	c #4166D1"
block|,
literal|"c*	c #4064CF"
block|,
literal|"d*	c #4065CF"
block|,
literal|"e*	c #4266D0"
block|,
literal|"f*	c #4468D1"
block|,
literal|"g*	c #4569D1"
block|,
literal|"h*	c #476BD2"
block|,
literal|"i*	c #466AD1"
block|,
literal|"j*	c #476AD2"
block|,
literal|"k*	c #456AD1"
block|,
literal|"l*	c #496DD2"
block|,
literal|"m*	c #4A6FD3"
block|,
literal|"n*	c #496ED2"
block|,
literal|"o*	c #4B70D4"
block|,
literal|"p*	c #4D71D4"
block|,
literal|"q*	c #4E72D4"
block|,
literal|"r*	c #5073D4"
block|,
literal|"s*	c #5174D5"
block|,
literal|"t*	c #5175D5"
block|,
literal|"u*	c #5276D6"
block|,
literal|"v*	c #5377D6"
block|,
literal|"w*	c #5478D7"
block|,
literal|"x*	c #5579D7"
block|,
literal|"y*	c #567AD8"
block|,
literal|"z*	c #577BD9"
block|,
literal|"A*	c #597CD8"
block|,
literal|"B*	c #5A7DD9"
block|,
literal|"C*	c #5A7ED9"
block|,
literal|"D*	c #5B7FDA"
block|,
literal|"E*	c #5C80DA"
block|,
literal|"F*	c #5D80DA"
block|,
literal|"G*	c #5E81DB"
block|,
literal|"H*	c #5D80DB"
block|,
literal|"I*	c #6082DC"
block|,
literal|"J*	c #6183DD"
block|,
literal|"K*	c #6183DE"
block|,
literal|"L*	c #6082DB"
block|,
literal|"M*	c #6282DE"
block|,
literal|"N*	c #6682DE"
block|,
literal|"O*	c #6583DE"
block|,
literal|"P*	c #3759BF"
block|,
literal|"Q*	c #375AC2"
block|,
literal|"R*	c #375AC1"
block|,
literal|"S*	c #375AC4"
block|,
literal|"T*	c #395DCA"
block|,
literal|"U*	c #3A5ECA"
block|,
literal|"V*	c #3C60CC"
block|,
literal|"W*	c #3D61CD"
block|,
literal|"X*	c #3D61CC"
block|,
literal|"Y*	c #3C61CD"
block|,
literal|"Z*	c #3E62CD"
block|,
literal|"`*	c #3F64CE"
block|,
literal|" =	c #4266CF"
block|,
literal|".=	c #4468D0"
block|,
literal|"+=	c #4267CF"
block|,
literal|"@=	c #4166CE"
block|,
literal|"#=	c #4065CE"
block|,
literal|"$=	c #4166CD"
block|,
literal|"%=	c #4267CE"
block|,
literal|"&=	c #456AD0"
block|,
literal|"*=	c #4368CE"
block|,
literal|"==	c #4468CF"
block|,
literal|"-=	c #4569D0"
block|,
literal|";=	c #486BD1"
block|,
literal|">=	c #4B6FD3"
block|,
literal|",=	c #4C70D3"
block|,
literal|"'=	c #4F73D4"
block|,
literal|")=	c #5275D5"
block|,
literal|"!=	c #5477D6"
block|,
literal|"~=	c #577BD7"
block|,
literal|"{=	c #587CD8"
block|,
literal|"]=	c #577CD8"
block|,
literal|"^=	c #597DD9"
block|,
literal|"/=	c #5A7DDA"
block|,
literal|"(=	c #597DDA"
block|,
literal|"_=	c #587CDA"
block|,
literal|":=	c #5A7EDA"
block|,
literal|"<=	c #567BD8"
block|,
literal|"[=	c #557AD9"
block|,
literal|"}=	c #567BD9"
block|,
literal|"|=	c #577CD9"
block|,
literal|"1=	c #587DD9"
block|,
literal|"2=	c #587ED9"
block|,
literal|"3=	c #577ED8"
block|,
literal|"4=	c #587DD8"
block|,
literal|"5=	c #587ED8"
block|,
literal|"6=	c #567ED7"
block|,
literal|"7=	c #526ABD"
block|,
literal|"8=	c #3759C1"
block|,
literal|"9=	c #385BC7"
block|,
literal|"0=	c #395CC8"
block|,
literal|"a=	c #3B5DC9"
block|,
literal|"b=	c #3B5ECA"
block|,
literal|"c=	c #3A5FCA"
block|,
literal|"d=	c #3B60CC"
block|,
literal|"e=	c #3C61CC"
block|,
literal|"f=	c #3D62CD"
block|,
literal|"g=	c #3E63CD"
block|,
literal|"h=	c #3C61CB"
block|,
literal|"i=	c #3C61CA"
block|,
literal|"j=	c #3D62CB"
block|,
literal|"k=	c #3F64CC"
block|,
literal|"l=	c #4065CD"
block|,
literal|"m=	c #4669D0"
block|,
literal|"n=	c #476AD0"
block|,
literal|"o=	c #496BD1"
block|,
literal|"p=	c #4A6DD2"
block|,
literal|"q=	c #4B6ED2"
block|,
literal|"r=	c #4D71D3"
block|,
literal|"s=	c #4E73D4"
block|,
literal|"t=	c #4F74D4"
block|,
literal|"u=	c #5075D5"
block|,
literal|"v=	c #5276D5"
block|,
literal|"w=	c #5377D7"
block|,
literal|"x=	c #5278D7"
block|,
literal|"y=	c #5277D6"
block|,
literal|"z=	c #5378D7"
block|,
literal|"A=	c #5379D8"
block|,
literal|"B=	c #5379D9"
block|,
literal|"C=	c #5278D8"
block|,
literal|"D=	c #5178D7"
block|,
literal|"E=	c #3355C0"
block|,
literal|"F=	c #3556C1"
block|,
literal|"G=	c #395AC6"
block|,
literal|"H=	c #385AC7"
block|,
literal|"I=	c #395BC7"
block|,
literal|"J=	c #395EC9"
block|,
literal|"K=	c #395FCA"
block|,
literal|"L=	c #3B60CA"
block|,
literal|"M=	c #3B60CB"
block|,
literal|"N=	c #375DC7"
block|,
literal|"O=	c #385EC8"
block|,
literal|"P=	c #395FC9"
block|,
literal|"Q=	c #3A60CA"
block|,
literal|"R=	c #3D63CC"
block|,
literal|"S=	c #4367CF"
block|,
literal|"T=	c #476BD1"
block|,
literal|"U=	c #4A6ED2"
block|,
literal|"V=	c #4B6FD2"
block|,
literal|"W=	c #4C6FD2"
block|,
literal|"X=	c #4D70D1"
block|,
literal|"Y=	c #4E71D2"
block|,
literal|"Z=	c #4E72D2"
block|,
literal|"`=	c #4E74D4"
block|,
literal|" -	c #4E75D5"
block|,
literal|".-	c #4E75D4"
block|,
literal|"+-	c #4F75D3"
block|,
literal|"@-	c #5075D2"
block|,
literal|"#-	c #5075D3"
block|,
literal|"$-	c #5177D7"
block|,
literal|"%-	c #5178D8"
block|,
literal|"&-	c #4F75D5"
block|,
literal|"*-	c #5076D5"
block|,
literal|"=-	c #4F76D6"
block|,
literal|"--	c #5279D9"
block|,
literal|";-	c #3C52B1"
block|,
literal|">-	c #3656C3"
block|,
literal|",-	c #3757C5"
block|,
literal|"'-	c #3758C6"
block|,
literal|")-	c #3759C6"
block|,
literal|"!-	c #375BC6"
block|,
literal|"~-	c #385CC7"
block|,
literal|"{-	c #385DC8"
block|,
literal|"]-	c #365CC6"
block|,
literal|"^-	c #355BC6"
block|,
literal|"/-	c #355CC6"
block|,
literal|"(-	c #365DC7"
block|,
literal|"_-	c #375EC8"
block|,
literal|":-	c #375CC6"
block|,
literal|"<-	c #385EC6"
block|,
literal|"[-	c #3A5FC7"
block|,
literal|"}-	c #3C60C8"
block|,
literal|"|-	c #3D61C9"
block|,
literal|"1-	c #3E62CA"
block|,
literal|"2-	c #4063CC"
block|,
literal|"3-	c #4165CE"
block|,
literal|"4-	c #4268D0"
block|,
literal|"5-	c #4269D1"
block|,
literal|"6-	c #436AD2"
block|,
literal|"7-	c #446AD2"
block|,
literal|"8-	c #456BD2"
block|,
literal|"9-	c #496CD1"
block|,
literal|"0-	c #4C6CD0"
block|,
literal|"a-	c #4D6CCF"
block|,
literal|"b-	c #4E6DD0"
block|,
literal|"c-	c #4F6ECF"
block|,
literal|"d-	c #4E6FCF"
block|,
literal|"e-	c #4C70CF"
block|,
literal|"f-	c #4A71D0"
block|,
literal|"g-	c #4F6FCF"
block|,
literal|"h-	c #4B71D0"
block|,
literal|"i-	c #4A72D1"
block|,
literal|"j-	c #4B73D4"
block|,
literal|"k-	c #4F70D0"
block|,
literal|"l-	c #4C73D3"
block|,
literal|"m-	c #4C73D6"
block|,
literal|"n-	c #4B72D2"
block|,
literal|"o-	c #4B71D1"
block|,
literal|"p-	c #4C73D7"
block|,
literal|"q-	c #3354C0"
block|,
literal|"r-	c #3152BE"
block|,
literal|"s-	c #3052BE"
block|,
literal|"t-	c #3051BF"
block|,
literal|"u-	c #2E4FBF"
block|,
literal|"v-	c #2E4FBE"
block|,
literal|"w-	c #2E50BF"
block|,
literal|"x-	c #2F50BF"
block|,
literal|"y-	c #3156C4"
block|,
literal|"z-	c #2F56C5"
block|,
literal|"A-	c #2E57C5"
block|,
literal|"B-	c #2F57C5"
block|,
literal|"C-	c #3057C6"
block|,
literal|"D-	c #3258C6"
block|,
literal|"E-	c #3459C7"
block|,
literal|"F-	c #365AC7"
block|,
literal|"G-	c #385BC8"
block|,
literal|"H-	c #3B5DCA"
block|,
literal|"I-	c #3B5DCB"
block|,
literal|"J-	c #3C5ECC"
block|,
literal|"K-	c #3C60CD"
block|,
literal|"L-	c #3C62CE"
block|,
literal|"M-	c #3D65D0"
block|,
literal|"N-	c #3D66D1"
block|,
literal|"O-	c #4166D2"
block|,
literal|"P-	c #4667D2"
block|,
literal|"Q-	c #4A67D1"
block|,
literal|"R-	c #4C68D0"
block|,
literal|"S-	c #4C69CF"
block|,
literal|"T-	c #4D6BCE"
block|,
literal|"U-	c #4E6DCD"
block|,
literal|"V-	c #4E6ECE"
block|,
literal|"W-	c #4E6DCE"
block|,
literal|"X-	c #4970D0"
block|,
literal|"Y-	c #4770D0"
block|,
literal|"Z-	c #4B6BCE"
block|,
literal|"`-	c #4A6CCE"
block|,
literal|" ;	c #496DCF"
block|,
literal|".;	c #476FD0"
block|,
literal|"+;	c #4870D0"
block|,
literal|"@;	c #486DCF"
block|,
literal|"#;	c #242F79"
block|,
literal|"$;	c #2F41AC"
block|,
literal|"%;	c #2040B8"
block|,
literal|"&;	c #2041B8"
block|,
literal|"*;	c #2243B3"
block|,
literal|"=;	c #2243B8"
block|,
literal|"-;	c #2343B8"
block|,
literal|";;	c #2444B8"
block|,
literal|">;	c #2445B8"
block|,
literal|",;	c #2445B6"
block|,
literal|"';	c #2445B7"
block|,
literal|");	c #2444B9"
block|,
literal|"!;	c #2949BE"
block|,
literal|"~;	c #2649BF"
block|,
literal|"{;	c #234BBF"
block|,
literal|"];	c #224CBF"
block|,
literal|"^;	c #224AC0"
block|,
literal|"/;	c #244CC0"
block|,
literal|"(;	c #254DC0"
block|,
literal|"_;	c #254DC1"
block|,
literal|":;	c #264DC2"
block|,
literal|"<;	c #274EC3"
block|,
literal|"[;	c #274CC3"
block|,
literal|"};	c #274DC4"
block|,
literal|"|;	c #254DC5"
block|,
literal|"1;	c #214EC5"
block|,
literal|"2;	c #204FC6"
block|,
literal|"3;	c #1F50C8"
block|,
literal|"4;	c #2151C9"
block|,
literal|"5;	c #2B53C8"
block|,
literal|"6;	c #3154C7"
block|,
literal|"7;	c #3255C6"
block|,
literal|"8;	c #2F57C7"
block|,
literal|"9;	c #2C58C9"
block|,
literal|"0;	c #2D59CA"
block|,
literal|"a;	c #2D58C9"
block|,
literal|"b;	c #2E5BCC"
block|,
literal|"c;	c #325ECC"
block|,
literal|"d;	c #325ECB"
block|,
literal|"e;	c #1F40B1"
block|,
literal|"f;	c #1F40B2"
block|,
literal|"g;	c #1F40B3"
block|,
literal|"h;	c #2A44BD"
block|,
literal|"i;	c #2845BE"
block|,
literal|"j;	c #2745BE"
block|,
literal|"k;	c #2646BF"
block|,
literal|"l;	c #2546BE"
block|,
literal|"m;	c #2347BF"
block|,
literal|"n;	c #2147BF"
block|,
literal|"o;	c #2048C0"
block|,
literal|"p;	c #1D48C0"
block|,
literal|"q;	c #1C48C0"
block|,
literal|"r;	c #1B47C0"
block|,
literal|"s;	c #1C48BF"
block|,
literal|"t;	c #1E49BE"
block|,
literal|"u;	c #214ABD"
block|,
literal|"v;	c #244CBD"
block|,
literal|"w;	c #264DBE"
block|,
literal|"x;	c #254EC0"
block|,
literal|"y;	c #214FC2"
block|,
literal|"z;	c #1B51C5"
block|,
literal|"A;	c #1C51C7"
block|,
literal|"B;	c #2250C8"
block|,
literal|"C;	c #2A52C8"
block|,
literal|"D;	c #3254C6"
block|,
literal|"E;	c #3355C5"
block|,
literal|"F;	c #3154C8"
block|,
literal|"G;	c #3355C6"
block|,
literal|"H;	c #2F57C8"
block|,
literal|"I;	c #2E58C9"
block|,
literal|"J;	c #2E59C9"
block|,
literal|"K;	c #3059C9"
block|,
literal|"L;	c #2040B6"
block|,
literal|"M;	c #2743BB"
block|,
literal|"N;	c #2844BC"
block|,
literal|"O;	c #2743BD"
block|,
literal|"P;	c #2844BE"
block|,
literal|"Q;	c #2844BD"
block|,
literal|"R;	c #2346BE"
block|,
literal|"S;	c #2047BF"
block|,
literal|"T;	c #1E48C0"
block|,
literal|"U;	c #1D47C0"
block|,
literal|"V;	c #1D49BF"
block|,
literal|"W;	c #1F49BF"
block|,
literal|"X;	c #204ABE"
block|,
literal|"Y;	c #254DBF"
block|,
literal|"Z;	c #234EC0"
block|,
literal|"`;	c #2050C1"
block|,
literal|">	c #1C51C3"
block|,
literal|".>	c #1F51C6"
block|,
literal|"+>	c #2651C8"
block|,
literal|"@>	c #2D53C7"
block|,
literal|"#>	c #3155C6"
block|,
literal|"$>	c #3155C7"
block|,
literal|"%>	c #3355C7"
block|,
literal|"&>	c #3254C7"
block|,
literal|"*>	c #1E40B1"
block|,
literal|"=>	c #2141B8"
block|,
literal|"->	c #2442B9"
block|,
literal|";>	c #2744BB"
block|,
literal|">>	c #2945BB"
block|,
literal|",>	c #2A45BB"
block|,
literal|"'>	c #2944BA"
block|,
literal|")>	c #2745BB"
block|,
literal|"!>	c #2545BC"
block|,
literal|"~>	c #2246BD"
block|,
literal|"{>	c #2047BE"
block|,
literal|"]>	c #1F47BD"
block|,
literal|"^>	c #1D48BE"
block|,
literal|"/>	c #1E49C0"
block|,
literal|"(>	c #1F4AC0"
block|,
literal|"_>	c #214BBF"
block|,
literal|":>	c #244CBE"
block|,
literal|"<>	c #254DBE"
block|,
literal|"[>	c #244DBE"
block|,
literal|"}>	c #224FBF"
block|,
literal|"|>	c #2051C1"
block|,
literal|"1>	c #2151C3"
block|,
literal|"2>	c #2252C5"
block|,
literal|"3>	c #2151C1"
block|,
literal|"4>	c #2851C6"
block|,
literal|"5>	c #2A50C6"
block|,
literal|"6>	c #2E54C6"
block|,
literal|"7>	c #1F51C2"
block|,
literal|"8>	c #1D52C5"
block|,
literal|"9>	c #2651C9"
block|,
literal|"0>	c #2950C7"
block|,
literal|"a>	c #2D40A5"
block|,
literal|"b>	c #2040B0"
block|,
literal|"c>	c #1F40B0"
block|,
literal|"d>	c #223CAE"
block|,
literal|"e>	c #233CAE"
block|,
literal|"f>	c #253BAC"
block|,
literal|"g>	c #253BAD"
block|,
literal|"h>	c #233CB0"
block|,
literal|"i>	c #213EB2"
block|,
literal|"j>	c #1F3FB4"
block|,
literal|"k>	c #1E40B6"
block|,
literal|"l>	c #1F3FB7"
block|,
literal|"m>	c #1E3EB8"
block|,
literal|"n>	c #1F3FB8"
block|,
literal|"o>	c #2040B7"
block|,
literal|"p>	c #2141B6"
block|,
literal|"q>	c #2140B7"
block|,
literal|"r>	c #2241B6"
block|,
literal|"s>	c #2342B5"
block|,
literal|"t>	c #2442B6"
block|,
literal|"u>	c #2543B5"
block|,
literal|"v>	c #2643B4"
block|,
literal|"w>	c #2544B6"
block|,
literal|"x>	c #2346B8"
block|,
literal|"y>	c #2247B9"
block|,
literal|"z>	c #2048BC"
block|,
literal|"A>	c #1F48BF"
block|,
literal|"B>	c #2049C0"
block|,
literal|"C>	c #214AC0"
block|,
literal|"D>	c #224BBF"
block|,
literal|"E>	c #234CBE"
block|,
literal|"F>	c #244DBF"
block|,
literal|"G>	c #234CBF"
block|,
literal|"H>	c #264DC0"
block|,
literal|"I>	c #274EBF"
block|,
literal|"J>	c #264DBF"
block|,
literal|"K>	c #254EBF"
block|,
literal|"L>	c #2050C0"
block|,
literal|"M>	c #1F51C1"
block|,
literal|"N>	c #1E42A4"
block|,
literal|"O>	c #263BA6"
block|,
literal|"P>	c #253BA7"
block|,
literal|"Q>	c #253CA7"
block|,
literal|"R>	c #1E41A5"
block|,
literal|"S>	c #1F40AF"
block|,
literal|"T>	c #273AAC"
block|,
literal|"U>	c #1E40B0"
block|,
literal|"V>	c #1F40B5"
block|,
literal|"W>	c #1F40B6"
block|,
literal|"X>	c #1F40B8"
block|,
literal|"Y>	c #1E40B8"
block|,
literal|"Z>	c #1F3EB8"
block|,
literal|"`>	c #203FB7"
block|,
literal|" ,	c #2240B6"
block|,
literal|".,	c #2341B7"
block|,
literal|"+,	c #2345B9"
block|,
literal|"@,	c #2147BB"
block|,
literal|"#,	c #2148BA"
block|,
literal|"$,	c #2049BB"
block|,
literal|"%,	c #2049BD"
block|,
literal|"&,	c #2049BF"
block|,
literal|"*,	c #224BBE"
block|,
literal|"=,	c #244DBD"
block|,
literal|"-,	c #244CBF"
block|,
literal|";,	c #182969"
block|,
literal|">,	c #273BAD"
block|,
literal|",,	c #2739AB"
block|,
literal|"',	c #263AAC"
block|,
literal|"),	c #243CAE"
block|,
literal|"!,	c #233DAE"
block|,
literal|"~,	c #213EAF"
block|,
literal|"{,	c #1F3FB0"
block|,
literal|"],	c #2040B4"
block|,
literal|"^,	c #1F3FB6"
block|,
literal|"/,	c #1E3EB7"
block|,
literal|"(,	c #2240B7"
block|,
literal|"_,	c #2341B6"
block|,
literal|":,	c #2543B4"
block|,
literal|"<,	c #2644B3"
block|,
literal|"[,	c #2544B5"
block|,
literal|"},	c #2545B5"
block|,
literal|"|,	c #2547B6"
block|,
literal|"1,	c #2548B7"
block|,
literal|"2,	c #2349BA"
block|,
literal|"3,	c #1F49BE"
block|,
literal|"4,	c #2149BD"
block|,
literal|"5,	c #2049BE"
block|,
literal|"6,	c #214BBE"
block|,
literal|"7,	c #2249BE"
block|,
literal|"8,	c #234CBD"
block|,
literal|"9,	c #2149BE"
block|,
literal|"0,	c #1E49BF"
block|,
literal|"a,	c #253BA9"
block|,
literal|"b,	c #253BAB"
block|,
literal|"c,	c #263AAB"
block|,
literal|"d,	c #213DAF"
block|,
literal|"e,	c #203EAF"
block|,
literal|"f,	c #1D40AF"
block|,
literal|"g,	c #1D40B0"
block|,
literal|"h,	c #1E40B4"
block|,
literal|"i,	c #2241B7"
block|,
literal|"j,	c #2643B6"
block|,
literal|"k,	c #2744B5"
block|,
literal|"l,	c #2643B5"
block|,
literal|"m,	c #2346B6"
block|,
literal|"n,	c #2147B7"
block|,
literal|"o,	c #2644B6"
block|,
literal|"p,	c #2247B7"
block|,
literal|"q,	c #2248B8"
block|,
literal|"r,	c #2647B7"
block|,
literal|"s,	c #2549B7"
block|,
literal|"t,	c #2645B7"
block|,
literal|"u,	c #2148B8"
block|,
literal|"v,	c #2847B6"
block|,
literal|"w,	c #2549B6"
block|,
literal|"x,	c #2849B6"
block|,
literal|"y,	c #2049B7"
block|,
literal|"z,	c #2A49B5"
block|,
literal|"A,	c #243BA4"
block|,
literal|"B,	c #253BA5"
block|,
literal|"C,	c #253BA6"
block|,
literal|"D,	c #263AA7"
block|,
literal|"E,	c #263AA8"
block|,
literal|"F,	c #2739AA"
block|,
literal|"G,	c #243CAD"
block|,
literal|"H,	c #223DAE"
block|,
literal|"I,	c #1F3EAF"
block|,
literal|"J,	c #1E3FB0"
block|,
literal|"K,	c #1D40B1"
block|,
literal|"L,	c #1E3FB1"
block|,
literal|"M,	c #1F3FB3"
block|,
literal|"N,	c #1F3FB5"
block|,
literal|"O,	c #2140B6"
block|,
literal|"P,	c #2140B8"
block|,
literal|"Q,	c #2744B4"
block|,
literal|"R,	c #2746B6"
block|,
literal|"S,	c #2947B6"
block|,
literal|"T,	c #2946B5"
block|,
literal|"U,	c #2A48B6"
block|,
literal|"V,	c #3551A8"
block|,
literal|"W,	c #1F399C"
block|,
literal|"X,	c #143D9F"
block|,
literal|"Y,	c #263BA5"
block|,
literal|"Z,	c #273BA8"
block|,
literal|"`,	c #273BAA"
block|,
literal|" '	c #263AAD"
block|,
literal|".'	c #233CAD"
block|,
literal|"+'	c #213DAE"
block|,
literal|"@'	c #203FB2"
block|,
literal|"#'	c #2342B6"
block|,
literal|"$'	c #2443B6"
block|,
literal|"%'	c #2543B6"
block|,
literal|"&'	c #2644B5"
block|,
literal|"*'	c #133D9E"
block|,
literal|"='	c #263BA7"
block|,
literal|"-'	c #263BA9"
block|,
literal|";'	c #273BA9"
block|,
literal|">'	c #263AAA"
block|,
literal|",'	c #2539AB"
block|,
literal|"''	c #2639AB"
block|,
literal|")'	c #253AAC"
block|,
literal|"!'	c #243BAD"
block|,
literal|"~'	c #223DAF"
block|,
literal|"{'	c #203FB0"
block|,
literal|"]'	c #2040B1"
block|,
literal|"^'	c #2140B3"
block|,
literal|"/'	c #2543B1"
block|,
literal|"('	c #2744AF"
block|,
literal|"_'	c #1A3CA0"
block|,
literal|":'	c #1D3BA2"
block|,
literal|"<'	c #233BA4"
block|,
literal|"['	c #263AA5"
block|,
literal|"}'	c #253AA5"
block|,
literal|"|'	c #263AA6"
block|,
literal|"1'	c #263BA4"
block|,
literal|"2'	c #243BA5"
block|,
literal|"3'	c #263BA8"
block|,
literal|"4'	c #223EAF"
block|,
literal|"5'	c #3B4CA5"
block|,
literal|"6'	c #1D379A"
block|,
literal|"7'	c #1E389C"
block|,
literal|"8'	c #1E399F"
block|,
literal|"9'	c #1F3BA2"
block|,
literal|"0'	c #1F3BA3"
block|,
literal|"a'	c #213BA4"
block|,
literal|"b'	c #233AA3"
block|,
literal|"c'	c #243AA3"
block|,
literal|"d'	c #2539A4"
block|,
literal|"e'	c #253AA6"
block|,
literal|"f'	c #243BA7"
block|,
literal|"g'	c #253CAA"
block|,
literal|"h'	c #253CAC"
block|,
literal|"i'	c #253CAD"
block|,
literal|"j'	c #253CAE"
block|,
literal|"k'	c #243DAE"
block|,
literal|"l'	c #213FAF"
block|,
literal|"m'	c #223FAF"
block|,
literal|"n'	c #2040AF"
block|,
literal|"o'	c #253D93"
block|,
literal|"p'	c #1D3894"
block|,
literal|"q'	c #1F379A"
block|,
literal|"r'	c #1E389B"
block|,
literal|"s'	c #1D399C"
block|,
literal|"t'	c #1C3A9D"
block|,
literal|"u'	c #1B3A9D"
block|,
literal|"v'	c #183B9E"
block|,
literal|"w'	c #163C9E"
block|,
literal|"x'	c #153C9E"
block|,
literal|"y'	c #163B9D"
block|,
literal|"z'	c #173B9D"
block|,
literal|"A'	c #193A9D"
block|,
literal|"B'	c #1C3A9E"
block|,
literal|"C'	c #1F3AA1"
block|,
literal|"D'	c #223AA4"
block|,
literal|"E'	c #253BA8"
block|,
literal|"F'	c #273BA7"
block|,
literal|"G'	c #263CAB"
block|,
literal|"H'	c #263CAC"
block|,
literal|"I'	c #243EAE"
block|,
literal|"J'	c #273BAC"
block|,
literal|"K'	c #2A3795"
block|,
literal|"L'	c #1F389B"
block|,
literal|"M'	c #1D389B"
block|,
literal|"N'	c #1C399C"
block|,
literal|"O'	c #1B399C"
block|,
literal|"P'	c #1A3A9D"
block|,
literal|"Q'	c #1D399B"
block|,
literal|"R'	c #1B399B"
block|,
literal|"S'	c #1A3A9C"
block|,
literal|"T'	c #1B3A9F"
block|,
literal|"U'	c #1D3AA0"
block|,
literal|"V'	c #203BA2"
block|,
literal|"W'	c #203BA3"
block|,
literal|"X'	c #2639A6"
block|,
literal|"Y'	c #1B3692"
block|,
literal|"Z'	c #1C3794"
block|,
literal|"`'	c #1D3796"
block|,
literal|" )	c #1E3898"
block|,
literal|".)	c #1E389A"
block|,
literal|"+)	c #1F399B"
block|,
literal|"@)	c #1A399C"
block|,
literal|"#)	c #193A9E"
block|,
literal|"$)	c #1A3BA0"
block|,
literal|"%)	c #1C3BA2"
block|,
literal|"&)	c #1D3CA3"
block|,
literal|"*)	c #203CA4"
block|,
literal|"=)	c #223BA5"
block|,
literal|"-)	c #3C4699"
block|,
literal|";)	c #2B4595"
block|,
literal|">)	c #1C3793"
block|,
literal|",)	c #1D3895"
block|,
literal|"')	c #1E3897"
block|,
literal|"))	c #1F3998"
block|,
literal|"!)	c #1F3999"
block|,
literal|"~)	c #1F399A"
block|,
literal|"{)	c #1E399C"
block|,
literal|"])	c #1C3B9E"
block|,
literal|"^)	c #1D3BA0"
block|,
literal|"/)	c #1E3CA2"
block|,
literal|"()	c #223CA5"
block|,
literal|"_)	c #243CA6"
block|,
literal|":)	c #596FA9"
block|,
literal|"<)	c #3B4894"
block|,
literal|"[)	c #314993"
block|,
literal|"})	c #29499F"
block|,
literal|"|)	c #28489E"
block|,
literal|"1)	c #2B4BA1"
block|,
literal|"2)	c #2C4BA1"
block|,
literal|"3)	c #2D4CA2"
block|,
literal|"4)	c #2E4CA3"
block|,
literal|"5)	c #2F4CA4"
block|,
literal|"6)	c #2E4CA4"
block|,
literal|"7)	c #2F4DA3"
block|,
literal|"8)	c #2F4DA4"
block|,
literal|"9)	c #D3D5D2"
block|,
literal|"0)	c #3B4794"
block|,
literal|"a)	c #314791"
block|,
literal|"b)	c #304892"
block|,
literal|"c)	c #304893"
block|,
literal|"d)	c #2F4995"
block|,
literal|"e)	c #2F4997"
block|,
literal|"f)	c #2D4A9A"
block|,
literal|"g)	c #2A4A9D"
block|,
literal|"h)	c #294A9F"
block|,
literal|"i)	c #284AA0"
block|,
literal|"j)	c #294AA0"
block|,
literal|"k)	c #2B4AA1"
block|,
literal|"l)	c #2D4CA3"
block|,
literal|"m)	c #C9CAC9"
block|,
literal|"n)	c #455D9B"
block|,
literal|"o)	c #242F78"
block|,
literal|"p)	c #1B2F85"
block|,
literal|"q)	c #C6C3C8"
block|,
literal|"r)	c #B5B2B6"
block|,
literal|"s)	c #B5B7B4"
block|,
literal|"t)	c #B5B7B3"
block|,
literal|"u)	c #B5B2B5"
block|,
literal|"v)	c #B5B3B4"
block|,
literal|"w)	c #B5B5B4"
block|,
literal|"x)	c #B5B6B3"
block|,
literal|"y)	c #B5B4B4"
block|,
literal|"z)	c #B5B3B5"
block|,
literal|"A)	c #B5B4B5"
block|,
literal|"B)	c #B5B5B5"
block|,
literal|"C)	c #B5B5B3"
block|,
literal|"D)	c #B5B5B6"
block|,
literal|"E)	c #BAC3BE"
block|,
literal|"F)	c #B9C3BD"
block|,
literal|"G)	c #C1C3C4"
block|,
literal|"H)	c #BFC3C2"
block|,
literal|"I)	c #B9C3BE"
block|,
literal|"J)	c #BBC3BF"
block|,
literal|"K)	c #BDC3C1"
block|,
literal|"L)	c #C0C3C3"
block|,
literal|"M)	c #BEC3C1"
block|,
literal|"N)	c #C2C3C5"
block|,
literal|"O)	c #E6E3E8"
block|,
literal|"P)	c #E0E2DF"
block|,
literal|"Q)	c #E1E1E1"
block|,
literal|"R)	c #E2E1E3"
block|,
literal|"S)	c #E4E1E6"
block|,
literal|"T)	c #E4E2E7"
block|,
literal|"U)	c #E4E2E6"
block|,
literal|"V)	c #E3E3E4"
block|,
literal|"W)	c #E2E3E3"
block|,
literal|"X)	c #E1E3E2"
block|,
literal|"Y)	c #E3E3E3"
block|,
literal|"Z)	c #E3E3E2"
block|,
literal|"`)	c #EBEDEA"
block|,
literal|" !	c #EAECE9"
block|,
literal|".!	c #E9EBE8"
block|,
literal|"+!	c #ECEEEB"
block|,
literal|". . + @ # $ $ $ $ $ $ $ % $ $ $ $ $ % $ $ $ $ $ $ % $ $ $ $ $ % $ $ $ $ $ $ $ $ $ % $ $& * = - ;> , , ' ) ! ! ~ { ] ^ / ( _ :< [ } | | 1 2 3 3 4 4 4 4 4 4 4 5 6 4 4 4 5 6 7 8 9 4 5 6 7 8 9 6 7 8 9 "
block|,
literal|"0 a b % $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ c d d d d $ $ $ $ $ c d e f g h i i i i j k l m n o p q r s t u v w x y z 4 A B C D 9 9 E 9 E F G H I F J K L L L L J K L L L L L L L L "
block|,
literal|"@ % M N O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O P Q R S T U V W X Y Z `  ...+.@.#.$.%.&.*.=.-.;.>.,.'.).!.~.{.].^./.(._.:.<.[.}.|.1.2.3.4.5.6.7.8.9.0.a.b.b.b.b.b.b."
block|,
literal|"c.$ d.O e.f.g.g.g.h.g.g.g.g.g.h.h.g.g.g.g.g.h.h.g.g.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.A.B.C.D.E.F.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.`. +.+++@+#+$+@+$+%+&+*+=+$+-+;+>+,+'+)+!+;+>+,+~+,+>+,+~+,+"
block|,
literal|"$ {+N N f.f.f.f.h.h.h.g.f.f.h.h.h.h.g.f.f.h.h.h.h.]+^+/+(+h._+:+<+[+}+|+1+2+3+4+5+6+7+8+9+0+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+A+B+.+C+D+E+D+F+G+H+C+I+F+G+J+K+L+H+F+G+J+K+L+H+J+H+J+H+"
block|,
literal|"{+{+N N M+M+h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.N+N+h.h.(+O+P+P+Q+R+S+T+U+V+W+X+Y+Z+`+ @.@+@@@#@$@%@&@*@=@-@;@>@,@'@)@!@~@{@]@^@/@(@_@:@<@[@[@y+}@|@1@A+1@2@3@ +2@4@2@5@C+D+6@D+7@5@C+D+6@I+C+D+6@I+"
block|,
literal|"{+{+8@N M+M+h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.9@9@0@N+a@b@c@d@e@f@g@h@i@j@k@l@m@n@o@p@q@r@s@t@u@v@w@x@y@z@A@B@q+r+C@D@E@F@G@H@_@I@J@K@<@L@M@N@O@P@Q@R@S@T@A+A+U@V@W@W@A+2@U@V@W@W@U@V@W@W@"
block|,
literal|"{+{+8@N f.M+h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.(+(+(+9@9@X@Y@Z@e@`@ #.#+#@###$#%#&#*#=#-#;#>#,#'#)#!#~#{#]#z@^#/#(#p+_#r+:#s+t+<#[#}#|#|#1#_@|#_@_@2#L@3#4#y+y+5#z+z+z+5#z+z+z+z+A+A+A+A+A+"
block|,
literal|"{+{+8@8@f.f.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.(+6#7#8#9#0#a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#&@p#q#r#s#t#u#v#w#x#x#y#y#z#A#B#C#D#E#E#F#G#H#F#H#H#u+v+I#J#K#L#J@J@M#N#O#P#M#M#M#N#M#Q#Q#R#"
block|,
literal|"$ {+8@e.f.f.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.h.S#l.7#T#U#V#W#X#Y#Z#`# $f#g###.$+$@$#$$$$@%$&$*$=$-$;$>$,$'$)$!$~$~${$]$^$/$($($_$_$:$<$_$<$[$}$|$|$1$2$2$3$}#4$5$6$7$8$8$9$8$8$8$0$8$"
block|,
literal|"$ {+a$e.f.f.h.h.h.h.h.h.h.h.h.b$h.c$c$c$c$c$d$c$c$c$c$c$c$c$c$c$c$e$e$7#f$g$h$i$X#j$k$l$m$n$o$p$q$r$l@s$t$u$v$w$x$y$z$A$B$C$D$E$F$G$G$H$I$J$J$K$K$J$L$L$L$L$L$M$N$O$P$Q$R$S$T$U$1$V$T$W$X$Y$1$V$Y$Z$`$ %"
block|,
literal|"$ $ a$a$f.f.b$b$b$b$b$b$b$b$b$b$b$b$b$b$b$b$b$b$.%b$b$b$.%d$+%+%@%h.e$l.#%$%h$%%&%*%=%-%;%>%,%'%)%!% @ @~%{%]%^%/%(%w$_%:%<%[%}%|%D$1%2%3%4%5%4%4%6%5%5%4%4%4%5%7%5%8%9%L$0%a%a%a%P$b%P$P$z#z#z#P$c%c%c%"
block|,
literal|"$ $ 8@e.f.f.d%b$b$b$b$b$d%b$b$b$b$b$b$e%f%b$b$b$b$b$g%h%b$.%i%i%j%k%l%m%X@n%h$o%&%p%q%`#r%s%t%u%v%w%x%y% @z%A%B%C%D%E%F%G%:%H%I%[%J%}%K%|%D$K%D$D$L%M%M%M%M%M%D$N%O%i+P%j+Q%R%S%T%0%U%V%W%W%W%W%X%X%X%X%"
block|,
literal|"$ $ 8@8@f.f.d%d%b$b$b$b$d%d%b$b$b$h%Y%Z%Z%h%f%f%h%Y%`%`%&h%h%.&+&@&#&$&X@%&&&*&=&-&j$Z#+#;&>&,&'&)&)&!&~&{&]&^&/&(&^%_&(%:&<&[&}&|&1&A$A$2&3&4&4&5&B$6&7&B$7&8&9&6&7&0&a&a&i+i+i+b&a&a&j+U%c&U%j+U%c&U%"
block|,
literal|"$ $ 8@8@d&e&d%d%d%d%d%d%d%d%d%d%d%`%d%d%d%d%`%`%`%d%d%d%d%`%`%f&g&h&j%i&j&k&l&m&=&X#Y#n&o&p&q&r&>&s&t&t&u&v&w&x&y&{&z&A&B&C&D&(%(%F%F%E&F&}&}&|&G&|&H&1&I%I&A$1&}&z$z$J&K&L&M&N&O&0&P&Q&0&a&R&a&a&a&R&a&"
block|,
literal|"{+$ 8@8@e&e&d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%`%f&S&T&U&V&W&Y@X&Y&Z&`& *.*+*@*#*@*r&$*#*r&%*&***=*-*;*y&z%A%z&A&A&>*B&,*,*'*)*!*!*~*{*F&}&{*}&{*]*G%G%y$^*/*J&(*2&_*:*<*=$[*}*<*=$<*|*1*"
block|,
literal|"{+{+8@2*e&e&d%d%d%d%d%d%d%d%d%e&3*4*4*4*4*4*5*4*4*4*4*4*4*4*4*4*`%f&6*6*7*8*9*0*a*b*c*d*e*f*g*h*i*j*+*k*h*l*m*n*m*o*p*q*r*s*t*u*v*w*x*y*y*z*A*B*C*D*E*F*G*E*G*F*H*G*F*~*]*{*I*x$J*K*L*G%K*M*o#o#I&N*O*O*"
block|,
literal|"{+{+8@2*e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&P*e&e&e&e&e&e&P*P*e&e&e&P*P*5*Q*R*S*T*U*V*W*X*Y*Z*`*d* =.=+=@=#=$=%=g@&=*===-=i*;=l*>=,=q*'=s*)=k@!=x*~={=]=^=/=(=_=:=(=<=<=]=[=}=|=]=]=1=2=3=|=4=5=2=2=2=3=6=6=6="
block|,
literal|"{+{+7=e.e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&e&P*P*8=9=0=a=b=U*c=d=e=f=e@#=g=h=i=i=j=k=k=l=%===m=n=o=p=q=,=r=s=t=u=v=v*w=x=x=y=z=z=A=z=A=B=C=B=D=C=B=x=B=B=B=B=B=B=B=B=B=B=B=B=B=B="
block|,
literal|"{+{+7=7=e&e&e&e&E=E=e&e&e&e&E=E=E=e&e&e&e&E=E=E=e&e&e&e&E=E=e&e&e&e&E=E=E=F=d%G=G=H=I=J=K=L=M=R+}+N=O=P=Q=j=i=h=R=e@@=S=-=T=h@l*U=V=W=X=Y=Z=`= - - -.-+-@- -#-$-%-$-&-*-$-=-%-----C=$-%---------B=B=B=B="
block|,
literal|"{+{+7=7=;-;-E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=E=>-,-'-)-!-6*~-{-{-]-^-/-/-(-_-:-N=<-[-}-|-1-2-3- =4-5-6-7-8-9-0-0-a-b-c-d-e-f-g-h-h-i-j-k-h-h-i-j-l-m-n-o-i-j-l-m-n-j-l-p-n-"
block|,
literal|"{+{+7=7=;-;-E=E=E=E=E=E=E=E=q-r-s-t-t-u-u-v-v-v-u-w-x-u-u-u-u-u-u-u-u-v-v-u-u-u-u-u-v-v-u-u-u-u-v-v-u-y-z-A-B-C-D-E-E-F-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-U-V-W-V-e-X-Y-Z-`- ;.;Y-N N +;@;.;Y-N N N N N N N "
block|,
literal|"#;#;d&d&$;$;%;%;%;%;%;%;%;%;&;*;=;-;-;-;;;>;,;>;>;>;;;>;>;>;>;>;>;>;>;>;';);>;>;>;>;>;';>;>;>;>;>;';);!;~;{;];^;/;(;_;_;:;<;[;};};|;1;2;3;4;5;6;7;8;9;9;0;a;0;0;b;h.a;0;0;b;h.c;h.d;0;b;h.c;h.d;h.c;h.d;"
block|,
literal|"#;#;;-;-$;$;e;e;e;e;e;e;e;e;e;e;e;f;f;f;f;e;e;e;f;f;f;f;f;f;f;f;f;f;f;f;g;%;f;f;f;f;f;g;f;f;f;f;f;g;%;h;i;j;k;l;m;n;o;p;q;r;r;s;t;u;v;w;x;y;z;A;B;C;6;D;E;F;G;G;H;I;F;G;G;H;I;J;J;K;G;H;I;J;J;K;I;J;J;K;"
block|,
literal|"#;#;;-;-$;$;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;L;e;e;e;e;e;e;e;e;e;e;e;e;L;M;N;O;P;Q;i;i;k;R;S;T;U;q;q;V;W;X;{;Y;Z;`;>.>+>@>#>+>$>6;#>#>+>%>&>G;G;G;G;G;&>G;G;G;G;G;G;G;G;G;"
block|,
literal|"#;#;d.;-$;$;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;*>e;e;e;e;e;e;e;e;e;e;e;e;*>=>->;>>>,>'>'>)>!>~>{>]>^>^>V;V;/>(>_>:><>[>}>|>1>2>3>2>4>5>6>7>8>9>0>G;G;G;G;9>0>G;G;G;G;G;G;G;G;"
block|,
literal|"#;#;d.d.a>a>e;e;e;e;e;e;e;e;e;e;b>b>c>c>c>c>c>b>e;e;e;e;e;e;e;e;e;e;e;e;e;e;d>e>f>g>h>i>j>k>l>l>m>m>n>n>o>o>p>q>r>r>s>t>u>v>v>u>w>';x>y>z>t;A>B>C>D>E>E>F>G>F>H>H>I>F>Y;J>w;K>L>K>M>J>w;K>L>K>M>K>L>K>M>"
block|,
literal|"#;#;d.d.a>a>N>e;N>O>O>O>N>e;N>O>O>P>Q>R>S>R>Q>O>O>O>N>e;N>O>O>O>N>e;N>N>O>T>e;e;e;U>U>U>U>f;V>W>o>o>o>o>X>X>Y>Y>n>n>Z>Z>`> ,.,t>t>u>u>w>+,@,#,$,%,A>&,*,=,B>[>-,w;<>C>[>-,w;w;w;w;w;-,w;w;w;w;w;w;w;w;w;"
block|,
literal|"#;;,;-;-a>a>N>N>N>O>O>O>N>N>N>O>O>O>O>N>N>N>O>O>O>O>N>N>N>O>O>O>N>N>N>N>O>>,,,,,,,',g>),!,~,{,{,*>U>e;f;],o>%;o>^,^,/,/,l>q>(,_,t>u>:,<,v>[,},|,1,2,%,%,3,4,5,6,7,8,9,5,6,0,G>G>Y;G>6,0,G>G>Y;G>G>G>Y;G>"
block|,
literal|";,;,;-;-O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>P>a,b,',',c,c,f>),e>d,e,{,{,U>U>f,f,U>U>g,g,*>g;h,^,^,`>`>q>i,t>j,k,k,l,w>m,n,o,p,q,r,s,t,p,u,v,w,x,y,z,u,v,w,x,y,z,w,x,y,z,"
block|,
literal|";,;,b b O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>A,A,A,B,C,D,E,F,c,',g>G,!,H,~,e,{,I,J,J,K,K,U>f,f,J,L,M,N,L;O,i,P,.,l,Q,k,k,k,k,k,k,R,v,k,k,k,R,v,S,T,U,k,R,v,S,T,U,v,S,T,U,"
block|,
literal|";,;,b V,W,W,X,X,O>X,X,X,X,X,O>X,X,X,X,X,X,O>X,X,X,X,X,X,O>X,X,X,X,X,O>X,X,O>O>O>O>B,B,B,B,Y,O>O>Z,`,T>T> '',g>.'+'e,{,{,e,+'+'e,e,{,J,K,e;@'N,O,#'$'%'%'j,%'j,&'k,k,%'j,&'k,k,k,k,k,&'k,k,k,k,k,k,k,k,k,"
block|,
literal|";,;,b V,W,W,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,*'O>O>O>O>O>O>O>O>B,B,A,A,B,C,='-'`,;'>'>',''')'!'!'e>e>~'~'~,~,{'{,*>*>e;]']']']']']'^'/']']']'^'/':,(':,]'^'/':,(':,/':,(':,"
block|,
literal|";,;,V,V,W,W,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,_':'<'['}'|'|'O>O>O>O>O>O>O>Y,Y,1'1'B,B,2'2'C,3'-'>'c,)')'!'),4'{'e;]'e;*>*>e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;e;"
block|,
literal|";,;,5'5'W,W,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,W,6'6'6'7'8'9'0'a'b'c'd'd'}'}'O>O>O>O>O>O>O>O>Y,1'1'['['e'e'f'g'h'i'j'k'G,),!,l'j'm'n'b>b>),m'b>e;e;e;e;e;b>e;e;e;e;e;e;e;e;e;"
block|,
literal|";,;,b b o'o'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'W,q'q'q'r's't'u'v'w'x'y'z'A'B'C'D'2'2'B,B,O>O>O>O>O>O>O>O>O>O>O>Y,Y,C,C,='='='E'F'3'3'3'G'Z,='F'F'G'H'I'J'F'F'G'H'I'J'G'H'I'J'"
block|,
literal|";,;,b b K'K'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'W,W,W,W,W,L'L'q'r'M'N'O'P'u'N's'Q'R'S'A'T'U'C'V'9'0'W'D'}'X'|'O>O>B,B,O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>"
block|,
literal|";,;,b b K'K'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'p'Y'Y'Y'Z'`' ).)+)+)+)W,W,W,W,L'L'q'q'r'r's'M'N'P'@)A'#)$)%)&)*)=)B,|'|'O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>O>"
block|,
literal|"{+;,$ -);)K'p'p'o'p'p'p'p'p'o'p'p'p'p'p'p'o'p'p'p'p'p'p'o'p'p'p'p'p'o'o'p'p'p'p'p'p'p'p'p'p'>)>)Y'Y'>)Z',)')))!)~)+)W,W,W,W,W,W,W,W,W,W,W,L'L'{)s't'])^)/)])/)/)O>()])/)/)O>()O>_)O>/)O>()O>_)O>()O>_)O>"
block|,
literal|":);,;,;)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)[)M M M M M M M M M M M M M M M M M M })})|)|)})M M 1)2)3)4)5)6)6)6)7)7)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)"
block|,
literal|"9)#;;,;,$ -)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)<)0)a)a)a)b)c)d)e)f)g)h)i)i)j)j)M M M M M M M M M M M })})})})M k)k)M M k)l)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)8)"
block|,
literal|"+ 9)m)n)$ #;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;#;o)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)p)"
block|,
literal|"+ + 9)a m)q)r)s)r)s)r)s)r)s)r)r)s)r)s)r)s)r)r)s)r)s)r)s)r)s)r)s)r)s)r)s)r)t)u)v)w)x)x)w)y)z)A)A)B)B)B)B)w)w)C)C)w)w)B)B)B)B)B)w)w)w)w)B)B)B)B)B)B)B)B)B)B)B)B)B)B)B)B)B)B)B)B)B)D)B)B)B)B)B)D)B)B)B)D)B)"
block|,
literal|". + + 9)9)9)q)E)q)E)q)E)q)E)q)q)E)q)E)q)E)q)q)E)q)E)q)E)q)E)q)E)q)E)q)E)q)F)G)H)E)I)J)K)H)L)L)L)L)L)L)L)H)H)M)M)H)H)L)L)G)L)L)H)H)H)H)L)L)L)L)L)L)L)L)L)L)L)L)L)L)L)L)L)L)L)L)L)N)L)L)L)L)L)N)L)L)L)N)L)"
block|,
literal|". . 0 . + O)P)O)P)O)P)O)P)O)P)P)O)P)O)P)O)P)P)O)P)O)P)O)P)O)P)O)P)O)P)O)P)O)Q)R)S)T)U)V)W)X)W)W)V)V)V)V)V)V)V)V)Y)Y)Z)Z)Y)Z)Z)Y)Y)V)V)V)V)V)V)V)V)V)V)V)V)V)V)V)V)V)V)V)V)V)V)V)Y)V)V)V)V)V)Y)V)V)V)Y)V)"
block|,
literal|". . . 0 0 0 . 0 0 0 + 0 + 0 + 0 + 0 + 0 + 0 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 0 `) !+ + + .! !`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)`)+!`)`)`)`)`)+!`)`)`)+!`)"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|listviewhighcornerright_xpm
specifier|static
name|char
modifier|*
name|listviewhighcornerright_xpm
index|[]
init|=
block|{
literal|"100 46 780 2"
block|,
literal|"  	c None"
block|,
literal|". 	c #6A779D"
block|,
literal|"+ 	c #6C789C"
block|,
literal|"@ 	c #6C789D"
block|,
literal|"# 	c #6B789D"
block|,
literal|"$ 	c #6A779E"
block|,
literal|"% 	c #66759E"
block|,
literal|"& 	c #64749E"
block|,
literal|"* 	c #63749E"
block|,
literal|"= 	c #61739D"
block|,
literal|"- 	c #576D9B"
block|,
literal|"; 	c #556C9C"
block|,
literal|"> 	c #4D679D"
block|,
literal|", 	c #4A649D"
block|,
literal|"' 	c #49629D"
block|,
literal|") 	c #465E9C"
block|,
literal|"! 	c #40579C"
block|,
literal|"~ 	c #3B5394"
block|,
literal|"{ 	c #2C4E97"
block|,
literal|"] 	c #314993"
block|,
literal|"^ 	c #2B4595"
block|,
literal|"/ 	c #1B4296"
block|,
literal|"( 	c #253D93"
block|,
literal|"_ 	c #19418F"
block|,
literal|": 	c #0F3C96"
block|,
literal|"< 	c #42599E"
block|,
literal|"[ 	c #758DC3"
block|,
literal|"} 	c #E8EAE7"
block|,
literal|"| 	c #EEF0ED"
block|,
literal|"1 	c #FBFBFC"
block|,
literal|"2 	c #6F7D9B"
block|,
literal|"3 	c #6F7D9A"
block|,
literal|"4 	c #6E7B9C"
block|,
literal|"5 	c #67759E"
block|,
literal|"6 	c #63739E"
block|,
literal|"7 	c #62739D"
block|,
literal|"8 	c #596F9C"
block|,
literal|"9 	c #4A639D"
block|,
literal|"0 	c #47609C"
block|,
literal|"a 	c #445B9F"
block|,
literal|"b 	c #3E5697"
block|,
literal|"c 	c #2E509A"
block|,
literal|"d 	c #2D509A"
block|,
literal|"e 	c #2D4F99"
block|,
literal|"f 	c #2D4F98"
block|,
literal|"g 	c #28418A"
block|,
literal|"h 	c #3E51A3"
block|,
literal|"i 	c #D0D3DC"
block|,
literal|"j 	c #A1B6EF"
block|,
literal|"k 	c #A2B6F0"
block|,
literal|"l 	c #A1B6F0"
block|,
literal|"m 	c #A3B6F0"
block|,
literal|"n 	c #A0B6EF"
block|,
literal|"o 	c #9DB6EE"
block|,
literal|"p 	c #9CB5EF"
block|,
literal|"q 	c #9CB2F0"
block|,
literal|"r 	c #9FB5EE"
block|,
literal|"s 	c #9CB4EB"
block|,
literal|"t 	c #9AB3EC"
block|,
literal|"u 	c #9AB0EC"
block|,
literal|"v 	c #9DB3EB"
block|,
literal|"w 	c #9BB4EC"
block|,
literal|"x 	c #9BB4EE"
block|,
literal|"y 	c #9BB1EF"
block|,
literal|"z 	c #9BB0F0"
block|,
literal|"A 	c #90ACF0"
block|,
literal|"B 	c #93ABEE"
block|,
literal|"C 	c #91A8EB"
block|,
literal|"D 	c #8BA3E8"
block|,
literal|"E 	c #88A1E7"
block|,
literal|"F 	c #809DE9"
block|,
literal|"G 	c #7A99E8"
block|,
literal|"H 	c #7491E5"
block|,
literal|"I 	c #698AE4"
block|,
literal|"J 	c #6184E3"
block|,
literal|"K 	c #507EDC"
block|,
literal|"L 	c #4E7CDB"
block|,
literal|"M 	c #4F7DDC"
block|,
literal|"N 	c #5479DA"
block|,
literal|"O 	c #567BDC"
block|,
literal|"P 	c #577CDD"
block|,
literal|"Q 	c #5074DA"
block|,
literal|"R 	c #5174DB"
block|,
literal|"S 	c #5175DC"
block|,
literal|"T 	c #5276DD"
block|,
literal|"U 	c #4D71DE"
block|,
literal|"V 	c #4C72D8"
block|,
literal|"W 	c #3A6CE0"
block|,
literal|"X 	c #2B49A6"
block|,
literal|"Y 	c #E0E2DF"
block|,
literal|"Z 	c #93AAE9"
block|,
literal|"` 	c #94A9E8"
block|,
literal|" .	c #94AAE9"
block|,
literal|"..	c #93A9E9"
block|,
literal|"+.	c #92AAE9"
block|,
literal|"@.	c #8DA9E8"
block|,
literal|"#.	c #8CA7E9"
block|,
literal|"$.	c #92ABE9"
block|,
literal|"%.	c #8EAAE9"
block|,
literal|"&.	c #8EA9E9"
block|,
literal|"*.	c #8FAAE9"
block|,
literal|"=.	c #8CA8E9"
block|,
literal|"-.	c #8CA2E7"
block|,
literal|";.	c #86A1E6"
block|,
literal|">.	c #839EE9"
block|,
literal|",.	c #7F9CE9"
block|,
literal|"'.	c #7A97E8"
block|,
literal|").	c #7693E7"
block|,
literal|"!.	c #6E8EE8"
block|,
literal|"~.	c #678AE9"
block|,
literal|"{.	c #5D84E3"
block|,
literal|"].	c #577CDF"
block|,
literal|"^.	c #4E77DF"
block|,
literal|"/.	c #4A70DB"
block|,
literal|"(.	c #4870DB"
block|,
literal|"_.	c #4870DC"
block|,
literal|":.	c #4770E3"
block|,
literal|"<.	c #496FDC"
block|,
literal|"[.	c #486EDB"
block|,
literal|"}.	c #466FE4"
block|,
literal|"|.	c #466EE3"
block|,
literal|"1.	c #4167D9"
block|,
literal|"2.	c #4066D8"
block|,
literal|"3.	c #3F66D8"
block|,
literal|"4.	c #3D64D7"
block|,
literal|"5.	c #3960DA"
block|,
literal|"6.	c #476DD9"
block|,
literal|"7.	c #446EE5"
block|,
literal|"8.	c #305EC8"
block|,
literal|"9.	c #8EAAE8"
block|,
literal|"0.	c #8FAAE8"
block|,
literal|"a.	c #91AAE9"
block|,
literal|"b.	c #8FA9E8"
block|,
literal|"c.	c #8BA8E8"
block|,
literal|"d.	c #8AA7E9"
block|,
literal|"e.	c #8BA5EA"
block|,
literal|"f.	c #8AA7E8"
block|,
literal|"g.	c #87A2E6"
block|,
literal|"h.	c #859FE8"
block|,
literal|"i.	c #7F9DE8"
block|,
literal|"j.	c #7C9AE8"
block|,
literal|"k.	c #7B95E7"
block|,
literal|"l.	c #7090E8"
block|,
literal|"m.	c #6B8BE9"
block|,
literal|"n.	c #6386E6"
block|,
literal|"o.	c #5881E1"
block|,
literal|"p.	c #5479DE"
block|,
literal|"q.	c #4D74DE"
block|,
literal|"r.	c #476EDB"
block|,
literal|"s.	c #446EE1"
block|,
literal|"t.	c #446EE0"
block|,
literal|"u.	c #446EDF"
block|,
literal|"v.	c #446DE0"
block|,
literal|"w.	c #426ADF"
block|,
literal|"x.	c #3C64DA"
block|,
literal|"y.	c #4360CC"
block|,
literal|"z.	c #D3D5D2"
block|,
literal|"A.	c #E6E3E8"
block|,
literal|"B.	c #8DA2E7"
block|,
literal|"C.	c #8CA6EA"
block|,
literal|"D.	c #8DA3E9"
block|,
literal|"E.	c #88A2E7"
block|,
literal|"F.	c #87A1E7"
block|,
literal|"G.	c #8AA1E7"
block|,
literal|"H.	c #849EE9"
block|,
literal|"I.	c #7D9AE9"
block|,
literal|"J.	c #7B98E8"
block|,
literal|"K.	c #7796E5"
block|,
literal|"L.	c #7191E7"
block|,
literal|"M.	c #688CE9"
block|,
literal|"N.	c #6687E5"
block|,
literal|"O.	c #5C83E1"
block|,
literal|"P.	c #557BDE"
block|,
literal|"Q.	c #4F76DE"
block|,
literal|"R.	c #4C72DE"
block|,
literal|"S.	c #456EDF"
block|,
literal|"T.	c #426AD9"
block|,
literal|"U.	c #4269D9"
block|,
literal|"V.	c #4269D8"
block|,
literal|"W.	c #3D64D9"
block|,
literal|"X.	c #3A61DA"
block|,
literal|"Y.	c #345ED6"
block|,
literal|"Z.	c #335ECF"
block|,
literal|"`.	c #C6C3C8"
block|,
literal|" +	c #86A1E7"
block|,
literal|".+	c #87A2E7"
block|,
literal|"++	c #87A0E7"
block|,
literal|"@+	c #859EE8"
block|,
literal|"#+	c #849DE9"
block|,
literal|"$+	c #7E9BE9"
block|,
literal|"%+	c #7A99E9"
block|,
literal|"&+	c #7A95E5"
block|,
literal|"*+	c #7593E7"
block|,
literal|"=+	c #6F8EE9"
block|,
literal|"-+	c #668AE5"
block|,
literal|";+	c #6386E0"
block|,
literal|">+	c #5B82DF"
block|,
literal|",+	c #5379DE"
block|,
literal|"'+	c #5075DE"
block|,
literal|")+	c #4B6FDC"
block|,
literal|"!+	c #446AD7"
block|,
literal|"~+	c #4269D6"
block|,
literal|"{+	c #4269D5"
block|,
literal|"]+	c #3E65D7"
block|,
literal|"^+	c #C9CAC9"
block|,
literal|"/+	c #869EE9"
block|,
literal|"(+	c #859FE9"
block|,
literal|"_+	c #849FE9"
block|,
literal|":+	c #829DE8"
block|,
literal|"<+	c #819DE8"
block|,
literal|"[+	c #7B9AE9"
block|,
literal|"}+	c #7A96E6"
block|,
literal|"|+	c #7290E8"
block|,
literal|"1+	c #698CE6"
block|,
literal|"2+	c #6689E0"
block|,
literal|"3+	c #5D84E0"
block|,
literal|"4+	c #587FDF"
block|,
literal|"5+	c #5377DD"
block|,
literal|"6+	c #4B74DE"
block|,
literal|"7+	c #496BD8"
block|,
literal|"8+	c #7C9BE9"
block|,
literal|"9+	c #7E9CE9"
block|,
literal|"0+	c #7D9AEA"
block|,
literal|"a+	c #7D9BEA"
block|,
literal|"b+	c #7D98E8"
block|,
literal|"c+	c #7C98E8"
block|,
literal|"d+	c #7796E4"
block|,
literal|"e+	c #7592E6"
block|,
literal|"f+	c #7390E1"
block|,
literal|"g+	c #698DE0"
block|,
literal|"h+	c #6588DE"
block|,
literal|"i+	c #5E84E0"
block|,
literal|"j+	c #5880DF"
block|,
literal|"k+	c #5479DC"
block|,
literal|"l+	c #4F75DE"
block|,
literal|"m+	c #4A6FDB"
block|,
literal|"n+	c #436AD7"
block|,
literal|"o+	c #3F65D7"
block|,
literal|"p+	c #BAC3BE"
block|,
literal|"q+	c #7B9AE8"
block|,
literal|"r+	c #7B9AEA"
block|,
literal|"s+	c #7A9AEA"
block|,
literal|"t+	c #7B99E9"
block|,
literal|"u+	c #7D97E7"
block|,
literal|"v+	c #7D95E6"
block|,
literal|"w+	c #7D95E5"
block|,
literal|"x+	c #7C95E6"
block|,
literal|"y+	c #7493E3"
block|,
literal|"z+	c #7290DF"
block|,
literal|"A+	c #6C8DDE"
block|,
literal|"B+	c #6B89E1"
block|,
literal|"C+	c #6486DF"
block|,
literal|"D+	c #5D81DF"
block|,
literal|"E+	c #567DDE"
block|,
literal|"F+	c #4F73DE"
block|,
literal|"G+	c #496EDA"
block|,
literal|"H+	c #355ED6"
block|,
literal|"I+	c #345ED5"
block|,
literal|"J+	c #7E95E5"
block|,
literal|"K+	c #7C97E8"
block|,
literal|"L+	c #7C97E7"
block|,
literal|"M+	c #7B94E6"
block|,
literal|"N+	c #7A95E4"
block|,
literal|"O+	c #7695E5"
block|,
literal|"P+	c #7694E4"
block|,
literal|"Q+	c #7994E6"
block|,
literal|"R+	c #7995E4"
block|,
literal|"S+	c #7594E4"
block|,
literal|"T+	c #7391E2"
block|,
literal|"U+	c #6E8EDE"
block|,
literal|"V+	c #6B8ADE"
block|,
literal|"W+	c #6688DF"
block|,
literal|"X+	c #5F84E0"
block|,
literal|"Y+	c #5980E0"
block|,
literal|"Z+	c #4D72DD"
block|,
literal|"`+	c #456BD7"
block|,
literal|" @	c #4168D6"
block|,
literal|".@	c #3C64D7"
block|,
literal|"+@	c #335ED0"
block|,
literal|"@@	c #4659C7"
block|,
literal|"#@	c #7292E1"
block|,
literal|"$@	c #7392E1"
block|,
literal|"%@	c #7492E1"
block|,
literal|"&@	c #718FDF"
block|,
literal|"*@	c #6F8EDE"
block|,
literal|"=@	c #6D8BDE"
block|,
literal|"-@	c #6B88DF"
block|,
literal|";@	c #597FDF"
block|,
literal|">@	c #557ADD"
block|,
literal|",@	c #5176DC"
block|,
literal|"'@	c #4D74DD"
block|,
literal|")@	c #496DDA"
block|,
literal|"!@	c #3860D8"
block|,
literal|"~@	c #7391E0"
block|,
literal|"{@	c #7290DE"
block|,
literal|"]@	c #6D8EDD"
block|,
literal|"^@	c #6D8DDD"
block|,
literal|"/@	c #7190E0"
block|,
literal|"(@	c #6C8DDD"
block|,
literal|"_@	c #6B89DF"
block|,
literal|":@	c #6487E0"
block|,
literal|"<@	c #6085DF"
block|,
literal|"[@	c #5F81DE"
block|,
literal|"}@	c #567EDE"
block|,
literal|"|@	c #4F74D9"
block|,
literal|"1@	c #466BD7"
block|,
literal|"2@	c #4067D5"
block|,
literal|"3@	c #3C63D7"
block|,
literal|"4@	c #335ED3"
block|,
literal|"5@	c #335ED1"
block|,
literal|"6@	c #718EDD"
block|,
literal|"7@	c #728EDD"
block|,
literal|"8@	c #748EDD"
block|,
literal|"9@	c #708EDD"
block|,
literal|"0@	c #6F8DDD"
block|,
literal|"a@	c #6E8DDD"
block|,
literal|"b@	c #6C8ADE"
block|,
literal|"c@	c #6C89DF"
block|,
literal|"d@	c #6988DF"
block|,
literal|"e@	c #6387DF"
block|,
literal|"f@	c #6282DE"
block|,
literal|"g@	c #5681E0"
block|,
literal|"h@	c #577BDD"
block|,
literal|"i@	c #5277DB"
block|,
literal|"j@	c #4D73D8"
block|,
literal|"k@	c #4A70D8"
block|,
literal|"l@	c #436AD5"
block|,
literal|"m@	c #3F66D6"
block|,
literal|"n@	c #3C63D8"
block|,
literal|"o@	c #3960D8"
block|,
literal|"p@	c #3860D7"
block|,
literal|"q@	c #335ED2"
block|,
literal|"r@	c #345ED4"
block|,
literal|"s@	c #6C88DF"
block|,
literal|"t@	c #6D88DF"
block|,
literal|"u@	c #6B89DE"
block|,
literal|"v@	c #6888DF"
block|,
literal|"w@	c #6587E0"
block|,
literal|"x@	c #6989DF"
block|,
literal|"y@	c #6687E0"
block|,
literal|"z@	c #6287E0"
block|,
literal|"A@	c #6281DD"
block|,
literal|"B@	c #5881E0"
block|,
literal|"C@	c #557ADB"
block|,
literal|"D@	c #5176D9"
block|,
literal|"E@	c #4E75D7"
block|,
literal|"F@	c #4A6FD8"
block|,
literal|"G@	c #476BD6"
block|,
literal|"H@	c #4067D6"
block|,
literal|"I@	c #3C62D7"
block|,
literal|"J@	c #3C60D4"
block|,
literal|"K@	c #365ED1"
block|,
literal|"L@	c #345ED3"
block|,
literal|"M@	c #6786DF"
block|,
literal|"N@	c #5F85E0"
block|,
literal|"O@	c #5F86E0"
block|,
literal|"P@	c #6186DF"
block|,
literal|"Q@	c #6286E0"
block|,
literal|"R@	c #6284DF"
block|,
literal|"S@	c #6384DF"
block|,
literal|"T@	c #5B7FDE"
block|,
literal|"U@	c #577DDC"
block|,
literal|"V@	c #557BDA"
block|,
literal|"W@	c #5278D8"
block|,
literal|"X@	c #4E76D6"
block|,
literal|"Y@	c #4C72D7"
block|,
literal|"Z@	c #486DD8"
block|,
literal|"`@	c #4469D6"
block|,
literal|" #	c #3F62D2"
block|,
literal|".#	c #3C60CF"
block|,
literal|"+#	c #345ECF"
block|,
literal|"@#	c #6086DF"
block|,
literal|"##	c #6085E0"
block|,
literal|"$#	c #6285DF"
block|,
literal|"%#	c #6383DD"
block|,
literal|"&#	c #6481DC"
block|,
literal|"*#	c #6380DD"
block|,
literal|"=#	c #6183DE"
block|,
literal|"-#	c #6083DD"
block|,
literal|";#	c #6081DC"
block|,
literal|">#	c #6080DD"
block|,
literal|",#	c #6083DE"
block|,
literal|"'#	c #6181DC"
block|,
literal|")#	c #6280DD"
block|,
literal|"!#	c #577EDB"
block|,
literal|"~#	c #557CD7"
block|,
literal|"{#	c #4F76D6"
block|,
literal|"]#	c #4E74D7"
block|,
literal|"^#	c #466CD7"
block|,
literal|"/#	c #3B64D6"
block|,
literal|"(#	c #4261CD"
block|,
literal|"_#	c #375FCE"
block|,
literal|":#	c #5A7FD8"
block|,
literal|"<#	c #6281DA"
block|,
literal|"[#	c #5F81D8"
block|,
literal|"}#	c #5C80D8"
block|,
literal|"|#	c #557DD7"
block|,
literal|"1#	c #577ED8"
block|,
literal|"2#	c #567ED7"
block|,
literal|"3#	c #587DD8"
block|,
literal|"4#	c #577DD8"
block|,
literal|"5#	c #587ED8"
block|,
literal|"6#	c #567DD8"
block|,
literal|"7#	c #5379D9"
block|,
literal|"8#	c #5177D7"
block|,
literal|"9#	c #4D74D5"
block|,
literal|"0#	c #486ED9"
block|,
literal|"a#	c #4068D4"
block|,
literal|"b#	c #3D65D2"
block|,
literal|"c#	c #4361CC"
block|,
literal|"d#	c #345ECE"
block|,
literal|"e#	c #325DCF"
block|,
literal|"f#	c #2C5AD1"
block|,
literal|"g#	c #3959C5"
block|,
literal|"h#	c #547BD8"
block|,
literal|"i#	c #567DD7"
block|,
literal|"j#	c #557BD8"
block|,
literal|"k#	c #5279D9"
block|,
literal|"l#	c #5278D9"
block|,
literal|"m#	c #4D74D6"
block|,
literal|"n#	c #4B71D8"
block|,
literal|"o#	c #496CD8"
block|,
literal|"p#	c #4669D7"
block|,
literal|"q#	c #3D66D3"
block|,
literal|"r#	c #3F62CF"
block|,
literal|"s#	c #4260CC"
block|,
literal|"t#	c #5379D8"
block|,
literal|"u#	c #4E75D4"
block|,
literal|"v#	c #4C73D7"
block|,
literal|"w#	c #476CD7"
block|,
literal|"x#	c #4869D0"
block|,
literal|"y#	c #4067D2"
block|,
literal|"z#	c #3D64D1"
block|,
literal|"A#	c #4261CC"
block|,
literal|"B#	c #395FCE"
block|,
literal|"C#	c #4F75D3"
block|,
literal|"D#	c #5074D2"
block|,
literal|"E#	c #5174D1"
block|,
literal|"F#	c #5175D1"
block|,
literal|"G#	c #4F74D3"
block|,
literal|"H#	c #4C73D5"
block|,
literal|"I#	c #4C73D4"
block|,
literal|"J#	c #4A72D1"
block|,
literal|"K#	c #4B70CF"
block|,
literal|"L#	c #506CCC"
block|,
literal|"M#	c #4D6BCE"
block|,
literal|"N#	c #4167D0"
block|,
literal|"O#	c #3D65D1"
block|,
literal|"P#	c #3F63CF"
block|,
literal|"Q#	c #3B5FCD"
block|,
literal|"R#	c #3159CD"
block|,
literal|"S#	c #4971D0"
block|,
literal|"T#	c #4870CF"
block|,
literal|"U#	c #4C6FCF"
block|,
literal|"V#	c #4E6CCE"
block|,
literal|"W#	c #4E6BCE"
block|,
literal|"X#	c #4769CF"
block|,
literal|"Y#	c #3D66D0"
block|,
literal|"Z#	c #3C65D1"
block|,
literal|"`#	c #4062CE"
block|,
literal|" $	c #3D5FCD"
block|,
literal|".$	c #365FCF"
block|,
literal|"+$	c #325DCD"
block|,
literal|"@$	c #2D5AD0"
block|,
literal|"#$	c #3859C5"
block|,
literal|"$$	c #355FCF"
block|,
literal|"%$	c #355ECF"
block|,
literal|"&$	c #335ECE"
block|,
literal|"*$	c #305CCD"
block|,
literal|"=$	c #2B5ACE"
block|,
literal|"-$	c #3056C9"
block|,
literal|";$	c #2553C6"
block|,
literal|">$	c #2153C8"
block|,
literal|",$	c #1F4FC7"
block|,
literal|"'$	c #274CC5"
block|,
literal|")$	c #214AC7"
block|,
literal|"!$	c #1C48C8"
block|,
literal|"~$	c #1244C9"
block|,
literal|"{$	c #1043C9"
block|,
literal|"]$	c #1144C9"
block|,
literal|"^$	c #2A45BE"
block|,
literal|"/$	c #2744B5"
block|,
literal|"($	c #1D49C0"
block|,
literal|"_$	c #2B58DE"
block|,
literal|":$	c #002D94"
block|,
literal|"<$	c #2B59CA"
block|,
literal|"[$	c #2A59CA"
block|,
literal|"}$	c #2E57C8"
block|,
literal|"|$	c #3255C6"
block|,
literal|"1$	c #3355C5"
block|,
literal|"2$	c #1C52C8"
block|,
literal|"3$	c #1D50C7"
block|,
literal|"4$	c #234FC6"
block|,
literal|"5$	c #264CC5"
block|,
literal|"6$	c #1D48C7"
block|,
literal|"7$	c #1245C8"
block|,
literal|"8$	c #1F44C2"
block|,
literal|"9$	c #2945BE"
block|,
literal|"0$	c #2A45BD"
block|,
literal|"a$	c #2040BF"
block|,
literal|"b$	c #3156C7"
block|,
literal|"c$	c #3056C7"
block|,
literal|"d$	c #3354C5"
block|,
literal|"e$	c #3355C6"
block|,
literal|"f$	c #3255C5"
block|,
literal|"g$	c #3254C5"
block|,
literal|"h$	c #1952C7"
block|,
literal|"i$	c #1951C8"
block|,
literal|"j$	c #2050C7"
block|,
literal|"k$	c #274CC4"
block|,
literal|"l$	c #244CC6"
block|,
literal|"m$	c #1F49C7"
block|,
literal|"n$	c #1E47C5"
block|,
literal|"o$	c #2045C3"
block|,
literal|"p$	c #1C44BF"
block|,
literal|"q$	c #2045BE"
block|,
literal|"r$	c #2040B8"
block|,
literal|"s$	c #3254C6"
block|,
literal|"t$	c #3055C6"
block|,
literal|"u$	c #2A54C6"
block|,
literal|"v$	c #2353C7"
block|,
literal|"w$	c #3054C5"
block|,
literal|"x$	c #2F55C5"
block|,
literal|"y$	c #2A54C5"
block|,
literal|"z$	c #2553C5"
block|,
literal|"A$	c #2F54C5"
block|,
literal|"B$	c #3155C6"
block|,
literal|"C$	c #2A54C7"
block|,
literal|"D$	c #1A52C8"
block|,
literal|"E$	c #204FC2"
block|,
literal|"F$	c #264DC6"
block|,
literal|"G$	c #234BC5"
block|,
literal|"H$	c #1D48C1"
block|,
literal|"I$	c #1E48BF"
block|,
literal|"J$	c #2646BE"
block|,
literal|"K$	c #2B45BD"
block|,
literal|"L$	c #1E43BE"
block|,
literal|"M$	c #2643BF"
block|,
literal|"N$	c #2243BF"
block|,
literal|"O$	c #3049BC"
block|,
literal|"P$	c #1E50BE"
block|,
literal|"Q$	c #1D50C0"
block|,
literal|"R$	c #1D50BF"
block|,
literal|"S$	c #1852C1"
block|,
literal|"T$	c #1E51C0"
block|,
literal|"U$	c #214FBF"
block|,
literal|"V$	c #2050C0"
block|,
literal|"W$	c #244EBF"
block|,
literal|"X$	c #2151C0"
block|,
literal|"Y$	c #234FBF"
block|,
literal|"Z$	c #2350C0"
block|,
literal|"`$	c #2351C0"
block|,
literal|" %	c #244FBF"
block|,
literal|".%	c #2250C0"
block|,
literal|"+%	c #2051C0"
block|,
literal|"@%	c #1E50C0"
block|,
literal|"#%	c #244DBE"
block|,
literal|"$%	c #274DBF"
block|,
literal|"%%	c #244CBF"
block|,
literal|"&%	c #1C48C0"
block|,
literal|"*%	c #2247BF"
block|,
literal|"=%	c #2C44BD"
block|,
literal|"-%	c #1C44BE"
block|,
literal|";%	c #1444BF"
block|,
literal|">%	c #1841BF"
block|,
literal|",%	c #1F40BF"
block|,
literal|"'%	c #254DBE"
block|,
literal|")%	c #224FBE"
block|,
literal|"!%	c #224FBF"
block|,
literal|"~%	c #234EBF"
block|,
literal|"{%	c #254CBD"
block|,
literal|"]%	c #244DBD"
block|,
literal|"^%	c #244CBD"
block|,
literal|"/%	c #264DBE"
block|,
literal|"(%	c #264DBD"
block|,
literal|"_%	c #214BC0"
block|,
literal|":%	c #1D48C0"
block|,
literal|"<%	c #2347BF"
block|,
literal|"[%	c #2B44BD"
block|,
literal|"}%	c #2444BE"
block|,
literal|"|%	c #0F42BF"
block|,
literal|"1%	c #0641BF"
block|,
literal|"2%	c #0F41BF"
block|,
literal|"3%	c #1741BE"
block|,
literal|"4%	c #1F40BD"
block|,
literal|"5%	c #234BBF"
block|,
literal|"6%	c #234CBE"
block|,
literal|"7%	c #214BBE"
block|,
literal|"8%	c #244CBE"
block|,
literal|"9%	c #214ABE"
block|,
literal|"0%	c #214ABF"
block|,
literal|"a%	c #1F48C0"
block|,
literal|"b%	c #2746BE"
block|,
literal|"c%	c #1F43BE"
block|,
literal|"d%	c #0941BE"
block|,
literal|"e%	c #0342BA"
block|,
literal|"f%	c #0242BC"
block|,
literal|"g%	c #1241B8"
block|,
literal|"h%	c #1F40B7"
block|,
literal|"i%	c #2F41AC"
block|,
literal|"j%	c #2644AE"
block|,
literal|"k%	c #2D49B4"
block|,
literal|"l%	c #2649B6"
block|,
literal|"m%	c #2949B7"
block|,
literal|"n%	c #2849B5"
block|,
literal|"o%	c #2149B8"
block|,
literal|"p%	c #1E49B9"
block|,
literal|"q%	c #1F48B8"
block|,
literal|"r%	c #1F49B9"
block|,
literal|"s%	c #2545B6"
block|,
literal|"t%	c #2744B7"
block|,
literal|"u%	c #2844B7"
block|,
literal|"v%	c #2043B8"
block|,
literal|"w%	c #1241B7"
block|,
literal|"x%	c #1340B8"
block|,
literal|"y%	c #0D41B8"
block|,
literal|"z%	c #1941B8"
block|,
literal|"A%	c #1F40B8"
block|,
literal|"B%	c #203FB8"
block|,
literal|"C%	c #2549B5"
block|,
literal|"D%	c #2648B6"
block|,
literal|"E%	c #2547B7"
block|,
literal|"F%	c #2248B7"
block|,
literal|"G%	c #2048B7"
block|,
literal|"H%	c #2346B6"
block|,
literal|"I%	c #2146B6"
block|,
literal|"J%	c #2247B7"
block|,
literal|"K%	c #2148B7"
block|,
literal|"L%	c #2743B4"
block|,
literal|"M%	c #2643B5"
block|,
literal|"N%	c #2542B6"
block|,
literal|"O%	c #1D42B7"
block|,
literal|"P%	c #0E42B8"
block|,
literal|"Q%	c #0C41B8"
block|,
literal|"R%	c #1341B8"
block|,
literal|"S%	c #1740B8"
block|,
literal|"T%	c #1C41B8"
block|,
literal|"U%	c #1F40B1"
block|,
literal|"V%	c #2644B5"
block|,
literal|"W%	c #2544B5"
block|,
literal|"X%	c #2544B4"
block|,
literal|"Y%	c #2444B5"
block|,
literal|"Z%	c #2444B4"
block|,
literal|"`%	c #2744B4"
block|,
literal|"&	c #2241B7"
block|,
literal|".&	c #1D41B8"
block|,
literal|"+&	c #0B42B8"
block|,
literal|"@&	c #0942B8"
block|,
literal|"#&	c #0C42B8"
block|,
literal|"$&	c #0F41B8"
block|,
literal|"%&	c #1641B8"
block|,
literal|"&&	c #2442B5"
block|,
literal|"*&	c #2543B3"
block|,
literal|"=&	c #2342B2"
block|,
literal|"-&	c #2341B4"
block|,
literal|";&	c #2141B3"
block|,
literal|">&	c #2141B5"
block|,
literal|",&	c #2140B5"
block|,
literal|"'&	c #2040B5"
block|,
literal|")&	c #1C40B7"
block|,
literal|"!&	c #1B41B3"
block|,
literal|"~&	c #0142B6"
block|,
literal|"{&	c #0E41B7"
block|,
literal|"]&	c #1141B7"
block|,
literal|"^&	c #1440B2"
block|,
literal|"/&	c #113FB0"
block|,
literal|"(&	c #1440B0"
block|,
literal|"_&	c #213EAF"
block|,
literal|":&	c #233DAE"
block|,
literal|"<&	c #223EAF"
block|,
literal|"[&	c #1E40B1"
block|,
literal|"}&	c #173EAD"
block|,
literal|"|&	c #1440AF"
block|,
literal|"1&	c #0D40AF"
block|,
literal|"2&	c #0941B0"
block|,
literal|"3&	c #0D3FAE"
block|,
literal|"4&	c #1B3CAC"
block|,
literal|"5&	c #233CAD"
block|,
literal|"6&	c #203FB0"
block|,
literal|"7&	c #273BAD"
block|,
literal|"8&	c #1D40B0"
block|,
literal|"9&	c #2040B1"
block|,
literal|"0&	c #1E40B0"
block|,
literal|"a&	c #1C40B0"
block|,
literal|"b&	c #1B3DAC"
block|,
literal|"c&	c #143DAC"
block|,
literal|"d&	c #193DAD"
block|,
literal|"e&	c #1B3DAD"
block|,
literal|"f&	c #173DAD"
block|,
literal|"g&	c #153DAC"
block|,
literal|"h&	c #1C3CAC"
block|,
literal|"i&	c #243CAD"
block|,
literal|"j&	c #213FB0"
block|,
literal|"k&	c #263BAA"
block|,
literal|"l&	c #253CAE"
block|,
literal|"m&	c #273AAC"
block|,
literal|"n&	c #273AAD"
block|,
literal|"o&	c #253BAD"
block|,
literal|"p&	c #1D3CAC"
block|,
literal|"q&	c #243BAD"
block|,
literal|"r&	c #1E3CAC"
block|,
literal|"s&	c #263BAD"
block|,
literal|"t&	c #1A3DAC"
block|,
literal|"u&	c #143DAB"
block|,
literal|"v&	c #163DAC"
block|,
literal|"w&	c #1A3CAC"
block|,
literal|"x&	c #1F3CAD"
block|,
literal|"y&	c #263BAB"
block|,
literal|"z&	c #263BA6"
block|,
literal|"A&	c #1E42A4"
block|,
literal|"B&	c #2D40A5"
block|,
literal|"C&	c #253BA6"
block|,
literal|"D&	c #253CA7"
block|,
literal|"E&	c #263AA5"
block|,
literal|"F&	c #253BA7"
block|,
literal|"G&	c #1E3BA6"
block|,
literal|"H&	c #193DA6"
block|,
literal|"I&	c #173DA5"
block|,
literal|"J&	c #143DA6"
block|,
literal|"K&	c #1A3DA7"
block|,
literal|"L&	c #133DA6"
block|,
literal|"M&	c #123DA5"
block|,
literal|"N&	c #1A3CA7"
block|,
literal|"O&	c #243BA6"
block|,
literal|"P&	c #263AA7"
block|,
literal|"Q&	c #273BA7"
block|,
literal|"R&	c #263AA6"
block|,
literal|"S&	c #223BA6"
block|,
literal|"T&	c #1D3BA6"
block|,
literal|"U&	c #173CA6"
block|,
literal|"V&	c #133DA5"
block|,
literal|"W&	c #1B3DA6"
block|,
literal|"X&	c #193DA5"
block|,
literal|"Y&	c #123DA4"
block|,
literal|"Z&	c #163CA5"
block|,
literal|"`&	c #213CA6"
block|,
literal|" *	c #273BA8"
block|,
literal|".*	c #263BA7"
block|,
literal|"+*	c #253BA5"
block|,
literal|"@*	c #263BA5"
block|,
literal|"#*	c #1C3BA6"
block|,
literal|"$*	c #1B3BA9"
block|,
literal|"%*	c #133BA8"
block|,
literal|"&*	c #0A3BA7"
block|,
literal|"**	c #083AA6"
block|,
literal|"=*	c #123CA5"
block|,
literal|"-*	c #0839A8"
block|,
literal|";*	c #0239A6"
block|,
literal|">*	c #123AA8"
block|,
literal|",*	c #1F49C8"
block|,
literal|"'*	c #2F4DA4"
block|,
literal|")*	c #2E4DA3"
block|,
literal|"!*	c #384CA4"
block|,
literal|"~*	c #3C4DA7"
block|,
literal|"{*	c #394EA7"
block|,
literal|"]*	c #3B4CA5"
block|,
literal|"^*	c #3C52B1"
block|,
literal|"/*	c #3551A8"
block|,
literal|"(*	c #3759BE"
block|,
literal|"_*	c #4161C7"
block|,
literal|":*	c #0033A8"
block|,
literal|"<*	c #596FA9"
block|,
literal|"[*	c #2F4DA3"
block|,
literal|"}*	c #2D4BA5"
block|,
literal|"|*	c #2E4CA4"
block|,
literal|"1*	c #2C4AA5"
block|,
literal|"2*	c #2D4BA4"
block|,
literal|"3*	c #354DA4"
block|,
literal|"4*	c #3A4BA4"
block|,
literal|"5*	c #394DA6"
block|,
literal|"6*	c #4056AD"
block|,
literal|"7*	c #445BBB"
block|,
literal|"8*	c #B5B7B4"
block|,
literal|"9*	c #1B2F85"
block|,
literal|"0*	c #242F79"
block|,
literal|"a*	c #B5B5B5"
block|,
literal|"b*	c #B5B2B6"
block|,
literal|"c*	c #C0C3C3"
block|,
literal|"d*	c #E3E3E4"
block|,
literal|"e*	c #EBEDEA"
block|,
literal|". + @ + # $ %& # $ %& # $ %& # $ %&& * = - ;> , ' ) ! ~ { { { { { { { ] ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ / / / ( / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / _ _ / / : /< [ } | | | 1 1 "
block|,
literal|"2 2 2 2 3 2 4 @ 3 2 4 @ 3 2 4 @ 3 2 4 @ # 5 6 7 8 ;> 9 0 a b c d e f { { { ] ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ( ( ( ( ( ( ( ( ( / / / / / / / / / / / / / / / / / _ _ _ _ _ _ _ _ _ _ _ g g _ / / : : : h i } 1 | 1 "
block|,
literal|"j k l m n o p q n o p q r s t u v w x y z A B C D E F G H I J K L M N O P O O Q R S T T T T T T T T T T T T T T T T T T U U U U U U U U U U U U U U U U U U U U U U U U U U U U V V V U U W X : [ Y | | "
block|,
literal|"Z `  . ...+.@.#...+.@.#.Z $.%.&.Z $.*.=.-.;.>.,.'.).!.~.{.].^./.(._.:.<.[.}.|.1.2.3.4.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.6.7.8.: h Y } 1 "
block|,
literal|"9.0.a.b.c.c.d.e.f.c.d.e.f.c.d.e.f.c.d.e.g.h.i.j.k.l.m.n.o.p.q.r.s.s.t.u.u.v.w.x.4.4.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.y.5.7.6.: / z.A.} "
block|,
literal|"-.B.C.D.-.E.g.F.G.E.g.F.G.E.g.F.G.E.g.F.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.V.U.U.W.X.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Z.y.Y.7.7.: : `.z.} "
block|,
literal|" +.+g.;.++F.@+#+++F.@+#+++F.@+#+++F.@+#+$+%+&+*+=+-+;+>+,+'+)+!+~+{+]+{+{+4.4.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.Y.Y.5.5.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Z.Z.Z.y.y.5.7.7.: : ^+z.Y "
block|,
literal|"/+(+_+#+H.H.>.:+H.H.>.:+H.H.>.:+H.H.>.<+[+}+*+|+1+2+3+4+5+6+7+{+{+4.4.4.4.4.4.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.Y.Y.Y.Y.Y.Y.Y.5.Y.Y.Y.Y.Y.Y.Y.Y.5.Y.Y.5.5.5.5.Y.Y.Y.Y.Y.Y.Z.Z.Z.Z.y.y.y.y.y.y.7.7.: : ^+i } "
block|,
literal|"8+9+0+0+a+0+0+b+a+0+0+b+a+0+0+b+a+0+0+c+d+e+f+g+h+i+j+k+l+m+n+o+4.4.4.4.5.5.5.5.5.5.Y.Y.5.5.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Y.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Y.Y.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.7.7.: : p+z.Y "
block|,
literal|"q+r+r+s+t+u+v+w+t+u+v+w+t+u+v+w+t+u+x+&+y+z+A+B+C+D+E+5+F+G+~+4.4.4.4.5.5.5.5.5.H+Y.Y.Y.Y.Y.Y.Y.Y.I+Y.Z.Y.Y.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.7.7.: : `.z.A."
block|,
literal|"J+v+K+L+M+N+O+P+Q+R+O+P+Q+R+O+P+Q+R+O+S+T+U+V+W+X+Y+P.T Z+`+ @4.4..@5.5.5.5.5.5.Y.Y.Y.I+I+I+I+I++@+@Z.Z.Y.Y.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.@@Z.7.7.: : p+z.Y "
block|,
literal|"#@$@$@%@%@$@#@&@#@#@#@&@#@#@#@&@#@#@#@*@=@-@;+i+;@>@,@'@)@ @4.X.5.5.H+Y.Y.Y.!@Y.Y.I++@+@Z.Z.+@Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.y.Z.6.6.: : `.z.A."
block|,
literal|"#@$@~@~@~@{@]@^@/@{@]@^@/@{@]@^@/@{@]@(@_@:@<@[@}@k+|@V 1@2@3@5.5.5.Y.Y.I+4@I+5@+@Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.y.Z.6.6.: : p+z.Y "
block|,
literal|"6@7@8@9@0@a@b@c@a@a@b@c@a@a@b@c@a@a@b@d@e@<@f@g@h@i@j@k@l@m@n@o@o@p@Y.I+q@q@r@+@Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.y.Z.6.6.: : `.z.A."
block|,
literal|"s@t@u@_@_@v@w@w@x@v@w@w@x@v@y@y@x@v@:@z@A@B@P C@D@E@F@G@H@I@J@K@5@+@+@+@r@I+L@Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.@@Z.W W : : p+z.Y "
block|,
literal|"M@N@O@P@C+Q@Q@R@C+;+Q@R@C+;+;+S@C+Q@Q@R@T@U@V@W@X@Y@Z@`@4. #.#+#Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.8.Z.Z.Z.Z.8.8.Z.Z.y.@@@@W W : : `.z.A."
block|,
literal|"@#O@O@##$#%#&#*#=#-#;#>#,#-#;#>#,#-#'#)#!#~#W@{#]#k@^#H@/#(#_#Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.8.8.Z.Z.Z.Z.Z.Z.Z.8.8.8.8.8.8.8.8.8.8.8.Z.Z.y.y.@@W W : : p+z.Y "
block|,
literal|":#<#[#}#|#1#2#3#4#5#1#4#4#1#1#4#4#1#1#6#7#8#9#V 0#`+a#b#c#d#e#Z.Z.Z.f#Z.Z.Z.f#f#f#f#f#f#f#f#f#f#g#g#g#g#g#8.8.8.8.8.8.8.8.8.g#g#g#g#8.g#8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.y.y.@@W W : : `.z.A."
block|,
literal|"h#2#i#6#|#j#7#k#|#j#7#7#|#j#7#7#|#j#7#l#8#m#n#n#o#p#q#r#s#d#e#Z.Z.Z.f#f#f#f#Z.f#f#g#g#g#g#g#g#g#g#g#g#g#g#8.8.8.g#g#8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.8.y.y.y.y.8.8.8.y.y.@@W W : : p+z.Y "
block|,
literal|"l#7#7#l#7#7#7#W@7#7#7#W@7#7#k#W@t#7#7#W@u#v#n#w#x#y#z#A#B#Z.e#f#f#Z.f#f#f#Z.Z.g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#8.8.8.g#g#g#g#8.8.g#g#g#g#g#g#8.8.g#8.8.y.8.8.y.y.8.y.y.y.y.@@W W : : `.z.A."
block|,
literal|"C#D#E#F#G#H#I#J#G#H#I#J#G#H#I#J#G#H#I#J#K#L#M#N#O#P#s#Q#+#f#R#f#f#f#f#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#@@@@y.y.@@@@y.y.W W : : p+z.Y "
block|,
literal|"S#S#S#S#S#T#S#U#S#T#S#U#S#T#S#U#S#T#S#U#V#W#X#Y#Z#`# $.$+$@$#$g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#g#@@@@@@@@@@@@@@@@@@y.y.W W : : `.z.A."
block|,
literal|"+$Z..$$$%$+$&$*$%$+$&$*$%$+$&$*$%$+$&$*$=$-$;$>$,$'$)$!$~${$]$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$/$/$/$/$($($_$_$:$:$p+z.Y "
block|,
literal|"<$<$<$<$<$[$}$|$<$[$}$|$<$[$}$|$<$[$}$|$1$2$3$4$5$)$6$7$8$9$0$a$a$a$a$a$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$/$/$/$^$^$^$/$/$/$/$/$/$/$/$/$/$/$/$/$/$($($_$_$:$:$`.z.A."
block|,
literal|"b$c$c$c$d$e$e$f$g$|$|$1$d$e$e$1$d$e$e$1$h$i$j$k$l$m$n$o$p$9$q$a$a$a$a$a$a$a$a$^$a$a$^$^$^$^$^$^$a$r$r$r$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$^$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$($($_$_$:$:$p+z.Y "
block|,
literal|"e$1$s$s$1$t$u$v$w$x$y$z$A$x$u$v$g$B$C$>$D$E$F$G$H$I$J$K$L$M$N$a$a$a$a$a$a$a$a$^$r$r$a$^$^$^$a$r$r$r$r$r$/$^$r$^$^$^$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$O$($_$_$:$:$`.z.A."
block|,
literal|"P$Q$R$S$T$U$V$W$X$Y$Z$W$`$ %.%W$+%U$@%#%$%%%&%($*%=%-%;%>%>%,%r$r$r$r$r$a$a$a$/$/$/$r$r$r$r$r$r$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$O$($_$_$:$:$p+z.Y "
block|,
literal|"'%W$)%!%~%{%'%]%~%^%'%]%~%^%'%]%~%^%/%(%_%&%:%<%[%}%|%1%2%3%4%r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$/$r$/$/$r$r$r$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$/$r$/$/$/$/$/$O$($_$_$:$:$`.z.A."
block|,
literal|"5%6%'%'%6%7%8%9%6%7%8%9%6%7%8%9%6%7%8%0%&%a%<%b%[%c%d%e%f%g%h%r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$/$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$/$/$/$/$/$/$/$/$/$/$/$/$/$/$r$r$/$/$r$r$/$r$i%j%O$($_$_$:$:$p+z.Y "
block|,
literal|"k%l%m%n%o%o%p%q%o%o%r%q%o%o%r%q%o%o%p%q%s%t%/$u%v%w%x%y%z%A%B%r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$/$/$/$/$/$/$/$r$r$i%i%i%r$r$i%i%i%i%i%i%i%i%i%i%i%i%r$/$/$j%j%j%j%j%j%j%j%j%O$($_$_$:$:$`.z.A."
block|,
literal|"C%D%E%F%G%H%I%J%K%H%I%J%K%H%I%J%K%H%I%J%L%M%N%O%P%Q%R%S%T%A%B%r$r$r$r$r$r$r$r$r$r$r$r$r$r$r$U%U%r$r$i%i%/$/$r$r$/$/$/$/$r$r$i%i%i%i%i%i%i%i%i%i%i%i%i%i%j%i%j%j%j%j%j%j%j%j%j%j%j%j%j%O$($_$_$:$:$p+z.Y "
block|,
literal|"/$/$/$/$V%V%W%X%W%Y%Y%Z%W%W%Y%Z%W%W%W%`%`%&B%.&+&@&#&$&%&A%B%r$r$r$U%U%U%U%r$U%U%U%U%U%U%U%U%U%U%i%i%i%i%i%i%i%i%/$/$/$i%i%i%i%i%i%i%i%i%j%j%j%j%i%i%i%i%i%j%j%j%i%i%j%j%j%j%j%j%j%j%O$($_$_$:$:$`.z.A."
block|,
literal|"&&*&=&-&=&;&>&,&=&;&>&,&=&;&>&,&=&;&>&'&)&!&~&{&]&^&/&(&_&:&<&U%U%U%U%U%U%U%U%U%U%U%U%U%i%i%U%U%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%O$($_$_$:$:$p+z.Y "
block|,
literal|"U%U%U%U%U%U%U%U%U%U%U%U%U%U%U%U%U%U%U%U%[&}&|&1&2&3&4&5&_&6&U%7&U%U%U%U%U%U%U%U%i%i%U%U%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%O$O$_$_$:$:$`.z.A."
block|,
literal|"U%U%U%U%U%U%[&8&U%9&[&0&U%9&[&0&U%9&[&a&:&b&c&d&e&f&g&h&i&<&j&U%U%U%U%U%U%U%U%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%i%O$O$_$_$:$:$p+z.Y "
block|,
literal|"k&l&m&7&7&n&o&p&7&n&q&r&s&s&q&r&s&n&o&p&t&u&u&g&v&w&x&q&n&m&y&7&7&U%U%7&z&7&z&U%A&B&i%i%B&B&i%i%B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&i%B&O$O$_$_$:$:$`.z.A."
block|,
literal|"C&D&E&z&z&E&F&G&z&E&F&G&z&E&F&G&z&E&F&G&H&I&J&K&L&M&N&O&P&Q&z&z&z&z&z&z&z&z&z&z&z&z&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&O$O$_$_$:$:$p+z.Y "
block|,
literal|"z&z&z&z&R&S&T&U&R&S&T&U&R&S&T&U&R&S&T&U&V&V&W&X&Y&Z&`&C&R&z&z&z&z&z&z&z&z&z&z&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&O$O$_$_$:$:$^+z.A."
block|,
literal|"z& *.*+*@*#*$*%*@*#*$*%*@*#*$*%*@*#*$*%*&***=*-*;*>*k&P&+*z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&z&B&B&B&B&z&z&z&B&B&B&z&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&B&/$O$O$@@_$,*:$/ ^+z.Y "
block|,
literal|"'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*'*)*'*!*~*{*]*^*^*^*/*/*/*/*/*/*/*^*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*^*/*/*/*/*/*h h ^*h h ^*^*h h ^*^*^*^*h ^*^*^*^*h ^*^*^*(*_*_*_*_*_$:*:$<*`.z.} "
block|,
literal|"'*'*'*'*'*[*}*|*'*[*}*|*'*[*}*|*'*[*}*|*1*1*2*}*}*2*[*)*3*4*5*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*h h h h h h h h h h h h h h h h 6*7*_*_*_*_*^*:*:$: 8*z.Y } "
block|,
literal|"9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*(<*8*^+z.Y } 1 "
block|,
literal|"a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*8*b*8*b*8*b*8*b*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*b*8*8*8*8*b*8*`.z.A.Y | | "
block|,
literal|"c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*c*p+`.p+`.p+`.p+`.`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+`.p+^+`.^+^+z.z.Y Y | | 1 "
block|,
literal|"d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*d*A.Y A.Y A.Y A.Y Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y A.Y } } | | | | 1 1 "
block|,
literal|"e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*} | } | } | } | | } | } | } | } | } | } | } | } | } | } | } | } | } | } | } | } | } | } | } | } | } | } | } | } | } | | | | 1 | | | 1 1 1 "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|tabmiddle_xpm
specifier|static
name|char
modifier|*
name|tabmiddle_xpm
index|[]
init|=
block|{
literal|"33 42 32 1"
block|,
literal|" 	c None"
block|,
literal|".	c #CECFEF"
block|,
literal|"+	c #CECBE7"
block|,
literal|"@	c #C6C7E7"
block|,
literal|"#	c #C6CBE7"
block|,
literal|"$	c #BDBEDE"
block|,
literal|"%	c #BDC3DE"
block|,
literal|"&	c #CECBEF"
block|,
literal|"*	c #B5B6D6"
block|,
literal|"=	c #ADAECE"
block|,
literal|"-	c #ADB2CE"
block|,
literal|";	c #BDBAD6"
block|,
literal|">	c #B5BAD6"
block|,
literal|",	c #C6C3DE"
block|,
literal|"'	c #ADAAC6"
block|,
literal|")	c #B5B2CE"
block|,
literal|"!	c #B5B6CE"
block|,
literal|"~	c #A5A2BD"
block|,
literal|"{	c #A5A6BD"
block|,
literal|"]	c #9C9EB5"
block|,
literal|"^	c #9CA2BD"
block|,
literal|"/	c #ADAEC6"
block|,
literal|"(	c #C6C3E7"
block|,
literal|"_	c #9C9AB5"
block|,
literal|":	c #A5A6C6"
block|,
literal|"<	c #949AAD"
block|,
literal|"[	c #A5AAC6"
block|,
literal|"}	c #9496AD"
block|,
literal|"|	c #BDBADE"
block|,
literal|"1	c #BDBED6"
block|,
literal|"2	c #9CA2B5"
block|,
literal|"3	c #A5AABD"
block|,
literal|"..........................+@.#.#."
block|,
literal|"........................$@%&#.#.."
block|,
literal|"......................**$$@@&#.#."
block|,
literal|".....................=-;>,%+@.#.."
block|,
literal|"....................'')!$$@@&#.#."
block|,
literal|"...................~{=)$$@@&#.#.."
block|,
literal|"..................]^'/;;(%&#.#..."
block|,
literal|"................._]:/*>,%&@.#.#.."
block|,
literal|".................<{[)!$%+@.#.#..."
block|,
literal|"................}~{=!$%@@.#......"
block|,
literal|"................]^/-|$@@.#......."
block|,
literal|"................]'/*;@@&#........"
block|,
literal|"...............<~[)>,%&#.#......."
block|,
literal|"...............]~=)$%+#.#........"
block|,
literal|"...............]'/;1@@.#........."
block|,
literal|"...............~{)*,%&#.........."
block|,
literal|"...............2/-$$@#..........."
block|,
literal|"...............~[*>(@&#.........."
block|,
literal|"...............^=)$%+#..........."
block|,
literal|"...............{'*>(@.#.........."
block|,
literal|"...............^=)$%+#..........."
block|,
literal|"...............{'*>(@.#.........."
block|,
literal|"...............^=)$%+#..........."
block|,
literal|"...............{'*>(@.#.........."
block|,
literal|"...............^=)$%+#..........."
block|,
literal|"...............{'*>(@.#.........."
block|,
literal|"...............^=)$%+#..........."
block|,
literal|"...............{'*>@@.#.........."
block|,
literal|"...............^=!$%&#..........."
block|,
literal|"...............{/*;@@.#.........."
block|,
literal|"...............{)!$%&#..........."
block|,
literal|"..............]'/;1@@.#.........."
block|,
literal|"..............23)>,%&#..........."
block|,
literal|"..............~=-$$@@.#.........."
block|,
literal|".............]{/*;@@.#..........."
block|,
literal|"............<^[)>,%&#............"
block|,
literal|"............]{/!$%@@.#..........."
block|,
literal|"..........]^[-!$%@@.#............"
block|,
literal|".........]^3/!>$@@.#............."
block|,
literal|".......<]^3/!>$@@&#.............."
block|,
literal|".....<]2{[/!>$%@&#.#............."
block|,
literal|"}<<_]2{3/-!>$%@&#.#.............."
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|tabselectedbeginn_xpm
specifier|static
name|char
modifier|*
name|tabselectedbeginn_xpm
index|[]
init|=
block|{
literal|"33 39 28 1"
block|,
literal|" 	c None"
block|,
literal|".	c #CECFEF"
block|,
literal|"+	c #EFF3EF"
block|,
literal|"@	c #FFFBFF"
block|,
literal|"#	c #F7FBF7"
block|,
literal|"$	c #FFFFFF"
block|,
literal|"%	c #EFEFEF"
block|,
literal|"&	c #F7F7F7"
block|,
literal|"*	c #DEDFDE"
block|,
literal|"=	c #E7E7E7"
block|,
literal|"-	c #D6D3D6"
block|,
literal|";	c #DEE3DE"
block|,
literal|">	c #EFEBEF"
block|,
literal|",	c #F7F3F7"
block|,
literal|"'	c #CECBCE"
block|,
literal|")	c #CECFCE"
block|,
literal|"!	c #D6D7D6"
block|,
literal|"~	c #DEDBDE"
block|,
literal|"{	c #E7EBE7"
block|,
literal|"]	c #C6C7C6"
block|,
literal|"^	c #E7E3E7"
block|,
literal|"/	c #BDC3BD"
block|,
literal|"(	c #CED3CE"
block|,
literal|"_	c #BDBABD"
block|,
literal|":	c #C6C3C6"
block|,
literal|"<	c #C6CBC6"
block|,
literal|"[	c #D6DBD6"
block|,
literal|"}	c #BDBEBD"
block|,
literal|"..........................+@#$#$$"
block|,
literal|"........................%%&&@#$#$"
block|,
literal|"......................*==%%&&@#$$"
block|,
literal|"....................--*;>%,&@#$#$"
block|,
literal|"...................')!~={,+@#$#$$"
block|,
literal|"...................]-!^=%%&&@#$#$"
block|,
literal|"................../'(~;>%&&@#$#$$"
block|,
literal|"................._])!*={,&@#$#$$$"
block|,
literal|"................_])~*>%&&$#$$$$$$"
block|,
literal|"................:<![={&&@#$$$$$$$"
block|,
literal|"................:)!^=,+@#$$$$$$$$"
block|,
literal|"...............}'(*^%+@#$#$$$$$$$"
block|,
literal|"...............:<!*>%&&$#$$$$$$$$"
block|,
literal|".............../)!^{,&@#$$$$$$$$$"
block|,
literal|"...............](*^%+@#$$$$$$$$$$"
block|,
literal|"...............]!~=%&&$$$$$$$$$$$"
block|,
literal|"...............'(*=,+@#$$$$$$$$$$"
block|,
literal|"...............<!*>%&&$$$$$$$$$$$"
block|,
literal|"...............'-^=,+@#$$$$$$$$$$"
block|,
literal|"...............<!*>%&#$$$$$$$$$$$"
block|,
literal|"...............'-^=,+@#$$$$$$$$$$"
block|,
literal|"...............<!*>%&#$$$$$$$$$$$"
block|,
literal|"...............'-^=,+@#$$$$$$$$$$"
block|,
literal|"...............<!*>%&#$$$$$$$$$$$"
block|,
literal|"...............'-^=,+@#$$$$$$$$$$"
block|,
literal|"...............<!*>%&#$$$$$$$$$$$"
block|,
literal|"...............'!^=,&@#$$$$$$$$$$"
block|,
literal|"...............<~*>%&#$$$$$$$$$$$"
block|,
literal|"...............)!^{,&@#$$$$$$$$$$"
block|,
literal|"..............])~;%+@#$$$$$$$$$$$"
block|,
literal|"..............]-[={&&$#$$$$$$$$$$"
block|,
literal|".............])!^=,&@#$$$$$$$$$$$"
block|,
literal|"............:'-*^%+@#$$$$$$$$$$$$"
block|,
literal|"............])~*>%&&$#$$$$$$$$$$$"
block|,
literal|"...........:'!*={,&@#$$$$$$$$$$$$"
block|,
literal|"..........:'-~^=,+@#$$$$$$$$$$$$$"
block|,
literal|".......}]'-~^=%,&@#$$$$$$$$$$$$$$"
block|,
literal|".....}:])-~^=%,+@#$#$$$$$$$$$$$$$"
block|,
literal|"}}}:]')-!*^=%,&@#$#$$$$$$$$$$$$$$"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|tabselectedend_xpm
specifier|static
name|char
modifier|*
name|tabselectedend_xpm
index|[]
init|=
block|{
literal|"33 42 33 1"
block|,
literal|" 	c None"
block|,
literal|".	c #FFFFFF"
block|,
literal|"+	c #CECBE7"
block|,
literal|"@	c #C6C7E7"
block|,
literal|"#	c #CECFEF"
block|,
literal|"$	c #C6CBE7"
block|,
literal|"%	c #BDBEDE"
block|,
literal|"&	c #BDC3DE"
block|,
literal|"*	c #CECBEF"
block|,
literal|"=	c #B5B6D6"
block|,
literal|"-	c #ADAECE"
block|,
literal|";	c #ADB2CE"
block|,
literal|">	c #BDBAD6"
block|,
literal|",	c #B5BAD6"
block|,
literal|"'	c #C6C3DE"
block|,
literal|")	c #ADAAC6"
block|,
literal|"!	c #B5B2CE"
block|,
literal|"~	c #B5B6CE"
block|,
literal|"{	c #A5A2BD"
block|,
literal|"]	c #A5A6BD"
block|,
literal|"^	c #9C9EB5"
block|,
literal|"/	c #9CA2BD"
block|,
literal|"(	c #ADAEC6"
block|,
literal|"_	c #C6C3E7"
block|,
literal|":	c #9C9AB5"
block|,
literal|"<	c #A5A6C6"
block|,
literal|"[	c #949AAD"
block|,
literal|"}	c #A5AAC6"
block|,
literal|"|	c #9496AD"
block|,
literal|"1	c #BDBADE"
block|,
literal|"2	c #BDBED6"
block|,
literal|"3	c #9CA2B5"
block|,
literal|"4	c #A5AABD"
block|,
literal|"..........................+@#$#$#"
block|,
literal|"........................%@&*$#$##"
block|,
literal|"......................==%%@@*$#$#"
block|,
literal|".....................-;>,'&+@#$##"
block|,
literal|"....................))!~%%@@*$#$#"
block|,
literal|"...................{]-!%%@@*$#$##"
block|,
literal|"..................^/)(>>_&*$#$###"
block|,
literal|".................:^<(=,'&*@#$#$##"
block|,
literal|".................[]}!~%&+@#$#$###"
block|,
literal|"................|{]-~%&@@#$######"
block|,
literal|"................^/(;1%@@#$#######"
block|,
literal|"................^)(=>@@*$########"
block|,
literal|"...............[{}!,'&*$#$#######"
block|,
literal|"...............^{-!%&+$#$########"
block|,
literal|"...............^)(>2@@#$#########"
block|,
literal|"...............{]!='&*$##########"
block|,
literal|"...............3(;%%@$###########"
block|,
literal|"...............{}=,_@*$##########"
block|,
literal|".............../-!%&+$###########"
block|,
literal|"...............])=,_@#$##########"
block|,
literal|".............../-!%&+$###########"
block|,
literal|"...............])=,_@#$##########"
block|,
literal|".............../-!%&+$###########"
block|,
literal|"...............])=,_@#$##########"
block|,
literal|".............../-!%&+$###########"
block|,
literal|"...............])=,_@#$##########"
block|,
literal|".............../-!%&+$###########"
block|,
literal|"...............])=,@@#$##########"
block|,
literal|".............../-~%&*$###########"
block|,
literal|"...............](=>@@#$##########"
block|,
literal|"...............]!~%&*$###########"
block|,
literal|"..............^)(>2@@#$##########"
block|,
literal|"..............34!,'&*$###########"
block|,
literal|"..............{-;%%@@#$##########"
block|,
literal|".............^](=>@@#$###########"
block|,
literal|"............[/}!,'&*$############"
block|,
literal|"............^](~%&@@#$###########"
block|,
literal|"..........^/};~%&@@#$############"
block|,
literal|".........^/4(~,%@@#$#############"
block|,
literal|".......[^/4(~,%@@*$##############"
block|,
literal|".....[^3]}(~,%&@*$#$#############"
block|,
literal|"|[[:^3]4(;~,%&@*$#$##############"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|tabend_xpm
specifier|static
name|char
modifier|*
name|tabend_xpm
index|[]
init|=
block|{
literal|"33 42 3 1"
block|,
literal|" 	c None"
block|,
literal|".	c #CECFEF"
block|,
literal|"+	c #FFFFFF"
block|,
literal|"..........................+++++++"
block|,
literal|"........................+++++++++"
block|,
literal|"......................+++++++++++"
block|,
literal|".....................++++++++++++"
block|,
literal|"....................+++++++++++++"
block|,
literal|"...................++++++++++++++"
block|,
literal|"..................+++++++++++++++"
block|,
literal|".................++++++++++++++++"
block|,
literal|".................++++++++++++++++"
block|,
literal|"................+++++++++++++++++"
block|,
literal|"................+++++++++++++++++"
block|,
literal|"................+++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"...............++++++++++++++++++"
block|,
literal|"..............+++++++++++++++++++"
block|,
literal|"..............+++++++++++++++++++"
block|,
literal|"..............+++++++++++++++++++"
block|,
literal|".............++++++++++++++++++++"
block|,
literal|"............+++++++++++++++++++++"
block|,
literal|"............+++++++++++++++++++++"
block|,
literal|"..........+++++++++++++++++++++++"
block|,
literal|".........++++++++++++++++++++++++"
block|,
literal|".......++++++++++++++++++++++++++"
block|,
literal|".....++++++++++++++++++++++++++++"
block|,
literal|"+++++++++++++++++++++++++++++++++"
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|fromHsl
name|QColor
name|fromHsl
parameter_list|(
name|QColor
name|c
parameter_list|)
block|{
specifier|const
name|qreal
name|h
init|=
name|c
operator|.
name|hueF
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|s
init|=
name|c
operator|.
name|saturationF
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|l
init|=
name|c
operator|.
name|valueF
argument_list|()
decl_stmt|;
name|qreal
name|ca
index|[
literal|3
index|]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|0
operator|||
name|h
operator|==
literal|1
condition|)
block|{
comment|// achromatic case
name|ca
index|[
literal|0
index|]
operator|=
name|ca
index|[
literal|1
index|]
operator|=
name|ca
index|[
literal|2
index|]
operator|=
name|l
expr_stmt|;
block|}
else|else
block|{
comment|// chromatic case
name|qreal
name|temp2
decl_stmt|;
if|if
condition|(
name|l
operator|<
name|qreal
argument_list|(
literal|0.5
argument_list|)
condition|)
name|temp2
operator|=
name|l
operator|*
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|+
name|s
operator|)
expr_stmt|;
else|else
name|temp2
operator|=
name|l
operator|+
name|s
operator|-
operator|(
name|l
operator|*
name|s
operator|)
expr_stmt|;
specifier|const
name|qreal
name|temp1
init|=
operator|(
name|qreal
argument_list|(
literal|2.0
argument_list|)
operator|*
name|l
operator|)
operator|-
name|temp2
decl_stmt|;
name|qreal
name|temp3
index|[
literal|3
index|]
init|=
block|{
name|h
operator|+
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|/
name|qreal
argument_list|(
literal|3.0
argument_list|)
operator|)
block|,
name|h
block|,
name|h
operator|-
operator|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|/
name|qreal
argument_list|(
literal|3.0
argument_list|)
operator|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|3
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|temp3
index|[
name|i
index|]
operator|<
name|qreal
argument_list|(
literal|0.0
argument_list|)
condition|)
name|temp3
index|[
name|i
index|]
operator|+=
name|qreal
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|temp3
index|[
name|i
index|]
operator|>
name|qreal
argument_list|(
literal|1.0
argument_list|)
condition|)
name|temp3
index|[
name|i
index|]
operator|-=
name|qreal
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|sixtemp3
init|=
name|temp3
index|[
name|i
index|]
operator|*
name|qreal
argument_list|(
literal|6.0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sixtemp3
operator|<
name|qreal
argument_list|(
literal|1.0
argument_list|)
condition|)
name|ca
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|temp1
operator|+
operator|(
name|temp2
operator|-
name|temp1
operator|)
operator|*
name|sixtemp3
operator|)
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|temp3
index|[
name|i
index|]
operator|*
name|qreal
argument_list|(
literal|2.0
argument_list|)
operator|)
operator|<
name|qreal
argument_list|(
literal|1.0
argument_list|)
condition|)
name|ca
index|[
name|i
index|]
operator|=
operator|(
name|temp2
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|temp3
index|[
name|i
index|]
operator|*
name|qreal
argument_list|(
literal|3.0
argument_list|)
operator|)
operator|<
name|qreal
argument_list|(
literal|2.0
argument_list|)
condition|)
name|ca
index|[
name|i
index|]
operator|=
name|temp1
operator|+
operator|(
name|temp2
operator|-
name|temp1
operator|)
operator|*
operator|(
name|qreal
argument_list|(
literal|2.0
argument_list|)
operator|/
name|qreal
argument_list|(
literal|3.0
argument_list|)
operator|-
name|temp3
index|[
name|i
index|]
operator|)
operator|*
name|qreal
argument_list|(
literal|6.0
argument_list|)
expr_stmt|;
else|else
name|ca
index|[
name|i
index|]
operator|=
name|temp1
expr_stmt|;
block|}
block|}
return|return
name|QColor
operator|::
name|fromRgbF
argument_list|(
name|ca
index|[
literal|0
index|]
argument_list|,
name|ca
index|[
literal|1
index|]
argument_list|,
name|ca
index|[
literal|2
index|]
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|Q_MAX_3
define|#
directive|define
name|Q_MAX_3
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|( ( a> b&& a> c) ? a : (b> c ? b : c) )
end_define
begin_define
DECL|macro|Q_MIN_3
define|#
directive|define
name|Q_MIN_3
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|( ( a< b&& a< c) ? a : (b< c ? b : c) )
end_define
begin_function
DECL|function|toHsl
name|QColor
name|toHsl
parameter_list|(
name|QColor
name|c
parameter_list|)
block|{
name|QColor
name|color
decl_stmt|;
name|qreal
name|h
decl_stmt|;
name|qreal
name|s
decl_stmt|;
name|qreal
name|l
decl_stmt|;
specifier|const
name|qreal
name|r
init|=
name|c
operator|.
name|redF
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|g
init|=
name|c
operator|.
name|greenF
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|b
init|=
name|c
operator|.
name|blueF
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|max
init|=
name|Q_MAX_3
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|min
init|=
name|Q_MIN_3
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|delta
init|=
name|max
operator|-
name|min
decl_stmt|;
specifier|const
name|qreal
name|delta2
init|=
name|max
operator|+
name|min
decl_stmt|;
specifier|const
name|qreal
name|lightness
init|=
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|*
name|delta2
decl_stmt|;
name|l
operator|=
operator|(
name|lightness
operator|)
expr_stmt|;
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|delta
argument_list|)
condition|)
block|{
comment|// achromatic case, hue is undefined
name|h
operator|=
literal|0
expr_stmt|;
name|s
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// chromatic case
name|qreal
name|hue
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|lightness
operator|<
name|qreal
argument_list|(
literal|0.5
argument_list|)
condition|)
name|s
operator|=
operator|(
operator|(
name|delta
operator|/
name|delta2
operator|)
operator|)
expr_stmt|;
else|else
name|s
operator|=
operator|(
operator|(
name|delta
operator|/
operator|(
name|qreal
argument_list|(
literal|2.0
argument_list|)
operator|-
name|delta2
operator|)
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|r
argument_list|,
name|max
argument_list|)
condition|)
block|{
name|hue
operator|=
operator|(
operator|(
name|g
operator|-
name|b
operator|)
operator|/
name|delta
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|g
argument_list|,
name|max
argument_list|)
condition|)
block|{
name|hue
operator|=
operator|(
literal|2.0
operator|+
operator|(
name|b
operator|-
name|r
operator|)
operator|/
name|delta
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|b
argument_list|,
name|max
argument_list|)
condition|)
block|{
name|hue
operator|=
operator|(
literal|4.0
operator|+
operator|(
name|r
operator|-
name|g
operator|)
operator|/
name|delta
operator|)
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
literal|"QColor::toHsv"
argument_list|,
literal|"internal error"
argument_list|)
expr_stmt|;
block|}
name|hue
operator|*=
literal|60.0
expr_stmt|;
if|if
condition|(
name|hue
operator|<
literal|0.0
condition|)
name|hue
operator|+=
literal|360.0
expr_stmt|;
name|h
operator|=
operator|(
name|hue
operator|*
literal|100
operator|)
expr_stmt|;
block|}
name|h
operator|=
name|h
operator|/
literal|36000
expr_stmt|;
return|return
name|QColor
operator|::
name|fromHsvF
argument_list|(
name|h
argument_list|,
name|s
argument_list|,
name|l
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|tintColor
name|void
name|tintColor
parameter_list|(
name|QColor
modifier|&
name|color
parameter_list|,
name|QColor
name|tintColor
parameter_list|,
name|qreal
name|_saturation
parameter_list|)
block|{
name|tintColor
operator|=
name|toHsl
argument_list|(
name|tintColor
argument_list|)
expr_stmt|;
name|color
operator|=
name|toHsl
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|qreal
name|hue
init|=
name|tintColor
operator|.
name|hueF
argument_list|()
decl_stmt|;
name|qreal
name|saturation
init|=
name|color
operator|.
name|saturationF
argument_list|()
decl_stmt|;
if|if
condition|(
name|_saturation
condition|)
name|saturation
operator|=
name|_saturation
expr_stmt|;
name|qreal
name|lightness
init|=
name|color
operator|.
name|valueF
argument_list|()
decl_stmt|;
name|color
operator|.
name|setHsvF
argument_list|(
name|hue
argument_list|,
name|saturation
argument_list|,
name|lightness
argument_list|)
expr_stmt|;
name|color
operator|=
name|fromHsl
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|color
operator|.
name|toRgb
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tintImagePal
name|void
name|tintImagePal
parameter_list|(
name|QImage
modifier|*
name|image
parameter_list|,
name|QColor
name|color
parameter_list|,
name|qreal
name|saturation
parameter_list|)
block|{
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colorTable
init|=
name|image
operator|->
name|colorTable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|colorTable
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QColor
name|c
argument_list|(
name|toHsl
argument_list|(
name|colorTable
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|tintColor
argument_list|(
name|c
argument_list|,
name|color
argument_list|,
name|saturation
argument_list|)
expr_stmt|;
name|colorTable
index|[
name|i
index|]
operator|=
name|c
operator|.
name|rgb
argument_list|()
expr_stmt|;
block|}
name|image
operator|->
name|setColorTable
argument_list|(
name|colorTable
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tintImage
name|void
name|tintImage
parameter_list|(
name|QImage
modifier|*
name|image
parameter_list|,
name|QColor
name|color
parameter_list|,
name|qreal
name|saturation
parameter_list|)
block|{
operator|*
name|image
operator|=
name|image
operator|->
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|image
operator|->
name|width
argument_list|()
condition|;
name|x
operator|++
control|)
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|image
operator|->
name|height
argument_list|()
condition|;
name|y
operator|++
control|)
block|{
name|QColor
name|c
argument_list|(
name|image
operator|->
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
decl_stmt|;
name|tintColor
argument_list|(
name|c
argument_list|,
name|color
argument_list|,
name|saturation
argument_list|)
expr_stmt|;
name|image
operator|->
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|c
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_OS_WINCE_WM
end_comment
begin_enum
DECL|enum|QSliderDirection
DECL|enumerator|SliderUp
DECL|enumerator|SliderDown
DECL|enumerator|SliderLeft
DECL|enumerator|SliderRight
enum|enum
name|QSliderDirection
block|{
name|SliderUp
block|,
name|SliderDown
block|,
name|SliderLeft
block|,
name|SliderRight
block|}
enum|;
end_enum
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
end_ifdef
begin_function
DECL|function|tintImagesButton
name|void
name|QWindowsMobileStylePrivate
operator|::
name|tintImagesButton
parameter_list|(
name|QColor
name|color
parameter_list|)
block|{
if|if
condition|(
name|currentTintButton
operator|==
name|color
condition|)
return|return;
name|currentTintButton
operator|=
name|color
expr_stmt|;
name|imageTabEnd
operator|=
name|QImage
argument_list|(
name|tabend_xpm
argument_list|)
expr_stmt|;
name|imageTabSelectedEnd
operator|=
name|QImage
argument_list|(
name|tabselectedend_xpm
argument_list|)
expr_stmt|;
name|imageTabSelectedBegin
operator|=
name|QImage
argument_list|(
name|tabselectedbeginn_xpm
argument_list|)
expr_stmt|;
name|imageTabMiddle
operator|=
name|QImage
argument_list|(
name|tabmiddle_xpm
argument_list|)
expr_stmt|;
name|tintImage
argument_list|(
operator|&
name|imageTabEnd
argument_list|,
name|color
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|tintImage
argument_list|(
operator|&
name|imageTabSelectedEnd
argument_list|,
name|color
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|tintImage
argument_list|(
operator|&
name|imageTabSelectedBegin
argument_list|,
name|color
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|tintImage
argument_list|(
operator|&
name|imageTabMiddle
argument_list|,
name|color
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|doubleControls
condition|)
block|{
name|int
name|height
init|=
name|imageTabMiddle
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|+
literal|1
decl_stmt|;
name|imageTabEnd
operator|=
name|imageTabEnd
operator|.
name|scaledToHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|imageTabMiddle
operator|=
name|imageTabMiddle
operator|.
name|scaledToHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|imageTabSelectedEnd
operator|=
name|imageTabSelectedEnd
operator|.
name|scaledToHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|imageTabSelectedBegin
operator|=
name|imageTabSelectedBegin
operator|.
name|scaledToHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|tintImagesHigh
name|void
name|QWindowsMobileStylePrivate
operator|::
name|tintImagesHigh
parameter_list|(
name|QColor
name|color
parameter_list|)
block|{
if|if
condition|(
name|currentTintHigh
operator|==
name|color
condition|)
return|return;
name|currentTintHigh
operator|=
name|color
expr_stmt|;
name|tintListViewHighlight
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|imageScrollbarHandleUpHigh
operator|=
name|imageScrollbarHandleUp
expr_stmt|;
name|imageScrollbarHandleDownHigh
operator|=
name|imageScrollbarHandleDown
expr_stmt|;
name|tintImagePal
argument_list|(
operator|&
name|imageScrollbarHandleDownHigh
argument_list|,
name|color
argument_list|,
name|qreal
argument_list|(
literal|0.8
argument_list|)
argument_list|)
expr_stmt|;
name|tintImagePal
argument_list|(
operator|&
name|imageScrollbarHandleUpHigh
argument_list|,
name|color
argument_list|,
name|qreal
argument_list|(
literal|0.8
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tintListViewHighlight
name|void
name|QWindowsMobileStylePrivate
operator|::
name|tintListViewHighlight
parameter_list|(
name|QColor
name|color
parameter_list|)
block|{
name|imageListViewHighlightCornerRight
operator|=
name|QImage
argument_list|(
name|listviewhighcornerright_xpm
argument_list|)
expr_stmt|;
name|tintImage
argument_list|(
operator|&
name|imageListViewHighlightCornerRight
argument_list|,
name|color
argument_list|,
name|qreal
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|imageListViewHighlightCornerLeft
operator|=
name|QImage
argument_list|(
name|listviewhighcornerleft_xpm
argument_list|)
expr_stmt|;
name|tintImage
argument_list|(
operator|&
name|imageListViewHighlightCornerLeft
argument_list|,
name|color
argument_list|,
name|qreal
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|imageListViewHighlightMiddle
operator|=
name|QImage
argument_list|(
name|listviewhighmiddle_xpm
argument_list|)
expr_stmt|;
name|tintImage
argument_list|(
operator|&
name|imageListViewHighlightMiddle
argument_list|,
name|color
argument_list|,
name|qreal
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|height
init|=
name|imageListViewHighlightMiddle
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|doubleControls
condition|)
block|{
name|height
operator|=
name|height
operator|/
literal|2
expr_stmt|;
name|imageListViewHighlightCornerRight
operator|=
name|imageListViewHighlightCornerRight
operator|.
name|scaledToHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|imageListViewHighlightCornerLeft
operator|=
name|imageListViewHighlightCornerLeft
operator|.
name|scaledToHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|imageListViewHighlightMiddle
operator|=
name|imageListViewHighlightMiddle
operator|.
name|scaledToHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_OS_WINCE_WM
end_comment
begin_function
DECL|function|setupWindowsMobileStyle65
name|void
name|QWindowsMobileStylePrivate
operator|::
name|setupWindowsMobileStyle65
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
name|wm65
operator|=
name|qt_wince_is_windows_mobile_65
argument_list|()
expr_stmt|;
if|if
condition|(
name|wm65
condition|)
block|{
name|imageScrollbarHandleUp
operator|=
name|QImage
argument_list|(
name|sbhandleup_xpm
argument_list|)
expr_stmt|;
name|imageScrollbarHandleDown
operator|=
name|QImage
argument_list|(
name|sbhandledown_xpm
argument_list|)
expr_stmt|;
name|imageScrollbarGripUp
operator|=
name|QImage
argument_list|(
name|sbgripup_xpm
argument_list|)
expr_stmt|;
name|imageScrollbarGripDown
operator|=
name|QImage
argument_list|(
name|sbgripdown_xpm
argument_list|)
expr_stmt|;
name|imageScrollbarGripMiddle
operator|=
name|QImage
argument_list|(
name|sbgripmiddle_xpm
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|doubleControls
condition|)
block|{
name|imageScrollbarHandleUp
operator|=
name|imageScrollbarHandleUp
operator|.
name|scaledToHeight
argument_list|(
name|imageScrollbarHandleUp
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|imageScrollbarHandleDown
operator|=
name|imageScrollbarHandleDown
operator|.
name|scaledToHeight
argument_list|(
name|imageScrollbarHandleDown
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|imageScrollbarGripMiddle
operator|=
name|imageScrollbarGripMiddle
operator|.
name|scaledToHeight
argument_list|(
name|imageScrollbarGripMiddle
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|imageScrollbarGripUp
operator|=
name|imageScrollbarGripUp
operator|.
name|scaledToHeight
argument_list|(
name|imageScrollbarGripUp
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|imageScrollbarGripDown
operator|=
name|imageScrollbarGripDown
operator|.
name|scaledToHeight
argument_list|(
name|imageScrollbarGripDown
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{         }
name|tintImagesHigh
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|//Q_OS_WINCE_WM
block|}
end_function
begin_function
DECL|function|drawTabBarTab
name|void
name|QWindowsMobileStylePrivate
operator|::
name|drawTabBarTab
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
name|wm65
condition|)
block|{
name|tintImagesButton
argument_list|(
name|tab
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|r
decl_stmt|;
name|r
operator|.
name|setTopLeft
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|topRight
argument_list|()
operator|-
name|QPoint
argument_list|(
name|imageTabMiddle
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setBottomRight
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tab
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|tab
operator|->
name|rect
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|tab
operator|->
name|rect
argument_list|,
name|QColor
argument_list|(
name|imageTabMiddle
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tab
operator|->
name|selectedPosition
operator|==
name|QStyleOptionTab
operator|::
name|NextIsSelected
condition|)
block|{
name|painter
operator|->
name|drawImage
argument_list|(
name|r
argument_list|,
name|imageTabSelectedBegin
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|End
operator|||
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|OnlyOneTab
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|tab
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
operator|)
condition|)
block|{
name|painter
operator|->
name|drawImage
argument_list|(
name|r
argument_list|,
name|imageTabEnd
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tab
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
block|{
name|painter
operator|->
name|drawImage
argument_list|(
name|r
argument_list|,
name|imageTabSelectedEnd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|drawImage
argument_list|(
name|r
argument_list|,
name|imageTabMiddle
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|Beginning
operator|&&
operator|!
operator|(
name|tab
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
operator|)
condition|)
block|{
name|painter
operator|->
name|drawImage
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
operator|-
name|QPoint
argument_list|(
name|imageTabMiddle
operator|.
name|width
argument_list|()
operator|*
literal|0.60
argument_list|,
literal|0
argument_list|)
argument_list|,
name|imageTabSelectedEnd
argument_list|)
expr_stmt|;
block|}
comment|//imageTabBarBig
return|return;
block|}
endif|#
directive|endif
comment|//Q_OS_WINCE_WM
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|tab
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doubleControls
condition|)
block|{
name|QPen
name|pen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|pen
operator|.
name|setWidth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|pen
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|FlatCap
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedNorth
condition|)
block|{
if|if
condition|(
name|tab
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|tab
operator|->
name|rect
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|topRight
argument_list|()
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|tab
operator|->
name|rect
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|topRight
argument_list|()
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedSouth
condition|)
block|{
if|if
condition|(
name|tab
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|topRight
argument_list|()
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|tab
operator|->
name|rect
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doubleControls
condition|)
name|painter
operator|->
name|drawLine
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|topRight
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|drawLine
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|topRight
argument_list|()
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedEast
condition|)
block|{
if|if
condition|(
name|tab
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|tab
operator|->
name|rect
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|tab
operator|->
name|rect
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedWest
condition|)
block|{
if|if
condition|(
name|tab
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|tab
operator|->
name|rect
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|tab
operator|->
name|rect
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|topRight
argument_list|()
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_TABBAR
block|}
end_function
begin_function
DECL|function|drawPanelItemViewSelected
name|void
name|QWindowsMobileStylePrivate
operator|::
name|drawPanelItemViewSelected
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|*
name|option
parameter_list|,
name|QRect
name|rect
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
name|wm65
condition|)
block|{
name|QRect
name|r
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isValid
argument_list|()
condition|)
name|r
operator|=
name|rect
expr_stmt|;
else|else
name|r
operator|=
name|option
operator|->
name|rect
expr_stmt|;
name|tintImagesHigh
argument_list|(
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|lightGray
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|Middle
condition|)
block|{
name|painter
operator|->
name|drawImage
argument_list|(
name|r
argument_list|,
name|imageListViewHighlightMiddle
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|Beginning
condition|)
block|{
name|painter
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|adjusted
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|imageListViewHighlightMiddle
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|End
condition|)
block|{
name|painter
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|,
name|imageListViewHighlightMiddle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|adjusted
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|,
operator|-
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|,
name|imageListViewHighlightMiddle
argument_list|)
expr_stmt|;
block|}
name|QImage
name|cornerLeft
init|=
name|imageListViewHighlightCornerLeft
decl_stmt|;
name|QImage
name|cornerRight
init|=
name|imageListViewHighlightCornerRight
decl_stmt|;
name|int
name|width
init|=
name|r
operator|.
name|width
argument_list|()
operator|>
name|cornerRight
operator|.
name|width
argument_list|()
condition|?
name|r
operator|.
name|width
argument_list|()
else|:
name|cornerRight
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|width
operator|*
literal|2
operator|)
operator|>
name|r
operator|.
name|width
argument_list|()
condition|)
block|{
name|width
operator|=
operator|(
name|r
operator|.
name|width
argument_list|()
operator|-
literal|5
operator|)
operator|/
literal|2
expr_stmt|;
block|}
name|cornerLeft
operator|=
name|cornerLeft
operator|.
name|scaled
argument_list|(
name|width
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|cornerRight
operator|=
name|cornerRight
operator|.
name|scaled
argument_list|(
name|width
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|option
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|Beginning
operator|)
operator|||
operator|(
name|option
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|OnlyOne
operator|)
operator|||
operator|!
name|option
operator|->
name|viewItemPosition
condition|)
block|{
name|painter
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|cornerLeft
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|option
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|End
operator|)
operator|||
operator|(
name|option
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|OnlyOne
operator|)
operator|||
operator|!
name|option
operator|->
name|viewItemPosition
condition|)
block|{
name|painter
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|topRight
argument_list|()
operator|-
name|QPoint
argument_list|(
name|cornerRight
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
name|cornerRight
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
endif|#
directive|endif
comment|//Q_OS_WINCE_WM
name|QPalette
operator|::
name|ColorGroup
name|cg
init|=
name|option
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
condition|?
name|QPalette
operator|::
name|Normal
else|:
name|QPalette
operator|::
name|Disabled
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isValid
argument_list|()
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawScrollbarGrip
name|void
name|QWindowsMobileStylePrivate
operator|::
name|drawScrollbarGrip
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
name|QStyleOptionSlider
modifier|*
name|newScrollbar
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|bool
name|drawCompleteFrame
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
name|wm65
condition|)
block|{
if|if
condition|(
name|newScrollbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|newScrollbar
operator|->
name|rect
decl_stmt|;
name|p
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|adjusted
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|,
operator|-
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|,
name|imageScrollbarGripMiddle
operator|.
name|transformed
argument_list|(
name|transform
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|imageScrollbarGripUp
operator|.
name|transformed
argument_list|(
name|transform
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|topRight
argument_list|()
operator|-
name|QPoint
argument_list|(
name|imageScrollbarGripDown
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|imageScrollbarGripDown
operator|.
name|transformed
argument_list|(
name|transform
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRect
name|r
init|=
name|newScrollbar
operator|->
name|rect
decl_stmt|;
name|p
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
operator|-
literal|10
argument_list|)
argument_list|,
name|imageScrollbarGripMiddle
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|imageScrollbarGripUp
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|bottomLeft
argument_list|()
operator|-
name|QPoint
argument_list|(
literal|0
argument_list|,
name|imageScrollbarGripDown
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|imageScrollbarGripDown
argument_list|)
expr_stmt|;
block|}
return|return ;
block|}
endif|#
directive|endif
if|if
condition|(
name|newScrollbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|newScrollbar
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|newScrollbar
operator|->
name|rect
decl_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topRight
argument_list|()
argument_list|,
name|r
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|smartphone
condition|)
block|{
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|r
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|newScrollbar
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|newScrollbar
operator|->
name|rect
decl_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|r
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|smartphone
condition|)
block|{
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topRight
argument_list|()
argument_list|,
name|r
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newScrollbar
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|newScrollbar
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|.
name|setRect
argument_list|(
name|newScrollbar
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|,
name|newScrollbar
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|2
argument_list|,
name|newScrollbar
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|5
argument_list|,
name|newScrollbar
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|5
argument_list|)
expr_stmt|;
block|}
name|int
name|gripMargin
init|=
name|doubleControls
condition|?
literal|4
else|:
literal|2
decl_stmt|;
name|int
name|doubleLines
init|=
name|doubleControls
condition|?
literal|2
else|:
literal|1
decl_stmt|;
comment|//If there is a frame around the scrollbar (abstractScrollArea),
comment|//then the margin is different, because of the missing frame
name|int
name|gripMarginFrame
init|=
name|doubleControls
condition|?
literal|3
else|:
literal|1
decl_stmt|;
if|if
condition|(
name|drawCompleteFrame
condition|)
name|gripMarginFrame
operator|=
literal|0
expr_stmt|;
comment|//draw grips
if|if
condition|(
operator|!
name|smartphone
condition|)
if|if
condition|(
name|newScrollbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
operator|-
literal|3
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|p
operator|->
name|drawLine
argument_list|(
name|QPoint
argument_list|(
name|newScrollbar
operator|->
name|rect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|+
name|i
operator|*
name|doubleLines
operator|+
literal|1
argument_list|,
name|newScrollbar
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
name|gripMargin
operator|+
name|gripMarginFrame
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|newScrollbar
operator|->
name|rect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|+
name|i
operator|*
name|doubleLines
operator|+
literal|1
argument_list|,
name|newScrollbar
operator|->
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|gripMargin
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
operator|-
literal|2
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|p
operator|->
name|drawLine
argument_list|(
name|QPoint
argument_list|(
name|newScrollbar
operator|->
name|rect
operator|.
name|left
argument_list|()
operator|+
name|gripMargin
operator|+
name|gripMarginFrame
argument_list|,
name|newScrollbar
operator|->
name|rect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|+
literal|1
operator|+
name|i
operator|*
name|doubleLines
operator|-
literal|1
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|newScrollbar
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
name|gripMargin
argument_list|,
name|newScrollbar
operator|->
name|rect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|+
literal|1
operator|+
name|i
operator|*
name|doubleLines
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|smartphone
condition|)
block|{
name|QRect
name|r
decl_stmt|;
if|if
condition|(
name|doubleControls
condition|)
name|r
operator|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|drawCompleteFrame
operator|&&
name|doubleControls
condition|)
name|r
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//Check if the scrollbar is part of an abstractItemView and draw the frame according
if|if
condition|(
name|drawCompleteFrame
condition|)
name|p
operator|->
name|drawRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|newScrollbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawScrollbarHandleUp
name|void
name|QWindowsMobileStylePrivate
operator|::
name|drawScrollbarHandleUp
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
name|QStyleOptionSlider
modifier|*
name|opt
parameter_list|,
name|bool
name|completeFrame
parameter_list|,
name|bool
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
name|wm65
condition|)
block|{
name|tintImagesHigh
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|opt
operator|->
name|rect
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Sunken
condition|)
name|p
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|imageScrollbarHandleUpHigh
operator|.
name|transformed
argument_list|(
name|transform
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|imageScrollbarHandleUp
operator|.
name|transformed
argument_list|(
name|transform
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Sunken
condition|)
name|p
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|imageScrollbarHandleUpHigh
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|imageScrollbarHandleUp
argument_list|)
expr_stmt|;
block|}
return|return ;
block|}
endif|#
directive|endif
comment|//Q_OS_WINCE_WM
name|QBrush
name|fill
init|=
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Sunken
condition|)
name|fill
operator|=
name|opt
operator|->
name|palette
operator|.
name|shadow
argument_list|()
expr_stmt|;
name|QStyleOption
name|arrowOpt
init|=
operator|*
name|opt
decl_stmt|;
if|if
condition|(
name|doubleControls
condition|)
name|arrowOpt
operator|.
name|rect
operator|=
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|,
operator|-
literal|5
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
else|else
name|arrowOpt
operator|.
name|rect
operator|=
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|bool
name|horizontal
init|=
operator|(
name|opt
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
decl_stmt|;
if|if
condition|(
name|horizontal
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topRight
argument_list|()
argument_list|,
name|r
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doubleControls
condition|)
name|arrowOpt
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|q_func
argument_list|()
operator|->
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_IndicatorArrowLeft
argument_list|,
operator|&
name|arrowOpt
argument_list|,
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|r
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|completeFrame
condition|)
name|arrowOpt
operator|.
name|rect
operator|.
name|adjust
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|doubleControls
condition|)
name|arrowOpt
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
operator|-
literal|4
argument_list|,
literal|0
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|completeFrame
operator|&&
name|doubleControls
condition|)
name|arrowOpt
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|q_func
argument_list|()
operator|->
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_IndicatorArrowUp
argument_list|,
operator|&
name|arrowOpt
argument_list|,
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawScrollbarHandleDown
name|void
name|QWindowsMobileStylePrivate
operator|::
name|drawScrollbarHandleDown
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
name|QStyleOptionSlider
modifier|*
name|opt
parameter_list|,
name|bool
name|completeFrame
parameter_list|,
name|bool
name|secondScrollBar
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
name|wm65
condition|)
block|{
name|tintImagesHigh
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|opt
operator|->
name|rect
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Sunken
condition|)
name|p
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|imageScrollbarHandleDownHigh
operator|.
name|transformed
argument_list|(
name|transform
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|imageScrollbarHandleDown
operator|.
name|transformed
argument_list|(
name|transform
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Sunken
condition|)
name|p
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|imageScrollbarHandleDownHigh
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|drawImage
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|imageScrollbarHandleDown
argument_list|)
expr_stmt|;
block|}
return|return ;
block|}
endif|#
directive|endif
comment|//Q_OS_WINCE_WM
name|QBrush
name|fill
init|=
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Sunken
condition|)
name|fill
operator|=
name|opt
operator|->
name|palette
operator|.
name|shadow
argument_list|()
expr_stmt|;
name|QStyleOption
name|arrowOpt
init|=
operator|*
name|opt
decl_stmt|;
if|if
condition|(
name|doubleControls
condition|)
name|arrowOpt
operator|.
name|rect
operator|=
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
operator|-
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
else|else
name|arrowOpt
operator|.
name|rect
operator|=
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|bool
name|horizontal
init|=
operator|(
name|opt
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
decl_stmt|;
if|if
condition|(
name|horizontal
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondScrollBar
condition|)
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topRight
argument_list|()
argument_list|,
name|r
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doubleControls
condition|)
name|arrowOpt
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|q_func
argument_list|()
operator|->
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_IndicatorArrowRight
argument_list|,
operator|&
name|arrowOpt
argument_list|,
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondScrollBar
condition|)
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|bottomLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|r
operator|.
name|bottomRight
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|completeFrame
condition|)
name|arrowOpt
operator|.
name|rect
operator|.
name|adjust
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|doubleControls
condition|)
name|arrowOpt
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|completeFrame
operator|&&
name|doubleControls
condition|)
name|arrowOpt
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|q_func
argument_list|()
operator|->
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|arrowOpt
argument_list|,
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|//QT_NO_SCROLLBAR
block|}
end_function
begin_function
DECL|function|drawScrollbarGroove
name|void
name|QWindowsMobileStylePrivate
operator|::
name|drawScrollbarGroove
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QStyleOptionSlider
modifier|*
name|opt
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
name|wm65
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|QColor
argument_list|(
literal|231
argument_list|,
literal|231
argument_list|,
literal|231
argument_list|)
argument_list|)
expr_stmt|;
return|return ;
block|}
endif|#
directive|endif
name|QBrush
name|fill
decl_stmt|;
if|if
condition|(
name|smartphone
condition|)
block|{
name|fill
operator|=
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
expr_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|fill
operator|=
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
expr_stmt|;
name|QImage
name|image
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_IMAGEFORMAT_XPM
if|if
condition|(
name|opt
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|image
operator|=
name|QImage
argument_list|(
name|vertlines_xpm
argument_list|)
expr_stmt|;
else|else
name|image
operator|=
name|QImage
argument_list|(
name|horlines_xpm
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|fill
operator|.
name|setTextureImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fill
operator|=
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
expr_stmt|;
block|}
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_SCROLLBAR
block|}
end_function
begin_constructor
DECL|function|QWindowsMobileStyle
name|QWindowsMobileStyle
operator|::
name|QWindowsMobileStyle
parameter_list|(
name|QWindowsMobileStylePrivate
modifier|&
name|dd
parameter_list|)
member_init_list|:
name|QWindowsStyle
argument_list|(
name|dd
argument_list|)
block|{
name|qApp
operator|->
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_FadeMenu
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateMenu
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QWindowsMobileStyle
name|QWindowsMobileStyle
operator|::
name|QWindowsMobileStyle
parameter_list|()
member_init_list|:
name|QWindowsStyle
argument_list|(
operator|*
operator|new
name|QWindowsMobileStylePrivate
argument_list|)
block|{
name|qApp
operator|->
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_FadeMenu
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateMenu
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsMobileStyle
name|QWindowsMobileStyle
operator|::
name|~
name|QWindowsMobileStyle
parameter_list|()
block|{ }
end_destructor
begin_constructor
DECL|function|QWindowsMobileStylePrivate
name|QWindowsMobileStylePrivate
operator|::
name|QWindowsMobileStylePrivate
parameter_list|()
member_init_list|:
name|QWindowsStylePrivate
argument_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|doubleControls
operator|=
name|qt_wince_is_high_dpi
argument_list|()
expr_stmt|;
name|smartphone
operator|=
name|qt_wince_is_smartphone
argument_list|()
expr_stmt|;
else|#
directive|else
name|doubleControls
operator|=
literal|false
expr_stmt|;
name|smartphone
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
comment|//Q_OS_WINCE
ifndef|#
directive|ifndef
name|QT_NO_IMAGEFORMAT_XPM
name|imageArrowDown
operator|=
name|QImage
argument_list|(
name|arrowdown_xpm
argument_list|)
expr_stmt|;
name|imageArrowUp
operator|=
name|QImage
argument_list|(
name|arrowdown_xpm
argument_list|)
operator|.
name|mirrored
argument_list|()
expr_stmt|;
name|imageArrowLeft
operator|=
name|QImage
argument_list|(
name|arrowleft_xpm
argument_list|)
expr_stmt|;
name|imageArrowRight
operator|=
name|QImage
argument_list|(
name|arrowleft_xpm
argument_list|)
operator|.
name|mirrored
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|doubleControls
condition|)
block|{
name|imageRadioButton
operator|=
name|QImage
argument_list|(
name|radiobutton_xpm
argument_list|)
expr_stmt|;
name|imageRadioButtonChecked
operator|=
name|QImage
argument_list|(
name|radiochecked_xpm
argument_list|)
expr_stmt|;
name|imageChecked
operator|=
name|QImage
argument_list|(
name|checkedlight_xpm
argument_list|)
expr_stmt|;
name|imageCheckedBold
operator|=
name|QImage
argument_list|(
name|checkedbold_xpm
argument_list|)
expr_stmt|;
name|imageRadioButtonHighlighted
operator|=
name|QImage
argument_list|(
name|highlightedradiobutton_xpm
argument_list|)
expr_stmt|;
name|imageClose
operator|=
name|QImage
argument_list|(
name|cross_big_xpm
argument_list|)
expr_stmt|;
name|imageMaximize
operator|=
name|QImage
argument_list|(
name|max_big_xpm
argument_list|)
expr_stmt|;
name|imageMinimize
operator|=
name|QImage
argument_list|(
name|min_big_xpm
argument_list|)
expr_stmt|;
name|imageNormalize
operator|=
name|QImage
argument_list|(
name|normal_big_xpm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|imageRadioButton
operator|=
name|QImage
argument_list|(
name|radiobutton_low_xpm
argument_list|)
expr_stmt|;
name|imageRadioButtonChecked
operator|=
name|QImage
argument_list|(
name|radiochecked_low_xpm
argument_list|)
expr_stmt|;
name|imageChecked
operator|=
name|QImage
argument_list|(
name|checkedlight_low_xpm
argument_list|)
expr_stmt|;
name|imageCheckedBold
operator|=
name|QImage
argument_list|(
name|checkedbold_low_xpm
argument_list|)
expr_stmt|;
name|imageRadioButtonHighlighted
operator|=
name|QImage
argument_list|(
name|highlightedradiobutton_low_xpm
argument_list|)
expr_stmt|;
name|imageClose
operator|=
name|QImage
argument_list|(
name|cross_small_xpm
argument_list|)
expr_stmt|;
name|imageMaximize
operator|=
name|QImage
argument_list|(
name|max_small_xpm
argument_list|)
expr_stmt|;
name|imageMinimize
operator|=
name|QImage
argument_list|(
name|min_small_xpm
argument_list|)
expr_stmt|;
name|imageNormalize
operator|=
name|QImage
argument_list|(
name|normal_small_xpm
argument_list|)
expr_stmt|;
block|}
name|setupWindowsMobileStyle65
argument_list|()
expr_stmt|;
name|imageArrowDownBig
operator|=
name|QImage
argument_list|(
name|arrowdown_big_xpm
argument_list|)
expr_stmt|;
name|imageArrowUpBig
operator|=
name|QImage
argument_list|(
name|arrowdown_big_xpm
argument_list|)
operator|.
name|mirrored
argument_list|()
expr_stmt|;
name|imageArrowLeftBig
operator|=
name|QImage
argument_list|(
name|arrowleft_big_xpm
argument_list|)
expr_stmt|;
name|imageArrowRightBig
operator|=
name|QImage
argument_list|(
name|arrowleft_big_xpm
argument_list|)
operator|.
name|mirrored
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_function
DECL|function|drawPrimitive
name|void
name|QWindowsMobileStyle
operator|::
name|drawPrimitive
parameter_list|(
name|PrimitiveElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QWindowsMobileStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsMobileStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|doRestore
init|=
literal|false
decl_stmt|;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|painter
operator|->
name|setClipping
argument_list|(
literal|false
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|PE_PanelButtonTool
case|:
block|{
name|int
name|penSize
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|penSize
operator|=
literal|2
expr_stmt|;
if|if
condition|(
name|widget
condition|)
if|if
condition|(
name|QWidget
modifier|*
name|parent
init|=
name|widget
operator|->
name|parentWidget
argument_list|()
condition|)
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
if|if
condition|(
name|qobject_cast
argument_list|<
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
block|{
else|#
directive|else
if|if
condition|(
literal|false
condition|)
block|{
endif|#
directive|endif
comment|//QT_NO_TABBAR
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|2
operator|*
name|penSize
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
operator|*
name|penSize
argument_list|)
expr_stmt|;
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|penSize
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator|)
condition|)
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|penSize
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_AutoRaise
operator|)
operator|||
operator|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
operator|)
condition|)
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
name|penSize
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
operator|*
name|penSize
argument_list|)
argument_list|,
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator|)
condition|)
block|{
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|penSize
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_On
operator|)
condition|)
block|{
name|QBrush
name|fill
init|=
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
decl_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
operator|.
name|adjusted
argument_list|(
name|windowsItemFrame
argument_list|,
name|windowsItemFrame
argument_list|,
operator|-
name|windowsItemFrame
argument_list|,
operator|-
name|windowsItemFrame
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|penSize
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|PE_IndicatorButtonDropDown
case|:
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|2
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|PE_IndicatorTabTear
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|bool
name|rtl
init|=
name|tab
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
decl_stmt|;
name|QRect
name|rect
init|=
name|tab
operator|->
name|rect
decl_stmt|;
name|QPainterPath
name|path
decl_stmt|;
name|rect
operator|.
name|setTop
argument_list|(
name|rect
operator|.
name|top
argument_list|()
operator|+
operator|(
operator|(
name|tab
operator|->
name|state
operator|&
name|State_Selected
operator|)
condition|?
literal|1
else|:
literal|3
operator|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setBottom
argument_list|(
name|rect
operator|.
name|bottom
argument_list|()
operator|-
operator|(
operator|(
name|tab
operator|->
name|state
operator|&
name|State_Selected
operator|)
condition|?
literal|0
else|:
literal|2
operator|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
name|QPoint
argument_list|(
name|rtl
condition|?
name|rect
operator|.
name|right
argument_list|()
else|:
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|jags
init|=
literal|1
init|;
name|jags
operator|<=
name|count
condition|;
operator|++
name|jags
operator|,
name|rtl
operator|=
operator|!
name|rtl
control|)
name|path
operator|.
name|lineTo
argument_list|(
name|QPoint
argument_list|(
name|rtl
condition|?
name|rect
operator|.
name|left
argument_list|()
else|:
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|+
name|jags
operator|*
name|rect
operator|.
name|height
argument_list|()
operator|/
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|tab
operator|->
name|palette
operator|.
name|light
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|.8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_TABBAR
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
case|case
name|PE_IndicatorToolBarSeparator
case|:
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QPoint
name|p1
decl_stmt|,
name|p2
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
name|p1
operator|=
name|QPoint
argument_list|(
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|p2
operator|=
name|QPoint
argument_list|(
name|p1
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p1
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|p2
operator|=
name|QPoint
argument_list|(
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|p1
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|mid
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
block|{
name|QPen
name|pen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|pen
operator|.
name|setWidth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|pen
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|FlatCap
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|drawLine
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_TOOLBAR
case|case
name|PE_IndicatorToolBarHandle
case|:
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
name|int
name|x
init|=
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|-
literal|4
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|x
operator|-=
literal|2
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|>
literal|4
condition|)
block|{
name|qDrawWinButton
argument_list|(
name|painter
argument_list|,
name|x
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qDrawShadePanel
argument_list|(
name|painter
argument_list|,
name|x
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qDrawShadePanel
argument_list|(
name|painter
argument_list|,
name|x
operator|+
literal|3
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|>
literal|4
condition|)
block|{
name|int
name|y
init|=
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
literal|4
decl_stmt|;
name|qDrawShadePanel
argument_list|(
name|painter
argument_list|,
literal|2
argument_list|,
name|y
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
argument_list|,
literal|3
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qDrawShadePanel
argument_list|(
name|painter
argument_list|,
literal|2
argument_list|,
name|y
operator|+
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
argument_list|,
literal|3
argument_list|,
name|option
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
case|case
name|PE_IndicatorProgressChunk
case|:
block|{
name|bool
name|vertical
init|=
literal|false
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|pb2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
name|vertical
operator|=
operator|(
name|pb2
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|vertical
condition|)
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|4
argument_list|,
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|4
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_PROGRESSBAR
case|case
name|PE_FrameButtonTool
case|:
block|{
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|inherits
argument_list|(
literal|"QDockWidgetTitleButton"
argument_list|)
condition|)
block|{
if|if
condition|(
specifier|const
name|QDockWidget
modifier|*
name|dw
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parent
argument_list|()
argument_list|)
condition|)
if|if
condition|(
name|dw
operator|->
name|isFloating
argument_list|()
condition|)
block|{
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
name|QBrush
name|fill
decl_stmt|;
name|bool
name|stippled
decl_stmt|;
name|bool
name|panel
init|=
operator|(
name|element
operator|==
name|PE_PanelButtonTool
operator|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|||
operator|(
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|&&
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
operator|)
operator|)
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_On
operator|)
condition|)
block|{
name|fill
operator|=
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
name|stippled
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|fill
operator|=
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|stippled
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Raised
operator||
name|State_Sunken
operator||
name|State_On
operator|)
condition|)
block|{
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_AutoRaise
condition|)
block|{
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Enabled
operator||
name|State_Sunken
operator||
name|State_On
operator|)
condition|)
block|{
if|if
condition|(
name|panel
condition|)
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|d
operator|->
name|doubleControls
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
else|else
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|d
operator|->
name|doubleControls
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stippled
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|d
operator|->
name|doubleControls
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|PE_FrameFocusRect
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFocusRect
modifier|*
name|fropt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFocusRect
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
comment|//### check for d->alt_down
name|int
name|penSize
decl_stmt|;
name|d
operator|->
name|doubleControls
condition|?
name|penSize
operator|=
literal|2
else|:
name|penSize
operator|=
literal|1
expr_stmt|;
name|bool
name|alternateFocusStyle
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
name|alternateFocusStyle
operator|=
literal|true
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|alternateFocusStyle
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
operator|(
name|fropt
operator|->
name|state
operator|&
name|State_KeyboardFocusChange
operator|)
operator|&&
operator|!
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|option
argument_list|)
condition|)
return|return;
name|QRect
name|r
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setBackgroundMode
argument_list|(
name|Qt
operator|::
name|TransparentMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|alternateFocusStyle
condition|)
block|{
name|QColor
name|bg_col
init|=
name|fropt
operator|->
name|backgroundColor
decl_stmt|;
if|if
condition|(
operator|!
name|bg_col
operator|.
name|isValid
argument_list|()
condition|)
name|bg_col
operator|=
name|painter
operator|->
name|background
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
comment|// Create an "XOR" color.
name|QColor
name|patternCol
argument_list|(
operator|(
name|bg_col
operator|.
name|red
argument_list|()
operator|^
literal|0xff
operator|)
operator|&
literal|0xff
argument_list|,
operator|(
name|bg_col
operator|.
name|green
argument_list|()
operator|^
literal|0xff
operator|)
operator|&
literal|0xff
argument_list|,
operator|(
name|bg_col
operator|.
name|blue
argument_list|()
operator|^
literal|0xff
operator|)
operator|&
literal|0xff
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|QBrush
argument_list|(
name|patternCol
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|penSize
argument_list|)
expr_stmt|;
comment|// Top
name|painter
operator|->
name|drawRect
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|bottom
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
operator|+
name|penSize
operator|-
literal|1
argument_list|,
name|penSize
argument_list|)
expr_stmt|;
comment|// Bottom
name|painter
operator|->
name|drawRect
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|penSize
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|// Left
name|painter
operator|->
name|drawRect
argument_list|(
name|r
operator|.
name|right
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|penSize
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|// Right
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|PE_PanelButtonBevel
case|:
block|{
name|QBrush
name|fill
decl_stmt|;
name|bool
name|panel
init|=
name|element
operator|!=
name|PE_FrameButtonBevel
decl_stmt|;
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|option
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_On
operator|)
condition|)
name|fill
operator|=
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
else|else
name|fill
operator|=
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Raised
operator||
name|State_On
operator||
name|State_Sunken
operator|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|2
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
else|else
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|panel
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|PE_FrameGroupBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|frame
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|QStyleOptionFrameV2
modifier|*
name|frame2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrameV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame2
operator|&&
operator|!
operator|(
name|frame2
operator|->
name|features
operator|&
name|QStyleOptionFrameV2
operator|::
name|Flat
operator|)
condition|)
block|{
name|QPen
name|oldPen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|QRect
name|r
init|=
name|frame
operator|->
name|rect
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|frame
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
operator|-
name|windowsMobileFrameGroupBoxOffset
argument_list|,
name|frame
operator|->
name|palette
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|r
operator|.
name|topRight
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|painter
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|r
operator|.
name|topRight
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PE_IndicatorCheckBox
case|:
block|{
name|QBrush
name|fill
decl_stmt|;
name|QRect
name|r
init|=
name|d
operator|->
name|doubleControls
condition|?
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
else|:
name|option
operator|->
name|rect
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_NoChange
condition|)
name|fill
operator|=
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|fill
operator|=
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|fill
operator|=
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
expr_stmt|;
else|else
name|fill
operator|=
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|doRestore
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_NoChange
operator|)
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|r
argument_list|,
name|fill
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topRight
argument_list|()
argument_list|,
name|r
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|r
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|r
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
block|{
name|QRect
name|r0
init|=
name|r
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r0
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r0
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r0
operator|.
name|topRight
argument_list|()
argument_list|,
name|r0
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r0
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|r0
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r0
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|r0
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|r2
init|=
name|d
operator|->
name|doubleControls
condition|?
name|r
operator|.
name|adjusted
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
else|:
name|r
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r2
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r2
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r2
operator|.
name|topRight
argument_list|()
argument_list|,
name|r2
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r2
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|r2
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r2
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|r2
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
block|{
name|QRect
name|r3
init|=
name|r2
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r3
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r3
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r3
operator|.
name|topRight
argument_list|()
argument_list|,
name|r3
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r3
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|r3
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r3
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|r3
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//fall through...
block|}
case|case
name|PE_IndicatorViewItemCheck
case|:
block|{
if|if
condition|(
operator|!
name|doRestore
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|doRestore
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|element
operator|==
name|PE_IndicatorViewItemCheck
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_NoChange
condition|)
name|painter
operator|->
name|setBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
block|{
name|QRect
name|r
init|=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|windowsMobileitemViewCheckBoxSize
operator|*
literal|2
argument_list|,
name|windowsMobileitemViewCheckBoxSize
operator|*
literal|2
argument_list|)
decl_stmt|;
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|r
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRect
name|r
init|=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|windowsMobileitemViewCheckBoxSize
argument_list|,
name|windowsMobileitemViewCheckBoxSize
argument_list|)
decl_stmt|;
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|r
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|d
operator|->
name|imageChecked
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|imageChecked
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Off
operator|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|painter
operator|->
name|drawImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|d
operator|->
name|imageChecked
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|drawImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|3
argument_list|,
name|d
operator|->
name|imageChecked
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_NoChange
condition|)
name|d
operator|->
name|imageCheckedBold
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|d
operator|->
name|imageCheckedBold
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|imageCheckedBold
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Off
operator|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|painter
operator|->
name|drawImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|d
operator|->
name|imageCheckedBold
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|drawImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|3
argument_list|,
name|d
operator|->
name|imageCheckedBold
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doRestore
condition|)
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorRadioButton
case|:
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|d
operator|->
name|imageRadioButtonHighlighted
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|imageRadioButtonHighlighted
operator|.
name|setColor
argument_list|(
literal|2
argument_list|,
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|d
operator|->
name|imageRadioButtonHighlighted
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|imageRadioButton
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|d
operator|->
name|imageRadioButton
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
condition|)
block|{
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|d
operator|->
name|imageRadioButtonChecked
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|imageRadioButtonChecked
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|int
name|offset
init|=
name|d
operator|->
name|doubleControls
condition|?
literal|6
else|:
literal|3
decl_stmt|;
name|painter
operator|->
name|drawImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|offset
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|offset
argument_list|,
name|d
operator|->
name|imageRadioButtonChecked
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|PE_PanelButtonCommand
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QBrush
name|fill
decl_stmt|;
name|State
name|flags
init|=
name|option
operator|->
name|state
decl_stmt|;
name|QPalette
name|pal
init|=
name|option
operator|->
name|palette
decl_stmt|;
name|QRect
name|r
init|=
name|option
operator|->
name|rect
decl_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|State_Sunken
operator|||
name|flags
operator|&
name|State_On
operator|)
condition|)
name|fill
operator|=
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|)
expr_stmt|;
else|else
name|fill
operator|=
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|int
name|singleLine
init|=
literal|1
decl_stmt|;
name|int
name|doubleLine
init|=
literal|2
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
block|{
name|singleLine
operator|=
literal|2
expr_stmt|;
name|doubleLine
operator|=
literal|4
expr_stmt|;
block|}
if|if
condition|(
name|button
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|DefaultButton
operator|&&
name|flags
operator|&
name|State_Sunken
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
block|{
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|r
argument_list|,
name|pal
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|r
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|pal
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|r
argument_list|,
name|pal
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
operator|(
name|State_Raised
operator||
name|State_Sunken
operator||
name|State_On
operator||
name|State_Sunken
operator|)
condition|)
block|{
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|r
argument_list|,
name|pal
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|singleLine
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|r
argument_list|,
name|fill
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PE_FrameDefaultButton
case|:
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
block|{
name|rect
operator|.
name|adjust
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rect
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorSpinPlus
case|:
case|case
name|PE_IndicatorSpinMinus
case|:
block|{
name|QRect
name|r
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|int
name|fw
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|+
literal|2
decl_stmt|;
name|QRect
name|br
init|=
name|r
operator|.
name|adjusted
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|step
init|=
operator|(
name|br
operator|.
name|width
argument_list|()
operator|+
literal|4
operator|)
operator|/
literal|5
decl_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|br
operator|.
name|x
argument_list|()
operator|+
name|offset
argument_list|,
name|br
operator|.
name|y
argument_list|()
operator|+
name|offset
operator|+
name|br
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
name|step
operator|/
literal|2
argument_list|,
name|br
operator|.
name|width
argument_list|()
argument_list|,
name|step
argument_list|,
name|option
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|==
name|PE_IndicatorSpinPlus
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|br
operator|.
name|x
argument_list|()
operator|+
name|br
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|-
name|step
operator|/
literal|2
operator|+
name|offset
argument_list|,
name|br
operator|.
name|y
argument_list|()
operator|+
name|offset
operator|+
literal|4
argument_list|,
name|step
argument_list|,
name|br
operator|.
name|height
argument_list|()
operator|-
literal|7
argument_list|,
name|option
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorSpinUp
case|:
case|case
name|PE_IndicatorSpinDown
case|:
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QPoint
name|points
index|[
literal|7
index|]
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|PE_IndicatorSpinUp
case|:
name|points
index|[
literal|0
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|4
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|5
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|6
index|]
operator|=
name|QPoint
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_IndicatorSpinDown
case|:
name|points
index|[
literal|0
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|4
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|5
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|6
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|3
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|translate
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ButtonShiftHorizontal
argument_list|)
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ButtonShiftVertical
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
block|{
name|painter
operator|->
name|translate
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|2
index|]
argument_list|,
name|points
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|4
index|]
argument_list|,
name|points
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|points
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|translate
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|2
index|]
argument_list|,
name|points
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|4
index|]
argument_list|,
name|points
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|points
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|mid
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|2
index|]
argument_list|,
name|points
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|4
index|]
argument_list|,
name|points
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|points
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorArrowUpBig
case|:
case|case
name|PE_IndicatorArrowDownBig
case|:
case|case
name|PE_IndicatorArrowLeftBig
case|:
case|case
name|PE_IndicatorArrowRightBig
case|:
case|case
name|PE_IndicatorArrowUp
case|:
case|case
name|PE_IndicatorArrowDown
case|:
case|case
name|PE_IndicatorArrowRight
case|:
case|case
name|PE_IndicatorArrowLeft
case|:
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
block|{
name|QColor
name|color
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|color
operator|=
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
else|else
name|color
operator|=
name|option
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|QImage
name|image
decl_stmt|;
name|int
name|xoffset
decl_stmt|,
name|yoffset
decl_stmt|;
name|bool
name|isTabBarArrow
init|=
name|widget
operator|&&
name|widget
operator|->
name|parent
argument_list|()
operator|&&
name|widget
operator|->
name|inherits
argument_list|(
literal|"QToolButton"
argument_list|)
operator|&&
name|widget
operator|->
name|parent
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QTabBar"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|PE_IndicatorArrowUp
case|:
name|image
operator|=
name|d
operator|->
name|imageArrowUp
expr_stmt|;
name|xoffset
operator|=
literal|1
expr_stmt|;
name|yoffset
operator|=
literal|12
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowDown
case|:
name|image
operator|=
name|d
operator|->
name|imageArrowDown
expr_stmt|;
name|xoffset
operator|=
literal|1
expr_stmt|;
name|yoffset
operator|=
literal|12
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowLeft
case|:
name|image
operator|=
name|d
operator|->
name|imageArrowLeft
expr_stmt|;
name|xoffset
operator|=
literal|8
expr_stmt|;
name|yoffset
operator|=
name|isTabBarArrow
condition|?
literal|12
else|:
literal|2
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowRight
case|:
name|image
operator|=
name|d
operator|->
name|imageArrowRight
expr_stmt|;
name|xoffset
operator|=
literal|8
expr_stmt|;
name|yoffset
operator|=
name|isTabBarArrow
condition|?
literal|12
else|:
literal|2
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowUpBig
case|:
name|image
operator|=
name|d
operator|->
name|imageArrowUpBig
expr_stmt|;
name|xoffset
operator|=
literal|3
expr_stmt|;
name|yoffset
operator|=
literal|12
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowDownBig
case|:
name|image
operator|=
name|d
operator|->
name|imageArrowDownBig
expr_stmt|;
name|xoffset
operator|=
literal|2
expr_stmt|;
name|yoffset
operator|=
literal|12
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowLeftBig
case|:
name|image
operator|=
name|d
operator|->
name|imageArrowLeftBig
expr_stmt|;
name|xoffset
operator|=
literal|8
expr_stmt|;
name|yoffset
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowRightBig
case|:
name|image
operator|=
name|d
operator|->
name|imageArrowRightBig
expr_stmt|;
name|xoffset
operator|=
literal|8
expr_stmt|;
name|yoffset
operator|=
literal|2
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|color
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|xoffset
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|yoffset
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPoint
name|points
index|[
literal|7
index|]
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|PE_IndicatorArrowUp
case|:
case|case
name|PE_IndicatorArrowUpBig
case|:
name|points
index|[
literal|0
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|=
name|QPoint
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|=
name|QPoint
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|4
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|5
index|]
operator|=
name|QPoint
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|6
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowDown
case|:
case|case
name|PE_IndicatorArrowDownBig
case|:
name|points
index|[
literal|0
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|3
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|=
name|QPoint
argument_list|(
literal|3
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|=
name|QPoint
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|4
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|5
index|]
operator|=
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|6
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowRight
case|:
case|case
name|PE_IndicatorArrowRightBig
case|:
name|points
index|[
literal|0
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|4
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|5
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|6
index|]
operator|=
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowLeft
case|:
case|case
name|PE_IndicatorArrowLeftBig
case|:
name|points
index|[
literal|0
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|points
index|[
literal|2
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|3
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|4
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|5
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|6
index|]
operator|=
name|QPoint
argument_list|(
operator|-
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
block|{
name|painter
operator|->
name|translate
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|2
index|]
argument_list|,
name|points
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|4
index|]
argument_list|,
name|points
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|points
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|translate
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|mid
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|2
index|]
argument_list|,
name|points
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|points
index|[
literal|4
index|]
argument_list|,
name|points
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|points
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
case|case
name|PE_FrameTabWidget
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTabWidgetFrame
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabWidgetFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|QPalette
name|pal
init|=
name|option
operator|->
name|palette
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QBrush
name|fill
init|=
name|pal
operator|.
name|light
argument_list|()
decl_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|pal
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
block|{
name|QPen
name|pen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|pen
operator|.
name|setWidth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|pen
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|FlatCap
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|tab
operator|->
name|shape
condition|)
block|{
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
operator|!
name|d
operator|->
name|wm65
condition|)
endif|#
directive|endif
block|{
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
operator|!
name|d
operator|->
name|wm65
condition|)
endif|#
directive|endif
block|{
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
operator|!
name|d
operator|->
name|wm65
condition|)
endif|#
directive|endif
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topRight
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
operator|!
name|d
operator|->
name|wm65
condition|)
endif|#
directive|endif
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|TriangularWest
case|:
case|case
name|QTabBar
operator|::
name|TriangularEast
case|:
case|case
name|QTabBar
operator|::
name|TriangularSouth
case|:
case|case
name|QTabBar
operator|::
name|TriangularNorth
case|:
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|2
argument_list|,
operator|&
name|pal
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|pal
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_TABBAR
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
case|case
name|PE_PanelItemViewRow
case|:
if|if
condition|(
specifier|const
name|QStyleOptionViewItem
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QPalette
operator|::
name|ColorGroup
name|cg
init|=
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
condition|?
name|QPalette
operator|::
name|Normal
else|:
name|QPalette
operator|::
name|Disabled
decl_stmt|;
if|if
condition|(
name|cg
operator|==
name|QPalette
operator|::
name|Normal
operator|&&
operator|!
operator|(
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Active
operator|)
condition|)
name|cg
operator|=
name|QPalette
operator|::
name|Inactive
expr_stmt|;
if|if
condition|(
operator|(
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
operator|)
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ItemView_ShowDecorationSelected
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
condition|)
name|d
operator|->
name|drawPanelItemViewSelected
argument_list|(
name|painter
argument_list|,
name|vopt
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|vopt
operator|->
name|features
operator|&
name|QStyleOptionViewItem
operator|::
name|Alternate
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|vopt
operator|->
name|rect
argument_list|,
name|vopt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|AlternateBase
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
operator|(
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|vopt
operator|->
name|rect
argument_list|,
name|vopt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_PanelItemViewItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionViewItem
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QPalette
operator|::
name|ColorGroup
name|cg
init|=
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
condition|?
name|QPalette
operator|::
name|Normal
else|:
name|QPalette
operator|::
name|Disabled
decl_stmt|;
if|if
condition|(
name|cg
operator|==
name|QPalette
operator|::
name|Normal
operator|&&
operator|!
operator|(
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Active
operator|)
condition|)
name|cg
operator|=
name|QPalette
operator|::
name|Inactive
expr_stmt|;
if|if
condition|(
name|vopt
operator|->
name|showDecorationSelected
operator|&&
operator|(
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
operator|)
condition|)
block|{
name|d
operator|->
name|drawPanelItemViewSelected
argument_list|(
name|painter
argument_list|,
name|vopt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|vopt
operator|->
name|backgroundBrush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
name|QPointF
name|oldBO
init|=
name|painter
operator|->
name|brushOrigin
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|vopt
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|vopt
operator|->
name|rect
argument_list|,
name|vopt
operator|->
name|backgroundBrush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|oldBO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
block|{
name|QRect
name|textRect
init|=
name|proxy
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_ItemViewItemText
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawPanelItemViewSelected
argument_list|(
name|painter
argument_list|,
name|vopt
argument_list|,
name|textRect
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_ITEMVIEWS
case|case
name|PE_FrameWindow
case|:
block|{
name|QPalette
name|popupPal
init|=
name|option
operator|->
name|palette
decl_stmt|;
name|popupPal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|popupPal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|popupPal
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|popupPal
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_FrameTabBarBase
case|:
block|{
break|break;
block|}
case|case
name|PE_Widget
case|:
break|break;
case|case
name|PE_IndicatorMenuCheckMark
case|:
block|{
name|int
name|markW
init|=
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|>
literal|7
condition|?
literal|7
else|:
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|markH
init|=
name|markW
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|markW
operator|*=
literal|2
expr_stmt|;
name|markH
operator|*=
literal|2
expr_stmt|;
name|int
name|posX
init|=
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
operator|(
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|markW
operator|)
operator|/
literal|2
operator|+
literal|1
decl_stmt|;
name|int
name|posY
init|=
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
operator|(
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|markH
operator|)
operator|/
literal|2
decl_stmt|;
name|QVector
argument_list|<
name|QLineF
argument_list|>
name|a
decl_stmt|;
name|a
operator|.
name|reserve
argument_list|(
name|markH
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|,
name|xx
decl_stmt|,
name|yy
decl_stmt|;
name|xx
operator|=
name|posX
expr_stmt|;
name|yy
operator|=
literal|3
operator|+
name|posY
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|markW
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|a
operator|<<
name|QLineF
argument_list|(
name|xx
argument_list|,
name|yy
argument_list|,
name|xx
argument_list|,
name|yy
operator|+
literal|2
argument_list|)
expr_stmt|;
operator|++
name|xx
expr_stmt|;
operator|++
name|yy
expr_stmt|;
block|}
name|yy
operator|-=
literal|2
expr_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|markH
condition|;
operator|++
name|i
control|)
block|{
name|a
operator|<<
name|QLineF
argument_list|(
name|xx
argument_list|,
name|yy
argument_list|,
name|xx
argument_list|,
name|yy
operator|+
literal|2
argument_list|)
expr_stmt|;
operator|++
name|xx
expr_stmt|;
operator|--
name|yy
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|&&
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_On
operator|)
condition|)
block|{
name|int
name|pnt
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|offset
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|pnt
operator|=
literal|0
init|;
name|pnt
operator|<
name|a
operator|.
name|size
argument_list|()
condition|;
operator|++
name|pnt
control|)
name|a
index|[
name|pnt
index|]
operator|.
name|translate
argument_list|(
name|offset
operator|.
name|x
argument_list|()
argument_list|,
name|offset
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLines
argument_list|(
name|a
argument_list|)
expr_stmt|;
for|for
control|(
name|pnt
operator|=
literal|0
init|;
name|pnt
operator|<
name|a
operator|.
name|size
argument_list|()
condition|;
operator|++
name|pnt
control|)
name|a
index|[
name|pnt
index|]
operator|.
name|translate
argument_list|(
name|offset
operator|.
name|x
argument_list|()
argument_list|,
name|offset
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLines
argument_list|(
name|a
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorBranch
case|:
block|{
comment|// Copied from the Windows style.
specifier|static
specifier|const
name|int
name|decoration_size
init|=
name|d
operator|->
name|doubleControls
condition|?
literal|18
else|:
literal|9
decl_stmt|;
specifier|static
specifier|const
name|int
name|ofsA
init|=
name|d
operator|->
name|doubleControls
condition|?
literal|4
else|:
literal|2
decl_stmt|;
specifier|static
specifier|const
name|int
name|ofsB
init|=
name|d
operator|->
name|doubleControls
condition|?
literal|8
else|:
literal|4
decl_stmt|;
specifier|static
specifier|const
name|int
name|ofsC
init|=
name|d
operator|->
name|doubleControls
condition|?
literal|12
else|:
literal|6
decl_stmt|;
specifier|static
specifier|const
name|int
name|ofsD
init|=
name|d
operator|->
name|doubleControls
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|mid_h
init|=
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|int
name|mid_v
init|=
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
decl_stmt|;
name|int
name|bef_h
init|=
name|mid_h
decl_stmt|;
name|int
name|bef_v
init|=
name|mid_v
decl_stmt|;
name|int
name|aft_h
init|=
name|mid_h
decl_stmt|;
name|int
name|aft_v
init|=
name|mid_v
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Children
condition|)
block|{
name|int
name|delta
init|=
name|decoration_size
operator|/
literal|2
decl_stmt|;
name|bef_h
operator|-=
name|delta
expr_stmt|;
name|bef_v
operator|-=
name|delta
expr_stmt|;
name|aft_h
operator|+=
name|delta
expr_stmt|;
name|aft_v
operator|+=
name|delta
expr_stmt|;
name|QPen
name|oldPen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|QPen
name|crossPen
init|=
name|oldPen
decl_stmt|;
name|crossPen
operator|.
name|setWidth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|crossPen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|bef_h
operator|+
name|ofsA
operator|+
name|ofsD
argument_list|,
name|bef_v
operator|+
name|ofsB
operator|+
name|ofsD
argument_list|,
name|bef_h
operator|+
name|ofsC
operator|+
name|ofsD
argument_list|,
name|bef_v
operator|+
name|ofsB
operator|+
name|ofsD
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Open
operator|)
condition|)
name|painter
operator|->
name|drawLine
argument_list|(
name|bef_h
operator|+
name|ofsB
operator|+
name|ofsD
argument_list|,
name|bef_v
operator|+
name|ofsA
operator|+
name|ofsD
argument_list|,
name|bef_h
operator|+
name|ofsB
operator|+
name|ofsD
argument_list|,
name|bef_v
operator|+
name|ofsC
operator|+
name|ofsD
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|bef_h
argument_list|,
name|bef_v
argument_list|,
name|decoration_size
operator|-
literal|1
argument_list|,
name|decoration_size
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|painter
operator|->
name|drawRect
argument_list|(
name|bef_h
operator|+
literal|1
argument_list|,
name|bef_v
operator|+
literal|1
argument_list|,
name|decoration_size
operator|-
literal|3
argument_list|,
name|decoration_size
operator|-
literal|3
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
name|QBrush
name|brush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Item
condition|)
block|{
if|if
condition|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|mid_v
argument_list|,
name|bef_h
operator|-
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
literal|1
argument_list|,
name|brush
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|fillRect
argument_list|(
name|aft_h
argument_list|,
name|mid_v
argument_list|,
name|option
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
name|aft_h
operator|+
literal|1
argument_list|,
literal|1
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sibling
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|mid_h
argument_list|,
name|aft_v
argument_list|,
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|aft_v
operator|+
literal|1
argument_list|,
name|brush
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Open
operator||
name|State_Children
operator||
name|State_Item
operator||
name|State_Sibling
operator|)
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|mid_h
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
literal|1
argument_list|,
name|bef_v
operator|-
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|brush
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_Frame
case|:
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|d
operator|->
name|doubleControls
condition|?
literal|2
else|:
literal|1
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_FrameLineEdit
case|:
case|case
name|PE_FrameMenu
case|:
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
else|else
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_FrameStatusBar
case|:
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
default|default:
name|QWindowsStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|function|drawControl
name|void
name|QWindowsMobileStyle
operator|::
name|drawControl
parameter_list|(
name|ControlElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QWindowsMobileStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsMobileStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setClipping
argument_list|(
literal|false
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|CE_MenuBarEmptyArea
case|:
name|painter
operator|->
name|setClipping
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|CE_PushButtonBevel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|br
init|=
name|button
operator|->
name|rect
decl_stmt|;
name|int
name|dbi
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ButtonDefaultIndicator
argument_list|,
name|button
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|button
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|AutoDefaultButton
condition|)
name|br
operator|.
name|setCoords
argument_list|(
name|br
operator|.
name|left
argument_list|()
operator|+
name|dbi
argument_list|,
name|br
operator|.
name|top
argument_list|()
operator|+
name|dbi
argument_list|,
name|br
operator|.
name|right
argument_list|()
operator|-
name|dbi
argument_list|,
name|br
operator|.
name|bottom
argument_list|()
operator|-
name|dbi
argument_list|)
expr_stmt|;
name|QStyleOptionButton
name|tmpBtn
init|=
operator|*
name|button
decl_stmt|;
name|tmpBtn
operator|.
name|rect
operator|=
name|br
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_PanelButtonCommand
argument_list|,
operator|&
name|tmpBtn
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|button
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|HasMenu
condition|)
block|{
name|int
name|mbi
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_MenuButtonIndicator
argument_list|,
name|button
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|ir
init|=
name|button
operator|->
name|rect
decl_stmt|;
name|QStyleOptionButton
name|newButton
init|=
operator|*
name|button
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|newButton
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|ir
operator|.
name|right
argument_list|()
operator|-
name|mbi
argument_list|,
name|ir
operator|.
name|height
argument_list|()
operator|-
literal|30
argument_list|,
name|mbi
argument_list|,
name|ir
operator|.
name|height
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
else|else
name|newButton
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|ir
operator|.
name|right
argument_list|()
operator|-
name|mbi
argument_list|,
name|ir
operator|.
name|height
argument_list|()
operator|-
literal|20
argument_list|,
name|mbi
argument_list|,
name|ir
operator|.
name|height
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|newButton
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|button
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|DefaultButton
condition|)
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameDefaultButton
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CE_RadioButton
case|:
case|case
name|CE_CheckBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|bool
name|isRadio
init|=
operator|(
name|element
operator|==
name|CE_RadioButton
operator|)
decl_stmt|;
name|QStyleOptionButton
name|subopt
init|=
operator|*
name|button
decl_stmt|;
name|subopt
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonIndicator
else|:
name|SE_CheckBoxIndicator
argument_list|,
name|button
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|isRadio
condition|?
name|PE_IndicatorRadioButton
else|:
name|PE_IndicatorCheckBox
argument_list|,
operator|&
name|subopt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|subopt
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonContents
else|:
name|SE_CheckBoxContents
argument_list|,
name|button
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|isRadio
condition|?
name|CE_RadioButtonLabel
else|:
name|CE_CheckBoxLabel
argument_list|,
operator|&
name|subopt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|button
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|button
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonFocusRect
else|:
name|SE_CheckBoxFocusRect
argument_list|,
name|button
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fropt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CE_RadioButtonLabel
case|:
case|case
name|CE_CheckBoxLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|uint
name|alignment
init|=
name|visualAlignment
argument_list|(
name|button
operator|->
name|direction
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|button
argument_list|,
name|widget
argument_list|)
condition|)
name|alignment
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
name|QPixmap
name|pix
decl_stmt|;
name|QRect
name|textRect
init|=
name|button
operator|->
name|rect
decl_stmt|;
if|if
condition|(
operator|!
name|button
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|pix
operator|=
name|button
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|button
operator|->
name|iconSize
argument_list|,
name|button
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|QIcon
operator|::
name|Normal
else|:
name|QIcon
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawItemPixmap
argument_list|(
name|painter
argument_list|,
name|button
operator|->
name|rect
argument_list|,
name|alignment
argument_list|,
name|pix
argument_list|)
expr_stmt|;
if|if
condition|(
name|button
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|textRect
operator|.
name|setRight
argument_list|(
name|textRect
operator|.
name|right
argument_list|()
operator|-
name|button
operator|->
name|iconSize
operator|.
name|width
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
else|else
name|textRect
operator|.
name|setLeft
argument_list|(
name|textRect
operator|.
name|left
argument_list|()
operator|+
name|button
operator|->
name|iconSize
operator|.
name|width
argument_list|()
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|button
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|button
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|textRect
argument_list|,
name|alignment
operator||
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|button
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
name|button
operator|->
name|text
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
else|else
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|textRect
argument_list|,
name|alignment
operator||
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|button
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
name|button
operator|->
name|text
argument_list|,
name|QPalette
operator|::
name|Mid
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
case|case
name|CE_ProgressBarGroove
case|:
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|2
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
comment|//QT_NO_PROGRESSBAR
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|CE_TabBarTab
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|CE_TabBarTabShape
argument_list|,
name|tab
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|CE_TabBarTabLabel
argument_list|,
name|tab
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CE_TabBarTabShape
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedNorth
operator|||
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedEast
operator|||
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedSouth
operator|||
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedWest
condition|)
block|{
name|d
operator|->
name|drawTabBarTab
argument_list|(
name|painter
argument_list|,
name|tab
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_TABBAR
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
case|case
name|CE_ToolBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolBar
modifier|*
name|toolBar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
block|{
name|QPen
name|pen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|pen
operator|.
name|setWidth
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toolBar
operator|->
name|toolBarArea
operator|==
name|Qt
operator|::
name|TopToolBarArea
condition|)
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
comment|//QT_NO_TOOLBAR
case|case
name|CE_Header
case|:
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|header
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRegion
name|clipRegion
init|=
name|painter
operator|->
name|clipRegion
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|CE_HeaderSection
argument_list|,
name|header
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QStyleOptionHeader
name|subopt
init|=
operator|*
name|header
decl_stmt|;
name|subopt
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|SE_HeaderLabel
argument_list|,
name|header
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|subopt
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|header
operator|->
name|palette
operator|.
name|brightText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|subopt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_On
expr_stmt|;
if|if
condition|(
name|subopt
operator|.
name|rect
operator|.
name|isValid
argument_list|()
condition|)
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|CE_HeaderLabel
argument_list|,
operator|&
name|subopt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|->
name|sortIndicator
operator|!=
name|QStyleOptionHeader
operator|::
name|None
condition|)
block|{
name|subopt
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|SE_HeaderArrow
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorHeaderArrow
argument_list|,
operator|&
name|subopt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setClipRegion
argument_list|(
name|clipRegion
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CE_HeaderSection
case|:
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|header
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QBrush
name|fill
decl_stmt|;
name|QColor
name|color
decl_stmt|;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|penSize
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
block|{
name|penSize
operator|=
literal|2
expr_stmt|;
name|QPen
name|pen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|pen
operator|.
name|setWidth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|pen
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|FlatCap
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
block|}
comment|//fix Frame
if|if
condition|(
name|header
operator|->
name|position
operator|==
name|QStyleOptionHeader
operator|::
name|End
operator|||
operator|(
name|header
operator|->
name|position
operator|==
name|QStyleOptionHeader
operator|::
name|OnlyOneSection
operator|&&
operator|!
name|header
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
if|if
condition|(
name|Qt
operator|::
name|Horizontal
operator|==
name|header
operator|->
name|orientation
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|penSize
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|penSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
block|{
name|fill
operator|=
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|)
expr_stmt|;
name|color
operator|=
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topRight
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|penSize
argument_list|,
operator|-
name|penSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fill
operator|=
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|color
operator|=
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
if|if
condition|(
name|Qt
operator|::
name|Horizontal
operator|==
name|header
operator|->
name|orientation
condition|)
name|rect
operator|.
name|adjust
argument_list|(
operator|-
name|penSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
operator|-
name|penSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Qt
operator|::
name|Horizontal
operator|==
name|header
operator|->
name|orientation
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
operator|-
name|penSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|adjust
argument_list|(
operator|-
name|penSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
block|{
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|color
argument_list|,
name|penSize
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Corner
name|rect
operator|.
name|adjust
argument_list|(
operator|-
name|penSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|color
argument_list|,
name|penSize
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
comment|//Hack to get rid of some double lines... StyleOptions need a clean flag for that
name|rect
operator|=
name|option
operator|->
name|rect
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SCROLLAREA
if|if
condition|(
specifier|const
name|QAbstractScrollArea
modifier|*
name|abstractScrollArea
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|QRect
name|rectScrollArea
init|=
name|abstractScrollArea
operator|->
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|Qt
operator|::
name|Horizontal
operator|==
name|header
operator|->
name|orientation
condition|)
if|if
condition|(
operator|(
name|rectScrollArea
operator|.
name|right
argument_list|()
operator|-
name|rect
operator|.
name|right
argument_list|()
operator|)
operator|>
literal|1
condition|)
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|topRight
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
else|else
empty_stmt|;
elseif|else
if|if
condition|(
operator|(
name|rectScrollArea
operator|.
name|bottom
argument_list|()
operator|-
name|rect
operator|.
name|bottom
argument_list|()
operator|)
operator|>
literal|1
condition|)
name|painter
operator|->
name|drawLine
argument_list|(
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_SCROLLAREA
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CE_ComboBoxLabel
case|:
comment|// This is copied from qcommonstyle.cpp with the difference, that
comment|// the editRect isn't adjusted when calling drawItemText.
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|editRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|cb
argument_list|,
name|SC_ComboBoxEditField
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
name|editRect
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cb
operator|->
name|currentIcon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|cb
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|QIcon
operator|::
name|Normal
else|:
name|QIcon
operator|::
name|Disabled
decl_stmt|;
name|QPixmap
name|pixmap
init|=
name|cb
operator|->
name|currentIcon
operator|.
name|pixmap
argument_list|(
name|cb
operator|->
name|iconSize
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|QRect
name|iconRect
argument_list|(
name|editRect
argument_list|)
decl_stmt|;
name|iconRect
operator|.
name|setWidth
argument_list|(
name|cb
operator|->
name|iconSize
operator|.
name|width
argument_list|()
operator|+
literal|4
argument_list|)
expr_stmt|;
name|iconRect
operator|=
name|alignedRect
argument_list|(
name|cb
operator|->
name|direction
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|,
name|iconRect
operator|.
name|size
argument_list|()
argument_list|,
name|editRect
argument_list|)
expr_stmt|;
if|if
condition|(
name|cb
operator|->
name|editable
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|iconRect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawItemPixmap
argument_list|(
name|painter
argument_list|,
name|iconRect
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|cb
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|editRect
operator|.
name|translate
argument_list|(
operator|-
literal|4
operator|-
name|cb
operator|->
name|iconSize
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|editRect
operator|.
name|translate
argument_list|(
name|cb
operator|->
name|iconSize
operator|.
name|width
argument_list|()
operator|+
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cb
operator|->
name|currentText
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|cb
operator|->
name|editable
condition|)
block|{
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|editRect
argument_list|,
name|visualAlignment
argument_list|(
name|cb
operator|->
name|direction
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
argument_list|,
name|cb
operator|->
name|palette
argument_list|,
name|cb
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|cb
operator|->
name|currentText
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
case|case
name|CE_DockWidgetTitle
case|:
if|if
condition|(
specifier|const
name|QStyleOptionDockWidget
modifier|*
name|dwOpt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidget
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|QStyleOptionDockWidgetV2
modifier|*
name|v2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidgetV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|bool
name|verticalTitleBar
init|=
name|v2
operator|==
literal|0
condition|?
literal|false
else|:
name|v2
operator|->
name|verticalTitleBar
decl_stmt|;
name|QRect
name|rect
init|=
name|dwOpt
operator|->
name|rect
decl_stmt|;
name|QRect
name|r
init|=
name|rect
decl_stmt|;
if|if
condition|(
name|verticalTitleBar
condition|)
block|{
name|QSize
name|s
init|=
name|r
operator|.
name|size
argument_list|()
decl_stmt|;
name|s
operator|.
name|transpose
argument_list|()
expr_stmt|;
name|r
operator|.
name|setSize
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
operator|-
name|r
operator|.
name|left
argument_list|()
argument_list|,
operator|-
name|r
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bool
name|floating
init|=
literal|false
decl_stmt|;
name|bool
name|active
init|=
name|dwOpt
operator|->
name|state
operator|&
name|State_Active
decl_stmt|;
name|int
name|menuOffset
init|=
literal|0
decl_stmt|;
comment|//used to center text when floated
name|QColor
name|inactiveCaptionTextColor
init|=
name|option
operator|->
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
if|if
condition|(
name|dwOpt
operator|->
name|movable
condition|)
block|{
name|QColor
name|left
decl_stmt|,
name|right
decl_stmt|;
comment|//Titlebar gradient
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|floating
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|active
condition|)
block|{
name|right
operator|=
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|left
operator|=
name|right
operator|.
name|lighter
argument_list|(
literal|125
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|left
operator|=
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|lighter
argument_list|(
literal|125
argument_list|)
expr_stmt|;
name|right
operator|=
name|QColor
argument_list|(
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|)
expr_stmt|;
block|}
name|menuOffset
operator|=
literal|2
expr_stmt|;
name|QBrush
name|fillBrush
argument_list|(
name|left
argument_list|)
decl_stmt|;
if|if
condition|(
name|left
operator|!=
name|right
condition|)
block|{
name|QPoint
name|p1
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|QPoint
name|p2
argument_list|(
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|QLinearGradient
name|lg
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
decl_stmt|;
name|lg
operator|.
name|setColorAt
argument_list|(
literal|0
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|lg
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|fillBrush
operator|=
name|lg
expr_stmt|;
block|}
name|painter
operator|->
name|fillRect
argument_list|(
name|r
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|fillBrush
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|r
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setPen
argument_list|(
name|dwOpt
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|widget
operator|||
operator|!
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|painter
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|dwOpt
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|r
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|dwOpt
operator|->
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFont
name|oldFont
init|=
name|painter
operator|->
name|font
argument_list|()
decl_stmt|;
name|QFont
name|newFont
init|=
name|oldFont
decl_stmt|;
if|if
condition|(
name|newFont
operator|.
name|pointSize
argument_list|()
operator|>
literal|2
condition|)
name|newFont
operator|.
name|setPointSize
argument_list|(
name|newFont
operator|.
name|pointSize
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|floating
condition|)
name|newFont
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setFont
argument_list|(
name|newFont
argument_list|)
expr_stmt|;
name|QPalette
name|palette
init|=
name|dwOpt
operator|->
name|palette
decl_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|inactiveCaptionTextColor
argument_list|)
expr_stmt|;
name|QRect
name|titleRect
init|=
name|proxy
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|SE_DockWidgetTitleBarText
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|verticalTitleBar
condition|)
block|{
name|titleRect
operator|=
name|QRect
argument_list|(
name|r
operator|.
name|left
argument_list|()
operator|+
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|titleRect
operator|.
name|bottom
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|titleRect
operator|.
name|left
argument_list|()
operator|-
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|titleRect
operator|.
name|height
argument_list|()
argument_list|,
name|titleRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|titleRect
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|palette
argument_list|,
name|dwOpt
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|dwOpt
operator|->
name|title
argument_list|,
name|floating
condition|?
operator|(
name|active
condition|?
name|QPalette
operator|::
name|BrightText
else|:
name|QPalette
operator|::
name|Window
operator|)
else|:
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setFont
argument_list|(
name|oldFont
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verticalTitleBar
condition|)
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
return|return;
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
case|case
name|CE_PushButtonLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QRect
name|ir
init|=
name|button
operator|->
name|rect
decl_stmt|;
name|QPalette
operator|::
name|ColorRole
name|colorRole
decl_stmt|;
name|uint
name|tf
init|=
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
decl_stmt|;
if|if
condition|(
operator|!
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|button
argument_list|,
name|widget
argument_list|)
condition|)
name|tf
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
if|if
condition|(
name|button
operator|->
name|state
operator|&
operator|(
name|State_On
operator||
name|State_Sunken
operator|)
condition|)
name|colorRole
operator|=
name|QPalette
operator|::
name|Light
expr_stmt|;
else|else
name|colorRole
operator|=
name|QPalette
operator|::
name|ButtonText
expr_stmt|;
if|if
condition|(
operator|!
name|button
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|button
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|QIcon
operator|::
name|Normal
else|:
name|QIcon
operator|::
name|Disabled
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|QIcon
operator|::
name|Normal
operator|&&
name|button
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|mode
operator|=
name|QIcon
operator|::
name|Active
expr_stmt|;
name|QIcon
operator|::
name|State
name|state
init|=
name|QIcon
operator|::
name|Off
decl_stmt|;
if|if
condition|(
name|button
operator|->
name|state
operator|&
name|State_On
condition|)
name|state
operator|=
name|QIcon
operator|::
name|On
expr_stmt|;
name|QPixmap
name|pixmap
init|=
name|button
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|button
operator|->
name|iconSize
argument_list|,
name|mode
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|int
name|pixw
init|=
name|pixmap
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|pixh
init|=
name|pixmap
operator|.
name|height
argument_list|()
decl_stmt|;
comment|//Center the icon if there is no text
name|QPoint
name|point
decl_stmt|;
if|if
condition|(
name|button
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|point
operator|=
name|QPoint
argument_list|(
name|ir
operator|.
name|x
argument_list|()
operator|+
name|ir
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|-
name|pixw
operator|/
literal|2
argument_list|,
name|ir
operator|.
name|y
argument_list|()
operator|+
name|ir
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
name|pixh
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|point
operator|=
name|QPoint
argument_list|(
name|ir
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|,
name|ir
operator|.
name|y
argument_list|()
operator|+
name|ir
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
name|pixh
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|button
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|point
operator|.
name|rx
argument_list|()
operator|+=
name|pixw
expr_stmt|;
if|if
condition|(
operator|(
name|button
operator|->
name|state
operator|&
operator|(
name|State_On
operator||
name|State_Sunken
operator|)
operator|)
operator|&&
name|button
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|point
operator|.
name|rx
argument_list|()
operator|-=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ButtonShiftHorizontal
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|*
literal|2
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|visualPos
argument_list|(
name|button
operator|->
name|direction
argument_list|,
name|button
operator|->
name|rect
argument_list|,
name|point
argument_list|)
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|button
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|ir
operator|.
name|translate
argument_list|(
operator|-
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|ir
operator|.
name|translate
argument_list|(
name|pixw
operator|+
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ir
operator|.
name|setWidth
argument_list|(
name|ir
operator|.
name|width
argument_list|()
operator|-
operator|(
name|pixw
operator|+
literal|4
operator|)
argument_list|)
expr_stmt|;
comment|// left-align text if there is
if|if
condition|(
operator|!
name|button
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|tf
operator||=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
block|}
else|else
block|{
name|tf
operator||=
name|Qt
operator|::
name|AlignHCenter
expr_stmt|;
block|}
if|if
condition|(
name|button
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|ir
argument_list|,
name|tf
argument_list|,
name|button
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
name|button
operator|->
name|text
argument_list|,
name|colorRole
argument_list|)
expr_stmt|;
else|else
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|ir
argument_list|,
name|tf
argument_list|,
name|button
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
name|button
operator|->
name|text
argument_list|,
name|QPalette
operator|::
name|Mid
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|function|drawComplexControl
name|void
name|QWindowsMobileStyle
operator|::
name|drawComplexControl
parameter_list|(
name|ComplexControl
name|control
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|painter
operator|->
name|setClipping
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QWindowsMobileStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsMobileStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|control
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|CC_Slider
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|thickness
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderControlThickness
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|ticks
init|=
name|slider
operator|->
name|tickPosition
decl_stmt|;
name|QRect
name|groove
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_Slider
argument_list|,
name|slider
argument_list|,
name|SC_SliderGroove
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|handle
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_Slider
argument_list|,
name|slider
argument_list|,
name|SC_SliderHandle
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|slider
operator|->
name|subControls
operator|&
name|SC_SliderGroove
operator|)
operator|&&
name|groove
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|mid
init|=
name|thickness
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksAbove
condition|)
name|mid
operator|+=
name|len
operator|/
literal|8
expr_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksBelow
condition|)
name|mid
operator|-=
name|len
operator|/
literal|8
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|slider
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|groove
operator|.
name|x
argument_list|()
argument_list|,
name|groove
operator|.
name|y
argument_list|()
operator|+
name|mid
operator|-
literal|2
argument_list|,
name|groove
operator|.
name|width
argument_list|()
argument_list|,
literal|4
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|groove
operator|.
name|x
argument_list|()
operator|+
name|mid
operator|-
literal|2
argument_list|,
name|groove
operator|.
name|y
argument_list|()
argument_list|,
literal|4
argument_list|,
name|groove
operator|.
name|height
argument_list|()
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|slider
operator|->
name|subControls
operator|&
name|SC_SliderTickmarks
condition|)
block|{
name|QStyleOptionSlider
name|tmpSlider
init|=
operator|*
name|slider
decl_stmt|;
name|tmpSlider
operator|.
name|subControls
operator|=
name|SC_SliderTickmarks
expr_stmt|;
name|QCommonStyle
operator|::
name|drawComplexControl
argument_list|(
name|control
argument_list|,
operator|&
name|tmpSlider
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|slider
operator|->
name|subControls
operator|&
name|SC_SliderHandle
condition|)
block|{
specifier|const
name|QColor
name|c0
init|=
name|slider
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
specifier|const
name|QColor
name|c1
init|=
name|slider
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
specifier|const
name|QColor
name|c3
init|=
name|slider
operator|->
name|palette
operator|.
name|midlight
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
specifier|const
name|QColor
name|c4
init|=
name|slider
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|QBrush
name|handleBrush
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Enabled
condition|)
block|{
name|handleBrush
operator|=
name|slider
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleBrush
operator|=
name|QBrush
argument_list|(
name|slider
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|)
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
block|}
name|int
name|x
init|=
name|handle
operator|.
name|x
argument_list|()
decl_stmt|,
name|y
init|=
name|handle
operator|.
name|y
argument_list|()
decl_stmt|,
name|wi
init|=
name|handle
operator|.
name|width
argument_list|()
decl_stmt|,
name|he
init|=
name|handle
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|x1
init|=
name|x
decl_stmt|;
name|int
name|x2
init|=
name|x
operator|+
name|wi
operator|-
literal|1
decl_stmt|;
name|int
name|y1
init|=
name|y
decl_stmt|;
name|int
name|y2
init|=
name|y
operator|+
name|he
operator|-
literal|1
decl_stmt|;
name|Qt
operator|::
name|Orientation
name|orient
init|=
name|slider
operator|->
name|orientation
decl_stmt|;
name|bool
name|tickAbove
init|=
name|slider
operator|->
name|tickPosition
operator|==
name|QSlider
operator|::
name|TicksAbove
decl_stmt|;
name|bool
name|tickBelow
init|=
name|slider
operator|->
name|tickPosition
operator|==
name|QSlider
operator|::
name|TicksBelow
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|slider
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|SE_SliderFocusRect
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fropt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|tickAbove
operator|&&
name|tickBelow
operator|)
operator|||
operator|(
operator|!
name|tickAbove
operator|&&
operator|!
name|tickBelow
operator|)
condition|)
block|{
name|Qt
operator|::
name|BGMode
name|oldMode
init|=
name|painter
operator|->
name|backgroundMode
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setBackgroundMode
argument_list|(
name|Qt
operator|::
name|OpaqueMode
argument_list|)
expr_stmt|;
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|wi
argument_list|,
name|he
argument_list|)
argument_list|,
name|slider
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|handleBrush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBackgroundMode
argument_list|(
name|oldMode
argument_list|)
expr_stmt|;
name|QBrush
name|fill
init|=
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|QRectF
argument_list|(
name|x1
operator|+
literal|2
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
name|x2
operator|-
name|x1
operator|-
literal|3
argument_list|,
name|y2
operator|-
name|y1
operator|-
literal|3
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
return|return;
block|}
name|QSliderDirection
name|dir
decl_stmt|;
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
if|if
condition|(
name|tickAbove
condition|)
name|dir
operator|=
name|SliderUp
expr_stmt|;
else|else
name|dir
operator|=
name|SliderDown
expr_stmt|;
elseif|else
if|if
condition|(
name|tickAbove
condition|)
name|dir
operator|=
name|SliderLeft
expr_stmt|;
else|else
name|dir
operator|=
name|SliderRight
expr_stmt|;
name|QPolygon
name|polygon
decl_stmt|;
name|int
name|d
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|dir
condition|)
block|{
case|case
name|SliderUp
case|:
name|x2
operator|++
expr_stmt|;
name|y1
operator|=
name|y1
operator|+
name|wi
operator|/
literal|2
expr_stmt|;
name|d
operator|=
operator|(
name|wi
operator|+
literal|1
operator|)
operator|/
literal|2
operator|-
literal|1
expr_stmt|;
name|polygon
operator|.
name|setPoints
argument_list|(
literal|5
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|,
name|x1
operator|+
name|d
argument_list|,
name|y1
operator|-
name|d
argument_list|)
expr_stmt|;
break|break;
case|case
name|SliderDown
case|:
name|x2
operator|++
expr_stmt|;
name|y2
operator|=
name|y2
operator|-
name|wi
operator|/
literal|2
expr_stmt|;
name|d
operator|=
operator|(
name|wi
operator|+
literal|1
operator|)
operator|/
literal|2
operator|-
literal|1
expr_stmt|;
name|polygon
operator|.
name|setPoints
argument_list|(
literal|5
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|x1
operator|+
name|d
argument_list|,
name|y2
operator|+
name|d
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
break|break;
case|case
name|SliderLeft
case|:
name|d
operator|=
operator|(
name|he
operator|+
literal|1
operator|)
operator|/
literal|2
operator|-
literal|1
expr_stmt|;
name|x1
operator|=
name|x1
operator|+
name|he
operator|/
literal|2
expr_stmt|;
name|polygon
operator|.
name|setPoints
argument_list|(
literal|5
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
operator|-
name|d
argument_list|,
name|y1
operator|+
name|d
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|y1
operator|--
expr_stmt|;
break|break;
case|case
name|SliderRight
case|:
name|d
operator|=
operator|(
name|he
operator|+
literal|1
operator|)
operator|/
literal|2
operator|-
literal|1
expr_stmt|;
name|x2
operator|=
name|x2
operator|-
name|he
operator|/
literal|2
expr_stmt|;
name|polygon
operator|.
name|setPoints
argument_list|(
literal|5
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
operator|+
name|d
argument_list|,
name|y1
operator|+
name|d
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|y1
operator|--
expr_stmt|;
break|break;
block|}
name|QBrush
name|oldBrush
init|=
name|painter
operator|->
name|brush
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|handleBrush
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|BGMode
name|oldMode
init|=
name|painter
operator|->
name|backgroundMode
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setBackgroundMode
argument_list|(
name|Qt
operator|::
name|OpaqueMode
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPolygon
argument_list|(
name|polygon
argument_list|)
expr_stmt|;
name|QBrush
name|fill
init|=
name|QBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|oldBrush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBackgroundMode
argument_list|(
name|oldMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|QRectF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
name|y1
operator|+
literal|1
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|!=
name|SliderUp
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
name|SliderLeft
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
name|SliderRight
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
name|SliderDown
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|dir
condition|)
block|{
case|case
name|SliderUp
case|:
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|QRectF
argument_list|(
name|x1
operator|+
literal|3
argument_list|,
name|y1
operator|-
name|d
operator|+
literal|2
argument_list|,
name|x2
operator|-
name|x1
operator|-
literal|4
argument_list|,
name|y1
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
operator|+
name|d
argument_list|,
name|y1
operator|-
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
name|wi
operator|-
name|d
operator|-
literal|1
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|d
argument_list|,
name|y1
operator|-
name|d
argument_list|)
expr_stmt|;
name|d
operator|--
expr_stmt|;
break|break;
case|case
name|SliderDown
case|:
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|QRectF
argument_list|(
name|x1
operator|+
literal|3
argument_list|,
name|y2
operator|-
name|d
argument_list|,
name|x2
operator|-
name|x1
operator|-
literal|4
argument_list|,
name|y2
operator|-
literal|8
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|,
name|x1
operator|+
name|d
argument_list|,
name|y2
operator|+
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
name|wi
operator|-
name|d
operator|-
literal|1
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
operator|-
name|d
argument_list|,
name|y2
operator|+
name|d
argument_list|)
expr_stmt|;
name|d
operator|--
expr_stmt|;
break|break;
case|case
name|SliderLeft
case|:
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|QRectF
argument_list|(
name|x1
operator|-
name|d
operator|+
literal|2
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
name|x1
argument_list|,
name|y2
operator|-
name|y1
operator|-
literal|3
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x1
operator|-
name|d
argument_list|,
name|y1
operator|+
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
name|he
operator|-
name|d
operator|-
literal|1
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|,
name|x1
operator|-
name|d
argument_list|,
name|y2
operator|-
name|d
argument_list|)
expr_stmt|;
name|d
operator|--
expr_stmt|;
break|break;
case|case
name|SliderRight
case|:
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|QRectF
argument_list|(
name|x2
operator|-
name|d
operator|-
literal|4
argument_list|,
name|y1
operator|+
literal|2
argument_list|,
name|x2
operator|-
literal|4
argument_list|,
name|y2
operator|-
name|y1
operator|-
literal|3
argument_list|)
argument_list|,
name|fill
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y1
argument_list|,
name|x2
operator|+
name|d
argument_list|,
name|y1
operator|+
name|d
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|d
operator|=
name|he
operator|-
name|d
operator|-
literal|1
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|x2
operator|+
name|d
argument_list|,
name|y2
operator|-
name|d
argument_list|)
expr_stmt|;
name|d
operator|--
expr_stmt|;
break|break;
block|}
block|}
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_SLIDER
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
case|case
name|CC_ScrollBar
case|:
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
block|{
name|QPen
name|pen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|pen
operator|.
name|setWidth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|pen
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|SquareCap
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|scrollbar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|d
operator|->
name|drawScrollbarGroove
argument_list|(
name|painter
argument_list|,
name|scrollbar
argument_list|)
expr_stmt|;
comment|// Make a copy here and reset it for each primitive.
name|QStyleOptionSlider
name|newScrollbar
init|=
operator|*
name|scrollbar
decl_stmt|;
name|State
name|saveFlags
init|=
name|scrollbar
operator|->
name|state
decl_stmt|;
comment|//Check if the scrollbar is part of an abstractItemView and draw the frame according
name|bool
name|drawCompleteFrame
init|=
literal|true
decl_stmt|;
name|bool
name|secondScrollBar
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|widget
condition|)
if|if
condition|(
name|QWidget
modifier|*
name|parent
init|=
name|widget
operator|->
name|parentWidget
argument_list|()
condition|)
block|{
if|if
condition|(
name|QAbstractScrollArea
modifier|*
name|abstractScrollArea
init|=
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
block|{
name|drawCompleteFrame
operator|=
operator|(
name|abstractScrollArea
operator|->
name|frameStyle
argument_list|()
operator|==
name|QFrame
operator|::
name|NoFrame
operator|)
operator|||
operator|(
name|abstractScrollArea
operator|->
name|frameStyle
argument_list|()
operator|==
name|QFrame
operator|::
name|StyledPanel
operator|)
expr_stmt|;
name|secondScrollBar
operator|=
operator|(
name|abstractScrollArea
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|isVisible
argument_list|()
operator|&&
name|abstractScrollArea
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|isVisible
argument_list|()
operator|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_LISTVIEW
if|if
condition|(
name|QListView
modifier|*
name|listView
init|=
name|qobject_cast
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
name|drawCompleteFrame
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|scrollbar
operator|->
name|minimum
operator|==
name|scrollbar
operator|->
name|maximum
condition|)
name|saveFlags
operator||=
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|scrollbar
operator|->
name|subControls
operator|&
name|SC_ScrollBarSubLine
condition|)
block|{
name|newScrollbar
operator|.
name|state
operator|=
name|saveFlags
expr_stmt|;
name|newScrollbar
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|control
argument_list|,
operator|&
name|newScrollbar
argument_list|,
name|SC_ScrollBarSubLine
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|newScrollbar
operator|.
name|rect
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSubLine
operator|)
condition|)
name|newScrollbar
operator|.
name|state
operator|&=
operator|~
operator|(
name|State_Sunken
operator||
name|State_MouseOver
operator|)
expr_stmt|;
name|d
operator|->
name|drawScrollbarHandleUp
argument_list|(
name|painter
argument_list|,
operator|&
name|newScrollbar
argument_list|,
name|drawCompleteFrame
argument_list|,
name|secondScrollBar
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scrollbar
operator|->
name|subControls
operator|&
name|SC_ScrollBarAddLine
condition|)
block|{
name|newScrollbar
operator|.
name|rect
operator|=
name|scrollbar
operator|->
name|rect
expr_stmt|;
name|newScrollbar
operator|.
name|state
operator|=
name|saveFlags
expr_stmt|;
name|newScrollbar
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|control
argument_list|,
operator|&
name|newScrollbar
argument_list|,
name|SC_ScrollBarAddLine
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|newScrollbar
operator|.
name|rect
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarAddLine
operator|)
condition|)
name|newScrollbar
operator|.
name|state
operator|&=
operator|~
operator|(
name|State_Sunken
operator||
name|State_MouseOver
operator|)
expr_stmt|;
name|d
operator|->
name|drawScrollbarHandleDown
argument_list|(
name|painter
argument_list|,
operator|&
name|newScrollbar
argument_list|,
name|drawCompleteFrame
argument_list|,
name|secondScrollBar
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scrollbar
operator|->
name|subControls
operator|&
name|SC_ScrollBarSlider
condition|)
block|{
name|newScrollbar
operator|.
name|rect
operator|=
name|scrollbar
operator|->
name|rect
expr_stmt|;
name|newScrollbar
operator|.
name|state
operator|=
name|saveFlags
expr_stmt|;
name|newScrollbar
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|control
argument_list|,
operator|&
name|newScrollbar
argument_list|,
name|SC_ScrollBarSlider
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|newScrollbar
operator|.
name|rect
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSlider
operator|)
condition|)
name|newScrollbar
operator|.
name|state
operator|&=
operator|~
operator|(
name|State_Sunken
operator||
name|State_MouseOver
operator|)
expr_stmt|;
name|d
operator|->
name|drawScrollbarGrip
argument_list|(
name|painter
argument_list|,
operator|&
name|newScrollbar
argument_list|,
name|option
argument_list|,
name|drawCompleteFrame
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
endif|#
directive|endif
comment|// QT_NO_SCROLLBAR
case|case
name|CC_ToolButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|toolbutton
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|button
decl_stmt|,
name|menuarea
decl_stmt|;
name|bool
name|isTabWidget
init|=
literal|false
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
if|if
condition|(
name|widget
condition|)
if|if
condition|(
name|QWidget
modifier|*
name|parent
init|=
name|widget
operator|->
name|parentWidget
argument_list|()
condition|)
name|isTabWidget
operator|=
operator|(
name|qobject_cast
argument_list|<
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|parentWidget
argument_list|()
argument_list|)
operator|)
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_TABWIDGET
name|button
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|control
argument_list|,
name|toolbutton
argument_list|,
name|SC_ToolButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|menuarea
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|control
argument_list|,
name|toolbutton
argument_list|,
name|SC_ToolButtonMenu
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|State
name|buttonFlags
init|=
name|toolbutton
operator|->
name|state
decl_stmt|;
if|if
condition|(
name|buttonFlags
operator|&
name|State_AutoRaise
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|buttonFlags
operator|&
name|State_MouseOver
operator|)
condition|)
block|{
name|buttonFlags
operator|&=
operator|~
name|State_Raised
expr_stmt|;
block|}
block|}
name|State
name|menuFlags
init|=
name|buttonFlags
decl_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|activeSubControls
operator|&
name|SC_ToolButton
condition|)
name|buttonFlags
operator||=
name|State_Sunken
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|activeSubControls
operator|&
name|SC_ToolButtonMenu
condition|)
name|menuFlags
operator||=
name|State_On
expr_stmt|;
name|QStyleOption
name|tool
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|tool
operator|.
name|palette
operator|=
name|toolbutton
operator|->
name|palette
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|subControls
operator|&
name|SC_ToolButton
condition|)
block|{
name|tool
operator|.
name|rect
operator|=
name|button
expr_stmt|;
name|tool
operator|.
name|state
operator|=
name|buttonFlags
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_PanelButtonTool
argument_list|,
operator|&
name|tool
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toolbutton
operator|->
name|subControls
operator|&
name|SC_ToolButtonMenu
condition|)
block|{
name|tool
operator|.
name|rect
operator|=
name|menuarea
expr_stmt|;
name|tool
operator|.
name|state
operator|=
name|buttonFlags
operator|&
name|State_Enabled
expr_stmt|;
name|QStyleOption
name|toolMenu
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|toolMenu
operator|=
operator|*
name|toolbutton
expr_stmt|;
name|toolMenu
operator|.
name|state
operator|=
name|menuFlags
expr_stmt|;
if|if
condition|(
name|buttonFlags
operator|&
name|State_Sunken
condition|)
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_PanelButtonTool
argument_list|,
operator|&
name|toolMenu
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QStyleOption
name|arrowOpt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|arrowOpt
operator|.
name|rect
operator|=
name|tool
operator|.
name|rect
expr_stmt|;
name|arrowOpt
operator|.
name|palette
operator|=
name|tool
operator|.
name|palette
expr_stmt|;
name|State
name|flags
init|=
name|State_None
decl_stmt|;
if|if
condition|(
name|menuFlags
operator|&
name|State_Enabled
condition|)
name|flags
operator||=
name|State_Enabled
expr_stmt|;
if|if
condition|(
operator|(
name|menuFlags
operator|&
name|State_On
operator|)
operator|&&
operator|!
operator|(
name|buttonFlags
operator|&
name|State_Sunken
operator|)
condition|)
block|{
name|flags
operator||=
name|State_Sunken
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|menuarea
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|arrowOpt
operator|.
name|state
operator|=
name|flags
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|arrowOpt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toolbutton
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|focusRect
decl_stmt|;
name|focusRect
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|toolbutton
argument_list|)
expr_stmt|;
name|focusRect
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|features
operator|&
name|QStyleOptionToolButton
operator|::
name|Menu
condition|)
name|focusRect
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuButtonIndicator
argument_list|,
name|toolbutton
argument_list|,
name|widget
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|focusRect
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|QStyleOptionToolButton
name|label
init|=
operator|*
name|toolbutton
decl_stmt|;
if|if
condition|(
name|isTabWidget
condition|)
name|label
operator|.
name|state
operator|=
name|toolbutton
operator|->
name|state
expr_stmt|;
else|else
name|label
operator|.
name|state
operator|=
name|toolbutton
operator|->
name|state
operator|&
name|State_Enabled
expr_stmt|;
name|int
name|fw
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|label
operator|.
name|rect
operator|=
name|button
operator|.
name|adjusted
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|CE_ToolButtonLabel
argument_list|,
operator|&
name|label
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
case|case
name|CC_GroupBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|groupBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
comment|// Draw frame
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QFont
name|font
init|=
name|painter
operator|->
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|QStyleOptionGroupBox
name|groupBoxFont
init|=
operator|*
name|groupBox
decl_stmt|;
name|groupBoxFont
operator|.
name|fontMetrics
operator|=
name|QFontMetrics
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|QRect
name|textRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
operator|&
name|groupBoxFont
argument_list|,
name|SC_GroupBoxLabel
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|checkBoxRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|option
argument_list|,
name|SC_GroupBoxCheckBox
argument_list|,
name|widget
argument_list|)
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxFrame
condition|)
block|{
name|QStyleOptionFrameV2
name|frame
decl_stmt|;
name|frame
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|groupBox
argument_list|)
expr_stmt|;
name|frame
operator|.
name|features
operator|=
name|groupBox
operator|->
name|features
expr_stmt|;
name|frame
operator|.
name|lineWidth
operator|=
name|groupBox
operator|->
name|lineWidth
expr_stmt|;
name|frame
operator|.
name|midLineWidth
operator|=
name|groupBox
operator|->
name|midLineWidth
expr_stmt|;
name|frame
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|option
argument_list|,
name|SC_GroupBoxFrame
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QRegion
name|region
argument_list|(
name|groupBox
operator|->
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|groupBox
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bool
name|ltr
init|=
name|groupBox
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
decl_stmt|;
name|QRect
name|finalRect
init|=
name|checkBoxRect
operator|.
name|united
argument_list|(
name|textRect
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
condition|)
name|finalRect
operator|.
name|adjust
argument_list|(
name|ltr
condition|?
operator|-
literal|4
else|:
literal|0
argument_list|,
literal|0
argument_list|,
name|ltr
condition|?
literal|0
else|:
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|region
operator|-=
name|finalRect
expr_stmt|;
block|}
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameGroupBox
argument_list|,
operator|&
name|frame
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
comment|// Draw checkbox
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|SC_GroupBoxCheckBox
condition|)
block|{
name|QStyleOptionButton
name|box
decl_stmt|;
name|box
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|groupBox
argument_list|)
expr_stmt|;
name|box
operator|.
name|rect
operator|=
name|checkBoxRect
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorCheckBox
argument_list|,
operator|&
name|box
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
comment|// Draw title
if|if
condition|(
operator|(
name|groupBox
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxLabel
operator|)
operator|&&
operator|!
name|groupBox
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QColor
name|textColor
init|=
name|groupBox
operator|->
name|textColor
decl_stmt|;
if|if
condition|(
name|textColor
operator|.
name|isValid
argument_list|()
condition|)
name|painter
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|setPen
argument_list|(
name|groupBox
operator|->
name|palette
operator|.
name|link
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|groupBox
operator|->
name|palette
operator|.
name|link
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|alignment
init|=
name|int
argument_list|(
name|groupBox
operator|->
name|textAlignment
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_UnderlineShortcut
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
condition|)
name|alignment
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|textRect
argument_list|,
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|AlignHCenter
operator||
name|alignment
argument_list|,
name|groupBox
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
name|groupBox
operator|->
name|text
argument_list|,
name|textColor
operator|.
name|isValid
argument_list|()
condition|?
name|QPalette
operator|::
name|NoRole
else|:
name|QPalette
operator|::
name|Link
argument_list|)
expr_stmt|;
else|else
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|textRect
argument_list|,
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|AlignHCenter
operator||
name|alignment
argument_list|,
name|groupBox
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
name|groupBox
operator|->
name|text
argument_list|,
name|QPalette
operator|::
name|Mid
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|groupBox
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|=
name|textRect
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fropt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_GROUPBOX
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cmb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QBrush
name|editBrush
init|=
name|cmb
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|cmb
operator|->
name|subControls
operator|&
name|SC_ComboBoxFrame
operator|)
operator|&&
name|cmb
operator|->
name|frame
condition|)
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ComboBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
operator|&
name|editBrush
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|editBrush
argument_list|)
expr_stmt|;
name|State
name|flags
init|=
name|State_None
decl_stmt|;
name|QRect
name|ar
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|cmb
argument_list|,
name|SC_ComboBoxArrow
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|option
operator|->
name|state
operator|&
name|State_On
operator|)
condition|)
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|ar
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|cmb
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|ar
operator|.
name|adjust
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|ar
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|flags
operator||=
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_On
condition|)
name|flags
operator||=
name|State_Sunken
expr_stmt|;
name|QStyleOption
name|arrowOpt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|arrowOpt
operator|.
name|rect
operator|=
name|ar
expr_stmt|;
name|arrowOpt
operator|.
name|palette
operator|=
name|cmb
operator|->
name|palette
expr_stmt|;
name|arrowOpt
operator|.
name|state
operator|=
name|flags
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PrimitiveElement
argument_list|(
name|PE_IndicatorArrowDownBig
argument_list|)
argument_list|,
operator|&
name|arrowOpt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmb
operator|->
name|subControls
operator|&
name|SC_ComboBoxEditField
condition|)
block|{
name|QRect
name|re
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|cmb
argument_list|,
name|SC_ComboBoxEditField
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmb
operator|->
name|state
operator|&
name|State_HasFocus
operator|&&
operator|!
name|cmb
operator|->
name|editable
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|re
operator|.
name|x
argument_list|()
argument_list|,
name|re
operator|.
name|y
argument_list|()
argument_list|,
name|re
operator|.
name|width
argument_list|()
argument_list|,
name|re
operator|.
name|height
argument_list|()
argument_list|,
name|cmb
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmb
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBackground
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|highlight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBackground
argument_list|(
name|cmb
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmb
operator|->
name|state
operator|&
name|State_HasFocus
operator|&&
operator|!
name|cmb
operator|->
name|editable
condition|)
block|{
name|QStyleOptionFocusRect
name|focus
decl_stmt|;
name|focus
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|cmb
argument_list|)
expr_stmt|;
name|focus
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|SE_ComboBoxFocusRect
argument_list|,
name|cmb
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|focus
operator|.
name|state
operator||=
name|State_FocusAtBorder
expr_stmt|;
name|focus
operator|.
name|backgroundColor
operator|=
name|cmb
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|option
operator|->
name|state
operator|&
name|State_On
operator|)
condition|)
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|focus
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOptionSpinBox
name|copy
init|=
operator|*
name|spinBox
decl_stmt|;
comment|//PrimitiveElement primitiveElement;
name|int
name|primitiveElement
decl_stmt|;
if|if
condition|(
name|spinBox
operator|->
name|frame
operator|&&
operator|(
name|spinBox
operator|->
name|subControls
operator|&
name|SC_SpinBoxFrame
operator|)
condition|)
block|{
name|QRect
name|r
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|spinBox
argument_list|,
name|SC_SpinBoxFrame
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|r
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|QPalette
name|shadePal
argument_list|(
name|option
operator|->
name|palette
argument_list|)
decl_stmt|;
name|shadePal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|shadePal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|spinBox
operator|->
name|subControls
operator|&
name|SC_SpinBoxUp
condition|)
block|{
name|copy
operator|.
name|subControls
operator|=
name|SC_SpinBoxUp
expr_stmt|;
name|QPalette
name|pal2
init|=
name|spinBox
operator|->
name|palette
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|spinBox
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepUpEnabled
operator|)
condition|)
block|{
name|pal2
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Enabled
expr_stmt|;
block|}
name|copy
operator|.
name|palette
operator|=
name|pal2
expr_stmt|;
if|if
condition|(
name|spinBox
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxUp
operator|&&
operator|(
name|spinBox
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
block|{
name|copy
operator|.
name|state
operator||=
name|State_On
expr_stmt|;
name|copy
operator|.
name|state
operator||=
name|State_Sunken
expr_stmt|;
block|}
else|else
block|{
name|copy
operator|.
name|state
operator||=
name|State_Raised
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Sunken
expr_stmt|;
block|}
name|primitiveElement
operator|=
operator|(
name|spinBox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|PlusMinus
condition|?
name|PE_IndicatorArrowUpBig
else|:
name|PE_IndicatorArrowUpBig
operator|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|spinBox
argument_list|,
name|SC_SpinBoxUp
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|copy
operator|.
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
condition|)
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|copy
operator|.
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
operator|&
name|copy
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|copy
operator|.
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
operator|&
name|copy
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
argument_list|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|.
name|adjust
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|-
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PrimitiveElement
argument_list|(
name|primitiveElement
argument_list|)
argument_list|,
operator|&
name|copy
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spinBox
operator|->
name|subControls
operator|&
name|SC_SpinBoxDown
condition|)
block|{
name|copy
operator|.
name|subControls
operator|=
name|SC_SpinBoxDown
expr_stmt|;
name|copy
operator|.
name|state
operator|=
name|spinBox
operator|->
name|state
expr_stmt|;
name|QPalette
name|pal2
init|=
name|spinBox
operator|->
name|palette
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|spinBox
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepDownEnabled
operator|)
condition|)
block|{
name|pal2
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Enabled
expr_stmt|;
block|}
name|copy
operator|.
name|palette
operator|=
name|pal2
expr_stmt|;
if|if
condition|(
name|spinBox
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxDown
operator|&&
operator|(
name|spinBox
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
block|{
name|copy
operator|.
name|state
operator||=
name|State_On
expr_stmt|;
name|copy
operator|.
name|state
operator||=
name|State_Sunken
expr_stmt|;
block|}
else|else
block|{
name|copy
operator|.
name|state
operator||=
name|State_Raised
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Sunken
expr_stmt|;
block|}
name|primitiveElement
operator|=
operator|(
name|spinBox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|PlusMinus
condition|?
name|PE_IndicatorArrowDownBig
else|:
name|PE_IndicatorArrowDownBig
operator|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|spinBox
argument_list|,
name|SC_SpinBoxDown
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|copy
operator|.
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
operator|&
name|copy
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|copy
operator|.
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
condition|)
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|copy
operator|.
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
operator|&
name|copy
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|qDrawPlainRect
argument_list|(
name|painter
argument_list|,
name|copy
operator|.
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
operator|&
name|copy
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
argument_list|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
operator|-
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|primitiveElement
operator|==
name|PE_IndicatorArrowUp
operator|||
name|primitiveElement
operator|==
name|PE_IndicatorArrowDown
condition|)
block|{
name|int
name|frameWidth
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|copy
operator|.
name|rect
operator|=
name|copy
operator|.
name|rect
operator|.
name|adjusted
argument_list|(
name|frameWidth
argument_list|,
name|frameWidth
argument_list|,
operator|-
name|frameWidth
argument_list|,
operator|-
name|frameWidth
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PrimitiveElement
argument_list|(
name|primitiveElement
argument_list|)
argument_list|,
operator|&
name|copy
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PrimitiveElement
argument_list|(
name|primitiveElement
argument_list|)
argument_list|,
operator|&
name|copy
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spinBox
operator|->
name|frame
operator|&&
operator|(
name|spinBox
operator|->
name|subControls
operator|&
name|SC_SpinBoxFrame
operator|)
condition|)
block|{
name|QRect
name|r
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|spinBox
argument_list|,
name|SC_SpinBoxEditField
argument_list|,
name|widget
argument_list|)
decl_stmt|;
block|}
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SPINBOX
default|default:
name|QWindowsStyle
operator|::
name|drawComplexControl
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|function|sizeFromContents
name|QSize
name|QWindowsMobileStyle
operator|::
name|sizeFromContents
parameter_list|(
name|ContentsType
name|type
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QSize
name|newSize
init|=
name|QWindowsStyle
operator|::
name|sizeFromContents
argument_list|(
name|type
argument_list|,
name|option
argument_list|,
name|size
argument_list|,
name|widget
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CT_PushButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|newSize
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|type
argument_list|,
name|option
argument_list|,
name|size
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|int
name|w
init|=
name|newSize
operator|.
name|width
argument_list|()
decl_stmt|,
name|h
init|=
name|newSize
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|defwidth
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|button
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|AutoDefaultButton
condition|)
name|defwidth
operator|=
literal|2
operator|*
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ButtonDefaultIndicator
argument_list|,
name|button
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|int
name|minwidth
init|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|55.0f
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|minheight
init|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|19.0f
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|<
name|minwidth
operator|+
name|defwidth
operator|&&
name|button
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|w
operator|=
name|minwidth
operator|+
name|defwidth
expr_stmt|;
if|if
condition|(
name|h
operator|<
name|minheight
operator|+
name|defwidth
condition|)
name|h
operator|=
name|minheight
operator|+
name|defwidth
expr_stmt|;
name|newSize
operator|=
name|QSize
argument_list|(
name|w
operator|+
literal|4
argument_list|,
name|h
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
case|case
name|CT_GroupBox
case|:
if|if
condition|(
specifier|const
name|QGroupBox
modifier|*
name|grb
init|=
cast|static_cast
argument_list|<
specifier|const
name|QGroupBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|newSize
operator|=
name|size
operator|+
name|QSize
argument_list|(
operator|!
name|grb
operator|->
name|isFlat
argument_list|()
condition|?
literal|16
else|:
literal|0
argument_list|,
operator|!
name|grb
operator|->
name|isFlat
argument_list|()
condition|?
literal|16
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_GROUPBOX
case|case
name|CT_RadioButton
case|:
case|case
name|CT_CheckBox
case|:
name|newSize
operator|=
name|size
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|bool
name|isRadio
init|=
operator|(
name|type
operator|==
name|CT_RadioButton
operator|)
decl_stmt|;
name|QRect
name|irect
init|=
name|visualRect
argument_list|(
name|button
operator|->
name|direction
argument_list|,
name|button
operator|->
name|rect
argument_list|,
name|proxy
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonIndicator
else|:
name|SE_CheckBoxIndicator
argument_list|,
name|button
argument_list|,
name|widget
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|isRadio
condition|?
name|PM_ExclusiveIndicatorHeight
else|:
name|PM_IndicatorHeight
argument_list|,
name|button
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|margins
init|=
operator|(
operator|!
name|button
operator|->
name|icon
operator|.
name|isNull
argument_list|()
operator|&&
name|button
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|0
else|:
literal|10
decl_stmt|;
if|if
condition|(
name|d_func
argument_list|()
operator|->
name|doubleControls
condition|)
name|margins
operator|*=
literal|2
expr_stmt|;
name|newSize
operator|+=
name|QSize
argument_list|(
name|irect
operator|.
name|right
argument_list|()
operator|+
name|margins
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|newSize
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|newSize
operator|.
name|height
argument_list|()
argument_list|,
name|h
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CT_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|comboBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|fw
init|=
name|comboBox
operator|->
name|frame
condition|?
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ComboBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|*
literal|2
else|:
literal|0
decl_stmt|;
name|newSize
operator|=
name|QSize
argument_list|(
name|newSize
operator|.
name|width
argument_list|()
operator|+
name|fw
operator|+
literal|9
argument_list|,
name|newSize
operator|.
name|height
argument_list|()
operator|+
name|fw
argument_list|)
expr_stmt|;
comment|//Nine is a magic Number - See CommonStyle for real magic (23)
block|}
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CT_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|fw
init|=
name|spinBox
operator|->
name|frame
condition|?
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|*
literal|2
else|:
literal|0
decl_stmt|;
name|newSize
operator|=
name|QSize
argument_list|(
name|newSize
operator|.
name|width
argument_list|()
operator|+
name|fw
operator|-
literal|5
argument_list|,
name|newSize
operator|.
name|height
argument_list|()
operator|+
name|fw
operator|-
literal|6
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LINEEDIT
case|case
name|CT_LineEdit
case|:
name|newSize
operator|+=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|CT_ToolButton
case|:
name|newSize
operator|=
name|QSize
argument_list|(
name|newSize
operator|.
name|width
argument_list|()
operator|+
literal|1
argument_list|,
name|newSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_TabBarTab
case|:
if|if
condition|(
name|d_func
argument_list|()
operator|->
name|doubleControls
condition|)
name|newSize
operator|=
name|QSize
argument_list|(
name|newSize
operator|.
name|width
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
else|else
name|newSize
operator|=
name|QSize
argument_list|(
name|newSize
operator|.
name|width
argument_list|()
argument_list|,
literal|21
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_HeaderSection
case|:
name|newSize
operator|+=
name|QSize
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
case|case
name|CT_ItemViewItem
case|:
if|if
condition|(
name|d_func
argument_list|()
operator|->
name|wm65
condition|)
if|if
condition|(
name|d_func
argument_list|()
operator|->
name|doubleControls
condition|)
name|newSize
operator|.
name|setHeight
argument_list|(
literal|46
argument_list|)
expr_stmt|;
else|else
name|newSize
operator|.
name|setHeight
argument_list|(
literal|23
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
comment|//Q_OS_WINCE_WM
endif|#
directive|endif
comment|//QT_NO_ITEMVIEWS
default|default:
break|break;
block|}
return|return
name|newSize
return|;
block|}
DECL|function|subElementRect
name|QRect
name|QWindowsMobileStyle
operator|::
name|subElementRect
parameter_list|(
name|SubElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QWindowsMobileStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsMobileStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|QWindowsStyle
operator|::
name|subElementRect
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
case|case
name|SE_TabWidgetTabBar
case|:
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|rect
operator|.
name|adjust
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|adjust
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
comment|//QT_NO_TABWIDGET
case|case
name|SE_CheckBoxFocusRect
case|:
name|rect
operator|.
name|adjust
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_RadioButtonFocusRect
case|:
name|rect
operator|.
name|adjust
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|SE_SliderFocusRect
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|rect
operator|=
name|slider
operator|->
name|rect
expr_stmt|;
block|}
break|break;
case|case
name|SE_PushButtonFocusRect
case|:
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
name|rect
operator|.
name|adjust
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
comment|// QT_NO_SLIDER
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
case|case
name|SE_ItemViewItemFocusRect
case|:
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
name|d
operator|->
name|wm65
condition|)
name|rect
operator|=
name|QRect
argument_list|()
expr_stmt|;
endif|#
directive|endif
break|break;
endif|#
directive|endif
comment|//QT_NO_ITEMVIEWS
block|}
return|return
name|rect
return|;
block|}
DECL|function|subControlRect
name|QRect
name|QWindowsMobileStyle
operator|::
name|subControlRect
parameter_list|(
name|ComplexControl
name|control
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|SubControl
name|subControl
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QWindowsMobileStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsMobileStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|QCommonStyle
operator|::
name|subControlRect
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|subControl
argument_list|,
name|widget
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|control
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
case|case
name|CC_ScrollBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|scrollbar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|sliderButtonExtent
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ScrollBarExtent
argument_list|,
name|scrollbar
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|float
name|stretchFactor
init|=
literal|1.4f
decl_stmt|;
name|int
name|sliderButtonExtentDir
init|=
name|int
argument_list|(
name|sliderButtonExtent
operator|*
name|stretchFactor
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
name|d
operator|->
name|wm65
condition|)
block|{
name|sliderButtonExtent
operator|=
name|d
operator|->
name|imageScrollbarHandleUp
operator|.
name|width
argument_list|()
expr_stmt|;
name|sliderButtonExtentDir
operator|=
name|d
operator|->
name|imageScrollbarHandleUp
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|//Q_OS_WINCE_WM
name|int
name|sliderlen
decl_stmt|;
name|int
name|maxlen
init|=
operator|(
operator|(
name|scrollbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|scrollbar
operator|->
name|rect
operator|.
name|width
argument_list|()
else|:
name|scrollbar
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|)
operator|-
operator|(
name|sliderButtonExtentDir
operator|*
literal|2
operator|)
decl_stmt|;
comment|// calculate slider length
if|if
condition|(
name|scrollbar
operator|->
name|maximum
operator|!=
name|scrollbar
operator|->
name|minimum
condition|)
block|{
name|uint
name|range
init|=
name|scrollbar
operator|->
name|maximum
operator|-
name|scrollbar
operator|->
name|minimum
decl_stmt|;
name|sliderlen
operator|=
operator|(
name|qint64
argument_list|(
name|scrollbar
operator|->
name|pageStep
argument_list|)
operator|*
name|maxlen
operator|)
operator|/
operator|(
name|range
operator|+
name|scrollbar
operator|->
name|pageStep
operator|)
expr_stmt|;
name|int
name|slidermin
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ScrollBarSliderMin
argument_list|,
name|scrollbar
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|sliderlen
argument_list|<
name|slidermin
operator|||
name|range
argument_list|>
name|INT_MAX
operator|/
literal|2
condition|)
name|sliderlen
operator|=
name|slidermin
expr_stmt|;
if|if
condition|(
name|sliderlen
operator|>
name|maxlen
condition|)
name|sliderlen
operator|=
name|maxlen
expr_stmt|;
block|}
else|else
block|{
name|sliderlen
operator|=
name|maxlen
expr_stmt|;
block|}
name|int
name|sliderstart
init|=
name|sliderButtonExtentDir
operator|+
name|sliderPositionFromValue
argument_list|(
name|scrollbar
operator|->
name|minimum
argument_list|,
name|scrollbar
operator|->
name|maximum
argument_list|,
name|scrollbar
operator|->
name|sliderPosition
argument_list|,
name|maxlen
operator|-
name|sliderlen
argument_list|,
name|scrollbar
operator|->
name|upsideDown
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|smartphone
condition|)
block|{
name|sliderstart
operator|-=
name|sliderButtonExtentDir
expr_stmt|;
name|sliderlen
operator|+=
literal|2
operator|*
name|sliderButtonExtent
expr_stmt|;
block|}
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_ScrollBarSubLine
case|:
comment|// top/left button
if|if
condition|(
name|scrollbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|int
name|buttonWidth
init|=
name|qMin
argument_list|(
name|scrollbar
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|sliderButtonExtentDir
argument_list|)
decl_stmt|;
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|buttonWidth
argument_list|,
name|sliderButtonExtent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|buttonHeight
init|=
name|qMin
argument_list|(
name|scrollbar
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|sliderButtonExtentDir
argument_list|)
decl_stmt|;
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sliderButtonExtent
argument_list|,
name|buttonHeight
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|smartphone
condition|)
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ScrollBarAddLine
case|:
comment|// bottom/right button
if|if
condition|(
name|scrollbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|int
name|buttonWidth
init|=
name|qMin
argument_list|(
name|scrollbar
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|sliderButtonExtentDir
argument_list|)
decl_stmt|;
name|rect
operator|.
name|setRect
argument_list|(
name|scrollbar
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|buttonWidth
argument_list|,
literal|0
argument_list|,
name|buttonWidth
argument_list|,
name|sliderButtonExtent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|buttonHeight
init|=
name|qMin
argument_list|(
name|scrollbar
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|sliderButtonExtentDir
argument_list|)
decl_stmt|;
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
name|scrollbar
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|buttonHeight
argument_list|,
name|sliderButtonExtent
argument_list|,
name|buttonHeight
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|smartphone
condition|)
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ScrollBarSubPage
case|:
comment|// between top/left button and slider
if|if
condition|(
name|scrollbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
if|if
condition|(
name|d
operator|->
name|smartphone
condition|)
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sliderstart
argument_list|,
name|sliderButtonExtent
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|setRect
argument_list|(
name|sliderButtonExtent
argument_list|,
literal|0
argument_list|,
name|sliderstart
operator|-
name|sliderButtonExtent
argument_list|,
name|sliderButtonExtent
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|smartphone
condition|)
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sliderButtonExtent
argument_list|,
name|sliderstart
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
name|sliderButtonExtent
argument_list|,
name|sliderButtonExtent
argument_list|,
name|sliderstart
operator|-
name|sliderButtonExtent
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ScrollBarAddPage
case|:
comment|// between bottom/right button and slider
if|if
condition|(
name|scrollbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
if|if
condition|(
name|d
operator|->
name|smartphone
condition|)
name|rect
operator|.
name|setRect
argument_list|(
name|sliderstart
operator|+
name|sliderlen
argument_list|,
literal|0
argument_list|,
name|maxlen
operator|-
name|sliderstart
operator|-
name|sliderlen
operator|+
literal|2
operator|*
name|sliderButtonExtent
argument_list|,
name|sliderButtonExtent
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|setRect
argument_list|(
name|sliderstart
operator|+
name|sliderlen
argument_list|,
literal|0
argument_list|,
name|maxlen
operator|-
name|sliderstart
operator|-
name|sliderlen
operator|+
name|sliderButtonExtent
argument_list|,
name|sliderButtonExtent
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|smartphone
condition|)
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
name|sliderstart
operator|+
name|sliderlen
argument_list|,
name|sliderButtonExtent
argument_list|,
name|maxlen
operator|-
name|sliderstart
operator|-
name|sliderlen
operator|+
literal|2
operator|*
name|sliderButtonExtent
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
name|sliderstart
operator|+
name|sliderlen
argument_list|,
name|sliderButtonExtent
argument_list|,
name|maxlen
operator|-
name|sliderstart
operator|-
name|sliderlen
operator|+
name|sliderButtonExtent
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ScrollBarGroove
case|:
if|if
condition|(
name|scrollbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|rect
operator|.
name|setRect
argument_list|(
name|sliderButtonExtent
argument_list|,
literal|0
argument_list|,
name|scrollbar
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|sliderButtonExtent
operator|*
literal|2
argument_list|,
name|scrollbar
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
name|sliderButtonExtent
argument_list|,
name|scrollbar
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|scrollbar
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|sliderButtonExtent
operator|*
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ScrollBarSlider
case|:
if|if
condition|(
name|scrollbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|rect
operator|.
name|setRect
argument_list|(
name|sliderstart
argument_list|,
literal|0
argument_list|,
name|sliderlen
argument_list|,
name|sliderButtonExtent
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
name|sliderstart
argument_list|,
name|sliderButtonExtent
argument_list|,
name|sliderlen
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|rect
operator|=
name|visualRect
argument_list|(
name|scrollbar
operator|->
name|direction
argument_list|,
name|scrollbar
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SCROLLBAR
ifndef|#
directive|ifndef
name|QT_NO_TOOLBUTTON
case|case
name|CC_ToolButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|toolButton
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|mbi
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_MenuButtonIndicator
argument_list|,
name|toolButton
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|rect
operator|=
name|toolButton
operator|->
name|rect
expr_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_ToolButton
case|:
if|if
condition|(
operator|(
name|toolButton
operator|->
name|features
operator|&
operator|(
name|QStyleOptionToolButton
operator|::
name|Menu
operator||
name|QStyleOptionToolButton
operator|::
name|PopupDelay
operator|)
operator|)
operator|==
name|QStyleOptionToolButton
operator|::
name|Menu
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|mbi
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ToolButtonMenu
case|:
if|if
condition|(
operator|(
name|toolButton
operator|->
name|features
operator|&
operator|(
name|QStyleOptionToolButton
operator|::
name|Menu
operator||
name|QStyleOptionToolButton
operator|::
name|PopupDelay
operator|)
operator|)
operator|==
name|QStyleOptionToolButton
operator|::
name|Menu
condition|)
name|rect
operator|.
name|adjust
argument_list|(
name|rect
operator|.
name|width
argument_list|()
operator|-
name|mbi
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|rect
operator|=
name|visualRect
argument_list|(
name|toolButton
operator|->
name|direction
argument_list|,
name|toolButton
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_TOOLBUTTON
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|CC_Slider
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|tickOffset
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderTickmarkOffset
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|thickness
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderControlThickness
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_SliderHandle
case|:
block|{
name|int
name|sliderPos
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|bool
name|horizontal
init|=
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
decl_stmt|;
name|sliderPos
operator|=
name|sliderPositionFromValue
argument_list|(
name|slider
operator|->
name|minimum
argument_list|,
name|slider
operator|->
name|maximum
argument_list|,
name|slider
operator|->
name|sliderPosition
argument_list|,
operator|(
name|horizontal
condition|?
name|slider
operator|->
name|rect
operator|.
name|width
argument_list|()
else|:
name|slider
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|)
operator|-
name|len
argument_list|,
name|slider
operator|->
name|upsideDown
argument_list|)
expr_stmt|;
if|if
condition|(
name|horizontal
condition|)
name|rect
operator|.
name|setRect
argument_list|(
name|slider
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|sliderPos
argument_list|,
name|slider
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|tickOffset
argument_list|,
name|len
argument_list|,
name|thickness
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|setRect
argument_list|(
name|slider
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|tickOffset
argument_list|,
name|slider
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|sliderPos
argument_list|,
name|thickness
argument_list|,
name|len
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
name|rect
operator|=
name|visualRect
argument_list|(
name|slider
operator|->
name|direction
argument_list|,
name|slider
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_SLIDER
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|comboBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|x
init|=
name|comboBox
operator|->
name|rect
operator|.
name|x
argument_list|()
decl_stmt|,
name|y
init|=
name|comboBox
operator|->
name|rect
operator|.
name|y
argument_list|()
decl_stmt|,
name|wi
init|=
name|comboBox
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|,
name|he
init|=
name|comboBox
operator|->
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|xpos
init|=
name|x
decl_stmt|;
name|int
name|margin
init|=
name|comboBox
operator|->
name|frame
condition|?
operator|(
name|d
operator|->
name|doubleControls
condition|?
literal|2
else|:
literal|1
operator|)
else|:
literal|0
decl_stmt|;
name|int
name|bmarg
init|=
name|comboBox
operator|->
name|frame
condition|?
operator|(
name|d
operator|->
name|doubleControls
condition|?
literal|2
else|:
literal|1
operator|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|subControl
operator|==
name|SC_ComboBoxArrow
condition|)
name|xpos
operator|+=
name|wi
operator|-
name|int
argument_list|(
operator|(
name|he
operator|-
literal|2
operator|*
name|bmarg
operator|)
operator|*
literal|0.9
argument_list|)
operator|-
name|bmarg
expr_stmt|;
else|else
name|xpos
operator|+=
name|wi
operator|-
operator|(
name|he
operator|-
literal|2
operator|*
name|bmarg
operator|)
operator|-
name|bmarg
expr_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_ComboBoxArrow
case|:
name|rect
operator|.
name|setRect
argument_list|(
name|xpos
argument_list|,
name|y
operator|+
name|bmarg
argument_list|,
name|he
operator|-
literal|2
operator|*
name|bmarg
argument_list|,
name|he
operator|-
literal|2
operator|*
name|bmarg
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ComboBoxEditField
case|:
name|rect
operator|.
name|setRect
argument_list|(
name|x
operator|+
name|margin
argument_list|,
name|y
operator|+
name|margin
argument_list|,
name|wi
operator|-
literal|2
operator|*
name|margin
operator|-
name|int
argument_list|(
operator|(
name|he
operator|-
literal|2
operator|*
name|bmarg
operator|)
operator|*
literal|0.84f
argument_list|)
argument_list|,
name|he
operator|-
literal|2
operator|*
name|margin
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
block|{
if|if
condition|(
name|comboBox
operator|->
name|editable
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|adjust
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|comboBox
operator|->
name|editable
condition|)
block|{
name|rect
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SC_ComboBoxFrame
case|:
name|rect
operator|=
name|comboBox
operator|->
name|rect
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
endif|#
directive|endif
comment|//QT_NO_COMBOBOX
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QSize
name|bs
decl_stmt|;
name|int
name|fw
init|=
name|spinBox
operator|->
name|frame
condition|?
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|spinBox
argument_list|,
name|widget
argument_list|)
else|:
literal|0
decl_stmt|;
name|bs
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|d
operator|->
name|doubleControls
condition|?
literal|28
else|:
literal|14
argument_list|,
operator|(
name|spinBox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1.6 -approximate golden mean
name|bs
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|d
operator|->
name|doubleControls
condition|?
literal|28
else|:
literal|14
argument_list|,
name|qMin
argument_list|(
operator|(
name|bs
operator|.
name|height
argument_list|()
operator|*
literal|7
operator|/
literal|8
operator|)
argument_list|,
operator|(
name|spinBox
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|8
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bs
operator|=
name|bs
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|x
decl_stmt|,
name|lx
decl_stmt|,
name|rx
decl_stmt|;
name|x
operator|=
name|spinBox
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|bs
operator|.
name|width
argument_list|()
operator|*
literal|2
expr_stmt|;
name|lx
operator|=
name|fw
expr_stmt|;
name|rx
operator|=
name|x
operator|-
name|fw
expr_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_SpinBoxUp
case|:
name|rect
operator|=
name|QRect
argument_list|(
name|x
operator|+
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
literal|0
argument_list|,
name|bs
operator|.
name|width
argument_list|()
argument_list|,
name|bs
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_SpinBoxDown
case|:
name|rect
operator|=
name|QRect
argument_list|(
name|x
operator|+
name|bs
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bs
operator|.
name|width
argument_list|()
argument_list|,
name|bs
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_SpinBoxEditField
case|:
if|if
condition|(
name|spinBox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|)
block|{
name|rect
operator|=
name|QRect
argument_list|(
name|lx
argument_list|,
name|fw
argument_list|,
name|spinBox
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
operator|*
name|fw
operator|-
literal|2
argument_list|,
name|spinBox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|fw
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rect
operator|=
name|QRect
argument_list|(
name|lx
argument_list|,
name|fw
argument_list|,
name|rx
operator|-
literal|2
argument_list|,
name|spinBox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|fw
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SC_SpinBoxFrame
case|:
name|rect
operator|=
name|spinBox
operator|->
name|rect
expr_stmt|;
default|default:
break|break;
block|}
name|rect
operator|=
name|visualRect
argument_list|(
name|spinBox
operator|->
name|direction
argument_list|,
name|spinBox
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// Qt_NO_SPINBOX
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
case|case
name|CC_GroupBox
case|:
block|{
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|groupBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_GroupBoxFrame
case|:
comment|// FALL THROUGH
case|case
name|SC_GroupBoxContents
case|:
block|{
name|int
name|topMargin
init|=
literal|0
decl_stmt|;
name|int
name|topHeight
init|=
literal|0
decl_stmt|;
name|int
name|bottomMargin
init|=
literal|0
decl_stmt|;
name|int
name|labelMargin
init|=
literal|2
decl_stmt|;
name|QRect
name|frameRect
init|=
name|groupBox
operator|->
name|rect
decl_stmt|;
name|int
name|verticalAlignment
init|=
name|styleHint
argument_list|(
name|SH_GroupBox_TextLabelVerticalAlignment
argument_list|,
name|groupBox
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|text
operator|.
name|size
argument_list|()
condition|)
block|{
name|topHeight
operator|=
name|groupBox
operator|->
name|fontMetrics
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|verticalAlignment
operator|&
name|Qt
operator|::
name|AlignVCenter
condition|)
name|topMargin
operator|=
name|topHeight
operator|+
literal|5
expr_stmt|;
elseif|else
if|if
condition|(
name|verticalAlignment
operator|&
name|Qt
operator|::
name|AlignTop
condition|)
name|topMargin
operator|=
operator|-
name|topHeight
operator|+
literal|5
expr_stmt|;
block|}
if|if
condition|(
name|subControl
operator|==
name|SC_GroupBoxFrame
condition|)
block|{
name|frameRect
operator|.
name|setTop
argument_list|(
name|topMargin
argument_list|)
expr_stmt|;
name|frameRect
operator|.
name|setBottom
argument_list|(
name|frameRect
operator|.
name|height
argument_list|()
operator|+
name|bottomMargin
argument_list|)
expr_stmt|;
name|rect
operator|=
name|frameRect
expr_stmt|;
break|break;
block|}
name|int
name|frameWidth
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|text
operator|.
name|size
argument_list|()
condition|)
block|{
name|frameWidth
operator|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|groupBox
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|rect
operator|=
name|frameRect
operator|.
name|adjusted
argument_list|(
name|frameWidth
argument_list|,
name|frameWidth
operator|+
name|topHeight
operator|+
name|labelMargin
argument_list|,
operator|-
name|frameWidth
argument_list|,
operator|-
name|frameWidth
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rect
operator|=
name|groupBox
operator|->
name|rect
expr_stmt|;
block|}
break|break;
block|}
case|case
name|SC_GroupBoxCheckBox
case|:
comment|// FALL THROUGH
case|case
name|SC_GroupBoxLabel
case|:
block|{
name|QFontMetrics
name|fontMetrics
init|=
name|groupBox
operator|->
name|fontMetrics
decl_stmt|;
name|int
name|h
init|=
name|fontMetrics
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|textWidth
init|=
name|fontMetrics
operator|.
name|size
argument_list|(
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|groupBox
operator|->
name|text
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|margX
init|=
operator|(
name|groupBox
operator|->
name|features
operator|&
name|QStyleOptionFrameV2
operator|::
name|Flat
operator|)
condition|?
literal|0
else|:
literal|2
decl_stmt|;
name|int
name|margY
init|=
operator|(
name|groupBox
operator|->
name|features
operator|&
name|QStyleOptionFrameV2
operator|::
name|Flat
operator|)
condition|?
literal|0
else|:
literal|2
decl_stmt|;
name|rect
operator|=
name|groupBox
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|margX
argument_list|,
name|margY
argument_list|,
operator|-
name|margX
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|text
operator|.
name|size
argument_list|()
condition|)
name|rect
operator|.
name|setHeight
argument_list|(
name|h
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|setHeight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|indicatorWidth
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_IndicatorWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|indicatorSpace
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_CheckBoxLabelSpacing
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|-
literal|1
decl_stmt|;
name|bool
name|hasCheckBox
init|=
name|groupBox
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
decl_stmt|;
name|int
name|checkBoxSize
init|=
name|hasCheckBox
condition|?
operator|(
name|indicatorWidth
operator|+
name|indicatorSpace
operator|)
else|:
literal|0
decl_stmt|;
comment|// Adjusted rect for label + indicatorWidth + indicatorSpace
name|QRect
name|totalRect
init|=
name|alignedRect
argument_list|(
name|groupBox
operator|->
name|direction
argument_list|,
name|groupBox
operator|->
name|textAlignment
argument_list|,
name|QSize
argument_list|(
name|textWidth
operator|+
name|checkBoxSize
argument_list|,
name|h
argument_list|)
argument_list|,
name|rect
argument_list|)
decl_stmt|;
comment|// Adjust totalRect if checkbox is set
if|if
condition|(
name|hasCheckBox
condition|)
block|{
name|bool
name|ltr
init|=
name|groupBox
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
decl_stmt|;
name|int
name|left
init|=
literal|2
decl_stmt|;
comment|// Adjust for check box
if|if
condition|(
name|subControl
operator|==
name|SC_GroupBoxCheckBox
condition|)
block|{
name|int
name|indicatorHeight
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_IndicatorHeight
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|left
operator|=
name|ltr
condition|?
name|totalRect
operator|.
name|left
argument_list|()
else|:
operator|(
name|totalRect
operator|.
name|right
argument_list|()
operator|-
name|indicatorWidth
operator|)
expr_stmt|;
name|int
name|top
init|=
name|totalRect
operator|.
name|top
argument_list|()
operator|+
operator|(
name|fontMetrics
operator|.
name|height
argument_list|()
operator|-
name|indicatorHeight
operator|)
operator|/
literal|2
decl_stmt|;
name|totalRect
operator|.
name|setRect
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|indicatorWidth
argument_list|,
name|indicatorHeight
argument_list|)
expr_stmt|;
comment|// Adjust for label
block|}
else|else
block|{
name|left
operator|=
name|ltr
condition|?
operator|(
name|totalRect
operator|.
name|left
argument_list|()
operator|+
name|checkBoxSize
operator|-
literal|2
operator|)
else|:
name|totalRect
operator|.
name|left
argument_list|()
expr_stmt|;
name|totalRect
operator|.
name|setRect
argument_list|(
name|left
argument_list|,
name|totalRect
operator|.
name|top
argument_list|()
argument_list|,
name|totalRect
operator|.
name|width
argument_list|()
operator|-
name|checkBoxSize
argument_list|,
name|totalRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|subControl
operator|==
name|SC_GroupBoxLabel
operator|)
condition|)
name|totalRect
operator|.
name|adjust
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rect
operator|=
name|totalRect
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
block|}
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_GROUPBOX
default|default:
break|break;
block|}
return|return
name|rect
return|;
block|}
DECL|function|standardPalette
name|QPalette
name|QWindowsMobileStyle
operator|::
name|standardPalette
parameter_list|()
specifier|const
block|{
name|QPalette
name|palette
argument_list|(
name|Qt
operator|::
name|black
argument_list|,
name|QColor
argument_list|(
literal|198
argument_list|,
literal|195
argument_list|,
literal|198
argument_list|)
argument_list|,
name|QColor
argument_list|(
literal|222
argument_list|,
literal|223
argument_list|,
literal|222
argument_list|)
argument_list|,
name|QColor
argument_list|(
literal|132
argument_list|,
literal|130
argument_list|,
literal|132
argument_list|)
argument_list|,
name|QColor
argument_list|(
literal|198
argument_list|,
literal|195
argument_list|,
literal|198
argument_list|)
argument_list|,
name|Qt
operator|::
name|black
argument_list|,
name|Qt
operator|::
name|white
argument_list|,
name|Qt
operator|::
name|white
argument_list|,
name|QColor
argument_list|(
literal|198
argument_list|,
literal|195
argument_list|,
literal|198
argument_list|)
argument_list|)
decl_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|QColor
argument_list|(
literal|206
argument_list|,
literal|223
argument_list|,
literal|239
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Link
argument_list|,
name|QColor
argument_list|(
literal|8
argument_list|,
literal|77
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
comment|//Alternate TextColor for labels...
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|QColor
argument_list|(
literal|206
argument_list|,
literal|223
argument_list|,
literal|239
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|QColor
argument_list|(
literal|49
argument_list|,
literal|146
argument_list|,
literal|214
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|QColor
argument_list|(
literal|222
argument_list|,
literal|223
argument_list|,
literal|222
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|,
name|QColor
argument_list|(
literal|132
argument_list|,
literal|130
argument_list|,
literal|132
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Mid
argument_list|,
name|QColor
argument_list|(
literal|189
argument_list|,
literal|190
argument_list|,
literal|189
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|BrightText
argument_list|,
name|QColor
argument_list|(
literal|33
argument_list|,
literal|162
argument_list|,
literal|33
argument_list|)
argument_list|)
expr_stmt|;
comment|//color for ItemView checked indicator (arrow)
return|return
name|palette
return|;
block|}
comment|/*! \reimp */
DECL|function|polish
name|void
name|QWindowsMobileStyle
operator|::
name|polish
parameter_list|(
name|QApplication
modifier|*
name|application
parameter_list|)
block|{
name|QWindowsStyle
operator|::
name|polish
argument_list|(
name|application
argument_list|)
expr_stmt|;
block|}
comment|/*! \reimp */
DECL|function|polish
name|void
name|QWindowsMobileStyle
operator|::
name|polish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|QToolBar
modifier|*
name|toolBar
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|QPalette
name|pal
init|=
name|toolBar
operator|->
name|palette
argument_list|()
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Background
argument_list|,
name|pal
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|toolBar
operator|->
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
comment|//QT_NO_TOOLBAR
name|QWindowsStyle
operator|::
name|polish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
DECL|function|unpolish
name|void
name|QWindowsMobileStyle
operator|::
name|unpolish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QWindowsStyle
operator|::
name|unpolish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
DECL|function|unpolish
name|void
name|QWindowsMobileStyle
operator|::
name|unpolish
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
block|{
name|QWindowsStyle
operator|::
name|unpolish
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
comment|/*! \reimp */
DECL|function|polish
name|void
name|QWindowsMobileStyle
operator|::
name|polish
parameter_list|(
name|QPalette
modifier|&
name|palette
parameter_list|)
block|{
name|QWindowsStyle
operator|::
name|polish
argument_list|(
name|palette
argument_list|)
expr_stmt|;
block|}
DECL|function|pixelMetric
name|int
name|QWindowsMobileStyle
operator|::
name|pixelMetric
parameter_list|(
name|PixelMetric
name|pm
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QWindowsMobileStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsMobileStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|ret
decl_stmt|;
switch|switch
condition|(
name|pm
condition|)
block|{
case|case
name|PM_DefaultTopLevelMargin
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|PM_DefaultLayoutSpacing
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|8
else|:
name|ret
operator|=
literal|4
expr_stmt|;
break|break;
case|case
name|PM_HeaderMargin
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|2
else|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_DefaultChildMargin
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|10
else|:
name|ret
operator|=
literal|5
expr_stmt|;
break|break;
case|case
name|PM_ToolBarSeparatorExtent
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|6
else|:
name|ret
operator|=
literal|3
expr_stmt|;
break|break;
case|case
name|PM_DefaultFrameWidth
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|2
else|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_MenuVMargin
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_MenuHMargin
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_MenuButtonIndicator
case|:
name|ret
operator|=
name|d
operator|->
name|doubleControls
condition|?
literal|24
else|:
literal|14
expr_stmt|;
break|break;
case|case
name|PM_ComboBoxFrameWidth
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|2
else|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_SpinBoxFrameWidth
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|2
else|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_ButtonDefaultIndicator
case|:
case|case
name|PM_ButtonShiftHorizontal
case|:
case|case
name|PM_ButtonShiftVertical
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|2
else|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|PM_TabBarTabShiftHorizontal
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|PM_TabBarTabShiftVertical
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|PM_MaximumDragDistance
case|:
name|ret
operator|=
literal|60
expr_stmt|;
break|break;
case|case
name|PM_TabBarTabVSpace
case|:
name|ret
operator|=
name|d
operator|->
name|doubleControls
condition|?
literal|12
else|:
literal|6
expr_stmt|;
break|break;
case|case
name|PM_TabBarBaseHeight
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|PM_IndicatorWidth
case|:
name|ret
operator|=
name|d
operator|->
name|doubleControls
condition|?
name|windowsMobileIndicatorSize
operator|*
literal|2
else|:
name|windowsMobileIndicatorSize
expr_stmt|;
break|break;
case|case
name|PM_IndicatorHeight
case|:
name|ret
operator|=
name|d
operator|->
name|doubleControls
condition|?
name|windowsMobileIndicatorSize
operator|*
literal|2
else|:
name|windowsMobileIndicatorSize
expr_stmt|;
break|break;
case|case
name|PM_ExclusiveIndicatorWidth
case|:
name|ret
operator|=
name|d
operator|->
name|doubleControls
condition|?
name|windowsMobileExclusiveIndicatorSize
operator|*
literal|2
operator|+
literal|4
else|:
name|windowsMobileExclusiveIndicatorSize
operator|+
literal|2
expr_stmt|;
break|break;
case|case
name|PM_ExclusiveIndicatorHeight
case|:
name|ret
operator|=
name|d
operator|->
name|doubleControls
condition|?
name|windowsMobileExclusiveIndicatorSize
operator|*
literal|2
operator|+
literal|4
else|:
name|windowsMobileExclusiveIndicatorSize
operator|+
literal|2
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|PM_SliderLength
case|:
name|ret
operator|=
name|d
operator|->
name|doubleControls
condition|?
literal|16
else|:
literal|8
expr_stmt|;
break|break;
case|case
name|PM_FocusFrameHMargin
case|:
name|ret
operator|=
name|d
operator|->
name|doubleControls
condition|?
literal|1
else|:
literal|2
expr_stmt|;
break|break;
case|case
name|PM_SliderThickness
case|:
name|ret
operator|=
name|d
operator|->
name|doubleControls
condition|?
name|windowsMobileSliderThickness
operator|*
literal|2
else|:
name|windowsMobileSliderThickness
expr_stmt|;
break|break;
case|case
name|PM_TabBarScrollButtonWidth
case|:
name|ret
operator|=
name|d
operator|->
name|doubleControls
condition|?
literal|14
operator|*
literal|2
else|:
literal|18
expr_stmt|;
break|break;
case|case
name|PM_CheckBoxLabelSpacing
case|:
case|case
name|PM_RadioButtonLabelSpacing
case|:
name|ret
operator|=
name|d
operator|->
name|doubleControls
condition|?
literal|6
operator|*
literal|2
else|:
literal|6
expr_stmt|;
break|break;
comment|// Returns the number of pixels to use for the business part of the
comment|// slider (i.e., the non-tickmark portion). The remaining space is shared
comment|// equally between the tickmark regions.
case|case
name|PM_SliderControlThickness
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|sl
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|int
name|space
init|=
operator|(
name|sl
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|sl
operator|->
name|rect
operator|.
name|height
argument_list|()
else|:
name|sl
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|ticks
init|=
name|sl
operator|->
name|tickPosition
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksAbove
condition|)
operator|++
name|n
expr_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksBelow
condition|)
operator|++
name|n
expr_stmt|;
if|if
condition|(
operator|!
name|n
condition|)
block|{
name|ret
operator|=
name|space
expr_stmt|;
break|break;
block|}
name|int
name|thick
init|=
literal|8
decl_stmt|;
if|if
condition|(
name|ticks
operator|!=
name|QSlider
operator|::
name|TicksBothSides
operator|&&
name|ticks
operator|!=
name|QSlider
operator|::
name|NoTicks
condition|)
name|thick
operator|+=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|,
name|sl
argument_list|,
name|widget
argument_list|)
operator|/
literal|4
expr_stmt|;
name|space
operator|-=
name|thick
expr_stmt|;
if|if
condition|(
name|space
operator|>
literal|0
condition|)
name|thick
operator|+=
operator|(
name|space
operator|*
literal|2
operator|)
operator|/
operator|(
name|n
operator|+
literal|2
operator|)
expr_stmt|;
name|ret
operator|=
name|thick
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
literal|0
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SLIDER
ifndef|#
directive|ifndef
name|QT_NO_MENU
case|case
name|PM_SmallIconSize
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
name|windowsMobileIconSize
operator|*
literal|2
else|:
name|ret
operator|=
name|windowsMobileIconSize
expr_stmt|;
break|break;
case|case
name|PM_ButtonMargin
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|8
else|:
name|ret
operator|=
literal|4
expr_stmt|;
break|break;
case|case
name|PM_LargeIconSize
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|64
else|:
name|ret
operator|=
literal|32
expr_stmt|;
break|break;
case|case
name|PM_IconViewIconSize
case|:
name|ret
operator|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_LargeIconSize
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|PM_ToolBarIconSize
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|2
operator|*
name|windowsMobileIconSize
else|:
name|ret
operator|=
name|windowsMobileIconSize
expr_stmt|;
break|break;
case|case
name|PM_DockWidgetTitleMargin
case|:
name|ret
operator|=
literal|2
expr_stmt|;
break|break;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
else|#
directive|else
case|case
name|PM_DockWidgetFrameWidth
case|:
name|ret
operator|=
literal|4
expr_stmt|;
break|break;
endif|#
directive|endif
comment|// Q_WS_WIN
break|break;
endif|#
directive|endif
comment|// QT_NO_MENU
case|case
name|PM_TitleBarHeight
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|42
else|:
name|ret
operator|=
literal|21
expr_stmt|;
break|break;
case|case
name|PM_ScrollBarSliderMin
case|:
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
name|d
operator|->
name|wm65
condition|)
else|#
directive|else
if|if
condition|(
literal|false
condition|)
endif|#
directive|endif
block|{
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|68
else|:
name|ret
operator|=
literal|34
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|36
else|:
name|ret
operator|=
literal|18
expr_stmt|;
block|}
break|break;
case|case
name|PM_ScrollBarExtent
case|:
block|{
if|if
condition|(
name|d
operator|->
name|smartphone
condition|)
name|ret
operator|=
literal|9
expr_stmt|;
else|else
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|25
else|:
name|ret
operator|=
literal|13
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
name|d
operator|->
name|wm65
condition|)
else|#
directive|else
if|if
condition|(
literal|false
condition|)
endif|#
directive|endif
block|{
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|26
else|:
name|ret
operator|=
literal|13
expr_stmt|;
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_SCROLLAREA
comment|//Check if the scrollbar is part of an abstractItemView and set size according
if|if
condition|(
name|widget
condition|)
if|if
condition|(
name|QWidget
modifier|*
name|parent
init|=
name|widget
operator|->
name|parentWidget
argument_list|()
condition|)
if|if
condition|(
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
if|if
condition|(
name|d
operator|->
name|smartphone
condition|)
name|ret
operator|=
literal|8
expr_stmt|;
else|else
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|24
else|:
name|ret
operator|=
literal|12
expr_stmt|;
endif|#
directive|endif
block|}
break|break;
case|case
name|PM_SplitterWidth
case|:
name|ret
operator|=
name|qMax
argument_list|(
literal|4
argument_list|,
name|QApplication
operator|::
name|globalStrut
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
break|break;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
case|case
name|PM_MDIFrameWidth
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|PM_ToolBarExtensionExtent
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|32
else|:
name|ret
operator|=
literal|16
expr_stmt|;
break|break;
case|case
name|PM_ToolBarItemMargin
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|2
else|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_ToolBarItemSpacing
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|2
else|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_ToolBarHandleExtent
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|16
else|:
name|ret
operator|=
literal|8
expr_stmt|;
break|break;
case|case
name|PM_ButtonIconSize
case|:
name|d
operator|->
name|doubleControls
condition|?
name|ret
operator|=
literal|32
else|:
name|ret
operator|=
literal|16
expr_stmt|;
break|break;
case|case
name|PM_TextCursorWidth
case|:
name|ret
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|PM_TabBar_ScrollButtonOverlap
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
name|ret
operator|=
name|QWindowsStyle
operator|::
name|pixelMetric
argument_list|(
name|pm
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
DECL|function|styleHint
name|int
name|QWindowsMobileStyle
operator|::
name|styleHint
parameter_list|(
name|StyleHint
name|hint
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QStyleHintReturn
modifier|*
name|returnData
parameter_list|)
specifier|const
block|{
name|int
name|ret
decl_stmt|;
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|SH_Menu_MouseTracking
case|:
case|case
name|SH_ComboBox_ListMouseTracking
case|:
case|case
name|SH_EtchDisabledText
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|SH_DitherDisabledText
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|SH_ItemView_ShowDecorationSelected
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
case|case
name|SH_TabWidget_DefaultTabPosition
case|:
name|ret
operator|=
name|QTabWidget
operator|::
name|South
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|SH_ToolBar_Movable
case|:
name|ret
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|SH_ScrollBar_ContextMenu
case|:
name|ret
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|SH_MenuBar_AltKeyNavigation
case|:
name|ret
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|SH_RequestSoftwareInputPanel
case|:
name|ret
operator|=
name|RSIP_OnMouseClick
expr_stmt|;
break|break;
default|default:
name|ret
operator|=
name|QWindowsStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
DECL|function|standardPixmap
name|QPixmap
name|QWindowsMobileStyle
operator|::
name|standardPixmap
parameter_list|(
name|StandardPixmap
name|sp
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QWindowsMobileStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsMobileStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|sp
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_IMAGEFORMAT_XPM
case|case
name|SP_ToolBarHorizontalExtensionButton
case|:
block|{
name|QPixmap
name|pixmap
init|=
name|QCommonStyle
operator|::
name|standardPixmap
argument_list|(
name|sp
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|doubleControls
condition|)
return|return
name|pixmap
operator|.
name|scaledToHeight
argument_list|(
name|pixmap
operator|.
name|height
argument_list|()
operator|*
literal|2
argument_list|)
return|;
else|else
return|return
name|pixmap
return|;
block|}
case|case
name|SP_TitleBarMaxButton
case|:
case|case
name|SP_TitleBarCloseButton
case|:
case|case
name|SP_TitleBarNormalButton
case|:
case|case
name|SP_TitleBarMinButton
case|:
block|{
name|QImage
name|image
decl_stmt|;
switch|switch
condition|(
name|sp
condition|)
block|{
case|case
name|SP_TitleBarMaxButton
case|:
name|image
operator|=
name|d
operator|->
name|imageMaximize
expr_stmt|;
break|break;
case|case
name|SP_TitleBarCloseButton
case|:
name|image
operator|=
name|d
operator|->
name|imageClose
expr_stmt|;
break|break;
case|case
name|SP_TitleBarNormalButton
case|:
name|image
operator|=
name|d
operator|->
name|imageNormalize
expr_stmt|;
break|break;
case|case
name|SP_TitleBarMinButton
case|:
name|image
operator|=
name|d
operator|->
name|imageMinimize
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|option
condition|)
block|{
name|image
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|2
argument_list|,
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|lighter
argument_list|(
literal|150
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|3
argument_list|,
name|option
operator|->
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|)
return|;
block|}
endif|#
directive|endif
default|default:
return|return
name|QWindowsStyle
operator|::
name|standardPixmap
argument_list|(
name|sp
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
block|}
DECL|function|generatedIconPixmap
name|QPixmap
name|QWindowsMobileStyle
operator|::
name|generatedIconPixmap
parameter_list|(
name|QIcon
operator|::
name|Mode
name|iconMode
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|iconMode
condition|)
block|{
case|case
name|QIcon
operator|::
name|Selected
case|:
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
name|d_func
argument_list|()
operator|->
name|wm65
condition|)
return|return
name|pixmap
return|;
endif|#
directive|endif
comment|//Q_OS_WINCE_WM
name|QImage
name|img
init|=
name|pixmap
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|int
name|imgh
init|=
name|img
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|imgw
init|=
name|img
operator|.
name|width
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|imgh
condition|;
name|y
operator|+=
literal|2
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|imgw
condition|;
name|x
operator|+=
literal|2
control|)
block|{
name|QColor
name|c
init|=
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgb
argument_list|()
decl_stmt|;
name|c
operator|.
name|setAlpha
argument_list|(
name|qAlpha
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QRgb
name|pixel
init|=
name|c
operator|.
name|rgba
argument_list|()
decl_stmt|;
name|img
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixel
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img
argument_list|)
return|;
block|}
default|default:
break|break;
block|}
return|return
name|QWindowsStyle
operator|::
name|generatedIconPixmap
argument_list|(
name|iconMode
argument_list|,
name|pixmap
argument_list|,
name|option
argument_list|)
return|;
block|}
DECL|function|doubleControls
name|bool
name|QWindowsMobileStyle
operator|::
name|doubleControls
parameter_list|()
specifier|const
block|{
name|QWindowsMobileStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsMobileStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|doubleControls
return|;
block|}
DECL|function|setDoubleControls
name|void
name|QWindowsMobileStyle
operator|::
name|setDoubleControls
parameter_list|(
name|bool
name|doubleControls
parameter_list|)
block|{
name|QWindowsMobileStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsMobileStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|doubleControls
operator|=
name|doubleControls
expr_stmt|;
block|}
name|QT_END_NAMESPACE
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STYLE_WINDOWSMOBILE
end_comment
end_unit
