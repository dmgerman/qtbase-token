begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSTYLEOPTION_H
end_ifndef
begin_define
DECL|macro|QSTYLEOPTION_H
define|#
directive|define
name|QSTYLEOPTION_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qabstractspinbox.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qicon.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qmatrix.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qslider.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qstyle.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qtabbar.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qtabwidget.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qrubberband.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qframe.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qabstractitemmodel.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QDebug
name|class
name|QDebug
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOption
block|{
name|public
label|:
enum|enum
name|OptionType
block|{
name|SO_Default
block|,
name|SO_FocusRect
block|,
name|SO_Button
block|,
name|SO_Tab
block|,
name|SO_MenuItem
block|,
name|SO_Frame
block|,
name|SO_ProgressBar
block|,
name|SO_ToolBox
block|,
name|SO_Header
block|,
name|SO_DockWidget
block|,
name|SO_ViewItem
block|,
name|SO_TabWidgetFrame
block|,
name|SO_TabBarBase
block|,
name|SO_RubberBand
block|,
name|SO_ToolBar
block|,
name|SO_GraphicsItem
block|,
name|SO_Complex
init|=
literal|0xf0000
block|,
name|SO_Slider
block|,
name|SO_SpinBox
block|,
name|SO_ToolButton
block|,
name|SO_ComboBox
block|,
name|SO_TitleBar
block|,
name|SO_GroupBox
block|,
name|SO_SizeGrip
block|,
name|SO_CustomBase
init|=
literal|0xf00
block|,
name|SO_ComplexCustomBase
init|=
literal|0xf000000
block|}
enum|;
enum|enum
name|StyleOptionType
block|{
name|Type
init|=
name|SO_Default
block|}
enum|;
enum|enum
name|StyleOptionVersion
block|{
name|Version
init|=
literal|1
block|}
enum|;
name|int
name|version
decl_stmt|;
name|int
name|type
decl_stmt|;
name|QStyle
operator|::
name|State
name|state
expr_stmt|;
name|Qt
operator|::
name|LayoutDirection
name|direction
expr_stmt|;
name|QRect
name|rect
decl_stmt|;
name|QFontMetrics
name|fontMetrics
decl_stmt|;
name|QPalette
name|palette
decl_stmt|;
name|QObject
modifier|*
name|styleObject
decl_stmt|;
name|QStyleOption
argument_list|(
argument|int version = QStyleOption::Version
argument_list|,
argument|int type = SO_Default
argument_list|)
empty_stmt|;
name|QStyleOption
argument_list|(
specifier|const
name|QStyleOption
operator|&
name|other
argument_list|)
expr_stmt|;
operator|~
name|QStyleOption
argument_list|()
expr_stmt|;
name|void
name|init
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
specifier|inline
name|void
name|initFrom
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|init
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
name|QStyleOption
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QStyleOption
operator|&
name|other
operator|)
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionFocusRect
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_FocusRect
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;
name|QColor
name|backgroundColor
block|;
name|QStyleOptionFocusRect
argument_list|()
block|;
name|QStyleOptionFocusRect
argument_list|(
specifier|const
name|QStyleOptionFocusRect
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionFocusRect
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionFrame
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_Frame
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|3
block|}
block|;
name|int
name|lineWidth
block|;
name|int
name|midLineWidth
block|;     enum
name|FrameFeature
block|{
name|None
operator|=
literal|0x00
block|,
name|Flat
operator|=
literal|0x01
block|,
name|Rounded
operator|=
literal|0x02
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|FrameFeatures
argument_list|,
argument|FrameFeature
argument_list|)
name|FrameFeatures
name|features
block|;
name|QFrame
operator|::
name|Shape
name|frameShape
block|;
name|QStyleOptionFrame
argument_list|()
block|;
name|QStyleOptionFrame
argument_list|(
specifier|const
name|QStyleOptionFrame
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionFrame
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QStyleOptionFrame::FrameFeatures
argument_list|)
end_macro
begin_typedef
DECL|typedef|QStyleOptionFrameV2
typedef|typedef
name|QStyleOptionFrame
name|QStyleOptionFrameV2
typedef|;
end_typedef
begin_typedef
DECL|typedef|QStyleOptionFrameV3
typedef|typedef
name|QStyleOptionFrame
name|QStyleOptionFrameV3
typedef|;
end_typedef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
end_ifndef
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionTabWidgetFrame
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_TabWidgetFrame
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|2
block|}
block|;
name|int
name|lineWidth
block|;
name|int
name|midLineWidth
block|;
name|QTabBar
operator|::
name|Shape
name|shape
block|;
name|QSize
name|tabBarSize
block|;
name|QSize
name|rightCornerWidgetSize
block|;
name|QSize
name|leftCornerWidgetSize
block|;
name|QRect
name|tabBarRect
block|;
name|QRect
name|selectedTabRect
block|;
name|QStyleOptionTabWidgetFrame
argument_list|()
block|;
specifier|inline
name|QStyleOptionTabWidgetFrame
argument_list|(
specifier|const
name|QStyleOptionTabWidgetFrame
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionTabWidgetFrame
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|QStyleOptionTabWidgetFrameV2
typedef|typedef
name|QStyleOptionTabWidgetFrame
name|QStyleOptionTabWidgetFrameV2
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABWIDGET
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
end_ifndef
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionTabBarBase
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_TabBarBase
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|2
block|}
block|;
name|QTabBar
operator|::
name|Shape
name|shape
block|;
name|QRect
name|tabBarRect
block|;
name|QRect
name|selectedTabRect
block|;
name|bool
name|documentMode
block|;
name|QStyleOptionTabBarBase
argument_list|()
block|;
name|QStyleOptionTabBarBase
argument_list|(
specifier|const
name|QStyleOptionTabBarBase
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionTabBarBase
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|QStyleOptionTabBarBaseV2
typedef|typedef
name|QStyleOptionTabBarBase
name|QStyleOptionTabBarBaseV2
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABBAR
end_comment
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionHeader
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_Header
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;      enum
name|SectionPosition
block|{
name|Beginning
block|,
name|Middle
block|,
name|End
block|,
name|OnlyOneSection
block|}
block|;     enum
name|SelectedPosition
block|{
name|NotAdjacent
block|,
name|NextIsSelected
block|,
name|PreviousIsSelected
block|,
name|NextAndPreviousAreSelected
block|}
block|;     enum
name|SortIndicator
block|{
name|None
block|,
name|SortUp
block|,
name|SortDown
block|}
block|;
name|int
name|section
block|;
name|QString
name|text
block|;
name|Qt
operator|::
name|Alignment
name|textAlignment
block|;
name|QIcon
name|icon
block|;
name|Qt
operator|::
name|Alignment
name|iconAlignment
block|;
name|SectionPosition
name|position
block|;
name|SelectedPosition
name|selectedPosition
block|;
name|SortIndicator
name|sortIndicator
block|;
name|Qt
operator|::
name|Orientation
name|orientation
block|;
name|QStyleOptionHeader
argument_list|()
block|;
name|QStyleOptionHeader
argument_list|(
specifier|const
name|QStyleOptionHeader
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionHeader
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionButton
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_Button
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;      enum
name|ButtonFeature
block|{
name|None
operator|=
literal|0x00
block|,
name|Flat
operator|=
literal|0x01
block|,
name|HasMenu
operator|=
literal|0x02
block|,
name|DefaultButton
operator|=
literal|0x04
block|,
name|AutoDefaultButton
operator|=
literal|0x08
block|,
name|CommandLinkButton
operator|=
literal|0x10
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|ButtonFeatures
argument_list|,
argument|ButtonFeature
argument_list|)
name|ButtonFeatures
name|features
block|;
name|QString
name|text
block|;
name|QIcon
name|icon
block|;
name|QSize
name|iconSize
block|;
name|QStyleOptionButton
argument_list|()
block|;
name|QStyleOptionButton
argument_list|(
specifier|const
name|QStyleOptionButton
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionButton
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QStyleOptionButton::ButtonFeatures
argument_list|)
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
end_ifndef
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionTab
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_Tab
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|3
block|}
block|;      enum
name|TabPosition
block|{
name|Beginning
block|,
name|Middle
block|,
name|End
block|,
name|OnlyOneTab
block|}
block|;     enum
name|SelectedPosition
block|{
name|NotAdjacent
block|,
name|NextIsSelected
block|,
name|PreviousIsSelected
block|}
block|;     enum
name|CornerWidget
block|{
name|NoCornerWidgets
operator|=
literal|0x00
block|,
name|LeftCornerWidget
operator|=
literal|0x01
block|,
name|RightCornerWidget
operator|=
literal|0x02
block|}
block|;     enum
name|TabFeature
block|{
name|None
operator|=
literal|0x00
block|,
name|HasFrame
operator|=
literal|0x01
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|CornerWidgets
argument_list|,
argument|CornerWidget
argument_list|)
name|Q_DECLARE_FLAGS
argument_list|(
argument|TabFeatures
argument_list|,
argument|TabFeature
argument_list|)
name|QTabBar
operator|::
name|Shape
name|shape
block|;
name|QString
name|text
block|;
name|QIcon
name|icon
block|;
name|int
name|row
block|;
name|TabPosition
name|position
block|;
name|SelectedPosition
name|selectedPosition
block|;
name|CornerWidgets
name|cornerWidgets
block|;
name|QSize
name|iconSize
block|;
name|bool
name|documentMode
block|;
name|QSize
name|leftButtonSize
block|;
name|QSize
name|rightButtonSize
block|;
name|TabFeatures
name|features
block|;
name|QStyleOptionTab
argument_list|()
block|;
name|QStyleOptionTab
argument_list|(
specifier|const
name|QStyleOptionTab
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionTab
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QStyleOptionTab::CornerWidgets
argument_list|)
end_macro
begin_typedef
DECL|typedef|QStyleOptionTabV2
typedef|typedef
name|QStyleOptionTab
name|QStyleOptionTabV2
typedef|;
end_typedef
begin_typedef
DECL|typedef|QStyleOptionTabV3
typedef|typedef
name|QStyleOptionTab
name|QStyleOptionTabV3
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABBAR
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
end_ifndef
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionToolBar
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_ToolBar
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;     enum
name|ToolBarPosition
block|{
name|Beginning
block|,
name|Middle
block|,
name|End
block|,
name|OnlyOne
block|}
block|;     enum
name|ToolBarFeature
block|{
name|None
operator|=
literal|0x0
block|,
name|Movable
operator|=
literal|0x1
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|ToolBarFeatures
argument_list|,
argument|ToolBarFeature
argument_list|)
name|ToolBarPosition
name|positionOfLine
block|;
comment|// The toolbar line position
name|ToolBarPosition
name|positionWithinLine
block|;
comment|// The position within a toolbar
name|Qt
operator|::
name|ToolBarArea
name|toolBarArea
block|;
comment|// The toolbar docking area
name|ToolBarFeatures
name|features
block|;
name|int
name|lineWidth
block|;
name|int
name|midLineWidth
block|;
name|QStyleOptionToolBar
argument_list|()
block|;
name|QStyleOptionToolBar
argument_list|(
specifier|const
name|QStyleOptionToolBar
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionToolBar
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QStyleOptionToolBar::ToolBarFeatures
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLBAR
end_comment
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionProgressBar
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_ProgressBar
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|2
block|}
block|;
name|int
name|minimum
block|;
name|int
name|maximum
block|;
name|int
name|progress
block|;
name|QString
name|text
block|;
name|Qt
operator|::
name|Alignment
name|textAlignment
block|;
name|bool
name|textVisible
block|;
name|Qt
operator|::
name|Orientation
name|orientation
block|;
name|bool
name|invertedAppearance
block|;
name|bool
name|bottomToTop
block|;
name|QStyleOptionProgressBar
argument_list|()
block|;
name|QStyleOptionProgressBar
argument_list|(
specifier|const
name|QStyleOptionProgressBar
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionProgressBar
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|QStyleOptionProgressBarV2
typedef|typedef
name|QStyleOptionProgressBar
name|QStyleOptionProgressBarV2
typedef|;
end_typedef
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionMenuItem
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_MenuItem
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;      enum
name|MenuItemType
block|{
name|Normal
block|,
name|DefaultItem
block|,
name|Separator
block|,
name|SubMenu
block|,
name|Scroller
block|,
name|TearOff
block|,
name|Margin
block|,
name|EmptyArea
block|}
block|;     enum
name|CheckType
block|{
name|NotCheckable
block|,
name|Exclusive
block|,
name|NonExclusive
block|}
block|;
name|MenuItemType
name|menuItemType
block|;
name|CheckType
name|checkType
block|;
name|bool
name|checked
block|;
name|bool
name|menuHasCheckableItems
block|;
name|QRect
name|menuRect
block|;
name|QString
name|text
block|;
name|QIcon
name|icon
block|;
name|int
name|maxIconWidth
block|;
name|int
name|tabWidth
block|;
name|QFont
name|font
block|;
name|QStyleOptionMenuItem
argument_list|()
block|;
name|QStyleOptionMenuItem
argument_list|(
specifier|const
name|QStyleOptionMenuItem
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionMenuItem
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionDockWidget
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_DockWidget
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|2
block|}
block|;
name|QString
name|title
block|;
name|bool
name|closable
block|;
name|bool
name|movable
block|;
name|bool
name|floatable
block|;
name|bool
name|verticalTitleBar
block|;
name|QStyleOptionDockWidget
argument_list|()
block|;
name|QStyleOptionDockWidget
argument_list|(
specifier|const
name|QStyleOptionDockWidget
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionDockWidget
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|QStyleOptionDockWidgetV2
typedef|typedef
name|QStyleOptionDockWidget
name|QStyleOptionDockWidgetV2
typedef|;
end_typedef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
end_ifndef
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionViewItem
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_ViewItem
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|4
block|}
block|;      enum
name|Position
block|{
name|Left
block|,
name|Right
block|,
name|Top
block|,
name|Bottom
block|}
block|;
name|Qt
operator|::
name|Alignment
name|displayAlignment
block|;
name|Qt
operator|::
name|Alignment
name|decorationAlignment
block|;
name|Qt
operator|::
name|TextElideMode
name|textElideMode
block|;
name|Position
name|decorationPosition
block|;
name|QSize
name|decorationSize
block|;
name|QFont
name|font
block|;
name|bool
name|showDecorationSelected
block|;      enum
name|ViewItemFeature
block|{
name|None
operator|=
literal|0x00
block|,
name|WrapText
operator|=
literal|0x01
block|,
name|Alternate
operator|=
literal|0x02
block|,
name|HasCheckIndicator
operator|=
literal|0x04
block|,
name|HasDisplay
operator|=
literal|0x08
block|,
name|HasDecoration
operator|=
literal|0x10
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|ViewItemFeatures
argument_list|,
argument|ViewItemFeature
argument_list|)
name|ViewItemFeatures
name|features
block|;
name|QLocale
name|locale
block|;
specifier|const
name|QWidget
operator|*
name|widget
block|;      enum
name|ViewItemPosition
block|{
name|Invalid
block|,
name|Beginning
block|,
name|Middle
block|,
name|End
block|,
name|OnlyOne
block|}
block|;
name|QModelIndex
name|index
block|;
name|Qt
operator|::
name|CheckState
name|checkState
block|;
name|QIcon
name|icon
block|;
name|QString
name|text
block|;
name|ViewItemPosition
name|viewItemPosition
block|;
name|QBrush
name|backgroundBrush
block|;
name|QStyleOptionViewItem
argument_list|()
block|;
name|QStyleOptionViewItem
argument_list|(
specifier|const
name|QStyleOptionViewItem
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionViewItem
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QStyleOptionViewItem::ViewItemFeatures
argument_list|)
end_macro
begin_typedef
DECL|typedef|QStyleOptionViewItemV2
typedef|typedef
name|QStyleOptionViewItem
name|QStyleOptionViewItemV2
typedef|;
end_typedef
begin_typedef
DECL|typedef|QStyleOptionViewItemV3
typedef|typedef
name|QStyleOptionViewItem
name|QStyleOptionViewItemV3
typedef|;
end_typedef
begin_typedef
DECL|typedef|QStyleOptionViewItemV4
typedef|typedef
name|QStyleOptionViewItem
name|QStyleOptionViewItemV4
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ITEMVIEWS
end_comment
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionToolBox
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_ToolBox
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|2
block|}
block|;
name|QString
name|text
block|;
name|QIcon
name|icon
block|;      enum
name|TabPosition
block|{
name|Beginning
block|,
name|Middle
block|,
name|End
block|,
name|OnlyOneTab
block|}
block|;     enum
name|SelectedPosition
block|{
name|NotAdjacent
block|,
name|NextIsSelected
block|,
name|PreviousIsSelected
block|}
block|;
name|TabPosition
name|position
block|;
name|SelectedPosition
name|selectedPosition
block|;
name|QStyleOptionToolBox
argument_list|()
block|;
name|QStyleOptionToolBox
argument_list|(
specifier|const
name|QStyleOptionToolBox
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionToolBox
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|QStyleOptionToolBoxV2
typedef|typedef
name|QStyleOptionToolBox
name|QStyleOptionToolBoxV2
typedef|;
end_typedef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
end_ifndef
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionRubberBand
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_RubberBand
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;
name|QRubberBand
operator|::
name|Shape
name|shape
block|;
name|bool
name|opaque
block|;
name|QStyleOptionRubberBand
argument_list|()
block|;
name|QStyleOptionRubberBand
argument_list|(
specifier|const
name|QStyleOptionRubberBand
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionRubberBand
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_RUBBERBAND
end_comment
begin_comment
comment|// -------------------------- Complex style options -------------------------------
end_comment
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionComplex
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_Complex
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;
name|QStyle
operator|::
name|SubControls
name|subControls
block|;
name|QStyle
operator|::
name|SubControls
name|activeSubControls
block|;
name|QStyleOptionComplex
argument_list|(
argument|int version = QStyleOptionComplex::Version
argument_list|,
argument|int type = SO_Complex
argument_list|)
block|;
name|QStyleOptionComplex
argument_list|(
specifier|const
name|QStyleOptionComplex
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
block|}
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
end_ifndef
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionSlider
range|:
name|public
name|QStyleOptionComplex
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_Slider
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;
name|Qt
operator|::
name|Orientation
name|orientation
block|;
name|int
name|minimum
block|;
name|int
name|maximum
block|;
name|QSlider
operator|::
name|TickPosition
name|tickPosition
block|;
name|int
name|tickInterval
block|;
name|bool
name|upsideDown
block|;
name|int
name|sliderPosition
block|;
name|int
name|sliderValue
block|;
name|int
name|singleStep
block|;
name|int
name|pageStep
block|;
name|qreal
name|notchTarget
block|;
name|bool
name|dialWrapping
block|;
name|QStyleOptionSlider
argument_list|()
block|;
name|QStyleOptionSlider
argument_list|(
specifier|const
name|QStyleOptionSlider
operator|&
name|other
argument_list|)
operator|:
name|QStyleOptionComplex
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionSlider
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SLIDER
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
end_ifndef
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionSpinBox
range|:
name|public
name|QStyleOptionComplex
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_SpinBox
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;
name|QAbstractSpinBox
operator|::
name|ButtonSymbols
name|buttonSymbols
block|;
name|QAbstractSpinBox
operator|::
name|StepEnabled
name|stepEnabled
block|;
name|bool
name|frame
block|;
name|QStyleOptionSpinBox
argument_list|()
block|;
name|QStyleOptionSpinBox
argument_list|(
specifier|const
name|QStyleOptionSpinBox
operator|&
name|other
argument_list|)
operator|:
name|QStyleOptionComplex
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionSpinBox
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SPINBOX
end_comment
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionToolButton
range|:
name|public
name|QStyleOptionComplex
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_ToolButton
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;      enum
name|ToolButtonFeature
block|{
name|None
operator|=
literal|0x00
block|,
name|Arrow
operator|=
literal|0x01
block|,
name|Menu
operator|=
literal|0x04
block|,
name|MenuButtonPopup
operator|=
name|Menu
block|,
name|PopupDelay
operator|=
literal|0x08
block|,
name|HasMenu
operator|=
literal|0x10
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|ToolButtonFeatures
argument_list|,
argument|ToolButtonFeature
argument_list|)
name|ToolButtonFeatures
name|features
block|;
name|QIcon
name|icon
block|;
name|QSize
name|iconSize
block|;
name|QString
name|text
block|;
name|Qt
operator|::
name|ArrowType
name|arrowType
block|;
name|Qt
operator|::
name|ToolButtonStyle
name|toolButtonStyle
block|;
name|QPoint
name|pos
block|;
name|QFont
name|font
block|;
name|QStyleOptionToolButton
argument_list|()
block|;
name|QStyleOptionToolButton
argument_list|(
specifier|const
name|QStyleOptionToolButton
operator|&
name|other
argument_list|)
operator|:
name|QStyleOptionComplex
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionToolButton
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QStyleOptionToolButton::ToolButtonFeatures
argument_list|)
end_macro
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionComboBox
range|:
name|public
name|QStyleOptionComplex
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_ComboBox
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;
name|bool
name|editable
block|;
name|QRect
name|popupRect
block|;
name|bool
name|frame
block|;
name|QString
name|currentText
block|;
name|QIcon
name|currentIcon
block|;
name|QSize
name|iconSize
block|;
name|QStyleOptionComboBox
argument_list|()
block|;
name|QStyleOptionComboBox
argument_list|(
specifier|const
name|QStyleOptionComboBox
operator|&
name|other
argument_list|)
operator|:
name|QStyleOptionComplex
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionComboBox
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionTitleBar
range|:
name|public
name|QStyleOptionComplex
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_TitleBar
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;
name|QString
name|text
block|;
name|QIcon
name|icon
block|;
name|int
name|titleBarState
block|;
name|Qt
operator|::
name|WindowFlags
name|titleBarFlags
block|;
name|QStyleOptionTitleBar
argument_list|()
block|;
name|QStyleOptionTitleBar
argument_list|(
specifier|const
name|QStyleOptionTitleBar
operator|&
name|other
argument_list|)
operator|:
name|QStyleOptionComplex
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionTitleBar
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionGroupBox
range|:
name|public
name|QStyleOptionComplex
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_GroupBox
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;
name|QStyleOptionFrame
operator|::
name|FrameFeatures
name|features
block|;
name|QString
name|text
block|;
name|Qt
operator|::
name|Alignment
name|textAlignment
block|;
name|QColor
name|textColor
block|;
name|int
name|lineWidth
block|;
name|int
name|midLineWidth
block|;
name|QStyleOptionGroupBox
argument_list|()
block|;
name|QStyleOptionGroupBox
argument_list|(
specifier|const
name|QStyleOptionGroupBox
operator|&
name|other
argument_list|)
operator|:
name|QStyleOptionComplex
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionGroupBox
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionSizeGrip
range|:
name|public
name|QStyleOptionComplex
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_SizeGrip
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;
name|Qt
operator|::
name|Corner
name|corner
block|;
name|QStyleOptionSizeGrip
argument_list|()
block|;
name|QStyleOptionSizeGrip
argument_list|(
specifier|const
name|QStyleOptionSizeGrip
operator|&
name|other
argument_list|)
operator|:
name|QStyleOptionComplex
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
name|protected
operator|:
name|QStyleOptionSizeGrip
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleOptionGraphicsItem
range|:
name|public
name|QStyleOption
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SO_GraphicsItem
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;
name|QRectF
name|exposedRect
block|;
name|QMatrix
name|matrix
block|;
name|qreal
name|levelOfDetail
block|;
name|QStyleOptionGraphicsItem
argument_list|()
block|;
name|QStyleOptionGraphicsItem
argument_list|(
specifier|const
name|QStyleOptionGraphicsItem
operator|&
name|other
argument_list|)
operator|:
name|QStyleOption
argument_list|(
argument|Version
argument_list|,
argument|Type
argument_list|)
block|{
operator|*
name|this
operator|=
name|other
block|; }
specifier|static
name|qreal
name|levelOfDetailFromTransform
argument_list|(
specifier|const
name|QTransform
operator|&
name|worldTransform
argument_list|)
block|;
name|protected
operator|:
name|QStyleOptionGraphicsItem
argument_list|(
argument|int version
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qstyleoption_cast
name|T
name|qstyleoption_cast
argument_list|(
argument|const QStyleOption *opt
argument_list|)
block|{
typedef|typedef
name|typename
name|QtPrivate
operator|::
name|remove_cv
operator|<
name|typename
name|QtPrivate
operator|::
name|remove_pointer
operator|<
name|T
operator|>
operator|::
name|type
operator|>
operator|::
name|type
name|Opt
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|opt
operator|&&
name|opt
operator|->
name|version
operator|>=
name|Opt
operator|::
name|Version
operator|&&
operator|(
name|opt
operator|->
name|type
operator|==
name|Opt
operator|::
name|Type
operator|||
name|int
argument_list|(
name|Opt
operator|::
name|Type
argument_list|)
operator|==
name|QStyleOption
operator|::
name|SO_Default
operator|||
operator|(
name|int
argument_list|(
name|Opt
operator|::
name|Type
argument_list|)
operator|==
name|QStyleOption
operator|::
name|SO_Complex
operator|&&
name|opt
operator|->
name|type
operator|>
name|QStyleOption
operator|::
name|SO_Complex
operator|)
operator|)
condition|)
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|opt
operator|)
return|;
end_if
begin_return
return|return
literal|0
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|qstyleoption_cast
name|T
name|qstyleoption_cast
argument_list|(
argument|QStyleOption *opt
argument_list|)
block|{
typedef|typedef
name|typename
name|QtPrivate
operator|::
name|remove_cv
operator|<
name|typename
name|QtPrivate
operator|::
name|remove_pointer
operator|<
name|T
operator|>
operator|::
name|type
operator|>
operator|::
name|type
name|Opt
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|opt
operator|&&
name|opt
operator|->
name|version
operator|>=
name|Opt
operator|::
name|Version
operator|&&
operator|(
name|opt
operator|->
name|type
operator|==
name|Opt
operator|::
name|Type
operator|||
name|int
argument_list|(
name|Opt
operator|::
name|Type
argument_list|)
operator|==
name|QStyleOption
operator|::
name|SO_Default
operator|||
operator|(
name|int
argument_list|(
name|Opt
operator|::
name|Type
argument_list|)
operator|==
name|QStyleOption
operator|::
name|SO_Complex
operator|&&
name|opt
operator|->
name|type
operator|>
name|QStyleOption
operator|::
name|SO_Complex
operator|)
operator|)
condition|)
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|opt
operator|)
return|;
end_if
begin_return
return|return
literal|0
return|;
end_return
begin_comment
unit|}
comment|// -------------------------- QStyleHintReturn -------------------------------
end_comment
begin_decl_stmt
unit|class
name|Q_WIDGETS_EXPORT
name|QStyleHintReturn
block|{
name|public
label|:
enum|enum
name|HintReturnType
block|{
name|SH_Default
init|=
literal|0xf000
block|,
name|SH_Mask
block|,
name|SH_Variant
block|}
enum|;
enum|enum
name|StyleOptionType
block|{
name|Type
init|=
name|SH_Default
block|}
enum|;
enum|enum
name|StyleOptionVersion
block|{
name|Version
init|=
literal|1
block|}
enum|;
name|QStyleHintReturn
argument_list|(
argument|int version = QStyleOption::Version
argument_list|,
argument|int type = SH_Default
argument_list|)
empty_stmt|;
operator|~
name|QStyleHintReturn
argument_list|()
expr_stmt|;
name|int
name|version
decl_stmt|;
name|int
name|type
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleHintReturnMask
range|:
name|public
name|QStyleHintReturn
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SH_Mask
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;
name|QStyleHintReturnMask
argument_list|()
block|;
operator|~
name|QStyleHintReturnMask
argument_list|()
block|;
name|QRegion
name|region
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QStyleHintReturnVariant
range|:
name|public
name|QStyleHintReturn
block|{
name|public
operator|:
expr|enum
name|StyleOptionType
block|{
name|Type
operator|=
name|SH_Variant
block|}
block|;     enum
name|StyleOptionVersion
block|{
name|Version
operator|=
literal|1
block|}
block|;
name|QStyleHintReturnVariant
argument_list|()
block|;
operator|~
name|QStyleHintReturnVariant
argument_list|()
block|;
name|QVariant
name|variant
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qstyleoption_cast
name|T
name|qstyleoption_cast
argument_list|(
argument|const QStyleHintReturn *hint
argument_list|)
block|{
typedef|typedef
name|typename
name|QtPrivate
operator|::
name|remove_cv
operator|<
name|typename
name|QtPrivate
operator|::
name|remove_pointer
operator|<
name|T
operator|>
operator|::
name|type
operator|>
operator|::
name|type
name|Opt
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|hint
operator|&&
name|hint
operator|->
name|version
operator|<=
name|Opt
operator|::
name|Version
operator|&&
operator|(
name|hint
operator|->
name|type
operator|==
name|Opt
operator|::
name|Type
operator|||
name|int
argument_list|(
name|Opt
operator|::
name|Type
argument_list|)
operator|==
name|QStyleHintReturn
operator|::
name|SH_Default
operator|)
condition|)
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|hint
operator|)
return|;
end_if
begin_return
return|return
literal|0
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|qstyleoption_cast
name|T
name|qstyleoption_cast
argument_list|(
argument|QStyleHintReturn *hint
argument_list|)
block|{
typedef|typedef
name|typename
name|QtPrivate
operator|::
name|remove_cv
operator|<
name|typename
name|QtPrivate
operator|::
name|remove_pointer
operator|<
name|T
operator|>
operator|::
name|type
operator|>
operator|::
name|type
name|Opt
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|hint
operator|&&
name|hint
operator|->
name|version
operator|<=
name|Opt
operator|::
name|Version
operator|&&
operator|(
name|hint
operator|->
name|type
operator|==
name|Opt
operator|::
name|Type
operator|||
name|int
argument_list|(
name|Opt
operator|::
name|Type
argument_list|)
operator|==
name|QStyleHintReturn
operator|::
name|SH_Default
operator|)
condition|)
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|hint
operator|)
return|;
end_if
begin_return
return|return
literal|0
return|;
end_return
begin_if
unit|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DEBUG_STREAM
argument_list|)
end_if
begin_expr_stmt
unit|Q_WIDGETS_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|debug
operator|,
specifier|const
name|QStyleOption
operator|::
name|OptionType
operator|&
name|optionType
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_WIDGETS_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|debug
operator|,
specifier|const
name|QStyleOption
operator|&
name|option
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSTYLEOPTION_H
end_comment
end_unit
