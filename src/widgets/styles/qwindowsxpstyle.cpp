begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsxpstyle_p.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsxpstyle_p_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSXP
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_PLUGIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<private/qobject_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformnativeinterface.h>
end_include
begin_include
include|#
directive|include
file|<private/qstylehelper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qpaintengine.h>
end_include
begin_include
include|#
directive|include
file|<qwidget.h>
end_include
begin_include
include|#
directive|include
file|<qbackingstore.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qpixmapcache.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbutton.h>
end_include
begin_include
include|#
directive|include
file|<qtabbar.h>
end_include
begin_include
include|#
directive|include
file|<qcombobox.h>
end_include
begin_include
include|#
directive|include
file|<qscrollbar.h>
end_include
begin_include
include|#
directive|include
file|<qheaderview.h>
end_include
begin_include
include|#
directive|include
file|<qspinbox.h>
end_include
begin_include
include|#
directive|include
file|<qlistview.h>
end_include
begin_include
include|#
directive|include
file|<qstackedwidget.h>
end_include
begin_include
include|#
directive|include
file|<qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbar.h>
end_include
begin_include
include|#
directive|include
file|<qlabel.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// Runtime resolved theme engine function calls
DECL|member|pIsAppThemed
name|QWindowsUxThemeLib
operator|::
name|PtrIsAppThemed
name|QWindowsUxThemeLib
operator|::
name|pIsAppThemed
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pIsThemeActive
name|QWindowsUxThemeLib
operator|::
name|PtrIsThemeActive
name|QWindowsUxThemeLib
operator|::
name|pIsThemeActive
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pOpenThemeData
name|QWindowsUxThemeLib
operator|::
name|PtrOpenThemeData
name|QWindowsUxThemeLib
operator|::
name|pOpenThemeData
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pCloseThemeData
name|QWindowsUxThemeLib
operator|::
name|PtrCloseThemeData
name|QWindowsUxThemeLib
operator|::
name|pCloseThemeData
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pDrawThemeBackground
name|QWindowsUxThemeLib
operator|::
name|PtrDrawThemeBackground
name|QWindowsUxThemeLib
operator|::
name|pDrawThemeBackground
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pDrawThemeBackgroundEx
name|QWindowsUxThemeLib
operator|::
name|PtrDrawThemeBackgroundEx
name|QWindowsUxThemeLib
operator|::
name|pDrawThemeBackgroundEx
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetCurrentThemeName
name|QWindowsUxThemeLib
operator|::
name|PtrGetCurrentThemeName
name|QWindowsUxThemeLib
operator|::
name|pGetCurrentThemeName
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemeBool
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemeBool
name|QWindowsUxThemeLib
operator|::
name|pGetThemeBool
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemeColor
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemeColor
name|QWindowsUxThemeLib
operator|::
name|pGetThemeColor
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemeEnumValue
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemeEnumValue
name|QWindowsUxThemeLib
operator|::
name|pGetThemeEnumValue
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemeFilename
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemeFilename
name|QWindowsUxThemeLib
operator|::
name|pGetThemeFilename
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemeFont
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemeFont
name|QWindowsUxThemeLib
operator|::
name|pGetThemeFont
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemeInt
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemeInt
name|QWindowsUxThemeLib
operator|::
name|pGetThemeInt
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemeIntList
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemeIntList
name|QWindowsUxThemeLib
operator|::
name|pGetThemeIntList
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemeMargins
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemeMargins
name|QWindowsUxThemeLib
operator|::
name|pGetThemeMargins
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemeMetric
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemeMetric
name|QWindowsUxThemeLib
operator|::
name|pGetThemeMetric
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemePartSize
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemePartSize
name|QWindowsUxThemeLib
operator|::
name|pGetThemePartSize
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemePosition
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemePosition
name|QWindowsUxThemeLib
operator|::
name|pGetThemePosition
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemePropertyOrigin
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemePropertyOrigin
name|QWindowsUxThemeLib
operator|::
name|pGetThemePropertyOrigin
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemeRect
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemeRect
name|QWindowsUxThemeLib
operator|::
name|pGetThemeRect
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemeString
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemeString
name|QWindowsUxThemeLib
operator|::
name|pGetThemeString
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemeBackgroundRegion
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemeBackgroundRegion
name|QWindowsUxThemeLib
operator|::
name|pGetThemeBackgroundRegion
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemeDocumentationProperty
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemeDocumentationProperty
name|QWindowsUxThemeLib
operator|::
name|pGetThemeDocumentationProperty
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QWindowsUxThemeLib
operator|::
name|PtrIsThemeBackgroundPartiallyTransparent
DECL|member|pIsThemeBackgroundPartiallyTransparent
name|QWindowsUxThemeLib
operator|::
name|pIsThemeBackgroundPartiallyTransparent
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pSetWindowTheme
name|QWindowsUxThemeLib
operator|::
name|PtrSetWindowTheme
name|QWindowsUxThemeLib
operator|::
name|pSetWindowTheme
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pGetThemeTransitionDuration
name|QWindowsUxThemeLib
operator|::
name|PtrGetThemeTransitionDuration
name|QWindowsUxThemeLib
operator|::
name|pGetThemeTransitionDuration
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|resolveSymbols
name|bool
name|QWindowsUxThemeLib
operator|::
name|resolveSymbols
parameter_list|()
block|{
specifier|static
name|bool
name|tried
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|tried
condition|)
return|return
name|pIsAppThemed
operator|!=
name|Q_NULLPTR
return|;
name|tried
operator|=
literal|true
expr_stmt|;
name|QSystemLibrary
name|themeLib
argument_list|(
name|QLatin1String
argument_list|(
literal|"uxtheme"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|themeLib
operator|.
name|load
argument_list|()
condition|)
return|return
literal|false
return|;
name|pIsAppThemed
operator|=
operator|(
name|PtrIsAppThemed
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"IsAppThemed"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pIsAppThemed
condition|)
return|return
literal|false
return|;
name|pIsThemeActive
operator|=
operator|(
name|PtrIsThemeActive
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"IsThemeActive"
argument_list|)
expr_stmt|;
name|pGetThemePartSize
operator|=
operator|(
name|PtrGetThemePartSize
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemePartSize"
argument_list|)
expr_stmt|;
name|pOpenThemeData
operator|=
operator|(
name|PtrOpenThemeData
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"OpenThemeData"
argument_list|)
expr_stmt|;
name|pCloseThemeData
operator|=
operator|(
name|PtrCloseThemeData
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"CloseThemeData"
argument_list|)
expr_stmt|;
name|pDrawThemeBackground
operator|=
operator|(
name|PtrDrawThemeBackground
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"DrawThemeBackground"
argument_list|)
expr_stmt|;
name|pDrawThemeBackgroundEx
operator|=
operator|(
name|PtrDrawThemeBackgroundEx
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"DrawThemeBackgroundEx"
argument_list|)
expr_stmt|;
name|pGetCurrentThemeName
operator|=
operator|(
name|PtrGetCurrentThemeName
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetCurrentThemeName"
argument_list|)
expr_stmt|;
name|pGetThemeBool
operator|=
operator|(
name|PtrGetThemeBool
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeBool"
argument_list|)
expr_stmt|;
name|pGetThemeColor
operator|=
operator|(
name|PtrGetThemeColor
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeColor"
argument_list|)
expr_stmt|;
name|pGetThemeEnumValue
operator|=
operator|(
name|PtrGetThemeEnumValue
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeEnumValue"
argument_list|)
expr_stmt|;
name|pGetThemeFilename
operator|=
operator|(
name|PtrGetThemeFilename
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeFilename"
argument_list|)
expr_stmt|;
name|pGetThemeFont
operator|=
operator|(
name|PtrGetThemeFont
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeFont"
argument_list|)
expr_stmt|;
name|pGetThemeInt
operator|=
operator|(
name|PtrGetThemeInt
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeInt"
argument_list|)
expr_stmt|;
name|pGetThemeIntList
operator|=
operator|(
name|PtrGetThemeIntList
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeIntList"
argument_list|)
expr_stmt|;
name|pGetThemeMargins
operator|=
operator|(
name|PtrGetThemeMargins
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeMargins"
argument_list|)
expr_stmt|;
name|pGetThemeMetric
operator|=
operator|(
name|PtrGetThemeMetric
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeMetric"
argument_list|)
expr_stmt|;
name|pGetThemePartSize
operator|=
operator|(
name|PtrGetThemePartSize
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemePartSize"
argument_list|)
expr_stmt|;
name|pGetThemePosition
operator|=
operator|(
name|PtrGetThemePosition
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemePosition"
argument_list|)
expr_stmt|;
name|pGetThemePropertyOrigin
operator|=
operator|(
name|PtrGetThemePropertyOrigin
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemePropertyOrigin"
argument_list|)
expr_stmt|;
name|pGetThemeRect
operator|=
operator|(
name|PtrGetThemeRect
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeRect"
argument_list|)
expr_stmt|;
name|pGetThemeString
operator|=
operator|(
name|PtrGetThemeString
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeString"
argument_list|)
expr_stmt|;
name|pGetThemeBackgroundRegion
operator|=
operator|(
name|PtrGetThemeBackgroundRegion
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeBackgroundRegion"
argument_list|)
expr_stmt|;
name|pGetThemeDocumentationProperty
operator|=
operator|(
name|PtrGetThemeDocumentationProperty
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeDocumentationProperty"
argument_list|)
expr_stmt|;
name|pIsThemeBackgroundPartiallyTransparent
operator|=
operator|(
name|PtrIsThemeBackgroundPartiallyTransparent
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"IsThemeBackgroundPartiallyTransparent"
argument_list|)
expr_stmt|;
name|pSetWindowTheme
operator|=
operator|(
name|PtrSetWindowTheme
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"SetWindowTheme"
argument_list|)
expr_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
condition|)
name|pGetThemeTransitionDuration
operator|=
operator|(
name|PtrGetThemeTransitionDuration
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeTransitionDuration"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// General const values
end_comment
begin_decl_stmt
DECL|variable|windowsItemFrame
specifier|static
specifier|const
name|int
name|windowsItemFrame
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsItemFrame
comment|// menu item frame width
end_comment
begin_decl_stmt
DECL|variable|windowsItemHMargin
specifier|static
specifier|const
name|int
name|windowsItemHMargin
init|=
literal|3
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsItemHMargin
comment|// menu item hor text margin
end_comment
begin_decl_stmt
DECL|variable|windowsItemVMargin
specifier|static
specifier|const
name|int
name|windowsItemVMargin
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsItemVMargin
comment|// menu item ver text margin
end_comment
begin_decl_stmt
DECL|variable|windowsArrowHMargin
specifier|static
specifier|const
name|int
name|windowsArrowHMargin
init|=
literal|6
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsArrowHMargin
comment|// arrow horizontal margin
end_comment
begin_decl_stmt
DECL|variable|windowsRightBorder
specifier|static
specifier|const
name|int
name|windowsRightBorder
init|=
literal|12
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsRightBorder
comment|// right border on windows
end_comment
begin_comment
comment|// External function calls
end_comment
begin_function_decl
specifier|extern
name|Q_WIDGETS_EXPORT
name|HDC
name|qt_win_display_dc
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|QRegion
name|qt_region_from_HRGN
parameter_list|(
name|HRGN
name|rgn
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Theme names matching the QWindowsXPStylePrivate::Theme enumeration.
end_comment
begin_decl_stmt
DECL|variable|themeNames
specifier|static
specifier|const
name|wchar_t
modifier|*
name|themeNames
index|[
name|QWindowsXPStylePrivate
operator|::
name|NThemes
index|]
init|=
block|{
literal|L"BUTTON"
block|,
literal|L"COMBOBOX"
block|,
literal|L"EDIT"
block|,
literal|L"HEADER"
block|,
literal|L"LISTVIEW"
block|,
literal|L"MENU"
block|,
literal|L"PROGRESS"
block|,
literal|L"REBAR"
block|,
literal|L"SCROLLBAR"
block|,
literal|L"SPIN"
block|,
literal|L"TAB"
block|,
literal|L"TASKDIALOG"
block|,
literal|L"TOOLBAR"
block|,
literal|L"TOOLTIP"
block|,
literal|L"TRACKBAR"
block|,
literal|L"TREEVIEW"
block|,
literal|L"WINDOW"
block|,
literal|L"STATUS"
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|backingStoreForWidget
specifier|static
specifier|inline
name|QBackingStore
modifier|*
name|backingStoreForWidget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|QBackingStore
modifier|*
name|backingStore
init|=
name|widget
operator|->
name|backingStore
argument_list|()
condition|)
return|return
name|backingStore
return|;
if|if
condition|(
specifier|const
name|QWidget
modifier|*
name|topLevel
init|=
name|widget
operator|->
name|nativeParentWidget
argument_list|()
condition|)
if|if
condition|(
name|QBackingStore
modifier|*
name|topLevelBackingStore
init|=
name|topLevel
operator|->
name|backingStore
argument_list|()
condition|)
return|return
name|topLevelBackingStore
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|hdcForWidgetBackingStore
specifier|static
specifier|inline
name|HDC
name|hdcForWidgetBackingStore
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|QBackingStore
modifier|*
name|backingStore
init|=
name|backingStoreForWidget
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|QPlatformNativeInterface
modifier|*
name|nativeInterface
init|=
name|QGuiApplication
operator|::
name|platformNativeInterface
argument_list|()
decl_stmt|;
return|return
cast|static_cast
argument_list|<
name|HDC
argument_list|>
argument_list|(
name|nativeInterface
operator|->
name|nativeResourceForBackingStore
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"getDC"
argument_list|)
argument_list|,
name|backingStore
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|// Theme data helper ------------------------------------------------------------------------------
end_comment
begin_comment
comment|/* \internal     Returns \c true if the themedata is valid for use. */
end_comment
begin_function
DECL|function|isValid
name|bool
name|XPThemeData
operator|::
name|isValid
parameter_list|()
block|{
return|return
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
operator|&&
name|theme
operator|>=
literal|0
operator|&&
name|handle
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/* \internal     Returns the theme engine handle to the specific class.     If the handle hasn't been opened before, it opens the data, and     adds it to a static map, for caching. */
end_comment
begin_function
DECL|function|handle
name|HTHEME
name|XPThemeData
operator|::
name|handle
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
operator|!
name|htheme
condition|)
name|htheme
operator|=
name|QWindowsXPStylePrivate
operator|::
name|createTheme
argument_list|(
name|theme
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|winId
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|htheme
return|;
block|}
end_function
begin_comment
comment|/* \internal     Converts a QRect to the native RECT structure. */
end_comment
begin_function
DECL|function|toRECT
name|RECT
name|XPThemeData
operator|::
name|toRECT
parameter_list|(
specifier|const
name|QRect
modifier|&
name|qr
parameter_list|)
block|{
name|RECT
name|r
decl_stmt|;
name|r
operator|.
name|left
operator|=
name|qr
operator|.
name|x
argument_list|()
expr_stmt|;
name|r
operator|.
name|right
operator|=
name|qr
operator|.
name|x
argument_list|()
operator|+
name|qr
operator|.
name|width
argument_list|()
expr_stmt|;
name|r
operator|.
name|top
operator|=
name|qr
operator|.
name|y
argument_list|()
expr_stmt|;
name|r
operator|.
name|bottom
operator|=
name|qr
operator|.
name|y
argument_list|()
operator|+
name|qr
operator|.
name|height
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function
begin_comment
comment|/* \internal     Returns the native region of a part, if the part is considered     transparent. The region is scaled to the parts size (rect). */
end_comment
begin_function
DECL|function|mask
name|HRGN
name|XPThemeData
operator|::
name|mask
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|pIsThemeBackgroundPartiallyTransparent
argument_list|(
name|handle
argument_list|()
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|)
condition|)
return|return
literal|0
return|;
name|HRGN
name|hrgn
decl_stmt|;
name|HDC
name|dc
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|widget
condition|)
name|dc
operator|=
name|hdcForWidgetBackingStore
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|RECT
name|nativeRect
init|=
name|toRECT
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|QWindowsXPStylePrivate
operator|::
name|pGetThemeBackgroundRegion
argument_list|(
name|handle
argument_list|()
argument_list|,
name|dc
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
operator|&
name|nativeRect
argument_list|,
operator|&
name|hrgn
argument_list|)
expr_stmt|;
return|return
name|hrgn
return|;
block|}
end_function
begin_comment
comment|// QWindowsXPStylePrivate -------------------------------------------------------------------------
end_comment
begin_comment
comment|// Static initializations
end_comment
begin_decl_stmt
DECL|member|tabbody
name|QPixmap
modifier|*
name|QWindowsXPStylePrivate
operator|::
name|tabbody
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_themes
name|HTHEME
name|QWindowsXPStylePrivate
operator|::
name|m_themes
index|[
name|NThemes
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|use_xp
name|bool
name|QWindowsXPStylePrivate
operator|::
name|use_xp
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|ref
name|QBasicAtomicInt
name|QWindowsXPStylePrivate
operator|::
name|ref
init|=
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
DECL|member|ref
comment|// -1 based refcounting
end_comment
begin_function
DECL|function|qt_add_rect
specifier|static
name|void
name|qt_add_rect
parameter_list|(
name|HRGN
modifier|&
name|winRegion
parameter_list|,
name|QRect
name|r
parameter_list|)
block|{
name|HRGN
name|rgn
init|=
name|CreateRectRgn
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rgn
condition|)
block|{
name|HRGN
name|dest
init|=
name|CreateRectRgn
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|CombineRgn
argument_list|(
name|dest
argument_list|,
name|winRegion
argument_list|,
name|rgn
argument_list|,
name|RGN_OR
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|DeleteObject
argument_list|(
name|winRegion
argument_list|)
expr_stmt|;
name|winRegion
operator|=
name|dest
expr_stmt|;
block|}
name|DeleteObject
argument_list|(
name|rgn
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_hrgn_from_qregion
specifier|static
name|HRGN
name|qt_hrgn_from_qregion
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|HRGN
name|hRegion
init|=
name|CreateRectRgn
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|rectCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|qt_add_rect
argument_list|(
name|hRegion
argument_list|,
name|region
operator|.
name|boundingRect
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|hRegion
return|;
block|}
foreach|foreach
control|(
specifier|const
name|QRect
modifier|&
name|rect
decl|,
name|region
operator|.
name|rects
argument_list|()
control|)
name|qt_add_rect
argument_list|(
name|hRegion
argument_list|,
name|rect
argument_list|)
expr_stmt|;
return|return
name|hRegion
return|;
block|}
end_function
begin_comment
comment|/* \internal     Checks if the theme engine can/should be used, or if we should     fall back to Windows style. */
end_comment
begin_function
DECL|function|useXP
name|bool
name|QWindowsXPStylePrivate
operator|::
name|useXP
parameter_list|(
name|bool
name|update
parameter_list|)
block|{
if|if
condition|(
operator|!
name|update
condition|)
return|return
name|use_xp
return|;
return|return
operator|(
name|use_xp
operator|=
name|QWindowsUxThemeLib
operator|::
name|resolveSymbols
argument_list|()
operator|&&
name|pIsThemeActive
argument_list|()
operator|&&
operator|(
name|pIsAppThemed
argument_list|()
operator|||
operator|!
name|QApplication
operator|::
name|instance
argument_list|()
operator|)
operator|)
return|;
block|}
end_function
begin_comment
comment|/* \internal     Handles refcounting, and queries the theme engine for usage. */
end_comment
begin_function
DECL|function|init
name|void
name|QWindowsXPStylePrivate
operator|::
name|init
parameter_list|(
name|bool
name|force
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|.
name|ref
argument_list|()
operator|&&
operator|!
name|force
condition|)
return|return;
if|if
condition|(
operator|!
name|force
condition|)
comment|// -1 based atomic refcounting
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|useXP
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|std
operator|::
name|fill
argument_list|(
name|m_themes
argument_list|,
name|m_themes
operator|+
name|NThemes
argument_list|,
name|HTHEME
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* \internal     Cleans up all static data. */
end_comment
begin_function
DECL|function|cleanup
name|void
name|QWindowsXPStylePrivate
operator|::
name|cleanup
parameter_list|(
name|bool
name|force
parameter_list|)
block|{
if|if
condition|(
name|bufferBitmap
condition|)
block|{
if|if
condition|(
name|bufferDC
operator|&&
name|nullBitmap
condition|)
name|SelectObject
argument_list|(
name|bufferDC
argument_list|,
name|nullBitmap
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|bufferBitmap
argument_list|)
expr_stmt|;
name|bufferBitmap
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|bufferDC
condition|)
name|DeleteDC
argument_list|(
name|bufferDC
argument_list|)
expr_stmt|;
name|bufferDC
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|ref
operator|.
name|deref
argument_list|()
operator|&&
operator|!
name|force
condition|)
return|return;
if|if
condition|(
operator|!
name|force
condition|)
comment|// -1 based atomic refcounting
name|ref
operator|.
name|deref
argument_list|()
expr_stmt|;
name|use_xp
operator|=
literal|false
expr_stmt|;
name|cleanupHandleMap
argument_list|()
expr_stmt|;
operator|delete
name|tabbody
expr_stmt|;
name|tabbody
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/* \internal     Closes all open theme data handles to ensure that we don't leak     resources, and that we don't refere to old handles when for     example the user changes the theme style. */
end_comment
begin_function
DECL|function|cleanupHandleMap
name|void
name|QWindowsXPStylePrivate
operator|::
name|cleanupHandleMap
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NThemes
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|m_themes
index|[
name|i
index|]
condition|)
block|{
name|pCloseThemeData
argument_list|(
name|m_themes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|m_themes
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createTheme
name|HTHEME
name|QWindowsXPStylePrivate
operator|::
name|createTheme
parameter_list|(
name|int
name|theme
parameter_list|,
name|HWND
name|hwnd
parameter_list|)
block|{
if|if
condition|(
name|theme
operator|<
literal|0
operator|||
name|theme
operator|>=
name|NThemes
operator|||
operator|!
name|hwnd
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Invalid parameters #%d, %p"
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|theme
argument_list|,
name|hwnd
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|!
name|m_themes
index|[
name|theme
index|]
condition|)
block|{
specifier|const
name|wchar_t
modifier|*
name|name
init|=
name|themeNames
index|[
name|theme
index|]
decl_stmt|;
name|m_themes
index|[
name|theme
index|]
operator|=
name|pOpenThemeData
argument_list|(
name|hwnd
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_themes
index|[
name|theme
index|]
condition|)
name|qErrnoWarning
argument_list|(
literal|"%s: OpenThemeData() failed for theme %d (%s)."
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|theme
argument_list|,
name|qPrintable
argument_list|(
name|themeName
argument_list|(
name|theme
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|m_themes
index|[
name|theme
index|]
return|;
block|}
end_function
begin_function
DECL|function|themeName
name|QString
name|QWindowsXPStylePrivate
operator|::
name|themeName
parameter_list|(
name|int
name|theme
parameter_list|)
block|{
return|return
name|theme
operator|>=
literal|0
operator|&&
name|theme
operator|<
name|NThemes
condition|?
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|themeNames
index|[
name|theme
index|]
argument_list|)
else|:
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isItemViewDelegateLineEdit
name|bool
name|QWindowsXPStylePrivate
operator|::
name|isItemViewDelegateLineEdit
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return
literal|false
return|;
specifier|const
name|QWidget
modifier|*
name|parent1
init|=
name|widget
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
comment|// Exlude dialogs or other toplevels parented on item views.
if|if
condition|(
operator|!
name|parent1
operator|||
name|parent1
operator|->
name|isWindow
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|const
name|QWidget
modifier|*
name|parent2
init|=
name|parent1
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
return|return
name|parent2
operator|&&
name|widget
operator|->
name|inherits
argument_list|(
literal|"QLineEdit"
argument_list|)
operator|&&
name|parent2
operator|->
name|inherits
argument_list|(
literal|"QAbstractItemView"
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \internal     This function will always return a valid window handle, and might     create a limbo widget to do so.     We often need a window handle to for example open theme data, so     this function ensures that we get one. */
end_comment
begin_function
DECL|function|winId
name|HWND
name|QWindowsXPStylePrivate
operator|::
name|winId
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|widget
condition|)
if|if
condition|(
specifier|const
name|HWND
name|hwnd
init|=
name|QApplicationPrivate
operator|::
name|getHWNDForWidget
argument_list|(
cast|const_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
condition|)
return|return
name|hwnd
return|;
comment|// Find top level with native window (there might be dialogs that do not have one).
foreach|foreach
control|(
specifier|const
name|QWidget
modifier|*
name|toplevel
decl|,
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
control|)
if|if
condition|(
name|toplevel
operator|->
name|windowHandle
argument_list|()
operator|&&
name|toplevel
operator|->
name|windowHandle
argument_list|()
operator|->
name|handle
argument_list|()
condition|)
if|if
condition|(
specifier|const
name|HWND
name|topLevelHwnd
init|=
name|QApplicationPrivate
operator|::
name|getHWNDForWidget
argument_list|(
name|toplevel
argument_list|)
condition|)
return|return
name|topLevelHwnd
return|;
if|if
condition|(
name|QDesktopWidget
modifier|*
name|desktop
init|=
name|qApp
operator|->
name|desktop
argument_list|()
condition|)
if|if
condition|(
specifier|const
name|HWND
name|desktopHwnd
init|=
name|QApplicationPrivate
operator|::
name|getHWNDForWidget
argument_list|(
name|desktop
argument_list|)
condition|)
return|return
name|desktopHwnd
return|;
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Returns the pointer to a tab widgets body pixmap, scaled to the     height of the screen. This way the theme engine doesn't need to     scale the body for every time we ask for it. (Speed optimization) */
end_comment
begin_function
DECL|function|tabBody
specifier|const
name|QPixmap
modifier|*
name|QWindowsXPStylePrivate
operator|::
name|tabBody
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tabbody
condition|)
block|{
name|XPThemeData
name|theme
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|TabTheme
argument_list|,
name|TABP_BODY
argument_list|)
decl_stmt|;
specifier|const
name|QSize
name|size
init|=
name|theme
operator|.
name|size
argument_list|()
operator|/
name|QWindowsXPStylePrivate
operator|::
name|devicePixelRatio
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|tabbody
operator|=
operator|new
name|QPixmap
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QPainter
name|painter
argument_list|(
name|tabbody
argument_list|)
decl_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
comment|// We fill with the last line of the themedata, that
comment|// way we don't get a tiled pixmap inside big tabs
name|QPixmap
name|temp
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|painter
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawTiledPixmap
argument_list|(
literal|0
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|tabbody
operator|->
name|height
argument_list|()
operator|-
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|temp
argument_list|)
expr_stmt|;
block|}
return|return
name|tabbody
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Returns \c true if all the necessary theme engine symbols were     resolved. */
end_comment
begin_function
DECL|function|resolveSymbols
name|bool
name|QWindowsXPStylePrivate
operator|::
name|resolveSymbols
parameter_list|()
block|{
specifier|static
name|bool
name|tried
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|tried
condition|)
block|{
name|tried
operator|=
literal|true
expr_stmt|;
name|QSystemLibrary
name|themeLib
argument_list|(
name|QLatin1String
argument_list|(
literal|"uxtheme"
argument_list|)
argument_list|)
decl_stmt|;
name|pIsAppThemed
operator|=
operator|(
name|PtrIsAppThemed
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"IsAppThemed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|pIsAppThemed
condition|)
block|{
name|pIsThemeActive
operator|=
operator|(
name|PtrIsThemeActive
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"IsThemeActive"
argument_list|)
expr_stmt|;
name|pGetThemePartSize
operator|=
operator|(
name|PtrGetThemePartSize
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemePartSize"
argument_list|)
expr_stmt|;
name|pOpenThemeData
operator|=
operator|(
name|PtrOpenThemeData
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"OpenThemeData"
argument_list|)
expr_stmt|;
name|pCloseThemeData
operator|=
operator|(
name|PtrCloseThemeData
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"CloseThemeData"
argument_list|)
expr_stmt|;
name|pDrawThemeBackground
operator|=
operator|(
name|PtrDrawThemeBackground
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"DrawThemeBackground"
argument_list|)
expr_stmt|;
name|pDrawThemeBackgroundEx
operator|=
operator|(
name|PtrDrawThemeBackgroundEx
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"DrawThemeBackgroundEx"
argument_list|)
expr_stmt|;
name|pGetCurrentThemeName
operator|=
operator|(
name|PtrGetCurrentThemeName
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetCurrentThemeName"
argument_list|)
expr_stmt|;
name|pGetThemeBool
operator|=
operator|(
name|PtrGetThemeBool
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeBool"
argument_list|)
expr_stmt|;
name|pGetThemeColor
operator|=
operator|(
name|PtrGetThemeColor
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeColor"
argument_list|)
expr_stmt|;
name|pGetThemeEnumValue
operator|=
operator|(
name|PtrGetThemeEnumValue
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeEnumValue"
argument_list|)
expr_stmt|;
name|pGetThemeFilename
operator|=
operator|(
name|PtrGetThemeFilename
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeFilename"
argument_list|)
expr_stmt|;
name|pGetThemeFont
operator|=
operator|(
name|PtrGetThemeFont
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeFont"
argument_list|)
expr_stmt|;
name|pGetThemeInt
operator|=
operator|(
name|PtrGetThemeInt
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeInt"
argument_list|)
expr_stmt|;
name|pGetThemeIntList
operator|=
operator|(
name|PtrGetThemeIntList
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeIntList"
argument_list|)
expr_stmt|;
name|pGetThemeMargins
operator|=
operator|(
name|PtrGetThemeMargins
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeMargins"
argument_list|)
expr_stmt|;
name|pGetThemeMetric
operator|=
operator|(
name|PtrGetThemeMetric
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeMetric"
argument_list|)
expr_stmt|;
name|pGetThemePartSize
operator|=
operator|(
name|PtrGetThemePartSize
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemePartSize"
argument_list|)
expr_stmt|;
name|pGetThemePosition
operator|=
operator|(
name|PtrGetThemePosition
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemePosition"
argument_list|)
expr_stmt|;
name|pGetThemePropertyOrigin
operator|=
operator|(
name|PtrGetThemePropertyOrigin
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemePropertyOrigin"
argument_list|)
expr_stmt|;
name|pGetThemeRect
operator|=
operator|(
name|PtrGetThemeRect
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeRect"
argument_list|)
expr_stmt|;
name|pGetThemeString
operator|=
operator|(
name|PtrGetThemeString
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeString"
argument_list|)
expr_stmt|;
name|pGetThemeBackgroundRegion
operator|=
operator|(
name|PtrGetThemeBackgroundRegion
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeBackgroundRegion"
argument_list|)
expr_stmt|;
name|pGetThemeDocumentationProperty
operator|=
operator|(
name|PtrGetThemeDocumentationProperty
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeDocumentationProperty"
argument_list|)
expr_stmt|;
name|pIsThemeBackgroundPartiallyTransparent
operator|=
operator|(
name|PtrIsThemeBackgroundPartiallyTransparent
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"IsThemeBackgroundPartiallyTransparent"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pIsAppThemed
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Returns a native buffer (DIB section) of at least the size of     ( \a x , \a y ). The buffer has a 32 bit depth, to not lose     the alpha values on proper alpha-pixmaps. */
end_comment
begin_function
DECL|function|buffer
name|HBITMAP
name|QWindowsXPStylePrivate
operator|::
name|buffer
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
comment|// If we already have a HBITMAP which is of adequate size, just return that
if|if
condition|(
name|bufferBitmap
condition|)
block|{
if|if
condition|(
name|bufferW
operator|>=
name|w
operator|&&
name|bufferH
operator|>=
name|h
condition|)
return|return
name|bufferBitmap
return|;
comment|// Not big enough, discard the old one
if|if
condition|(
name|bufferDC
operator|&&
name|nullBitmap
condition|)
name|SelectObject
argument_list|(
name|bufferDC
argument_list|,
name|nullBitmap
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|bufferBitmap
argument_list|)
expr_stmt|;
name|bufferBitmap
operator|=
literal|0
expr_stmt|;
block|}
name|w
operator|=
name|qMax
argument_list|(
name|bufferW
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|bufferH
argument_list|,
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bufferDC
condition|)
name|bufferDC
operator|=
name|CreateCompatibleDC
argument_list|(
name|qt_win_display_dc
argument_list|()
argument_list|)
expr_stmt|;
comment|// Define the header
name|BITMAPINFO
name|bmi
decl_stmt|;
name|memset
argument_list|(
operator|&
name|bmi
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|bmi
argument_list|)
argument_list|)
expr_stmt|;
name|bmi
operator|.
name|bmiHeader
operator|.
name|biSize
operator|=
sizeof|sizeof
argument_list|(
name|BITMAPINFOHEADER
argument_list|)
expr_stmt|;
name|bmi
operator|.
name|bmiHeader
operator|.
name|biWidth
operator|=
name|w
expr_stmt|;
name|bmi
operator|.
name|bmiHeader
operator|.
name|biHeight
operator|=
operator|-
name|h
expr_stmt|;
name|bmi
operator|.
name|bmiHeader
operator|.
name|biPlanes
operator|=
literal|1
expr_stmt|;
name|bmi
operator|.
name|bmiHeader
operator|.
name|biBitCount
operator|=
literal|32
expr_stmt|;
name|bmi
operator|.
name|bmiHeader
operator|.
name|biCompression
operator|=
name|BI_RGB
expr_stmt|;
comment|// Create the pixmap
name|bufferPixels
operator|=
literal|0
expr_stmt|;
name|bufferBitmap
operator|=
name|CreateDIBSection
argument_list|(
name|bufferDC
argument_list|,
operator|&
name|bmi
argument_list|,
name|DIB_RGB_COLORS
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|bufferPixels
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|GdiFlush
argument_list|()
expr_stmt|;
name|nullBitmap
operator|=
operator|(
name|HBITMAP
operator|)
name|SelectObject
argument_list|(
name|bufferDC
argument_list|,
name|bufferBitmap
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bufferBitmap
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"QWindowsXPStylePrivate::buffer(w,h), failed to create dibsection"
argument_list|)
expr_stmt|;
name|bufferW
operator|=
literal|0
expr_stmt|;
name|bufferH
operator|=
literal|0
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|!
name|bufferPixels
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"QWindowsXPStylePrivate::buffer(w,h), did not allocate pixel data"
argument_list|)
expr_stmt|;
name|bufferW
operator|=
literal|0
expr_stmt|;
name|bufferH
operator|=
literal|0
expr_stmt|;
return|return
literal|0
return|;
block|}
name|bufferW
operator|=
name|w
expr_stmt|;
name|bufferH
operator|=
name|h
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_XP_STYLE
name|qDebug
argument_list|(
literal|"Creating new dib section (%d, %d)"
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|bufferBitmap
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Returns \c true if the part contains any transparency at all. This does     not indicate what kind of transparency we're dealing with. It can be         - Alpha transparency         - Masked transparency */
end_comment
begin_function
DECL|function|isTransparent
name|bool
name|QWindowsXPStylePrivate
operator|::
name|isTransparent
parameter_list|(
name|XPThemeData
modifier|&
name|themeData
parameter_list|)
block|{
return|return
name|pIsThemeBackgroundPartiallyTransparent
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Returns a QRegion of the region of the part */
end_comment
begin_function
DECL|function|region
name|QRegion
name|QWindowsXPStylePrivate
operator|::
name|region
parameter_list|(
name|XPThemeData
modifier|&
name|themeData
parameter_list|)
block|{
name|HRGN
name|hRgn
init|=
literal|0
decl_stmt|;
name|RECT
name|rect
init|=
name|themeData
operator|.
name|toRECT
argument_list|(
name|themeData
operator|.
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SUCCEEDED
argument_list|(
name|pGetThemeBackgroundRegion
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|bufferHDC
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
operator|&
name|rect
argument_list|,
operator|&
name|hRgn
argument_list|)
argument_list|)
condition|)
return|return
name|QRegion
argument_list|()
return|;
name|HRGN
name|dest
init|=
name|CreateRectRgn
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|success
init|=
name|CombineRgn
argument_list|(
name|dest
argument_list|,
name|hRgn
argument_list|,
literal|0
argument_list|,
name|RGN_COPY
argument_list|)
operator|!=
name|ERROR
decl_stmt|;
name|QRegion
name|region
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|int
name|numBytes
init|=
name|GetRegionData
argument_list|(
name|dest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|numBytes
operator|==
literal|0
condition|)
return|return
name|QRegion
argument_list|()
return|;
name|char
modifier|*
name|buf
init|=
operator|new
name|char
index|[
name|numBytes
index|]
decl_stmt|;
if|if
condition|(
name|buf
operator|==
literal|0
condition|)
return|return
name|QRegion
argument_list|()
return|;
name|RGNDATA
modifier|*
name|rd
init|=
cast|reinterpret_cast
argument_list|<
name|RGNDATA
operator|*
argument_list|>
argument_list|(
name|buf
argument_list|)
decl_stmt|;
if|if
condition|(
name|GetRegionData
argument_list|(
name|dest
argument_list|,
name|numBytes
argument_list|,
name|rd
argument_list|)
operator|==
literal|0
condition|)
block|{
operator|delete
index|[]
name|buf
expr_stmt|;
return|return
name|QRegion
argument_list|()
return|;
block|}
name|RECT
modifier|*
name|r
init|=
cast|reinterpret_cast
argument_list|<
name|RECT
operator|*
argument_list|>
argument_list|(
name|rd
operator|->
name|Buffer
argument_list|)
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rd
operator|->
name|rdh
operator|.
name|nCount
condition|;
operator|++
name|i
control|)
block|{
name|QRect
name|rect
decl_stmt|;
name|rect
operator|.
name|setCoords
argument_list|(
name|r
operator|->
name|left
argument_list|,
name|r
operator|->
name|top
argument_list|,
name|r
operator|->
name|right
operator|-
literal|1
argument_list|,
name|r
operator|->
name|bottom
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|++
name|r
expr_stmt|;
name|region
operator||=
name|rect
expr_stmt|;
block|}
operator|delete
index|[]
name|buf
expr_stmt|;
block|}
name|DeleteObject
argument_list|(
name|hRgn
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|dest
argument_list|)
expr_stmt|;
return|return
name|region
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Sets the parts region on a window. */
end_comment
begin_function
DECL|function|setTransparency
name|void
name|QWindowsXPStylePrivate
operator|::
name|setTransparency
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|XPThemeData
modifier|&
name|themeData
parameter_list|)
block|{
name|HRGN
name|hrgn
init|=
name|themeData
operator|.
name|mask
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|hrgn
operator|&&
name|widget
condition|)
name|SetWindowRgn
argument_list|(
name|winId
argument_list|(
name|widget
argument_list|)
argument_list|,
name|hrgn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal     Returns \c true if the native doublebuffer contains pixels with     varying alpha value. */
end_comment
begin_function
DECL|function|hasAlphaChannel
name|bool
name|QWindowsXPStylePrivate
operator|::
name|hasAlphaChannel
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
specifier|const
name|int
name|startX
init|=
name|rect
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|int
name|startY
init|=
name|rect
operator|.
name|top
argument_list|()
decl_stmt|;
specifier|const
name|int
name|w
init|=
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|h
init|=
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|firstAlpha
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|startY
init|;
name|y
operator|<
name|h
operator|/
literal|2
condition|;
operator|++
name|y
control|)
block|{
name|DWORD
modifier|*
name|buffer
init|=
operator|(
name|DWORD
operator|*
operator|)
name|bufferPixels
operator|+
operator|(
name|y
operator|*
name|bufferW
operator|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|startX
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
operator|,
operator|++
name|buffer
control|)
block|{
name|int
name|alpha
init|=
operator|(
operator|*
name|buffer
operator|)
operator|>>
literal|24
decl_stmt|;
if|if
condition|(
name|firstAlpha
operator|==
operator|-
literal|1
condition|)
name|firstAlpha
operator|=
name|alpha
expr_stmt|;
elseif|else
if|if
condition|(
name|alpha
operator|!=
name|firstAlpha
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*! \internal     When the theme engine paints both a true alpha pixmap and a glyph     into our buffer, the glyph might not contain a proper alpha value.     The rule of thumb for premultiplied pixmaps is that the color     values of a pixel can never be higher than the alpha values, so     we use this to our advantage here, and fix all instances where     this occures. */
end_comment
begin_function
DECL|function|fixAlphaChannel
name|bool
name|QWindowsXPStylePrivate
operator|::
name|fixAlphaChannel
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
specifier|const
name|int
name|startX
init|=
name|rect
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|int
name|startY
init|=
name|rect
operator|.
name|top
argument_list|()
decl_stmt|;
specifier|const
name|int
name|w
init|=
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|h
init|=
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|bool
name|hasFixedAlphaValue
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|startY
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|DWORD
modifier|*
name|buffer
init|=
operator|(
name|DWORD
operator|*
operator|)
name|bufferPixels
operator|+
operator|(
name|y
operator|*
name|bufferW
operator|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|startX
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
operator|,
operator|++
name|buffer
control|)
block|{
name|uint
name|pixel
init|=
operator|*
name|buffer
decl_stmt|;
name|int
name|alpha
init|=
name|qAlpha
argument_list|(
name|pixel
argument_list|)
decl_stmt|;
if|if
condition|(
name|qRed
argument_list|(
name|pixel
argument_list|)
operator|>
name|alpha
operator|||
name|qGreen
argument_list|(
name|pixel
argument_list|)
operator|>
name|alpha
operator|||
name|qBlue
argument_list|(
name|pixel
argument_list|)
operator|>
name|alpha
condition|)
block|{
operator|*
name|buffer
operator||=
literal|0xff000000
expr_stmt|;
name|hasFixedAlphaValue
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|hasFixedAlphaValue
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Swaps the alpha values on certain pixels:         0xFF?????? -> 0x00??????         0x00?????? -> 0xFF??????     Used to determin the mask of a non-alpha transparent pixmap in     the native doublebuffer, and swap the alphas so we may paint     the image as a Premultiplied QImage with drawImage(), and obtain     the mask transparency. */
end_comment
begin_function
DECL|function|swapAlphaChannel
name|bool
name|QWindowsXPStylePrivate
operator|::
name|swapAlphaChannel
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|bool
name|allPixels
parameter_list|)
block|{
specifier|const
name|int
name|startX
init|=
name|rect
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|int
name|startY
init|=
name|rect
operator|.
name|top
argument_list|()
decl_stmt|;
specifier|const
name|int
name|w
init|=
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|h
init|=
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|bool
name|valueChange
init|=
literal|false
decl_stmt|;
comment|// Flip the alphas, so that 255-alpha pixels are 0, and 0-alpha are 255.
for|for
control|(
name|int
name|y
init|=
name|startY
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|DWORD
modifier|*
name|buffer
init|=
operator|(
name|DWORD
operator|*
operator|)
name|bufferPixels
operator|+
operator|(
name|y
operator|*
name|bufferW
operator|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|startX
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
operator|,
operator|++
name|buffer
control|)
block|{
if|if
condition|(
name|allPixels
condition|)
block|{
operator|*
name|buffer
operator||=
literal|0xFF000000
expr_stmt|;
continue|continue;
block|}
name|unsigned
name|int
name|alphaValue
init|=
operator|(
operator|*
name|buffer
operator|)
operator|&
literal|0xFF000000
decl_stmt|;
if|if
condition|(
name|alphaValue
operator|==
literal|0xFF000000
condition|)
block|{
operator|*
name|buffer
operator|=
literal|0
expr_stmt|;
name|valueChange
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|alphaValue
operator|==
literal|0
condition|)
block|{
operator|*
name|buffer
operator||=
literal|0xFF000000
expr_stmt|;
name|valueChange
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|valueChange
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Main theme drawing function.     Determines the correct lowlevel drawing method depending on several     factors.         Use drawBackgroundThruNativeBuffer() if:             - Painter does not have an HDC             - Theme part is flipped (mirrored horizontally)         else use drawBackgroundDirectly(). */
end_comment
begin_function
DECL|function|drawBackground
name|void
name|QWindowsXPStylePrivate
operator|::
name|drawBackground
parameter_list|(
name|XPThemeData
modifier|&
name|themeData
parameter_list|)
block|{
if|if
condition|(
name|themeData
operator|.
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QPainter
modifier|*
name|painter
init|=
name|themeData
operator|.
name|painter
decl_stmt|;
name|Q_ASSERT_X
argument_list|(
name|painter
operator|!=
literal|0
argument_list|,
literal|"QWindowsXPStylePrivate::drawBackground()"
argument_list|,
literal|"Trying to draw a theme part without a painter"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|painter
operator|||
operator|!
name|painter
operator|->
name|isActive
argument_list|()
condition|)
return|return;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|bool
name|complexXForm
init|=
name|painter
operator|->
name|deviceTransform
argument_list|()
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
decl_stmt|;
comment|// Access paintDevice via engine since the painter may
comment|// return the clip device which can still be a widget device in case of grabWidget().
name|bool
name|translucentToplevel
init|=
literal|false
decl_stmt|;
specifier|const
name|QPaintDevice
modifier|*
name|paintDevice
init|=
name|painter
operator|->
name|device
argument_list|()
decl_stmt|;
if|if
condition|(
name|paintDevice
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
condition|)
block|{
specifier|const
name|QWidget
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
specifier|const
name|QWidget
operator|*
argument_list|>
argument_list|(
name|paintDevice
argument_list|)
operator|->
name|window
argument_list|()
decl_stmt|;
name|translucentToplevel
operator|=
name|window
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
expr_stmt|;
block|}
name|bool
name|canDrawDirectly
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|themeData
operator|.
name|widget
operator|&&
name|painter
operator|->
name|opacity
argument_list|()
operator|==
literal|1.0
operator|&&
operator|!
name|themeData
operator|.
name|rotate
operator|&&
operator|!
name|complexXForm
operator|&&
operator|!
name|themeData
operator|.
name|mirrorVertically
operator|&&
operator|(
operator|!
name|themeData
operator|.
name|mirrorHorizontally
operator|||
name|pDrawThemeBackgroundEx
operator|)
operator|&&
operator|!
name|translucentToplevel
condition|)
block|{
comment|// Draw on backing store DC only for real widgets or backing store images.
specifier|const
name|QPaintDevice
modifier|*
name|enginePaintDevice
init|=
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|paintDevice
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|enginePaintDevice
operator|->
name|devType
argument_list|()
condition|)
block|{
case|case
name|QInternal
operator|::
name|Widget
case|:
name|canDrawDirectly
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QInternal
operator|::
name|Image
case|:
comment|// Ensure the backing store has received as resize and is initialized.
if|if
condition|(
name|QBackingStore
modifier|*
name|bs
init|=
name|backingStoreForWidget
argument_list|(
name|themeData
operator|.
name|widget
argument_list|)
condition|)
if|if
condition|(
name|bs
operator|->
name|size
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
name|bs
operator|->
name|paintDevice
argument_list|()
operator|==
name|enginePaintDevice
condition|)
name|canDrawDirectly
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|const
name|HDC
name|dc
init|=
name|canDrawDirectly
condition|?
name|hdcForWidgetBackingStore
argument_list|(
name|themeData
operator|.
name|widget
argument_list|)
else|:
name|HDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|dc
condition|)
block|{
name|drawBackgroundDirectly
argument_list|(
name|themeData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|drawBackgroundThruNativeBuffer
argument_list|(
name|themeData
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal     This function draws the theme parts directly to the paintengines HDC.     Do not use this if you need to perform other transformations on the     resulting data. */
end_comment
begin_function
DECL|function|drawBackgroundDirectly
name|void
name|QWindowsXPStylePrivate
operator|::
name|drawBackgroundDirectly
parameter_list|(
name|XPThemeData
modifier|&
name|themeData
parameter_list|)
block|{
name|QPainter
modifier|*
name|painter
init|=
name|themeData
operator|.
name|painter
decl_stmt|;
name|HDC
name|dc
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|themeData
operator|.
name|widget
condition|)
name|dc
operator|=
name|hdcForWidgetBackingStore
argument_list|(
name|themeData
operator|.
name|widget
argument_list|)
expr_stmt|;
name|QPoint
name|redirectionDelta
argument_list|(
name|int
argument_list|(
name|painter
operator|->
name|deviceMatrix
argument_list|()
operator|.
name|dx
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|painter
operator|->
name|deviceMatrix
argument_list|()
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QRect
name|area
init|=
name|themeData
operator|.
name|rect
operator|.
name|translated
argument_list|(
name|redirectionDelta
argument_list|)
decl_stmt|;
name|QRegion
name|sysRgn
init|=
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|systemClip
argument_list|()
decl_stmt|;
if|if
condition|(
name|sysRgn
operator|.
name|isEmpty
argument_list|()
condition|)
name|sysRgn
operator|=
name|area
expr_stmt|;
else|else
name|sysRgn
operator|&=
name|area
expr_stmt|;
if|if
condition|(
name|painter
operator|->
name|hasClipping
argument_list|()
condition|)
name|sysRgn
operator|&=
name|painter
operator|->
name|clipRegion
argument_list|()
operator|.
name|translated
argument_list|(
name|redirectionDelta
argument_list|)
expr_stmt|;
name|HRGN
name|hrgn
init|=
name|qt_hrgn_from_qregion
argument_list|(
name|sysRgn
argument_list|)
decl_stmt|;
name|SelectClipRgn
argument_list|(
name|dc
argument_list|,
name|hrgn
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_XP_STYLE
name|printf
argument_list|(
literal|"---[ DIRECT PAINTING ]------------------> Name(%-10s) Part(%d) State(%d)\n"
argument_list|,
name|qPrintable
argument_list|(
name|themeData
operator|.
name|name
argument_list|)
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|)
expr_stmt|;
name|showProperties
argument_list|(
name|themeData
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|RECT
name|drawRECT
init|=
name|themeData
operator|.
name|toRECT
argument_list|(
name|area
argument_list|)
decl_stmt|;
name|DTBGOPTS
name|drawOptions
decl_stmt|;
name|drawOptions
operator|.
name|dwSize
operator|=
sizeof|sizeof
argument_list|(
name|drawOptions
argument_list|)
expr_stmt|;
name|drawOptions
operator|.
name|rcClip
operator|=
name|themeData
operator|.
name|toRECT
argument_list|(
name|sysRgn
operator|.
name|boundingRect
argument_list|()
argument_list|)
expr_stmt|;
name|drawOptions
operator|.
name|dwFlags
operator|=
name|DTBG_CLIPRECT
operator||
operator|(
name|themeData
operator|.
name|noBorder
condition|?
name|DTBG_OMITBORDER
else|:
literal|0
operator|)
operator||
operator|(
name|themeData
operator|.
name|noContent
condition|?
name|DTBG_OMITCONTENT
else|:
literal|0
operator|)
operator||
operator|(
name|themeData
operator|.
name|mirrorHorizontally
condition|?
name|DTBG_MIRRORDC
else|:
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|pDrawThemeBackgroundEx
operator|!=
literal|0
condition|)
block|{
name|pDrawThemeBackgroundEx
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|dc
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
operator|&
operator|(
name|drawRECT
operator|)
argument_list|,
operator|&
name|drawOptions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We are running on a system where the uxtheme.dll does not have
comment|// the DrawThemeBackgroundEx function, so we need to clip away
comment|// borders or contents manually. All flips and mirrors uses the
comment|// fallback implementation
name|int
name|borderSize
init|=
literal|0
decl_stmt|;
name|PROPERTYORIGIN
name|origin
init|=
name|PO_NOTFOUND
decl_stmt|;
name|pGetThemePropertyOrigin
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|TMT_BORDERSIZE
argument_list|,
operator|&
name|origin
argument_list|)
expr_stmt|;
name|pGetThemeInt
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|TMT_BORDERSIZE
argument_list|,
operator|&
name|borderSize
argument_list|)
expr_stmt|;
comment|// Clip away border region
name|QRegion
name|extraClip
init|=
name|sysRgn
decl_stmt|;
if|if
condition|(
operator|(
name|origin
operator|==
name|PO_CLASS
operator|||
name|origin
operator|==
name|PO_PART
operator|||
name|origin
operator|==
name|PO_STATE
operator|)
operator|&&
name|borderSize
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|themeData
operator|.
name|noBorder
condition|)
block|{
comment|// extraClip&= area is already done
name|drawRECT
operator|=
name|themeData
operator|.
name|toRECT
argument_list|(
name|area
operator|.
name|adjusted
argument_list|(
operator|-
name|borderSize
argument_list|,
operator|-
name|borderSize
argument_list|,
name|borderSize
argument_list|,
name|borderSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Clip away content region
if|if
condition|(
name|themeData
operator|.
name|noContent
condition|)
block|{
name|QRegion
name|content
init|=
name|area
operator|.
name|adjusted
argument_list|(
name|borderSize
argument_list|,
name|borderSize
argument_list|,
operator|-
name|borderSize
argument_list|,
operator|-
name|borderSize
argument_list|)
decl_stmt|;
name|extraClip
operator|^=
name|content
expr_stmt|;
block|}
comment|// Set the clip region, if used..
if|if
condition|(
name|themeData
operator|.
name|noBorder
operator|||
name|themeData
operator|.
name|noContent
condition|)
block|{
name|DeleteObject
argument_list|(
name|hrgn
argument_list|)
expr_stmt|;
name|hrgn
operator|=
name|qt_hrgn_from_qregion
argument_list|(
name|extraClip
argument_list|)
expr_stmt|;
name|SelectClipRgn
argument_list|(
name|dc
argument_list|,
name|hrgn
argument_list|)
expr_stmt|;
block|}
block|}
name|pDrawThemeBackground
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|dc
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
operator|&
operator|(
name|drawRECT
operator|)
argument_list|,
operator|&
operator|(
name|drawOptions
operator|.
name|rcClip
operator|)
argument_list|)
expr_stmt|;
block|}
name|SelectClipRgn
argument_list|(
name|dc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|hrgn
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal     This function uses a secondary Native doublebuffer for painting parts.     It should only be used when the painteengine doesn't provide a proper     HDC for direct painting (e.g. when doing a grabWidget(), painting to     other pixmaps etc), or when special transformations are needed (e.g.     flips (horizonal mirroring only, vertical are handled by the theme     engine). */
end_comment
begin_function
DECL|function|drawBackgroundThruNativeBuffer
name|void
name|QWindowsXPStylePrivate
operator|::
name|drawBackgroundThruNativeBuffer
parameter_list|(
name|XPThemeData
modifier|&
name|themeData
parameter_list|)
block|{
name|QPainter
modifier|*
name|painter
init|=
name|themeData
operator|.
name|painter
decl_stmt|;
name|QRect
name|rect
init|=
name|themeData
operator|.
name|rect
decl_stmt|;
if|if
condition|(
operator|(
name|themeData
operator|.
name|rotate
operator|+
literal|90
operator|)
operator|%
literal|180
operator|==
literal|0
condition|)
block|{
comment|// Catch 90,270,etc.. degree flips.
name|rect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rect
operator|.
name|moveTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|partId
init|=
name|themeData
operator|.
name|partId
decl_stmt|;
name|int
name|stateId
init|=
name|themeData
operator|.
name|stateId
decl_stmt|;
name|int
name|w
init|=
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
comment|// Values initialized later, either from cached values, or from function calls
name|AlphaChannelType
name|alphaType
init|=
name|UnknownAlpha
decl_stmt|;
name|bool
name|stateHasData
init|=
literal|true
decl_stmt|;
comment|// We assume so;
name|bool
name|hasAlpha
init|=
literal|false
decl_stmt|;
name|bool
name|partIsTransparent
decl_stmt|;
name|bool
name|potentialInvalidAlpha
decl_stmt|;
name|QString
name|pixmapCacheKey
init|=
name|QStringLiteral
argument_list|(
literal|"$qt_xp_"
argument_list|)
decl_stmt|;
name|pixmapCacheKey
operator|.
name|append
argument_list|(
name|themeName
argument_list|(
name|themeData
operator|.
name|theme
argument_list|)
argument_list|)
expr_stmt|;
name|pixmapCacheKey
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'p'
argument_list|)
argument_list|)
expr_stmt|;
name|pixmapCacheKey
operator|.
name|append
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|partId
argument_list|)
argument_list|)
expr_stmt|;
name|pixmapCacheKey
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'s'
argument_list|)
argument_list|)
expr_stmt|;
name|pixmapCacheKey
operator|.
name|append
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|stateId
argument_list|)
argument_list|)
expr_stmt|;
name|pixmapCacheKey
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'s'
argument_list|)
argument_list|)
expr_stmt|;
name|pixmapCacheKey
operator|.
name|append
argument_list|(
name|themeData
operator|.
name|noBorder
condition|?
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
else|:
name|QLatin1Char
argument_list|(
literal|'1'
argument_list|)
argument_list|)
expr_stmt|;
name|pixmapCacheKey
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'b'
argument_list|)
argument_list|)
expr_stmt|;
name|pixmapCacheKey
operator|.
name|append
argument_list|(
name|themeData
operator|.
name|noContent
condition|?
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
else|:
name|QLatin1Char
argument_list|(
literal|'1'
argument_list|)
argument_list|)
expr_stmt|;
name|pixmapCacheKey
operator|.
name|append
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|pixmapCacheKey
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'w'
argument_list|)
argument_list|)
expr_stmt|;
name|pixmapCacheKey
operator|.
name|append
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|h
argument_list|)
argument_list|)
expr_stmt|;
name|pixmapCacheKey
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'h'
argument_list|)
argument_list|)
expr_stmt|;
name|QPixmap
name|cachedPixmap
decl_stmt|;
name|ThemeMapKey
name|key
argument_list|(
name|themeData
argument_list|)
decl_stmt|;
name|ThemeMapData
name|data
init|=
name|alphaCache
operator|.
name|value
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|bool
name|haveCachedPixmap
init|=
literal|false
decl_stmt|;
name|bool
name|isCached
init|=
name|data
operator|.
name|dataValid
decl_stmt|;
if|if
condition|(
name|isCached
condition|)
block|{
name|partIsTransparent
operator|=
name|data
operator|.
name|partIsTransparent
expr_stmt|;
name|hasAlpha
operator|=
name|data
operator|.
name|hasAlphaChannel
expr_stmt|;
name|alphaType
operator|=
name|data
operator|.
name|alphaType
expr_stmt|;
name|potentialInvalidAlpha
operator|=
name|data
operator|.
name|hadInvalidAlpha
expr_stmt|;
name|haveCachedPixmap
operator|=
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pixmapCacheKey
argument_list|,
name|cachedPixmap
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_XP_STYLE
name|char
name|buf
index|[
literal|25
index|]
decl_stmt|;
operator|::
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"+ Pixmap(%3d, %3d) ]"
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"---[ CACHED %s--------> Name(%-10s) Part(%d) State(%d)\n"
argument_list|,
name|haveCachedPixmap
condition|?
name|buf
else|:
literal|"]-------------------"
argument_list|,
name|qPrintable
argument_list|(
name|themeData
operator|.
name|name
argument_list|)
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
comment|// Not cached, so get values from Theme Engine
name|BOOL
name|tmt_borderonly
init|=
literal|false
decl_stmt|;
name|COLORREF
name|tmt_transparentcolor
init|=
literal|0x0
decl_stmt|;
name|PROPERTYORIGIN
name|proporigin
init|=
name|PO_NOTFOUND
decl_stmt|;
name|pGetThemeBool
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|TMT_BORDERONLY
argument_list|,
operator|&
name|tmt_borderonly
argument_list|)
expr_stmt|;
name|pGetThemeColor
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|TMT_TRANSPARENTCOLOR
argument_list|,
operator|&
name|tmt_transparentcolor
argument_list|)
expr_stmt|;
name|pGetThemePropertyOrigin
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|TMT_CAPTIONMARGINS
argument_list|,
operator|&
name|proporigin
argument_list|)
expr_stmt|;
name|partIsTransparent
operator|=
name|isTransparent
argument_list|(
name|themeData
argument_list|)
expr_stmt|;
name|potentialInvalidAlpha
operator|=
literal|false
expr_stmt|;
name|pGetThemePropertyOrigin
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|TMT_GLYPHTYPE
argument_list|,
operator|&
name|proporigin
argument_list|)
expr_stmt|;
if|if
condition|(
name|proporigin
operator|==
name|PO_PART
operator|||
name|proporigin
operator|==
name|PO_STATE
condition|)
block|{
name|int
name|tmt_glyphtype
init|=
name|GT_NONE
decl_stmt|;
name|pGetThemeEnumValue
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|TMT_GLYPHTYPE
argument_list|,
operator|&
name|tmt_glyphtype
argument_list|)
expr_stmt|;
name|potentialInvalidAlpha
operator|=
name|partIsTransparent
operator|&&
name|tmt_glyphtype
operator|==
name|GT_IMAGEGLYPH
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|DEBUG_XP_STYLE
name|printf
argument_list|(
literal|"---[ NOT CACHED ]-----------------------> Name(%-10s) Part(%d) State(%d)\n"
argument_list|,
name|qPrintable
argument_list|(
name|themeData
operator|.
name|name
argument_list|)
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"-->partIsTransparen      = %d\n"
argument_list|,
name|partIsTransparent
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"-->potentialInvalidAlpha = %d\n"
argument_list|,
name|potentialInvalidAlpha
argument_list|)
expr_stmt|;
name|showProperties
argument_list|(
name|themeData
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|bool
name|wasAlphaSwapped
init|=
literal|false
decl_stmt|;
name|bool
name|wasAlphaFixed
init|=
literal|false
decl_stmt|;
comment|// OLD PSDK Workaround ------------------------------------------------------------------------
comment|// See if we need extra clipping for the older PSDK, which does
comment|// not have a DrawThemeBackgroundEx function for DTGB_OMITBORDER
comment|// and DTGB_OMITCONTENT
name|bool
name|addBorderContentClipping
init|=
literal|false
decl_stmt|;
name|QRegion
name|extraClip
decl_stmt|;
name|QRect
name|area
init|=
name|rect
decl_stmt|;
if|if
condition|(
name|themeData
operator|.
name|noBorder
operator|||
name|themeData
operator|.
name|noContent
condition|)
block|{
name|extraClip
operator|=
name|area
expr_stmt|;
comment|// We are running on a system where the uxtheme.dll does not have
comment|// the DrawThemeBackgroundEx function, so we need to clip away
comment|// borders or contents manually.
name|int
name|borderSize
init|=
literal|0
decl_stmt|;
name|PROPERTYORIGIN
name|origin
init|=
name|PO_NOTFOUND
decl_stmt|;
name|pGetThemePropertyOrigin
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|TMT_BORDERSIZE
argument_list|,
operator|&
name|origin
argument_list|)
expr_stmt|;
name|pGetThemeInt
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|TMT_BORDERSIZE
argument_list|,
operator|&
name|borderSize
argument_list|)
expr_stmt|;
comment|// Clip away border region
if|if
condition|(
operator|(
name|origin
operator|==
name|PO_CLASS
operator|||
name|origin
operator|==
name|PO_PART
operator|||
name|origin
operator|==
name|PO_STATE
operator|)
operator|&&
name|borderSize
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|themeData
operator|.
name|noBorder
condition|)
block|{
name|extraClip
operator|&=
name|area
expr_stmt|;
name|area
operator|=
name|area
operator|.
name|adjusted
argument_list|(
operator|-
name|borderSize
argument_list|,
operator|-
name|borderSize
argument_list|,
name|borderSize
argument_list|,
name|borderSize
argument_list|)
expr_stmt|;
block|}
comment|// Clip away content region
if|if
condition|(
name|themeData
operator|.
name|noContent
condition|)
block|{
name|QRegion
name|content
init|=
name|area
operator|.
name|adjusted
argument_list|(
name|borderSize
argument_list|,
name|borderSize
argument_list|,
operator|-
name|borderSize
argument_list|,
operator|-
name|borderSize
argument_list|)
decl_stmt|;
name|extraClip
operator|^=
name|content
expr_stmt|;
block|}
block|}
name|addBorderContentClipping
operator|=
operator|(
name|themeData
operator|.
name|noBorder
operator||
name|themeData
operator|.
name|noContent
operator|)
expr_stmt|;
block|}
name|QImage
name|img
decl_stmt|;
if|if
condition|(
operator|!
name|haveCachedPixmap
condition|)
block|{
comment|// If the pixmap is not cached, generate it! -------------------------
name|buffer
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
comment|// Ensure a buffer of at least (w, h) in size
name|HDC
name|dc
init|=
name|bufferHDC
argument_list|()
decl_stmt|;
comment|// Clear the buffer
if|if
condition|(
name|alphaType
operator|!=
name|NoAlpha
condition|)
block|{
comment|// Consider have separate "memset" function for small chunks for more speedup
name|memset
argument_list|(
name|bufferPixels
argument_list|,
literal|0x00
argument_list|,
name|bufferW
operator|*
name|h
operator|*
literal|4
argument_list|)
expr_stmt|;
block|}
comment|// Difference between area and rect
name|int
name|dx
init|=
name|area
operator|.
name|x
argument_list|()
operator|-
name|rect
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|dy
init|=
name|area
operator|.
name|y
argument_list|()
operator|-
name|rect
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|dr
init|=
name|area
operator|.
name|right
argument_list|()
operator|-
name|rect
operator|.
name|right
argument_list|()
decl_stmt|;
name|int
name|db
init|=
name|area
operator|.
name|bottom
argument_list|()
operator|-
name|rect
operator|.
name|bottom
argument_list|()
decl_stmt|;
comment|// Adjust so painting rect starts from Origo
name|rect
operator|.
name|moveTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|area
operator|.
name|moveTo
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
name|DTBGOPTS
name|drawOptions
decl_stmt|;
name|drawOptions
operator|.
name|dwSize
operator|=
sizeof|sizeof
argument_list|(
name|drawOptions
argument_list|)
expr_stmt|;
name|drawOptions
operator|.
name|rcClip
operator|=
name|themeData
operator|.
name|toRECT
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|drawOptions
operator|.
name|dwFlags
operator|=
name|DTBG_CLIPRECT
operator||
operator|(
name|themeData
operator|.
name|noBorder
condition|?
name|DTBG_OMITBORDER
else|:
literal|0
operator|)
operator||
operator|(
name|themeData
operator|.
name|noContent
condition|?
name|DTBG_OMITCONTENT
else|:
literal|0
operator|)
expr_stmt|;
comment|// Drawing the part into the backing store
if|if
condition|(
name|pDrawThemeBackgroundEx
operator|!=
literal|0
condition|)
block|{
name|RECT
name|rect
argument_list|(
name|themeData
operator|.
name|toRECT
argument_list|(
name|area
argument_list|)
argument_list|)
decl_stmt|;
name|pDrawThemeBackgroundEx
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|dc
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
operator|&
name|rect
argument_list|,
operator|&
name|drawOptions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Set the clip region, if used..
if|if
condition|(
name|addBorderContentClipping
condition|)
block|{
name|HRGN
name|hrgn
init|=
name|qt_hrgn_from_qregion
argument_list|(
name|extraClip
argument_list|)
decl_stmt|;
name|SelectClipRgn
argument_list|(
name|dc
argument_list|,
name|hrgn
argument_list|)
expr_stmt|;
comment|// Compensate for the noBorder area difference (noContent has the same area)
name|drawOptions
operator|.
name|rcClip
operator|=
name|themeData
operator|.
name|toRECT
argument_list|(
name|rect
operator|.
name|adjusted
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|,
name|dr
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|hrgn
argument_list|)
expr_stmt|;
block|}
name|pDrawThemeBackground
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|dc
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
operator|&
operator|(
name|drawOptions
operator|.
name|rcClip
operator|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|addBorderContentClipping
condition|)
name|SelectClipRgn
argument_list|(
name|dc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// If not cached, analyze the buffer data to figure
comment|// out alpha type, and if it contains data
if|if
condition|(
operator|!
name|isCached
condition|)
block|{
comment|// SHORTCUT: If the part's state has no data, cache it for NOOP later
if|if
condition|(
operator|!
name|stateHasData
condition|)
block|{
name|memset
argument_list|(
operator|&
name|data
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|dataValid
operator|=
literal|true
expr_stmt|;
name|alphaCache
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return;
block|}
name|hasAlpha
operator|=
name|hasAlphaChannel
argument_list|(
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasAlpha
operator|&&
name|partIsTransparent
condition|)
name|potentialInvalidAlpha
operator|=
literal|true
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_XP_STYLE
argument_list|)
operator|&&
literal|1
name|dumpNativeDIB
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
comment|// Fix alpha values, if needed
if|if
condition|(
name|potentialInvalidAlpha
condition|)
name|wasAlphaFixed
operator|=
name|fixAlphaChannel
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|QImage
operator|::
name|Format
name|format
decl_stmt|;
if|if
condition|(
operator|(
name|partIsTransparent
operator|&&
operator|!
name|wasAlphaSwapped
operator|)
operator|||
operator|(
operator|!
name|partIsTransparent
operator|&&
name|hasAlpha
operator|)
condition|)
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
name|alphaType
operator|=
name|RealAlpha
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wasAlphaSwapped
condition|)
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
name|alphaType
operator|=
name|MaskAlpha
expr_stmt|;
block|}
else|else
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
comment|// The image data we got from the theme engine does not have any transparency,
comment|// thus the alpha channel is set to 0.
comment|// However, Format_RGB32 requires the alpha part to be set to 0xff, thus
comment|// we must flip it from 0x00 to 0xff
name|swapAlphaChannel
argument_list|(
name|rect
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|alphaType
operator|=
name|NoAlpha
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_XP_STYLE
argument_list|)
operator|&&
literal|1
name|printf
argument_list|(
literal|"Image format is: %s\n"
argument_list|,
name|alphaType
operator|==
name|RealAlpha
condition|?
literal|"Real Alpha"
else|:
name|alphaType
operator|==
name|MaskAlpha
condition|?
literal|"Masked Alpha"
else|:
literal|"No Alpha"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|img
operator|=
name|QImage
argument_list|(
name|bufferPixels
argument_list|,
name|bufferW
argument_list|,
name|bufferH
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
comment|// Blitting backing store
name|bool
name|useRegion
init|=
name|partIsTransparent
operator|&&
operator|!
name|hasAlpha
operator|&&
operator|!
name|wasAlphaSwapped
decl_stmt|;
name|QRegion
name|newRegion
decl_stmt|;
name|QRegion
name|oldRegion
decl_stmt|;
if|if
condition|(
name|useRegion
condition|)
block|{
name|newRegion
operator|=
name|region
argument_list|(
name|themeData
argument_list|)
expr_stmt|;
name|oldRegion
operator|=
name|painter
operator|->
name|clipRegion
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setClipRegion
argument_list|(
name|newRegion
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_XP_STYLE
argument_list|)
operator|&&
literal|0
name|printf
argument_list|(
literal|"Using region:\n"
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|newRegion
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
modifier|&
name|r
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|printf
argument_list|(
literal|"    (%d, %d, %d, %d)\n"
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|right
argument_list|()
argument_list|,
name|r
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
if|if
condition|(
name|addBorderContentClipping
condition|)
name|painter
operator|->
name|setClipRegion
argument_list|(
name|extraClip
argument_list|,
name|Qt
operator|::
name|IntersectClip
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|themeData
operator|.
name|mirrorHorizontally
operator|&&
operator|!
name|themeData
operator|.
name|mirrorVertically
operator|&&
operator|!
name|themeData
operator|.
name|rotate
condition|)
block|{
if|if
condition|(
operator|!
name|haveCachedPixmap
condition|)
name|painter
operator|->
name|drawImage
argument_list|(
name|themeData
operator|.
name|rect
argument_list|,
name|img
argument_list|,
name|rect
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|drawPixmap
argument_list|(
name|themeData
operator|.
name|rect
argument_list|,
name|cachedPixmap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This is _slow_!
comment|// Make a copy containing only the necessary data, and mirror
comment|// on all wanted axes. Then draw the copy.
comment|// If cached, the normal pixmap is cached, instead of caching
comment|// all possible orientations for each part and state.
name|QImage
name|imgCopy
decl_stmt|;
if|if
condition|(
operator|!
name|haveCachedPixmap
condition|)
name|imgCopy
operator|=
name|img
operator|.
name|copy
argument_list|(
name|rect
argument_list|)
expr_stmt|;
else|else
name|imgCopy
operator|=
name|cachedPixmap
operator|.
name|toImage
argument_list|()
expr_stmt|;
if|if
condition|(
name|themeData
operator|.
name|rotate
condition|)
block|{
name|QMatrix
name|rotMatrix
decl_stmt|;
name|rotMatrix
operator|.
name|rotate
argument_list|(
name|themeData
operator|.
name|rotate
argument_list|)
expr_stmt|;
name|imgCopy
operator|=
name|imgCopy
operator|.
name|transformed
argument_list|(
name|rotMatrix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|themeData
operator|.
name|mirrorHorizontally
operator|||
name|themeData
operator|.
name|mirrorVertically
condition|)
block|{
name|imgCopy
operator|=
name|imgCopy
operator|.
name|mirrored
argument_list|(
name|themeData
operator|.
name|mirrorHorizontally
argument_list|,
name|themeData
operator|.
name|mirrorVertically
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|drawImage
argument_list|(
name|themeData
operator|.
name|rect
argument_list|,
name|imgCopy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useRegion
operator|||
name|addBorderContentClipping
condition|)
block|{
if|if
condition|(
name|oldRegion
operator|.
name|isEmpty
argument_list|()
condition|)
name|painter
operator|->
name|setClipping
argument_list|(
literal|false
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|setClipRegion
argument_list|(
name|oldRegion
argument_list|)
expr_stmt|;
block|}
comment|// Cache the pixmap to avoid expensive swapAlphaChannel() calls
if|if
condition|(
operator|!
name|haveCachedPixmap
operator|&&
name|w
operator|&&
name|h
condition|)
block|{
name|QPixmap
name|pix
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img
argument_list|)
operator|.
name|copy
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pixmapCacheKey
argument_list|,
name|pix
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_XP_STYLE
name|printf
argument_list|(
literal|"+++Adding pixmap to cache, size(%d, %d), wasAlphaSwapped(%d), wasAlphaFixed(%d), name(%s)\n"
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|wasAlphaSwapped
argument_list|,
name|wasAlphaFixed
argument_list|,
name|qPrintable
argument_list|(
name|pixmapCacheKey
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
comment|// Add to theme part cache
if|if
condition|(
operator|!
name|isCached
condition|)
block|{
name|memset
argument_list|(
operator|&
name|data
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|dataValid
operator|=
literal|true
expr_stmt|;
name|data
operator|.
name|partIsTransparent
operator|=
name|partIsTransparent
expr_stmt|;
name|data
operator|.
name|alphaType
operator|=
name|alphaType
expr_stmt|;
name|data
operator|.
name|hasAlphaChannel
operator|=
name|hasAlpha
expr_stmt|;
name|data
operator|.
name|wasAlphaSwapped
operator|=
name|wasAlphaSwapped
expr_stmt|;
name|data
operator|.
name|hadInvalidAlpha
operator|=
name|wasAlphaFixed
expr_stmt|;
name|alphaCache
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------------------------
end_comment
begin_comment
comment|/*!     \class QWindowsXPStyle     \brief The QWindowsXPStyle class provides a Microsoft Windows XP-like look and feel.      \ingroup appearance     \inmodule QtWidgets     \internal      \warning This style is only available on the Windows XP platform     because it makes use of Windows XP's style engine.      Most of the functions are documented in the base classes     QWindowsStyle, QCommonStyle, and QStyle, but the     QWindowsXPStyle overloads of drawComplexControl(), drawControl(),     drawControlMask(), drawPrimitive(), proxy()->subControlRect(), and     sizeFromContents(), are documented here.      \image qwindowsxpstyle.png     \sa QMacStyle, QWindowsStyle, QFusionStyle */
end_comment
begin_comment
comment|/*!     Constructs a QWindowsStyle */
end_comment
begin_constructor
DECL|function|QWindowsXPStyle
name|QWindowsXPStyle
operator|::
name|QWindowsXPStyle
parameter_list|()
member_init_list|:
name|QWindowsStyle
argument_list|(
operator|*
operator|new
name|QWindowsXPStylePrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the style. */
end_comment
begin_destructor
DECL|function|~QWindowsXPStyle
name|QWindowsXPStyle
operator|::
name|~
name|QWindowsXPStyle
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|unpolish
name|void
name|QWindowsXPStyle
operator|::
name|unpolish
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
block|{
name|QWindowsStyle
operator|::
name|unpolish
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|polish
name|void
name|QWindowsXPStyle
operator|::
name|polish
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
block|{
name|QWindowsStyle
operator|::
name|polish
argument_list|(
name|app
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
condition|)
return|return;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|polish
name|void
name|QWindowsXPStyle
operator|::
name|polish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QWindowsStyle
operator|::
name|polish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
condition|)
return|return;
if|if
condition|(
name|qobject_cast
argument_list|<
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
operator|||
name|qobject_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
operator|||
name|qobject_cast
argument_list|<
name|QScrollBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QSlider
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QHeaderView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
operator|||
name|qobject_cast
argument_list|<
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QSpinBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
endif|#
directive|endif
comment|// QT_NO_SPINBOX
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
if|if
condition|(
name|qobject_cast
argument_list|<
name|QRubberBand
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|widget
operator|->
name|setWindowOpacity
argument_list|(
literal|0.6
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|qobject_cast
argument_list|<
name|QStackedWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|&&
name|qobject_cast
argument_list|<
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parent
argument_list|()
argument_list|)
condition|)
name|widget
operator|->
name|parentWidget
argument_list|()
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_ContentsPropagated
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QWindowsXPStyle
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|hasInitColors
condition|)
block|{
comment|// Get text color for group box labels
name|COLORREF
name|cref
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ButtonTheme
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QWindowsXPStylePrivate
operator|::
name|pGetThemeColor
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|BP_GROUPBOX
argument_list|,
name|GBS_NORMAL
argument_list|,
name|TMT_TEXTCOLOR
argument_list|,
operator|&
name|cref
argument_list|)
expr_stmt|;
name|d
operator|->
name|groupBoxTextColor
operator|=
name|qRgb
argument_list|(
name|GetRValue
argument_list|(
name|cref
argument_list|)
argument_list|,
name|GetGValue
argument_list|(
name|cref
argument_list|)
argument_list|,
name|GetBValue
argument_list|(
name|cref
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowsXPStylePrivate
operator|::
name|pGetThemeColor
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|BP_GROUPBOX
argument_list|,
name|GBS_DISABLED
argument_list|,
name|TMT_TEXTCOLOR
argument_list|,
operator|&
name|cref
argument_list|)
expr_stmt|;
name|d
operator|->
name|groupBoxTextColorDisabled
operator|=
name|qRgb
argument_list|(
name|GetRValue
argument_list|(
name|cref
argument_list|)
argument_list|,
name|GetGValue
argument_list|(
name|cref
argument_list|)
argument_list|,
name|GetBValue
argument_list|(
name|cref
argument_list|)
argument_list|)
expr_stmt|;
comment|// Where does this color come from?
comment|//pGetThemeColor(theme.handle(), TKP_TICS, TSS_NORMAL, TMT_COLOR,&cref);
name|d
operator|->
name|sliderTickColor
operator|=
name|qRgb
argument_list|(
literal|165
argument_list|,
literal|162
argument_list|,
literal|148
argument_list|)
expr_stmt|;
name|d
operator|->
name|hasInitColors
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|polish
name|void
name|QWindowsXPStyle
operator|::
name|polish
parameter_list|(
name|QPalette
modifier|&
name|pal
parameter_list|)
block|{
name|QWindowsStyle
operator|::
name|polish
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|pal
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|110
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|unpolish
name|void
name|QWindowsXPStyle
operator|::
name|unpolish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
if|if
condition|(
name|qobject_cast
argument_list|<
name|QRubberBand
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|widget
operator|->
name|setWindowOpacity
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|Q_D
argument_list|(
name|QWindowsXPStyle
argument_list|)
expr_stmt|;
comment|// Unpolish of widgets is the first thing that
comment|// happens when a theme changes, or the theme
comment|// engine is turned off. So we detect it here.
name|bool
name|oldState
init|=
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
decl_stmt|;
name|bool
name|newState
init|=
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|oldState
operator|!=
name|newState
operator|)
operator|&&
name|newState
condition|)
block|{
name|d
operator|->
name|cleanup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Cleanup handle map, if just changing style,
comment|// or turning it on. In both cases the values
comment|// already in the map might be old (other style).
name|d
operator|->
name|cleanupHandleMap
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|qobject_cast
argument_list|<
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
operator|||
name|qobject_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
operator|||
name|qobject_cast
argument_list|<
name|QScrollBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QSlider
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QHeaderView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
operator|||
name|qobject_cast
argument_list|<
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QSpinBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
endif|#
directive|endif
comment|// QT_NO_SPINBOX
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|QWindowsStyle
operator|::
name|unpolish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|subElementRect
name|QRect
name|QWindowsXPStyle
operator|::
name|subElementRect
parameter_list|(
name|SubElement
name|sr
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
condition|)
block|{
return|return
name|QWindowsStyle
operator|::
name|subElementRect
argument_list|(
name|sr
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
name|QRect
name|rect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|sr
condition|)
block|{
case|case
name|SE_DockWidgetCloseButton
case|:
case|case
name|SE_DockWidgetFloatButton
case|:
name|rect
operator|=
name|QWindowsStyle
operator|::
name|subElementRect
argument_list|(
name|sr
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return
name|rect
operator|.
name|translated
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
name|SE_TabWidgetTabContents
case|:
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabWidgetFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|rect
operator|=
name|QWindowsStyle
operator|::
name|subElementRect
argument_list|(
name|sr
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|sr
operator|==
name|SE_TabWidgetTabContents
condition|)
block|{
if|if
condition|(
specifier|const
name|QTabWidget
modifier|*
name|tabWidget
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|tabWidget
operator|->
name|documentMode
argument_list|()
condition|)
break|break;
block|}
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|SE_TabWidgetTabBar
case|:
block|{
name|rect
operator|=
name|QWindowsStyle
operator|::
name|subElementRect
argument_list|(
name|sr
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
expr_stmt|;
specifier|const
name|QStyleOptionTabWidgetFrame
modifier|*
name|twfOption
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabWidgetFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|twfOption
operator|&&
name|twfOption
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|&&
operator|(
name|twfOption
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedNorth
operator|||
name|twfOption
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedSouth
operator|)
condition|)
block|{
name|QStyleOptionTab
name|otherOption
decl_stmt|;
name|otherOption
operator|.
name|shape
operator|=
operator|(
name|twfOption
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedNorth
condition|?
name|QTabBar
operator|::
name|RoundedEast
else|:
name|QTabBar
operator|::
name|RoundedSouth
operator|)
expr_stmt|;
name|int
name|overlap
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_TabBarBaseOverlap
argument_list|,
operator|&
name|otherOption
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|borderThickness
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
operator|-
name|overlap
operator|+
name|borderThickness
argument_list|,
literal|0
argument_list|,
operator|-
name|overlap
operator|+
name|borderThickness
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|SE_PushButtonContents
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|MARGINS
name|borderSize
decl_stmt|;
if|if
condition|(
name|widget
condition|)
block|{
name|XPThemeData
name|buttontheme
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ButtonTheme
argument_list|)
decl_stmt|;
name|HTHEME
name|theme
init|=
name|buttontheme
operator|.
name|handle
argument_list|()
decl_stmt|;
if|if
condition|(
name|theme
condition|)
block|{
name|int
name|stateId
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|PBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|stateId
operator|=
name|PBS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|PBS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|DefaultButton
condition|)
name|stateId
operator|=
name|PBS_DEFAULTED
expr_stmt|;
else|else
name|stateId
operator|=
name|PBS_NORMAL
expr_stmt|;
name|int
name|border
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|rect
operator|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|border
argument_list|,
name|border
argument_list|,
operator|-
name|border
argument_list|,
operator|-
name|border
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|QWindowsXPStylePrivate
operator|::
name|pGetThemeMargins
argument_list|(
name|theme
argument_list|,
name|NULL
argument_list|,
name|BP_PUSHBUTTON
argument_list|,
name|stateId
argument_list|,
name|TMT_CONTENTMARGINS
argument_list|,
name|NULL
argument_list|,
operator|&
name|borderSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|S_OK
condition|)
block|{
name|rect
operator|.
name|adjust
argument_list|(
name|borderSize
operator|.
name|cxLeftWidth
argument_list|,
name|borderSize
operator|.
name|cyTopHeight
argument_list|,
operator|-
name|borderSize
operator|.
name|cxRightWidth
argument_list|,
operator|-
name|borderSize
operator|.
name|cyBottomHeight
argument_list|)
expr_stmt|;
name|rect
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
break|break;
case|case
name|SE_ProgressBarContents
case|:
name|rect
operator|=
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|SE_ProgressBarGroove
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Horizontal
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|adjust
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
break|break;
default|default:
name|rect
operator|=
name|QWindowsStyle
operator|::
name|subElementRect
argument_list|(
name|sr
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
return|return
name|rect
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawPrimitive
name|void
name|QWindowsXPStyle
operator|::
name|drawPrimitive
parameter_list|(
name|PrimitiveElement
name|pe
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QWindowsXPStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsXPStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
condition|)
block|{
name|QWindowsStyle
operator|::
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|option
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|themeNumber
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|partId
init|=
literal|0
decl_stmt|;
name|int
name|stateId
init|=
literal|0
decl_stmt|;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|State
name|flags
init|=
name|option
operator|->
name|state
decl_stmt|;
name|bool
name|hMirrored
init|=
literal|false
decl_stmt|;
name|bool
name|vMirrored
init|=
literal|false
decl_stmt|;
name|bool
name|noBorder
init|=
literal|false
decl_stmt|;
name|bool
name|noContent
init|=
literal|false
decl_stmt|;
name|int
name|rotate
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|pe
condition|)
block|{
case|case
name|PE_FrameTabBarBase
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTabBarBase
modifier|*
name|tbb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabBarBase
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|tbb
operator|->
name|shape
condition|)
block|{
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|tbb
operator|->
name|palette
operator|.
name|dark
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|tbb
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|tbb
operator|->
name|rect
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|tbb
operator|->
name|palette
operator|.
name|dark
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|tbb
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|tbb
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|tbb
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|tbb
operator|->
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|tbb
operator|->
name|palette
operator|.
name|dark
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|tbb
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|tbb
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|tbb
operator|->
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|tbb
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|tbb
operator|->
name|palette
operator|.
name|dark
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|tbb
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|tbb
operator|->
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|TriangularNorth
case|:
case|case
name|QTabBar
operator|::
name|TriangularEast
case|:
case|case
name|QTabBar
operator|::
name|TriangularWest
case|:
case|case
name|QTabBar
operator|::
name|TriangularSouth
case|:
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
name|QWindowsStyle
operator|::
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|option
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|PE_PanelButtonBevel
case|:
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|ButtonTheme
expr_stmt|;
name|partId
operator|=
name|BP_PUSHBUTTON
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|PBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
name|State_Sunken
operator|)
operator|||
operator|(
name|flags
operator|&
name|State_On
operator|)
condition|)
name|stateId
operator|=
name|PBS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|PBS_HOT
expr_stmt|;
comment|//else if (flags& State_ButtonDefault)
comment|//    stateId = PBS_DEFAULTED;
else|else
name|stateId
operator|=
name|PBS_NORMAL
expr_stmt|;
break|break;
case|case
name|PE_PanelButtonTool
case|:
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|inherits
argument_list|(
literal|"QDockWidgetTitleButton"
argument_list|)
condition|)
block|{
if|if
condition|(
specifier|const
name|QWidget
modifier|*
name|dw
init|=
name|widget
operator|->
name|parentWidget
argument_list|()
condition|)
if|if
condition|(
name|dw
operator|->
name|isWindow
argument_list|()
condition|)
return|return;
block|}
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|ToolBarTheme
expr_stmt|;
name|partId
operator|=
name|TP_BUTTON
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|TS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_Sunken
condition|)
name|stateId
operator|=
name|TS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|flags
operator|&
name|State_On
condition|?
name|TS_HOTCHECKED
else|:
name|TS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_On
condition|)
name|stateId
operator|=
name|TS_CHECKED
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_AutoRaise
operator|)
condition|)
name|stateId
operator|=
name|TS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|TS_NORMAL
expr_stmt|;
break|break;
case|case
name|PE_IndicatorButtonDropDown
case|:
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|ToolBarTheme
expr_stmt|;
name|partId
operator|=
name|TP_SPLITBUTTONDROPDOWN
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|TS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_Sunken
condition|)
name|stateId
operator|=
name|TS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|flags
operator|&
name|State_On
condition|?
name|TS_HOTCHECKED
else|:
name|TS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_On
condition|)
name|stateId
operator|=
name|TS_CHECKED
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_AutoRaise
operator|)
condition|)
name|stateId
operator|=
name|TS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|TS_NORMAL
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|hMirrored
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|PE_IndicatorCheckBox
case|:
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|ButtonTheme
expr_stmt|;
name|partId
operator|=
name|BP_CHECKBOX
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|CBS_UNCHECKEDDISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_Sunken
condition|)
name|stateId
operator|=
name|CBS_UNCHECKEDPRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|CBS_UNCHECKEDHOT
expr_stmt|;
else|else
name|stateId
operator|=
name|CBS_UNCHECKEDNORMAL
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|State_On
condition|)
name|stateId
operator|+=
name|CBS_CHECKEDNORMAL
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_NoChange
condition|)
name|stateId
operator|+=
name|CBS_MIXEDNORMAL
operator|-
literal|1
expr_stmt|;
break|break;
case|case
name|PE_IndicatorRadioButton
case|:
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|ButtonTheme
expr_stmt|;
name|partId
operator|=
name|BP_RADIOBUTTON
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|RBS_UNCHECKEDDISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_Sunken
condition|)
name|stateId
operator|=
name|RBS_UNCHECKEDPRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|RBS_UNCHECKEDHOT
expr_stmt|;
else|else
name|stateId
operator|=
name|RBS_UNCHECKEDNORMAL
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|State_On
condition|)
name|stateId
operator|+=
name|RBS_CHECKEDNORMAL
operator|-
literal|1
expr_stmt|;
break|break;
case|case
name|PE_IndicatorDockWidgetResizeHandle
case|:
return|return;
case|case
name|PE_Frame
case|:
block|{
if|if
condition|(
name|flags
operator|&
name|State_Raised
condition|)
return|return;
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|ListViewTheme
expr_stmt|;
name|partId
operator|=
name|LVP_LISTGROUP
expr_stmt|;
name|XPThemeData
name|theme
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|themeNumber
argument_list|,
name|partId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|ETS_DISABLED
expr_stmt|;
else|else
name|stateId
operator|=
name|ETS_NORMAL
expr_stmt|;
name|int
name|fillType
decl_stmt|;
if|if
condition|(
name|QWindowsXPStylePrivate
operator|::
name|pGetThemeEnumValue
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|TMT_BGTYPE
argument_list|,
operator|&
name|fillType
argument_list|)
operator|==
name|S_OK
condition|)
block|{
if|if
condition|(
name|fillType
operator|==
name|BT_BORDERFILL
condition|)
block|{
name|COLORREF
name|bcRef
decl_stmt|;
name|QWindowsXPStylePrivate
operator|::
name|pGetThemeColor
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|TMT_BORDERCOLOR
argument_list|,
operator|&
name|bcRef
argument_list|)
expr_stmt|;
name|QColor
name|bordercolor
argument_list|(
name|qRgb
argument_list|(
name|GetRValue
argument_list|(
name|bcRef
argument_list|)
argument_list|,
name|GetGValue
argument_list|(
name|bcRef
argument_list|)
argument_list|,
name|GetBValue
argument_list|(
name|bcRef
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QPen
name|oldPen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
comment|// int borderSize = 1;
comment|// pGetThemeInt(theme.handle(), partId, stateId, TMT_BORDERCOLOR,&borderSize);
comment|// Inner white border
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Outer dark border
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|bordercolor
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|fillType
operator|==
name|BT_NONE
condition|)
block|{
return|return;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
case|case
name|PE_FrameLineEdit
case|:
block|{
comment|// we try to check if this lineedit is a delegate on a QAbstractItemView-derived class.
if|if
condition|(
name|QWindowsXPStylePrivate
operator|::
name|isItemViewDelegateLineEdit
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|QPen
name|oldPen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
comment|// Inner white border
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Outer dark border
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|EditTheme
expr_stmt|;
name|partId
operator|=
name|EP_EDITTEXT
expr_stmt|;
name|noContent
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|ETS_DISABLED
expr_stmt|;
else|else
name|stateId
operator|=
name|ETS_NORMAL
expr_stmt|;
block|}
break|break;
block|}
case|case
name|PE_PanelLineEdit
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|panel
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|EditTheme
expr_stmt|;
name|partId
operator|=
name|EP_EDITTEXT
expr_stmt|;
name|noBorder
operator|=
literal|true
expr_stmt|;
name|QBrush
name|bg
decl_stmt|;
name|bool
name|usePalette
init|=
literal|false
decl_stmt|;
name|bool
name|isEnabled
init|=
name|flags
operator|&
name|State_Enabled
decl_stmt|;
name|uint
name|resolve_mask
init|=
name|panel
operator|->
name|palette
operator|.
name|resolve
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
comment|// Since spin box includes a line edit we need to resolve the palette mask also from
comment|// the parent, as while the color is always correct on the palette supplied by panel,
comment|// the mask can still be empty. If either mask specifies custom base color, use that.
if|if
condition|(
name|widget
condition|)
block|{
if|if
condition|(
name|QAbstractSpinBox
modifier|*
name|spinbox
init|=
name|qobject_cast
argument_list|<
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
name|resolve_mask
operator||=
name|spinbox
operator|->
name|palette
argument_list|()
operator|.
name|resolve
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_SPINBOX
if|if
condition|(
name|resolve_mask
operator|&
operator|(
literal|1
operator|<<
name|QPalette
operator|::
name|Base
operator|)
condition|)
block|{
comment|// Base color is set for this widget, so use it
name|bg
operator|=
name|panel
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|usePalette
operator|=
literal|true
expr_stmt|;
block|}
name|stateId
operator|=
name|isEnabled
condition|?
name|ETS_NORMAL
else|:
name|ETS_DISABLED
expr_stmt|;
if|if
condition|(
name|usePalette
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|panel
operator|->
name|rect
argument_list|,
name|bg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XPThemeData
name|theme
argument_list|(
literal|0
argument_list|,
name|p
argument_list|,
name|themeNumber
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QWindowsStyle
operator|::
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|option
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|bgType
decl_stmt|;
name|QWindowsXPStylePrivate
operator|::
name|pGetThemeEnumValue
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|TMT_BGTYPE
argument_list|,
operator|&
name|bgType
argument_list|)
expr_stmt|;
if|if
condition|(
name|bgType
operator|==
name|BT_IMAGEFILE
condition|)
block|{
name|theme
operator|.
name|mirrorHorizontally
operator|=
name|hMirrored
expr_stmt|;
name|theme
operator|.
name|mirrorVertically
operator|=
name|vMirrored
expr_stmt|;
name|theme
operator|.
name|noBorder
operator|=
name|noBorder
expr_stmt|;
name|theme
operator|.
name|noContent
operator|=
name|noContent
expr_stmt|;
name|theme
operator|.
name|rotate
operator|=
name|rotate
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QBrush
name|fillColor
init|=
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isEnabled
condition|)
block|{
name|PROPERTYORIGIN
name|origin
init|=
name|PO_NOTFOUND
decl_stmt|;
name|QWindowsXPStylePrivate
operator|::
name|pGetThemePropertyOrigin
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|theme
operator|.
name|partId
argument_list|,
name|theme
operator|.
name|stateId
argument_list|,
name|TMT_FILLCOLOR
argument_list|,
operator|&
name|origin
argument_list|)
expr_stmt|;
comment|// Use only if the fill property comes from our part
if|if
condition|(
operator|(
name|origin
operator|==
name|PO_PART
operator|||
name|origin
operator|==
name|PO_STATE
operator|)
condition|)
block|{
name|COLORREF
name|bgRef
decl_stmt|;
name|QWindowsXPStylePrivate
operator|::
name|pGetThemeColor
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|TMT_FILLCOLOR
argument_list|,
operator|&
name|bgRef
argument_list|)
expr_stmt|;
name|fillColor
operator|=
name|QBrush
argument_list|(
name|qRgb
argument_list|(
name|GetRValue
argument_list|(
name|bgRef
argument_list|)
argument_list|,
name|GetGValue
argument_list|(
name|bgRef
argument_list|)
argument_list|,
name|GetBValue
argument_list|(
name|bgRef
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|p
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|fillColor
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|panel
operator|->
name|lineWidth
operator|>
literal|0
condition|)
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameLineEdit
argument_list|,
name|panel
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|PE_FrameTabWidget
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTabWidgetFrame
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabWidgetFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|TabTheme
expr_stmt|;
name|partId
operator|=
name|TABP_PANE
expr_stmt|;
if|if
condition|(
name|widget
condition|)
block|{
name|bool
name|useGradient
init|=
literal|true
decl_stmt|;
specifier|const
name|int
name|maxlength
init|=
literal|256
decl_stmt|;
name|wchar_t
name|themeFileName
index|[
name|maxlength
index|]
decl_stmt|;
name|wchar_t
name|themeColor
index|[
name|maxlength
index|]
decl_stmt|;
comment|// Due to a a scaling issue with the XP Silver theme, tab gradients are not used with it
if|if
condition|(
name|QWindowsXPStylePrivate
operator|::
name|pGetCurrentThemeName
argument_list|(
name|themeFileName
argument_list|,
name|maxlength
argument_list|,
name|themeColor
argument_list|,
name|maxlength
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
operator|==
name|S_OK
condition|)
block|{
name|wchar_t
modifier|*
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
name|offset
operator|=
name|wcsrchr
argument_list|(
name|themeFileName
argument_list|,
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
operator|.
name|unicode
argument_list|()
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|offset
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|lstrcmp
argument_list|(
name|offset
argument_list|,
literal|L"Luna.msstyles"
argument_list|)
operator|&&
operator|!
name|lstrcmp
argument_list|(
name|offset
argument_list|,
literal|L"Metallic"
argument_list|)
condition|)
block|{
name|useGradient
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|// This should work, but currently there's an error in the ::drawBackgroundDirectly()
comment|// code, when using the HDC directly..
if|if
condition|(
name|useGradient
condition|)
block|{
name|QStyleOptionTabWidgetFrameV2
name|frameOpt
init|=
operator|*
name|tab
decl_stmt|;
name|frameOpt
operator|.
name|rect
operator|=
name|widget
operator|->
name|rect
argument_list|()
expr_stmt|;
name|QRect
name|contentsRect
init|=
name|subElementRect
argument_list|(
name|SE_TabWidgetTabContents
argument_list|,
operator|&
name|frameOpt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRegion
name|reg
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|reg
operator|-=
name|contentsRect
expr_stmt|;
name|p
operator|->
name|setClipRegion
argument_list|(
name|reg
argument_list|)
expr_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|themeNumber
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|rect
argument_list|)
decl_stmt|;
name|theme
operator|.
name|mirrorHorizontally
operator|=
name|hMirrored
expr_stmt|;
name|theme
operator|.
name|mirrorVertically
operator|=
name|vMirrored
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|p
operator|->
name|setClipRect
argument_list|(
name|contentsRect
argument_list|)
expr_stmt|;
name|partId
operator|=
name|TABP_BODY
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|tab
operator|->
name|shape
condition|)
block|{
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
case|case
name|QTabBar
operator|::
name|TriangularNorth
case|:
break|break;
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
case|case
name|QTabBar
operator|::
name|TriangularSouth
case|:
name|vMirrored
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
case|case
name|QTabBar
operator|::
name|TriangularEast
case|:
name|rotate
operator|=
literal|90
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
case|case
name|QTabBar
operator|::
name|TriangularWest
case|:
name|rotate
operator|=
literal|90
expr_stmt|;
name|hMirrored
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
break|break;
case|case
name|PE_FrameMenu
case|:
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
return|return;
case|case
name|PE_PanelMenuBar
case|:
break|break;
case|case
name|PE_FrameDockWidget
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|frm
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|State_Active
condition|)
name|stateId
operator|=
name|FS_ACTIVE
expr_stmt|;
else|else
name|stateId
operator|=
name|FS_INACTIVE
expr_stmt|;
name|int
name|fwidth
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DockWidgetFrameWidth
argument_list|,
name|frm
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|themeNumber
argument_list|,
literal|0
argument_list|,
name|stateId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|theme
operator|.
name|isValid
argument_list|()
condition|)
break|break;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|frm
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|frm
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|frm
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|fwidth
argument_list|,
name|frm
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|fwidth
argument_list|)
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|WP_SMALLFRAMELEFT
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|frm
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|fwidth
argument_list|,
name|frm
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|fwidth
argument_list|,
name|frm
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|fwidth
argument_list|)
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|WP_SMALLFRAMERIGHT
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|frm
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|frm
operator|->
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|fwidth
operator|+
literal|1
argument_list|,
name|frm
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|fwidth
argument_list|)
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|WP_SMALLFRAMEBOTTOM
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|PE_IndicatorHeaderArrow
case|:
block|{
if|#
directive|if
literal|0
comment|// XP theme engine doesn't know about this :(
block|name = QWindowsXPStylePrivate::HeaderTheme;             partId = HP_HEADERSORTARROW;             if (flags& State_Down)                 stateId = HSAS_SORTEDDOWN;             else                 stateId = HSAS_SORTEDUP;
else|#
directive|else
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|header
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
literal|0
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|->
name|sortIndicator
operator|&
name|QStyleOptionHeader
operator|::
name|SortUp
condition|)
block|{
comment|// invert logic to follow Windows style guide
name|p
operator|->
name|drawLine
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|8
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|7
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|6
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|5
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|4
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|header
operator|->
name|sortIndicator
operator|&
name|QStyleOptionHeader
operator|::
name|SortDown
condition|)
block|{
name|p
operator|->
name|drawLine
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|4
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|8
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|4
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|7
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|6
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|3
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|5
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|4
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
block|}
break|break;
case|case
name|PE_FrameStatusBarItem
case|:
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|StatusTheme
expr_stmt|;
name|partId
operator|=
name|SP_PANE
expr_stmt|;
break|break;
case|case
name|PE_FrameGroupBox
case|:
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|ButtonTheme
expr_stmt|;
name|partId
operator|=
name|BP_GROUPBOX
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|GBS_DISABLED
expr_stmt|;
else|else
name|stateId
operator|=
name|GBS_NORMAL
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|frame
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|QStyleOptionFrameV2
modifier|*
name|frame2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrameV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame2
operator|->
name|features
operator|&
name|QStyleOptionFrameV2
operator|::
name|Flat
condition|)
block|{
comment|// Windows XP does not have a theme part for a flat GroupBox, paint it with the windows style
name|QRect
name|fr
init|=
name|frame
operator|->
name|rect
decl_stmt|;
name|QPoint
name|p1
argument_list|(
name|fr
operator|.
name|x
argument_list|()
argument_list|,
name|fr
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|QPoint
name|p2
argument_list|(
name|fr
operator|.
name|x
argument_list|()
operator|+
name|fr
operator|.
name|width
argument_list|()
argument_list|,
name|p1
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|rect
operator|=
name|QRect
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|themeNumber
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PE_IndicatorProgressChunk
case|:
block|{
name|Qt
operator|::
name|Orientation
name|orient
init|=
name|Qt
operator|::
name|Horizontal
decl_stmt|;
name|bool
name|inverted
init|=
literal|false
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|pb2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|orient
operator|=
name|pb2
operator|->
name|orientation
expr_stmt|;
if|if
condition|(
name|pb2
operator|->
name|invertedAppearance
condition|)
name|inverted
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|partId
operator|=
name|PP_CHUNK
expr_stmt|;
name|rect
operator|=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|inverted
operator|&&
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|hMirrored
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|partId
operator|=
name|PP_CHUNKVERT
expr_stmt|;
name|rect
operator|=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|ProgressTheme
expr_stmt|;
name|stateId
operator|=
literal|1
expr_stmt|;
block|}
break|break;
case|case
name|PE_FrameWindow
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|frm
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|State_Active
condition|)
name|stateId
operator|=
name|FS_ACTIVE
expr_stmt|;
else|else
name|stateId
operator|=
name|FS_INACTIVE
expr_stmt|;
name|int
name|fwidth
init|=
name|frm
operator|->
name|lineWidth
operator|+
name|frm
operator|->
name|midLineWidth
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
literal|0
argument_list|,
name|p
argument_list|,
name|themeNumber
argument_list|,
literal|0
argument_list|,
name|stateId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|theme
operator|.
name|isValid
argument_list|()
condition|)
break|break;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|fwidth
argument_list|,
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|fwidth
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|fwidth
argument_list|)
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|WP_FRAMELEFT
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|fwidth
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|fwidth
argument_list|,
name|fwidth
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|fwidth
argument_list|)
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|WP_FRAMERIGHT
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|fwidth
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|fwidth
argument_list|)
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|WP_FRAMEBOTTOM
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|fwidth
argument_list|)
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|WP_CAPTION
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|PE_IndicatorBranch
case|:
block|{
specifier|static
specifier|const
name|int
name|decoration_size
init|=
literal|9
decl_stmt|;
name|int
name|mid_h
init|=
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|int
name|mid_v
init|=
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
decl_stmt|;
name|int
name|bef_h
init|=
name|mid_h
decl_stmt|;
name|int
name|bef_v
init|=
name|mid_v
decl_stmt|;
name|int
name|aft_h
init|=
name|mid_h
decl_stmt|;
name|int
name|aft_v
init|=
name|mid_v
decl_stmt|;
name|QBrush
name|brush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Item
condition|)
block|{
if|if
condition|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|mid_v
argument_list|,
name|bef_h
operator|-
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
literal|1
argument_list|,
name|brush
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|fillRect
argument_list|(
name|aft_h
argument_list|,
name|mid_v
argument_list|,
name|option
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
name|aft_h
operator|+
literal|1
argument_list|,
literal|1
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sibling
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|mid_h
argument_list|,
name|aft_v
argument_list|,
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|aft_v
operator|+
literal|1
argument_list|,
name|brush
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
operator|(
name|State_Open
operator||
name|State_Children
operator||
name|State_Item
operator||
name|State_Sibling
operator|)
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|mid_h
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
literal|1
argument_list|,
name|bef_v
operator|-
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|brush
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Children
condition|)
block|{
name|int
name|delta
init|=
name|decoration_size
operator|/
literal|2
decl_stmt|;
name|bef_h
operator|-=
name|delta
expr_stmt|;
name|bef_v
operator|-=
name|delta
expr_stmt|;
name|aft_h
operator|+=
name|delta
expr_stmt|;
name|aft_v
operator|+=
name|delta
expr_stmt|;
name|XPThemeData
name|theme
argument_list|(
literal|0
argument_list|,
name|p
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|TreeViewTheme
argument_list|)
decl_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|bef_h
argument_list|,
name|bef_v
argument_list|,
name|decoration_size
argument_list|,
name|decoration_size
argument_list|)
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|TVP_GLYPH
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|flags
operator|&
name|QStyle
operator|::
name|State_Open
condition|?
name|GLPS_OPENED
else|:
name|GLPS_CLOSED
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
case|case
name|PE_IndicatorToolBarSeparator
case|:
if|if
condition|(
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|<
literal|3
condition|)
block|{
comment|// XP style requires a few pixels for the separator
comment|// to be visible.
name|QWindowsStyle
operator|::
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|option
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|ToolBarTheme
expr_stmt|;
name|partId
operator|=
name|TP_SEPARATOR
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
name|partId
operator|=
name|TP_SEPARATOR
expr_stmt|;
else|else
name|partId
operator|=
name|TP_SEPARATORVERT
expr_stmt|;
break|break;
case|case
name|PE_IndicatorToolBarHandle
case|:
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|RebarTheme
expr_stmt|;
name|partId
operator|=
name|RP_GRIPPER
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
name|partId
operator|=
name|RP_GRIPPER
expr_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partId
operator|=
name|RP_GRIPPERVERT
expr_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_IndicatorItemViewItemCheck
case|:
block|{
name|QStyleOptionButton
name|button
decl_stmt|;
name|button
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|option
argument_list|)
expr_stmt|;
name|button
operator|.
name|state
operator|&=
operator|~
name|State_MouseOver
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorCheckBox
argument_list|,
operator|&
name|button
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
default|default:
break|break;
block|}
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|themeNumber
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QWindowsStyle
operator|::
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|option
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|theme
operator|.
name|mirrorHorizontally
operator|=
name|hMirrored
expr_stmt|;
name|theme
operator|.
name|mirrorVertically
operator|=
name|vMirrored
expr_stmt|;
name|theme
operator|.
name|noBorder
operator|=
name|noBorder
expr_stmt|;
name|theme
operator|.
name|noContent
operator|=
name|noContent
expr_stmt|;
name|theme
operator|.
name|rotate
operator|=
name|rotate
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawControl
name|void
name|QWindowsXPStyle
operator|::
name|drawControl
parameter_list|(
name|ControlElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QWindowsXPStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsXPStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
condition|)
block|{
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|QRect
name|rect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|State
name|flags
init|=
name|option
operator|->
name|state
decl_stmt|;
name|int
name|rotate
init|=
literal|0
decl_stmt|;
name|bool
name|hMirrored
init|=
literal|false
decl_stmt|;
name|bool
name|vMirrored
init|=
literal|false
decl_stmt|;
name|int
name|themeNumber
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|partId
init|=
literal|0
decl_stmt|;
name|int
name|stateId
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|CE_SizeGrip
case|:
block|{
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|StatusTheme
expr_stmt|;
name|partId
operator|=
name|SP_GRIPPER
expr_stmt|;
name|XPThemeData
name|theme
argument_list|(
literal|0
argument_list|,
name|p
argument_list|,
name|themeNumber
argument_list|,
name|partId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QSize
name|size
init|=
name|theme
operator|.
name|size
argument_list|()
operator|/
name|QWindowsStylePrivate
operator|::
name|devicePixelRatio
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|size
operator|.
name|rheight
argument_list|()
operator|--
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionSizeGrip
modifier|*
name|sg
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSizeGrip
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|sg
operator|->
name|corner
condition|)
block|{
case|case
name|Qt
operator|::
name|BottomRightCorner
case|:
name|rect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|size
operator|.
name|height
argument_list|()
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BottomLeftCorner
case|:
name|rect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|size
operator|.
name|height
argument_list|()
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|hMirrored
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TopRightCorner
case|:
name|rect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|vMirrored
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TopLeftCorner
case|:
name|rect
operator|=
name|QRect
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|hMirrored
operator|=
name|vMirrored
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|CE_HeaderSection
case|:
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|HeaderTheme
expr_stmt|;
name|partId
operator|=
name|HP_HEADERITEM
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|State_Sunken
condition|)
name|stateId
operator|=
name|HIS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|HIS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|HIS_NORMAL
expr_stmt|;
break|break;
case|case
name|CE_Splitter
case|:
name|p
operator|->
name|eraseRect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return;
case|case
name|CE_PushButtonBevel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|ButtonTheme
expr_stmt|;
name|partId
operator|=
name|BP_PUSHBUTTON
expr_stmt|;
name|bool
name|justFlat
init|=
operator|(
operator|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|Flat
operator|)
operator|&&
operator|!
operator|(
name|flags
operator|&
operator|(
name|State_On
operator||
name|State_Sunken
operator|)
operator|)
operator|)
operator|||
operator|(
operator|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|CommandLinkButton
operator|)
operator|&&
operator|!
operator|(
name|flags
operator|&
name|State_MouseOver
operator|)
operator|&&
operator|!
operator|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|DefaultButton
operator|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
operator|&&
operator|!
operator|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|Flat
operator|)
condition|)
name|stateId
operator|=
name|PBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|justFlat
condition|)
empty_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
condition|)
name|stateId
operator|=
name|PBS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|PBS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|DefaultButton
condition|)
name|stateId
operator|=
name|PBS_DEFAULTED
expr_stmt|;
else|else
name|stateId
operator|=
name|PBS_NORMAL
expr_stmt|;
if|if
condition|(
operator|!
name|justFlat
condition|)
block|{
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|themeNumber
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|rect
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|HasMenu
condition|)
block|{
name|int
name|mbiw
init|=
literal|0
decl_stmt|,
name|mbih
init|=
literal|0
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ToolBarTheme
argument_list|,
name|TP_SPLITBUTTONDROPDOWN
argument_list|)
decl_stmt|;
if|if
condition|(
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|size
init|=
name|theme
operator|.
name|size
argument_list|()
operator|/
name|QWindowsStylePrivate
operator|::
name|devicePixelRatio
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|mbiw
operator|=
name|size
operator|.
name|width
argument_list|()
expr_stmt|;
name|mbih
operator|=
name|size
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|QRect
name|ir
init|=
name|btn
operator|->
name|rect
decl_stmt|;
name|QStyleOptionButton
name|newBtn
init|=
operator|*
name|btn
decl_stmt|;
name|newBtn
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|ir
operator|.
name|right
argument_list|()
operator|-
name|mbiw
operator|-
literal|1
argument_list|,
literal|1
operator|+
operator|(
name|ir
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|)
operator|-
operator|(
name|mbih
operator|/
literal|2
operator|)
argument_list|,
name|mbiw
argument_list|,
name|mbih
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|newBtn
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
break|break;
case|case
name|CE_TabBarTab
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|stateId
operator|=
name|tab
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|TIS_NORMAL
else|:
name|TIS_DISABLED
expr_stmt|;
block|}
break|break;
case|case
name|CE_TabBarTabShape
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|TabTheme
expr_stmt|;
name|bool
name|isDisabled
init|=
operator|!
operator|(
name|tab
operator|->
name|state
operator|&
name|State_Enabled
operator|)
decl_stmt|;
name|bool
name|hasFocus
init|=
name|tab
operator|->
name|state
operator|&
name|State_HasFocus
decl_stmt|;
name|bool
name|isHot
init|=
name|tab
operator|->
name|state
operator|&
name|State_MouseOver
decl_stmt|;
name|bool
name|selected
init|=
name|tab
operator|->
name|state
operator|&
name|State_Selected
decl_stmt|;
name|bool
name|lastTab
init|=
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|End
decl_stmt|;
name|bool
name|firstTab
init|=
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|Beginning
decl_stmt|;
name|bool
name|onlyOne
init|=
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|OnlyOneTab
decl_stmt|;
name|bool
name|leftAligned
init|=
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_TabBar_Alignment
argument_list|,
name|tab
argument_list|,
name|widget
argument_list|)
operator|==
name|Qt
operator|::
name|AlignLeft
decl_stmt|;
name|bool
name|centerAligned
init|=
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_TabBar_Alignment
argument_list|,
name|tab
argument_list|,
name|widget
argument_list|)
operator|==
name|Qt
operator|::
name|AlignCenter
decl_stmt|;
name|int
name|borderThickness
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|tabOverlap
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_TabBarTabOverlap
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDisabled
condition|)
name|stateId
operator|=
name|TIS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|selected
condition|)
name|stateId
operator|=
name|TIS_SELECTED
expr_stmt|;
elseif|else
if|if
condition|(
name|hasFocus
condition|)
name|stateId
operator|=
name|TIS_FOCUSED
expr_stmt|;
elseif|else
if|if
condition|(
name|isHot
condition|)
name|stateId
operator|=
name|TIS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|TIS_NORMAL
expr_stmt|;
comment|// Selecting proper part depending on position
if|if
condition|(
name|firstTab
operator|||
name|onlyOne
condition|)
block|{
if|if
condition|(
name|leftAligned
condition|)
block|{
name|partId
operator|=
name|TABP_TABITEMLEFTEDGE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|centerAligned
condition|)
block|{
name|partId
operator|=
name|TABP_TABITEM
expr_stmt|;
block|}
else|else
block|{
comment|// rightAligned
name|partId
operator|=
name|TABP_TABITEMRIGHTEDGE
expr_stmt|;
block|}
block|}
else|else
block|{
name|partId
operator|=
name|TABP_TABITEM
expr_stmt|;
block|}
if|if
condition|(
name|tab
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|&&
operator|(
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedNorth
operator|||
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedSouth
operator|)
condition|)
block|{
name|bool
name|temp
init|=
name|firstTab
decl_stmt|;
name|firstTab
operator|=
name|lastTab
expr_stmt|;
name|lastTab
operator|=
name|temp
expr_stmt|;
block|}
name|bool
name|begin
init|=
name|firstTab
operator|||
name|onlyOne
decl_stmt|;
name|bool
name|end
init|=
name|lastTab
operator|||
name|onlyOne
decl_stmt|;
switch|switch
condition|(
name|tab
operator|->
name|shape
condition|)
block|{
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
if|if
condition|(
name|selected
condition|)
name|rect
operator|.
name|adjust
argument_list|(
name|begin
condition|?
literal|0
else|:
operator|-
name|tabOverlap
argument_list|,
literal|0
argument_list|,
name|end
condition|?
literal|0
else|:
name|tabOverlap
argument_list|,
name|borderThickness
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|adjust
argument_list|(
name|begin
condition|?
name|tabOverlap
else|:
literal|0
argument_list|,
name|tabOverlap
argument_list|,
name|end
condition|?
operator|-
name|tabOverlap
else|:
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
comment|//vMirrored = true;
name|rotate
operator|=
literal|180
expr_stmt|;
comment|// Not 100% correct, but works
if|if
condition|(
name|selected
condition|)
name|rect
operator|.
name|adjust
argument_list|(
name|begin
condition|?
literal|0
else|:
operator|-
name|tabOverlap
argument_list|,
operator|-
name|borderThickness
argument_list|,
name|end
condition|?
literal|0
else|:
name|tabOverlap
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|adjust
argument_list|(
name|begin
condition|?
name|tabOverlap
else|:
literal|0
argument_list|,
literal|0
argument_list|,
name|end
condition|?
operator|-
name|tabOverlap
else|:
literal|0
argument_list|,
operator|-
name|tabOverlap
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
name|rotate
operator|=
literal|90
expr_stmt|;
if|if
condition|(
name|selected
condition|)
block|{
name|rect
operator|.
name|adjust
argument_list|(
operator|-
name|borderThickness
argument_list|,
name|begin
condition|?
literal|0
else|:
operator|-
name|tabOverlap
argument_list|,
literal|0
argument_list|,
name|end
condition|?
literal|0
else|:
name|tabOverlap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|begin
condition|?
name|tabOverlap
else|:
literal|0
argument_list|,
operator|-
name|tabOverlap
argument_list|,
name|end
condition|?
operator|-
name|tabOverlap
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
name|hMirrored
operator|=
literal|true
expr_stmt|;
name|rotate
operator|=
literal|90
expr_stmt|;
if|if
condition|(
name|selected
condition|)
block|{
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|begin
condition|?
literal|0
else|:
operator|-
name|tabOverlap
argument_list|,
name|borderThickness
argument_list|,
name|end
condition|?
literal|0
else|:
name|tabOverlap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rect
operator|.
name|adjust
argument_list|(
name|tabOverlap
argument_list|,
name|begin
condition|?
name|tabOverlap
else|:
literal|0
argument_list|,
literal|0
argument_list|,
name|end
condition|?
operator|-
name|tabOverlap
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|themeNumber
operator|=
operator|-
literal|1
expr_stmt|;
comment|// Do our own painting for triangular
break|break;
block|}
if|if
condition|(
operator|!
name|selected
condition|)
block|{
switch|switch
condition|(
name|tab
operator|->
name|shape
condition|)
block|{
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
name|rect
operator|.
name|adjust
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
break|break;
case|case
name|CE_ProgressBarGroove
case|:
block|{
name|Qt
operator|::
name|Orientation
name|orient
init|=
name|Qt
operator|::
name|Horizontal
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|pb2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
name|orient
operator|=
name|pb2
operator|->
name|orientation
expr_stmt|;
name|partId
operator|=
operator|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|PP_BAR
else|:
name|PP_BARVERT
expr_stmt|;
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|ProgressTheme
expr_stmt|;
name|stateId
operator|=
literal|1
expr_stmt|;
block|}
break|break;
case|case
name|CE_MenuEmptyArea
case|:
case|case
name|CE_MenuItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|menuitem
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|tab
init|=
name|menuitem
operator|->
name|tabWidth
decl_stmt|;
name|bool
name|dis
init|=
operator|!
operator|(
name|menuitem
operator|->
name|state
operator|&
name|State_Enabled
operator|)
decl_stmt|;
name|bool
name|act
init|=
name|menuitem
operator|->
name|state
operator|&
name|State_Selected
decl_stmt|;
name|bool
name|checkable
init|=
name|menuitem
operator|->
name|menuHasCheckableItems
decl_stmt|;
name|bool
name|checked
init|=
name|checkable
condition|?
name|menuitem
operator|->
name|checked
else|:
literal|false
decl_stmt|;
comment|// windows always has a check column, regardless whether we have an icon or not
name|int
name|checkcol
init|=
name|qMax
argument_list|(
name|menuitem
operator|->
name|maxIconWidth
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|int
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
name|rect
operator|.
name|getRect
argument_list|(
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
name|QBrush
name|fill
init|=
name|menuitem
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|act
condition|?
name|QPalette
operator|::
name|Highlight
else|:
name|QPalette
operator|::
name|Button
argument_list|)
decl_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|==
name|CE_MenuEmptyArea
condition|)
break|break;
comment|// draw separator -------------------------------------------------
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|Separator
condition|)
block|{
name|int
name|yoff
init|=
name|y
operator|-
literal|1
operator|+
name|h
operator|/
literal|2
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x
argument_list|,
name|yoff
argument_list|,
name|x
operator|+
name|w
argument_list|,
name|yoff
argument_list|)
expr_stmt|;
operator|++
name|yoff
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x
argument_list|,
name|yoff
argument_list|,
name|x
operator|+
name|w
argument_list|,
name|yoff
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|xpos
init|=
name|x
decl_stmt|;
comment|// draw icon ------------------------------------------------------
if|if
condition|(
operator|!
name|menuitem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|dis
condition|?
name|QIcon
operator|::
name|Disabled
else|:
name|QIcon
operator|::
name|Normal
decl_stmt|;
if|if
condition|(
name|act
operator|&&
operator|!
name|dis
condition|)
name|mode
operator|=
name|QIcon
operator|::
name|Active
expr_stmt|;
name|QPixmap
name|pixmap
init|=
name|checked
condition|?
name|menuitem
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
name|mode
argument_list|,
name|QIcon
operator|::
name|On
argument_list|)
else|:
name|menuitem
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|int
name|pixw
init|=
name|pixmap
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|pixh
init|=
name|pixmap
operator|.
name|height
argument_list|()
decl_stmt|;
name|QRect
name|iconRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pixw
argument_list|,
name|pixh
argument_list|)
decl_stmt|;
name|iconRect
operator|.
name|moveCenter
argument_list|(
name|QRect
argument_list|(
name|xpos
argument_list|,
name|y
argument_list|,
name|checkcol
argument_list|,
name|h
argument_list|)
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|vIconRect
init|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|iconRect
argument_list|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
if|if
condition|(
name|checked
condition|)
name|p
operator|->
name|drawRect
argument_list|(
name|vIconRect
operator|.
name|adjusted
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPixmap
argument_list|(
name|vIconRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
comment|// draw checkmark -------------------------------------------------
block|}
elseif|else
if|if
condition|(
name|checked
condition|)
block|{
name|QStyleOptionMenuItem
name|newMi
init|=
operator|*
name|menuitem
decl_stmt|;
name|newMi
operator|.
name|state
operator|=
name|State_None
expr_stmt|;
if|if
condition|(
operator|!
name|dis
condition|)
name|newMi
operator|.
name|state
operator||=
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|act
condition|)
name|newMi
operator|.
name|state
operator||=
name|State_On
expr_stmt|;
name|QRect
name|checkMarkRect
init|=
name|QRect
argument_list|(
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|windowsItemFrame
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|windowsItemFrame
argument_list|,
name|checkcol
operator|-
literal|2
operator|*
name|windowsItemFrame
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|windowsItemFrame
argument_list|)
decl_stmt|;
name|newMi
operator|.
name|rect
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|checkMarkRect
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorMenuCheckMark
argument_list|,
operator|&
name|newMi
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|QColor
name|textColor
init|=
name|dis
condition|?
name|menuitem
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
else|:
name|act
condition|?
name|menuitem
operator|->
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
else|:
name|menuitem
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
comment|// draw text ------------------------------------------------------
name|int
name|xm
init|=
name|windowsItemFrame
operator|+
name|checkcol
operator|+
name|windowsItemHMargin
decl_stmt|;
name|xpos
operator|=
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|xm
expr_stmt|;
name|QRect
name|textRect
argument_list|(
name|xpos
argument_list|,
name|y
operator|+
name|windowsItemVMargin
argument_list|,
name|w
operator|-
name|xm
operator|-
name|windowsRightBorder
operator|-
name|tab
operator|+
literal|1
argument_list|,
name|h
operator|-
literal|2
operator|*
name|windowsItemVMargin
argument_list|)
decl_stmt|;
name|QRect
name|vTextRect
init|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|textRect
argument_list|)
decl_stmt|;
name|QString
name|s
init|=
name|menuitem
operator|->
name|text
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|int
name|t
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|text_flags
init|=
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|TextDontClip
operator||
name|Qt
operator|::
name|TextSingleLine
operator||
name|Qt
operator|::
name|AlignLeft
decl_stmt|;
if|if
condition|(
operator|!
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|menuitem
argument_list|,
name|widget
argument_list|)
condition|)
name|text_flags
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
comment|// draw tab text ----------------
if|if
condition|(
name|t
operator|>=
literal|0
condition|)
block|{
name|QRect
name|vShortcutRect
init|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|textRect
operator|.
name|topRight
argument_list|()
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dis
operator|&&
operator|!
name|act
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_EtchDisabledText
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawText
argument_list|(
name|vShortcutRect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|mid
argument_list|(
name|t
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|drawText
argument_list|(
name|vShortcutRect
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|mid
argument_list|(
name|t
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|QFont
name|font
init|=
name|menuitem
operator|->
name|font
decl_stmt|;
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|DefaultItem
condition|)
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|p
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
name|dis
operator|&&
operator|!
name|act
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_EtchDisabledText
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawText
argument_list|(
name|vTextRect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|drawText
argument_list|(
name|vTextRect
argument_list|,
name|text_flags
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
comment|// draw sub menu arrow --------------------------------------------
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|SubMenu
condition|)
block|{
name|int
name|dim
init|=
operator|(
name|h
operator|-
literal|2
operator|)
operator|/
literal|2
decl_stmt|;
name|PrimitiveElement
name|arrow
decl_stmt|;
name|arrow
operator|=
operator|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
condition|?
name|PE_IndicatorArrowLeft
else|:
name|PE_IndicatorArrowRight
expr_stmt|;
name|xpos
operator|=
name|x
operator|+
name|w
operator|-
name|windowsArrowHMargin
operator|-
name|windowsItemFrame
operator|-
name|dim
expr_stmt|;
name|QRect
name|vSubMenuRect
init|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|xpos
argument_list|,
name|y
operator|+
name|h
operator|/
literal|2
operator|-
name|dim
operator|/
literal|2
argument_list|,
name|dim
argument_list|,
name|dim
argument_list|)
argument_list|)
decl_stmt|;
name|QStyleOptionMenuItem
name|newMI
init|=
operator|*
name|menuitem
decl_stmt|;
name|newMI
operator|.
name|rect
operator|=
name|vSubMenuRect
expr_stmt|;
name|newMI
operator|.
name|state
operator|=
name|dis
condition|?
name|State_None
else|:
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|act
condition|)
name|newMI
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|newMI
operator|.
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|arrow
argument_list|,
operator|&
name|newMI
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
case|case
name|CE_MenuBarItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|mbi
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|mbi
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|DefaultItem
condition|)
break|break;
name|bool
name|act
init|=
name|mbi
operator|->
name|state
operator|&
name|State_Selected
decl_stmt|;
name|bool
name|dis
init|=
operator|!
operator|(
name|mbi
operator|->
name|state
operator|&
name|State_Enabled
operator|)
decl_stmt|;
name|QBrush
name|fill
init|=
name|mbi
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|act
condition|?
name|QPalette
operator|::
name|Highlight
else|:
name|QPalette
operator|::
name|Button
argument_list|)
decl_stmt|;
name|QPalette
operator|::
name|ColorRole
name|textRole
init|=
name|dis
condition|?
name|QPalette
operator|::
name|Text
else|:
name|act
condition|?
name|QPalette
operator|::
name|HighlightedText
else|:
name|QPalette
operator|::
name|ButtonText
decl_stmt|;
name|QPixmap
name|pix
init|=
name|mbi
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
name|QIcon
operator|::
name|Normal
argument_list|)
decl_stmt|;
name|uint
name|alignment
init|=
name|Qt
operator|::
name|AlignCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|TextDontClip
operator||
name|Qt
operator|::
name|TextSingleLine
decl_stmt|;
if|if
condition|(
operator|!
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|mbi
argument_list|,
name|widget
argument_list|)
condition|)
name|alignment
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|,
name|fill
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pix
operator|.
name|isNull
argument_list|()
condition|)
name|drawItemPixmap
argument_list|(
name|p
argument_list|,
name|mbi
operator|->
name|rect
argument_list|,
name|alignment
argument_list|,
name|pix
argument_list|)
expr_stmt|;
else|else
name|drawItemText
argument_list|(
name|p
argument_list|,
name|mbi
operator|->
name|rect
argument_list|,
name|alignment
argument_list|,
name|mbi
operator|->
name|palette
argument_list|,
name|mbi
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|mbi
operator|->
name|text
argument_list|,
name|textRole
argument_list|)
expr_stmt|;
block|}
return|return;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
case|case
name|CE_DockWidgetTitle
case|:
if|if
condition|(
specifier|const
name|QStyleOptionDockWidget
modifier|*
name|dwOpt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidget
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|buttonMargin
init|=
literal|4
decl_stmt|;
name|int
name|mw
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DockWidgetTitleMargin
argument_list|,
name|dwOpt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|fw
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DockWidgetFrameWidth
argument_list|,
name|dwOpt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|bool
name|isFloating
init|=
name|widget
operator|&&
name|widget
operator|->
name|isWindow
argument_list|()
decl_stmt|;
name|bool
name|isActive
init|=
name|dwOpt
operator|->
name|state
operator|&
name|State_Active
decl_stmt|;
specifier|const
name|QStyleOptionDockWidgetV2
modifier|*
name|v2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidgetV2
operator|*
argument_list|>
argument_list|(
name|dwOpt
argument_list|)
decl_stmt|;
name|bool
name|verticalTitleBar
init|=
name|v2
operator|==
literal|0
condition|?
literal|false
else|:
name|v2
operator|->
name|verticalTitleBar
decl_stmt|;
if|if
condition|(
name|verticalTitleBar
condition|)
block|{
name|QSize
name|s
init|=
name|rect
operator|.
name|size
argument_list|()
decl_stmt|;
name|s
operator|.
name|transpose
argument_list|()
expr_stmt|;
name|rect
operator|.
name|setSize
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
operator|-
name|rect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
operator|-
name|rect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QRect
name|r
init|=
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|3
argument_list|)
decl_stmt|;
name|QRect
name|titleRect
init|=
name|r
decl_stmt|;
if|if
condition|(
name|dwOpt
operator|->
name|closable
condition|)
block|{
name|QSize
name|sz
init|=
name|proxy
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarCloseButton
argument_list|,
name|dwOpt
argument_list|,
name|widget
argument_list|)
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|titleRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|sz
operator|.
name|width
argument_list|()
operator|-
name|mw
operator|-
name|buttonMargin
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dwOpt
operator|->
name|floatable
condition|)
block|{
name|QSize
name|sz
init|=
name|proxy
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarMaxButton
argument_list|,
name|dwOpt
argument_list|,
name|widget
argument_list|)
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|titleRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|sz
operator|.
name|width
argument_list|()
operator|-
name|mw
operator|-
name|buttonMargin
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isFloating
condition|)
block|{
name|titleRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
operator|-
name|fw
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|!=
literal|0
operator|&&
name|widget
operator|->
name|windowIcon
argument_list|()
operator|.
name|cacheKey
argument_list|()
operator|!=
name|QApplication
operator|::
name|windowIcon
argument_list|()
operator|.
name|cacheKey
argument_list|()
condition|)
name|titleRect
operator|.
name|adjust
argument_list|(
name|titleRect
operator|.
name|height
argument_list|()
operator|+
name|mw
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|titleRect
operator|.
name|adjust
argument_list|(
name|mw
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dwOpt
operator|->
name|floatable
operator|&&
operator|!
name|dwOpt
operator|->
name|closable
condition|)
name|titleRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|mw
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|verticalTitleBar
condition|)
name|titleRect
operator|=
name|visualRect
argument_list|(
name|dwOpt
operator|->
name|direction
argument_list|,
name|r
argument_list|,
name|titleRect
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isFloating
condition|)
block|{
name|QPen
name|oldPen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
name|QString
name|titleText
init|=
name|p
operator|->
name|fontMetrics
argument_list|()
operator|.
name|elidedText
argument_list|(
name|dwOpt
operator|->
name|title
argument_list|,
name|Qt
operator|::
name|ElideRight
argument_list|,
name|titleRect
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|dwOpt
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|titleText
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|drawItemText
argument_list|(
name|p
argument_list|,
name|titleRect
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|dwOpt
operator|->
name|palette
argument_list|,
name|dwOpt
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|titleText
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
expr_stmt|;
if|if
condition|(
name|isActive
condition|)
name|stateId
operator|=
name|CS_ACTIVE
expr_stmt|;
else|else
name|stateId
operator|=
name|CS_INACTIVE
expr_stmt|;
name|int
name|titleHeight
init|=
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
decl_stmt|;
name|rect
operator|=
name|rect
operator|.
name|adjusted
argument_list|(
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
name|fw
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|themeNumber
argument_list|,
literal|0
argument_list|,
name|stateId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|theme
operator|.
name|isValid
argument_list|()
condition|)
break|break;
comment|// Draw small type title bar
name|theme
operator|.
name|rect
operator|=
name|rect
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|WP_SMALLCAPTION
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
comment|// Figure out maximal button space on title bar
name|QIcon
name|ico
init|=
name|widget
operator|->
name|windowIcon
argument_list|()
decl_stmt|;
name|bool
name|hasIcon
init|=
operator|(
name|ico
operator|.
name|cacheKey
argument_list|()
operator|!=
name|QApplication
operator|::
name|windowIcon
argument_list|()
operator|.
name|cacheKey
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|hasIcon
condition|)
block|{
name|QPixmap
name|pxIco
init|=
name|ico
operator|.
name|pixmap
argument_list|(
name|titleHeight
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|verticalTitleBar
operator|&&
name|dwOpt
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|p
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|width
argument_list|()
operator|-
name|titleHeight
operator|-
name|pxIco
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|titleHeight
operator|-
literal|2
argument_list|,
name|pxIco
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|drawPixmap
argument_list|(
name|fw
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|titleHeight
operator|-
literal|2
argument_list|,
name|pxIco
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dwOpt
operator|->
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QPen
name|oldPen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
name|QFont
name|oldFont
init|=
name|p
operator|->
name|font
argument_list|()
decl_stmt|;
name|QFont
name|titleFont
init|=
name|oldFont
decl_stmt|;
name|titleFont
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|p
operator|->
name|setFont
argument_list|(
name|titleFont
argument_list|)
expr_stmt|;
name|QString
name|titleText
init|=
name|p
operator|->
name|fontMetrics
argument_list|()
operator|.
name|elidedText
argument_list|(
name|dwOpt
operator|->
name|title
argument_list|,
name|Qt
operator|::
name|ElideRight
argument_list|,
name|titleRect
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|TST_NONE
decl_stmt|;
name|QWindowsXPStylePrivate
operator|::
name|pGetThemeEnumValue
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|WP_SMALLCAPTION
argument_list|,
name|isActive
condition|?
name|CS_ACTIVE
else|:
name|CS_INACTIVE
argument_list|,
name|TMT_TEXTSHADOWTYPE
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|TST_NONE
condition|)
block|{
name|COLORREF
name|textShadowRef
decl_stmt|;
name|QWindowsXPStylePrivate
operator|::
name|pGetThemeColor
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|WP_SMALLCAPTION
argument_list|,
name|isActive
condition|?
name|CS_ACTIVE
else|:
name|CS_INACTIVE
argument_list|,
name|TMT_TEXTSHADOWCOLOR
argument_list|,
operator|&
name|textShadowRef
argument_list|)
expr_stmt|;
name|QColor
name|textShadow
init|=
name|qRgb
argument_list|(
name|GetRValue
argument_list|(
name|textShadowRef
argument_list|)
argument_list|,
name|GetGValue
argument_list|(
name|textShadowRef
argument_list|)
argument_list|,
name|GetBValue
argument_list|(
name|textShadowRef
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|textShadow
argument_list|)
expr_stmt|;
name|drawItemText
argument_list|(
name|p
argument_list|,
name|titleRect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignBottom
argument_list|,
name|dwOpt
operator|->
name|palette
argument_list|,
name|dwOpt
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|titleText
argument_list|)
expr_stmt|;
block|}
name|COLORREF
name|captionText
init|=
name|GetSysColor
argument_list|(
name|isActive
condition|?
name|COLOR_CAPTIONTEXT
else|:
name|COLOR_INACTIVECAPTIONTEXT
argument_list|)
decl_stmt|;
name|QColor
name|textColor
init|=
name|qRgb
argument_list|(
name|GetRValue
argument_list|(
name|captionText
argument_list|)
argument_list|,
name|GetGValue
argument_list|(
name|captionText
argument_list|)
argument_list|,
name|GetBValue
argument_list|(
name|captionText
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|drawItemText
argument_list|(
name|p
argument_list|,
name|titleRect
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignBottom
argument_list|,
name|dwOpt
operator|->
name|palette
argument_list|,
name|dwOpt
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|titleText
argument_list|)
expr_stmt|;
name|p
operator|->
name|setFont
argument_list|(
name|oldFont
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
case|case
name|CE_RubberBand
case|:
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionRubberBand
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QColor
name|highlight
init|=
name|option
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
decl_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|highlight
operator|.
name|darker
argument_list|(
literal|120
argument_list|)
argument_list|)
expr_stmt|;
name|QColor
name|dimHighlight
argument_list|(
name|qMin
argument_list|(
name|highlight
operator|.
name|red
argument_list|()
operator|/
literal|2
operator|+
literal|110
argument_list|,
literal|255
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|highlight
operator|.
name|green
argument_list|()
operator|/
literal|2
operator|+
literal|110
argument_list|,
literal|255
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|highlight
operator|.
name|blue
argument_list|()
operator|/
literal|2
operator|+
literal|110
argument_list|,
literal|255
argument_list|)
argument_list|,
operator|(
name|widget
operator|&&
name|widget
operator|->
name|isTopLevel
argument_list|()
operator|)
condition|?
literal|255
else|:
literal|127
argument_list|)
decl_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|dimHighlight
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
comment|// QT_NO_RUBBERBAND
case|case
name|CE_HeaderEmptyArea
case|:
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|HeaderTheme
expr_stmt|;
name|stateId
operator|=
name|HIS_NORMAL
expr_stmt|;
block|}
else|else
block|{
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|CE_HeaderEmptyArea
argument_list|,
name|option
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
break|break;
block|}
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|themeNumber
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|theme
operator|.
name|rotate
operator|=
name|rotate
expr_stmt|;
name|theme
operator|.
name|mirrorHorizontally
operator|=
name|hMirrored
expr_stmt|;
name|theme
operator|.
name|mirrorVertically
operator|=
name|vMirrored
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawComplexControl
name|void
name|QWindowsXPStyle
operator|::
name|drawComplexControl
parameter_list|(
name|ComplexControl
name|cc
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QWindowsXPStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsXPStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
condition|)
block|{
name|QWindowsStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
name|option
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|State
name|flags
init|=
name|option
operator|->
name|state
decl_stmt|;
name|SubControls
name|sub
init|=
name|option
operator|->
name|subControls
decl_stmt|;
name|QRect
name|r
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|int
name|partId
init|=
literal|0
decl_stmt|;
name|int
name|stateId
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_UnderMouse
argument_list|)
operator|&&
name|widget
operator|->
name|isActiveWindow
argument_list|()
condition|)
name|flags
operator||=
name|State_MouseOver
expr_stmt|;
switch|switch
condition|(
name|cc
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|sb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|SpinTheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|sb
operator|->
name|frame
operator|&&
operator|(
name|sub
operator|&
name|SC_SpinBoxFrame
operator|)
condition|)
block|{
name|partId
operator|=
name|EP_EDITTEXT
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|ETS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_HasFocus
condition|)
name|stateId
operator|=
name|ETS_FOCUSED
expr_stmt|;
else|else
name|stateId
operator|=
name|ETS_NORMAL
expr_stmt|;
name|XPThemeData
name|ftheme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|EditTheme
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|ftheme
operator|.
name|noContent
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|ftheme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_SpinBoxUp
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|option
argument_list|,
name|SC_SpinBoxUp
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|SPNP_UP
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|sb
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepUpEnabled
operator|)
operator|||
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|UPS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|sb
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxUp
operator|&&
operator|(
name|sb
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|UPS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|sb
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxUp
operator|&&
operator|(
name|sb
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|UPS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|UPS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_SpinBoxDown
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|option
argument_list|,
name|SC_SpinBoxDown
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|SPNP_DOWN
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|sb
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepDownEnabled
operator|)
operator|||
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|DNS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|sb
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxDown
operator|&&
operator|(
name|sb
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|DNS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|sb
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxDown
operator|&&
operator|(
name|sb
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|DNS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|DNS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SPINBOX
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cmb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|sub
operator|&
name|SC_ComboBoxEditField
condition|)
block|{
if|if
condition|(
name|cmb
operator|->
name|frame
condition|)
block|{
name|partId
operator|=
name|EP_EDITTEXT
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|ETS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_HasFocus
condition|)
name|stateId
operator|=
name|ETS_FOCUSED
expr_stmt|;
else|else
name|stateId
operator|=
name|ETS_NORMAL
expr_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|EditTheme
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QBrush
name|editBrush
init|=
name|cmb
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
decl_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|editBrush
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cmb
operator|->
name|editable
condition|)
block|{
name|QRect
name|re
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|option
argument_list|,
name|SC_ComboBoxEditField
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|re
argument_list|,
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBackground
argument_list|(
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|re
argument_list|,
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBackground
argument_list|(
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sub
operator|&
name|SC_ComboBoxArrow
condition|)
block|{
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ComboboxTheme
argument_list|)
decl_stmt|;
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|option
argument_list|,
name|SC_ComboBoxArrow
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|CP_DROPDOWNBUTTON
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|CBXS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|cmb
operator|->
name|activeSubControls
operator|==
name|SC_ComboBoxArrow
operator|&&
operator|(
name|cmb
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|CBXS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|cmb
operator|->
name|activeSubControls
operator|==
name|SC_ComboBoxArrow
operator|&&
operator|(
name|cmb
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|CBXS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|CBXS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
case|case
name|CC_ScrollBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|scrollbar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ScrollBarTheme
argument_list|)
decl_stmt|;
name|bool
name|maxedOut
init|=
operator|(
name|scrollbar
operator|->
name|maximum
operator|==
name|scrollbar
operator|->
name|minimum
operator|)
decl_stmt|;
if|if
condition|(
name|maxedOut
condition|)
name|flags
operator|&=
operator|~
name|State_Enabled
expr_stmt|;
name|bool
name|isHorz
init|=
name|flags
operator|&
name|State_Horizontal
decl_stmt|;
name|bool
name|isRTL
init|=
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
decl_stmt|;
if|if
condition|(
name|sub
operator|&
name|SC_ScrollBarAddLine
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarAddLine
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|SBP_ARROWBTN
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_LEFTDISABLED
else|:
name|ABS_RIGHTDISABLED
operator|)
else|:
name|ABS_DOWNDISABLED
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarAddLine
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_LEFTPRESSED
else|:
name|ABS_RIGHTPRESSED
operator|)
else|:
name|ABS_DOWNPRESSED
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarAddLine
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_LEFTHOT
else|:
name|ABS_RIGHTHOT
operator|)
else|:
name|ABS_DOWNHOT
operator|)
expr_stmt|;
else|else
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_LEFTNORMAL
else|:
name|ABS_RIGHTNORMAL
operator|)
else|:
name|ABS_DOWNNORMAL
operator|)
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_ScrollBarSubLine
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarSubLine
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|SBP_ARROWBTN
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_RIGHTDISABLED
else|:
name|ABS_LEFTDISABLED
operator|)
else|:
name|ABS_UPDISABLED
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSubLine
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_RIGHTPRESSED
else|:
name|ABS_LEFTPRESSED
operator|)
else|:
name|ABS_UPPRESSED
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSubLine
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_RIGHTHOT
else|:
name|ABS_LEFTHOT
operator|)
else|:
name|ABS_UPHOT
operator|)
expr_stmt|;
else|else
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_RIGHTNORMAL
else|:
name|ABS_LEFTNORMAL
operator|)
else|:
name|ABS_UPNORMAL
operator|)
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxedOut
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarSlider
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|theme
operator|.
name|rect
operator|.
name|united
argument_list|(
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarSubPage
argument_list|,
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|theme
operator|.
name|rect
operator|.
name|united
argument_list|(
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarAddPage
argument_list|,
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|partId
operator|=
name|scrollbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|SBP_LOWERTRACKHORZ
else|:
name|SBP_LOWERTRACKVERT
expr_stmt|;
name|stateId
operator|=
name|SCRBS_DISABLED
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sub
operator|&
name|SC_ScrollBarSubPage
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarSubPage
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|flags
operator|&
name|State_Horizontal
condition|?
name|SBP_UPPERTRACKHORZ
else|:
name|SBP_UPPERTRACKVERT
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSubPage
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSubPage
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|SCRBS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_ScrollBarAddPage
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarAddPage
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|flags
operator|&
name|State_Horizontal
condition|?
name|SBP_LOWERTRACKHORZ
else|:
name|SBP_LOWERTRACKVERT
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarAddPage
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarAddPage
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|SCRBS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_ScrollBarSlider
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarSlider
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSlider
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSlider
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|SCRBS_NORMAL
expr_stmt|;
comment|// Draw handle
name|theme
operator|.
name|partId
operator|=
name|flags
operator|&
name|State_Horizontal
condition|?
name|SBP_THUMBBTNHORZ
else|:
name|SBP_THUMBBTNVERT
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
comment|// Calculate rect of gripper
specifier|const
name|int
name|swidth
init|=
name|theme
operator|.
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|sheight
init|=
name|theme
operator|.
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|QMargins
name|contentsMargin
init|=
name|theme
operator|.
name|margins
argument_list|(
name|theme
operator|.
name|rect
argument_list|,
name|TMT_SIZINGMARGINS
argument_list|)
operator|/
name|QWindowsStylePrivate
operator|::
name|devicePixelRatio
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|theme
operator|.
name|partId
operator|=
name|flags
operator|&
name|State_Horizontal
condition|?
name|SBP_GRIPPERHORZ
else|:
name|SBP_GRIPPERVERT
expr_stmt|;
specifier|const
name|QSize
name|size
init|=
name|theme
operator|.
name|size
argument_list|()
operator|/
name|QWindowsStylePrivate
operator|::
name|devicePixelRatio
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|QPoint
name|gripperBoundsPos
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|State_Horizontal
operator|&&
name|swidth
operator|-
name|contentsMargin
operator|.
name|left
argument_list|()
operator|-
name|contentsMargin
operator|.
name|right
argument_list|()
operator|>
name|size
operator|.
name|width
argument_list|()
operator|)
operator|||
name|sheight
operator|-
name|contentsMargin
operator|.
name|top
argument_list|()
operator|-
name|contentsMargin
operator|.
name|bottom
argument_list|()
operator|>
name|size
operator|.
name|height
argument_list|()
condition|)
block|{
name|gripperBoundsPos
operator|=
name|QPoint
argument_list|(
name|theme
operator|.
name|rect
operator|.
name|left
argument_list|()
operator|+
operator|(
name|swidth
operator|-
name|size
operator|.
name|width
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
name|theme
operator|.
name|rect
operator|.
name|top
argument_list|()
operator|+
operator|(
name|sheight
operator|-
name|size
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QRect
name|gripperBounds
argument_list|(
name|gripperBoundsPos
argument_list|,
name|size
argument_list|)
decl_stmt|;
comment|// Draw gripper if there is enough space
if|if
condition|(
operator|!
name|gripperBounds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|gripperBounds
expr_stmt|;
name|p
operator|->
name|setClipRegion
argument_list|(
name|d
operator|->
name|region
argument_list|(
name|theme
argument_list|)
argument_list|)
expr_stmt|;
comment|// Only change inside the region of the gripper
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
comment|// Transparent gripper ontop of background
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|CC_Slider
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|TrackBarTheme
argument_list|)
decl_stmt|;
name|QRect
name|slrect
init|=
name|slider
operator|->
name|rect
decl_stmt|;
name|QRegion
name|tickreg
init|=
name|slrect
decl_stmt|;
if|if
condition|(
name|sub
operator|&
name|SC_SliderGroove
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_Slider
argument_list|,
name|option
argument_list|,
name|SC_SliderGroove
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|partId
operator|=
name|TKP_TRACK
expr_stmt|;
name|stateId
operator|=
name|TRS_NORMAL
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|slrect
operator|.
name|left
argument_list|()
argument_list|,
name|theme
operator|.
name|rect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|-
literal|2
argument_list|,
name|slrect
operator|.
name|width
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partId
operator|=
name|TKP_TRACKVERT
expr_stmt|;
name|stateId
operator|=
name|TRVS_NORMAL
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|theme
operator|.
name|rect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|slrect
operator|.
name|top
argument_list|()
argument_list|,
literal|4
argument_list|,
name|slrect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|tickreg
operator|-=
name|theme
operator|.
name|rect
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_SliderTickmarks
condition|)
block|{
name|int
name|tickOffset
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderTickmarkOffset
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|ticks
init|=
name|slider
operator|->
name|tickPosition
decl_stmt|;
name|int
name|thickness
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderControlThickness
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|available
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderSpaceAvailable
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|interval
init|=
name|slider
operator|->
name|tickInterval
decl_stmt|;
if|if
condition|(
name|interval
operator|<=
literal|0
condition|)
block|{
name|interval
operator|=
name|slider
operator|->
name|singleStep
expr_stmt|;
if|if
condition|(
name|QStyle
operator|::
name|sliderPositionFromValue
argument_list|(
name|slider
operator|->
name|minimum
argument_list|,
name|slider
operator|->
name|maximum
argument_list|,
name|interval
argument_list|,
name|available
argument_list|)
operator|-
name|QStyle
operator|::
name|sliderPositionFromValue
argument_list|(
name|slider
operator|->
name|minimum
argument_list|,
name|slider
operator|->
name|maximum
argument_list|,
literal|0
argument_list|,
name|available
argument_list|)
operator|<
literal|3
condition|)
name|interval
operator|=
name|slider
operator|->
name|pageStep
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|interval
condition|)
name|interval
operator|=
literal|1
expr_stmt|;
name|int
name|fudge
init|=
name|len
operator|/
literal|2
decl_stmt|;
name|int
name|pos
decl_stmt|;
name|int
name|bothOffset
init|=
operator|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksAbove
operator|&&
name|ticks
operator|&
name|QSlider
operator|::
name|TicksBelow
operator|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|d
operator|->
name|sliderTickColor
argument_list|)
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|QLine
argument_list|,
literal|32
argument_list|>
name|lines
decl_stmt|;
name|int
name|v
init|=
name|slider
operator|->
name|minimum
decl_stmt|;
while|while
condition|(
name|v
operator|<=
name|slider
operator|->
name|maximum
operator|+
literal|1
condition|)
block|{
if|if
condition|(
name|v
operator|==
name|slider
operator|->
name|maximum
operator|+
literal|1
operator|&&
name|interval
operator|==
literal|1
condition|)
break|break;
specifier|const
name|int
name|v_
init|=
name|qMin
argument_list|(
name|v
argument_list|,
name|slider
operator|->
name|maximum
argument_list|)
decl_stmt|;
name|int
name|tickLength
init|=
operator|(
name|v_
operator|==
name|slider
operator|->
name|minimum
operator|||
name|v_
operator|>=
name|slider
operator|->
name|maximum
operator|)
condition|?
literal|4
else|:
literal|3
decl_stmt|;
name|pos
operator|=
name|QStyle
operator|::
name|sliderPositionFromValue
argument_list|(
name|slider
operator|->
name|minimum
argument_list|,
name|slider
operator|->
name|maximum
argument_list|,
name|v_
argument_list|,
name|available
argument_list|)
operator|+
name|fudge
expr_stmt|;
if|if
condition|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksAbove
condition|)
name|lines
operator|.
name|append
argument_list|(
name|QLine
argument_list|(
name|pos
argument_list|,
name|tickOffset
operator|-
literal|1
operator|-
name|bothOffset
argument_list|,
name|pos
argument_list|,
name|tickOffset
operator|-
literal|1
operator|-
name|bothOffset
operator|-
name|tickLength
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksBelow
condition|)
name|lines
operator|.
name|append
argument_list|(
name|QLine
argument_list|(
name|pos
argument_list|,
name|tickOffset
operator|+
name|thickness
operator|+
name|bothOffset
argument_list|,
name|pos
argument_list|,
name|tickOffset
operator|+
name|thickness
operator|+
name|bothOffset
operator|+
name|tickLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksAbove
condition|)
name|lines
operator|.
name|append
argument_list|(
name|QLine
argument_list|(
name|tickOffset
operator|-
literal|1
operator|-
name|bothOffset
argument_list|,
name|pos
argument_list|,
name|tickOffset
operator|-
literal|1
operator|-
name|bothOffset
operator|-
name|tickLength
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksBelow
condition|)
name|lines
operator|.
name|append
argument_list|(
name|QLine
argument_list|(
name|tickOffset
operator|+
name|thickness
operator|+
name|bothOffset
argument_list|,
name|pos
argument_list|,
name|tickOffset
operator|+
name|thickness
operator|+
name|bothOffset
operator|+
name|tickLength
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// in the case where maximum is max int
name|int
name|nextInterval
init|=
name|v
operator|+
name|interval
decl_stmt|;
if|if
condition|(
name|nextInterval
operator|<
name|v
condition|)
break|break;
name|v
operator|=
name|nextInterval
expr_stmt|;
block|}
if|if
condition|(
name|lines
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
name|slrect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLines
argument_list|(
name|lines
operator|.
name|constData
argument_list|()
argument_list|,
name|lines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sub
operator|&
name|SC_SliderHandle
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_Slider
argument_list|,
name|option
argument_list|,
name|SC_SliderHandle
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
if|if
condition|(
name|slider
operator|->
name|tickPosition
operator|==
name|QSlider
operator|::
name|TicksAbove
condition|)
name|partId
operator|=
name|TKP_THUMBTOP
expr_stmt|;
elseif|else
if|if
condition|(
name|slider
operator|->
name|tickPosition
operator|==
name|QSlider
operator|::
name|TicksBelow
condition|)
name|partId
operator|=
name|TKP_THUMBBOTTOM
expr_stmt|;
else|else
name|partId
operator|=
name|TKP_THUMB
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|slider
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|TUS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|slider
operator|->
name|activeSubControls
operator|&
name|SC_SliderHandle
operator|&&
operator|(
name|slider
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|TUS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|slider
operator|->
name|activeSubControls
operator|&
name|SC_SliderHandle
operator|&&
operator|(
name|slider
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|TUS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_HasFocus
condition|)
name|stateId
operator|=
name|TUS_FOCUSED
expr_stmt|;
else|else
name|stateId
operator|=
name|TUS_NORMAL
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|slider
operator|->
name|tickPosition
operator|==
name|QSlider
operator|::
name|TicksLeft
condition|)
name|partId
operator|=
name|TKP_THUMBLEFT
expr_stmt|;
elseif|else
if|if
condition|(
name|slider
operator|->
name|tickPosition
operator|==
name|QSlider
operator|::
name|TicksRight
condition|)
name|partId
operator|=
name|TKP_THUMBRIGHT
expr_stmt|;
else|else
name|partId
operator|=
name|TKP_THUMBVERT
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|slider
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|TUVS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|slider
operator|->
name|activeSubControls
operator|&
name|SC_SliderHandle
operator|&&
operator|(
name|slider
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|TUVS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|slider
operator|->
name|activeSubControls
operator|&
name|SC_SliderHandle
operator|&&
operator|(
name|slider
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|TUVS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_HasFocus
condition|)
name|stateId
operator|=
name|TUVS_FOCUSED
expr_stmt|;
else|else
name|stateId
operator|=
name|TUVS_NORMAL
expr_stmt|;
block|}
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|slider
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|SE_SliderFocusRect
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fropt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBUTTON
case|case
name|CC_ToolButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|toolbutton
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|button
decl_stmt|,
name|menuarea
decl_stmt|;
name|button
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|toolbutton
argument_list|,
name|SC_ToolButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|menuarea
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|toolbutton
argument_list|,
name|SC_ToolButtonMenu
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|State
name|bflags
init|=
name|toolbutton
operator|->
name|state
operator|&
operator|~
name|State_Sunken
decl_stmt|;
name|State
name|mflags
init|=
name|bflags
decl_stmt|;
name|bool
name|autoRaise
init|=
name|flags
operator|&
name|State_AutoRaise
decl_stmt|;
if|if
condition|(
name|autoRaise
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|bflags
operator|&
name|State_MouseOver
operator|)
operator|||
operator|!
operator|(
name|bflags
operator|&
name|State_Enabled
operator|)
condition|)
block|{
name|bflags
operator|&=
operator|~
name|State_Raised
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toolbutton
operator|->
name|state
operator|&
name|State_Sunken
condition|)
block|{
if|if
condition|(
name|toolbutton
operator|->
name|activeSubControls
operator|&
name|SC_ToolButton
condition|)
block|{
name|bflags
operator||=
name|State_Sunken
expr_stmt|;
name|mflags
operator||=
name|State_MouseOver
operator||
name|State_Sunken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|toolbutton
operator|->
name|activeSubControls
operator|&
name|SC_ToolButtonMenu
condition|)
block|{
name|mflags
operator||=
name|State_Sunken
expr_stmt|;
name|bflags
operator||=
name|State_MouseOver
expr_stmt|;
block|}
block|}
name|QStyleOption
name|tool
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|tool
operator|.
name|palette
operator|=
name|toolbutton
operator|->
name|palette
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|subControls
operator|&
name|SC_ToolButton
condition|)
block|{
if|if
condition|(
name|flags
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator||
name|State_Raised
operator|)
operator|||
operator|!
name|autoRaise
condition|)
block|{
if|if
condition|(
name|toolbutton
operator|->
name|features
operator|&
name|QStyleOptionToolButton
operator|::
name|MenuButtonPopup
operator|&&
name|autoRaise
condition|)
block|{
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ToolBarTheme
argument_list|)
decl_stmt|;
name|theme
operator|.
name|partId
operator|=
name|TP_SPLITBUTTON
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|button
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|bflags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|TS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|bflags
operator|&
name|State_Sunken
condition|)
name|stateId
operator|=
name|TS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|bflags
operator|&
name|State_MouseOver
operator|||
operator|!
operator|(
name|flags
operator|&
name|State_AutoRaise
operator|)
condition|)
name|stateId
operator|=
name|flags
operator|&
name|State_On
condition|?
name|TS_HOTCHECKED
else|:
name|TS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|bflags
operator|&
name|State_On
condition|)
name|stateId
operator|=
name|TS_CHECKED
expr_stmt|;
else|else
name|stateId
operator|=
name|TS_NORMAL
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|theme
operator|.
name|mirrorHorizontally
operator|=
literal|true
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tool
operator|.
name|rect
operator|=
name|option
operator|->
name|rect
expr_stmt|;
name|tool
operator|.
name|state
operator|=
name|bflags
expr_stmt|;
if|if
condition|(
name|autoRaise
condition|)
comment|// for tool bars
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_PanelButtonTool
argument_list|,
operator|&
name|tool
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
else|else
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_PanelButtonBevel
argument_list|,
operator|&
name|tool
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|toolbutton
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fr
decl_stmt|;
name|fr
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|toolbutton
argument_list|)
expr_stmt|;
name|fr
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|features
operator|&
name|QStyleOptionToolButton
operator|::
name|MenuButtonPopup
condition|)
name|fr
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuButtonIndicator
argument_list|,
name|toolbutton
argument_list|,
name|widget
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fr
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|QStyleOptionToolButton
name|label
init|=
operator|*
name|toolbutton
decl_stmt|;
name|label
operator|.
name|state
operator|=
name|bflags
expr_stmt|;
name|int
name|fw
init|=
literal|2
decl_stmt|;
if|if
condition|(
operator|!
name|autoRaise
condition|)
name|label
operator|.
name|state
operator|&=
operator|~
name|State_Sunken
expr_stmt|;
name|label
operator|.
name|rect
operator|=
name|button
operator|.
name|adjusted
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|CE_ToolButtonLabel
argument_list|,
operator|&
name|label
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|subControls
operator|&
name|SC_ToolButtonMenu
condition|)
block|{
name|tool
operator|.
name|rect
operator|=
name|menuarea
expr_stmt|;
name|tool
operator|.
name|state
operator|=
name|mflags
expr_stmt|;
if|if
condition|(
name|autoRaise
condition|)
block|{
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorButtonDropDown
argument_list|,
operator|&
name|tool
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tool
operator|.
name|state
operator|=
name|mflags
expr_stmt|;
name|menuarea
operator|.
name|adjust
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Draw menu button
if|if
condition|(
operator|(
name|bflags
operator|&
name|State_Sunken
operator|)
operator|!=
operator|(
name|mflags
operator|&
name|State_Sunken
operator|)
condition|)
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setClipRect
argument_list|(
name|menuarea
argument_list|)
expr_stmt|;
name|tool
operator|.
name|rect
operator|=
name|option
operator|->
name|rect
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_PanelButtonBevel
argument_list|,
operator|&
name|tool
argument_list|,
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
comment|// Draw arrow
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|menuarea
operator|.
name|left
argument_list|()
argument_list|,
name|menuarea
operator|.
name|top
argument_list|()
operator|+
literal|3
argument_list|,
name|menuarea
operator|.
name|left
argument_list|()
argument_list|,
name|menuarea
operator|.
name|bottom
argument_list|()
operator|-
literal|3
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|menuarea
operator|.
name|left
argument_list|()
operator|-
literal|1
argument_list|,
name|menuarea
operator|.
name|top
argument_list|()
operator|+
literal|3
argument_list|,
name|menuarea
operator|.
name|left
argument_list|()
operator|-
literal|1
argument_list|,
name|menuarea
operator|.
name|bottom
argument_list|()
operator|-
literal|3
argument_list|)
expr_stmt|;
name|tool
operator|.
name|rect
operator|=
name|menuarea
operator|.
name|adjusted
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|tool
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|toolbutton
operator|->
name|features
operator|&
name|QStyleOptionToolButton
operator|::
name|HasMenu
condition|)
block|{
name|int
name|mbi
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_MenuButtonIndicator
argument_list|,
name|toolbutton
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|ir
init|=
name|toolbutton
operator|->
name|rect
decl_stmt|;
name|QStyleOptionToolButton
name|newBtn
init|=
operator|*
name|toolbutton
decl_stmt|;
name|newBtn
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|ir
operator|.
name|right
argument_list|()
operator|+
literal|4
operator|-
name|mbi
argument_list|,
name|ir
operator|.
name|height
argument_list|()
operator|-
name|mbi
operator|+
literal|4
argument_list|,
name|mbi
operator|-
literal|5
argument_list|,
name|mbi
operator|-
literal|5
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|newBtn
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_TOOLBUTTON
case|case
name|CC_TitleBar
case|:
block|{
if|if
condition|(
specifier|const
name|QStyleOptionTitleBar
modifier|*
name|tb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTitleBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|bool
name|isActive
init|=
name|tb
operator|->
name|titleBarState
operator|&
name|QStyle
operator|::
name|State_Active
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|&
name|SC_TitleBarLabel
condition|)
block|{
name|partId
operator|=
operator|(
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|?
name|WP_MINCAPTION
else|:
name|WP_CAPTION
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|option
operator|->
name|rect
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|isEnabled
argument_list|()
condition|)
name|stateId
operator|=
name|CS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|isActive
condition|)
name|stateId
operator|=
name|CS_ACTIVE
expr_stmt|;
else|else
name|stateId
operator|=
name|CS_INACTIVE
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|QRect
name|ir
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|tb
argument_list|,
name|SC_TitleBarLabel
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|TST_NONE
decl_stmt|;
name|QWindowsXPStylePrivate
operator|::
name|pGetThemeEnumValue
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|WP_CAPTION
argument_list|,
name|isActive
condition|?
name|CS_ACTIVE
else|:
name|CS_INACTIVE
argument_list|,
name|TMT_TEXTSHADOWTYPE
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|TST_NONE
condition|)
block|{
name|COLORREF
name|textShadowRef
decl_stmt|;
name|QWindowsXPStylePrivate
operator|::
name|pGetThemeColor
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|WP_CAPTION
argument_list|,
name|isActive
condition|?
name|CS_ACTIVE
else|:
name|CS_INACTIVE
argument_list|,
name|TMT_TEXTSHADOWCOLOR
argument_list|,
operator|&
name|textShadowRef
argument_list|)
expr_stmt|;
name|QColor
name|textShadow
init|=
name|qRgb
argument_list|(
name|GetRValue
argument_list|(
name|textShadowRef
argument_list|)
argument_list|,
name|GetGValue
argument_list|(
name|textShadowRef
argument_list|)
argument_list|,
name|GetBValue
argument_list|(
name|textShadowRef
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|textShadow
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawText
argument_list|(
name|ir
operator|.
name|x
argument_list|()
operator|+
literal|3
argument_list|,
name|ir
operator|.
name|y
argument_list|()
operator|+
literal|2
argument_list|,
name|ir
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|ir
operator|.
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextSingleLine
argument_list|,
name|tb
operator|->
name|text
argument_list|)
expr_stmt|;
block|}
name|COLORREF
name|captionText
init|=
name|GetSysColor
argument_list|(
name|isActive
condition|?
name|COLOR_CAPTIONTEXT
else|:
name|COLOR_INACTIVECAPTIONTEXT
argument_list|)
decl_stmt|;
name|QColor
name|textColor
init|=
name|qRgb
argument_list|(
name|GetRValue
argument_list|(
name|captionText
argument_list|)
argument_list|,
name|GetGValue
argument_list|(
name|captionText
argument_list|)
argument_list|,
name|GetBValue
argument_list|(
name|captionText
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawText
argument_list|(
name|ir
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|,
name|ir
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|ir
operator|.
name|width
argument_list|()
operator|-
literal|2
argument_list|,
name|ir
operator|.
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextSingleLine
argument_list|,
name|tb
operator|->
name|text
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_TitleBarSysMenu
operator|&&
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|option
argument_list|,
name|SC_TitleBarSysMenu
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|WP_SYSBUTTON
expr_stmt|;
if|if
condition|(
operator|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|isEnabled
argument_list|()
operator|)
operator|||
operator|!
name|isActive
condition|)
name|stateId
operator|=
name|SBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarSysMenu
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|SBS_PUSHED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarSysMenu
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|SBS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|SBS_NORMAL
expr_stmt|;
if|if
condition|(
operator|!
name|tb
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|tb
operator|->
name|icon
operator|.
name|paint
argument_list|(
name|p
argument_list|,
name|theme
operator|.
name|rect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
if|if
condition|(
name|theme
operator|.
name|size
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|iconSize
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|tb
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QPixmap
name|pm
init|=
name|proxy
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|SP_TitleBarMenuButton
argument_list|,
name|tb
argument_list|,
name|widget
argument_list|)
operator|.
name|pixmap
argument_list|(
name|iconSize
argument_list|,
name|iconSize
argument_list|)
decl_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|drawItemPixmap
argument_list|(
name|p
argument_list|,
name|theme
operator|.
name|rect
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|pm
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sub
operator|&
name|SC_TitleBarMinButton
operator|&&
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|&&
operator|!
operator|(
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|option
argument_list|,
name|SC_TitleBarMinButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|WP_MINBUTTON
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|isEnabled
argument_list|()
condition|)
name|stateId
operator|=
name|MINBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarMinButton
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|MINBS_PUSHED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarMinButton
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|MINBS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|isActive
condition|)
name|stateId
operator|=
name|MINBS_INACTIVE
expr_stmt|;
else|else
name|stateId
operator|=
name|MINBS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_TitleBarMaxButton
operator|&&
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|&&
operator|!
operator|(
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|option
argument_list|,
name|SC_TitleBarMaxButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|WP_MAXBUTTON
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|isEnabled
argument_list|()
condition|)
name|stateId
operator|=
name|MAXBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarMaxButton
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|MAXBS_PUSHED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarMaxButton
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|MAXBS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|isActive
condition|)
name|stateId
operator|=
name|MAXBS_INACTIVE
expr_stmt|;
else|else
name|stateId
operator|=
name|MAXBS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_TitleBarContextHelpButton
operator|&&
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|option
argument_list|,
name|SC_TitleBarContextHelpButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|WP_HELPBUTTON
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|isEnabled
argument_list|()
condition|)
name|stateId
operator|=
name|MINBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarContextHelpButton
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|MINBS_PUSHED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarContextHelpButton
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|MINBS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|isActive
condition|)
name|stateId
operator|=
name|MINBS_INACTIVE
expr_stmt|;
else|else
name|stateId
operator|=
name|MINBS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
name|bool
name|drawNormalButton
init|=
operator|(
name|sub
operator|&
name|SC_TitleBarNormalButton
operator|)
operator|&&
operator|(
operator|(
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
operator|&&
operator|(
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
operator|)
operator|||
operator|(
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
operator|&&
operator|(
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|drawNormalButton
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|option
argument_list|,
name|SC_TitleBarNormalButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|WP_RESTOREBUTTON
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|isEnabled
argument_list|()
condition|)
name|stateId
operator|=
name|RBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarNormalButton
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|RBS_PUSHED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarNormalButton
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|RBS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|isActive
condition|)
name|stateId
operator|=
name|RBS_INACTIVE
expr_stmt|;
else|else
name|stateId
operator|=
name|RBS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_TitleBarShadeButton
operator|&&
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
operator|&&
operator|!
operator|(
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|option
argument_list|,
name|SC_TitleBarShadeButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|WP_MINBUTTON
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|isEnabled
argument_list|()
condition|)
name|stateId
operator|=
name|MINBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarShadeButton
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|MINBS_PUSHED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarShadeButton
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|MINBS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|isActive
condition|)
name|stateId
operator|=
name|MINBS_INACTIVE
expr_stmt|;
else|else
name|stateId
operator|=
name|MINBS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_TitleBarUnshadeButton
operator|&&
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
operator|&&
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|option
argument_list|,
name|SC_TitleBarUnshadeButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|WP_RESTOREBUTTON
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|isEnabled
argument_list|()
condition|)
name|stateId
operator|=
name|RBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarUnshadeButton
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|RBS_PUSHED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarUnshadeButton
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|RBS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|isActive
condition|)
name|stateId
operator|=
name|RBS_INACTIVE
expr_stmt|;
else|else
name|stateId
operator|=
name|RBS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_TitleBarCloseButton
operator|&&
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|option
argument_list|,
name|SC_TitleBarCloseButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
comment|//partId = titlebar->testWFlags(Qt::WA_WState_Tool) ? WP_SMALLCLOSEBUTTON : WP_CLOSEBUTTON;
name|partId
operator|=
name|WP_CLOSEBUTTON
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|isEnabled
argument_list|()
condition|)
name|stateId
operator|=
name|CBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarCloseButton
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|CBS_PUSHED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|activeSubControls
operator|==
name|SC_TitleBarCloseButton
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|CBS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|isActive
condition|)
name|stateId
operator|=
name|CBS_INACTIVE
expr_stmt|;
else|else
name|stateId
operator|=
name|CBS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_MDIAREA
case|case
name|CC_MdiControls
case|:
block|{
name|QRect
name|buttonRect
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|p
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
argument_list|,
name|WP_MDICLOSEBUTTON
argument_list|,
name|CBS_NORMAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|subControls
operator|&
name|SC_MdiCloseButton
condition|)
block|{
name|buttonRect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_MdiControls
argument_list|,
name|option
argument_list|,
name|SC_MdiCloseButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|theme
operator|.
name|partId
operator|=
name|WP_MDICLOSEBUTTON
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|buttonRect
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|theme
operator|.
name|stateId
operator|=
name|CBS_INACTIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_Sunken
operator|&&
operator|(
name|option
operator|->
name|activeSubControls
operator|&
name|SC_MdiCloseButton
operator|)
condition|)
name|theme
operator|.
name|stateId
operator|=
name|CBS_PUSHED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_MouseOver
operator|&&
operator|(
name|option
operator|->
name|activeSubControls
operator|&
name|SC_MdiCloseButton
operator|)
condition|)
name|theme
operator|.
name|stateId
operator|=
name|CBS_HOT
expr_stmt|;
else|else
name|theme
operator|.
name|stateId
operator|=
name|CBS_NORMAL
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|option
operator|->
name|subControls
operator|&
name|SC_MdiNormalButton
condition|)
block|{
name|buttonRect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_MdiControls
argument_list|,
name|option
argument_list|,
name|SC_MdiNormalButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|theme
operator|.
name|partId
operator|=
name|WP_MDIRESTOREBUTTON
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|buttonRect
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|theme
operator|.
name|stateId
operator|=
name|CBS_INACTIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_Sunken
operator|&&
operator|(
name|option
operator|->
name|activeSubControls
operator|&
name|SC_MdiNormalButton
operator|)
condition|)
name|theme
operator|.
name|stateId
operator|=
name|CBS_PUSHED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_MouseOver
operator|&&
operator|(
name|option
operator|->
name|activeSubControls
operator|&
name|SC_MdiNormalButton
operator|)
condition|)
name|theme
operator|.
name|stateId
operator|=
name|CBS_HOT
expr_stmt|;
else|else
name|theme
operator|.
name|stateId
operator|=
name|CBS_NORMAL
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|option
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_MdiMinButton
condition|)
block|{
name|buttonRect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_MdiControls
argument_list|,
name|option
argument_list|,
name|SC_MdiMinButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|theme
operator|.
name|partId
operator|=
name|WP_MDIMINBUTTON
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|buttonRect
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|theme
operator|.
name|stateId
operator|=
name|CBS_INACTIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_Sunken
operator|&&
operator|(
name|option
operator|->
name|activeSubControls
operator|&
name|SC_MdiMinButton
operator|)
condition|)
name|theme
operator|.
name|stateId
operator|=
name|CBS_PUSHED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_MouseOver
operator|&&
operator|(
name|option
operator|->
name|activeSubControls
operator|&
name|SC_MdiMinButton
operator|)
condition|)
name|theme
operator|.
name|stateId
operator|=
name|CBS_HOT
expr_stmt|;
else|else
name|theme
operator|.
name|stateId
operator|=
name|CBS_NORMAL
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_MDIAREA
ifndef|#
directive|ifndef
name|QT_NO_DIAL
case|case
name|CC_Dial
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|dial
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
name|QStyleHelper
operator|::
name|drawDial
argument_list|(
name|dial
argument_list|,
name|p
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
comment|// QT_NO_DIAL
default|default:
name|QWindowsStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
name|option
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|progressBarOrientation
specifier|static
specifier|inline
name|Qt
operator|::
name|Orientation
name|progressBarOrientation
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
init|=
literal|0
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|pb2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
return|return
name|pb2
operator|->
name|orientation
return|;
return|return
name|Qt
operator|::
name|Horizontal
return|;
block|}
end_function
begin_function
DECL|function|pixelMetricFromSystemDp
name|int
name|QWindowsXPStylePrivate
operator|::
name|pixelMetricFromSystemDp
parameter_list|(
name|QStyle
operator|::
name|PixelMetric
name|pm
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
switch|switch
condition|(
name|pm
condition|)
block|{
case|case
name|QStyle
operator|::
name|PM_IndicatorWidth
case|:
return|return
name|XPThemeData
operator|::
name|themeSize
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ButtonTheme
argument_list|,
name|BP_CHECKBOX
argument_list|,
name|CBS_UNCHECKEDNORMAL
argument_list|)
operator|.
name|width
argument_list|()
return|;
case|case
name|QStyle
operator|::
name|PM_IndicatorHeight
case|:
return|return
name|XPThemeData
operator|::
name|themeSize
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ButtonTheme
argument_list|,
name|BP_CHECKBOX
argument_list|,
name|CBS_UNCHECKEDNORMAL
argument_list|)
operator|.
name|height
argument_list|()
return|;
case|case
name|QStyle
operator|::
name|PM_ExclusiveIndicatorWidth
case|:
return|return
name|XPThemeData
operator|::
name|themeSize
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ButtonTheme
argument_list|,
name|BP_RADIOBUTTON
argument_list|,
name|RBS_UNCHECKEDNORMAL
argument_list|)
operator|.
name|width
argument_list|()
return|;
case|case
name|QStyle
operator|::
name|PM_ExclusiveIndicatorHeight
case|:
return|return
name|XPThemeData
operator|::
name|themeSize
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ButtonTheme
argument_list|,
name|BP_RADIOBUTTON
argument_list|,
name|RBS_UNCHECKEDNORMAL
argument_list|)
operator|.
name|height
argument_list|()
return|;
case|case
name|QStyle
operator|::
name|PM_ProgressBarChunkWidth
case|:
return|return
name|progressBarOrientation
argument_list|(
name|option
argument_list|)
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|XPThemeData
operator|::
name|themeSize
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ProgressTheme
argument_list|,
name|PP_CHUNK
argument_list|)
operator|.
name|width
argument_list|()
else|:
name|XPThemeData
operator|::
name|themeSize
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ProgressTheme
argument_list|,
name|PP_CHUNKVERT
argument_list|)
operator|.
name|height
argument_list|()
return|;
case|case
name|QStyle
operator|::
name|PM_SliderThickness
case|:
return|return
name|XPThemeData
operator|::
name|themeSize
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|TrackBarTheme
argument_list|,
name|TKP_THUMB
argument_list|)
operator|.
name|height
argument_list|()
return|;
case|case
name|QStyle
operator|::
name|PM_TitleBarHeight
case|:
return|return
name|widget
operator|&&
operator|(
name|widget
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Tool
operator|)
condition|?
name|GetSystemMetrics
argument_list|(
name|SM_CYSMCAPTION
argument_list|)
operator|+
name|GetSystemMetrics
argument_list|(
name|SM_CXSIZEFRAME
argument_list|)
else|:
name|GetSystemMetrics
argument_list|(
name|SM_CYCAPTION
argument_list|)
operator|+
name|GetSystemMetrics
argument_list|(
name|SM_CXSIZEFRAME
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|PM_MdiSubWindowFrameWidth
case|:
return|return
name|XPThemeData
operator|::
name|themeSize
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
argument_list|,
name|WP_FRAMELEFT
argument_list|,
name|FS_ACTIVE
argument_list|)
operator|.
name|width
argument_list|()
return|;
case|case
name|QStyle
operator|::
name|PM_DockWidgetFrameWidth
case|:
return|return
name|XPThemeData
operator|::
name|themeSize
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
argument_list|,
name|WP_SMALLFRAMERIGHT
argument_list|,
name|FS_ACTIVE
argument_list|)
operator|.
name|width
argument_list|()
return|;
default|default:
break|break;
block|}
return|return
name|QWindowsXPStylePrivate
operator|::
name|InvalidMetric
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|pixelMetric
name|int
name|QWindowsXPStyle
operator|::
name|pixelMetric
parameter_list|(
name|PixelMetric
name|pm
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
condition|)
return|return
name|QWindowsStyle
operator|::
name|pixelMetric
argument_list|(
name|pm
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
name|int
name|res
init|=
name|QWindowsXPStylePrivate
operator|::
name|pixelMetricFromSystemDp
argument_list|(
name|pm
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
name|QWindowsStylePrivate
operator|::
name|InvalidMetric
condition|)
return|return
name|res
operator|/
name|QWindowsStylePrivate
operator|::
name|devicePixelRatio
argument_list|(
name|widget
argument_list|)
return|;
name|res
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|pm
condition|)
block|{
case|case
name|PM_MenuBarPanelWidth
case|:
case|case
name|PM_ButtonDefaultIndicator
case|:
name|res
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|PM_DefaultFrameWidth
case|:
name|res
operator|=
name|qobject_cast
argument_list|<
specifier|const
name|QListView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|?
literal|2
else|:
literal|1
expr_stmt|;
break|break;
case|case
name|PM_MenuPanelWidth
case|:
case|case
name|PM_SpinBoxFrameWidth
case|:
name|res
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_TabBarTabOverlap
case|:
case|case
name|PM_MenuHMargin
case|:
case|case
name|PM_MenuVMargin
case|:
name|res
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|PM_TabBarBaseOverlap
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|tab
operator|->
name|shape
condition|)
block|{
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
case|case
name|QTabBar
operator|::
name|TriangularNorth
case|:
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
case|case
name|QTabBar
operator|::
name|TriangularWest
case|:
name|res
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
case|case
name|QTabBar
operator|::
name|TriangularSouth
case|:
name|res
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
case|case
name|QTabBar
operator|::
name|TriangularEast
case|:
name|res
operator|=
literal|3
expr_stmt|;
break|break;
block|}
block|}
break|break;
case|case
name|PM_SplitterWidth
case|:
name|res
operator|=
name|qMax
argument_list|(
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|5.
argument_list|)
argument_list|)
argument_list|,
name|QApplication
operator|::
name|globalStrut
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PM_MdiSubWindowMinimizedWidth
case|:
name|res
operator|=
literal|160
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
case|case
name|PM_ToolBarHandleExtent
case|:
name|res
operator|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|8.
argument_list|)
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
comment|// QT_NO_TOOLBAR
case|case
name|PM_DockWidgetSeparatorExtent
case|:
case|case
name|PM_DockWidgetTitleMargin
case|:
name|res
operator|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|4.
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PM_ButtonShiftHorizontal
case|:
case|case
name|PM_ButtonShiftVertical
case|:
name|res
operator|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
break|break;
default|default:
name|res
operator|=
name|QWindowsStyle
operator|::
name|pixelMetric
argument_list|(
name|pm
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_comment
comment|/*   This function is used by subControlRect to check if a button   should be drawn for the given subControl given a set of window flags. */
end_comment
begin_function
DECL|function|buttonVisible
specifier|static
name|bool
name|buttonVisible
parameter_list|(
specifier|const
name|QStyle
operator|::
name|SubControl
name|sc
parameter_list|,
specifier|const
name|QStyleOptionTitleBar
modifier|*
name|tb
parameter_list|)
block|{
name|bool
name|isMinimized
init|=
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMinimized
decl_stmt|;
name|bool
name|isMaximized
init|=
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMaximized
decl_stmt|;
specifier|const
name|uint
name|flags
init|=
name|tb
operator|->
name|titleBarFlags
decl_stmt|;
name|bool
name|retVal
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|sc
condition|)
block|{
case|case
name|QStyle
operator|::
name|SC_TitleBarContextHelpButton
case|:
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarMinButton
case|:
if|if
condition|(
operator|!
name|isMinimized
operator|&&
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarNormalButton
case|:
if|if
condition|(
name|isMinimized
operator|&&
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|isMaximized
operator|&&
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarMaxButton
case|:
if|if
condition|(
operator|!
name|isMaximized
operator|&&
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarShadeButton
case|:
if|if
condition|(
operator|!
name|isMinimized
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarUnshadeButton
case|:
if|if
condition|(
name|isMinimized
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarCloseButton
case|:
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarSysMenu
case|:
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
default|default :
name|retVal
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|subControlRect
name|QRect
name|QWindowsXPStyle
operator|::
name|subControlRect
parameter_list|(
name|ComplexControl
name|cc
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|SubControl
name|subControl
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
condition|)
return|return
name|QWindowsStyle
operator|::
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|option
argument_list|,
name|subControl
argument_list|,
name|widget
argument_list|)
return|;
name|QRect
name|rect
decl_stmt|;
switch|switch
condition|(
name|cc
condition|)
block|{
case|case
name|CC_TitleBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTitleBar
modifier|*
name|tb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTitleBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|buttonVisible
argument_list|(
name|subControl
argument_list|,
name|tb
argument_list|)
condition|)
return|return
name|rect
return|;
specifier|const
name|bool
name|isToolTitle
init|=
literal|false
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|tb
operator|->
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|tb
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|buttonMargin
init|=
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|buttonHeight
init|=
name|GetSystemMetrics
argument_list|(
name|SM_CYSIZE
argument_list|)
operator|/
name|QWindowsStylePrivate
operator|::
name|devicePixelRatio
argument_list|(
name|widget
argument_list|)
operator|-
name|buttonMargin
decl_stmt|;
name|int
name|buttonWidth
init|=
name|GetSystemMetrics
argument_list|(
name|SM_CXSIZE
argument_list|)
operator|/
name|QWindowsStylePrivate
operator|::
name|devicePixelRatio
argument_list|(
name|widget
argument_list|)
operator|-
name|buttonMargin
decl_stmt|;
specifier|const
name|int
name|delta
init|=
name|buttonWidth
operator|+
literal|2
decl_stmt|;
name|int
name|controlTop
init|=
name|option
operator|->
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|buttonHeight
operator|-
literal|2
decl_stmt|;
specifier|const
name|int
name|frameWidth
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_MdiSubWindowFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|sysmenuHint
init|=
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
operator|)
operator|!=
literal|0
decl_stmt|;
specifier|const
name|bool
name|minimizeHint
init|=
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
operator|!=
literal|0
decl_stmt|;
specifier|const
name|bool
name|maximizeHint
init|=
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
operator|!=
literal|0
decl_stmt|;
specifier|const
name|bool
name|contextHint
init|=
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator|)
operator|!=
literal|0
decl_stmt|;
specifier|const
name|bool
name|shadeHint
init|=
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
operator|)
operator|!=
literal|0
decl_stmt|;
name|bool
name|isMinimized
init|=
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMinimized
decl_stmt|;
name|bool
name|isMaximized
init|=
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMaximized
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_TitleBarLabel
case|:
name|rect
operator|=
name|QRect
argument_list|(
name|frameWidth
argument_list|,
literal|0
argument_list|,
name|width
operator|-
operator|(
name|buttonWidth
operator|+
name|frameWidth
operator|+
literal|10
operator|)
argument_list|,
name|height
argument_list|)
expr_stmt|;
if|if
condition|(
name|isToolTitle
condition|)
block|{
if|if
condition|(
name|sysmenuHint
condition|)
block|{
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|buttonWidth
operator|-
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minimizeHint
operator|||
name|maximizeHint
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|buttonWidth
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sysmenuHint
condition|)
block|{
specifier|const
name|int
name|leftOffset
init|=
name|height
operator|-
literal|8
decl_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
name|leftOffset
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minimizeHint
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|buttonWidth
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|maximizeHint
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|buttonWidth
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextHint
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|buttonWidth
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|shadeHint
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|buttonWidth
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SC_TitleBarContextHelpButton
case|:
if|if
condition|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
comment|//fall through
case|case
name|SC_TitleBarMinButton
case|:
if|if
condition|(
operator|!
name|isMinimized
operator|&&
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
elseif|else
if|if
condition|(
name|subControl
operator|==
name|SC_TitleBarMinButton
condition|)
break|break;
comment|//fall through
case|case
name|SC_TitleBarNormalButton
case|:
if|if
condition|(
name|isMinimized
operator|&&
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
elseif|else
if|if
condition|(
name|isMaximized
operator|&&
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
elseif|else
if|if
condition|(
name|subControl
operator|==
name|SC_TitleBarNormalButton
condition|)
break|break;
comment|//fall through
case|case
name|SC_TitleBarMaxButton
case|:
if|if
condition|(
operator|!
name|isMaximized
operator|&&
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
elseif|else
if|if
condition|(
name|subControl
operator|==
name|SC_TitleBarMaxButton
condition|)
break|break;
comment|//fall through
case|case
name|SC_TitleBarShadeButton
case|:
if|if
condition|(
operator|!
name|isMinimized
operator|&&
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
operator|)
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
elseif|else
if|if
condition|(
name|subControl
operator|==
name|SC_TitleBarShadeButton
condition|)
break|break;
comment|//fall through
case|case
name|SC_TitleBarUnshadeButton
case|:
if|if
condition|(
name|isMinimized
operator|&&
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
operator|)
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
elseif|else
if|if
condition|(
name|subControl
operator|==
name|SC_TitleBarUnshadeButton
condition|)
break|break;
comment|//fall through
case|case
name|SC_TitleBarCloseButton
case|:
if|if
condition|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
elseif|else
if|if
condition|(
name|subControl
operator|==
name|SC_TitleBarCloseButton
condition|)
break|break;
name|rect
operator|.
name|setRect
argument_list|(
name|width
operator|-
name|offset
operator|-
name|controlTop
operator|+
literal|1
argument_list|,
name|controlTop
argument_list|,
name|buttonWidth
argument_list|,
name|buttonHeight
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_TitleBarSysMenu
case|:
block|{
specifier|const
name|int
name|controlTop
init|=
literal|6
decl_stmt|;
specifier|const
name|int
name|controlHeight
init|=
name|height
operator|-
name|controlTop
operator|-
literal|3
decl_stmt|;
specifier|const
name|int
name|iconExtent
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|)
decl_stmt|;
name|QSize
name|iconSize
init|=
name|tb
operator|->
name|icon
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
name|iconExtent
argument_list|,
name|iconExtent
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tb
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|iconSize
operator|=
name|QSize
argument_list|(
name|controlHeight
argument_list|,
name|controlHeight
argument_list|)
expr_stmt|;
name|int
name|hPad
init|=
operator|(
name|controlHeight
operator|-
name|iconSize
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|vPad
init|=
operator|(
name|controlHeight
operator|-
name|iconSize
operator|.
name|width
argument_list|()
operator|)
operator|/
literal|2
decl_stmt|;
name|rect
operator|=
name|QRect
argument_list|(
name|frameWidth
operator|+
name|hPad
argument_list|,
name|controlTop
operator|+
name|vPad
argument_list|,
name|iconSize
operator|.
name|width
argument_list|()
argument_list|,
name|iconSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
break|break;
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cmb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|x
init|=
name|cmb
operator|->
name|rect
operator|.
name|x
argument_list|()
decl_stmt|,
name|y
init|=
name|cmb
operator|->
name|rect
operator|.
name|y
argument_list|()
decl_stmt|,
name|wi
init|=
name|cmb
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|,
name|he
init|=
name|cmb
operator|->
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|xpos
init|=
name|x
decl_stmt|;
name|xpos
operator|+=
name|wi
operator|-
literal|1
operator|-
literal|16
expr_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_ComboBoxFrame
case|:
name|rect
operator|=
name|cmb
operator|->
name|rect
expr_stmt|;
break|break;
case|case
name|SC_ComboBoxArrow
case|:
name|rect
operator|=
name|QRect
argument_list|(
name|xpos
argument_list|,
name|y
operator|+
literal|1
argument_list|,
literal|16
argument_list|,
name|he
operator|-
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ComboBoxEditField
case|:
name|rect
operator|=
name|QRect
argument_list|(
name|x
operator|+
literal|2
argument_list|,
name|y
operator|+
literal|2
argument_list|,
name|wi
operator|-
literal|3
operator|-
literal|16
argument_list|,
name|he
operator|-
literal|4
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ComboBoxListBoxPopup
case|:
name|rect
operator|=
name|cmb
operator|->
name|rect
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_MDIAREA
case|case
name|CC_MdiControls
case|:
block|{
name|int
name|numSubControls
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|subControls
operator|&
name|SC_MdiCloseButton
condition|)
operator|++
name|numSubControls
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|subControls
operator|&
name|SC_MdiMinButton
condition|)
operator|++
name|numSubControls
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|subControls
operator|&
name|SC_MdiNormalButton
condition|)
operator|++
name|numSubControls
expr_stmt|;
if|if
condition|(
name|numSubControls
operator|==
literal|0
condition|)
break|break;
name|int
name|buttonWidth
init|=
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
name|numSubControls
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_MdiCloseButton
case|:
comment|// Only one sub control, no offset needed.
if|if
condition|(
name|numSubControls
operator|==
literal|1
condition|)
break|break;
name|offset
operator|+=
name|buttonWidth
expr_stmt|;
comment|//FALL THROUGH
case|case
name|SC_MdiNormalButton
case|:
comment|// No offset needed if
comment|// 1) There's only one sub control
comment|// 2) We have a close button and a normal button (offset already added in SC_MdiClose)
if|if
condition|(
name|numSubControls
operator|==
literal|1
operator|||
operator|(
name|numSubControls
operator|==
literal|2
operator|&&
operator|!
operator|(
name|option
operator|->
name|subControls
operator|&
name|SC_MdiMinButton
operator|)
operator|)
condition|)
break|break;
if|if
condition|(
name|option
operator|->
name|subControls
operator|&
name|SC_MdiNormalButton
condition|)
name|offset
operator|+=
name|buttonWidth
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|rect
operator|=
name|QRect
argument_list|(
name|offset
argument_list|,
literal|0
argument_list|,
name|buttonWidth
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_MDIAREA
default|default:
name|rect
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|QWindowsStyle
operator|::
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|option
argument_list|,
name|subControl
argument_list|,
name|widget
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeFromContents
name|QSize
name|QWindowsXPStyle
operator|::
name|sizeFromContents
parameter_list|(
name|ContentsType
name|ct
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QSize
modifier|&
name|contentsSize
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
condition|)
return|return
name|QWindowsStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|option
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
return|;
name|QSize
name|sz
argument_list|(
name|contentsSize
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ct
condition|)
block|{
case|case
name|CT_LineEdit
case|:
case|case
name|CT_ComboBox
case|:
block|{
name|XPThemeData
name|buttontheme
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ButtonTheme
argument_list|,
name|BP_PUSHBUTTON
argument_list|,
name|PBS_NORMAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|buttontheme
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QMargins
name|borderSize
init|=
name|buttontheme
operator|.
name|margins
argument_list|()
operator|/
name|QWindowsXPStylePrivate
operator|::
name|devicePixelRatio
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|borderSize
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|sz
operator|.
name|rwidth
argument_list|()
operator|+=
name|borderSize
operator|.
name|left
argument_list|()
operator|+
name|borderSize
operator|.
name|right
argument_list|()
operator|-
literal|2
expr_stmt|;
name|sz
operator|.
name|rheight
argument_list|()
operator|+=
name|borderSize
operator|.
name|bottom
argument_list|()
operator|+
name|borderSize
operator|.
name|top
argument_list|()
operator|-
literal|2
expr_stmt|;
block|}
specifier|const
name|int
name|textMargins
init|=
literal|2
operator|*
operator|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_FocusFrameHMargin
argument_list|)
operator|+
literal|1
operator|)
decl_stmt|;
name|sz
operator|+=
name|QSize
argument_list|(
name|qMax
argument_list|(
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ScrollBarExtent
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|+
name|textMargins
argument_list|,
literal|23
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//arrow button
block|}
block|}
break|break;
case|case
name|CT_SpinBox
case|:
block|{
comment|//Spinbox adds frame twice
name|sz
operator|=
name|QWindowsStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|option
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|int
name|border
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|sz
operator|-=
name|QSize
argument_list|(
literal|2
operator|*
name|border
argument_list|,
literal|2
operator|*
name|border
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CT_TabWidget
case|:
name|sz
operator|+=
name|QSize
argument_list|(
literal|6
argument_list|,
literal|6
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_Menu
case|:
name|sz
operator|+=
name|QSize
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
case|case
name|CT_MenuBarItem
case|:
if|if
condition|(
operator|!
name|sz
operator|.
name|isEmpty
argument_list|()
condition|)
name|sz
operator|+=
name|QSize
argument_list|(
name|windowsItemHMargin
operator|*
literal|5
operator|+
literal|1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|CT_MenuItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|menuitem
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|!=
name|QStyleOptionMenuItem
operator|::
name|Separator
condition|)
block|{
name|sz
operator|=
name|QWindowsStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|option
argument_list|,
name|sz
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|sz
operator|.
name|setHeight
argument_list|(
name|sz
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
block|}
block|}
name|sz
operator|=
name|QWindowsStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|option
argument_list|,
name|sz
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_MdiControls
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComplex
modifier|*
name|styleOpt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComplex
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|width
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|styleOpt
operator|->
name|subControls
operator|&
name|SC_MdiMinButton
condition|)
name|width
operator|+=
literal|17
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|styleOpt
operator|->
name|subControls
operator|&
name|SC_MdiNormalButton
condition|)
name|width
operator|+=
literal|17
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|styleOpt
operator|->
name|subControls
operator|&
name|SC_MdiCloseButton
condition|)
name|width
operator|+=
literal|17
operator|+
literal|1
expr_stmt|;
name|sz
operator|=
name|QSize
argument_list|(
name|width
argument_list|,
literal|19
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sz
operator|=
name|QSize
argument_list|(
literal|54
argument_list|,
literal|19
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|sz
operator|=
name|QWindowsStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|option
argument_list|,
name|sz
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|sz
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|styleHint
name|int
name|QWindowsXPStyle
operator|::
name|styleHint
parameter_list|(
name|StyleHint
name|hint
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QStyleHintReturn
modifier|*
name|returnData
parameter_list|)
specifier|const
block|{
name|QWindowsXPStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsXPStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
condition|)
return|return
name|QWindowsStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|option
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
return|;
name|int
name|res
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|SH_EtchDisabledText
case|:
name|res
operator|=
operator|(
name|qobject_cast
argument_list|<
specifier|const
name|QLabel
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|SH_SpinControls_DisableOnBounds
case|:
name|res
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|SH_TitleBar_AutoRaise
case|:
case|case
name|SH_TitleBar_NoBorder
case|:
name|res
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|SH_GroupBox_TextLabelColor
case|:
if|if
condition|(
operator|!
name|widget
operator|||
operator|(
name|widget
operator|&&
name|widget
operator|->
name|isEnabled
argument_list|()
operator|)
condition|)
name|res
operator|=
name|d
operator|->
name|groupBoxTextColor
expr_stmt|;
else|else
name|res
operator|=
name|d
operator|->
name|groupBoxTextColorDisabled
expr_stmt|;
break|break;
case|case
name|SH_Table_GridLineColor
case|:
name|res
operator|=
literal|0xC0C0C0
expr_stmt|;
break|break;
case|case
name|SH_WindowFrame_Mask
case|:
block|{
name|res
operator|=
literal|1
expr_stmt|;
name|QStyleHintReturnMask
modifier|*
name|mask
init|=
name|qstyleoption_cast
argument_list|<
name|QStyleHintReturnMask
operator|*
argument_list|>
argument_list|(
name|returnData
argument_list|)
decl_stmt|;
specifier|const
name|QStyleOptionTitleBar
modifier|*
name|titlebar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTitleBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|mask
operator|&&
name|titlebar
condition|)
block|{
comment|// Note certain themes will not return the whole window frame but only the titlebar part when
comment|// queried This function needs to return the entire window mask, hence we will only fetch the mask for the
comment|// titlebar itself and add the remaining part of the window rect at the bottom.
name|int
name|tbHeight
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_TitleBarHeight
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|titleBarRect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|titleBarRect
operator|.
name|setHeight
argument_list|(
name|tbHeight
argument_list|)
expr_stmt|;
name|XPThemeData
name|themeData
decl_stmt|;
if|if
condition|(
name|titlebar
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
name|themeData
operator|=
name|XPThemeData
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
argument_list|,
name|WP_MINCAPTION
argument_list|,
name|CS_ACTIVE
argument_list|,
name|titleBarRect
argument_list|)
expr_stmt|;
block|}
else|else
name|themeData
operator|=
name|XPThemeData
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
argument_list|,
name|WP_CAPTION
argument_list|,
name|CS_ACTIVE
argument_list|,
name|titleBarRect
argument_list|)
expr_stmt|;
name|mask
operator|->
name|region
operator|=
name|d
operator|->
name|region
argument_list|(
name|themeData
argument_list|)
operator|+
name|QRect
argument_list|(
literal|0
argument_list|,
name|tbHeight
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|tbHeight
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
case|case
name|SH_RubberBand_Mask
case|:
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionRubberBand
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|res
operator|=
literal|0
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_RUBBERBAND
case|case
name|SH_ItemView_DrawDelegateFrame
case|:
name|res
operator|=
literal|1
expr_stmt|;
break|break;
default|default:
name|res
operator|=
name|QWindowsStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|option
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|standardPalette
name|QPalette
name|QWindowsXPStyle
operator|::
name|standardPalette
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
operator|&&
name|QApplicationPrivate
operator|::
name|sys_pal
condition|)
return|return
operator|*
name|QApplicationPrivate
operator|::
name|sys_pal
return|;
else|else
return|return
name|QWindowsStyle
operator|::
name|standardPalette
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|standardPixmap
name|QPixmap
name|QWindowsXPStyle
operator|::
name|standardPixmap
parameter_list|(
name|StandardPixmap
name|standardPixmap
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
condition|)
return|return
name|QWindowsStyle
operator|::
name|standardPixmap
argument_list|(
name|standardPixmap
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
switch|switch
condition|(
name|standardPixmap
condition|)
block|{
case|case
name|SP_TitleBarMaxButton
case|:
case|case
name|SP_TitleBarCloseButton
case|:
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidget
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
argument_list|,
name|WP_SMALLCLOSEBUTTON
argument_list|,
name|CBS_NORMAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|size
init|=
name|theme
operator|.
name|size
argument_list|()
operator|/
name|QWindowsXPStylePrivate
operator|::
name|devicePixelRatio
argument_list|(
name|widget
argument_list|)
decl_stmt|;
return|return
name|QIcon
argument_list|(
name|QWindowsStyle
operator|::
name|standardPixmap
argument_list|(
name|standardPixmap
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|)
operator|.
name|pixmap
argument_list|(
name|size
argument_list|)
return|;
block|}
block|}
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|QWindowsStyle
operator|::
name|standardPixmap
argument_list|(
name|standardPixmap
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|standardIcon
name|QIcon
name|QWindowsXPStyle
operator|::
name|standardIcon
parameter_list|(
name|StandardPixmap
name|standardIcon
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|useXP
argument_list|()
condition|)
block|{
return|return
name|QWindowsStyle
operator|::
name|standardIcon
argument_list|(
name|standardIcon
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
name|QWindowsXPStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsXPStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|standardIcon
condition|)
block|{
case|case
name|SP_TitleBarMaxButton
case|:
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidget
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|dockFloat
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|XPThemeData
name|themeSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
argument_list|,
name|WP_SMALLCLOSEBUTTON
argument_list|,
name|CBS_NORMAL
argument_list|)
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
argument_list|,
name|WP_MAXBUTTON
argument_list|,
name|MAXBS_NORMAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|size
init|=
name|themeSize
operator|.
name|size
argument_list|()
operator|/
name|QWindowsXPStylePrivate
operator|::
name|devicePixelRatio
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|QPixmap
name|pm
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|pm
argument_list|)
decl_stmt|;
name|theme
operator|.
name|painter
operator|=
operator|&
name|p
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|d
operator|->
name|dockFloat
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Normal
argument_list|,
name|QIcon
operator|::
name|Off
argument_list|)
expr_stmt|;
comment|// Normal
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|MAXBS_PUSHED
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|d
operator|->
name|dockFloat
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Normal
argument_list|,
name|QIcon
operator|::
name|On
argument_list|)
expr_stmt|;
comment|// Pressed
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|MAXBS_HOT
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|d
operator|->
name|dockFloat
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Active
argument_list|,
name|QIcon
operator|::
name|Off
argument_list|)
expr_stmt|;
comment|// Hover
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|MAXBS_INACTIVE
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|d
operator|->
name|dockFloat
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Disabled
argument_list|,
name|QIcon
operator|::
name|Off
argument_list|)
expr_stmt|;
comment|// Disabled
block|}
block|}
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
return|return
name|d
operator|->
name|dockFloat
return|;
block|}
break|break;
case|case
name|SP_TitleBarCloseButton
case|:
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidget
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|dockClose
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|XPThemeData
name|theme
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
argument_list|,
name|WP_SMALLCLOSEBUTTON
argument_list|,
name|CBS_NORMAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|size
init|=
name|theme
operator|.
name|size
argument_list|()
operator|/
name|QWindowsXPStylePrivate
operator|::
name|devicePixelRatio
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|QPixmap
name|pm
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|pm
argument_list|)
decl_stmt|;
name|theme
operator|.
name|painter
operator|=
operator|&
name|p
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|WP_CLOSEBUTTON
expr_stmt|;
comment|// ####
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|d
operator|->
name|dockClose
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Normal
argument_list|,
name|QIcon
operator|::
name|Off
argument_list|)
expr_stmt|;
comment|// Normal
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|CBS_PUSHED
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|d
operator|->
name|dockClose
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Normal
argument_list|,
name|QIcon
operator|::
name|On
argument_list|)
expr_stmt|;
comment|// Pressed
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|CBS_HOT
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|d
operator|->
name|dockClose
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Active
argument_list|,
name|QIcon
operator|::
name|Off
argument_list|)
expr_stmt|;
comment|// Hover
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|CBS_INACTIVE
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|d
operator|->
name|dockClose
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Disabled
argument_list|,
name|QIcon
operator|::
name|Off
argument_list|)
expr_stmt|;
comment|// Disabled
block|}
block|}
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
return|return
name|d
operator|->
name|dockClose
return|;
block|}
break|break;
case|case
name|SP_TitleBarNormalButton
case|:
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidget
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|dockFloat
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|XPThemeData
name|themeSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
argument_list|,
name|WP_SMALLCLOSEBUTTON
argument_list|,
name|CBS_NORMAL
argument_list|)
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|WindowTheme
argument_list|,
name|WP_RESTOREBUTTON
argument_list|,
name|RBS_NORMAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|size
init|=
name|themeSize
operator|.
name|size
argument_list|()
operator|/
name|QWindowsStylePrivate
operator|::
name|devicePixelRatio
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|QPixmap
name|pm
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|pm
argument_list|)
decl_stmt|;
name|theme
operator|.
name|painter
operator|=
operator|&
name|p
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|d
operator|->
name|dockFloat
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Normal
argument_list|,
name|QIcon
operator|::
name|Off
argument_list|)
expr_stmt|;
comment|// Normal
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|RBS_PUSHED
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|d
operator|->
name|dockFloat
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Normal
argument_list|,
name|QIcon
operator|::
name|On
argument_list|)
expr_stmt|;
comment|// Pressed
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|RBS_HOT
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|d
operator|->
name|dockFloat
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Active
argument_list|,
name|QIcon
operator|::
name|Off
argument_list|)
expr_stmt|;
comment|// Hover
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|RBS_INACTIVE
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|d
operator|->
name|dockFloat
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Disabled
argument_list|,
name|QIcon
operator|::
name|Off
argument_list|)
expr_stmt|;
comment|// Disabled
block|}
block|}
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
return|return
name|d
operator|->
name|dockFloat
return|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|QWindowsStyle
operator|::
name|standardIcon
argument_list|(
name|standardIcon
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Constructs a QWindowsXPStyle object. */
end_comment
begin_constructor
DECL|function|QWindowsXPStyle
name|QWindowsXPStyle
operator|::
name|QWindowsXPStyle
parameter_list|(
name|QWindowsXPStylePrivate
modifier|&
name|dd
parameter_list|)
member_init_list|:
name|QWindowsStyle
argument_list|(
name|dd
argument_list|)
block|{ }
end_constructor
begin_comment
comment|// Debugging code ---------------------------------------------------------------------[ START ]---
end_comment
begin_comment
comment|// The code for this point on is not compiled by default, but only used as assisting
end_comment
begin_comment
comment|// debugging code when you uncomment the DEBUG_XP_STYLE define at the top of the file.
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|DEBUG_XP_STYLE
end_ifdef
begin_comment
comment|// The schema file expects these to be defined by the user.
end_comment
begin_define
DECL|macro|TMT_ENUMDEF
define|#
directive|define
name|TMT_ENUMDEF
value|8
end_define
begin_define
DECL|macro|TMT_ENUMVAL
define|#
directive|define
name|TMT_ENUMVAL
value|TEXT('A')
end_define
begin_define
DECL|macro|TMT_ENUM
define|#
directive|define
name|TMT_ENUM
value|TEXT('B')
end_define
begin_define
DECL|macro|SCHEMA_STRINGS
define|#
directive|define
name|SCHEMA_STRINGS
end_define
begin_comment
DECL|macro|SCHEMA_STRINGS
comment|// For 2nd pass on schema file
end_comment
begin_expr_stmt
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<tmschema.h>
name|QT_END_INCLUDE_NAMESPACE
comment|// A property's value, type and name combo
expr|struct
DECL|struct|PropPair
name|PropPair
block|{
DECL|member|propValue
name|int
name|propValue
block|;
DECL|member|propType
name|int
name|propType
block|;
DECL|member|propName
name|LPCWSTR
name|propName
block|; }
expr_stmt|;
end_expr_stmt
begin_comment
comment|// Operator for sorting of PropPairs
end_comment
begin_function
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
name|PropPair
name|a
parameter_list|,
name|PropPair
name|b
parameter_list|)
block|{
return|return
name|wcscmp
argument_list|(
name|a
operator|.
name|propName
argument_list|,
name|b
operator|.
name|propName
argument_list|)
operator|<
literal|0
return|;
block|}
end_function
begin_comment
comment|// Our list of all possible properties
end_comment
begin_decl_stmt
DECL|variable|all_props
specifier|static
name|QList
argument_list|<
name|PropPair
argument_list|>
name|all_props
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*! \internal     Dumps a portion of the full native DIB section double buffer.     The DIB section double buffer is only used when doing special     transformations to the theme part, or when the real double     buffer in the paintengine does not have an HDC we may use     directly.     Since we cannot rely on the pixel data we get from Microsoft     when drawing into the DIB section, we use this function to     see the actual data we got, and can determin the appropriate     action. */
end_comment
begin_function
DECL|function|dumpNativeDIB
name|void
name|QWindowsXPStylePrivate
operator|::
name|dumpNativeDIB
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
if|if
condition|(
name|w
operator|&&
name|h
condition|)
block|{
specifier|static
name|int
name|pCount
init|=
literal|0
decl_stmt|;
name|DWORD
modifier|*
name|bufPix
init|=
operator|(
name|DWORD
operator|*
operator|)
name|bufferPixels
decl_stmt|;
name|char
modifier|*
name|bufferDump
init|=
operator|new
name|char
index|[
name|bufferH
operator|*
name|bufferW
operator|*
literal|16
index|]
decl_stmt|;
name|char
modifier|*
name|bufferPos
init|=
name|bufferDump
decl_stmt|;
name|memset
argument_list|(
name|bufferDump
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|bufferDump
argument_list|)
argument_list|)
expr_stmt|;
name|bufferPos
operator|+=
name|sprintf
argument_list|(
name|bufferPos
argument_list|,
literal|"const int pixelBufferW%d = %d;\n"
argument_list|,
name|pCount
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|bufferPos
operator|+=
name|sprintf
argument_list|(
name|bufferPos
argument_list|,
literal|"const int pixelBufferH%d = %d;\n"
argument_list|,
name|pCount
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|bufferPos
operator|+=
name|sprintf
argument_list|(
name|bufferPos
argument_list|,
literal|"const unsigned DWORD pixelBuffer%d[] = {"
argument_list|,
name|pCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|iy
init|=
literal|0
init|;
name|iy
operator|<
name|h
condition|;
operator|++
name|iy
control|)
block|{
name|bufferPos
operator|+=
name|sprintf
argument_list|(
name|bufferPos
argument_list|,
literal|"\n    "
argument_list|)
expr_stmt|;
name|bufPix
operator|=
operator|(
name|DWORD
operator|*
operator|)
operator|(
name|bufferPixels
operator|+
operator|(
name|iy
operator|*
name|bufferW
operator|*
literal|4
operator|)
operator|)
expr_stmt|;
for|for
control|(
name|int
name|ix
init|=
literal|0
init|;
name|ix
operator|<
name|w
condition|;
operator|++
name|ix
control|)
block|{
name|bufferPos
operator|+=
name|sprintf
argument_list|(
name|bufferPos
argument_list|,
literal|"0x%08x, "
argument_list|,
operator|*
name|bufPix
argument_list|)
expr_stmt|;
operator|++
name|bufPix
expr_stmt|;
block|}
block|}
name|bufferPos
operator|+=
name|sprintf
argument_list|(
name|bufferPos
argument_list|,
literal|"\n};\n\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
name|bufferDump
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|bufferDump
expr_stmt|;
operator|++
name|pCount
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \internal     Shows the value of a given property for a part. */
end_comment
begin_function
DECL|function|showProperty
specifier|static
name|void
name|showProperty
parameter_list|(
name|XPThemeData
modifier|&
name|themeData
parameter_list|,
specifier|const
name|PropPair
modifier|&
name|prop
parameter_list|)
block|{
name|PROPERTYORIGIN
name|origin
init|=
name|PO_NOTFOUND
decl_stmt|;
name|pGetThemePropertyOrigin
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
operator|&
name|origin
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|originStr
decl_stmt|;
switch|switch
condition|(
name|origin
condition|)
block|{
case|case
name|PO_STATE
case|:
name|originStr
operator|=
literal|"State "
expr_stmt|;
break|break;
case|case
name|PO_PART
case|:
name|originStr
operator|=
literal|"Part  "
expr_stmt|;
break|break;
case|case
name|PO_CLASS
case|:
name|originStr
operator|=
literal|"Class "
expr_stmt|;
break|break;
case|case
name|PO_GLOBAL
case|:
name|originStr
operator|=
literal|"Globl "
expr_stmt|;
break|break;
case|case
name|PO_NOTFOUND
case|:
default|default:
name|originStr
operator|=
literal|"Unkwn "
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|prop
operator|.
name|propType
condition|)
block|{
case|case
name|TMT_STRING
case|:
block|{
name|wchar_t
name|buffer
index|[
literal|512
index|]
decl_stmt|;
name|pGetThemeString
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
name|buffer
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  (%sString)  %-20S: %S\n"
argument_list|,
name|originStr
argument_list|,
name|prop
operator|.
name|propName
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TMT_ENUM
case|:
block|{
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
name|pGetThemeEnumValue
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  (%sEnum)    %-20S: %d\n"
argument_list|,
name|originStr
argument_list|,
name|prop
operator|.
name|propName
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TMT_INT
case|:
block|{
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
name|pGetThemeInt
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  (%sint)     %-20S: %d\n"
argument_list|,
name|originStr
argument_list|,
name|prop
operator|.
name|propName
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TMT_BOOL
case|:
block|{
name|BOOL
name|result
init|=
literal|false
decl_stmt|;
name|pGetThemeBool
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  (%sbool)    %-20S: %d\n"
argument_list|,
name|originStr
argument_list|,
name|prop
operator|.
name|propName
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TMT_COLOR
case|:
block|{
name|COLORREF
name|result
init|=
literal|0
decl_stmt|;
name|pGetThemeColor
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  (%scolor)   %-20S: 0x%08X\n"
argument_list|,
name|originStr
argument_list|,
name|prop
operator|.
name|propName
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TMT_MARGINS
case|:
block|{
name|MARGINS
name|result
decl_stmt|;
name|memset
argument_list|(
operator|&
name|result
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|pGetThemeMargins
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
literal|0
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  (%smargins) %-20S: (%d, %d, %d, %d)\n"
argument_list|,
name|originStr
argument_list|,
name|prop
operator|.
name|propName
argument_list|,
name|result
operator|.
name|cxLeftWidth
argument_list|,
name|result
operator|.
name|cyTopHeight
argument_list|,
name|result
operator|.
name|cxRightWidth
argument_list|,
name|result
operator|.
name|cyBottomHeight
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TMT_FILENAME
case|:
block|{
name|wchar_t
name|buffer
index|[
literal|512
index|]
decl_stmt|;
name|pGetThemeFilename
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
name|buffer
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  (%sfilename)%-20S: %S\n"
argument_list|,
name|originStr
argument_list|,
name|prop
operator|.
name|propName
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TMT_SIZE
case|:
block|{
name|SIZE
name|result1
decl_stmt|;
name|SIZE
name|result2
decl_stmt|;
name|SIZE
name|result3
decl_stmt|;
name|memset
argument_list|(
operator|&
name|result1
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|result1
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|result2
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|result2
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|result3
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|result3
argument_list|)
argument_list|)
expr_stmt|;
name|pGetThemePartSize
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
literal|0
argument_list|,
name|TS_MIN
argument_list|,
operator|&
name|result1
argument_list|)
expr_stmt|;
name|pGetThemePartSize
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
literal|0
argument_list|,
name|TS_TRUE
argument_list|,
operator|&
name|result2
argument_list|)
expr_stmt|;
name|pGetThemePartSize
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
literal|0
argument_list|,
name|TS_DRAW
argument_list|,
operator|&
name|result3
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  (%ssize)    %-20S: Min (%d, %d),  True(%d, %d),  Draw(%d, %d)\n"
argument_list|,
name|originStr
argument_list|,
name|prop
operator|.
name|propName
argument_list|,
name|result1
operator|.
name|cx
argument_list|,
name|result1
operator|.
name|cy
argument_list|,
name|result2
operator|.
name|cx
argument_list|,
name|result2
operator|.
name|cy
argument_list|,
name|result3
operator|.
name|cx
argument_list|,
name|result3
operator|.
name|cy
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TMT_POSITION
case|:
block|{
name|POINT
name|result
decl_stmt|;
name|memset
argument_list|(
operator|&
name|result
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|pGetThemePosition
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  (%sPosition)%-20S: (%d, %d)\n"
argument_list|,
name|originStr
argument_list|,
name|prop
operator|.
name|propName
argument_list|,
name|result
operator|.
name|x
argument_list|,
name|result
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TMT_RECT
case|:
block|{
name|RECT
name|result
decl_stmt|;
name|memset
argument_list|(
operator|&
name|result
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|pGetThemeRect
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  (%sRect)    %-20S: (%d, %d, %d, %d)\n"
argument_list|,
name|originStr
argument_list|,
name|prop
operator|.
name|propName
argument_list|,
name|result
operator|.
name|left
argument_list|,
name|result
operator|.
name|top
argument_list|,
name|result
operator|.
name|right
argument_list|,
name|result
operator|.
name|bottom
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TMT_FONT
case|:
block|{
name|LOGFONT
name|result
decl_stmt|;
name|memset
argument_list|(
operator|&
name|result
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|pGetThemeFont
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  (%sFont)    %-20S: %S  height(%d)  width(%d)  weight(%d)\n"
argument_list|,
name|originStr
argument_list|,
name|prop
operator|.
name|propName
argument_list|,
name|result
operator|.
name|lfFaceName
argument_list|,
name|result
operator|.
name|lfHeight
argument_list|,
name|result
operator|.
name|lfWidth
argument_list|,
name|result
operator|.
name|lfWeight
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TMT_INTLIST
case|:
block|{
name|INTLIST
name|result
decl_stmt|;
name|memset
argument_list|(
operator|&
name|result
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|pGetThemeIntList
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  (%sInt list)%-20S: { "
argument_list|,
name|originStr
argument_list|,
name|prop
operator|.
name|propName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|iValueCount
condition|;
operator|++
name|i
control|)
name|printf
argument_list|(
literal|"%d "
argument_list|,
name|result
operator|.
name|iValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|printf
argument_list|(
literal|"    %s%S : Unknown property type (%d)!\n"
argument_list|,
name|originStr
argument_list|,
name|prop
operator|.
name|propName
argument_list|,
name|prop
operator|.
name|propType
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \internal     Dump all valid properties for a part.     If it's the first time this function is called, then the name,     enum value and documentation of all properties are shown, as     well as all global properties. */
end_comment
begin_function
DECL|function|showProperties
name|void
name|QWindowsXPStylePrivate
operator|::
name|showProperties
parameter_list|(
name|XPThemeData
modifier|&
name|themeData
parameter_list|)
block|{
if|if
condition|(
operator|!
name|all_props
operator|.
name|count
argument_list|()
condition|)
block|{
specifier|const
name|TMSCHEMAINFO
modifier|*
name|infoTable
init|=
name|GetSchemaInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|infoTable
operator|->
name|iPropCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|propType
init|=
name|infoTable
operator|->
name|pPropTable
index|[
name|i
index|]
operator|.
name|bPrimVal
decl_stmt|;
name|int
name|propValue
init|=
name|infoTable
operator|->
name|pPropTable
index|[
name|i
index|]
operator|.
name|sEnumVal
decl_stmt|;
name|LPCWSTR
name|propName
init|=
name|infoTable
operator|->
name|pPropTable
index|[
name|i
index|]
operator|.
name|pszName
decl_stmt|;
switch|switch
condition|(
name|propType
condition|)
block|{
case|case
name|TMT_ENUMDEF
case|:
case|case
name|TMT_ENUMVAL
case|:
continue|continue;
default|default:
if|if
condition|(
name|propType
operator|!=
name|propValue
condition|)
block|{
name|PropPair
name|prop
decl_stmt|;
name|prop
operator|.
name|propValue
operator|=
name|propValue
expr_stmt|;
name|prop
operator|.
name|propName
operator|=
name|propName
expr_stmt|;
name|prop
operator|.
name|propType
operator|=
name|propType
expr_stmt|;
name|all_props
operator|.
name|append
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|std
operator|::
name|sort
argument_list|(
name|all_props
operator|.
name|begin
argument_list|()
argument_list|,
name|all_props
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|{
comment|// List all properties
name|printf
argument_list|(
literal|"part properties count = %d:\n"
argument_list|,
name|all_props
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"      Enum  Property Name        Description\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"-----------------------------------------------------------\n"
argument_list|)
expr_stmt|;
name|wchar_t
name|themeName
index|[
literal|256
index|]
decl_stmt|;
name|pGetCurrentThemeName
argument_list|(
name|themeName
argument_list|,
literal|256
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|all_props
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|PropPair
name|prop
init|=
name|all_props
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|wchar_t
name|buf
index|[
literal|500
index|]
decl_stmt|;
name|pGetThemeDocumentationProperty
argument_list|(
name|themeName
argument_list|,
name|prop
operator|.
name|propName
argument_list|,
name|buf
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"%3d: (%4d) %-20S %S\n"
argument_list|,
name|j
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
name|prop
operator|.
name|propName
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|// Show Global values
name|printf
argument_list|(
literal|"Global Properties:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|all_props
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|PropPair
name|prop
init|=
name|all_props
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|PROPERTYORIGIN
name|origin
init|=
name|PO_NOTFOUND
decl_stmt|;
name|pGetThemePropertyOrigin
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
operator|&
name|origin
argument_list|)
expr_stmt|;
if|if
condition|(
name|origin
operator|==
name|PO_GLOBAL
condition|)
block|{
name|showProperty
argument_list|(
name|themeData
argument_list|,
name|prop
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|all_props
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|PropPair
name|prop
init|=
name|all_props
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|PROPERTYORIGIN
name|origin
init|=
name|PO_NOTFOUND
decl_stmt|;
name|pGetThemePropertyOrigin
argument_list|(
name|themeData
operator|.
name|handle
argument_list|()
argument_list|,
name|themeData
operator|.
name|partId
argument_list|,
name|themeData
operator|.
name|stateId
argument_list|,
name|prop
operator|.
name|propValue
argument_list|,
operator|&
name|origin
argument_list|)
expr_stmt|;
if|if
condition|(
name|origin
operator|!=
name|PO_NOTFOUND
condition|)
block|{
name|showProperty
argument_list|(
name|themeData
argument_list|,
name|prop
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Debugging code -----------------------------------------------------------------------[ END ]---
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_WINDOWSXP
end_comment
end_unit
