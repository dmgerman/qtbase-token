begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmotifstyle.h"
end_include
begin_include
include|#
directive|include
file|"qcdestyle.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MOTIF
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_PLUGIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qdrawutil.h"
end_include
begin_include
include|#
directive|include
file|"qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qpalette.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qpushbutton.h"
end_include
begin_include
include|#
directive|include
file|"qscrollbar.h"
end_include
begin_include
include|#
directive|include
file|"qtabbar.h"
end_include
begin_include
include|#
directive|include
file|"qtabwidget.h"
end_include
begin_include
include|#
directive|include
file|"qlistview.h"
end_include
begin_include
include|#
directive|include
file|"qsplitter.h"
end_include
begin_include
include|#
directive|include
file|"qslider.h"
end_include
begin_include
include|#
directive|include
file|"qcombobox.h"
end_include
begin_include
include|#
directive|include
file|"qlineedit.h"
end_include
begin_include
include|#
directive|include
file|"qprogressbar.h"
end_include
begin_include
include|#
directive|include
file|"qimage.h"
end_include
begin_include
include|#
directive|include
file|"qfocusframe.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qpainterpath.h"
end_include
begin_include
include|#
directive|include
file|"qmotifstyle_p.h"
end_include
begin_include
include|#
directive|include
file|"qdialogbuttonbox.h"
end_include
begin_include
include|#
directive|include
file|"qformlayout.h"
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicsproxywidget.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicsview.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_include
include|#
directive|include
file|"qx11info_x11.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// old constants that might still be useful...
DECL|variable|motifItemFrame
specifier|static
specifier|const
name|int
name|motifItemFrame
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|motifItemFrame
comment|// menu item frame width
end_comment
begin_decl_stmt
DECL|variable|motifSepHeight
specifier|static
specifier|const
name|int
name|motifSepHeight
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|motifSepHeight
comment|// separator item height
end_comment
begin_decl_stmt
DECL|variable|motifItemHMargin
specifier|static
specifier|const
name|int
name|motifItemHMargin
init|=
literal|3
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|motifItemHMargin
comment|// menu item hor text margin
end_comment
begin_decl_stmt
DECL|variable|motifItemVMargin
specifier|static
specifier|const
name|int
name|motifItemVMargin
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|motifItemVMargin
comment|// menu item ver text margin
end_comment
begin_decl_stmt
DECL|variable|motifArrowHMargin
specifier|static
specifier|const
name|int
name|motifArrowHMargin
init|=
literal|6
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|motifArrowHMargin
comment|// arrow horizontal margin
end_comment
begin_decl_stmt
DECL|variable|motifTabSpacing
specifier|static
specifier|const
name|int
name|motifTabSpacing
init|=
literal|12
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|motifTabSpacing
comment|// space between text and tab
end_comment
begin_decl_stmt
DECL|variable|motifCheckMarkHMargin
specifier|static
specifier|const
name|int
name|motifCheckMarkHMargin
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|motifCheckMarkHMargin
comment|// horiz. margins of check mark
end_comment
begin_decl_stmt
DECL|variable|motifCheckMarkSpace
specifier|static
specifier|const
name|int
name|motifCheckMarkSpace
init|=
literal|16
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!   \class QMotifStyle   \brief The QMotifStyle class provides Motif look and feel.    \ingroup appearance    This class implements the Motif look and feel. It closely   resembles the original Motif look as defined by the Open Group,   but with some minor improvements. The Motif style is Qt's default   GUI style on Unix platforms.    \img qmotifstyle.png   \sa QWindowsXPStyle, QMacStyle, QWindowsStyle, QPlastiqueStyle, QCDEStyle */
end_comment
begin_comment
comment|/*!     \variable QMotifStyle::focus     \internal */
end_comment
begin_comment
comment|/*!   Constructs a QMotifStyle.    If \a useHighlightCols is false (the default), the style will   polish the application's color palette to emulate the Motif way of   highlighting, which is a simple inversion between the base and the   text color. */
end_comment
begin_constructor
DECL|function|QMotifStyle
name|QMotifStyle
operator|::
name|QMotifStyle
parameter_list|(
name|bool
name|useHighlightCols
parameter_list|)
member_init_list|:
name|QCommonStyle
argument_list|(
operator|*
operator|new
name|QMotifStylePrivate
argument_list|)
block|{
name|focus
operator|=
literal|0
expr_stmt|;
name|highlightCols
operator|=
name|useHighlightCols
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QMotifStyle
name|QMotifStyle
operator|::
name|QMotifStyle
parameter_list|(
name|QMotifStylePrivate
modifier|&
name|dd
parameter_list|,
name|bool
name|useHighlightColors
parameter_list|)
member_init_list|:
name|QCommonStyle
argument_list|(
name|dd
argument_list|)
block|{
name|focus
operator|=
literal|0
expr_stmt|;
name|highlightCols
operator|=
name|useHighlightColors
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   \overload    Destroys the style. */
end_comment
begin_destructor
DECL|function|~QMotifStyle
name|QMotifStyle
operator|::
name|~
name|QMotifStyle
parameter_list|()
block|{
operator|delete
name|focus
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \internal     Animate indeterminate progress bars only when visible */
end_comment
begin_function
DECL|function|eventFilter
name|bool
name|QMotifStyle
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
name|Q_D
argument_list|(
name|QMotifStyle
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|StyleChange
case|:
case|case
name|QEvent
operator|::
name|Show
case|:
if|if
condition|(
name|QProgressBar
modifier|*
name|bar
init|=
name|qobject_cast
argument_list|<
name|QProgressBar
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|d
operator|->
name|bars
operator|<<
name|bar
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|bars
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|animationFps
operator|>
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|animateTimer
operator|=
name|startTimer
argument_list|(
literal|1000
operator|/
name|d
operator|->
name|animationFps
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|QEvent
operator|::
name|Destroy
case|:
case|case
name|QEvent
operator|::
name|Hide
case|:
comment|// reinterpret_cast because there is no type info when getting
comment|// the destroy event. We know that it is a QProgressBar.
if|if
condition|(
name|QProgressBar
modifier|*
name|bar
init|=
cast|reinterpret_cast
argument_list|<
name|QProgressBar
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|d
operator|->
name|bars
operator|.
name|removeAll
argument_list|(
name|bar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|bars
operator|.
name|isEmpty
argument_list|()
operator|&&
name|d
operator|->
name|animateTimer
condition|)
block|{
name|killTimer
argument_list|(
name|d
operator|->
name|animateTimer
argument_list|)
expr_stmt|;
name|d
operator|->
name|animateTimer
operator|=
literal|0
expr_stmt|;
block|}
block|}
default|default:
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_PROGRESSBAR
return|return
name|QStyle
operator|::
name|eventFilter
argument_list|(
name|o
argument_list|,
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|standardIconImplementation
name|QIcon
name|QMotifStyle
operator|::
name|standardIconImplementation
parameter_list|(
name|StandardPixmap
name|standardIcon
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
return|return
name|QCommonStyle
operator|::
name|standardIconImplementation
argument_list|(
name|standardIcon
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|timerEvent
name|void
name|QMotifStyle
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
name|Q_D
argument_list|(
name|QMotifStyle
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|animateTimer
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|animationFps
operator|>
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|animateStep
operator|=
name|d
operator|->
name|startTime
operator|.
name|elapsed
argument_list|()
operator|/
operator|(
literal|1000
operator|/
name|d
operator|->
name|animationFps
operator|)
expr_stmt|;
foreach|foreach
control|(
name|QProgressBar
modifier|*
name|bar
decl|,
name|d
operator|->
name|bars
control|)
block|{
if|if
condition|(
operator|(
name|bar
operator|->
name|minimum
argument_list|()
operator|==
literal|0
operator|&&
name|bar
operator|->
name|maximum
argument_list|()
operator|==
literal|0
operator|)
condition|)
name|bar
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_PROGRESSBAR
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QMotifStylePrivate
name|QMotifStylePrivate
operator|::
name|QMotifStylePrivate
parameter_list|()
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
member_init_list|:
name|animationFps
argument_list|(
literal|25
argument_list|)
member_init_list|,
name|animateTimer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|animateStep
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
block|{ }
end_constructor
begin_comment
comment|/*!   If \a arg is false, the style will polish the application's color   palette to emulate the Motif way of highlighting, which is a   simple inversion between the base and the text color.    The effect will show up the next time an application palette is   set via QApplication::setPalette(). The current color palette of   the application remains unchanged.    \sa QStyle::polish() */
end_comment
begin_function
DECL|function|setUseHighlightColors
name|void
name|QMotifStyle
operator|::
name|setUseHighlightColors
parameter_list|(
name|bool
name|arg
parameter_list|)
block|{
name|highlightCols
operator|=
name|arg
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns true if the style treats the highlight colors of the   palette in a Motif-like manner, which is a simple inversion   between the base and the text color; otherwise returns false. The   default is false. */
end_comment
begin_function
DECL|function|useHighlightColors
name|bool
name|QMotifStyle
operator|::
name|useHighlightColors
parameter_list|()
specifier|const
block|{
return|return
name|highlightCols
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|polish
name|void
name|QMotifStyle
operator|::
name|polish
parameter_list|(
name|QPalette
modifier|&
name|pal
parameter_list|)
block|{
if|if
condition|(
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Light
argument_list|)
operator|==
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
condition|)
block|{
name|QColor
name|nlight
init|=
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Light
argument_list|)
operator|.
name|darker
argument_list|(
literal|108
argument_list|)
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Light
argument_list|,
name|nlight
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Light
argument_list|,
name|nlight
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Light
argument_list|,
name|nlight
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlightCols
condition|)
return|return;
comment|// force the ugly motif way of highlighting *sigh*
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp   \internal   Keep QStyle::polish() visible. */
end_comment
begin_function
DECL|function|polish
name|void
name|QMotifStyle
operator|::
name|polish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QStyle
operator|::
name|polish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
if|if
condition|(
name|qobject_cast
argument_list|<
name|QProgressBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|widget
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!   \reimp   \internal   Keep QStyle::polish() visible. */
end_comment
begin_function
DECL|function|unpolish
name|void
name|QMotifStyle
operator|::
name|unpolish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QCommonStyle
operator|::
name|unpolish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
if|if
condition|(
name|qobject_cast
argument_list|<
name|QProgressBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|Q_D
argument_list|(
name|QMotifStyle
argument_list|)
expr_stmt|;
name|widget
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|bars
operator|.
name|removeAll
argument_list|(
cast|static_cast
argument_list|<
name|QProgressBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!   \reimp   \internal   Keep QStyle::polish() visible. */
end_comment
begin_function
DECL|function|polish
name|void
name|QMotifStyle
operator|::
name|polish
parameter_list|(
name|QApplication
modifier|*
name|a
parameter_list|)
block|{
name|QCommonStyle
operator|::
name|polish
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp   \internal   Keep QStyle::polish() visible. */
end_comment
begin_function
DECL|function|unpolish
name|void
name|QMotifStyle
operator|::
name|unpolish
parameter_list|(
name|QApplication
modifier|*
name|a
parameter_list|)
block|{
name|QCommonStyle
operator|::
name|unpolish
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rot
specifier|static
name|void
name|rot
parameter_list|(
name|QPolygon
modifier|&
name|a
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|QPolygon
name|r
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|a
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|n
condition|)
block|{
case|case
literal|1
case|:
name|r
operator|.
name|setPoint
argument_list|(
name|i
argument_list|,
operator|-
name|a
index|[
name|i
index|]
operator|.
name|y
argument_list|()
argument_list|,
name|a
index|[
name|i
index|]
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|r
operator|.
name|setPoint
argument_list|(
name|i
argument_list|,
operator|-
name|a
index|[
name|i
index|]
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|a
index|[
name|i
index|]
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|r
operator|.
name|setPoint
argument_list|(
name|i
argument_list|,
name|a
index|[
name|i
index|]
operator|.
name|y
argument_list|()
argument_list|,
operator|-
name|a
index|[
name|i
index|]
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|a
operator|=
name|r
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|drawPrimitive
name|void
name|QMotifStyle
operator|::
name|drawPrimitive
parameter_list|(
name|PrimitiveElement
name|pe
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|pe
condition|)
block|{
case|case
name|PE_Q3CheckListExclusiveIndicator
case|:
if|if
condition|(
specifier|const
name|QStyleOptionQ3ListView
modifier|*
name|lv
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionQ3ListView
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|lv
operator|->
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|lv
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|lv
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QPolygon
name|a
decl_stmt|;
name|int
name|cx
init|=
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|-
literal|1
decl_stmt|;
name|int
name|cy
init|=
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
decl_stmt|;
name|int
name|e
init|=
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
comment|//penWidth 2 doesn't quite work
name|a
operator|.
name|setPoints
argument_list|(
literal|4
argument_list|,
name|cx
operator|-
name|e
argument_list|,
name|cy
argument_list|,
name|cx
argument_list|,
name|cy
operator|-
name|e
argument_list|,
name|cx
operator|+
name|e
argument_list|,
name|cy
argument_list|,
name|cx
argument_list|,
name|cy
operator|+
name|e
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolygon
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|e
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_On
condition|)
block|{
if|if
condition|(
name|lv
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|lv
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QBrush
name|saveBrush
init|=
name|p
operator|->
name|brush
argument_list|()
decl_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|e
operator|-
literal|2
expr_stmt|;
name|a
operator|.
name|setPoints
argument_list|(
literal|4
argument_list|,
name|cx
operator|-
name|e
argument_list|,
name|cy
argument_list|,
name|cx
argument_list|,
name|cy
operator|-
name|e
argument_list|,
name|cx
operator|+
name|e
argument_list|,
name|cy
argument_list|,
name|cx
argument_list|,
name|cy
operator|+
name|e
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolygon
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|saveBrush
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PE_FrameTabWidget
case|:
case|case
name|PE_FrameWindow
case|:
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
name|QStyle
operator|::
name|State_None
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_FrameFocusRect
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFocusRect
modifier|*
name|fropt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFocusRect
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|fropt
operator|->
name|state
operator|&
name|State_HasFocus
operator|)
operator|&&
name|focus
operator|&&
name|focus
operator|->
name|isVisible
argument_list|()
operator|&&
operator|!
operator|(
name|fropt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Item
operator|)
condition|)
break|break;
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_IndicatorToolBarHandle
case|:
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QColor
name|dark
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
decl_stmt|;
name|QColor
name|light
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
name|int
name|h
init|=
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|h
operator|>
literal|6
condition|)
block|{
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_On
condition|)
name|p
operator|->
name|fillRect
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
name|h
operator|-
literal|2
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|highlight
argument_list|()
argument_list|)
expr_stmt|;
name|QPolygon
name|a
argument_list|(
literal|2
operator|*
operator|(
operator|(
name|h
operator|-
literal|6
operator|)
operator|/
literal|3
operator|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
literal|3
operator|+
operator|(
name|h
operator|%
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
name|h
operator|-
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
literal|2
operator|*
name|i
operator|<
name|a
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|a
operator|.
name|setPoint
argument_list|(
literal|2
operator|*
name|i
argument_list|,
literal|5
argument_list|,
name|y
operator|+
literal|1
operator|+
literal|3
operator|*
name|i
argument_list|)
expr_stmt|;
name|a
operator|.
name|setPoint
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|,
literal|2
argument_list|,
name|y
operator|+
literal|2
operator|+
literal|3
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|drawPoints
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|light
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
literal|9
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|,
name|h
operator|-
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
literal|2
operator|*
name|i
operator|<
name|a
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|a
operator|.
name|setPoint
argument_list|(
literal|2
operator|*
name|i
argument_list|,
literal|4
argument_list|,
name|y
operator|+
literal|3
operator|*
name|i
argument_list|)
expr_stmt|;
name|a
operator|.
name|setPoint
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|,
literal|1
argument_list|,
name|y
operator|+
literal|1
operator|+
literal|3
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|drawPoints
argument_list|(
name|a
argument_list|)
expr_stmt|;
comment|// if (drawBorder) {
comment|// p->setPen(QPen(Qt::darkGray));
comment|// p->drawLine(0, opt->rect.height() - 1,
comment|// tbExtent, opt->rect.height() - 1);
comment|// }
block|}
block|}
else|else
block|{
name|int
name|w
init|=
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|>
literal|6
condition|)
block|{
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_On
condition|)
name|p
operator|->
name|fillRect
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|w
operator|-
literal|2
argument_list|,
literal|9
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|highlight
argument_list|()
argument_list|)
expr_stmt|;
name|QPolygon
name|a
argument_list|(
literal|2
operator|*
operator|(
operator|(
name|w
operator|-
literal|6
operator|)
operator|/
literal|3
operator|)
argument_list|)
decl_stmt|;
name|int
name|x
init|=
literal|3
operator|+
operator|(
name|w
operator|%
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|dark
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|,
name|w
operator|-
literal|2
argument_list|,
literal|8
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
literal|2
operator|*
name|i
operator|<
name|a
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|a
operator|.
name|setPoint
argument_list|(
literal|2
operator|*
name|i
argument_list|,
name|x
operator|+
literal|1
operator|+
literal|3
operator|*
name|i
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|a
operator|.
name|setPoint
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|,
name|x
operator|+
literal|2
operator|+
literal|3
operator|*
name|i
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|drawPoints
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|light
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
literal|1
argument_list|,
literal|9
argument_list|,
name|w
operator|-
literal|2
argument_list|,
literal|9
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
literal|2
operator|*
name|i
operator|<
name|a
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|a
operator|.
name|setPoint
argument_list|(
literal|2
operator|*
name|i
argument_list|,
name|x
operator|+
literal|3
operator|*
name|i
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|a
operator|.
name|setPoint
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|,
name|x
operator|+
literal|1
operator|+
literal|3
operator|*
name|i
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|drawPoints
argument_list|(
name|a
argument_list|)
expr_stmt|;
comment|// if (drawBorder) {
comment|// p->setPen(QPen(Qt::darkGray));
comment|// p->drawLine(opt->rect.width() - 1, 0,
comment|// opt->rect.width() - 1, tbExtent);
comment|// }
block|}
block|}
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|PE_PanelButtonCommand
case|:
case|case
name|PE_PanelButtonBevel
case|:
case|case
name|PE_PanelButtonTool
case|:
block|{
name|QBrush
name|fill
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|fill
operator|=
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Mid
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_On
operator|)
operator|&&
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|fill
operator|=
name|QBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|mid
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
else|else
name|fill
operator|=
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|||
name|opt
operator|->
name|state
operator|&
name|State_On
operator|)
operator|||
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_AutoRaise
operator|)
condition|)
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
name|bool
argument_list|(
name|opt
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|)
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorCheckBox
case|:
block|{
name|bool
name|on
init|=
name|opt
operator|->
name|state
operator|&
name|State_On
decl_stmt|;
name|bool
name|down
init|=
name|opt
operator|->
name|state
operator|&
name|State_Sunken
decl_stmt|;
name|bool
name|showUp
init|=
operator|!
operator|(
name|down
operator|^
name|on
operator|)
decl_stmt|;
name|QBrush
name|fill
init|=
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
operator|(
name|showUp
operator|||
name|opt
operator|->
name|state
operator|&
name|State_NoChange
operator|)
condition|?
name|QPalette
operator|::
name|Button
else|:
name|QPalette
operator|::
name|Mid
argument_list|)
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_NoChange
condition|)
block|{
name|qDrawPlainRect
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
operator|!
name|showUp
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_DitherDisabledText
argument_list|)
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|QBrush
argument_list|(
name|p
operator|->
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense5Pattern
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorRadioButton
case|:
block|{
DECL|macro|INTARRLEN
define|#
directive|define
name|INTARRLEN
parameter_list|(
name|x
parameter_list|)
value|sizeof(x)/(sizeof(int)*2)
name|int
name|inner_pts
index|[]
init|=
block|{
comment|// used for filling diamond
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
block|,
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|3
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|3
block|}
decl_stmt|;
name|int
name|top_pts
index|[]
init|=
block|{
comment|// top (^) of diamond
literal|0
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
block|,
literal|0
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
literal|1
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|3
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
literal|1
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
block|,
literal|1
block|,
literal|1
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
block|,
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
block|,
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|4
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
literal|1
block|}
decl_stmt|;
name|int
name|bottom_pts
index|[]
init|=
block|{
comment|// bottom (v) of diamond
literal|1
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|+
literal|1
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|1
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
block|,
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|+
literal|1
block|,
literal|3
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|+
literal|1
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|3
block|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|3
block|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
block|}
decl_stmt|;
name|bool
name|on
init|=
name|opt
operator|->
name|state
operator|&
name|State_On
decl_stmt|;
name|bool
name|down
init|=
name|opt
operator|->
name|state
operator|&
name|State_Sunken
decl_stmt|;
name|bool
name|showUp
init|=
operator|!
operator|(
name|down
operator|^
name|on
operator|)
decl_stmt|;
name|QPen
name|oldPen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
name|QBrush
name|oldBrush
init|=
name|p
operator|->
name|brush
argument_list|()
decl_stmt|;
name|QPolygon
name|a
argument_list|(
name|INTARRLEN
argument_list|(
name|inner_pts
argument_list|)
argument_list|,
name|inner_pts
argument_list|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|showUp
condition|?
name|QPalette
operator|::
name|Button
else|:
name|QPalette
operator|::
name|Mid
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|translate
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolygon
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|showUp
condition|?
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
else|:
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|a
operator|.
name|setPoints
argument_list|(
name|INTARRLEN
argument_list|(
name|top_pts
argument_list|)
argument_list|,
name|top_pts
argument_list|)
expr_stmt|;
name|a
operator|.
name|translate
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|showUp
condition|?
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
else|:
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setPoints
argument_list|(
name|INTARRLEN
argument_list|(
name|bottom_pts
argument_list|)
argument_list|,
name|bottom_pts
argument_list|)
expr_stmt|;
name|a
operator|.
name|translate
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_DitherDisabledText
argument_list|)
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|QBrush
argument_list|(
name|p
operator|->
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense5Pattern
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|oldBrush
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorSpinUp
case|:
case|case
name|PE_IndicatorSpinPlus
case|:
case|case
name|PE_IndicatorSpinDown
case|:
case|case
name|PE_IndicatorSpinMinus
case|:
case|case
name|PE_IndicatorArrowUp
case|:
case|case
name|PE_IndicatorArrowDown
case|:
case|case
name|PE_IndicatorArrowRight
case|:
case|case
name|PE_IndicatorArrowLeft
case|:
block|{
name|QRect
name|rect
init|=
name|opt
operator|->
name|rect
decl_stmt|;
name|QPolygon
name|bFill
decl_stmt|;
name|QPolygon
name|bTop
decl_stmt|;
name|QPolygon
name|bBot
decl_stmt|;
name|QPolygon
name|bLeft
decl_stmt|;
if|if
condition|(
name|pe
operator|==
name|PE_IndicatorSpinPlus
operator|||
name|pe
operator|==
name|PE_IndicatorSpinUp
condition|)
name|pe
operator|=
name|PE_IndicatorArrowUp
expr_stmt|;
elseif|else
if|if
condition|(
name|pe
operator|==
name|PE_IndicatorSpinMinus
operator|||
name|pe
operator|==
name|PE_IndicatorSpinDown
condition|)
name|pe
operator|=
name|PE_IndicatorArrowDown
expr_stmt|;
name|bool
name|vertical
init|=
name|pe
operator|==
name|PE_IndicatorArrowUp
operator|||
name|pe
operator|==
name|PE_IndicatorArrowDown
decl_stmt|;
name|bool
name|horizontal
init|=
operator|!
name|vertical
decl_stmt|;
name|int
name|dim
init|=
name|rect
operator|.
name|width
argument_list|()
operator|<
name|rect
operator|.
name|height
argument_list|()
condition|?
name|rect
operator|.
name|width
argument_list|()
else|:
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|colspec
init|=
literal|0x0000
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|dim
operator|-=
literal|2
expr_stmt|;
if|if
condition|(
name|dim
operator|<
literal|2
condition|)
break|break;
comment|// adjust size and center (to fix rotation below)
if|if
condition|(
name|rect
operator|.
name|width
argument_list|()
operator|>
name|dim
condition|)
block|{
name|rect
operator|.
name|setX
argument_list|(
name|rect
operator|.
name|x
argument_list|()
operator|+
operator|(
operator|(
name|rect
operator|.
name|width
argument_list|()
operator|-
name|dim
operator|)
operator|/
literal|2
operator|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setWidth
argument_list|(
name|dim
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rect
operator|.
name|height
argument_list|()
operator|>
name|dim
condition|)
block|{
name|rect
operator|.
name|setY
argument_list|(
name|rect
operator|.
name|y
argument_list|()
operator|+
operator|(
operator|(
name|rect
operator|.
name|height
argument_list|()
operator|-
name|dim
operator|)
operator|/
literal|2
operator|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setHeight
argument_list|(
name|dim
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dim
operator|>
literal|3
condition|)
block|{
if|if
condition|(
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
operator|<
literal|2
condition|)
block|{
comment|// thin style
name|bFill
operator|.
name|resize
argument_list|(
name|dim
operator|&
literal|1
condition|?
literal|3
else|:
literal|4
argument_list|)
expr_stmt|;
name|bTop
operator|.
name|resize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bBot
operator|.
name|resize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bLeft
operator|.
name|resize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bLeft
operator|.
name|putPoints
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|dim
operator|-
literal|1
argument_list|)
expr_stmt|;
name|bTop
operator|.
name|putPoints
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|dim
operator|-
literal|1
argument_list|,
name|dim
operator|/
literal|2
argument_list|)
expr_stmt|;
name|bBot
operator|.
name|putPoints
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|dim
operator|-
literal|1
argument_list|,
name|dim
operator|-
literal|1
argument_list|,
name|dim
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|dim
operator|>
literal|6
condition|)
block|{
comment|// dim>6: must fill interior
name|bFill
operator|.
name|putPoints
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|dim
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|dim
operator|&
literal|1
condition|)
comment|// if size is an odd number
name|bFill
operator|.
name|setPoint
argument_list|(
literal|2
argument_list|,
name|dim
operator|-
literal|1
argument_list|,
name|dim
operator|/
literal|2
argument_list|)
expr_stmt|;
else|else
name|bFill
operator|.
name|putPoints
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|dim
operator|-
literal|1
argument_list|,
name|dim
operator|/
literal|2
operator|-
literal|1
argument_list|,
name|dim
operator|-
literal|1
argument_list|,
name|dim
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|dim
operator|>
literal|6
condition|)
name|bFill
operator|.
name|resize
argument_list|(
name|dim
operator|&
literal|1
condition|?
literal|3
else|:
literal|4
argument_list|)
expr_stmt|;
name|bTop
operator|.
name|resize
argument_list|(
operator|(
name|dim
operator|/
literal|2
operator|)
operator|*
literal|2
argument_list|)
expr_stmt|;
name|bBot
operator|.
name|resize
argument_list|(
name|dim
operator|&
literal|1
condition|?
name|dim
operator|+
literal|1
else|:
name|dim
argument_list|)
expr_stmt|;
name|bLeft
operator|.
name|resize
argument_list|(
name|dim
operator|>
literal|4
condition|?
literal|4
else|:
literal|2
argument_list|)
expr_stmt|;
name|bLeft
operator|.
name|putPoints
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|dim
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|dim
operator|>
literal|4
condition|)
name|bLeft
operator|.
name|putPoints
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|dim
operator|-
literal|3
argument_list|)
expr_stmt|;
name|bTop
operator|.
name|putPoints
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|bBot
operator|.
name|putPoints
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
name|dim
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
name|dim
operator|-
literal|2
argument_list|,
literal|2
argument_list|,
name|dim
operator|-
literal|2
argument_list|,
literal|3
argument_list|,
name|dim
operator|-
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dim
operator|/
literal|2
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|bTop
operator|.
name|putPoints
argument_list|(
name|i
operator|*
literal|2
operator|+
literal|4
argument_list|,
literal|2
argument_list|,
literal|2
operator|+
name|i
operator|*
literal|2
argument_list|,
literal|2
operator|+
name|i
argument_list|,
literal|5
operator|+
name|i
operator|*
literal|2
argument_list|,
literal|2
operator|+
name|i
argument_list|)
expr_stmt|;
name|bBot
operator|.
name|putPoints
argument_list|(
name|i
operator|*
literal|2
operator|+
literal|4
argument_list|,
literal|2
argument_list|,
literal|2
operator|+
name|i
operator|*
literal|2
argument_list|,
name|dim
operator|-
literal|3
operator|-
name|i
argument_list|,
literal|5
operator|+
name|i
operator|*
literal|2
argument_list|,
name|dim
operator|-
literal|3
operator|-
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dim
operator|&
literal|1
condition|)
comment|// odd number size: extra line
name|bBot
operator|.
name|putPoints
argument_list|(
name|dim
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
name|dim
operator|-
literal|3
argument_list|,
name|dim
operator|/
literal|2
argument_list|,
name|dim
operator|-
literal|1
argument_list|,
name|dim
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|dim
operator|>
literal|6
condition|)
block|{
comment|// dim>6: must fill interior
name|bFill
operator|.
name|putPoints
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|dim
operator|-
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|dim
operator|&
literal|1
condition|)
comment|// if size is an odd number
name|bFill
operator|.
name|setPoint
argument_list|(
literal|2
argument_list|,
name|dim
operator|-
literal|3
argument_list|,
name|dim
operator|/
literal|2
argument_list|)
expr_stmt|;
else|else
name|bFill
operator|.
name|putPoints
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|dim
operator|-
literal|4
argument_list|,
name|dim
operator|/
literal|2
operator|-
literal|1
argument_list|,
name|dim
operator|-
literal|4
argument_list|,
name|dim
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|dim
operator|==
literal|3
condition|)
block|{
comment|// 3x3 arrow pattern
name|bLeft
operator|.
name|setPoints
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|bTop
operator|.
name|setPoints
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bBot
operator|.
name|setPoints
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// 2x2 arrow pattern
name|bLeft
operator|.
name|setPoints
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|bTop
operator|.
name|setPoints
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bBot
operator|.
name|setPoints
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We use rot() and translate() as it is more efficient that
comment|// matrix transformations on the painter, and because it still
comment|// works with QT_NO_TRANSFORMATIONS defined.
if|if
condition|(
name|pe
operator|==
name|PE_IndicatorArrowUp
operator|||
name|pe
operator|==
name|PE_IndicatorArrowLeft
condition|)
block|{
if|if
condition|(
name|vertical
condition|)
block|{
name|rot
argument_list|(
name|bFill
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rot
argument_list|(
name|bLeft
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rot
argument_list|(
name|bTop
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rot
argument_list|(
name|bBot
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|bFill
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|bLeft
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|bTop
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|bBot
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rot
argument_list|(
name|bFill
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rot
argument_list|(
name|bLeft
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rot
argument_list|(
name|bTop
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rot
argument_list|(
name|bBot
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|bFill
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|bLeft
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|bTop
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|bBot
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|colspec
operator|=
name|horizontal
condition|?
literal|0x2334
else|:
literal|0x2343
expr_stmt|;
else|else
name|colspec
operator|=
name|horizontal
condition|?
literal|0x1443
else|:
literal|0x1434
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|vertical
condition|)
block|{
name|rot
argument_list|(
name|bFill
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rot
argument_list|(
name|bLeft
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rot
argument_list|(
name|bTop
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rot
argument_list|(
name|bBot
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|bFill
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bLeft
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bTop
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bBot
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|colspec
operator|=
name|horizontal
condition|?
literal|0x2443
else|:
literal|0x2434
expr_stmt|;
else|else
name|colspec
operator|=
name|horizontal
condition|?
literal|0x1334
else|:
literal|0x1343
expr_stmt|;
block|}
name|bFill
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|bLeft
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|bTop
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|bBot
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QColor
modifier|*
name|cols
index|[
literal|5
index|]
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
condition|)
block|{
name|cols
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|cols
index|[
literal|1
index|]
operator|=
operator|&
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|cols
index|[
literal|2
index|]
operator|=
operator|&
name|opt
operator|->
name|palette
operator|.
name|mid
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|cols
index|[
literal|3
index|]
operator|=
operator|&
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|cols
index|[
literal|4
index|]
operator|=
operator|&
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cols
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|cols
index|[
literal|1
index|]
operator|=
operator|&
name|opt
operator|->
name|palette
operator|.
name|mid
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|cols
index|[
literal|2
index|]
operator|=
operator|&
name|opt
operator|->
name|palette
operator|.
name|mid
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|cols
index|[
literal|3
index|]
operator|=
operator|&
name|opt
operator|->
name|palette
operator|.
name|mid
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|cols
index|[
literal|4
index|]
operator|=
operator|&
name|opt
operator|->
name|palette
operator|.
name|mid
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
block|}
DECL|macro|CMID
define|#
directive|define
name|CMID
value|*cols[(colspec>>12)& 0xf]
DECL|macro|CLEFT
define|#
directive|define
name|CLEFT
value|*cols[(colspec>>8)& 0xf]
DECL|macro|CTOP
define|#
directive|define
name|CTOP
value|*cols[(colspec>>4)& 0xf]
DECL|macro|CBOT
define|#
directive|define
name|CBOT
value|*cols[colspec& 0xf]
name|QPen
name|savePen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
name|QBrush
name|saveBrush
init|=
name|p
operator|->
name|brush
argument_list|()
decl_stmt|;
name|QPen
name|pen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
decl_stmt|;
name|QBrush
name|brush
init|=
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|?
name|QPalette
operator|::
name|Button
else|:
name|QPalette
operator|::
name|Mid
argument_list|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolygon
argument_list|(
name|bFill
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|CLEFT
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|bLeft
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|CTOP
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|bTop
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|CBOT
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|bBot
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|saveBrush
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|savePen
argument_list|)
expr_stmt|;
DECL|macro|CMID
undef|#
directive|undef
name|CMID
DECL|macro|CLEFT
undef|#
directive|undef
name|CLEFT
DECL|macro|CTOP
undef|#
directive|undef
name|CTOP
DECL|macro|CBOT
undef|#
directive|undef
name|CBOT
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_DitherDisabledText
argument_list|)
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|QBrush
argument_list|(
name|p
operator|->
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense5Pattern
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorDockWidgetResizeHandle
case|:
block|{
specifier|const
name|int
name|motifOffset
init|=
literal|10
decl_stmt|;
name|int
name|sw
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SplitterWidth
argument_list|)
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
name|int
name|yPos
init|=
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
decl_stmt|;
name|int
name|kPos
init|=
name|opt
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
name|motifOffset
operator|-
name|sw
decl_stmt|;
name|int
name|kSize
init|=
name|sw
operator|-
literal|2
decl_stmt|;
name|qDrawShadeLine
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|yPos
argument_list|,
name|kPos
argument_list|,
name|yPos
argument_list|,
name|opt
operator|->
name|palette
argument_list|)
expr_stmt|;
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|kPos
argument_list|,
name|yPos
operator|-
name|sw
operator|/
literal|2
operator|+
literal|1
argument_list|,
name|kSize
argument_list|,
name|kSize
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|qDrawShadeLine
argument_list|(
name|p
argument_list|,
name|kPos
operator|+
name|kSize
operator|-
literal|1
argument_list|,
name|yPos
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|yPos
argument_list|,
name|opt
operator|->
name|palette
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|xPos
init|=
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|int
name|kPos
init|=
name|motifOffset
decl_stmt|;
name|int
name|kSize
init|=
name|sw
operator|-
literal|2
decl_stmt|;
name|qDrawShadeLine
argument_list|(
name|p
argument_list|,
name|xPos
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
name|kPos
operator|+
name|kSize
operator|-
literal|1
argument_list|,
name|xPos
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|bottom
argument_list|()
argument_list|,
name|opt
operator|->
name|palette
argument_list|)
expr_stmt|;
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|xPos
operator|-
name|sw
operator|/
literal|2
operator|+
literal|1
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
name|kPos
argument_list|,
name|kSize
argument_list|,
name|kSize
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|qDrawShadeLine
argument_list|(
name|p
argument_list|,
name|xPos
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|xPos
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
name|kPos
argument_list|,
name|opt
operator|->
name|palette
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|PE_IndicatorMenuCheckMark
case|:
block|{
specifier|const
name|int
name|markW
init|=
literal|6
decl_stmt|;
specifier|const
name|int
name|markH
init|=
literal|6
decl_stmt|;
name|int
name|posX
init|=
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
operator|(
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|markW
operator|)
operator|/
literal|2
operator|-
literal|1
decl_stmt|;
name|int
name|posY
init|=
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
operator|(
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|markH
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|dfw
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfw
operator|<
literal|2
condition|)
block|{
comment|// Could do with some optimizing/caching...
name|QPolygon
name|a
argument_list|(
literal|7
operator|*
literal|2
argument_list|)
decl_stmt|;
name|int
name|i
decl_stmt|,
name|xx
decl_stmt|,
name|yy
decl_stmt|;
name|xx
operator|=
name|posX
expr_stmt|;
name|yy
operator|=
literal|3
operator|+
name|posY
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|a
operator|.
name|setPoint
argument_list|(
literal|2
operator|*
name|i
argument_list|,
name|xx
argument_list|,
name|yy
argument_list|)
expr_stmt|;
name|a
operator|.
name|setPoint
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|,
name|xx
argument_list|,
name|yy
operator|+
literal|2
argument_list|)
expr_stmt|;
name|xx
operator|++
expr_stmt|;
name|yy
operator|++
expr_stmt|;
block|}
name|yy
operator|-=
literal|2
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|3
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|a
operator|.
name|setPoint
argument_list|(
literal|2
operator|*
name|i
argument_list|,
name|xx
argument_list|,
name|yy
argument_list|)
expr_stmt|;
name|a
operator|.
name|setPoint
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|,
name|xx
argument_list|,
name|yy
operator|+
literal|2
argument_list|)
expr_stmt|;
name|xx
operator|++
expr_stmt|;
name|yy
operator|--
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|&&
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_On
operator|)
condition|)
block|{
name|int
name|pnt
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|offset
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|pnt
operator|=
literal|0
init|;
name|pnt
operator|<
operator|(
name|int
operator|)
name|a
operator|.
name|size
argument_list|()
condition|;
name|pnt
operator|++
control|)
name|a
index|[
name|pnt
index|]
operator|+=
name|offset
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|a
argument_list|)
expr_stmt|;
for|for
control|(
name|pnt
operator|=
literal|0
init|;
name|pnt
operator|<
operator|(
name|int
operator|)
name|a
operator|.
name|size
argument_list|()
condition|;
name|pnt
operator|++
control|)
name|a
index|[
name|pnt
index|]
operator|-=
name|offset
expr_stmt|;
block|}
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolyline
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|posX
operator|-
literal|2
argument_list|,
name|posY
operator|-
literal|2
argument_list|,
name|markW
operator|+
literal|4
argument_list|,
name|markH
operator|+
literal|6
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
name|dfw
argument_list|)
expr_stmt|;
block|}
else|else
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|posX
argument_list|,
name|posY
argument_list|,
name|markW
argument_list|,
name|markH
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
name|dfw
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Mid
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_IndicatorProgressChunk
case|:
block|{
name|bool
name|vertical
init|=
literal|false
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|pb2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
name|vertical
operator|=
operator|(
name|pb2
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|vertical
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|drawControl
name|void
name|QMotifStyle
operator|::
name|drawControl
parameter_list|(
name|ControlElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|CE_Splitter
case|:
block|{
name|QStyleOption
name|handleOpt
init|=
operator|*
name|opt
decl_stmt|;
if|if
condition|(
name|handleOpt
operator|.
name|state
operator|&
name|State_Horizontal
condition|)
name|handleOpt
operator|.
name|state
operator|&=
operator|~
name|State_Horizontal
expr_stmt|;
else|else
name|handleOpt
operator|.
name|state
operator||=
name|State_Horizontal
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorDockWidgetResizeHandle
argument_list|,
operator|&
name|handleOpt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CE_ScrollBarSubLine
case|:
case|case
name|CE_ScrollBarAddLine
case|:
block|{
name|PrimitiveElement
name|pe
decl_stmt|;
if|if
condition|(
name|element
operator|==
name|CE_ScrollBarAddLine
condition|)
name|pe
operator|=
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Horizontal
operator|)
condition|?
operator|(
name|opt
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
name|PE_IndicatorArrowRight
else|:
name|PE_IndicatorArrowLeft
operator|)
else|:
name|PE_IndicatorArrowDown
expr_stmt|;
else|else
name|pe
operator|=
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Horizontal
operator|)
condition|?
operator|(
name|opt
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
name|PE_IndicatorArrowLeft
else|:
name|PE_IndicatorArrowRight
operator|)
else|:
name|PE_IndicatorArrowUp
expr_stmt|;
name|QStyleOption
name|arrowOpt
init|=
operator|*
name|opt
decl_stmt|;
name|arrowOpt
operator|.
name|state
operator||=
name|State_Enabled
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|arrowOpt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_DitherDisabledText
argument_list|)
condition|)
block|{
name|int
name|fw
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|p
operator|->
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense5Pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CE_ScrollBarSubPage
case|:
case|case
name|CE_ScrollBarAddPage
case|:
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|?
name|QPalette
operator|::
name|Mid
else|:
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CE_ScrollBarSlider
case|:
block|{
name|QStyleOption
name|bevelOpt
init|=
operator|*
name|opt
decl_stmt|;
name|bevelOpt
operator|.
name|state
operator||=
name|State_Raised
expr_stmt|;
name|bevelOpt
operator|.
name|state
operator|&=
operator|~
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
expr_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setBrushOrigin
argument_list|(
name|bevelOpt
operator|.
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_PanelButtonBevel
argument_list|,
operator|&
name|bevelOpt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_DitherDisabledText
argument_list|)
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|QBrush
argument_list|(
name|p
operator|->
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense5Pattern
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CE_RadioButton
case|:
case|case
name|CE_CheckBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|bool
name|isRadio
init|=
operator|(
name|element
operator|==
name|CE_RadioButton
operator|)
decl_stmt|;
name|QStyleOptionButton
name|subopt
init|=
operator|*
name|btn
decl_stmt|;
name|subopt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonIndicator
else|:
name|SE_CheckBoxIndicator
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|isRadio
condition|?
name|PE_IndicatorRadioButton
else|:
name|PE_IndicatorCheckBox
argument_list|,
operator|&
name|subopt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|subopt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonContents
else|:
name|SE_CheckBoxContents
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|isRadio
condition|?
name|CE_RadioButtonLabel
else|:
name|CE_CheckBoxLabel
argument_list|,
operator|&
name|subopt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|btn
operator|->
name|state
operator|&
name|State_HasFocus
operator|)
operator|&&
operator|(
operator|!
name|focus
operator|||
operator|!
name|focus
operator|->
name|isVisible
argument_list|()
operator|)
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|btn
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonFocusRect
else|:
name|SE_CheckBoxFocusRect
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fropt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CE_PushButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|CE_PushButtonBevel
argument_list|,
name|btn
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QStyleOptionButton
name|subopt
init|=
operator|*
name|btn
decl_stmt|;
name|subopt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|SE_PushButtonContents
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|CE_PushButtonLabel
argument_list|,
operator|&
name|subopt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|btn
operator|->
name|state
operator|&
name|State_HasFocus
operator|)
operator|&&
operator|(
operator|!
name|focus
operator|||
operator|!
name|focus
operator|->
name|isVisible
argument_list|()
operator|)
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|btn
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|SE_PushButtonFocusRect
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fropt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CE_PushButtonBevel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|int
name|diw
decl_stmt|,
name|x1
decl_stmt|,
name|y1
decl_stmt|,
name|x2
decl_stmt|,
name|y2
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|QBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoBrush
argument_list|)
argument_list|)
expr_stmt|;
name|diw
operator|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ButtonDefaultIndicator
argument_list|)
expr_stmt|;
name|opt
operator|->
name|rect
operator|.
name|getCoords
argument_list|(
operator|&
name|x1
argument_list|,
operator|&
name|y1
argument_list|,
operator|&
name|x2
argument_list|,
operator|&
name|y2
argument_list|)
expr_stmt|;
if|if
condition|(
name|btn
operator|->
name|features
operator|&
operator|(
name|QStyleOptionButton
operator|::
name|AutoDefaultButton
operator||
name|QStyleOptionButton
operator|::
name|DefaultButton
operator|)
condition|)
block|{
name|x1
operator|+=
name|diw
expr_stmt|;
name|y1
operator|+=
name|diw
expr_stmt|;
name|x2
operator|-=
name|diw
expr_stmt|;
name|y2
operator|-=
name|diw
expr_stmt|;
block|}
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|DefaultButton
condition|)
block|{
if|if
condition|(
name|diw
operator|==
literal|0
condition|)
block|{
name|QPolygon
name|a
decl_stmt|;
name|a
operator|.
name|setPoints
argument_list|(
literal|9
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|x1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|,
name|x2
operator|-
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
literal|1
argument_list|,
name|x1
operator|+
literal|1
argument_list|,
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolygon
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|x1
operator|+=
literal|2
expr_stmt|;
name|y1
operator|+=
literal|2
expr_stmt|;
name|x2
operator|-=
literal|2
expr_stmt|;
name|y2
operator|-=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|Flat
operator|)
operator|||
operator|(
name|btn
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
operator|)
condition|)
block|{
name|QStyleOptionButton
name|newOpt
init|=
operator|*
name|btn
decl_stmt|;
name|newOpt
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
operator|-
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
name|y1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrushOrigin
argument_list|(
name|p
operator|->
name|brushOrigin
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_PanelButtonCommand
argument_list|,
operator|&
name|newOpt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|HasMenu
condition|)
block|{
name|int
name|mbi
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_MenuButtonIndicator
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|ir
init|=
name|btn
operator|->
name|rect
decl_stmt|;
name|QStyleOptionButton
name|newBtn
init|=
operator|*
name|btn
decl_stmt|;
name|newBtn
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|ir
operator|.
name|right
argument_list|()
operator|-
name|mbi
operator|-
literal|3
argument_list|,
name|ir
operator|.
name|y
argument_list|()
operator|+
literal|4
argument_list|,
name|mbi
argument_list|,
name|ir
operator|.
name|height
argument_list|()
operator|-
literal|8
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|newBtn
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|CE_TabBarTabShape
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
specifier|const
name|int
name|default_frame
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|tab
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|int
name|frame_offset
init|=
operator|(
name|default_frame
operator|>
literal|1
operator|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedNorth
operator|||
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedEast
operator|||
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedSouth
operator|||
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedWest
condition|)
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|QRect
name|tabRect
init|=
name|opt
operator|->
name|rect
decl_stmt|;
name|QColor
name|tabLight
init|=
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|QColor
name|tabDark
init|=
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|default_frame
argument_list|,
name|default_frame
argument_list|,
operator|-
name|default_frame
argument_list|,
operator|-
name|default_frame
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedWest
condition|)
block|{
name|tabDark
operator|=
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|tabLight
operator|=
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|tabRect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|tabRect
operator|.
name|height
argument_list|()
argument_list|,
name|tabRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedSouth
condition|)
block|{
name|tabDark
operator|=
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|tabLight
operator|=
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|tabRect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|tabRect
operator|.
name|width
argument_list|()
argument_list|,
name|tabRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|rotate
argument_list|(
literal|180
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedEast
condition|)
block|{
name|tabRect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|tabRect
operator|.
name|height
argument_list|()
argument_list|,
name|tabRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|rotate
argument_list|(
literal|90
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|default_frame
operator|>
literal|1
condition|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|tabLight
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|tabRect
operator|.
name|left
argument_list|()
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
argument_list|,
name|tabRect
operator|.
name|right
argument_list|()
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|tabLight
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|tabRect
operator|.
name|left
argument_list|()
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|,
name|tabRect
operator|.
name|right
argument_list|()
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabRect
operator|.
name|left
argument_list|()
operator|==
literal|0
condition|)
name|p
operator|->
name|drawPoint
argument_list|(
name|tabRect
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|setPen
argument_list|(
name|tabLight
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|tabRect
operator|.
name|left
argument_list|()
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
argument_list|,
name|tabRect
operator|.
name|right
argument_list|()
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Selected
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|tabRect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
operator|-
name|frame_offset
argument_list|,
name|tabRect
operator|.
name|width
argument_list|()
operator|-
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|,
name|tab
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Background
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|tab
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|tabRect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
argument_list|,
name|tabRect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|tabRect
operator|.
name|top
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|tabLight
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|setPen
argument_list|(
name|tabLight
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|drawLine
argument_list|(
name|tabRect
operator|.
name|left
argument_list|()
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|,
name|tabRect
operator|.
name|left
argument_list|()
argument_list|,
name|tabRect
operator|.
name|top
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|tabRect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|tabRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|tabRect
operator|.
name|left
argument_list|()
operator|+
literal|2
argument_list|,
name|tabRect
operator|.
name|top
argument_list|()
argument_list|,
name|tabRect
operator|.
name|right
argument_list|()
operator|-
literal|2
argument_list|,
name|tabRect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|tabRect
operator|.
name|left
argument_list|()
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|default_frame
operator|>
literal|1
condition|)
block|{
name|p
operator|->
name|drawLine
argument_list|(
name|tabRect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
argument_list|,
name|tabRect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|tabRect
operator|.
name|top
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|tabRect
operator|.
name|left
argument_list|()
operator|+
literal|2
argument_list|,
name|tabRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|,
name|tabRect
operator|.
name|right
argument_list|()
operator|-
literal|2
argument_list|,
name|tabRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|setPen
argument_list|(
name|tabDark
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|tabRect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|tabRect
operator|.
name|top
argument_list|()
operator|+
literal|2
argument_list|,
name|tabRect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
operator|+
operator|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Selected
operator|)
condition|?
name|frame_offset
else|:
operator|-
name|frame_offset
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|default_frame
operator|>
literal|1
condition|)
block|{
name|p
operator|->
name|drawPoint
argument_list|(
name|tabRect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|tabRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|tabRect
operator|.
name|right
argument_list|()
argument_list|,
name|tabRect
operator|.
name|top
argument_list|()
operator|+
literal|2
argument_list|,
name|tabRect
operator|.
name|right
argument_list|()
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
operator|-
operator|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Selected
operator|)
condition|?
operator|(
operator|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|End
operator|)
condition|?
literal|0
else|:
literal|1
operator|)
else|:
literal|1
operator|+
name|frame_offset
operator|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPoint
argument_list|(
name|tabRect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|tabRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_TABBAR
case|case
name|CE_ProgressBarGroove
case|:
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|CE_ProgressBarLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|pb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QTransform
name|oldMatrix
init|=
name|p
operator|->
name|transform
argument_list|()
decl_stmt|;
name|QRect
name|rect
init|=
name|pb
operator|->
name|rect
decl_stmt|;
name|bool
name|vertical
init|=
literal|false
decl_stmt|;
name|bool
name|invert
init|=
literal|false
decl_stmt|;
name|bool
name|bottomToTop
init|=
literal|false
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|pb2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|vertical
operator|=
operator|(
name|pb2
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
expr_stmt|;
name|invert
operator|=
name|pb2
operator|->
name|invertedAppearance
expr_stmt|;
name|bottomToTop
operator|=
name|pb2
operator|->
name|bottomToTop
expr_stmt|;
block|}
if|if
condition|(
name|vertical
condition|)
block|{
name|QTransform
name|m
decl_stmt|;
name|rect
operator|=
name|QRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
comment|// flip width and height
if|if
condition|(
name|bottomToTop
condition|)
block|{
name|m
operator|.
name|translate
argument_list|(
literal|0.0
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|height
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|m
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|setTransform
argument_list|(
name|m
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|const
name|int
name|unit_width
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ProgressBarChunkWidth
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|u
init|=
name|rect
operator|.
name|width
argument_list|()
operator|/
name|unit_width
decl_stmt|;
name|int
name|p_v
init|=
name|pb
operator|->
name|progress
operator|-
name|pb
operator|->
name|minimum
decl_stmt|;
name|int
name|t_s
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|pb
operator|->
name|maximum
operator|-
name|pb
operator|->
name|minimum
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|>
literal|0
operator|&&
name|pb
operator|->
name|progress
operator|>=
name|INT_MAX
operator|/
name|u
operator|&&
name|t_s
operator|>=
name|u
condition|)
block|{
comment|// scale down to something usable.
name|p_v
operator|/=
name|u
expr_stmt|;
name|t_s
operator|/=
name|u
expr_stmt|;
block|}
if|if
condition|(
name|pb
operator|->
name|textVisible
operator|&&
name|t_s
condition|)
block|{
name|int
name|nu
init|=
operator|(
name|u
operator|*
name|p_v
operator|+
name|t_s
operator|/
literal|2
operator|)
operator|/
name|t_s
decl_stmt|;
name|int
name|x
init|=
name|unit_width
operator|*
name|nu
decl_stmt|;
name|QRect
name|left
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|x
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|right
argument_list|(
name|rect
operator|.
name|x
argument_list|()
operator|+
name|x
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
operator|-
name|x
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|LayoutDirection
name|dir
decl_stmt|;
name|dir
operator|=
name|vertical
condition|?
operator|(
name|bottomToTop
condition|?
name|Qt
operator|::
name|LeftToRight
else|:
name|Qt
operator|::
name|RightToLeft
operator|)
else|:
name|pb
operator|->
name|direction
expr_stmt|;
if|if
condition|(
name|invert
condition|)
name|dir
operator|=
operator|(
name|dir
operator|==
name|Qt
operator|::
name|LeftToRight
operator|)
condition|?
name|Qt
operator|::
name|RightToLeft
else|:
name|Qt
operator|::
name|LeftToRight
expr_stmt|;
specifier|const
name|QRect
name|highlighted
init|=
name|visualRect
argument_list|(
name|dir
argument_list|,
name|rect
argument_list|,
name|left
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|background
init|=
name|visualRect
argument_list|(
name|dir
argument_list|,
name|rect
argument_list|,
name|right
argument_list|)
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setClipRect
argument_list|(
name|highlighted
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawText
argument_list|(
name|rect
argument_list|,
name|Qt
operator|::
name|AlignCenter
operator||
name|Qt
operator|::
name|TextSingleLine
argument_list|,
name|pb
operator|->
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|pb
operator|->
name|progress
operator|!=
name|pb
operator|->
name|maximum
condition|)
block|{
name|p
operator|->
name|setClipRect
argument_list|(
name|background
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawText
argument_list|(
name|rect
argument_list|,
name|Qt
operator|::
name|AlignCenter
operator||
name|Qt
operator|::
name|TextSingleLine
argument_list|,
name|pb
operator|->
name|text
argument_list|)
expr_stmt|;
block|}
block|}
name|p
operator|->
name|setTransform
argument_list|(
name|oldMatrix
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CE_MenuTearoff
case|:
block|{
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Selected
condition|)
block|{
if|if
condition|(
name|pixelMetric
argument_list|(
name|PM_MenuPanelWidth
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
operator|>
literal|1
condition|)
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
name|motifItemFrame
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|DashLine
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
literal|1
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|4
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|DashLine
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|4
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CE_MenuItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|menuitem
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|int
name|maxpmw
init|=
name|menuitem
operator|->
name|maxIconWidth
decl_stmt|;
if|if
condition|(
name|menuitem
operator|->
name|menuHasCheckableItems
condition|)
name|maxpmw
operator|=
name|qMax
argument_list|(
name|maxpmw
argument_list|,
name|motifCheckMarkSpace
argument_list|)
expr_stmt|;
name|int
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
name|opt
operator|->
name|rect
operator|.
name|getRect
argument_list|(
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|Separator
condition|)
block|{
comment|// draw separator
name|int
name|textWidth
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|menuitem
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFont
name|oldFont
init|=
name|p
operator|->
name|font
argument_list|()
decl_stmt|;
name|p
operator|->
name|setFont
argument_list|(
name|menuitem
operator|->
name|font
argument_list|)
expr_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|p
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|,
operator|-
literal|5
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|,
name|menuitem
operator|->
name|palette
argument_list|,
name|menuitem
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|menuitem
operator|->
name|text
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
expr_stmt|;
name|textWidth
operator|=
name|menuitem
operator|->
name|fontMetrics
operator|.
name|width
argument_list|(
name|menuitem
operator|->
name|text
argument_list|)
operator|+
literal|10
expr_stmt|;
name|y
operator|+=
name|menuitem
operator|->
name|fontMetrics
operator|.
name|height
argument_list|()
operator|/
literal|2
expr_stmt|;
name|p
operator|->
name|setFont
argument_list|(
name|oldFont
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|x
operator|+
literal|5
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x
operator|+
literal|5
operator|+
name|textWidth
argument_list|,
name|y
argument_list|,
name|x
operator|+
name|w
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x
argument_list|,
name|y
operator|+
literal|1
argument_list|,
name|x
operator|+
literal|5
argument_list|,
name|y
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x
operator|+
literal|5
operator|+
name|textWidth
argument_list|,
name|y
operator|+
literal|1
argument_list|,
name|x
operator|+
name|w
argument_list|,
name|y
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|pw
init|=
name|motifItemFrame
decl_stmt|;
if|if
condition|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Selected
operator|)
operator|&&
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
block|{
comment|// active item frame
if|if
condition|(
name|pixelMetric
argument_list|(
name|PM_MenuPanelWidth
argument_list|,
name|opt
argument_list|)
operator|>
literal|1
condition|)
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
name|pw
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|x
operator|+
literal|1
argument_list|,
name|y
operator|+
literal|1
argument_list|,
name|w
operator|-
literal|2
argument_list|,
name|h
operator|-
literal|2
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// incognito frame
name|p
operator|->
name|fillRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QRect
name|vrect
init|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|x
operator|+
name|motifItemFrame
argument_list|,
name|y
operator|+
name|motifItemFrame
argument_list|,
name|maxpmw
argument_list|,
name|h
operator|-
literal|2
operator|*
name|motifItemFrame
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|xvis
init|=
name|vrect
operator|.
name|x
argument_list|()
decl_stmt|;
if|if
condition|(
name|menuitem
operator|->
name|checked
condition|)
block|{
if|if
condition|(
operator|!
name|menuitem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|xvis
argument_list|,
name|y
operator|+
name|motifItemFrame
argument_list|,
name|maxpmw
argument_list|,
name|h
operator|-
literal|2
operator|*
name|motifItemFrame
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Selected
operator|)
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|xvis
argument_list|,
name|y
operator|+
name|motifItemFrame
argument_list|,
name|maxpmw
argument_list|,
name|h
operator|-
literal|2
operator|*
name|motifItemFrame
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|menuitem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// draw icon
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|QIcon
operator|::
name|Normal
decl_stmt|;
comment|// no disabled icons in Motif
if|if
condition|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Selected
operator|)
operator|&&
operator|!
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|mode
operator|=
name|QIcon
operator|::
name|Active
expr_stmt|;
name|QPixmap
name|pixmap
decl_stmt|;
if|if
condition|(
name|menuitem
operator|->
name|checkType
operator|!=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
operator|&&
name|menuitem
operator|->
name|checked
condition|)
name|pixmap
operator|=
name|menuitem
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
argument_list|,
name|mode
argument_list|,
name|QIcon
operator|::
name|On
argument_list|)
expr_stmt|;
else|else
name|pixmap
operator|=
name|menuitem
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|int
name|pixw
init|=
name|pixmap
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|pixh
init|=
name|pixmap
operator|.
name|height
argument_list|()
decl_stmt|;
name|QRect
name|pmr
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pixw
argument_list|,
name|pixh
argument_list|)
decl_stmt|;
name|pmr
operator|.
name|moveCenter
argument_list|(
name|vrect
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPixmap
argument_list|(
name|pmr
operator|.
name|topLeft
argument_list|()
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|menuitem
operator|->
name|checkType
operator|!=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
condition|)
block|{
comment|// just "checking"...
name|int
name|mh
init|=
name|h
operator|-
literal|2
operator|*
name|motifItemFrame
decl_stmt|;
name|QStyleOptionButton
name|newMenuItem
decl_stmt|;
name|newMenuItem
operator|.
name|state
operator|=
name|menuitem
operator|->
name|checked
condition|?
name|State_On
else|:
name|State_None
expr_stmt|;
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
condition|)
block|{
name|newMenuItem
operator|.
name|state
operator||=
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|menuitem
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|newMenuItem
operator|.
name|state
operator||=
name|State_Sunken
expr_stmt|;
block|}
if|if
condition|(
name|menuitem
operator|->
name|checkType
operator|&
name|QStyleOptionMenuItem
operator|::
name|Exclusive
condition|)
block|{
name|newMenuItem
operator|.
name|rect
operator|.
name|setRect
argument_list|(
name|xvis
operator|+
literal|2
argument_list|,
name|y
operator|+
name|motifItemFrame
operator|+
name|mh
operator|/
literal|4
argument_list|,
literal|11
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorRadioButton
argument_list|,
operator|&
name|newMenuItem
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMenuItem
operator|.
name|rect
operator|.
name|setRect
argument_list|(
name|xvis
operator|+
literal|5
argument_list|,
name|y
operator|+
name|motifItemFrame
operator|+
name|mh
operator|/
literal|4
argument_list|,
literal|9
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorCheckBox
argument_list|,
operator|&
name|newMenuItem
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QColor
name|discol
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
block|{
name|discol
operator|=
name|opt
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|discol
argument_list|)
expr_stmt|;
block|}
name|int
name|xm
init|=
name|motifItemFrame
operator|+
name|maxpmw
operator|+
name|motifItemHMargin
decl_stmt|;
name|vrect
operator|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|x
operator|+
name|xm
argument_list|,
name|y
operator|+
name|motifItemVMargin
argument_list|,
name|w
operator|-
name|xm
operator|-
name|menuitem
operator|->
name|tabWidth
argument_list|,
name|h
operator|-
literal|2
operator|*
name|motifItemVMargin
argument_list|)
argument_list|)
expr_stmt|;
name|xvis
operator|=
name|vrect
operator|.
name|x
argument_list|()
expr_stmt|;
name|QString
name|s
init|=
name|menuitem
operator|->
name|text
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// draw text
name|int
name|t
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|m
init|=
name|motifItemVMargin
decl_stmt|;
name|int
name|text_flags
init|=
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|TextDontClip
operator||
name|Qt
operator|::
name|TextSingleLine
decl_stmt|;
name|text_flags
operator||=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
name|QFont
name|oldFont
init|=
name|p
operator|->
name|font
argument_list|()
decl_stmt|;
name|p
operator|->
name|setFont
argument_list|(
name|menuitem
operator|->
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|>=
literal|0
condition|)
block|{
comment|// draw tab text
name|QRect
name|vr
init|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|x
operator|+
name|w
operator|-
name|menuitem
operator|->
name|tabWidth
operator|-
name|motifItemHMargin
operator|-
name|motifItemFrame
argument_list|,
name|y
operator|+
name|motifItemVMargin
argument_list|,
name|menuitem
operator|->
name|tabWidth
argument_list|,
name|h
operator|-
literal|2
operator|*
name|motifItemVMargin
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|xv
init|=
name|vr
operator|.
name|x
argument_list|()
decl_stmt|;
name|QRect
name|tr
argument_list|(
name|xv
argument_list|,
name|y
operator|+
name|m
argument_list|,
name|menuitem
operator|->
name|tabWidth
argument_list|,
name|h
operator|-
literal|2
operator|*
name|m
argument_list|)
decl_stmt|;
name|p
operator|->
name|drawText
argument_list|(
name|tr
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|mid
argument_list|(
name|t
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_DitherDisabledText
argument_list|)
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|tr
argument_list|,
name|QBrush
argument_list|(
name|p
operator|->
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense5Pattern
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|QRect
name|tr
argument_list|(
name|xvis
argument_list|,
name|y
operator|+
name|m
argument_list|,
name|w
operator|-
name|xm
operator|-
name|menuitem
operator|->
name|tabWidth
operator|+
literal|1
argument_list|,
name|h
operator|-
literal|2
operator|*
name|m
argument_list|)
decl_stmt|;
name|p
operator|->
name|drawText
argument_list|(
name|tr
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setFont
argument_list|(
name|oldFont
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_DitherDisabledText
argument_list|)
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|tr
argument_list|,
name|QBrush
argument_list|(
name|p
operator|->
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense5Pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|SubMenu
condition|)
block|{
comment|// draw sub menu arrow
name|int
name|dim
init|=
operator|(
name|h
operator|-
literal|2
operator|*
name|motifItemFrame
operator|)
operator|/
literal|2
decl_stmt|;
name|QStyle
operator|::
name|PrimitiveElement
name|arrow
init|=
operator|(
name|opt
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|?
name|PE_IndicatorArrowLeft
else|:
name|PE_IndicatorArrowRight
operator|)
decl_stmt|;
name|QStyleOption
name|arrowOpt
init|=
operator|*
name|opt
decl_stmt|;
name|arrowOpt
operator|.
name|rect
operator|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|x
operator|+
name|w
operator|-
name|motifArrowHMargin
operator|-
name|motifItemFrame
operator|-
name|dim
argument_list|,
name|y
operator|+
name|h
operator|/
literal|2
operator|-
name|dim
operator|/
literal|2
argument_list|,
name|dim
argument_list|,
name|dim
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Selected
operator|)
condition|)
name|arrowOpt
operator|.
name|state
operator|=
operator|(
name|State_Sunken
operator||
operator|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|?
name|State_Enabled
else|:
name|State_None
operator|)
operator|)
expr_stmt|;
else|else
name|arrowOpt
operator|.
name|state
operator|=
operator|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|?
name|State_Enabled
else|:
name|State_None
operator|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|arrow
argument_list|,
operator|&
name|arrowOpt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|CE_MenuBarItem
case|:
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Selected
condition|)
comment|// active item
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
name|motifItemFrame
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
else|else
comment|// other item
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|CE_HeaderSection
case|:
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setBrushOrigin
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
name|bool
argument_list|(
name|opt
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|)
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|?
name|QPalette
operator|::
name|Mid
else|:
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
case|case
name|CE_RubberBand
case|:
block|{
name|QPixmap
name|tiledPixmap
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|QPainter
name|pixmapPainter
argument_list|(
operator|&
name|tiledPixmap
argument_list|)
decl_stmt|;
name|pixmapPainter
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|pixmapPainter
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
name|pixmapPainter
operator|.
name|setBackground
argument_list|(
name|QBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|base
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pixmapPainter
operator|.
name|setBackgroundMode
argument_list|(
name|Qt
operator|::
name|OpaqueMode
argument_list|)
expr_stmt|;
name|pixmapPainter
operator|.
name|drawRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|tiledPixmap
operator|.
name|width
argument_list|()
argument_list|,
name|tiledPixmap
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|pixmapPainter
operator|.
name|end
argument_list|()
expr_stmt|;
comment|// ### workaround for borked XRENDER
name|tiledPixmap
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|tiledPixmap
operator|.
name|toImage
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|QRect
name|r
init|=
name|opt
operator|->
name|rect
decl_stmt|;
name|QStyleHintReturnMask
name|mask
decl_stmt|;
if|if
condition|(
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_RubberBand_Mask
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|,
operator|&
name|mask
argument_list|)
condition|)
name|p
operator|->
name|setClipRegion
argument_list|(
name|mask
operator|.
name|region
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawTiledPixmap
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|tiledPixmap
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
case|case
name|CE_ProgressBarContents
case|:
if|if
condition|(
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|pb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRect
name|rect
init|=
name|pb
operator|->
name|rect
decl_stmt|;
name|bool
name|vertical
init|=
literal|false
decl_stmt|;
name|bool
name|inverted
init|=
literal|false
decl_stmt|;
comment|// Get extra style options if version 2
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|pb2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
decl_stmt|;
if|if
condition|(
name|pb2
condition|)
block|{
name|vertical
operator|=
operator|(
name|pb2
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
expr_stmt|;
name|inverted
operator|=
name|pb2
operator|->
name|invertedAppearance
expr_stmt|;
block|}
name|QTransform
name|m
decl_stmt|;
if|if
condition|(
name|vertical
condition|)
block|{
name|rect
operator|=
name|QRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
comment|// flip width and height
name|m
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
expr_stmt|;
name|m
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|-
operator|(
name|rect
operator|.
name|height
argument_list|()
operator|+
name|rect
operator|.
name|y
argument_list|()
operator|*
literal|2
operator|)
argument_list|)
expr_stmt|;
block|}
name|QPalette
name|pal2
init|=
name|pb
operator|->
name|palette
decl_stmt|;
comment|// Correct the highlight color if it is the same as the background
if|if
condition|(
name|pal2
operator|.
name|highlight
argument_list|()
operator|==
name|pal2
operator|.
name|background
argument_list|()
condition|)
name|pal2
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|pb
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|reverse
init|=
operator|(
operator|(
operator|!
name|vertical
operator|&&
operator|(
name|pb
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
operator|)
operator|||
name|vertical
operator|)
decl_stmt|;
if|if
condition|(
name|inverted
condition|)
name|reverse
operator|=
operator|!
name|reverse
expr_stmt|;
name|int
name|w
init|=
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|pb
operator|->
name|minimum
operator|==
literal|0
operator|&&
name|pb
operator|->
name|maximum
operator|==
literal|0
condition|)
block|{
name|QRect
name|progressBar
decl_stmt|;
name|Q_D
argument_list|(
specifier|const
name|QMotifStyle
argument_list|)
expr_stmt|;
comment|// draw busy indicator
name|int
name|x
init|=
operator|(
name|d
operator|->
name|animateStep
operator|*
literal|8
operator|)
operator|%
operator|(
name|w
operator|*
literal|2
operator|)
decl_stmt|;
if|if
condition|(
name|x
operator|>
name|w
condition|)
name|x
operator|=
literal|2
operator|*
name|w
operator|-
name|x
expr_stmt|;
name|x
operator|=
name|reverse
condition|?
name|rect
operator|.
name|right
argument_list|()
operator|-
name|x
else|:
name|x
operator|+
name|rect
operator|.
name|x
argument_list|()
expr_stmt|;
name|p
operator|->
name|setTransform
argument_list|(
name|m
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|pal2
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|x
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|x
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_PROGRESSBAR
default|default:
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|get_combo_extra_width
specifier|static
name|int
name|get_combo_extra_width
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|w
parameter_list|,
name|int
modifier|*
name|return_awh
init|=
literal|0
parameter_list|)
block|{
name|int
name|awh
decl_stmt|,
name|tmp
decl_stmt|;
if|if
condition|(
name|h
operator|<
literal|8
condition|)
block|{
name|awh
operator|=
literal|6
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|h
operator|<
literal|14
condition|)
block|{
name|awh
operator|=
name|h
operator|-
literal|2
expr_stmt|;
block|}
else|else
block|{
name|awh
operator|=
name|h
operator|/
literal|2
expr_stmt|;
block|}
name|tmp
operator|=
operator|(
name|awh
operator|*
literal|3
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|tmp
operator|>
name|w
operator|/
literal|2
condition|)
block|{
name|awh
operator|=
name|w
operator|/
literal|2
operator|-
literal|3
expr_stmt|;
name|tmp
operator|=
name|w
operator|/
literal|2
operator|+
literal|3
expr_stmt|;
block|}
if|if
condition|(
name|return_awh
condition|)
operator|*
name|return_awh
operator|=
name|awh
expr_stmt|;
return|return
name|tmp
return|;
block|}
end_function
begin_function
DECL|function|get_combo_parameters
specifier|static
name|void
name|get_combo_parameters
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|,
name|int
modifier|&
name|ew
parameter_list|,
name|int
modifier|&
name|awh
parameter_list|,
name|int
modifier|&
name|ax
parameter_list|,
name|int
modifier|&
name|ay
parameter_list|,
name|int
modifier|&
name|sh
parameter_list|,
name|int
modifier|&
name|dh
parameter_list|,
name|int
modifier|&
name|sy
parameter_list|)
block|{
name|ew
operator|=
name|get_combo_extra_width
argument_list|(
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
operator|&
name|awh
argument_list|)
expr_stmt|;
name|sh
operator|=
operator|(
name|awh
operator|+
literal|3
operator|)
operator|/
literal|4
expr_stmt|;
if|if
condition|(
name|sh
operator|<
literal|3
condition|)
name|sh
operator|=
literal|3
expr_stmt|;
name|dh
operator|=
name|sh
operator|/
literal|2
operator|+
literal|1
expr_stmt|;
name|ay
operator|=
name|r
operator|.
name|y
argument_list|()
operator|+
operator|(
name|r
operator|.
name|height
argument_list|()
operator|-
name|awh
operator|-
name|sh
operator|-
name|dh
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|ay
operator|<
literal|0
condition|)
block|{
comment|//panic mode
name|ay
operator|=
literal|0
expr_stmt|;
name|sy
operator|=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sy
operator|=
name|ay
operator|+
name|awh
operator|+
name|dh
expr_stmt|;
block|}
name|ax
operator|=
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
operator|-
name|ew
expr_stmt|;
name|ax
operator|+=
operator|(
name|ew
operator|-
name|awh
operator|)
operator|/
literal|2
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|drawComplexControl
name|void
name|QMotifStyle
operator|::
name|drawComplexControl
parameter_list|(
name|ComplexControl
name|cc
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|cc
condition|)
block|{
case|case
name|CC_ToolButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|toolbutton
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRect
name|button
decl_stmt|,
name|menuarea
decl_stmt|;
name|button
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|toolbutton
argument_list|,
name|SC_ToolButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|menuarea
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|toolbutton
argument_list|,
name|SC_ToolButtonMenu
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|State
name|bflags
init|=
name|toolbutton
operator|->
name|state
operator|&
operator|~
name|State_Sunken
decl_stmt|;
if|if
condition|(
name|bflags
operator|&
name|State_AutoRaise
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|bflags
operator|&
name|State_MouseOver
operator|)
operator|||
operator|!
operator|(
name|bflags
operator|&
name|State_Enabled
operator|)
condition|)
block|{
name|bflags
operator|&=
operator|~
name|State_Raised
expr_stmt|;
block|}
block|}
name|State
name|mflags
init|=
name|bflags
decl_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|state
operator|&
name|State_Sunken
condition|)
block|{
if|if
condition|(
name|toolbutton
operator|->
name|activeSubControls
operator|&
name|SC_ToolButton
condition|)
name|bflags
operator||=
name|State_Sunken
expr_stmt|;
name|mflags
operator||=
name|State_Sunken
expr_stmt|;
block|}
name|QStyleOption
name|tool
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|tool
operator|.
name|palette
operator|=
name|toolbutton
operator|->
name|palette
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|subControls
operator|&
name|SC_ToolButton
condition|)
block|{
if|if
condition|(
name|bflags
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator||
name|State_Raised
operator|)
condition|)
block|{
name|tool
operator|.
name|rect
operator|=
name|button
expr_stmt|;
name|tool
operator|.
name|state
operator|=
name|bflags
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_PanelButtonTool
argument_list|,
operator|&
name|tool
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|toolbutton
operator|->
name|state
operator|&
name|State_HasFocus
operator|)
operator|&&
operator|(
operator|!
name|focus
operator|||
operator|!
name|focus
operator|->
name|isVisible
argument_list|()
operator|)
condition|)
block|{
name|QStyleOptionFocusRect
name|fr
decl_stmt|;
name|fr
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|toolbutton
argument_list|)
expr_stmt|;
name|fr
operator|.
name|rect
operator|=
name|toolbutton
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fr
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|QStyleOptionToolButton
name|label
init|=
operator|*
name|toolbutton
decl_stmt|;
name|label
operator|.
name|state
operator|=
name|bflags
expr_stmt|;
name|int
name|fw
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|label
operator|.
name|rect
operator|=
name|button
operator|.
name|adjusted
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|CE_ToolButtonLabel
argument_list|,
operator|&
name|label
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|subControls
operator|&
name|SC_ToolButtonMenu
condition|)
block|{
name|tool
operator|.
name|rect
operator|=
name|menuarea
expr_stmt|;
name|tool
operator|.
name|state
operator|=
name|mflags
expr_stmt|;
if|if
condition|(
name|mflags
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator||
name|State_Raised
operator|)
condition|)
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorButtonDropDown
argument_list|,
operator|&
name|tool
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|tool
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|toolbutton
operator|->
name|features
operator|&
name|QStyleOptionToolButton
operator|::
name|HasMenu
condition|)
block|{
name|int
name|mbi
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_MenuButtonIndicator
argument_list|,
name|toolbutton
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|ir
init|=
name|toolbutton
operator|->
name|rect
decl_stmt|;
name|QStyleOptionToolButton
name|newBtn
init|=
operator|*
name|toolbutton
decl_stmt|;
name|newBtn
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|ir
operator|.
name|right
argument_list|()
operator|+
literal|5
operator|-
name|mbi
argument_list|,
name|ir
operator|.
name|height
argument_list|()
operator|-
name|mbi
operator|+
literal|4
argument_list|,
name|mbi
operator|-
literal|6
argument_list|,
name|mbi
operator|-
literal|6
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|newBtn
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinbox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionSpinBox
name|copy
init|=
operator|*
name|spinbox
decl_stmt|;
name|PrimitiveElement
name|pe
decl_stmt|;
if|if
condition|(
name|spinbox
operator|->
name|frame
operator|&&
operator|(
name|spinbox
operator|->
name|subControls
operator|&
name|SC_SpinBoxFrame
operator|)
condition|)
block|{
name|QRect
name|r
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|spinbox
argument_list|,
name|SC_SpinBoxFrame
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|r
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|false
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|fw
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
name|r
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|spinbox
argument_list|,
name|SC_SpinBoxEditField
argument_list|,
name|widget
argument_list|)
operator|.
name|adjusted
argument_list|(
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
name|fw
argument_list|,
name|fw
argument_list|)
expr_stmt|;
name|QStyleOptionFrame
name|lineOpt
decl_stmt|;
name|lineOpt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|opt
argument_list|)
expr_stmt|;
name|lineOpt
operator|.
name|rect
operator|=
name|r
expr_stmt|;
name|lineOpt
operator|.
name|lineWidth
operator|=
name|fw
expr_stmt|;
name|lineOpt
operator|.
name|midLineWidth
operator|=
literal|0
expr_stmt|;
name|lineOpt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameLineEdit
argument_list|,
operator|&
name|lineOpt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spinbox
operator|->
name|subControls
operator|&
name|SC_SpinBoxUp
condition|)
block|{
name|copy
operator|.
name|subControls
operator|=
name|SC_SpinBoxUp
expr_stmt|;
name|QPalette
name|pal2
init|=
name|spinbox
operator|->
name|palette
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|spinbox
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepUpEnabled
operator|)
condition|)
block|{
name|pal2
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Enabled
expr_stmt|;
block|}
name|copy
operator|.
name|palette
operator|=
name|pal2
expr_stmt|;
if|if
condition|(
name|spinbox
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxUp
operator|&&
operator|(
name|spinbox
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
block|{
name|copy
operator|.
name|state
operator||=
name|State_On
expr_stmt|;
name|copy
operator|.
name|state
operator||=
name|State_Sunken
expr_stmt|;
block|}
else|else
block|{
name|copy
operator|.
name|state
operator||=
name|State_Raised
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Sunken
expr_stmt|;
block|}
name|pe
operator|=
operator|(
name|spinbox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|PlusMinus
condition|?
name|PE_IndicatorSpinPlus
else|:
name|PE_IndicatorSpinUp
operator|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|spinbox
argument_list|,
name|SC_SpinBoxUp
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|copy
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spinbox
operator|->
name|subControls
operator|&
name|SC_SpinBoxDown
condition|)
block|{
name|copy
operator|.
name|subControls
operator|=
name|SC_SpinBoxDown
expr_stmt|;
name|copy
operator|.
name|state
operator|=
name|spinbox
operator|->
name|state
expr_stmt|;
name|QPalette
name|pal2
init|=
name|spinbox
operator|->
name|palette
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|spinbox
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepDownEnabled
operator|)
condition|)
block|{
name|pal2
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Enabled
expr_stmt|;
block|}
name|copy
operator|.
name|palette
operator|=
name|pal2
expr_stmt|;
if|if
condition|(
name|spinbox
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxDown
operator|&&
operator|(
name|spinbox
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
block|{
name|copy
operator|.
name|state
operator||=
name|State_On
expr_stmt|;
name|copy
operator|.
name|state
operator||=
name|State_Sunken
expr_stmt|;
block|}
else|else
block|{
name|copy
operator|.
name|state
operator||=
name|State_Raised
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Sunken
expr_stmt|;
block|}
name|pe
operator|=
operator|(
name|spinbox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|PlusMinus
condition|?
name|PE_IndicatorSpinMinus
else|:
name|PE_IndicatorSpinDown
operator|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|spinbox
argument_list|,
name|SC_SpinBoxDown
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|copy
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SPINBOX
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|CC_Slider
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRect
name|groove
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_Slider
argument_list|,
name|opt
argument_list|,
name|SC_SliderGroove
argument_list|,
name|widget
argument_list|)
decl_stmt|,
name|handle
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_Slider
argument_list|,
name|opt
argument_list|,
name|SC_SliderHandle
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|opt
operator|->
name|subControls
operator|&
name|SC_SliderGroove
operator|)
operator|&&
name|groove
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|groove
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|?
name|QPalette
operator|::
name|Mid
else|:
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_HasFocus
operator|)
operator|&&
operator|(
operator|!
name|focus
operator|||
operator|!
name|focus
operator|->
name|isVisible
argument_list|()
operator|)
condition|)
block|{
name|QStyleOption
name|focusOpt
init|=
operator|*
name|opt
decl_stmt|;
name|focusOpt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|SE_SliderFocusRect
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|focusOpt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|opt
operator|->
name|subControls
operator|&
name|SC_SliderHandle
operator|)
operator|&&
name|handle
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QStyleOption
name|bevelOpt
init|=
operator|*
name|opt
decl_stmt|;
name|bevelOpt
operator|.
name|state
operator|=
operator|(
name|opt
operator|->
name|state
operator||
name|State_Raised
operator|)
operator|&
operator|~
name|State_Sunken
expr_stmt|;
name|bevelOpt
operator|.
name|rect
operator|=
name|handle
expr_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setBrushOrigin
argument_list|(
name|bevelOpt
operator|.
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_PanelButtonBevel
argument_list|,
operator|&
name|bevelOpt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
if|if
condition|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|int
name|mid
init|=
name|handle
operator|.
name|x
argument_list|()
operator|+
name|handle
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|qDrawShadeLine
argument_list|(
name|p
argument_list|,
name|mid
argument_list|,
name|handle
operator|.
name|y
argument_list|()
argument_list|,
name|mid
argument_list|,
name|handle
operator|.
name|y
argument_list|()
operator|+
name|handle
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|mid
init|=
name|handle
operator|.
name|y
argument_list|()
operator|+
name|handle
operator|.
name|height
argument_list|()
operator|/
literal|2
decl_stmt|;
name|qDrawShadeLine
argument_list|(
name|p
argument_list|,
name|handle
operator|.
name|x
argument_list|()
argument_list|,
name|mid
argument_list|,
name|handle
operator|.
name|x
argument_list|()
operator|+
name|handle
operator|.
name|width
argument_list|()
operator|-
literal|2
argument_list|,
name|mid
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|&&
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_DitherDisabledText
argument_list|)
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|handle
argument_list|,
name|QBrush
argument_list|(
name|p
operator|->
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense5Pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|slider
operator|->
name|subControls
operator|&
name|SC_SliderTickmarks
condition|)
block|{
name|QStyleOptionSlider
name|tmpSlider
init|=
operator|*
name|slider
decl_stmt|;
name|tmpSlider
operator|.
name|subControls
operator|=
name|SC_SliderTickmarks
expr_stmt|;
name|int
name|frameWidth
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
name|tmpSlider
operator|.
name|rect
operator|.
name|translate
argument_list|(
name|frameWidth
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|tmpSlider
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SLIDER
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|opt
operator|->
name|subControls
operator|&
name|SC_ComboBoxArrow
condition|)
block|{
name|int
name|awh
decl_stmt|,
name|ax
decl_stmt|,
name|ay
decl_stmt|,
name|sh
decl_stmt|,
name|sy
decl_stmt|,
name|dh
decl_stmt|,
name|ew
decl_stmt|;
name|int
name|fw
init|=
name|cb
operator|->
name|frame
condition|?
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ComboBoxFrameWidth
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cb
operator|->
name|frame
condition|)
block|{
name|QStyleOptionButton
name|btn
decl_stmt|;
name|btn
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|cb
argument_list|)
expr_stmt|;
name|btn
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Raised
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_PanelButtonCommand
argument_list|,
operator|&
name|btn
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QRect
name|tr
init|=
name|opt
operator|->
name|rect
decl_stmt|;
name|tr
operator|.
name|adjust
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|)
expr_stmt|;
name|get_combo_parameters
argument_list|(
name|tr
argument_list|,
name|ew
argument_list|,
name|awh
argument_list|,
name|ax
argument_list|,
name|ay
argument_list|,
name|sh
argument_list|,
name|dh
argument_list|,
name|sy
argument_list|)
expr_stmt|;
name|QRect
name|ar
init|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|ax
argument_list|,
name|ay
argument_list|,
name|awh
argument_list|,
name|awh
argument_list|)
argument_list|)
decl_stmt|;
name|QStyleOption
name|arrowOpt
init|=
operator|*
name|opt
decl_stmt|;
name|arrowOpt
operator|.
name|rect
operator|=
name|ar
expr_stmt|;
name|arrowOpt
operator|.
name|state
operator||=
name|State_Enabled
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|arrowOpt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
comment|// draws the shaded line under the arrow
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|ar
operator|.
name|x
argument_list|()
argument_list|,
name|sy
argument_list|,
name|ar
operator|.
name|x
argument_list|()
operator|+
name|awh
operator|-
literal|1
argument_list|,
name|sy
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|ar
operator|.
name|x
argument_list|()
argument_list|,
name|sy
argument_list|,
name|ar
operator|.
name|x
argument_list|()
argument_list|,
name|sy
operator|+
name|sh
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|ar
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|sy
operator|+
name|sh
operator|-
literal|1
argument_list|,
name|ar
operator|.
name|x
argument_list|()
operator|+
name|awh
operator|-
literal|1
argument_list|,
name|sy
operator|+
name|sh
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|ar
operator|.
name|x
argument_list|()
operator|+
name|awh
operator|-
literal|1
argument_list|,
name|sy
operator|+
literal|1
argument_list|,
name|ar
operator|.
name|x
argument_list|()
operator|+
name|awh
operator|-
literal|1
argument_list|,
name|sy
operator|+
name|sh
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|cb
operator|->
name|state
operator|&
name|State_HasFocus
operator|)
operator|&&
operator|(
operator|!
name|focus
operator|||
operator|!
name|focus
operator|->
name|isVisible
argument_list|()
operator|)
condition|)
block|{
name|QStyleOptionFocusRect
name|focus
decl_stmt|;
name|focus
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|opt
argument_list|)
expr_stmt|;
name|focus
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|SE_ComboBoxFocusRect
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|focus
operator|.
name|backgroundColor
operator|=
name|opt
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|focus
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|opt
operator|->
name|subControls
operator|&
name|SC_ComboBoxEditField
condition|)
block|{
if|if
condition|(
name|cb
operator|->
name|editable
condition|)
block|{
name|QRect
name|er
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|opt
argument_list|,
name|SC_ComboBoxEditField
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|er
operator|.
name|adjust
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|er
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
case|case
name|CC_ScrollBar
case|:
block|{
if|if
condition|(
name|opt
operator|->
name|subControls
operator|&
name|SC_ScrollBarGroove
condition|)
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
argument_list|,
literal|true
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
argument_list|,
operator|&
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
operator|(
name|opt
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|?
name|QPalette
operator|::
name|Mid
else|:
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|scrollbar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionSlider
name|newScrollbar
init|=
operator|*
name|scrollbar
decl_stmt|;
if|if
condition|(
name|scrollbar
operator|->
name|minimum
operator|==
name|scrollbar
operator|->
name|maximum
condition|)
name|newScrollbar
operator|.
name|state
operator||=
name|State_Enabled
expr_stmt|;
comment|// make sure that the slider is drawn.
name|QCommonStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|newScrollbar
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
endif|#
directive|endif
case|case
name|CC_Q3ListView
case|:
if|if
condition|(
name|opt
operator|->
name|subControls
operator|&
operator|(
name|SC_Q3ListViewBranch
operator||
name|SC_Q3ListViewExpand
operator|)
condition|)
block|{
name|int
name|i
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|subControls
operator|&
name|SC_Q3ListView
condition|)
name|QCommonStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionQ3ListView
modifier|*
name|lv
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionQ3ListView
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionQ3ListViewItem
name|item
init|=
name|lv
operator|->
name|items
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|c
decl_stmt|;
name|QPolygon
name|dotlines
decl_stmt|;
if|if
condition|(
operator|(
name|opt
operator|->
name|activeSubControls
operator|&
name|SC_All
operator|)
operator|&&
operator|(
name|opt
operator|->
name|subControls
operator|&
name|SC_Q3ListViewExpand
operator|)
condition|)
block|{
name|c
operator|=
literal|2
expr_stmt|;
name|dotlines
operator|.
name|resize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dotlines
index|[
literal|0
index|]
operator|=
name|QPoint
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|dotlines
index|[
literal|1
index|]
operator|=
name|QPoint
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|linetop
init|=
literal|0
decl_stmt|,
name|linebot
init|=
literal|0
decl_stmt|;
comment|// each branch needs at most two lines, ie. four end points
name|dotlines
operator|.
name|resize
argument_list|(
name|item
operator|.
name|childCount
operator|*
literal|4
argument_list|)
expr_stmt|;
name|c
operator|=
literal|0
expr_stmt|;
comment|// skip the stuff above the exposed rectangle
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
name|lv
operator|->
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QStyleOptionQ3ListViewItem
name|child
init|=
name|lv
operator|->
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|height
operator|+
name|y
operator|>
literal|0
condition|)
break|break;
name|y
operator|+=
name|child
operator|.
name|totalHeight
expr_stmt|;
block|}
name|int
name|bx
init|=
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
comment|// paint stuff in the magical area
while|while
condition|(
name|i
operator|<
name|lv
operator|->
name|items
operator|.
name|size
argument_list|()
operator|&&
name|y
operator|<
name|lv
operator|->
name|rect
operator|.
name|height
argument_list|()
condition|)
block|{
name|QStyleOptionQ3ListViewItem
name|child
init|=
name|lv
operator|->
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|features
operator|&
name|QStyleOptionQ3ListViewItem
operator|::
name|Visible
condition|)
block|{
name|int
name|lh
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|item
operator|.
name|features
operator|&
name|QStyleOptionQ3ListViewItem
operator|::
name|MultiLine
operator|)
condition|)
name|lh
operator|=
name|child
operator|.
name|height
expr_stmt|;
else|else
name|lh
operator|=
name|p
operator|->
name|fontMetrics
argument_list|()
operator|.
name|height
argument_list|()
operator|+
literal|2
operator|*
name|lv
operator|->
name|itemMargin
expr_stmt|;
name|lh
operator|=
name|qMax
argument_list|(
name|lh
argument_list|,
name|QApplication
operator|::
name|globalStrut
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lh
operator|%
literal|2
operator|>
literal|0
condition|)
name|lh
operator|++
expr_stmt|;
name|linebot
operator|=
name|y
operator|+
name|lh
operator|/
literal|2
expr_stmt|;
if|if
condition|(
operator|(
name|child
operator|.
name|features
operator|&
name|QStyleOptionQ3ListViewItem
operator|::
name|Expandable
operator|||
name|child
operator|.
name|childCount
operator|>
literal|0
operator|)
operator|&&
name|child
operator|.
name|height
operator|>
literal|0
condition|)
block|{
comment|// needs a box
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|bx
operator|-
literal|4
argument_list|,
name|linebot
operator|-
literal|4
argument_list|,
literal|9
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QPolygon
name|a
decl_stmt|;
if|if
condition|(
operator|(
name|child
operator|.
name|state
operator|&
name|State_Open
operator|)
condition|)
name|a
operator|.
name|setPoints
argument_list|(
literal|3
argument_list|,
name|bx
operator|-
literal|2
argument_list|,
name|linebot
operator|-
literal|2
argument_list|,
name|bx
argument_list|,
name|linebot
operator|+
literal|2
argument_list|,
name|bx
operator|+
literal|2
argument_list|,
name|linebot
operator|-
literal|2
argument_list|)
expr_stmt|;
comment|//Qt::RightArrow
else|else
name|a
operator|.
name|setPoints
argument_list|(
literal|3
argument_list|,
name|bx
operator|-
literal|2
argument_list|,
name|linebot
operator|-
literal|2
argument_list|,
name|bx
operator|+
literal|2
argument_list|,
name|linebot
argument_list|,
name|bx
operator|-
literal|2
argument_list|,
name|linebot
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|//Qt::DownArrow
name|p
operator|->
name|setBrush
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPolygon
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
comment|// dotlinery
name|dotlines
index|[
name|c
operator|++
index|]
operator|=
name|QPoint
argument_list|(
name|bx
argument_list|,
name|linetop
argument_list|)
expr_stmt|;
name|dotlines
index|[
name|c
operator|++
index|]
operator|=
name|QPoint
argument_list|(
name|bx
argument_list|,
name|linebot
operator|-
literal|5
argument_list|)
expr_stmt|;
name|dotlines
index|[
name|c
operator|++
index|]
operator|=
name|QPoint
argument_list|(
name|bx
operator|+
literal|5
argument_list|,
name|linebot
argument_list|)
expr_stmt|;
name|dotlines
index|[
name|c
operator|++
index|]
operator|=
name|QPoint
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|linebot
argument_list|)
expr_stmt|;
name|linetop
operator|=
name|linebot
operator|+
literal|5
expr_stmt|;
block|}
else|else
block|{
comment|// just dotlinery
name|dotlines
index|[
name|c
operator|++
index|]
operator|=
name|QPoint
argument_list|(
name|bx
operator|+
literal|1
argument_list|,
name|linebot
argument_list|)
expr_stmt|;
name|dotlines
index|[
name|c
operator|++
index|]
operator|=
name|QPoint
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|linebot
argument_list|)
expr_stmt|;
block|}
name|y
operator|+=
name|child
operator|.
name|totalHeight
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
comment|// Expand line height to edge of rectangle if there's any
comment|// visible child below
while|while
condition|(
name|i
operator|<
name|lv
operator|->
name|items
operator|.
name|size
argument_list|()
operator|&&
name|lv
operator|->
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|height
operator|<=
literal|0
condition|)
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|lv
operator|->
name|items
operator|.
name|size
argument_list|()
condition|)
name|linebot
operator|=
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|linetop
operator|<
name|linebot
condition|)
block|{
name|dotlines
index|[
name|c
operator|++
index|]
operator|=
name|QPoint
argument_list|(
name|bx
argument_list|,
name|linetop
argument_list|)
expr_stmt|;
name|dotlines
index|[
name|c
operator|++
index|]
operator|=
name|QPoint
argument_list|(
name|bx
argument_list|,
name|linebot
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|line
decl_stmt|;
comment|// index into dotlines
name|p
operator|->
name|setPen
argument_list|(
name|opt
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|->
name|subControls
operator|&
name|SC_Q3ListViewBranch
condition|)
for|for
control|(
name|line
operator|=
literal|0
init|;
name|line
operator|<
name|c
condition|;
name|line
operator|+=
literal|2
control|)
block|{
name|p
operator|->
name|drawLine
argument_list|(
name|dotlines
index|[
name|line
index|]
operator|.
name|x
argument_list|()
argument_list|,
name|dotlines
index|[
name|line
index|]
operator|.
name|y
argument_list|()
argument_list|,
name|dotlines
index|[
name|line
operator|+
literal|1
index|]
operator|.
name|x
argument_list|()
argument_list|,
name|dotlines
index|[
name|line
operator|+
literal|1
index|]
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
default|default:
name|QCommonStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|pixelMetric
name|int
name|QMotifStyle
operator|::
name|pixelMetric
parameter_list|(
name|PixelMetric
name|pm
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|pm
condition|)
block|{
case|case
name|PM_ButtonDefaultIndicator
case|:
name|ret
operator|=
literal|5
expr_stmt|;
break|break;
case|case
name|PM_CheckBoxLabelSpacing
case|:
case|case
name|PM_RadioButtonLabelSpacing
case|:
name|ret
operator|=
literal|10
expr_stmt|;
break|break;
case|case
name|PM_ToolBarFrameWidth
case|:
name|ret
operator|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
expr_stmt|;
break|break;
case|case
name|PM_ToolBarItemMargin
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_ButtonShiftHorizontal
case|:
case|case
name|PM_ButtonShiftVertical
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|PM_SplitterWidth
case|:
name|ret
operator|=
name|qMax
argument_list|(
literal|10
argument_list|,
name|QApplication
operator|::
name|globalStrut
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PM_SliderLength
case|:
name|ret
operator|=
literal|30
expr_stmt|;
break|break;
case|case
name|PM_SliderThickness
case|:
name|ret
operator|=
literal|16
operator|+
literal|4
operator|*
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|PM_SliderControlThickness
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|sl
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|int
name|space
init|=
operator|(
name|sl
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|sl
operator|->
name|rect
operator|.
name|height
argument_list|()
else|:
name|sl
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|ticks
init|=
name|sl
operator|->
name|tickPosition
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksAbove
condition|)
name|n
operator|++
expr_stmt|;
if|if
condition|(
name|ticks
operator|&
name|QSlider
operator|::
name|TicksBelow
condition|)
name|n
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|n
condition|)
block|{
name|ret
operator|=
name|space
expr_stmt|;
break|break;
block|}
name|int
name|thick
init|=
literal|6
decl_stmt|;
comment|// Magic constant to get 5 + 16 + 5
name|space
operator|-=
name|thick
expr_stmt|;
comment|//### the two sides may be unequal in size
if|if
condition|(
name|space
operator|>
literal|0
condition|)
name|thick
operator|+=
operator|(
name|space
operator|*
literal|2
operator|)
operator|/
operator|(
name|n
operator|+
literal|2
operator|)
expr_stmt|;
name|ret
operator|=
name|thick
expr_stmt|;
block|}
break|break;
case|case
name|PM_SliderSpaceAvailable
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|sl
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|sl
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|ret
operator|=
name|sl
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
operator|-
literal|2
operator|*
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
else|else
name|ret
operator|=
name|sl
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
operator|-
literal|2
operator|*
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SLIDER
case|case
name|PM_DockWidgetFrameWidth
case|:
name|ret
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|PM_DockWidgetHandleExtent
case|:
name|ret
operator|=
literal|9
expr_stmt|;
break|break;
case|case
name|PM_ProgressBarChunkWidth
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PM_ExclusiveIndicatorWidth
case|:
case|case
name|PM_ExclusiveIndicatorHeight
case|:
name|ret
operator|=
literal|13
expr_stmt|;
break|break;
case|case
name|PM_MenuBarHMargin
case|:
name|ret
operator|=
literal|2
expr_stmt|;
comment|// really ugly, but Motif
break|break;
case|case
name|PM_MenuButtonIndicator
case|:
if|if
condition|(
operator|!
name|opt
condition|)
name|ret
operator|=
literal|12
expr_stmt|;
else|else
name|ret
operator|=
name|qMax
argument_list|(
literal|12
argument_list|,
operator|(
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|4
operator|)
operator|/
literal|3
argument_list|)
expr_stmt|;
break|break;
default|default:
name|ret
operator|=
name|QCommonStyle
operator|::
name|pixelMetric
argument_list|(
name|pm
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
name|QRect
DECL|function|subControlRect
name|QMotifStyle
operator|::
name|subControlRect
parameter_list|(
name|ComplexControl
name|cc
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|opt
parameter_list|,
name|SubControl
name|sc
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|cc
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinbox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|int
name|fw
init|=
name|spinbox
operator|->
name|frame
condition|?
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|spinbox
argument_list|,
name|widget
argument_list|)
else|:
literal|0
decl_stmt|;
name|QSize
name|bs
decl_stmt|;
name|bs
operator|.
name|setHeight
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
name|fw
argument_list|)
expr_stmt|;
name|bs
operator|.
name|setWidth
argument_list|(
name|qMin
argument_list|(
name|bs
operator|.
name|height
argument_list|()
operator|*
literal|8
operator|/
literal|5
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1.6 -approximate golden mean
name|bs
operator|=
name|bs
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|y
init|=
name|fw
operator|+
name|spinbox
operator|->
name|rect
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|x
decl_stmt|,
name|lx
decl_stmt|,
name|rx
decl_stmt|;
name|x
operator|=
name|spinbox
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|fw
operator|-
name|bs
operator|.
name|width
argument_list|()
expr_stmt|;
name|lx
operator|=
name|fw
expr_stmt|;
name|rx
operator|=
name|x
operator|-
name|fw
operator|*
literal|2
expr_stmt|;
specifier|const
name|int
name|margin
init|=
name|spinbox
operator|->
name|frame
condition|?
literal|4
else|:
literal|0
decl_stmt|;
switch|switch
condition|(
name|sc
condition|)
block|{
case|case
name|SC_SpinBoxUp
case|:
if|if
condition|(
name|spinbox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|)
return|return
name|QRect
argument_list|()
return|;
return|return
name|visualRect
argument_list|(
name|spinbox
operator|->
name|direction
argument_list|,
name|spinbox
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|bs
operator|.
name|width
argument_list|()
argument_list|,
name|bs
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
name|SC_SpinBoxDown
case|:
if|if
condition|(
name|spinbox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|)
return|return
name|QRect
argument_list|()
return|;
return|return
name|visualRect
argument_list|(
name|spinbox
operator|->
name|direction
argument_list|,
name|spinbox
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|x
argument_list|,
name|y
operator|+
name|bs
operator|.
name|height
argument_list|()
operator|+
literal|1
argument_list|,
name|bs
operator|.
name|width
argument_list|()
argument_list|,
name|bs
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
name|SC_SpinBoxEditField
case|:
if|if
condition|(
name|spinbox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|)
return|return
name|visualRect
argument_list|(
name|spinbox
operator|->
name|direction
argument_list|,
name|spinbox
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|lx
operator|+
name|margin
argument_list|,
name|y
operator|+
name|margin
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
operator|*
name|fw
operator|-
literal|2
operator|*
name|margin
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|fw
operator|-
literal|2
operator|*
name|margin
argument_list|)
argument_list|)
return|;
return|return
name|visualRect
argument_list|(
name|spinbox
operator|->
name|direction
argument_list|,
name|spinbox
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|lx
operator|+
name|margin
argument_list|,
name|y
operator|+
name|margin
argument_list|,
name|rx
operator|-
name|margin
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|fw
operator|-
literal|2
operator|*
name|margin
argument_list|)
argument_list|)
return|;
case|case
name|SC_SpinBoxFrame
case|:
return|return
name|visualRect
argument_list|(
name|spinbox
operator|->
name|direction
argument_list|,
name|spinbox
operator|->
name|rect
argument_list|,
name|spinbox
operator|->
name|rect
argument_list|)
return|;
default|default:
break|break;
block|}
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_SPINBOX
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|CC_Slider
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|sc
operator|==
name|SC_SliderHandle
condition|)
block|{
name|int
name|tickOffset
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderTickmarkOffset
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|thickness
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderControlThickness
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|bool
name|horizontal
init|=
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
decl_stmt|;
name|int
name|len
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|motifBorder
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
name|int
name|sliderPos
init|=
name|sliderPositionFromValue
argument_list|(
name|slider
operator|->
name|minimum
argument_list|,
name|slider
operator|->
name|maximum
argument_list|,
name|slider
operator|->
name|sliderPosition
argument_list|,
name|horizontal
condition|?
name|slider
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|len
operator|-
literal|2
operator|*
name|motifBorder
else|:
name|slider
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|len
operator|-
literal|2
operator|*
name|motifBorder
argument_list|,
name|slider
operator|->
name|upsideDown
argument_list|)
decl_stmt|;
if|if
condition|(
name|horizontal
condition|)
return|return
name|visualRect
argument_list|(
name|slider
operator|->
name|direction
argument_list|,
name|slider
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|sliderPos
operator|+
name|motifBorder
argument_list|,
name|tickOffset
operator|+
name|motifBorder
argument_list|,
name|len
argument_list|,
name|thickness
operator|-
literal|2
operator|*
name|motifBorder
argument_list|)
argument_list|)
return|;
return|return
name|visualRect
argument_list|(
name|slider
operator|->
name|direction
argument_list|,
name|slider
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|tickOffset
operator|+
name|motifBorder
argument_list|,
name|sliderPos
operator|+
name|motifBorder
argument_list|,
name|thickness
operator|-
literal|2
operator|*
name|motifBorder
argument_list|,
name|len
argument_list|)
argument_list|)
return|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SLIDER
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
case|case
name|CC_ScrollBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|scrollbar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|int
name|dfw
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|visualRect
argument_list|(
name|scrollbar
operator|->
name|direction
argument_list|,
name|scrollbar
operator|->
name|rect
argument_list|,
name|QCommonStyle
operator|::
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|scrollbar
argument_list|,
name|sc
argument_list|,
name|widget
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sc
operator|==
name|SC_ScrollBarSlider
condition|)
block|{
if|if
condition|(
name|scrollbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|rect
operator|.
name|adjust
argument_list|(
operator|-
name|dfw
argument_list|,
name|dfw
argument_list|,
name|dfw
argument_list|,
operator|-
name|dfw
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|adjust
argument_list|(
name|dfw
argument_list|,
operator|-
name|dfw
argument_list|,
operator|-
name|dfw
argument_list|,
name|dfw
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sc
operator|!=
name|SC_ScrollBarGroove
condition|)
block|{
if|if
condition|(
name|scrollbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|dfw
argument_list|,
literal|0
argument_list|,
operator|-
name|dfw
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|adjust
argument_list|(
name|dfw
argument_list|,
literal|0
argument_list|,
operator|-
name|dfw
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|visualRect
argument_list|(
name|scrollbar
operator|->
name|direction
argument_list|,
name|scrollbar
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
return|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SCROLLBAR
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|sc
condition|)
block|{
case|case
name|SC_ComboBoxArrow
case|:
block|{
name|int
name|ew
decl_stmt|,
name|awh
decl_stmt|,
name|sh
decl_stmt|,
name|dh
decl_stmt|,
name|ax
decl_stmt|,
name|ay
decl_stmt|,
name|sy
decl_stmt|;
name|int
name|fw
init|=
name|cb
operator|->
name|frame
condition|?
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ComboBoxFrameWidth
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
else|:
literal|0
decl_stmt|;
name|QRect
name|cr
init|=
name|opt
operator|->
name|rect
decl_stmt|;
name|cr
operator|.
name|adjust
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|)
expr_stmt|;
name|get_combo_parameters
argument_list|(
name|cr
argument_list|,
name|ew
argument_list|,
name|awh
argument_list|,
name|ax
argument_list|,
name|ay
argument_list|,
name|sh
argument_list|,
name|dh
argument_list|,
name|sy
argument_list|)
expr_stmt|;
return|return
name|visualRect
argument_list|(
name|cb
operator|->
name|direction
argument_list|,
name|cb
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|ax
argument_list|,
name|ay
argument_list|)
argument_list|,
name|cr
operator|.
name|bottomRight
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
case|case
name|SC_ComboBoxEditField
case|:
block|{
name|int
name|fw
init|=
name|cb
operator|->
name|frame
condition|?
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ComboBoxFrameWidth
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
else|:
literal|0
decl_stmt|;
name|QRect
name|rect
init|=
name|opt
operator|->
name|rect
decl_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|)
expr_stmt|;
name|int
name|ew
init|=
name|get_combo_extra_width
argument_list|(
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
operator|-
name|ew
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|visualRect
argument_list|(
name|cb
operator|->
name|direction
argument_list|,
name|cb
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
return|;
block|}
default|default:
break|break;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SCROLLBAR
default|default:
break|break;
block|}
return|return
name|QCommonStyle
operator|::
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|sc
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
name|QSize
DECL|function|sizeFromContents
name|QMotifStyle
operator|::
name|sizeFromContents
parameter_list|(
name|ContentsType
name|ct
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QSize
modifier|&
name|contentsSize
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QSize
name|sz
argument_list|(
name|contentsSize
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ct
condition|)
block|{
case|case
name|CT_RadioButton
case|:
case|case
name|CT_CheckBox
case|:
name|sz
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|sz
operator|.
name|rwidth
argument_list|()
operator|+=
name|motifItemFrame
expr_stmt|;
break|break;
case|case
name|CT_PushButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|sz
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|btn
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|btn
operator|->
name|features
operator|&
operator|(
name|QStyleOptionButton
operator|::
name|AutoDefaultButton
operator||
name|QStyleOptionButton
operator|::
name|DefaultButton
operator|)
operator|)
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
literal|75
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sz
operator|+=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// magical extra pixel
block|}
break|break;
case|case
name|CT_MenuBarItem
case|:
block|{
if|if
condition|(
operator|!
name|sz
operator|.
name|isEmpty
argument_list|()
condition|)
name|sz
operator|+=
name|QSize
argument_list|(
literal|5
operator|*
name|motifItemHMargin
operator|+
literal|1
argument_list|,
literal|2
operator|*
name|motifItemVMargin
operator|+
name|motifItemFrame
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CT_MenuItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|mi
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|sz
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|sz
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|int
name|w
init|=
name|sz
operator|.
name|width
argument_list|()
decl_stmt|,
name|h
init|=
name|sz
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|mi
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|Separator
condition|)
block|{
name|w
operator|=
literal|10
expr_stmt|;
name|h
operator|=
operator|(
name|mi
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|motifSepHeight
else|:
name|mi
operator|->
name|fontMetrics
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
comment|// a little bit of border can never harm
name|w
operator|+=
literal|2
operator|*
name|motifItemHMargin
operator|+
literal|2
operator|*
name|motifItemFrame
expr_stmt|;
if|if
condition|(
operator|!
name|mi
operator|->
name|text
operator|.
name|isNull
argument_list|()
operator|&&
name|mi
operator|->
name|text
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
operator|>=
literal|0
condition|)
comment|// string contains tab
name|w
operator|+=
name|motifTabSpacing
expr_stmt|;
elseif|else
if|if
condition|(
name|mi
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|SubMenu
condition|)
comment|// submenu indicator needs some room if we don't have a tab column
name|w
operator|+=
name|motifArrowHMargin
operator|+
literal|4
operator|*
name|motifItemFrame
expr_stmt|;
name|int
name|checkColumn
init|=
name|mi
operator|->
name|maxIconWidth
decl_stmt|;
if|if
condition|(
name|mi
operator|->
name|menuHasCheckableItems
condition|)
name|checkColumn
operator|=
name|qMax
argument_list|(
name|checkColumn
argument_list|,
name|motifCheckMarkSpace
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkColumn
operator|>
literal|0
condition|)
name|w
operator|+=
name|checkColumn
operator|+
name|motifCheckMarkHMargin
expr_stmt|;
name|sz
operator|=
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|sz
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|sz
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
name|QRect
DECL|function|subElementRect
name|QMotifStyle
operator|::
name|subElementRect
parameter_list|(
name|SubElement
name|sr
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QRect
name|rect
decl_stmt|;
switch|switch
condition|(
name|sr
condition|)
block|{
case|case
name|SE_SliderFocusRect
case|:
name|rect
operator|=
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|sr
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_CheckBoxIndicator
case|:
case|case
name|SE_RadioButtonIndicator
case|:
block|{
name|rect
operator|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|sr
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
name|motifItemFrame
argument_list|,
literal|0
argument_list|,
name|motifItemFrame
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rect
operator|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SE_ComboBoxFocusRect
case|:
block|{
name|int
name|awh
decl_stmt|,
name|ax
decl_stmt|,
name|ay
decl_stmt|,
name|sh
decl_stmt|,
name|sy
decl_stmt|,
name|dh
decl_stmt|,
name|ew
decl_stmt|;
name|int
name|fw
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|tr
init|=
name|opt
operator|->
name|rect
decl_stmt|;
name|tr
operator|.
name|adjust
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|)
expr_stmt|;
name|get_combo_parameters
argument_list|(
name|tr
argument_list|,
name|ew
argument_list|,
name|awh
argument_list|,
name|ax
argument_list|,
name|ay
argument_list|,
name|sh
argument_list|,
name|dh
argument_list|,
name|sy
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setRect
argument_list|(
name|ax
operator|-
literal|2
argument_list|,
name|ay
operator|-
literal|2
argument_list|,
name|awh
operator|+
literal|4
argument_list|,
name|awh
operator|+
name|sh
operator|+
name|dh
operator|+
literal|4
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SE_Q3DockWindowHandleRect
case|:
if|if
condition|(
specifier|const
name|QStyleOptionQ3DockWindow
modifier|*
name|dw
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionQ3DockWindow
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|dw
operator|->
name|docked
operator|||
operator|!
name|dw
operator|->
name|closeEnabled
condition|)
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|dw
operator|->
name|state
operator|==
name|State_Horizontal
condition|)
name|rect
operator|.
name|setRect
argument_list|(
literal|2
argument_list|,
literal|15
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|15
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|15
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|rect
operator|=
name|visualRect
argument_list|(
name|dw
operator|->
name|direction
argument_list|,
name|dw
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SE_ProgressBarLabel
case|:
case|case
name|SE_ProgressBarGroove
case|:
case|case
name|SE_ProgressBarContents
case|:
if|if
condition|(
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|pb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|int
name|textw
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|pb
operator|->
name|textVisible
condition|)
name|textw
operator|=
name|pb
operator|->
name|fontMetrics
operator|.
name|width
argument_list|(
name|QLatin1String
argument_list|(
literal|"100%"
argument_list|)
argument_list|)
operator|+
literal|6
expr_stmt|;
if|if
condition|(
name|pb
operator|->
name|textAlignment
operator|==
name|Qt
operator|::
name|AlignLeft
operator|||
name|pb
operator|->
name|textAlignment
operator|==
name|Qt
operator|::
name|AlignCenter
condition|)
block|{
name|rect
operator|=
name|opt
operator|->
name|rect
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sr
operator|==
name|SE_ProgressBarLabel
condition|)
name|rect
operator|.
name|setCoords
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
name|textw
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|setCoords
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
name|textw
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sr
operator|==
name|SE_ProgressBarContents
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|rect
operator|=
name|visualRect
argument_list|(
name|pb
operator|->
name|direction
argument_list|,
name|pb
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SE_CheckBoxClickRect
case|:
case|case
name|SE_RadioButtonClickRect
case|:
name|rect
operator|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
break|break;
default|default:
name|rect
operator|=
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|sr
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
return|return
name|rect
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_IMAGEFORMAT_XPM
end_ifndef
begin_decl_stmt
DECL|variable|qt_menu_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|qt_menu_xpm
index|[]
init|=
block|{
literal|"16 16 11 1"
block|,
literal|"  c #000000"
block|,
literal|", c #336600"
block|,
literal|". c #99CC00"
block|,
literal|"X c #666600"
block|,
literal|"o c #999933"
block|,
literal|"+ c #333300"
block|,
literal|"@ c #669900"
block|,
literal|"# c #999900"
block|,
literal|"$ c #336633"
block|,
literal|"% c #666633"
block|,
literal|"& c #99CC33"
block|,
literal|"................"
block|,
literal|"................"
block|,
literal|".....#,++X#....."
block|,
literal|"....X      X...."
block|,
literal|"...X  Xo#%  X&.."
block|,
literal|"..#  o..&@o  o.."
block|,
literal|".., X..#+ @X X.."
block|,
literal|"..+ o.o+ +o# +.."
block|,
literal|"..+ #o+  +## +.."
block|,
literal|".., %@ ++ +, X.."
block|,
literal|"..#  o@oo+   #.."
block|,
literal|"...X  X##$   o.."
block|,
literal|"....X        X.."
block|,
literal|"....&oX++X#oX..."
block|,
literal|"................"
block|,
literal|"................"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_close_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|qt_close_xpm
index|[]
init|=
block|{
literal|"12 12 2 1"
block|,
literal|"       s None  c None"
block|,
literal|".      c black"
block|,
literal|"            "
block|,
literal|"            "
block|,
literal|"   .    .   "
block|,
literal|"  ...  ...  "
block|,
literal|"   ......   "
block|,
literal|"    ....    "
block|,
literal|"    ....    "
block|,
literal|"   ......   "
block|,
literal|"  ...  ...  "
block|,
literal|"   .    .   "
block|,
literal|"            "
block|,
literal|"            "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_maximize_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|qt_maximize_xpm
index|[]
init|=
block|{
literal|"12 12 2 1"
block|,
literal|"       s None  c None"
block|,
literal|".      c black"
block|,
literal|"            "
block|,
literal|"            "
block|,
literal|"            "
block|,
literal|"     .      "
block|,
literal|"    ...     "
block|,
literal|"   .....    "
block|,
literal|"  .......   "
block|,
literal|" .........  "
block|,
literal|"            "
block|,
literal|"            "
block|,
literal|"            "
block|,
literal|"            "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_minimize_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|qt_minimize_xpm
index|[]
init|=
block|{
literal|"12 12 2 1"
block|,
literal|"       s None  c None"
block|,
literal|".      c black"
block|,
literal|"            "
block|,
literal|"            "
block|,
literal|"            "
block|,
literal|"            "
block|,
literal|" .........  "
block|,
literal|"  .......   "
block|,
literal|"   .....    "
block|,
literal|"    ...     "
block|,
literal|"     .      "
block|,
literal|"            "
block|,
literal|"            "
block|,
literal|"            "
block|}
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// ### not used???
end_comment
begin_endif
unit|static const char * const qt_normalize_xpm[] = {     "12 12 2 1",     "       s None  c None",     ".      c black",     "            ",     "            ",     "  .         ",     "  ..        ",     "  ...       ",     "  ....      ",     "  .....     ",     "  ......    ",     "  .......   ",     "            ",     "            ",     "            "};
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|qt_normalizeup_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|qt_normalizeup_xpm
index|[]
init|=
block|{
literal|"12 12 2 1"
block|,
literal|"       s None  c None"
block|,
literal|".      c black"
block|,
literal|"            "
block|,
literal|"            "
block|,
literal|"            "
block|,
literal|"  .......   "
block|,
literal|"   ......   "
block|,
literal|"    .....   "
block|,
literal|"     ....   "
block|,
literal|"      ...   "
block|,
literal|"       ..   "
block|,
literal|"        .   "
block|,
literal|"            "
block|,
literal|"            "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_shade_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|qt_shade_xpm
index|[]
init|=
block|{
literal|"12 12 2 1"
block|,
literal|"# c #000000"
block|,
literal|". c None"
block|,
literal|"............"
block|,
literal|"............"
block|,
literal|".#########.."
block|,
literal|".#########.."
block|,
literal|"............"
block|,
literal|"............"
block|,
literal|"............"
block|,
literal|"............"
block|,
literal|"............"
block|,
literal|"............"
block|,
literal|"............"
block|,
literal|"............"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_unshade_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|qt_unshade_xpm
index|[]
init|=
block|{
literal|"12 12 2 1"
block|,
literal|"# c #000000"
block|,
literal|". c None"
block|,
literal|"............"
block|,
literal|"............"
block|,
literal|".#########.."
block|,
literal|".#########.."
block|,
literal|".#.......#.."
block|,
literal|".#.......#.."
block|,
literal|".#.......#.."
block|,
literal|".#.......#.."
block|,
literal|".#.......#.."
block|,
literal|".#########.."
block|,
literal|"............"
block|,
literal|"............"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|dock_window_close_xpm
specifier|static
specifier|const
name|char
modifier|*
name|dock_window_close_xpm
index|[]
init|=
block|{
literal|"8 8 2 1"
block|,
literal|"# c #000000"
block|,
literal|". c None"
block|,
literal|"##....##"
block|,
literal|".##..##."
block|,
literal|"..####.."
block|,
literal|"...##..."
block|,
literal|"..####.."
block|,
literal|".##..##."
block|,
literal|"##....##"
block|,
literal|"........"
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Message box icons, from page 210 of the Windows style guide.
end_comment
begin_comment
comment|// Hand-drawn to resemble Microsoft's icons, but in the Mac/Netscape palette.
end_comment
begin_comment
comment|// Thanks to TrueColor displays, it is slightly more efficient to have
end_comment
begin_comment
comment|// them duplicated.
end_comment
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|information_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|information_xpm
index|[]
init|=
block|{
literal|"32 32 5 1"
block|,
literal|". c None"
block|,
literal|"c c #000000"
block|,
literal|"* c #999999"
block|,
literal|"a c #ffffff"
block|,
literal|"b c #0000ff"
block|,
literal|"...........********............."
block|,
literal|"........***aaaaaaaa***.........."
block|,
literal|"......**aaaaaaaaaaaaaa**........"
block|,
literal|".....*aaaaaaaaaaaaaaaaaa*......."
block|,
literal|"....*aaaaaaaabbbbaaaaaaaac......"
block|,
literal|"...*aaaaaaaabbbbbbaaaaaaaac....."
block|,
literal|"..*aaaaaaaaabbbbbbaaaaaaaaac...."
block|,
literal|".*aaaaaaaaaaabbbbaaaaaaaaaaac..."
block|,
literal|".*aaaaaaaaaaaaaaaaaaaaaaaaaac*.."
block|,
literal|"*aaaaaaaaaaaaaaaaaaaaaaaaaaaac*."
block|,
literal|"*aaaaaaaaaabbbbbbbaaaaaaaaaaac*."
block|,
literal|"*aaaaaaaaaaaabbbbbaaaaaaaaaaac**"
block|,
literal|"*aaaaaaaaaaaabbbbbaaaaaaaaaaac**"
block|,
literal|"*aaaaaaaaaaaabbbbbaaaaaaaaaaac**"
block|,
literal|"*aaaaaaaaaaaabbbbbaaaaaaaaaaac**"
block|,
literal|"*aaaaaaaaaaaabbbbbaaaaaaaaaaac**"
block|,
literal|".*aaaaaaaaaaabbbbbaaaaaaaaaac***"
block|,
literal|".*aaaaaaaaaaabbbbbaaaaaaaaaac***"
block|,
literal|"..*aaaaaaaaaabbbbbaaaaaaaaac***."
block|,
literal|"...caaaaaaabbbbbbbbbaaaaaac****."
block|,
literal|"....caaaaaaaaaaaaaaaaaaaac****.."
block|,
literal|".....caaaaaaaaaaaaaaaaaac****..."
block|,
literal|"......ccaaaaaaaaaaaaaacc****...."
block|,
literal|".......*cccaaaaaaaaccc*****....."
block|,
literal|"........***cccaaaac*******......"
block|,
literal|"..........****caaac*****........"
block|,
literal|".............*caaac**..........."
block|,
literal|"...............caac**..........."
block|,
literal|"................cac**..........."
block|,
literal|".................cc**..........."
block|,
literal|"..................***..........."
block|,
literal|"...................**..........."
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|warning_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|warning_xpm
index|[]
init|=
block|{
literal|"32 32 4 1"
block|,
literal|". c None"
block|,
literal|"a c #ffff00"
block|,
literal|"* c #000000"
block|,
literal|"b c #999999"
block|,
literal|".............***................"
block|,
literal|"............*aaa*..............."
block|,
literal|"...........*aaaaa*b............."
block|,
literal|"...........*aaaaa*bb............"
block|,
literal|"..........*aaaaaaa*bb..........."
block|,
literal|"..........*aaaaaaa*bb..........."
block|,
literal|".........*aaaaaaaaa*bb.........."
block|,
literal|".........*aaaaaaaaa*bb.........."
block|,
literal|"........*aaaaaaaaaaa*bb........."
block|,
literal|"........*aaaa***aaaa*bb........."
block|,
literal|".......*aaaa*****aaaa*bb........"
block|,
literal|".......*aaaa*****aaaa*bb........"
block|,
literal|"......*aaaaa*****aaaaa*bb......."
block|,
literal|"......*aaaaa*****aaaaa*bb......."
block|,
literal|".....*aaaaaa*****aaaaaa*bb......"
block|,
literal|".....*aaaaaa*****aaaaaa*bb......"
block|,
literal|"....*aaaaaaaa***aaaaaaaa*bb....."
block|,
literal|"....*aaaaaaaa***aaaaaaaa*bb....."
block|,
literal|"...*aaaaaaaaa***aaaaaaaaa*bb...."
block|,
literal|"...*aaaaaaaaaa*aaaaaaaaaa*bb...."
block|,
literal|"..*aaaaaaaaaaa*aaaaaaaaaaa*bb..."
block|,
literal|"..*aaaaaaaaaaaaaaaaaaaaaaa*bb..."
block|,
literal|".*aaaaaaaaaaaa**aaaaaaaaaaa*bb.."
block|,
literal|".*aaaaaaaaaaa****aaaaaaaaaa*bb.."
block|,
literal|"*aaaaaaaaaaaa****aaaaaaaaaaa*bb."
block|,
literal|"*aaaaaaaaaaaaa**aaaaaaaaaaaa*bb."
block|,
literal|"*aaaaaaaaaaaaaaaaaaaaaaaaaaa*bbb"
block|,
literal|"*aaaaaaaaaaaaaaaaaaaaaaaaaaa*bbb"
block|,
literal|".*aaaaaaaaaaaaaaaaaaaaaaaaa*bbbb"
block|,
literal|"..*************************bbbbb"
block|,
literal|"....bbbbbbbbbbbbbbbbbbbbbbbbbbb."
block|,
literal|".....bbbbbbbbbbbbbbbbbbbbbbbbb.."
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|critical_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|critical_xpm
index|[]
init|=
block|{
literal|"32 32 4 1"
block|,
literal|". c None"
block|,
literal|"a c #999999"
block|,
literal|"* c #ff0000"
block|,
literal|"b c #ffffff"
block|,
literal|"...........********............."
block|,
literal|".........************..........."
block|,
literal|".......****************........."
block|,
literal|"......******************........"
block|,
literal|".....********************a......"
block|,
literal|"....**********************a....."
block|,
literal|"...************************a...."
block|,
literal|"..*******b**********b*******a..."
block|,
literal|"..******bbb********bbb******a..."
block|,
literal|".******bbbbb******bbbbb******a.."
block|,
literal|".*******bbbbb****bbbbb*******a.."
block|,
literal|"*********bbbbb**bbbbb*********a."
block|,
literal|"**********bbbbbbbbbb**********a."
block|,
literal|"***********bbbbbbbb***********aa"
block|,
literal|"************bbbbbb************aa"
block|,
literal|"************bbbbbb************aa"
block|,
literal|"***********bbbbbbbb***********aa"
block|,
literal|"**********bbbbbbbbbb**********aa"
block|,
literal|"*********bbbbb**bbbbb*********aa"
block|,
literal|".*******bbbbb****bbbbb*******aa."
block|,
literal|".******bbbbb******bbbbb******aa."
block|,
literal|"..******bbb********bbb******aaa."
block|,
literal|"..*******b**********b*******aa.."
block|,
literal|"...************************aaa.."
block|,
literal|"....**********************aaa..."
block|,
literal|"....a********************aaa...."
block|,
literal|".....a******************aaa....."
block|,
literal|"......a****************aaa......"
block|,
literal|".......aa************aaaa......."
block|,
literal|".........aa********aaaaa........"
block|,
literal|"...........aaaaaaaaaaa.........."
block|,
literal|".............aaaaaaa............"
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|question_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|question_xpm
index|[]
init|=
block|{
literal|"32 32 5 1"
block|,
literal|". c None"
block|,
literal|"c c #000000"
block|,
literal|"* c #999999"
block|,
literal|"a c #ffffff"
block|,
literal|"b c #0000ff"
block|,
literal|"...........********............."
block|,
literal|"........***aaaaaaaa***.........."
block|,
literal|"......**aaaaaaaaaaaaaa**........"
block|,
literal|".....*aaaaaaaaaaaaaaaaaa*......."
block|,
literal|"....*aaaaaaaaaaaaaaaaaaaac......"
block|,
literal|"...*aaaaaaaabbbbbbaaaaaaaac....."
block|,
literal|"..*aaaaaaaabaaabbbbaaaaaaaac...."
block|,
literal|".*aaaaaaaabbaaaabbbbaaaaaaaac..."
block|,
literal|".*aaaaaaaabbbbaabbbbaaaaaaaac*.."
block|,
literal|"*aaaaaaaaabbbbaabbbbaaaaaaaaac*."
block|,
literal|"*aaaaaaaaaabbaabbbbaaaaaaaaaac*."
block|,
literal|"*aaaaaaaaaaaaabbbbaaaaaaaaaaac**"
block|,
literal|"*aaaaaaaaaaaaabbbaaaaaaaaaaaac**"
block|,
literal|"*aaaaaaaaaaaaabbaaaaaaaaaaaaac**"
block|,
literal|"*aaaaaaaaaaaaabbaaaaaaaaaaaaac**"
block|,
literal|"*aaaaaaaaaaaaaaaaaaaaaaaaaaaac**"
block|,
literal|".*aaaaaaaaaaaabbaaaaaaaaaaaac***"
block|,
literal|".*aaaaaaaaaaabbbbaaaaaaaaaaac***"
block|,
literal|"..*aaaaaaaaaabbbbaaaaaaaaaac***."
block|,
literal|"...caaaaaaaaaabbaaaaaaaaaac****."
block|,
literal|"....caaaaaaaaaaaaaaaaaaaac****.."
block|,
literal|".....caaaaaaaaaaaaaaaaaac****..."
block|,
literal|"......ccaaaaaaaaaaaaaacc****...."
block|,
literal|".......*cccaaaaaaaaccc*****....."
block|,
literal|"........***cccaaaac*******......"
block|,
literal|"..........****caaac*****........"
block|,
literal|".............*caaac**..........."
block|,
literal|"...............caac**..........."
block|,
literal|"................cac**..........."
block|,
literal|".................cc**..........."
block|,
literal|"..................***..........."
block|,
literal|"...................**..........."
block|, }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
name|QPixmap
DECL|function|standardPixmap
name|QMotifStyle
operator|::
name|standardPixmap
parameter_list|(
name|StandardPixmap
name|standardPixmap
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_IMAGEFORMAT_XPM
switch|switch
condition|(
name|standardPixmap
condition|)
block|{
case|case
name|SP_TitleBarMenuButton
case|:
return|return
name|QPixmap
argument_list|(
name|qt_menu_xpm
argument_list|)
return|;
case|case
name|SP_TitleBarShadeButton
case|:
return|return
name|QPixmap
argument_list|(
name|qt_shade_xpm
argument_list|)
return|;
case|case
name|SP_TitleBarUnshadeButton
case|:
return|return
name|QPixmap
argument_list|(
name|qt_unshade_xpm
argument_list|)
return|;
case|case
name|SP_TitleBarNormalButton
case|:
return|return
name|QPixmap
argument_list|(
name|qt_normalizeup_xpm
argument_list|)
return|;
case|case
name|SP_TitleBarMinButton
case|:
return|return
name|QPixmap
argument_list|(
name|qt_minimize_xpm
argument_list|)
return|;
case|case
name|SP_TitleBarMaxButton
case|:
return|return
name|QPixmap
argument_list|(
name|qt_maximize_xpm
argument_list|)
return|;
case|case
name|SP_TitleBarCloseButton
case|:
return|return
name|QPixmap
argument_list|(
name|qt_close_xpm
argument_list|)
return|;
case|case
name|SP_DockWidgetCloseButton
case|:
return|return
name|QPixmap
argument_list|(
name|dock_window_close_xpm
argument_list|)
return|;
case|case
name|SP_MessageBoxInformation
case|:
case|case
name|SP_MessageBoxWarning
case|:
case|case
name|SP_MessageBoxCritical
case|:
case|case
name|SP_MessageBoxQuestion
case|:
block|{
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|xpm_data
decl_stmt|;
switch|switch
condition|(
name|standardPixmap
condition|)
block|{
case|case
name|SP_MessageBoxInformation
case|:
name|xpm_data
operator|=
name|information_xpm
expr_stmt|;
break|break;
case|case
name|SP_MessageBoxWarning
case|:
name|xpm_data
operator|=
name|warning_xpm
expr_stmt|;
break|break;
case|case
name|SP_MessageBoxCritical
case|:
name|xpm_data
operator|=
name|critical_xpm
expr_stmt|;
break|break;
case|case
name|SP_MessageBoxQuestion
case|:
name|xpm_data
operator|=
name|question_xpm
expr_stmt|;
break|break;
default|default:
name|xpm_data
operator|=
literal|0
expr_stmt|;
break|break;
block|}
name|QPixmap
name|pm
decl_stmt|;
if|if
condition|(
name|xpm_data
condition|)
block|{
name|QImage
name|image
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
name|xpm_data
argument_list|)
decl_stmt|;
comment|// All that color looks ugly in Motif
specifier|const
name|QPalette
modifier|&
name|pal
init|=
name|QApplication
operator|::
name|palette
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|standardPixmap
condition|)
block|{
case|case
name|SP_MessageBoxInformation
case|:
case|case
name|SP_MessageBoxQuestion
case|:
name|image
operator|.
name|setColor
argument_list|(
literal|2
argument_list|,
literal|0xff000000
operator||
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|3
argument_list|,
literal|0xff000000
operator||
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|4
argument_list|,
literal|0xff000000
operator||
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SP_MessageBoxWarning
case|:
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
literal|0xff000000
operator||
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|2
argument_list|,
literal|0xff000000
operator||
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|3
argument_list|,
literal|0xff000000
operator||
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SP_MessageBoxCritical
case|:
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
literal|0xff000000
operator||
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|2
argument_list|,
literal|0xff000000
operator||
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|3
argument_list|,
literal|0xff000000
operator||
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|pm
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
return|return
name|pm
return|;
block|}
default|default:
break|break;
block|}
endif|#
directive|endif
return|return
name|QCommonStyle
operator|::
name|standardPixmap
argument_list|(
name|standardPixmap
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QMotifStyle
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FocusIn
condition|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|focusWidget
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
if|if
condition|(
name|QGraphicsView
modifier|*
name|graphicsView
init|=
name|qobject_cast
argument_list|<
name|QGraphicsView
operator|*
argument_list|>
argument_list|(
name|focusWidget
argument_list|)
condition|)
block|{
name|QGraphicsItem
modifier|*
name|focusItem
init|=
name|graphicsView
operator|->
name|scene
argument_list|()
condition|?
name|graphicsView
operator|->
name|scene
argument_list|()
operator|->
name|focusItem
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|focusItem
operator|&&
name|focusItem
operator|->
name|type
argument_list|()
operator|==
name|QGraphicsProxyWidget
operator|::
name|Type
condition|)
block|{
name|QGraphicsProxyWidget
modifier|*
name|proxy
init|=
cast|static_cast
argument_list|<
name|QGraphicsProxyWidget
operator|*
argument_list|>
argument_list|(
name|focusItem
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|->
name|widget
argument_list|()
condition|)
name|focusWidget
operator|=
name|proxy
operator|->
name|widget
argument_list|()
operator|->
name|focusWidget
argument_list|()
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|focus
condition|)
name|focus
operator|=
operator|new
name|QFocusFrame
argument_list|(
name|focusWidget
argument_list|)
expr_stmt|;
name|focus
operator|->
name|setWidget
argument_list|(
name|focusWidget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|focus
condition|)
name|focus
operator|->
name|setWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FocusOut
condition|)
block|{
if|if
condition|(
name|focus
condition|)
name|focus
operator|->
name|setWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|QCommonStyle
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
name|int
DECL|function|styleHint
name|QMotifStyle
operator|::
name|styleHint
parameter_list|(
name|StyleHint
name|hint
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QStyleHintReturn
modifier|*
name|returnData
parameter_list|)
specifier|const
block|{
name|int
name|ret
decl_stmt|;
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|SH_DrawMenuBarSeparator
case|:
name|ret
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SH_ScrollBar_MiddleClickAbsolutePosition
case|:
case|case
name|SH_Slider_SloppyKeyEvents
case|:
case|case
name|SH_ProgressDialog_CenterCancelButton
case|:
case|case
name|SH_Menu_SpaceActivatesItem
case|:
case|case
name|SH_ScrollView_FrameOnlyAroundContents
case|:
case|case
name|SH_DitherDisabledText
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|SH_Menu_SubMenuPopupDelay
case|:
name|ret
operator|=
literal|96
expr_stmt|;
break|break;
case|case
name|SH_ProgressDialog_TextLabelAlignment
case|:
name|ret
operator|=
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
expr_stmt|;
break|break;
case|case
name|SH_ItemView_ChangeHighlightOnFocus
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|SH_MessageBox_UseBorderForButtonSpacing
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|SH_Dial_BackgroundRole
case|:
name|ret
operator|=
name|QPalette
operator|::
name|Mid
expr_stmt|;
break|break;
case|case
name|SH_DialogButtonLayout
case|:
name|ret
operator|=
name|QDialogButtonBox
operator|::
name|KdeLayout
expr_stmt|;
break|break;
case|case
name|SH_LineEdit_PasswordCharacter
case|:
name|ret
operator|=
literal|'*'
expr_stmt|;
break|break;
case|case
name|SH_DialogButtonBox_ButtonsHaveIcons
case|:
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
name|ret
operator|=
name|QCommonStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|standardPalette
name|QPalette
name|QMotifStyle
operator|::
name|standardPalette
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|Q_WS_X11
name|QColor
name|background
argument_list|(
literal|0xcf
argument_list|,
literal|0xcf
argument_list|,
literal|0xcf
argument_list|)
decl_stmt|;
if|if
condition|(
name|QX11Info
operator|::
name|appDepth
argument_list|()
operator|<=
literal|8
condition|)
name|background
operator|=
name|QColor
argument_list|(
literal|0xc0
argument_list|,
literal|0xc0
argument_list|,
literal|0xc0
argument_list|)
expr_stmt|;
else|#
directive|else
name|QColor
name|background
init|=
name|QColor
argument_list|(
literal|0xcf
argument_list|,
literal|0xcf
argument_list|,
literal|0xcf
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QColor
name|light
init|=
name|background
operator|.
name|lighter
argument_list|()
decl_stmt|;
name|QColor
name|mid
init|=
name|QColor
argument_list|(
literal|0xa6
argument_list|,
literal|0xa6
argument_list|,
literal|0xa6
argument_list|)
decl_stmt|;
name|QColor
name|dark
init|=
name|QColor
argument_list|(
literal|0x79
argument_list|,
literal|0x7d
argument_list|,
literal|0x79
argument_list|)
decl_stmt|;
name|QPalette
name|palette
argument_list|(
name|Qt
operator|::
name|black
argument_list|,
name|background
argument_list|,
name|light
argument_list|,
name|dark
argument_list|,
name|mid
argument_list|,
name|Qt
operator|::
name|black
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
decl_stmt|;
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|dark
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|dark
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|dark
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|background
argument_list|)
expr_stmt|;
return|return
name|palette
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(QT_NO_STYLE_MOTIF) || defined(QT_PLUGIN)
end_comment
end_unit
