begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2014 BlackBerry Limited. All rights reserved. ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qpixmapstyle_p.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapstyle_p_p.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QTextEdit>
end_include
begin_include
include|#
directive|include
file|<QStringBuilder>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QPixmapCache>
end_include
begin_include
include|#
directive|include
file|<QStyleOption>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QProgressBar>
end_include
begin_include
include|#
directive|include
file|<QSlider>
end_include
begin_include
include|#
directive|include
file|<QEvent>
end_include
begin_include
include|#
directive|include
file|<QComboBox>
end_include
begin_include
include|#
directive|include
file|<QAbstractItemView>
end_include
begin_include
include|#
directive|include
file|<QListView>
end_include
begin_include
include|#
directive|include
file|<QTreeView>
end_include
begin_include
include|#
directive|include
file|<QStyledItemDelegate>
end_include
begin_include
include|#
directive|include
file|<QAbstractScrollArea>
end_include
begin_include
include|#
directive|include
file|<QScrollBar>
end_include
begin_include
include|#
directive|include
file|<qscroller.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QPixmapStyle     \brief The QPixmapStyle class provides mechanism for writing pixmap based styles.      \since 5.7     \ingroup appearance     \inmodule QtWidgets     \internal      This is a convenience class that enables the implementation of a widget style using     pixmaps, on the same fashion used by the \l{BorderImage} QML type.      In order to style a QWidget, one simply needs to call QPixmapStyle::addDescriptor()     or QPixmapStyle::addPixmap() with the id of the component to be styled, the path of     the image to be used, the margins and the tiling rules:      \snippet styles/qcustompixmapstyle.cpp 0      \sa QStyle, QCommonStyle */
end_comment
begin_comment
comment|/*!     \internal      Constructs a QPixmapStyle object. */
end_comment
begin_constructor
DECL|function|QPixmapStyle
name|QPixmapStyle
operator|::
name|QPixmapStyle
parameter_list|()
member_init_list|:
name|QCommonStyle
argument_list|(
operator|*
operator|new
name|QPixmapStylePrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the QPixmapStyle object. */
end_comment
begin_destructor
DECL|function|~QPixmapStyle
name|QPixmapStyle
operator|::
name|~
name|QPixmapStyle
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|polish
name|void
name|QPixmapStyle
operator|::
name|polish
parameter_list|(
name|QApplication
modifier|*
name|application
parameter_list|)
block|{
name|QCommonStyle
operator|::
name|polish
argument_list|(
name|application
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_DEAD_CODE_FROM_QT4_WIN
argument_list|)
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateCombo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|polish
name|void
name|QPixmapStyle
operator|::
name|polish
parameter_list|(
name|QPalette
modifier|&
name|palette
parameter_list|)
block|{
name|palette
operator|=
name|proxy
argument_list|()
operator|->
name|standardPalette
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|polish
name|void
name|QPixmapStyle
operator|::
name|polish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapStyle
argument_list|)
expr_stmt|;
comment|// Don't fill the interior of the QTextEdit
if|if
condition|(
name|qobject_cast
argument_list|<
name|QTextEdit
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|QPalette
name|p
init|=
name|widget
operator|->
name|palette
argument_list|()
decl_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setPalette
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QProgressBar
modifier|*
name|pb
init|=
name|qobject_cast
argument_list|<
name|QProgressBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
comment|// Center the text in the progress bar
name|pb
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
comment|// Change the font size if needed, as it's used to compute the minimum size
name|QFont
name|font
init|=
name|pb
operator|->
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setPixelSize
argument_list|(
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|PB_HBackground
argument_list|)
operator|.
name|size
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|pb
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qobject_cast
argument_list|<
name|QSlider
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|widget
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|QComboBox
modifier|*
name|cb
init|=
name|qobject_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|widget
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// NOTE: This will break if the private API of QComboBox changes drastically
comment|// Make sure the popup is created so we can change the frame style
name|QAbstractItemView
modifier|*
name|list
init|=
name|cb
operator|->
name|view
argument_list|()
decl_stmt|;
name|list
operator|->
name|setProperty
argument_list|(
literal|"_pixmap_combobox_list"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|list
operator|->
name|setItemDelegate
argument_list|(
operator|new
name|QStyledItemDelegate
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|QPalette
name|p
init|=
name|list
operator|->
name|palette
argument_list|()
decl_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|->
name|setPalette
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|QFrame
modifier|*
name|frame
init|=
name|qobject_cast
argument_list|<
name|QFrame
operator|*
argument_list|>
argument_list|(
name|list
operator|->
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame
condition|)
block|{
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|DD_PopupDown
argument_list|)
decl_stmt|;
specifier|const
name|QPixmapStylePixmap
modifier|&
name|pix
init|=
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|DD_ItemSeparator
argument_list|)
decl_stmt|;
name|frame
operator|->
name|setContentsMargins
argument_list|(
name|pix
operator|.
name|margins
operator|.
name|left
argument_list|()
argument_list|,
name|desc
operator|.
name|margins
operator|.
name|top
argument_list|()
argument_list|,
name|pix
operator|.
name|margins
operator|.
name|right
argument_list|()
argument_list|,
name|desc
operator|.
name|margins
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|frame
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_WIN
comment|// FramelessWindowHint is needed on windows to make
comment|// WA_TranslucentBackground work properly
name|frame
operator|->
name|setWindowFlags
argument_list|(
name|widget
operator|->
name|windowFlags
argument_list|()
operator||
name|Qt
operator|::
name|FramelessWindowHint
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
if|if
condition|(
name|qstrcmp
argument_list|(
name|widget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
literal|"QComboBoxPrivateContainer"
argument_list|)
operator|==
literal|0
condition|)
name|widget
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAbstractScrollArea
modifier|*
name|scrollArea
init|=
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|scrollArea
operator|->
name|viewport
argument_list|()
operator|->
name|setAutoFillBackground
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAbstractItemView
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|scrollArea
argument_list|)
condition|)
block|{
name|view
operator|->
name|setHorizontalScrollMode
argument_list|(
name|QAbstractItemView
operator|::
name|ScrollPerPixel
argument_list|)
expr_stmt|;
name|view
operator|->
name|setVerticalScrollMode
argument_list|(
name|QAbstractItemView
operator|::
name|ScrollPerPixel
argument_list|)
expr_stmt|;
block|}
name|QScroller
operator|::
name|grabGesture
argument_list|(
name|scrollArea
operator|->
name|viewport
argument_list|()
argument_list|,
name|QScroller
operator|::
name|LeftMouseButtonGesture
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qobject_cast
argument_list|<
name|QScrollBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OpaquePaintEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|polish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|unpolish
name|void
name|QPixmapStyle
operator|::
name|unpolish
parameter_list|(
name|QApplication
modifier|*
name|application
parameter_list|)
block|{
name|QCommonStyle
operator|::
name|unpolish
argument_list|(
name|application
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|unpolish
name|void
name|QPixmapStyle
operator|::
name|unpolish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|qobject_cast
argument_list|<
name|QSlider
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|widget
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qstrcmp
argument_list|(
name|widget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
literal|"QComboBoxPrivateContainer"
argument_list|)
operator|==
literal|0
condition|)
name|widget
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAbstractScrollArea
modifier|*
name|scrollArea
init|=
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|QScroller
operator|::
name|ungrabGesture
argument_list|(
name|scrollArea
operator|->
name|viewport
argument_list|()
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|unpolish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawPrimitive
name|void
name|QPixmapStyle
operator|::
name|drawPrimitive
parameter_list|(
name|PrimitiveElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|PE_FrameFocusRect
case|:
comment|//disable focus rectangle
break|break;
case|case
name|PE_PanelButtonBevel
case|:
case|case
name|PE_PanelButtonCommand
case|:
name|drawPushButton
argument_list|(
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_PanelLineEdit
case|:
case|case
name|PE_FrameLineEdit
case|:
name|drawLineEdit
argument_list|(
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_Frame
case|:
case|case
name|PE_FrameDefaultButton
case|:
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTextEdit
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|drawTextEdit
argument_list|(
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_IndicatorCheckBox
case|:
name|drawCheckBox
argument_list|(
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_IndicatorRadioButton
case|:
name|drawRadioButton
argument_list|(
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_PanelItemViewItem
case|:
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QListView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|drawPanelItemViewItem
argument_list|(
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
else|else
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
default|default:
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawControl
name|void
name|QPixmapStyle
operator|::
name|drawControl
parameter_list|(
name|ControlElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|CE_ProgressBarGroove
case|:
name|drawProgressBarBackground
argument_list|(
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|CE_ProgressBarLabel
case|:
name|drawProgressBarLabel
argument_list|(
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|CE_ProgressBarContents
case|:
name|drawProgressBarFill
argument_list|(
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|CE_ShapedFrame
case|:
comment|// NOTE: This will break if the private API of QComboBox changes drastically
if|if
condition|(
name|qstrcmp
argument_list|(
name|widget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
literal|"QComboBoxPrivateContainer"
argument_list|)
operator|==
literal|0
condition|)
block|{
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|DD_PopupDown
argument_list|)
decl_stmt|;
specifier|const
name|QPixmapStylePixmap
modifier|&
name|pix
init|=
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|DD_ItemSeparator
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
operator|-
name|pix
operator|.
name|margins
operator|.
name|left
argument_list|()
argument_list|,
operator|-
name|desc
operator|.
name|margins
operator|.
name|top
argument_list|()
argument_list|,
name|pix
operator|.
name|margins
operator|.
name|right
argument_list|()
argument_list|,
name|desc
operator|.
name|margins
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|up
init|=
name|widget
operator|->
name|property
argument_list|(
literal|"_pixmapstyle_combobox_up"
argument_list|)
operator|.
name|toBool
argument_list|()
decl_stmt|;
name|drawCachedPixmap
argument_list|(
name|up
condition|?
name|DD_PopupUp
else|:
name|DD_PopupDown
argument_list|,
name|rect
argument_list|,
name|painter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawComplexControl
name|void
name|QPixmapStyle
operator|::
name|drawComplexControl
parameter_list|(
name|ComplexControl
name|cc
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|cc
condition|)
block|{
case|case
name|CC_Slider
case|:
name|drawSlider
argument_list|(
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|CC_ComboBox
case|:
name|drawComboBox
argument_list|(
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|CC_ScrollBar
case|:
name|drawScrollBar
argument_list|(
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
default|default:
name|QCommonStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeFromContents
name|QSize
name|QPixmapStyle
operator|::
name|sizeFromContents
parameter_list|(
name|ContentsType
name|type
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QSize
modifier|&
name|contentsSize
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CT_PushButton
case|:
return|return
name|pushButtonSizeFromContents
argument_list|(
name|option
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
return|;
case|case
name|CT_LineEdit
case|:
return|return
name|lineEditSizeFromContents
argument_list|(
name|option
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
return|;
case|case
name|CT_ProgressBar
case|:
return|return
name|progressBarSizeFromContents
argument_list|(
name|option
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
return|;
case|case
name|CT_Slider
case|:
return|return
name|sliderSizeFromContents
argument_list|(
name|option
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
return|;
case|case
name|CT_ComboBox
case|:
return|return
name|comboBoxSizeFromContents
argument_list|(
name|option
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
return|;
case|case
name|CT_ItemViewItem
case|:
return|return
name|itemViewSizeFromContents
argument_list|(
name|option
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
return|;
default|default:
empty_stmt|;
block|}
return|return
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|type
argument_list|,
name|option
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|subElementRect
name|QRect
name|QPixmapStyle
operator|::
name|subElementRect
parameter_list|(
name|SubElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|SE_LineEditContents
case|:
block|{
name|QRect
name|rect
init|=
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|LE_Enabled
argument_list|)
decl_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
name|desc
operator|.
name|margins
operator|.
name|left
argument_list|()
argument_list|,
name|desc
operator|.
name|margins
operator|.
name|top
argument_list|()
argument_list|,
operator|-
name|desc
operator|.
name|margins
operator|.
name|right
argument_list|()
argument_list|,
operator|-
name|desc
operator|.
name|margins
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|rect
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
block|}
default|default:
empty_stmt|;
block|}
return|return
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|subControlRect
name|QRect
name|QPixmapStyle
operator|::
name|subControlRect
parameter_list|(
name|ComplexControl
name|cc
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|SubControl
name|sc
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|cc
condition|)
block|{
case|case
name|CC_ComboBox
case|:
return|return
name|comboBoxSubControlRect
argument_list|(
name|option
argument_list|,
name|sc
argument_list|,
name|widget
argument_list|)
return|;
case|case
name|CC_ScrollBar
case|:
return|return
name|scrollBarSubControlRect
argument_list|(
name|option
argument_list|,
name|sc
argument_list|,
name|widget
argument_list|)
return|;
default|default:
empty_stmt|;
block|}
return|return
name|QCommonStyle
operator|::
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|option
argument_list|,
name|sc
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|pixelMetric
name|int
name|QPixmapStyle
operator|::
name|pixelMetric
parameter_list|(
name|PixelMetric
name|metric
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|PM_ButtonShiftHorizontal
case|:
case|case
name|PM_ButtonShiftVertical
case|:
return|return
literal|0
return|;
case|case
name|PM_DefaultFrameWidth
case|:
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTextEdit
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|LE_Enabled
argument_list|)
decl_stmt|;
return|return
name|qMax
argument_list|(
name|qMax
argument_list|(
name|desc
operator|.
name|margins
operator|.
name|left
argument_list|()
argument_list|,
name|desc
operator|.
name|margins
operator|.
name|right
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
name|desc
operator|.
name|margins
operator|.
name|top
argument_list|()
argument_list|,
name|desc
operator|.
name|margins
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|0
return|;
case|case
name|PM_IndicatorWidth
case|:
return|return
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|CB_Enabled
argument_list|)
operator|.
name|pixmap
operator|.
name|width
argument_list|()
return|;
case|case
name|PM_IndicatorHeight
case|:
return|return
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|CB_Enabled
argument_list|)
operator|.
name|pixmap
operator|.
name|height
argument_list|()
return|;
case|case
name|PM_CheckBoxLabelSpacing
case|:
block|{
specifier|const
name|QPixmapStylePixmap
modifier|&
name|pix
init|=
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|CB_Enabled
argument_list|)
decl_stmt|;
return|return
name|qMax
argument_list|(
name|qMax
argument_list|(
name|pix
operator|.
name|margins
operator|.
name|left
argument_list|()
argument_list|,
name|pix
operator|.
name|margins
operator|.
name|right
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
name|pix
operator|.
name|margins
operator|.
name|top
argument_list|()
argument_list|,
name|pix
operator|.
name|margins
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
case|case
name|PM_ExclusiveIndicatorWidth
case|:
return|return
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|RB_Enabled
argument_list|)
operator|.
name|pixmap
operator|.
name|width
argument_list|()
return|;
case|case
name|PM_ExclusiveIndicatorHeight
case|:
return|return
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|RB_Enabled
argument_list|)
operator|.
name|pixmap
operator|.
name|height
argument_list|()
return|;
case|case
name|PM_RadioButtonLabelSpacing
case|:
block|{
specifier|const
name|QPixmapStylePixmap
modifier|&
name|pix
init|=
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|RB_Enabled
argument_list|)
decl_stmt|;
return|return
name|qMax
argument_list|(
name|qMax
argument_list|(
name|pix
operator|.
name|margins
operator|.
name|left
argument_list|()
argument_list|,
name|pix
operator|.
name|margins
operator|.
name|right
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
name|pix
operator|.
name|margins
operator|.
name|top
argument_list|()
argument_list|,
name|pix
operator|.
name|margins
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
case|case
name|PM_SliderThickness
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|QPixmapStyleDescriptor
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|SG_HEnabled
else|:
name|SG_VEnabled
argument_list|)
decl_stmt|;
return|return
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|desc
operator|.
name|size
operator|.
name|height
argument_list|()
else|:
name|desc
operator|.
name|size
operator|.
name|width
argument_list|()
return|;
block|}
break|break;
case|case
name|PM_SliderControlThickness
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|QPixmapStylePixmap
name|pix
init|=
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|SH_HEnabled
else|:
name|SH_VEnabled
argument_list|)
decl_stmt|;
return|return
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|pix
operator|.
name|pixmap
operator|.
name|height
argument_list|()
else|:
name|pix
operator|.
name|pixmap
operator|.
name|width
argument_list|()
return|;
block|}
break|break;
case|case
name|PM_SliderLength
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|QPixmapStylePixmap
name|pix
init|=
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|SH_HEnabled
else|:
name|SH_VEnabled
argument_list|)
decl_stmt|;
return|return
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|pix
operator|.
name|pixmap
operator|.
name|width
argument_list|()
else|:
name|pix
operator|.
name|pixmap
operator|.
name|height
argument_list|()
return|;
block|}
break|break;
case|case
name|PM_ScrollBarExtent
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|QPixmapStyleDescriptor
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|SB_Horizontal
else|:
name|SB_Vertical
argument_list|)
decl_stmt|;
return|return
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|desc
operator|.
name|size
operator|.
name|height
argument_list|()
else|:
name|desc
operator|.
name|size
operator|.
name|width
argument_list|()
return|;
block|}
break|break;
case|case
name|PM_ScrollBarSliderMin
case|:
return|return
literal|0
return|;
default|default:
empty_stmt|;
block|}
return|return
name|QCommonStyle
operator|::
name|pixelMetric
argument_list|(
name|metric
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|styleHint
name|int
name|QPixmapStyle
operator|::
name|styleHint
parameter_list|(
name|StyleHint
name|hint
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QStyleHintReturn
modifier|*
name|returnData
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|SH_EtchDisabledText
case|:
return|return
literal|false
return|;
case|case
name|SH_ComboBox_Popup
case|:
return|return
literal|false
return|;
default|default:
empty_stmt|;
block|}
return|return
name|QCommonStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|option
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|hitTestComplexControl
name|QStyle
operator|::
name|SubControl
name|QPixmapStyle
operator|::
name|hitTestComplexControl
parameter_list|(
name|QStyle
operator|::
name|ComplexControl
name|control
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
specifier|const
name|SubControl
name|sc
init|=
name|QCommonStyle
operator|::
name|hitTestComplexControl
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|pos
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|control
operator|==
name|CC_ScrollBar
condition|)
block|{
if|if
condition|(
name|sc
operator|==
name|SC_ScrollBarAddLine
condition|)
return|return
name|SC_ScrollBarAddPage
return|;
elseif|else
if|if
condition|(
name|sc
operator|==
name|SC_ScrollBarSubLine
condition|)
return|return
name|SC_ScrollBarSubPage
return|;
block|}
return|return
name|sc
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|eventFilter
name|bool
name|QPixmapStyle
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|watched
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapStyle
argument_list|)
expr_stmt|;
if|if
condition|(
name|QSlider
modifier|*
name|slider
init|=
name|qobject_cast
argument_list|<
name|QSlider
operator|*
argument_list|>
argument_list|(
name|watched
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
case|case
name|QEvent
operator|::
name|MouseMove
case|:
name|slider
operator|->
name|update
argument_list|()
expr_stmt|;
break|break;
default|default:
empty_stmt|;
block|}
block|}
if|if
condition|(
name|QComboBox
modifier|*
name|comboBox
init|=
name|qobject_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|watched
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
name|comboBox
operator|->
name|setProperty
argument_list|(
literal|"_pixmapstyle_combobox_pressed"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|repaint
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|comboBox
operator|->
name|setProperty
argument_list|(
literal|"_pixmapstyle_combobox_pressed"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|repaint
argument_list|()
expr_stmt|;
if|if
condition|(
name|comboBox
operator|->
name|view
argument_list|()
condition|)
block|{
if|if
condition|(
name|comboBox
operator|->
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
operator|||
operator|(
operator|!
name|comboBox
operator|->
name|isEnabled
argument_list|()
operator|)
condition|)
name|comboBox
operator|->
name|hidePopup
argument_list|()
expr_stmt|;
else|else
name|comboBox
operator|->
name|showPopup
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
empty_stmt|;
block|}
block|}
if|if
condition|(
name|qstrcmp
argument_list|(
name|watched
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
literal|"QComboBoxPrivateContainer"
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Show
condition|)
block|{
name|QWidget
modifier|*
name|widget
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|watched
argument_list|)
decl_stmt|;
name|int
name|yPopup
init|=
name|widget
operator|->
name|geometry
argument_list|()
operator|.
name|top
argument_list|()
decl_stmt|;
name|int
name|yCombo
init|=
name|widget
operator|->
name|parentWidget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|y
argument_list|()
decl_stmt|;
name|QRect
name|geom
init|=
name|widget
operator|->
name|geometry
argument_list|()
decl_stmt|;
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|DD_ButtonEnabled
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|up
init|=
name|yPopup
operator|<
name|yCombo
decl_stmt|;
name|geom
operator|.
name|moveTop
argument_list|(
name|geom
operator|.
name|top
argument_list|()
operator|+
operator|(
name|up
condition|?
name|desc
operator|.
name|margins
operator|.
name|top
argument_list|()
else|:
operator|-
name|desc
operator|.
name|margins
operator|.
name|bottom
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setGeometry
argument_list|(
name|geom
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setProperty
argument_list|(
literal|"_pixmapstyle_combobox_up"
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|widget
operator|->
name|parentWidget
argument_list|()
operator|->
name|setProperty
argument_list|(
literal|"_pixmapstyle_combobox_up"
argument_list|,
name|up
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|QCommonStyle
operator|::
name|eventFilter
argument_list|(
name|watched
argument_list|,
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPixmapStyle::addDescriptor(QPixmapStyle::ControlDescriptor control, const QString&fileName, QMargins margins, QTileRules tileRules)      Associates the pixmap having the given \a fileName with the given \a control. The \a margins parameter describe the boundaries     of the pixmap's top-left, top-right, bottom-left and bottom-right corners, as well as the left, right, top and bottorm segments     and the middle. The \a tileRules parameter describes how QPixmapStyle is supposed to handle the scaling of the center of the  pixmap.      Use QPixmapStyle::addPixmap() for controls that are not resizable.      \snippet styles/qcustompixmapstyle.cpp 1      \sa addPixmap, copyDescriptor  */
end_comment
begin_function
DECL|function|addDescriptor
name|void
name|QPixmapStyle
operator|::
name|addDescriptor
parameter_list|(
name|QPixmapStyle
operator|::
name|ControlDescriptor
name|control
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|QMargins
name|margins
parameter_list|,
name|QTileRules
name|tileRules
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapStyle
argument_list|)
expr_stmt|;
name|QPixmapStyleDescriptor
name|desc
decl_stmt|;
name|QImage
name|image
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|desc
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|desc
operator|.
name|margins
operator|=
name|margins
expr_stmt|;
name|desc
operator|.
name|tileRules
operator|=
name|tileRules
expr_stmt|;
name|desc
operator|.
name|size
operator|=
name|image
operator|.
name|size
argument_list|()
expr_stmt|;
name|d
operator|->
name|descriptors
index|[
name|control
index|]
operator|=
name|desc
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPixmapStyle::copyDescriptor(QPixmapStyle::ControlDescriptor source, QPixmapStyle::ControlDescriptor dest)      Copies the data associated with the \a source descriptor to the \a dest descriptor.      \snippet styles/qcustompixmapstyle.cpp 2 */
end_comment
begin_function
DECL|function|copyDescriptor
name|void
name|QPixmapStyle
operator|::
name|copyDescriptor
parameter_list|(
name|QPixmapStyle
operator|::
name|ControlDescriptor
name|source
parameter_list|,
name|QPixmapStyle
operator|::
name|ControlDescriptor
name|dest
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapStyle
argument_list|)
expr_stmt|;
name|d
operator|->
name|descriptors
index|[
name|dest
index|]
operator|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPixmapStyle::drawCachedPixmap(QPixmapStyle::ControlDescriptor control, const QRect&rect, QPainter *painter) const      Draws the image associated with the current \a control on the given \a rect using the given \a painter. */
end_comment
begin_function
DECL|function|drawCachedPixmap
name|void
name|QPixmapStyle
operator|::
name|drawCachedPixmap
parameter_list|(
name|QPixmapStyle
operator|::
name|ControlDescriptor
name|control
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|descriptors
operator|.
name|contains
argument_list|(
name|control
argument_list|)
condition|)
return|return;
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|control
argument_list|)
decl_stmt|;
specifier|const
name|QPixmap
name|pix
init|=
name|d
operator|->
name|getCachedPixmap
argument_list|(
name|control
argument_list|,
name|desc
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|pix
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPixmap
argument_list|(
name|rect
argument_list|,
name|pix
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPixmapStyle::addPixmap(ControlPixmap control, const QString&fileName, QMargins margins)      Use this function to style statically sized controls such as check boxes.      \sa addDescriptor, copyPixmap */
end_comment
begin_function
DECL|function|addPixmap
name|void
name|QPixmapStyle
operator|::
name|addPixmap
parameter_list|(
name|ControlPixmap
name|control
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|QMargins
name|margins
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapStyle
argument_list|)
expr_stmt|;
name|QPixmapStylePixmap
name|pix
decl_stmt|;
name|QPixmap
name|image
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|pix
operator|.
name|pixmap
operator|=
name|image
expr_stmt|;
name|pix
operator|.
name|margins
operator|=
name|margins
expr_stmt|;
name|d
operator|->
name|pixmaps
index|[
name|control
index|]
operator|=
name|pix
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     \fn void QPixmapStyle::copyPixmap(QPixmapStyle::ControlPixmap source, QPixmapStyle::ControlPixmap dest)      Copies the data associated with the \a source pixmap to the \a dest pixmap.      \sa addPixmap, addDescriptor, copyDescriptor */
end_comment
begin_function
DECL|function|copyPixmap
name|void
name|QPixmapStyle
operator|::
name|copyPixmap
parameter_list|(
name|QPixmapStyle
operator|::
name|ControlPixmap
name|source
parameter_list|,
name|QPixmapStyle
operator|::
name|ControlPixmap
name|dest
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapStyle
argument_list|)
expr_stmt|;
name|d
operator|->
name|pixmaps
index|[
name|dest
index|]
operator|=
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Constructs a QPixmapStyle object. */
end_comment
begin_constructor
DECL|function|QPixmapStyle
name|QPixmapStyle
operator|::
name|QPixmapStyle
parameter_list|(
name|QPixmapStylePrivate
modifier|&
name|dd
parameter_list|)
member_init_list|:
name|QCommonStyle
argument_list|(
name|dd
argument_list|)
block|{}
end_constructor
begin_function
DECL|function|drawPushButton
name|void
name|QPixmapStyle
operator|::
name|drawPushButton
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
specifier|const
block|{
specifier|const
name|bool
name|checked
init|=
name|option
operator|->
name|state
operator|&
name|State_On
decl_stmt|;
specifier|const
name|bool
name|pressed
init|=
name|option
operator|->
name|state
operator|&
name|State_Sunken
decl_stmt|;
specifier|const
name|bool
name|enabled
init|=
name|option
operator|->
name|state
operator|&
name|State_Enabled
decl_stmt|;
name|ControlDescriptor
name|control
init|=
name|PB_Enabled
decl_stmt|;
if|if
condition|(
name|enabled
condition|)
name|control
operator|=
name|pressed
condition|?
name|PB_Pressed
else|:
operator|(
name|checked
condition|?
name|PB_Checked
else|:
name|PB_Enabled
operator|)
expr_stmt|;
else|else
name|control
operator|=
name|checked
condition|?
name|PB_PressedDisabled
else|:
name|PB_Disabled
expr_stmt|;
name|drawCachedPixmap
argument_list|(
name|control
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|painter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawLineEdit
name|void
name|QPixmapStyle
operator|::
name|drawLineEdit
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
comment|// Don't draw for the line edit inside a combobox
if|if
condition|(
name|widget
operator|&&
name|qobject_cast
argument_list|<
specifier|const
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
return|return;
specifier|const
name|bool
name|enabled
init|=
name|option
operator|->
name|state
operator|&
name|State_Enabled
decl_stmt|;
specifier|const
name|bool
name|focused
init|=
name|option
operator|->
name|state
operator|&
name|State_HasFocus
decl_stmt|;
name|ControlDescriptor
name|control
init|=
name|enabled
condition|?
operator|(
name|focused
condition|?
name|LE_Focused
else|:
name|LE_Enabled
operator|)
else|:
name|LE_Disabled
decl_stmt|;
name|drawCachedPixmap
argument_list|(
name|control
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|painter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTextEdit
name|void
name|QPixmapStyle
operator|::
name|drawTextEdit
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
specifier|const
block|{
specifier|const
name|bool
name|enabled
init|=
name|option
operator|->
name|state
operator|&
name|State_Enabled
decl_stmt|;
specifier|const
name|bool
name|focused
init|=
name|option
operator|->
name|state
operator|&
name|State_HasFocus
decl_stmt|;
name|ControlDescriptor
name|control
init|=
name|enabled
condition|?
operator|(
name|focused
condition|?
name|TE_Focused
else|:
name|TE_Enabled
operator|)
else|:
name|TE_Disabled
decl_stmt|;
name|drawCachedPixmap
argument_list|(
name|control
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|painter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawCheckBox
name|void
name|QPixmapStyle
operator|::
name|drawCheckBox
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|down
init|=
name|button
operator|->
name|state
operator|&
name|State_Sunken
decl_stmt|;
specifier|const
name|bool
name|enabled
init|=
name|button
operator|->
name|state
operator|&
name|State_Enabled
decl_stmt|;
specifier|const
name|bool
name|on
init|=
name|button
operator|->
name|state
operator|&
name|State_On
decl_stmt|;
name|ControlPixmap
name|control
decl_stmt|;
if|if
condition|(
name|enabled
condition|)
name|control
operator|=
name|on
condition|?
operator|(
name|down
condition|?
name|CB_PressedChecked
else|:
name|CB_Checked
operator|)
else|:
operator|(
name|down
condition|?
name|CB_Pressed
else|:
name|CB_Enabled
operator|)
expr_stmt|;
else|else
name|control
operator|=
name|on
condition|?
name|CB_DisabledChecked
else|:
name|CB_Disabled
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|button
operator|->
name|rect
argument_list|,
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|control
argument_list|)
operator|.
name|pixmap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawRadioButton
name|void
name|QPixmapStyle
operator|::
name|drawRadioButton
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|down
init|=
name|button
operator|->
name|state
operator|&
name|State_Sunken
decl_stmt|;
specifier|const
name|bool
name|enabled
init|=
name|button
operator|->
name|state
operator|&
name|State_Enabled
decl_stmt|;
specifier|const
name|bool
name|on
init|=
name|button
operator|->
name|state
operator|&
name|State_On
decl_stmt|;
name|ControlPixmap
name|control
decl_stmt|;
if|if
condition|(
name|enabled
condition|)
name|control
operator|=
name|on
condition|?
name|RB_Checked
else|:
operator|(
name|down
condition|?
name|RB_Pressed
else|:
name|RB_Enabled
operator|)
expr_stmt|;
else|else
name|control
operator|=
name|on
condition|?
name|RB_DisabledChecked
else|:
name|RB_Disabled
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|button
operator|->
name|rect
argument_list|,
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|control
argument_list|)
operator|.
name|pixmap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPanelItemViewItem
name|void
name|QPixmapStyle
operator|::
name|drawPanelItemViewItem
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
name|ControlPixmap
name|cp
init|=
name|ID_Separator
decl_stmt|;
name|ControlDescriptor
name|cd
init|=
name|ID_Selected
decl_stmt|;
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|property
argument_list|(
literal|"_pixmap_combobox_list"
argument_list|)
operator|.
name|toBool
argument_list|()
condition|)
block|{
name|cp
operator|=
name|DD_ItemSeparator
expr_stmt|;
name|cd
operator|=
name|DD_ItemSelected
expr_stmt|;
block|}
name|QPixmap
name|pix
init|=
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|cp
argument_list|)
operator|.
name|pixmap
decl_stmt|;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|rect
operator|.
name|setBottom
argument_list|(
name|rect
operator|.
name|top
argument_list|()
operator|+
name|pix
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|rect
argument_list|,
name|pix
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
block|{
name|rect
operator|=
name|option
operator|->
name|rect
expr_stmt|;
name|rect
operator|.
name|setTop
argument_list|(
name|rect
operator|.
name|top
argument_list|()
operator|+
name|pix
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|drawCachedPixmap
argument_list|(
name|cd
argument_list|,
name|rect
argument_list|,
name|painter
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawProgressBarBackground
name|void
name|QPixmapStyle
operator|::
name|drawProgressBarBackground
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
specifier|const
block|{
name|bool
name|vertical
init|=
literal|false
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|pb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|vertical
operator|=
name|pb
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
expr_stmt|;
block|}
name|drawCachedPixmap
argument_list|(
name|vertical
condition|?
name|PB_VBackground
else|:
name|PB_HBackground
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|painter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawProgressBarLabel
name|void
name|QPixmapStyle
operator|::
name|drawProgressBarLabel
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
specifier|const
block|{
if|if
condition|(
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|pb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|bool
name|vertical
init|=
name|pb
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
decl_stmt|;
if|if
condition|(
operator|!
name|vertical
condition|)
block|{
name|QPalette
operator|::
name|ColorRole
name|textRole
init|=
name|QPalette
operator|::
name|ButtonText
decl_stmt|;
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|pb
operator|->
name|rect
argument_list|,
name|Qt
operator|::
name|AlignCenter
operator||
name|Qt
operator|::
name|TextSingleLine
argument_list|,
name|pb
operator|->
name|palette
argument_list|,
name|pb
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|pb
operator|->
name|text
argument_list|,
name|textRole
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawProgressBarFill
name|void
name|QPixmapStyle
operator|::
name|drawProgressBarFill
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
specifier|const
block|{
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|pbar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|vertical
init|=
name|pbar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
decl_stmt|;
specifier|const
name|bool
name|flip
init|=
operator|(
name|pbar
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
operator|^
name|pbar
operator|->
name|invertedAppearance
decl_stmt|;
if|if
condition|(
name|pbar
operator|->
name|progress
operator|==
name|pbar
operator|->
name|maximum
condition|)
block|{
name|drawCachedPixmap
argument_list|(
name|vertical
condition|?
name|PB_VComplete
else|:
name|PB_HComplete
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|painter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|pbar
operator|->
name|progress
operator|==
literal|0
condition|)
return|return;
specifier|const
name|int
name|maximum
init|=
name|pbar
operator|->
name|maximum
decl_stmt|;
specifier|const
name|qreal
name|ratio
init|=
name|qreal
argument_list|(
name|vertical
condition|?
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
else|:
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|)
operator|/
name|maximum
decl_stmt|;
specifier|const
name|int
name|progress
init|=
name|pbar
operator|->
name|progress
operator|*
name|ratio
decl_stmt|;
name|QRect
name|optRect
init|=
name|option
operator|->
name|rect
decl_stmt|;
if|if
condition|(
name|vertical
condition|)
block|{
if|if
condition|(
name|flip
condition|)
name|optRect
operator|.
name|setBottom
argument_list|(
name|optRect
operator|.
name|top
argument_list|()
operator|+
name|progress
operator|-
literal|1
argument_list|)
expr_stmt|;
else|else
name|optRect
operator|.
name|setTop
argument_list|(
name|optRect
operator|.
name|bottom
argument_list|()
operator|-
name|progress
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|flip
condition|)
name|optRect
operator|.
name|setLeft
argument_list|(
name|optRect
operator|.
name|right
argument_list|()
operator|-
name|progress
operator|+
literal|1
argument_list|)
expr_stmt|;
else|else
name|optRect
operator|.
name|setRight
argument_list|(
name|optRect
operator|.
name|left
argument_list|()
operator|+
name|progress
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|drawCachedPixmap
argument_list|(
name|vertical
condition|?
name|PB_VContent
else|:
name|PB_HContent
argument_list|,
name|optRect
argument_list|,
name|painter
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawSlider
name|void
name|QPixmapStyle
operator|::
name|drawSlider
parameter_list|(
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|slider
condition|)
return|return;
specifier|const
name|bool
name|enabled
init|=
name|option
operator|->
name|state
operator|&
name|State_Enabled
decl_stmt|;
specifier|const
name|bool
name|pressed
init|=
name|option
operator|->
name|state
operator|&
name|State_Sunken
decl_stmt|;
specifier|const
name|Qt
operator|::
name|Orientation
name|orient
init|=
name|slider
operator|->
name|orientation
decl_stmt|;
specifier|const
name|QRect
name|handle
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_Slider
argument_list|,
name|option
argument_list|,
name|SC_SliderHandle
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|subControls
operator|&
name|SC_SliderGroove
condition|)
block|{
name|QRect
name|groove
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_Slider
argument_list|,
name|option
argument_list|,
name|SC_SliderGroove
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|groove
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// Draw the background
name|ControlDescriptor
name|control
decl_stmt|;
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|control
operator|=
name|enabled
condition|?
name|SG_HEnabled
else|:
name|SG_HDisabled
expr_stmt|;
else|else
name|control
operator|=
name|enabled
condition|?
name|SG_VEnabled
else|:
name|SG_VDisabled
expr_stmt|;
name|drawCachedPixmap
argument_list|(
name|control
argument_list|,
name|groove
argument_list|,
name|painter
argument_list|)
expr_stmt|;
comment|// Draw the active part
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|control
operator|=
name|enabled
condition|?
operator|(
name|pressed
condition|?
name|SG_HActivePressed
else|:
name|SG_HActiveEnabled
operator|)
else|:
name|SG_HActiveDisabled
expr_stmt|;
block|}
else|else
block|{
name|control
operator|=
name|enabled
condition|?
operator|(
name|pressed
condition|?
name|SG_VActivePressed
else|:
name|SG_VActiveEnabled
operator|)
else|:
name|SG_VActiveDisabled
expr_stmt|;
block|}
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|control
argument_list|)
decl_stmt|;
specifier|const
name|QPixmap
name|pix
init|=
name|d
operator|->
name|getCachedPixmap
argument_list|(
name|control
argument_list|,
name|desc
argument_list|,
name|groove
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pix
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|groove
operator|.
name|setRight
argument_list|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|handle
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
else|:
name|handle
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|groove
argument_list|,
name|pix
argument_list|,
name|groove
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|option
operator|->
name|subControls
operator|&
name|SC_SliderHandle
condition|)
block|{
if|if
condition|(
name|handle
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|ControlPixmap
name|pix
decl_stmt|;
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|pix
operator|=
name|enabled
condition|?
operator|(
name|pressed
condition|?
name|SH_HPressed
else|:
name|SH_HEnabled
operator|)
else|:
name|SH_HDisabled
expr_stmt|;
else|else
name|pix
operator|=
name|enabled
condition|?
operator|(
name|pressed
condition|?
name|SH_VPressed
else|:
name|SH_VEnabled
operator|)
else|:
name|SH_VDisabled
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|handle
argument_list|,
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|pix
argument_list|)
operator|.
name|pixmap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawComboBox
name|void
name|QPixmapStyle
operator|::
name|drawComboBox
parameter_list|(
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|enabled
init|=
name|option
operator|->
name|state
operator|&
name|State_Enabled
decl_stmt|;
specifier|const
name|bool
name|pressed
init|=
name|widget
operator|->
name|property
argument_list|(
literal|"_pixmapstyle_combobox_pressed"
argument_list|)
operator|.
name|toBool
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|opened
init|=
name|option
operator|->
name|state
operator|&
name|State_On
decl_stmt|;
name|ControlDescriptor
name|control
init|=
name|enabled
condition|?
operator|(
name|pressed
condition|?
name|DD_ButtonPressed
else|:
name|DD_ButtonEnabled
operator|)
else|:
name|DD_ButtonDisabled
decl_stmt|;
name|drawCachedPixmap
argument_list|(
name|control
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|painter
argument_list|)
expr_stmt|;
name|ControlPixmap
name|cp
init|=
name|enabled
condition|?
operator|(
name|opened
condition|?
name|DD_ArrowOpen
else|:
operator|(
name|pressed
condition|?
name|DD_ArrowPressed
else|:
name|DD_ArrowEnabled
operator|)
operator|)
else|:
name|DD_ArrowDisabled
decl_stmt|;
name|QPixmapStylePixmap
name|pix
init|=
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|cp
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|comboBoxSubControlRect
argument_list|(
name|option
argument_list|,
name|SC_ComboBoxArrow
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|rect
argument_list|,
name|pix
operator|.
name|pixmap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawScrollBar
name|void
name|QPixmapStyle
operator|::
name|drawScrollBar
parameter_list|(
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
comment|// Do not draw the scrollbar
if|if
condition|(
name|slider
operator|->
name|minimum
operator|==
name|slider
operator|->
name|maximum
condition|)
return|return;
name|QRect
name|rect
init|=
name|scrollBarSubControlRect
argument_list|(
name|option
argument_list|,
name|SC_ScrollBarSlider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|ControlDescriptor
name|control
init|=
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|SB_Horizontal
else|:
name|SB_Vertical
decl_stmt|;
name|drawCachedPixmap
argument_list|(
name|control
argument_list|,
name|rect
argument_list|,
name|painter
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|pushButtonSizeFromContents
name|QSize
name|QPixmapStyle
operator|::
name|pushButtonSizeFromContents
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QSize
modifier|&
name|contentsSize
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|PB_Enabled
argument_list|)
decl_stmt|;
specifier|const
name|int
name|bm
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ButtonMargin
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|contentsSize
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|contentsSize
operator|.
name|height
argument_list|()
decl_stmt|;
name|w
operator|+=
name|desc
operator|.
name|margins
operator|.
name|left
argument_list|()
operator|+
name|desc
operator|.
name|margins
operator|.
name|right
argument_list|()
operator|+
name|bm
expr_stmt|;
name|h
operator|+=
name|desc
operator|.
name|margins
operator|.
name|top
argument_list|()
operator|+
name|desc
operator|.
name|margins
operator|.
name|bottom
argument_list|()
operator|+
name|bm
expr_stmt|;
return|return
name|d
operator|->
name|computeSize
argument_list|(
name|desc
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|lineEditSizeFromContents
name|QSize
name|QPixmapStyle
operator|::
name|lineEditSizeFromContents
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
parameter_list|,
specifier|const
name|QSize
modifier|&
name|contentsSize
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|LE_Enabled
argument_list|)
decl_stmt|;
specifier|const
name|int
name|border
init|=
literal|2
operator|*
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|contentsSize
operator|.
name|width
argument_list|()
operator|+
name|border
operator|+
name|desc
operator|.
name|margins
operator|.
name|left
argument_list|()
operator|+
name|desc
operator|.
name|margins
operator|.
name|right
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|contentsSize
operator|.
name|height
argument_list|()
operator|+
name|border
operator|+
name|desc
operator|.
name|margins
operator|.
name|top
argument_list|()
operator|+
name|desc
operator|.
name|margins
operator|.
name|bottom
argument_list|()
decl_stmt|;
return|return
name|d
operator|->
name|computeSize
argument_list|(
name|desc
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|progressBarSizeFromContents
name|QSize
name|QPixmapStyle
operator|::
name|progressBarSizeFromContents
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QSize
modifier|&
name|contentsSize
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
name|bool
name|vertical
init|=
literal|false
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|pb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|vertical
operator|=
name|pb
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
expr_stmt|;
block|}
name|QSize
name|result
init|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|CT_Slider
argument_list|,
name|option
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|vertical
condition|)
block|{
specifier|const
name|QPixmapStyleDescriptor
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|PB_VBackground
argument_list|)
decl_stmt|;
return|return
name|QSize
argument_list|(
name|desc
operator|.
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|result
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
specifier|const
name|QPixmapStyleDescriptor
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|PB_HBackground
argument_list|)
decl_stmt|;
return|return
name|QSize
argument_list|(
name|result
operator|.
name|width
argument_list|()
argument_list|,
name|desc
operator|.
name|size
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|sliderSizeFromContents
name|QSize
name|QPixmapStyle
operator|::
name|sliderSizeFromContents
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QSize
modifier|&
name|contentsSize
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|slider
condition|)
return|return
name|QSize
argument_list|()
return|;
name|QSize
name|result
init|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|CT_Slider
argument_list|,
name|option
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|QPixmapStyleDescriptor
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|SG_HEnabled
else|:
name|SG_VEnabled
argument_list|)
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
return|return
name|QSize
argument_list|(
name|result
operator|.
name|width
argument_list|()
argument_list|,
name|desc
operator|.
name|size
operator|.
name|height
argument_list|()
argument_list|)
return|;
else|else
return|return
name|QSize
argument_list|(
name|desc
operator|.
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|result
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|comboBoxSizeFromContents
name|QSize
name|QPixmapStyle
operator|::
name|comboBoxSizeFromContents
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QSize
modifier|&
name|contentsSize
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|DD_ButtonEnabled
argument_list|)
decl_stmt|;
name|QSize
name|result
init|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|CT_ComboBox
argument_list|,
name|option
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|computeSize
argument_list|(
name|desc
argument_list|,
name|result
operator|.
name|width
argument_list|()
argument_list|,
name|result
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|itemViewSizeFromContents
name|QSize
name|QPixmapStyle
operator|::
name|itemViewSizeFromContents
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QSize
modifier|&
name|contentsSize
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
name|QSize
name|size
init|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|CT_ItemViewItem
argument_list|,
name|option
argument_list|,
name|contentsSize
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|ControlPixmap
name|cp
init|=
name|ID_Separator
decl_stmt|;
name|ControlDescriptor
name|cd
init|=
name|ID_Selected
decl_stmt|;
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|property
argument_list|(
literal|"_pixmap_combobox_list"
argument_list|)
operator|.
name|toBool
argument_list|()
condition|)
block|{
name|cp
operator|=
name|DD_ItemSeparator
expr_stmt|;
name|cd
operator|=
name|DD_ItemSelected
expr_stmt|;
block|}
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|cd
argument_list|)
decl_stmt|;
specifier|const
name|QPixmapStylePixmap
modifier|&
name|pix
init|=
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|cp
argument_list|)
decl_stmt|;
name|size
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|desc
operator|.
name|size
operator|.
name|height
argument_list|()
operator|+
name|pix
operator|.
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|size
return|;
block|}
end_function
begin_function
DECL|function|comboBoxSubControlRect
name|QRect
name|QPixmapStyle
operator|::
name|comboBoxSubControlRect
parameter_list|(
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|QStyle
operator|::
name|SubControl
name|sc
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|option
operator|->
name|rect
decl_stmt|;
comment|// Default size
specifier|const
name|QPixmapStylePixmap
modifier|&
name|pix
init|=
name|d
operator|->
name|pixmaps
operator|.
name|value
argument_list|(
name|DD_ArrowEnabled
argument_list|)
decl_stmt|;
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
init|=
name|d
operator|->
name|descriptors
operator|.
name|value
argument_list|(
name|DD_ButtonEnabled
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|sc
condition|)
block|{
case|case
name|SC_ComboBoxArrow
case|:
name|r
operator|.
name|setRect
argument_list|(
name|r
operator|.
name|right
argument_list|()
operator|-
name|pix
operator|.
name|margins
operator|.
name|right
argument_list|()
operator|-
name|pix
operator|.
name|pixmap
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|pix
operator|.
name|margins
operator|.
name|top
argument_list|()
argument_list|,
name|pix
operator|.
name|pixmap
operator|.
name|width
argument_list|()
argument_list|,
name|pix
operator|.
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ComboBoxEditField
case|:
name|r
operator|.
name|adjust
argument_list|(
name|desc
operator|.
name|margins
operator|.
name|left
argument_list|()
argument_list|,
name|desc
operator|.
name|margins
operator|.
name|right
argument_list|()
argument_list|,
operator|-
name|desc
operator|.
name|margins
operator|.
name|right
argument_list|()
argument_list|,
operator|-
name|desc
operator|.
name|margins
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setRight
argument_list|(
name|r
operator|.
name|right
argument_list|()
operator|-
name|pix
operator|.
name|margins
operator|.
name|right
argument_list|()
operator|-
name|pix
operator|.
name|margins
operator|.
name|left
argument_list|()
operator|-
name|pix
operator|.
name|pixmap
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|r
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|scrollBarSubControlRect
name|QRect
name|QPixmapStyle
operator|::
name|scrollBarSubControlRect
parameter_list|(
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|QStyle
operator|::
name|SubControl
name|sc
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
specifier|const
block|{
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|length
init|=
operator|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|slider
operator|->
name|rect
operator|.
name|width
argument_list|()
else|:
name|slider
operator|->
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|page
init|=
name|length
operator|*
name|slider
operator|->
name|pageStep
operator|/
operator|(
name|slider
operator|->
name|maximum
operator|-
name|slider
operator|->
name|minimum
operator|+
name|slider
operator|->
name|pageStep
operator|)
decl_stmt|;
name|int
name|pos
init|=
name|length
operator|*
name|slider
operator|->
name|sliderValue
operator|/
operator|(
name|slider
operator|->
name|maximum
operator|-
name|slider
operator|->
name|minimum
operator|+
name|slider
operator|->
name|pageStep
operator|)
decl_stmt|;
name|pos
operator|=
name|qMin
argument_list|(
name|pos
operator|+
name|page
argument_list|,
name|length
argument_list|)
operator|-
name|page
expr_stmt|;
name|QRect
name|rect
init|=
name|slider
operator|->
name|rect
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
switch|switch
condition|(
name|sc
condition|)
block|{
case|case
name|SC_ScrollBarAddPage
case|:
name|rect
operator|.
name|setLeft
argument_list|(
name|pos
operator|+
name|page
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
case|case
name|SC_ScrollBarSubPage
case|:
name|rect
operator|.
name|setRight
argument_list|(
name|pos
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
case|case
name|SC_ScrollBarGroove
case|:
return|return
name|rect
return|;
case|case
name|SC_ScrollBarSlider
case|:
name|rect
operator|.
name|setLeft
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setRight
argument_list|(
name|pos
operator|+
name|page
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
default|default:
empty_stmt|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|sc
condition|)
block|{
case|case
name|SC_ScrollBarAddPage
case|:
name|rect
operator|.
name|setTop
argument_list|(
name|pos
operator|+
name|page
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
case|case
name|SC_ScrollBarSubPage
case|:
name|rect
operator|.
name|setBottom
argument_list|(
name|pos
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
case|case
name|SC_ScrollBarGroove
case|:
return|return
name|rect
return|;
case|case
name|SC_ScrollBarSlider
case|:
name|rect
operator|.
name|setTop
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setBottom
argument_list|(
name|pos
operator|+
name|page
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
default|default:
empty_stmt|;
block|}
block|}
block|}
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|scale
name|QPixmap
name|QPixmapStylePrivate
operator|::
name|scale
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
parameter_list|)
block|{
name|QPixmap
name|result
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
block|{
specifier|const
name|QColor
name|transparent
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|result
operator|.
name|fill
argument_list|(
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
specifier|const
name|QMargins
name|margins
init|=
name|desc
operator|.
name|margins
decl_stmt|;
name|qDrawBorderPixmap
argument_list|(
operator|&
name|p
argument_list|,
name|result
operator|.
name|rect
argument_list|()
argument_list|,
name|margins
argument_list|,
name|pixmap
argument_list|,
name|pixmap
operator|.
name|rect
argument_list|()
argument_list|,
name|margins
argument_list|,
name|desc
operator|.
name|tileRules
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|getCachedPixmap
name|QPixmap
name|QPixmapStylePrivate
operator|::
name|getCachedPixmap
parameter_list|(
name|QPixmapStyle
operator|::
name|ControlDescriptor
name|control
parameter_list|,
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QPixmapStyle
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|sizeString
init|=
name|QString
operator|::
name|number
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
operator|%
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
operator|%
name|QString
operator|::
name|number
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|key
init|=
name|QLatin1String
argument_list|(
name|q
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|%
name|QString
operator|::
name|number
argument_list|(
name|control
argument_list|)
operator|%
name|QLatin1Char
argument_list|(
literal|'@'
argument_list|)
operator|%
name|sizeString
decl_stmt|;
name|QPixmap
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
operator|&
name|result
argument_list|)
condition|)
block|{
name|QPixmap
name|source
argument_list|(
name|desc
operator|.
name|fileName
argument_list|)
decl_stmt|;
name|result
operator|=
name|scale
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|source
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|computeSize
name|QSize
name|QPixmapStylePrivate
operator|::
name|computeSize
parameter_list|(
specifier|const
name|QPixmapStyleDescriptor
modifier|&
name|desc
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|desc
operator|.
name|tileRules
operator|.
name|horizontal
operator|!=
name|Qt
operator|::
name|RepeatTile
condition|)
name|width
operator|=
name|qMax
argument_list|(
name|width
argument_list|,
name|desc
operator|.
name|size
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|tileRules
operator|.
name|vertical
operator|!=
name|Qt
operator|::
name|RepeatTile
condition|)
name|height
operator|=
name|qMax
argument_list|(
name|height
argument_list|,
name|desc
operator|.
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
