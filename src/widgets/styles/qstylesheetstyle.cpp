begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STYLE_STYLESHEET
end_ifndef
begin_include
include|#
directive|include
file|"qstylesheetstyle_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qcssutil_p.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qmenubar.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindowsstyle_p.h>
end_include
begin_include
include|#
directive|include
file|<qcombobox.h>
end_include
begin_include
include|#
directive|include
file|"private/qcssparser_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qmath_p.h"
end_include
begin_include
include|#
directive|include
file|<qabstractscrollarea.h>
end_include
begin_include
include|#
directive|include
file|"private/qabstractscrollarea_p.h"
end_include
begin_include
include|#
directive|include
file|<qtooltip.h>
end_include
begin_include
include|#
directive|include
file|<qshareddata.h>
end_include
begin_include
include|#
directive|include
file|<qradiobutton.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbutton.h>
end_include
begin_include
include|#
directive|include
file|<qscrollbar.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qcheckbox.h>
end_include
begin_include
include|#
directive|include
file|<qstatusbar.h>
end_include
begin_include
include|#
directive|include
file|<qheaderview.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindowsstyle_p_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qstyleanimation_p.h>
end_include
begin_include
include|#
directive|include
file|<qtabbar.h>
end_include
begin_include
include|#
directive|include
file|<QMetaProperty>
end_include
begin_include
include|#
directive|include
file|<qmainwindow.h>
end_include
begin_include
include|#
directive|include
file|<qdockwidget.h>
end_include
begin_include
include|#
directive|include
file|<qmdisubwindow.h>
end_include
begin_include
include|#
directive|include
file|<qdialog.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<QAbstractSpinBox>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|"qdrawutil.h"
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qtoolbar.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_using
using|using
namespace|namespace
name|QCss
namespace|;
end_using
begin_class
DECL|class|QStyleSheetStylePrivate
class|class
name|QStyleSheetStylePrivate
super|:
specifier|public
name|QWindowsStylePrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QStyleSheetStyle
parameter_list|)
specifier|public
private|:
DECL|function|QStyleSheetStylePrivate
name|QStyleSheetStylePrivate
parameter_list|()
block|{ }
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|styleSheetCaches
specifier|static
name|QStyleSheetStyleCaches
modifier|*
name|styleSheetCaches
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* RECURSION_GUARD:  * the QStyleSheetStyle is a proxy. If used with others proxy style, we may end up with something like:  * QStyleSheetStyle -> ProxyStyle -> QStyleSheetStyle -> OriginalStyle  * Recursion may happen if the style call the widget()->style() again.  * Not to mention the performence penalty of having two lookup of rules.  *  * The first instance of QStyleSheetStyle will set globalStyleSheetStyle to itself. The second one  * will notice the globalStyleSheetStyle is not istelf and call its base style directly.  */
end_comment
begin_decl_stmt
DECL|variable|globalStyleSheetStyle
specifier|static
specifier|const
name|QStyleSheetStyle
modifier|*
name|globalStyleSheetStyle
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QStyleSheetStyleRecursionGuard
class|class
name|QStyleSheetStyleRecursionGuard
block|{
public|public:
DECL|function|QStyleSheetStyleRecursionGuard
name|QStyleSheetStyleRecursionGuard
parameter_list|(
specifier|const
name|QStyleSheetStyle
modifier|*
name|that
parameter_list|)
member_init_list|:
name|guarded
argument_list|(
name|globalStyleSheetStyle
operator|==
literal|0
argument_list|)
block|{
if|if
condition|(
name|guarded
condition|)
name|globalStyleSheetStyle
operator|=
name|that
expr_stmt|;
block|}
DECL|function|~QStyleSheetStyleRecursionGuard
name|~
name|QStyleSheetStyleRecursionGuard
parameter_list|()
block|{
if|if
condition|(
name|guarded
condition|)
name|globalStyleSheetStyle
operator|=
literal|0
expr_stmt|;
block|}
DECL|member|guarded
name|bool
name|guarded
decl_stmt|;
block|}
class|;
end_class
begin_define
DECL|macro|RECURSION_GUARD
define|#
directive|define
name|RECURSION_GUARD
parameter_list|(
name|RETURN
parameter_list|)
define|\
value|if (globalStyleSheetStyle != 0&& globalStyleSheetStyle != this) { RETURN; } \     QStyleSheetStyleRecursionGuard recursion_guard(this);
end_define
begin_define
DECL|macro|ceil
define|#
directive|define
name|ceil
parameter_list|(
name|x
parameter_list|)
value|((int)(x) + ((x)> 0&& (x) != (int)(x)))
end_define
begin_enum
DECL|enum|PseudoElement
enum|enum
name|PseudoElement
block|{
DECL|enumerator|PseudoElement_None
name|PseudoElement_None
block|,
DECL|enumerator|PseudoElement_DownArrow
name|PseudoElement_DownArrow
block|,
DECL|enumerator|PseudoElement_UpArrow
name|PseudoElement_UpArrow
block|,
DECL|enumerator|PseudoElement_LeftArrow
name|PseudoElement_LeftArrow
block|,
DECL|enumerator|PseudoElement_RightArrow
name|PseudoElement_RightArrow
block|,
DECL|enumerator|PseudoElement_Indicator
name|PseudoElement_Indicator
block|,
DECL|enumerator|PseudoElement_ExclusiveIndicator
name|PseudoElement_ExclusiveIndicator
block|,
DECL|enumerator|PseudoElement_PushButtonMenuIndicator
name|PseudoElement_PushButtonMenuIndicator
block|,
DECL|enumerator|PseudoElement_ComboBoxDropDown
name|PseudoElement_ComboBoxDropDown
block|,
DECL|enumerator|PseudoElement_ComboBoxArrow
name|PseudoElement_ComboBoxArrow
block|,
DECL|enumerator|PseudoElement_Item
name|PseudoElement_Item
block|,
DECL|enumerator|PseudoElement_SpinBoxUpButton
name|PseudoElement_SpinBoxUpButton
block|,
DECL|enumerator|PseudoElement_SpinBoxUpArrow
name|PseudoElement_SpinBoxUpArrow
block|,
DECL|enumerator|PseudoElement_SpinBoxDownButton
name|PseudoElement_SpinBoxDownButton
block|,
DECL|enumerator|PseudoElement_SpinBoxDownArrow
name|PseudoElement_SpinBoxDownArrow
block|,
DECL|enumerator|PseudoElement_GroupBoxTitle
name|PseudoElement_GroupBoxTitle
block|,
DECL|enumerator|PseudoElement_GroupBoxIndicator
name|PseudoElement_GroupBoxIndicator
block|,
DECL|enumerator|PseudoElement_ToolButtonMenu
name|PseudoElement_ToolButtonMenu
block|,
DECL|enumerator|PseudoElement_ToolButtonMenuArrow
name|PseudoElement_ToolButtonMenuArrow
block|,
DECL|enumerator|PseudoElement_ToolButtonDownArrow
name|PseudoElement_ToolButtonDownArrow
block|,
DECL|enumerator|PseudoElement_ToolBoxTab
name|PseudoElement_ToolBoxTab
block|,
DECL|enumerator|PseudoElement_ScrollBarSlider
name|PseudoElement_ScrollBarSlider
block|,
DECL|enumerator|PseudoElement_ScrollBarAddPage
name|PseudoElement_ScrollBarAddPage
block|,
DECL|enumerator|PseudoElement_ScrollBarSubPage
name|PseudoElement_ScrollBarSubPage
block|,
DECL|enumerator|PseudoElement_ScrollBarAddLine
name|PseudoElement_ScrollBarAddLine
block|,
DECL|enumerator|PseudoElement_ScrollBarSubLine
name|PseudoElement_ScrollBarSubLine
block|,
DECL|enumerator|PseudoElement_ScrollBarFirst
name|PseudoElement_ScrollBarFirst
block|,
DECL|enumerator|PseudoElement_ScrollBarLast
name|PseudoElement_ScrollBarLast
block|,
DECL|enumerator|PseudoElement_ScrollBarUpArrow
name|PseudoElement_ScrollBarUpArrow
block|,
DECL|enumerator|PseudoElement_ScrollBarDownArrow
name|PseudoElement_ScrollBarDownArrow
block|,
DECL|enumerator|PseudoElement_ScrollBarLeftArrow
name|PseudoElement_ScrollBarLeftArrow
block|,
DECL|enumerator|PseudoElement_ScrollBarRightArrow
name|PseudoElement_ScrollBarRightArrow
block|,
DECL|enumerator|PseudoElement_SplitterHandle
name|PseudoElement_SplitterHandle
block|,
DECL|enumerator|PseudoElement_ToolBarHandle
name|PseudoElement_ToolBarHandle
block|,
DECL|enumerator|PseudoElement_ToolBarSeparator
name|PseudoElement_ToolBarSeparator
block|,
DECL|enumerator|PseudoElement_MenuScroller
name|PseudoElement_MenuScroller
block|,
DECL|enumerator|PseudoElement_MenuTearoff
name|PseudoElement_MenuTearoff
block|,
DECL|enumerator|PseudoElement_MenuCheckMark
name|PseudoElement_MenuCheckMark
block|,
DECL|enumerator|PseudoElement_MenuSeparator
name|PseudoElement_MenuSeparator
block|,
DECL|enumerator|PseudoElement_MenuIcon
name|PseudoElement_MenuIcon
block|,
DECL|enumerator|PseudoElement_MenuRightArrow
name|PseudoElement_MenuRightArrow
block|,
DECL|enumerator|PseudoElement_TreeViewBranch
name|PseudoElement_TreeViewBranch
block|,
DECL|enumerator|PseudoElement_HeaderViewSection
name|PseudoElement_HeaderViewSection
block|,
DECL|enumerator|PseudoElement_HeaderViewUpArrow
name|PseudoElement_HeaderViewUpArrow
block|,
DECL|enumerator|PseudoElement_HeaderViewDownArrow
name|PseudoElement_HeaderViewDownArrow
block|,
DECL|enumerator|PseudoElement_ProgressBarChunk
name|PseudoElement_ProgressBarChunk
block|,
DECL|enumerator|PseudoElement_TabBarTab
name|PseudoElement_TabBarTab
block|,
DECL|enumerator|PseudoElement_TabBarScroller
name|PseudoElement_TabBarScroller
block|,
DECL|enumerator|PseudoElement_TabBarTear
name|PseudoElement_TabBarTear
block|,
DECL|enumerator|PseudoElement_SliderGroove
name|PseudoElement_SliderGroove
block|,
DECL|enumerator|PseudoElement_SliderHandle
name|PseudoElement_SliderHandle
block|,
DECL|enumerator|PseudoElement_SliderAddPage
name|PseudoElement_SliderAddPage
block|,
DECL|enumerator|PseudoElement_SliderSubPage
name|PseudoElement_SliderSubPage
block|,
DECL|enumerator|PseudoElement_SliderTickmark
name|PseudoElement_SliderTickmark
block|,
DECL|enumerator|PseudoElement_TabWidgetPane
name|PseudoElement_TabWidgetPane
block|,
DECL|enumerator|PseudoElement_TabWidgetTabBar
name|PseudoElement_TabWidgetTabBar
block|,
DECL|enumerator|PseudoElement_TabWidgetLeftCorner
name|PseudoElement_TabWidgetLeftCorner
block|,
DECL|enumerator|PseudoElement_TabWidgetRightCorner
name|PseudoElement_TabWidgetRightCorner
block|,
DECL|enumerator|PseudoElement_DockWidgetTitle
name|PseudoElement_DockWidgetTitle
block|,
DECL|enumerator|PseudoElement_DockWidgetCloseButton
name|PseudoElement_DockWidgetCloseButton
block|,
DECL|enumerator|PseudoElement_DockWidgetFloatButton
name|PseudoElement_DockWidgetFloatButton
block|,
DECL|enumerator|PseudoElement_DockWidgetSeparator
name|PseudoElement_DockWidgetSeparator
block|,
DECL|enumerator|PseudoElement_MdiCloseButton
name|PseudoElement_MdiCloseButton
block|,
DECL|enumerator|PseudoElement_MdiMinButton
name|PseudoElement_MdiMinButton
block|,
DECL|enumerator|PseudoElement_MdiNormalButton
name|PseudoElement_MdiNormalButton
block|,
DECL|enumerator|PseudoElement_TitleBar
name|PseudoElement_TitleBar
block|,
DECL|enumerator|PseudoElement_TitleBarCloseButton
name|PseudoElement_TitleBarCloseButton
block|,
DECL|enumerator|PseudoElement_TitleBarMinButton
name|PseudoElement_TitleBarMinButton
block|,
DECL|enumerator|PseudoElement_TitleBarMaxButton
name|PseudoElement_TitleBarMaxButton
block|,
DECL|enumerator|PseudoElement_TitleBarShadeButton
name|PseudoElement_TitleBarShadeButton
block|,
DECL|enumerator|PseudoElement_TitleBarUnshadeButton
name|PseudoElement_TitleBarUnshadeButton
block|,
DECL|enumerator|PseudoElement_TitleBarNormalButton
name|PseudoElement_TitleBarNormalButton
block|,
DECL|enumerator|PseudoElement_TitleBarContextHelpButton
name|PseudoElement_TitleBarContextHelpButton
block|,
DECL|enumerator|PseudoElement_TitleBarSysMenu
name|PseudoElement_TitleBarSysMenu
block|,
DECL|enumerator|PseudoElement_ViewItem
name|PseudoElement_ViewItem
block|,
DECL|enumerator|PseudoElement_ViewItemIcon
name|PseudoElement_ViewItemIcon
block|,
DECL|enumerator|PseudoElement_ViewItemText
name|PseudoElement_ViewItemText
block|,
DECL|enumerator|PseudoElement_ViewItemIndicator
name|PseudoElement_ViewItemIndicator
block|,
DECL|enumerator|PseudoElement_ScrollAreaCorner
name|PseudoElement_ScrollAreaCorner
block|,
DECL|enumerator|PseudoElement_TabBarTabCloseButton
name|PseudoElement_TabBarTabCloseButton
block|,
DECL|enumerator|NumPseudoElements
name|NumPseudoElements
block|}
enum|;
end_enum
begin_struct
DECL|struct|PseudoElementInfo
struct|struct
name|PseudoElementInfo
block|{
DECL|member|subControl
name|QStyle
operator|::
name|SubControl
name|subControl
decl_stmt|;
DECL|member|name
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|knownPseudoElements
specifier|static
specifier|const
name|PseudoElementInfo
name|knownPseudoElements
index|[
name|NumPseudoElements
index|]
init|=
block|{
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|""
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"down-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"up-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"left-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"right-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"indicator"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"indicator"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"menu-indicator"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ComboBoxArrow
block|,
literal|"drop-down"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ComboBoxArrow
block|,
literal|"down-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"item"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_SpinBoxUp
block|,
literal|"up-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_SpinBoxUp
block|,
literal|"up-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_SpinBoxDown
block|,
literal|"down-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_SpinBoxDown
block|,
literal|"down-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_GroupBoxLabel
block|,
literal|"title"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
block|,
literal|"indicator"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ToolButtonMenu
block|,
literal|"menu-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ToolButtonMenu
block|,
literal|"menu-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"menu-indicator"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"tab"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ScrollBarSlider
block|,
literal|"handle"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ScrollBarAddPage
block|,
literal|"add-page"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ScrollBarSubPage
block|,
literal|"sub-page"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ScrollBarAddLine
block|,
literal|"add-line"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ScrollBarSubLine
block|,
literal|"sub-line"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ScrollBarFirst
block|,
literal|"first"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ScrollBarLast
block|,
literal|"last"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ScrollBarSubLine
block|,
literal|"up-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ScrollBarAddLine
block|,
literal|"down-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ScrollBarSubLine
block|,
literal|"left-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_ScrollBarAddLine
block|,
literal|"right-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"handle"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"handle"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"separator"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"scroller"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"tearoff"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"indicator"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"separator"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"icon"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"right-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"branch"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"section"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"down-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"up-arrow"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"chunk"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"tab"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"scroller"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"tear"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_SliderGroove
block|,
literal|"groove"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_SliderHandle
block|,
literal|"handle"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"add-page"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"sub-page"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_SliderTickmarks
block|,
literal|"tick-mark"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"pane"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"tab-bar"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"left-corner"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"right-corner"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"title"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"close-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"float-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"separator"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_MdiCloseButton
block|,
literal|"close-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_MdiMinButton
block|,
literal|"minimize-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_MdiNormalButton
block|,
literal|"normal-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_TitleBarLabel
block|,
literal|"title"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_TitleBarCloseButton
block|,
literal|"close-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_TitleBarMinButton
block|,
literal|"minimize-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_TitleBarMaxButton
block|,
literal|"maximize-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_TitleBarShadeButton
block|,
literal|"shade-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_TitleBarUnshadeButton
block|,
literal|"unshade-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_TitleBarNormalButton
block|,
literal|"normal-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_TitleBarContextHelpButton
block|,
literal|"contexthelp-button"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_TitleBarSysMenu
block|,
literal|"sys-menu"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"item"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"icon"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"text"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"indicator"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"corner"
block|}
block|,
block|{
name|QStyle
operator|::
name|SC_None
block|,
literal|"close-button"
block|}
block|, }
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|QStyleSheetBorderImageData
struct|struct
name|QStyleSheetBorderImageData
super|:
specifier|public
name|QSharedData
block|{
DECL|function|QStyleSheetBorderImageData
name|QStyleSheetBorderImageData
parameter_list|()
member_init_list|:
name|horizStretch
argument_list|(
name|QCss
operator|::
name|TileMode_Unknown
argument_list|)
member_init_list|,
name|vertStretch
argument_list|(
name|QCss
operator|::
name|TileMode_Unknown
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|cuts
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|member|cuts
name|int
name|cuts
index|[
literal|4
index|]
decl_stmt|;
DECL|member|pixmap
name|QPixmap
name|pixmap
decl_stmt|;
DECL|member|image
name|QImage
name|image
decl_stmt|;
DECL|member|horizStretch
DECL|member|vertStretch
name|QCss
operator|::
name|TileMode
name|horizStretch
decl_stmt|,
name|vertStretch
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QStyleSheetBackgroundData
struct|struct
name|QStyleSheetBackgroundData
super|:
specifier|public
name|QSharedData
block|{
DECL|function|QStyleSheetBackgroundData
name|QStyleSheetBackgroundData
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|b
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|p
parameter_list|,
name|QCss
operator|::
name|Repeat
name|r
parameter_list|,
name|Qt
operator|::
name|Alignment
name|a
parameter_list|,
name|QCss
operator|::
name|Origin
name|o
parameter_list|,
name|Attachment
name|t
parameter_list|,
name|QCss
operator|::
name|Origin
name|c
parameter_list|)
member_init_list|:
name|brush
argument_list|(
name|b
argument_list|)
member_init_list|,
name|pixmap
argument_list|(
name|p
argument_list|)
member_init_list|,
name|repeat
argument_list|(
name|r
argument_list|)
member_init_list|,
name|position
argument_list|(
name|a
argument_list|)
member_init_list|,
name|origin
argument_list|(
name|o
argument_list|)
member_init_list|,
name|attachment
argument_list|(
name|t
argument_list|)
member_init_list|,
name|clip
argument_list|(
name|c
argument_list|)
block|{ }
DECL|function|isTransparent
name|bool
name|isTransparent
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
return|return
operator|!
name|brush
operator|.
name|isOpaque
argument_list|()
return|;
return|return
name|pixmap
operator|.
name|isNull
argument_list|()
condition|?
literal|false
else|:
name|pixmap
operator|.
name|hasAlpha
argument_list|()
return|;
block|}
DECL|member|brush
name|QBrush
name|brush
decl_stmt|;
DECL|member|pixmap
name|QPixmap
name|pixmap
decl_stmt|;
DECL|member|repeat
name|QCss
operator|::
name|Repeat
name|repeat
decl_stmt|;
DECL|member|position
name|Qt
operator|::
name|Alignment
name|position
decl_stmt|;
DECL|member|origin
name|QCss
operator|::
name|Origin
name|origin
decl_stmt|;
DECL|member|attachment
name|QCss
operator|::
name|Attachment
name|attachment
decl_stmt|;
DECL|member|clip
name|QCss
operator|::
name|Origin
name|clip
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QStyleSheetBorderData
struct|struct
name|QStyleSheetBorderData
super|:
specifier|public
name|QSharedData
block|{
DECL|function|QStyleSheetBorderData
name|QStyleSheetBorderData
parameter_list|()
member_init_list|:
name|bi
argument_list|(
literal|0
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|borders
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|styles
index|[
name|i
index|]
operator|=
name|QCss
operator|::
name|BorderStyle_None
expr_stmt|;
block|}
block|}
DECL|function|QStyleSheetBorderData
name|QStyleSheetBorderData
parameter_list|(
name|int
modifier|*
name|b
parameter_list|,
name|QBrush
modifier|*
name|c
parameter_list|,
name|QCss
operator|::
name|BorderStyle
modifier|*
name|s
parameter_list|,
name|QSize
modifier|*
name|r
parameter_list|)
member_init_list|:
name|bi
argument_list|(
literal|0
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|borders
index|[
name|i
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
name|styles
index|[
name|i
index|]
operator|=
name|s
index|[
name|i
index|]
expr_stmt|;
name|colors
index|[
name|i
index|]
operator|=
name|c
index|[
name|i
index|]
expr_stmt|;
name|radii
index|[
name|i
index|]
operator|=
name|r
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
DECL|member|borders
name|int
name|borders
index|[
literal|4
index|]
decl_stmt|;
DECL|member|colors
name|QBrush
name|colors
index|[
literal|4
index|]
decl_stmt|;
DECL|member|styles
name|QCss
operator|::
name|BorderStyle
name|styles
index|[
literal|4
index|]
decl_stmt|;
DECL|member|radii
name|QSize
name|radii
index|[
literal|4
index|]
decl_stmt|;
comment|// topleft, topright, bottomleft, bottomright
DECL|function|borderImage
specifier|const
name|QStyleSheetBorderImageData
modifier|*
name|borderImage
parameter_list|()
specifier|const
block|{
return|return
name|bi
return|;
block|}
DECL|function|hasBorderImage
name|bool
name|hasBorderImage
parameter_list|()
specifier|const
block|{
return|return
name|bi
operator|!=
literal|0
return|;
block|}
DECL|member|bi
name|QSharedDataPointer
argument_list|<
name|QStyleSheetBorderImageData
argument_list|>
name|bi
decl_stmt|;
DECL|function|isOpaque
name|bool
name|isOpaque
parameter_list|()
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|styles
index|[
name|i
index|]
operator|==
name|QCss
operator|::
name|BorderStyle_Native
operator|||
name|styles
index|[
name|i
index|]
operator|==
name|QCss
operator|::
name|BorderStyle_None
condition|)
continue|continue;
if|if
condition|(
name|styles
index|[
name|i
index|]
operator|>=
name|QCss
operator|::
name|BorderStyle_Dotted
operator|&&
name|styles
index|[
name|i
index|]
operator|<=
name|QCss
operator|::
name|BorderStyle_DotDotDash
operator|&&
name|styles
index|[
name|i
index|]
operator|!=
name|BorderStyle_Solid
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|colors
index|[
name|i
index|]
operator|.
name|isOpaque
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|radii
index|[
name|i
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
name|bi
operator|!=
literal|0
operator|&&
name|bi
operator|->
name|pixmap
operator|.
name|hasAlpha
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|QStyleSheetOutlineData
struct|struct
name|QStyleSheetOutlineData
super|:
specifier|public
name|QStyleSheetBorderData
block|{
DECL|function|QStyleSheetOutlineData
name|QStyleSheetOutlineData
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|offsets
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|function|QStyleSheetOutlineData
name|QStyleSheetOutlineData
parameter_list|(
name|int
modifier|*
name|b
parameter_list|,
name|QBrush
modifier|*
name|c
parameter_list|,
name|QCss
operator|::
name|BorderStyle
modifier|*
name|s
parameter_list|,
name|QSize
modifier|*
name|r
parameter_list|,
name|int
modifier|*
name|o
parameter_list|)
member_init_list|:
name|QStyleSheetBorderData
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|s
argument_list|,
name|r
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|offsets
index|[
name|i
index|]
operator|=
name|o
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
DECL|member|offsets
name|int
name|offsets
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QStyleSheetBoxData
struct|struct
name|QStyleSheetBoxData
super|:
specifier|public
name|QSharedData
block|{
DECL|function|QStyleSheetBoxData
name|QStyleSheetBoxData
parameter_list|(
name|int
modifier|*
name|m
parameter_list|,
name|int
modifier|*
name|p
parameter_list|,
name|int
name|s
parameter_list|)
member_init_list|:
name|spacing
argument_list|(
name|s
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|margins
index|[
name|i
index|]
operator|=
name|m
index|[
name|i
index|]
expr_stmt|;
name|paddings
index|[
name|i
index|]
operator|=
name|p
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
DECL|member|margins
name|int
name|margins
index|[
literal|4
index|]
decl_stmt|;
DECL|member|paddings
name|int
name|paddings
index|[
literal|4
index|]
decl_stmt|;
DECL|member|spacing
name|int
name|spacing
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QStyleSheetPaletteData
struct|struct
name|QStyleSheetPaletteData
super|:
specifier|public
name|QSharedData
block|{
DECL|function|QStyleSheetPaletteData
name|QStyleSheetPaletteData
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|fg
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|sfg
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|sbg
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|abg
parameter_list|)
member_init_list|:
name|foreground
argument_list|(
name|fg
argument_list|)
member_init_list|,
name|selectionForeground
argument_list|(
name|sfg
argument_list|)
member_init_list|,
name|selectionBackground
argument_list|(
name|sbg
argument_list|)
member_init_list|,
name|alternateBackground
argument_list|(
name|abg
argument_list|)
block|{ }
DECL|member|foreground
name|QBrush
name|foreground
decl_stmt|;
DECL|member|selectionForeground
name|QBrush
name|selectionForeground
decl_stmt|;
DECL|member|selectionBackground
name|QBrush
name|selectionBackground
decl_stmt|;
DECL|member|alternateBackground
name|QBrush
name|alternateBackground
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QStyleSheetGeometryData
struct|struct
name|QStyleSheetGeometryData
super|:
specifier|public
name|QSharedData
block|{
DECL|function|QStyleSheetGeometryData
name|QStyleSheetGeometryData
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|minw
parameter_list|,
name|int
name|minh
parameter_list|,
name|int
name|maxw
parameter_list|,
name|int
name|maxh
parameter_list|)
member_init_list|:
name|minWidth
argument_list|(
name|minw
argument_list|)
member_init_list|,
name|minHeight
argument_list|(
name|minh
argument_list|)
member_init_list|,
name|width
argument_list|(
name|w
argument_list|)
member_init_list|,
name|height
argument_list|(
name|h
argument_list|)
member_init_list|,
name|maxWidth
argument_list|(
name|maxw
argument_list|)
member_init_list|,
name|maxHeight
argument_list|(
name|maxh
argument_list|)
block|{ }
DECL|member|minWidth
DECL|member|minHeight
DECL|member|width
DECL|member|height
DECL|member|maxWidth
DECL|member|maxHeight
name|int
name|minWidth
decl_stmt|,
name|minHeight
decl_stmt|,
name|width
decl_stmt|,
name|height
decl_stmt|,
name|maxWidth
decl_stmt|,
name|maxHeight
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QStyleSheetPositionData
struct|struct
name|QStyleSheetPositionData
super|:
specifier|public
name|QSharedData
block|{
DECL|function|QStyleSheetPositionData
name|QStyleSheetPositionData
parameter_list|(
name|int
name|l
parameter_list|,
name|int
name|t
parameter_list|,
name|int
name|r
parameter_list|,
name|int
name|b
parameter_list|,
name|Origin
name|o
parameter_list|,
name|Qt
operator|::
name|Alignment
name|p
parameter_list|,
name|QCss
operator|::
name|PositionMode
name|m
parameter_list|,
name|Qt
operator|::
name|Alignment
name|a
init|=
literal|0
parameter_list|)
member_init_list|:
name|left
argument_list|(
name|l
argument_list|)
member_init_list|,
name|top
argument_list|(
name|t
argument_list|)
member_init_list|,
name|bottom
argument_list|(
name|b
argument_list|)
member_init_list|,
name|right
argument_list|(
name|r
argument_list|)
member_init_list|,
name|origin
argument_list|(
name|o
argument_list|)
member_init_list|,
name|position
argument_list|(
name|p
argument_list|)
member_init_list|,
name|mode
argument_list|(
name|m
argument_list|)
member_init_list|,
name|textAlignment
argument_list|(
name|a
argument_list|)
block|{ }
DECL|member|left
DECL|member|top
DECL|member|bottom
DECL|member|right
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|bottom
decl_stmt|,
name|right
decl_stmt|;
DECL|member|origin
name|Origin
name|origin
decl_stmt|;
DECL|member|position
name|Qt
operator|::
name|Alignment
name|position
decl_stmt|;
DECL|member|mode
name|QCss
operator|::
name|PositionMode
name|mode
decl_stmt|;
DECL|member|textAlignment
name|Qt
operator|::
name|Alignment
name|textAlignment
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QStyleSheetImageData
struct|struct
name|QStyleSheetImageData
super|:
specifier|public
name|QSharedData
block|{
DECL|function|QStyleSheetImageData
name|QStyleSheetImageData
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|i
parameter_list|,
name|Qt
operator|::
name|Alignment
name|a
parameter_list|,
specifier|const
name|QSize
modifier|&
name|sz
parameter_list|)
member_init_list|:
name|icon
argument_list|(
name|i
argument_list|)
member_init_list|,
name|alignment
argument_list|(
name|a
argument_list|)
member_init_list|,
name|size
argument_list|(
name|sz
argument_list|)
block|{ }
DECL|member|icon
name|QIcon
name|icon
decl_stmt|;
DECL|member|alignment
name|Qt
operator|::
name|Alignment
name|alignment
decl_stmt|;
DECL|member|size
name|QSize
name|size
decl_stmt|;
block|}
struct|;
end_struct
begin_class
DECL|class|QRenderRule
class|class
name|QRenderRule
block|{
public|public:
DECL|function|QRenderRule
name|QRenderRule
parameter_list|()
member_init_list|:
name|features
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hasFont
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|pal
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|b
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bg
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bd
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|ou
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|geo
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|p
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|img
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|clipset
argument_list|(
literal|0
argument_list|)
block|{ }
name|QRenderRule
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
modifier|&
parameter_list|,
specifier|const
name|QObject
modifier|*
parameter_list|)
constructor_decl|;
DECL|function|~QRenderRule
name|~
name|QRenderRule
parameter_list|()
block|{ }
name|QRect
name|borderRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
function_decl|;
name|QRect
name|outlineRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
function_decl|;
name|QRect
name|paddingRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
function_decl|;
name|QRect
name|contentsRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
function_decl|;
DECL|enumerator|Margin
DECL|enumerator|Border
DECL|enumerator|Padding
DECL|enumerator|All
enum|enum
block|{
name|Margin
init|=
literal|1
block|,
name|Border
init|=
literal|2
block|,
name|Padding
init|=
literal|4
block|,
name|All
init|=
name|Margin
operator||
name|Border
operator||
name|Padding
block|}
enum|;
name|QRect
name|boxRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|,
name|int
name|flags
init|=
name|All
parameter_list|)
specifier|const
function_decl|;
name|QSize
name|boxSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|s
parameter_list|,
name|int
name|flags
init|=
name|All
parameter_list|)
specifier|const
function_decl|;
name|QRect
name|originRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|Origin
name|origin
parameter_list|)
specifier|const
function_decl|;
name|QPainterPath
name|borderClip
parameter_list|(
name|QRect
name|rect
parameter_list|)
function_decl|;
name|void
name|drawBorder
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
name|void
name|drawOutline
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
name|void
name|drawBorderImage
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
name|void
name|drawBackground
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|,
specifier|const
name|QPoint
modifier|&
init|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
parameter_list|)
function_decl|;
name|void
name|drawBackgroundImage
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|,
name|QPoint
init|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
parameter_list|)
function_decl|;
name|void
name|drawFrame
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
name|void
name|drawImage
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
function_decl|;
name|void
name|drawRule
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
name|void
name|configurePalette
parameter_list|(
name|QPalette
modifier|*
parameter_list|,
name|QPalette
operator|::
name|ColorGroup
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|,
name|bool
parameter_list|)
function_decl|;
name|void
name|configurePalette
parameter_list|(
name|QPalette
modifier|*
name|p
parameter_list|,
name|QPalette
operator|::
name|ColorRole
name|fr
parameter_list|,
name|QPalette
operator|::
name|ColorRole
name|br
parameter_list|)
function_decl|;
DECL|function|palette
specifier|const
name|QStyleSheetPaletteData
modifier|*
name|palette
parameter_list|()
specifier|const
block|{
return|return
name|pal
return|;
block|}
DECL|function|box
specifier|const
name|QStyleSheetBoxData
modifier|*
name|box
parameter_list|()
specifier|const
block|{
return|return
name|b
return|;
block|}
DECL|function|background
specifier|const
name|QStyleSheetBackgroundData
modifier|*
name|background
parameter_list|()
specifier|const
block|{
return|return
name|bg
return|;
block|}
DECL|function|border
specifier|const
name|QStyleSheetBorderData
modifier|*
name|border
parameter_list|()
specifier|const
block|{
return|return
name|bd
return|;
block|}
DECL|function|outline
specifier|const
name|QStyleSheetOutlineData
modifier|*
name|outline
parameter_list|()
specifier|const
block|{
return|return
name|ou
return|;
block|}
DECL|function|geometry
specifier|const
name|QStyleSheetGeometryData
modifier|*
name|geometry
parameter_list|()
specifier|const
block|{
return|return
name|geo
return|;
block|}
DECL|function|position
specifier|const
name|QStyleSheetPositionData
modifier|*
name|position
parameter_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
DECL|function|hasPalette
name|bool
name|hasPalette
parameter_list|()
specifier|const
block|{
return|return
name|pal
operator|!=
literal|0
return|;
block|}
DECL|function|hasBackground
name|bool
name|hasBackground
parameter_list|()
specifier|const
block|{
return|return
name|bg
operator|!=
literal|0
operator|&&
operator|(
operator|!
name|bg
operator|->
name|pixmap
operator|.
name|isNull
argument_list|()
operator|||
name|bg
operator|->
name|brush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
operator|)
return|;
block|}
DECL|function|hasGradientBackground
name|bool
name|hasGradientBackground
parameter_list|()
specifier|const
block|{
return|return
name|bg
operator|&&
name|bg
operator|->
name|brush
operator|.
name|style
argument_list|()
operator|>=
name|Qt
operator|::
name|LinearGradientPattern
operator|&&
name|bg
operator|->
name|brush
operator|.
name|style
argument_list|()
operator|<=
name|Qt
operator|::
name|ConicalGradientPattern
return|;
block|}
DECL|function|hasNativeBorder
name|bool
name|hasNativeBorder
parameter_list|()
specifier|const
block|{
return|return
name|bd
operator|==
literal|0
operator|||
operator|(
operator|!
name|bd
operator|->
name|hasBorderImage
argument_list|()
operator|&&
name|bd
operator|->
name|styles
index|[
literal|0
index|]
operator|==
name|BorderStyle_Native
operator|)
return|;
block|}
DECL|function|hasNativeOutline
name|bool
name|hasNativeOutline
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|ou
operator|==
literal|0
operator|||
operator|(
operator|!
name|ou
operator|->
name|hasBorderImage
argument_list|()
operator|&&
name|ou
operator|->
name|styles
index|[
literal|0
index|]
operator|==
name|BorderStyle_Native
operator|)
operator|)
return|;
block|}
DECL|function|baseStyleCanDraw
name|bool
name|baseStyleCanDraw
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|hasBackground
argument_list|()
operator|||
operator|(
name|background
argument_list|()
operator|->
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
operator|&&
name|bg
operator|->
name|pixmap
operator|.
name|isNull
argument_list|()
operator|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|bg
operator|&&
operator|!
name|bg
operator|->
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|hasGradientBackground
argument_list|()
condition|)
return|return
name|features
operator|&
name|StyleFeature_BackgroundGradient
return|;
return|return
name|features
operator|&
name|StyleFeature_BackgroundColor
return|;
block|}
DECL|function|hasBox
name|bool
name|hasBox
parameter_list|()
specifier|const
block|{
return|return
name|b
operator|!=
literal|0
return|;
block|}
DECL|function|hasBorder
name|bool
name|hasBorder
parameter_list|()
specifier|const
block|{
return|return
name|bd
operator|!=
literal|0
return|;
block|}
DECL|function|hasOutline
name|bool
name|hasOutline
parameter_list|()
specifier|const
block|{
return|return
name|ou
operator|!=
literal|0
return|;
block|}
DECL|function|hasPosition
name|bool
name|hasPosition
parameter_list|()
specifier|const
block|{
return|return
name|p
operator|!=
literal|0
return|;
block|}
DECL|function|hasGeometry
name|bool
name|hasGeometry
parameter_list|()
specifier|const
block|{
return|return
name|geo
operator|!=
literal|0
return|;
block|}
DECL|function|hasDrawable
name|bool
name|hasDrawable
parameter_list|()
specifier|const
block|{
return|return
operator|!
name|hasNativeBorder
argument_list|()
operator|||
name|hasBackground
argument_list|()
operator|||
name|hasImage
argument_list|()
return|;
block|}
DECL|function|hasImage
name|bool
name|hasImage
parameter_list|()
specifier|const
block|{
return|return
name|img
operator|!=
literal|0
return|;
block|}
DECL|function|minimumContentsSize
name|QSize
name|minimumContentsSize
parameter_list|()
specifier|const
block|{
return|return
name|geo
condition|?
name|QSize
argument_list|(
name|geo
operator|->
name|minWidth
argument_list|,
name|geo
operator|->
name|minHeight
argument_list|)
else|:
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|function|minimumSize
name|QSize
name|minimumSize
parameter_list|()
specifier|const
block|{
return|return
name|boxSize
argument_list|(
name|minimumContentsSize
argument_list|()
argument_list|)
return|;
block|}
DECL|function|contentsSize
name|QSize
name|contentsSize
parameter_list|()
specifier|const
block|{
return|return
name|geo
condition|?
name|QSize
argument_list|(
name|geo
operator|->
name|width
argument_list|,
name|geo
operator|->
name|height
argument_list|)
else|:
operator|(
operator|(
name|img
operator|&&
name|img
operator|->
name|size
operator|.
name|isValid
argument_list|()
operator|)
condition|?
name|img
operator|->
name|size
else|:
name|QSize
argument_list|()
operator|)
return|;
block|}
DECL|function|contentsSize
name|QSize
name|contentsSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|sz
parameter_list|)
specifier|const
block|{
name|QSize
name|csz
init|=
name|contentsSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|csz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|csz
operator|.
name|setWidth
argument_list|(
name|sz
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|csz
operator|.
name|height
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|csz
operator|.
name|setHeight
argument_list|(
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|csz
return|;
block|}
DECL|function|hasContentsSize
name|bool
name|hasContentsSize
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|geo
operator|&&
operator|(
name|geo
operator|->
name|width
operator|!=
operator|-
literal|1
operator|||
name|geo
operator|->
name|height
operator|!=
operator|-
literal|1
operator|)
operator|)
operator|||
operator|(
name|img
operator|&&
name|img
operator|->
name|size
operator|.
name|isValid
argument_list|()
operator|)
return|;
block|}
DECL|function|size
name|QSize
name|size
parameter_list|()
specifier|const
block|{
return|return
name|boxSize
argument_list|(
name|contentsSize
argument_list|()
argument_list|)
return|;
block|}
DECL|function|size
name|QSize
name|size
parameter_list|(
specifier|const
name|QSize
modifier|&
name|sz
parameter_list|)
specifier|const
block|{
return|return
name|boxSize
argument_list|(
name|contentsSize
argument_list|(
name|sz
argument_list|)
argument_list|)
return|;
block|}
DECL|function|adjustSize
name|QSize
name|adjustSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|sz
parameter_list|)
block|{
if|if
condition|(
operator|!
name|geo
condition|)
return|return
name|sz
return|;
name|QSize
name|csz
init|=
name|contentsSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|csz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|csz
operator|.
name|setWidth
argument_list|(
name|sz
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|csz
operator|.
name|height
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|csz
operator|.
name|setHeight
argument_list|(
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|geo
operator|->
name|maxWidth
operator|!=
operator|-
literal|1
operator|&&
name|csz
operator|.
name|width
argument_list|()
operator|>
name|geo
operator|->
name|maxWidth
condition|)
name|csz
operator|.
name|setWidth
argument_list|(
name|geo
operator|->
name|maxWidth
argument_list|)
expr_stmt|;
if|if
condition|(
name|geo
operator|->
name|maxHeight
operator|!=
operator|-
literal|1
operator|&&
name|csz
operator|.
name|height
argument_list|()
operator|>
name|geo
operator|->
name|maxHeight
condition|)
name|csz
operator|.
name|setHeight
argument_list|(
name|geo
operator|->
name|maxHeight
argument_list|)
expr_stmt|;
name|csz
operator|=
name|csz
operator|.
name|expandedTo
argument_list|(
name|QSize
argument_list|(
name|geo
operator|->
name|minWidth
argument_list|,
name|geo
operator|->
name|minHeight
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|csz
return|;
block|}
DECL|member|features
name|int
name|features
decl_stmt|;
DECL|member|defaultBackground
name|QBrush
name|defaultBackground
decl_stmt|;
DECL|member|font
name|QFont
name|font
decl_stmt|;
DECL|member|hasFont
name|bool
name|hasFont
decl_stmt|;
DECL|member|styleHints
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|styleHints
decl_stmt|;
DECL|function|hasStyleHint
name|bool
name|hasStyleHint
parameter_list|(
specifier|const
name|QString
modifier|&
name|sh
parameter_list|)
specifier|const
block|{
return|return
name|styleHints
operator|.
name|contains
argument_list|(
name|sh
argument_list|)
return|;
block|}
DECL|function|styleHint
name|QVariant
name|styleHint
parameter_list|(
specifier|const
name|QString
modifier|&
name|sh
parameter_list|)
specifier|const
block|{
return|return
name|styleHints
operator|.
name|value
argument_list|(
name|sh
argument_list|)
return|;
block|}
name|void
name|fixupBorder
parameter_list|(
name|int
parameter_list|)
function_decl|;
DECL|member|pal
name|QSharedDataPointer
argument_list|<
name|QStyleSheetPaletteData
argument_list|>
name|pal
decl_stmt|;
DECL|member|b
name|QSharedDataPointer
argument_list|<
name|QStyleSheetBoxData
argument_list|>
name|b
decl_stmt|;
DECL|member|bg
name|QSharedDataPointer
argument_list|<
name|QStyleSheetBackgroundData
argument_list|>
name|bg
decl_stmt|;
DECL|member|bd
name|QSharedDataPointer
argument_list|<
name|QStyleSheetBorderData
argument_list|>
name|bd
decl_stmt|;
DECL|member|ou
name|QSharedDataPointer
argument_list|<
name|QStyleSheetOutlineData
argument_list|>
name|ou
decl_stmt|;
DECL|member|geo
name|QSharedDataPointer
argument_list|<
name|QStyleSheetGeometryData
argument_list|>
name|geo
decl_stmt|;
DECL|member|p
name|QSharedDataPointer
argument_list|<
name|QStyleSheetPositionData
argument_list|>
name|p
decl_stmt|;
DECL|member|img
name|QSharedDataPointer
argument_list|<
name|QStyleSheetImageData
argument_list|>
name|img
decl_stmt|;
comment|// Shouldn't be here
name|void
name|setClip
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
function_decl|;
name|void
name|unsetClip
parameter_list|(
name|QPainter
modifier|*
parameter_list|)
function_decl|;
DECL|member|clipset
name|int
name|clipset
decl_stmt|;
DECL|member|clipPath
name|QPainterPath
name|clipPath
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|///////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_decl_stmt
DECL|variable|knownStyleHints
specifier|static
specifier|const
name|char
modifier|*
name|knownStyleHints
index|[]
init|=
block|{
literal|"activate-on-singleclick"
block|,
literal|"alignment"
block|,
literal|"arrow-keys-navigate-into-children"
block|,
literal|"backward-icon"
block|,
literal|"button-layout"
block|,
literal|"cd-icon"
block|,
literal|"combobox-list-mousetracking"
block|,
literal|"combobox-popup"
block|,
literal|"computer-icon"
block|,
literal|"desktop-icon"
block|,
literal|"dialog-apply-icon"
block|,
literal|"dialog-cancel-icon"
block|,
literal|"dialog-close-icon"
block|,
literal|"dialog-discard-icon"
block|,
literal|"dialog-help-icon"
block|,
literal|"dialog-no-icon"
block|,
literal|"dialog-ok-icon"
block|,
literal|"dialog-open-icon"
block|,
literal|"dialog-reset-icon"
block|,
literal|"dialog-save-icon"
block|,
literal|"dialog-yes-icon"
block|,
literal|"dialogbuttonbox-buttons-have-icons"
block|,
literal|"directory-closed-icon"
block|,
literal|"directory-icon"
block|,
literal|"directory-link-icon"
block|,
literal|"directory-open-icon"
block|,
literal|"dither-disable-text"
block|,
literal|"dockwidget-close-icon"
block|,
literal|"downarrow-icon"
block|,
literal|"dvd-icon"
block|,
literal|"etch-disabled-text"
block|,
literal|"file-icon"
block|,
literal|"file-link-icon"
block|,
literal|"filedialog-backward-icon"
block|,
comment|// unused
literal|"filedialog-contentsview-icon"
block|,
literal|"filedialog-detailedview-icon"
block|,
literal|"filedialog-end-icon"
block|,
literal|"filedialog-infoview-icon"
block|,
literal|"filedialog-listview-icon"
block|,
literal|"filedialog-new-directory-icon"
block|,
literal|"filedialog-parent-directory-icon"
block|,
literal|"filedialog-start-icon"
block|,
literal|"floppy-icon"
block|,
literal|"forward-icon"
block|,
literal|"gridline-color"
block|,
literal|"harddisk-icon"
block|,
literal|"home-icon"
block|,
literal|"icon-size"
block|,
literal|"leftarrow-icon"
block|,
literal|"lineedit-password-character"
block|,
literal|"lineedit-password-mask-delay"
block|,
literal|"mdi-fill-space-on-maximize"
block|,
literal|"menu-scrollable"
block|,
literal|"menubar-altkey-navigation"
block|,
literal|"menubar-separator"
block|,
literal|"messagebox-critical-icon"
block|,
literal|"messagebox-information-icon"
block|,
literal|"messagebox-question-icon"
block|,
literal|"messagebox-text-interaction-flags"
block|,
literal|"messagebox-warning-icon"
block|,
literal|"mouse-tracking"
block|,
literal|"network-icon"
block|,
literal|"opacity"
block|,
literal|"paint-alternating-row-colors-for-empty-area"
block|,
literal|"rightarrow-icon"
block|,
literal|"scrollbar-contextmenu"
block|,
literal|"scrollbar-leftclick-absolute-position"
block|,
literal|"scrollbar-middleclick-absolute-position"
block|,
literal|"scrollbar-roll-between-buttons"
block|,
literal|"scrollbar-scroll-when-pointer-leaves-control"
block|,
literal|"scrollview-frame-around-contents"
block|,
literal|"show-decoration-selected"
block|,
literal|"spinbox-click-autorepeat-rate"
block|,
literal|"spincontrol-disable-on-bounds"
block|,
literal|"tabbar-elide-mode"
block|,
literal|"tabbar-prefer-no-arrows"
block|,
literal|"titlebar-close-icon"
block|,
literal|"titlebar-contexthelp-icon"
block|,
literal|"titlebar-maximize-icon"
block|,
literal|"titlebar-menu-icon"
block|,
literal|"titlebar-minimize-icon"
block|,
literal|"titlebar-normal-icon"
block|,
literal|"titlebar-shade-icon"
block|,
literal|"titlebar-unshade-icon"
block|,
literal|"toolbutton-popup-delay"
block|,
literal|"trash-icon"
block|,
literal|"uparrow-icon"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|numKnownStyleHints
specifier|static
specifier|const
name|int
name|numKnownStyleHints
init|=
sizeof|sizeof
argument_list|(
name|knownStyleHints
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|knownStyleHints
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|subControlLayout
specifier|static
name|QList
argument_list|<
name|QVariant
argument_list|>
name|subControlLayout
parameter_list|(
specifier|const
name|QString
modifier|&
name|layout
parameter_list|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|buttons
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layout
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|button
init|=
name|layout
index|[
name|i
index|]
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|button
condition|)
block|{
case|case
literal|'m'
case|:
name|buttons
operator|.
name|append
argument_list|(
name|PseudoElement_MdiMinButton
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|append
argument_list|(
name|PseudoElement_TitleBarMinButton
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'M'
case|:
name|buttons
operator|.
name|append
argument_list|(
name|PseudoElement_TitleBarMaxButton
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'X'
case|:
name|buttons
operator|.
name|append
argument_list|(
name|PseudoElement_MdiCloseButton
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|append
argument_list|(
name|PseudoElement_TitleBarCloseButton
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'N'
case|:
name|buttons
operator|.
name|append
argument_list|(
name|PseudoElement_MdiNormalButton
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|append
argument_list|(
name|PseudoElement_TitleBarNormalButton
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'I'
case|:
name|buttons
operator|.
name|append
argument_list|(
name|PseudoElement_TitleBarSysMenu
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'T'
case|:
name|buttons
operator|.
name|append
argument_list|(
name|PseudoElement_TitleBar
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'H'
case|:
name|buttons
operator|.
name|append
argument_list|(
name|PseudoElement_TitleBarContextHelpButton
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'S'
case|:
name|buttons
operator|.
name|append
argument_list|(
name|PseudoElement_TitleBarShadeButton
argument_list|)
expr_stmt|;
break|break;
default|default:
name|buttons
operator|.
name|append
argument_list|(
name|button
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|buttons
return|;
block|}
end_function
begin_namespace
namespace|namespace
block|{
DECL|struct|ButtonInfo
struct|struct
name|ButtonInfo
block|{
DECL|member|rule
name|QRenderRule
name|rule
decl_stmt|;
DECL|member|element
name|int
name|element
decl_stmt|;
DECL|member|offset
name|int
name|offset
decl_stmt|;
DECL|member|where
name|int
name|where
decl_stmt|;
DECL|member|width
name|int
name|width
decl_stmt|;
block|}
struct|;
block|}
end_namespace
begin_function
DECL|function|titleBarLayout
name|QHash
argument_list|<
name|QStyle
operator|::
name|SubControl
argument_list|,
name|QRect
argument_list|>
name|QStyleSheetStyle
operator|::
name|titleBarLayout
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QStyleOptionTitleBar
modifier|*
name|tb
parameter_list|)
specifier|const
block|{
name|QHash
argument_list|<
name|QStyle
operator|::
name|SubControl
argument_list|,
name|QRect
argument_list|>
name|layoutRects
decl_stmt|;
specifier|const
name|bool
name|isMinimized
init|=
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMinimized
decl_stmt|;
specifier|const
name|bool
name|isMaximized
init|=
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMaximized
decl_stmt|;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|tb
argument_list|)
decl_stmt|;
name|QRect
name|cr
init|=
name|subRule
operator|.
name|contentsRect
argument_list|(
name|tb
operator|->
name|rect
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|layout
init|=
name|subRule
operator|.
name|styleHint
argument_list|(
name|QLatin1String
argument_list|(
literal|"button-layout"
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|layout
operator|.
name|isEmpty
argument_list|()
condition|)
name|layout
operator|=
name|subControlLayout
argument_list|(
name|QLatin1String
argument_list|(
literal|"I(T)HSmMX"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|offsets
index|[
literal|3
index|]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
enum|enum
name|Where
block|{
name|Left
block|,
name|Right
block|,
name|Center
block|,
name|NoWhere
block|}
name|where
init|=
name|Left
enum|;
name|QList
argument_list|<
name|ButtonInfo
argument_list|>
name|infos
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layout
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ButtonInfo
name|info
decl_stmt|;
name|info
operator|.
name|element
operator|=
name|layout
index|[
name|i
index|]
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|element
operator|==
literal|'('
condition|)
block|{
name|where
operator|=
name|Center
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|element
operator|==
literal|')'
condition|)
block|{
name|where
operator|=
name|Right
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|info
operator|.
name|element
condition|)
block|{
case|case
name|PseudoElement_TitleBar
case|:
if|if
condition|(
operator|!
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
operator|(
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator|)
operator|)
condition|)
continue|continue;
break|break;
case|case
name|PseudoElement_TitleBarContextHelpButton
case|:
if|if
condition|(
operator|!
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator|)
condition|)
continue|continue;
break|break;
case|case
name|PseudoElement_TitleBarMinButton
case|:
if|if
condition|(
operator|!
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
condition|)
continue|continue;
if|if
condition|(
name|isMinimized
condition|)
name|info
operator|.
name|element
operator|=
name|PseudoElement_TitleBarNormalButton
expr_stmt|;
break|break;
case|case
name|PseudoElement_TitleBarMaxButton
case|:
if|if
condition|(
operator|!
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
continue|continue;
if|if
condition|(
name|isMaximized
condition|)
name|info
operator|.
name|element
operator|=
name|PseudoElement_TitleBarNormalButton
expr_stmt|;
break|break;
case|case
name|PseudoElement_TitleBarShadeButton
case|:
if|if
condition|(
operator|!
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
operator|)
condition|)
continue|continue;
if|if
condition|(
name|isMinimized
condition|)
name|info
operator|.
name|element
operator|=
name|PseudoElement_TitleBarUnshadeButton
expr_stmt|;
break|break;
case|case
name|PseudoElement_TitleBarCloseButton
case|:
case|case
name|PseudoElement_TitleBarSysMenu
case|:
if|if
condition|(
operator|!
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
operator|)
condition|)
continue|continue;
break|break;
default|default:
continue|continue;
block|}
if|if
condition|(
name|info
operator|.
name|element
operator|==
name|PseudoElement_TitleBar
condition|)
block|{
name|info
operator|.
name|width
operator|=
name|tb
operator|->
name|fontMetrics
operator|.
name|width
argument_list|(
name|tb
operator|->
name|text
argument_list|)
operator|+
literal|6
expr_stmt|;
name|subRule
operator|.
name|geo
operator|=
operator|new
name|QStyleSheetGeometryData
argument_list|(
name|info
operator|.
name|width
argument_list|,
name|tb
operator|->
name|fontMetrics
operator|.
name|height
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|subRule
operator|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|tb
argument_list|,
name|info
operator|.
name|element
argument_list|)
expr_stmt|;
name|info
operator|.
name|width
operator|=
name|subRule
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
name|info
operator|.
name|rule
operator|=
name|subRule
expr_stmt|;
name|info
operator|.
name|offset
operator|=
name|offsets
index|[
name|where
index|]
expr_stmt|;
name|info
operator|.
name|where
operator|=
name|where
expr_stmt|;
name|infos
operator|.
name|append
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|offsets
index|[
name|where
index|]
operator|+=
name|info
operator|.
name|width
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|infos
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ButtonInfo
name|info
init|=
name|infos
index|[
name|i
index|]
decl_stmt|;
name|QRect
name|lr
init|=
name|cr
decl_stmt|;
switch|switch
condition|(
name|info
operator|.
name|where
condition|)
block|{
case|case
name|Center
case|:
block|{
name|lr
operator|.
name|setLeft
argument_list|(
name|cr
operator|.
name|left
argument_list|()
operator|+
name|offsets
index|[
name|Left
index|]
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setRight
argument_list|(
name|cr
operator|.
name|right
argument_list|()
operator|-
name|offsets
index|[
name|Right
index|]
argument_list|)
expr_stmt|;
name|QRect
name|r
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|offsets
index|[
name|Center
index|]
argument_list|,
name|lr
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|moveCenter
argument_list|(
name|lr
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setLeft
argument_list|(
name|r
operator|.
name|left
argument_list|()
operator|+
name|info
operator|.
name|offset
argument_list|)
expr_stmt|;
name|r
operator|.
name|setWidth
argument_list|(
name|info
operator|.
name|width
argument_list|)
expr_stmt|;
name|lr
operator|=
name|r
expr_stmt|;
break|break;
block|}
case|case
name|Left
case|:
name|lr
operator|.
name|translate
argument_list|(
name|info
operator|.
name|offset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setWidth
argument_list|(
name|info
operator|.
name|width
argument_list|)
expr_stmt|;
break|break;
case|case
name|Right
case|:
name|lr
operator|.
name|moveLeft
argument_list|(
name|cr
operator|.
name|right
argument_list|()
operator|+
literal|1
operator|-
name|offsets
index|[
name|Right
index|]
operator|+
name|info
operator|.
name|offset
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setWidth
argument_list|(
name|info
operator|.
name|width
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|QStyle
operator|::
name|SubControl
name|control
init|=
name|knownPseudoElements
index|[
name|info
operator|.
name|element
index|]
operator|.
name|subControl
decl_stmt|;
name|layoutRects
index|[
name|control
index|]
operator|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|info
operator|.
name|rule
argument_list|,
name|info
operator|.
name|element
argument_list|,
name|lr
argument_list|,
name|tb
operator|->
name|direction
argument_list|)
expr_stmt|;
block|}
return|return
name|layoutRects
return|;
block|}
end_function
begin_function
DECL|function|subControlIcon
specifier|static
name|QStyle
operator|::
name|StandardPixmap
name|subControlIcon
parameter_list|(
name|int
name|pe
parameter_list|)
block|{
switch|switch
condition|(
name|pe
condition|)
block|{
case|case
name|PseudoElement_MdiCloseButton
case|:
return|return
name|QStyle
operator|::
name|SP_TitleBarCloseButton
return|;
case|case
name|PseudoElement_MdiMinButton
case|:
return|return
name|QStyle
operator|::
name|SP_TitleBarMinButton
return|;
case|case
name|PseudoElement_MdiNormalButton
case|:
return|return
name|QStyle
operator|::
name|SP_TitleBarNormalButton
return|;
case|case
name|PseudoElement_TitleBarCloseButton
case|:
return|return
name|QStyle
operator|::
name|SP_TitleBarCloseButton
return|;
case|case
name|PseudoElement_TitleBarMinButton
case|:
return|return
name|QStyle
operator|::
name|SP_TitleBarMinButton
return|;
case|case
name|PseudoElement_TitleBarMaxButton
case|:
return|return
name|QStyle
operator|::
name|SP_TitleBarMaxButton
return|;
case|case
name|PseudoElement_TitleBarShadeButton
case|:
return|return
name|QStyle
operator|::
name|SP_TitleBarShadeButton
return|;
case|case
name|PseudoElement_TitleBarUnshadeButton
case|:
return|return
name|QStyle
operator|::
name|SP_TitleBarUnshadeButton
return|;
case|case
name|PseudoElement_TitleBarNormalButton
case|:
return|return
name|QStyle
operator|::
name|SP_TitleBarNormalButton
return|;
case|case
name|PseudoElement_TitleBarContextHelpButton
case|:
return|return
name|QStyle
operator|::
name|SP_TitleBarContextHelpButton
return|;
default|default:
break|break;
block|}
return|return
name|QStyle
operator|::
name|SP_CustomBase
return|;
block|}
end_function
begin_constructor
DECL|function|QRenderRule
name|QRenderRule
operator|::
name|QRenderRule
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|Declaration
argument_list|>
modifier|&
name|declarations
parameter_list|,
specifier|const
name|QObject
modifier|*
name|object
parameter_list|)
member_init_list|:
name|features
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hasFont
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|pal
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|b
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bg
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bd
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|ou
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|geo
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|p
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|img
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|clipset
argument_list|(
literal|0
argument_list|)
block|{
name|QPalette
name|palette
init|=
name|QApplication
operator|::
name|palette
argument_list|()
decl_stmt|;
comment|// ###: ideally widget's palette
name|ValueExtractor
name|v
argument_list|(
name|declarations
argument_list|,
name|palette
argument_list|)
decl_stmt|;
name|features
operator|=
name|v
operator|.
name|extractStyleFeatures
argument_list|()
expr_stmt|;
name|int
name|w
init|=
operator|-
literal|1
decl_stmt|,
name|h
init|=
operator|-
literal|1
decl_stmt|,
name|minw
init|=
operator|-
literal|1
decl_stmt|,
name|minh
init|=
operator|-
literal|1
decl_stmt|,
name|maxw
init|=
operator|-
literal|1
decl_stmt|,
name|maxh
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|extractGeometry
argument_list|(
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|,
operator|&
name|minw
argument_list|,
operator|&
name|minh
argument_list|,
operator|&
name|maxw
argument_list|,
operator|&
name|maxh
argument_list|)
condition|)
name|geo
operator|=
operator|new
name|QStyleSheetGeometryData
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|minw
argument_list|,
name|minh
argument_list|,
name|maxw
argument_list|,
name|maxh
argument_list|)
expr_stmt|;
name|int
name|left
init|=
literal|0
decl_stmt|,
name|top
init|=
literal|0
decl_stmt|,
name|right
init|=
literal|0
decl_stmt|,
name|bottom
init|=
literal|0
decl_stmt|;
name|Origin
name|origin
init|=
name|Origin_Unknown
decl_stmt|;
name|Qt
operator|::
name|Alignment
name|position
init|=
literal|0
decl_stmt|;
name|QCss
operator|::
name|PositionMode
name|mode
init|=
name|PositionMode_Unknown
decl_stmt|;
name|Qt
operator|::
name|Alignment
name|textAlignment
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|extractPosition
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|,
operator|&
name|origin
argument_list|,
operator|&
name|position
argument_list|,
operator|&
name|mode
argument_list|,
operator|&
name|textAlignment
argument_list|)
condition|)
name|p
operator|=
operator|new
name|QStyleSheetPositionData
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|,
name|origin
argument_list|,
name|position
argument_list|,
name|mode
argument_list|,
name|textAlignment
argument_list|)
expr_stmt|;
name|int
name|margins
index|[
literal|4
index|]
decl_stmt|,
name|paddings
index|[
literal|4
index|]
decl_stmt|,
name|spacing
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|margins
index|[
name|i
index|]
operator|=
name|paddings
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|extractBox
argument_list|(
name|margins
argument_list|,
name|paddings
argument_list|,
operator|&
name|spacing
argument_list|)
condition|)
name|b
operator|=
operator|new
name|QStyleSheetBoxData
argument_list|(
name|margins
argument_list|,
name|paddings
argument_list|,
name|spacing
argument_list|)
expr_stmt|;
name|int
name|borders
index|[
literal|4
index|]
decl_stmt|;
name|QBrush
name|colors
index|[
literal|4
index|]
decl_stmt|;
name|QCss
operator|::
name|BorderStyle
name|styles
index|[
literal|4
index|]
decl_stmt|;
name|QSize
name|radii
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|borders
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|styles
index|[
name|i
index|]
operator|=
name|BorderStyle_None
expr_stmt|;
block|}
if|if
condition|(
name|v
operator|.
name|extractBorder
argument_list|(
name|borders
argument_list|,
name|colors
argument_list|,
name|styles
argument_list|,
name|radii
argument_list|)
condition|)
name|bd
operator|=
operator|new
name|QStyleSheetBorderData
argument_list|(
name|borders
argument_list|,
name|colors
argument_list|,
name|styles
argument_list|,
name|radii
argument_list|)
expr_stmt|;
name|int
name|offsets
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|borders
index|[
name|i
index|]
operator|=
name|offsets
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|styles
index|[
name|i
index|]
operator|=
name|BorderStyle_None
expr_stmt|;
block|}
if|if
condition|(
name|v
operator|.
name|extractOutline
argument_list|(
name|borders
argument_list|,
name|colors
argument_list|,
name|styles
argument_list|,
name|radii
argument_list|,
name|offsets
argument_list|)
condition|)
name|ou
operator|=
operator|new
name|QStyleSheetOutlineData
argument_list|(
name|borders
argument_list|,
name|colors
argument_list|,
name|styles
argument_list|,
name|radii
argument_list|,
name|offsets
argument_list|)
expr_stmt|;
name|QBrush
name|brush
decl_stmt|;
name|QString
name|uri
decl_stmt|;
name|Repeat
name|repeat
init|=
name|Repeat_XY
decl_stmt|;
name|Qt
operator|::
name|Alignment
name|alignment
init|=
name|Qt
operator|::
name|AlignTop
operator||
name|Qt
operator|::
name|AlignLeft
decl_stmt|;
name|Attachment
name|attachment
init|=
name|Attachment_Scroll
decl_stmt|;
name|origin
operator|=
name|Origin_Padding
expr_stmt|;
name|Origin
name|clip
init|=
name|Origin_Border
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|extractBackground
argument_list|(
operator|&
name|brush
argument_list|,
operator|&
name|uri
argument_list|,
operator|&
name|repeat
argument_list|,
operator|&
name|alignment
argument_list|,
operator|&
name|origin
argument_list|,
operator|&
name|attachment
argument_list|,
operator|&
name|clip
argument_list|)
condition|)
name|bg
operator|=
operator|new
name|QStyleSheetBackgroundData
argument_list|(
name|brush
argument_list|,
name|QPixmap
argument_list|(
name|uri
argument_list|)
argument_list|,
name|repeat
argument_list|,
name|alignment
argument_list|,
name|origin
argument_list|,
name|attachment
argument_list|,
name|clip
argument_list|)
expr_stmt|;
name|QBrush
name|sfg
decl_stmt|,
name|fg
decl_stmt|;
name|QBrush
name|sbg
decl_stmt|,
name|abg
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|extractPalette
argument_list|(
operator|&
name|fg
argument_list|,
operator|&
name|sfg
argument_list|,
operator|&
name|sbg
argument_list|,
operator|&
name|abg
argument_list|)
condition|)
name|pal
operator|=
operator|new
name|QStyleSheetPaletteData
argument_list|(
name|fg
argument_list|,
name|sfg
argument_list|,
name|sbg
argument_list|,
name|abg
argument_list|)
expr_stmt|;
name|QIcon
name|icon
decl_stmt|;
name|alignment
operator|=
name|Qt
operator|::
name|AlignCenter
expr_stmt|;
name|QSize
name|size
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|extractImage
argument_list|(
operator|&
name|icon
argument_list|,
operator|&
name|alignment
argument_list|,
operator|&
name|size
argument_list|)
condition|)
name|img
operator|=
operator|new
name|QStyleSheetImageData
argument_list|(
name|icon
argument_list|,
name|alignment
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|int
name|adj
init|=
operator|-
literal|255
decl_stmt|;
name|hasFont
operator|=
name|v
operator|.
name|extractFont
argument_list|(
operator|&
name|font
argument_list|,
operator|&
name|adj
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
if|if
condition|(
name|object
operator|&&
name|qstrcmp
argument_list|(
name|object
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
literal|"QTipLabel"
argument_list|)
operator|==
literal|0
condition|)
name|palette
operator|=
name|QToolTip
operator|::
name|palette
argument_list|()
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|declarations
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Declaration
modifier|&
name|decl
init|=
name|declarations
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|propertyId
operator|==
name|BorderImage
condition|)
block|{
name|QString
name|uri
decl_stmt|;
name|QCss
operator|::
name|TileMode
name|horizStretch
decl_stmt|,
name|vertStretch
decl_stmt|;
name|int
name|cuts
index|[
literal|4
index|]
decl_stmt|;
name|decl
operator|.
name|borderImageValue
argument_list|(
operator|&
name|uri
argument_list|,
name|cuts
argument_list|,
operator|&
name|horizStretch
argument_list|,
operator|&
name|vertStretch
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|.
name|isEmpty
argument_list|()
operator|||
name|uri
operator|==
name|QLatin1String
argument_list|(
literal|"none"
argument_list|)
condition|)
block|{
if|if
condition|(
name|bd
operator|&&
name|bd
operator|->
name|bi
condition|)
name|bd
operator|->
name|bi
operator|->
name|pixmap
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|bd
condition|)
name|bd
operator|=
operator|new
name|QStyleSheetBorderData
expr_stmt|;
if|if
condition|(
operator|!
name|bd
operator|->
name|bi
condition|)
name|bd
operator|->
name|bi
operator|=
operator|new
name|QStyleSheetBorderImageData
expr_stmt|;
name|QStyleSheetBorderImageData
modifier|*
name|bi
init|=
name|bd
operator|->
name|bi
decl_stmt|;
name|bi
operator|->
name|pixmap
operator|=
name|QPixmap
argument_list|(
name|uri
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|bi
operator|->
name|cuts
index|[
name|i
index|]
operator|=
name|cuts
index|[
name|i
index|]
expr_stmt|;
name|bi
operator|->
name|horizStretch
operator|=
name|horizStretch
expr_stmt|;
name|bi
operator|->
name|vertStretch
operator|=
name|vertStretch
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|propertyId
operator|==
name|QtBackgroundRole
condition|)
block|{
if|if
condition|(
name|bg
operator|&&
name|bg
operator|->
name|brush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
continue|continue;
name|int
name|role
init|=
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|role
operator|>=
name|Value_FirstColorRole
operator|&&
name|role
operator|<=
name|Value_LastColorRole
condition|)
name|defaultBackground
operator|=
name|palette
operator|.
name|color
argument_list|(
call|(
name|QPalette
operator|::
name|ColorRole
call|)
argument_list|(
name|role
operator|-
name|Value_FirstColorRole
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|property
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"qproperty-"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
comment|// intentionally left blank...
block|}
elseif|else
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|propertyId
operator|==
name|UnknownProperty
condition|)
block|{
name|bool
name|knownStyleHint
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numKnownStyleHints
condition|;
name|i
operator|++
control|)
block|{
name|QLatin1String
name|styleHint
argument_list|(
name|knownStyleHints
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|decl
operator|.
name|d
operator|->
name|property
operator|.
name|compare
argument_list|(
name|styleHint
argument_list|)
operator|==
literal|0
condition|)
block|{
name|QString
name|hintName
init|=
name|QString
argument_list|(
name|styleHint
argument_list|)
decl_stmt|;
name|QVariant
name|hintValue
decl_stmt|;
if|if
condition|(
name|hintName
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"alignment"
argument_list|)
argument_list|)
condition|)
block|{
name|hintValue
operator|=
operator|(
name|int
operator|)
name|decl
operator|.
name|alignmentValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hintName
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"color"
argument_list|)
argument_list|)
condition|)
block|{
name|hintValue
operator|=
operator|(
name|int
operator|)
name|decl
operator|.
name|colorValue
argument_list|()
operator|.
name|rgba
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hintName
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"size"
argument_list|)
argument_list|)
condition|)
block|{
name|hintValue
operator|=
name|decl
operator|.
name|sizeValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hintName
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"icon"
argument_list|)
argument_list|)
condition|)
block|{
name|hintValue
operator|=
name|decl
operator|.
name|iconValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hintName
operator|==
name|QLatin1String
argument_list|(
literal|"button-layout"
argument_list|)
operator|&&
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
operator|!=
literal|0
operator|&&
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|type
operator|==
name|Value
operator|::
name|String
condition|)
block|{
name|hintValue
operator|=
name|subControlLayout
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|integer
decl_stmt|;
name|decl
operator|.
name|intValue
argument_list|(
operator|&
name|integer
argument_list|)
expr_stmt|;
name|hintValue
operator|=
name|integer
expr_stmt|;
block|}
name|styleHints
index|[
name|decl
operator|.
name|d
operator|->
name|property
index|]
operator|=
name|hintValue
expr_stmt|;
name|knownStyleHint
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|knownStyleHint
condition|)
name|qDebug
argument_list|(
literal|"Unknown property %s"
argument_list|,
name|qPrintable
argument_list|(
name|decl
operator|.
name|d
operator|->
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
specifier|const
name|QWidget
modifier|*
name|widget
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
condition|)
block|{
name|QStyleSheetStyle
modifier|*
name|style
init|=
cast|const_cast
argument_list|<
name|QStyleSheetStyle
operator|*
argument_list|>
argument_list|(
name|globalStyleSheetStyle
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|style
condition|)
name|style
operator|=
name|qobject_cast
argument_list|<
name|QStyleSheetStyle
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|style
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
condition|)
name|fixupBorder
argument_list|(
name|style
operator|->
name|nativeFrameWidth
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasBorder
argument_list|()
operator|&&
name|border
argument_list|()
operator|->
name|hasBorderImage
argument_list|()
condition|)
name|defaultBackground
operator|=
name|QBrush
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|borderRect
name|QRect
name|QRenderRule
operator|::
name|borderRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|hasBox
argument_list|()
condition|)
return|return
name|r
return|;
specifier|const
name|int
modifier|*
name|m
init|=
name|box
argument_list|()
operator|->
name|margins
decl_stmt|;
return|return
name|r
operator|.
name|adjusted
argument_list|(
name|m
index|[
name|LeftEdge
index|]
argument_list|,
name|m
index|[
name|TopEdge
index|]
argument_list|,
operator|-
name|m
index|[
name|RightEdge
index|]
argument_list|,
operator|-
name|m
index|[
name|BottomEdge
index|]
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|outlineRect
name|QRect
name|QRenderRule
operator|::
name|outlineRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
block|{
name|QRect
name|br
init|=
name|borderRect
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasOutline
argument_list|()
condition|)
return|return
name|br
return|;
specifier|const
name|int
modifier|*
name|b
init|=
name|outline
argument_list|()
operator|->
name|borders
decl_stmt|;
return|return
name|r
operator|.
name|adjusted
argument_list|(
name|b
index|[
name|LeftEdge
index|]
argument_list|,
name|b
index|[
name|TopEdge
index|]
argument_list|,
operator|-
name|b
index|[
name|RightEdge
index|]
argument_list|,
operator|-
name|b
index|[
name|BottomEdge
index|]
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|paddingRect
name|QRect
name|QRenderRule
operator|::
name|paddingRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
block|{
name|QRect
name|br
init|=
name|borderRect
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasBorder
argument_list|()
condition|)
return|return
name|br
return|;
specifier|const
name|int
modifier|*
name|b
init|=
name|border
argument_list|()
operator|->
name|borders
decl_stmt|;
return|return
name|br
operator|.
name|adjusted
argument_list|(
name|b
index|[
name|LeftEdge
index|]
argument_list|,
name|b
index|[
name|TopEdge
index|]
argument_list|,
operator|-
name|b
index|[
name|RightEdge
index|]
argument_list|,
operator|-
name|b
index|[
name|BottomEdge
index|]
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|contentsRect
name|QRect
name|QRenderRule
operator|::
name|contentsRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
block|{
name|QRect
name|pr
init|=
name|paddingRect
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasBox
argument_list|()
condition|)
return|return
name|pr
return|;
specifier|const
name|int
modifier|*
name|p
init|=
name|box
argument_list|()
operator|->
name|paddings
decl_stmt|;
return|return
name|pr
operator|.
name|adjusted
argument_list|(
name|p
index|[
name|LeftEdge
index|]
argument_list|,
name|p
index|[
name|TopEdge
index|]
argument_list|,
operator|-
name|p
index|[
name|RightEdge
index|]
argument_list|,
operator|-
name|p
index|[
name|BottomEdge
index|]
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|boxRect
name|QRect
name|QRenderRule
operator|::
name|boxRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|cr
parameter_list|,
name|int
name|flags
parameter_list|)
specifier|const
block|{
name|QRect
name|r
init|=
name|cr
decl_stmt|;
if|if
condition|(
name|hasBox
argument_list|()
condition|)
block|{
if|if
condition|(
name|flags
operator|&
name|Margin
condition|)
block|{
specifier|const
name|int
modifier|*
name|m
init|=
name|box
argument_list|()
operator|->
name|margins
decl_stmt|;
name|r
operator|.
name|adjust
argument_list|(
operator|-
name|m
index|[
name|LeftEdge
index|]
argument_list|,
operator|-
name|m
index|[
name|TopEdge
index|]
argument_list|,
name|m
index|[
name|RightEdge
index|]
argument_list|,
name|m
index|[
name|BottomEdge
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Padding
condition|)
block|{
specifier|const
name|int
modifier|*
name|p
init|=
name|box
argument_list|()
operator|->
name|paddings
decl_stmt|;
name|r
operator|.
name|adjust
argument_list|(
operator|-
name|p
index|[
name|LeftEdge
index|]
argument_list|,
operator|-
name|p
index|[
name|TopEdge
index|]
argument_list|,
name|p
index|[
name|RightEdge
index|]
argument_list|,
name|p
index|[
name|BottomEdge
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasBorder
argument_list|()
operator|&&
operator|(
name|flags
operator|&
name|Border
operator|)
condition|)
block|{
specifier|const
name|int
modifier|*
name|b
init|=
name|border
argument_list|()
operator|->
name|borders
decl_stmt|;
name|r
operator|.
name|adjust
argument_list|(
operator|-
name|b
index|[
name|LeftEdge
index|]
argument_list|,
operator|-
name|b
index|[
name|TopEdge
index|]
argument_list|,
name|b
index|[
name|RightEdge
index|]
argument_list|,
name|b
index|[
name|BottomEdge
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|boxSize
name|QSize
name|QRenderRule
operator|::
name|boxSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|cs
parameter_list|,
name|int
name|flags
parameter_list|)
specifier|const
block|{
name|QSize
name|bs
init|=
name|boxRect
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|cs
argument_list|)
argument_list|,
name|flags
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|cs
operator|.
name|width
argument_list|()
operator|<
literal|0
condition|)
name|bs
operator|.
name|setWidth
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|.
name|height
argument_list|()
operator|<
literal|0
condition|)
name|bs
operator|.
name|setHeight
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|bs
return|;
block|}
end_function
begin_function
DECL|function|fixupBorder
name|void
name|QRenderRule
operator|::
name|fixupBorder
parameter_list|(
name|int
name|nativeWidth
parameter_list|)
block|{
if|if
condition|(
name|bd
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
operator|!
name|bd
operator|->
name|hasBorderImage
argument_list|()
operator|||
name|bd
operator|->
name|bi
operator|->
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|bd
operator|->
name|bi
operator|=
literal|0
expr_stmt|;
comment|// ignore the color, border of edges that have none border-style
name|QBrush
name|color
init|=
name|pal
condition|?
name|pal
operator|->
name|foreground
else|:
name|QBrush
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|hasRadius
init|=
name|bd
operator|->
name|radii
index|[
literal|0
index|]
operator|.
name|isValid
argument_list|()
operator|||
name|bd
operator|->
name|radii
index|[
literal|1
index|]
operator|.
name|isValid
argument_list|()
operator|||
name|bd
operator|->
name|radii
index|[
literal|2
index|]
operator|.
name|isValid
argument_list|()
operator|||
name|bd
operator|->
name|radii
index|[
literal|3
index|]
operator|.
name|isValid
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|bd
operator|->
name|styles
index|[
name|i
index|]
operator|==
name|BorderStyle_Native
operator|)
operator|&&
name|hasRadius
condition|)
name|bd
operator|->
name|styles
index|[
name|i
index|]
operator|=
name|BorderStyle_None
expr_stmt|;
switch|switch
condition|(
name|bd
operator|->
name|styles
index|[
name|i
index|]
condition|)
block|{
case|case
name|BorderStyle_None
case|:
comment|// border-style: none forces width to be 0
name|bd
operator|->
name|colors
index|[
name|i
index|]
operator|=
name|QBrush
argument_list|()
expr_stmt|;
name|bd
operator|->
name|borders
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|BorderStyle_Native
case|:
if|if
condition|(
name|bd
operator|->
name|borders
index|[
name|i
index|]
operator|==
literal|0
condition|)
name|bd
operator|->
name|borders
index|[
name|i
index|]
operator|=
name|nativeWidth
expr_stmt|;
comment|// intentional fall through
default|default:
if|if
condition|(
name|bd
operator|->
name|colors
index|[
name|i
index|]
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
condition|)
comment|// auto-acquire 'color'
name|bd
operator|->
name|colors
index|[
name|i
index|]
operator|=
name|color
expr_stmt|;
break|break;
block|}
block|}
return|return;
block|}
comment|// inspect the border image
name|QStyleSheetBorderImageData
modifier|*
name|bi
init|=
name|bd
operator|->
name|bi
decl_stmt|;
if|if
condition|(
name|bi
operator|->
name|cuts
index|[
literal|0
index|]
operator|==
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
comment|// assume, cut = border
name|bi
operator|->
name|cuts
index|[
name|i
index|]
operator|=
name|int
argument_list|(
name|border
argument_list|()
operator|->
name|borders
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawBorderImage
name|void
name|QRenderRule
operator|::
name|drawBorderImage
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|setClip
argument_list|(
name|p
argument_list|,
name|rect
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|Qt
operator|::
name|TileRule
name|tileMode2TileRule
index|[]
init|=
block|{
name|Qt
operator|::
name|StretchTile
block|,
name|Qt
operator|::
name|RoundTile
block|,
name|Qt
operator|::
name|StretchTile
block|,
name|Qt
operator|::
name|RepeatTile
block|,
name|Qt
operator|::
name|StretchTile
block|}
decl_stmt|;
specifier|const
name|QStyleSheetBorderImageData
modifier|*
name|borderImageData
init|=
name|border
argument_list|()
operator|->
name|borderImage
argument_list|()
decl_stmt|;
specifier|const
name|int
modifier|*
name|targetBorders
init|=
name|border
argument_list|()
operator|->
name|borders
decl_stmt|;
specifier|const
name|int
modifier|*
name|sourceBorders
init|=
name|borderImageData
operator|->
name|cuts
decl_stmt|;
name|QMargins
name|sourceMargins
argument_list|(
name|sourceBorders
index|[
name|LeftEdge
index|]
argument_list|,
name|sourceBorders
index|[
name|TopEdge
index|]
argument_list|,
name|sourceBorders
index|[
name|RightEdge
index|]
argument_list|,
name|sourceBorders
index|[
name|BottomEdge
index|]
argument_list|)
decl_stmt|;
name|QMargins
name|targetMargins
argument_list|(
name|targetBorders
index|[
name|LeftEdge
index|]
argument_list|,
name|targetBorders
index|[
name|TopEdge
index|]
argument_list|,
name|targetBorders
index|[
name|RightEdge
index|]
argument_list|,
name|targetBorders
index|[
name|BottomEdge
index|]
argument_list|)
decl_stmt|;
name|bool
name|wasSmoothPixmapTransform
init|=
name|p
operator|->
name|renderHints
argument_list|()
operator|&
name|QPainter
operator|::
name|SmoothPixmapTransform
decl_stmt|;
name|p
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|)
expr_stmt|;
name|qDrawBorderPixmap
argument_list|(
name|p
argument_list|,
name|rect
argument_list|,
name|targetMargins
argument_list|,
name|borderImageData
operator|->
name|pixmap
argument_list|,
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|borderImageData
operator|->
name|pixmap
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|sourceMargins
argument_list|,
name|QTileRules
argument_list|(
name|tileMode2TileRule
index|[
name|borderImageData
operator|->
name|horizStretch
index|]
argument_list|,
name|tileMode2TileRule
index|[
name|borderImageData
operator|->
name|vertStretch
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|,
name|wasSmoothPixmapTransform
argument_list|)
expr_stmt|;
name|unsetClip
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|originRect
name|QRect
name|QRenderRule
operator|::
name|originRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|Origin
name|origin
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|origin
condition|)
block|{
case|case
name|Origin_Padding
case|:
return|return
name|paddingRect
argument_list|(
name|rect
argument_list|)
return|;
case|case
name|Origin_Border
case|:
return|return
name|borderRect
argument_list|(
name|rect
argument_list|)
return|;
case|case
name|Origin_Content
case|:
return|return
name|contentsRect
argument_list|(
name|rect
argument_list|)
return|;
case|case
name|Origin_Margin
case|:
default|default:
return|return
name|rect
return|;
block|}
block|}
end_function
begin_function
DECL|function|drawBackgroundImage
name|void
name|QRenderRule
operator|::
name|drawBackgroundImage
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|QPoint
name|off
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasBackground
argument_list|()
condition|)
return|return;
specifier|const
name|QPixmap
modifier|&
name|bgp
init|=
name|background
argument_list|()
operator|->
name|pixmap
decl_stmt|;
if|if
condition|(
name|bgp
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|setClip
argument_list|(
name|p
argument_list|,
name|borderRect
argument_list|(
name|rect
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|background
argument_list|()
operator|->
name|origin
operator|!=
name|background
argument_list|()
operator|->
name|clip
condition|)
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setClipRect
argument_list|(
name|originRect
argument_list|(
name|rect
argument_list|,
name|background
argument_list|()
operator|->
name|clip
argument_list|)
argument_list|,
name|Qt
operator|::
name|IntersectClip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|background
argument_list|()
operator|->
name|attachment
operator|==
name|Attachment_Fixed
condition|)
name|off
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|originRect
argument_list|(
name|rect
argument_list|,
name|background
argument_list|()
operator|->
name|origin
argument_list|)
decl_stmt|;
name|QRect
name|aligned
init|=
name|QStyle
operator|::
name|alignedRect
argument_list|(
name|Qt
operator|::
name|LeftToRight
argument_list|,
name|background
argument_list|()
operator|->
name|position
argument_list|,
name|bgp
operator|.
name|size
argument_list|()
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|QRect
name|inter
init|=
name|aligned
operator|.
name|translated
argument_list|(
operator|-
name|off
argument_list|)
operator|.
name|intersected
argument_list|(
name|r
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|background
argument_list|()
operator|->
name|repeat
condition|)
block|{
case|case
name|Repeat_Y
case|:
name|p
operator|->
name|drawTiledPixmap
argument_list|(
name|inter
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|inter
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|bgp
argument_list|,
name|inter
operator|.
name|x
argument_list|()
operator|-
name|aligned
operator|.
name|x
argument_list|()
operator|+
name|off
operator|.
name|x
argument_list|()
argument_list|,
name|bgp
operator|.
name|height
argument_list|()
operator|-
name|int
argument_list|(
name|aligned
operator|.
name|y
argument_list|()
operator|-
name|r
operator|.
name|y
argument_list|()
argument_list|)
operator|%
name|bgp
operator|.
name|height
argument_list|()
operator|+
name|off
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Repeat_X
case|:
name|p
operator|->
name|drawTiledPixmap
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|inter
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|inter
operator|.
name|height
argument_list|()
argument_list|,
name|bgp
argument_list|,
name|bgp
operator|.
name|width
argument_list|()
operator|-
name|int
argument_list|(
name|aligned
operator|.
name|x
argument_list|()
operator|-
name|r
operator|.
name|x
argument_list|()
argument_list|)
operator|%
name|bgp
operator|.
name|width
argument_list|()
operator|+
name|off
operator|.
name|x
argument_list|()
argument_list|,
name|inter
operator|.
name|y
argument_list|()
operator|-
name|aligned
operator|.
name|y
argument_list|()
operator|+
name|off
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Repeat_XY
case|:
name|p
operator|->
name|drawTiledPixmap
argument_list|(
name|r
argument_list|,
name|bgp
argument_list|,
name|QPoint
argument_list|(
name|bgp
operator|.
name|width
argument_list|()
operator|-
name|int
argument_list|(
name|aligned
operator|.
name|x
argument_list|()
operator|-
name|r
operator|.
name|x
argument_list|()
argument_list|)
operator|%
name|bgp
operator|.
name|width
argument_list|()
operator|+
name|off
operator|.
name|x
argument_list|()
argument_list|,
name|bgp
operator|.
name|height
argument_list|()
operator|-
name|int
argument_list|(
name|aligned
operator|.
name|y
argument_list|()
operator|-
name|r
operator|.
name|y
argument_list|()
argument_list|)
operator|%
name|bgp
operator|.
name|height
argument_list|()
operator|+
name|off
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Repeat_None
case|:
default|default:
name|p
operator|->
name|drawPixmap
argument_list|(
name|inter
operator|.
name|x
argument_list|()
argument_list|,
name|inter
operator|.
name|y
argument_list|()
argument_list|,
name|bgp
argument_list|,
name|inter
operator|.
name|x
argument_list|()
operator|-
name|aligned
operator|.
name|x
argument_list|()
operator|+
name|off
operator|.
name|x
argument_list|()
argument_list|,
name|inter
operator|.
name|y
argument_list|()
operator|-
name|aligned
operator|.
name|y
argument_list|()
operator|+
name|off
operator|.
name|y
argument_list|()
argument_list|,
name|inter
operator|.
name|width
argument_list|()
argument_list|,
name|inter
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|background
argument_list|()
operator|->
name|origin
operator|!=
name|background
argument_list|()
operator|->
name|clip
condition|)
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
name|unsetClip
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawOutline
name|void
name|QRenderRule
operator|::
name|drawOutline
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasOutline
argument_list|()
condition|)
return|return;
name|bool
name|wasAntialiased
init|=
name|p
operator|->
name|renderHints
argument_list|()
operator|&
name|QPainter
operator|::
name|Antialiasing
decl_stmt|;
name|p
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|qDrawBorder
argument_list|(
name|p
argument_list|,
name|rect
argument_list|,
name|ou
operator|->
name|styles
argument_list|,
name|ou
operator|->
name|borders
argument_list|,
name|ou
operator|->
name|colors
argument_list|,
name|ou
operator|->
name|radii
argument_list|)
expr_stmt|;
name|p
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|,
name|wasAntialiased
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawBorder
name|void
name|QRenderRule
operator|::
name|drawBorder
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasBorder
argument_list|()
condition|)
return|return;
if|if
condition|(
name|border
argument_list|()
operator|->
name|hasBorderImage
argument_list|()
condition|)
block|{
name|drawBorderImage
argument_list|(
name|p
argument_list|,
name|rect
argument_list|)
expr_stmt|;
return|return;
block|}
name|bool
name|wasAntialiased
init|=
name|p
operator|->
name|renderHints
argument_list|()
operator|&
name|QPainter
operator|::
name|Antialiasing
decl_stmt|;
name|p
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|qDrawBorder
argument_list|(
name|p
argument_list|,
name|rect
argument_list|,
name|bd
operator|->
name|styles
argument_list|,
name|bd
operator|->
name|borders
argument_list|,
name|bd
operator|->
name|colors
argument_list|,
name|bd
operator|->
name|radii
argument_list|)
expr_stmt|;
name|p
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|,
name|wasAntialiased
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|borderClip
name|QPainterPath
name|QRenderRule
operator|::
name|borderClip
parameter_list|(
name|QRect
name|r
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasBorder
argument_list|()
condition|)
return|return
name|QPainterPath
argument_list|()
return|;
name|QSize
name|tlr
decl_stmt|,
name|trr
decl_stmt|,
name|blr
decl_stmt|,
name|brr
decl_stmt|;
name|qNormalizeRadii
argument_list|(
name|r
argument_list|,
name|bd
operator|->
name|radii
argument_list|,
operator|&
name|tlr
argument_list|,
operator|&
name|trr
argument_list|,
operator|&
name|blr
argument_list|,
operator|&
name|brr
argument_list|)
expr_stmt|;
if|if
condition|(
name|tlr
operator|.
name|isNull
argument_list|()
operator|&&
name|trr
operator|.
name|isNull
argument_list|()
operator|&&
name|blr
operator|.
name|isNull
argument_list|()
operator|&&
name|brr
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QPainterPath
argument_list|()
return|;
specifier|const
name|QRectF
name|rect
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|const
name|int
modifier|*
name|borders
init|=
name|border
argument_list|()
operator|->
name|borders
decl_stmt|;
name|QPainterPath
name|path
decl_stmt|;
name|qreal
name|curY
init|=
name|rect
operator|.
name|y
argument_list|()
operator|+
name|borders
index|[
name|TopEdge
index|]
operator|/
literal|2.0
decl_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
name|rect
operator|.
name|x
argument_list|()
operator|+
name|tlr
operator|.
name|width
argument_list|()
argument_list|,
name|curY
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|trr
operator|.
name|width
argument_list|()
argument_list|,
name|curY
argument_list|)
expr_stmt|;
name|qreal
name|curX
init|=
name|rect
operator|.
name|right
argument_list|()
operator|-
name|borders
index|[
name|RightEdge
index|]
operator|/
literal|2.0
decl_stmt|;
name|path
operator|.
name|arcTo
argument_list|(
name|curX
operator|-
literal|2
operator|*
name|trr
operator|.
name|width
argument_list|()
operator|+
name|borders
index|[
name|RightEdge
index|]
argument_list|,
name|curY
argument_list|,
name|trr
operator|.
name|width
argument_list|()
operator|*
literal|2
operator|-
name|borders
index|[
name|RightEdge
index|]
argument_list|,
name|trr
operator|.
name|height
argument_list|()
operator|*
literal|2
operator|-
name|borders
index|[
name|TopEdge
index|]
argument_list|,
literal|90
argument_list|,
operator|-
literal|90
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|curX
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|brr
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|curY
operator|=
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|borders
index|[
name|BottomEdge
index|]
operator|/
literal|2.0
expr_stmt|;
name|path
operator|.
name|arcTo
argument_list|(
name|curX
operator|-
literal|2
operator|*
name|brr
operator|.
name|width
argument_list|()
operator|+
name|borders
index|[
name|RightEdge
index|]
argument_list|,
name|curY
operator|-
literal|2
operator|*
name|brr
operator|.
name|height
argument_list|()
operator|+
name|borders
index|[
name|BottomEdge
index|]
argument_list|,
name|brr
operator|.
name|width
argument_list|()
operator|*
literal|2
operator|-
name|borders
index|[
name|RightEdge
index|]
argument_list|,
name|brr
operator|.
name|height
argument_list|()
operator|*
literal|2
operator|-
name|borders
index|[
name|BottomEdge
index|]
argument_list|,
literal|0
argument_list|,
operator|-
literal|90
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|rect
operator|.
name|x
argument_list|()
operator|+
name|blr
operator|.
name|width
argument_list|()
argument_list|,
name|curY
argument_list|)
expr_stmt|;
name|curX
operator|=
name|rect
operator|.
name|left
argument_list|()
operator|+
name|borders
index|[
name|LeftEdge
index|]
operator|/
literal|2.0
expr_stmt|;
name|path
operator|.
name|arcTo
argument_list|(
name|curX
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|-
literal|2
operator|*
name|blr
operator|.
name|height
argument_list|()
operator|+
name|borders
index|[
name|BottomEdge
index|]
operator|/
literal|2
argument_list|,
name|blr
operator|.
name|width
argument_list|()
operator|*
literal|2
operator|-
name|borders
index|[
name|LeftEdge
index|]
argument_list|,
name|blr
operator|.
name|height
argument_list|()
operator|*
literal|2
operator|-
name|borders
index|[
name|BottomEdge
index|]
argument_list|,
literal|270
argument_list|,
operator|-
literal|90
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|curX
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|+
name|tlr
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|.
name|arcTo
argument_list|(
name|curX
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|+
name|borders
index|[
name|TopEdge
index|]
operator|/
literal|2
argument_list|,
name|tlr
operator|.
name|width
argument_list|()
operator|*
literal|2
operator|-
name|borders
index|[
name|LeftEdge
index|]
argument_list|,
name|tlr
operator|.
name|height
argument_list|()
operator|*
literal|2
operator|-
name|borders
index|[
name|TopEdge
index|]
argument_list|,
literal|180
argument_list|,
operator|-
literal|90
argument_list|)
expr_stmt|;
name|path
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
return|return
name|path
return|;
block|}
end_function
begin_comment
comment|/*! \internal   Clip the painter to the border (in case we are using radius border)  */
end_comment
begin_function
DECL|function|setClip
name|void
name|QRenderRule
operator|::
name|setClip
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|clipset
operator|++
condition|)
return|return;
name|clipPath
operator|=
name|borderClip
argument_list|(
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|clipPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setClipPath
argument_list|(
name|clipPath
argument_list|,
name|Qt
operator|::
name|IntersectClip
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|unsetClip
name|void
name|QRenderRule
operator|::
name|unsetClip
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|)
block|{
if|if
condition|(
operator|--
name|clipset
condition|)
return|return;
if|if
condition|(
operator|!
name|clipPath
operator|.
name|isEmpty
argument_list|()
condition|)
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawBackground
name|void
name|QRenderRule
operator|::
name|drawBackground
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|off
parameter_list|)
block|{
name|QBrush
name|brush
init|=
name|hasBackground
argument_list|()
condition|?
name|background
argument_list|()
operator|->
name|brush
else|:
name|QBrush
argument_list|()
decl_stmt|;
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
condition|)
name|brush
operator|=
name|defaultBackground
expr_stmt|;
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
name|Origin
name|origin
init|=
name|hasBackground
argument_list|()
condition|?
name|background
argument_list|()
operator|->
name|clip
else|:
name|Origin_Border
decl_stmt|;
comment|// ### fix for  gradients
specifier|const
name|QPainterPath
modifier|&
name|borderPath
init|=
name|borderClip
argument_list|(
name|originRect
argument_list|(
name|rect
argument_list|,
name|origin
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|borderPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Drawn intead of being used as clipping path for better visual quality
name|bool
name|wasAntialiased
init|=
name|p
operator|->
name|renderHints
argument_list|()
operator|&
name|QPainter
operator|::
name|Antialiasing
decl_stmt|;
name|p
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|p
operator|->
name|fillPath
argument_list|(
name|borderPath
argument_list|,
name|brush
argument_list|)
expr_stmt|;
name|p
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|,
name|wasAntialiased
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|originRect
argument_list|(
name|rect
argument_list|,
name|origin
argument_list|)
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
block|}
name|drawBackgroundImage
argument_list|(
name|p
argument_list|,
name|rect
argument_list|,
name|off
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawFrame
name|void
name|QRenderRule
operator|::
name|drawFrame
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|drawBackground
argument_list|(
name|p
argument_list|,
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasBorder
argument_list|()
condition|)
name|drawBorder
argument_list|(
name|p
argument_list|,
name|borderRect
argument_list|(
name|rect
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QRenderRule
operator|::
name|drawImage
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasImage
argument_list|()
condition|)
return|return;
name|img
operator|->
name|icon
operator|.
name|paint
argument_list|(
name|p
argument_list|,
name|rect
argument_list|,
name|img
operator|->
name|alignment
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawRule
name|void
name|QRenderRule
operator|::
name|drawRule
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|drawFrame
argument_list|(
name|p
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|drawImage
argument_list|(
name|p
argument_list|,
name|contentsRect
argument_list|(
name|rect
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// *shudder* , *horror*, *whoa*<-- what you might feel when you see the functions below
end_comment
begin_function
DECL|function|configurePalette
name|void
name|QRenderRule
operator|::
name|configurePalette
parameter_list|(
name|QPalette
modifier|*
name|p
parameter_list|,
name|QPalette
operator|::
name|ColorRole
name|fr
parameter_list|,
name|QPalette
operator|::
name|ColorRole
name|br
parameter_list|)
block|{
if|if
condition|(
name|bg
operator|&&
name|bg
operator|->
name|brush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
if|if
condition|(
name|br
operator|!=
name|QPalette
operator|::
name|NoRole
condition|)
name|p
operator|->
name|setBrush
argument_list|(
name|br
argument_list|,
name|bg
operator|->
name|brush
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|bg
operator|->
name|brush
argument_list|)
expr_stmt|;
if|if
condition|(
name|bg
operator|->
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
condition|)
block|{
name|p
operator|->
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|bg
operator|->
name|brush
operator|.
name|color
argument_list|()
operator|.
name|lighter
argument_list|(
literal|115
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|bg
operator|->
name|brush
operator|.
name|color
argument_list|()
operator|.
name|lighter
argument_list|(
literal|107
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|,
name|bg
operator|->
name|brush
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|,
name|bg
operator|->
name|brush
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|300
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasPalette
argument_list|()
condition|)
return|return;
if|if
condition|(
name|pal
operator|->
name|foreground
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
if|if
condition|(
name|fr
operator|!=
name|QPalette
operator|::
name|NoRole
condition|)
name|p
operator|->
name|setBrush
argument_list|(
name|fr
argument_list|,
name|pal
operator|->
name|foreground
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|pal
operator|->
name|foreground
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|pal
operator|->
name|foreground
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pal
operator|->
name|selectionBackground
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
name|p
operator|->
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|pal
operator|->
name|selectionBackground
argument_list|)
expr_stmt|;
if|if
condition|(
name|pal
operator|->
name|selectionForeground
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
name|p
operator|->
name|setBrush
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|pal
operator|->
name|selectionForeground
argument_list|)
expr_stmt|;
if|if
condition|(
name|pal
operator|->
name|alternateBackground
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
name|p
operator|->
name|setBrush
argument_list|(
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|pal
operator|->
name|alternateBackground
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|configurePalette
name|void
name|QRenderRule
operator|::
name|configurePalette
parameter_list|(
name|QPalette
modifier|*
name|p
parameter_list|,
name|QPalette
operator|::
name|ColorGroup
name|cg
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|embedded
parameter_list|)
block|{
if|if
condition|(
name|bg
operator|&&
name|bg
operator|->
name|brush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
name|p
operator|->
name|setBrush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|bg
operator|->
name|brush
argument_list|)
expr_stmt|;
comment|// for windows, windowxp
name|p
operator|->
name|setBrush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|bg
operator|->
name|brush
argument_list|)
expr_stmt|;
comment|// for plastique
name|p
operator|->
name|setBrush
argument_list|(
name|cg
argument_list|,
name|w
operator|->
name|backgroundRole
argument_list|()
argument_list|,
name|bg
operator|->
name|brush
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|,
name|bg
operator|->
name|brush
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|embedded
condition|)
block|{
comment|/* For embedded widgets (ComboBox, SpinBox and ScrollArea) we want the embedded widget          * to be transparent when we have a transparent background or border image */
if|if
condition|(
operator|(
name|hasBackground
argument_list|()
operator|&&
name|background
argument_list|()
operator|->
name|isTransparent
argument_list|()
operator|)
operator|||
operator|(
name|hasBorder
argument_list|()
operator|&&
name|border
argument_list|()
operator|->
name|hasBorderImage
argument_list|()
operator|&&
operator|!
name|border
argument_list|()
operator|->
name|borderImage
argument_list|()
operator|->
name|pixmap
operator|.
name|isNull
argument_list|()
operator|)
condition|)
name|p
operator|->
name|setBrush
argument_list|(
name|cg
argument_list|,
name|w
operator|->
name|backgroundRole
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasPalette
argument_list|()
condition|)
return|return;
if|if
condition|(
name|pal
operator|->
name|foreground
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
name|p
operator|->
name|setBrush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|pal
operator|->
name|foreground
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|cg
argument_list|,
name|w
operator|->
name|foregroundRole
argument_list|()
argument_list|,
name|pal
operator|->
name|foreground
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|pal
operator|->
name|foreground
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|pal
operator|->
name|foreground
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pal
operator|->
name|selectionBackground
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
name|p
operator|->
name|setBrush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|pal
operator|->
name|selectionBackground
argument_list|)
expr_stmt|;
if|if
condition|(
name|pal
operator|->
name|selectionForeground
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
name|p
operator|->
name|setBrush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|pal
operator|->
name|selectionForeground
argument_list|)
expr_stmt|;
if|if
condition|(
name|pal
operator|->
name|alternateBackground
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
name|p
operator|->
name|setBrush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|pal
operator|->
name|alternateBackground
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|// Style rules
end_comment
begin_define
DECL|macro|OBJECT_PTR
define|#
directive|define
name|OBJECT_PTR
parameter_list|(
name|x
parameter_list|)
value|(static_cast<QObject *>(x.ptr))
end_define
begin_function
DECL|function|parentObject
specifier|static
specifier|inline
name|QObject
modifier|*
name|parentObject
parameter_list|(
specifier|const
name|QObject
modifier|*
name|obj
parameter_list|)
block|{
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QLabel
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
operator|&&
name|qstrcmp
argument_list|(
name|obj
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
literal|"QTipLabel"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|QObject
modifier|*
name|p
init|=
name|qvariant_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|obj
operator|->
name|property
argument_list|(
literal|"_q_stylesheet_parent"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
condition|)
return|return
name|p
return|;
block|}
return|return
name|obj
operator|->
name|parent
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|QStyleSheetStyleSelector
class|class
name|QStyleSheetStyleSelector
super|:
specifier|public
name|StyleSelector
block|{
public|public:
DECL|function|QStyleSheetStyleSelector
name|QStyleSheetStyleSelector
parameter_list|()
block|{ }
DECL|function|nodeNames
name|QStringList
name|nodeNames
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isNullNode
argument_list|(
name|node
argument_list|)
condition|)
return|return
name|QStringList
argument_list|()
return|;
specifier|const
name|QMetaObject
modifier|*
name|metaObject
init|=
name|OBJECT_PTR
argument_list|(
name|node
argument_list|)
operator|->
name|metaObject
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
if|if
condition|(
name|qstrcmp
argument_list|(
name|metaObject
operator|->
name|className
argument_list|()
argument_list|,
literal|"QTipLabel"
argument_list|)
operator|==
literal|0
condition|)
return|return
name|QStringList
argument_list|(
name|QLatin1String
argument_list|(
literal|"QToolTip"
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
name|QStringList
name|result
decl_stmt|;
do|do
block|{
name|result
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|metaObject
operator|->
name|className
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|metaObject
operator|=
name|metaObject
operator|->
name|superClass
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|metaObject
operator|!=
literal|0
condition|)
do|;
return|return
name|result
return|;
block|}
DECL|function|attribute
name|QString
name|attribute
parameter_list|(
name|NodePtr
name|node
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isNullNode
argument_list|(
name|node
argument_list|)
condition|)
return|return
name|QString
argument_list|()
return|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
modifier|&
name|cache
init|=
name|m_attributeCache
index|[
name|OBJECT_PTR
argument_list|(
name|node
argument_list|)
index|]
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|const_iterator
name|cacheIt
init|=
name|cache
operator|.
name|constFind
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheIt
operator|!=
name|cache
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|cacheIt
operator|.
name|value
argument_list|()
return|;
name|QObject
modifier|*
name|obj
init|=
name|OBJECT_PTR
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|QVariant
name|value
init|=
name|obj
operator|->
name|property
argument_list|(
name|name
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"class"
argument_list|)
condition|)
block|{
name|QString
name|className
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|obj
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
condition|)
name|className
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|cache
index|[
name|name
index|]
operator|=
name|className
expr_stmt|;
return|return
name|className
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"style"
argument_list|)
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|QStyleSheetStyle
modifier|*
name|proxy
init|=
name|w
condition|?
name|qobject_cast
argument_list|<
name|QStyleSheetStyle
operator|*
argument_list|>
argument_list|(
name|w
operator|->
name|style
argument_list|()
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|proxy
condition|)
block|{
name|QString
name|styleName
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|proxy
operator|->
name|baseStyle
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
decl_stmt|;
name|cache
index|[
name|name
index|]
operator|=
name|styleName
expr_stmt|;
return|return
name|styleName
return|;
block|}
block|}
block|}
name|QString
name|valueStr
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|StringList
operator|||
name|value
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|List
condition|)
name|valueStr
operator|=
name|value
operator|.
name|toStringList
argument_list|()
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|valueStr
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
name|cache
index|[
name|name
index|]
operator|=
name|valueStr
expr_stmt|;
return|return
name|valueStr
return|;
block|}
DECL|function|nodeNameEquals
name|bool
name|nodeNameEquals
parameter_list|(
name|NodePtr
name|node
parameter_list|,
specifier|const
name|QString
modifier|&
name|nodeName
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isNullNode
argument_list|(
name|node
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|const
name|QMetaObject
modifier|*
name|metaObject
init|=
name|OBJECT_PTR
argument_list|(
name|node
argument_list|)
operator|->
name|metaObject
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
if|if
condition|(
name|qstrcmp
argument_list|(
name|metaObject
operator|->
name|className
argument_list|()
argument_list|,
literal|"QTipLabel"
argument_list|)
operator|==
literal|0
condition|)
return|return
name|nodeName
operator|==
name|QLatin1String
argument_list|(
literal|"QToolTip"
argument_list|)
return|;
endif|#
directive|endif
do|do
block|{
specifier|const
name|ushort
modifier|*
name|uc
init|=
operator|(
specifier|const
name|ushort
operator|*
operator|)
name|nodeName
operator|.
name|constData
argument_list|()
decl_stmt|;
specifier|const
name|ushort
modifier|*
name|e
init|=
name|uc
operator|+
name|nodeName
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|c
init|=
operator|(
name|uchar
operator|*
operator|)
name|metaObject
operator|->
name|className
argument_list|()
decl_stmt|;
while|while
condition|(
operator|*
name|c
operator|&&
name|uc
operator|!=
name|e
operator|&&
operator|(
operator|*
name|uc
operator|==
operator|*
name|c
operator|||
operator|(
operator|*
name|c
operator|==
literal|':'
operator|&&
operator|*
name|uc
operator|==
literal|'-'
operator|)
operator|)
condition|)
block|{
operator|++
name|uc
expr_stmt|;
operator|++
name|c
expr_stmt|;
block|}
if|if
condition|(
name|uc
operator|==
name|e
operator|&&
operator|!
operator|*
name|c
condition|)
return|return
literal|true
return|;
name|metaObject
operator|=
name|metaObject
operator|->
name|superClass
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|metaObject
operator|!=
literal|0
condition|)
do|;
return|return
literal|false
return|;
block|}
DECL|function|hasAttributes
name|bool
name|hasAttributes
parameter_list|(
name|NodePtr
parameter_list|)
specifier|const
block|{
return|return
literal|true
return|;
block|}
DECL|function|nodeIds
name|QStringList
name|nodeIds
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
return|return
name|isNullNode
argument_list|(
name|node
argument_list|)
condition|?
name|QStringList
argument_list|()
else|:
name|QStringList
argument_list|(
name|OBJECT_PTR
argument_list|(
name|node
argument_list|)
operator|->
name|objectName
argument_list|()
argument_list|)
return|;
block|}
DECL|function|isNullNode
name|bool
name|isNullNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
return|return
name|node
operator|.
name|ptr
operator|==
literal|0
return|;
block|}
DECL|function|parentNode
name|NodePtr
name|parentNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
name|NodePtr
name|n
decl_stmt|;
name|n
operator|.
name|ptr
operator|=
name|isNullNode
argument_list|(
name|node
argument_list|)
condition|?
literal|0
else|:
name|parentObject
argument_list|(
name|OBJECT_PTR
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
DECL|function|previousSiblingNode
name|NodePtr
name|previousSiblingNode
parameter_list|(
name|NodePtr
parameter_list|)
specifier|const
block|{
name|NodePtr
name|n
decl_stmt|;
name|n
operator|.
name|ptr
operator|=
literal|0
expr_stmt|;
return|return
name|n
return|;
block|}
DECL|function|duplicateNode
name|NodePtr
name|duplicateNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
return|return
name|node
return|;
block|}
DECL|function|freeNode
name|void
name|freeNode
parameter_list|(
name|NodePtr
parameter_list|)
specifier|const
block|{ }
private|private:
DECL|member|m_attributeCache
specifier|mutable
name|QHash
argument_list|<
specifier|const
name|QObject
modifier|*
argument_list|,
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
name|m_attributeCache
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|styleRules
name|QVector
argument_list|<
name|QCss
operator|::
name|StyleRule
argument_list|>
name|QStyleSheetStyle
operator|::
name|styleRules
parameter_list|(
specifier|const
name|QObject
modifier|*
name|obj
parameter_list|)
specifier|const
block|{
name|QHash
argument_list|<
specifier|const
name|QObject
modifier|*
argument_list|,
name|QVector
argument_list|<
name|StyleRule
argument_list|>
argument_list|>
operator|::
name|const_iterator
name|cacheIt
init|=
name|styleSheetCaches
operator|->
name|styleRulesCache
operator|.
name|constFind
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheIt
operator|!=
name|styleSheetCaches
operator|->
name|styleRulesCache
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|cacheIt
operator|.
name|value
argument_list|()
return|;
if|if
condition|(
operator|!
name|initObject
argument_list|(
name|obj
argument_list|)
condition|)
block|{
return|return
name|QVector
argument_list|<
name|StyleRule
argument_list|>
argument_list|()
return|;
block|}
name|QStyleSheetStyleSelector
name|styleSelector
decl_stmt|;
name|StyleSheet
name|defaultSs
decl_stmt|;
name|QHash
argument_list|<
specifier|const
name|void
modifier|*
argument_list|,
name|StyleSheet
argument_list|>
operator|::
name|const_iterator
name|defaultCacheIt
init|=
name|styleSheetCaches
operator|->
name|styleSheetCache
operator|.
name|constFind
argument_list|(
name|baseStyle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultCacheIt
operator|==
name|styleSheetCaches
operator|->
name|styleSheetCache
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|defaultSs
operator|=
name|getDefaultStyleSheet
argument_list|()
expr_stmt|;
name|QStyle
modifier|*
name|bs
init|=
name|baseStyle
argument_list|()
decl_stmt|;
name|styleSheetCaches
operator|->
name|styleSheetCache
operator|.
name|insert
argument_list|(
name|bs
argument_list|,
name|defaultSs
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|bs
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|styleSheetCaches
argument_list|,
name|SLOT
argument_list|(
name|styleDestroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|UniqueConnection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|defaultSs
operator|=
name|defaultCacheIt
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|styleSelector
operator|.
name|styleSheets
operator|+=
name|defaultSs
expr_stmt|;
if|if
condition|(
operator|!
name|qApp
operator|->
name|styleSheet
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StyleSheet
name|appSs
decl_stmt|;
name|QHash
argument_list|<
specifier|const
name|void
modifier|*
argument_list|,
name|StyleSheet
argument_list|>
operator|::
name|const_iterator
name|appCacheIt
init|=
name|styleSheetCaches
operator|->
name|styleSheetCache
operator|.
name|constFind
argument_list|(
name|qApp
argument_list|)
decl_stmt|;
if|if
condition|(
name|appCacheIt
operator|==
name|styleSheetCaches
operator|->
name|styleSheetCache
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|QString
name|ss
init|=
name|qApp
operator|->
name|styleSheet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"file:///"
argument_list|)
argument_list|)
condition|)
name|ss
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|parser
operator|.
name|init
argument_list|(
name|ss
argument_list|,
name|qApp
operator|->
name|styleSheet
argument_list|()
operator|!=
name|ss
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|appSs
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"Could not parse application stylesheet"
argument_list|)
expr_stmt|;
name|appSs
operator|.
name|origin
operator|=
name|StyleSheetOrigin_Inline
expr_stmt|;
name|appSs
operator|.
name|depth
operator|=
literal|1
expr_stmt|;
name|styleSheetCaches
operator|->
name|styleSheetCache
operator|.
name|insert
argument_list|(
name|qApp
argument_list|,
name|appSs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appSs
operator|=
name|appCacheIt
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|styleSelector
operator|.
name|styleSheets
operator|+=
name|appSs
expr_stmt|;
block|}
name|QVector
argument_list|<
name|QCss
operator|::
name|StyleSheet
argument_list|>
name|objectSs
decl_stmt|;
for|for
control|(
specifier|const
name|QObject
modifier|*
name|o
init|=
name|obj
init|;
name|o
condition|;
name|o
operator|=
name|parentObject
argument_list|(
name|o
argument_list|)
control|)
block|{
name|QString
name|styleSheet
init|=
name|o
operator|->
name|property
argument_list|(
literal|"styleSheet"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|styleSheet
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|StyleSheet
name|ss
decl_stmt|;
name|QHash
argument_list|<
specifier|const
name|void
modifier|*
argument_list|,
name|StyleSheet
argument_list|>
operator|::
name|const_iterator
name|objCacheIt
init|=
name|styleSheetCaches
operator|->
name|styleSheetCache
operator|.
name|constFind
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|objCacheIt
operator|==
name|styleSheetCaches
operator|->
name|styleSheetCache
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|parser
operator|.
name|init
argument_list|(
name|styleSheet
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|ss
argument_list|)
condition|)
block|{
name|parser
operator|.
name|init
argument_list|(
name|QLatin1String
argument_list|(
literal|"* {"
argument_list|)
operator|+
name|styleSheet
operator|+
name|QLatin1Char
argument_list|(
literal|'}'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|ss
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"Could not parse stylesheet of object %p"
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
name|ss
operator|.
name|origin
operator|=
name|StyleSheetOrigin_Inline
expr_stmt|;
name|styleSheetCaches
operator|->
name|styleSheetCache
operator|.
name|insert
argument_list|(
name|o
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ss
operator|=
name|objCacheIt
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|objectSs
operator|.
name|append
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectSs
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|objectSs
index|[
name|i
index|]
operator|.
name|depth
operator|=
name|objectSs
operator|.
name|count
argument_list|()
operator|-
name|i
operator|+
literal|2
expr_stmt|;
name|styleSelector
operator|.
name|styleSheets
operator|+=
name|objectSs
expr_stmt|;
name|StyleSelector
operator|::
name|NodePtr
name|n
decl_stmt|;
name|n
operator|.
name|ptr
operator|=
operator|(
name|void
operator|*
operator|)
name|obj
expr_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|StyleRule
argument_list|>
name|rules
init|=
name|styleSelector
operator|.
name|styleRulesForNode
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|styleSheetCaches
operator|->
name|styleRulesCache
operator|.
name|insert
argument_list|(
name|obj
argument_list|,
name|rules
argument_list|)
expr_stmt|;
return|return
name|rules
return|;
block|}
end_function
begin_comment
comment|/////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|// Rendering rules
end_comment
begin_function
DECL|function|declarations
specifier|static
name|QVector
argument_list|<
name|Declaration
argument_list|>
name|declarations
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|StyleRule
argument_list|>
modifier|&
name|styleRules
parameter_list|,
specifier|const
name|QString
modifier|&
name|part
parameter_list|,
name|quint64
name|pseudoClass
init|=
name|PseudoClass_Unspecified
parameter_list|)
block|{
name|QVector
argument_list|<
name|Declaration
argument_list|>
name|decls
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|styleRules
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Selector
modifier|&
name|selector
init|=
name|styleRules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Rules with pseudo elements don't cascade. This is an intentional
comment|// diversion for CSS
if|if
condition|(
name|part
operator|.
name|compare
argument_list|(
name|selector
operator|.
name|pseudoElement
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|!=
literal|0
condition|)
continue|continue;
name|quint64
name|negated
init|=
literal|0
decl_stmt|;
name|quint64
name|cssClass
init|=
name|selector
operator|.
name|pseudoClass
argument_list|(
operator|&
name|negated
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|pseudoClass
operator|==
name|PseudoClass_Any
operator|)
operator|||
operator|(
name|cssClass
operator|==
name|PseudoClass_Unspecified
operator|)
operator|||
operator|(
operator|(
operator|(
operator|(
name|cssClass
operator|&
name|pseudoClass
operator|)
operator|==
name|cssClass
operator|)
operator|)
operator|&&
operator|(
operator|(
name|negated
operator|&
name|pseudoClass
operator|)
operator|==
literal|0
operator|)
operator|)
condition|)
name|decls
operator|+=
name|styleRules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|declarations
expr_stmt|;
block|}
return|return
name|decls
return|;
block|}
end_function
begin_function
DECL|function|nativeFrameWidth
name|int
name|QStyleSheetStyle
operator|::
name|nativeFrameWidth
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|QStyle
modifier|*
name|base
init|=
name|baseStyle
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
return|return
name|base
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SpinBoxFrameWidth
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
return|return
name|base
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ComboBoxFrameWidth
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QMenu
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
return|return
name|base
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuPanelWidth
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
return|return
name|base
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarPanelWidth
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_FRAME
if|if
condition|(
specifier|const
name|QFrame
modifier|*
name|frame
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QFrame
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
if|if
condition|(
name|frame
operator|->
name|frameShape
argument_list|()
operator|==
name|QFrame
operator|::
name|NoFrame
condition|)
return|return
literal|0
return|;
block|}
endif|#
directive|endif
if|if
condition|(
name|qstrcmp
argument_list|(
name|w
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
literal|"QTipLabel"
argument_list|)
operator|==
literal|0
condition|)
return|return
name|base
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolTipLabelFrameWidth
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
return|;
return|return
name|base
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultFrameWidth
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|pseudoClass
specifier|static
name|quint64
name|pseudoClass
parameter_list|(
name|QStyle
operator|::
name|State
name|state
parameter_list|)
block|{
name|quint64
name|pc
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
condition|)
block|{
name|pc
operator||=
name|PseudoClass_Enabled
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_MouseOver
condition|)
name|pc
operator||=
name|PseudoClass_Hover
expr_stmt|;
block|}
else|else
block|{
name|pc
operator||=
name|PseudoClass_Disabled
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_Active
condition|)
name|pc
operator||=
name|PseudoClass_Active
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_Window
condition|)
name|pc
operator||=
name|PseudoClass_Window
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_Sunken
condition|)
name|pc
operator||=
name|PseudoClass_Pressed
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_HasFocus
condition|)
name|pc
operator||=
name|PseudoClass_Focus
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_On
condition|)
name|pc
operator||=
operator|(
name|PseudoClass_On
operator||
name|PseudoClass_Checked
operator|)
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_Off
condition|)
name|pc
operator||=
operator|(
name|PseudoClass_Off
operator||
name|PseudoClass_Unchecked
operator|)
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_NoChange
condition|)
name|pc
operator||=
name|PseudoClass_Indeterminate
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
name|pc
operator||=
name|PseudoClass_Selected
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_Horizontal
condition|)
name|pc
operator||=
name|PseudoClass_Horizontal
expr_stmt|;
else|else
name|pc
operator||=
name|PseudoClass_Vertical
expr_stmt|;
if|if
condition|(
name|state
operator|&
operator|(
name|QStyle
operator|::
name|State_Open
operator||
name|QStyle
operator|::
name|State_On
operator||
name|QStyle
operator|::
name|State_Sunken
operator|)
condition|)
name|pc
operator||=
name|PseudoClass_Open
expr_stmt|;
else|else
name|pc
operator||=
name|PseudoClass_Closed
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_Children
condition|)
name|pc
operator||=
name|PseudoClass_Children
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_Sibling
condition|)
name|pc
operator||=
name|PseudoClass_Sibling
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_ReadOnly
condition|)
name|pc
operator||=
name|PseudoClass_ReadOnly
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_Item
condition|)
name|pc
operator||=
name|PseudoClass_Item
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_HasEditFocus
condition|)
name|pc
operator||=
name|PseudoClass_EditFocus
expr_stmt|;
endif|#
directive|endif
return|return
name|pc
return|;
block|}
end_function
begin_function
DECL|function|qt_check_if_internal_object
specifier|static
name|void
name|qt_check_if_internal_object
parameter_list|(
specifier|const
name|QObject
modifier|*
modifier|*
name|obj
parameter_list|,
name|int
modifier|*
name|element
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DOCKWIDGET
name|Q_UNUSED
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|element
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
operator|*
name|obj
operator|&&
name|qstrcmp
argument_list|(
operator|(
operator|*
name|obj
operator|)
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
literal|"QDockWidgetTitleButton"
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|obj
operator|)
operator|->
name|objectName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"qt_dockwidget_closebutton"
argument_list|)
condition|)
block|{
operator|*
name|element
operator|=
name|PseudoElement_DockWidgetCloseButton
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|*
name|obj
operator|)
operator|->
name|objectName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"qt_dockwidget_floatbutton"
argument_list|)
condition|)
block|{
operator|*
name|element
operator|=
name|PseudoElement_DockWidgetFloatButton
expr_stmt|;
block|}
operator|*
name|obj
operator|=
operator|(
operator|*
name|obj
operator|)
operator|->
name|parent
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|renderRule
name|QRenderRule
name|QStyleSheetStyle
operator|::
name|renderRule
parameter_list|(
specifier|const
name|QObject
modifier|*
name|obj
parameter_list|,
name|int
name|element
parameter_list|,
name|quint64
name|state
parameter_list|)
specifier|const
block|{
name|qt_check_if_internal_object
argument_list|(
operator|&
name|obj
argument_list|,
operator|&
name|element
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|quint64
argument_list|,
name|QRenderRule
argument_list|>
modifier|&
name|cache
init|=
name|styleSheetCaches
operator|->
name|renderRulesCache
index|[
name|obj
index|]
index|[
name|element
index|]
decl_stmt|;
name|QHash
argument_list|<
name|quint64
argument_list|,
name|QRenderRule
argument_list|>
operator|::
name|const_iterator
name|cacheIt
init|=
name|cache
operator|.
name|constFind
argument_list|(
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheIt
operator|!=
name|cache
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|cacheIt
operator|.
name|value
argument_list|()
return|;
if|if
condition|(
operator|!
name|initObject
argument_list|(
name|obj
argument_list|)
condition|)
return|return
name|QRenderRule
argument_list|()
return|;
name|quint64
name|stateMask
init|=
literal|0
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|StyleRule
argument_list|>
name|rules
init|=
name|styleRules
argument_list|(
name|obj
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rules
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Selector
modifier|&
name|selector
init|=
name|rules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|quint64
name|negated
init|=
literal|0
decl_stmt|;
name|stateMask
operator||=
name|selector
operator|.
name|pseudoClass
argument_list|(
operator|&
name|negated
argument_list|)
expr_stmt|;
name|stateMask
operator||=
name|negated
expr_stmt|;
block|}
name|cacheIt
operator|=
name|cache
operator|.
name|constFind
argument_list|(
name|state
operator|&
name|stateMask
argument_list|)
expr_stmt|;
if|if
condition|(
name|cacheIt
operator|!=
name|cache
operator|.
name|constEnd
argument_list|()
condition|)
block|{
specifier|const
name|QRenderRule
modifier|&
name|newRule
init|=
name|cacheIt
operator|.
name|value
argument_list|()
decl_stmt|;
name|cache
index|[
name|state
index|]
operator|=
name|newRule
expr_stmt|;
return|return
name|newRule
return|;
block|}
specifier|const
name|QString
name|part
init|=
name|QLatin1String
argument_list|(
name|knownPseudoElements
index|[
name|element
index|]
operator|.
name|name
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|Declaration
argument_list|>
name|decls
init|=
name|declarations
argument_list|(
name|rules
argument_list|,
name|part
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|QRenderRule
name|newRule
argument_list|(
name|decls
argument_list|,
name|obj
argument_list|)
decl_stmt|;
name|cache
index|[
name|state
index|]
operator|=
name|newRule
expr_stmt|;
if|if
condition|(
operator|(
name|state
operator|&
name|stateMask
operator|)
operator|!=
name|state
condition|)
name|cache
index|[
name|state
operator|&
name|stateMask
index|]
operator|=
name|newRule
expr_stmt|;
return|return
name|newRule
return|;
block|}
end_function
begin_function
DECL|function|renderRule
name|QRenderRule
name|QStyleSheetStyle
operator|::
name|renderRule
parameter_list|(
specifier|const
name|QObject
modifier|*
name|obj
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
name|int
name|pseudoElement
parameter_list|)
specifier|const
block|{
name|quint64
name|extraClass
init|=
literal|0
decl_stmt|;
name|QStyle
operator|::
name|State
name|state
init|=
name|opt
condition|?
name|opt
operator|->
name|state
else|:
name|QStyle
operator|::
name|State
argument_list|(
name|QStyle
operator|::
name|State_None
argument_list|)
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionComplex
modifier|*
name|complex
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComplex
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|pseudoElement
operator|!=
name|PseudoElement_None
condition|)
block|{
comment|// if not an active subcontrol, just pass enabled/disabled
name|QStyle
operator|::
name|SubControl
name|subControl
init|=
name|knownPseudoElements
index|[
name|pseudoElement
index|]
operator|.
name|subControl
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|complex
operator|->
name|activeSubControls
operator|&
name|subControl
operator|)
condition|)
name|state
operator|&=
operator|(
name|QStyle
operator|::
name|State_Enabled
operator||
name|QStyle
operator|::
name|State_Horizontal
operator||
name|QStyle
operator|::
name|State_HasFocus
operator|)
expr_stmt|;
block|}
switch|switch
condition|(
name|pseudoElement
condition|)
block|{
case|case
name|PseudoElement_ComboBoxDropDown
case|:
case|case
name|PseudoElement_ComboBoxArrow
case|:
name|state
operator||=
operator|(
name|complex
operator|->
name|state
operator|&
operator|(
name|QStyle
operator|::
name|State_On
operator||
name|QStyle
operator|::
name|State_ReadOnly
operator|)
operator|)
expr_stmt|;
break|break;
case|case
name|PseudoElement_SpinBoxUpButton
case|:
case|case
name|PseudoElement_SpinBoxDownButton
case|:
case|case
name|PseudoElement_SpinBoxUpArrow
case|:
case|case
name|PseudoElement_SpinBoxDownArrow
case|:
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|sb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|bool
name|on
init|=
literal|false
decl_stmt|;
name|bool
name|up
init|=
name|pseudoElement
operator|==
name|PseudoElement_SpinBoxUpButton
operator|||
name|pseudoElement
operator|==
name|PseudoElement_SpinBoxUpArrow
decl_stmt|;
if|if
condition|(
operator|(
name|sb
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepUpEnabled
operator|)
operator|&&
name|up
condition|)
name|on
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|sb
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepDownEnabled
operator|)
operator|&&
operator|!
name|up
condition|)
name|on
operator|=
literal|true
expr_stmt|;
name|state
operator||=
operator|(
name|on
condition|?
name|QStyle
operator|::
name|State_On
else|:
name|QStyle
operator|::
name|State_Off
operator|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_SPINBOX
break|break;
case|case
name|PseudoElement_GroupBoxTitle
case|:
name|state
operator||=
operator|(
name|complex
operator|->
name|state
operator|&
operator|(
name|QStyle
operator|::
name|State_MouseOver
operator||
name|QStyle
operator|::
name|State_Sunken
operator|)
operator|)
expr_stmt|;
break|break;
case|case
name|PseudoElement_ToolButtonMenu
case|:
case|case
name|PseudoElement_ToolButtonMenuArrow
case|:
case|case
name|PseudoElement_ToolButtonDownArrow
case|:
name|state
operator||=
name|complex
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
if|if
condition|(
name|complex
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Sunken
operator|||
name|complex
operator|->
name|activeSubControls
operator|&
name|QStyle
operator|::
name|SC_ToolButtonMenu
condition|)
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
break|break;
case|case
name|PseudoElement_SliderGroove
case|:
name|state
operator||=
name|complex
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|combo
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
comment|// QStyle::State_On is set when the popup is being shown
comment|// Propagate EditField Pressed state
if|if
condition|(
name|pseudoElement
operator|==
name|PseudoElement_None
operator|&&
operator|(
name|complex
operator|->
name|activeSubControls
operator|&
name|QStyle
operator|::
name|SC_ComboBoxEditField
operator|)
operator|&&
operator|(
operator|!
operator|(
name|state
operator|&
name|QStyle
operator|::
name|State_MouseOver
operator|)
operator|)
condition|)
block|{
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|combo
operator|->
name|frame
condition|)
name|extraClass
operator||=
name|PseudoClass_Frameless
expr_stmt|;
if|if
condition|(
operator|!
name|combo
operator|->
name|editable
condition|)
name|extraClass
operator||=
name|PseudoClass_ReadOnly
expr_stmt|;
else|else
name|extraClass
operator||=
name|PseudoClass_Editable
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
block|}
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spin
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|spin
operator|->
name|frame
condition|)
name|extraClass
operator||=
name|PseudoClass_Frameless
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_SPINBOX
block|}
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|gb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|gb
operator|->
name|features
operator|&
name|QStyleOptionFrame
operator|::
name|Flat
condition|)
name|extraClass
operator||=
name|PseudoClass_Flat
expr_stmt|;
if|if
condition|(
name|gb
operator|->
name|lineWidth
operator|==
literal|0
condition|)
name|extraClass
operator||=
name|PseudoClass_Frameless
expr_stmt|;
block|}
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionTitleBar
modifier|*
name|tb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTitleBar
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
name|extraClass
operator||=
name|PseudoClass_Minimized
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
name|extraClass
operator||=
name|PseudoClass_Maximized
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// handle simple style options
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|mi
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|mi
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|DefaultItem
condition|)
name|extraClass
operator||=
name|PseudoClass_Default
expr_stmt|;
if|if
condition|(
name|mi
operator|->
name|checkType
operator|==
name|QStyleOptionMenuItem
operator|::
name|Exclusive
condition|)
name|extraClass
operator||=
name|PseudoClass_Exclusive
expr_stmt|;
elseif|else
if|if
condition|(
name|mi
operator|->
name|checkType
operator|==
name|QStyleOptionMenuItem
operator|::
name|NonExclusive
condition|)
name|extraClass
operator||=
name|PseudoClass_NonExclusive
expr_stmt|;
if|if
condition|(
name|mi
operator|->
name|checkType
operator|!=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
condition|)
name|extraClass
operator||=
operator|(
name|mi
operator|->
name|checked
operator|)
condition|?
operator|(
name|PseudoClass_On
operator||
name|PseudoClass_Checked
operator|)
else|:
operator|(
name|PseudoClass_Off
operator||
name|PseudoClass_Unchecked
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|hdr
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|hdr
operator|->
name|position
operator|==
name|QStyleOptionHeader
operator|::
name|OnlyOneSection
condition|)
name|extraClass
operator||=
name|PseudoClass_OnlyOne
expr_stmt|;
elseif|else
if|if
condition|(
name|hdr
operator|->
name|position
operator|==
name|QStyleOptionHeader
operator|::
name|Beginning
condition|)
name|extraClass
operator||=
name|PseudoClass_First
expr_stmt|;
elseif|else
if|if
condition|(
name|hdr
operator|->
name|position
operator|==
name|QStyleOptionHeader
operator|::
name|End
condition|)
name|extraClass
operator||=
name|PseudoClass_Last
expr_stmt|;
elseif|else
if|if
condition|(
name|hdr
operator|->
name|position
operator|==
name|QStyleOptionHeader
operator|::
name|Middle
condition|)
name|extraClass
operator||=
name|PseudoClass_Middle
expr_stmt|;
if|if
condition|(
name|hdr
operator|->
name|selectedPosition
operator|==
name|QStyleOptionHeader
operator|::
name|NextAndPreviousAreSelected
condition|)
name|extraClass
operator||=
operator|(
name|PseudoClass_NextSelected
operator||
name|PseudoClass_PreviousSelected
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|hdr
operator|->
name|selectedPosition
operator|==
name|QStyleOptionHeader
operator|::
name|NextIsSelected
condition|)
name|extraClass
operator||=
name|PseudoClass_NextSelected
expr_stmt|;
elseif|else
if|if
condition|(
name|hdr
operator|->
name|selectedPosition
operator|==
name|QStyleOptionHeader
operator|::
name|PreviousIsSelected
condition|)
name|extraClass
operator||=
name|PseudoClass_PreviousSelected
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
block|}
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionTabWidgetFrame
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabWidgetFrame
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|tab
operator|->
name|shape
condition|)
block|{
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
case|case
name|QTabBar
operator|::
name|TriangularNorth
case|:
name|extraClass
operator||=
name|PseudoClass_Top
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
case|case
name|QTabBar
operator|::
name|TriangularSouth
case|:
name|extraClass
operator||=
name|PseudoClass_Bottom
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
case|case
name|QTabBar
operator|::
name|TriangularEast
case|:
name|extraClass
operator||=
name|PseudoClass_Left
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
case|case
name|QTabBar
operator|::
name|TriangularWest
case|:
name|extraClass
operator||=
name|PseudoClass_Right
expr_stmt|;
break|break;
default|default:
break|break;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
block|}
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|OnlyOneTab
condition|)
name|extraClass
operator||=
name|PseudoClass_OnlyOne
expr_stmt|;
elseif|else
if|if
condition|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|Beginning
condition|)
name|extraClass
operator||=
name|PseudoClass_First
expr_stmt|;
elseif|else
if|if
condition|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|End
condition|)
name|extraClass
operator||=
name|PseudoClass_Last
expr_stmt|;
elseif|else
if|if
condition|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|Middle
condition|)
name|extraClass
operator||=
name|PseudoClass_Middle
expr_stmt|;
if|if
condition|(
name|tab
operator|->
name|selectedPosition
operator|==
name|QStyleOptionTab
operator|::
name|NextIsSelected
condition|)
name|extraClass
operator||=
name|PseudoClass_NextSelected
expr_stmt|;
elseif|else
if|if
condition|(
name|tab
operator|->
name|selectedPosition
operator|==
name|QStyleOptionTab
operator|::
name|PreviousIsSelected
condition|)
name|extraClass
operator||=
name|PseudoClass_PreviousSelected
expr_stmt|;
switch|switch
condition|(
name|tab
operator|->
name|shape
condition|)
block|{
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
case|case
name|QTabBar
operator|::
name|TriangularNorth
case|:
name|extraClass
operator||=
name|PseudoClass_Top
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
case|case
name|QTabBar
operator|::
name|TriangularSouth
case|:
name|extraClass
operator||=
name|PseudoClass_Bottom
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
case|case
name|QTabBar
operator|::
name|TriangularEast
case|:
name|extraClass
operator||=
name|PseudoClass_Left
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
case|case
name|QTabBar
operator|::
name|TriangularWest
case|:
name|extraClass
operator||=
name|PseudoClass_Right
expr_stmt|;
break|break;
default|default:
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_TABBAR
block|}
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|Flat
condition|)
name|extraClass
operator||=
name|PseudoClass_Flat
expr_stmt|;
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|DefaultButton
condition|)
name|extraClass
operator||=
name|PseudoClass_Default
expr_stmt|;
block|}
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|frm
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|frm
operator|->
name|lineWidth
operator|==
literal|0
condition|)
name|extraClass
operator||=
name|PseudoClass_Frameless
expr_stmt|;
if|if
condition|(
name|frm
operator|->
name|features
operator|&
name|QStyleOptionFrame
operator|::
name|Flat
condition|)
name|extraClass
operator||=
name|PseudoClass_Flat
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionToolBar
modifier|*
name|tb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolBar
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|tb
operator|->
name|toolBarArea
operator|==
name|Qt
operator|::
name|LeftToolBarArea
condition|)
name|extraClass
operator||=
name|PseudoClass_Left
expr_stmt|;
elseif|else
if|if
condition|(
name|tb
operator|->
name|toolBarArea
operator|==
name|Qt
operator|::
name|RightToolBarArea
condition|)
name|extraClass
operator||=
name|PseudoClass_Right
expr_stmt|;
elseif|else
if|if
condition|(
name|tb
operator|->
name|toolBarArea
operator|==
name|Qt
operator|::
name|TopToolBarArea
condition|)
name|extraClass
operator||=
name|PseudoClass_Top
expr_stmt|;
elseif|else
if|if
condition|(
name|tb
operator|->
name|toolBarArea
operator|==
name|Qt
operator|::
name|BottomToolBarArea
condition|)
name|extraClass
operator||=
name|PseudoClass_Bottom
expr_stmt|;
if|if
condition|(
name|tb
operator|->
name|positionWithinLine
operator|==
name|QStyleOptionToolBar
operator|::
name|Beginning
condition|)
name|extraClass
operator||=
name|PseudoClass_First
expr_stmt|;
elseif|else
if|if
condition|(
name|tb
operator|->
name|positionWithinLine
operator|==
name|QStyleOptionToolBar
operator|::
name|Middle
condition|)
name|extraClass
operator||=
name|PseudoClass_Middle
expr_stmt|;
elseif|else
if|if
condition|(
name|tb
operator|->
name|positionWithinLine
operator|==
name|QStyleOptionToolBar
operator|::
name|End
condition|)
name|extraClass
operator||=
name|PseudoClass_Last
expr_stmt|;
elseif|else
if|if
condition|(
name|tb
operator|->
name|positionWithinLine
operator|==
name|QStyleOptionToolBar
operator|::
name|OnlyOne
condition|)
name|extraClass
operator||=
name|PseudoClass_OnlyOne
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_TOOLBAR
ifndef|#
directive|ifndef
name|QT_NO_TOOLBOX
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionToolBoxV2
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolBoxV2
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionToolBoxV2
operator|::
name|OnlyOneTab
condition|)
name|extraClass
operator||=
name|PseudoClass_OnlyOne
expr_stmt|;
elseif|else
if|if
condition|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionToolBoxV2
operator|::
name|Beginning
condition|)
name|extraClass
operator||=
name|PseudoClass_First
expr_stmt|;
elseif|else
if|if
condition|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionToolBoxV2
operator|::
name|End
condition|)
name|extraClass
operator||=
name|PseudoClass_Last
expr_stmt|;
elseif|else
if|if
condition|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionToolBoxV2
operator|::
name|Middle
condition|)
name|extraClass
operator||=
name|PseudoClass_Middle
expr_stmt|;
if|if
condition|(
name|tab
operator|->
name|selectedPosition
operator|==
name|QStyleOptionToolBoxV2
operator|::
name|NextIsSelected
condition|)
name|extraClass
operator||=
name|PseudoClass_NextSelected
expr_stmt|;
elseif|else
if|if
condition|(
name|tab
operator|->
name|selectedPosition
operator|==
name|QStyleOptionToolBoxV2
operator|::
name|PreviousIsSelected
condition|)
name|extraClass
operator||=
name|PseudoClass_PreviousSelected
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_TOOLBOX
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionDockWidgetV2
modifier|*
name|dw
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidgetV2
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|dw
operator|->
name|verticalTitleBar
condition|)
name|extraClass
operator||=
name|PseudoClass_Vertical
expr_stmt|;
else|else
name|extraClass
operator||=
name|PseudoClass_Horizontal
expr_stmt|;
if|if
condition|(
name|dw
operator|->
name|closable
condition|)
name|extraClass
operator||=
name|PseudoClass_Closable
expr_stmt|;
if|if
condition|(
name|dw
operator|->
name|floatable
condition|)
name|extraClass
operator||=
name|PseudoClass_Floatable
expr_stmt|;
if|if
condition|(
name|dw
operator|->
name|movable
condition|)
name|extraClass
operator||=
name|PseudoClass_Movable
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionViewItem
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|vopt
operator|->
name|features
operator|&
name|QStyleOptionViewItem
operator|::
name|Alternate
condition|)
name|extraClass
operator||=
name|PseudoClass_Alternate
expr_stmt|;
if|if
condition|(
name|vopt
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|OnlyOne
condition|)
name|extraClass
operator||=
name|PseudoClass_OnlyOne
expr_stmt|;
elseif|else
if|if
condition|(
name|vopt
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|Beginning
condition|)
name|extraClass
operator||=
name|PseudoClass_First
expr_stmt|;
elseif|else
if|if
condition|(
name|vopt
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|End
condition|)
name|extraClass
operator||=
name|PseudoClass_Last
expr_stmt|;
elseif|else
if|if
condition|(
name|vopt
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|Middle
condition|)
name|extraClass
operator||=
name|PseudoClass_Middle
expr_stmt|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LINEEDIT
comment|// LineEdit sets Sunken flag to indicate Sunken frame (argh)
if|if
condition|(
specifier|const
name|QLineEdit
modifier|*
name|lineEdit
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
if|if
condition|(
name|lineEdit
operator|->
name|hasFrame
argument_list|()
condition|)
block|{
name|extraClass
operator|&=
operator|~
name|PseudoClass_Frameless
expr_stmt|;
block|}
else|else
block|{
name|extraClass
operator||=
name|PseudoClass_Frameless
expr_stmt|;
block|}
block|}
elseif|else
endif|#
directive|endif
if|if
condition|(
specifier|const
name|QFrame
modifier|*
name|frm
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QFrame
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
condition|)
block|{
if|if
condition|(
name|frm
operator|->
name|lineWidth
argument_list|()
operator|==
literal|0
condition|)
name|extraClass
operator||=
name|PseudoClass_Frameless
expr_stmt|;
block|}
block|}
return|return
name|renderRule
argument_list|(
name|obj
argument_list|,
name|pseudoElement
argument_list|,
name|pseudoClass
argument_list|(
name|state
argument_list|)
operator||
name|extraClass
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hasStyleRule
name|bool
name|QStyleSheetStyle
operator|::
name|hasStyleRule
parameter_list|(
specifier|const
name|QObject
modifier|*
name|obj
parameter_list|,
name|int
name|part
parameter_list|)
specifier|const
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|bool
argument_list|>
modifier|&
name|cache
init|=
name|styleSheetCaches
operator|->
name|hasStyleRuleCache
index|[
name|obj
index|]
decl_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|bool
argument_list|>
operator|::
name|const_iterator
name|cacheIt
init|=
name|cache
operator|.
name|constFind
argument_list|(
name|part
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheIt
operator|!=
name|cache
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|cacheIt
operator|.
name|value
argument_list|()
return|;
if|if
condition|(
operator|!
name|initObject
argument_list|(
name|obj
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|const
name|QVector
argument_list|<
name|StyleRule
argument_list|>
modifier|&
name|rules
init|=
name|styleRules
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|==
name|PseudoElement_None
condition|)
block|{
name|bool
name|result
init|=
name|obj
operator|&&
operator|!
name|rules
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|cache
index|[
name|part
index|]
operator|=
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
name|QString
name|pseudoElement
init|=
name|QLatin1String
argument_list|(
name|knownPseudoElements
index|[
name|part
index|]
operator|.
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rules
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Selector
modifier|&
name|selector
init|=
name|rules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|pseudoElement
operator|.
name|compare
argument_list|(
name|selector
operator|.
name|pseudoElement
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
name|cache
index|[
name|part
index|]
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|cache
index|[
name|part
index|]
operator|=
literal|false
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|defaultOrigin
specifier|static
name|Origin
name|defaultOrigin
parameter_list|(
name|int
name|pe
parameter_list|)
block|{
switch|switch
condition|(
name|pe
condition|)
block|{
case|case
name|PseudoElement_ScrollBarAddPage
case|:
case|case
name|PseudoElement_ScrollBarSubPage
case|:
case|case
name|PseudoElement_ScrollBarAddLine
case|:
case|case
name|PseudoElement_ScrollBarSubLine
case|:
case|case
name|PseudoElement_ScrollBarFirst
case|:
case|case
name|PseudoElement_ScrollBarLast
case|:
case|case
name|PseudoElement_GroupBoxTitle
case|:
case|case
name|PseudoElement_GroupBoxIndicator
case|:
comment|// never used
case|case
name|PseudoElement_ToolButtonMenu
case|:
case|case
name|PseudoElement_SliderAddPage
case|:
case|case
name|PseudoElement_SliderSubPage
case|:
return|return
name|Origin_Border
return|;
case|case
name|PseudoElement_SpinBoxUpButton
case|:
case|case
name|PseudoElement_SpinBoxDownButton
case|:
case|case
name|PseudoElement_PushButtonMenuIndicator
case|:
case|case
name|PseudoElement_ComboBoxDropDown
case|:
case|case
name|PseudoElement_ToolButtonDownArrow
case|:
case|case
name|PseudoElement_MenuCheckMark
case|:
case|case
name|PseudoElement_MenuIcon
case|:
case|case
name|PseudoElement_MenuRightArrow
case|:
return|return
name|Origin_Padding
return|;
case|case
name|PseudoElement_Indicator
case|:
case|case
name|PseudoElement_ExclusiveIndicator
case|:
case|case
name|PseudoElement_ComboBoxArrow
case|:
case|case
name|PseudoElement_ScrollBarSlider
case|:
case|case
name|PseudoElement_ScrollBarUpArrow
case|:
case|case
name|PseudoElement_ScrollBarDownArrow
case|:
case|case
name|PseudoElement_ScrollBarLeftArrow
case|:
case|case
name|PseudoElement_ScrollBarRightArrow
case|:
case|case
name|PseudoElement_SpinBoxUpArrow
case|:
case|case
name|PseudoElement_SpinBoxDownArrow
case|:
case|case
name|PseudoElement_ToolButtonMenuArrow
case|:
case|case
name|PseudoElement_HeaderViewUpArrow
case|:
case|case
name|PseudoElement_HeaderViewDownArrow
case|:
case|case
name|PseudoElement_SliderGroove
case|:
case|case
name|PseudoElement_SliderHandle
case|:
return|return
name|Origin_Content
return|;
default|default:
return|return
name|Origin_Margin
return|;
block|}
block|}
end_function
begin_function
DECL|function|defaultPosition
specifier|static
name|Qt
operator|::
name|Alignment
name|defaultPosition
parameter_list|(
name|int
name|pe
parameter_list|)
block|{
switch|switch
condition|(
name|pe
condition|)
block|{
case|case
name|PseudoElement_Indicator
case|:
case|case
name|PseudoElement_ExclusiveIndicator
case|:
case|case
name|PseudoElement_MenuCheckMark
case|:
case|case
name|PseudoElement_MenuIcon
case|:
return|return
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
return|;
case|case
name|PseudoElement_ScrollBarAddLine
case|:
case|case
name|PseudoElement_ScrollBarLast
case|:
case|case
name|PseudoElement_SpinBoxDownButton
case|:
case|case
name|PseudoElement_PushButtonMenuIndicator
case|:
case|case
name|PseudoElement_ToolButtonDownArrow
case|:
return|return
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignBottom
return|;
case|case
name|PseudoElement_ScrollBarSubLine
case|:
case|case
name|PseudoElement_ScrollBarFirst
case|:
case|case
name|PseudoElement_SpinBoxUpButton
case|:
case|case
name|PseudoElement_ComboBoxDropDown
case|:
case|case
name|PseudoElement_ToolButtonMenu
case|:
case|case
name|PseudoElement_DockWidgetCloseButton
case|:
case|case
name|PseudoElement_DockWidgetFloatButton
case|:
return|return
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignTop
return|;
case|case
name|PseudoElement_ScrollBarUpArrow
case|:
case|case
name|PseudoElement_ScrollBarDownArrow
case|:
case|case
name|PseudoElement_ScrollBarLeftArrow
case|:
case|case
name|PseudoElement_ScrollBarRightArrow
case|:
case|case
name|PseudoElement_SpinBoxUpArrow
case|:
case|case
name|PseudoElement_SpinBoxDownArrow
case|:
case|case
name|PseudoElement_ComboBoxArrow
case|:
case|case
name|PseudoElement_DownArrow
case|:
case|case
name|PseudoElement_ToolButtonMenuArrow
case|:
case|case
name|PseudoElement_SliderGroove
case|:
return|return
name|Qt
operator|::
name|AlignCenter
return|;
case|case
name|PseudoElement_GroupBoxTitle
case|:
case|case
name|PseudoElement_GroupBoxIndicator
case|:
comment|// never used
return|return
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignTop
return|;
case|case
name|PseudoElement_HeaderViewUpArrow
case|:
case|case
name|PseudoElement_HeaderViewDownArrow
case|:
case|case
name|PseudoElement_MenuRightArrow
case|:
return|return
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignVCenter
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
end_function
begin_function
DECL|function|defaultSize
name|QSize
name|QStyleSheetStyle
operator|::
name|defaultSize
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
name|QSize
name|sz
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|pe
parameter_list|)
specifier|const
block|{
name|QStyle
modifier|*
name|base
init|=
name|baseStyle
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|pe
condition|)
block|{
case|case
name|PseudoElement_Indicator
case|:
case|case
name|PseudoElement_MenuCheckMark
case|:
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
name|base
operator|->
name|pixelMetric
argument_list|(
name|PM_IndicatorWidth
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|base
operator|->
name|pixelMetric
argument_list|(
name|PM_IndicatorHeight
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PseudoElement_ExclusiveIndicator
case|:
case|case
name|PseudoElement_GroupBoxIndicator
case|:
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
name|base
operator|->
name|pixelMetric
argument_list|(
name|PM_ExclusiveIndicatorWidth
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|base
operator|->
name|pixelMetric
argument_list|(
name|PM_ExclusiveIndicatorHeight
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PseudoElement_PushButtonMenuIndicator
case|:
block|{
name|int
name|pm
init|=
name|base
operator|->
name|pixelMetric
argument_list|(
name|PM_MenuButtonIndicator
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
name|pm
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|pm
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PseudoElement_ComboBoxDropDown
case|:
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
literal|16
argument_list|)
expr_stmt|;
break|break;
case|case
name|PseudoElement_ComboBoxArrow
case|:
case|case
name|PseudoElement_DownArrow
case|:
case|case
name|PseudoElement_ToolButtonMenuArrow
case|:
case|case
name|PseudoElement_ToolButtonDownArrow
case|:
case|case
name|PseudoElement_MenuRightArrow
case|:
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
literal|13
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
literal|13
argument_list|)
expr_stmt|;
break|break;
case|case
name|PseudoElement_SpinBoxUpButton
case|:
case|case
name|PseudoElement_SpinBoxDownButton
case|:
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|PseudoElement_ToolButtonMenu
case|:
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
name|base
operator|->
name|pixelMetric
argument_list|(
name|PM_MenuButtonIndicator
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PseudoElement_HeaderViewUpArrow
case|:
case|case
name|PseudoElement_HeaderViewDownArrow
case|:
block|{
name|int
name|pm
init|=
name|base
operator|->
name|pixelMetric
argument_list|(
name|PM_HeaderMargin
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
name|pm
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|==
literal|1
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|pm
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PseudoElement_ScrollBarFirst
case|:
case|case
name|PseudoElement_ScrollBarLast
case|:
case|case
name|PseudoElement_ScrollBarAddLine
case|:
case|case
name|PseudoElement_ScrollBarSubLine
case|:
case|case
name|PseudoElement_ScrollBarSlider
case|:
block|{
name|int
name|pm
init|=
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ScrollBarExtent
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
name|pm
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|pm
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PseudoElement_DockWidgetCloseButton
case|:
case|case
name|PseudoElement_DockWidgetFloatButton
case|:
block|{
name|int
name|iconSize
init|=
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
decl_stmt|;
return|return
name|QSize
argument_list|(
name|iconSize
argument_list|,
name|iconSize
argument_list|)
return|;
block|}
default|default:
break|break;
block|}
comment|// expand to rectangle
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
block|}
end_function
begin_function
DECL|function|defaultPositionMode
specifier|static
name|PositionMode
name|defaultPositionMode
parameter_list|(
name|int
name|pe
parameter_list|)
block|{
switch|switch
condition|(
name|pe
condition|)
block|{
case|case
name|PseudoElement_ScrollBarFirst
case|:
case|case
name|PseudoElement_ScrollBarLast
case|:
case|case
name|PseudoElement_ScrollBarAddLine
case|:
case|case
name|PseudoElement_ScrollBarSubLine
case|:
case|case
name|PseudoElement_ScrollBarAddPage
case|:
case|case
name|PseudoElement_ScrollBarSubPage
case|:
case|case
name|PseudoElement_ScrollBarSlider
case|:
case|case
name|PseudoElement_SliderGroove
case|:
case|case
name|PseudoElement_SliderHandle
case|:
case|case
name|PseudoElement_TabWidgetPane
case|:
return|return
name|PositionMode_Absolute
return|;
default|default:
return|return
name|PositionMode_Static
return|;
block|}
block|}
end_function
begin_function
DECL|function|positionRect
name|QRect
name|QStyleSheetStyle
operator|::
name|positionRect
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QRenderRule
modifier|&
name|rule2
parameter_list|,
name|int
name|pe
parameter_list|,
specifier|const
name|QRect
modifier|&
name|originRect
parameter_list|,
name|Qt
operator|::
name|LayoutDirection
name|dir
parameter_list|)
specifier|const
block|{
specifier|const
name|QStyleSheetPositionData
modifier|*
name|p
init|=
name|rule2
operator|.
name|position
argument_list|()
decl_stmt|;
name|PositionMode
name|mode
init|=
operator|(
name|p
operator|&&
name|p
operator|->
name|mode
operator|!=
name|PositionMode_Unknown
operator|)
condition|?
name|p
operator|->
name|mode
else|:
name|defaultPositionMode
argument_list|(
name|pe
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|Alignment
name|position
init|=
operator|(
name|p
operator|&&
name|p
operator|->
name|position
operator|!=
literal|0
operator|)
condition|?
name|p
operator|->
name|position
else|:
name|defaultPosition
argument_list|(
name|pe
argument_list|)
decl_stmt|;
name|QRect
name|r
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
name|PositionMode_Absolute
condition|)
block|{
name|QSize
name|sz
init|=
name|defaultSize
argument_list|(
name|w
argument_list|,
name|rule2
operator|.
name|size
argument_list|()
argument_list|,
name|originRect
argument_list|,
name|pe
argument_list|)
decl_stmt|;
name|sz
operator|=
name|sz
operator|.
name|expandedTo
argument_list|(
name|rule2
operator|.
name|minimumContentsSize
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|QStyle
operator|::
name|alignedRect
argument_list|(
name|dir
argument_list|,
name|position
argument_list|,
name|sz
argument_list|,
name|originRect
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
condition|)
block|{
name|int
name|left
init|=
name|p
operator|->
name|left
condition|?
name|p
operator|->
name|left
else|:
operator|-
name|p
operator|->
name|right
decl_stmt|;
name|int
name|top
init|=
name|p
operator|->
name|top
condition|?
name|p
operator|->
name|top
else|:
operator|-
name|p
operator|->
name|bottom
decl_stmt|;
name|r
operator|.
name|translate
argument_list|(
name|dir
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
name|left
else|:
operator|-
name|left
argument_list|,
name|top
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|r
operator|=
name|p
condition|?
name|originRect
operator|.
name|adjusted
argument_list|(
name|dir
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
name|p
operator|->
name|left
else|:
name|p
operator|->
name|right
argument_list|,
name|p
operator|->
name|top
argument_list|,
name|dir
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
operator|-
name|p
operator|->
name|right
else|:
operator|-
name|p
operator|->
name|left
argument_list|,
operator|-
name|p
operator|->
name|bottom
argument_list|)
else|:
name|originRect
expr_stmt|;
if|if
condition|(
name|rule2
operator|.
name|hasContentsSize
argument_list|()
condition|)
block|{
name|QSize
name|sz
init|=
name|rule2
operator|.
name|size
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|rule2
operator|.
name|minimumContentsSize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|QStyle
operator|::
name|alignedRect
argument_list|(
name|dir
argument_list|,
name|position
argument_list|,
name|sz
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|positionRect
name|QRect
name|QStyleSheetStyle
operator|::
name|positionRect
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QRenderRule
modifier|&
name|rule1
parameter_list|,
specifier|const
name|QRenderRule
modifier|&
name|rule2
parameter_list|,
name|int
name|pe
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|Qt
operator|::
name|LayoutDirection
name|dir
parameter_list|)
specifier|const
block|{
specifier|const
name|QStyleSheetPositionData
modifier|*
name|p
init|=
name|rule2
operator|.
name|position
argument_list|()
decl_stmt|;
name|Origin
name|origin
init|=
operator|(
name|p
operator|&&
name|p
operator|->
name|origin
operator|!=
name|Origin_Unknown
operator|)
condition|?
name|p
operator|->
name|origin
else|:
name|defaultOrigin
argument_list|(
name|pe
argument_list|)
decl_stmt|;
name|QRect
name|originRect
init|=
name|rule1
operator|.
name|originRect
argument_list|(
name|rect
argument_list|,
name|origin
argument_list|)
decl_stmt|;
return|return
name|positionRect
argument_list|(
name|w
argument_list|,
name|rule2
argument_list|,
name|pe
argument_list|,
name|originRect
argument_list|,
name|dir
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/** \internal    For widget that have an embedded widget (such as combobox) return that embedded widget.    otherwise return the widget itself  */
end_comment
begin_function
DECL|function|embeddedWidget
specifier|static
name|QWidget
modifier|*
name|embeddedWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
if|if
condition|(
name|QComboBox
modifier|*
name|cmb
init|=
name|qobject_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
if|if
condition|(
name|cmb
operator|->
name|isEditable
argument_list|()
condition|)
return|return
name|cmb
operator|->
name|lineEdit
argument_list|()
return|;
else|else
return|return
name|cmb
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
if|if
condition|(
name|QAbstractSpinBox
modifier|*
name|sb
init|=
name|qobject_cast
argument_list|<
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
return|return
name|sb
operator|->
name|findChild
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|()
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SCROLLAREA
if|if
condition|(
name|QAbstractScrollArea
modifier|*
name|sa
init|=
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
return|return
name|sa
operator|->
name|viewport
argument_list|()
return|;
endif|#
directive|endif
return|return
name|w
return|;
block|}
end_function
begin_comment
comment|/** \internal   in case w is an embedded widget, return the container widget   (i.e, the widget for which the rules actualy apply)   (exemple, if w is a lineedit embedded in a combobox, return the combobox)    if w is not embedded, return w itself */
end_comment
begin_function
DECL|function|containerWidget
specifier|static
name|QWidget
modifier|*
name|containerWidget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_LINEEDIT
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
comment|//if the QLineEdit is an embeddedWidget, we need the rule of the real widget
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|w
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
return|return
name|w
operator|->
name|parentWidget
argument_list|()
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|w
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
return|return
name|w
operator|->
name|parentWidget
argument_list|()
return|;
endif|#
directive|endif
block|}
endif|#
directive|endif
comment|// QT_NO_LINEEDIT
ifndef|#
directive|ifndef
name|QT_NO_SCROLLAREA
if|if
condition|(
specifier|const
name|QAbstractScrollArea
modifier|*
name|sa
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|w
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|sa
operator|->
name|viewport
argument_list|()
operator|==
name|w
condition|)
return|return
name|w
operator|->
name|parentWidget
argument_list|()
return|;
block|}
endif|#
directive|endif
return|return
cast|const_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/** \internal     returns \c true if the widget can NOT be styled directly  */
end_comment
begin_function
DECL|function|unstylable
specifier|static
name|bool
name|unstylable
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|w
operator|->
name|styleSheet
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|containerWidget
argument_list|(
name|w
argument_list|)
operator|!=
name|w
condition|)
return|return
literal|true
return|;
ifndef|#
directive|ifndef
name|QT_NO_FRAME
comment|// detect QComboBoxPrivateContainer
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QFrame
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
if|if
condition|(
literal|0
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
operator|||
name|qobject_cast
argument_list|<
specifier|const
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|w
operator|->
name|parentWidget
argument_list|()
argument_list|)
endif|#
directive|endif
condition|)
return|return
literal|true
return|;
block|}
endif|#
directive|endif
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|extendedPseudoClass
specifier|static
name|quint64
name|extendedPseudoClass
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|quint64
name|pc
init|=
name|w
operator|->
name|isWindow
argument_list|()
condition|?
name|quint64
argument_list|(
name|PseudoClass_Window
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
specifier|const
name|QAbstractSlider
modifier|*
name|slider
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractSlider
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
name|pc
operator||=
operator|(
operator|(
name|slider
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Vertical
operator|)
condition|?
name|PseudoClass_Vertical
else|:
name|PseudoClass_Horizontal
operator|)
expr_stmt|;
block|}
elseif|else
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
if|if
condition|(
specifier|const
name|QComboBox
modifier|*
name|combo
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
if|if
condition|(
name|combo
operator|->
name|isEditable
argument_list|()
condition|)
name|pc
operator||=
operator|(
name|combo
operator|->
name|isEditable
argument_list|()
condition|?
name|PseudoClass_Editable
else|:
name|PseudoClass_ReadOnly
operator|)
expr_stmt|;
block|}
elseif|else
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LINEEDIT
if|if
condition|(
specifier|const
name|QLineEdit
modifier|*
name|edit
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
name|pc
operator||=
operator|(
name|edit
operator|->
name|isReadOnly
argument_list|()
condition|?
name|PseudoClass_ReadOnly
else|:
name|PseudoClass_Editable
operator|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{ }
comment|// required for the above ifdef'ery to work
return|return
name|pc
return|;
block|}
end_function
begin_comment
comment|// sets up the geometry of the widget. We set a dynamic property when
end_comment
begin_comment
comment|// we modify the min/max size of the widget. The min/max size is restored
end_comment
begin_comment
comment|// to their original value when a new stylesheet that does not contain
end_comment
begin_comment
comment|// the CSS properties is set and when the widget has this dynamic property set.
end_comment
begin_comment
comment|// This way we don't trample on users who had setup a min/max size in code and
end_comment
begin_comment
comment|// don't use stylesheets at all.
end_comment
begin_function
DECL|function|setGeometry
name|void
name|QStyleSheetStyle
operator|::
name|setGeometry
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_None
argument_list|,
name|PseudoClass_Enabled
operator||
name|extendedPseudoClass
argument_list|(
name|w
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QStyleSheetGeometryData
modifier|*
name|geo
init|=
name|rule
operator|.
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|property
argument_list|(
literal|"_q_stylesheet_minw"
argument_list|)
operator|.
name|toBool
argument_list|()
operator|&&
operator|(
operator|(
operator|!
name|rule
operator|.
name|hasGeometry
argument_list|()
operator|||
name|geo
operator|->
name|minWidth
operator|==
operator|-
literal|1
operator|)
operator|)
condition|)
block|{
name|w
operator|->
name|setMinimumWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_stylesheet_minw"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|w
operator|->
name|property
argument_list|(
literal|"_q_stylesheet_minh"
argument_list|)
operator|.
name|toBool
argument_list|()
operator|&&
operator|(
operator|(
operator|!
name|rule
operator|.
name|hasGeometry
argument_list|()
operator|||
name|geo
operator|->
name|minHeight
operator|==
operator|-
literal|1
operator|)
operator|)
condition|)
block|{
name|w
operator|->
name|setMinimumHeight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_stylesheet_minh"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|w
operator|->
name|property
argument_list|(
literal|"_q_stylesheet_maxw"
argument_list|)
operator|.
name|toBool
argument_list|()
operator|&&
operator|(
operator|(
operator|!
name|rule
operator|.
name|hasGeometry
argument_list|()
operator|||
name|geo
operator|->
name|maxWidth
operator|==
operator|-
literal|1
operator|)
operator|)
condition|)
block|{
name|w
operator|->
name|setMaximumWidth
argument_list|(
name|QWIDGETSIZE_MAX
argument_list|)
expr_stmt|;
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_stylesheet_maxw"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|w
operator|->
name|property
argument_list|(
literal|"_q_stylesheet_maxh"
argument_list|)
operator|.
name|toBool
argument_list|()
operator|&&
operator|(
operator|(
operator|!
name|rule
operator|.
name|hasGeometry
argument_list|()
operator|||
name|geo
operator|->
name|maxHeight
operator|==
operator|-
literal|1
operator|)
operator|)
condition|)
block|{
name|w
operator|->
name|setMaximumHeight
argument_list|(
name|QWIDGETSIZE_MAX
argument_list|)
expr_stmt|;
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_stylesheet_maxh"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rule
operator|.
name|hasGeometry
argument_list|()
condition|)
block|{
if|if
condition|(
name|geo
operator|->
name|minWidth
operator|!=
operator|-
literal|1
condition|)
block|{
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_stylesheet_minw"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|w
operator|->
name|setMinimumWidth
argument_list|(
name|rule
operator|.
name|boxSize
argument_list|(
name|QSize
argument_list|(
name|qMax
argument_list|(
name|geo
operator|->
name|width
argument_list|,
name|geo
operator|->
name|minWidth
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|geo
operator|->
name|minHeight
operator|!=
operator|-
literal|1
condition|)
block|{
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_stylesheet_minh"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|w
operator|->
name|setMinimumHeight
argument_list|(
name|rule
operator|.
name|boxSize
argument_list|(
name|QSize
argument_list|(
literal|0
argument_list|,
name|qMax
argument_list|(
name|geo
operator|->
name|height
argument_list|,
name|geo
operator|->
name|minHeight
argument_list|)
argument_list|)
argument_list|)
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|geo
operator|->
name|maxWidth
operator|!=
operator|-
literal|1
condition|)
block|{
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_stylesheet_maxw"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|w
operator|->
name|setMaximumWidth
argument_list|(
name|rule
operator|.
name|boxSize
argument_list|(
name|QSize
argument_list|(
name|qMin
argument_list|(
name|geo
operator|->
name|width
operator|==
operator|-
literal|1
condition|?
name|QWIDGETSIZE_MAX
else|:
name|geo
operator|->
name|width
argument_list|,
name|geo
operator|->
name|maxWidth
operator|==
operator|-
literal|1
condition|?
name|QWIDGETSIZE_MAX
else|:
name|geo
operator|->
name|maxWidth
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|geo
operator|->
name|maxHeight
operator|!=
operator|-
literal|1
condition|)
block|{
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_stylesheet_maxh"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|w
operator|->
name|setMaximumHeight
argument_list|(
name|rule
operator|.
name|boxSize
argument_list|(
name|QSize
argument_list|(
literal|0
argument_list|,
name|qMin
argument_list|(
name|geo
operator|->
name|height
operator|==
operator|-
literal|1
condition|?
name|QWIDGETSIZE_MAX
else|:
name|geo
operator|->
name|height
argument_list|,
name|geo
operator|->
name|maxHeight
operator|==
operator|-
literal|1
condition|?
name|QWIDGETSIZE_MAX
else|:
name|geo
operator|->
name|maxHeight
argument_list|)
argument_list|)
argument_list|)
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setProperties
name|void
name|QStyleSheetStyle
operator|::
name|setProperties
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
comment|// The final occurrence of each property is authoritative.
comment|// Set value for each property in the order of property final occurrence
comment|// since properties interact.
specifier|const
name|QVector
argument_list|<
name|Declaration
argument_list|>
name|decls
init|=
name|declarations
argument_list|(
name|styleRules
argument_list|(
name|w
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|finals
decl_stmt|;
comment|// indices in reverse order of each property's final occurrence
block|{
comment|// scan decls for final occurrence of each "qproperty"
name|QSet
argument_list|<
specifier|const
name|QString
argument_list|>
name|propertySet
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|decls
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
specifier|const
name|QString
name|property
init|=
name|decls
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|d
operator|->
name|property
decl_stmt|;
if|if
condition|(
operator|!
name|property
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"qproperty-"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|propertySet
operator|.
name|contains
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|propertySet
operator|.
name|insert
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|finals
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|finals
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
specifier|const
name|Declaration
modifier|&
name|decl
init|=
name|decls
operator|.
name|at
argument_list|(
name|finals
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|QString
name|property
init|=
name|decl
operator|.
name|d
operator|->
name|property
decl_stmt|;
name|property
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// strip "qproperty-"
specifier|const
name|QMetaObject
modifier|*
name|metaObject
init|=
name|w
operator|->
name|metaObject
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|metaObject
operator|->
name|indexOfProperty
argument_list|(
name|property
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|w
operator|<<
literal|" does not have a property named "
operator|<<
name|property
expr_stmt|;
continue|continue;
block|}
specifier|const
name|QMetaProperty
name|metaProperty
init|=
name|metaObject
operator|->
name|property
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|metaProperty
operator|.
name|isWritable
argument_list|()
operator|||
operator|!
name|metaProperty
operator|.
name|isDesignable
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|w
operator|<<
literal|" cannot design property named "
operator|<<
name|property
expr_stmt|;
continue|continue;
block|}
name|QVariant
name|v
decl_stmt|;
specifier|const
name|QVariant
name|value
init|=
name|w
operator|->
name|property
argument_list|(
name|property
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|value
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Icon
case|:
name|v
operator|=
name|decl
operator|.
name|iconValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Image
case|:
name|v
operator|=
name|QImage
argument_list|(
name|decl
operator|.
name|uriValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Pixmap
case|:
name|v
operator|=
name|QPixmap
argument_list|(
name|decl
operator|.
name|uriValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Rect
case|:
name|v
operator|=
name|decl
operator|.
name|rectValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Size
case|:
name|v
operator|=
name|decl
operator|.
name|sizeValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Color
case|:
name|v
operator|=
name|decl
operator|.
name|colorValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Brush
case|:
name|v
operator|=
name|decl
operator|.
name|brushValue
argument_list|()
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
case|case
name|QVariant
operator|::
name|KeySequence
case|:
name|v
operator|=
name|QKeySequence
argument_list|(
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
name|v
operator|=
name|decl
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
expr_stmt|;
break|break;
block|}
name|w
operator|->
name|setProperty
argument_list|(
name|property
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setPalette
name|void
name|QStyleSheetStyle
operator|::
name|setPalette
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
struct|struct
name|RuleRoleMap
block|{
name|int
name|state
decl_stmt|;
name|QPalette
operator|::
name|ColorGroup
name|group
decl_stmt|;
block|}
name|map
index|[
literal|3
index|]
init|=
block|{
block|{
name|int
argument_list|(
name|PseudoClass_Active
operator||
name|PseudoClass_Enabled
argument_list|)
block|,
name|QPalette
operator|::
name|Active
block|}
block|,
block|{
name|PseudoClass_Disabled
block|,
name|QPalette
operator|::
name|Disabled
block|}
block|,
block|{
name|PseudoClass_Enabled
block|,
name|QPalette
operator|::
name|Inactive
block|}
block|}
struct|;
name|QPalette
name|p
init|=
name|w
operator|->
name|palette
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|ew
init|=
name|embeddedWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_None
argument_list|,
name|map
index|[
name|i
index|]
operator|.
name|state
operator||
name|extendedPseudoClass
argument_list|(
name|w
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|w
operator|->
name|property
argument_list|(
literal|"_q_styleSheetWidgetFont"
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|saveWidgetFont
argument_list|(
name|w
argument_list|,
name|w
operator|->
name|font
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateStyleSheetFont
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|ew
operator|!=
name|w
condition|)
name|updateStyleSheetFont
argument_list|(
name|ew
argument_list|)
expr_stmt|;
block|}
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|p
argument_list|,
name|map
index|[
name|i
index|]
operator|.
name|group
argument_list|,
name|ew
argument_list|,
name|ew
operator|!=
name|w
argument_list|)
expr_stmt|;
block|}
name|styleSheetCaches
operator|->
name|customPaletteWidgets
operator|.
name|insert
argument_list|(
name|w
argument_list|,
name|w
operator|->
name|palette
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|->
name|setPalette
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|ew
operator|!=
name|w
condition|)
name|ew
operator|->
name|setPalette
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unsetPalette
name|void
name|QStyleSheetStyle
operator|::
name|unsetPalette
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
name|styleSheetCaches
operator|->
name|customPaletteWidgets
operator|.
name|contains
argument_list|(
name|w
argument_list|)
condition|)
block|{
name|QPalette
name|p
init|=
name|styleSheetCaches
operator|->
name|customPaletteWidgets
operator|.
name|value
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w
operator|->
name|setPalette
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|ew
init|=
name|embeddedWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|ew
operator|!=
name|w
condition|)
name|ew
operator|->
name|setPalette
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|styleSheetCaches
operator|->
name|customPaletteWidgets
operator|.
name|remove
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
name|QVariant
name|oldFont
init|=
name|w
operator|->
name|property
argument_list|(
literal|"_q_styleSheetWidgetFont"
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldFont
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|w
operator|->
name|setFont
argument_list|(
name|qvariant_cast
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|oldFont
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|styleSheetCaches
operator|->
name|autoFillDisabledWidgets
operator|.
name|contains
argument_list|(
name|w
argument_list|)
condition|)
block|{
name|embeddedWidget
argument_list|(
name|w
argument_list|)
operator|->
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|styleSheetCaches
operator|->
name|autoFillDisabledWidgets
operator|.
name|remove
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateObjects
specifier|static
name|void
name|updateObjects
parameter_list|(
specifier|const
name|QList
argument_list|<
specifier|const
name|QObject
modifier|*
argument_list|>
modifier|&
name|objects
parameter_list|)
block|{
if|if
condition|(
operator|!
name|styleSheetCaches
operator|->
name|styleRulesCache
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|styleSheetCaches
operator|->
name|hasStyleRuleCache
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|styleSheetCaches
operator|->
name|renderRulesCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QObject
modifier|*
name|object
init|=
name|objects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|styleSheetCaches
operator|->
name|styleRulesCache
operator|.
name|remove
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|styleSheetCaches
operator|->
name|hasStyleRuleCache
operator|.
name|remove
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|styleSheetCaches
operator|->
name|renderRulesCache
operator|.
name|remove
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
block|}
name|QWidgetList
name|widgets
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QObject
modifier|*
name|object
decl|,
name|objects
control|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
argument_list|)
condition|)
name|widgets
operator|<<
name|w
expr_stmt|;
block|}
name|QEvent
name|event
argument_list|(
name|QEvent
operator|::
name|StyleChange
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|widget
decl|,
name|widgets
control|)
block|{
name|widget
operator|->
name|style
argument_list|()
operator|->
name|polish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|// The stylesheet style
end_comment
begin_decl_stmt
DECL|member|numinstances
name|int
name|QStyleSheetStyle
operator|::
name|numinstances
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QStyleSheetStyle
name|QStyleSheetStyle
operator|::
name|QStyleSheetStyle
parameter_list|(
name|QStyle
modifier|*
name|base
parameter_list|)
member_init_list|:
name|QWindowsStyle
argument_list|(
operator|*
operator|new
name|QStyleSheetStylePrivate
argument_list|)
member_init_list|,
name|base
argument_list|(
name|base
argument_list|)
member_init_list|,
name|refcount
argument_list|(
literal|1
argument_list|)
block|{
operator|++
name|numinstances
expr_stmt|;
if|if
condition|(
name|numinstances
operator|==
literal|1
condition|)
block|{
name|styleSheetCaches
operator|=
operator|new
name|QStyleSheetStyleCaches
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QStyleSheetStyle
name|QStyleSheetStyle
operator|::
name|~
name|QStyleSheetStyle
parameter_list|()
block|{
operator|--
name|numinstances
expr_stmt|;
if|if
condition|(
name|numinstances
operator|==
literal|0
condition|)
block|{
operator|delete
name|styleSheetCaches
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|baseStyle
name|QStyle
modifier|*
name|QStyleSheetStyle
operator|::
name|baseStyle
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|base
condition|)
return|return
name|base
return|;
if|if
condition|(
name|QStyleSheetStyle
modifier|*
name|me
init|=
name|qobject_cast
argument_list|<
name|QStyleSheetStyle
operator|*
argument_list|>
argument_list|(
name|QApplication
operator|::
name|style
argument_list|()
argument_list|)
condition|)
return|return
name|me
operator|->
name|base
return|;
return|return
name|QApplication
operator|::
name|style
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|objectDestroyed
name|void
name|QStyleSheetStyleCaches
operator|::
name|objectDestroyed
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|)
block|{
name|styleRulesCache
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|hasStyleRuleCache
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|renderRulesCache
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|customPaletteWidgets
operator|.
name|remove
argument_list|(
operator|(
specifier|const
name|QWidget
operator|*
operator|)
name|o
argument_list|)
expr_stmt|;
name|styleSheetCache
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|autoFillDisabledWidgets
operator|.
name|remove
argument_list|(
operator|(
specifier|const
name|QWidget
operator|*
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|styleDestroyed
name|void
name|QStyleSheetStyleCaches
operator|::
name|styleDestroyed
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|)
block|{
name|styleSheetCache
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!  *  Make sure that the cache will be clean by connecting destroyed if needed.  *  return false if the widget is not stylable;  */
end_comment
begin_function
DECL|function|initObject
name|bool
name|QStyleSheetStyle
operator|::
name|initObject
parameter_list|(
specifier|const
name|QObject
modifier|*
name|obj
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|obj
condition|)
return|return
literal|false
return|;
if|if
condition|(
specifier|const
name|QWidget
modifier|*
name|w
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QWidget
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
condition|)
block|{
if|if
condition|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyleSheet
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|unstylable
argument_list|(
name|w
argument_list|)
condition|)
return|return
literal|false
return|;
cast|const_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyleSheet
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|QObject
operator|::
name|connect
argument_list|(
name|obj
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|styleSheetCaches
argument_list|,
name|SLOT
argument_list|(
name|objectDestroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|UniqueConnection
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|polish
name|void
name|QStyleSheetStyle
operator|::
name|polish
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|baseStyle
argument_list|()
operator|->
name|polish
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|RECURSION_GUARD
argument_list|(
argument|return
argument_list|)
if|if
condition|(
operator|!
name|initObject
argument_list|(
name|w
argument_list|)
condition|)
return|return;
if|if
condition|(
name|styleSheetCaches
operator|->
name|styleRulesCache
operator|.
name|contains
argument_list|(
name|w
argument_list|)
condition|)
block|{
comment|// the widget accessed its style pointer before polish (or repolish)
comment|// (exemple: the QAbstractSpinBox constructor ask for the stylehint)
name|styleSheetCaches
operator|->
name|styleRulesCache
operator|.
name|remove
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|styleSheetCaches
operator|->
name|hasStyleRuleCache
operator|.
name|remove
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|styleSheetCaches
operator|->
name|renderRulesCache
operator|.
name|remove
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|styleSheetCaches
operator|->
name|styleSheetCache
operator|.
name|remove
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
name|setGeometry
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|unsetPalette
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|setPalette
argument_list|(
name|w
argument_list|)
expr_stmt|;
comment|//set the WA_Hover attribute if one of the selector depends of the hover state
name|QVector
argument_list|<
name|StyleRule
argument_list|>
name|rules
init|=
name|styleRules
argument_list|(
name|w
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rules
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Selector
modifier|&
name|selector
init|=
name|rules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|quint64
name|negated
init|=
literal|0
decl_stmt|;
name|quint64
name|cssClass
init|=
name|selector
operator|.
name|pseudoClass
argument_list|(
operator|&
name|negated
argument_list|)
decl_stmt|;
if|if
condition|(
name|cssClass
operator|&
name|PseudoClass_Hover
operator|||
name|negated
operator|&
name|PseudoClass_Hover
condition|)
block|{
name|w
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|)
expr_stmt|;
name|embeddedWidget
argument_list|(
name|w
argument_list|)
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|)
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_SCROLLAREA
if|if
condition|(
name|QAbstractScrollArea
modifier|*
name|sa
init|=
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|sa
argument_list|,
name|PseudoElement_None
argument_list|,
name|PseudoClass_Enabled
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|rule
operator|.
name|hasBorder
argument_list|()
operator|&&
name|rule
operator|.
name|border
argument_list|()
operator|->
name|hasBorderImage
argument_list|()
operator|)
operator|||
operator|(
name|rule
operator|.
name|hasBackground
argument_list|()
operator|&&
operator|!
name|rule
operator|.
name|background
argument_list|()
operator|->
name|pixmap
operator|.
name|isNull
argument_list|()
operator|)
condition|)
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|sa
operator|->
name|horizontalScrollBar
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|sa
argument_list|,
name|SLOT
argument_list|(
name|update
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|UniqueConnection
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|sa
operator|->
name|verticalScrollBar
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|sa
argument_list|,
name|SLOT
argument_list|(
name|update
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|UniqueConnection
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_None
argument_list|,
name|PseudoClass_Any
argument_list|)
decl_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasDrawable
argument_list|()
operator|||
name|rule
operator|.
name|hasBox
argument_list|()
condition|)
block|{
if|if
condition|(
name|w
operator|->
name|metaObject
argument_list|()
operator|==
operator|&
name|QWidget
operator|::
name|staticMetaObject
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
operator|||
name|qobject_cast
argument_list|<
name|QHeaderView
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
operator|||
name|qobject_cast
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_FRAME
operator|||
name|qobject_cast
argument_list|<
name|QFrame
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MAINWINDOW
operator|||
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MDIAREA
operator|||
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
operator|||
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
endif|#
directive|endif
operator|||
name|qobject_cast
argument_list|<
name|QDialog
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
name|w
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyledBackground
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|QWidget
modifier|*
name|ew
init|=
name|embeddedWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|ew
operator|->
name|autoFillBackground
argument_list|()
condition|)
block|{
name|ew
operator|->
name|setAutoFillBackground
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|styleSheetCaches
operator|->
name|autoFillDisabledWidgets
operator|.
name|insert
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|ew
operator|!=
name|w
condition|)
block|{
comment|//eg. viewport of a scrollarea
comment|//(in order to draw the background anyway in case we don't.)
name|ew
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyledBackground
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|rule
operator|.
name|hasBackground
argument_list|()
operator|||
name|rule
operator|.
name|background
argument_list|()
operator|->
name|isTransparent
argument_list|()
operator|||
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
operator|(
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
operator|&&
operator|!
name|rule
operator|.
name|border
argument_list|()
operator|->
name|isOpaque
argument_list|()
operator|)
condition|)
name|w
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OpaquePaintEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|polish
name|void
name|QStyleSheetStyle
operator|::
name|polish
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
block|{
name|baseStyle
argument_list|()
operator|->
name|polish
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|polish
name|void
name|QStyleSheetStyle
operator|::
name|polish
parameter_list|(
name|QPalette
modifier|&
name|pal
parameter_list|)
block|{
name|baseStyle
argument_list|()
operator|->
name|polish
argument_list|(
name|pal
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|repolish
name|void
name|QStyleSheetStyle
operator|::
name|repolish
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|QList
argument_list|<
specifier|const
name|QObject
modifier|*
argument_list|>
name|children
init|=
name|w
operator|->
name|findChildren
argument_list|<
specifier|const
name|QObject
operator|*
argument_list|>
argument_list|(
name|QString
argument_list|()
argument_list|)
decl_stmt|;
name|children
operator|.
name|append
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|styleSheetCaches
operator|->
name|styleSheetCache
operator|.
name|remove
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|updateObjects
argument_list|(
name|children
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|repolish
name|void
name|QStyleSheetStyle
operator|::
name|repolish
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|app
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
specifier|const
name|QObject
modifier|*
argument_list|>
name|allObjects
init|=
name|styleSheetCaches
operator|->
name|styleRulesCache
operator|.
name|keys
argument_list|()
decl_stmt|;
name|styleSheetCaches
operator|->
name|styleSheetCache
operator|.
name|remove
argument_list|(
name|qApp
argument_list|)
expr_stmt|;
name|styleSheetCaches
operator|->
name|styleRulesCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|styleSheetCaches
operator|->
name|hasStyleRuleCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|styleSheetCaches
operator|->
name|renderRulesCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|updateObjects
argument_list|(
name|allObjects
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unpolish
name|void
name|QStyleSheetStyle
operator|::
name|unpolish
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
operator|!
name|w
operator|||
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyleSheet
argument_list|)
condition|)
block|{
name|baseStyle
argument_list|()
operator|->
name|unpolish
argument_list|(
name|w
argument_list|)
expr_stmt|;
return|return;
block|}
name|styleSheetCaches
operator|->
name|styleRulesCache
operator|.
name|remove
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|styleSheetCaches
operator|->
name|hasStyleRuleCache
operator|.
name|remove
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|styleSheetCaches
operator|->
name|renderRulesCache
operator|.
name|remove
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|styleSheetCaches
operator|->
name|styleSheetCache
operator|.
name|remove
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|unsetPalette
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_stylesheet_minw"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_stylesheet_minh"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_stylesheet_maxw"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_stylesheet_maxh"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyleSheet
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|w
argument_list|,
literal|0
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SCROLLAREA
if|if
condition|(
name|QAbstractScrollArea
modifier|*
name|sa
init|=
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
name|QObject
operator|::
name|disconnect
argument_list|(
name|sa
operator|->
name|horizontalScrollBar
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|sa
argument_list|,
name|SLOT
argument_list|(
name|update
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|sa
operator|->
name|verticalScrollBar
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|sa
argument_list|,
name|SLOT
argument_list|(
name|update
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|baseStyle
argument_list|()
operator|->
name|unpolish
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unpolish
name|void
name|QStyleSheetStyle
operator|::
name|unpolish
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
block|{
name|baseStyle
argument_list|()
operator|->
name|unpolish
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|RECURSION_GUARD
argument_list|(
argument|return
argument_list|)
name|styleSheetCaches
operator|->
name|styleRulesCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|styleSheetCaches
operator|->
name|hasStyleRuleCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|styleSheetCaches
operator|->
name|renderRulesCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|styleSheetCaches
operator|->
name|styleSheetCache
operator|.
name|remove
argument_list|(
name|qApp
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
end_ifndef
begin_function
DECL|function|verticalTabs
specifier|inline
specifier|static
name|bool
name|verticalTabs
parameter_list|(
name|QTabBar
operator|::
name|Shape
name|shape
parameter_list|)
block|{
return|return
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedWest
operator|||
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedEast
operator|||
name|shape
operator|==
name|QTabBar
operator|::
name|TriangularWest
operator|||
name|shape
operator|==
name|QTabBar
operator|::
name|TriangularEast
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABBAR
end_comment
begin_function
DECL|function|drawComplexControl
name|void
name|QStyleSheetStyle
operator|::
name|drawComplexControl
parameter_list|(
name|ComplexControl
name|cc
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|RECURSION_GUARD
argument_list|(
argument|baseStyle()->drawComplexControl(cc, opt, p, w); return
argument_list|)
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|cc
condition|)
block|{
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cmb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionComboBox
name|cmbOpt
argument_list|(
operator|*
name|cmb
argument_list|)
decl_stmt|;
name|cmbOpt
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawBackgroundImage
argument_list|(
name|p
argument_list|,
name|cmbOpt
operator|.
name|rect
argument_list|)
expr_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|cmbOpt
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|bool
name|customDropDown
init|=
operator|(
name|opt
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_ComboBoxArrow
operator|)
operator|&&
operator|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_ComboBoxDropDown
argument_list|)
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_ComboBoxArrow
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|customDropDown
condition|)
name|cmbOpt
operator|.
name|subControls
operator|&=
operator|~
name|QStyle
operator|::
name|SC_ComboBoxArrow
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|)
block|{
name|baseStyle
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|cmbOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowsStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|cmbOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|customDropDown
condition|)
return|return;
block|}
else|else
block|{
name|rule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opt
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_ComboBoxArrow
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ComboBoxDropDown
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|QRect
name|r
init|=
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|opt
argument_list|,
name|SC_ComboBoxArrow
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|QRenderRule
name|subRule2
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ComboBoxArrow
argument_list|)
decl_stmt|;
name|r
operator|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|subRule
argument_list|,
name|subRule2
argument_list|,
name|PseudoElement_ComboBoxArrow
argument_list|,
name|r
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
expr_stmt|;
name|subRule2
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmbOpt
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_ComboBoxArrow
expr_stmt|;
name|QWindowsStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|cmbOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spin
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionSpinBox
name|spinOpt
argument_list|(
operator|*
name|spin
argument_list|)
decl_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|spinOpt
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|spinOpt
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|spinOpt
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|bool
name|customUp
init|=
literal|true
decl_stmt|,
name|customDown
init|=
literal|true
decl_stmt|;
name|QRenderRule
name|upRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SpinBoxUpButton
argument_list|)
decl_stmt|;
name|QRenderRule
name|downRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SpinBoxDownButton
argument_list|)
decl_stmt|;
name|bool
name|upRuleMatch
init|=
name|upRule
operator|.
name|hasGeometry
argument_list|()
operator|||
name|upRule
operator|.
name|hasPosition
argument_list|()
decl_stmt|;
name|bool
name|downRuleMatch
init|=
name|downRule
operator|.
name|hasGeometry
argument_list|()
operator|||
name|downRule
operator|.
name|hasPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasNativeBorder
argument_list|()
operator|&&
operator|!
name|upRuleMatch
operator|&&
operator|!
name|downRuleMatch
condition|)
block|{
name|rule
operator|.
name|drawBackgroundImage
argument_list|(
name|p
argument_list|,
name|spinOpt
operator|.
name|rect
argument_list|)
expr_stmt|;
name|customUp
operator|=
operator|(
name|opt
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_SpinBoxUp
operator|)
operator|&&
operator|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_SpinBoxUpButton
argument_list|)
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_UpArrow
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|customUp
condition|)
name|spinOpt
operator|.
name|subControls
operator|&=
operator|~
name|QStyle
operator|::
name|SC_SpinBoxUp
expr_stmt|;
name|customDown
operator|=
operator|(
name|opt
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_SpinBoxDown
operator|)
operator|&&
operator|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_SpinBoxDownButton
argument_list|)
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_DownArrow
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|customDown
condition|)
name|spinOpt
operator|.
name|subControls
operator|&=
operator|~
name|QStyle
operator|::
name|SC_SpinBoxDown
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|)
block|{
name|baseStyle
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|spinOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowsStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|spinOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|customUp
operator|&&
operator|!
name|customDown
condition|)
return|return;
block|}
else|else
block|{
name|rule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|opt
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_SpinBoxUp
operator|)
operator|&&
name|customUp
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SpinBoxUpButton
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|QRect
name|r
init|=
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|opt
argument_list|,
name|SC_SpinBoxUp
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|QRenderRule
name|subRule2
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SpinBoxUpArrow
argument_list|)
decl_stmt|;
name|r
operator|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|subRule
argument_list|,
name|subRule2
argument_list|,
name|PseudoElement_SpinBoxUpArrow
argument_list|,
name|r
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
expr_stmt|;
name|subRule2
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|spinOpt
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_SpinBoxUp
expr_stmt|;
name|QWindowsStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|spinOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|opt
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_SpinBoxDown
operator|)
operator|&&
name|customDown
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SpinBoxDownButton
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|QRect
name|r
init|=
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|opt
argument_list|,
name|SC_SpinBoxDown
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|QRenderRule
name|subRule2
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SpinBoxDownArrow
argument_list|)
decl_stmt|;
name|r
operator|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|subRule
argument_list|,
name|subRule2
argument_list|,
name|PseudoElement_SpinBoxDownArrow
argument_list|,
name|r
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
expr_stmt|;
name|subRule2
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|spinOpt
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_SpinBoxDown
expr_stmt|;
name|QWindowsStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|spinOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SPINBOX
case|case
name|CC_GroupBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|gb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRect
name|labelRect
decl_stmt|,
name|checkBoxRect
decl_stmt|,
name|titleRect
decl_stmt|,
name|frameRect
decl_stmt|;
name|bool
name|hasTitle
init|=
operator|(
name|gb
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
operator|)
operator|||
operator|!
name|gb
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rule
operator|.
name|hasDrawable
argument_list|()
operator|&&
operator|(
operator|!
name|hasTitle
operator|||
operator|!
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_GroupBoxTitle
argument_list|)
operator|)
operator|&&
operator|!
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_Indicator
argument_list|)
operator|&&
operator|!
name|rule
operator|.
name|hasBox
argument_list|()
operator|&&
operator|!
name|rule
operator|.
name|hasFont
operator|&&
operator|!
name|rule
operator|.
name|hasPalette
argument_list|()
condition|)
block|{
comment|// let the native style draw the combobox if there is no style for it.
break|break;
block|}
name|rule
operator|.
name|drawBackground
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|QRenderRule
name|titleRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_GroupBoxTitle
argument_list|)
decl_stmt|;
name|bool
name|clipSet
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|hasTitle
condition|)
block|{
name|labelRect
operator|=
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|opt
argument_list|,
name|SC_GroupBoxLabel
argument_list|,
name|w
argument_list|)
expr_stmt|;
comment|//Some native style (such as mac) may return a too small rectangle (because they use smaller fonts),  so we may need to expand it a little bit.
name|labelRect
operator|.
name|setSize
argument_list|(
name|labelRect
operator|.
name|size
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|ParentStyle
operator|::
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|opt
argument_list|,
name|SC_GroupBoxLabel
argument_list|,
name|w
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|gb
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
condition|)
block|{
name|checkBoxRect
operator|=
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|opt
argument_list|,
name|SC_GroupBoxCheckBox
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|titleRect
operator|=
name|titleRule
operator|.
name|boxRect
argument_list|(
name|checkBoxRect
operator|.
name|united
argument_list|(
name|labelRect
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|titleRect
operator|=
name|titleRule
operator|.
name|boxRect
argument_list|(
name|labelRect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|titleRule
operator|.
name|hasBackground
argument_list|()
operator|||
operator|!
name|titleRule
operator|.
name|background
argument_list|()
operator|->
name|isTransparent
argument_list|()
condition|)
block|{
name|clipSet
operator|=
literal|true
expr_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setClipRegion
argument_list|(
name|QRegion
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
operator|-
name|titleRect
argument_list|)
expr_stmt|;
block|}
block|}
name|frameRect
operator|=
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|opt
argument_list|,
name|SC_GroupBoxFrame
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|QStyleOptionFrame
name|frame
decl_stmt|;
name|frame
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|gb
argument_list|)
expr_stmt|;
name|frame
operator|.
name|features
operator|=
name|gb
operator|->
name|features
expr_stmt|;
name|frame
operator|.
name|lineWidth
operator|=
name|gb
operator|->
name|lineWidth
expr_stmt|;
name|frame
operator|.
name|midLineWidth
operator|=
name|gb
operator|->
name|midLineWidth
expr_stmt|;
name|frame
operator|.
name|rect
operator|=
name|frameRect
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_FrameGroupBox
argument_list|,
operator|&
name|frame
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|clipSet
condition|)
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
comment|// draw background and frame of the title
if|if
condition|(
name|hasTitle
condition|)
name|titleRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|titleRect
argument_list|)
expr_stmt|;
comment|// draw the indicator
if|if
condition|(
name|gb
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
condition|)
block|{
name|QStyleOptionButton
name|box
decl_stmt|;
name|box
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|gb
argument_list|)
expr_stmt|;
name|box
operator|.
name|rect
operator|=
name|checkBoxRect
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_IndicatorCheckBox
argument_list|,
operator|&
name|box
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
comment|// draw the text
if|if
condition|(
operator|!
name|gb
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|alignment
init|=
name|int
argument_list|(
name|Qt
operator|::
name|AlignCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_UnderlineShortcut
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
condition|)
block|{
name|alignment
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
block|}
name|QPalette
name|pal
init|=
name|gb
operator|->
name|palette
decl_stmt|;
if|if
condition|(
name|gb
operator|->
name|textColor
operator|.
name|isValid
argument_list|()
condition|)
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|gb
operator|->
name|textColor
argument_list|)
expr_stmt|;
name|titleRule
operator|.
name|configurePalette
argument_list|(
operator|&
name|pal
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
name|drawItemText
argument_list|(
name|p
argument_list|,
name|labelRect
argument_list|,
name|alignment
argument_list|,
name|pal
argument_list|,
name|gb
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|gb
operator|->
name|text
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
if|if
condition|(
name|gb
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|gb
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|=
name|labelRect
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fropt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
break|break;
case|case
name|CC_ToolButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|tool
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionToolButton
name|toolOpt
argument_list|(
operator|*
name|tool
argument_list|)
decl_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|toolOpt
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|toolOpt
operator|.
name|font
operator|=
name|rule
operator|.
name|font
operator|.
name|resolve
argument_list|(
name|toolOpt
operator|.
name|font
argument_list|)
expr_stmt|;
name|toolOpt
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|bool
name|customArrow
init|=
operator|(
name|tool
operator|->
name|features
operator|&
operator|(
name|QStyleOptionToolButton
operator|::
name|HasMenu
operator||
name|QStyleOptionToolButton
operator|::
name|MenuButtonPopup
operator|)
operator|)
decl_stmt|;
name|bool
name|customDropDown
init|=
name|tool
operator|->
name|features
operator|&
name|QStyleOptionToolButton
operator|::
name|MenuButtonPopup
decl_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
if|if
condition|(
name|tool
operator|->
name|subControls
operator|&
name|SC_ToolButton
condition|)
block|{
comment|//in some case (eg. the button is "auto raised") the style doesn't draw the background
comment|//so we need to draw the background.
comment|// use the same condition as in QCommonStyle
name|State
name|bflags
init|=
name|tool
operator|->
name|state
operator|&
operator|~
name|State_Sunken
decl_stmt|;
if|if
condition|(
name|bflags
operator|&
name|State_AutoRaise
operator|&&
operator|(
operator|!
operator|(
name|bflags
operator|&
name|State_MouseOver
operator|)
operator|||
operator|!
operator|(
name|bflags
operator|&
name|State_Enabled
operator|)
operator|)
condition|)
name|bflags
operator|&=
operator|~
name|State_Raised
expr_stmt|;
if|if
condition|(
name|tool
operator|->
name|state
operator|&
name|State_Sunken
operator|&&
name|tool
operator|->
name|activeSubControls
operator|&
name|SC_ToolButton
condition|)
name|bflags
operator||=
name|State_Sunken
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|bflags
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator||
name|State_Raised
operator|)
operator|)
condition|)
name|rule
operator|.
name|drawBackground
argument_list|(
name|p
argument_list|,
name|toolOpt
operator|.
name|rect
argument_list|)
expr_stmt|;
block|}
name|customArrow
operator|=
name|customArrow
operator|&&
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_ToolButtonDownArrow
argument_list|)
expr_stmt|;
if|if
condition|(
name|customArrow
condition|)
name|toolOpt
operator|.
name|features
operator|&=
operator|~
name|QStyleOptionToolButton
operator|::
name|HasMenu
expr_stmt|;
name|customDropDown
operator|=
name|customDropDown
operator|&&
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_ToolButtonMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|customDropDown
condition|)
name|toolOpt
operator|.
name|subControls
operator|&=
operator|~
name|QStyle
operator|::
name|SC_ToolButtonMenu
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
operator|&&
operator|!
operator|(
name|tool
operator|->
name|features
operator|&
name|QStyleOptionToolButton
operator|::
name|Arrow
operator|)
condition|)
block|{
name|baseStyle
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|toolOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowsStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|toolOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|customArrow
operator|&&
operator|!
name|customDropDown
condition|)
return|return;
block|}
else|else
block|{
name|rule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|toolOpt
operator|.
name|rect
operator|=
name|rule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasFont
condition|)
name|toolOpt
operator|.
name|font
operator|=
name|rule
operator|.
name|font
expr_stmt|;
name|drawControl
argument_list|(
name|CE_ToolButtonLabel
argument_list|,
operator|&
name|toolOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ToolButtonMenu
argument_list|)
decl_stmt|;
name|QRect
name|r
init|=
name|subControlRect
argument_list|(
name|CC_ToolButton
argument_list|,
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_ToolButtonMenu
argument_list|,
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|customDropDown
condition|)
block|{
if|if
condition|(
name|opt
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_ToolButtonMenu
condition|)
block|{
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toolOpt
operator|.
name|rect
operator|=
name|r
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorButtonDropDown
argument_list|,
operator|&
name|toolOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|customArrow
condition|)
block|{
name|QRenderRule
name|subRule2
init|=
name|customDropDown
condition|?
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ToolButtonMenuArrow
argument_list|)
else|:
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ToolButtonDownArrow
argument_list|)
decl_stmt|;
name|QRect
name|r2
init|=
name|customDropDown
condition|?
name|positionRect
argument_list|(
name|w
argument_list|,
name|subRule
argument_list|,
name|subRule2
argument_list|,
name|PseudoElement_ToolButtonMenuArrow
argument_list|,
name|r
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
else|:
name|positionRect
argument_list|(
name|w
argument_list|,
name|rule
argument_list|,
name|subRule2
argument_list|,
name|PseudoElement_ToolButtonDownArrow
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule2
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|subRule2
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toolOpt
operator|.
name|rect
operator|=
name|r2
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|toolOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
case|case
name|CC_ScrollBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|sb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionSlider
name|sbOpt
argument_list|(
operator|*
name|sb
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|sbOpt
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|rule
operator|.
name|drawBackgroundImage
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|sbOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|QWindowsStyle
operator|::
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SCROLLBAR
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|CC_Slider
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|rule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|QRenderRule
name|grooveSubRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SliderGroove
argument_list|)
decl_stmt|;
name|QRenderRule
name|handleSubRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SliderHandle
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|grooveSubRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|QStyleOptionSlider
name|slOpt
argument_list|(
operator|*
name|slider
argument_list|)
decl_stmt|;
name|bool
name|handleHasRule
init|=
name|handleSubRule
operator|.
name|hasDrawable
argument_list|()
decl_stmt|;
comment|// If the style specifies a different handler rule, draw the groove without the handler.
if|if
condition|(
name|handleHasRule
condition|)
name|slOpt
operator|.
name|subControls
operator|&=
operator|~
name|SC_SliderHandle
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
operator|&
name|slOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|handleHasRule
condition|)
return|return;
block|}
name|QRect
name|gr
init|=
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|SC_SliderGroove
argument_list|,
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|subControls
operator|&
name|SC_SliderGroove
condition|)
block|{
name|grooveSubRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|gr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|slider
operator|->
name|subControls
operator|&
name|SC_SliderHandle
condition|)
block|{
name|QRect
name|hr
init|=
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|SC_SliderHandle
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|QRenderRule
name|subRule1
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SliderSubPage
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule1
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|QRect
name|r
argument_list|(
name|gr
operator|.
name|topLeft
argument_list|()
argument_list|,
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|QPoint
argument_list|(
name|hr
operator|.
name|x
argument_list|()
operator|+
name|hr
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|gr
operator|.
name|y
argument_list|()
operator|+
name|gr
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
else|:
name|QPoint
argument_list|(
name|gr
operator|.
name|x
argument_list|()
operator|+
name|gr
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|hr
operator|.
name|y
argument_list|()
operator|+
name|hr
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|subRule1
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|QRenderRule
name|subRule2
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SliderAddPage
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule2
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|QRect
name|r
argument_list|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|QPoint
argument_list|(
name|hr
operator|.
name|x
argument_list|()
operator|+
name|hr
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|+
literal|1
argument_list|,
name|gr
operator|.
name|y
argument_list|()
argument_list|)
else|:
name|QPoint
argument_list|(
name|gr
operator|.
name|x
argument_list|()
argument_list|,
name|hr
operator|.
name|y
argument_list|()
operator|+
name|hr
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|+
literal|1
argument_list|)
argument_list|,
name|gr
operator|.
name|bottomRight
argument_list|()
argument_list|)
decl_stmt|;
name|subRule2
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|handleSubRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|handleSubRule
operator|.
name|boxRect
argument_list|(
name|hr
argument_list|,
name|Margin
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|slider
operator|->
name|subControls
operator|&
name|SC_SliderTickmarks
condition|)
block|{
comment|// TODO...
block|}
return|return;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SLIDER
case|case
name|CC_MdiControls
case|:
if|if
condition|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_MdiCloseButton
argument_list|)
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_MdiNormalButton
argument_list|)
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_MdiMinButton
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|layout
init|=
name|rule
operator|.
name|styleHint
argument_list|(
name|QLatin1String
argument_list|(
literal|"button-layout"
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|layout
operator|.
name|isEmpty
argument_list|()
condition|)
name|layout
operator|=
name|subControlLayout
argument_list|(
name|QLatin1String
argument_list|(
literal|"mNX"
argument_list|)
argument_list|)
expr_stmt|;
name|QStyleOptionComplex
name|optCopy
argument_list|(
operator|*
name|opt
argument_list|)
decl_stmt|;
name|optCopy
operator|.
name|subControls
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layout
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|layoutButton
init|=
name|layout
index|[
name|i
index|]
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|layoutButton
argument_list|<
name|PseudoElement_MdiCloseButton
operator|||
name|layoutButton
argument_list|>
name|PseudoElement_MdiNormalButton
condition|)
continue|continue;
name|QStyle
operator|::
name|SubControl
name|control
init|=
name|knownPseudoElements
index|[
name|layoutButton
index|]
operator|.
name|subControl
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|subControls
operator|&
name|control
operator|)
condition|)
continue|continue;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|layoutButton
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|QRect
name|rect
init|=
name|subRule
operator|.
name|boxRect
argument_list|(
name|subControlRect
argument_list|(
name|CC_MdiControls
argument_list|,
name|opt
argument_list|,
name|control
argument_list|,
name|w
argument_list|)
argument_list|,
name|Margin
argument_list|)
decl_stmt|;
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|QIcon
name|icon
init|=
name|standardIcon
argument_list|(
name|subControlIcon
argument_list|(
name|layoutButton
argument_list|)
argument_list|,
name|opt
argument_list|)
decl_stmt|;
name|icon
operator|.
name|paint
argument_list|(
name|p
argument_list|,
name|subRule
operator|.
name|contentsRect
argument_list|(
name|rect
argument_list|)
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|optCopy
operator|.
name|subControls
operator||=
name|control
expr_stmt|;
block|}
block|}
if|if
condition|(
name|optCopy
operator|.
name|subControls
condition|)
name|baseStyle
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|CC_MdiControls
argument_list|,
operator|&
name|optCopy
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|CC_TitleBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTitleBar
modifier|*
name|tb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTitleBar
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TitleBar
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subRule
operator|.
name|hasDrawable
argument_list|()
operator|&&
operator|!
name|subRule
operator|.
name|hasBox
argument_list|()
operator|&&
operator|!
name|subRule
operator|.
name|hasBorder
argument_list|()
condition|)
break|break;
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|QStyle
operator|::
name|SubControl
argument_list|,
name|QRect
argument_list|>
name|layout
init|=
name|titleBarLayout
argument_list|(
name|w
argument_list|,
name|tb
argument_list|)
decl_stmt|;
name|QRect
name|ir
decl_stmt|;
name|ir
operator|=
name|layout
index|[
name|SC_TitleBarLabel
index|]
expr_stmt|;
if|if
condition|(
name|ir
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|subRule
operator|.
name|hasPalette
argument_list|()
condition|)
name|p
operator|->
name|setPen
argument_list|(
name|subRule
operator|.
name|palette
argument_list|()
operator|->
name|foreground
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|ir
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawText
argument_list|(
name|ir
operator|.
name|x
argument_list|()
argument_list|,
name|ir
operator|.
name|y
argument_list|()
argument_list|,
name|ir
operator|.
name|width
argument_list|()
argument_list|,
name|ir
operator|.
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextSingleLine
argument_list|,
name|tb
operator|->
name|text
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|pm
decl_stmt|;
name|ir
operator|=
name|layout
index|[
name|SC_TitleBarSysMenu
index|]
expr_stmt|;
if|if
condition|(
name|ir
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QRenderRule
name|subSubRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TitleBarSysMenu
argument_list|)
decl_stmt|;
name|subSubRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|ir
argument_list|)
expr_stmt|;
name|ir
operator|=
name|subSubRule
operator|.
name|contentsRect
argument_list|(
name|ir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tb
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|tb
operator|->
name|icon
operator|.
name|paint
argument_list|(
name|p
argument_list|,
name|ir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|iconSize
init|=
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|tb
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|pm
operator|=
name|standardIcon
argument_list|(
name|SP_TitleBarMenuButton
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
operator|.
name|pixmap
argument_list|(
name|iconSize
argument_list|,
name|iconSize
argument_list|)
expr_stmt|;
name|drawItemPixmap
argument_list|(
name|p
argument_list|,
name|ir
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
block|}
name|ir
operator|=
name|layout
index|[
name|SC_TitleBarCloseButton
index|]
expr_stmt|;
if|if
condition|(
name|ir
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QRenderRule
name|subSubRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TitleBarCloseButton
argument_list|)
decl_stmt|;
name|subSubRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|ir
argument_list|)
expr_stmt|;
name|QSize
name|sz
init|=
name|subSubRule
operator|.
name|contentsRect
argument_list|(
name|ir
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowType_Mask
operator|)
operator|==
name|Qt
operator|::
name|Tool
condition|)
name|pm
operator|=
name|standardIcon
argument_list|(
name|SP_DockWidgetCloseButton
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
operator|.
name|pixmap
argument_list|(
name|sz
argument_list|)
expr_stmt|;
else|else
name|pm
operator|=
name|standardIcon
argument_list|(
name|SP_TitleBarCloseButton
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
operator|.
name|pixmap
argument_list|(
name|sz
argument_list|)
expr_stmt|;
name|drawItemPixmap
argument_list|(
name|p
argument_list|,
name|ir
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
name|int
name|pes
index|[]
init|=
block|{
name|PseudoElement_TitleBarMaxButton
block|,
name|PseudoElement_TitleBarMinButton
block|,
name|PseudoElement_TitleBarNormalButton
block|,
name|PseudoElement_TitleBarShadeButton
block|,
name|PseudoElement_TitleBarUnshadeButton
block|,
name|PseudoElement_TitleBarContextHelpButton
block|}
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|pes
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|pe
init|=
name|pes
index|[
name|i
index|]
decl_stmt|;
name|QStyle
operator|::
name|SubControl
name|sc
init|=
name|knownPseudoElements
index|[
name|pe
index|]
operator|.
name|subControl
decl_stmt|;
name|ir
operator|=
name|layout
index|[
name|sc
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|ir
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
name|QRenderRule
name|subSubRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|pe
argument_list|)
decl_stmt|;
name|subSubRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|ir
argument_list|)
expr_stmt|;
name|pm
operator|=
name|standardIcon
argument_list|(
name|subControlIcon
argument_list|(
name|pe
argument_list|)
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
operator|.
name|pixmap
argument_list|(
name|subSubRule
operator|.
name|contentsRect
argument_list|(
name|ir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|drawItemPixmap
argument_list|(
name|p
argument_list|,
name|ir
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
break|break;
default|default:
break|break;
block|}
name|baseStyle
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawControl
name|void
name|QStyleSheetStyle
operator|::
name|drawControl
parameter_list|(
name|ControlElement
name|ce
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|RECURSION_GUARD
argument_list|(
argument|baseStyle()->drawControl(ce, opt, p, w); return
argument_list|)
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|)
decl_stmt|;
name|int
name|pe1
init|=
name|PseudoElement_None
decl_stmt|,
name|pe2
init|=
name|PseudoElement_None
decl_stmt|;
name|bool
name|fallback
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|ce
condition|)
block|{
case|case
name|CE_ToolButtonLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
name|btn
operator|->
name|features
operator|&
name|QStyleOptionToolButton
operator|::
name|Arrow
condition|)
block|{
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStyleOptionToolButton
name|butOpt
argument_list|(
operator|*
name|btn
argument_list|)
decl_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|butOpt
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|butOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
break|break;
case|case
name|CE_FocusFrame
case|:
if|if
condition|(
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawBorder
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|CE_PushButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|rule
operator|.
name|hasDrawable
argument_list|()
operator|||
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
name|rule
operator|.
name|hasPosition
argument_list|()
operator|||
name|rule
operator|.
name|hasPalette
argument_list|()
operator|||
operator|(
operator|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|HasMenu
operator|)
operator|&&
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_PushButtonMenuIndicator
argument_list|)
operator|)
condition|)
block|{
name|ParentStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|CE_PushButtonBevel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionButton
name|btnOpt
argument_list|(
operator|*
name|btn
argument_list|)
decl_stmt|;
name|btnOpt
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawBackgroundImage
argument_list|(
name|p
argument_list|,
name|btnOpt
operator|.
name|rect
argument_list|)
expr_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|btnOpt
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|bool
name|customMenu
init|=
operator|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|HasMenu
operator|&&
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_PushButtonMenuIndicator
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|customMenu
condition|)
name|btnOpt
operator|.
name|features
operator|&=
operator|~
name|QStyleOptionButton
operator|::
name|HasMenu
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|)
block|{
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|btnOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|btnOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|customMenu
condition|)
return|return;
block|}
else|else
block|{
name|rule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|HasMenu
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_PushButtonMenuIndicator
argument_list|)
decl_stmt|;
name|QRect
name|ir
init|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|rule
argument_list|,
name|subRule
argument_list|,
name|PseudoElement_PushButtonMenuIndicator
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|ir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|btnOpt
operator|.
name|rect
operator|=
name|ir
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|btnOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return;
case|case
name|CE_PushButtonLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionButton
name|butOpt
argument_list|(
operator|*
name|button
argument_list|)
decl_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|butOpt
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
specifier|const
name|QFont
name|oldFont
init|=
name|p
operator|->
name|font
argument_list|()
decl_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasFont
condition|)
name|p
operator|->
name|setFont
argument_list|(
name|rule
operator|.
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasPosition
argument_list|()
operator|&&
name|rule
operator|.
name|position
argument_list|()
operator|->
name|textAlignment
operator|!=
literal|0
condition|)
block|{
name|Qt
operator|::
name|Alignment
name|textAlignment
init|=
name|rule
operator|.
name|position
argument_list|()
operator|->
name|textAlignment
decl_stmt|;
name|QRect
name|textRect
init|=
name|button
operator|->
name|rect
decl_stmt|;
name|uint
name|tf
init|=
name|Qt
operator|::
name|TextShowMnemonic
decl_stmt|;
specifier|const
name|uint
name|verticalAlignMask
init|=
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|AlignTop
operator||
name|Qt
operator|::
name|AlignLeft
decl_stmt|;
name|tf
operator||=
operator|(
name|textAlignment
operator|&
name|verticalAlignMask
operator|)
condition|?
operator|(
name|textAlignment
operator|&
name|verticalAlignMask
operator|)
else|:
name|Qt
operator|::
name|AlignVCenter
expr_stmt|;
if|if
condition|(
operator|!
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|button
argument_list|,
name|w
argument_list|)
condition|)
name|tf
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
if|if
condition|(
operator|!
name|button
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|//Group both icon and text
name|QRect
name|iconRect
decl_stmt|;
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|button
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|QIcon
operator|::
name|Normal
else|:
name|QIcon
operator|::
name|Disabled
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|QIcon
operator|::
name|Normal
operator|&&
name|button
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|mode
operator|=
name|QIcon
operator|::
name|Active
expr_stmt|;
name|QIcon
operator|::
name|State
name|state
init|=
name|QIcon
operator|::
name|Off
decl_stmt|;
if|if
condition|(
name|button
operator|->
name|state
operator|&
name|State_On
condition|)
name|state
operator|=
name|QIcon
operator|::
name|On
expr_stmt|;
name|QPixmap
name|pixmap
init|=
name|button
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|button
operator|->
name|iconSize
argument_list|,
name|mode
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|int
name|labelWidth
init|=
name|pixmap
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|labelHeight
init|=
name|pixmap
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|iconSpacing
init|=
literal|4
decl_stmt|;
comment|//### 4 is currently hardcoded in QPushButton::sizeHint()
name|int
name|textWidth
init|=
name|button
operator|->
name|fontMetrics
operator|.
name|boundingRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|tf
argument_list|,
name|button
operator|->
name|text
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|button
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|labelWidth
operator|+=
operator|(
name|textWidth
operator|+
name|iconSpacing
operator|)
expr_stmt|;
comment|//Determine label alignment:
if|if
condition|(
name|textAlignment
operator|&
name|Qt
operator|::
name|AlignLeft
condition|)
block|{
comment|/*left*/
name|iconRect
operator|=
name|QRect
argument_list|(
name|textRect
operator|.
name|x
argument_list|()
argument_list|,
name|textRect
operator|.
name|y
argument_list|()
operator|+
operator|(
name|textRect
operator|.
name|height
argument_list|()
operator|-
name|labelHeight
operator|)
operator|/
literal|2
argument_list|,
name|pixmap
operator|.
name|width
argument_list|()
argument_list|,
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|textAlignment
operator|&
name|Qt
operator|::
name|AlignHCenter
condition|)
block|{
comment|/* center */
name|iconRect
operator|=
name|QRect
argument_list|(
name|textRect
operator|.
name|x
argument_list|()
operator|+
operator|(
name|textRect
operator|.
name|width
argument_list|()
operator|-
name|labelWidth
operator|)
operator|/
literal|2
argument_list|,
name|textRect
operator|.
name|y
argument_list|()
operator|+
operator|(
name|textRect
operator|.
name|height
argument_list|()
operator|-
name|labelHeight
operator|)
operator|/
literal|2
argument_list|,
name|pixmap
operator|.
name|width
argument_list|()
argument_list|,
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/*right*/
name|iconRect
operator|=
name|QRect
argument_list|(
name|textRect
operator|.
name|x
argument_list|()
operator|+
name|textRect
operator|.
name|width
argument_list|()
operator|-
name|labelWidth
argument_list|,
name|textRect
operator|.
name|y
argument_list|()
operator|+
operator|(
name|textRect
operator|.
name|height
argument_list|()
operator|-
name|labelHeight
operator|)
operator|/
literal|2
argument_list|,
name|pixmap
operator|.
name|width
argument_list|()
argument_list|,
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iconRect
operator|=
name|visualRect
argument_list|(
name|button
operator|->
name|direction
argument_list|,
name|textRect
argument_list|,
name|iconRect
argument_list|)
expr_stmt|;
name|tf
operator||=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
comment|//left align, we adjust the text-rect instead
if|if
condition|(
name|button
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|textRect
operator|.
name|setRight
argument_list|(
name|iconRect
operator|.
name|left
argument_list|()
operator|-
name|iconSpacing
argument_list|)
expr_stmt|;
else|else
name|textRect
operator|.
name|setLeft
argument_list|(
name|iconRect
operator|.
name|left
argument_list|()
operator|+
name|iconRect
operator|.
name|width
argument_list|()
operator|+
name|iconSpacing
argument_list|)
expr_stmt|;
if|if
condition|(
name|button
operator|->
name|state
operator|&
operator|(
name|State_On
operator||
name|State_Sunken
operator|)
condition|)
name|iconRect
operator|.
name|translate
argument_list|(
name|pixelMetric
argument_list|(
name|PM_ButtonShiftHorizontal
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
argument_list|,
name|pixelMetric
argument_list|(
name|PM_ButtonShiftVertical
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPixmap
argument_list|(
name|iconRect
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tf
operator||=
name|textAlignment
expr_stmt|;
block|}
if|if
condition|(
name|button
operator|->
name|state
operator|&
operator|(
name|State_On
operator||
name|State_Sunken
operator|)
condition|)
name|textRect
operator|.
name|translate
argument_list|(
name|pixelMetric
argument_list|(
name|PM_ButtonShiftHorizontal
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
argument_list|,
name|pixelMetric
argument_list|(
name|PM_ButtonShiftVertical
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|button
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|HasMenu
condition|)
block|{
name|int
name|indicatorSize
init|=
name|pixelMetric
argument_list|(
name|PM_MenuButtonIndicator
argument_list|,
name|button
argument_list|,
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|button
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|textRect
operator|=
name|textRect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|indicatorSize
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|textRect
operator|=
name|textRect
operator|.
name|adjusted
argument_list|(
name|indicatorSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|drawItemText
argument_list|(
name|p
argument_list|,
name|textRect
argument_list|,
name|tf
argument_list|,
name|butOpt
operator|.
name|palette
argument_list|,
operator|(
name|button
operator|->
name|state
operator|&
name|State_Enabled
operator|)
argument_list|,
name|button
operator|->
name|text
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ParentStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|butOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rule
operator|.
name|hasFont
condition|)
name|p
operator|->
name|setFont
argument_list|(
name|oldFont
argument_list|)
expr_stmt|;
block|}
return|return;
case|case
name|CE_RadioButton
case|:
case|case
name|CE_CheckBox
case|:
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
operator|||
name|rule
operator|.
name|hasDrawable
argument_list|()
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_Indicator
argument_list|)
condition|)
block|{
name|rule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|ParentStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionButton
name|butOpt
argument_list|(
operator|*
name|btn
argument_list|)
decl_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|butOpt
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|butOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|CE_RadioButtonLabel
case|:
case|case
name|CE_CheckBoxLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionButton
name|butOpt
argument_list|(
operator|*
name|btn
argument_list|)
decl_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|butOpt
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|ParentStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|butOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
return|return;
case|case
name|CE_Splitter
case|:
name|pe1
operator|=
name|PseudoElement_SplitterHandle
expr_stmt|;
break|break;
case|case
name|CE_ToolBar
case|:
if|if
condition|(
name|rule
operator|.
name|hasBackground
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawBackground
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rule
operator|.
name|hasBorder
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawBorder
argument_list|(
name|p
argument_list|,
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
specifier|const
name|QStyleOptionToolBar
modifier|*
name|tb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolBar
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionToolBar
name|newTb
argument_list|(
operator|*
name|tb
argument_list|)
decl_stmt|;
name|newTb
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|newTb
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_TOOLBAR
block|}
return|return;
case|case
name|CE_MenuEmptyArea
case|:
case|case
name|CE_MenuBarEmptyArea
case|:
if|if
condition|(
name|rule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
comment|// Drawn by PE_Widget
return|return;
block|}
break|break;
case|case
name|CE_MenuTearoff
case|:
case|case
name|CE_MenuScroller
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|m
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionMenuItem
name|mi
argument_list|(
operator|*
name|m
argument_list|)
decl_stmt|;
name|int
name|pe
init|=
name|ce
operator|==
name|CE_MenuTearoff
condition|?
name|PseudoElement_MenuTearoff
else|:
name|PseudoElement_MenuScroller
decl_stmt|;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|pe
argument_list|)
decl_stmt|;
name|mi
operator|.
name|rect
operator|=
name|subRule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|mi
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|subRule
operator|.
name|configurePalette
argument_list|(
operator|&
name|mi
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|mi
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
case|case
name|CE_MenuItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|m
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionMenuItem
name|mi
argument_list|(
operator|*
name|m
argument_list|)
decl_stmt|;
name|int
name|pseudo
init|=
operator|(
name|mi
operator|.
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|Separator
operator|)
condition|?
name|PseudoElement_MenuSeparator
else|:
name|PseudoElement_Item
decl_stmt|;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|pseudo
argument_list|)
decl_stmt|;
name|mi
operator|.
name|rect
operator|=
name|subRule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|mi
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|mi
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
expr_stmt|;
name|subRule
operator|.
name|configurePalette
argument_list|(
operator|&
name|mi
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|subRule
operator|.
name|configurePalette
argument_list|(
operator|&
name|mi
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
expr_stmt|;
name|QFont
name|oldFont
init|=
name|p
operator|->
name|font
argument_list|()
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasFont
condition|)
name|p
operator|->
name|setFont
argument_list|(
name|subRule
operator|.
name|font
operator|.
name|resolve
argument_list|(
name|p
operator|->
name|font
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// We fall back to drawing with the style sheet code whenever at least one of the
comment|// items are styled in an incompatible way, such as having a background image.
name|QRenderRule
name|allRules
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_Item
argument_list|,
name|PseudoClass_Any
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|pseudo
operator|==
name|PseudoElement_MenuSeparator
operator|)
operator|&&
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|pseudo
operator|==
name|PseudoElement_Item
operator|)
operator|&&
operator|(
name|allRules
operator|.
name|hasBox
argument_list|()
operator|||
name|allRules
operator|.
name|hasBorder
argument_list|()
operator|||
operator|(
name|allRules
operator|.
name|background
argument_list|()
operator|&&
operator|!
name|allRules
operator|.
name|background
argument_list|()
operator|->
name|pixmap
operator|.
name|isNull
argument_list|()
operator|)
operator|)
condition|)
block|{
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasBackground
argument_list|()
condition|)
block|{
name|mi
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|mi
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mi
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|mi
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mi
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|mi
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|checkable
init|=
name|mi
operator|.
name|checkType
operator|!=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
decl_stmt|;
name|bool
name|checked
init|=
name|checkable
condition|?
name|mi
operator|.
name|checked
else|:
literal|false
decl_stmt|;
name|bool
name|dis
init|=
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
decl_stmt|,
name|act
init|=
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
decl_stmt|;
if|if
condition|(
operator|!
name|mi
operator|.
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|dis
condition|?
name|QIcon
operator|::
name|Disabled
else|:
name|QIcon
operator|::
name|Normal
decl_stmt|;
if|if
condition|(
name|act
operator|&&
operator|!
name|dis
condition|)
name|mode
operator|=
name|QIcon
operator|::
name|Active
expr_stmt|;
name|QPixmap
name|pixmap
decl_stmt|;
if|if
condition|(
name|checked
condition|)
name|pixmap
operator|=
name|mi
operator|.
name|icon
operator|.
name|pixmap
argument_list|(
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|)
argument_list|,
name|mode
argument_list|,
name|QIcon
operator|::
name|On
argument_list|)
expr_stmt|;
else|else
name|pixmap
operator|=
name|mi
operator|.
name|icon
operator|.
name|pixmap
argument_list|(
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|)
argument_list|,
name|mode
argument_list|)
expr_stmt|;
specifier|const
name|int
name|pixw
init|=
name|pixmap
operator|.
name|width
argument_list|()
operator|/
name|pixmap
operator|.
name|devicePixelRatio
argument_list|()
decl_stmt|;
specifier|const
name|int
name|pixh
init|=
name|pixmap
operator|.
name|height
argument_list|()
operator|/
name|pixmap
operator|.
name|devicePixelRatio
argument_list|()
decl_stmt|;
name|QRenderRule
name|iconRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_MenuIcon
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iconRule
operator|.
name|hasGeometry
argument_list|()
condition|)
block|{
name|iconRule
operator|.
name|geo
operator|=
operator|new
name|QStyleSheetGeometryData
argument_list|(
name|pixw
argument_list|,
name|pixh
argument_list|,
name|pixw
argument_list|,
name|pixh
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iconRule
operator|.
name|geo
operator|->
name|width
operator|=
name|pixw
expr_stmt|;
name|iconRule
operator|.
name|geo
operator|->
name|height
operator|=
name|pixh
expr_stmt|;
block|}
name|QRect
name|iconRect
init|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|subRule
argument_list|,
name|iconRule
argument_list|,
name|PseudoElement_MenuIcon
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
decl_stmt|;
name|iconRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|iconRect
argument_list|)
expr_stmt|;
name|QRect
name|pmr
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pixw
argument_list|,
name|pixh
argument_list|)
decl_stmt|;
name|pmr
operator|.
name|moveCenter
argument_list|(
name|iconRect
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawPixmap
argument_list|(
name|pmr
operator|.
name|topLeft
argument_list|()
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|checkable
condition|)
block|{
name|QRenderRule
name|subSubRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_MenuCheckMark
argument_list|)
decl_stmt|;
if|if
condition|(
name|subSubRule
operator|.
name|hasDrawable
argument_list|()
operator|||
name|checked
condition|)
block|{
name|QStyleOptionMenuItem
name|newMi
init|=
name|mi
decl_stmt|;
name|newMi
operator|.
name|rect
operator|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|subRule
argument_list|,
name|subSubRule
argument_list|,
name|PseudoElement_MenuCheckMark
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_IndicatorMenuCheckMark
argument_list|,
operator|&
name|newMi
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
name|QRect
name|textRect
init|=
name|subRule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
decl_stmt|;
name|textRect
operator|.
name|setWidth
argument_list|(
name|textRect
operator|.
name|width
argument_list|()
operator|-
name|mi
operator|.
name|tabWidth
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|mi
operator|.
name|text
decl_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|mi
operator|.
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|text_flags
init|=
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|TextDontClip
operator||
name|Qt
operator|::
name|TextSingleLine
decl_stmt|;
if|if
condition|(
operator|!
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
operator|&
name|mi
argument_list|,
name|w
argument_list|)
condition|)
name|text_flags
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
name|int
name|t
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|>=
literal|0
condition|)
block|{
name|QRect
name|vShortcutRect
init|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|mi
operator|.
name|rect
argument_list|,
name|QRect
argument_list|(
name|textRect
operator|.
name|topRight
argument_list|()
argument_list|,
name|QPoint
argument_list|(
name|mi
operator|.
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|textRect
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|->
name|drawText
argument_list|(
name|vShortcutRect
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|mid
argument_list|(
name|t
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|drawText
argument_list|(
name|textRect
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mi
operator|.
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|SubMenu
condition|)
block|{
comment|// draw sub menu arrow
name|PrimitiveElement
name|arrow
init|=
operator|(
name|opt
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
condition|?
name|PE_IndicatorArrowLeft
else|:
name|PE_IndicatorArrowRight
decl_stmt|;
name|QRenderRule
name|subRule2
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_MenuRightArrow
argument_list|)
decl_stmt|;
name|mi
operator|.
name|rect
operator|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|subRule
argument_list|,
name|subRule2
argument_list|,
name|PseudoElement_MenuRightArrow
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|mi
operator|.
name|direction
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|arrow
argument_list|,
operator|&
name|mi
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_MenuCheckMark
argument_list|)
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_MenuRightArrow
argument_list|)
condition|)
block|{
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|mi
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|mi
operator|.
name|checkType
operator|!=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
operator|&&
operator|!
name|mi
operator|.
name|checked
condition|)
block|{
comment|// We have a style defined, but QWindowsStyle won't draw anything if not checked.
comment|// So we mimick what QWindowsStyle would do.
name|int
name|checkcol
init|=
name|qMax
argument_list|<
name|int
argument_list|>
argument_list|(
name|mi
operator|.
name|maxIconWidth
argument_list|,
name|QWindowsStylePrivate
operator|::
name|windowsCheckMarkWidth
argument_list|)
decl_stmt|;
name|QRect
name|vCheckRect
init|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|mi
operator|.
name|rect
argument_list|,
name|QRect
argument_list|(
name|mi
operator|.
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|mi
operator|.
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|checkcol
argument_list|,
name|mi
operator|.
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mi
operator|.
name|state
operator|.
name|testFlag
argument_list|(
name|State_Enabled
argument_list|)
operator|&&
name|mi
operator|.
name|state
operator|.
name|testFlag
argument_list|(
name|State_Selected
argument_list|)
condition|)
block|{
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|vCheckRect
argument_list|,
name|mi
operator|.
name|palette
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
operator|&
name|mi
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QBrush
name|fill
argument_list|(
name|mi
operator|.
name|palette
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
decl_stmt|;
name|qDrawShadePanel
argument_list|(
name|p
argument_list|,
name|vCheckRect
argument_list|,
name|mi
operator|.
name|palette
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
operator|&
name|fill
argument_list|)
expr_stmt|;
block|}
name|QRenderRule
name|subSubRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_MenuCheckMark
argument_list|)
decl_stmt|;
if|if
condition|(
name|subSubRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|QStyleOptionMenuItem
name|newMi
argument_list|(
name|mi
argument_list|)
decl_stmt|;
name|newMi
operator|.
name|rect
operator|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|mi
operator|.
name|rect
argument_list|,
name|QRect
argument_list|(
name|mi
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
name|QWindowsStylePrivate
operator|::
name|windowsItemFrame
argument_list|,
name|mi
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|QWindowsStylePrivate
operator|::
name|windowsItemFrame
argument_list|,
name|checkcol
operator|-
literal|2
operator|*
name|QWindowsStylePrivate
operator|::
name|windowsItemFrame
argument_list|,
name|mi
operator|.
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|QWindowsStylePrivate
operator|::
name|windowsItemFrame
argument_list|)
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_IndicatorMenuCheckMark
argument_list|,
operator|&
name|newMi
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|rule
operator|.
name|hasDrawable
argument_list|()
operator|&&
operator|!
name|subRule
operator|.
name|hasDrawable
argument_list|()
operator|&&
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
operator|)
condition|)
block|{
name|mi
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|mi
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
operator|&&
name|subRule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|)
block|{
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|mi
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ParentStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|mi
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|subRule
operator|.
name|hasFont
condition|)
name|p
operator|->
name|setFont
argument_list|(
name|oldFont
argument_list|)
expr_stmt|;
return|return;
block|}
return|return;
case|case
name|CE_MenuBarItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|m
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionMenuItem
name|mi
argument_list|(
operator|*
name|m
argument_list|)
decl_stmt|;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_Item
argument_list|)
decl_stmt|;
name|mi
operator|.
name|rect
operator|=
name|subRule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|mi
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|subRule
operator|.
name|configurePalette
argument_list|(
operator|&
name|mi
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|mi
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|rule
operator|.
name|hasDrawable
argument_list|()
operator|&&
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
operator|)
condition|)
block|{
comment|// So that the menu bar background is not hidden by the items
name|mi
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|mi
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
block|}
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|mi
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CE_ComboBoxLabel
case|:
if|if
condition|(
operator|!
name|rule
operator|.
name|hasBox
argument_list|()
condition|)
break|break;
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRect
name|editRect
init|=
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|cb
argument_list|,
name|SC_ComboBoxEditField
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setClipRect
argument_list|(
name|editRect
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cb
operator|->
name|currentIcon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|int
name|spacing
init|=
name|rule
operator|.
name|hasBox
argument_list|()
condition|?
name|rule
operator|.
name|box
argument_list|()
operator|->
name|spacing
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|spacing
operator|==
operator|-
literal|1
condition|)
name|spacing
operator|=
literal|6
expr_stmt|;
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|cb
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|QIcon
operator|::
name|Normal
else|:
name|QIcon
operator|::
name|Disabled
decl_stmt|;
name|QPixmap
name|pixmap
init|=
name|cb
operator|->
name|currentIcon
operator|.
name|pixmap
argument_list|(
name|cb
operator|->
name|iconSize
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|QRect
name|iconRect
argument_list|(
name|editRect
argument_list|)
decl_stmt|;
name|iconRect
operator|.
name|setWidth
argument_list|(
name|cb
operator|->
name|iconSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|iconRect
operator|=
name|alignedRect
argument_list|(
name|cb
operator|->
name|direction
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|,
name|iconRect
operator|.
name|size
argument_list|()
argument_list|,
name|editRect
argument_list|)
expr_stmt|;
name|drawItemPixmap
argument_list|(
name|p
argument_list|,
name|iconRect
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|cb
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|editRect
operator|.
name|translate
argument_list|(
operator|-
name|spacing
operator|-
name|cb
operator|->
name|iconSize
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|editRect
operator|.
name|translate
argument_list|(
name|cb
operator|->
name|iconSize
operator|.
name|width
argument_list|()
operator|+
name|spacing
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cb
operator|->
name|currentText
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|cb
operator|->
name|editable
condition|)
block|{
name|QPalette
name|styledPalette
argument_list|(
name|cb
operator|->
name|palette
argument_list|)
decl_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|styledPalette
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|drawItemText
argument_list|(
name|p
argument_list|,
name|editRect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|,
name|styledPalette
argument_list|,
name|cb
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|cb
operator|->
name|currentText
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
return|return;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
case|case
name|CE_Header
case|:
if|if
condition|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_HeaderViewUpArrow
argument_list|)
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_HeaderViewDownArrow
argument_list|)
condition|)
block|{
name|ParentStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_HeaderViewSection
argument_list|)
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_HeaderViewSection
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subRule
operator|.
name|hasNativeBorder
argument_list|()
operator|||
operator|!
name|subRule
operator|.
name|baseStyleCanDraw
argument_list|()
operator|||
name|subRule
operator|.
name|hasBackground
argument_list|()
operator|||
name|subRule
operator|.
name|hasPalette
argument_list|()
condition|)
block|{
name|ParentStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|CE_HeaderSection
case|:
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|header
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_HeaderViewSection
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|QStyleOptionHeader
name|hdr
argument_list|(
operator|*
name|header
argument_list|)
decl_stmt|;
name|subRule
operator|.
name|configurePalette
argument_list|(
operator|&
name|hdr
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|)
block|{
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|CE_HeaderSection
argument_list|,
operator|&
name|hdr
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|CE_HeaderSection
argument_list|,
operator|&
name|hdr
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
break|break;
case|case
name|CE_HeaderLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|header
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionHeader
name|hdr
argument_list|(
operator|*
name|header
argument_list|)
decl_stmt|;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_HeaderViewSection
argument_list|)
decl_stmt|;
name|subRule
operator|.
name|configurePalette
argument_list|(
operator|&
name|hdr
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|QFont
name|oldFont
init|=
name|p
operator|->
name|font
argument_list|()
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasFont
condition|)
name|p
operator|->
name|setFont
argument_list|(
name|subRule
operator|.
name|font
operator|.
name|resolve
argument_list|(
name|p
operator|->
name|font
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|hdr
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasFont
condition|)
name|p
operator|->
name|setFont
argument_list|(
name|oldFont
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|CE_HeaderEmptyArea
case|:
if|if
condition|(
name|rule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
return|return;
block|}
break|break;
case|case
name|CE_ProgressBar
case|:
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
return|return;
case|case
name|CE_ProgressBarGroove
case|:
if|if
condition|(
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|rule
operator|.
name|boxRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|Margin
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|CE_ProgressBarContents
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ProgressBarChunk
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|pb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|setClipRect
argument_list|(
name|pb
operator|->
name|rect
argument_list|)
expr_stmt|;
name|qint64
name|minimum
init|=
name|qint64
argument_list|(
name|pb
operator|->
name|minimum
argument_list|)
decl_stmt|;
name|qint64
name|maximum
init|=
name|qint64
argument_list|(
name|pb
operator|->
name|maximum
argument_list|)
decl_stmt|;
name|qint64
name|progress
init|=
name|qint64
argument_list|(
name|pb
operator|->
name|progress
argument_list|)
decl_stmt|;
name|bool
name|vertical
init|=
operator|(
name|pb
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
decl_stmt|;
name|bool
name|inverted
init|=
name|pb
operator|->
name|invertedAppearance
decl_stmt|;
name|QTransform
name|m
decl_stmt|;
name|QRect
name|rect
init|=
name|pb
operator|->
name|rect
decl_stmt|;
if|if
condition|(
name|vertical
condition|)
block|{
name|rect
operator|=
name|QRect
argument_list|(
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
expr_stmt|;
name|m
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|-
operator|(
name|rect
operator|.
name|height
argument_list|()
operator|+
name|rect
operator|.
name|y
argument_list|()
operator|*
literal|2
operator|)
argument_list|)
expr_stmt|;
block|}
name|bool
name|reverse
init|=
operator|(
operator|(
operator|!
name|vertical
operator|&&
operator|(
name|pb
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
operator|)
operator|||
name|vertical
operator|)
decl_stmt|;
if|if
condition|(
name|inverted
condition|)
name|reverse
operator|=
operator|!
name|reverse
expr_stmt|;
specifier|const
name|bool
name|indeterminate
init|=
name|pb
operator|->
name|minimum
operator|==
name|pb
operator|->
name|maximum
decl_stmt|;
name|qreal
name|fillRatio
init|=
name|indeterminate
condition|?
literal|0.50
else|:
name|qreal
argument_list|(
name|progress
operator|-
name|minimum
argument_list|)
operator|/
operator|(
name|maximum
operator|-
name|minimum
operator|)
decl_stmt|;
name|int
name|fillWidth
init|=
name|int
argument_list|(
name|rect
operator|.
name|width
argument_list|()
operator|*
name|fillRatio
argument_list|)
decl_stmt|;
name|int
name|chunkWidth
init|=
name|fillWidth
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasContentsSize
argument_list|()
condition|)
block|{
name|QSize
name|sz
init|=
name|subRule
operator|.
name|size
argument_list|()
decl_stmt|;
name|chunkWidth
operator|=
operator|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Horizontal
operator|)
condition|?
name|sz
operator|.
name|width
argument_list|()
else|:
name|sz
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|QRect
name|r
init|=
name|rect
decl_stmt|;
name|Q_D
argument_list|(
specifier|const
name|QWindowsStyle
argument_list|)
expr_stmt|;
if|if
condition|(
name|pb
operator|->
name|minimum
operator|==
literal|0
operator|&&
name|pb
operator|->
name|maximum
operator|==
literal|0
condition|)
block|{
name|int
name|chunkCount
init|=
name|fillWidth
operator|/
name|chunkWidth
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QProgressStyleAnimation
modifier|*
name|animation
init|=
name|qobject_cast
argument_list|<
name|QProgressStyleAnimation
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|animation
argument_list|(
name|opt
operator|->
name|styleObject
argument_list|)
argument_list|)
condition|)
name|offset
operator|=
name|animation
operator|->
name|animationStep
argument_list|()
operator|*
literal|8
operator|%
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
else|else
name|d
operator|->
name|startAnimation
argument_list|(
operator|new
name|QProgressStyleAnimation
argument_list|(
name|d
operator|->
name|animationFps
argument_list|,
name|opt
operator|->
name|styleObject
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|x
init|=
name|reverse
condition|?
name|r
operator|.
name|left
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
operator|-
name|offset
operator|-
name|chunkWidth
else|:
name|r
operator|.
name|x
argument_list|()
operator|+
name|offset
decl_stmt|;
while|while
condition|(
name|chunkCount
operator|>
literal|0
condition|)
block|{
name|r
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|chunkWidth
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|m
operator|.
name|mapRect
argument_list|(
name|QRectF
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|toRect
argument_list|()
expr_stmt|;
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|x
operator|+=
name|reverse
condition|?
operator|-
name|chunkWidth
else|:
name|chunkWidth
expr_stmt|;
if|if
condition|(
name|reverse
condition|?
name|x
operator|<
name|rect
operator|.
name|left
argument_list|()
else|:
name|x
operator|>
name|rect
operator|.
name|right
argument_list|()
condition|)
break|break;
operator|--
name|chunkCount
expr_stmt|;
block|}
name|r
operator|=
name|rect
expr_stmt|;
name|x
operator|=
name|reverse
condition|?
name|r
operator|.
name|right
argument_list|()
operator|-
operator|(
name|r
operator|.
name|left
argument_list|()
operator|-
name|x
operator|-
name|chunkWidth
operator|)
else|:
name|r
operator|.
name|left
argument_list|()
operator|+
operator|(
name|x
operator|-
name|r
operator|.
name|right
argument_list|()
operator|-
name|chunkWidth
operator|)
expr_stmt|;
while|while
condition|(
name|chunkCount
operator|>
literal|0
condition|)
block|{
name|r
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|chunkWidth
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|m
operator|.
name|mapRect
argument_list|(
name|QRectF
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|toRect
argument_list|()
expr_stmt|;
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|x
operator|+=
name|reverse
condition|?
operator|-
name|chunkWidth
else|:
name|chunkWidth
expr_stmt|;
operator|--
name|chunkCount
expr_stmt|;
block|}
empty_stmt|;
block|}
else|else
block|{
name|int
name|x
init|=
name|reverse
condition|?
name|r
operator|.
name|left
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
operator|-
name|chunkWidth
else|:
name|r
operator|.
name|x
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ceil
argument_list|(
name|qreal
argument_list|(
name|fillWidth
argument_list|)
operator|/
name|chunkWidth
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|r
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|chunkWidth
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|m
operator|.
name|mapRect
argument_list|(
name|QRectF
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|toRect
argument_list|()
expr_stmt|;
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|x
operator|+=
name|reverse
condition|?
operator|-
name|chunkWidth
else|:
name|chunkWidth
expr_stmt|;
block|}
name|d
operator|->
name|stopAnimation
argument_list|(
name|opt
operator|->
name|styleObject
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
break|break;
case|case
name|CE_ProgressBarLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|pb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
name|rule
operator|.
name|hasBorder
argument_list|()
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_ProgressBarChunk
argument_list|)
condition|)
block|{
name|drawItemText
argument_list|(
name|p
argument_list|,
name|pb
operator|->
name|rect
argument_list|,
name|pb
operator|->
name|textAlignment
operator||
name|Qt
operator|::
name|TextSingleLine
argument_list|,
name|pb
operator|->
name|palette
argument_list|,
name|pb
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|pb
operator|->
name|text
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStyleOptionProgressBarV2
name|pbCopy
argument_list|(
operator|*
name|pb
argument_list|)
decl_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|pbCopy
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|pbCopy
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
break|break;
case|case
name|CE_SizeGrip
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSizeGrip
modifier|*
name|sgOpt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSizeGrip
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|rule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawFrame
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|sgOpt
operator|->
name|corner
condition|)
block|{
case|case
name|Qt
operator|::
name|BottomRightCorner
case|:
break|break;
case|case
name|Qt
operator|::
name|BottomLeftCorner
case|:
name|p
operator|->
name|rotate
argument_list|(
literal|90
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TopLeftCorner
case|:
name|p
operator|->
name|rotate
argument_list|(
literal|180
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TopRightCorner
case|:
name|p
operator|->
name|rotate
argument_list|(
literal|270
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|rule
operator|.
name|drawImage
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QStyleOptionSizeGrip
name|sg
argument_list|(
operator|*
name|sgOpt
argument_list|)
decl_stmt|;
name|sg
operator|.
name|rect
operator|=
name|rule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|CE_SizeGrip
argument_list|,
operator|&
name|sg
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
break|break;
case|case
name|CE_ToolBoxTab
case|:
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
return|return;
case|case
name|CE_ToolBoxTabShape
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ToolBoxTab
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|CE_ToolBoxTabLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolBox
modifier|*
name|box
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionToolBox
name|boxCopy
argument_list|(
operator|*
name|box
argument_list|)
decl_stmt|;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ToolBoxTab
argument_list|)
decl_stmt|;
name|subRule
operator|.
name|configurePalette
argument_list|(
operator|&
name|boxCopy
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|QFont
name|oldFont
init|=
name|p
operator|->
name|font
argument_list|()
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasFont
condition|)
name|p
operator|->
name|setFont
argument_list|(
name|subRule
operator|.
name|font
argument_list|)
expr_stmt|;
name|boxCopy
operator|.
name|rect
operator|=
name|subRule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|boxCopy
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasFont
condition|)
name|p
operator|->
name|setFont
argument_list|(
name|oldFont
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|CE_ScrollBarAddPage
case|:
name|pe1
operator|=
name|PseudoElement_ScrollBarAddPage
expr_stmt|;
break|break;
case|case
name|CE_ScrollBarSubPage
case|:
name|pe1
operator|=
name|PseudoElement_ScrollBarSubPage
expr_stmt|;
break|break;
case|case
name|CE_ScrollBarAddLine
case|:
name|pe1
operator|=
name|PseudoElement_ScrollBarAddLine
expr_stmt|;
name|pe2
operator|=
operator|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Horizontal
operator|)
condition|?
name|PseudoElement_ScrollBarRightArrow
else|:
name|PseudoElement_ScrollBarDownArrow
expr_stmt|;
name|fallback
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|CE_ScrollBarSubLine
case|:
name|pe1
operator|=
name|PseudoElement_ScrollBarSubLine
expr_stmt|;
name|pe2
operator|=
operator|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Horizontal
operator|)
condition|?
name|PseudoElement_ScrollBarLeftArrow
else|:
name|PseudoElement_ScrollBarUpArrow
expr_stmt|;
name|fallback
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|CE_ScrollBarFirst
case|:
name|pe1
operator|=
name|PseudoElement_ScrollBarFirst
expr_stmt|;
break|break;
case|case
name|CE_ScrollBarLast
case|:
name|pe1
operator|=
name|PseudoElement_ScrollBarLast
expr_stmt|;
break|break;
case|case
name|CE_ScrollBarSlider
case|:
name|pe1
operator|=
name|PseudoElement_ScrollBarSlider
expr_stmt|;
name|fallback
operator|=
literal|true
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
case|case
name|CE_ItemViewItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionViewItem
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ViewItem
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_Indicator
argument_list|)
condition|)
block|{
name|QStyleOptionViewItem
name|optCopy
argument_list|(
operator|*
name|vopt
argument_list|)
decl_stmt|;
name|subRule
operator|.
name|configurePalette
argument_list|(
operator|&
name|optCopy
operator|.
name|palette
argument_list|,
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|?
name|QPalette
operator|::
name|HighlightedText
else|:
name|QPalette
operator|::
name|Text
argument_list|,
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|?
name|QPalette
operator|::
name|Highlight
else|:
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|optCopy
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStyleOptionViewItem
name|voptCopy
argument_list|(
operator|*
name|vopt
argument_list|)
decl_stmt|;
name|subRule
operator|.
name|configurePalette
argument_list|(
operator|&
name|voptCopy
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|QPalette
operator|::
name|NoRole
argument_list|)
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|voptCopy
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_ITEMVIEWS
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|CE_TabBarTab
case|:
if|if
condition|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_TabBarTab
argument_list|)
condition|)
block|{
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|CE_TabBarTabLabel
case|:
case|case
name|CE_TabBarTabShape
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionTabV3
name|tabCopy
argument_list|(
operator|*
name|tab
argument_list|)
decl_stmt|;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TabBarTab
argument_list|)
decl_stmt|;
name|QRect
name|r
init|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|subRule
argument_list|,
name|PseudoElement_TabBarTab
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
decl_stmt|;
if|if
condition|(
name|ce
operator|==
name|CE_TabBarTabShape
operator|&&
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return;
block|}
name|subRule
operator|.
name|configurePalette
argument_list|(
operator|&
name|tabCopy
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
name|QFont
name|oldFont
init|=
name|p
operator|->
name|font
argument_list|()
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasFont
condition|)
name|p
operator|->
name|setFont
argument_list|(
name|subRule
operator|.
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|subRule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|tabCopy
operator|.
name|rect
operator|=
name|ce
operator|==
name|CE_TabBarTabShape
condition|?
name|subRule
operator|.
name|borderRect
argument_list|(
name|r
argument_list|)
else|:
name|subRule
operator|.
name|contentsRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|tabCopy
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|tabCopy
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subRule
operator|.
name|hasFont
condition|)
name|p
operator|->
name|setFont
argument_list|(
name|oldFont
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_TABBAR
case|case
name|CE_ColumnViewGrip
case|:
if|if
condition|(
name|rule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|CE_DockWidgetTitle
case|:
if|if
condition|(
specifier|const
name|QStyleOptionDockWidgetV2
modifier|*
name|dwOpt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidgetV2
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_DockWidgetTitle
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subRule
operator|.
name|hasDrawable
argument_list|()
operator|&&
operator|!
name|subRule
operator|.
name|hasPosition
argument_list|()
condition|)
break|break;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStyleOptionDockWidgetV2
name|dwCopy
argument_list|(
operator|*
name|dwOpt
argument_list|)
decl_stmt|;
name|dwCopy
operator|.
name|title
operator|=
name|QString
argument_list|()
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|dwCopy
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dwOpt
operator|->
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QRect
name|r
init|=
name|opt
operator|->
name|rect
decl_stmt|;
if|if
condition|(
name|dwOpt
operator|->
name|verticalTitleBar
condition|)
block|{
name|QSize
name|s
init|=
name|r
operator|.
name|size
argument_list|()
decl_stmt|;
name|s
operator|.
name|transpose
argument_list|()
expr_stmt|;
name|r
operator|.
name|setSize
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
operator|-
name|r
operator|.
name|left
argument_list|()
argument_list|,
operator|-
name|r
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Qt
operator|::
name|Alignment
name|alignment
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasPosition
argument_list|()
condition|)
name|alignment
operator|=
name|subRule
operator|.
name|position
argument_list|()
operator|->
name|textAlignment
expr_stmt|;
if|if
condition|(
name|alignment
operator|==
literal|0
condition|)
name|alignment
operator|=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
name|drawItemText
argument_list|(
name|p
argument_list|,
name|subRule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
argument_list|,
name|alignment
operator||
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|dwOpt
operator|->
name|palette
argument_list|,
name|dwOpt
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|dwOpt
operator|->
name|title
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
if|if
condition|(
name|dwOpt
operator|->
name|verticalTitleBar
condition|)
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
break|break;
case|case
name|CE_ShapedFrame
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|frm
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|QStyleOptionFrame
name|frmOpt
argument_list|(
operator|*
name|frm
argument_list|)
decl_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|frmOpt
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|frmOpt
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|frmOpt
operator|.
name|rect
argument_list|)
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
operator|&
name|frmOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
comment|// else, borders are already drawn in PE_Widget
block|}
return|return;
default|default:
break|break;
block|}
if|if
condition|(
name|pe1
operator|!=
name|PseudoElement_None
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|pe1
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|bg
operator|!=
literal|0
operator|||
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
comment|//We test subRule.bg directly because hasBackground() would return false for background:none.
comment|//But we still don't want the default drawning in that case (example for QScrollBar::add-page) (task 198926)
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fallback
condition|)
block|{
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|ce
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|pe2
operator|=
name|PseudoElement_None
expr_stmt|;
block|}
else|else
block|{
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pe2
operator|!=
name|PseudoElement_None
condition|)
block|{
name|QRenderRule
name|subSubRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|pe2
argument_list|)
decl_stmt|;
name|QRect
name|r
init|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|subRule
argument_list|,
name|subSubRule
argument_list|,
name|pe2
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
decl_stmt|;
name|subSubRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|baseStyle
argument_list|()
operator|->
name|drawControl
argument_list|(
name|ce
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawItemPixmap
name|void
name|QStyleSheetStyle
operator|::
name|drawItemPixmap
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|alignment
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
specifier|const
block|{
name|baseStyle
argument_list|()
operator|->
name|drawItemPixmap
argument_list|(
name|p
argument_list|,
name|rect
argument_list|,
name|alignment
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawItemText
name|void
name|QStyleSheetStyle
operator|::
name|drawItemText
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|alignment
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|,
name|bool
name|enabled
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QPalette
operator|::
name|ColorRole
name|textRole
parameter_list|)
specifier|const
block|{
name|baseStyle
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|alignment
argument_list|,
name|pal
argument_list|,
name|enabled
argument_list|,
name|text
argument_list|,
name|textRole
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPrimitive
name|void
name|QStyleSheetStyle
operator|::
name|drawPrimitive
parameter_list|(
name|PrimitiveElement
name|pe
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|RECURSION_GUARD
argument_list|(
argument|baseStyle()->drawPrimitive(pe, opt, p, w); return
argument_list|)
name|int
name|pseudoElement
init|=
name|PseudoElement_None
decl_stmt|;
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|opt
operator|->
name|rect
decl_stmt|;
switch|switch
condition|(
name|pe
condition|)
block|{
case|case
name|PE_FrameStatusBar
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
operator|->
name|parentWidget
argument_list|()
argument_list|,
name|opt
argument_list|,
name|PseudoElement_Item
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
block|}
case|case
name|PE_IndicatorArrowDown
case|:
name|pseudoElement
operator|=
name|PseudoElement_DownArrow
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowUp
case|:
name|pseudoElement
operator|=
name|PseudoElement_UpArrow
expr_stmt|;
break|break;
case|case
name|PE_IndicatorRadioButton
case|:
name|pseudoElement
operator|=
name|PseudoElement_ExclusiveIndicator
expr_stmt|;
break|break;
case|case
name|PE_IndicatorViewItemCheck
case|:
name|pseudoElement
operator|=
name|PseudoElement_ViewItemIndicator
expr_stmt|;
break|break;
case|case
name|PE_IndicatorCheckBox
case|:
name|pseudoElement
operator|=
name|PseudoElement_Indicator
expr_stmt|;
break|break;
case|case
name|PE_IndicatorHeaderArrow
case|:
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|hdr
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|pseudoElement
operator|=
name|hdr
operator|->
name|sortIndicator
operator|==
name|QStyleOptionHeader
operator|::
name|SortUp
condition|?
name|PseudoElement_HeaderViewUpArrow
else|:
name|PseudoElement_HeaderViewDownArrow
expr_stmt|;
block|}
break|break;
case|case
name|PE_PanelButtonTool
case|:
case|case
name|PE_PanelButtonCommand
case|:
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|&&
name|rule
operator|.
name|hasBackground
argument_list|()
operator|&&
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
comment|//the window style will draw the borders
name|ParentStyle
operator|::
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rule
operator|.
name|background
argument_list|()
operator|->
name|pixmap
operator|.
name|isNull
argument_list|()
operator|||
name|rule
operator|.
name|hasImage
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|rule
operator|.
name|boxRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|QRenderRule
operator|::
name|Margin
argument_list|)
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|rule
operator|.
name|boxRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|QRenderRule
operator|::
name|Margin
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|PE_IndicatorButtonDropDown
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ToolButtonMenu
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subRule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawBorder
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
block|}
case|case
name|PE_FrameDefaultButton
case|:
if|if
condition|(
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
if|if
condition|(
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|)
break|break;
name|QWindowsStyle
operator|::
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
return|return;
case|case
name|PE_FrameWindow
case|:
case|case
name|PE_FrameDockWidget
case|:
case|case
name|PE_Frame
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|frm
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|QStyleOptionFrame
name|frmOpt
argument_list|(
operator|*
name|frm
argument_list|)
decl_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|frmOpt
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|frmOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rule
operator|.
name|drawBorder
argument_list|(
name|p
argument_list|,
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
case|case
name|PE_PanelLineEdit
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|frm
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
if|if
condition|(
name|w
operator|&&
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|w
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
block|{
name|QRenderRule
name|spinboxRule
init|=
name|renderRule
argument_list|(
name|w
operator|->
name|parentWidget
argument_list|()
argument_list|,
name|opt
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|spinboxRule
operator|.
name|hasNativeBorder
argument_list|()
operator|||
operator|!
name|spinboxRule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|)
return|return;
name|rule
operator|=
name|spinboxRule
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|QStyleOptionFrame
name|frmOpt
argument_list|(
operator|*
name|frm
argument_list|)
decl_stmt|;
name|rule
operator|.
name|configurePalette
argument_list|(
operator|&
name|frmOpt
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|frmOpt
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|frmOpt
operator|.
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawBackgroundImage
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|frmOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rule
operator|.
name|drawBackground
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|frmOpt
operator|.
name|lineWidth
operator|>
literal|0
condition|)
name|baseStyle
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameLineEdit
argument_list|,
operator|&
name|frmOpt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|rule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
case|case
name|PE_Widget
case|:
if|if
condition|(
name|w
operator|&&
operator|!
name|rule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|container
init|=
name|containerWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|styleSheetCaches
operator|->
name|autoFillDisabledWidgets
operator|.
name|contains
argument_list|(
name|container
argument_list|)
operator|&&
operator|(
name|container
operator|==
name|w
operator|||
operator|!
name|renderRule
argument_list|(
name|container
argument_list|,
name|opt
argument_list|)
operator|.
name|hasBackground
argument_list|()
operator|)
condition|)
block|{
comment|//we do not have a background, but we disabled the autofillbackground anyway. so fill the background now.
comment|// (this may happen if we have rules like :focus)
name|p
operator|->
name|fillRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|w
operator|->
name|backgroundRole
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_SCROLLAREA
if|if
condition|(
specifier|const
name|QAbstractScrollArea
modifier|*
name|sa
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
specifier|const
name|QAbstractScrollAreaPrivate
modifier|*
name|sap
init|=
name|sa
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|rule
operator|.
name|drawBackground
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|sap
operator|->
name|contentsOffset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasBorder
argument_list|()
condition|)
block|{
name|QRect
name|brect
init|=
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollView_FrameOnlyAroundContents
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
condition|)
block|{
name|QRect
name|r
init|=
name|brect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sa
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|?
operator|-
name|sa
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|width
argument_list|()
else|:
literal|0
argument_list|,
name|sa
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|?
operator|-
name|sa
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|height
argument_list|()
else|:
literal|0
argument_list|)
decl_stmt|;
name|brect
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|brect
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|rule
operator|.
name|drawBorder
argument_list|(
name|p
argument_list|,
name|brect
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
endif|#
directive|endif
comment|//fall tghought
case|case
name|PE_PanelMenu
case|:
case|case
name|PE_PanelStatusBar
case|:
if|if
condition|(
name|rule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|PE_FrameMenu
case|:
if|if
condition|(
name|rule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
comment|// Drawn by PE_PanelMenu
return|return;
block|}
break|break;
case|case
name|PE_PanelMenuBar
case|:
if|if
condition|(
name|rule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
comment|// Drawn by PE_Widget
return|return;
block|}
break|break;
case|case
name|PE_IndicatorToolBarSeparator
case|:
case|case
name|PE_IndicatorToolBarHandle
case|:
block|{
name|PseudoElement
name|ps
init|=
name|pe
operator|==
name|PE_IndicatorToolBarHandle
condition|?
name|PseudoElement_ToolBarHandle
else|:
name|PseudoElement_ToolBarSeparator
decl_stmt|;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|ps
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|PE_IndicatorMenuCheckMark
case|:
name|pseudoElement
operator|=
name|PseudoElement_MenuCheckMark
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowLeft
case|:
name|pseudoElement
operator|=
name|PseudoElement_LeftArrow
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowRight
case|:
name|pseudoElement
operator|=
name|PseudoElement_RightArrow
expr_stmt|;
break|break;
case|case
name|PE_IndicatorColumnViewArrow
case|:
if|if
condition|(
specifier|const
name|QStyleOptionViewItem
modifier|*
name|viewOpt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|bool
name|reverse
init|=
operator|(
name|viewOpt
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
decl_stmt|;
name|pseudoElement
operator|=
name|reverse
condition|?
name|PseudoElement_LeftArrow
else|:
name|PseudoElement_RightArrow
expr_stmt|;
block|}
else|else
block|{
name|pseudoElement
operator|=
name|PseudoElement_RightArrow
expr_stmt|;
block|}
break|break;
case|case
name|PE_IndicatorBranch
case|:
if|if
condition|(
specifier|const
name|QStyleOptionViewItem
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TreeViewBranch
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
operator|)
operator|&&
name|vopt
operator|->
name|showDecorationSelected
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|vopt
operator|->
name|rect
argument_list|,
name|vopt
operator|->
name|palette
operator|.
name|highlight
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|vopt
operator|->
name|features
operator|&
name|QStyleOptionViewItem
operator|::
name|Alternate
condition|)
name|p
operator|->
name|fillRect
argument_list|(
name|vopt
operator|->
name|rect
argument_list|,
name|vopt
operator|->
name|palette
operator|.
name|alternateBase
argument_list|()
argument_list|)
expr_stmt|;
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baseStyle
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|vopt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
case|case
name|PE_PanelTipLabel
case|:
if|if
condition|(
operator|!
name|rule
operator|.
name|hasDrawable
argument_list|()
condition|)
break|break;
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|frmOpt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawBackground
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|QStyleOptionFrame
name|optCopy
argument_list|(
operator|*
name|frmOpt
argument_list|)
decl_stmt|;
name|optCopy
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|optCopy
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
comment|// oh dear
name|baseStyle
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|optCopy
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
case|case
name|PE_FrameGroupBox
case|:
if|if
condition|(
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
break|break;
name|rule
operator|.
name|drawBorder
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return;
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
case|case
name|PE_FrameTabWidget
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTabWidgetFrame
modifier|*
name|frm
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabWidgetFrame
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TabWidgetPane
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|subRule
operator|.
name|drawBackground
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|QStyleOptionTabWidgetFrameV2
name|frmCopy
argument_list|(
operator|*
name|frm
argument_list|)
decl_stmt|;
name|subRule
operator|.
name|configurePalette
argument_list|(
operator|&
name|frmCopy
operator|.
name|palette
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
name|baseStyle
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|frmCopy
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_TABWIDGET
case|case
name|PE_IndicatorProgressChunk
case|:
name|pseudoElement
operator|=
name|PseudoElement_ProgressBarChunk
expr_stmt|;
break|break;
case|case
name|PE_IndicatorTabTear
case|:
name|pseudoElement
operator|=
name|PseudoElement_TabBarTear
expr_stmt|;
break|break;
case|case
name|PE_FrameFocusRect
case|:
if|if
condition|(
operator|!
name|rule
operator|.
name|hasNativeOutline
argument_list|()
condition|)
block|{
name|rule
operator|.
name|drawOutline
argument_list|(
name|p
argument_list|,
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|PE_IndicatorDockWidgetResizeHandle
case|:
name|pseudoElement
operator|=
name|PseudoElement_DockWidgetSeparator
expr_stmt|;
break|break;
case|case
name|PE_PanelItemViewItem
case|:
name|pseudoElement
operator|=
name|PseudoElement_ViewItem
expr_stmt|;
break|break;
case|case
name|PE_PanelScrollAreaCorner
case|:
name|pseudoElement
operator|=
name|PseudoElement_ScrollAreaCorner
expr_stmt|;
break|break;
case|case
name|PE_IndicatorSpinDown
case|:
case|case
name|PE_IndicatorSpinMinus
case|:
name|pseudoElement
operator|=
name|PseudoElement_SpinBoxDownArrow
expr_stmt|;
break|break;
case|case
name|PE_IndicatorSpinUp
case|:
case|case
name|PE_IndicatorSpinPlus
case|:
name|pseudoElement
operator|=
name|PseudoElement_SpinBoxUpArrow
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|PE_IndicatorTabClose
case|:
if|if
condition|(
name|w
condition|)
name|w
operator|=
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
comment|//match on the QTabBar instead of the CloseButton
name|pseudoElement
operator|=
name|PseudoElement_TabBarTabCloseButton
expr_stmt|;
endif|#
directive|endif
default|default:
break|break;
block|}
if|if
condition|(
name|pseudoElement
operator|!=
name|PseudoElement_None
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|pseudoElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|subRule
operator|.
name|drawRule
argument_list|(
name|p
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baseStyle
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|baseStyle
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
name|opt
argument_list|,
name|p
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|generatedIconPixmap
name|QPixmap
name|QStyleSheetStyle
operator|::
name|generatedIconPixmap
parameter_list|(
name|QIcon
operator|::
name|Mode
name|iconMode
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|)
specifier|const
block|{
return|return
name|baseStyle
argument_list|()
operator|->
name|generatedIconPixmap
argument_list|(
name|iconMode
argument_list|,
name|pixmap
argument_list|,
name|option
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hitTestComplexControl
name|QStyle
operator|::
name|SubControl
name|QStyleSheetStyle
operator|::
name|hitTestComplexControl
parameter_list|(
name|ComplexControl
name|cc
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|opt
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|RECURSION_GUARD
argument_list|(
argument|return baseStyle()->hitTestComplexControl(cc, opt, pt, w)
argument_list|)
switch|switch
condition|(
name|cc
condition|)
block|{
case|case
name|CC_TitleBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTitleBar
modifier|*
name|tb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTitleBar
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TitleBar
argument_list|)
decl_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasDrawable
argument_list|()
operator|||
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
name|rule
operator|.
name|hasBorder
argument_list|()
condition|)
block|{
name|QHash
argument_list|<
name|QStyle
operator|::
name|SubControl
argument_list|,
name|QRect
argument_list|>
name|layout
init|=
name|titleBarLayout
argument_list|(
name|w
argument_list|,
name|tb
argument_list|)
decl_stmt|;
name|QRect
name|r
decl_stmt|;
name|QStyle
operator|::
name|SubControl
name|sc
init|=
name|QStyle
operator|::
name|SC_None
decl_stmt|;
name|uint
name|ctrl
init|=
name|SC_TitleBarSysMenu
decl_stmt|;
while|while
condition|(
name|ctrl
operator|<=
name|SC_TitleBarLabel
condition|)
block|{
name|r
operator|=
name|layout
index|[
name|QStyle
operator|::
name|SubControl
argument_list|(
name|ctrl
argument_list|)
index|]
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isValid
argument_list|()
operator|&&
name|r
operator|.
name|contains
argument_list|(
name|pt
argument_list|)
condition|)
block|{
name|sc
operator|=
name|QStyle
operator|::
name|SubControl
argument_list|(
name|ctrl
argument_list|)
expr_stmt|;
break|break;
block|}
name|ctrl
operator|<<=
literal|1
expr_stmt|;
block|}
return|return
name|sc
return|;
block|}
block|}
break|break;
case|case
name|CC_MdiControls
case|:
if|if
condition|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_MdiCloseButton
argument_list|)
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_MdiNormalButton
argument_list|)
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_MdiMinButton
argument_list|)
condition|)
return|return
name|QWindowsStyle
operator|::
name|hitTestComplexControl
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|pt
argument_list|,
name|w
argument_list|)
return|;
break|break;
case|case
name|CC_ScrollBar
case|:
block|{
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rule
operator|.
name|hasDrawable
argument_list|()
operator|&&
operator|!
name|rule
operator|.
name|hasBox
argument_list|()
condition|)
break|break;
block|}
comment|// intentionally falls through
case|case
name|CC_SpinBox
case|:
case|case
name|CC_GroupBox
case|:
case|case
name|CC_ComboBox
case|:
case|case
name|CC_Slider
case|:
case|case
name|CC_ToolButton
case|:
return|return
name|QWindowsStyle
operator|::
name|hitTestComplexControl
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|pt
argument_list|,
name|w
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|baseStyle
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|pt
argument_list|,
name|w
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|itemPixmapRect
name|QRect
name|QStyleSheetStyle
operator|::
name|itemPixmapRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|alignment
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
specifier|const
block|{
return|return
name|baseStyle
argument_list|()
operator|->
name|itemPixmapRect
argument_list|(
name|rect
argument_list|,
name|alignment
argument_list|,
name|pixmap
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|itemTextRect
name|QRect
name|QStyleSheetStyle
operator|::
name|itemTextRect
parameter_list|(
specifier|const
name|QFontMetrics
modifier|&
name|metrics
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|alignment
parameter_list|,
name|bool
name|enabled
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
specifier|const
block|{
return|return
name|baseStyle
argument_list|()
operator|->
name|itemTextRect
argument_list|(
name|metrics
argument_list|,
name|rect
argument_list|,
name|alignment
argument_list|,
name|enabled
argument_list|,
name|text
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|pixelMetric
name|int
name|QStyleSheetStyle
operator|::
name|pixelMetric
parameter_list|(
name|PixelMetric
name|m
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|RECURSION_GUARD
argument_list|(
argument|return baseStyle()->pixelMetric(m, opt, w)
argument_list|)
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|)
decl_stmt|;
name|QRenderRule
name|subRule
decl_stmt|;
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|PM_MenuButtonIndicator
case|:
ifndef|#
directive|ifndef
name|QT_NO_TOOLBUTTON
comment|// QToolButton adds this directly to the width
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QToolButton
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|&&
operator|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
operator|)
condition|)
return|return
literal|0
return|;
endif|#
directive|endif
name|subRule
operator|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_PushButtonMenuIndicator
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasContentsSize
argument_list|()
condition|)
return|return
name|subRule
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
return|;
break|break;
case|case
name|PM_ButtonShiftHorizontal
case|:
case|case
name|PM_ButtonShiftVertical
case|:
case|case
name|PM_ButtonMargin
case|:
case|case
name|PM_ButtonDefaultIndicator
case|:
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
condition|)
return|return
literal|0
return|;
break|break;
case|case
name|PM_DefaultFrameWidth
case|:
if|if
condition|(
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
return|return
name|rule
operator|.
name|border
argument_list|()
operator|->
name|borders
index|[
name|LeftEdge
index|]
return|;
break|break;
case|case
name|PM_ExclusiveIndicatorWidth
case|:
case|case
name|PM_IndicatorWidth
case|:
case|case
name|PM_ExclusiveIndicatorHeight
case|:
case|case
name|PM_IndicatorHeight
case|:
name|subRule
operator|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_Indicator
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasContentsSize
argument_list|()
condition|)
block|{
return|return
operator|(
name|m
operator|==
name|PM_ExclusiveIndicatorWidth
operator|)
operator|||
operator|(
name|m
operator|==
name|PM_IndicatorWidth
operator|)
condition|?
name|subRule
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
else|:
name|subRule
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
return|;
block|}
break|break;
case|case
name|PM_DockWidgetFrameWidth
case|:
case|case
name|PM_ToolTipLabelFrameWidth
case|:
comment|// border + margin + padding (support only one width)
if|if
condition|(
operator|!
name|rule
operator|.
name|hasDrawable
argument_list|()
condition|)
break|break;
return|return
operator|(
name|rule
operator|.
name|border
argument_list|()
condition|?
name|rule
operator|.
name|border
argument_list|()
operator|->
name|borders
index|[
name|LeftEdge
index|]
else|:
literal|0
operator|)
operator|+
operator|(
name|rule
operator|.
name|hasBox
argument_list|()
condition|?
name|rule
operator|.
name|box
argument_list|()
operator|->
name|margins
index|[
name|LeftEdge
index|]
operator|+
name|rule
operator|.
name|box
argument_list|()
operator|->
name|paddings
index|[
name|LeftEdge
index|]
else|:
literal|0
operator|)
return|;
case|case
name|PM_ToolBarFrameWidth
case|:
if|if
condition|(
name|rule
operator|.
name|hasBorder
argument_list|()
operator|||
name|rule
operator|.
name|hasBox
argument_list|()
condition|)
return|return
operator|(
name|rule
operator|.
name|border
argument_list|()
condition|?
name|rule
operator|.
name|border
argument_list|()
operator|->
name|borders
index|[
name|LeftEdge
index|]
else|:
literal|0
operator|)
operator|+
operator|(
name|rule
operator|.
name|hasBox
argument_list|()
condition|?
name|rule
operator|.
name|box
argument_list|()
operator|->
name|paddings
index|[
name|LeftEdge
index|]
else|:
literal|0
operator|)
return|;
break|break;
case|case
name|PM_MenuPanelWidth
case|:
case|case
name|PM_MenuBarPanelWidth
case|:
if|if
condition|(
name|rule
operator|.
name|hasBorder
argument_list|()
operator|||
name|rule
operator|.
name|hasBox
argument_list|()
condition|)
return|return
operator|(
name|rule
operator|.
name|border
argument_list|()
condition|?
name|rule
operator|.
name|border
argument_list|()
operator|->
name|borders
index|[
name|LeftEdge
index|]
else|:
literal|0
operator|)
operator|+
operator|(
name|rule
operator|.
name|hasBox
argument_list|()
condition|?
name|rule
operator|.
name|box
argument_list|()
operator|->
name|margins
index|[
name|LeftEdge
index|]
else|:
literal|0
operator|)
return|;
break|break;
case|case
name|PM_MenuHMargin
case|:
case|case
name|PM_MenuBarHMargin
case|:
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
condition|)
return|return
name|rule
operator|.
name|box
argument_list|()
operator|->
name|paddings
index|[
name|LeftEdge
index|]
return|;
break|break;
case|case
name|PM_MenuVMargin
case|:
case|case
name|PM_MenuBarVMargin
case|:
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
condition|)
return|return
name|rule
operator|.
name|box
argument_list|()
operator|->
name|paddings
index|[
name|TopEdge
index|]
return|;
break|break;
case|case
name|PM_DockWidgetTitleBarButtonMargin
case|:
case|case
name|PM_ToolBarItemMargin
case|:
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
condition|)
return|return
name|rule
operator|.
name|box
argument_list|()
operator|->
name|margins
index|[
name|TopEdge
index|]
return|;
break|break;
case|case
name|PM_ToolBarItemSpacing
case|:
case|case
name|PM_MenuBarItemSpacing
case|:
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|&&
name|rule
operator|.
name|box
argument_list|()
operator|->
name|spacing
operator|!=
operator|-
literal|1
condition|)
return|return
name|rule
operator|.
name|box
argument_list|()
operator|->
name|spacing
return|;
break|break;
case|case
name|PM_MenuTearoffHeight
case|:
case|case
name|PM_MenuScrollerHeight
case|:
block|{
name|PseudoElement
name|ps
init|=
name|m
operator|==
name|PM_MenuTearoffHeight
condition|?
name|PseudoElement_MenuTearoff
else|:
name|PseudoElement_MenuScroller
decl_stmt|;
name|subRule
operator|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|ps
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasContentsSize
argument_list|()
condition|)
return|return
name|subRule
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
return|;
break|break;
block|}
case|case
name|PM_ToolBarExtensionExtent
case|:
break|break;
case|case
name|PM_SplitterWidth
case|:
case|case
name|PM_ToolBarSeparatorExtent
case|:
case|case
name|PM_ToolBarHandleExtent
case|:
block|{
name|PseudoElement
name|ps
decl_stmt|;
if|if
condition|(
name|m
operator|==
name|PM_ToolBarHandleExtent
condition|)
name|ps
operator|=
name|PseudoElement_ToolBarHandle
expr_stmt|;
elseif|else
if|if
condition|(
name|m
operator|==
name|PM_SplitterWidth
condition|)
name|ps
operator|=
name|PseudoElement_SplitterHandle
expr_stmt|;
else|else
name|ps
operator|=
name|PseudoElement_ToolBarSeparator
expr_stmt|;
name|subRule
operator|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|ps
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasContentsSize
argument_list|()
condition|)
block|{
name|QSize
name|sz
init|=
name|subRule
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
operator|(
name|opt
operator|&&
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Horizontal
operator|)
condition|?
name|sz
operator|.
name|width
argument_list|()
else|:
name|sz
operator|.
name|height
argument_list|()
return|;
block|}
break|break;
block|}
case|case
name|PM_RadioButtonLabelSpacing
case|:
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|&&
name|rule
operator|.
name|box
argument_list|()
operator|->
name|spacing
operator|!=
operator|-
literal|1
condition|)
return|return
name|rule
operator|.
name|box
argument_list|()
operator|->
name|spacing
return|;
break|break;
case|case
name|PM_CheckBoxLabelSpacing
case|:
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QCheckBox
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|&&
name|rule
operator|.
name|box
argument_list|()
operator|->
name|spacing
operator|!=
operator|-
literal|1
condition|)
return|return
name|rule
operator|.
name|box
argument_list|()
operator|->
name|spacing
return|;
block|}
comment|// assume group box
name|subRule
operator|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_GroupBoxTitle
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasBox
argument_list|()
operator|&&
name|subRule
operator|.
name|box
argument_list|()
operator|->
name|spacing
operator|!=
operator|-
literal|1
condition|)
return|return
name|subRule
operator|.
name|box
argument_list|()
operator|->
name|spacing
return|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
case|case
name|PM_ScrollBarExtent
case|:
if|if
condition|(
name|rule
operator|.
name|hasContentsSize
argument_list|()
condition|)
block|{
name|QSize
name|sz
init|=
name|rule
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|sb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
return|return
name|sb
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|sz
operator|.
name|height
argument_list|()
else|:
name|sz
operator|.
name|width
argument_list|()
return|;
return|return
name|sz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|?
name|sz
operator|.
name|height
argument_list|()
else|:
name|sz
operator|.
name|width
argument_list|()
return|;
block|}
break|break;
case|case
name|PM_ScrollBarSliderMin
case|:
if|if
condition|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_ScrollBarSlider
argument_list|)
condition|)
block|{
name|subRule
operator|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ScrollBarSlider
argument_list|)
expr_stmt|;
name|QSize
name|msz
init|=
name|subRule
operator|.
name|minimumSize
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|sb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
return|return
name|sb
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|msz
operator|.
name|width
argument_list|()
else|:
name|msz
operator|.
name|height
argument_list|()
return|;
return|return
name|msz
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|?
name|msz
operator|.
name|height
argument_list|()
else|:
name|msz
operator|.
name|width
argument_list|()
return|;
block|}
break|break;
case|case
name|PM_ScrollView_ScrollBarSpacing
case|:
if|if
condition|(
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
operator|||
name|rule
operator|.
name|hasBox
argument_list|()
condition|)
return|return
literal|0
return|;
break|break;
endif|#
directive|endif
comment|// QT_NO_SCROLLBAR
case|case
name|PM_ProgressBarChunkWidth
case|:
name|subRule
operator|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ProgressBarChunk
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasContentsSize
argument_list|()
condition|)
block|{
name|QSize
name|sz
init|=
name|subRule
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
operator|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Horizontal
operator|)
condition|?
name|sz
operator|.
name|width
argument_list|()
else|:
name|sz
operator|.
name|height
argument_list|()
return|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
case|case
name|PM_TabBarTabHSpace
case|:
case|case
name|PM_TabBarTabVSpace
case|:
name|subRule
operator|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TabBarTab
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasBox
argument_list|()
operator|||
name|subRule
operator|.
name|hasBorder
argument_list|()
condition|)
return|return
literal|0
return|;
break|break;
case|case
name|PM_TabBarScrollButtonWidth
case|:
block|{
name|subRule
operator|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TabBarScroller
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasContentsSize
argument_list|()
condition|)
block|{
name|QSize
name|sz
init|=
name|subRule
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|sz
operator|.
name|width
argument_list|()
operator|!=
operator|-
literal|1
condition|?
name|sz
operator|.
name|width
argument_list|()
else|:
name|sz
operator|.
name|height
argument_list|()
return|;
block|}
block|}
break|break;
case|case
name|PM_TabBarTabShiftHorizontal
case|:
case|case
name|PM_TabBarTabShiftVertical
case|:
name|subRule
operator|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TabBarTab
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasBox
argument_list|()
condition|)
return|return
literal|0
return|;
break|break;
case|case
name|PM_TabBarBaseOverlap
case|:
block|{
specifier|const
name|QWidget
modifier|*
name|tabWidget
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tabWidget
operator|&&
name|w
condition|)
name|tabWidget
operator|=
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasStyleRule
argument_list|(
name|tabWidget
argument_list|,
name|PseudoElement_TabWidgetPane
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_TABWIDGET
case|case
name|PM_SliderThickness
case|:
comment|// horizontal slider's height (sizeHint)
case|case
name|PM_SliderLength
case|:
comment|// minimum length of slider
if|if
condition|(
name|rule
operator|.
name|hasContentsSize
argument_list|()
condition|)
block|{
name|bool
name|horizontal
init|=
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Horizontal
decl_stmt|;
if|if
condition|(
name|m
operator|==
name|PM_SliderThickness
condition|)
block|{
name|QSize
name|sz
init|=
name|rule
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|horizontal
condition|?
name|sz
operator|.
name|height
argument_list|()
else|:
name|sz
operator|.
name|width
argument_list|()
return|;
block|}
else|else
block|{
name|QSize
name|msz
init|=
name|rule
operator|.
name|minimumContentsSize
argument_list|()
decl_stmt|;
return|return
name|horizontal
condition|?
name|msz
operator|.
name|width
argument_list|()
else|:
name|msz
operator|.
name|height
argument_list|()
return|;
block|}
block|}
break|break;
case|case
name|PM_SliderControlThickness
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SliderHandle
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subRule
operator|.
name|hasContentsSize
argument_list|()
condition|)
break|break;
name|QSize
name|size
init|=
name|subRule
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
operator|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Horizontal
operator|)
condition|?
name|size
operator|.
name|height
argument_list|()
else|:
name|size
operator|.
name|width
argument_list|()
return|;
block|}
case|case
name|PM_ToolBarIconSize
case|:
case|case
name|PM_ListViewIconSize
case|:
case|case
name|PM_IconViewIconSize
case|:
case|case
name|PM_TabBarIconSize
case|:
case|case
name|PM_MessageBoxIconSize
case|:
case|case
name|PM_ButtonIconSize
case|:
case|case
name|PM_SmallIconSize
case|:
if|if
condition|(
name|rule
operator|.
name|hasStyleHint
argument_list|(
name|QLatin1String
argument_list|(
literal|"icon-size"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|rule
operator|.
name|styleHint
argument_list|(
name|QLatin1String
argument_list|(
literal|"icon-size"
argument_list|)
argument_list|)
operator|.
name|toSize
argument_list|()
operator|.
name|width
argument_list|()
return|;
block|}
break|break;
case|case
name|PM_DockWidgetTitleMargin
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_DockWidgetTitle
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subRule
operator|.
name|hasBox
argument_list|()
condition|)
break|break;
return|return
operator|(
name|subRule
operator|.
name|border
argument_list|()
condition|?
name|subRule
operator|.
name|border
argument_list|()
operator|->
name|borders
index|[
name|TopEdge
index|]
else|:
literal|0
operator|)
operator|+
operator|(
name|subRule
operator|.
name|hasBox
argument_list|()
condition|?
name|subRule
operator|.
name|box
argument_list|()
operator|->
name|margins
index|[
name|TopEdge
index|]
operator|+
name|subRule
operator|.
name|box
argument_list|()
operator|->
name|paddings
index|[
name|TopEdge
index|]
else|:
literal|0
operator|)
return|;
block|}
case|case
name|PM_DockWidgetSeparatorExtent
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_DockWidgetSeparator
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subRule
operator|.
name|hasContentsSize
argument_list|()
condition|)
break|break;
name|QSize
name|sz
init|=
name|subRule
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|qMax
argument_list|(
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
case|case
name|PM_TitleBarHeight
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TitleBar
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasContentsSize
argument_list|()
condition|)
return|return
name|subRule
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
return|;
elseif|else
if|if
condition|(
name|subRule
operator|.
name|hasBox
argument_list|()
operator|||
name|subRule
operator|.
name|hasBorder
argument_list|()
condition|)
block|{
name|QFontMetrics
name|fm
init|=
name|opt
condition|?
name|opt
operator|->
name|fontMetrics
else|:
name|w
operator|->
name|fontMetrics
argument_list|()
decl_stmt|;
return|return
name|subRule
operator|.
name|size
argument_list|(
name|QSize
argument_list|(
literal|0
argument_list|,
name|fm
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
operator|.
name|height
argument_list|()
return|;
block|}
break|break;
block|}
case|case
name|PM_MdiSubWindowFrameWidth
case|:
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
name|rule
operator|.
name|hasBorder
argument_list|()
condition|)
block|{
return|return
operator|(
name|rule
operator|.
name|border
argument_list|()
condition|?
name|rule
operator|.
name|border
argument_list|()
operator|->
name|borders
index|[
name|LeftEdge
index|]
else|:
literal|0
operator|)
operator|+
operator|(
name|rule
operator|.
name|hasBox
argument_list|()
condition|?
name|rule
operator|.
name|box
argument_list|()
operator|->
name|paddings
index|[
name|LeftEdge
index|]
operator|+
name|rule
operator|.
name|box
argument_list|()
operator|->
name|margins
index|[
name|LeftEdge
index|]
else|:
literal|0
operator|)
return|;
block|}
break|break;
case|case
name|PM_MdiSubWindowMinimizedWidth
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_None
argument_list|,
name|PseudoClass_Minimized
argument_list|)
decl_stmt|;
name|int
name|width
init|=
name|subRule
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|!=
operator|-
literal|1
condition|)
return|return
name|width
return|;
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|baseStyle
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|m
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sizeFromContents
name|QSize
name|QStyleSheetStyle
operator|::
name|sizeFromContents
parameter_list|(
name|ContentsType
name|ct
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QSize
modifier|&
name|csz
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|RECURSION_GUARD
argument_list|(
argument|return baseStyle()->sizeFromContents(ct, opt, csz, w)
argument_list|)
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|)
decl_stmt|;
name|QSize
name|sz
init|=
name|rule
operator|.
name|adjustSize
argument_list|(
name|csz
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ct
condition|)
block|{
case|case
name|CT_SpinBox
case|:
comment|// ### hopelessly broken QAbstractSpinBox (part 1)
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinbox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
comment|// Add some space for the up/down buttons
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SpinBoxUpButton
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
block|{
name|QRect
name|r
init|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|rule
argument_list|,
name|subRule
argument_list|,
name|PseudoElement_SpinBoxUpButton
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
decl_stmt|;
name|sz
operator|+=
name|QSize
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSize
name|defaultUpSize
init|=
name|defaultSize
argument_list|(
name|w
argument_list|,
name|subRule
operator|.
name|size
argument_list|()
argument_list|,
name|spinbox
operator|->
name|rect
argument_list|,
name|PseudoElement_SpinBoxUpButton
argument_list|)
decl_stmt|;
name|sz
operator|+=
name|QSize
argument_list|(
name|defaultUpSize
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
name|rule
operator|.
name|hasBorder
argument_list|()
operator|||
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
name|sz
operator|=
name|rule
operator|.
name|boxSize
argument_list|(
name|sz
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
block|}
break|break;
case|case
name|CT_ToolButton
case|:
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
operator|||
operator|!
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|)
name|sz
operator|+=
name|QSize
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// ### broken QToolButton
comment|//fall thought
case|case
name|CT_ComboBox
case|:
case|case
name|CT_PushButton
case|:
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
if|if
condition|(
name|ct
operator|==
name|CT_ComboBox
condition|)
block|{
comment|//add some space for the drop down.
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ComboBoxDropDown
argument_list|)
decl_stmt|;
name|QRect
name|comboRect
init|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|rule
argument_list|,
name|subRule
argument_list|,
name|PseudoElement_ComboBoxDropDown
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
decl_stmt|;
comment|//+2 because there is hardcoded margins in QCommonStyle::drawControl(CE_ComboBoxLabel)
name|sz
operator|+=
name|QSize
argument_list|(
name|comboRect
operator|.
name|width
argument_list|()
operator|+
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|rule
operator|.
name|boxSize
argument_list|(
name|sz
argument_list|)
return|;
block|}
name|sz
operator|=
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|?
name|baseStyle
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|sz
argument_list|,
name|w
argument_list|)
else|:
name|QWindowsStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|sz
argument_list|,
name|w
argument_list|)
expr_stmt|;
return|return
name|rule
operator|.
name|boxSize
argument_list|(
name|sz
argument_list|,
name|Margin
argument_list|)
return|;
case|case
name|CT_HeaderSection
case|:
block|{
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|hdr
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_HeaderViewSection
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasGeometry
argument_list|()
operator|||
name|subRule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|subRule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|sz
operator|=
name|subRule
operator|.
name|adjustSize
argument_list|(
name|csz
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|subRule
operator|.
name|hasGeometry
argument_list|()
condition|)
block|{
name|QSize
name|nativeContentsSize
decl_stmt|;
name|bool
name|nullIcon
init|=
name|hdr
operator|->
name|icon
operator|.
name|isNull
argument_list|()
decl_stmt|;
name|int
name|iconSize
init|=
name|nullIcon
condition|?
literal|0
else|:
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SmallIconSize
argument_list|,
name|hdr
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|QSize
name|txt
init|=
name|hdr
operator|->
name|fontMetrics
operator|.
name|size
argument_list|(
literal|0
argument_list|,
name|hdr
operator|->
name|text
argument_list|)
decl_stmt|;
name|nativeContentsSize
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|iconSize
argument_list|,
name|txt
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nativeContentsSize
operator|.
name|setWidth
argument_list|(
name|iconSize
operator|+
name|txt
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|sz
operator|=
name|sz
operator|.
name|expandedTo
argument_list|(
name|nativeContentsSize
argument_list|)
expr_stmt|;
block|}
return|return
name|subRule
operator|.
name|size
argument_list|(
name|sz
argument_list|)
return|;
block|}
return|return
name|subRule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|?
name|baseStyle
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|sz
argument_list|,
name|w
argument_list|)
else|:
name|QWindowsStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|sz
argument_list|,
name|w
argument_list|)
return|;
block|}
block|}
break|break;
case|case
name|CT_GroupBox
case|:
case|case
name|CT_LineEdit
case|:
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
if|if
condition|(
name|qobject_cast
argument_list|<
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|w
condition|?
name|w
operator|->
name|parentWidget
argument_list|()
else|:
literal|0
argument_list|)
condition|)
return|return
name|csz
return|;
comment|// we only care about the size hint of the line edit
endif|#
directive|endif
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
return|return
name|rule
operator|.
name|boxSize
argument_list|(
name|sz
argument_list|)
return|;
block|}
break|break;
case|case
name|CT_CheckBox
case|:
case|case
name|CT_RadioButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
name|rule
operator|.
name|hasBorder
argument_list|()
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_Indicator
argument_list|)
condition|)
block|{
name|bool
name|isRadio
init|=
operator|(
name|ct
operator|==
name|CT_RadioButton
operator|)
decl_stmt|;
name|int
name|iw
init|=
name|pixelMetric
argument_list|(
name|isRadio
condition|?
name|PM_ExclusiveIndicatorWidth
else|:
name|PM_IndicatorWidth
argument_list|,
name|btn
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|int
name|ih
init|=
name|pixelMetric
argument_list|(
name|isRadio
condition|?
name|PM_ExclusiveIndicatorHeight
else|:
name|PM_IndicatorHeight
argument_list|,
name|btn
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|int
name|spacing
init|=
name|pixelMetric
argument_list|(
name|isRadio
condition|?
name|PM_RadioButtonLabelSpacing
else|:
name|PM_CheckBoxLabelSpacing
argument_list|,
name|btn
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|sz
operator|.
name|setWidth
argument_list|(
name|sz
operator|.
name|width
argument_list|()
operator|+
name|iw
operator|+
name|spacing
argument_list|)
expr_stmt|;
name|sz
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|sz
operator|.
name|height
argument_list|()
argument_list|,
name|ih
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rule
operator|.
name|boxSize
argument_list|(
name|sz
argument_list|)
return|;
block|}
block|}
break|break;
case|case
name|CT_Menu
case|:
case|case
name|CT_MenuBar
case|:
comment|// already has everything!
case|case
name|CT_ScrollBar
case|:
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
name|rule
operator|.
name|hasBorder
argument_list|()
condition|)
return|return
name|sz
return|;
break|break;
case|case
name|CT_MenuItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|mi
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|PseudoElement
name|pe
init|=
operator|(
name|mi
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|Separator
operator|)
condition|?
name|PseudoElement_MenuSeparator
else|:
name|PseudoElement_Item
decl_stmt|;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|pe
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|pe
operator|==
name|PseudoElement_MenuSeparator
operator|)
operator|&&
name|subRule
operator|.
name|hasContentsSize
argument_list|()
condition|)
block|{
return|return
name|QSize
argument_list|(
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|subRule
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|pe
operator|==
name|PseudoElement_Item
operator|)
operator|&&
operator|(
name|subRule
operator|.
name|hasBox
argument_list|()
operator|||
name|subRule
operator|.
name|hasBorder
argument_list|()
operator|)
condition|)
block|{
name|int
name|width
init|=
name|csz
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|mi
operator|->
name|text
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
condition|)
name|width
operator|+=
literal|12
expr_stmt|;
comment|//as in QCommonStyle
return|return
name|subRule
operator|.
name|boxSize
argument_list|(
name|subRule
operator|.
name|adjustSize
argument_list|(
name|QSize
argument_list|(
name|width
argument_list|,
name|csz
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
break|break;
case|case
name|CT_Splitter
case|:
case|case
name|CT_MenuBarItem
case|:
block|{
name|PseudoElement
name|pe
init|=
operator|(
name|ct
operator|==
name|CT_Splitter
operator|)
condition|?
name|PseudoElement_SplitterHandle
else|:
name|PseudoElement_Item
decl_stmt|;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|pe
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasBox
argument_list|()
operator|||
name|subRule
operator|.
name|hasBorder
argument_list|()
condition|)
return|return
name|subRule
operator|.
name|boxSize
argument_list|(
name|sz
argument_list|)
return|;
break|break;
block|}
case|case
name|CT_ProgressBar
case|:
case|case
name|CT_SizeGrip
case|:
return|return
operator|(
name|rule
operator|.
name|hasContentsSize
argument_list|()
operator|)
condition|?
name|rule
operator|.
name|size
argument_list|(
name|sz
argument_list|)
else|:
name|rule
operator|.
name|boxSize
argument_list|(
name|baseStyle
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|sz
argument_list|,
name|w
argument_list|)
argument_list|)
return|;
break|break;
case|case
name|CT_Slider
case|:
if|if
condition|(
name|rule
operator|.
name|hasBorder
argument_list|()
operator|||
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
name|rule
operator|.
name|hasGeometry
argument_list|()
condition|)
return|return
name|rule
operator|.
name|boxSize
argument_list|(
name|sz
argument_list|)
return|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|CT_TabBarTab
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TabBarTab
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|subRule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
name|int
name|spaceForIcon
init|=
literal|0
decl_stmt|;
name|bool
name|vertical
init|=
literal|false
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|tab
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|spaceForIcon
operator|=
literal|6
comment|/* icon offset */
operator|+
literal|4
comment|/* spacing */
operator|+
literal|2
comment|/* magic */
expr_stmt|;
comment|// ###: hardcoded to match with common style
name|vertical
operator|=
name|verticalTabs
argument_list|(
name|tab
operator|->
name|shape
argument_list|)
expr_stmt|;
block|}
name|sz
operator|=
name|csz
operator|+
name|QSize
argument_list|(
name|vertical
condition|?
literal|0
else|:
name|spaceForIcon
argument_list|,
name|vertical
condition|?
name|spaceForIcon
else|:
literal|0
argument_list|)
expr_stmt|;
return|return
name|subRule
operator|.
name|boxSize
argument_list|(
name|subRule
operator|.
name|adjustSize
argument_list|(
name|sz
argument_list|)
argument_list|)
return|;
block|}
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
name|baseStyle
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QMacStyle"
argument_list|)
condition|)
block|{
comment|//adjust the size after the call to the style because the mac style ignore the size arguments anyway.
comment|//this might cause the (max-){width,height} property to include the native style border while they should not.
return|return
name|subRule
operator|.
name|adjustSize
argument_list|(
name|baseStyle
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|csz
argument_list|,
name|w
argument_list|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|sz
operator|=
name|subRule
operator|.
name|adjustSize
argument_list|(
name|csz
argument_list|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_TABBAR
case|case
name|CT_MdiControls
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComplex
modifier|*
name|ccOpt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComplex
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_MdiCloseButton
argument_list|)
operator|&&
operator|!
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_MdiNormalButton
argument_list|)
operator|&&
operator|!
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_MdiMinButton
argument_list|)
condition|)
break|break;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|layout
init|=
name|rule
operator|.
name|styleHint
argument_list|(
name|QLatin1String
argument_list|(
literal|"button-layout"
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|layout
operator|.
name|isEmpty
argument_list|()
condition|)
name|layout
operator|=
name|subControlLayout
argument_list|(
name|QLatin1String
argument_list|(
literal|"mNX"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|width
init|=
literal|0
decl_stmt|,
name|height
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layout
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|layoutButton
init|=
name|layout
index|[
name|i
index|]
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|layoutButton
argument_list|<
name|PseudoElement_MdiCloseButton
operator|||
name|layoutButton
argument_list|>
name|PseudoElement_MdiNormalButton
condition|)
continue|continue;
name|QStyle
operator|::
name|SubControl
name|sc
init|=
name|knownPseudoElements
index|[
name|layoutButton
index|]
operator|.
name|subControl
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ccOpt
operator|->
name|subControls
operator|&
name|sc
operator|)
condition|)
continue|continue;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|layoutButton
argument_list|)
decl_stmt|;
name|QSize
name|sz
init|=
name|subRule
operator|.
name|size
argument_list|()
decl_stmt|;
name|width
operator|+=
name|sz
operator|.
name|width
argument_list|()
expr_stmt|;
name|height
operator|=
name|qMax
argument_list|(
name|height
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
case|case
name|CT_ItemViewItem
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ViewItem
argument_list|)
decl_stmt|;
name|sz
operator|=
name|baseStyle
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|csz
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|sz
operator|=
name|subRule
operator|.
name|adjustSize
argument_list|(
name|sz
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasBox
argument_list|()
operator|||
name|subRule
operator|.
name|hasBorder
argument_list|()
condition|)
name|sz
operator|=
name|subRule
operator|.
name|boxSize
argument_list|(
name|sz
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_ITEMVIEWS
default|default:
break|break;
block|}
return|return
name|baseStyle
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|sz
argument_list|,
name|w
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|propertyNameForStandardPixmap
specifier|static
name|QLatin1String
name|propertyNameForStandardPixmap
parameter_list|(
name|QStyle
operator|::
name|StandardPixmap
name|sp
parameter_list|)
block|{
switch|switch
condition|(
name|sp
condition|)
block|{
case|case
name|QStyle
operator|::
name|SP_TitleBarMenuButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"titlebar-menu-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_TitleBarMinButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"titlebar-minimize-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_TitleBarMaxButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"titlebar-maximize-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_TitleBarCloseButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"titlebar-close-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_TitleBarNormalButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"titlebar-normal-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_TitleBarShadeButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"titlebar-shade-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_TitleBarUnshadeButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"titlebar-unshade-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_TitleBarContextHelpButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"titlebar-contexthelp-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DockWidgetCloseButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"dockwidget-close-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_MessageBoxInformation
case|:
return|return
name|QLatin1String
argument_list|(
literal|"messagebox-information-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_MessageBoxWarning
case|:
return|return
name|QLatin1String
argument_list|(
literal|"messagebox-warning-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_MessageBoxCritical
case|:
return|return
name|QLatin1String
argument_list|(
literal|"messagebox-critical-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_MessageBoxQuestion
case|:
return|return
name|QLatin1String
argument_list|(
literal|"messagebox-question-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DesktopIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"desktop-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_TrashIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"trash-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_ComputerIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"computer-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DriveFDIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"floppy-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DriveHDIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"harddisk-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DriveCDIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"cd-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DriveDVDIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"dvd-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DriveNetIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"network-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DirOpenIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"directory-open-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DirClosedIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"directory-closed-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DirLinkIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"directory-link-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_FileIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"file-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_FileLinkIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"file-link-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_FileDialogStart
case|:
return|return
name|QLatin1String
argument_list|(
literal|"filedialog-start-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_FileDialogEnd
case|:
return|return
name|QLatin1String
argument_list|(
literal|"filedialog-end-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_FileDialogToParent
case|:
return|return
name|QLatin1String
argument_list|(
literal|"filedialog-parent-directory-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_FileDialogNewFolder
case|:
return|return
name|QLatin1String
argument_list|(
literal|"filedialog-new-directory-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_FileDialogDetailedView
case|:
return|return
name|QLatin1String
argument_list|(
literal|"filedialog-detailedview-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_FileDialogInfoView
case|:
return|return
name|QLatin1String
argument_list|(
literal|"filedialog-infoview-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_FileDialogContentsView
case|:
return|return
name|QLatin1String
argument_list|(
literal|"filedialog-contentsview-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_FileDialogListView
case|:
return|return
name|QLatin1String
argument_list|(
literal|"filedialog-listview-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_FileDialogBack
case|:
return|return
name|QLatin1String
argument_list|(
literal|"filedialog-backward-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DirIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"directory-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DialogOkButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"dialog-ok-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DialogCancelButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"dialog-cancel-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DialogHelpButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"dialog-help-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DialogOpenButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"dialog-open-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DialogSaveButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"dialog-save-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DialogCloseButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"dialog-close-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DialogApplyButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"dialog-apply-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DialogResetButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"dialog-reset-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DialogDiscardButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"discard-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DialogYesButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"dialog-yes-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DialogNoButton
case|:
return|return
name|QLatin1String
argument_list|(
literal|"dialog-no-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_ArrowUp
case|:
return|return
name|QLatin1String
argument_list|(
literal|"uparrow-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_ArrowDown
case|:
return|return
name|QLatin1String
argument_list|(
literal|"downarrow-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_ArrowLeft
case|:
return|return
name|QLatin1String
argument_list|(
literal|"leftarrow-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_ArrowRight
case|:
return|return
name|QLatin1String
argument_list|(
literal|"rightarrow-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_ArrowBack
case|:
return|return
name|QLatin1String
argument_list|(
literal|"backward-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_ArrowForward
case|:
return|return
name|QLatin1String
argument_list|(
literal|"forward-icon"
argument_list|)
return|;
case|case
name|QStyle
operator|::
name|SP_DirHomeIcon
case|:
return|return
name|QLatin1String
argument_list|(
literal|"home-icon"
argument_list|)
return|;
default|default:
return|return
name|QLatin1String
argument_list|(
literal|""
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|standardIcon
name|QIcon
name|QStyleSheetStyle
operator|::
name|standardIcon
parameter_list|(
name|StandardPixmap
name|standardIcon
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|RECURSION_GUARD
argument_list|(
argument|return baseStyle()->standardIcon(standardIcon, opt, w)
argument_list|)
name|QString
name|s
init|=
name|propertyNameForStandardPixmap
argument_list|(
name|standardIcon
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|)
decl_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasStyleHint
argument_list|(
name|s
argument_list|)
condition|)
return|return
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|rule
operator|.
name|styleHint
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
return|return
name|baseStyle
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|standardIcon
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|standardPalette
name|QPalette
name|QStyleSheetStyle
operator|::
name|standardPalette
parameter_list|()
specifier|const
block|{
return|return
name|baseStyle
argument_list|()
operator|->
name|standardPalette
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|standardPixmap
name|QPixmap
name|QStyleSheetStyle
operator|::
name|standardPixmap
parameter_list|(
name|StandardPixmap
name|standardPixmap
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|RECURSION_GUARD
argument_list|(
argument|return baseStyle()->standardPixmap(standardPixmap, opt, w)
argument_list|)
name|QString
name|s
init|=
name|propertyNameForStandardPixmap
argument_list|(
name|standardPixmap
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|)
decl_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasStyleHint
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|QIcon
name|icon
init|=
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|rule
operator|.
name|styleHint
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|icon
operator|.
name|pixmap
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
return|;
comment|// ###: unhard-code this if someone complains
block|}
block|}
return|return
name|baseStyle
argument_list|()
operator|->
name|standardPixmap
argument_list|(
name|standardPixmap
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|layoutSpacing
name|int
name|QStyleSheetStyle
operator|::
name|layoutSpacing
parameter_list|(
name|QSizePolicy
operator|::
name|ControlType
name|control1
parameter_list|,
name|QSizePolicy
operator|::
name|ControlType
name|control2
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
return|return
name|baseStyle
argument_list|()
operator|->
name|layoutSpacing
argument_list|(
name|control1
argument_list|,
name|control2
argument_list|,
name|orientation
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|styleHint
name|int
name|QStyleSheetStyle
operator|::
name|styleHint
parameter_list|(
name|StyleHint
name|sh
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
name|QStyleHintReturn
modifier|*
name|shret
parameter_list|)
specifier|const
block|{
name|RECURSION_GUARD
argument_list|(
argument|return baseStyle()->styleHint(sh, opt, w, shret)
argument_list|)
comment|// Prevent endless loop if somebody use isActiveWindow property as selector.
comment|// QWidget::isActiveWindow uses this styleHint to determine if the window is active or not
if|if
condition|(
name|sh
operator|==
name|SH_Widget_ShareActivation
condition|)
return|return
name|baseStyle
argument_list|()
operator|->
name|styleHint
argument_list|(
name|sh
argument_list|,
name|opt
argument_list|,
name|w
argument_list|,
name|shret
argument_list|)
return|;
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|)
decl_stmt|;
name|QString
name|s
decl_stmt|;
switch|switch
condition|(
name|sh
condition|)
block|{
case|case
name|SH_LineEdit_PasswordCharacter
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"lineedit-password-character"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_LineEdit_PasswordMaskDelay
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"lineedit-password-mask-delay"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_DitherDisabledText
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"dither-disabled-text"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_EtchDisabledText
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"etch-disabled-text"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ItemView_ActivateItemOnSingleClick
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"activate-on-singleclick"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ItemView_ShowDecorationSelected
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"show-decoration-selected"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_Table_GridLineColor
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"gridline-color"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_DialogButtonLayout
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"button-layout"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ToolTipLabel_Opacity
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"opacity"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ComboBox_Popup
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"combobox-popup"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ComboBox_ListMouseTracking
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"combobox-list-mousetracking"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_MenuBar_AltKeyNavigation
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"menubar-altkey-navigation"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_Menu_Scrollable
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"menu-scrollable"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_DrawMenuBarSeparator
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"menubar-separator"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_MenuBar_MouseTracking
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"mouse-tracking"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_SpinBox_ClickAutoRepeatRate
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"spinbox-click-autorepeat-rate"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_SpinControls_DisableOnBounds
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"spincontrol-disable-on-bounds"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_MessageBox_TextInteractionFlags
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"messagebox-text-interaction-flags"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ToolButton_PopupDelay
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"toolbutton-popup-delay"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ToolBox_SelectedPageTitleBold
case|:
if|if
condition|(
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ToolBoxTab
argument_list|)
operator|.
name|hasFont
condition|)
return|return
literal|0
return|;
break|break;
case|case
name|SH_GroupBox_TextLabelColor
case|:
if|if
condition|(
name|rule
operator|.
name|hasPalette
argument_list|()
operator|&&
name|rule
operator|.
name|palette
argument_list|()
operator|->
name|foreground
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
return|return
name|rule
operator|.
name|palette
argument_list|()
operator|->
name|foreground
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
return|;
break|break;
case|case
name|SH_ScrollView_FrameOnlyAroundContents
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"scrollview-frame-around-contents"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ScrollBar_ContextMenu
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"scrollbar-contextmenu"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ScrollBar_LeftClickAbsolutePosition
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"scrollbar-leftclick-absolute-position"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ScrollBar_MiddleClickAbsolutePosition
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"scrollbar-middleclick-absolute-position"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ScrollBar_RollBetweenButtons
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"scrollbar-roll-between-buttons"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ScrollBar_ScrollWhenPointerLeavesControl
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"scrollbar-scroll-when-pointer-leaves-control"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_TabBar_Alignment
case|:
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
name|rule
operator|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TabWidgetTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasPosition
argument_list|()
condition|)
return|return
name|rule
operator|.
name|position
argument_list|()
operator|->
name|position
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_TABWIDGET
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"alignment"
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|SH_TabBar_CloseButtonPosition
case|:
name|rule
operator|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TabBarTabCloseButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasPosition
argument_list|()
condition|)
block|{
name|Qt
operator|::
name|Alignment
name|align
init|=
name|rule
operator|.
name|position
argument_list|()
operator|->
name|position
decl_stmt|;
if|if
condition|(
name|align
operator|&
name|Qt
operator|::
name|AlignLeft
operator|||
name|align
operator|&
name|Qt
operator|::
name|AlignTop
condition|)
return|return
name|QTabBar
operator|::
name|LeftSide
return|;
if|if
condition|(
name|align
operator|&
name|Qt
operator|::
name|AlignRight
operator|||
name|align
operator|&
name|Qt
operator|::
name|AlignBottom
condition|)
return|return
name|QTabBar
operator|::
name|RightSide
return|;
block|}
break|break;
endif|#
directive|endif
case|case
name|SH_TabBar_ElideMode
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"tabbar-elide-mode"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_TabBar_PreferNoArrows
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"tabbar-prefer-no-arrows"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ComboBox_PopupFrameStyle
case|:
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
name|QAbstractItemView
modifier|*
name|view
init|=
name|w
operator|->
name|findChild
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|view
condition|)
block|{
name|view
operator|->
name|ensurePolished
argument_list|()
expr_stmt|;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|view
argument_list|,
name|PseudoElement_None
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|subRule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
return|return
name|QFrame
operator|::
name|NoFrame
return|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
break|break;
case|case
name|SH_DialogButtonBox_ButtonsHaveIcons
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"dialogbuttonbox-buttons-have-icons"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_Workspace_FillSpaceOnMaximize
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"mdi-fill-space-on-maximize"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_TitleBar_NoBorder
case|:
if|if
condition|(
name|rule
operator|.
name|hasBorder
argument_list|()
condition|)
return|return
operator|!
name|rule
operator|.
name|border
argument_list|()
operator|->
name|borders
index|[
name|LeftEdge
index|]
return|;
break|break;
case|case
name|SH_TitleBar_AutoRaise
case|:
block|{
comment|// plain absurd
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TitleBar
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
return|return
literal|1
return|;
break|break;
block|}
case|case
name|SH_ItemView_ArrowKeysNavigateIntoChildren
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"arrow-keys-navigate-into-children"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ItemView_PaintAlternatingRowColorsForEmptyArea
case|:
name|s
operator|=
name|QLatin1String
argument_list|(
literal|"paint-alternating-row-colors-for-empty-area"
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
operator|&&
name|rule
operator|.
name|hasStyleHint
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|rule
operator|.
name|styleHint
argument_list|(
name|s
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
return|return
name|baseStyle
argument_list|()
operator|->
name|styleHint
argument_list|(
name|sh
argument_list|,
name|opt
argument_list|,
name|w
argument_list|,
name|shret
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|subControlRect
name|QRect
name|QStyleSheetStyle
operator|::
name|subControlRect
parameter_list|(
name|ComplexControl
name|cc
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|opt
parameter_list|,
name|SubControl
name|sc
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|RECURSION_GUARD
argument_list|(
argument|return baseStyle()->subControlRect(cc, opt, sc, w)
argument_list|)
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|cc
condition|)
block|{
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|sc
condition|)
block|{
case|case
name|SC_ComboBoxFrame
case|:
return|return
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
return|;
case|case
name|SC_ComboBoxEditField
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ComboBoxDropDown
argument_list|)
decl_stmt|;
name|QRect
name|r
init|=
name|rule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
decl_stmt|;
name|QRect
name|r2
init|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|rule
argument_list|,
name|subRule
argument_list|,
name|PseudoElement_ComboBoxDropDown
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasPosition
argument_list|()
operator|&&
name|subRule
operator|.
name|position
argument_list|()
operator|->
name|position
operator|&
name|Qt
operator|::
name|AlignLeft
condition|)
block|{
return|return
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|r
argument_list|,
name|r
operator|.
name|adjusted
argument_list|(
name|r2
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|r
argument_list|,
name|r
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|r2
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
case|case
name|SC_ComboBoxArrow
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ComboBoxDropDown
argument_list|)
decl_stmt|;
return|return
name|positionRect
argument_list|(
name|w
argument_list|,
name|rule
argument_list|,
name|subRule
argument_list|,
name|PseudoElement_ComboBoxDropDown
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
return|;
block|}
case|case
name|SC_ComboBoxListBoxPopup
case|:
default|default:
return|return
name|baseStyle
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|sc
argument_list|,
name|w
argument_list|)
return|;
block|}
block|}
name|QStyleOptionComboBox
name|comboBox
argument_list|(
operator|*
name|cb
argument_list|)
decl_stmt|;
name|comboBox
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|?
name|baseStyle
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|cc
argument_list|,
operator|&
name|comboBox
argument_list|,
name|sc
argument_list|,
name|w
argument_list|)
else|:
name|QWindowsStyle
operator|::
name|subControlRect
argument_list|(
name|cc
argument_list|,
operator|&
name|comboBox
argument_list|,
name|sc
argument_list|,
name|w
argument_list|)
return|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spin
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRenderRule
name|upRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SpinBoxUpButton
argument_list|)
decl_stmt|;
name|QRenderRule
name|downRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SpinBoxDownButton
argument_list|)
decl_stmt|;
name|bool
name|ruleMatch
init|=
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
decl_stmt|;
name|bool
name|upRuleMatch
init|=
name|upRule
operator|.
name|hasGeometry
argument_list|()
operator|||
name|upRule
operator|.
name|hasPosition
argument_list|()
decl_stmt|;
name|bool
name|downRuleMatch
init|=
name|downRule
operator|.
name|hasGeometry
argument_list|()
operator|||
name|downRule
operator|.
name|hasPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|ruleMatch
operator|||
name|upRuleMatch
operator|||
name|downRuleMatch
condition|)
block|{
switch|switch
condition|(
name|sc
condition|)
block|{
case|case
name|SC_SpinBoxFrame
case|:
return|return
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
return|;
case|case
name|SC_SpinBoxEditField
case|:
block|{
name|QRect
name|r
init|=
name|rule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
decl_stmt|;
comment|// Use the widest button on each side to determine edit field size.
name|Qt
operator|::
name|Alignment
name|upAlign
decl_stmt|,
name|downAlign
decl_stmt|;
name|upAlign
operator|=
name|upRule
operator|.
name|hasPosition
argument_list|()
condition|?
name|upRule
operator|.
name|position
argument_list|()
operator|->
name|position
else|:
name|Qt
operator|::
name|Alignment
argument_list|(
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|upAlign
operator|=
name|resolveAlignment
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|upAlign
argument_list|)
expr_stmt|;
name|downAlign
operator|=
name|downRule
operator|.
name|hasPosition
argument_list|()
condition|?
name|downRule
operator|.
name|position
argument_list|()
operator|->
name|position
else|:
name|Qt
operator|::
name|Alignment
argument_list|(
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|downAlign
operator|=
name|resolveAlignment
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|downAlign
argument_list|)
expr_stmt|;
name|int
name|upSize
init|=
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|opt
argument_list|,
name|SC_SpinBoxUp
argument_list|,
name|w
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|downSize
init|=
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|opt
argument_list|,
name|SC_SpinBoxDown
argument_list|,
name|w
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|widestL
init|=
name|qMax
argument_list|(
operator|(
name|upAlign
operator|&
name|Qt
operator|::
name|AlignLeft
operator|)
condition|?
name|upSize
else|:
literal|0
argument_list|,
operator|(
name|downAlign
operator|&
name|Qt
operator|::
name|AlignLeft
operator|)
condition|?
name|downSize
else|:
literal|0
argument_list|)
decl_stmt|;
name|int
name|widestR
init|=
name|qMax
argument_list|(
operator|(
name|upAlign
operator|&
name|Qt
operator|::
name|AlignRight
operator|)
condition|?
name|upSize
else|:
literal|0
argument_list|,
operator|(
name|downAlign
operator|&
name|Qt
operator|::
name|AlignRight
operator|)
condition|?
name|downSize
else|:
literal|0
argument_list|)
decl_stmt|;
name|r
operator|.
name|setRight
argument_list|(
name|r
operator|.
name|right
argument_list|()
operator|-
name|widestR
argument_list|)
expr_stmt|;
name|r
operator|.
name|setLeft
argument_list|(
name|r
operator|.
name|left
argument_list|()
operator|+
name|widestL
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|SC_SpinBoxDown
case|:
if|if
condition|(
name|downRuleMatch
condition|)
return|return
name|positionRect
argument_list|(
name|w
argument_list|,
name|rule
argument_list|,
name|downRule
argument_list|,
name|PseudoElement_SpinBoxDownButton
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
return|;
break|break;
case|case
name|SC_SpinBoxUp
case|:
if|if
condition|(
name|upRuleMatch
condition|)
return|return
name|positionRect
argument_list|(
name|w
argument_list|,
name|rule
argument_list|,
name|upRule
argument_list|,
name|PseudoElement_SpinBoxUpButton
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
return|;
break|break;
default|default:
break|break;
block|}
return|return
name|baseStyle
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|sc
argument_list|,
name|w
argument_list|)
return|;
block|}
name|QStyleOptionSpinBox
name|spinBox
argument_list|(
operator|*
name|spin
argument_list|)
decl_stmt|;
name|spinBox
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|?
name|baseStyle
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|cc
argument_list|,
operator|&
name|spinBox
argument_list|,
name|sc
argument_list|,
name|w
argument_list|)
else|:
name|QWindowsStyle
operator|::
name|subControlRect
argument_list|(
name|cc
argument_list|,
operator|&
name|spinBox
argument_list|,
name|sc
argument_list|,
name|w
argument_list|)
return|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SPINBOX
case|case
name|CC_GroupBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|gb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|sc
condition|)
block|{
case|case
name|SC_GroupBoxFrame
case|:
case|case
name|SC_GroupBoxContents
case|:
block|{
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
return|return
name|sc
operator|==
name|SC_GroupBoxFrame
condition|?
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
else|:
name|rule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
return|;
block|}
name|QStyleOptionGroupBox
name|groupBox
argument_list|(
operator|*
name|gb
argument_list|)
decl_stmt|;
name|groupBox
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return
name|baseStyle
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|cc
argument_list|,
operator|&
name|groupBox
argument_list|,
name|sc
argument_list|,
name|w
argument_list|)
return|;
block|}
default|default:
case|case
name|SC_GroupBoxLabel
case|:
case|case
name|SC_GroupBoxCheckBox
case|:
block|{
name|QRenderRule
name|indRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_GroupBoxIndicator
argument_list|)
decl_stmt|;
name|QRenderRule
name|labelRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_GroupBoxTitle
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|labelRule
operator|.
name|hasPosition
argument_list|()
operator|&&
operator|!
name|labelRule
operator|.
name|hasGeometry
argument_list|()
operator|&&
operator|!
name|labelRule
operator|.
name|hasBox
argument_list|()
operator|&&
operator|!
name|labelRule
operator|.
name|hasBorder
argument_list|()
operator|&&
operator|!
name|indRule
operator|.
name|hasContentsSize
argument_list|()
condition|)
block|{
name|QStyleOptionGroupBox
name|groupBox
argument_list|(
operator|*
name|gb
argument_list|)
decl_stmt|;
name|groupBox
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return
name|baseStyle
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|cc
argument_list|,
operator|&
name|groupBox
argument_list|,
name|sc
argument_list|,
name|w
argument_list|)
return|;
block|}
name|int
name|tw
init|=
name|opt
operator|->
name|fontMetrics
operator|.
name|width
argument_list|(
name|gb
operator|->
name|text
argument_list|)
decl_stmt|;
name|int
name|th
init|=
name|opt
operator|->
name|fontMetrics
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|spacing
init|=
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_CheckBoxLabelSpacing
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|int
name|iw
init|=
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_IndicatorWidth
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|int
name|ih
init|=
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_IndicatorHeight
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|gb
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
condition|)
block|{
name|tw
operator|=
name|tw
operator|+
name|iw
operator|+
name|spacing
expr_stmt|;
name|th
operator|=
name|qMax
argument_list|(
name|th
argument_list|,
name|ih
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|labelRule
operator|.
name|hasGeometry
argument_list|()
condition|)
block|{
name|labelRule
operator|.
name|geo
operator|=
operator|new
name|QStyleSheetGeometryData
argument_list|(
name|tw
argument_list|,
name|th
argument_list|,
name|tw
argument_list|,
name|th
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|labelRule
operator|.
name|geo
operator|->
name|width
operator|=
name|tw
expr_stmt|;
name|labelRule
operator|.
name|geo
operator|->
name|height
operator|=
name|th
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|labelRule
operator|.
name|hasPosition
argument_list|()
condition|)
block|{
name|labelRule
operator|.
name|p
operator|=
operator|new
name|QStyleSheetPositionData
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|defaultOrigin
argument_list|(
name|PseudoElement_GroupBoxTitle
argument_list|)
argument_list|,
name|gb
operator|->
name|textAlignment
argument_list|,
name|PositionMode_Static
argument_list|)
expr_stmt|;
block|}
name|QRect
name|r
init|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|rule
argument_list|,
name|labelRule
argument_list|,
name|PseudoElement_GroupBoxTitle
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
decl_stmt|;
if|if
condition|(
name|gb
operator|->
name|subControls
operator|&
name|SC_GroupBoxCheckBox
condition|)
block|{
name|r
operator|=
name|labelRule
operator|.
name|contentsRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|sc
operator|==
name|SC_GroupBoxLabel
condition|)
block|{
name|r
operator|.
name|setLeft
argument_list|(
name|r
operator|.
name|left
argument_list|()
operator|+
name|iw
operator|+
name|spacing
argument_list|)
expr_stmt|;
name|r
operator|.
name|setTop
argument_list|(
name|r
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|th
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|QRect
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|ih
operator|/
literal|2
argument_list|,
name|iw
argument_list|,
name|ih
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
else|else
block|{
return|return
name|labelRule
operator|.
name|contentsRect
argument_list|(
name|r
argument_list|)
return|;
block|}
block|}
block|}
comment|// switch
block|}
break|break;
case|case
name|CC_ToolButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|tb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|sc
condition|)
block|{
case|case
name|SC_ToolButton
case|:
return|return
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
return|;
case|case
name|SC_ToolButtonMenu
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ToolButtonMenu
argument_list|)
decl_stmt|;
return|return
name|positionRect
argument_list|(
name|w
argument_list|,
name|rule
argument_list|,
name|subRule
argument_list|,
name|PseudoElement_ToolButtonMenu
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
return|;
block|}
default|default:
break|break;
block|}
block|}
name|QStyleOptionToolButton
name|tool
argument_list|(
operator|*
name|tb
argument_list|)
decl_stmt|;
name|tool
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
return|return
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|?
name|baseStyle
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|cc
argument_list|,
operator|&
name|tool
argument_list|,
name|sc
argument_list|,
name|w
argument_list|)
else|:
name|QWindowsStyle
operator|::
name|subControlRect
argument_list|(
name|cc
argument_list|,
operator|&
name|tool
argument_list|,
name|sc
argument_list|,
name|w
argument_list|)
return|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
case|case
name|CC_ScrollBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|sb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionSlider
name|styleOptionSlider
argument_list|(
operator|*
name|sb
argument_list|)
decl_stmt|;
name|styleOptionSlider
operator|.
name|rect
operator|=
name|rule
operator|.
name|borderRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasDrawable
argument_list|()
operator|||
name|rule
operator|.
name|hasBox
argument_list|()
condition|)
block|{
name|QRect
name|grooveRect
decl_stmt|;
if|if
condition|(
operator|!
name|rule
operator|.
name|hasBox
argument_list|()
condition|)
block|{
name|grooveRect
operator|=
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|?
name|baseStyle
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|sb
argument_list|,
name|SC_ScrollBarGroove
argument_list|,
name|w
argument_list|)
else|:
name|QWindowsStyle
operator|::
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|sb
argument_list|,
name|SC_ScrollBarGroove
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|grooveRect
operator|=
name|rule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
name|PseudoElement
name|pe
init|=
name|PseudoElement_None
decl_stmt|;
switch|switch
condition|(
name|sc
condition|)
block|{
case|case
name|SC_ScrollBarGroove
case|:
return|return
name|grooveRect
return|;
case|case
name|SC_ScrollBarAddPage
case|:
case|case
name|SC_ScrollBarSubPage
case|:
case|case
name|SC_ScrollBarSlider
case|:
block|{
name|QRect
name|contentRect
init|=
name|grooveRect
decl_stmt|;
if|if
condition|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_ScrollBarSlider
argument_list|)
condition|)
block|{
name|QRenderRule
name|sliderRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ScrollBarSlider
argument_list|)
decl_stmt|;
name|Origin
name|origin
init|=
name|sliderRule
operator|.
name|hasPosition
argument_list|()
condition|?
name|sliderRule
operator|.
name|position
argument_list|()
operator|->
name|origin
else|:
name|defaultOrigin
argument_list|(
name|PseudoElement_ScrollBarSlider
argument_list|)
decl_stmt|;
name|contentRect
operator|=
name|rule
operator|.
name|originRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|origin
argument_list|)
expr_stmt|;
block|}
name|int
name|maxlen
init|=
operator|(
name|styleOptionSlider
operator|.
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|contentRect
operator|.
name|width
argument_list|()
else|:
name|contentRect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|sliderlen
decl_stmt|;
if|if
condition|(
name|sb
operator|->
name|maximum
operator|!=
name|sb
operator|->
name|minimum
condition|)
block|{
name|uint
name|range
init|=
name|sb
operator|->
name|maximum
operator|-
name|sb
operator|->
name|minimum
decl_stmt|;
name|sliderlen
operator|=
operator|(
name|qint64
argument_list|(
name|sb
operator|->
name|pageStep
argument_list|)
operator|*
name|maxlen
operator|)
operator|/
operator|(
name|range
operator|+
name|sb
operator|->
name|pageStep
operator|)
expr_stmt|;
name|int
name|slidermin
init|=
name|pixelMetric
argument_list|(
name|PM_ScrollBarSliderMin
argument_list|,
name|sb
argument_list|,
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|sliderlen
argument_list|<
name|slidermin
operator|||
name|range
argument_list|>
name|INT_MAX
operator|/
literal|2
condition|)
name|sliderlen
operator|=
name|slidermin
expr_stmt|;
if|if
condition|(
name|sliderlen
operator|>
name|maxlen
condition|)
name|sliderlen
operator|=
name|maxlen
expr_stmt|;
block|}
else|else
block|{
name|sliderlen
operator|=
name|maxlen
expr_stmt|;
block|}
name|int
name|sliderstart
init|=
operator|(
name|styleOptionSlider
operator|.
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|contentRect
operator|.
name|left
argument_list|()
else|:
name|contentRect
operator|.
name|top
argument_list|()
operator|)
operator|+
name|sliderPositionFromValue
argument_list|(
name|sb
operator|->
name|minimum
argument_list|,
name|sb
operator|->
name|maximum
argument_list|,
name|sb
operator|->
name|sliderPosition
argument_list|,
name|maxlen
operator|-
name|sliderlen
argument_list|,
name|sb
operator|->
name|upsideDown
argument_list|)
decl_stmt|;
name|QRect
name|sr
init|=
operator|(
name|sb
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|QRect
argument_list|(
name|sliderstart
argument_list|,
name|contentRect
operator|.
name|top
argument_list|()
argument_list|,
name|sliderlen
argument_list|,
name|contentRect
operator|.
name|height
argument_list|()
argument_list|)
else|:
name|QRect
argument_list|(
name|contentRect
operator|.
name|left
argument_list|()
argument_list|,
name|sliderstart
argument_list|,
name|contentRect
operator|.
name|width
argument_list|()
argument_list|,
name|sliderlen
argument_list|)
decl_stmt|;
if|if
condition|(
name|sc
operator|==
name|SC_ScrollBarSlider
condition|)
block|{
return|return
name|sr
return|;
block|}
elseif|else
if|if
condition|(
name|sc
operator|==
name|SC_ScrollBarSubPage
condition|)
block|{
return|return
name|QRect
argument_list|(
name|contentRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|sb
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|sr
operator|.
name|bottomLeft
argument_list|()
else|:
name|sr
operator|.
name|topRight
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// SC_ScrollBarAddPage
return|return
name|QRect
argument_list|(
name|sb
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|sr
operator|.
name|topRight
argument_list|()
else|:
name|sr
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|contentRect
operator|.
name|bottomRight
argument_list|()
argument_list|)
return|;
block|}
break|break;
block|}
case|case
name|SC_ScrollBarAddLine
case|:
name|pe
operator|=
name|PseudoElement_ScrollBarAddLine
expr_stmt|;
break|break;
case|case
name|SC_ScrollBarSubLine
case|:
name|pe
operator|=
name|PseudoElement_ScrollBarSubLine
expr_stmt|;
break|break;
case|case
name|SC_ScrollBarFirst
case|:
name|pe
operator|=
name|PseudoElement_ScrollBarFirst
expr_stmt|;
break|break;
case|case
name|SC_ScrollBarLast
case|:
name|pe
operator|=
name|PseudoElement_ScrollBarLast
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|pe
argument_list|)
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|pe
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasPosition
argument_list|()
operator|||
name|subRule
operator|.
name|hasGeometry
argument_list|()
operator|||
name|subRule
operator|.
name|hasBox
argument_list|()
condition|)
block|{
specifier|const
name|QStyleSheetPositionData
modifier|*
name|pos
init|=
name|subRule
operator|.
name|position
argument_list|()
decl_stmt|;
name|QRect
name|originRect
init|=
name|grooveRect
decl_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
condition|)
block|{
name|Origin
name|origin
init|=
operator|(
name|pos
operator|&&
name|pos
operator|->
name|origin
operator|!=
name|Origin_Unknown
operator|)
condition|?
name|pos
operator|->
name|origin
else|:
name|defaultOrigin
argument_list|(
name|pe
argument_list|)
decl_stmt|;
name|originRect
operator|=
name|rule
operator|.
name|originRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|,
name|origin
argument_list|)
expr_stmt|;
block|}
return|return
name|positionRect
argument_list|(
name|w
argument_list|,
name|subRule
argument_list|,
name|pe
argument_list|,
name|originRect
argument_list|,
name|styleOptionSlider
operator|.
name|direction
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|?
name|baseStyle
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|cc
argument_list|,
operator|&
name|styleOptionSlider
argument_list|,
name|sc
argument_list|,
name|w
argument_list|)
else|:
name|QWindowsStyle
operator|::
name|subControlRect
argument_list|(
name|cc
argument_list|,
operator|&
name|styleOptionSlider
argument_list|,
name|sc
argument_list|,
name|w
argument_list|)
return|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SCROLLBAR
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|CC_Slider
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SliderGroove
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subRule
operator|.
name|hasDrawable
argument_list|()
condition|)
break|break;
name|subRule
operator|.
name|img
operator|=
literal|0
expr_stmt|;
name|QRect
name|gr
init|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|rule
argument_list|,
name|subRule
argument_list|,
name|PseudoElement_SliderGroove
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|sc
condition|)
block|{
case|case
name|SC_SliderGroove
case|:
return|return
name|gr
return|;
case|case
name|SC_SliderHandle
case|:
block|{
name|bool
name|horizontal
init|=
name|slider
operator|->
name|orientation
operator|&
name|Qt
operator|::
name|Horizontal
decl_stmt|;
name|QRect
name|cr
init|=
name|subRule
operator|.
name|contentsRect
argument_list|(
name|gr
argument_list|)
decl_stmt|;
name|QRenderRule
name|subRule2
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_SliderHandle
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|horizontal
condition|?
name|subRule2
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
else|:
name|subRule2
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|subRule2
operator|.
name|img
operator|=
literal|0
expr_stmt|;
name|subRule2
operator|.
name|geo
operator|=
literal|0
expr_stmt|;
name|cr
operator|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|subRule2
argument_list|,
name|PseudoElement_SliderHandle
argument_list|,
name|cr
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
expr_stmt|;
name|int
name|thickness
init|=
name|horizontal
condition|?
name|cr
operator|.
name|height
argument_list|()
else|:
name|cr
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|sliderPos
init|=
name|sliderPositionFromValue
argument_list|(
name|slider
operator|->
name|minimum
argument_list|,
name|slider
operator|->
name|maximum
argument_list|,
name|slider
operator|->
name|sliderPosition
argument_list|,
operator|(
name|horizontal
condition|?
name|cr
operator|.
name|width
argument_list|()
else|:
name|cr
operator|.
name|height
argument_list|()
operator|)
operator|-
name|len
argument_list|,
name|slider
operator|->
name|upsideDown
argument_list|)
decl_stmt|;
name|cr
operator|=
name|horizontal
condition|?
name|QRect
argument_list|(
name|cr
operator|.
name|x
argument_list|()
operator|+
name|sliderPos
argument_list|,
name|cr
operator|.
name|y
argument_list|()
argument_list|,
name|len
argument_list|,
name|thickness
argument_list|)
else|:
name|QRect
argument_list|(
name|cr
operator|.
name|x
argument_list|()
argument_list|,
name|cr
operator|.
name|y
argument_list|()
operator|+
name|sliderPos
argument_list|,
name|thickness
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|subRule2
operator|.
name|borderRect
argument_list|(
name|cr
argument_list|)
return|;
break|break;
block|}
case|case
name|SC_SliderTickmarks
case|:
comment|// TODO...
default|default:
break|break;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SLIDER
case|case
name|CC_MdiControls
case|:
if|if
condition|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_MdiCloseButton
argument_list|)
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_MdiNormalButton
argument_list|)
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_MdiMinButton
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|layout
init|=
name|rule
operator|.
name|styleHint
argument_list|(
name|QLatin1String
argument_list|(
literal|"button-layout"
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|layout
operator|.
name|isEmpty
argument_list|()
condition|)
name|layout
operator|=
name|subControlLayout
argument_list|(
name|QLatin1String
argument_list|(
literal|"mNX"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|,
name|width
init|=
literal|0
decl_stmt|;
name|QRenderRule
name|subRule
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layout
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|layoutButton
init|=
name|layout
index|[
name|i
index|]
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|layoutButton
argument_list|<
name|PseudoElement_MdiCloseButton
operator|||
name|layoutButton
argument_list|>
name|PseudoElement_MdiNormalButton
condition|)
continue|continue;
name|QStyle
operator|::
name|SubControl
name|control
init|=
name|knownPseudoElements
index|[
name|layoutButton
index|]
operator|.
name|subControl
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|opt
operator|->
name|subControls
operator|&
name|control
operator|)
condition|)
continue|continue;
name|subRule
operator|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|layoutButton
argument_list|)
expr_stmt|;
name|width
operator|=
name|subRule
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
name|sc
operator|==
name|control
condition|)
break|break;
name|x
operator|+=
name|width
expr_stmt|;
block|}
return|return
name|subRule
operator|.
name|borderRect
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|width
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|CC_TitleBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTitleBar
modifier|*
name|tb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTitleBar
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TitleBar
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subRule
operator|.
name|hasDrawable
argument_list|()
operator|&&
operator|!
name|subRule
operator|.
name|hasBox
argument_list|()
operator|&&
operator|!
name|subRule
operator|.
name|hasBorder
argument_list|()
condition|)
break|break;
name|QHash
argument_list|<
name|QStyle
operator|::
name|SubControl
argument_list|,
name|QRect
argument_list|>
name|layoutRects
init|=
name|titleBarLayout
argument_list|(
name|w
argument_list|,
name|tb
argument_list|)
decl_stmt|;
return|return
name|layoutRects
operator|.
name|value
argument_list|(
name|sc
argument_list|)
return|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|baseStyle
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|sc
argument_list|,
name|w
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|subElementRect
name|QRect
name|QStyleSheetStyle
operator|::
name|subElementRect
parameter_list|(
name|SubElement
name|se
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|RECURSION_GUARD
argument_list|(
argument|return baseStyle()->subElementRect(se, opt, w)
argument_list|)
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
name|int
name|pe
init|=
name|PseudoElement_None
decl_stmt|;
endif|#
directive|endif
switch|switch
condition|(
name|se
condition|)
block|{
case|case
name|SE_PushButtonContents
case|:
case|case
name|SE_PushButtonFocusRect
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QStyleOptionButton
name|btnOpt
argument_list|(
operator|*
name|btn
argument_list|)
decl_stmt|;
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
return|return
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|rule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
argument_list|)
return|;
return|return
name|rule
operator|.
name|baseStyleCanDraw
argument_list|()
condition|?
name|baseStyle
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|se
argument_list|,
operator|&
name|btnOpt
argument_list|,
name|w
argument_list|)
else|:
name|QWindowsStyle
operator|::
name|subElementRect
argument_list|(
name|se
argument_list|,
operator|&
name|btnOpt
argument_list|,
name|w
argument_list|)
return|;
block|}
break|break;
case|case
name|SE_LineEditContents
case|:
case|case
name|SE_FrameContents
case|:
case|case
name|SE_ShapedFrameContents
case|:
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
return|return
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|rule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|SE_CheckBoxIndicator
case|:
case|case
name|SE_RadioButtonIndicator
case|:
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
name|rule
operator|.
name|hasBorder
argument_list|()
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_Indicator
argument_list|)
condition|)
block|{
name|PseudoElement
name|pe
init|=
name|se
operator|==
name|SE_CheckBoxIndicator
condition|?
name|PseudoElement_Indicator
else|:
name|PseudoElement_ExclusiveIndicator
decl_stmt|;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|pe
argument_list|)
decl_stmt|;
return|return
name|positionRect
argument_list|(
name|w
argument_list|,
name|rule
argument_list|,
name|subRule
argument_list|,
name|pe
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
return|;
block|}
break|break;
case|case
name|SE_CheckBoxContents
case|:
case|case
name|SE_RadioButtonContents
case|:
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
name|rule
operator|.
name|hasBorder
argument_list|()
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_Indicator
argument_list|)
condition|)
block|{
name|bool
name|isRadio
init|=
name|se
operator|==
name|SE_RadioButtonContents
decl_stmt|;
name|QRect
name|ir
init|=
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonIndicator
else|:
name|SE_CheckBoxIndicator
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|ir
operator|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|ir
argument_list|)
expr_stmt|;
name|int
name|spacing
init|=
name|pixelMetric
argument_list|(
name|isRadio
condition|?
name|PM_RadioButtonLabelSpacing
else|:
name|PM_CheckBoxLabelSpacing
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|QRect
name|cr
init|=
name|rule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
decl_stmt|;
name|ir
operator|.
name|setRect
argument_list|(
name|ir
operator|.
name|left
argument_list|()
operator|+
name|ir
operator|.
name|width
argument_list|()
operator|+
name|spacing
argument_list|,
name|cr
operator|.
name|y
argument_list|()
argument_list|,
name|cr
operator|.
name|width
argument_list|()
operator|-
name|ir
operator|.
name|width
argument_list|()
operator|-
name|spacing
argument_list|,
name|cr
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|ir
argument_list|)
return|;
block|}
break|break;
case|case
name|SE_ToolBoxTabContents
case|:
if|if
condition|(
name|w
operator|&&
name|hasStyleRule
argument_list|(
name|w
operator|->
name|parentWidget
argument_list|()
argument_list|,
name|PseudoElement_ToolBoxTab
argument_list|)
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
operator|->
name|parentWidget
argument_list|()
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ToolBoxTab
argument_list|)
decl_stmt|;
return|return
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|subRule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|SE_RadioButtonFocusRect
case|:
case|case
name|SE_RadioButtonClickRect
case|:
comment|// focusrect | indicator
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
name|rule
operator|.
name|hasBorder
argument_list|()
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_Indicator
argument_list|)
condition|)
block|{
return|return
name|opt
operator|->
name|rect
return|;
block|}
break|break;
case|case
name|SE_CheckBoxFocusRect
case|:
case|case
name|SE_CheckBoxClickRect
case|:
comment|// relies on indicator and contents
return|return
name|ParentStyle
operator|::
name|subElementRect
argument_list|(
name|se
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
return|;
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
case|case
name|SE_ViewItemCheckIndicator
case|:
if|if
condition|(
operator|!
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
return|return
name|subElementRect
argument_list|(
name|SE_CheckBoxIndicator
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
return|;
block|}
comment|// intentionally falls through
case|case
name|SE_ItemViewItemText
case|:
case|case
name|SE_ItemViewItemDecoration
case|:
case|case
name|SE_ItemViewItemFocusRect
case|:
if|if
condition|(
specifier|const
name|QStyleOptionViewItem
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_ViewItem
argument_list|)
decl_stmt|;
name|PseudoElement
name|pe
init|=
name|PseudoElement_None
decl_stmt|;
if|if
condition|(
name|se
operator|==
name|SE_ItemViewItemText
operator|||
name|se
operator|==
name|SE_ItemViewItemFocusRect
condition|)
name|pe
operator|=
name|PseudoElement_ViewItemText
expr_stmt|;
elseif|else
if|if
condition|(
name|se
operator|==
name|SE_ItemViewItemDecoration
operator|&&
name|vopt
operator|->
name|features
operator|&
name|QStyleOptionViewItem
operator|::
name|HasDecoration
condition|)
name|pe
operator|=
name|PseudoElement_ViewItemIcon
expr_stmt|;
elseif|else
if|if
condition|(
name|se
operator|==
name|SE_ItemViewItemCheckIndicator
operator|&&
name|vopt
operator|->
name|features
operator|&
name|QStyleOptionViewItem
operator|::
name|HasCheckIndicator
condition|)
name|pe
operator|=
name|PseudoElement_ViewItemIndicator
expr_stmt|;
else|else
break|break;
if|if
condition|(
name|subRule
operator|.
name|hasGeometry
argument_list|()
operator|||
name|subRule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|subRule
operator|.
name|hasNativeBorder
argument_list|()
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|pe
argument_list|)
condition|)
block|{
name|QRenderRule
name|subRule2
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|pe
argument_list|)
decl_stmt|;
name|QStyleOptionViewItem
name|optCopy
argument_list|(
operator|*
name|vopt
argument_list|)
decl_stmt|;
name|optCopy
operator|.
name|rect
operator|=
name|subRule
operator|.
name|contentsRect
argument_list|(
name|vopt
operator|->
name|rect
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|ParentStyle
operator|::
name|subElementRect
argument_list|(
name|se
argument_list|,
operator|&
name|optCopy
argument_list|,
name|w
argument_list|)
decl_stmt|;
return|return
name|positionRect
argument_list|(
name|w
argument_list|,
name|subRule2
argument_list|,
name|pe
argument_list|,
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
return|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_ITEMVIEWS
case|case
name|SE_HeaderArrow
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_HeaderViewUpArrow
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasPosition
argument_list|()
operator|||
name|subRule
operator|.
name|hasGeometry
argument_list|()
condition|)
return|return
name|positionRect
argument_list|(
name|w
argument_list|,
name|rule
argument_list|,
name|subRule
argument_list|,
name|PseudoElement_HeaderViewUpArrow
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
return|;
block|}
break|break;
case|case
name|SE_HeaderLabel
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_HeaderViewSection
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|subRule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
return|return
name|subRule
operator|.
name|contentsRect
argument_list|(
name|opt
operator|->
name|rect
argument_list|)
return|;
block|}
break|break;
case|case
name|SE_ProgressBarGroove
case|:
case|case
name|SE_ProgressBarContents
case|:
case|case
name|SE_ProgressBarLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|pb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|rule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
operator|||
name|rule
operator|.
name|hasPosition
argument_list|()
operator|||
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_ProgressBarChunk
argument_list|)
condition|)
block|{
if|if
condition|(
name|se
operator|==
name|SE_ProgressBarGroove
condition|)
return|return
name|rule
operator|.
name|borderRect
argument_list|(
name|pb
operator|->
name|rect
argument_list|)
return|;
elseif|else
if|if
condition|(
name|se
operator|==
name|SE_ProgressBarContents
condition|)
return|return
name|rule
operator|.
name|contentsRect
argument_list|(
name|pb
operator|->
name|rect
argument_list|)
return|;
name|QSize
name|sz
init|=
name|pb
operator|->
name|fontMetrics
operator|.
name|size
argument_list|(
literal|0
argument_list|,
name|pb
operator|->
name|text
argument_list|)
decl_stmt|;
return|return
name|QStyle
operator|::
name|alignedRect
argument_list|(
name|Qt
operator|::
name|LeftToRight
argument_list|,
name|rule
operator|.
name|hasPosition
argument_list|()
condition|?
name|rule
operator|.
name|position
argument_list|()
operator|->
name|textAlignment
else|:
name|pb
operator|->
name|textAlignment
argument_list|,
name|sz
argument_list|,
name|pb
operator|->
name|rect
argument_list|)
return|;
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|SE_TabWidgetLeftCorner
case|:
name|pe
operator|=
name|PseudoElement_TabWidgetLeftCorner
expr_stmt|;
comment|// intentionally falls through
case|case
name|SE_TabWidgetRightCorner
case|:
if|if
condition|(
name|pe
operator|==
name|PseudoElement_None
condition|)
name|pe
operator|=
name|PseudoElement_TabWidgetRightCorner
expr_stmt|;
comment|// intentionally falls through
case|case
name|SE_TabWidgetTabBar
case|:
if|if
condition|(
name|pe
operator|==
name|PseudoElement_None
condition|)
name|pe
operator|=
name|PseudoElement_TabWidgetTabBar
expr_stmt|;
comment|// intentionally falls through
case|case
name|SE_TabWidgetTabPane
case|:
case|case
name|SE_TabWidgetTabContents
case|:
if|if
condition|(
name|pe
operator|==
name|PseudoElement_None
condition|)
name|pe
operator|=
name|PseudoElement_TabWidgetPane
expr_stmt|;
if|if
condition|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|pe
argument_list|)
condition|)
block|{
name|QRect
name|r
init|=
name|QWindowsStyle
operator|::
name|subElementRect
argument_list|(
name|pe
operator|==
name|PseudoElement_TabWidgetPane
condition|?
name|SE_TabWidgetTabPane
else|:
name|se
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|pe
argument_list|)
decl_stmt|;
name|r
operator|=
name|positionRect
argument_list|(
name|w
argument_list|,
name|subRule
argument_list|,
name|pe
argument_list|,
name|r
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
expr_stmt|;
if|if
condition|(
name|pe
operator|==
name|PseudoElement_TabWidgetTabBar
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|opt
argument_list|)
expr_stmt|;
name|r
operator|=
name|opt
operator|->
name|rect
operator|.
name|intersected
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|se
operator|==
name|SE_TabWidgetTabContents
condition|)
name|r
operator|=
name|subRule
operator|.
name|contentsRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
break|break;
case|case
name|SE_TabBarTearIndicator
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TabBarTear
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasContentsSize
argument_list|()
condition|)
block|{
name|QRect
name|r
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|tab
operator|->
name|shape
condition|)
block|{
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
case|case
name|QTabBar
operator|::
name|TriangularNorth
case|:
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
case|case
name|QTabBar
operator|::
name|TriangularSouth
case|:
name|r
operator|.
name|setRect
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|subRule
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
case|case
name|QTabBar
operator|::
name|TriangularWest
case|:
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
case|case
name|QTabBar
operator|::
name|TriangularEast
case|:
name|r
operator|.
name|setRect
argument_list|(
name|tab
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|tab
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|subRule
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|r
operator|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
break|break;
block|}
case|case
name|SE_TabBarTabText
case|:
case|case
name|SE_TabBarTabLeftButton
case|:
case|case
name|SE_TabBarTabRightButton
case|:
block|{
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_TabBarTab
argument_list|)
decl_stmt|;
if|if
condition|(
name|subRule
operator|.
name|hasBox
argument_list|()
operator|||
operator|!
name|subRule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
block|{
return|return
name|ParentStyle
operator|::
name|subElementRect
argument_list|(
name|se
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
return|;
block|}
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_TABBAR
case|case
name|SE_DockWidgetCloseButton
case|:
case|case
name|SE_DockWidgetFloatButton
case|:
block|{
name|PseudoElement
name|pe
init|=
operator|(
name|se
operator|==
name|SE_DockWidgetCloseButton
operator|)
condition|?
name|PseudoElement_DockWidgetCloseButton
else|:
name|PseudoElement_DockWidgetFloatButton
decl_stmt|;
name|QRenderRule
name|subRule2
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|pe
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subRule2
operator|.
name|hasPosition
argument_list|()
condition|)
break|break;
name|QRenderRule
name|subRule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|opt
argument_list|,
name|PseudoElement_DockWidgetTitle
argument_list|)
decl_stmt|;
return|return
name|positionRect
argument_list|(
name|w
argument_list|,
name|subRule
argument_list|,
name|subRule2
argument_list|,
name|pe
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|direction
argument_list|)
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
case|case
name|SE_ToolBarHandle
case|:
if|if
condition|(
name|hasStyleRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_ToolBarHandle
argument_list|)
condition|)
return|return
name|ParentStyle
operator|::
name|subElementRect
argument_list|(
name|se
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
return|;
break|break;
endif|#
directive|endif
comment|//QT_NO_TOOLBAR
comment|// On mac we make pixel adjustments to layouts which are not
comment|// desireable when you have custom style sheets on them
case|case
name|SE_CheckBoxLayoutItem
case|:
case|case
name|SE_ComboBoxLayoutItem
case|:
case|case
name|SE_DateTimeEditLayoutItem
case|:
case|case
name|SE_LabelLayoutItem
case|:
case|case
name|SE_ProgressBarLayoutItem
case|:
case|case
name|SE_PushButtonLayoutItem
case|:
case|case
name|SE_RadioButtonLayoutItem
case|:
case|case
name|SE_SliderLayoutItem
case|:
case|case
name|SE_SpinBoxLayoutItem
case|:
case|case
name|SE_ToolButtonLayoutItem
case|:
case|case
name|SE_FrameLayoutItem
case|:
case|case
name|SE_GroupBoxLayoutItem
case|:
case|case
name|SE_TabWidgetLayoutItem
case|:
if|if
condition|(
operator|!
name|rule
operator|.
name|hasNativeBorder
argument_list|()
condition|)
return|return
name|opt
operator|->
name|rect
return|;
break|break;
default|default:
break|break;
block|}
return|return
name|baseStyle
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|se
argument_list|,
name|opt
argument_list|,
name|w
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|event
name|bool
name|QStyleSheetStyle
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
return|return
operator|(
name|baseStyle
argument_list|()
operator|->
name|event
argument_list|(
name|e
argument_list|)
operator|&&
name|e
operator|->
name|isAccepted
argument_list|()
operator|)
operator|||
name|ParentStyle
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|updateStyleSheetFont
name|void
name|QStyleSheetStyle
operator|::
name|updateStyleSheetFont
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|QWidget
modifier|*
name|container
init|=
name|containerWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|container
argument_list|,
name|PseudoElement_None
argument_list|,
name|PseudoClass_Active
operator||
name|PseudoClass_Enabled
operator||
name|extendedPseudoClass
argument_list|(
name|container
argument_list|)
argument_list|)
decl_stmt|;
name|QFont
name|font
init|=
name|rule
operator|.
name|font
operator|.
name|resolve
argument_list|(
name|w
operator|->
name|font
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|||
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WindowPropagation
argument_list|)
operator|)
operator|&&
name|isNaturalChild
argument_list|(
name|w
argument_list|)
operator|&&
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|w
operator|->
name|parent
argument_list|()
argument_list|)
condition|)
block|{
name|font
operator|=
name|font
operator|.
name|resolve
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|w
operator|->
name|parent
argument_list|()
argument_list|)
operator|->
name|font
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|w
operator|->
name|data
operator|->
name|fnt
operator|==
name|font
condition|)
return|return;
name|w
operator|->
name|data
operator|->
name|fnt
operator|=
name|font
expr_stmt|;
name|QEvent
name|e
argument_list|(
name|QEvent
operator|::
name|FontChange
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|w
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveWidgetFont
name|void
name|QStyleSheetStyle
operator|::
name|saveWidgetFont
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
specifier|const
block|{
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_styleSheetWidgetFont"
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearWidgetFont
name|void
name|QStyleSheetStyle
operator|::
name|clearWidgetFont
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_styleSheetWidgetFont"
argument_list|,
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Invalid
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Polish palette that should be used for a particular widget, with particular states
end_comment
begin_comment
comment|// (eg. :focus, :hover, ...)
end_comment
begin_comment
comment|// this is called by widgets that paint themself in their paint event
end_comment
begin_comment
comment|// Returns \c true if there is a new palette in pal.
end_comment
begin_function
DECL|function|styleSheetPalette
name|bool
name|QStyleSheetStyle
operator|::
name|styleSheetPalette
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
name|QPalette
modifier|*
name|pal
parameter_list|)
block|{
if|if
condition|(
operator|!
name|w
operator|||
operator|!
name|opt
operator|||
operator|!
name|pal
condition|)
return|return
literal|false
return|;
name|RECURSION_GUARD
argument_list|(
argument|return
literal|false
argument_list|)
name|w
operator|=
name|containerWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|QRenderRule
name|rule
init|=
name|renderRule
argument_list|(
name|w
argument_list|,
name|PseudoElement_None
argument_list|,
name|pseudoClass
argument_list|(
name|opt
operator|->
name|state
argument_list|)
operator||
name|extendedPseudoClass
argument_list|(
name|w
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rule
operator|.
name|hasPalette
argument_list|()
condition|)
return|return
literal|false
return|;
name|rule
operator|.
name|configurePalette
argument_list|(
name|pal
argument_list|,
name|QPalette
operator|::
name|NoRole
argument_list|,
name|QPalette
operator|::
name|NoRole
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|resolveAlignment
name|Qt
operator|::
name|Alignment
name|QStyleSheetStyle
operator|::
name|resolveAlignment
parameter_list|(
name|Qt
operator|::
name|LayoutDirection
name|layDir
parameter_list|,
name|Qt
operator|::
name|Alignment
name|src
parameter_list|)
block|{
if|if
condition|(
name|layDir
operator|==
name|Qt
operator|::
name|LeftToRight
operator|||
name|src
operator|&
name|Qt
operator|::
name|AlignAbsolute
condition|)
return|return
name|src
return|;
if|if
condition|(
name|src
operator|&
name|Qt
operator|::
name|AlignLeft
condition|)
block|{
name|src
operator|&=
operator|~
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
name|src
operator||=
name|Qt
operator|::
name|AlignRight
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|src
operator|&
name|Qt
operator|::
name|AlignRight
condition|)
block|{
name|src
operator|&=
operator|~
name|Qt
operator|::
name|AlignRight
expr_stmt|;
name|src
operator||=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
block|}
name|src
operator||=
name|Qt
operator|::
name|AlignAbsolute
expr_stmt|;
return|return
name|src
return|;
block|}
end_function
begin_comment
comment|// Returns whether the given QWidget has a "natural" parent, meaning that
end_comment
begin_comment
comment|// the parent contains this child as part of its normal operation.
end_comment
begin_comment
comment|// An example is the QTabBar inside a QTabWidget.
end_comment
begin_comment
comment|// This does not mean that any QTabBar which is a child of QTabWidget will
end_comment
begin_comment
comment|// match, only the one that was created by the QTabWidget initialization
end_comment
begin_comment
comment|// (and hence has the correct object name).
end_comment
begin_function
DECL|function|isNaturalChild
name|bool
name|QStyleSheetStyle
operator|::
name|isNaturalChild
parameter_list|(
specifier|const
name|QObject
modifier|*
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|->
name|objectName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_"
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qstylesheetstyle_p.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STYLE_STYLESHEET
end_comment
end_unit
