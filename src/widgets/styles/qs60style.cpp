begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qs60style_p.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapcache.h"
end_include
begin_include
include|#
directive|include
file|"qcalendarwidget.h"
end_include
begin_include
include|#
directive|include
file|"qdial.h"
end_include
begin_include
include|#
directive|include
file|"qdialog.h"
end_include
begin_include
include|#
directive|include
file|"qmessagebox.h"
end_include
begin_include
include|#
directive|include
file|"qgroupbox.h"
end_include
begin_include
include|#
directive|include
file|"qheaderview.h"
end_include
begin_include
include|#
directive|include
file|"qlist.h"
end_include
begin_include
include|#
directive|include
file|"qlistwidget.h"
end_include
begin_include
include|#
directive|include
file|"qlistview.h"
end_include
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"qmenubar.h"
end_include
begin_include
include|#
directive|include
file|"qpushbutton.h"
end_include
begin_include
include|#
directive|include
file|"qscrollarea.h"
end_include
begin_include
include|#
directive|include
file|"qscrollbar.h"
end_include
begin_include
include|#
directive|include
file|"qtabbar.h"
end_include
begin_include
include|#
directive|include
file|"qtableview.h"
end_include
begin_include
include|#
directive|include
file|"qtextedit.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbar.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbutton.h"
end_include
begin_include
include|#
directive|include
file|"qfocusframe.h"
end_include
begin_include
include|#
directive|include
file|"qformlayout.h"
end_include
begin_include
include|#
directive|include
file|"qradiobutton.h"
end_include
begin_include
include|#
directive|include
file|"qcheckbox.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qprogressbar.h"
end_include
begin_include
include|#
directive|include
file|"qlabel.h"
end_include
begin_include
include|#
directive|include
file|"private/qtoolbarextension_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qcombobox_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qfont_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_S60
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_PLUGIN
argument_list|)
end_if
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|KDefaultSkinElementFlags
specifier|const
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|QS60StylePrivate
operator|::
name|KDefaultSkinElementFlags
init|=
name|SkinElementFlags
argument_list|(
name|SF_PointNorth
operator||
name|SF_StateEnabled
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|goldenRatio
specifier|static
specifier|const
name|qreal
name|goldenRatio
init|=
literal|1.618
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_layoutHeaders
specifier|const
name|layoutHeader
name|QS60StylePrivate
operator|::
name|m_layoutHeaders
index|[]
init|=
block|{
comment|// *** generated layout data ***
block|{
literal|240
block|,
literal|320
block|,
literal|1
block|,
literal|19
block|,
literal|"QVGA Landscape"
block|}
block|,
block|{
literal|320
block|,
literal|240
block|,
literal|1
block|,
literal|19
block|,
literal|"QVGA Portrait"
block|}
block|,
block|{
literal|360
block|,
literal|640
block|,
literal|1
block|,
literal|19
block|,
literal|"NHD Landscape"
block|}
block|,
block|{
literal|640
block|,
literal|360
block|,
literal|1
block|,
literal|19
block|,
literal|"NHD Portrait"
block|}
block|,
block|{
literal|352
block|,
literal|800
block|,
literal|1
block|,
literal|12
block|,
literal|"E90 Landscape"
block|}
block|,
block|{
literal|480
block|,
literal|640
block|,
literal|1
block|,
literal|19
block|,
literal|"VGA Landscape"
block|}
comment|// *** End of generated data ***
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_numberOfLayouts
specifier|const
name|int
name|QS60StylePrivate
operator|::
name|m_numberOfLayouts
init|=
operator|(
name|int
operator|)
sizeof|sizeof
argument_list|(
name|QS60StylePrivate
operator|::
name|m_layoutHeaders
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|QS60StylePrivate
operator|::
name|m_layoutHeaders
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|data
specifier|const
name|short
name|QS60StylePrivate
operator|::
name|data
index|[]
index|[
name|MAX_PIXELMETRICS
index|]
init|=
block|{
comment|// *** generated pixel metrics ***
block|{
literal|5
block|,
literal|0
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|2
block|,
operator|-
literal|1
block|,
literal|7
block|,
literal|12
block|,
literal|22
block|,
literal|15
block|,
literal|15
block|,
literal|7
block|,
literal|198
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|20
block|,
literal|13
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|21
block|,
literal|7
block|,
literal|18
block|,
literal|30
block|,
literal|3
block|,
literal|3
block|,
literal|1
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|12
block|,
literal|20
block|,
literal|15
block|,
literal|15
block|,
literal|18
block|,
literal|18
block|,
literal|1
block|,
literal|115
block|,
literal|18
block|,
literal|0
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
literal|16
block|,
literal|2
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
operator|-
literal|909
block|,
literal|16
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|32
block|,
literal|18
block|,
literal|55
block|,
literal|24
block|,
literal|55
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|9
block|,
literal|13
block|,
operator|-
literal|909
block|,
literal|5
block|,
literal|51
block|,
literal|11
block|,
literal|5
block|,
literal|0
block|,
literal|3
block|,
literal|3
block|,
literal|6
block|,
literal|8
block|,
literal|3
block|,
literal|3
block|,
operator|-
literal|909
block|,
literal|2
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|5
block|,
literal|5
block|,
literal|3
block|,
literal|1
block|,
literal|106
block|}
block|,
block|{
literal|5
block|,
literal|0
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|2
block|,
operator|-
literal|1
block|,
literal|8
block|,
literal|14
block|,
literal|22
block|,
literal|15
block|,
literal|15
block|,
literal|7
block|,
literal|164
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|19
block|,
literal|15
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|21
block|,
literal|8
block|,
literal|27
block|,
literal|28
block|,
literal|4
block|,
literal|4
block|,
literal|1
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|7
block|,
literal|6
block|,
literal|0
block|,
literal|13
block|,
literal|23
block|,
literal|17
block|,
literal|17
block|,
literal|21
block|,
literal|21
block|,
literal|7
block|,
literal|115
block|,
literal|21
block|,
literal|0
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
literal|15
block|,
literal|1
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
operator|-
literal|909
block|,
literal|15
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|32
block|,
literal|21
block|,
literal|65
block|,
literal|27
block|,
literal|65
block|,
literal|3
block|,
literal|3
block|,
literal|5
block|,
literal|10
block|,
literal|15
block|,
operator|-
literal|909
block|,
literal|5
block|,
literal|58
block|,
literal|13
block|,
literal|5
block|,
literal|0
block|,
literal|4
block|,
literal|4
block|,
literal|7
block|,
literal|9
block|,
literal|4
block|,
literal|4
block|,
operator|-
literal|909
block|,
literal|2
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|6
block|,
literal|6
block|,
literal|3
block|,
literal|1
block|,
literal|106
block|}
block|,
block|{
literal|7
block|,
literal|0
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|5
block|,
operator|-
literal|1
block|,
literal|25
block|,
literal|69
block|,
literal|46
block|,
literal|37
block|,
literal|37
block|,
literal|9
block|,
literal|258
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|23
block|,
literal|19
block|,
literal|11
block|,
literal|0
block|,
literal|0
block|,
literal|32
block|,
literal|25
block|,
literal|72
block|,
literal|44
block|,
literal|5
block|,
literal|5
block|,
literal|2
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|7
block|,
literal|21
block|,
literal|0
block|,
literal|17
block|,
literal|29
block|,
literal|22
block|,
literal|22
block|,
literal|27
block|,
literal|27
block|,
literal|7
block|,
literal|173
block|,
literal|29
block|,
literal|0
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
literal|25
block|,
literal|2
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
operator|-
literal|909
block|,
literal|25
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|87
block|,
literal|27
block|,
literal|77
block|,
literal|35
block|,
literal|77
block|,
literal|13
block|,
literal|3
block|,
literal|6
block|,
literal|8
block|,
literal|19
block|,
operator|-
literal|909
block|,
literal|7
block|,
literal|74
block|,
literal|19
block|,
literal|7
block|,
literal|0
block|,
literal|5
block|,
literal|5
block|,
literal|8
block|,
literal|12
block|,
literal|5
block|,
literal|5
block|,
operator|-
literal|909
block|,
literal|3
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|7
block|,
literal|7
block|,
literal|3
block|,
literal|1
block|,
literal|135
block|}
block|,
block|{
literal|7
block|,
literal|0
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|5
block|,
operator|-
literal|1
block|,
literal|25
block|,
literal|68
block|,
literal|46
block|,
literal|37
block|,
literal|37
block|,
literal|9
block|,
literal|258
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|31
block|,
literal|19
block|,
literal|13
block|,
literal|0
block|,
literal|0
block|,
literal|32
block|,
literal|25
block|,
literal|60
block|,
literal|52
block|,
literal|5
block|,
literal|5
block|,
literal|2
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|7
block|,
literal|32
block|,
literal|0
block|,
literal|17
block|,
literal|29
block|,
literal|22
block|,
literal|22
block|,
literal|27
block|,
literal|27
block|,
literal|7
block|,
literal|173
block|,
literal|29
block|,
literal|0
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
literal|26
block|,
literal|2
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
operator|-
literal|909
block|,
literal|26
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|87
block|,
literal|27
block|,
literal|96
block|,
literal|35
block|,
literal|96
block|,
literal|12
block|,
literal|3
block|,
literal|6
block|,
literal|8
block|,
literal|19
block|,
operator|-
literal|909
block|,
literal|7
block|,
literal|74
block|,
literal|22
block|,
literal|7
block|,
literal|0
block|,
literal|5
block|,
literal|5
block|,
literal|8
block|,
literal|12
block|,
literal|5
block|,
literal|5
block|,
operator|-
literal|909
block|,
literal|3
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|7
block|,
literal|7
block|,
literal|3
block|,
literal|1
block|,
literal|135
block|}
block|,
block|{
literal|7
block|,
literal|0
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|2
block|,
operator|-
literal|1
block|,
literal|10
block|,
literal|20
block|,
literal|27
block|,
literal|18
block|,
literal|18
block|,
literal|9
block|,
literal|301
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|29
block|,
literal|18
block|,
literal|5
block|,
literal|0
block|,
literal|0
block|,
literal|35
block|,
literal|7
block|,
literal|32
block|,
literal|30
block|,
literal|5
block|,
literal|5
block|,
literal|2
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|2
block|,
literal|8
block|,
literal|0
block|,
literal|16
block|,
literal|28
block|,
literal|21
block|,
literal|21
block|,
literal|26
block|,
literal|26
block|,
literal|2
block|,
literal|170
block|,
literal|26
block|,
literal|0
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
literal|21
block|,
literal|6
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|54
block|,
literal|26
block|,
literal|265
block|,
literal|34
block|,
literal|265
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|3
block|,
literal|18
block|,
operator|-
literal|909
block|,
literal|7
block|,
literal|72
block|,
literal|19
block|,
literal|7
block|,
literal|0
block|,
literal|5
block|,
literal|6
block|,
literal|8
block|,
literal|11
block|,
literal|6
block|,
literal|5
block|,
operator|-
literal|909
block|,
literal|2
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|5
block|,
literal|5
block|,
literal|3
block|,
literal|1
block|,
literal|106
block|}
block|,
block|{
literal|9
block|,
literal|0
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|5
block|,
operator|-
literal|1
block|,
literal|34
block|,
literal|99
block|,
literal|76
block|,
literal|51
block|,
literal|51
block|,
literal|25
block|,
literal|352
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|29
block|,
literal|25
block|,
literal|7
block|,
literal|0
block|,
literal|0
block|,
literal|43
block|,
literal|34
block|,
literal|42
block|,
literal|76
block|,
literal|7
block|,
literal|7
block|,
literal|2
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|9
block|,
literal|14
block|,
literal|0
block|,
literal|23
block|,
literal|39
block|,
literal|30
block|,
literal|30
block|,
literal|37
block|,
literal|37
block|,
literal|9
block|,
literal|391
block|,
literal|40
block|,
literal|0
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
literal|29
block|,
literal|2
block|,
operator|-
literal|909
block|,
literal|0
block|,
literal|0
block|,
operator|-
literal|909
block|,
literal|29
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|115
block|,
literal|37
block|,
literal|96
block|,
literal|48
block|,
literal|96
block|,
literal|19
block|,
literal|19
block|,
literal|9
block|,
literal|1
block|,
literal|25
block|,
operator|-
literal|909
block|,
literal|9
block|,
literal|101
block|,
literal|24
block|,
literal|9
block|,
literal|0
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|16
block|,
literal|7
block|,
literal|7
block|,
operator|-
literal|909
block|,
literal|3
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
operator|-
literal|909
block|,
literal|9
block|,
literal|9
block|,
literal|3
block|,
literal|1
block|,
literal|184
block|}
comment|// *** End of generated data ***
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_pmPointer
specifier|const
name|short
modifier|*
name|QS60StylePrivate
operator|::
name|m_pmPointer
init|=
name|QS60StylePrivate
operator|::
name|data
index|[
literal|0
index|]
decl_stmt|;
end_decl_stmt
begin_comment
comment|// theme background texture
end_comment
begin_decl_stmt
DECL|member|m_background
name|QPixmap
modifier|*
name|QS60StylePrivate
operator|::
name|m_background
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_placeHolderTexture
name|QPixmap
modifier|*
name|QS60StylePrivate
operator|::
name|m_placeHolderTexture
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|// theme palette
end_comment
begin_decl_stmt
DECL|member|m_themePalette
name|QPalette
modifier|*
name|QS60StylePrivate
operator|::
name|m_themePalette
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_webPaletteKey
name|qint64
name|QS60StylePrivate
operator|::
name|m_webPaletteKey
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_pressedWidget
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|QS60StylePrivate
operator|::
name|m_pressedWidget
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_frameElementsData
specifier|const
name|struct
name|QS60StylePrivate
operator|::
name|frameElementCenter
name|QS60StylePrivate
operator|::
name|m_frameElementsData
index|[]
init|=
block|{
block|{
name|SE_ButtonNormal
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonTbCenter
block|}
block|,
block|{
name|SE_ButtonPressed
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonTbCenterPressed
block|}
block|,
block|{
name|SE_FrameLineEdit
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrInputCenter
block|}
block|,
block|{
name|SE_ListHighlight
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrListCenter
block|}
block|,
block|{
name|SE_PopupBackground
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrPopupCenter
block|}
block|,
block|{
name|SE_SettingsList
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrSetOptCenter
block|}
block|,
block|{
name|SE_TableItem
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrCaleCenter
block|}
block|,
block|{
name|SE_TableHeaderItem
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrCaleHeadingCenter
block|}
block|,
block|{
name|SE_ToolTip
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrPopupPreviewCenter
block|}
block|,
block|{
name|SE_ToolBar
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrPopupSubCenter
block|}
block|,
block|{
name|SE_ToolBarButton
block|,
name|QS60StyleEnums
operator|::
name|SP_QgnFrSctrlButtonCenter
block|}
block|,
block|{
name|SE_ToolBarButtonPressed
block|,
name|QS60StyleEnums
operator|::
name|SP_QgnFrSctrlButtonCenterPressed
block|}
block|,
block|{
name|SE_PanelBackground
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrSetOptCenter
block|}
block|,
block|{
name|SE_ButtonInactive
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonCenterInactive
block|}
block|,
block|{
name|SE_Editor
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrInputCenter
block|}
block|,
block|{
name|SE_TableItemPressed
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrGridCenterPressed
block|}
block|,
block|{
name|SE_ListItemPressed
block|,
name|QS60StyleEnums
operator|::
name|SP_QsnFrListCenterPressed
block|}
block|, }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|frameElementsCount
specifier|static
specifier|const
name|int
name|frameElementsCount
init|=
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|QS60StylePrivate
operator|::
name|m_frameElementsData
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|QS60StylePrivate
operator|::
name|m_frameElementsData
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|KNotFound
specifier|const
name|int
name|KNotFound
init|=
operator|-
literal|909
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|KTabFontMul
specifier|const
name|double
name|KTabFontMul
init|=
literal|0.72
decl_stmt|;
end_decl_stmt
begin_destructor
DECL|function|~QS60StylePrivate
name|QS60StylePrivate
operator|::
name|~
name|QS60StylePrivate
parameter_list|()
block|{
name|clearCaches
argument_list|()
expr_stmt|;
comment|//deletes also background image
if|if
condition|(
name|m_placeHolderTexture
condition|)
block|{
operator|delete
name|m_placeHolderTexture
expr_stmt|;
name|m_placeHolderTexture
operator|=
literal|0
expr_stmt|;
block|}
name|deleteThemePalette
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_S60
name|removeAnimations
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|drawSkinElement
name|void
name|QS60StylePrivate
operator|::
name|drawSkinElement
parameter_list|(
name|SkinElements
name|element
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|SkinElementFlags
name|flags
parameter_list|)
block|{
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|SE_ButtonNormal
case|:
name|drawFrame
argument_list|(
name|SF_ButtonNormal
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ButtonPressed
case|:
name|drawFrame
argument_list|(
name|SF_ButtonPressed
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_FrameLineEdit
case|:
name|drawFrame
argument_list|(
name|SF_FrameLineEdit
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ProgressBarGrooveHorizontal
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarFrameSideL
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarFrameCenter
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarFrameSideR
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ProgressBarGrooveVertical
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarFrameSideL
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarFrameCenter
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarFrameSideR
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointEast
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ProgressBarIndicatorHorizontal
case|:
name|drawPart
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarProgress
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ProgressBarIndicatorVertical
case|:
name|drawPart
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarProgress
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointWest
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ScrollBarGrooveHorizontal
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollBgBottom
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollBgMiddle
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollBgTop
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointEast
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ScrollBarGrooveVertical
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollBgTop
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollBgMiddle
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollBgBottom
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ScrollBarHandleHorizontal
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleBottom
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleMiddle
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleTop
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointEast
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ScrollBarHandleVertical
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleTop
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleMiddle
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleBottom
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_SliderHandleHorizontal
case|:
name|drawPart
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderMarker
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_SliderHandleVertical
case|:
name|drawPart
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderMarker
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointEast
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_SliderHandleSelectedHorizontal
case|:
name|drawPart
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderMarkerSelected
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_SliderHandleSelectedVertical
case|:
name|drawPart
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderMarkerSelected
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointEast
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_SliderGrooveVertical
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderEndLeft
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderMiddle
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderEndRight
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointEast
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_SliderGrooveHorizontal
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderEndLeft
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderMiddle
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderEndRight
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_TabBarTabEastActive
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveL
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveM
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveR
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointEast
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_TabBarTabEastInactive
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveL
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveM
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveR
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointEast
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_TabBarTabNorthActive
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveL
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveM
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveR
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_TabBarTabNorthInactive
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveL
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveM
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveR
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_TabBarTabSouthActive
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveR
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveM
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveL
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointSouth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_TabBarTabSouthInactive
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveR
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveM
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveL
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointSouth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_TabBarTabWestActive
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveR
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveM
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveL
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointWest
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_TabBarTabWestInactive
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveR
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveM
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveL
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointWest
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ListHighlight
case|:
name|drawFrame
argument_list|(
name|SF_ListHighlight
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_PopupBackground
case|:
name|drawFrame
argument_list|(
name|SF_PopupBackground
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_SettingsList
case|:
name|drawFrame
argument_list|(
name|SF_SettingsList
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_TableItem
case|:
name|drawFrame
argument_list|(
name|SF_TableItem
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_TableHeaderItem
case|:
name|drawFrame
argument_list|(
name|SF_TableHeaderItem
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ToolTip
case|:
name|drawFrame
argument_list|(
name|SF_ToolTip
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ToolBar
case|:
name|drawFrame
argument_list|(
name|SF_ToolBar
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ToolBarButton
case|:
name|drawFrame
argument_list|(
name|SF_ToolBarButton
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ToolBarButtonPressed
case|:
name|drawFrame
argument_list|(
name|SF_ToolBarButtonPressed
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_PanelBackground
case|:
name|drawFrame
argument_list|(
name|SF_PanelBackground
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ScrollBarHandlePressedHorizontal
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleBottomPressed
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleMiddlePressed
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleTopPressed
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointEast
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ScrollBarHandlePressedVertical
case|:
name|drawRow
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleTopPressed
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleMiddlePressed
argument_list|,
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleBottomPressed
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ButtonInactive
case|:
name|drawFrame
argument_list|(
name|SF_ButtonInactive
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_Editor
case|:
name|drawFrame
argument_list|(
name|SF_FrameLineEdit
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_DropArea
case|:
name|drawPart
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafOrgBgGrid
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_TableItemPressed
case|:
name|drawFrame
argument_list|(
name|SF_TableItemPressed
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ListItemPressed
case|:
name|drawFrame
argument_list|(
name|SF_ListItemPressed
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
operator||
name|SF_PointNorth
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|drawSkinPart
name|void
name|QS60StylePrivate
operator|::
name|drawSkinPart
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|SkinElementFlags
name|flags
parameter_list|)
block|{
name|drawPart
argument_list|(
name|part
argument_list|,
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pixelMetric
name|short
name|QS60StylePrivate
operator|::
name|pixelMetric
parameter_list|(
name|int
name|metric
parameter_list|)
block|{
comment|//If it is a custom value, need to strip away the base to map to internal
comment|//pixel metric value table
if|if
condition|(
name|metric
operator|&
name|QStyle
operator|::
name|PM_CustomBase
condition|)
block|{
name|metric
operator|-=
name|QStyle
operator|::
name|PM_CustomBase
expr_stmt|;
name|metric
operator|+=
name|MAX_NON_CUSTOM_PIXELMETRICS
operator|-
literal|1
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|metric
operator|<
name|MAX_PIXELMETRICS
argument_list|)
expr_stmt|;
specifier|const
name|short
name|returnValue
init|=
name|m_pmPointer
index|[
name|metric
index|]
decl_stmt|;
return|return
name|returnValue
return|;
block|}
end_function
begin_function
DECL|function|stateColor
name|QColor
name|QS60StylePrivate
operator|::
name|stateColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|)
block|{
name|QColor
name|retColor
argument_list|(
name|color
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|&&
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
condition|)
block|{
name|QColor
name|hsvColor
init|=
name|retColor
operator|.
name|toHsv
argument_list|()
decl_stmt|;
name|int
name|colorSat
init|=
name|hsvColor
operator|.
name|saturation
argument_list|()
decl_stmt|;
name|int
name|colorVal
init|=
name|hsvColor
operator|.
name|value
argument_list|()
decl_stmt|;
name|colorSat
operator|=
operator|(
name|colorSat
operator|!=
literal|0
operator|)
condition|?
operator|(
name|colorSat
operator|>>
literal|1
operator|)
else|:
literal|128
expr_stmt|;
name|colorVal
operator|=
operator|(
name|colorVal
operator|!=
literal|0
operator|)
condition|?
operator|(
name|colorVal
operator|>>
literal|1
operator|)
else|:
literal|128
expr_stmt|;
name|hsvColor
operator|.
name|setHsv
argument_list|(
name|hsvColor
operator|.
name|hue
argument_list|()
argument_list|,
name|colorSat
argument_list|,
name|colorVal
argument_list|)
expr_stmt|;
name|retColor
operator|=
name|hsvColor
operator|.
name|toRgb
argument_list|()
expr_stmt|;
block|}
return|return
name|retColor
return|;
block|}
end_function
begin_function
DECL|function|lighterColor
name|QColor
name|QS60StylePrivate
operator|::
name|lighterColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|baseColor
parameter_list|)
block|{
name|QColor
name|result
argument_list|(
name|baseColor
argument_list|)
decl_stmt|;
name|bool
name|modifyColor
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|saturation
argument_list|()
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|setHsv
argument_list|(
name|result
operator|.
name|hue
argument_list|()
argument_list|,
literal|128
argument_list|,
name|result
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|modifyColor
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|value
argument_list|()
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|setHsv
argument_list|(
name|result
operator|.
name|hue
argument_list|()
argument_list|,
name|result
operator|.
name|saturation
argument_list|()
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|modifyColor
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|modifyColor
condition|)
name|result
operator|=
name|result
operator|.
name|lighter
argument_list|(
literal|175
argument_list|)
expr_stmt|;
else|else
name|result
operator|=
name|result
operator|.
name|lighter
argument_list|(
literal|225
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|drawsOwnThemeBackground
name|bool
name|QS60StylePrivate
operator|::
name|drawsOwnThemeBackground
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
return|return
operator|(
name|widget
condition|?
operator|(
name|widget
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Dialog
operator|)
else|:
literal|false
operator|)
return|;
block|}
end_function
begin_function
DECL|function|s60Font
name|QFont
name|QS60StylePrivate
operator|::
name|s60Font
parameter_list|(
name|QS60StyleEnums
operator|::
name|FontCategories
name|fontCategory
parameter_list|,
name|int
name|pointSize
parameter_list|,
name|bool
name|resolveFontSize
parameter_list|)
specifier|const
block|{
name|QFont
name|result
decl_stmt|;
name|int
name|actualPointSize
init|=
name|pointSize
decl_stmt|;
if|if
condition|(
name|actualPointSize
operator|<=
literal|0
condition|)
block|{
specifier|const
name|QFont
name|appFont
init|=
name|QApplication
operator|::
name|font
argument_list|()
decl_stmt|;
name|actualPointSize
operator|=
name|appFont
operator|.
name|pointSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|actualPointSize
operator|<=
literal|0
condition|)
name|actualPointSize
operator|=
name|appFont
operator|.
name|pixelSize
argument_list|()
operator|*
literal|72
operator|/
name|qt_defaultDpiY
argument_list|()
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|actualPointSize
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|QPair
argument_list|<
name|QS60StyleEnums
operator|::
name|FontCategories
argument_list|,
name|int
argument_list|>
name|key
argument_list|(
name|fontCategory
argument_list|,
name|actualPointSize
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_mappedFontsCache
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|result
operator|=
name|s60Font_specific
argument_list|(
name|fontCategory
argument_list|,
name|actualPointSize
argument_list|,
name|resolveFontSize
argument_list|)
expr_stmt|;
name|m_mappedFontsCache
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|m_mappedFontsCache
operator|.
name|value
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|pointSize
argument_list|()
operator|!=
name|actualPointSize
condition|)
name|result
operator|.
name|setPointSize
argument_list|(
name|actualPointSize
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|clearCaches
name|void
name|QS60StylePrivate
operator|::
name|clearCaches
parameter_list|(
name|CacheClearReason
name|reason
parameter_list|)
block|{
switch|switch
condition|(
name|reason
condition|)
block|{
case|case
name|CC_LayoutChange
case|:
comment|// when layout changes, the colors remain in cache, but graphics and fonts can change
name|m_mappedFontsCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
break|break;
case|case
name|CC_ThemeChange
case|:
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_S60
name|deleteStoredSettings
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|deleteBackground
argument_list|()
expr_stmt|;
break|break;
case|case
name|CC_UndefinedChange
case|:
default|default:
name|m_mappedFontsCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
name|deleteBackground
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|calculatedColor
name|QColor
name|QS60StylePrivate
operator|::
name|calculatedColor
parameter_list|(
name|SkinFrameElements
name|frame
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|frameCornerWidth
init|=
name|pixelMetric
argument_list|(
name|PM_FrameCornerWidth
argument_list|)
decl_stmt|;
specifier|const
name|int
name|frameCornerHeight
init|=
name|pixelMetric
argument_list|(
name|PM_FrameCornerHeight
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
literal|2
operator|*
name|frameCornerWidth
operator|<
literal|32
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
literal|2
operator|*
name|frameCornerHeight
operator|<
literal|32
argument_list|)
expr_stmt|;
specifier|const
name|QImage
name|frameImage
init|=
name|QS60StylePrivate
operator|::
name|frame
argument_list|(
name|frame
argument_list|,
name|QSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
argument_list|)
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|frameImage
operator|.
name|bytesPerLine
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|frameImage
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|Qt
operator|::
name|black
return|;
specifier|const
name|QRgb
modifier|*
name|pixelRgb
init|=
operator|(
specifier|const
name|QRgb
operator|*
operator|)
name|frameImage
operator|.
name|constBits
argument_list|()
decl_stmt|;
specifier|const
name|int
name|pixels
init|=
name|frameImage
operator|.
name|byteCount
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|QRgb
argument_list|)
decl_stmt|;
name|int
name|estimatedRed
init|=
literal|0
decl_stmt|;
name|int
name|estimatedGreen
init|=
literal|0
decl_stmt|;
name|int
name|estimatedBlue
init|=
literal|0
decl_stmt|;
name|int
name|skips
init|=
literal|0
decl_stmt|;
name|int
name|estimations
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|topBorderLastPixel
init|=
name|frameCornerHeight
operator|*
name|frameImage
operator|.
name|width
argument_list|()
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|bottomBorderFirstPixel
init|=
name|frameImage
operator|.
name|width
argument_list|()
operator|*
name|frameImage
operator|.
name|height
argument_list|()
operator|-
name|topBorderLastPixel
decl_stmt|;
specifier|const
name|int
name|rightBorderFirstPixel
init|=
name|frameImage
operator|.
name|width
argument_list|()
operator|-
name|frameCornerWidth
decl_stmt|;
specifier|const
name|int
name|leftBorderLastPixel
init|=
name|frameCornerWidth
decl_stmt|;
while|while
condition|(
operator|(
name|skips
operator|+
name|estimations
operator|)
operator|<
name|pixels
condition|)
block|{
if|if
condition|(
operator|(
name|skips
operator|+
name|estimations
operator|)
operator|>
name|topBorderLastPixel
operator|&&
operator|(
name|skips
operator|+
name|estimations
operator|)
operator|<
name|bottomBorderFirstPixel
condition|)
block|{
for|for
control|(
name|int
name|rowIndex
init|=
literal|0
init|;
name|rowIndex
operator|<
name|frameImage
operator|.
name|width
argument_list|()
condition|;
name|rowIndex
operator|++
control|)
block|{
if|if
condition|(
name|rowIndex
operator|>
name|leftBorderLastPixel
operator|&&
name|rowIndex
operator|<
name|rightBorderFirstPixel
condition|)
block|{
name|estimatedRed
operator|+=
name|qRed
argument_list|(
operator|*
name|pixelRgb
argument_list|)
expr_stmt|;
name|estimatedGreen
operator|+=
name|qGreen
argument_list|(
operator|*
name|pixelRgb
argument_list|)
expr_stmt|;
name|estimatedBlue
operator|+=
name|qBlue
argument_list|(
operator|*
name|pixelRgb
argument_list|)
expr_stmt|;
block|}
name|pixelRgb
operator|++
expr_stmt|;
name|estimations
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|pixelRgb
operator|++
expr_stmt|;
name|skips
operator|++
expr_stmt|;
block|}
block|}
name|QColor
name|frameColor
argument_list|(
name|estimatedRed
operator|/
name|estimations
argument_list|,
name|estimatedGreen
operator|/
name|estimations
argument_list|,
name|estimatedBlue
operator|/
name|estimations
argument_list|)
decl_stmt|;
return|return
operator|!
name|estimations
condition|?
name|Qt
operator|::
name|black
else|:
name|frameColor
return|;
block|}
end_function
begin_function
DECL|function|setThemePalette
name|void
name|QS60StylePrivate
operator|::
name|setThemePalette
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
argument|app
argument_list|)
name|QPalette
name|widgetPalette
init|=
name|QPalette
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
decl_stmt|;
name|setThemePalette
argument_list|(
operator|&
name|widgetPalette
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|themePalette
name|QPalette
modifier|*
name|QS60StylePrivate
operator|::
name|themePalette
parameter_list|()
block|{
return|return
name|m_themePalette
return|;
block|}
end_function
begin_function
DECL|function|equalToThemePalette
name|bool
name|QS60StylePrivate
operator|::
name|equalToThemePalette
parameter_list|(
name|QColor
name|color
parameter_list|,
name|QPalette
operator|::
name|ColorRole
name|role
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_themePalette
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|color
operator|==
name|m_themePalette
operator|->
name|color
argument_list|(
name|role
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|equalToThemePalette
name|bool
name|QS60StylePrivate
operator|::
name|equalToThemePalette
parameter_list|(
name|qint64
name|cacheKey
parameter_list|,
name|QPalette
operator|::
name|ColorRole
name|role
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_themePalette
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|cacheKey
operator|==
name|m_themePalette
operator|->
name|brush
argument_list|(
name|role
argument_list|)
operator|.
name|texture
argument_list|()
operator|.
name|cacheKey
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|setBackgroundTexture
name|void
name|QS60StylePrivate
operator|::
name|setBackgroundTexture
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
argument|app
argument_list|)
name|QPalette
name|applicationPalette
init|=
name|QApplication
operator|::
name|palette
argument_list|()
decl_stmt|;
comment|// The initial QPalette::Window is just a placeHolder QPixmap to save RAM
comment|// if the actual texture is not needed. The real texture is created just before
comment|// painting it in qt_s60_fill_background().
name|applicationPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|placeHolderTexture
argument_list|()
argument_list|)
expr_stmt|;
name|setThemePalette
argument_list|(
operator|&
name|applicationPalette
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteBackground
name|void
name|QS60StylePrivate
operator|::
name|deleteBackground
parameter_list|()
block|{
if|if
condition|(
name|m_background
condition|)
block|{
operator|delete
name|m_background
expr_stmt|;
name|m_background
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setCurrentLayout
name|void
name|QS60StylePrivate
operator|::
name|setCurrentLayout
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|m_pmPointer
operator|=
name|data
index|[
name|index
index|]
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPart
name|void
name|QS60StylePrivate
operator|::
name|drawPart
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
name|skinPart
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|SkinElementFlags
name|flags
parameter_list|)
block|{
specifier|static
specifier|const
name|bool
name|doCache
init|=
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
comment|// Freezes on 3.1. Anyways, caching is only really needed on touch UI
operator|!
operator|(
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_1
operator|||
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_2
operator|)
decl_stmt|;
else|#
directive|else
literal|true
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QPixmap
name|skinPartPixMap
argument_list|(
operator|(
name|doCache
condition|?
name|cachedPart
else|:
name|part
operator|)
operator|(
name|skinPart
operator|,
name|rect
operator|.
name|size
argument_list|()
operator|,
name|painter
operator|,
name|flags
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|skinPartPixMap
operator|.
name|isNull
argument_list|()
condition|)
name|painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|skinPartPixMap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawFrame
name|void
name|QS60StylePrivate
operator|::
name|drawFrame
parameter_list|(
name|SkinFrameElements
name|frameElement
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|SkinElementFlags
name|flags
parameter_list|)
block|{
specifier|static
specifier|const
name|bool
name|doCache
init|=
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
comment|// Freezes on 3.1. Anyways, caching is only really needed on touch UI
operator|!
operator|(
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_1
operator|||
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_2
operator|)
decl_stmt|;
else|#
directive|else
literal|true
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QPixmap
name|frameElementPixMap
argument_list|(
operator|(
name|doCache
condition|?
name|cachedFrame
else|:
name|frame
operator|)
operator|(
name|frameElement
operator|,
name|rect
operator|.
name|size
argument_list|()
operator|,
name|flags
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|frameElementPixMap
operator|.
name|isNull
argument_list|()
condition|)
name|painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|frameElementPixMap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawRow
name|void
name|QS60StylePrivate
operator|::
name|drawRow
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
name|start
parameter_list|,
name|QS60StyleEnums
operator|::
name|SkinParts
name|middle
parameter_list|,
name|QS60StyleEnums
operator|::
name|SkinParts
name|end
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|SkinElementFlags
name|flags
parameter_list|)
block|{
name|QSize
name|startEndSize
argument_list|(
name|partSize
argument_list|(
name|start
argument_list|,
name|flags
argument_list|)
argument_list|)
decl_stmt|;
name|startEndSize
operator|.
name|scale
argument_list|(
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|)
expr_stmt|;
name|QRect
name|startRect
init|=
name|QRect
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|startEndSize
argument_list|)
decl_stmt|;
name|QRect
name|middleRect
init|=
name|rect
decl_stmt|;
name|QRect
name|endRect
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|startRect
operator|.
name|setHeight
argument_list|(
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|startRect
operator|.
name|setWidth
argument_list|(
name|qMin
argument_list|(
operator|(
name|rect
operator|.
name|width
argument_list|()
operator|>>
literal|1
operator|)
operator|-
literal|1
argument_list|,
name|startRect
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|endRect
operator|=
name|startRect
operator|.
name|translated
argument_list|(
name|rect
operator|.
name|width
argument_list|()
operator|-
name|startRect
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|middleRect
operator|.
name|adjust
argument_list|(
name|startRect
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
name|startRect
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|startRect
operator|.
name|bottomRight
argument_list|()
operator|.
name|x
argument_list|()
operator|>
name|endRect
operator|.
name|topLeft
argument_list|()
operator|.
name|x
argument_list|()
condition|)
block|{
specifier|const
name|int
name|overlap
init|=
operator|(
name|startRect
operator|.
name|bottomRight
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|endRect
operator|.
name|topLeft
argument_list|()
operator|.
name|x
argument_list|()
operator|)
operator|>>
literal|1
decl_stmt|;
name|startRect
operator|.
name|setWidth
argument_list|(
name|startRect
operator|.
name|width
argument_list|()
operator|-
name|overlap
argument_list|)
expr_stmt|;
name|endRect
operator|.
name|adjust
argument_list|(
name|overlap
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|startRect
operator|.
name|setWidth
argument_list|(
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|startRect
operator|.
name|setHeight
argument_list|(
name|qMin
argument_list|(
operator|(
name|rect
operator|.
name|height
argument_list|()
operator|>>
literal|1
operator|)
operator|-
literal|1
argument_list|,
name|startRect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|endRect
operator|=
name|startRect
operator|.
name|translated
argument_list|(
literal|0
argument_list|,
name|rect
operator|.
name|height
argument_list|()
operator|-
name|startRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|middleRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|startRect
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
name|startRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|startRect
operator|.
name|topRight
argument_list|()
operator|.
name|y
argument_list|()
operator|>
name|endRect
operator|.
name|bottomLeft
argument_list|()
operator|.
name|y
argument_list|()
condition|)
block|{
specifier|const
name|int
name|overlap
init|=
operator|(
name|startRect
operator|.
name|topRight
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|endRect
operator|.
name|bottomLeft
argument_list|()
operator|.
name|y
argument_list|()
operator|)
operator|>>
literal|1
decl_stmt|;
name|startRect
operator|.
name|setHeight
argument_list|(
name|startRect
operator|.
name|height
argument_list|()
operator|-
name|overlap
argument_list|)
expr_stmt|;
name|endRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|overlap
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|#
directive|if
literal|0
block|painter->save();     painter->setOpacity(.3);     painter->fillRect(startRect, Qt::red);     painter->fillRect(middleRect, Qt::green);     painter->fillRect(endRect, Qt::blue);     painter->restore();
else|#
directive|else
name|drawPart
argument_list|(
name|start
argument_list|,
name|painter
argument_list|,
name|startRect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|middleRect
operator|.
name|isValid
argument_list|()
condition|)
name|drawPart
argument_list|(
name|middle
argument_list|,
name|painter
argument_list|,
name|middleRect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|drawPart
argument_list|(
name|end
argument_list|,
name|painter
argument_list|,
name|endRect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cachedPart
name|QPixmap
name|QS60StylePrivate
operator|::
name|cachedPart
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
name|SkinElementFlags
name|flags
parameter_list|)
block|{
name|QPixmap
name|result
decl_stmt|;
specifier|const
name|int
name|animationFrame
init|=
operator|(
name|flags
operator|&
name|SF_Animation
operator|)
condition|?
name|currentAnimationFrame
argument_list|(
name|part
argument_list|)
else|:
literal|0
decl_stmt|;
specifier|const
name|QString
name|cacheKey
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"S60Style: SkinParts=%1 QSize=%2|%3 SkinPartFlags=%4 AnimationFrame=%5"
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|int
operator|)
name|part
argument_list|)
operator|.
name|arg
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|int
operator|)
name|flags
argument_list|)
operator|.
name|arg
argument_list|(
name|animationFrame
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|cacheKey
argument_list|,
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|QS60StylePrivate
operator|::
name|part
argument_list|(
name|part
argument_list|,
name|size
argument_list|,
name|painter
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|cacheKey
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|cachedFrame
name|QPixmap
name|QS60StylePrivate
operator|::
name|cachedFrame
parameter_list|(
name|SkinFrameElements
name|frame
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|SkinElementFlags
name|flags
parameter_list|)
block|{
name|QPixmap
name|result
decl_stmt|;
specifier|const
name|QString
name|cacheKey
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"S60Style: SkinFrameElements=%1 QSize=%2|%3 SkinElementFlags=%4"
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|int
operator|)
name|frame
argument_list|)
operator|.
name|arg
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|int
operator|)
name|flags
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|cacheKey
argument_list|,
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|QS60StylePrivate
operator|::
name|frame
argument_list|(
name|frame
argument_list|,
name|size
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|cacheKey
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|setFont
name|void
name|QS60StylePrivate
operator|::
name|setFont
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QS60StyleEnums
operator|::
name|FontCategories
name|fontCategory
init|=
name|QS60StyleEnums
operator|::
name|FC_Undefined
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
return|return;
if|if
condition|(
name|qobject_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|fontCategory
operator|=
name|QS60StyleEnums
operator|::
name|FC_Primary
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|fontCategory
operator|=
name|QS60StyleEnums
operator|::
name|FC_Primary
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QHeaderView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|fontCategory
operator|=
name|QS60StyleEnums
operator|::
name|FC_Secondary
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QGroupBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|fontCategory
operator|=
name|QS60StyleEnums
operator|::
name|FC_Title
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMessageBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|fontCategory
operator|=
name|QS60StyleEnums
operator|::
name|FC_Primary
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|fontCategory
operator|=
name|QS60StyleEnums
operator|::
name|FC_Primary
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QCalendarWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|fontCategory
operator|=
name|QS60StyleEnums
operator|::
name|FC_Secondary
expr_stmt|;
block|}
if|if
condition|(
name|fontCategory
operator|!=
name|QS60StyleEnums
operator|::
name|FC_Undefined
condition|)
block|{
specifier|const
name|bool
name|resolveFontSize
init|=
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetFont
argument_list|)
operator|&&
operator|(
name|widget
operator|->
name|font
argument_list|()
operator|.
name|resolve
argument_list|()
operator|&
name|QFont
operator|::
name|SizeResolved
operator|)
decl_stmt|;
specifier|const
name|QFont
name|suggestedFont
init|=
name|s60Font
argument_list|(
name|fontCategory
argument_list|,
name|widget
operator|->
name|font
argument_list|()
operator|.
name|pointSizeF
argument_list|()
argument_list|,
name|resolveFontSize
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setFont
argument_list|(
name|suggestedFont
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setThemePalette
name|void
name|QS60StylePrivate
operator|::
name|setThemePalette
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return;
comment|//header view and its viewport need to be set 100% transparent button color, since drawing code will
comment|//draw transparent theme graphics to table column and row headers.
if|if
condition|(
name|qobject_cast
argument_list|<
name|QHeaderView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|QPalette
name|widgetPalette
init|=
name|QApplication
operator|::
name|palette
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|23
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QHeaderView
modifier|*
name|header
init|=
name|qobject_cast
argument_list|<
name|QHeaderView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|->
name|viewport
argument_list|()
condition|)
name|header
operator|->
name|viewport
argument_list|()
operator|->
name|setPalette
argument_list|(
name|widgetPalette
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QHeaderView"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QLabel
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|widget
operator|->
name|window
argument_list|()
operator|&&
name|widget
operator|->
name|window
argument_list|()
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Dialog
condition|)
block|{
name|QPalette
name|widgetPalette
init|=
name|widget
operator|->
name|palette
argument_list|()
decl_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|19
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setPalette
argument_list|(
name|widgetPalette
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setThemePalette
name|void
name|QS60StylePrivate
operator|::
name|setThemePalette
parameter_list|(
name|QPalette
modifier|*
name|palette
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|palette
condition|)
return|return;
comment|// basic colors
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|20
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|ToolTipText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|55
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|BrightText
argument_list|,
name|palette
operator|->
name|color
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|)
operator|.
name|lighter
argument_list|()
argument_list|)
expr_stmt|;
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|24
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|Link
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnHighlightColors
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|LinkVisited
argument_list|,
name|palette
operator|->
name|color
argument_list|(
name|QPalette
operator|::
name|Link
argument_list|)
operator|.
name|darker
argument_list|()
argument_list|)
expr_stmt|;
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnHighlightColors
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// The initial QPalette::Window is just a placeHolder QPixmap to save RAM
comment|// if the actual texture is not needed. The real texture is created just before
comment|// painting it in qt_s60_fill_background().
name|palette
operator|->
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|placeHolderTexture
argument_list|()
argument_list|)
expr_stmt|;
comment|// set as transparent so that styled full screen theme background is visible
name|palette
operator|->
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
comment|// set button color based on pixel colors
ifndef|#
directive|ifndef
name|Q_WS_S60
comment|//For emulated style, just calculate the color every time
specifier|const
name|QColor
name|buttonColor
init|=
name|calculatedColor
argument_list|(
name|SF_ButtonNormal
argument_list|)
decl_stmt|;
else|#
directive|else
specifier|const
name|QColor
name|buttonColor
init|=
name|colorFromFrameGraphics
argument_list|(
name|SF_ButtonNormal
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|buttonColor
argument_list|)
expr_stmt|;
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|palette
operator|->
name|color
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
operator|.
name|lighter
argument_list|()
argument_list|)
expr_stmt|;
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|,
name|palette
operator|->
name|color
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
operator|.
name|darker
argument_list|()
argument_list|)
expr_stmt|;
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|palette
operator|->
name|color
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
operator|.
name|lighter
argument_list|(
literal|125
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|Mid
argument_list|,
name|palette
operator|->
name|color
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
operator|.
name|darker
argument_list|(
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|QColor
name|alternateBase
init|=
name|palette
operator|->
name|light
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|alternateBase
operator|.
name|setAlphaF
argument_list|(
literal|0.8
argument_list|)
expr_stmt|;
name|palette
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|alternateBase
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
operator|*
name|palette
argument_list|)
expr_stmt|;
comment|//calling QApplication::setPalette clears palette hash
name|setThemePaletteHash
argument_list|(
name|palette
argument_list|)
expr_stmt|;
name|storeThemePalette
argument_list|(
name|palette
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteThemePalette
name|void
name|QS60StylePrivate
operator|::
name|deleteThemePalette
parameter_list|()
block|{
if|if
condition|(
name|m_themePalette
condition|)
block|{
operator|delete
name|m_themePalette
expr_stmt|;
name|m_themePalette
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|storeThemePalette
name|void
name|QS60StylePrivate
operator|::
name|storeThemePalette
parameter_list|(
name|QPalette
modifier|*
name|palette
parameter_list|)
block|{
name|deleteThemePalette
argument_list|()
expr_stmt|;
comment|//store specified palette for latter use.
name|m_themePalette
operator|=
operator|new
name|QPalette
argument_list|(
operator|*
name|palette
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// set widget specific palettes
end_comment
begin_function
DECL|function|setThemePaletteHash
name|void
name|QS60StylePrivate
operator|::
name|setThemePaletteHash
parameter_list|(
name|QPalette
modifier|*
name|palette
parameter_list|)
block|{
if|if
condition|(
operator|!
name|palette
condition|)
return|return;
comment|//store the original palette
name|QPalette
name|widgetPalette
init|=
operator|*
name|palette
decl_stmt|;
specifier|const
name|QColor
name|mainAreaTextColor
init|=
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnLineColors
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QSlider"
argument_list|)
expr_stmt|;
comment|// return to original palette after each widget
name|widgetPalette
operator|=
operator|*
name|palette
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|mainAreaTextColor
argument_list|)
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|mainAreaTextColor
argument_list|)
expr_stmt|;
specifier|const
name|QStyleOption
name|opt
decl_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|6
argument_list|,
operator|&
name|opt
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QPushButton"
argument_list|)
expr_stmt|;
name|widgetPalette
operator|=
operator|*
name|palette
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|mainAreaTextColor
argument_list|)
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|mainAreaTextColor
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QToolButton"
argument_list|)
expr_stmt|;
name|widgetPalette
operator|=
operator|*
name|palette
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|23
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QHeaderView"
argument_list|)
expr_stmt|;
name|widgetPalette
operator|=
operator|*
name|palette
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QMenuBar"
argument_list|)
expr_stmt|;
name|widgetPalette
operator|=
operator|*
name|palette
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|22
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QMenu"
argument_list|)
expr_stmt|;
name|widgetPalette
operator|=
operator|*
name|palette
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QTabBar"
argument_list|)
expr_stmt|;
name|widgetPalette
operator|=
operator|*
name|palette
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QListView"
argument_list|)
expr_stmt|;
name|widgetPalette
operator|=
operator|*
name|palette
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|22
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QTableView"
argument_list|)
expr_stmt|;
name|widgetPalette
operator|=
operator|*
name|palette
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|27
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|24
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QLineEdit"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QTextEdit"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QComboBox"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QSpinBox"
argument_list|)
expr_stmt|;
name|widgetPalette
operator|=
operator|*
name|palette
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QRadioButton"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QCheckBox"
argument_list|)
expr_stmt|;
name|widgetPalette
operator|=
operator|*
name|palette
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|mainAreaTextColor
argument_list|)
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|QApplication
operator|::
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|,
name|mainAreaTextColor
operator|.
name|darker
argument_list|()
argument_list|)
expr_stmt|;
name|widgetPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|mainAreaTextColor
operator|.
name|lighter
argument_list|()
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QDial"
argument_list|)
expr_stmt|;
name|widgetPalette
operator|=
operator|*
name|palette
expr_stmt|;
name|widgetPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|QBrush
argument_list|()
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|widgetPalette
argument_list|,
literal|"QScrollArea"
argument_list|)
expr_stmt|;
name|widgetPalette
operator|=
operator|*
name|palette
expr_stmt|;
comment|//Webpages should not use S60 theme colors as they are designed to work
comment|//with themeBackground and do not generally mesh well with web page backgrounds.
name|QPalette
name|webPalette
init|=
operator|*
name|palette
decl_stmt|;
name|webPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|webPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|webPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|webPalette
argument_list|,
literal|"QWebView"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|webPalette
argument_list|,
literal|"QGraphicsWebView"
argument_list|)
expr_stmt|;
name|m_webPaletteKey
operator|=
name|webPalette
operator|.
name|cacheKey
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|partSize
name|QSize
name|QS60StylePrivate
operator|::
name|partSize
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
parameter_list|,
name|SkinElementFlags
name|flags
parameter_list|)
block|{
name|QSize
name|result
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|part
condition|)
block|{
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarProgress
case|:
name|result
operator|.
name|setWidth
argument_list|(
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ProgressBarChunkWidth
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveM
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveM
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveR
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveR
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveL
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveL
case|:
comment|//Returned QSize for tabs must not be square, but narrow rectangle with width:height
comment|//ratio of 1:2 for horizontal tab bars (and 2:1 for vertical ones).
name|result
operator|.
name|setWidth
argument_list|(
name|result
operator|.
name|height
argument_list|()
operator|>>
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderEndLeft
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderEndRight
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderMiddle
case|:
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderMarker
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderMarkerSelected
case|:
name|result
operator|.
name|scale
argument_list|(
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SliderLength
argument_list|)
argument_list|,
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SliderControlThickness
argument_list|)
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|)
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarFrameSideL
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarFrameSideR
case|:
name|result
operator|.
name|setWidth
argument_list|(
name|pixelMetric
argument_list|(
name|PM_FrameCornerWidth
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleTopPressed
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollBgBottom
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollBgTop
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleBottom
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleTop
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleBottomPressed
case|:
name|result
operator|.
name|setHeight
argument_list|(
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ScrollBarExtent
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setWidth
argument_list|(
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ScrollBarExtent
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleMiddlePressed
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollBgMiddle
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleMiddle
case|:
name|result
operator|.
name|setHeight
argument_list|(
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ScrollBarExtent
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setWidth
argument_list|(
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ScrollBarSliderMin
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// Generic frame part size gathering.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|frameElementsCount
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|m_frameElementsData
index|[
name|i
index|]
operator|.
name|center
operator|-
name|part
condition|)
block|{
case|case
literal|8
case|:
comment|/* CornerTl */
case|case
literal|7
case|:
comment|/* CornerTr */
case|case
literal|6
case|:
comment|/* CornerBl */
case|case
literal|5
case|:
comment|/* CornerBr */
name|result
operator|.
name|setWidth
argument_list|(
name|pixelMetric
argument_list|(
name|PM_FrameCornerWidth
argument_list|)
argument_list|)
expr_stmt|;
comment|// Falltrough intended...
case|case
literal|4
case|:
comment|/* SideT */
case|case
literal|3
case|:
comment|/* SideB */
name|result
operator|.
name|setHeight
argument_list|(
name|pixelMetric
argument_list|(
name|PM_FrameCornerHeight
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|/* SideL */
case|case
literal|1
case|:
comment|/* SideR */
name|result
operator|.
name|setWidth
argument_list|(
name|pixelMetric
argument_list|(
name|PM_FrameCornerWidth
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0
case|:
comment|/* center */
default|default:
break|break;
block|}
block|}
break|break;
block|}
if|if
condition|(
name|flags
operator|&
operator|(
name|SF_PointEast
operator||
name|SF_PointWest
operator|)
condition|)
block|{
specifier|const
name|int
name|temp
init|=
name|result
operator|.
name|width
argument_list|()
decl_stmt|;
name|result
operator|.
name|setWidth
argument_list|(
name|result
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setHeight
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|canDrawThemeBackground
name|bool
name|QS60StylePrivate
operator|::
name|canDrawThemeBackground
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|backgroundBrush
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
comment|// Always return true for web pages.
if|if
condition|(
name|widget
operator|&&
name|m_webPaletteKey
operator|==
name|QApplication
operator|::
name|palette
argument_list|(
name|widget
argument_list|)
operator|.
name|cacheKey
argument_list|()
condition|)
return|return
literal|true
return|;
comment|//If brush is not changed from style's default values, draw theme graphics.
return|return
operator|(
name|backgroundBrush
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|transparent
operator|||
name|backgroundBrush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
end_function
begin_function
DECL|function|isWidgetPressed
name|bool
name|QS60StylePrivate
operator|::
name|isWidgetPressed
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
return|return
operator|(
name|widget
operator|&&
name|widget
operator|==
name|m_pressedWidget
operator|)
return|;
block|}
end_function
begin_comment
comment|// Generates 1*1 white pixmap as a placeholder for real texture.
end_comment
begin_comment
comment|// The actual theme texture is drawn in qt_s60_fill_background().
end_comment
begin_function
DECL|function|placeHolderTexture
name|QPixmap
name|QS60StylePrivate
operator|::
name|placeHolderTexture
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_placeHolderTexture
condition|)
block|{
name|m_placeHolderTexture
operator|=
operator|new
name|QPixmap
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|m_placeHolderTexture
operator|->
name|fill
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
block|}
return|return
operator|*
name|m_placeHolderTexture
return|;
block|}
end_function
begin_comment
comment|/*!   \class QS60Style   \brief The QS60Style class provides a look and feel suitable for applications on S60.   \since 4.6   \ingroup appearance    \sa QMacStyle, QWindowsStyle, QWindowsXPStyle, QWindowsVistaStyle, QPlastiqueStyle, QCleanlooksStyle, QMotifStyle */
end_comment
begin_comment
comment|/*!     Destroys the style. */
end_comment
begin_destructor
DECL|function|~QS60Style
name|QS60Style
operator|::
name|~
name|QS60Style
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|drawComplexControl
name|void
name|QS60Style
operator|::
name|drawComplexControl
parameter_list|(
name|ComplexControl
name|control
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
specifier|const
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
init|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|?
name|QS60StylePrivate
operator|::
name|SF_StateEnabled
else|:
name|QS60StylePrivate
operator|::
name|SF_StateDisabled
decl_stmt|;
name|SubControls
name|sub
init|=
name|option
operator|->
name|subControls
decl_stmt|;
switch|switch
condition|(
name|control
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
case|case
name|CC_ScrollBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|optionSlider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|bool
name|horizontal
init|=
name|optionSlider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
decl_stmt|;
specifier|const
name|QRect
name|scrollBarSlider
init|=
name|subControlRect
argument_list|(
name|control
argument_list|,
name|optionSlider
argument_list|,
name|SC_ScrollBarSlider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|grooveRect
init|=
name|subControlRect
argument_list|(
name|control
argument_list|,
name|optionSlider
argument_list|,
name|SC_ScrollBarGroove
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|QS60StylePrivate
operator|::
name|SkinElements
name|grooveElement
init|=
name|horizontal
condition|?
name|QS60StylePrivate
operator|::
name|SE_ScrollBarGrooveHorizontal
else|:
name|QS60StylePrivate
operator|::
name|SE_ScrollBarGrooveVertical
decl_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|grooveElement
argument_list|,
name|painter
argument_list|,
name|grooveRect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
specifier|const
name|SubControls
name|subControls
init|=
name|optionSlider
operator|->
name|subControls
decl_stmt|;
comment|// select correct slider (horizontal/vertical/pressed)
specifier|const
name|bool
name|sliderPressed
init|=
operator|(
operator|(
name|optionSlider
operator|->
name|state
operator|&
name|State_Sunken
operator|)
operator|&&
operator|(
name|subControls
operator|&
name|SC_ScrollBarSlider
operator|)
operator|)
decl_stmt|;
specifier|const
name|QS60StylePrivate
operator|::
name|SkinElements
name|handleElement
init|=
name|horizontal
condition|?
operator|(
name|sliderPressed
condition|?
name|QS60StylePrivate
operator|::
name|SE_ScrollBarHandlePressedHorizontal
else|:
name|QS60StylePrivate
operator|::
name|SE_ScrollBarHandleHorizontal
operator|)
else|:
operator|(
name|sliderPressed
condition|?
name|QS60StylePrivate
operator|::
name|SE_ScrollBarHandlePressedVertical
else|:
name|QS60StylePrivate
operator|::
name|SE_ScrollBarHandleVertical
operator|)
decl_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|handleElement
argument_list|,
name|painter
argument_list|,
name|scrollBarSlider
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SCROLLBAR
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|CC_Slider
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|optionSlider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|QRect
name|sliderGroove
init|=
name|subControlRect
argument_list|(
name|control
argument_list|,
name|optionSlider
argument_list|,
name|SC_SliderGroove
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|horizontal
init|=
name|optionSlider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
decl_stmt|;
comment|//Highlight
comment|/*            if (optionSlider->state& State_HasFocus)                 drawPrimitive(PE_FrameFocusRect, optionSlider, painter, widget);*/
comment|//Groove graphics
if|if
condition|(
name|QS60StylePrivate
operator|::
name|hasSliderGrooveGraphic
argument_list|()
condition|)
block|{
specifier|const
name|QS60StylePrivate
operator|::
name|SkinElements
name|grooveElement
init|=
name|horizontal
condition|?
name|QS60StylePrivate
operator|::
name|SE_SliderGrooveHorizontal
else|:
name|QS60StylePrivate
operator|::
name|SE_SliderGrooveVertical
decl_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|grooveElement
argument_list|,
name|painter
argument_list|,
name|sliderGroove
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QPoint
name|sliderGrooveCenter
init|=
name|sliderGroove
operator|.
name|center
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|horizontal
init|=
name|optionSlider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|widget
condition|)
name|painter
operator|->
name|setPen
argument_list|(
name|widget
operator|->
name|palette
argument_list|()
operator|.
name|windowText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|horizontal
condition|)
name|painter
operator|->
name|drawLine
argument_list|(
literal|0
argument_list|,
name|sliderGrooveCenter
operator|.
name|y
argument_list|()
argument_list|,
name|sliderGroove
operator|.
name|right
argument_list|()
argument_list|,
name|sliderGrooveCenter
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|drawLine
argument_list|(
name|sliderGrooveCenter
operator|.
name|x
argument_list|()
argument_list|,
literal|0
argument_list|,
name|sliderGrooveCenter
operator|.
name|x
argument_list|()
argument_list|,
name|sliderGroove
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
comment|//Handle graphics
specifier|const
name|QRect
name|sliderHandle
init|=
name|subControlRect
argument_list|(
name|control
argument_list|,
name|optionSlider
argument_list|,
name|SC_SliderHandle
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QS60StylePrivate
operator|::
name|SkinElements
name|handleElement
decl_stmt|;
if|if
condition|(
name|optionSlider
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|handleElement
operator|=
name|horizontal
condition|?
name|QS60StylePrivate
operator|::
name|SE_SliderHandleSelectedHorizontal
else|:
name|QS60StylePrivate
operator|::
name|SE_SliderHandleSelectedVertical
expr_stmt|;
else|else
name|handleElement
operator|=
name|horizontal
condition|?
name|QS60StylePrivate
operator|::
name|SE_SliderHandleHorizontal
else|:
name|QS60StylePrivate
operator|::
name|SE_SliderHandleVertical
expr_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|handleElement
argument_list|,
name|painter
argument_list|,
name|sliderHandle
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SLIDER
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cmb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|QRect
name|cmbxEditField
init|=
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|option
argument_list|,
name|SC_ComboBoxEditField
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|cmbxFrame
init|=
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|option
argument_list|,
name|SC_ComboBoxFrame
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|direction
init|=
name|cmb
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
decl_stmt|;
comment|// Button frame
name|QStyleOptionFrame
name|buttonOption
decl_stmt|;
name|buttonOption
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|cmb
argument_list|)
expr_stmt|;
specifier|const
name|int
name|maxButtonSide
init|=
name|cmbxFrame
operator|.
name|width
argument_list|()
operator|-
name|cmbxEditField
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|newTop
init|=
name|cmbxEditField
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|maxButtonSide
operator|/
literal|2
decl_stmt|;
specifier|const
name|int
name|topLeftPoint
init|=
name|direction
condition|?
operator|(
name|cmbxEditField
operator|.
name|right
argument_list|()
operator|+
literal|1
operator|)
else|:
operator|(
name|cmbxEditField
operator|.
name|left
argument_list|()
operator|+
literal|1
operator|-
name|maxButtonSide
operator|)
decl_stmt|;
specifier|const
name|QRect
name|buttonRect
argument_list|(
name|topLeftPoint
argument_list|,
name|newTop
argument_list|,
name|maxButtonSide
argument_list|,
name|maxButtonSide
argument_list|)
decl_stmt|;
name|buttonOption
operator|.
name|rect
operator|=
name|buttonRect
expr_stmt|;
name|buttonOption
operator|.
name|state
operator|=
name|cmb
operator|->
name|state
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_PanelButtonCommand
argument_list|,
operator|&
name|buttonOption
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
comment|// draw label background - label itself is drawn separately
specifier|const
name|QS60StylePrivate
operator|::
name|SkinElements
name|skinElement
init|=
name|QS60StylePrivate
operator|::
name|SE_FrameLineEdit
decl_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|skinElement
argument_list|,
name|painter
argument_list|,
name|cmbxEditField
argument_list|,
name|flags
argument_list|)
expr_stmt|;
comment|// Draw the combobox arrow
if|if
condition|(
name|sub
operator|&
name|SC_ComboBoxArrow
condition|)
block|{
comment|// Make rect slightly smaller
name|buttonOption
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_IndicatorSpinDown
argument_list|,
operator|&
name|buttonOption
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
ifndef|#
directive|ifndef
name|QT_NO_TOOLBUTTON
case|case
name|CC_ToolButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|toolBtn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|State
name|bflags
init|=
name|toolBtn
operator|->
name|state
operator|&
operator|~
name|State_Sunken
decl_stmt|;
if|if
condition|(
name|bflags
operator|&
name|State_AutoRaise
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|bflags
operator|&
name|State_MouseOver
operator|)
operator|||
operator|!
operator|(
name|bflags
operator|&
name|State_Enabled
operator|)
condition|)
block|{
name|bflags
operator|&=
operator|~
name|State_Raised
expr_stmt|;
block|}
block|}
name|State
name|mflags
init|=
name|bflags
decl_stmt|;
if|if
condition|(
name|toolBtn
operator|->
name|state
operator|&
name|State_Sunken
condition|)
block|{
name|bflags
operator||=
name|State_Sunken
expr_stmt|;
name|mflags
operator||=
name|State_Sunken
expr_stmt|;
block|}
specifier|const
name|QRect
name|button
argument_list|(
name|subControlRect
argument_list|(
name|control
argument_list|,
name|toolBtn
argument_list|,
name|SC_ToolButton
argument_list|,
name|widget
argument_list|)
argument_list|)
decl_stmt|;
name|QRect
name|menuRect
init|=
name|QRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|toolBtn
operator|->
name|subControls
operator|&
name|SC_ToolButtonMenu
condition|)
name|menuRect
operator|=
name|subControlRect
argument_list|(
name|control
argument_list|,
name|toolBtn
argument_list|,
name|SC_ToolButtonMenu
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|toolBtn
operator|->
name|subControls
operator|&
name|SC_ToolButton
condition|)
block|{
name|QStyleOption
name|tool
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|tool
operator|.
name|palette
operator|=
name|toolBtn
operator|->
name|palette
expr_stmt|;
if|if
condition|(
name|bflags
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator||
name|State_Raised
operator||
name|State_Enabled
operator|)
condition|)
block|{
name|tool
operator|.
name|rect
operator|=
name|button
operator|.
name|unite
argument_list|(
name|menuRect
argument_list|)
expr_stmt|;
name|tool
operator|.
name|state
operator|=
name|bflags
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_PanelButtonTool
argument_list|,
operator|&
name|tool
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toolBtn
operator|->
name|subControls
operator|&
name|SC_ToolButtonMenu
condition|)
block|{
name|tool
operator|.
name|rect
operator|=
name|menuRect
expr_stmt|;
name|tool
operator|.
name|state
operator|=
name|mflags
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|tool
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
name|QStyleOptionToolButton
name|toolButton
init|=
operator|*
name|toolBtn
decl_stmt|;
if|if
condition|(
name|toolBtn
operator|->
name|features
operator|&
name|QStyleOptionToolButton
operator|::
name|Arrow
condition|)
block|{
name|PrimitiveElement
name|pe
decl_stmt|;
switch|switch
condition|(
name|toolBtn
operator|->
name|arrowType
condition|)
block|{
case|case
name|Qt
operator|::
name|LeftArrow
case|:
name|pe
operator|=
name|PE_IndicatorArrowLeft
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|RightArrow
case|:
name|pe
operator|=
name|PE_IndicatorArrowRight
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UpArrow
case|:
name|pe
operator|=
name|PE_IndicatorArrowUp
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DownArrow
case|:
name|pe
operator|=
name|PE_IndicatorArrowDown
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|toolButton
operator|.
name|rect
operator|=
name|button
expr_stmt|;
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|toolButton
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toolBtn
operator|->
name|text
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|||
operator|!
name|toolBtn
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|int
name|frameWidth
init|=
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|toolButton
operator|.
name|rect
operator|=
name|button
operator|.
name|adjusted
argument_list|(
name|frameWidth
argument_list|,
name|frameWidth
argument_list|,
operator|-
name|frameWidth
argument_list|,
operator|-
name|frameWidth
argument_list|)
expr_stmt|;
name|drawControl
argument_list|(
name|CE_ToolButtonLabel
argument_list|,
operator|&
name|toolButton
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_TOOLBUTTON
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOptionSpinBox
name|copy
init|=
operator|*
name|spinBox
decl_stmt|;
name|PrimitiveElement
name|pe
decl_stmt|;
if|if
condition|(
name|spinBox
operator|->
name|subControls
operator|&
name|SC_SpinBoxUp
condition|)
block|{
name|copy
operator|.
name|subControls
operator|=
name|SC_SpinBoxUp
expr_stmt|;
name|QPalette
name|spinBoxPal
init|=
name|spinBox
operator|->
name|palette
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|spinBox
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepUpEnabled
operator|)
condition|)
block|{
name|spinBoxPal
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Enabled
expr_stmt|;
name|copy
operator|.
name|palette
operator|=
name|spinBoxPal
expr_stmt|;
block|}
if|if
condition|(
name|spinBox
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxUp
operator|&&
operator|(
name|spinBox
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
block|{
name|copy
operator|.
name|state
operator||=
name|State_On
expr_stmt|;
name|copy
operator|.
name|state
operator||=
name|State_Sunken
expr_stmt|;
block|}
else|else
block|{
name|copy
operator|.
name|state
operator||=
name|State_Raised
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Sunken
expr_stmt|;
block|}
name|pe
operator|=
operator|(
name|spinBox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|PlusMinus
operator|)
condition|?
name|PE_IndicatorSpinPlus
else|:
name|PE_IndicatorSpinUp
expr_stmt|;
name|copy
operator|.
name|rect
operator|=
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|spinBox
argument_list|,
name|SC_SpinBoxUp
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_PanelButtonBevel
argument_list|,
operator|&
name|copy
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|copy
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spinBox
operator|->
name|subControls
operator|&
name|SC_SpinBoxDown
condition|)
block|{
name|copy
operator|.
name|subControls
operator|=
name|SC_SpinBoxDown
expr_stmt|;
name|copy
operator|.
name|state
operator|=
name|spinBox
operator|->
name|state
expr_stmt|;
name|QPalette
name|spinBoxPal
init|=
name|spinBox
operator|->
name|palette
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|spinBox
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepDownEnabled
operator|)
condition|)
block|{
name|spinBoxPal
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Enabled
expr_stmt|;
name|copy
operator|.
name|palette
operator|=
name|spinBoxPal
expr_stmt|;
block|}
if|if
condition|(
name|spinBox
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxDown
operator|&&
operator|(
name|spinBox
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
block|{
name|copy
operator|.
name|state
operator||=
name|State_On
expr_stmt|;
name|copy
operator|.
name|state
operator||=
name|State_Sunken
expr_stmt|;
block|}
else|else
block|{
name|copy
operator|.
name|state
operator||=
name|State_Raised
expr_stmt|;
name|copy
operator|.
name|state
operator|&=
operator|~
name|State_Sunken
expr_stmt|;
block|}
name|pe
operator|=
operator|(
name|spinBox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|PlusMinus
operator|)
condition|?
name|PE_IndicatorSpinMinus
else|:
name|PE_IndicatorSpinDown
expr_stmt|;
name|copy
operator|.
name|rect
operator|=
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|spinBox
argument_list|,
name|SC_SpinBoxDown
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_PanelButtonBevel
argument_list|,
operator|&
name|copy
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|copy
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|pe
argument_list|,
operator|&
name|copy
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_SPINBOX
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
case|case
name|CC_GroupBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|groupBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
comment|// Draw frame
specifier|const
name|QRect
name|textRect
init|=
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|option
argument_list|,
name|SC_GroupBoxLabel
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|checkBoxRect
init|=
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|option
argument_list|,
name|SC_GroupBoxCheckBox
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|SC_GroupBoxFrame
condition|)
block|{
name|QStyleOptionFrameV2
name|frame
decl_stmt|;
name|frame
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|groupBox
argument_list|)
expr_stmt|;
name|frame
operator|.
name|features
operator|=
name|groupBox
operator|->
name|features
expr_stmt|;
name|frame
operator|.
name|lineWidth
operator|=
name|groupBox
operator|->
name|lineWidth
expr_stmt|;
name|frame
operator|.
name|midLineWidth
operator|=
name|groupBox
operator|->
name|midLineWidth
expr_stmt|;
name|frame
operator|.
name|rect
operator|=
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|option
argument_list|,
name|SC_GroupBoxFrame
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_FrameGroupBox
argument_list|,
operator|&
name|frame
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
comment|// Draw title
if|if
condition|(
operator|(
name|groupBox
operator|->
name|subControls
operator|&
name|SC_GroupBoxLabel
operator|)
operator|&&
operator|!
name|groupBox
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QColor
name|textColor
init|=
name|groupBox
operator|->
name|textColor
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|textColor
operator|.
name|isValid
argument_list|()
condition|)
name|painter
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|int
name|alignment
init|=
name|int
argument_list|(
name|groupBox
operator|->
name|textAlignment
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
condition|)
name|alignment
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|textRect
argument_list|,
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|AlignHCenter
operator||
name|Qt
operator|::
name|AlignVCenter
operator||
name|alignment
argument_list|,
name|groupBox
operator|->
name|palette
argument_list|,
name|groupBox
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|groupBox
operator|->
name|text
argument_list|,
name|textColor
operator|.
name|isValid
argument_list|()
condition|?
name|QPalette
operator|::
name|NoRole
else|:
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
comment|// Draw checkbox
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|SC_GroupBoxCheckBox
condition|)
block|{
name|QStyleOptionButton
name|box
decl_stmt|;
name|box
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|groupBox
argument_list|)
expr_stmt|;
name|box
operator|.
name|rect
operator|=
name|checkBoxRect
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_IndicatorCheckBox
argument_list|,
operator|&
name|box
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_GROUPBOX
default|default:
name|QCommonStyle
operator|::
name|drawComplexControl
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|drawControl
name|void
name|QS60Style
operator|::
name|drawControl
parameter_list|(
name|ControlElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QS60Style
argument_list|)
expr_stmt|;
specifier|const
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
init|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|?
name|QS60StylePrivate
operator|::
name|SF_StateEnabled
else|:
name|QS60StylePrivate
operator|::
name|SF_StateDisabled
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|CE_CheckBox
case|:
case|case
name|CE_RadioButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|bool
name|isRadio
init|=
operator|(
name|element
operator|==
name|CE_RadioButton
operator|)
decl_stmt|;
name|QStyleOptionButton
name|subopt
init|=
operator|*
name|btn
decl_stmt|;
comment|// Highlight needs to be drawn first, as it goes "underneath" the text and indicator.
if|if
condition|(
name|btn
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|btn
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonFocusRect
else|:
name|SE_CheckBoxFocusRect
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fropt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|subopt
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|subopt
operator|.
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subopt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonIndicator
else|:
name|SE_CheckBoxIndicator
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|isRadio
condition|?
name|PE_IndicatorRadioButton
else|:
name|PE_IndicatorCheckBox
argument_list|,
operator|&
name|subopt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|subopt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonContents
else|:
name|SE_CheckBoxContents
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|drawControl
argument_list|(
name|isRadio
condition|?
name|CE_RadioButtonLabel
else|:
name|CE_CheckBoxLabel
argument_list|,
operator|&
name|subopt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CE_PushButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|drawControl
argument_list|(
name|CE_PushButtonBevel
argument_list|,
name|btn
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QStyleOptionButton
name|subopt
init|=
operator|*
name|btn
decl_stmt|;
name|subopt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|SE_PushButtonContents
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|drawControl
argument_list|(
name|CE_PushButtonLabel
argument_list|,
operator|&
name|subopt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CE_PushButtonBevel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|bool
name|isDisabled
init|=
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
decl_stmt|;
specifier|const
name|bool
name|isFlat
init|=
name|button
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|Flat
decl_stmt|;
name|QS60StyleEnums
operator|::
name|SkinParts
name|skinPart
decl_stmt|;
name|QS60StylePrivate
operator|::
name|SkinElements
name|skinElement
decl_stmt|;
if|if
condition|(
operator|!
name|isDisabled
condition|)
block|{
specifier|const
name|bool
name|isPressed
init|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
operator|||
operator|(
name|option
operator|->
name|state
operator|&
name|State_On
operator|)
decl_stmt|;
if|if
condition|(
name|isFlat
condition|)
block|{
name|skinPart
operator|=
name|isPressed
condition|?
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonTbCenterPressed
else|:
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonTbCenter
expr_stmt|;
block|}
else|else
block|{
name|skinElement
operator|=
name|isPressed
condition|?
name|QS60StylePrivate
operator|::
name|SE_ButtonPressed
else|:
name|QS60StylePrivate
operator|::
name|SE_ButtonNormal
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isFlat
condition|)
name|skinPart
operator|=
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonCenterInactive
expr_stmt|;
else|else
name|skinElement
operator|=
name|QS60StylePrivate
operator|::
name|SE_ButtonInactive
expr_stmt|;
block|}
if|if
condition|(
name|isFlat
condition|)
name|QS60StylePrivate
operator|::
name|drawSkinPart
argument_list|(
name|skinPart
argument_list|,
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
else|else
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|skinElement
argument_list|,
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBUTTON
case|case
name|CE_ToolButtonLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|toolBtn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOptionToolButton
name|optionToolButton
init|=
operator|*
name|toolBtn
decl_stmt|;
if|if
condition|(
operator|!
name|optionToolButton
operator|.
name|icon
operator|.
name|isNull
argument_list|()
operator|&&
operator|(
name|optionToolButton
operator|.
name|state
operator|&
name|State_Sunken
operator|)
operator|&&
operator|(
name|optionToolButton
operator|.
name|state
operator|&
name|State_Enabled
operator|)
condition|)
block|{
specifier|const
name|QIcon
operator|::
name|State
name|state
init|=
name|optionToolButton
operator|.
name|state
operator|&
name|State_On
condition|?
name|QIcon
operator|::
name|On
else|:
name|QIcon
operator|::
name|Off
decl_stmt|;
specifier|const
name|QPixmap
name|pm
argument_list|(
name|optionToolButton
operator|.
name|icon
operator|.
name|pixmap
argument_list|(
name|optionToolButton
operator|.
name|rect
operator|.
name|size
argument_list|()
operator|.
name|boundedTo
argument_list|(
name|optionToolButton
operator|.
name|iconSize
argument_list|)
argument_list|,
name|QIcon
operator|::
name|Normal
argument_list|,
name|state
argument_list|)
argument_list|)
decl_stmt|;
name|optionToolButton
operator|.
name|icon
operator|=
name|generatedIconPixmap
argument_list|(
name|QIcon
operator|::
name|Selected
argument_list|,
name|pm
argument_list|,
operator|&
name|optionToolButton
argument_list|)
expr_stmt|;
block|}
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
operator|&
name|optionToolButton
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_TOOLBUTTON
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CE_ComboBoxLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|comboBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOption
name|optionComboBox
init|=
operator|*
name|comboBox
decl_stmt|;
name|optionComboBox
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|optionComboBox
operator|.
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|optionComboBox
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|optionComboBox
operator|.
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|editRect
init|=
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|comboBox
argument_list|,
name|SC_ComboBoxEditField
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|int
name|frameW
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|comboBox
operator|->
name|currentIcon
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|comboBox
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|QIcon
operator|::
name|Normal
else|:
name|QIcon
operator|::
name|Disabled
decl_stmt|;
specifier|const
name|QPixmap
name|pixmap
init|=
name|comboBox
operator|->
name|currentIcon
operator|.
name|pixmap
argument_list|(
name|comboBox
operator|->
name|iconSize
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|QRect
name|iconRect
argument_list|(
name|editRect
argument_list|)
decl_stmt|;
name|iconRect
operator|.
name|setWidth
argument_list|(
name|comboBox
operator|->
name|iconSize
operator|.
name|width
argument_list|()
operator|+
name|frameW
argument_list|)
expr_stmt|;
name|iconRect
operator|=
name|alignedRect
argument_list|(
name|comboBox
operator|->
name|direction
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|,
name|iconRect
operator|.
name|size
argument_list|()
argument_list|,
name|editRect
argument_list|)
expr_stmt|;
if|if
condition|(
name|comboBox
operator|->
name|editable
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|iconRect
argument_list|,
name|optionComboBox
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
argument_list|)
expr_stmt|;
name|drawItemPixmap
argument_list|(
name|painter
argument_list|,
name|iconRect
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|comboBox
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|editRect
operator|.
name|setRight
argument_list|(
name|editRect
operator|.
name|right
argument_list|()
operator|-
name|frameW
operator|-
name|comboBox
operator|->
name|iconSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|editRect
operator|.
name|setLeft
argument_list|(
name|comboBox
operator|->
name|iconSize
operator|.
name|width
argument_list|()
operator|+
name|frameW
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|comboBox
operator|->
name|currentText
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|comboBox
operator|->
name|editable
condition|)
block|{
specifier|const
name|Qt
operator|::
name|TextElideMode
name|elideMode
init|=
operator|(
name|comboBox
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
operator|)
condition|?
name|Qt
operator|::
name|ElideRight
else|:
name|Qt
operator|::
name|ElideLeft
decl_stmt|;
specifier|const
name|QString
name|text
init|=
name|comboBox
operator|->
name|fontMetrics
operator|.
name|elidedText
argument_list|(
name|comboBox
operator|->
name|currentText
argument_list|,
name|elideMode
argument_list|,
name|editRect
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|QCommonStyle
operator|::
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|editRect
operator|.
name|adjusted
argument_list|(
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_FrameCornerWidth
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|visualAlignment
argument_list|(
name|comboBox
operator|->
name|direction
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
argument_list|,
name|comboBox
operator|->
name|palette
argument_list|,
name|comboBox
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_COMBOBOX
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
case|case
name|CE_ItemViewItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionViewItemV4
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItemV4
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOptionViewItemV4
name|voptAdj
init|=
operator|*
name|vopt
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
name|voptAdj
operator|.
name|rect
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|isSelected
init|=
operator|(
name|vopt
operator|->
name|state
operator|&
name|State_Selected
operator|)
decl_stmt|;
specifier|const
name|bool
name|hasFocus
init|=
operator|(
name|vopt
operator|->
name|state
operator|&
name|State_HasFocus
operator|)
decl_stmt|;
name|bool
name|isScrollBarVisible
init|=
literal|false
decl_stmt|;
name|int
name|scrollBarWidth
init|=
literal|0
decl_stmt|;
name|QList
argument_list|<
name|QScrollBar
modifier|*
argument_list|>
name|scrollBars
init|=
name|widget
operator|->
name|findChildren
argument_list|<
name|QScrollBar
operator|*
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scrollBars
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QScrollBar
modifier|*
name|scrollBar
init|=
name|scrollBars
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|scrollBar
operator|&&
name|scrollBar
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Vertical
condition|)
block|{
name|isScrollBarVisible
operator|=
name|scrollBar
operator|->
name|isVisible
argument_list|()
expr_stmt|;
name|scrollBarWidth
operator|=
name|scrollBar
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|int
name|rightValue
init|=
name|widget
condition|?
name|widget
operator|->
name|contentsRect
argument_list|()
operator|.
name|right
argument_list|()
else|:
name|voptAdj
operator|.
name|rect
operator|.
name|right
argument_list|()
decl_stmt|;
if|if
condition|(
name|isScrollBarVisible
condition|)
name|rightValue
operator|-=
name|scrollBarWidth
expr_stmt|;
if|if
condition|(
name|voptAdj
operator|.
name|rect
operator|.
name|right
argument_list|()
operator|>
name|rightValue
condition|)
name|voptAdj
operator|.
name|rect
operator|.
name|setRight
argument_list|(
name|rightValue
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|iconRect
init|=
name|subElementRect
argument_list|(
name|SE_ItemViewItemDecoration
argument_list|,
operator|&
name|voptAdj
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|textRect
init|=
name|subElementRect
argument_list|(
name|SE_ItemViewItemText
argument_list|,
operator|&
name|voptAdj
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|QAbstractItemView
modifier|*
name|itemView
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|singleSelection
init|=
name|itemView
operator|&&
operator|(
operator|(
name|itemView
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|SingleSelection
operator|||
name|itemView
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|NoSelection
operator|)
operator|)
decl_stmt|;
specifier|const
name|bool
name|selectItems
init|=
name|itemView
operator|&&
operator|(
name|itemView
operator|->
name|selectionBehavior
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|SelectItems
operator|)
decl_stmt|;
comment|// draw themed background for itemview unless background brush has been defined.
if|if
condition|(
name|vopt
operator|->
name|backgroundBrush
operator|==
name|Qt
operator|::
name|NoBrush
condition|)
block|{
if|if
condition|(
name|itemView
condition|)
block|{
comment|//With single item selection, use highlight focus as selection indicator.
if|if
condition|(
name|singleSelection
operator|&&
name|isSelected
condition|)
block|{
name|voptAdj
operator|.
name|state
operator|=
name|voptAdj
operator|.
name|state
operator||
name|State_HasFocus
expr_stmt|;
if|if
condition|(
operator|!
name|hasFocus
operator|&&
name|selectItems
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setOpacity
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
block|}
block|}
name|drawPrimitive
argument_list|(
name|PE_PanelItemViewItem
argument_list|,
operator|&
name|voptAdj
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|singleSelection
operator|&&
name|isSelected
operator|&&
operator|!
name|hasFocus
operator|&&
name|selectItems
condition|)
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|PE_PanelItemViewItem
argument_list|,
operator|&
name|voptAdj
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
comment|// draw the icon
specifier|const
name|QIcon
operator|::
name|Mode
name|mode
init|=
operator|(
name|voptAdj
operator|.
name|state
operator|&
name|State_Enabled
operator|)
condition|?
name|QIcon
operator|::
name|Normal
else|:
name|QIcon
operator|::
name|Disabled
decl_stmt|;
specifier|const
name|QIcon
operator|::
name|State
name|state
init|=
operator|(
name|voptAdj
operator|.
name|state
operator|&
name|State_Open
operator|)
condition|?
name|QIcon
operator|::
name|On
else|:
name|QIcon
operator|::
name|Off
decl_stmt|;
name|voptAdj
operator|.
name|icon
operator|.
name|paint
argument_list|(
name|painter
argument_list|,
name|iconRect
argument_list|,
name|voptAdj
operator|.
name|decorationAlignment
argument_list|,
name|mode
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// Draw selection check mark or checkbox
if|if
condition|(
name|itemView
operator|&&
operator|(
operator|!
name|singleSelection
operator|||
operator|(
name|vopt
operator|->
name|features
operator|&
name|QStyleOptionViewItemV2
operator|::
name|HasCheckIndicator
operator|)
operator|)
condition|)
block|{
specifier|const
name|QRect
name|selectionRect
init|=
name|subElementRect
argument_list|(
name|SE_ItemViewItemCheckIndicator
argument_list|,
operator|&
name|voptAdj
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QStyleOptionViewItemV4
name|checkMarkOption
argument_list|(
name|voptAdj
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectionRect
operator|.
name|isValid
argument_list|()
condition|)
name|checkMarkOption
operator|.
name|rect
operator|=
name|selectionRect
expr_stmt|;
comment|// Draw selection mark.
if|if
condition|(
name|isSelected
operator|&&
name|selectItems
condition|)
block|{
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorViewItemCheck
argument_list|,
operator|&
name|checkMarkOption
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
comment|// @todo: this should happen in the rect retrievel i.e. subElementRect()
if|if
condition|(
name|textRect
operator|.
name|right
argument_list|()
operator|>
name|selectionRect
operator|.
name|left
argument_list|()
condition|)
name|textRect
operator|.
name|setRight
argument_list|(
name|selectionRect
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|voptAdj
operator|.
name|features
operator|&
name|QStyleOptionViewItemV2
operator|::
name|HasCheckIndicator
condition|)
block|{
name|checkMarkOption
operator|.
name|state
operator|=
name|checkMarkOption
operator|.
name|state
operator|&
operator|~
name|State_HasFocus
expr_stmt|;
switch|switch
condition|(
name|vopt
operator|->
name|checkState
condition|)
block|{
case|case
name|Qt
operator|::
name|Unchecked
case|:
name|checkMarkOption
operator|.
name|state
operator||=
name|State_Off
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|PartiallyChecked
case|:
name|checkMarkOption
operator|.
name|state
operator||=
name|State_NoChange
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Checked
case|:
name|checkMarkOption
operator|.
name|state
operator||=
name|State_On
expr_stmt|;
break|break;
block|}
name|drawPrimitive
argument_list|(
name|PE_IndicatorViewItemCheck
argument_list|,
operator|&
name|checkMarkOption
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
comment|// draw the text
if|if
condition|(
operator|!
name|voptAdj
operator|.
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasFocus
condition|)
name|painter
operator|->
name|setPen
argument_list|(
name|voptAdj
operator|.
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|setPen
argument_list|(
name|voptAdj
operator|.
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|viewItemDrawText
argument_list|(
name|painter
argument_list|,
operator|&
name|voptAdj
argument_list|,
name|textRect
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_ITEMVIEWS
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|CE_TabBarTabShape
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTabV3
modifier|*
name|optionTab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabV3
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOptionTabV3
name|optionTabAdj
init|=
operator|*
name|optionTab
decl_stmt|;
specifier|const
name|bool
name|isSelected
init|=
name|optionTab
operator|->
name|state
operator|&
name|State_Selected
decl_stmt|;
specifier|const
name|bool
name|directionMirrored
init|=
operator|(
name|optionTab
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
decl_stmt|;
name|QS60StylePrivate
operator|::
name|SkinElements
name|skinElement
decl_stmt|;
switch|switch
condition|(
name|optionTab
operator|->
name|shape
condition|)
block|{
case|case
name|QTabBar
operator|::
name|TriangularEast
case|:
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
name|skinElement
operator|=
name|isSelected
condition|?
name|QS60StylePrivate
operator|::
name|SE_TabBarTabEastActive
else|:
name|QS60StylePrivate
operator|::
name|SE_TabBarTabEastInactive
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|TriangularSouth
case|:
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
name|skinElement
operator|=
name|isSelected
condition|?
name|QS60StylePrivate
operator|::
name|SE_TabBarTabSouthActive
else|:
name|QS60StylePrivate
operator|::
name|SE_TabBarTabSouthInactive
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|TriangularWest
case|:
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
name|skinElement
operator|=
name|isSelected
condition|?
name|QS60StylePrivate
operator|::
name|SE_TabBarTabWestActive
else|:
name|QS60StylePrivate
operator|::
name|SE_TabBarTabWestInactive
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|TriangularNorth
case|:
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
default|default:
name|skinElement
operator|=
name|isSelected
condition|?
name|QS60StylePrivate
operator|::
name|SE_TabBarTabNorthActive
else|:
name|QS60StylePrivate
operator|::
name|SE_TabBarTabNorthInactive
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|skinElement
operator|==
name|QS60StylePrivate
operator|::
name|SE_TabBarTabEastInactive
operator|||
name|skinElement
operator|==
name|QS60StylePrivate
operator|::
name|SE_TabBarTabNorthInactive
operator|||
name|skinElement
operator|==
name|QS60StylePrivate
operator|::
name|SE_TabBarTabSouthInactive
operator|||
name|skinElement
operator|==
name|QS60StylePrivate
operator|::
name|SE_TabBarTabWestInactive
operator|||
name|skinElement
operator|==
name|QS60StylePrivate
operator|::
name|SE_TabBarTabEastActive
operator|||
name|skinElement
operator|==
name|QS60StylePrivate
operator|::
name|SE_TabBarTabNorthActive
operator|||
name|skinElement
operator|==
name|QS60StylePrivate
operator|::
name|SE_TabBarTabSouthActive
operator|||
name|skinElement
operator|==
name|QS60StylePrivate
operator|::
name|SE_TabBarTabWestActive
condition|)
block|{
specifier|const
name|int
name|borderThickness
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
name|int
name|tabOverlap
init|=
name|pixelMetric
argument_list|(
name|PM_TabBarTabOverlap
argument_list|)
decl_stmt|;
if|if
condition|(
name|tabOverlap
operator|>
name|borderThickness
condition|)
name|tabOverlap
operator|-=
name|borderThickness
expr_stmt|;
specifier|const
name|bool
name|usesScrollButtons
init|=
operator|(
name|widget
operator|)
condition|?
operator|(
name|qobject_cast
argument_list|<
specifier|const
name|QTabBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|)
operator|->
name|usesScrollButtons
argument_list|()
else|:
literal|false
decl_stmt|;
specifier|const
name|int
name|roomForScrollButton
init|=
name|usesScrollButtons
condition|?
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_TabBarScrollButtonWidth
argument_list|)
else|:
literal|0
decl_stmt|;
comment|// adjust for overlapping tabs and scrollbuttons, if necessary
if|if
condition|(
name|skinElement
operator|==
name|QS60StylePrivate
operator|::
name|SE_TabBarTabEastInactive
operator|||
name|skinElement
operator|==
name|QS60StylePrivate
operator|::
name|SE_TabBarTabEastActive
operator|||
name|skinElement
operator|==
name|QS60StylePrivate
operator|::
name|SE_TabBarTabWestInactive
operator|||
name|skinElement
operator|==
name|QS60StylePrivate
operator|::
name|SE_TabBarTabWestActive
condition|)
block|{
if|if
condition|(
name|optionTabAdj
operator|.
name|position
operator|==
name|QStyleOptionTabV3
operator|::
name|Beginning
condition|)
name|optionTabAdj
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|roomForScrollButton
argument_list|,
literal|0
argument_list|,
name|tabOverlap
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|optionTabAdj
operator|.
name|position
operator|==
name|QStyleOptionTabV3
operator|::
name|End
condition|)
name|optionTabAdj
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|tabOverlap
argument_list|)
expr_stmt|;
else|else
name|optionTabAdj
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|tabOverlap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|directionMirrored
condition|)
block|{
if|if
condition|(
name|optionTabAdj
operator|.
name|position
operator|==
name|QStyleOptionTabV3
operator|::
name|Beginning
condition|)
name|optionTabAdj
operator|.
name|rect
operator|.
name|adjust
argument_list|(
operator|-
name|tabOverlap
argument_list|,
literal|0
argument_list|,
operator|-
name|roomForScrollButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|optionTabAdj
operator|.
name|rect
operator|.
name|adjust
argument_list|(
operator|-
name|tabOverlap
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|optionTabAdj
operator|.
name|position
operator|==
name|QStyleOptionTabV3
operator|::
name|Beginning
condition|)
name|optionTabAdj
operator|.
name|rect
operator|.
name|adjust
argument_list|(
name|roomForScrollButton
argument_list|,
literal|0
argument_list|,
name|tabOverlap
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|optionTabAdj
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|tabOverlap
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|skinElement
argument_list|,
name|painter
argument_list|,
name|optionTabAdj
operator|.
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CE_TabBarTabLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTabV3
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabV3
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOptionTabV3
name|optionTab
init|=
operator|*
name|tab
decl_stmt|;
name|QRect
name|tr
init|=
name|optionTab
operator|.
name|rect
decl_stmt|;
specifier|const
name|bool
name|directionMirrored
init|=
operator|(
name|optionTab
operator|.
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
decl_stmt|;
specifier|const
name|int
name|borderThickness
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
name|int
name|tabOverlap
init|=
name|pixelMetric
argument_list|(
name|PM_TabBarTabOverlap
argument_list|)
decl_stmt|;
if|if
condition|(
name|tabOverlap
operator|>
name|borderThickness
condition|)
name|tabOverlap
operator|-=
name|borderThickness
expr_stmt|;
specifier|const
name|bool
name|usesScrollButtons
init|=
operator|(
name|widget
operator|)
condition|?
operator|(
name|qobject_cast
argument_list|<
specifier|const
name|QTabBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|)
operator|->
name|usesScrollButtons
argument_list|()
else|:
literal|false
decl_stmt|;
specifier|const
name|int
name|roomForScrollButton
init|=
name|usesScrollButtons
condition|?
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_TabBarScrollButtonWidth
argument_list|)
else|:
literal|0
decl_stmt|;
switch|switch
condition|(
name|tab
operator|->
name|shape
condition|)
block|{
case|case
name|QTabBar
operator|::
name|TriangularWest
case|:
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
case|case
name|QTabBar
operator|::
name|TriangularEast
case|:
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
name|tr
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|tabOverlap
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|TriangularSouth
case|:
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
case|case
name|QTabBar
operator|::
name|TriangularNorth
case|:
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
default|default:
if|if
condition|(
name|directionMirrored
condition|)
name|tr
operator|.
name|adjust
argument_list|(
operator|-
name|tabOverlap
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|tr
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|tabOverlap
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
block|}
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QFont
name|f
init|=
name|painter
operator|->
name|font
argument_list|()
decl_stmt|;
name|f
operator|.
name|setPointSizeF
argument_list|(
name|f
operator|.
name|pointSizeF
argument_list|()
operator|*
name|KTabFontMul
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|selected
init|=
name|optionTab
operator|.
name|state
operator|&
name|State_Selected
decl_stmt|;
if|if
condition|(
name|selected
condition|)
name|optionTab
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|optionTab
operator|.
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|verticalTabs
init|=
name|optionTab
operator|.
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedEast
operator|||
name|optionTab
operator|.
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedWest
operator|||
name|optionTab
operator|.
name|shape
operator|==
name|QTabBar
operator|::
name|TriangularEast
operator|||
name|optionTab
operator|.
name|shape
operator|==
name|QTabBar
operator|::
name|TriangularWest
decl_stmt|;
comment|//make room for scrollbuttons
if|if
condition|(
operator|!
name|verticalTabs
condition|)
block|{
if|if
condition|(
operator|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTabV3
operator|::
name|Beginning
operator|&&
operator|!
name|directionMirrored
operator|)
condition|)
name|tr
operator|.
name|adjust
argument_list|(
name|roomForScrollButton
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTabV3
operator|::
name|Beginning
operator|&&
name|directionMirrored
operator|)
condition|)
name|tr
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|roomForScrollButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTabV3
operator|::
name|Beginning
condition|)
name|tr
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|roomForScrollButton
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verticalTabs
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|int
name|newX
decl_stmt|,
name|newY
decl_stmt|,
name|newRotation
decl_stmt|;
if|if
condition|(
name|optionTab
operator|.
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedEast
operator|||
name|optionTab
operator|.
name|shape
operator|==
name|QTabBar
operator|::
name|TriangularEast
condition|)
block|{
name|newX
operator|=
name|tr
operator|.
name|width
argument_list|()
expr_stmt|;
name|newY
operator|=
name|tr
operator|.
name|y
argument_list|()
expr_stmt|;
name|newRotation
operator|=
literal|90
expr_stmt|;
block|}
else|else
block|{
name|newX
operator|=
literal|0
expr_stmt|;
name|newY
operator|=
name|tr
operator|.
name|y
argument_list|()
operator|+
name|tr
operator|.
name|height
argument_list|()
expr_stmt|;
name|newRotation
operator|=
operator|-
literal|90
expr_stmt|;
block|}
name|tr
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|tr
operator|.
name|height
argument_list|()
argument_list|,
name|tr
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QTransform
name|m
decl_stmt|;
name|m
operator|.
name|translate
argument_list|(
name|newX
argument_list|,
name|newY
argument_list|)
expr_stmt|;
name|m
operator|.
name|rotate
argument_list|(
name|newRotation
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setTransform
argument_list|(
name|m
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|tr
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pixelMetric
argument_list|(
name|PM_TabBarTabShiftHorizontal
argument_list|,
name|tab
argument_list|,
name|widget
argument_list|)
argument_list|,
name|pixelMetric
argument_list|(
name|PM_TabBarTabShiftVertical
argument_list|,
name|tab
argument_list|,
name|widget
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|selected
condition|)
block|{
name|tr
operator|.
name|setBottom
argument_list|(
name|tr
operator|.
name|bottom
argument_list|()
operator|-
name|pixelMetric
argument_list|(
name|PM_TabBarTabShiftVertical
argument_list|,
name|tab
argument_list|,
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setRight
argument_list|(
name|tr
operator|.
name|right
argument_list|()
operator|-
name|pixelMetric
argument_list|(
name|PM_TabBarTabShiftHorizontal
argument_list|,
name|tab
argument_list|,
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|alignment
init|=
name|Qt
operator|::
name|AlignCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
decl_stmt|;
if|if
condition|(
operator|!
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
operator|&
name|optionTab
argument_list|,
name|widget
argument_list|)
condition|)
name|alignment
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
if|if
condition|(
operator|!
name|optionTab
operator|.
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QSize
name|iconSize
init|=
name|optionTab
operator|.
name|iconSize
decl_stmt|;
if|if
condition|(
operator|!
name|iconSize
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|int
name|iconExtent
init|=
name|pixelMetric
argument_list|(
name|PM_TabBarIconSize
argument_list|)
decl_stmt|;
name|iconSize
operator|=
name|QSize
argument_list|(
name|iconExtent
argument_list|,
name|iconExtent
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|tabIcon
init|=
name|optionTab
operator|.
name|icon
operator|.
name|pixmap
argument_list|(
name|iconSize
argument_list|,
operator|(
name|optionTab
operator|.
name|state
operator|&
name|State_Enabled
operator|)
condition|?
name|QIcon
operator|::
name|Normal
else|:
name|QIcon
operator|::
name|Disabled
argument_list|)
decl_stmt|;
if|if
condition|(
name|tab
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|painter
operator|->
name|drawPixmap
argument_list|(
name|tr
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|-
operator|(
name|tabIcon
operator|.
name|height
argument_list|()
operator|>>
literal|1
operator|)
argument_list|,
name|tr
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|-
operator|(
name|tabIcon
operator|.
name|height
argument_list|()
operator|>>
literal|1
operator|)
argument_list|,
name|tabIcon
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|drawPixmap
argument_list|(
name|tr
operator|.
name|left
argument_list|()
operator|+
name|tabOverlap
argument_list|,
name|tr
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|-
operator|(
name|tabIcon
operator|.
name|height
argument_list|()
operator|>>
literal|1
operator|)
argument_list|,
name|tabIcon
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setLeft
argument_list|(
name|tr
operator|.
name|left
argument_list|()
operator|+
name|iconSize
operator|.
name|width
argument_list|()
operator|+
literal|4
argument_list|)
expr_stmt|;
comment|//todo: magic four
block|}
name|QCommonStyle
operator|::
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|tr
argument_list|,
name|alignment
argument_list|,
name|optionTab
operator|.
name|palette
argument_list|,
name|tab
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|tab
operator|->
name|text
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
if|if
condition|(
name|verticalTabs
condition|)
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_TABBAR
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
case|case
name|CE_ProgressBarContents
case|:
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|optionProgressBar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|progressRect
init|=
name|optionProgressBar
operator|->
name|rect
decl_stmt|;
if|if
condition|(
name|optionProgressBar
operator|->
name|minimum
operator|==
name|optionProgressBar
operator|->
name|maximum
operator|&&
name|optionProgressBar
operator|->
name|minimum
operator|==
literal|0
condition|)
block|{
comment|// busy indicator
specifier|const
name|QS60StylePrivate
operator|::
name|SkinElementFlag
name|orientationFlag
init|=
name|optionProgressBar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|QS60StylePrivate
operator|::
name|SF_PointNorth
else|:
name|QS60StylePrivate
operator|::
name|SF_PointWest
decl_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinPart
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarWaitAnim
argument_list|,
name|painter
argument_list|,
name|progressRect
argument_list|,
name|flags
operator||
name|orientationFlag
operator||
name|QS60StylePrivate
operator|::
name|SF_Animation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|qreal
name|progressFactor
init|=
operator|(
name|optionProgressBar
operator|->
name|minimum
operator|==
name|optionProgressBar
operator|->
name|maximum
operator|)
condition|?
literal|1.0
else|:
operator|(
name|qreal
operator|)
name|optionProgressBar
operator|->
name|progress
operator|/
name|optionProgressBar
operator|->
name|maximum
decl_stmt|;
specifier|const
name|int
name|frameWidth
init|=
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionProgressBar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|progressRect
operator|.
name|setWidth
argument_list|(
name|int
argument_list|(
name|progressRect
operator|.
name|width
argument_list|()
operator|*
name|progressFactor
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|optionProgressBar
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|progressRect
operator|.
name|translate
argument_list|(
name|optionProgressBar
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|progressRect
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|progressRect
operator|.
name|adjust
argument_list|(
name|frameWidth
argument_list|,
literal|0
argument_list|,
operator|-
name|frameWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|progressRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|frameWidth
argument_list|,
literal|0
argument_list|,
operator|-
name|frameWidth
argument_list|)
expr_stmt|;
name|progressRect
operator|.
name|setTop
argument_list|(
name|progressRect
operator|.
name|bottom
argument_list|()
operator|-
name|int
argument_list|(
name|progressRect
operator|.
name|height
argument_list|()
operator|*
name|progressFactor
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QS60StylePrivate
operator|::
name|SkinElements
name|skinElement
init|=
name|optionProgressBar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|QS60StylePrivate
operator|::
name|SE_ProgressBarIndicatorHorizontal
else|:
name|QS60StylePrivate
operator|::
name|SE_ProgressBarIndicatorVertical
decl_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|skinElement
argument_list|,
name|painter
argument_list|,
name|progressRect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CE_ProgressBarGroove
case|:
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|optionProgressBar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|QS60StylePrivate
operator|::
name|SkinElements
name|skinElement
init|=
name|optionProgressBar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|QS60StylePrivate
operator|::
name|SE_ProgressBarGrooveHorizontal
else|:
name|QS60StylePrivate
operator|::
name|SE_ProgressBarGrooveVertical
decl_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|skinElement
argument_list|,
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CE_ProgressBarLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|progressbar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOptionProgressBarV2
name|optionProgressBar
init|=
operator|*
name|progressbar
decl_stmt|;
name|QCommonStyle
operator|::
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|progressbar
operator|->
name|rect
argument_list|,
name|flags
operator||
name|Qt
operator|::
name|AlignCenter
operator||
name|Qt
operator|::
name|TextSingleLine
argument_list|,
name|optionProgressBar
operator|.
name|palette
argument_list|,
name|progressbar
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|progressbar
operator|->
name|text
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_PROGRESSBAR
ifndef|#
directive|ifndef
name|QT_NO_MENU
case|case
name|CE_MenuItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|menuItem
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOptionMenuItem
name|optionMenuItem
init|=
operator|*
name|menuItem
decl_stmt|;
name|bool
name|drawSubMenuIndicator
init|=
literal|false
decl_stmt|;
name|bool
name|drawSeparator
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|menuItem
operator|->
name|menuItemType
condition|)
block|{
case|case
name|QStyleOptionMenuItem
operator|::
name|Separator
case|:
name|drawSeparator
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyleOptionMenuItem
operator|::
name|Scroller
case|:
return|return;
comment|// no scrollers in S60 menus
case|case
name|QStyleOptionMenuItem
operator|::
name|SubMenu
case|:
name|drawSubMenuIndicator
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|drawSeparator
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QS60StylePrivate
operator|::
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnLineColors
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|optionMenuItem
operator|.
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|optionMenuItem
operator|.
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|const
name|bool
name|enabled
init|=
name|optionMenuItem
operator|.
name|state
operator|&
name|State_Enabled
decl_stmt|;
specifier|const
name|bool
name|checkable
init|=
name|optionMenuItem
operator|.
name|checkType
operator|!=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
decl_stmt|;
name|bool
name|ignoreCheckMark
init|=
literal|false
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|ignoreCheckMark
operator|=
literal|true
expr_stmt|;
comment|//ignore the checkmarks provided by the QComboMenuDelegate
endif|#
directive|endif
name|uint
name|text_flags
init|=
name|Qt
operator|::
name|AlignLeading
operator||
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|TextDontClip
operator||
name|Qt
operator|::
name|TextSingleLine
operator||
name|Qt
operator|::
name|AlignVCenter
decl_stmt|;
if|if
condition|(
operator|!
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|menuItem
argument_list|,
name|widget
argument_list|)
condition|)
name|text_flags
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
name|QRect
name|iconRect
init|=
name|subElementRect
argument_list|(
name|SE_ItemViewItemDecoration
argument_list|,
operator|&
name|optionMenuItem
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|textRect
init|=
name|subElementRect
argument_list|(
name|SE_ItemViewItemText
argument_list|,
operator|&
name|optionMenuItem
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QStyleOptionMenuItem
name|optionCheckBox
decl_stmt|;
comment|//Regardless of checkbox visibility, make room for it, this mirrors native implementation,
comment|//where text and icon placement is static regardless of content of menu item.
name|optionCheckBox
operator|.
name|QStyleOptionMenuItem
operator|::
name|operator
name|=
argument_list|(
operator|*
name|menuItem
argument_list|)
expr_stmt|;
name|optionCheckBox
operator|.
name|rect
operator|.
name|setWidth
argument_list|(
name|pixelMetric
argument_list|(
name|PM_IndicatorWidth
argument_list|)
argument_list|)
expr_stmt|;
name|optionCheckBox
operator|.
name|rect
operator|.
name|setHeight
argument_list|(
name|pixelMetric
argument_list|(
name|PM_IndicatorHeight
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|vSpacing
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_LayoutVerticalSpacing
argument_list|)
decl_stmt|;
comment|//The vertical spacing is doubled; it needs one spacing to separate checkbox from
comment|//highlight and then it needs one to separate it whatever is shown after it (text/icon/both).
specifier|const
name|int
name|moveByX
init|=
name|optionCheckBox
operator|.
name|rect
operator|.
name|width
argument_list|()
operator|+
literal|2
operator|*
name|vSpacing
decl_stmt|;
name|optionCheckBox
operator|.
name|rect
operator|.
name|moveCenter
argument_list|(
name|QPoint
argument_list|(
name|optionCheckBox
operator|.
name|rect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|+
name|moveByX
operator|>>
literal|1
argument_list|,
name|menuItem
operator|->
name|rect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|optionMenuItem
operator|.
name|direction
operator|!=
name|Qt
operator|::
name|LeftToRight
condition|)
name|optionCheckBox
operator|.
name|rect
operator|.
name|translate
argument_list|(
name|textRect
operator|.
name|width
argument_list|()
operator|+
name|iconRect
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|selected
init|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_Selected
operator|)
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
decl_stmt|;
if|if
condition|(
name|selected
condition|)
block|{
specifier|const
name|int
name|spacing
init|=
name|ignoreCheckMark
condition|?
operator|(
name|vSpacing
operator|+
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
operator|)
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|start
init|=
name|optionMenuItem
operator|.
name|rect
operator|.
name|left
argument_list|()
operator|+
name|spacing
decl_stmt|;
specifier|const
name|int
name|end
init|=
name|optionMenuItem
operator|.
name|rect
operator|.
name|right
argument_list|()
operator|-
name|spacing
decl_stmt|;
comment|//-1 adjustment to avoid highlight being on top of possible separator item
specifier|const
name|QRect
name|highlightRect
init|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|start
argument_list|,
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|end
argument_list|,
name|option
operator|->
name|rect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|QS60StylePrivate
operator|::
name|SE_ListHighlight
argument_list|,
name|painter
argument_list|,
name|highlightRect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkable
operator|&&
operator|!
name|ignoreCheckMark
condition|)
name|drawPrimitive
argument_list|(
name|PE_IndicatorMenuCheckMark
argument_list|,
operator|&
name|optionCheckBox
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
comment|//draw icon and/or checkState
name|QPixmap
name|pix
init|=
name|menuItem
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|)
argument_list|,
name|enabled
condition|?
name|QIcon
operator|::
name|Normal
else|:
name|QIcon
operator|::
name|Disabled
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|itemWithIcon
init|=
operator|!
name|pix
operator|.
name|isNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|itemWithIcon
condition|)
block|{
name|drawItemPixmap
argument_list|(
name|painter
argument_list|,
name|iconRect
argument_list|,
name|text_flags
argument_list|,
name|pix
argument_list|)
expr_stmt|;
if|if
condition|(
name|optionMenuItem
operator|.
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|textRect
operator|.
name|translate
argument_list|(
name|vSpacing
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|textRect
operator|.
name|translate
argument_list|(
operator|-
name|vSpacing
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|textRect
operator|.
name|setWidth
argument_list|(
name|textRect
operator|.
name|width
argument_list|()
operator|-
name|vSpacing
argument_list|)
expr_stmt|;
block|}
comment|//draw indicators
if|if
condition|(
name|drawSubMenuIndicator
condition|)
block|{
name|QStyleOptionMenuItem
name|arrowOptions
decl_stmt|;
name|arrowOptions
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|menuItem
argument_list|)
expr_stmt|;
specifier|const
name|int
name|indicatorWidth
init|=
operator|(
name|pixelMetric
argument_list|(
name|PM_ListViewIconSize
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|>>
literal|1
operator|)
operator|+
name|pixelMetric
argument_list|(
name|PM_LayoutVerticalSpacing
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionMenuItem
operator|.
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|arrowOptions
operator|.
name|rect
operator|.
name|setLeft
argument_list|(
name|textRect
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|arrowOptions
operator|.
name|rect
operator|.
name|setWidth
argument_list|(
name|indicatorWidth
argument_list|)
expr_stmt|;
comment|//by default sub menu indicator in S60 points to east,so here icon
comment|// direction is set to north (and south when in RightToLeft)
specifier|const
name|QS60StylePrivate
operator|::
name|SkinElementFlag
name|arrowDirection
init|=
operator|(
name|arrowOptions
operator|.
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
operator|)
condition|?
name|QS60StylePrivate
operator|::
name|SF_PointNorth
else|:
name|QS60StylePrivate
operator|::
name|SF_PointSouth
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|windowText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinPart
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnIndiSubmenu
argument_list|,
name|painter
argument_list|,
name|arrowOptions
operator|.
name|rect
argument_list|,
operator|(
name|flags
operator||
name|QS60StylePrivate
operator|::
name|SF_ColorSkinned
operator||
name|arrowDirection
operator|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
comment|//draw text
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
comment|//In s60, if something becomes disabled, it is removed from menu, so no native look-alike available.
name|optionMenuItem
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|QS60StylePrivate
operator|::
name|lighterColor
argument_list|(
name|optionMenuItem
operator|.
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setOpacity
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selected
condition|)
name|optionMenuItem
operator|.
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|optionMenuItem
operator|.
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|textRect
argument_list|,
name|text_flags
argument_list|,
name|optionMenuItem
operator|.
name|palette
argument_list|,
name|enabled
argument_list|,
name|optionMenuItem
operator|.
name|text
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
expr_stmt|;
comment|//In Sym^3, native menu items have "lines" between them
if|if
condition|(
name|QS60StylePrivate
operator|::
name|isSingleClickUi
argument_list|()
condition|)
block|{
name|int
name|diff
init|=
name|widget
operator|->
name|geometry
argument_list|()
operator|.
name|bottom
argument_list|()
operator|-
name|optionMenuItem
operator|.
name|rect
operator|.
name|bottom
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|QComboBox
modifier|*
name|cb
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|diff
operator|=
name|cb
operator|->
name|view
argument_list|()
operator|->
name|geometry
argument_list|()
operator|.
name|bottom
argument_list|()
operator|-
name|optionMenuItem
operator|.
name|rect
operator|.
name|bottom
argument_list|()
expr_stmt|;
comment|// Skip drawing the horizontal line for the last menu item.
if|if
condition|(
name|diff
operator|>
name|optionMenuItem
operator|.
name|rect
operator|.
name|height
argument_list|()
condition|)
block|{
specifier|const
name|QColor
name|lineColorAlpha
init|=
name|QS60StylePrivate
operator|::
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnLineColors
argument_list|,
literal|15
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|//native platform sets each color byte to same value for "line 16" which just defines alpha for
comment|//menuitem lines; lets use first byte "red".
name|QColor
name|lineColor
init|=
name|optionMenuItem
operator|.
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
if|if
condition|(
name|lineColorAlpha
operator|.
name|isValid
argument_list|()
condition|)
name|lineColor
operator|.
name|setAlpha
argument_list|(
name|lineColorAlpha
operator|.
name|red
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|lineColor
argument_list|)
expr_stmt|;
specifier|const
name|int
name|horizontalMargin
init|=
literal|2
operator|*
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_FrameCornerWidth
argument_list|)
operator|-
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
specifier|const
name|int
name|lineStartX
init|=
name|optionMenuItem
operator|.
name|rect
operator|.
name|left
argument_list|()
operator|+
name|horizontalMargin
decl_stmt|;
specifier|const
name|int
name|lineEndX
init|=
name|optionMenuItem
operator|.
name|rect
operator|.
name|right
argument_list|()
operator|-
name|horizontalMargin
decl_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|QPoint
argument_list|(
name|lineStartX
argument_list|,
name|optionMenuItem
operator|.
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|lineEndX
argument_list|,
name|optionMenuItem
operator|.
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|enabled
condition|)
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|CE_MenuEmptyArea
case|:
break|break;
endif|#
directive|endif
comment|//QT_NO_MENU
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
case|case
name|CE_MenuBarEmptyArea
case|:
break|break;
endif|#
directive|endif
comment|//QT_NO_MENUBAR
case|case
name|CE_HeaderSection
case|:
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|header
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QPen
name|linePen
init|=
name|QPen
argument_list|(
name|QS60StylePrivate
operator|::
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnLineColors
argument_list|,
literal|1
argument_list|,
name|header
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|penWidth
init|=
operator|(
name|header
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|linePen
operator|.
name|width
argument_list|()
operator|+
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_BoldLineWidth
argument_list|)
else|:
name|linePen
operator|.
name|width
argument_list|()
operator|+
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_ThinLineWidth
argument_list|)
decl_stmt|;
name|linePen
operator|.
name|setWidth
argument_list|(
name|penWidth
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|linePen
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|painter
operator|->
name|drawLine
argument_list|(
name|header
operator|->
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|header
operator|->
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|header
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
block|{
name|painter
operator|->
name|drawLine
argument_list|(
name|header
operator|->
name|rect
operator|.
name|topRight
argument_list|()
argument_list|,
name|header
operator|->
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|drawLine
argument_list|(
name|header
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|header
operator|->
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
comment|//Draw corner button as normal pushButton.
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
comment|//Make cornerButton slightly smaller so that it is not on top of table border graphic.
name|QStyleOptionHeader
name|subopt
init|=
operator|*
name|header
decl_stmt|;
specifier|const
name|int
name|borderTweak
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_FrameCornerWidth
argument_list|)
operator|>>
literal|1
decl_stmt|;
if|if
condition|(
name|subopt
operator|.
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|subopt
operator|.
name|rect
operator|.
name|adjust
argument_list|(
name|borderTweak
argument_list|,
name|borderTweak
argument_list|,
literal|0
argument_list|,
operator|-
name|borderTweak
argument_list|)
expr_stmt|;
else|else
name|subopt
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|borderTweak
argument_list|,
operator|-
name|borderTweak
argument_list|,
operator|-
name|borderTweak
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_PanelButtonBevel
argument_list|,
operator|&
name|subopt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|header
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
operator|!=
name|Qt
operator|::
name|transparent
operator|)
condition|)
block|{
comment|//Draw non-themed background. Background for theme is drawn in CE_ShapedFrame
comment|//to get continuous theme graphic across all the header cells.
name|qDrawShadePanel
argument_list|(
name|painter
argument_list|,
name|header
operator|->
name|rect
argument_list|,
name|header
operator|->
name|palette
argument_list|,
name|header
operator|->
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
argument_list|,
name|penWidth
argument_list|,
operator|&
name|header
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CE_HeaderEmptyArea
case|:
comment|// no need to draw this
break|break;
case|case
name|CE_Header
case|:
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|header
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|drawControl
argument_list|(
name|CE_HeaderSection
argument_list|,
name|header
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QStyleOptionHeader
name|subopt
init|=
operator|*
name|header
decl_stmt|;
name|subopt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|SE_HeaderLabel
argument_list|,
name|header
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|subopt
operator|.
name|rect
operator|.
name|isValid
argument_list|()
condition|)
name|drawControl
argument_list|(
name|CE_HeaderLabel
argument_list|,
operator|&
name|subopt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|->
name|sortIndicator
operator|!=
name|QStyleOptionHeader
operator|::
name|None
condition|)
block|{
name|subopt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|SE_HeaderArrow
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_IndicatorHeaderArrow
argument_list|,
operator|&
name|subopt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
case|case
name|CE_ToolBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolBar
modifier|*
name|toolBar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|QToolBar
modifier|*
name|tbWidget
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
comment|//toolbar within a toolbar, skip
if|if
condition|(
operator|!
name|tbWidget
operator|||
operator|(
name|widget
operator|&&
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
operator|)
condition|)
break|break;
comment|// Normally in S60 5.0+ there is no background for toolbar, but in some cases with versatile QToolBar,
comment|// it looks a bit strange. So, lets fillRect with Button.
if|if
condition|(
operator|!
name|QS60StylePrivate
operator|::
name|isToolBarBackground
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|actions
init|=
name|tbWidget
operator|->
name|actions
argument_list|()
decl_stmt|;
name|bool
name|justToolButtonsInToolBar
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|childWidget
init|=
name|tbWidget
operator|->
name|widgetForAction
argument_list|(
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QToolButton
modifier|*
name|button
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QToolButton
operator|*
argument_list|>
argument_list|(
name|childWidget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|button
condition|)
block|{
name|justToolButtonsInToolBar
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// Draw frame background
comment|// for vertical toolbars with text only and
comment|// for toolbars with extension buttons and
comment|// for toolbars with widgets in them.
if|if
condition|(
operator|!
name|justToolButtonsInToolBar
operator|||
operator|(
name|tbWidget
operator|&&
operator|(
name|tbWidget
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Vertical
operator|)
operator|&&
operator|(
name|tbWidget
operator|->
name|toolButtonStyle
argument_list|()
operator|==
name|Qt
operator|::
name|ToolButtonTextOnly
operator|)
operator|)
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|widget
condition|)
name|painter
operator|->
name|setBrush
argument_list|(
name|widget
operator|->
name|palette
argument_list|()
operator|.
name|button
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setOpacity
argument_list|(
literal|0.3
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|toolBar
operator|->
name|rect
argument_list|,
name|painter
operator|->
name|brush
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|QS60StylePrivate
operator|::
name|SE_ToolBar
argument_list|,
name|painter
argument_list|,
name|toolBar
operator|->
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_TOOLBAR
case|case
name|CE_ShapedFrame
case|:
if|if
condition|(
specifier|const
name|QTextEdit
modifier|*
name|textEdit
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTextEdit
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
specifier|const
name|QStyleOptionFrame
modifier|*
name|frame
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame
operator|&&
name|QS60StylePrivate
operator|::
name|canDrawThemeBackground
argument_list|(
name|frame
operator|->
name|palette
operator|.
name|base
argument_list|()
argument_list|,
name|widget
argument_list|)
condition|)
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|QS60StylePrivate
operator|::
name|SE_Editor
argument_list|,
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
else|else
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|QS60StylePrivate
operator|::
name|SE_TableItem
argument_list|,
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
specifier|const
name|QHeaderView
modifier|*
name|header
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QHeaderView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
comment|//QS60style draws header background here instead of in each headersection, to get
comment|//continuous graphic from section to section.
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|adjustableFlags
init|=
name|flags
decl_stmt|;
name|QRect
name|headerRect
init|=
name|option
operator|->
name|rect
decl_stmt|;
if|if
condition|(
name|header
operator|->
name|orientation
argument_list|()
operator|!=
name|Qt
operator|::
name|Horizontal
condition|)
block|{
comment|//todo: update to horizontal table graphic
name|adjustableFlags
operator|=
operator|(
name|adjustableFlags
operator||
name|QS60StylePrivate
operator|::
name|SF_PointWest
operator|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|int
name|frameWidth
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|headerRect
operator|.
name|adjust
argument_list|(
operator|-
literal|2
operator|*
name|frameWidth
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|headerRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
operator|*
name|frameWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|transparent
condition|)
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|QS60StylePrivate
operator|::
name|SE_TableHeaderItem
argument_list|,
name|painter
argument_list|,
name|headerRect
argument_list|,
name|adjustableFlags
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QFrame
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CE_MenuScroller
case|:
break|break;
case|case
name|CE_FocusFrame
case|:
block|{
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
name|bool
name|editFocus
init|=
literal|false
decl_stmt|;
if|if
condition|(
specifier|const
name|QFocusFrame
modifier|*
name|focusFrame
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QFocusFrame
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|focusFrame
operator|->
name|widget
argument_list|()
operator|&&
name|focusFrame
operator|->
name|widget
argument_list|()
operator|->
name|hasEditFocus
argument_list|()
condition|)
name|editFocus
operator|=
literal|true
expr_stmt|;
block|}
specifier|const
name|qreal
name|opacity
init|=
name|editFocus
condition|?
literal|1
else|:
literal|0.75
decl_stmt|;
comment|// Trial and error factors. Feel free to improve.
else|#
directive|else
specifier|const
name|qreal
name|opacity
init|=
literal|0.85
decl_stmt|;
endif|#
directive|endif
comment|// We need to reduce the focus frame size if LayoutSpacing is smaller than FocusFrameMargin
comment|// Otherwise, we would overlay adjacent widgets.
specifier|const
name|int
name|frameHeightReduction
init|=
name|qMin
argument_list|(
literal|0
argument_list|,
name|pixelMetric
argument_list|(
name|PM_LayoutVerticalSpacing
argument_list|)
operator|-
name|pixelMetric
argument_list|(
name|PM_FocusFrameVMargin
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|frameWidthReduction
init|=
name|qMin
argument_list|(
literal|0
argument_list|,
name|pixelMetric
argument_list|(
name|PM_LayoutHorizontalSpacing
argument_list|)
operator|-
name|pixelMetric
argument_list|(
name|PM_FocusFrameHMargin
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|rounding
init|=
name|qMin
argument_list|(
name|pixelMetric
argument_list|(
name|PM_FocusFrameVMargin
argument_list|)
argument_list|,
name|pixelMetric
argument_list|(
name|PM_LayoutVerticalSpacing
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|frameRect
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
operator|-
name|frameWidthReduction
argument_list|,
operator|-
name|frameHeightReduction
argument_list|,
name|frameWidthReduction
argument_list|,
name|frameHeightReduction
argument_list|)
decl_stmt|;
name|QPainterPath
name|framePath
decl_stmt|;
name|framePath
operator|.
name|addRoundedRect
argument_list|(
name|frameRect
argument_list|,
name|rounding
argument_list|,
name|rounding
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setOpacity
argument_list|(
name|opacity
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillPath
argument_list|(
name|framePath
argument_list|,
name|option
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|CE_Splitter
case|:
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|&&
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|&&
name|QS60StylePrivate
operator|::
name|themePalette
argument_list|()
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setOpacity
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|QS60StylePrivate
operator|::
name|themePalette
argument_list|()
operator|->
name|light
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|roundRectRadius
init|=
literal|4
operator|*
name|goldenRatio
decl_stmt|;
name|painter
operator|->
name|drawRoundedRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|roundRectRadius
argument_list|,
name|roundRectRadius
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|drawPrimitive
name|void
name|QS60Style
operator|::
name|drawPrimitive
parameter_list|(
name|PrimitiveElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
specifier|const
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
init|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|?
name|QS60StylePrivate
operator|::
name|SF_StateEnabled
else|:
name|QS60StylePrivate
operator|::
name|SF_StateDisabled
decl_stmt|;
name|bool
name|commonStyleDraws
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|PE_FrameFocusRect
case|:
block|{
comment|//Draw themed highlight to radiobuttons and checkboxes.
comment|//For other widgets skip, unless palette has been modified. In that case, draw with commonstyle.
if|if
condition|(
name|QS60StylePrivate
operator|::
name|equalToThemePalette
argument_list|(
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFocusRect
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
operator|&&
operator|(
name|qobject_cast
argument_list|<
specifier|const
name|QRadioButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
specifier|const
name|QCheckBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|)
operator|)
condition|)
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|QS60StylePrivate
operator|::
name|isWidgetPressed
argument_list|(
name|widget
argument_list|)
condition|?
name|QS60StylePrivate
operator|::
name|SE_ListItemPressed
else|:
name|QS60StylePrivate
operator|::
name|SE_ListHighlight
argument_list|,
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commonStyleDraws
operator|=
literal|true
expr_stmt|;
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_LINEEDIT
case|case
name|PE_PanelLineEdit
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|lineEdit
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
if|if
condition|(
name|widget
operator|&&
name|qobject_cast
argument_list|<
specifier|const
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
break|break;
endif|#
directive|endif
if|if
condition|(
name|QS60StylePrivate
operator|::
name|canDrawThemeBackground
argument_list|(
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
argument_list|,
name|widget
argument_list|)
condition|)
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|QS60StylePrivate
operator|::
name|SE_FrameLineEdit
argument_list|,
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
else|else
name|commonStyleDraws
operator|=
literal|true
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_LINEEDIT
case|case
name|PE_IndicatorCheckBox
case|:
block|{
comment|// Draw checkbox indicator as color skinned graphics.
specifier|const
name|QS60StyleEnums
operator|::
name|SkinParts
name|skinPart
init|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_On
operator|)
condition|?
name|QS60StyleEnums
operator|::
name|SP_QgnIndiCheckboxOn
else|:
name|QS60StyleEnums
operator|::
name|SP_QgnIndiCheckboxOff
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|QS60StylePrivate
operator|::
name|equalToThemePalette
argument_list|(
name|option
operator|->
name|palette
operator|.
name|windowText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|)
condition|)
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|windowText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinPart
argument_list|(
name|skinPart
argument_list|,
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|flags
operator||
name|QS60StylePrivate
operator|::
name|SF_ColorSkinned
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|PE_IndicatorViewItemCheck
case|:
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
if|if
condition|(
specifier|const
name|QAbstractItemView
modifier|*
name|itemView
init|=
operator|(
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
specifier|const
name|QStyleOptionViewItemV4
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItemV4
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|bool
name|checkBoxVisible
init|=
name|vopt
operator|->
name|features
operator|&
name|QStyleOptionViewItemV2
operator|::
name|HasCheckIndicator
decl_stmt|;
specifier|const
name|bool
name|singleSelection
init|=
name|itemView
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|SingleSelection
operator|||
name|itemView
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|NoSelection
decl_stmt|;
comment|// draw either checkbox at the beginning
if|if
condition|(
name|checkBoxVisible
operator|&&
name|singleSelection
condition|)
block|{
name|drawPrimitive
argument_list|(
name|PE_IndicatorCheckBox
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
comment|// ... or normal "tick" selection at the end.
block|}
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Selected
condition|)
block|{
name|QRect
name|tickRect
init|=
name|option
operator|->
name|rect
decl_stmt|;
specifier|const
name|int
name|frameBorderWidth
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_FrameCornerWidth
argument_list|)
decl_stmt|;
comment|// adjust tickmark rect to exclude frame border
name|tickRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
operator|-
name|frameBorderWidth
argument_list|,
literal|0
argument_list|,
operator|-
name|frameBorderWidth
argument_list|)
expr_stmt|;
name|QS60StyleEnums
operator|::
name|SkinParts
name|skinPart
init|=
name|QS60StyleEnums
operator|::
name|SP_QgnIndiMarkedAdd
decl_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinPart
argument_list|(
name|skinPart
argument_list|,
name|painter
argument_list|,
name|tickRect
argument_list|,
operator|(
name|flags
operator||
name|QS60StylePrivate
operator|::
name|SF_ColorSkinned
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
comment|//QT_NO_ITEMVIEWS
break|break;
case|case
name|PE_IndicatorRadioButton
case|:
block|{
name|QRect
name|buttonRect
init|=
name|option
operator|->
name|rect
decl_stmt|;
comment|//there is empty (a. 33%) space in svg graphics for radiobutton
specifier|const
name|qreal
name|reduceWidth
init|=
operator|(
name|qreal
operator|)
name|buttonRect
operator|.
name|width
argument_list|()
operator|/
literal|3.0
decl_stmt|;
specifier|const
name|qreal
name|rectWidth
init|=
operator|(
name|qreal
operator|)
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|!=
literal|0
condition|?
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
else|:
literal|1.0
decl_stmt|;
comment|// Try to occupy the full area
specifier|const
name|qreal
name|scaler
init|=
literal|1
operator|+
operator|(
name|reduceWidth
operator|/
name|rectWidth
operator|)
decl_stmt|;
name|buttonRect
operator|.
name|setWidth
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|buttonRect
operator|.
name|width
argument_list|()
operator|-
name|reduceWidth
operator|)
operator|*
name|scaler
argument_list|)
argument_list|)
expr_stmt|;
name|buttonRect
operator|.
name|setHeight
argument_list|(
call|(
name|int
call|)
argument_list|(
name|buttonRect
operator|.
name|height
argument_list|()
operator|*
name|scaler
argument_list|)
argument_list|)
expr_stmt|;
comment|// move the rect up for half of the new height-gain
specifier|const
name|int
name|newY
init|=
operator|(
name|buttonRect
operator|.
name|bottomRight
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|option
operator|->
name|rect
operator|.
name|bottomRight
argument_list|()
operator|.
name|y
argument_list|()
operator|)
operator|>>
literal|1
decl_stmt|;
name|buttonRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
operator|-
name|newY
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
name|newY
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
specifier|const
name|QColor
name|themeColor
init|=
name|QS60StylePrivate
operator|::
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|6
argument_list|,
name|option
argument_list|)
decl_stmt|;
specifier|const
name|QColor
name|buttonTextColor
init|=
name|option
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
if|if
condition|(
name|themeColor
operator|!=
name|buttonTextColor
condition|)
name|painter
operator|->
name|setPen
argument_list|(
name|buttonTextColor
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|setPen
argument_list|(
name|themeColor
argument_list|)
expr_stmt|;
comment|// Draw radiobutton indicator as color skinned graphics.
name|QS60StyleEnums
operator|::
name|SkinParts
name|skinPart
init|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_On
operator|)
condition|?
name|QS60StyleEnums
operator|::
name|SP_QgnIndiRadiobuttOn
else|:
name|QS60StyleEnums
operator|::
name|SP_QgnIndiRadiobuttOff
decl_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinPart
argument_list|(
name|skinPart
argument_list|,
name|painter
argument_list|,
name|buttonRect
argument_list|,
operator|(
name|flags
operator||
name|QS60StylePrivate
operator|::
name|SF_ColorSkinned
operator|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|PE_PanelButtonCommand
case|:
case|case
name|PE_PanelButtonTool
case|:
case|case
name|PE_PanelButtonBevel
case|:
case|case
name|PE_FrameButtonBevel
case|:
if|if
condition|(
name|QS60StylePrivate
operator|::
name|canDrawThemeBackground
argument_list|(
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
argument_list|,
name|widget
argument_list|)
condition|)
block|{
specifier|const
name|bool
name|isPressed
init|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
operator|||
operator|(
name|option
operator|->
name|state
operator|&
name|State_On
operator|)
decl_stmt|;
name|QS60StylePrivate
operator|::
name|SkinElements
name|skinElement
decl_stmt|;
if|if
condition|(
name|element
operator|==
name|PE_PanelButtonTool
condition|)
name|skinElement
operator|=
name|isPressed
condition|?
name|QS60StylePrivate
operator|::
name|SE_ToolBarButtonPressed
else|:
name|QS60StylePrivate
operator|::
name|SE_ToolBarButton
expr_stmt|;
else|else
name|skinElement
operator|=
name|isPressed
condition|?
name|QS60StylePrivate
operator|::
name|SE_ButtonPressed
else|:
name|QS60StylePrivate
operator|::
name|SE_ButtonNormal
expr_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|skinElement
argument_list|,
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commonStyleDraws
operator|=
literal|true
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBUTTON
case|case
name|PE_IndicatorArrowDown
case|:
case|case
name|PE_IndicatorArrowLeft
case|:
case|case
name|PE_IndicatorArrowRight
case|:
case|case
name|PE_IndicatorArrowUp
case|:
block|{
name|QS60StyleEnums
operator|::
name|SkinParts
name|skinPart
decl_stmt|;
if|if
condition|(
name|element
operator|==
name|PE_IndicatorArrowDown
condition|)
name|skinPart
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnGrafScrollArrowDown
expr_stmt|;
elseif|else
if|if
condition|(
name|element
operator|==
name|PE_IndicatorArrowLeft
condition|)
name|skinPart
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnGrafScrollArrowLeft
expr_stmt|;
elseif|else
if|if
condition|(
name|element
operator|==
name|PE_IndicatorArrowRight
condition|)
name|skinPart
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnGrafScrollArrowRight
expr_stmt|;
elseif|else
if|if
condition|(
name|element
operator|==
name|PE_IndicatorArrowUp
condition|)
name|skinPart
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnGrafScrollArrowUp
expr_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinPart
argument_list|(
name|skinPart
argument_list|,
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_TOOLBUTTON
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|PE_IndicatorSpinDown
case|:
case|case
name|PE_IndicatorSpinUp
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|QS60StylePrivate
operator|::
name|canDrawThemeBackground
argument_list|(
name|spinBox
operator|->
name|palette
operator|.
name|base
argument_list|()
argument_list|,
name|widget
argument_list|)
condition|)
block|{
name|QStyleOptionSpinBox
name|optionSpinBox
init|=
operator|*
name|spinBox
decl_stmt|;
specifier|const
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
init|=
operator|(
name|element
operator|==
name|PE_IndicatorSpinUp
operator|)
condition|?
name|QS60StyleEnums
operator|::
name|SP_QgnGrafScrollArrowUp
else|:
name|QS60StyleEnums
operator|::
name|SP_QgnGrafScrollArrowDown
decl_stmt|;
specifier|const
name|int
name|iconMargin
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_FrameCornerWidth
argument_list|)
operator|>>
literal|1
decl_stmt|;
name|optionSpinBox
operator|.
name|rect
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|(
name|element
operator|==
name|PE_IndicatorSpinDown
operator|)
condition|?
name|iconMargin
else|:
operator|-
name|iconMargin
argument_list|)
expr_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinPart
argument_list|(
name|part
argument_list|,
name|painter
argument_list|,
name|optionSpinBox
operator|.
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commonStyleDraws
operator|=
literal|true
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|//QT_NO_SPINBOX
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|cmb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|QS60StylePrivate
operator|::
name|canDrawThemeBackground
argument_list|(
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
argument_list|,
name|widget
argument_list|)
condition|)
block|{
comment|// We want to draw down arrow here for comboboxes as well.
name|QStyleOptionFrame
name|optionsComboBox
init|=
operator|*
name|cmb
decl_stmt|;
specifier|const
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
init|=
name|QS60StyleEnums
operator|::
name|SP_QgnGrafScrollArrowDown
decl_stmt|;
specifier|const
name|int
name|iconMargin
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_FrameCornerWidth
argument_list|)
operator|>>
literal|1
decl_stmt|;
name|optionsComboBox
operator|.
name|rect
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|(
name|element
operator|==
name|PE_IndicatorSpinDown
operator|)
condition|?
name|iconMargin
else|:
operator|-
name|iconMargin
argument_list|)
expr_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinPart
argument_list|(
name|part
argument_list|,
name|painter
argument_list|,
name|optionsComboBox
operator|.
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commonStyleDraws
operator|=
literal|true
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|//QT_NO_COMBOBOX
break|break;
case|case
name|PE_IndicatorSpinMinus
case|:
case|case
name|PE_IndicatorSpinPlus
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOptionSpinBox
name|optionSpinBox
init|=
operator|*
name|spinBox
decl_stmt|;
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
operator|&
name|optionSpinBox
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|cmb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
comment|// We want to draw down arrow here for comboboxes as well.
name|QStyleOptionFrame
name|comboBox
init|=
operator|*
name|cmb
decl_stmt|;
specifier|const
name|int
name|frameWidth
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
name|comboBox
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|frameWidth
argument_list|,
literal|0
argument_list|,
operator|-
name|frameWidth
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
operator|&
name|comboBox
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|//QT_NO_COMBOBOX
break|break;
case|case
name|PE_Widget
case|:
if|if
condition|(
name|QS60StylePrivate
operator|::
name|drawsOwnThemeBackground
argument_list|(
name|widget
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
operator|||
name|qobject_cast
argument_list|<
specifier|const
name|QComboBoxListView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
endif|#
directive|endif
comment|//QT_NO_COMBOBOX
ifndef|#
directive|ifndef
name|QT_NO_MENU
operator|||
name|qobject_cast
argument_list|<
specifier|const
name|QMenu
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
endif|#
directive|endif
comment|//QT_NO_MENU
condition|)
block|{
comment|//Need extra check since dialogs have their own theme background
if|if
condition|(
name|QS60StylePrivate
operator|::
name|canDrawThemeBackground
argument_list|(
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
argument_list|,
name|widget
argument_list|)
operator|&&
name|QS60StylePrivate
operator|::
name|equalToThemePalette
argument_list|(
name|option
operator|->
name|palette
operator|.
name|window
argument_list|()
operator|.
name|texture
argument_list|()
operator|.
name|cacheKey
argument_list|()
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|)
condition|)
block|{
specifier|const
name|bool
name|comboMenu
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QComboBoxListView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
comment|// Add margin area to the background, to avoid background being cut for first and last item.
specifier|const
name|int
name|verticalMenuAdjustment
init|=
name|comboMenu
condition|?
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_MenuVMargin
argument_list|)
else|:
literal|0
decl_stmt|;
specifier|const
name|QRect
name|adjustedMenuRect
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
operator|-
name|verticalMenuAdjustment
argument_list|,
literal|0
argument_list|,
name|verticalMenuAdjustment
argument_list|)
decl_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|QS60StylePrivate
operator|::
name|SE_PopupBackground
argument_list|,
name|painter
argument_list|,
name|adjustedMenuRect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commonStyleDraws
operator|=
literal|true
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PE_FrameWindow
case|:
case|case
name|PE_FrameTabWidget
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTabWidgetFrame
modifier|*
name|tabFrame
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabWidgetFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOptionTabWidgetFrame
name|optionTabFrame
init|=
operator|*
name|tabFrame
decl_stmt|;
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|QS60StylePrivate
operator|::
name|SE_PanelBackground
argument_list|,
name|painter
argument_list|,
name|optionTabFrame
operator|.
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_IndicatorHeaderArrow
case|:
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|header
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|header
operator|->
name|sortIndicator
operator|&
name|QStyleOptionHeader
operator|::
name|SortUp
condition|)
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowUp
argument_list|,
name|header
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|header
operator|->
name|sortIndicator
operator|&
name|QStyleOptionHeader
operator|::
name|SortDown
condition|)
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
name|header
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
comment|// QStyleOptionHeader::None is not drawn => not needed
break|break;
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
case|case
name|PE_FrameGroupBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrameV2
modifier|*
name|frame
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrameV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|QS60StylePrivate
operator|::
name|SE_SettingsList
argument_list|,
name|painter
argument_list|,
name|frame
operator|->
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
comment|//QT_NO_GROUPBOX
comment|// Qt3 primitives are not supported
case|case
name|PE_Q3CheckListController
case|:
case|case
name|PE_Q3CheckListExclusiveIndicator
case|:
case|case
name|PE_Q3CheckListIndicator
case|:
case|case
name|PE_Q3DockWindowSeparator
case|:
case|case
name|PE_Q3Separator
case|:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|PE_Frame
case|:
break|break;
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
case|case
name|PE_PanelItemViewItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionViewItemV4
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItemV4
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|bool
name|isSelected
init|=
operator|(
name|vopt
operator|->
name|state
operator|&
name|State_Selected
operator|)
decl_stmt|;
specifier|const
name|bool
name|hasFocus
init|=
operator|(
name|vopt
operator|->
name|state
operator|&
name|State_HasFocus
operator|)
decl_stmt|;
specifier|const
name|bool
name|isPressed
init|=
name|QS60StylePrivate
operator|::
name|isWidgetPressed
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|QS60StylePrivate
operator|::
name|equalToThemePalette
argument_list|(
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
condition|)
block|{
name|QRect
name|highlightRect
init|=
name|vopt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QAbstractItemView
modifier|*
name|itemView
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|QAbstractItemView
operator|::
name|SelectionBehavior
name|selectionBehavior
init|=
name|itemView
condition|?
name|itemView
operator|->
name|selectionBehavior
argument_list|()
else|:
name|QAbstractItemView
operator|::
name|SelectItems
decl_stmt|;
comment|// Set the draw area for highlights (focus, select rect or pressed rect)
if|if
condition|(
name|hasFocus
operator|||
name|isPressed
condition|)
block|{
if|if
condition|(
name|selectionBehavior
operator|!=
name|QAbstractItemView
operator|::
name|SelectItems
condition|)
block|{
comment|// set highlight rect so that it is continuous from cell to cell, yet sligthly
comment|// smaller than cell rect
name|int
name|xBeginning
init|=
literal|0
decl_stmt|,
name|yBeginning
init|=
literal|0
decl_stmt|,
name|xEnd
init|=
literal|0
decl_stmt|,
name|yEnd
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|selectionBehavior
operator|==
name|QAbstractItemView
operator|::
name|SelectRows
condition|)
block|{
name|yBeginning
operator|=
literal|1
expr_stmt|;
name|yEnd
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|vopt
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItemV4
operator|::
name|Beginning
condition|)
name|xBeginning
operator|=
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|vopt
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItemV4
operator|::
name|End
condition|)
name|xEnd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectionBehavior
operator|==
name|QAbstractItemView
operator|::
name|SelectColumns
condition|)
block|{
name|xBeginning
operator|=
literal|1
expr_stmt|;
name|xEnd
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|vopt
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItemV4
operator|::
name|Beginning
condition|)
name|yBeginning
operator|=
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|vopt
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItemV4
operator|::
name|End
condition|)
name|yEnd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|highlightRect
operator|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|xBeginning
argument_list|,
name|yBeginning
argument_list|,
name|xEnd
argument_list|,
name|yEnd
argument_list|)
expr_stmt|;
block|}
block|}
name|bool
name|tableView
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|itemView
operator|&&
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|tableView
operator|=
literal|true
expr_stmt|;
name|QS60StylePrivate
operator|::
name|SkinElements
name|element
decl_stmt|;
name|bool
name|themeGraphicDefined
init|=
literal|false
decl_stmt|;
name|QRect
name|elementRect
init|=
name|option
operator|->
name|rect
decl_stmt|;
comment|//draw item is drawn as pressed, if it already has focus.
if|if
condition|(
name|isPressed
operator|&&
name|hasFocus
condition|)
block|{
name|themeGraphicDefined
operator|=
literal|true
expr_stmt|;
name|element
operator|=
name|tableView
condition|?
name|QS60StylePrivate
operator|::
name|SE_TableItemPressed
else|:
name|QS60StylePrivate
operator|::
name|SE_ListItemPressed
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasFocus
operator|||
operator|(
name|isSelected
operator|&&
name|selectionBehavior
operator|!=
name|QAbstractItemView
operator|::
name|SelectItems
operator|)
condition|)
block|{
name|element
operator|=
name|QS60StylePrivate
operator|::
name|SE_ListHighlight
expr_stmt|;
name|elementRect
operator|=
name|highlightRect
expr_stmt|;
name|themeGraphicDefined
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|themeGraphicDefined
condition|)
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|element
argument_list|,
name|painter
argument_list|,
name|elementRect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_ITEMVIEWS
case|case
name|PE_IndicatorMenuCheckMark
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|checkBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QStyleOptionMenuItem
name|optionCheckBox
init|=
operator|*
name|checkBox
decl_stmt|;
if|if
condition|(
name|optionCheckBox
operator|.
name|checked
condition|)
name|optionCheckBox
operator|.
name|state
operator|=
operator|(
name|optionCheckBox
operator|.
name|state
operator||
name|State_On
operator|)
expr_stmt|;
name|drawPrimitive
argument_list|(
name|PE_IndicatorCheckBox
argument_list|,
operator|&
name|optionCheckBox
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
case|case
name|PE_IndicatorToolBarHandle
case|:
comment|// no toolbar handles in S60/AVKON UI
case|case
name|PE_IndicatorToolBarSeparator
case|:
comment|// no separators in S60/AVKON UI
break|break;
endif|#
directive|endif
comment|//QT_NO_TOOLBAR
case|case
name|PE_PanelMenuBar
case|:
case|case
name|PE_FrameMenu
case|:
break|break;
comment|//disable frame in menu
case|case
name|PE_IndicatorBranch
case|:
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
comment|// 3.1 AVKON UI does not have tree view component, use common style for drawing there
if|if
condition|(
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_1
condition|)
block|{
else|#
directive|else
if|if
condition|(
literal|true
condition|)
block|{
endif|#
directive|endif
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
specifier|const
name|QStyleOptionViewItemV2
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItemV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|bool
name|rightLine
init|=
name|option
operator|->
name|state
operator|&
name|State_Item
decl_stmt|;
specifier|const
name|bool
name|downLine
init|=
name|option
operator|->
name|state
operator|&
name|State_Sibling
decl_stmt|;
specifier|const
name|bool
name|upLine
init|=
name|option
operator|->
name|state
operator|&
operator|(
name|State_Open
operator||
name|State_Children
operator||
name|State_Item
operator||
name|State_Sibling
operator|)
decl_stmt|;
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|adjustedFlags
init|=
name|flags
decl_stmt|;
name|QS60StyleEnums
operator|::
name|SkinParts
name|skinPart
decl_stmt|;
name|bool
name|drawSkinPart
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|rightLine
operator|&&
name|downLine
operator|&&
name|upLine
condition|)
block|{
name|skinPart
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnIndiHlLineBranch
expr_stmt|;
name|drawSkinPart
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rightLine
operator|&&
name|upLine
condition|)
block|{
name|skinPart
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnIndiHlLineEnd
expr_stmt|;
name|drawSkinPart
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|upLine
operator|&&
name|downLine
condition|)
block|{
name|skinPart
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnIndiHlLineStraight
expr_stmt|;
name|drawSkinPart
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|adjustedFlags
operator||=
name|QS60StylePrivate
operator|::
name|SF_Mirrored_X_Axis
expr_stmt|;
if|if
condition|(
name|drawSkinPart
condition|)
name|QS60StylePrivate
operator|::
name|drawSkinPart
argument_list|(
name|skinPart
argument_list|,
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|adjustedFlags
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Children
condition|)
block|{
name|QS60StyleEnums
operator|::
name|SkinParts
name|skinPart
init|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_Open
operator|)
condition|?
name|QS60StyleEnums
operator|::
name|SP_QgnIndiHlColSuper
else|:
name|QS60StyleEnums
operator|::
name|SP_QgnIndiHlExpSuper
decl_stmt|;
specifier|const
name|QRect
name|selectionRect
init|=
name|subElementRect
argument_list|(
name|SE_ItemViewItemCheckIndicator
argument_list|,
name|vopt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|int
name|minDimension
init|=
name|qMin
argument_list|(
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|magicTweak
init|=
operator|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
condition|?
operator|-
literal|3
else|:
literal|3
decl_stmt|;
comment|//@todo: magic
comment|//The branch indicator icon in S60 is supposed to be superimposed on top of branch lines.
name|QRect
name|iconRect
argument_list|(
name|QPoint
argument_list|(
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
operator|+
name|magicTweak
argument_list|,
name|selectionRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
name|QSize
argument_list|(
name|minDimension
argument_list|,
name|minDimension
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QS60StylePrivate
operator|::
name|isTouchSupported
argument_list|()
condition|)
name|iconRect
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
comment|//@todo: magic
name|QS60StylePrivate
operator|::
name|drawSkinPart
argument_list|(
name|skinPart
argument_list|,
name|painter
argument_list|,
name|iconRect
argument_list|,
name|adjustedFlags
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|PE_PanelItemViewRow
case|:
comment|// ### Qt 5: remove
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
if|if
condition|(
specifier|const
name|QStyleOptionViewItemV4
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItemV4
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|QS60StylePrivate
operator|::
name|equalToThemePalette
argument_list|(
name|vopt
operator|->
name|palette
operator|.
name|base
argument_list|()
operator|.
name|texture
argument_list|()
operator|.
name|cacheKey
argument_list|()
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
condition|)
block|{
comment|//QPalette::Base has been changed, let commonstyle draw the item
name|commonStyleDraws
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|QPalette
operator|::
name|ColorGroup
name|cg
init|=
name|vopt
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|QPalette
operator|::
name|Normal
else|:
name|QPalette
operator|::
name|Disabled
decl_stmt|;
if|if
condition|(
name|cg
operator|==
name|QPalette
operator|::
name|Normal
operator|&&
operator|!
operator|(
name|vopt
operator|->
name|state
operator|&
name|State_Active
operator|)
condition|)
name|cg
operator|=
name|QPalette
operator|::
name|Inactive
expr_stmt|;
if|if
condition|(
name|vopt
operator|->
name|features
operator|&
name|QStyleOptionViewItemV2
operator|::
name|Alternate
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|vopt
operator|->
name|rect
argument_list|,
name|vopt
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|AlternateBase
argument_list|)
argument_list|)
expr_stmt|;
comment|//apart from alternate base, no background for list item is drawn for S60Style
block|}
block|}
endif|#
directive|endif
break|break;
case|case
name|PE_PanelScrollAreaCorner
case|:
break|break;
case|case
name|PE_IndicatorItemViewItemDrop
case|:
if|if
condition|(
name|QS60StylePrivate
operator|::
name|isTouchSupported
argument_list|()
condition|)
name|QS60StylePrivate
operator|::
name|drawSkinElement
argument_list|(
name|QS60StylePrivate
operator|::
name|SE_DropArea
argument_list|,
name|painter
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|flags
argument_list|)
expr_stmt|;
else|else
name|commonStyleDraws
operator|=
literal|true
expr_stmt|;
break|break;
comment|// todo: items are below with #ifdefs "just in case". in final version, remove all non-required cases
case|case
name|PE_FrameLineEdit
case|:
case|case
name|PE_IndicatorDockWidgetResizeHandle
case|:
case|case
name|PE_PanelTipLabel
case|:
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|PE_IndicatorTabTear
case|:
comment|// No tab tear in S60
endif|#
directive|endif
comment|// QT_NO_TABBAR
case|case
name|PE_FrameDefaultButton
case|:
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
case|case
name|PE_FrameDockWidget
case|:
endif|#
directive|endif
comment|//QT_NO_DOCKWIDGET
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
case|case
name|PE_IndicatorProgressChunk
case|:
endif|#
directive|endif
comment|//QT_NO_PROGRESSBAR
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
case|case
name|PE_PanelToolBar
case|:
endif|#
directive|endif
comment|//QT_NO_TOOLBAR
ifndef|#
directive|ifndef
name|QT_NO_COLUMNVIEW
case|case
name|PE_IndicatorColumnViewArrow
case|:
endif|#
directive|endif
comment|//QT_NO_COLUMNVIEW
case|case
name|PE_FrameTabBarBase
case|:
comment|// since tabs are in S60 always in navipane, let's use common style for tab base in Qt.
default|default:
name|commonStyleDraws
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|commonStyleDraws
condition|)
block|{
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*! \reimp */
DECL|function|pixelMetric
name|int
name|QS60Style
operator|::
name|pixelMetric
parameter_list|(
name|PixelMetric
name|metric
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|int
name|metricValue
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|metric
argument_list|)
decl_stmt|;
if|if
condition|(
name|metricValue
operator|==
name|KNotFound
condition|)
name|metricValue
operator|=
name|QCommonStyle
operator|::
name|pixelMetric
argument_list|(
name|metric
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
expr_stmt|;
comment|// Menu scrollers should be set to zero height for combobox popups
if|if
condition|(
name|metric
operator|==
name|PM_MenuScrollerHeight
operator|&&
operator|!
name|qobject_cast
argument_list|<
specifier|const
name|QMenu
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|metricValue
operator|=
literal|0
expr_stmt|;
comment|//if layout direction is mirrored, switch left and right border margins
if|if
condition|(
name|option
operator|&&
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
block|{
if|if
condition|(
name|metric
operator|==
name|PM_LayoutLeftMargin
condition|)
name|metricValue
operator|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_LayoutRightMargin
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|metric
operator|==
name|PM_LayoutRightMargin
condition|)
name|metricValue
operator|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_LayoutLeftMargin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|widget
operator|&&
operator|(
name|metric
operator|==
name|PM_LayoutTopMargin
operator|||
name|metric
operator|==
name|PM_LayoutLeftMargin
operator|||
name|metric
operator|==
name|PM_LayoutRightMargin
operator|)
condition|)
if|if
condition|(
name|widget
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Dialog
condition|)
comment|//double the layout margins (except bottom) for dialogs, it is very close to real value
comment|//without having to define custom pixel metric
name|metricValue
operator|*=
literal|2
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
if|if
condition|(
name|metric
operator|==
name|PM_TabBarTabOverlap
operator|&&
operator|(
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|>
name|QSysInfo
operator|::
name|SV_S60_5_2
operator|)
condition|)
name|metricValue
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
return|return
name|metricValue
return|;
block|}
comment|/*! \reimp */
DECL|function|sizeFromContents
name|QSize
name|QS60Style
operator|::
name|sizeFromContents
parameter_list|(
name|ContentsType
name|ct
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QSize
modifier|&
name|csz
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QSize
name|sz
argument_list|(
name|csz
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ct
condition|)
block|{
case|case
name|CT_ToolButton
case|:
name|sz
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|csz
argument_list|,
name|widget
argument_list|)
expr_stmt|;
comment|//FIXME properly - style should calculate the location of border frame-part
name|sz
operator|+=
name|QSize
argument_list|(
literal|2
operator|*
name|pixelMetric
argument_list|(
name|PM_ButtonMargin
argument_list|)
argument_list|,
literal|2
operator|*
name|pixelMetric
argument_list|(
name|PM_ButtonMargin
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|toolBtn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
if|if
condition|(
name|toolBtn
operator|->
name|subControls
operator|&
name|SC_ToolButtonMenu
condition|)
name|sz
operator|+=
name|QSize
argument_list|(
name|pixelMetric
argument_list|(
name|PM_MenuButtonIndicator
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Make toolbuttons in toolbar stretch the whole screen area
if|if
condition|(
name|widget
operator|&&
name|qobject_cast
argument_list|<
specifier|const
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
block|{
specifier|const
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|parentCanGrowHorizontally
init|=
operator|!
operator|(
name|tb
operator|->
name|sizePolicy
argument_list|()
operator|.
name|horizontalPolicy
argument_list|()
operator|==
name|QSizePolicy
operator|::
name|Fixed
operator|||
name|tb
operator|->
name|sizePolicy
argument_list|()
operator|.
name|horizontalPolicy
argument_list|()
operator|==
name|QSizePolicy
operator|::
name|Maximum
operator|)
operator|&&
name|tb
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Horizontal
decl_stmt|;
if|if
condition|(
name|parentCanGrowHorizontally
condition|)
block|{
name|int
name|buttons
init|=
literal|0
decl_stmt|;
comment|//Make the auto-stretch to happen only for horizontal orientation
if|if
condition|(
name|tb
operator|&&
name|tb
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|actionList
init|=
name|tb
operator|->
name|actions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actionList
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|buttons
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|widget
operator|->
name|parentWidget
argument_list|()
operator|&&
name|buttons
operator|>
literal|0
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
cast|const_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|int
name|toolBarMaxWidth
init|=
literal|0
decl_stmt|;
name|int
name|totalMargin
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|w
condition|)
block|{
comment|//honor fixed width parents
if|if
condition|(
name|w
operator|->
name|maximumWidth
argument_list|()
operator|==
name|w
operator|->
name|minimumWidth
argument_list|()
condition|)
name|toolBarMaxWidth
operator|=
name|qMax
argument_list|(
name|toolBarMaxWidth
argument_list|,
name|w
operator|->
name|maximumWidth
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|layout
argument_list|()
operator|&&
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Widget
condition|)
block|{
name|totalMargin
operator|+=
name|w
operator|->
name|layout
argument_list|()
operator|->
name|contentsMargins
argument_list|()
operator|.
name|left
argument_list|()
operator|+
name|w
operator|->
name|layout
argument_list|()
operator|->
name|contentsMargins
argument_list|()
operator|.
name|right
argument_list|()
expr_stmt|;
block|}
name|w
operator|=
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
name|totalMargin
operator|+=
literal|2
operator|*
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarFrameWidth
argument_list|)
expr_stmt|;
if|if
condition|(
name|toolBarMaxWidth
operator|==
literal|0
condition|)
name|toolBarMaxWidth
operator|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
operator|.
name|width
argument_list|()
expr_stmt|;
comment|//Reduce the margins, toolbar frame, item spacing and internal margin from available area
name|toolBarMaxWidth
operator|-=
name|totalMargin
expr_stmt|;
comment|//ensure that buttons are side-by-side and not on top of each other
specifier|const
name|int
name|toolButtonWidth
init|=
operator|(
name|toolBarMaxWidth
operator|/
name|buttons
operator|)
operator|-
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarItemSpacing
argument_list|)
operator|-
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarItemMargin
argument_list|)
comment|//toolbar frame needs to be reduced again, since QToolBarLayout adds it for each toolbar action
operator|-
literal|2
operator|*
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarFrameWidth
argument_list|)
operator|-
literal|1
decl_stmt|;
name|sz
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|toolButtonWidth
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|CT_PushButton
case|:
name|sz
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|csz
argument_list|,
name|widget
argument_list|)
expr_stmt|;
comment|//FIXME properly - style should calculate the location of border frame-part
if|if
condition|(
specifier|const
name|QAbstractButton
modifier|*
name|buttonWidget
init|=
operator|(
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|buttonWidget
operator|->
name|isCheckable
argument_list|()
condition|)
name|sz
operator|+=
name|QSize
argument_list|(
name|pixelMetric
argument_list|(
name|PM_IndicatorWidth
argument_list|)
operator|+
name|pixelMetric
argument_list|(
name|PM_CheckBoxLabelSpacing
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|int
name|iconHeight
init|=
operator|(
operator|!
name|buttonWidget
operator|->
name|icon
argument_list|()
operator|.
name|isNull
argument_list|()
operator|)
condition|?
name|buttonWidget
operator|->
name|iconSize
argument_list|()
operator|.
name|height
argument_list|()
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|textHeight
init|=
operator|(
name|buttonWidget
operator|->
name|text
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|buttonWidget
operator|->
name|fontMetrics
argument_list|()
operator|.
name|size
argument_list|(
name|Qt
operator|::
name|TextSingleLine
argument_list|,
name|buttonWidget
operator|->
name|text
argument_list|()
argument_list|)
operator|.
name|height
argument_list|()
else|:
name|opt
operator|->
name|fontMetrics
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|int
name|decoratorHeight
init|=
operator|(
name|buttonWidget
operator|->
name|isCheckable
argument_list|()
operator|)
condition|?
name|pixelMetric
argument_list|(
name|PM_IndicatorHeight
argument_list|)
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|contentHeight
init|=
name|qMax
argument_list|(
name|qMax
argument_list|(
name|iconHeight
argument_list|,
name|decoratorHeight
argument_list|)
operator|+
name|pixelMetric
argument_list|(
name|PM_ButtonMargin
argument_list|)
argument_list|,
name|textHeight
operator|+
literal|2
operator|*
name|pixelMetric
argument_list|(
name|PM_ButtonMargin
argument_list|)
argument_list|)
decl_stmt|;
name|sz
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|sz
operator|.
name|height
argument_list|()
argument_list|,
name|contentHeight
argument_list|)
argument_list|)
expr_stmt|;
name|sz
operator|+=
name|QSize
argument_list|(
literal|2
operator|*
name|pixelMetric
argument_list|(
name|PM_ButtonMargin
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CT_LineEdit
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|f
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
name|sz
operator|+=
name|QSize
argument_list|(
literal|2
operator|*
name|f
operator|->
name|lineWidth
argument_list|,
literal|4
operator|*
name|f
operator|->
name|lineWidth
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_TabBarTab
case|:
block|{
name|sz
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|csz
argument_list|,
name|widget
argument_list|)
expr_stmt|;
comment|// Adjust beginning tabbar item size, if scrollbuttons are used. This is to ensure that the
comment|// tabbar item content fits, since scrollbuttons are making beginning tabbar item smaller.
name|int
name|scrollButtonSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
specifier|const
name|QTabBar
modifier|*
name|tabBar
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTabBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|scrollButtonSize
operator|=
name|tabBar
operator|->
name|usesScrollButtons
argument_list|()
condition|?
name|pixelMetric
argument_list|(
name|PM_TabBarScrollButtonWidth
argument_list|)
else|:
literal|0
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
specifier|const
name|bool
name|verticalTabs
init|=
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedEast
operator|||
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedWest
operator|||
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|TriangularEast
operator|||
name|tab
operator|->
name|shape
operator|==
name|QTabBar
operator|::
name|TriangularWest
decl_stmt|;
if|if
condition|(
name|tab
operator|->
name|position
operator|==
name|QStyleOptionTab
operator|::
name|Beginning
condition|)
name|sz
operator|+=
name|QSize
argument_list|(
name|verticalTabs
condition|?
literal|0
else|:
name|scrollButtonSize
argument_list|,
operator|!
name|verticalTabs
condition|?
literal|0
else|:
name|scrollButtonSize
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CT_MenuItem
case|:
case|case
name|CT_ItemViewItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|menuItem
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
if|if
condition|(
name|menuItem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|Separator
condition|)
block|{
name|sz
operator|=
name|QSize
argument_list|(
name|menuItem
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
operator|*
name|pixelMetric
argument_list|(
name|PM_MenuHMargin
argument_list|)
operator|-
literal|2
operator|*
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_FrameCornerWidth
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|sz
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|csz
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QS60StylePrivate
operator|::
name|isTouchSupported
argument_list|()
condition|)
block|{
comment|//Make itemview easier to use in touch devices
name|sz
operator|.
name|setHeight
argument_list|(
name|sz
operator|.
name|height
argument_list|()
operator|+
literal|2
operator|*
name|pixelMetric
argument_list|(
name|PM_FocusFrameVMargin
argument_list|)
argument_list|)
expr_stmt|;
comment|//QCommonStyle does not adjust height with horizontal margin, it only adjusts width
if|if
condition|(
name|ct
operator|==
name|CT_MenuItem
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|sz
operator|.
name|height
argument_list|()
operator|-
literal|8
argument_list|)
expr_stmt|;
comment|//QCommonstyle adds 8 to height that this style handles through PM values
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CT_ComboBox
case|:
block|{
comment|// Fixing Ui design issues with too wide QComboBoxes and greedy SizeHints
comment|// Make sure, that the combobox stays within the screen.
specifier|const
name|QSize
name|desktopContentSize
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|QSize
argument_list|(
name|pixelMetric
argument_list|(
name|PM_LayoutLeftMargin
argument_list|)
operator|+
name|pixelMetric
argument_list|(
name|PM_LayoutRightMargin
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|sz
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|csz
argument_list|,
name|widget
argument_list|)
operator|.
name|boundedTo
argument_list|(
name|desktopContentSize
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
default|default:
name|sz
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|csz
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|sz
operator|.
name|isValid
argument_list|()
condition|)
name|sz
operator|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|ct
argument_list|,
name|opt
argument_list|,
name|csz
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
block|}
comment|/*! \reimp */
DECL|function|styleHint
name|int
name|QS60Style
operator|::
name|styleHint
parameter_list|(
name|StyleHint
name|sh
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QStyleHintReturn
modifier|*
name|hret
parameter_list|)
specifier|const
block|{
name|int
name|retValue
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|sh
condition|)
block|{
case|case
name|SH_RequestSoftwareInputPanel
case|:
if|if
condition|(
name|QS60StylePrivate
operator|::
name|isSingleClickUi
argument_list|()
condition|)
name|retValue
operator|=
name|RSIP_OnMouseClick
expr_stmt|;
else|else
name|retValue
operator|=
name|RSIP_OnMouseClickAndAlreadyFocused
expr_stmt|;
break|break;
case|case
name|SH_ComboBox_Popup
case|:
name|retValue
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SH_Table_GridLineColor
case|:
name|retValue
operator|=
name|int
argument_list|(
name|QS60StylePrivate
operator|::
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnLineColors
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_GroupBox_TextLabelColor
case|:
name|retValue
operator|=
name|int
argument_list|(
name|QS60StylePrivate
operator|::
name|s60Color
argument_list|(
name|QS60StyleEnums
operator|::
name|CL_QsnTextColors
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_ScrollBar_ScrollWhenPointerLeavesControl
case|:
name|retValue
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SH_Slider_SnapToValue
case|:
name|retValue
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SH_Slider_StopMouseOverSlider
case|:
name|retValue
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SH_LineEdit_PasswordCharacter
case|:
name|retValue
operator|=
literal|'*'
expr_stmt|;
break|break;
case|case
name|SH_ComboBox_PopupFrameStyle
case|:
name|retValue
operator|=
name|QFrame
operator|::
name|NoFrame
operator||
name|QFrame
operator|::
name|Plain
expr_stmt|;
break|break;
case|case
name|SH_Dial_BackgroundRole
case|:
name|retValue
operator|=
name|QPalette
operator|::
name|Base
expr_stmt|;
break|break;
case|case
name|SH_ItemView_ActivateItemOnSingleClick
case|:
block|{
if|if
condition|(
name|QS60StylePrivate
operator|::
name|isSingleClickUi
argument_list|()
condition|)
name|retValue
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|opt
operator|&&
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
name|retValue
operator|=
literal|true
expr_stmt|;
break|break;
block|}
case|case
name|SH_ProgressDialog_TextLabelAlignment
case|:
name|retValue
operator|=
operator|(
name|QApplication
operator|::
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|LeftToRight
operator|)
condition|?
name|Qt
operator|::
name|AlignLeft
else|:
name|Qt
operator|::
name|AlignRight
expr_stmt|;
break|break;
case|case
name|SH_Menu_SubMenuPopupDelay
case|:
name|retValue
operator|=
literal|300
expr_stmt|;
break|break;
case|case
name|SH_Menu_Scrollable
case|:
name|retValue
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SH_Menu_SelectionWrap
case|:
name|retValue
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SH_Menu_MouseTracking
case|:
name|retValue
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SH_ItemView_ShowDecorationSelected
case|:
name|retValue
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SH_ToolBar_Movable
case|:
name|retValue
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|SH_BlinkCursorWhenTextSelected
case|:
name|retValue
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SH_UnderlineShortcut
case|:
name|retValue
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|SH_FormLayoutWrapPolicy
case|:
name|retValue
operator|=
name|QFormLayout
operator|::
name|WrapLongRows
expr_stmt|;
break|break;
case|case
name|SH_ScrollBar_ContextMenu
case|:
name|retValue
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
name|retValue
operator|=
name|QCommonStyle
operator|::
name|styleHint
argument_list|(
name|sh
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|,
name|hret
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|retValue
return|;
block|}
comment|/*! \reimp */
DECL|function|subControlRect
name|QRect
name|QS60Style
operator|::
name|subControlRect
parameter_list|(
name|ComplexControl
name|control
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|SubControl
name|scontrol
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QRect
name|ret
decl_stmt|;
switch|switch
condition|(
name|control
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
comment|// This implementation of subControlRect(CC_ScrollBar..) basically just removes the SC_ScrollBarSubLine and SC_ScrollBarAddLine
case|case
name|CC_ScrollBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|scrollbarOption
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|QRect
name|scrollBarRect
init|=
name|scrollbarOption
operator|->
name|rect
decl_stmt|;
specifier|const
name|bool
name|isHorizontal
init|=
name|scrollbarOption
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
decl_stmt|;
specifier|const
name|int
name|maxlen
init|=
name|isHorizontal
condition|?
name|scrollBarRect
operator|.
name|width
argument_list|()
else|:
name|scrollBarRect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|sliderlen
decl_stmt|;
comment|// calculate slider length
if|if
condition|(
name|scrollbarOption
operator|->
name|maximum
operator|!=
name|scrollbarOption
operator|->
name|minimum
condition|)
block|{
specifier|const
name|uint
name|range
init|=
name|scrollbarOption
operator|->
name|maximum
operator|-
name|scrollbarOption
operator|->
name|minimum
decl_stmt|;
name|sliderlen
operator|=
operator|(
name|qint64
argument_list|(
name|scrollbarOption
operator|->
name|pageStep
argument_list|)
operator|*
name|maxlen
operator|)
operator|/
operator|(
name|range
operator|+
name|scrollbarOption
operator|->
name|pageStep
operator|)
expr_stmt|;
specifier|const
name|int
name|slidermin
init|=
name|pixelMetric
argument_list|(
name|PM_ScrollBarSliderMin
argument_list|,
name|scrollbarOption
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|sliderlen
argument_list|<
name|slidermin
operator|||
name|range
argument_list|>
argument_list|(
name|INT_MAX
operator|>>
literal|1
argument_list|)
condition|)
name|sliderlen
operator|=
name|slidermin
expr_stmt|;
if|if
condition|(
name|sliderlen
operator|>
name|maxlen
condition|)
name|sliderlen
operator|=
name|maxlen
expr_stmt|;
block|}
else|else
block|{
name|sliderlen
operator|=
name|maxlen
expr_stmt|;
block|}
specifier|const
name|int
name|sliderstart
init|=
name|sliderPositionFromValue
argument_list|(
name|scrollbarOption
operator|->
name|minimum
argument_list|,
name|scrollbarOption
operator|->
name|maximum
argument_list|,
name|scrollbarOption
operator|->
name|sliderPosition
argument_list|,
name|maxlen
operator|-
name|sliderlen
argument_list|,
name|scrollbarOption
operator|->
name|upsideDown
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|scontrol
condition|)
block|{
case|case
name|SC_ScrollBarSubPage
case|:
comment|// between top/left button and slider
if|if
condition|(
name|isHorizontal
condition|)
name|ret
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sliderstart
argument_list|,
name|scrollBarRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|scrollBarRect
operator|.
name|width
argument_list|()
argument_list|,
name|sliderstart
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ScrollBarAddPage
case|:
block|{
comment|// between bottom/right button and slider
specifier|const
name|int
name|addPageLength
init|=
name|sliderstart
operator|+
name|sliderlen
decl_stmt|;
if|if
condition|(
name|isHorizontal
condition|)
name|ret
operator|=
name|scrollBarRect
operator|.
name|adjusted
argument_list|(
name|addPageLength
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|ret
operator|=
name|scrollBarRect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
name|addPageLength
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SC_ScrollBarGroove
case|:
name|ret
operator|=
name|scrollBarRect
expr_stmt|;
break|break;
case|case
name|SC_ScrollBarSlider
case|:
if|if
condition|(
name|scrollbarOption
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|ret
operator|.
name|setRect
argument_list|(
name|sliderstart
argument_list|,
literal|0
argument_list|,
name|sliderlen
argument_list|,
name|scrollBarRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
name|sliderstart
argument_list|,
name|scrollBarRect
operator|.
name|width
argument_list|()
argument_list|,
name|sliderlen
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ScrollBarSubLine
case|:
comment|// top/left button
case|case
name|SC_ScrollBarAddLine
case|:
comment|// bottom/right button
default|default:
break|break;
block|}
name|ret
operator|=
name|visualRect
argument_list|(
name|scrollbarOption
operator|->
name|direction
argument_list|,
name|scrollBarRect
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SCROLLBAR
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinbox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|int
name|frameThickness
init|=
name|spinbox
operator|->
name|frame
condition|?
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|spinbox
argument_list|,
name|widget
argument_list|)
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|buttonMargin
init|=
name|spinbox
operator|->
name|frame
condition|?
literal|2
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|buttonContentWidth
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_ButtonIconSize
argument_list|)
operator|+
literal|2
operator|*
name|buttonMargin
decl_stmt|;
comment|// Spinbox buttons should be no larger than one fourth of total width.
comment|// Thus, side-by-side buttons would take half of the total width.
specifier|const
name|int
name|maxSize
init|=
name|qMax
argument_list|(
name|spinbox
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|4
argument_list|,
name|buttonContentWidth
argument_list|)
decl_stmt|;
name|QSize
name|buttonSize
decl_stmt|;
name|buttonSize
operator|.
name|setHeight
argument_list|(
name|qMin
argument_list|(
name|maxSize
argument_list|,
name|qMax
argument_list|(
literal|8
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|frameThickness
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//width should at least be equal to height
name|buttonSize
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|buttonSize
operator|.
name|height
argument_list|()
argument_list|,
name|buttonContentWidth
argument_list|)
argument_list|)
expr_stmt|;
name|buttonSize
operator|=
name|buttonSize
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
expr_stmt|;
comment|// Normally spinbuttons should be side-by-side, but if spinbox grows very big
comment|// and spinbuttons reach their maximum size, they can be deployed one top of the other.
specifier|const
name|bool
name|sideBySide
init|=
operator|(
name|buttonSize
operator|.
name|height
argument_list|()
operator|*
literal|2
operator|<
name|spinbox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|)
condition|?
literal|false
else|:
literal|true
decl_stmt|;
specifier|const
name|int
name|y
init|=
name|frameThickness
operator|+
name|spinbox
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
operator|(
name|spinbox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
operator|(
name|sideBySide
condition|?
literal|1
else|:
literal|2
operator|)
operator|*
name|buttonSize
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
decl_stmt|;
specifier|const
name|int
name|x
init|=
name|spinbox
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|spinbox
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|frameThickness
operator|-
operator|(
name|sideBySide
condition|?
literal|2
else|:
literal|1
operator|)
operator|*
name|buttonSize
operator|.
name|width
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|scontrol
condition|)
block|{
case|case
name|SC_SpinBoxUp
case|:
if|if
condition|(
name|spinbox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|)
return|return
name|QRect
argument_list|()
return|;
name|ret
operator|=
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|buttonSize
operator|.
name|width
argument_list|()
argument_list|,
name|buttonSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_SpinBoxDown
case|:
if|if
condition|(
name|spinbox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|)
return|return
name|QRect
argument_list|()
return|;
name|ret
operator|=
name|QRect
argument_list|(
name|x
operator|+
operator|(
name|sideBySide
condition|?
name|buttonSize
operator|.
name|width
argument_list|()
else|:
literal|0
operator|)
argument_list|,
name|y
operator|+
operator|(
name|sideBySide
condition|?
literal|0
else|:
name|buttonSize
operator|.
name|height
argument_list|()
operator|)
argument_list|,
name|buttonSize
operator|.
name|width
argument_list|()
argument_list|,
name|buttonSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_SpinBoxEditField
case|:
if|if
condition|(
name|spinbox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|)
name|ret
operator|=
name|QRect
argument_list|(
name|frameThickness
argument_list|,
name|frameThickness
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
operator|*
name|frameThickness
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|frameThickness
argument_list|)
expr_stmt|;
else|else
name|ret
operator|=
name|QRect
argument_list|(
name|frameThickness
argument_list|,
name|frameThickness
argument_list|,
name|x
operator|-
name|frameThickness
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|frameThickness
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_SpinBoxFrame
case|:
name|ret
operator|=
name|spinbox
operator|->
name|rect
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|ret
operator|=
name|visualRect
argument_list|(
name|spinbox
operator|->
name|direction
argument_list|,
name|spinbox
operator|->
name|rect
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cmb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|ret
operator|=
name|cmb
operator|->
name|rect
expr_stmt|;
specifier|const
name|int
name|width
init|=
name|cmb
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|cmb
operator|->
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|int
name|buttonMargin
init|=
name|cmb
operator|->
name|frame
condition|?
literal|2
else|:
literal|0
decl_stmt|;
comment|// lets use spinbox frame here as well, as no combobox specific value available.
specifier|const
name|int
name|frameThickness
init|=
name|cmb
operator|->
name|frame
condition|?
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|cmb
argument_list|,
name|widget
argument_list|)
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|buttonMinSize
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_ButtonIconSize
argument_list|)
operator|+
literal|2
operator|*
name|buttonMargin
decl_stmt|;
name|QSize
name|buttonSize
decl_stmt|;
comment|//allow button to grow to one fourth of the frame height, if the frame is really tall
name|buttonSize
operator|.
name|setHeight
argument_list|(
name|qMin
argument_list|(
name|height
argument_list|,
name|qMax
argument_list|(
name|width
operator|/
literal|4
argument_list|,
name|buttonMinSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|buttonSize
operator|.
name|setWidth
argument_list|(
name|buttonSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|buttonSize
operator|=
name|buttonSize
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|scontrol
condition|)
block|{
case|case
name|SC_ComboBoxArrow
case|:
block|{
specifier|const
name|int
name|xposMod
init|=
name|cmb
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|width
operator|-
name|buttonMargin
operator|-
name|buttonSize
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|ypos
init|=
name|cmb
operator|->
name|rect
operator|.
name|y
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setRect
argument_list|(
name|xposMod
argument_list|,
name|ypos
operator|+
name|buttonMargin
argument_list|,
name|buttonSize
operator|.
name|width
argument_list|()
argument_list|,
name|height
operator|-
literal|2
operator|*
name|buttonMargin
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SC_ComboBoxEditField
case|:
block|{
name|ret
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|cmb
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|width
operator|-
name|buttonSize
operator|.
name|width
argument_list|()
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SC_ComboBoxListBoxPopup
case|:
block|{
name|ret
operator|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
name|ret
operator|=
name|visualRect
argument_list|(
name|cmb
operator|->
name|direction
argument_list|,
name|cmb
operator|->
name|rect
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CC_GroupBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|groupBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|ret
operator|=
name|QCommonStyle
operator|::
name|subControlRect
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|scontrol
argument_list|,
name|widget
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|scontrol
condition|)
block|{
case|case
name|SC_GroupBoxCheckBox
case|:
comment|//fallthrough
case|case
name|SC_GroupBoxLabel
case|:
block|{
comment|//slightly indent text and boxes, so that dialog border does not mess with them.
specifier|const
name|int
name|horizontalSpacing
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_LayoutHorizontalSpacing
argument_list|)
decl_stmt|;
name|ret
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
name|horizontalSpacing
operator|-
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SC_GroupBoxFrame
case|:
block|{
specifier|const
name|QRect
name|textBox
init|=
name|subControlRect
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|SC_GroupBoxLabel
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|int
name|tbHeight
init|=
name|textBox
operator|.
name|height
argument_list|()
decl_stmt|;
name|ret
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|-
name|ret
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
comment|// include title to within the groupBox frame
name|ret
operator|.
name|setHeight
argument_list|(
name|ret
operator|.
name|height
argument_list|()
operator|+
name|tbHeight
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
name|ret
operator|.
name|bottom
argument_list|()
operator|>
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|bottom
argument_list|()
condition|)
name|ret
operator|.
name|setBottom
argument_list|(
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
break|break;
case|case
name|CC_ToolButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|toolButton
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|int
name|indicatorRect
init|=
name|pixelMetric
argument_list|(
name|PM_MenuButtonIndicator
argument_list|)
operator|+
literal|2
operator|*
name|pixelMetric
argument_list|(
name|PM_ButtonMargin
argument_list|)
decl_stmt|;
specifier|const
name|int
name|border
init|=
name|pixelMetric
argument_list|(
name|PM_ButtonMargin
argument_list|)
operator|+
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
name|ret
operator|=
name|toolButton
operator|->
name|rect
expr_stmt|;
specifier|const
name|bool
name|popup
init|=
operator|(
name|toolButton
operator|->
name|features
operator|&
operator|(
name|QStyleOptionToolButton
operator|::
name|MenuButtonPopup
operator||
name|QStyleOptionToolButton
operator|::
name|PopupDelay
operator|)
operator|)
operator|==
name|QStyleOptionToolButton
operator|::
name|MenuButtonPopup
decl_stmt|;
switch|switch
condition|(
name|scontrol
condition|)
block|{
case|case
name|SC_ToolButton
case|:
if|if
condition|(
name|popup
condition|)
name|ret
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|indicatorRect
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ToolButtonMenu
case|:
if|if
condition|(
name|popup
condition|)
name|ret
operator|.
name|adjust
argument_list|(
name|ret
operator|.
name|width
argument_list|()
operator|-
name|indicatorRect
argument_list|,
name|border
argument_list|,
operator|-
name|pixelMetric
argument_list|(
name|PM_ButtonMargin
argument_list|)
argument_list|,
operator|-
name|border
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|ret
operator|=
name|visualRect
argument_list|(
name|toolButton
operator|->
name|direction
argument_list|,
name|toolButton
operator|->
name|rect
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|ret
operator|=
name|QCommonStyle
operator|::
name|subControlRect
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|scontrol
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/*!   \reimp */
DECL|function|subElementRect
name|QRect
name|QS60Style
operator|::
name|subElementRect
parameter_list|(
name|SubElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QRect
name|ret
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|SE_RadioButtonFocusRect
case|:
name|ret
operator|=
name|opt
operator|->
name|rect
expr_stmt|;
break|break;
case|case
name|SE_LineEditContents
case|:
block|{
comment|// in S60 the input text box doesn't start from line Edit's TL, but
comment|// a bit indented (8 pixels).
specifier|const
name|int
name|KLineEditDefaultIndention
init|=
literal|8
decl_stmt|;
name|ret
operator|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|KLineEditDefaultIndention
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SE_TabBarTearIndicator
case|:
name|ret
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_TabWidgetTabBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTabWidgetFrame
modifier|*
name|optionTab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabWidgetFrame
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|ret
operator|=
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|element
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionTabWidgetFrame
modifier|*
name|twf
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabWidgetFrame
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
specifier|const
name|int
name|borderThickness
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
name|int
name|tabOverlap
init|=
name|pixelMetric
argument_list|(
name|PM_TabBarTabOverlap
argument_list|)
decl_stmt|;
if|if
condition|(
name|tabOverlap
operator|>
name|borderThickness
condition|)
name|tabOverlap
operator|-=
name|borderThickness
expr_stmt|;
specifier|const
name|QTabWidget
modifier|*
name|tab
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|int
name|gain
init|=
operator|(
name|tab
operator|)
condition|?
name|tabOverlap
operator|*
name|tab
operator|->
name|count
argument_list|()
else|:
literal|0
decl_stmt|;
switch|switch
condition|(
name|twf
operator|->
name|shape
condition|)
block|{
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
case|case
name|QTabBar
operator|::
name|TriangularNorth
case|:
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
case|case
name|QTabBar
operator|::
name|TriangularSouth
case|:
block|{
if|if
condition|(
name|widget
condition|)
block|{
comment|// make sure that gain does not set the rect outside of widget boundaries
if|if
condition|(
name|twf
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
block|{
if|if
condition|(
operator|(
name|ret
operator|.
name|left
argument_list|()
operator|-
name|gain
operator|)
operator|<
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|left
argument_list|()
condition|)
name|gain
operator|=
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|left
argument_list|()
operator|-
name|ret
operator|.
name|left
argument_list|()
expr_stmt|;
name|ret
operator|.
name|adjust
argument_list|(
operator|-
name|gain
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|ret
operator|.
name|right
argument_list|()
operator|+
name|gain
operator|)
operator|>
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|right
argument_list|()
condition|)
name|gain
operator|=
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|right
argument_list|()
operator|-
name|ret
operator|.
name|right
argument_list|()
expr_stmt|;
name|ret
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|gain
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
default|default:
block|{
if|if
condition|(
name|widget
condition|)
block|{
if|if
condition|(
operator|(
name|ret
operator|.
name|bottom
argument_list|()
operator|+
name|gain
operator|)
operator|>
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|bottom
argument_list|()
condition|)
name|gain
operator|=
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|bottom
argument_list|()
operator|-
name|ret
operator|.
name|bottom
argument_list|()
expr_stmt|;
name|ret
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|gain
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
break|break;
case|case
name|SE_ItemViewItemText
case|:
case|case
name|SE_ItemViewItemDecoration
case|:
if|if
condition|(
specifier|const
name|QStyleOptionViewItemV4
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItemV4
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
specifier|const
name|QAbstractItemView
modifier|*
name|listItem
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|multiSelection
init|=
operator|!
name|listItem
condition|?
literal|false
else|:
name|listItem
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|MultiSelection
operator|||
name|listItem
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ExtendedSelection
operator|||
name|listItem
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ContiguousSelection
decl_stmt|;
name|ret
operator|=
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|element
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
comment|// If both multiselect& check-state, then remove checkbox and move
comment|// text and decoration towards the beginning
if|if
condition|(
name|listItem
operator|&&
name|multiSelection
operator|&&
operator|(
name|vopt
operator|->
name|features
operator|&
name|QStyleOptionViewItemV2
operator|::
name|HasCheckIndicator
operator|)
condition|)
block|{
specifier|const
name|int
name|verticalSpacing
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_LayoutVerticalSpacing
argument_list|)
decl_stmt|;
comment|//const int horizontalSpacing = QS60StylePrivate::pixelMetric(PM_LayoutHorizontalSpacing);
specifier|const
name|int
name|checkBoxRectWidth
init|=
name|subElementRect
argument_list|(
name|SE_ItemViewItemCheckIndicator
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
name|ret
operator|.
name|adjust
argument_list|(
operator|-
name|checkBoxRectWidth
operator|-
name|verticalSpacing
argument_list|,
literal|0
argument_list|,
operator|-
name|checkBoxRectWidth
operator|-
name|verticalSpacing
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|menuItem
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
specifier|const
name|bool
name|checkable
init|=
name|menuItem
operator|->
name|checkType
operator|!=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
decl_stmt|;
specifier|const
name|int
name|indicatorWidth
init|=
name|checkable
condition|?
name|pixelMetric
argument_list|(
name|PM_ListViewIconSize
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
else|:
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|ret
operator|=
name|menuItem
operator|->
name|rect
expr_stmt|;
name|QRect
name|checkBoxRect
init|=
name|checkable
condition|?
name|menuItem
operator|->
name|rect
else|:
name|QRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkable
condition|)
block|{
name|checkBoxRect
operator|.
name|setWidth
argument_list|(
name|pixelMetric
argument_list|(
name|PM_IndicatorWidth
argument_list|)
argument_list|)
expr_stmt|;
name|checkBoxRect
operator|.
name|setHeight
argument_list|(
name|pixelMetric
argument_list|(
name|PM_IndicatorHeight
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|int
name|vSpacing
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_LayoutVerticalSpacing
argument_list|)
decl_stmt|;
comment|//The vertical spacing is doubled; it needs one spacing to separate checkbox from
comment|//highlight and then it needs one to separate it whatever is shown after it (text/icon/both).
specifier|const
name|int
name|moveByX
init|=
name|checkBoxRect
operator|.
name|width
argument_list|()
operator|+
literal|2
operator|*
name|vSpacing
decl_stmt|;
if|if
condition|(
name|element
operator|==
name|SE_ItemViewItemDecoration
condition|)
block|{
if|if
condition|(
name|menuItem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|ret
operator|=
name|QRect
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|menuItem
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|ret
operator|.
name|translate
argument_list|(
name|ret
operator|.
name|width
argument_list|()
operator|-
name|indicatorWidth
operator|-
name|moveByX
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|translate
argument_list|(
name|moveByX
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setWidth
argument_list|(
name|indicatorWidth
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|menuItem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|menuItem
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|ret
operator|.
name|adjust
argument_list|(
name|indicatorWidth
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|indicatorWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|menuItem
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|ret
operator|.
name|adjust
argument_list|(
name|moveByX
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|moveByX
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Make room for submenu indicator
if|if
condition|(
name|menuItem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|SubMenu
condition|)
block|{
comment|// submenu indicator is very small, so lets halve the rect
if|if
condition|(
name|menuItem
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|ret
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
operator|(
name|indicatorWidth
operator|>>
literal|1
operator|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|adjust
argument_list|(
operator|(
name|indicatorWidth
operator|>>
literal|1
operator|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|SE_ItemViewItemCheckIndicator
case|:
if|if
condition|(
specifier|const
name|QStyleOptionViewItemV4
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItemV4
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
specifier|const
name|QAbstractItemView
modifier|*
name|listItem
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|singleSelection
init|=
name|listItem
operator|&&
operator|(
name|listItem
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|SingleSelection
operator|||
name|listItem
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|NoSelection
operator|)
decl_stmt|;
specifier|const
name|bool
name|checkBoxOnly
init|=
operator|(
name|vopt
operator|->
name|features
operator|&
name|QStyleOptionViewItemV2
operator|::
name|HasCheckIndicator
operator|)
operator|&&
name|listItem
operator|&&
name|singleSelection
operator|&&
name|vopt
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
operator|&&
name|vopt
operator|->
name|icon
operator|.
name|isNull
argument_list|()
decl_stmt|;
comment|// Selection check mark rect.
specifier|const
name|int
name|indicatorWidth
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_IndicatorWidth
argument_list|)
decl_stmt|;
specifier|const
name|int
name|indicatorHeight
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_IndicatorHeight
argument_list|)
decl_stmt|;
specifier|const
name|int
name|spacing
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_CheckBoxLabelSpacing
argument_list|)
decl_stmt|;
specifier|const
name|int
name|itemHeight
init|=
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|heightOffset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|indicatorHeight
operator|<
name|itemHeight
condition|)
name|heightOffset
operator|=
operator|(
operator|(
name|itemHeight
operator|-
name|indicatorHeight
operator|)
operator|>>
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|checkBoxOnly
condition|)
block|{
comment|// Move rect and make it slightly smaller, so that
comment|// a) highlight border does not cross the rect
comment|// b) in s60 list checkbox is smaller than normal checkbox
comment|//todo; magic three
name|ret
operator|.
name|setRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|left
argument_list|()
operator|+
literal|3
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
name|heightOffset
argument_list|,
name|indicatorWidth
operator|-
literal|3
argument_list|,
name|indicatorHeight
operator|-
literal|3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|setRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
name|indicatorWidth
operator|-
name|spacing
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
name|heightOffset
argument_list|,
name|indicatorWidth
argument_list|,
name|indicatorHeight
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|=
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|element
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SE_HeaderLabel
case|:
name|ret
operator|=
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|element
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|opt
argument_list|)
condition|)
block|{
comment|// Subtract area needed for line
if|if
condition|(
name|opt
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
name|ret
operator|.
name|setHeight
argument_list|(
name|ret
operator|.
name|height
argument_list|()
operator|-
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_BoldLineWidth
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|setWidth
argument_list|(
name|ret
operator|.
name|width
argument_list|()
operator|-
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_ThinLineWidth
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|ret
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_RadioButtonIndicator
case|:
block|{
specifier|const
name|int
name|height
init|=
name|pixelMetric
argument_list|(
name|PM_ExclusiveIndicatorHeight
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
operator|(
operator|(
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|height
operator|)
operator|>>
literal|1
operator|)
argument_list|,
name|pixelMetric
argument_list|(
name|PM_ExclusiveIndicatorWidth
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|ret
operator|.
name|translate
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//move indicator slightly to avoid highlight crossing over it
name|ret
operator|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SE_CheckBoxIndicator
case|:
block|{
specifier|const
name|int
name|height
init|=
name|pixelMetric
argument_list|(
name|PM_IndicatorHeight
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setRect
argument_list|(
name|opt
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|opt
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
operator|(
operator|(
name|opt
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|height
operator|)
operator|>>
literal|1
operator|)
argument_list|,
name|pixelMetric
argument_list|(
name|PM_IndicatorWidth
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|ret
operator|.
name|translate
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//move indicator slightly to avoid highlight crossing over it
name|ret
operator|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|opt
operator|->
name|rect
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SE_CheckBoxFocusRect
case|:
name|ret
operator|=
name|opt
operator|->
name|rect
expr_stmt|;
break|break;
case|case
name|SE_ProgressBarLabel
case|:
case|case
name|SE_ProgressBarContents
case|:
case|case
name|SE_ProgressBarGroove
case|:
name|ret
operator|=
name|opt
operator|->
name|rect
expr_stmt|;
break|break;
default|default:
name|ret
operator|=
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|element
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/*!   \reimp  */
DECL|function|polish
name|void
name|QS60Style
operator|::
name|polish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QS60Style
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|polish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
return|return;
comment|//Currently we only support animations in QProgressBar.
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
if|if
condition|(
name|qobject_cast
argument_list|<
name|QProgressBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|widget
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
literal|false
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
operator|||
name|qobject_cast
argument_list|<
name|QScrollBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
endif|#
directive|endif
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OpaquePaintEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QS60StylePrivate
operator|::
name|drawsOwnThemeBackground
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyledBackground
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|false
ifndef|#
directive|ifndef
name|QT_NO_MENU
operator|||
name|qobject_cast
argument_list|<
specifier|const
name|QMenu
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
endif|#
directive|endif
comment|// QT_NO_MENU
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyledBackground
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|false
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
operator|||
name|qobject_cast
argument_list|<
specifier|const
name|QComboBoxListView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
endif|#
directive|endif
comment|//QT_NO_COMBOBOX
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyledBackground
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|setThemePalette
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|d
operator|->
name|setFont
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
comment|/*!   \reimp  */
DECL|function|unpolish
name|void
name|QS60Style
operator|::
name|unpolish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QS60Style
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
operator|||
name|qobject_cast
argument_list|<
name|QScrollBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
endif|#
directive|endif
condition|)
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OpaquePaintEvent
argument_list|)
expr_stmt|;
if|if
condition|(
name|QS60StylePrivate
operator|::
name|drawsOwnThemeBackground
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyledBackground
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|false
ifndef|#
directive|ifndef
name|QT_NO_MENU
operator|||
name|qobject_cast
argument_list|<
specifier|const
name|QMenu
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
endif|#
directive|endif
comment|// QT_NO_MENU
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyledBackground
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|false
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
operator|||
name|qobject_cast
argument_list|<
specifier|const
name|QComboBoxListView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
endif|#
directive|endif
comment|//QT_NO_COMBOBOX
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyledBackground
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|widget
condition|)
name|widget
operator|->
name|setPalette
argument_list|(
name|QPalette
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROGRESSBAR
argument_list|)
if|if
condition|(
name|QProgressBar
modifier|*
name|bar
init|=
name|qobject_cast
argument_list|<
name|QProgressBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|widget
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_bars
operator|.
name|removeAll
argument_list|(
name|bar
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|d
argument_list|)
endif|#
directive|endif
name|QCommonStyle
operator|::
name|unpolish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
comment|/*!   \reimp  */
DECL|function|polish
name|void
name|QS60Style
operator|::
name|polish
parameter_list|(
name|QApplication
modifier|*
name|application
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QS60Style
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|polish
argument_list|(
name|qApp
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_originalPalette
operator|=
name|application
operator|->
name|palette
argument_list|()
expr_stmt|;
name|d
operator|->
name|setThemePalette
argument_list|(
name|application
argument_list|)
expr_stmt|;
if|if
condition|(
name|QS60StylePrivate
operator|::
name|isTouchSupported
argument_list|()
condition|)
name|qApp
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/*!   \reimp  */
DECL|function|unpolish
name|void
name|QS60Style
operator|::
name|unpolish
parameter_list|(
name|QApplication
modifier|*
name|application
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|application
argument_list|)
name|Q_D
argument_list|(
name|QS60Style
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|unpolish
argument_list|(
name|qApp
argument_list|)
expr_stmt|;
specifier|const
name|QPalette
name|newPalette
init|=
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|standardPalette
argument_list|()
decl_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|newPalette
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|setSystemPalette
argument_list|(
name|d
operator|->
name|m_originalPalette
argument_list|)
expr_stmt|;
if|if
condition|(
name|QS60StylePrivate
operator|::
name|isTouchSupported
argument_list|()
condition|)
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/*!   \reimp  */
DECL|function|event
name|bool
name|QS60Style
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
name|Q_D
argument_list|(
name|QS60Style
argument_list|)
expr_stmt|;
specifier|const
name|QEvent
operator|::
name|Type
name|eventType
init|=
name|e
operator|->
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|eventType
operator|==
name|QEvent
operator|::
name|FocusIn
operator|||
name|eventType
operator|==
name|QEvent
operator|::
name|FocusOut
operator|||
name|eventType
operator|==
name|QEvent
operator|::
name|EnterEditFocus
operator|||
name|eventType
operator|==
name|QEvent
operator|::
name|LeaveEditFocus
operator|)
operator|&&
name|QS60StylePrivate
operator|::
name|isTouchSupported
argument_list|()
condition|)
return|return
literal|false
return|;
endif|#
directive|endif
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|Timer
case|:
block|{
name|QTimerEvent
modifier|*
name|te
init|=
cast|static_cast
argument_list|<
name|QTimerEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|timerEvent
argument_list|(
name|te
argument_list|)
expr_stmt|;
block|}
break|break;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
case|case
name|QEvent
operator|::
name|FocusIn
case|:
if|if
condition|(
name|QWidget
modifier|*
name|focusWidget
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
block|{
comment|// Menus and combobox popups do not draw focus frame around them
if|if
condition|(
name|qobject_cast
argument_list|<
name|QComboBoxListView
operator|*
argument_list|>
argument_list|(
name|focusWidget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|focusWidget
argument_list|)
condition|)
break|break;
if|if
condition|(
operator|!
name|d
operator|->
name|m_focusFrame
condition|)
name|d
operator|->
name|m_focusFrame
operator|=
operator|new
name|QFocusFrame
argument_list|(
name|focusWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_focusFrame
operator|->
name|setWidget
argument_list|(
name|focusWidget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|m_focusFrame
condition|)
block|{
name|d
operator|->
name|m_focusFrame
operator|->
name|setWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QEvent
operator|::
name|FocusOut
case|:
if|if
condition|(
name|d
operator|->
name|m_focusFrame
condition|)
name|d
operator|->
name|m_focusFrame
operator|->
name|setWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|EnterEditFocus
case|:
case|case
name|QEvent
operator|::
name|LeaveEditFocus
case|:
if|if
condition|(
name|d
operator|->
name|m_focusFrame
condition|)
name|d
operator|->
name|m_focusFrame
operator|->
name|update
argument_list|()
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
comment|/*!     \internal  */
DECL|function|standardIconImplementation
name|QIcon
name|QS60Style
operator|::
name|standardIconImplementation
parameter_list|(
name|StandardPixmap
name|standardIcon
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
decl_stmt|;
name|qreal
name|iconHeightMultiplier
init|=
literal|1.0
decl_stmt|;
name|qreal
name|iconWidthMultiplier
init|=
literal|1.0
decl_stmt|;
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|adjustedFlags
decl_stmt|;
if|if
condition|(
name|option
condition|)
name|adjustedFlags
operator|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|||
name|option
operator|->
name|state
operator|==
literal|0
operator|)
condition|?
name|QS60StylePrivate
operator|::
name|SF_StateEnabled
else|:
name|QS60StylePrivate
operator|::
name|SF_StateDisabled
expr_stmt|;
switch|switch
condition|(
name|standardIcon
condition|)
block|{
case|case
name|SP_MessageBoxWarning
case|:
comment|// By default, S60 messagebox icons have 4:3 ratio. Value is from S60 LAF documentation.
name|iconHeightMultiplier
operator|=
literal|1.33
expr_stmt|;
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnNoteWarning
expr_stmt|;
break|break;
case|case
name|SP_MessageBoxInformation
case|:
name|iconHeightMultiplier
operator|=
literal|1.33
expr_stmt|;
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnNoteInfo
expr_stmt|;
break|break;
case|case
name|SP_MessageBoxCritical
case|:
name|iconHeightMultiplier
operator|=
literal|1.33
expr_stmt|;
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnNoteError
expr_stmt|;
break|break;
case|case
name|SP_MessageBoxQuestion
case|:
name|iconHeightMultiplier
operator|=
literal|1.33
expr_stmt|;
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnNoteQuery
expr_stmt|;
break|break;
case|case
name|SP_ArrowRight
case|:
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnIndiNaviArrowRight
expr_stmt|;
break|break;
case|case
name|SP_ArrowLeft
case|:
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnIndiNaviArrowLeft
expr_stmt|;
break|break;
case|case
name|SP_ArrowUp
case|:
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnIndiNaviArrowLeft
expr_stmt|;
name|adjustedFlags
operator||=
name|QS60StylePrivate
operator|::
name|SF_PointEast
expr_stmt|;
break|break;
case|case
name|SP_ArrowDown
case|:
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnIndiNaviArrowLeft
expr_stmt|;
name|adjustedFlags
operator||=
name|QS60StylePrivate
operator|::
name|SF_PointWest
expr_stmt|;
break|break;
case|case
name|SP_ArrowBack
case|:
if|if
condition|(
name|QApplication
operator|::
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
return|return
name|QS60Style
operator|::
name|standardIcon
argument_list|(
name|SP_ArrowRight
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
return|return
name|QS60Style
operator|::
name|standardIcon
argument_list|(
name|SP_ArrowLeft
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
case|case
name|SP_ArrowForward
case|:
if|if
condition|(
name|QApplication
operator|::
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
return|return
name|QS60Style
operator|::
name|standardIcon
argument_list|(
name|SP_ArrowLeft
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
return|return
name|QS60Style
operator|::
name|standardIcon
argument_list|(
name|SP_ArrowRight
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
case|case
name|SP_ComputerIcon
case|:
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnPropPhoneMemcLarge
expr_stmt|;
break|break;
case|case
name|SP_DirClosedIcon
case|:
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnPropFolderSmall
expr_stmt|;
break|break;
case|case
name|SP_DirOpenIcon
case|:
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnPropFolderCurrent
expr_stmt|;
break|break;
case|case
name|SP_DirIcon
case|:
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnPropFolderSmall
expr_stmt|;
break|break;
case|case
name|SP_FileDialogNewFolder
case|:
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnPropFolderSmallNew
expr_stmt|;
break|break;
case|case
name|SP_FileIcon
case|:
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnPropFileSmall
expr_stmt|;
break|break;
case|case
name|SP_TrashIcon
case|:
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnNoteErased
expr_stmt|;
break|break;
case|case
name|SP_ToolBarHorizontalExtensionButton
case|:
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnIndiSubmenu
expr_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|adjustedFlags
operator||=
name|QS60StylePrivate
operator|::
name|SF_PointSouth
expr_stmt|;
break|break;
case|case
name|SP_ToolBarVerticalExtensionButton
case|:
name|adjustedFlags
operator||=
name|QS60StylePrivate
operator|::
name|SF_PointEast
expr_stmt|;
name|part
operator|=
name|QS60StyleEnums
operator|::
name|SP_QgnIndiSubmenu
expr_stmt|;
break|break;
default|default:
return|return
name|QCommonStyle
operator|::
name|standardIconImplementation
argument_list|(
name|standardIcon
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
specifier|const
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
init|=
name|adjustedFlags
decl_stmt|;
specifier|const
name|int
name|iconDimension
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_ToolBarIconSize
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|iconSize
init|=
operator|(
operator|!
name|option
operator|)
condition|?
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|iconDimension
operator|*
name|iconWidthMultiplier
argument_list|,
name|iconDimension
operator|*
name|iconHeightMultiplier
argument_list|)
else|:
name|option
operator|->
name|rect
decl_stmt|;
specifier|const
name|QPixmap
name|cachedPixMap
argument_list|(
name|QS60StylePrivate
operator|::
name|cachedPart
argument_list|(
name|part
argument_list|,
name|iconSize
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
name|flags
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|cachedPixMap
operator|.
name|isNull
argument_list|()
condition|?
name|QCommonStyle
operator|::
name|standardIconImplementation
argument_list|(
name|standardIcon
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
else|:
name|QIcon
argument_list|(
name|cachedPixMap
argument_list|)
return|;
block|}
comment|/*!     \internal     Animate indeterminate progress bars only when visible */
DECL|function|eventFilter
name|bool
name|QS60Style
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QS60Style
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
block|{
name|QWidget
modifier|*
name|w
init|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
condition|)
block|{
name|QWidget
modifier|*
name|focusW
init|=
name|w
operator|->
name|focusProxy
argument_list|()
decl_stmt|;
if|if
condition|(
name|qobject_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|focusW
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QRadioButton
operator|*
argument_list|>
argument_list|(
name|focusW
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QCheckBox
operator|*
argument_list|>
argument_list|(
name|focusW
argument_list|)
condition|)
name|d
operator|->
name|m_pressedWidget
operator|=
name|focusW
expr_stmt|;
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QRadioButton
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QCheckBox
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
name|d
operator|->
name|m_pressedWidget
operator|=
name|w
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_pressedWidget
condition|)
name|d
operator|->
name|m_pressedWidget
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
block|{
if|if
condition|(
name|d
operator|->
name|m_pressedWidget
condition|)
block|{
name|d
operator|->
name|m_pressedWidget
operator|->
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_pressedWidget
operator|=
literal|0
expr_stmt|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
ifdef|#
directive|ifdef
name|Q_WS_S60
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|StyleChange
case|:
case|case
name|QEvent
operator|::
name|Show
case|:
if|if
condition|(
name|QProgressBar
modifier|*
name|bar
init|=
name|qobject_cast
argument_list|<
name|QProgressBar
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|m_bars
operator|.
name|contains
argument_list|(
name|bar
argument_list|)
condition|)
name|d
operator|->
name|m_bars
operator|<<
name|bar
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_bars
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
comment|//only start with first animated progressbar
name|d
operator|->
name|startAnimation
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarWaitAnim
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QEvent
operator|::
name|Destroy
case|:
case|case
name|QEvent
operator|::
name|Hide
case|:
if|if
condition|(
name|QProgressBar
modifier|*
name|bar
init|=
cast|reinterpret_cast
argument_list|<
name|QProgressBar
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
condition|)
block|{
name|d
operator|->
name|stopAnimation
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarWaitAnim
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_bars
operator|.
name|removeAll
argument_list|(
name|bar
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_PROGRESSBAR
endif|#
directive|endif
comment|// Q_WS_S60
return|return
name|QCommonStyle
operator|::
name|eventFilter
argument_list|(
name|object
argument_list|,
name|event
argument_list|)
return|;
block|}
comment|/*!     \internal     Handle the timer \a event. */
DECL|function|timerEvent
name|void
name|QS60Style
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_S60
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
name|Q_D
argument_list|(
name|QS60Style
argument_list|)
expr_stmt|;
name|QS60StyleAnimation
modifier|*
name|progressBarAnimation
init|=
name|QS60StylePrivate
operator|::
name|animationDefinition
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarWaitAnim
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|progressBarAnimation
operator|->
name|timerId
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|progressBarAnimation
operator|->
name|interval
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|progressBarAnimation
operator|->
name|currentFrame
argument_list|()
operator|==
name|progressBarAnimation
operator|->
name|frameCount
argument_list|()
condition|)
if|if
condition|(
name|progressBarAnimation
operator|->
name|playMode
argument_list|()
operator|==
name|QS60StyleEnums
operator|::
name|AM_Looping
condition|)
name|progressBarAnimation
operator|->
name|setCurrentFrame
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|stopAnimation
argument_list|(
name|progressBarAnimation
operator|->
name|animationId
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QProgressBar
modifier|*
name|bar
decl|,
name|d
operator|->
name|m_bars
control|)
block|{
if|if
condition|(
operator|(
name|bar
operator|->
name|minimum
argument_list|()
operator|==
literal|0
operator|&&
name|bar
operator|->
name|maximum
argument_list|()
operator|==
literal|0
operator|)
condition|)
name|bar
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
name|progressBarAnimation
operator|->
name|setCurrentFrame
argument_list|(
name|progressBarAnimation
operator|->
name|currentFrame
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_PROGRESSBAR
endif|#
directive|endif
comment|// Q_WS_S60
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
specifier|extern
name|QPoint
name|qt_s60_fill_background_offset
argument_list|(
specifier|const
name|QWidget
operator|*
name|targetWidget
argument_list|)
decl_stmt|;
DECL|function|qt_s60_fill_background
name|bool
name|qt_s60_fill_background
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
comment|// Check if the widget's palette matches placeholder or actual background texture.
comment|// When accessing backgroundTexture, use parameter value 'true' to avoid creating
comment|// the texture, if it is not already created.
specifier|const
name|QPixmap
name|placeHolder
argument_list|(
name|QS60StylePrivate
operator|::
name|placeHolderTexture
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QPixmap
name|bg
argument_list|(
name|QS60StylePrivate
operator|::
name|backgroundTexture
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|placeHolder
operator|.
name|cacheKey
argument_list|()
operator|!=
name|brush
operator|.
name|texture
argument_list|()
operator|.
name|cacheKey
argument_list|()
operator|&&
name|bg
operator|.
name|cacheKey
argument_list|()
operator|!=
name|brush
operator|.
name|texture
argument_list|()
operator|.
name|cacheKey
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|const
name|QPixmap
name|backgroundTexture
argument_list|(
name|QS60StylePrivate
operator|::
name|backgroundTexture
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QPaintDevice
modifier|*
name|target
init|=
name|painter
operator|->
name|device
argument_list|()
decl_stmt|;
if|if
condition|(
name|target
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
condition|)
block|{
specifier|const
name|QWidget
modifier|*
name|widget
init|=
cast|static_cast
argument_list|<
specifier|const
name|QWidget
operator|*
argument_list|>
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
condition|)
block|{
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
modifier|&
name|rects
init|=
name|rgn
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
name|rect
argument_list|(
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|backgroundTexture
argument_list|,
name|rect
operator|.
name|translated
argument_list|(
name|qt_s60_fill_background_offset
argument_list|(
name|widget
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
name|QT_END_NAMESPACE
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STYLE_S60 || QT_PLUGIN
end_comment
end_unit
