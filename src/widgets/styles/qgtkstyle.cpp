begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgtkstyle.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_GTK
argument_list|)
end_if
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QLibrary>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSettings>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QDialogButtonBox>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QStatusBar>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QLineEdit>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QWidget>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QListView>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QApplication>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QStyleOption>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QPushButton>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPainter>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QToolBar>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QHeaderView>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QComboBox>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QSpinBox>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QScrollBar>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QAbstractButton>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QToolButton>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QGroupBox>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QRadioButton>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QCheckBox>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QTreeView>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QStyledItemDelegate>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QWizard>
end_include
begin_include
include|#
directive|include
file|<qpixmapcache.h>
end_include
begin_include
include|#
directive|include
file|<private/qstyleanimation_p.h>
end_include
begin_undef
DECL|macro|signals
undef|#
directive|undef
name|signals
end_undef
begin_comment
DECL|macro|signals
comment|// Collides with GTK stymbols
end_comment
begin_include
include|#
directive|include
file|<private/qgtkpainter_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qstylehelper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgtkstyle_p.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|qt_gtk_draw_mdibutton
specifier|static
name|void
name|qt_gtk_draw_mdibutton
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionTitleBar
modifier|*
name|option
parameter_list|,
specifier|const
name|QRect
modifier|&
name|tmp
parameter_list|,
name|bool
name|hover
parameter_list|,
name|bool
name|sunken
parameter_list|)
block|{
name|QColor
name|dark
decl_stmt|;
name|dark
operator|.
name|setHsv
argument_list|(
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|hue
argument_list|()
argument_list|,
name|qMin
argument_list|(
literal|255
argument_list|,
call|(
name|int
call|)
argument_list|(
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|saturation
argument_list|()
operator|*
literal|1.9
argument_list|)
argument_list|)
argument_list|,
name|qMin
argument_list|(
literal|255
argument_list|,
call|(
name|int
call|)
argument_list|(
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|value
argument_list|()
operator|*
literal|0.7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QColor
name|highlight
init|=
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|bool
name|active
init|=
operator|(
name|option
operator|->
name|titleBarState
operator|&
name|QStyle
operator|::
name|State_Active
operator|)
decl_stmt|;
name|QColor
name|titleBarHighlight
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|,
literal|60
argument_list|)
decl_stmt|;
if|if
condition|(
name|sunken
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|tmp
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|120
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|hover
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|tmp
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|QColor
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|QColor
name|mdiButtonGradientStartColor
decl_stmt|;
name|QColor
name|mdiButtonGradientStopColor
decl_stmt|;
name|mdiButtonGradientStartColor
operator|=
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|mdiButtonGradientStopColor
operator|=
name|QColor
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|,
literal|60
argument_list|)
expr_stmt|;
if|if
condition|(
name|sunken
condition|)
name|titleBarHighlight
operator|=
name|highlight
operator|.
name|darker
argument_list|(
literal|130
argument_list|)
expr_stmt|;
name|QLinearGradient
name|gradient
argument_list|(
name|tmp
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|tmp
operator|.
name|top
argument_list|()
argument_list|,
name|tmp
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|tmp
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|0
argument_list|,
name|mdiButtonGradientStartColor
argument_list|)
expr_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|mdiButtonGradientStopColor
argument_list|)
expr_stmt|;
name|QColor
name|mdiButtonBorderColor
argument_list|(
name|active
condition|?
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|180
argument_list|)
else|:
name|dark
operator|.
name|darker
argument_list|(
literal|110
argument_list|)
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|mdiButtonBorderColor
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLine
name|lines
index|[
literal|4
index|]
init|=
block|{
name|QLine
argument_list|(
name|tmp
operator|.
name|left
argument_list|()
operator|+
literal|2
argument_list|,
name|tmp
operator|.
name|top
argument_list|()
argument_list|,
name|tmp
operator|.
name|right
argument_list|()
operator|-
literal|2
argument_list|,
name|tmp
operator|.
name|top
argument_list|()
argument_list|)
block|,
name|QLine
argument_list|(
name|tmp
operator|.
name|left
argument_list|()
operator|+
literal|2
argument_list|,
name|tmp
operator|.
name|bottom
argument_list|()
argument_list|,
name|tmp
operator|.
name|right
argument_list|()
operator|-
literal|2
argument_list|,
name|tmp
operator|.
name|bottom
argument_list|()
argument_list|)
block|,
name|QLine
argument_list|(
name|tmp
operator|.
name|left
argument_list|()
argument_list|,
name|tmp
operator|.
name|top
argument_list|()
operator|+
literal|2
argument_list|,
name|tmp
operator|.
name|left
argument_list|()
argument_list|,
name|tmp
operator|.
name|bottom
argument_list|()
operator|-
literal|2
argument_list|)
block|,
name|QLine
argument_list|(
argument|tmp.right()
argument_list|,
argument|tmp.top() +
literal|2
argument_list|,
argument|tmp.right()
argument_list|,
argument|tmp.bottom() -
literal|2
argument_list|)
block|}
decl_stmt|;
name|painter
operator|->
name|drawLines
argument_list|(
name|lines
argument_list|,
literal|4
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|points
index|[
literal|4
index|]
init|=
block|{
name|QPoint
argument_list|(
name|tmp
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|tmp
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
name|tmp
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|tmp
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
name|tmp
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|tmp
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
argument|tmp.right() -
literal|1
argument_list|,
argument|tmp.bottom() -
literal|1
argument_list|)
block|}
decl_stmt|;
name|painter
operator|->
name|drawPoints
argument_list|(
name|points
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|titleBarHighlight
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tmp
operator|.
name|left
argument_list|()
operator|+
literal|2
argument_list|,
name|tmp
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|,
name|tmp
operator|.
name|right
argument_list|()
operator|-
literal|2
argument_list|,
name|tmp
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tmp
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|tmp
operator|.
name|top
argument_list|()
operator|+
literal|2
argument_list|,
name|tmp
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|tmp
operator|.
name|bottom
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|gradient
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tmp
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|,
name|tmp
operator|.
name|top
argument_list|()
operator|+
literal|2
argument_list|,
name|tmp
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|,
name|tmp
operator|.
name|bottom
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|tmp
operator|.
name|right
argument_list|()
argument_list|,
name|tmp
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|tmp
operator|.
name|left
argument_list|()
operator|+
literal|2
argument_list|,
name|tmp
operator|.
name|bottom
argument_list|()
operator|+
literal|1
argument_list|,
name|tmp
operator|.
name|right
argument_list|()
operator|-
literal|2
argument_list|,
name|tmp
operator|.
name|bottom
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|tmp
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|tmp
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|tmp
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|tmp
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPoint
argument_list|(
name|tmp
operator|.
name|right
argument_list|()
argument_list|,
name|tmp
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|dock_widget_close_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|dock_widget_close_xpm
index|[]
init|=
block|{
literal|"11 13 5 1"
block|,
literal|"  c None"
block|,
literal|". c #D5CFCB"
block|,
literal|"+ c #6C6A67"
block|,
literal|"@ c #6C6A67"
block|,
literal|"$ c #B5B0AC"
block|,
literal|"           "
block|,
literal|" @@@@@@@@@ "
block|,
literal|"@+       +@"
block|,
literal|"@ +@   @+ @"
block|,
literal|"@ @@@ @@@ @"
block|,
literal|"@  @@@@@  @"
block|,
literal|"@   @@@   @"
block|,
literal|"@  @@@@@  @"
block|,
literal|"@ @@@ @@@ @"
block|,
literal|"@ +@   @+ @"
block|,
literal|"@+       +@"
block|,
literal|" @@@@@@@@@ "
block|,
literal|"           "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|dock_widget_restore_xpm
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|dock_widget_restore_xpm
index|[]
init|=
block|{
literal|"11 13 5 1"
block|,
literal|"  c None"
block|,
literal|". c #D5CFCB"
block|,
literal|"+ c #6C6A67"
block|,
literal|"@ c #6C6A67"
block|,
literal|"# c #6C6A67"
block|,
literal|"           "
block|,
literal|" @@@@@@@@@ "
block|,
literal|"@+       +@"
block|,
literal|"@   #@@@# @"
block|,
literal|"@   @   @ @"
block|,
literal|"@ #@@@# @ @"
block|,
literal|"@ @   @ @ @"
block|,
literal|"@ @   @@@ @"
block|,
literal|"@ @   @   @"
block|,
literal|"@ #@@@@   @"
block|,
literal|"@+       +@"
block|,
literal|" @@@@@@@@@ "
block|,
literal|"           "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_titlebar_context_help
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|qt_titlebar_context_help
index|[]
init|=
block|{
literal|"10 10 3 1"
block|,
literal|"  c None"
block|,
literal|"# c #000000"
block|,
literal|"+ c #444444"
block|,
literal|"  +####+  "
block|,
literal|" ###  ### "
block|,
literal|" ##    ## "
block|,
literal|"     +##+ "
block|,
literal|"    +##   "
block|,
literal|"    ##    "
block|,
literal|"    ##    "
block|,
literal|"          "
block|,
literal|"    ##    "
block|,
literal|"    ##    "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_scrollbar_button_arrow_up
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|qt_scrollbar_button_arrow_up
index|[]
init|=
block|{
literal|"7 4 2 1"
block|,
literal|"   c None"
block|,
literal|"*  c #BFBFBF"
block|,
literal|"   *   "
block|,
literal|"  ***  "
block|,
literal|" ***** "
block|,
literal|"*******"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_scrollbar_button_arrow_down
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|qt_scrollbar_button_arrow_down
index|[]
init|=
block|{
literal|"7 4 2 1"
block|,
literal|"   c None"
block|,
literal|"*  c #BFBFBF"
block|,
literal|"*******"
block|,
literal|" ***** "
block|,
literal|"  ***  "
block|,
literal|"   *   "
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|groupBoxBottomMargin
specifier|static
specifier|const
name|int
name|groupBoxBottomMargin
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|groupBoxBottomMargin
comment|// space below the groupbox
end_comment
begin_decl_stmt
DECL|variable|groupBoxTitleMargin
specifier|static
specifier|const
name|int
name|groupBoxTitleMargin
init|=
literal|6
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|groupBoxTitleMargin
comment|// space between contents and title
end_comment
begin_decl_stmt
DECL|variable|groupBoxTopMargin
specifier|static
specifier|const
name|int
name|groupBoxTopMargin
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!   Returns the configuration string for \a value.   Returns \a fallback if \a value is not found.  */
end_comment
begin_function
DECL|function|getGConfString
name|QString
name|QGtkStyle
operator|::
name|getGConfString
parameter_list|(
specifier|const
name|QString
modifier|&
name|value
parameter_list|,
specifier|const
name|QString
modifier|&
name|fallback
parameter_list|)
block|{
return|return
name|QGtkStylePrivate
operator|::
name|getGConfString
argument_list|(
name|value
argument_list|,
name|fallback
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the configuration boolean for \a key.   Returns \a fallback if \a key is not found.  */
end_comment
begin_function
DECL|function|getGConfBool
name|bool
name|QGtkStyle
operator|::
name|getGConfBool
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|bool
name|fallback
parameter_list|)
block|{
return|return
name|QGtkStylePrivate
operator|::
name|getGConfBool
argument_list|(
name|key
argument_list|,
name|fallback
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mergedColors
specifier|static
name|QColor
name|mergedColors
parameter_list|(
specifier|const
name|QColor
modifier|&
name|colorA
parameter_list|,
specifier|const
name|QColor
modifier|&
name|colorB
parameter_list|,
name|int
name|factor
init|=
literal|50
parameter_list|)
block|{
specifier|const
name|int
name|maxFactor
init|=
literal|100
decl_stmt|;
name|QColor
name|tmp
init|=
name|colorA
decl_stmt|;
name|tmp
operator|.
name|setRed
argument_list|(
operator|(
name|tmp
operator|.
name|red
argument_list|()
operator|*
name|factor
operator|)
operator|/
name|maxFactor
operator|+
operator|(
name|colorB
operator|.
name|red
argument_list|()
operator|*
operator|(
name|maxFactor
operator|-
name|factor
operator|)
operator|)
operator|/
name|maxFactor
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|setGreen
argument_list|(
operator|(
name|tmp
operator|.
name|green
argument_list|()
operator|*
name|factor
operator|)
operator|/
name|maxFactor
operator|+
operator|(
name|colorB
operator|.
name|green
argument_list|()
operator|*
operator|(
name|maxFactor
operator|-
name|factor
operator|)
operator|)
operator|/
name|maxFactor
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|setBlue
argument_list|(
operator|(
name|tmp
operator|.
name|blue
argument_list|()
operator|*
name|factor
operator|)
operator|/
name|maxFactor
operator|+
operator|(
name|colorB
operator|.
name|blue
argument_list|()
operator|*
operator|(
name|maxFactor
operator|-
name|factor
operator|)
operator|)
operator|/
name|maxFactor
argument_list|)
expr_stmt|;
return|return
name|tmp
return|;
block|}
end_function
begin_function
DECL|function|fromQColor
specifier|static
name|GdkColor
name|fromQColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|GdkColor
name|retval
decl_stmt|;
name|retval
operator|.
name|red
operator|=
name|color
operator|.
name|red
argument_list|()
operator|*
literal|255
expr_stmt|;
name|retval
operator|.
name|green
operator|=
name|color
operator|.
name|green
argument_list|()
operator|*
literal|255
expr_stmt|;
name|retval
operator|.
name|blue
operator|=
name|color
operator|.
name|blue
argument_list|()
operator|*
literal|255
expr_stmt|;
return|return
name|retval
return|;
block|}
end_function
begin_comment
comment|/*!     \class QGtkStyle     \brief The QGtkStyle class provides a widget style rendered by GTK+     \since 4.5      \inmodule QtWidgets      The QGtkStyle style provides a look and feel that integrates well     into GTK-based desktop environments such as the XFCe and GNOME.      It does this by making use of the GTK+ theme engine, ensuring     that Qt applications look and feel native on these platforms.      Note: The style requires GTK+ version 2.10 or later.           The Qt3-based "Qt" GTK+ theme engine will not work with QGtkStyle.      \sa QWindowsXPStyle, QMacStyle, QWindowsStyle, QFusionStyle */
end_comment
begin_comment
comment|/*!     Constructs a QGtkStyle object. */
end_comment
begin_constructor
DECL|function|QGtkStyle
name|QGtkStyle
operator|::
name|QGtkStyle
parameter_list|()
member_init_list|:
name|QCommonStyle
argument_list|(
operator|*
operator|new
name|QGtkStylePrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QGtkStyle
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal      Constructs a QGtkStyle object. */
end_comment
begin_constructor
DECL|function|QGtkStyle
name|QGtkStyle
operator|::
name|QGtkStyle
parameter_list|(
name|QGtkStylePrivate
modifier|&
name|dd
parameter_list|)
member_init_list|:
name|QCommonStyle
argument_list|(
name|dd
argument_list|)
block|{
name|Q_D
argument_list|(
name|QGtkStyle
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the QGtkStyle object. */
end_comment
begin_destructor
DECL|function|~QGtkStyle
name|QGtkStyle
operator|::
name|~
name|QGtkStyle
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|standardPalette
name|QPalette
name|QGtkStyle
operator|::
name|standardPalette
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGtkStyle
argument_list|)
expr_stmt|;
name|QPalette
name|palette
init|=
name|QCommonStyle
operator|::
name|standardPalette
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|isThemeAvailable
argument_list|()
condition|)
block|{
name|GtkStyle
modifier|*
name|style
init|=
name|d
operator|->
name|gtkStyle
argument_list|()
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkButton"
argument_list|)
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkEntry
init|=
name|d
operator|->
name|getTextColorWidget
argument_list|()
decl_stmt|;
name|GdkColor
name|gdkBg
decl_stmt|,
name|gdkBase
decl_stmt|,
name|gdkText
decl_stmt|,
name|gdkForeground
decl_stmt|,
name|gdkSbg
decl_stmt|,
name|gdkSfg
decl_stmt|,
name|gdkaSbg
decl_stmt|,
name|gdkaSfg
decl_stmt|;
name|QColor
name|bg
decl_stmt|,
name|base
decl_stmt|,
name|text
decl_stmt|,
name|fg
decl_stmt|,
name|highlight
decl_stmt|,
name|highlightText
decl_stmt|,
name|inactiveHighlight
decl_stmt|,
name|inactiveHighlightedTExt
decl_stmt|;
name|gdkBg
operator|=
name|style
operator|->
name|bg
index|[
name|GTK_STATE_NORMAL
index|]
expr_stmt|;
name|gdkForeground
operator|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkButton
argument_list|)
operator|->
name|fg
index|[
name|GTK_STATE_NORMAL
index|]
expr_stmt|;
comment|// Our base and selected color is primarily used for text
comment|// so we assume a gtkEntry will have the most correct value
name|GtkStyle
modifier|*
name|gtkEntryStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkEntry
argument_list|)
decl_stmt|;
name|gdkBase
operator|=
name|gtkEntryStyle
operator|->
name|base
index|[
name|GTK_STATE_NORMAL
index|]
expr_stmt|;
name|gdkText
operator|=
name|gtkEntryStyle
operator|->
name|text
index|[
name|GTK_STATE_NORMAL
index|]
expr_stmt|;
name|gdkSbg
operator|=
name|gtkEntryStyle
operator|->
name|base
index|[
name|GTK_STATE_SELECTED
index|]
expr_stmt|;
name|gdkSfg
operator|=
name|gtkEntryStyle
operator|->
name|text
index|[
name|GTK_STATE_SELECTED
index|]
expr_stmt|;
comment|// The ACTIVE base color is really used for inactive windows
name|gdkaSbg
operator|=
name|gtkEntryStyle
operator|->
name|base
index|[
name|GTK_STATE_ACTIVE
index|]
expr_stmt|;
name|gdkaSfg
operator|=
name|gtkEntryStyle
operator|->
name|text
index|[
name|GTK_STATE_ACTIVE
index|]
expr_stmt|;
name|bg
operator|=
name|QColor
argument_list|(
name|gdkBg
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkBg
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkBg
operator|.
name|blue
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|text
operator|=
name|QColor
argument_list|(
name|gdkText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|fg
operator|=
name|QColor
argument_list|(
name|gdkForeground
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkForeground
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkForeground
operator|.
name|blue
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|base
operator|=
name|QColor
argument_list|(
name|gdkBase
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkBase
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkBase
operator|.
name|blue
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|highlight
operator|=
name|QColor
argument_list|(
name|gdkSbg
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkSbg
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkSbg
operator|.
name|blue
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|highlightText
operator|=
name|QColor
argument_list|(
name|gdkSfg
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkSfg
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkSfg
operator|.
name|blue
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|inactiveHighlight
operator|=
name|QColor
argument_list|(
name|gdkaSbg
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkaSbg
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkaSbg
operator|.
name|blue
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|inactiveHighlightedTExt
operator|=
name|QColor
argument_list|(
name|gdkaSfg
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkaSfg
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkaSfg
operator|.
name|blue
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|highlightText
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|bg
operator|.
name|lighter
argument_list|(
literal|125
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|,
name|bg
operator|.
name|darker
argument_list|(
literal|130
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|,
name|bg
operator|.
name|darker
argument_list|(
literal|120
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|fg
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|fg
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|QColor
name|alternateRowColor
init|=
name|palette
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|lighter
argument_list|(
literal|93
argument_list|)
decl_stmt|;
comment|// ref gtkstyle.c draw_flat_box
name|GtkWidget
modifier|*
name|gtkTreeView
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkTreeView"
argument_list|)
decl_stmt|;
name|GdkColor
modifier|*
name|gtkAltBase
init|=
name|NULL
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkTreeView
argument_list|,
literal|"odd-row-color"
argument_list|,
operator|&
name|gtkAltBase
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|gtkAltBase
condition|)
block|{
name|alternateRowColor
operator|=
name|QColor
argument_list|(
name|gtkAltBase
operator|->
name|red
operator|>>
literal|8
argument_list|,
name|gtkAltBase
operator|->
name|green
operator|>>
literal|8
argument_list|,
name|gtkAltBase
operator|->
name|blue
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|d
operator|->
name|gdk_color_free
argument_list|(
name|gtkAltBase
argument_list|)
expr_stmt|;
block|}
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|alternateRowColor
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|bg
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|bg
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Background
argument_list|,
name|bg
argument_list|)
expr_stmt|;
name|QColor
name|disabled
argument_list|(
operator|(
name|fg
operator|.
name|red
argument_list|()
operator|+
name|bg
operator|.
name|red
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|fg
operator|.
name|green
argument_list|()
operator|+
name|bg
operator|.
name|green
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|fg
operator|.
name|blue
argument_list|()
operator|+
name|bg
operator|.
name|blue
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
decl_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Foreground
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|highlight
argument_list|)
expr_stmt|;
comment|// calculate disabled colors by removing saturation
name|highlight
operator|.
name|setHsv
argument_list|(
name|highlight
operator|.
name|hue
argument_list|()
argument_list|,
literal|0
argument_list|,
name|highlight
operator|.
name|value
argument_list|()
argument_list|,
name|highlight
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
name|highlightText
operator|.
name|setHsv
argument_list|(
name|highlightText
operator|.
name|hue
argument_list|()
argument_list|,
literal|0
argument_list|,
name|highlightText
operator|.
name|value
argument_list|()
argument_list|,
name|highlightText
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|highlight
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|highlightText
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|inactiveHighlightedTExt
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|inactiveHighlight
argument_list|)
expr_stmt|;
name|style
operator|=
name|d
operator|->
name|gtk_rc_get_style_by_paths
argument_list|(
name|d
operator|->
name|gtk_settings_get_default
argument_list|()
argument_list|,
literal|"gtk-tooltips"
argument_list|,
literal|"GtkWindow"
argument_list|,
name|d
operator|->
name|gtk_window_get_type
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
condition|)
block|{
name|gdkText
operator|=
name|style
operator|->
name|fg
index|[
name|GTK_STATE_NORMAL
index|]
expr_stmt|;
name|text
operator|=
name|QColor
argument_list|(
name|gdkText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ToolTipText
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|palette
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|polish
name|void
name|QGtkStyle
operator|::
name|polish
parameter_list|(
name|QPalette
modifier|&
name|palette
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGtkStyle
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isThemeAvailable
argument_list|()
condition|)
name|QCommonStyle
operator|::
name|polish
argument_list|(
name|palette
argument_list|)
expr_stmt|;
else|else
name|palette
operator|=
name|palette
operator|.
name|resolve
argument_list|(
name|standardPalette
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|polish
name|void
name|QGtkStyle
operator|::
name|polish
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGtkStyle
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|polish
argument_list|(
name|app
argument_list|)
expr_stmt|;
comment|// Custom fonts and palettes with QtConfig are intentionally
comment|// not supported as these should be entirely determined by
comment|// current Gtk settings
if|if
condition|(
name|app
operator|->
name|desktopSettingsAware
argument_list|()
operator|&&
name|d
operator|->
name|isThemeAvailable
argument_list|()
condition|)
block|{
name|QApplicationPrivate
operator|::
name|setSystemPalette
argument_list|(
name|standardPalette
argument_list|()
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|setSystemFont
argument_list|(
name|d
operator|->
name|getThemeFont
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|applyCustomPaletteHash
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isKDE4Session
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_FILEDIALOG
name|qt_filedialog_open_filename_hook
operator|=
operator|&
name|QGtkStylePrivate
operator|::
name|openFilename
expr_stmt|;
name|qt_filedialog_save_filename_hook
operator|=
operator|&
name|QGtkStylePrivate
operator|::
name|saveFilename
expr_stmt|;
name|qt_filedialog_open_filenames_hook
operator|=
operator|&
name|QGtkStylePrivate
operator|::
name|openFilenames
expr_stmt|;
name|qt_filedialog_existing_directory_hook
operator|=
operator|&
name|QGtkStylePrivate
operator|::
name|openDirectory
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|installEventFilter
argument_list|(
operator|&
name|d
operator|->
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|unpolish
name|void
name|QGtkStyle
operator|::
name|unpolish
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGtkStyle
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|unpolish
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|app
operator|->
name|desktopSettingsAware
argument_list|()
operator|&&
name|d
operator|->
name|isThemeAvailable
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|isKDE4Session
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_FILEDIALOG
name|qt_filedialog_open_filename_hook
operator|=
literal|0
expr_stmt|;
name|qt_filedialog_save_filename_hook
operator|=
literal|0
expr_stmt|;
name|qt_filedialog_open_filenames_hook
operator|=
literal|0
expr_stmt|;
name|qt_filedialog_existing_directory_hook
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|removeEventFilter
argument_list|(
operator|&
name|d
operator|->
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|polish
name|void
name|QGtkStyle
operator|::
name|polish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGtkStyle
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|polish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isThemeAvailable
argument_list|()
condition|)
return|return;
if|if
condition|(
name|qobject_cast
argument_list|<
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QGroupBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QScrollBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QSlider
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QSpinBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QHeaderView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
elseif|else
if|if
condition|(
name|QTreeView
modifier|*
name|tree
init|=
name|qobject_cast
argument_list|<
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|tree
operator|->
name|viewport
argument_list|()
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|unpolish
name|void
name|QGtkStyle
operator|::
name|unpolish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QCommonStyle
operator|::
name|unpolish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|pixelMetric
name|int
name|QGtkStyle
operator|::
name|pixelMetric
parameter_list|(
name|PixelMetric
name|metric
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGtkStyle
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isThemeAvailable
argument_list|()
condition|)
return|return
name|QCommonStyle
operator|::
name|pixelMetric
argument_list|(
name|metric
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|PM_DefaultFrameWidth
case|:
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QFrame
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|GtkStyle
modifier|*
name|style
init|=
name|d
operator|->
name|gtk_rc_get_style_by_paths
argument_list|(
name|d
operator|->
name|gtk_settings_get_default
argument_list|()
argument_list|,
literal|"*.GtkScrolledWindow"
argument_list|,
literal|"*.GtkScrolledWindow"
argument_list|,
name|d
operator|->
name|gtk_window_get_type
argument_list|()
argument_list|)
condition|)
return|return
name|qMax
argument_list|(
name|style
operator|->
name|xthickness
argument_list|,
name|style
operator|->
name|ythickness
argument_list|)
return|;
block|}
return|return
literal|2
return|;
case|case
name|PM_MenuButtonIndicator
case|:
return|return
literal|20
return|;
case|case
name|PM_TabBarBaseOverlap
case|:
return|return
literal|1
return|;
case|case
name|PM_ToolBarSeparatorExtent
case|:
return|return
literal|11
return|;
case|case
name|PM_ToolBarFrameWidth
case|:
return|return
literal|1
return|;
case|case
name|PM_ToolBarItemSpacing
case|:
return|return
literal|0
return|;
case|case
name|PM_ButtonShiftHorizontal
case|:
block|{
name|GtkWidget
modifier|*
name|gtkButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkButton"
argument_list|)
decl_stmt|;
name|guint
name|horizontal_shift
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkButton
argument_list|,
literal|"child-displacement-x"
argument_list|,
operator|&
name|horizontal_shift
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
return|return
name|horizontal_shift
return|;
block|}
case|case
name|PM_ButtonShiftVertical
case|:
block|{
name|GtkWidget
modifier|*
name|gtkButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkButton"
argument_list|)
decl_stmt|;
name|guint
name|vertical_shift
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkButton
argument_list|,
literal|"child-displacement-y"
argument_list|,
operator|&
name|vertical_shift
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
return|return
name|vertical_shift
return|;
block|}
case|case
name|PM_MenuBarPanelWidth
case|:
return|return
literal|0
return|;
case|case
name|PM_MenuPanelWidth
case|:
block|{
name|GtkWidget
modifier|*
name|gtkMenu
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkMenu"
argument_list|)
decl_stmt|;
name|guint
name|horizontal_padding
init|=
literal|0
decl_stmt|;
comment|// horizontal-padding is used by Maemo to get thicker borders
if|if
condition|(
operator|!
name|d
operator|->
name|gtk_check_version
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
condition|)
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkMenu
argument_list|,
literal|"horizontal-padding"
argument_list|,
operator|&
name|horizontal_padding
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|int
name|padding
init|=
name|qMax
argument_list|<
name|int
argument_list|>
argument_list|(
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkMenu
argument_list|)
operator|->
name|xthickness
argument_list|,
name|horizontal_padding
argument_list|)
decl_stmt|;
return|return
name|padding
return|;
block|}
case|case
name|PM_ButtonIconSize
case|:
block|{
name|int
name|retVal
init|=
literal|24
decl_stmt|;
name|GtkSettings
modifier|*
name|settings
init|=
name|d
operator|->
name|gtk_settings_get_default
argument_list|()
decl_stmt|;
name|gchararray
name|icon_sizes
decl_stmt|;
name|g_object_get
argument_list|(
name|settings
argument_list|,
literal|"gtk-icon-sizes"
argument_list|,
operator|&
name|icon_sizes
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|QStringList
name|values
init|=
name|QString
argument_list|(
name|QLS
argument_list|(
name|icon_sizes
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
name|g_free
argument_list|(
name|icon_sizes
argument_list|)
expr_stmt|;
name|QChar
name|splitChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|value
decl|,
name|values
control|)
block|{
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
name|QLS
argument_list|(
literal|"gtk-button="
argument_list|)
argument_list|)
condition|)
block|{
name|QString
name|iconSize
init|=
name|value
operator|.
name|right
argument_list|(
name|value
operator|.
name|size
argument_list|()
operator|-
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
name|iconSize
operator|.
name|contains
argument_list|(
name|splitChar
argument_list|)
condition|)
name|retVal
operator|=
name|iconSize
operator|.
name|split
argument_list|(
name|splitChar
argument_list|)
index|[
literal|0
index|]
operator|.
name|toInt
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|retVal
return|;
block|}
case|case
name|PM_MenuVMargin
case|:
case|case
name|PM_MenuHMargin
case|:
return|return
literal|0
return|;
case|case
name|PM_DockWidgetTitleMargin
case|:
return|return
literal|0
return|;
case|case
name|PM_DockWidgetTitleBarButtonMargin
case|:
return|return
literal|5
return|;
case|case
name|PM_TabBarTabVSpace
case|:
return|return
literal|12
return|;
case|case
name|PM_TabBarTabHSpace
case|:
return|return
literal|14
return|;
case|case
name|PM_TabBarTabShiftVertical
case|:
return|return
literal|2
return|;
case|case
name|PM_ToolBarHandleExtent
case|:
return|return
literal|9
return|;
case|case
name|PM_SplitterWidth
case|:
return|return
literal|6
return|;
case|case
name|PM_SliderThickness
case|:
case|case
name|PM_SliderControlThickness
case|:
block|{
name|GtkWidget
modifier|*
name|gtkScale
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkHScale"
argument_list|)
decl_stmt|;
name|gint
name|val
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkScale
argument_list|,
literal|"slider-width"
argument_list|,
operator|&
name|val
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|metric
operator|==
name|PM_SliderControlThickness
condition|)
return|return
name|val
operator|+
literal|2
operator|*
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkScale
argument_list|)
operator|->
name|ythickness
return|;
return|return
name|val
return|;
block|}
case|case
name|PM_ScrollBarExtent
case|:
block|{
name|gint
name|sliderLength
decl_stmt|;
name|gint
name|trough_border
decl_stmt|;
name|GtkWidget
modifier|*
name|hScrollbar
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkHScrollbar"
argument_list|)
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|hScrollbar
argument_list|,
literal|"trough-border"
argument_list|,
operator|&
name|trough_border
argument_list|,
literal|"slider-width"
argument_list|,
operator|&
name|sliderLength
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
return|return
name|sliderLength
operator|+
name|trough_border
operator|*
literal|2
return|;
block|}
case|case
name|PM_ScrollBarSliderMin
case|:
return|return
literal|34
return|;
case|case
name|PM_SliderLength
case|:
name|gint
name|val
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkHScale"
argument_list|)
argument_list|,
literal|"slider-length"
argument_list|,
operator|&
name|val
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
return|return
name|val
return|;
case|case
name|PM_ExclusiveIndicatorWidth
case|:
case|case
name|PM_ExclusiveIndicatorHeight
case|:
case|case
name|PM_IndicatorWidth
case|:
case|case
name|PM_IndicatorHeight
case|:
block|{
name|GtkWidget
modifier|*
name|gtkCheckButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkCheckButton"
argument_list|)
decl_stmt|;
name|gint
name|size
decl_stmt|,
name|spacing
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkCheckButton
argument_list|,
literal|"indicator-spacing"
argument_list|,
operator|&
name|spacing
argument_list|,
literal|"indicator-size"
argument_list|,
operator|&
name|size
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
return|return
name|size
operator|+
literal|2
operator|*
name|spacing
return|;
block|}
case|case
name|PM_MenuBarVMargin
case|:
block|{
name|GtkWidget
modifier|*
name|gtkMenubar
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkMenuBar"
argument_list|)
decl_stmt|;
return|return
name|qMax
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkMenubar
argument_list|)
operator|->
name|ythickness
argument_list|)
return|;
block|}
case|case
name|PM_ScrollView_ScrollBarSpacing
case|:
block|{
name|gint
name|spacing
init|=
literal|3
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkScrollWindow
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkScrolledWindow"
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|gtkScrollWindow
argument_list|)
expr_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkScrollWindow
argument_list|,
literal|"scrollbar-spacing"
argument_list|,
operator|&
name|spacing
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
return|return
name|spacing
return|;
block|}
case|case
name|PM_SubMenuOverlap
case|:
block|{
name|gint
name|offset
init|=
literal|0
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkMenu
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkMenu"
argument_list|)
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkMenu
argument_list|,
literal|"horizontal-offset"
argument_list|,
operator|&
name|offset
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
return|return
name|offset
return|;
block|}
case|case
name|PM_ToolTipLabelFrameWidth
case|:
return|return
literal|2
return|;
case|case
name|PM_ButtonDefaultIndicator
case|:
return|return
literal|0
return|;
case|case
name|PM_ListViewIconSize
case|:
return|return
literal|24
return|;
case|case
name|PM_DialogButtonsSeparator
case|:
return|return
literal|6
return|;
case|case
name|PM_TitleBarHeight
case|:
return|return
literal|24
return|;
case|case
name|PM_SpinBoxFrameWidth
case|:
return|return
literal|3
return|;
case|case
name|PM_MenuBarItemSpacing
case|:
return|return
literal|6
return|;
case|case
name|PM_MenuBarHMargin
case|:
return|return
literal|0
return|;
case|case
name|PM_ToolBarItemMargin
case|:
return|return
literal|1
return|;
case|case
name|PM_SmallIconSize
case|:
return|return
literal|16
return|;
case|case
name|PM_MaximumDragDistance
case|:
return|return
operator|-
literal|1
return|;
case|case
name|PM_TabCloseIndicatorWidth
case|:
case|case
name|PM_TabCloseIndicatorHeight
case|:
return|return
literal|20
return|;
default|default:
return|return
name|QCommonStyle
operator|::
name|pixelMetric
argument_list|(
name|metric
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|styleHint
name|int
name|QGtkStyle
operator|::
name|styleHint
parameter_list|(
name|StyleHint
name|hint
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QStyleHintReturn
modifier|*
name|returnData
init|=
literal|0
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGtkStyle
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isThemeAvailable
argument_list|()
condition|)
return|return
name|QCommonStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|option
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
return|;
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|SH_ItemView_ChangeHighlightOnFocus
case|:
return|return
literal|true
return|;
case|case
name|SH_ScrollBar_MiddleClickAbsolutePosition
case|:
return|return
literal|true
return|;
case|case
name|SH_Menu_AllowActiveAndDisabled
case|:
return|return
literal|false
return|;
case|case
name|SH_MainWindow_SpaceBelowMenuBar
case|:
return|return
literal|false
return|;
case|case
name|SH_MenuBar_MouseTracking
case|:
return|return
literal|true
return|;
case|case
name|SH_Menu_MouseTracking
case|:
return|return
literal|true
return|;
case|case
name|SH_TitleBar_AutoRaise
case|:
return|return
literal|true
return|;
case|case
name|SH_TitleBar_NoBorder
case|:
return|return
literal|true
return|;
case|case
name|SH_ItemView_ShowDecorationSelected
case|:
return|return
literal|true
return|;
case|case
name|SH_Table_GridLineColor
case|:
if|if
condition|(
name|option
condition|)
return|return
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|120
argument_list|)
operator|.
name|rgb
argument_list|()
return|;
break|break;
case|case
name|SH_WindowFrame_Mask
case|:
if|if
condition|(
name|QStyleHintReturnMask
modifier|*
name|mask
init|=
name|qstyleoption_cast
argument_list|<
name|QStyleHintReturnMask
operator|*
argument_list|>
argument_list|(
name|returnData
argument_list|)
condition|)
block|{
comment|//left rounded corner
name|mask
operator|->
name|region
operator|=
name|option
operator|->
name|rect
expr_stmt|;
name|mask
operator|->
name|region
operator|-=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mask
operator|->
name|region
operator|-=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mask
operator|->
name|region
operator|-=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mask
operator|->
name|region
operator|-=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//right rounded corner
name|mask
operator|->
name|region
operator|-=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
literal|4
argument_list|,
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mask
operator|->
name|region
operator|-=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mask
operator|->
name|region
operator|-=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mask
operator|->
name|region
operator|-=
name|QRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|QCommonStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|option
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
return|;
case|case
name|SH_MessageBox_TextInteractionFlags
case|:
return|return
name|Qt
operator|::
name|TextSelectableByMouse
operator||
name|Qt
operator|::
name|LinksAccessibleByMouse
return|;
case|case
name|SH_MessageBox_CenterButtons
case|:
return|return
literal|false
return|;
case|case
name|SH_WizardStyle
case|:
return|return
name|QWizard
operator|::
name|ClassicStyle
return|;
case|case
name|SH_ItemView_ArrowKeysNavigateIntoChildren
case|:
return|return
literal|false
return|;
case|case
name|SH_DialogButtonLayout
case|:
block|{
name|int
name|ret
init|=
name|QDialogButtonBox
operator|::
name|GnomeLayout
decl_stmt|;
name|gboolean
name|alternateOrder
init|=
literal|0
decl_stmt|;
name|GtkSettings
modifier|*
name|settings
init|=
name|d
operator|->
name|gtk_settings_get_default
argument_list|()
decl_stmt|;
name|g_object_get
argument_list|(
name|settings
argument_list|,
literal|"gtk-alternative-button-order"
argument_list|,
operator|&
name|alternateOrder
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|alternateOrder
condition|)
name|ret
operator|=
name|QDialogButtonBox
operator|::
name|WinLayout
expr_stmt|;
return|return
name|ret
return|;
block|}
break|break;
case|case
name|SH_ToolButtonStyle
case|:
block|{
if|if
condition|(
name|d
operator|->
name|isKDE4Session
argument_list|()
condition|)
return|return
name|QCommonStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|option
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
return|;
name|GtkWidget
modifier|*
name|gtkToolbar
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkToolbar"
argument_list|)
decl_stmt|;
name|GtkToolbarStyle
name|toolbar_style
init|=
name|GTK_TOOLBAR_ICONS
decl_stmt|;
name|g_object_get
argument_list|(
name|gtkToolbar
argument_list|,
literal|"toolbar-style"
argument_list|,
operator|&
name|toolbar_style
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|toolbar_style
condition|)
block|{
case|case
name|GTK_TOOLBAR_TEXT
case|:
return|return
name|Qt
operator|::
name|ToolButtonTextOnly
return|;
case|case
name|GTK_TOOLBAR_BOTH
case|:
return|return
name|Qt
operator|::
name|ToolButtonTextUnderIcon
return|;
case|case
name|GTK_TOOLBAR_BOTH_HORIZ
case|:
return|return
name|Qt
operator|::
name|ToolButtonTextBesideIcon
return|;
case|case
name|GTK_TOOLBAR_ICONS
case|:
default|default:
return|return
name|Qt
operator|::
name|ToolButtonIconOnly
return|;
block|}
block|}
break|break;
case|case
name|SH_SpinControls_DisableOnBounds
case|:
return|return
name|int
argument_list|(
literal|true
argument_list|)
return|;
case|case
name|SH_DitherDisabledText
case|:
return|return
name|int
argument_list|(
literal|false
argument_list|)
return|;
case|case
name|SH_ComboBox_Popup
case|:
block|{
name|GtkWidget
modifier|*
name|gtkComboBox
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkComboBox"
argument_list|)
decl_stmt|;
name|gboolean
name|appears_as_list
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
operator|(
name|GtkWidget
operator|*
operator|)
name|gtkComboBox
argument_list|,
literal|"appears-as-list"
argument_list|,
operator|&
name|appears_as_list
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
return|return
name|appears_as_list
condition|?
literal|0
else|:
literal|1
return|;
block|}
case|case
name|SH_MenuBar_AltKeyNavigation
case|:
return|return
name|int
argument_list|(
literal|false
argument_list|)
return|;
case|case
name|SH_EtchDisabledText
case|:
return|return
name|int
argument_list|(
literal|false
argument_list|)
return|;
case|case
name|SH_Menu_SubMenuPopupDelay
case|:
block|{
name|gint
name|delay
init|=
literal|225
decl_stmt|;
name|GtkSettings
modifier|*
name|settings
init|=
name|d
operator|->
name|gtk_settings_get_default
argument_list|()
decl_stmt|;
name|g_object_get
argument_list|(
name|settings
argument_list|,
literal|"gtk-menu-popup-delay"
argument_list|,
operator|&
name|delay
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
return|return
name|delay
return|;
block|}
case|case
name|SH_ScrollView_FrameOnlyAroundContents
case|:
block|{
name|gboolean
name|scrollbars_within_bevel
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
name|scrollbars_within_bevel
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|d
operator|->
name|gtk_check_version
argument_list|(
literal|2
argument_list|,
literal|12
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkScrollWindow
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkScrolledWindow"
argument_list|)
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkScrollWindow
argument_list|,
literal|"scrollbars-within-bevel"
argument_list|,
operator|&
name|scrollbars_within_bevel
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|scrollbars_within_bevel
return|;
block|}
case|case
name|SH_DialogButtonBox_ButtonsHaveIcons
case|:
block|{
specifier|static
name|bool
name|buttonsHaveIcons
init|=
name|d
operator|->
name|getGConfBool
argument_list|(
name|QLS
argument_list|(
literal|"/desktop/gnome/interface/buttons_have_icons"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|buttonsHaveIcons
return|;
block|}
case|case
name|SH_UnderlineShortcut
case|:
block|{
name|gboolean
name|underlineShortcut
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|gtk_check_version
argument_list|(
literal|2
argument_list|,
literal|12
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|GtkSettings
modifier|*
name|settings
init|=
name|d
operator|->
name|gtk_settings_get_default
argument_list|()
decl_stmt|;
name|g_object_get
argument_list|(
name|settings
argument_list|,
literal|"gtk-enable-mnemonics"
argument_list|,
operator|&
name|underlineShortcut
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
return|return
name|underlineShortcut
return|;
block|}
default|default:
break|break;
block|}
return|return
name|QCommonStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|option
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawPrimitive
name|void
name|QGtkStyle
operator|::
name|drawPrimitive
parameter_list|(
name|PrimitiveElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGtkStyle
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isThemeAvailable
argument_list|()
condition|)
block|{
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|GtkStyle
modifier|*
name|style
init|=
name|d
operator|->
name|gtkStyle
argument_list|()
decl_stmt|;
name|QGtkPainter
name|gtkPainter
argument_list|(
name|painter
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|PE_Frame
case|:
block|{
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|inherits
argument_list|(
literal|"QComboBoxPrivateContainer"
argument_list|)
condition|)
block|{
name|QStyleOption
name|copy
init|=
operator|*
name|option
decl_stmt|;
name|copy
operator|.
name|state
operator||=
name|State_Raised
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_PanelMenu
argument_list|,
operator|&
name|copy
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Drawing the entire itemview frame is very expensive, especially on the native X11 engine
comment|// Instead we cheat a bit and draw a border image without the center part, hence only scaling
comment|// thin rectangular images
specifier|const
name|int
name|pmSize
init|=
literal|64
decl_stmt|;
specifier|const
name|int
name|border
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|pmKey
init|=
name|QLatin1String
argument_list|(
literal|"windowframe"
argument_list|)
operator|%
name|HexString
argument_list|<
name|uint
argument_list|>
argument_list|(
name|option
operator|->
name|state
argument_list|)
decl_stmt|;
name|QPixmap
name|pixmap
decl_stmt|;
name|QRect
name|pmRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QSize
argument_list|(
name|pmSize
argument_list|,
name|pmSize
argument_list|)
argument_list|)
decl_stmt|;
comment|// Only draw through style once
if|if
condition|(
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|pmKey
argument_list|,
name|pixmap
argument_list|)
condition|)
block|{
name|pixmap
operator|=
name|QPixmap
argument_list|(
name|pmSize
argument_list|,
name|pmSize
argument_list|)
expr_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|pmPainter
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|QGtkPainter
name|gtkFramePainter
argument_list|(
operator|&
name|pmPainter
argument_list|)
decl_stmt|;
name|gtkFramePainter
operator|.
name|setUsePixmapCache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Don't cache twice
name|GtkShadowType
name|shadow_type
init|=
name|GTK_SHADOW_NONE
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|shadow_type
operator|=
name|GTK_SHADOW_IN
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Raised
condition|)
name|shadow_type
operator|=
name|GTK_SHADOW_OUT
expr_stmt|;
name|GtkStyle
modifier|*
name|style
init|=
name|d
operator|->
name|gtk_rc_get_style_by_paths
argument_list|(
name|d
operator|->
name|gtk_settings_get_default
argument_list|()
argument_list|,
literal|"*.GtkScrolledWindow"
argument_list|,
literal|"*.GtkScrolledWindow"
argument_list|,
name|d
operator|->
name|gtk_window_get_type
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
condition|)
name|gtkFramePainter
operator|.
name|paintShadow
argument_list|(
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkFrame"
argument_list|)
argument_list|,
literal|"viewport"
argument_list|,
name|pmRect
argument_list|,
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|GTK_STATE_NORMAL
else|:
name|GTK_STATE_INSENSITIVE
argument_list|,
name|shadow_type
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pmKey
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
specifier|const
name|int
name|rw
init|=
name|rect
operator|.
name|width
argument_list|()
operator|-
name|border
decl_stmt|;
specifier|const
name|int
name|rh
init|=
name|rect
operator|.
name|height
argument_list|()
operator|-
name|border
decl_stmt|;
specifier|const
name|int
name|pw
init|=
name|pmRect
operator|.
name|width
argument_list|()
operator|-
name|border
decl_stmt|;
specifier|const
name|int
name|ph
init|=
name|pmRect
operator|.
name|height
argument_list|()
operator|-
name|border
decl_stmt|;
comment|// Sidelines
name|painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|adjusted
argument_list|(
name|border
argument_list|,
literal|0
argument_list|,
operator|-
name|border
argument_list|,
operator|-
name|rh
argument_list|)
argument_list|,
name|pixmap
argument_list|,
name|pmRect
operator|.
name|adjusted
argument_list|(
name|border
argument_list|,
literal|0
argument_list|,
operator|-
name|border
argument_list|,
operator|-
name|ph
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|adjusted
argument_list|(
name|border
argument_list|,
name|rh
argument_list|,
operator|-
name|border
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pixmap
argument_list|,
name|pmRect
operator|.
name|adjusted
argument_list|(
name|border
argument_list|,
name|ph
argument_list|,
operator|-
name|border
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
name|border
argument_list|,
operator|-
name|rw
argument_list|,
operator|-
name|border
argument_list|)
argument_list|,
name|pixmap
argument_list|,
name|pmRect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
name|border
argument_list|,
operator|-
name|pw
argument_list|,
operator|-
name|border
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|adjusted
argument_list|(
name|rw
argument_list|,
name|border
argument_list|,
literal|0
argument_list|,
operator|-
name|border
argument_list|)
argument_list|,
name|pixmap
argument_list|,
name|pmRect
operator|.
name|adjusted
argument_list|(
name|pw
argument_list|,
name|border
argument_list|,
literal|0
argument_list|,
operator|-
name|border
argument_list|)
argument_list|)
expr_stmt|;
comment|// Corners
name|painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|rw
argument_list|,
operator|-
name|rh
argument_list|)
argument_list|,
name|pixmap
argument_list|,
name|pmRect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|pw
argument_list|,
operator|-
name|ph
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|adjusted
argument_list|(
name|rw
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|rh
argument_list|)
argument_list|,
name|pixmap
argument_list|,
name|pmRect
operator|.
name|adjusted
argument_list|(
name|pw
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|ph
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
name|rh
argument_list|,
operator|-
name|rw
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pixmap
argument_list|,
name|pmRect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
name|ph
argument_list|,
operator|-
name|pw
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|adjusted
argument_list|(
name|rw
argument_list|,
name|rh
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pixmap
argument_list|,
name|pmRect
operator|.
name|adjusted
argument_list|(
name|pw
argument_list|,
name|ph
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_FrameWindow
case|:
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
block|{
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|150
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|light
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|QPoint
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|120
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|QPoint
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
literal|2
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|QPoint
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
case|case
name|PE_PanelTipLabel
case|:
block|{
name|GtkWidget
modifier|*
name|gtkWindow
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkWindow"
argument_list|)
decl_stmt|;
comment|// The Murrine Engine currently assumes a widget is passed
name|style
operator|=
name|d
operator|->
name|gtk_rc_get_style_by_paths
argument_list|(
name|d
operator|->
name|gtk_settings_get_default
argument_list|()
argument_list|,
literal|"gtk-tooltips"
argument_list|,
literal|"GtkWindow"
argument_list|,
name|d
operator|->
name|gtk_window_get_type
argument_list|()
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintFlatBox
argument_list|(
name|gtkWindow
argument_list|,
literal|"tooltip"
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_PanelStatusBar
case|:
block|{
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetPalette
argument_list|)
operator|&&
name|option
operator|->
name|palette
operator|.
name|resolve
argument_list|()
operator|&
operator|(
literal|1
operator|<<
name|QPalette
operator|::
name|Window
operator|)
condition|)
block|{
comment|// Respect custom palette
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|window
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|GtkShadowType
name|shadow_type
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkStatusbarFrame
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkStatusbar.GtkFrame"
argument_list|)
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|d
operator|->
name|gtk_widget_get_parent
argument_list|(
name|gtkStatusbarFrame
argument_list|)
argument_list|,
literal|"shadow-type"
argument_list|,
operator|&
name|shadow_type
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintShadow
argument_list|(
name|gtkStatusbarFrame
argument_list|,
literal|"frame"
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|shadow_type
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkStatusbarFrame
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_IndicatorHeaderArrow
case|:
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|header
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkTreeHeader
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkTreeView.GtkButton"
argument_list|)
decl_stmt|;
name|GtkStateType
name|state
init|=
name|gtkPainter
operator|.
name|gtkState
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|style
operator|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkTreeHeader
argument_list|)
expr_stmt|;
name|GtkArrowType
name|type
init|=
name|GTK_ARROW_UP
decl_stmt|;
comment|// This sorting indicator inversion is intentional, and follows the GNOME HIG.
comment|// See http://library.gnome.org/devel/hig-book/stable/controls-lists.html.en#controls-lists-sortable
if|if
condition|(
name|header
operator|->
name|sortIndicator
operator|&
name|QStyleOptionHeader
operator|::
name|SortUp
condition|)
name|type
operator|=
name|GTK_ARROW_UP
expr_stmt|;
elseif|else
if|if
condition|(
name|header
operator|->
name|sortIndicator
operator|&
name|QStyleOptionHeader
operator|::
name|SortDown
condition|)
name|type
operator|=
name|GTK_ARROW_DOWN
expr_stmt|;
name|gtkPainter
operator|.
name|paintArrow
argument_list|(
name|gtkTreeHeader
argument_list|,
literal|"button"
argument_list|,
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|type
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
literal|false
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_FrameDefaultButton
case|:
comment|// fall through
case|case
name|PE_FrameFocusRect
case|:
block|{
name|QRect
name|frameRect
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
decl_stmt|;
comment|// ### this mess should move to subcontrolrect
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
comment|// Dont draw anything
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTabBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkNotebook
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkNotebook"
argument_list|)
decl_stmt|;
name|style
operator|=
name|gtkPainter
operator|.
name|getStyle
argument_list|(
name|gtkNotebook
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintFocus
argument_list|(
name|gtkNotebook
argument_list|,
literal|"tab"
argument_list|,
name|frameRect
operator|.
name|adjusted
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|GTK_STATE_ACTIVE
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|GtkWidget
modifier|*
name|gtkRadioButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkRadioButton"
argument_list|)
decl_stmt|;
name|gtkPainter
operator|.
name|paintFocus
argument_list|(
name|gtkRadioButton
argument_list|,
literal|"radiobutton"
argument_list|,
name|frameRect
argument_list|,
name|GTK_STATE_ACTIVE
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PE_IndicatorBranch
case|:
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Children
condition|)
block|{
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|rect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|rect
operator|.
name|moveCenter
argument_list|(
name|option
operator|->
name|rect
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|rect
operator|.
name|translate
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|GtkExpanderStyle
name|openState
init|=
name|GTK_EXPANDER_EXPANDED
decl_stmt|;
name|GtkExpanderStyle
name|closedState
init|=
name|GTK_EXPANDER_COLLAPSED
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkTreeView
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkTreeView"
argument_list|)
decl_stmt|;
name|GtkStateType
name|state
init|=
name|GTK_STATE_NORMAL
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|state
operator|=
name|GTK_STATE_INSENSITIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
condition|)
name|state
operator|=
name|GTK_STATE_PRELIGHT
expr_stmt|;
name|gtkPainter
operator|.
name|paintExpander
argument_list|(
name|gtkTreeView
argument_list|,
literal|"treeview"
argument_list|,
name|rect
argument_list|,
name|state
argument_list|,
name|option
operator|->
name|state
operator|&
name|State_Open
condition|?
name|openState
else|:
name|closedState
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkTreeView
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_PanelItemViewRow
case|:
comment|// This primitive is only used to draw selection behind selected expander arrows.
comment|// We try not to decorate the tree branch background unless you inherit from StyledItemDelegate
comment|// The reason for this is that a lot of code that relies on custom item delegates will look odd having
comment|// a gradient on the branch but a flat shaded color on the item itself.
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|option
operator|->
name|state
operator|&
name|State_Selected
condition|)
block|{
break|break;
block|}
else|else
block|{
if|if
condition|(
specifier|const
name|QAbstractItemView
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|qobject_cast
argument_list|<
name|QStyledItemDelegate
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|itemDelegate
argument_list|()
argument_list|)
condition|)
break|break;
block|}
block|}
comment|// fall through
case|case
name|PE_PanelItemViewItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionViewItem
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|uint
name|resolve_mask
init|=
name|vopt
operator|->
name|palette
operator|.
name|resolve
argument_list|()
decl_stmt|;
if|if
condition|(
name|vopt
operator|->
name|backgroundBrush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
operator|||
operator|(
name|resolve_mask
operator|&
operator|(
literal|1
operator|<<
name|QPalette
operator|::
name|Base
operator|)
operator|)
condition|)
block|{
name|QPointF
name|oldBO
init|=
name|painter
operator|->
name|brushOrigin
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|vopt
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|vopt
operator|->
name|rect
argument_list|,
name|vopt
operator|->
name|backgroundBrush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|oldBO
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Selected
operator|)
condition|)
break|break;
block|}
if|if
condition|(
name|GtkWidget
modifier|*
name|gtkTreeView
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkTreeView"
argument_list|)
condition|)
block|{
specifier|const
name|char
modifier|*
name|detail
init|=
literal|"cell_even_ruled"
decl_stmt|;
if|if
condition|(
name|vopt
operator|&&
name|vopt
operator|->
name|features
operator|&
name|QStyleOptionViewItem
operator|::
name|Alternate
condition|)
name|detail
operator|=
literal|"cell_odd_ruled"
expr_stmt|;
name|bool
name|isActive
init|=
name|option
operator|->
name|state
operator|&
name|State_Active
decl_stmt|;
name|QString
name|key
decl_stmt|;
if|if
condition|(
name|isActive
condition|)
block|{
comment|// Required for active/non-active window appearance
name|key
operator|=
name|QLS
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkTreeView
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|bool
name|isEnabled
init|=
operator|(
name|widget
condition|?
name|widget
operator|->
name|isEnabled
argument_list|()
else|:
operator|(
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
operator|)
decl_stmt|;
name|gtkPainter
operator|.
name|paintFlatBox
argument_list|(
name|gtkTreeView
argument_list|,
name|detail
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|state
operator|&
name|State_Selected
condition|?
name|GTK_STATE_SELECTED
else|:
name|isEnabled
condition|?
name|GTK_STATE_NORMAL
else|:
name|GTK_STATE_INSENSITIVE
argument_list|,
name|GTK_SHADOW_OUT
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkTreeView
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|isActive
condition|)
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkTreeView
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PE_IndicatorToolBarSeparator
case|:
block|{
specifier|const
name|int
name|margin
init|=
literal|6
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkSeparator
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkToolbar.GtkSeparatorToolItem"
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
specifier|const
name|int
name|offset
init|=
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|offset
argument_list|,
name|margin
argument_list|,
literal|0
argument_list|,
operator|-
name|margin
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|110
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintVline
argument_list|(
name|gtkSeparator
argument_list|,
literal|"vseparator"
argument_list|,
name|rect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkSeparator
argument_list|)
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Draw vertical separator
specifier|const
name|int
name|offset
init|=
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
decl_stmt|;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|margin
argument_list|,
name|offset
argument_list|,
operator|-
name|margin
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|110
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintHline
argument_list|(
name|gtkSeparator
argument_list|,
literal|"hseparator"
argument_list|,
name|rect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkSeparator
argument_list|)
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PE_IndicatorToolBarHandle
case|:
block|{
name|GtkWidget
modifier|*
name|gtkToolbar
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkToolbar"
argument_list|)
decl_stmt|;
name|GtkShadowType
name|shadow_type
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkToolbar
argument_list|,
literal|"shadow-type"
argument_list|,
operator|&
name|shadow_type
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
comment|//Note when the toolbar is horizontal, the handle is vertical
name|painter
operator|->
name|setClipRect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintHandle
argument_list|(
name|gtkToolbar
argument_list|,
literal|"toolbar"
argument_list|,
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|shadow_type
argument_list|,
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Horizontal
operator|)
condition|?
name|GTK_ORIENTATION_HORIZONTAL
else|:
name|GTK_ORIENTATION_VERTICAL
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkToolbar
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_IndicatorArrowUp
case|:
case|case
name|PE_IndicatorArrowDown
case|:
case|case
name|PE_IndicatorArrowLeft
case|:
case|case
name|PE_IndicatorArrowRight
case|:
block|{
name|GtkArrowType
name|type
init|=
name|GTK_ARROW_UP
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|PE_IndicatorArrowDown
case|:
name|type
operator|=
name|GTK_ARROW_DOWN
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowLeft
case|:
name|type
operator|=
name|GTK_ARROW_LEFT
expr_stmt|;
break|break;
case|case
name|PE_IndicatorArrowRight
case|:
name|type
operator|=
name|GTK_ARROW_RIGHT
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|int
name|size
init|=
name|qMin
argument_list|(
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|border
init|=
operator|(
name|size
operator|>
literal|9
operator|)
condition|?
operator|(
name|size
operator|/
literal|4
operator|)
else|:
literal|0
decl_stmt|;
comment|//Allow small arrows to have exact dimensions
name|int
name|bsx
init|=
literal|0
decl_stmt|,
name|bsy
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
block|{
name|bsx
operator|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ButtonShiftHorizontal
argument_list|)
expr_stmt|;
name|bsy
operator|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ButtonShiftVertical
argument_list|)
expr_stmt|;
block|}
name|QRect
name|arrowRect
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|border
operator|+
name|bsx
argument_list|,
name|border
operator|+
name|bsy
argument_list|,
operator|-
name|border
operator|+
name|bsx
argument_list|,
operator|-
name|border
operator|+
name|bsy
argument_list|)
decl_stmt|;
name|GtkShadowType
name|shadow
init|=
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|?
name|GTK_SHADOW_IN
else|:
name|GTK_SHADOW_OUT
decl_stmt|;
name|GtkStateType
name|state
init|=
name|gtkPainter
operator|.
name|gtkState
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|QColor
name|arrowColor
init|=
name|option
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkArrow
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkArrow"
argument_list|)
decl_stmt|;
name|GdkColor
name|color
init|=
name|fromQColor
argument_list|(
name|arrowColor
argument_list|)
decl_stmt|;
name|d
operator|->
name|gtk_widget_modify_fg
argument_list|(
name|gtkArrow
argument_list|,
name|state
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintArrow
argument_list|(
name|gtkArrow
argument_list|,
literal|"button"
argument_list|,
name|arrowRect
argument_list|,
name|type
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
literal|false
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkArrow
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|arrowColor
operator|.
name|rgba
argument_list|()
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
comment|// Passing NULL will revert the color change
name|d
operator|->
name|gtk_widget_modify_fg
argument_list|(
name|gtkArrow
argument_list|,
name|state
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_FrameGroupBox
case|:
comment|// Do nothing here, the GNOME groupboxes are flat
break|break;
case|case
name|PE_PanelMenu
case|:
block|{
name|GtkWidget
modifier|*
name|gtkMenu
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkMenu"
argument_list|)
decl_stmt|;
name|gtkPainter
operator|.
name|setAlphaSupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Note, alpha disabled for performance reasons
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkMenu
argument_list|,
literal|"menu"
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|GTK_SHADOW_OUT
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkMenu
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_FrameMenu
case|:
comment|//This is actually done by PE_Widget due to a clipping issue
comment|//Otherwise Menu items will not be able to span the entire menu width
comment|// This is only used by floating tool bars
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkMenubar
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkMenuBar"
argument_list|)
decl_stmt|;
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkMenubar
argument_list|,
literal|"toolbar"
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|GTK_SHADOW_OUT
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkMenubar
argument_list|,
literal|"menu"
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|GTK_SHADOW_OUT
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_FrameLineEdit
case|:
block|{
name|GtkWidget
modifier|*
name|gtkEntry
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkEntry"
argument_list|)
decl_stmt|;
name|gboolean
name|interior_focus
decl_stmt|;
name|gint
name|focus_line_width
decl_stmt|;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkEntry
argument_list|,
literal|"interior-focus"
argument_list|,
operator|&
name|interior_focus
argument_list|,
literal|"focus-line-width"
argument_list|,
operator|&
name|focus_line_width
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
comment|// See https://bugzilla.mozilla.org/show_bug.cgi?id=405421 for info about this hack
name|g_object_set_data
argument_list|(
name|G_OBJECT
argument_list|(
name|gtkEntry
argument_list|)
argument_list|,
literal|"transparent-bg-hint"
argument_list|,
name|GINT_TO_POINTER
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|interior_focus
operator|&&
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|rect
operator|.
name|adjust
argument_list|(
name|focus_line_width
argument_list|,
name|focus_line_width
argument_list|,
operator|-
name|focus_line_width
argument_list|,
operator|-
name|focus_line_width
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkEntry
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintShadow
argument_list|(
name|gtkEntry
argument_list|,
literal|"entry"
argument_list|,
name|rect
argument_list|,
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|GTK_STATE_NORMAL
else|:
name|GTK_STATE_INSENSITIVE
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkEntry
argument_list|)
argument_list|,
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|?
name|QLS
argument_list|(
literal|"focus"
argument_list|)
else|:
name|QString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|interior_focus
operator|&&
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|gtkPainter
operator|.
name|paintShadow
argument_list|(
name|gtkEntry
argument_list|,
literal|"entry"
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|GTK_STATE_ACTIVE
else|:
name|GTK_STATE_INSENSITIVE
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkEntry
argument_list|)
argument_list|,
name|QLS
argument_list|(
literal|"GtkEntryShadowIn"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkEntry
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_PanelLineEdit
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|panel
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkEntry
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkEntry"
argument_list|)
decl_stmt|;
if|if
condition|(
name|panel
operator|->
name|lineWidth
operator|>
literal|0
condition|)
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameLineEdit
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|uint
name|resolve_mask
init|=
name|option
operator|->
name|palette
operator|.
name|resolve
argument_list|()
decl_stmt|;
name|GtkStyle
modifier|*
name|gtkEntryStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkEntry
argument_list|)
decl_stmt|;
name|QRect
name|textRect
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|gtkEntryStyle
operator|->
name|xthickness
argument_list|,
name|gtkEntryStyle
operator|->
name|ythickness
argument_list|,
operator|-
name|gtkEntryStyle
operator|->
name|xthickness
argument_list|,
operator|-
name|gtkEntryStyle
operator|->
name|ythickness
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetPalette
argument_list|)
operator|&&
name|resolve_mask
operator|&
operator|(
literal|1
operator|<<
name|QPalette
operator|::
name|Base
operator|)
condition|)
comment|// Palette overridden by user
name|painter
operator|->
name|fillRect
argument_list|(
name|textRect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|gtkPainter
operator|.
name|paintFlatBox
argument_list|(
name|gtkEntry
argument_list|,
literal|"entry_bg"
argument_list|,
name|textRect
argument_list|,
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|GTK_STATE_NORMAL
else|:
name|GTK_STATE_INSENSITIVE
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
name|gtkEntryStyle
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_FrameTabWidget
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTabWidgetFrame
modifier|*
name|frame
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabWidgetFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkNotebook
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkNotebook"
argument_list|)
decl_stmt|;
name|style
operator|=
name|gtkPainter
operator|.
name|getStyle
argument_list|(
name|gtkNotebook
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|setAlphaSupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|GtkShadowType
name|shadow
init|=
name|GTK_SHADOW_OUT
decl_stmt|;
name|GtkStateType
name|state
init|=
name|GTK_STATE_NORMAL
decl_stmt|;
comment|// Only state supported by gtknotebook
name|bool
name|reverse
init|=
operator|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
decl_stmt|;
name|QGtkStylePrivate
operator|::
name|gtk_widget_set_direction
argument_list|(
name|gtkNotebook
argument_list|,
name|reverse
condition|?
name|GTK_TEXT_DIR_RTL
else|:
name|GTK_TEXT_DIR_LTR
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionTabWidgetFrameV2
modifier|*
name|tabframe
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabWidgetFrameV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkPositionType
name|frameType
init|=
name|GTK_POS_TOP
decl_stmt|;
name|QTabBar
operator|::
name|Shape
name|shape
init|=
name|frame
operator|->
name|shape
decl_stmt|;
name|int
name|gapStart
init|=
literal|0
decl_stmt|;
name|int
name|gapSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedNorth
operator|||
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedSouth
condition|)
block|{
name|frameType
operator|=
operator|(
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedNorth
operator|)
condition|?
name|GTK_POS_TOP
else|:
name|GTK_POS_BOTTOM
expr_stmt|;
name|gapStart
operator|=
name|tabframe
operator|->
name|selectedTabRect
operator|.
name|left
argument_list|()
expr_stmt|;
name|gapSize
operator|=
name|tabframe
operator|->
name|selectedTabRect
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|frameType
operator|=
operator|(
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedWest
operator|)
condition|?
name|GTK_POS_LEFT
else|:
name|GTK_POS_RIGHT
expr_stmt|;
name|gapStart
operator|=
name|tabframe
operator|->
name|selectedTabRect
operator|.
name|y
argument_list|()
expr_stmt|;
name|gapSize
operator|=
name|tabframe
operator|->
name|selectedTabRect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|gtkPainter
operator|.
name|paintBoxGap
argument_list|(
name|gtkNotebook
argument_list|,
literal|"notebook"
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|frameType
argument_list|,
name|gapStart
argument_list|,
name|gapSize
argument_list|,
name|style
argument_list|)
expr_stmt|;
break|break;
comment|// done
block|}
comment|// Note this is only the fallback option
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkNotebook
argument_list|,
literal|"notebook"
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_PanelButtonCommand
case|:
case|case
name|PE_PanelButtonTool
case|:
block|{
name|bool
name|isDefault
init|=
literal|false
decl_stmt|;
name|bool
name|isTool
init|=
operator|(
name|element
operator|==
name|PE_PanelButtonTool
operator|)
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
name|isDefault
operator|=
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|DefaultButton
expr_stmt|;
comment|// don't draw a frame for tool buttons that have the autoRaise flag and are not enabled or on
if|if
condition|(
name|isTool
operator|&&
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|||
name|option
operator|->
name|state
operator|&
name|State_On
operator|)
operator|&&
operator|(
name|option
operator|->
name|state
operator|&
name|State_AutoRaise
operator|)
condition|)
break|break;
comment|// don't draw a frame for dock widget buttons, unless we are hovering
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|inherits
argument_list|(
literal|"QDockWidgetTitleButton"
argument_list|)
operator|&&
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
break|break;
name|GtkStateType
name|state
init|=
name|gtkPainter
operator|.
name|gtkState
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_On
operator|||
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|state
operator|=
name|GTK_STATE_ACTIVE
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkButton
init|=
name|isTool
condition|?
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkToolButton.GtkButton"
argument_list|)
else|:
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkButton"
argument_list|)
decl_stmt|;
name|gint
name|focusWidth
decl_stmt|,
name|focusPad
decl_stmt|;
name|gboolean
name|interiorFocus
init|=
literal|false
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkButton
argument_list|,
literal|"focus-line-width"
argument_list|,
operator|&
name|focusWidth
argument_list|,
literal|"focus-padding"
argument_list|,
operator|&
name|focusPad
argument_list|,
literal|"interior-focus"
argument_list|,
operator|&
name|interiorFocus
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|style
operator|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkButton
argument_list|)
expr_stmt|;
name|QRect
name|buttonRect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|QString
name|key
decl_stmt|;
if|if
condition|(
name|isDefault
condition|)
block|{
name|key
operator|+=
name|QLS
argument_list|(
literal|"def"
argument_list|)
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gtk_widget_set_can_default
argument_list|(
name|gtkButton
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gtk_window_set_default
argument_list|(
operator|(
name|GtkWindow
operator|*
operator|)
name|QGtkStylePrivate
operator|::
name|gtk_widget_get_toplevel
argument_list|(
name|gtkButton
argument_list|)
argument_list|,
name|gtkButton
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkButton
argument_list|,
literal|"buttondefault"
argument_list|,
name|buttonRect
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|style
argument_list|,
name|isDefault
condition|?
name|QLS
argument_list|(
literal|"d"
argument_list|)
else|:
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bool
name|hasFocus
init|=
name|option
operator|->
name|state
operator|&
name|State_HasFocus
decl_stmt|;
if|if
condition|(
name|hasFocus
condition|)
block|{
name|key
operator|+=
name|QLS
argument_list|(
literal|"def"
argument_list|)
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkButton
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|interiorFocus
condition|)
name|buttonRect
operator|=
name|buttonRect
operator|.
name|adjusted
argument_list|(
name|focusWidth
argument_list|,
name|focusWidth
argument_list|,
operator|-
name|focusWidth
argument_list|,
operator|-
name|focusWidth
argument_list|)
expr_stmt|;
name|GtkShadowType
name|shadow
init|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|||
name|option
operator|->
name|state
operator|&
name|State_On
operator|)
condition|?
name|GTK_SHADOW_IN
else|:
name|GTK_SHADOW_OUT
decl_stmt|;
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkButton
argument_list|,
literal|"button"
argument_list|,
name|buttonRect
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|style
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDefault
condition|)
name|QGtkStylePrivate
operator|::
name|gtk_window_set_default
argument_list|(
operator|(
name|GtkWindow
operator|*
operator|)
name|QGtkStylePrivate
operator|::
name|gtk_widget_get_toplevel
argument_list|(
name|gtkButton
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasFocus
condition|)
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkButton
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_IndicatorRadioButton
case|:
block|{
name|GtkShadowType
name|shadow
init|=
name|GTK_SHADOW_OUT
decl_stmt|;
name|GtkStateType
name|state
init|=
name|gtkPainter
operator|.
name|gtkState
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|state
operator|=
name|GTK_STATE_ACTIVE
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_NoChange
condition|)
name|shadow
operator|=
name|GTK_SHADOW_ETCHED_IN
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_On
condition|)
name|shadow
operator|=
name|GTK_SHADOW_IN
expr_stmt|;
else|else
name|shadow
operator|=
name|GTK_SHADOW_OUT
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkRadioButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkRadioButton"
argument_list|)
decl_stmt|;
name|gint
name|spacing
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkRadioButton
argument_list|,
literal|"indicator-spacing"
argument_list|,
operator|&
name|spacing
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|QRect
name|buttonRect
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|spacing
argument_list|,
name|spacing
argument_list|,
operator|-
name|spacing
argument_list|,
operator|-
name|spacing
argument_list|)
decl_stmt|;
name|gtkPainter
operator|.
name|setClipRect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
comment|// ### Note: Ubuntulooks breaks when the proper widget is passed
comment|//           Murrine engine requires a widget not to get RGBA check - warnings
name|GtkWidget
modifier|*
name|gtkCheckButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkCheckButton"
argument_list|)
decl_stmt|;
name|QString
name|key
argument_list|(
name|QLS
argument_list|(
literal|"radiobutton"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
comment|// Themes such as Nodoka check this flag
name|key
operator|+=
name|QLatin1Char
argument_list|(
literal|'f'
argument_list|)
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkCheckButton
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|gtkPainter
operator|.
name|paintOption
argument_list|(
name|gtkCheckButton
argument_list|,
name|buttonRect
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkRadioButton
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkCheckButton
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_IndicatorCheckBox
case|:
block|{
name|GtkShadowType
name|shadow
init|=
name|GTK_SHADOW_OUT
decl_stmt|;
name|GtkStateType
name|state
init|=
name|gtkPainter
operator|.
name|gtkState
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|state
operator|=
name|GTK_STATE_ACTIVE
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_NoChange
condition|)
name|shadow
operator|=
name|GTK_SHADOW_ETCHED_IN
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_On
condition|)
name|shadow
operator|=
name|GTK_SHADOW_IN
expr_stmt|;
else|else
name|shadow
operator|=
name|GTK_SHADOW_OUT
expr_stmt|;
name|int
name|spacing
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkCheckButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkCheckButton"
argument_list|)
decl_stmt|;
name|QString
name|key
argument_list|(
name|QLS
argument_list|(
literal|"checkbutton"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
comment|// Themes such as Nodoka checks this flag
name|key
operator|+=
name|QLatin1Char
argument_list|(
literal|'f'
argument_list|)
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkCheckButton
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Some styles such as aero-clone assume they can paint in the spacing area
name|gtkPainter
operator|.
name|setClipRect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkCheckButton
argument_list|,
literal|"indicator-spacing"
argument_list|,
operator|&
name|spacing
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|QRect
name|checkRect
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|spacing
argument_list|,
name|spacing
argument_list|,
operator|-
name|spacing
argument_list|,
operator|-
name|spacing
argument_list|)
decl_stmt|;
name|gtkPainter
operator|.
name|paintCheckbox
argument_list|(
name|gtkCheckButton
argument_list|,
name|checkRect
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkCheckButton
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkCheckButton
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|PE_FrameTabBarBase
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTabBarBase
modifier|*
name|tbb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTabBarBase
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|tabRect
init|=
name|tbb
operator|->
name|rect
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|dark
argument_list|(
literal|110
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|tbb
operator|->
name|shape
condition|)
block|{
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
name|painter
operator|->
name|drawLine
argument_list|(
name|tabRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|tabRect
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
name|painter
operator|->
name|drawLine
argument_list|(
name|tabRect
operator|.
name|left
argument_list|()
argument_list|,
name|tabRect
operator|.
name|top
argument_list|()
argument_list|,
name|tabRect
operator|.
name|left
argument_list|()
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
name|painter
operator|->
name|drawLine
argument_list|(
name|tbb
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|tbb
operator|->
name|rect
operator|.
name|bottom
argument_list|()
argument_list|,
name|tabRect
operator|.
name|right
argument_list|()
argument_list|,
name|tabRect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
name|painter
operator|->
name|drawLine
argument_list|(
name|tabRect
operator|.
name|topRight
argument_list|()
argument_list|,
name|tabRect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|TriangularNorth
case|:
case|case
name|QTabBar
operator|::
name|TriangularEast
case|:
case|case
name|QTabBar
operator|::
name|TriangularWest
case|:
case|case
name|QTabBar
operator|::
name|TriangularSouth
case|:
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
return|return;
endif|#
directive|endif
comment|// QT_NO_TABBAR
case|case
name|PE_Widget
case|:
break|break;
default|default:
name|QCommonStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawComplexControl
name|void
name|QGtkStyle
operator|::
name|drawComplexControl
parameter_list|(
name|ComplexControl
name|control
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGtkStyle
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isThemeAvailable
argument_list|()
condition|)
block|{
name|QCommonStyle
operator|::
name|drawComplexControl
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|GtkStyle
modifier|*
name|style
init|=
name|d
operator|->
name|gtkStyle
argument_list|()
decl_stmt|;
name|QGtkPainter
name|gtkPainter
argument_list|(
name|painter
argument_list|)
decl_stmt|;
name|QColor
name|button
init|=
name|option
operator|->
name|palette
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|QColor
name|dark
decl_stmt|;
name|QColor
name|grooveColor
decl_stmt|;
name|QColor
name|darkOutline
decl_stmt|;
name|dark
operator|.
name|setHsv
argument_list|(
name|button
operator|.
name|hue
argument_list|()
argument_list|,
name|qMin
argument_list|(
literal|255
argument_list|,
call|(
name|int
call|)
argument_list|(
name|button
operator|.
name|saturation
argument_list|()
operator|*
literal|1.9
argument_list|)
argument_list|)
argument_list|,
name|qMin
argument_list|(
literal|255
argument_list|,
call|(
name|int
call|)
argument_list|(
name|button
operator|.
name|value
argument_list|()
operator|*
literal|0.7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|grooveColor
operator|.
name|setHsv
argument_list|(
name|button
operator|.
name|hue
argument_list|()
argument_list|,
name|qMin
argument_list|(
literal|255
argument_list|,
call|(
name|int
call|)
argument_list|(
name|button
operator|.
name|saturation
argument_list|()
operator|*
literal|2.6
argument_list|)
argument_list|)
argument_list|,
name|qMin
argument_list|(
literal|255
argument_list|,
call|(
name|int
call|)
argument_list|(
name|button
operator|.
name|value
argument_list|()
operator|*
literal|0.9
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|darkOutline
operator|.
name|setHsv
argument_list|(
name|button
operator|.
name|hue
argument_list|()
argument_list|,
name|qMin
argument_list|(
literal|255
argument_list|,
call|(
name|int
call|)
argument_list|(
name|button
operator|.
name|saturation
argument_list|()
operator|*
literal|3.0
argument_list|)
argument_list|)
argument_list|,
name|qMin
argument_list|(
literal|255
argument_list|,
call|(
name|int
call|)
argument_list|(
name|button
operator|.
name|value
argument_list|()
operator|*
literal|0.6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QColor
name|alphaCornerColor
decl_stmt|;
if|if
condition|(
name|widget
condition|)
name|alphaCornerColor
operator|=
name|mergedColors
argument_list|(
name|option
operator|->
name|palette
operator|.
name|color
argument_list|(
name|widget
operator|->
name|backgroundRole
argument_list|()
argument_list|)
argument_list|,
name|darkOutline
argument_list|)
expr_stmt|;
else|else
name|alphaCornerColor
operator|=
name|mergedColors
argument_list|(
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|darkOutline
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|control
condition|)
block|{
case|case
name|CC_TitleBar
case|:
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionTitleBar
modifier|*
name|titleBar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTitleBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
comment|// Since this is drawn by metacity and not Gtk we
comment|// have to do custom drawing
name|GdkColor
name|gdkBg
init|=
name|style
operator|->
name|bg
index|[
name|GTK_STATE_SELECTED
index|]
decl_stmt|;
name|QColor
name|bgColor
argument_list|(
name|gdkBg
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkBg
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkBg
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
specifier|const
name|int
name|buttonMargin
init|=
literal|5
decl_stmt|;
name|bool
name|active
init|=
operator|(
name|titleBar
operator|->
name|titleBarState
operator|&
name|State_Active
operator|)
decl_stmt|;
name|QRect
name|fullRect
init|=
name|titleBar
operator|->
name|rect
decl_stmt|;
name|QPalette
name|palette
init|=
name|option
operator|->
name|palette
decl_stmt|;
name|QColor
name|highlight
init|=
name|bgColor
decl_stmt|;
name|QColor
name|titleBarFrameBorder
argument_list|(
name|active
condition|?
name|highlight
operator|.
name|darker
argument_list|(
literal|180
argument_list|)
else|:
name|dark
operator|.
name|darker
argument_list|(
literal|110
argument_list|)
argument_list|)
decl_stmt|;
name|QColor
name|titleBarHighlight
argument_list|(
name|active
condition|?
name|highlight
operator|.
name|lighter
argument_list|(
literal|120
argument_list|)
else|:
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|lighter
argument_list|(
literal|120
argument_list|)
argument_list|)
decl_stmt|;
name|QColor
name|textColor
argument_list|(
name|active
condition|?
literal|0xffffff
else|:
literal|0xff000000
argument_list|)
decl_stmt|;
name|QColor
name|textAlphaColor
argument_list|(
name|active
condition|?
literal|0xffffff
else|:
literal|0xff000000
argument_list|)
decl_stmt|;
block|{
comment|// Fill title bar gradient
name|QColor
name|titlebarColor
init|=
name|QColor
argument_list|(
name|active
condition|?
name|highlight
else|:
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
decl_stmt|;
name|QLinearGradient
name|gradient
argument_list|(
name|option
operator|->
name|rect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|->
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|0
argument_list|,
name|titlebarColor
operator|.
name|lighter
argument_list|(
literal|114
argument_list|)
argument_list|)
expr_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|0.5
argument_list|,
name|titlebarColor
operator|.
name|lighter
argument_list|(
literal|102
argument_list|)
argument_list|)
expr_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|0.51
argument_list|,
name|titlebarColor
operator|.
name|darker
argument_list|(
literal|104
argument_list|)
argument_list|)
expr_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|titlebarColor
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|gradient
argument_list|)
expr_stmt|;
comment|// Frame and rounded corners
name|painter
operator|->
name|setPen
argument_list|(
name|titleBarFrameBorder
argument_list|)
expr_stmt|;
comment|// top outline
name|painter
operator|->
name|drawLine
argument_list|(
name|fullRect
operator|.
name|left
argument_list|()
operator|+
literal|5
argument_list|,
name|fullRect
operator|.
name|top
argument_list|()
argument_list|,
name|fullRect
operator|.
name|right
argument_list|()
operator|-
literal|5
argument_list|,
name|fullRect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|fullRect
operator|.
name|left
argument_list|()
argument_list|,
name|fullRect
operator|.
name|top
argument_list|()
operator|+
literal|4
argument_list|,
name|fullRect
operator|.
name|left
argument_list|()
argument_list|,
name|fullRect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|points
index|[
literal|5
index|]
init|=
block|{
name|QPoint
argument_list|(
name|fullRect
operator|.
name|left
argument_list|()
operator|+
literal|4
argument_list|,
name|fullRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
name|fullRect
operator|.
name|left
argument_list|()
operator|+
literal|3
argument_list|,
name|fullRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
name|fullRect
operator|.
name|left
argument_list|()
operator|+
literal|2
argument_list|,
name|fullRect
operator|.
name|top
argument_list|()
operator|+
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
name|fullRect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|fullRect
operator|.
name|top
argument_list|()
operator|+
literal|3
argument_list|)
block|,
name|QPoint
argument_list|(
argument|fullRect.left() +
literal|1
argument_list|,
argument|fullRect.top() +
literal|4
argument_list|)
block|}
decl_stmt|;
name|painter
operator|->
name|drawPoints
argument_list|(
name|points
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|fullRect
operator|.
name|right
argument_list|()
argument_list|,
name|fullRect
operator|.
name|top
argument_list|()
operator|+
literal|4
argument_list|,
name|fullRect
operator|.
name|right
argument_list|()
argument_list|,
name|fullRect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|points2
index|[
literal|5
index|]
init|=
block|{
name|QPoint
argument_list|(
name|fullRect
operator|.
name|right
argument_list|()
operator|-
literal|3
argument_list|,
name|fullRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
name|fullRect
operator|.
name|right
argument_list|()
operator|-
literal|4
argument_list|,
name|fullRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
block|,
name|QPoint
argument_list|(
name|fullRect
operator|.
name|right
argument_list|()
operator|-
literal|2
argument_list|,
name|fullRect
operator|.
name|top
argument_list|()
operator|+
literal|2
argument_list|)
block|,
name|QPoint
argument_list|(
name|fullRect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|fullRect
operator|.
name|top
argument_list|()
operator|+
literal|3
argument_list|)
block|,
name|QPoint
argument_list|(
argument|fullRect.right() -
literal|1
argument_list|,
argument|fullRect.top() +
literal|4
argument_list|)
block|}
decl_stmt|;
name|painter
operator|->
name|drawPoints
argument_list|(
name|points2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// draw bottomline
name|painter
operator|->
name|drawLine
argument_list|(
name|fullRect
operator|.
name|right
argument_list|()
argument_list|,
name|fullRect
operator|.
name|bottom
argument_list|()
argument_list|,
name|fullRect
operator|.
name|left
argument_list|()
argument_list|,
name|fullRect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
comment|// top highlight
name|painter
operator|->
name|setPen
argument_list|(
name|titleBarHighlight
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|fullRect
operator|.
name|left
argument_list|()
operator|+
literal|6
argument_list|,
name|fullRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|,
name|fullRect
operator|.
name|right
argument_list|()
operator|-
literal|6
argument_list|,
name|fullRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// draw title
name|QRect
name|textRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|titleBar
argument_list|,
name|SC_TitleBarLabel
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QFont
name|font
init|=
name|painter
operator|->
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|active
condition|?
operator|(
name|titleBar
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|lighter
argument_list|(
literal|120
argument_list|)
operator|)
else|:
name|titleBar
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
comment|// Note workspace also does elliding but it does not use the correct font
name|QString
name|title
init|=
name|QFontMetrics
argument_list|(
name|font
argument_list|)
operator|.
name|elidedText
argument_list|(
name|titleBar
operator|->
name|text
argument_list|,
name|Qt
operator|::
name|ElideRight
argument_list|,
name|textRect
operator|.
name|width
argument_list|()
operator|-
literal|14
argument_list|)
decl_stmt|;
name|painter
operator|->
name|drawText
argument_list|(
name|textRect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|title
argument_list|,
name|QTextOption
argument_list|(
name|Qt
operator|::
name|AlignHCenter
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
if|if
condition|(
name|active
condition|)
name|painter
operator|->
name|drawText
argument_list|(
name|textRect
argument_list|,
name|title
argument_list|,
name|QTextOption
argument_list|(
name|Qt
operator|::
name|AlignHCenter
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
argument_list|)
expr_stmt|;
comment|// min button
if|if
condition|(
operator|(
name|titleBar
operator|->
name|subControls
operator|&
name|SC_TitleBarMinButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
operator|&&
operator|!
operator|(
name|titleBar
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
block|{
name|QRect
name|minButtonRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|titleBar
argument_list|,
name|SC_TitleBarMinButton
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|minButtonRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|bool
name|hover
init|=
operator|(
name|titleBar
operator|->
name|activeSubControls
operator|&
name|SC_TitleBarMinButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
decl_stmt|;
name|bool
name|sunken
init|=
operator|(
name|titleBar
operator|->
name|activeSubControls
operator|&
name|SC_TitleBarMinButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
decl_stmt|;
name|qt_gtk_draw_mdibutton
argument_list|(
name|painter
argument_list|,
name|titleBar
argument_list|,
name|minButtonRect
argument_list|,
name|hover
argument_list|,
name|sunken
argument_list|)
expr_stmt|;
name|QRect
name|minButtonIconRect
init|=
name|minButtonRect
operator|.
name|adjusted
argument_list|(
name|buttonMargin
argument_list|,
name|buttonMargin
argument_list|,
operator|-
name|buttonMargin
argument_list|,
operator|-
name|buttonMargin
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|+
literal|3
argument_list|,
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|+
literal|3
argument_list|,
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|+
literal|4
argument_list|,
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|+
literal|3
argument_list|,
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|+
literal|4
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|textAlphaColor
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|-
literal|3
argument_list|,
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|+
literal|3
argument_list|,
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|-
literal|3
argument_list|,
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|+
literal|4
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|+
literal|4
argument_list|,
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|+
literal|3
argument_list|,
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|+
literal|4
argument_list|,
name|minButtonIconRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
comment|// max button
if|if
condition|(
operator|(
name|titleBar
operator|->
name|subControls
operator|&
name|SC_TitleBarMaxButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
operator|&&
operator|!
operator|(
name|titleBar
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
block|{
name|QRect
name|maxButtonRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|titleBar
argument_list|,
name|SC_TitleBarMaxButton
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxButtonRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|bool
name|hover
init|=
operator|(
name|titleBar
operator|->
name|activeSubControls
operator|&
name|SC_TitleBarMaxButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
decl_stmt|;
name|bool
name|sunken
init|=
operator|(
name|titleBar
operator|->
name|activeSubControls
operator|&
name|SC_TitleBarMaxButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
decl_stmt|;
name|qt_gtk_draw_mdibutton
argument_list|(
name|painter
argument_list|,
name|titleBar
argument_list|,
name|maxButtonRect
argument_list|,
name|hover
argument_list|,
name|sunken
argument_list|)
expr_stmt|;
name|QRect
name|maxButtonIconRect
init|=
name|maxButtonRect
operator|.
name|adjusted
argument_list|(
name|buttonMargin
argument_list|,
name|buttonMargin
argument_list|,
operator|-
name|buttonMargin
argument_list|,
operator|-
name|buttonMargin
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|maxButtonIconRect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|maxButtonIconRect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|maxButtonIconRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|,
name|maxButtonIconRect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|maxButtonIconRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|textAlphaColor
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|points
index|[
literal|4
index|]
init|=
block|{
name|maxButtonIconRect
operator|.
name|topLeft
argument_list|()
block|,
name|maxButtonIconRect
operator|.
name|topRight
argument_list|()
block|,
name|maxButtonIconRect
operator|.
name|bottomLeft
argument_list|()
block|,
name|maxButtonIconRect
operator|.
name|bottomRight
argument_list|()
block|}
decl_stmt|;
name|painter
operator|->
name|drawPoints
argument_list|(
name|points
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
comment|// close button
if|if
condition|(
operator|(
name|titleBar
operator|->
name|subControls
operator|&
name|SC_TitleBarCloseButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
operator|)
condition|)
block|{
name|QRect
name|closeButtonRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|titleBar
argument_list|,
name|SC_TitleBarCloseButton
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|closeButtonRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|bool
name|hover
init|=
operator|(
name|titleBar
operator|->
name|activeSubControls
operator|&
name|SC_TitleBarCloseButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
decl_stmt|;
name|bool
name|sunken
init|=
operator|(
name|titleBar
operator|->
name|activeSubControls
operator|&
name|SC_TitleBarCloseButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
decl_stmt|;
name|qt_gtk_draw_mdibutton
argument_list|(
name|painter
argument_list|,
name|titleBar
argument_list|,
name|closeButtonRect
argument_list|,
name|hover
argument_list|,
name|sunken
argument_list|)
expr_stmt|;
name|QRect
name|closeIconRect
init|=
name|closeButtonRect
operator|.
name|adjusted
argument_list|(
name|buttonMargin
argument_list|,
name|buttonMargin
argument_list|,
operator|-
name|buttonMargin
argument_list|,
operator|-
name|buttonMargin
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|textAlphaColor
argument_list|)
expr_stmt|;
specifier|const
name|QLine
name|lines
index|[
literal|4
index|]
init|=
block|{
name|QLine
argument_list|(
name|closeIconRect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|closeIconRect
operator|.
name|top
argument_list|()
argument_list|,
name|closeIconRect
operator|.
name|right
argument_list|()
argument_list|,
name|closeIconRect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
block|,
name|QLine
argument_list|(
name|closeIconRect
operator|.
name|left
argument_list|()
argument_list|,
name|closeIconRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|,
name|closeIconRect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|closeIconRect
operator|.
name|bottom
argument_list|()
argument_list|)
block|,
name|QLine
argument_list|(
name|closeIconRect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|closeIconRect
operator|.
name|top
argument_list|()
argument_list|,
name|closeIconRect
operator|.
name|left
argument_list|()
argument_list|,
name|closeIconRect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
block|,
name|QLine
argument_list|(
argument|closeIconRect.right()
argument_list|,
argument|closeIconRect.top() +
literal|1
argument_list|,
argument|closeIconRect.left() +
literal|1
argument_list|,
argument|closeIconRect.bottom()
argument_list|)
block|}
decl_stmt|;
name|painter
operator|->
name|drawLines
argument_list|(
name|lines
argument_list|,
literal|4
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|points
index|[
literal|4
index|]
init|=
block|{
name|closeIconRect
operator|.
name|topLeft
argument_list|()
block|,
name|closeIconRect
operator|.
name|topRight
argument_list|()
block|,
name|closeIconRect
operator|.
name|bottomLeft
argument_list|()
block|,
name|closeIconRect
operator|.
name|bottomRight
argument_list|()
block|}
decl_stmt|;
name|painter
operator|->
name|drawPoints
argument_list|(
name|points
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|closeIconRect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|closeIconRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|,
name|closeIconRect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|closeIconRect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|closeIconRect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|closeIconRect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|,
name|closeIconRect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|closeIconRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// normalize button
if|if
condition|(
operator|(
name|titleBar
operator|->
name|subControls
operator|&
name|SC_TitleBarNormalButton
operator|)
operator|&&
operator|(
operator|(
operator|(
name|titleBar
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
operator|)
operator|||
operator|(
operator|(
name|titleBar
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|)
operator|)
condition|)
block|{
name|QRect
name|normalButtonRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|titleBar
argument_list|,
name|SC_TitleBarNormalButton
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalButtonRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|bool
name|hover
init|=
operator|(
name|titleBar
operator|->
name|activeSubControls
operator|&
name|SC_TitleBarNormalButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
decl_stmt|;
name|bool
name|sunken
init|=
operator|(
name|titleBar
operator|->
name|activeSubControls
operator|&
name|SC_TitleBarNormalButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
decl_stmt|;
name|QRect
name|normalButtonIconRect
init|=
name|normalButtonRect
operator|.
name|adjusted
argument_list|(
name|buttonMargin
argument_list|,
name|buttonMargin
argument_list|,
operator|-
name|buttonMargin
argument_list|,
operator|-
name|buttonMargin
argument_list|)
decl_stmt|;
name|qt_gtk_draw_mdibutton
argument_list|(
name|painter
argument_list|,
name|titleBar
argument_list|,
name|normalButtonRect
argument_list|,
name|hover
argument_list|,
name|sunken
argument_list|)
expr_stmt|;
name|QRect
name|frontWindowRect
init|=
name|normalButtonIconRect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
operator|-
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|frontWindowRect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|frontWindowRect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|frontWindowRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|,
name|frontWindowRect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|frontWindowRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|textAlphaColor
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|points
index|[
literal|4
index|]
init|=
block|{
name|frontWindowRect
operator|.
name|topLeft
argument_list|()
block|,
name|frontWindowRect
operator|.
name|topRight
argument_list|()
block|,
name|frontWindowRect
operator|.
name|bottomLeft
argument_list|()
block|,
name|frontWindowRect
operator|.
name|bottomRight
argument_list|()
block|}
decl_stmt|;
name|painter
operator|->
name|drawPoints
argument_list|(
name|points
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QRect
name|backWindowRect
init|=
name|normalButtonIconRect
operator|.
name|adjusted
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|3
argument_list|)
decl_stmt|;
name|QRegion
name|clipRegion
init|=
name|backWindowRect
decl_stmt|;
name|clipRegion
operator|-=
name|frontWindowRect
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setClipRegion
argument_list|(
name|clipRegion
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|backWindowRect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|backWindowRect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
name|backWindowRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|,
name|backWindowRect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|backWindowRect
operator|.
name|top
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|textAlphaColor
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|points2
index|[
literal|4
index|]
init|=
block|{
name|backWindowRect
operator|.
name|topLeft
argument_list|()
block|,
name|backWindowRect
operator|.
name|topRight
argument_list|()
block|,
name|backWindowRect
operator|.
name|bottomLeft
argument_list|()
block|,
name|backWindowRect
operator|.
name|bottomRight
argument_list|()
block|}
decl_stmt|;
name|painter
operator|->
name|drawPoints
argument_list|(
name|points2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
comment|// context help button
if|if
condition|(
name|titleBar
operator|->
name|subControls
operator|&
name|SC_TitleBarContextHelpButton
operator|&&
operator|(
name|titleBar
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator|)
condition|)
block|{
name|QRect
name|contextHelpButtonRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|titleBar
argument_list|,
name|SC_TitleBarContextHelpButton
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|contextHelpButtonRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|bool
name|hover
init|=
operator|(
name|titleBar
operator|->
name|activeSubControls
operator|&
name|SC_TitleBarContextHelpButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
decl_stmt|;
name|bool
name|sunken
init|=
operator|(
name|titleBar
operator|->
name|activeSubControls
operator|&
name|SC_TitleBarContextHelpButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
decl_stmt|;
name|qt_gtk_draw_mdibutton
argument_list|(
name|painter
argument_list|,
name|titleBar
argument_list|,
name|contextHelpButtonRect
argument_list|,
name|hover
argument_list|,
name|sunken
argument_list|)
expr_stmt|;
name|QColor
name|blend
decl_stmt|;
name|QImage
name|image
argument_list|(
name|qt_titlebar_context_help
argument_list|)
decl_stmt|;
name|QColor
name|alpha
init|=
name|textColor
decl_stmt|;
name|alpha
operator|.
name|setAlpha
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|textColor
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|2
argument_list|,
name|alpha
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawImage
argument_list|(
name|contextHelpButtonRect
operator|.
name|adjusted
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
block|}
comment|// shade button
if|if
condition|(
name|titleBar
operator|->
name|subControls
operator|&
name|SC_TitleBarShadeButton
operator|&&
operator|(
name|titleBar
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
operator|)
condition|)
block|{
name|QRect
name|shadeButtonRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|titleBar
argument_list|,
name|SC_TitleBarShadeButton
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|shadeButtonRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|bool
name|hover
init|=
operator|(
name|titleBar
operator|->
name|activeSubControls
operator|&
name|SC_TitleBarShadeButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
decl_stmt|;
name|bool
name|sunken
init|=
operator|(
name|titleBar
operator|->
name|activeSubControls
operator|&
name|SC_TitleBarShadeButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
decl_stmt|;
name|qt_gtk_draw_mdibutton
argument_list|(
name|painter
argument_list|,
name|titleBar
argument_list|,
name|shadeButtonRect
argument_list|,
name|hover
argument_list|,
name|sunken
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
name|qt_scrollbar_button_arrow_up
argument_list|)
decl_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|textColor
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawImage
argument_list|(
name|shadeButtonRect
operator|.
name|adjusted
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|,
operator|-
literal|5
argument_list|,
operator|-
literal|7
argument_list|)
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
block|}
comment|// unshade button
if|if
condition|(
name|titleBar
operator|->
name|subControls
operator|&
name|SC_TitleBarUnshadeButton
operator|&&
operator|(
name|titleBar
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
operator|)
condition|)
block|{
name|QRect
name|unshadeButtonRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|titleBar
argument_list|,
name|SC_TitleBarUnshadeButton
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|unshadeButtonRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|bool
name|hover
init|=
operator|(
name|titleBar
operator|->
name|activeSubControls
operator|&
name|SC_TitleBarUnshadeButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
decl_stmt|;
name|bool
name|sunken
init|=
operator|(
name|titleBar
operator|->
name|activeSubControls
operator|&
name|SC_TitleBarUnshadeButton
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
decl_stmt|;
name|qt_gtk_draw_mdibutton
argument_list|(
name|painter
argument_list|,
name|titleBar
argument_list|,
name|unshadeButtonRect
argument_list|,
name|hover
argument_list|,
name|sunken
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
name|qt_scrollbar_button_arrow_down
argument_list|)
decl_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|textColor
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawImage
argument_list|(
name|unshadeButtonRect
operator|.
name|adjusted
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|,
operator|-
literal|5
argument_list|,
operator|-
literal|7
argument_list|)
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|titleBar
operator|->
name|subControls
operator|&
name|SC_TitleBarSysMenu
operator|)
operator|&&
operator|(
name|titleBar
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
operator|)
condition|)
block|{
name|QRect
name|iconRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_TitleBar
argument_list|,
name|titleBar
argument_list|,
name|SC_TitleBarSysMenu
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|iconRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|titleBar
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|titleBar
operator|->
name|icon
operator|.
name|paint
argument_list|(
name|painter
argument_list|,
name|iconRect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStyleOption
name|tool
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|tool
operator|.
name|palette
operator|=
name|titleBar
operator|->
name|palette
expr_stmt|;
name|QPixmap
name|pm
init|=
name|standardIcon
argument_list|(
name|SP_TitleBarMenuButton
argument_list|,
operator|&
name|tool
argument_list|,
name|widget
argument_list|)
operator|.
name|pixmap
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|tool
operator|.
name|rect
operator|=
name|iconRect
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawItemPixmap
argument_list|(
name|painter
argument_list|,
name|iconRect
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|pm
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
case|case
name|CC_GroupBox
case|:
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|groupBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|textRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|groupBox
argument_list|,
name|SC_GroupBoxLabel
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|checkBoxRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_GroupBox
argument_list|,
name|groupBox
argument_list|,
name|SC_GroupBoxCheckBox
argument_list|,
name|widget
argument_list|)
decl_stmt|;
comment|// Draw title
if|if
condition|(
operator|(
name|groupBox
operator|->
name|subControls
operator|&
name|QStyle
operator|::
name|SC_GroupBoxLabel
operator|)
operator|&&
operator|!
name|groupBox
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Draw prelight background
name|GtkWidget
modifier|*
name|gtkCheckButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkCheckButton"
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
condition|)
block|{
name|QRect
name|bgRect
init|=
name|textRect
operator||
name|checkBoxRect
decl_stmt|;
name|gtkPainter
operator|.
name|paintFlatBox
argument_list|(
name|gtkCheckButton
argument_list|,
literal|"checkbutton"
argument_list|,
name|bgRect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|,
name|GTK_STATE_PRELIGHT
argument_list|,
name|GTK_SHADOW_ETCHED_OUT
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkCheckButton
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|groupBox
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|alignment
init|=
name|int
argument_list|(
name|groupBox
operator|->
name|textAlignment
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_UnderlineShortcut
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
condition|)
name|alignment
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
name|QColor
name|textColor
init|=
name|groupBox
operator|->
name|textColor
decl_stmt|;
comment|// Note: custom textColor is currently ignored
name|int
name|labelState
init|=
name|GTK_STATE_INSENSITIVE
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|labelState
operator|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|?
name|GTK_STATE_PRELIGHT
else|:
name|GTK_STATE_NORMAL
expr_stmt|;
name|GdkColor
name|gdkText
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkCheckButton
argument_list|)
operator|->
name|fg
index|[
name|labelState
index|]
decl_stmt|;
name|textColor
operator|=
name|QColor
argument_list|(
name|gdkText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|QFont
name|font
init|=
name|painter
operator|->
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawText
argument_list|(
name|textRect
argument_list|,
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|AlignLeft
operator||
name|alignment
argument_list|,
name|groupBox
operator|->
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|gtkPainter
operator|.
name|paintFocus
argument_list|(
name|gtkCheckButton
argument_list|,
literal|"checkbutton"
argument_list|,
name|textRect
operator|.
name|adjusted
argument_list|(
operator|-
literal|4
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|GTK_STATE_ACTIVE
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|groupBox
operator|->
name|subControls
operator|&
name|SC_GroupBoxCheckBox
condition|)
block|{
name|QStyleOptionButton
name|box
decl_stmt|;
name|box
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|groupBox
argument_list|)
expr_stmt|;
name|box
operator|.
name|rect
operator|=
name|checkBoxRect
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorCheckBox
argument_list|,
operator|&
name|box
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
endif|#
directive|endif
comment|// QT_NO_GROUPBOX
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CC_ComboBox
case|:
comment|// See: http://live.gnome.org/GnomeArt/Tutorials/GtkThemes/GtkComboBox
comment|// and http://live.gnome.org/GnomeArt/Tutorials/GtkThemes/GtkComboBoxEntry
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|comboBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|bool
name|sunken
init|=
name|comboBox
operator|->
name|state
operator|&
name|State_On
decl_stmt|;
comment|// play dead, if combobox has no items
name|BEGIN_STYLE_PIXMAPCACHE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"cb-%0-%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|sunken
argument_list|)
operator|.
name|arg
argument_list|(
name|comboBox
operator|->
name|editable
argument_list|)
argument_list|)
expr_stmt|;
name|QGtkPainter
name|gtkCachedPainter
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|gtkCachedPainter
operator|.
name|setUsePixmapCache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// cached externally
name|bool
name|isEnabled
init|=
operator|(
name|comboBox
operator|->
name|state
operator|&
name|State_Enabled
operator|)
decl_stmt|;
name|bool
name|focus
init|=
name|isEnabled
operator|&&
operator|(
name|comboBox
operator|->
name|state
operator|&
name|State_HasFocus
operator|)
decl_stmt|;
name|GtkStateType
name|state
init|=
name|gtkPainter
operator|.
name|gtkState
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|int
name|appears_as_list
init|=
operator|!
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
name|comboBox
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QStyleOptionComboBox
name|comboBoxCopy
init|=
operator|*
name|comboBox
decl_stmt|;
name|comboBoxCopy
operator|.
name|rect
operator|=
name|option
operator|->
name|rect
expr_stmt|;
name|bool
name|reverse
init|=
operator|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
decl_stmt|;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|QRect
name|arrowButtonRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
operator|&
name|comboBoxCopy
argument_list|,
name|SC_ComboBoxArrow
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|GtkShadowType
name|shadow
init|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|||
name|option
operator|->
name|state
operator|&
name|State_On
operator|)
condition|?
name|GTK_SHADOW_IN
else|:
name|GTK_SHADOW_OUT
decl_stmt|;
specifier|const
name|QHashableLatin1Literal
name|comboBoxPath
init|=
name|comboBox
operator|->
name|editable
condition|?
name|QHashableLatin1Literal
argument_list|(
literal|"GtkComboBoxEntry"
argument_list|)
else|:
name|QHashableLatin1Literal
argument_list|(
literal|"GtkComboBox"
argument_list|)
decl_stmt|;
comment|// We use the gtk widget to position arrows and separators for us
name|GtkWidget
modifier|*
name|gtkCombo
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
name|comboBoxPath
argument_list|)
decl_stmt|;
name|GtkAllocation
name|geometry
init|=
block|{
literal|0
block|,
literal|0
block|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
block|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|d
operator|->
name|gtk_widget_set_direction
argument_list|(
name|gtkCombo
argument_list|,
name|reverse
condition|?
name|GTK_TEXT_DIR_RTL
else|:
name|GTK_TEXT_DIR_LTR
argument_list|)
expr_stmt|;
name|d
operator|->
name|gtk_widget_size_allocate
argument_list|(
name|gtkCombo
argument_list|,
operator|&
name|geometry
argument_list|)
expr_stmt|;
name|QHashableLatin1Literal
name|buttonPath
init|=
name|comboBox
operator|->
name|editable
condition|?
name|QHashableLatin1Literal
argument_list|(
literal|"GtkComboBoxEntry.GtkToggleButton"
argument_list|)
else|:
name|QHashableLatin1Literal
argument_list|(
literal|"GtkComboBox.GtkToggleButton"
argument_list|)
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkToggleButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
name|buttonPath
argument_list|)
decl_stmt|;
name|d
operator|->
name|gtk_widget_set_direction
argument_list|(
name|gtkToggleButton
argument_list|,
name|reverse
condition|?
name|GTK_TEXT_DIR_RTL
else|:
name|GTK_TEXT_DIR_LTR
argument_list|)
expr_stmt|;
if|if
condition|(
name|gtkToggleButton
operator|&&
operator|(
name|appears_as_list
operator|||
name|comboBox
operator|->
name|editable
operator|)
condition|)
block|{
if|if
condition|(
name|focus
condition|)
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkToggleButton
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Draw the combo box as a line edit with a button next to it
if|if
condition|(
name|comboBox
operator|->
name|editable
operator|||
name|appears_as_list
condition|)
block|{
name|GtkStateType
name|frameState
init|=
operator|(
name|state
operator|==
name|GTK_STATE_PRELIGHT
operator|)
condition|?
name|GTK_STATE_NORMAL
else|:
name|state
decl_stmt|;
name|QHashableLatin1Literal
name|entryPath
init|=
name|comboBox
operator|->
name|editable
condition|?
name|QHashableLatin1Literal
argument_list|(
literal|"GtkComboBoxEntry.GtkEntry"
argument_list|)
else|:
name|QHashableLatin1Literal
argument_list|(
literal|"GtkComboBox.GtkFrame"
argument_list|)
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkEntry
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
name|entryPath
argument_list|)
decl_stmt|;
name|d
operator|->
name|gtk_widget_set_direction
argument_list|(
name|gtkEntry
argument_list|,
name|reverse
condition|?
name|GTK_TEXT_DIR_RTL
else|:
name|GTK_TEXT_DIR_LTR
argument_list|)
expr_stmt|;
name|QRect
name|frameRect
init|=
name|option
operator|->
name|rect
decl_stmt|;
if|if
condition|(
name|reverse
condition|)
name|frameRect
operator|.
name|setLeft
argument_list|(
name|arrowButtonRect
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|frameRect
operator|.
name|setRight
argument_list|(
name|arrowButtonRect
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fill the line edit background
comment|// We could have used flat_box with "entry_bg" but that is probably not worth the overhead
name|uint
name|resolve_mask
init|=
name|option
operator|->
name|palette
operator|.
name|resolve
argument_list|()
decl_stmt|;
name|GtkStyle
modifier|*
name|gtkEntryStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkEntry
argument_list|)
decl_stmt|;
name|QRect
name|contentRect
init|=
name|frameRect
operator|.
name|adjusted
argument_list|(
name|gtkEntryStyle
operator|->
name|xthickness
argument_list|,
name|gtkEntryStyle
operator|->
name|ythickness
argument_list|,
operator|-
name|gtkEntryStyle
operator|->
name|xthickness
argument_list|,
operator|-
name|gtkEntryStyle
operator|->
name|ythickness
argument_list|)
decl_stmt|;
comment|// Required for inner blue highlight with clearlooks
if|if
condition|(
name|focus
condition|)
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkEntry
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetPalette
argument_list|)
operator|&&
name|resolve_mask
operator|&
operator|(
literal|1
operator|<<
name|QPalette
operator|::
name|Base
operator|)
condition|)
comment|// Palette overridden by user
name|p
operator|->
name|fillRect
argument_list|(
name|contentRect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
name|gtkCachedPainter
operator|.
name|paintFlatBox
argument_list|(
name|gtkEntry
argument_list|,
literal|"entry_bg"
argument_list|,
name|contentRect
argument_list|,
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|GTK_STATE_NORMAL
else|:
name|GTK_STATE_INSENSITIVE
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
name|gtkEntryStyle
argument_list|,
name|entryPath
operator|.
name|toString
argument_list|()
operator|+
name|QString
operator|::
name|number
argument_list|(
name|focus
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|gtkCachedPainter
operator|.
name|paintShadow
argument_list|(
name|gtkEntry
argument_list|,
name|comboBox
operator|->
name|editable
condition|?
literal|"entry"
else|:
literal|"frame"
argument_list|,
name|frameRect
argument_list|,
name|frameState
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|gtkEntryStyle
argument_list|,
name|entryPath
operator|.
name|toString
argument_list|()
operator|+
name|QString
operator|::
name|number
argument_list|(
name|focus
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|comboBox
operator|->
name|editable
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|option
operator|->
name|direction
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|focus
condition|)
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkEntry
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|GtkStateType
name|buttonState
init|=
name|GTK_STATE_NORMAL
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|buttonState
operator|=
name|GTK_STATE_INSENSITIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|||
name|option
operator|->
name|state
operator|&
name|State_On
condition|)
name|buttonState
operator|=
name|GTK_STATE_ACTIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|&&
name|comboBox
operator|->
name|activeSubControls
operator|&
name|SC_ComboBoxArrow
condition|)
name|buttonState
operator|=
name|GTK_STATE_PRELIGHT
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|gtkToggleButton
argument_list|)
expr_stmt|;
name|gtkCachedPainter
operator|.
name|paintBox
argument_list|(
name|gtkToggleButton
argument_list|,
literal|"button"
argument_list|,
name|arrowButtonRect
argument_list|,
name|buttonState
argument_list|,
name|shadow
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkToggleButton
argument_list|)
argument_list|,
name|buttonPath
operator|.
name|toString
argument_list|()
operator|+
name|QString
operator|::
name|number
argument_list|(
name|focus
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|option
operator|->
name|direction
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|focus
condition|)
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkToggleButton
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Draw combo box as a button
name|QRect
name|buttonRect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|GtkStyle
modifier|*
name|gtkToggleButtonStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkToggleButton
argument_list|)
decl_stmt|;
if|if
condition|(
name|focus
condition|)
comment|// Clearlooks actually check the widget for the default state
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkToggleButton
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|gtkCachedPainter
operator|.
name|paintBox
argument_list|(
name|gtkToggleButton
argument_list|,
literal|"button"
argument_list|,
name|buttonRect
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|gtkToggleButtonStyle
argument_list|,
name|buttonPath
operator|.
name|toString
argument_list|()
operator|+
name|QString
operator|::
name|number
argument_list|(
name|focus
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|focus
condition|)
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkToggleButton
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Draw the separator between label and arrows
name|QHashableLatin1Literal
name|vSeparatorPath
init|=
name|comboBox
operator|->
name|editable
condition|?
name|QHashableLatin1Literal
argument_list|(
literal|"GtkComboBoxEntry.GtkToggleButton.GtkHBox.GtkVSeparator"
argument_list|)
else|:
name|QHashableLatin1Literal
argument_list|(
literal|"GtkComboBox.GtkToggleButton.GtkHBox.GtkVSeparator"
argument_list|)
decl_stmt|;
if|if
condition|(
name|GtkWidget
modifier|*
name|gtkVSeparator
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
name|vSeparatorPath
argument_list|)
condition|)
block|{
name|GtkAllocation
name|allocation
decl_stmt|;
name|d
operator|->
name|gtk_widget_get_allocation
argument_list|(
name|gtkVSeparator
argument_list|,
operator|&
name|allocation
argument_list|)
expr_stmt|;
name|QRect
name|vLineRect
argument_list|(
name|allocation
operator|.
name|x
argument_list|,
name|allocation
operator|.
name|y
argument_list|,
name|allocation
operator|.
name|width
argument_list|,
name|allocation
operator|.
name|height
argument_list|)
decl_stmt|;
name|gtkCachedPainter
operator|.
name|paintVline
argument_list|(
name|gtkVSeparator
argument_list|,
literal|"vseparator"
argument_list|,
name|vLineRect
argument_list|,
name|state
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkVSeparator
argument_list|)
argument_list|,
literal|0
argument_list|,
name|vLineRect
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|vSeparatorPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|gint
name|interiorFocus
init|=
literal|true
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkToggleButton
argument_list|,
literal|"interior-focus"
argument_list|,
operator|&
name|interiorFocus
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|int
name|xt
init|=
name|interiorFocus
condition|?
name|gtkToggleButtonStyle
operator|->
name|xthickness
else|:
literal|0
decl_stmt|;
name|int
name|yt
init|=
name|interiorFocus
condition|?
name|gtkToggleButtonStyle
operator|->
name|ythickness
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|focus
operator|&&
operator|(
operator|(
name|option
operator|->
name|state
operator|&
name|State_KeyboardFocusChange
operator|)
operator|||
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|)
condition|)
name|gtkCachedPainter
operator|.
name|paintFocus
argument_list|(
name|gtkToggleButton
argument_list|,
literal|"button"
argument_list|,
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|xt
argument_list|,
name|yt
argument_list|,
operator|-
name|xt
argument_list|,
operator|-
name|yt
argument_list|)
argument_list|,
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|?
name|GTK_STATE_ACTIVE
else|:
name|GTK_STATE_NORMAL
argument_list|,
name|gtkToggleButtonStyle
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|comboBox
operator|->
name|subControls
operator|&
name|SC_ComboBoxArrow
condition|)
block|{
if|if
condition|(
operator|!
name|isEnabled
condition|)
name|state
operator|=
name|GTK_STATE_INSENSITIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|sunken
condition|)
name|state
operator|=
name|GTK_STATE_ACTIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
condition|)
name|state
operator|=
name|GTK_STATE_PRELIGHT
expr_stmt|;
else|else
name|state
operator|=
name|GTK_STATE_NORMAL
expr_stmt|;
name|QHashableLatin1Literal
name|arrowPath
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|comboBox
operator|->
name|editable
condition|)
block|{
if|if
condition|(
name|appears_as_list
condition|)
name|arrowPath
operator|=
name|QHashableLatin1Literal
argument_list|(
literal|"GtkComboBoxEntry.GtkToggleButton.GtkArrow"
argument_list|)
expr_stmt|;
else|else
name|arrowPath
operator|=
name|QHashableLatin1Literal
argument_list|(
literal|"GtkComboBoxEntry.GtkToggleButton.GtkHBox.GtkArrow"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|appears_as_list
condition|)
name|arrowPath
operator|=
name|QHashableLatin1Literal
argument_list|(
literal|"GtkComboBox.GtkToggleButton.GtkArrow"
argument_list|)
expr_stmt|;
else|else
name|arrowPath
operator|=
name|QHashableLatin1Literal
argument_list|(
literal|"GtkComboBox.GtkToggleButton.GtkHBox.GtkArrow"
argument_list|)
expr_stmt|;
block|}
name|GtkWidget
modifier|*
name|gtkArrow
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
name|arrowPath
argument_list|)
decl_stmt|;
name|gfloat
name|scale
init|=
literal|0.7
decl_stmt|;
name|gint
name|minSize
init|=
literal|15
decl_stmt|;
name|QRect
name|arrowWidgetRect
decl_stmt|;
if|if
condition|(
name|gtkArrow
operator|&&
operator|!
name|d
operator|->
name|gtk_check_version
argument_list|(
literal|2
argument_list|,
literal|12
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkArrow
argument_list|,
literal|"arrow-scaling"
argument_list|,
operator|&
name|scale
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkCombo
argument_list|,
literal|"arrow-size"
argument_list|,
operator|&
name|minSize
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gtkArrow
condition|)
block|{
name|GtkAllocation
name|allocation
decl_stmt|;
name|d
operator|->
name|gtk_widget_get_allocation
argument_list|(
name|gtkArrow
argument_list|,
operator|&
name|allocation
argument_list|)
expr_stmt|;
name|arrowWidgetRect
operator|=
name|QRect
argument_list|(
name|allocation
operator|.
name|x
argument_list|,
name|allocation
operator|.
name|y
argument_list|,
name|allocation
operator|.
name|width
argument_list|,
name|allocation
operator|.
name|height
argument_list|)
expr_stmt|;
name|style
operator|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkArrow
argument_list|)
expr_stmt|;
block|}
comment|// Note that for some reason the arrow-size is not properly respected with Hildon
comment|// Hence we enforce the minimum "arrow-size" ourselves
name|int
name|arrowSize
init|=
name|qMax
argument_list|(
name|qMin
argument_list|(
name|rect
operator|.
name|height
argument_list|()
operator|-
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkCombo
argument_list|)
operator|->
name|ythickness
operator|*
literal|2
argument_list|,
name|minSize
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|arrowWidgetRect
operator|.
name|width
argument_list|()
argument_list|,
name|arrowWidgetRect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QRect
name|arrowRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|arrowSize
operator|*
name|scale
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|arrowSize
operator|*
name|scale
argument_list|)
argument_list|)
decl_stmt|;
name|arrowRect
operator|.
name|moveCenter
argument_list|(
name|arrowWidgetRect
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sunken
condition|)
block|{
name|int
name|xoff
decl_stmt|,
name|yoff
decl_stmt|;
specifier|const
name|QHashableLatin1Literal
name|toggleButtonPath
init|=
name|comboBox
operator|->
name|editable
condition|?
name|QHashableLatin1Literal
argument_list|(
literal|"GtkComboBoxEntry.GtkToggleButton"
argument_list|)
else|:
name|QHashableLatin1Literal
argument_list|(
literal|"GtkComboBox.GtkToggleButton"
argument_list|)
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
name|toggleButtonPath
argument_list|)
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkButton
argument_list|,
literal|"child-displacement-x"
argument_list|,
operator|&
name|xoff
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkButton
argument_list|,
literal|"child-displacement-y"
argument_list|,
operator|&
name|yoff
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|arrowRect
operator|=
name|arrowRect
operator|.
name|adjusted
argument_list|(
name|xoff
argument_list|,
name|yoff
argument_list|,
name|xoff
argument_list|,
name|yoff
argument_list|)
expr_stmt|;
block|}
comment|// Some styles such as Nimbus paint outside the arrowRect
comment|// hence we have provide the whole widget as the cliprect
if|if
condition|(
name|gtkArrow
condition|)
block|{
name|gtkCachedPainter
operator|.
name|setClipRect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
name|gtkCachedPainter
operator|.
name|paintArrow
argument_list|(
name|gtkArrow
argument_list|,
literal|"arrow"
argument_list|,
name|arrowRect
argument_list|,
name|GTK_ARROW_DOWN
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
literal|true
argument_list|,
name|style
argument_list|,
name|arrowPath
operator|.
name|toString
argument_list|()
operator|+
name|QString
operator|::
name|number
argument_list|(
name|option
operator|->
name|direction
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|END_STYLE_PIXMAPCACHE
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
ifndef|#
directive|ifndef
name|QT_NO_TOOLBUTTON
case|case
name|CC_ToolButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|toolbutton
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|button
decl_stmt|,
name|menuarea
decl_stmt|;
name|button
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|control
argument_list|,
name|toolbutton
argument_list|,
name|SC_ToolButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|menuarea
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|control
argument_list|,
name|toolbutton
argument_list|,
name|SC_ToolButtonMenu
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|State
name|bflags
init|=
name|toolbutton
operator|->
name|state
operator|&
operator|~
operator|(
name|State_Sunken
operator||
name|State_MouseOver
operator|)
decl_stmt|;
if|if
condition|(
name|bflags
operator|&
name|State_AutoRaise
condition|)
if|if
condition|(
operator|!
operator|(
name|bflags
operator|&
name|State_MouseOver
operator|)
condition|)
name|bflags
operator|&=
operator|~
name|State_Raised
expr_stmt|;
name|State
name|mflags
init|=
name|bflags
decl_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|state
operator|&
name|State_Sunken
condition|)
block|{
if|if
condition|(
name|toolbutton
operator|->
name|activeSubControls
operator|&
name|SC_ToolButton
condition|)
name|bflags
operator||=
name|State_Sunken
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|activeSubControls
operator|&
name|SC_ToolButtonMenu
condition|)
name|mflags
operator||=
name|State_Sunken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|toolbutton
operator|->
name|state
operator|&
name|State_MouseOver
condition|)
block|{
if|if
condition|(
name|toolbutton
operator|->
name|activeSubControls
operator|&
name|SC_ToolButton
condition|)
name|bflags
operator||=
name|State_MouseOver
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|activeSubControls
operator|&
name|SC_ToolButtonMenu
condition|)
name|mflags
operator||=
name|State_MouseOver
expr_stmt|;
block|}
name|QStyleOption
name|tool
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|tool
operator|.
name|palette
operator|=
name|toolbutton
operator|->
name|palette
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|subControls
operator|&
name|SC_ToolButton
condition|)
block|{
if|if
condition|(
name|bflags
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator||
name|State_Raised
operator||
name|State_MouseOver
operator|)
condition|)
block|{
name|tool
operator|.
name|rect
operator|=
name|button
expr_stmt|;
name|tool
operator|.
name|state
operator|=
name|bflags
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_PanelButtonTool
argument_list|,
operator|&
name|tool
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
name|bool
name|drawMenuArrow
init|=
name|toolbutton
operator|->
name|features
operator|&
name|QStyleOptionToolButton
operator|::
name|HasMenu
operator|&&
operator|!
operator|(
name|toolbutton
operator|->
name|features
operator|&
name|QStyleOptionToolButton
operator|::
name|MenuButtonPopup
operator|)
decl_stmt|;
name|int
name|popupArrowSize
init|=
name|drawMenuArrow
condition|?
literal|7
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fr
decl_stmt|;
name|fr
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|toolbutton
argument_list|)
expr_stmt|;
name|fr
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ToolButton
argument_list|,
name|toolbutton
argument_list|,
name|SC_ToolButton
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|fr
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fr
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|QStyleOptionToolButton
name|label
init|=
operator|*
name|toolbutton
decl_stmt|;
name|label
operator|.
name|state
operator|=
name|bflags
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkToolButton.GtkButton"
argument_list|)
decl_stmt|;
name|QPalette
name|pal
init|=
name|toolbutton
operator|->
name|palette
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|&&
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|&&
operator|!
operator|(
name|widget
operator|&&
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetPalette
argument_list|)
operator|)
condition|)
block|{
name|GdkColor
name|gdkText
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkButton
argument_list|)
operator|->
name|fg
index|[
name|GTK_STATE_PRELIGHT
index|]
decl_stmt|;
name|QColor
name|textColor
init|=
name|QColor
argument_list|(
name|gdkText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|textColor
argument_list|)
expr_stmt|;
name|label
operator|.
name|palette
operator|=
name|pal
expr_stmt|;
block|}
name|label
operator|.
name|rect
operator|=
name|button
operator|.
name|adjusted
argument_list|(
name|style
operator|->
name|xthickness
argument_list|,
name|style
operator|->
name|ythickness
argument_list|,
operator|-
name|style
operator|->
name|xthickness
operator|-
name|popupArrowSize
argument_list|,
operator|-
name|style
operator|->
name|ythickness
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|CE_ToolButtonLabel
argument_list|,
operator|&
name|label
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|subControls
operator|&
name|SC_ToolButtonMenu
condition|)
block|{
name|tool
operator|.
name|rect
operator|=
name|menuarea
expr_stmt|;
name|tool
operator|.
name|state
operator|=
name|mflags
expr_stmt|;
if|if
condition|(
operator|(
name|mflags
operator|&
name|State_Enabled
operator|&&
operator|(
name|mflags
operator|&
operator|(
name|State_Sunken
operator||
name|State_Raised
operator||
name|State_MouseOver
operator|)
operator|)
operator|)
operator|||
operator|!
operator|(
name|mflags
operator|&
name|State_AutoRaise
operator|)
condition|)
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorButtonDropDown
argument_list|,
operator|&
name|tool
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|tool
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|drawMenuArrow
condition|)
block|{
name|QRect
name|ir
init|=
name|toolbutton
operator|->
name|rect
decl_stmt|;
name|QStyleOptionToolButton
name|newBtn
init|=
operator|*
name|toolbutton
decl_stmt|;
name|newBtn
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|ir
operator|.
name|right
argument_list|()
operator|-
name|popupArrowSize
operator|-
name|style
operator|->
name|xthickness
operator|-
literal|3
argument_list|,
name|ir
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
literal|1
argument_list|,
name|popupArrowSize
argument_list|,
name|popupArrowSize
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|newBtn
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_TOOLBUTTON
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
case|case
name|CC_ScrollBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|scrollBar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkHScrollBar
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkHScrollbar"
argument_list|)
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkVScrollBar
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkVScrollbar"
argument_list|)
decl_stmt|;
comment|// Fill background in case the scrollbar is partially transparent
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|scrollBar
operator|->
name|rect
decl_stmt|;
name|QRect
name|scrollBarSubLine
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|control
argument_list|,
name|scrollBar
argument_list|,
name|SC_ScrollBarSubLine
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|scrollBarAddLine
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|control
argument_list|,
name|scrollBar
argument_list|,
name|SC_ScrollBarAddLine
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|scrollBarSlider
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|control
argument_list|,
name|scrollBar
argument_list|,
name|SC_ScrollBarSlider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|grooveRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|control
argument_list|,
name|scrollBar
argument_list|,
name|SC_ScrollBarGroove
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|bool
name|horizontal
init|=
name|scrollBar
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
decl_stmt|;
name|GtkWidget
modifier|*
name|scrollbarWidget
init|=
name|horizontal
condition|?
name|gtkHScrollBar
else|:
name|gtkVScrollBar
decl_stmt|;
name|style
operator|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|scrollbarWidget
argument_list|)
expr_stmt|;
name|gboolean
name|trough_under_steppers
init|=
literal|true
decl_stmt|;
name|gboolean
name|trough_side_details
init|=
literal|false
decl_stmt|;
name|gboolean
name|activate_slider
init|=
literal|false
decl_stmt|;
name|gboolean
name|stepper_size
init|=
literal|14
decl_stmt|;
name|gint
name|trough_border
init|=
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|gtk_check_version
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
operator|(
name|GtkWidget
operator|*
operator|)
operator|(
name|scrollbarWidget
operator|)
argument_list|,
literal|"trough-border"
argument_list|,
operator|&
name|trough_border
argument_list|,
literal|"trough-side-details"
argument_list|,
operator|&
name|trough_side_details
argument_list|,
literal|"trough-under-steppers"
argument_list|,
operator|&
name|trough_under_steppers
argument_list|,
literal|"activate-slider"
argument_list|,
operator|&
name|activate_slider
argument_list|,
literal|"stepper-size"
argument_list|,
operator|&
name|stepper_size
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trough_under_steppers
condition|)
block|{
name|scrollBarAddLine
operator|.
name|adjust
argument_list|(
name|trough_border
argument_list|,
name|trough_border
argument_list|,
operator|-
name|trough_border
argument_list|,
operator|-
name|trough_border
argument_list|)
expr_stmt|;
name|scrollBarSubLine
operator|.
name|adjust
argument_list|(
name|trough_border
argument_list|,
name|trough_border
argument_list|,
operator|-
name|trough_border
argument_list|,
operator|-
name|trough_border
argument_list|)
expr_stmt|;
name|scrollBarSlider
operator|.
name|adjust
argument_list|(
name|horizontal
condition|?
operator|-
name|trough_border
else|:
literal|0
argument_list|,
name|horizontal
condition|?
literal|0
else|:
operator|-
name|trough_border
argument_list|,
name|horizontal
condition|?
name|trough_border
else|:
literal|0
argument_list|,
name|horizontal
condition|?
literal|0
else|:
name|trough_border
argument_list|)
expr_stmt|;
block|}
comment|// Some styles check the position of scrollbars in order to determine
comment|// if lines should be painted when the scrollbar is in max or min positions.
name|int
name|maximum
init|=
literal|2
decl_stmt|;
name|int
name|fakePos
init|=
literal|0
decl_stmt|;
name|bool
name|reverse
init|=
operator|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
decl_stmt|;
if|if
condition|(
name|scrollBar
operator|->
name|minimum
operator|==
name|scrollBar
operator|->
name|maximum
condition|)
name|maximum
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|scrollBar
operator|->
name|sliderPosition
operator|==
name|scrollBar
operator|->
name|maximum
condition|)
name|fakePos
operator|=
name|maximum
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollBar
operator|->
name|sliderPosition
operator|>
name|scrollBar
operator|->
name|minimum
condition|)
name|fakePos
operator|=
name|maximum
operator|-
literal|1
expr_stmt|;
name|GtkRange
modifier|*
name|range
init|=
operator|(
name|GtkRange
operator|*
operator|)
operator|(
name|horizontal
condition|?
name|gtkHScrollBar
else|:
name|gtkVScrollBar
operator|)
decl_stmt|;
name|GtkAdjustment
modifier|*
name|adjustment
init|=
name|d
operator|->
name|gtk_range_get_adjustment
argument_list|(
name|range
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjustment
condition|)
block|{
name|d
operator|->
name|gtk_adjustment_configure
argument_list|(
name|adjustment
argument_list|,
name|fakePos
argument_list|,
literal|0
argument_list|,
name|maximum
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|adjustment
operator|=
operator|(
name|GtkAdjustment
operator|*
operator|)
name|d
operator|->
name|gtk_adjustment_new
argument_list|(
name|fakePos
argument_list|,
literal|0
argument_list|,
name|maximum
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|gtk_range_set_adjustment
argument_list|(
name|range
argument_list|,
name|adjustment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scrollBar
operator|->
name|subControls
operator|&
name|SC_ScrollBarGroove
condition|)
block|{
name|GtkStateType
name|state
init|=
name|GTK_STATE_ACTIVE
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|state
operator|=
name|GTK_STATE_INSENSITIVE
expr_stmt|;
if|if
condition|(
name|trough_under_steppers
condition|)
name|grooveRect
operator|=
name|option
operator|->
name|rect
expr_stmt|;
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|scrollbarWidget
argument_list|,
literal|"trough"
argument_list|,
name|grooveRect
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
comment|//paint slider
if|if
condition|(
name|scrollBar
operator|->
name|subControls
operator|&
name|SC_ScrollBarSlider
condition|)
block|{
name|GtkStateType
name|state
init|=
name|GTK_STATE_NORMAL
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|state
operator|=
name|GTK_STATE_INSENSITIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|activate_slider
operator|&&
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|&&
operator|(
name|scrollBar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSlider
operator|)
condition|)
name|state
operator|=
name|GTK_STATE_ACTIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|&&
operator|(
name|scrollBar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSlider
operator|)
condition|)
name|state
operator|=
name|GTK_STATE_PRELIGHT
expr_stmt|;
name|GtkShadowType
name|shadow
init|=
name|GTK_SHADOW_OUT
decl_stmt|;
if|if
condition|(
name|trough_under_steppers
condition|)
block|{
if|if
condition|(
operator|!
name|horizontal
condition|)
name|scrollBarSlider
operator|.
name|adjust
argument_list|(
name|trough_border
argument_list|,
literal|0
argument_list|,
operator|-
name|trough_border
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|scrollBarSlider
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|trough_border
argument_list|,
literal|0
argument_list|,
operator|-
name|trough_border
argument_list|)
expr_stmt|;
block|}
name|gtkPainter
operator|.
name|paintSlider
argument_list|(
name|scrollbarWidget
argument_list|,
literal|"slider"
argument_list|,
name|scrollBarSlider
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|style
argument_list|,
name|horizontal
condition|?
name|GTK_ORIENTATION_HORIZONTAL
else|:
name|GTK_ORIENTATION_VERTICAL
argument_list|,
name|QString
argument_list|(
name|QLS
argument_list|(
literal|"%0%1"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|fakePos
argument_list|)
operator|.
name|arg
argument_list|(
name|maximum
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scrollBar
operator|->
name|subControls
operator|&
name|SC_ScrollBarAddLine
condition|)
block|{
name|GtkAllocation
name|vAllocation
decl_stmt|;
name|vAllocation
operator|.
name|y
operator|=
name|scrollBarAddLine
operator|.
name|top
argument_list|()
expr_stmt|;
name|vAllocation
operator|.
name|height
operator|=
name|scrollBarAddLine
operator|.
name|height
argument_list|()
operator|-
name|rect
operator|.
name|height
argument_list|()
operator|+
literal|6
expr_stmt|;
name|d
operator|->
name|gtk_widget_set_allocation
argument_list|(
name|gtkVScrollBar
argument_list|,
operator|&
name|vAllocation
argument_list|)
expr_stmt|;
name|GtkAllocation
name|hAllocation
decl_stmt|;
name|hAllocation
operator|.
name|x
operator|=
name|scrollBarAddLine
operator|.
name|right
argument_list|()
expr_stmt|;
name|hAllocation
operator|.
name|width
operator|=
name|scrollBarAddLine
operator|.
name|width
argument_list|()
operator|-
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|d
operator|->
name|gtk_widget_set_allocation
argument_list|(
name|gtkHScrollBar
argument_list|,
operator|&
name|hAllocation
argument_list|)
expr_stmt|;
name|GtkShadowType
name|shadow
init|=
name|GTK_SHADOW_OUT
decl_stmt|;
name|GtkStateType
name|state
init|=
name|GTK_STATE_NORMAL
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|||
operator|(
name|fakePos
operator|==
name|maximum
operator|)
condition|)
name|state
operator|=
name|GTK_STATE_INSENSITIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|&&
operator|(
name|scrollBar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarAddLine
operator|)
condition|)
block|{
name|state
operator|=
name|GTK_STATE_ACTIVE
expr_stmt|;
name|shadow
operator|=
name|GTK_SHADOW_IN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|&&
operator|(
name|scrollBar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarAddLine
operator|)
condition|)
name|state
operator|=
name|GTK_STATE_PRELIGHT
expr_stmt|;
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|scrollbarWidget
argument_list|,
name|horizontal
condition|?
literal|"hscrollbar"
else|:
literal|"vscrollbar"
argument_list|,
name|scrollBarAddLine
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|style
argument_list|,
name|QLS
argument_list|(
literal|"add"
argument_list|)
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintArrow
argument_list|(
name|scrollbarWidget
argument_list|,
name|horizontal
condition|?
literal|"hscrollbar"
else|:
literal|"vscrollbar"
argument_list|,
name|scrollBarAddLine
operator|.
name|adjusted
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|horizontal
condition|?
operator|(
name|reverse
condition|?
name|GTK_ARROW_LEFT
else|:
name|GTK_ARROW_RIGHT
operator|)
else|:
name|GTK_ARROW_DOWN
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
literal|false
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scrollBar
operator|->
name|subControls
operator|&
name|SC_ScrollBarSubLine
condition|)
block|{
name|GtkAllocation
name|vAllocation
decl_stmt|;
name|vAllocation
operator|.
name|y
operator|=
literal|0
expr_stmt|;
name|vAllocation
operator|.
name|height
operator|=
name|scrollBarSubLine
operator|.
name|height
argument_list|()
expr_stmt|;
name|d
operator|->
name|gtk_widget_set_allocation
argument_list|(
name|gtkVScrollBar
argument_list|,
operator|&
name|vAllocation
argument_list|)
expr_stmt|;
name|GtkAllocation
name|hAllocation
decl_stmt|;
name|hAllocation
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|hAllocation
operator|.
name|width
operator|=
name|scrollBarSubLine
operator|.
name|width
argument_list|()
expr_stmt|;
name|d
operator|->
name|gtk_widget_set_allocation
argument_list|(
name|gtkHScrollBar
argument_list|,
operator|&
name|hAllocation
argument_list|)
expr_stmt|;
name|GtkShadowType
name|shadow
init|=
name|GTK_SHADOW_OUT
decl_stmt|;
name|GtkStateType
name|state
init|=
name|GTK_STATE_NORMAL
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|||
operator|(
name|fakePos
operator|==
literal|0
operator|)
condition|)
name|state
operator|=
name|GTK_STATE_INSENSITIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|&&
operator|(
name|scrollBar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSubLine
operator|)
condition|)
block|{
name|shadow
operator|=
name|GTK_SHADOW_IN
expr_stmt|;
name|state
operator|=
name|GTK_STATE_ACTIVE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|&&
operator|(
name|scrollBar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSubLine
operator|)
condition|)
name|state
operator|=
name|GTK_STATE_PRELIGHT
expr_stmt|;
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|scrollbarWidget
argument_list|,
name|horizontal
condition|?
literal|"hscrollbar"
else|:
literal|"vscrollbar"
argument_list|,
name|scrollBarSubLine
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|style
argument_list|,
name|QLS
argument_list|(
literal|"sub"
argument_list|)
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintArrow
argument_list|(
name|scrollbarWidget
argument_list|,
name|horizontal
condition|?
literal|"hscrollbar"
else|:
literal|"vscrollbar"
argument_list|,
name|scrollBarSubLine
operator|.
name|adjusted
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|horizontal
condition|?
operator|(
name|reverse
condition|?
name|GTK_ARROW_RIGHT
else|:
name|GTK_ARROW_LEFT
operator|)
else|:
name|GTK_ARROW_UP
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
literal|false
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_SCROLLBAR
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkSpinButton
init|=
name|spinBox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|?
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkEntry"
argument_list|)
else|:
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkSpinButton"
argument_list|)
decl_stmt|;
name|bool
name|isEnabled
init|=
operator|(
name|spinBox
operator|->
name|state
operator|&
name|State_Enabled
operator|)
decl_stmt|;
name|bool
name|hover
init|=
name|isEnabled
operator|&&
operator|(
name|spinBox
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
decl_stmt|;
name|bool
name|sunken
init|=
operator|(
name|spinBox
operator|->
name|state
operator|&
name|State_Sunken
operator|)
decl_stmt|;
name|bool
name|upIsActive
init|=
operator|(
name|spinBox
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxUp
operator|)
decl_stmt|;
name|bool
name|downIsActive
init|=
operator|(
name|spinBox
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxDown
operator|)
decl_stmt|;
name|bool
name|reverse
init|=
operator|(
name|spinBox
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
decl_stmt|;
name|QRect
name|editArea
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|QRect
name|editRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|option
argument_list|,
name|SC_SpinBoxEditField
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|upRect
decl_stmt|,
name|downRect
decl_stmt|,
name|buttonRect
decl_stmt|;
if|if
condition|(
name|spinBox
operator|->
name|buttonSymbols
operator|!=
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|)
block|{
name|upRect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|option
argument_list|,
name|SC_SpinBoxUp
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|downRect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|option
argument_list|,
name|SC_SpinBoxDown
argument_list|,
name|widget
argument_list|)
expr_stmt|;
comment|//### Move this to subControlRect
name|upRect
operator|.
name|setTop
argument_list|(
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reverse
condition|)
name|upRect
operator|.
name|setLeft
argument_list|(
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|upRect
operator|.
name|setRight
argument_list|(
name|option
operator|->
name|rect
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|downRect
operator|.
name|setBottom
argument_list|(
name|option
operator|->
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reverse
condition|)
name|downRect
operator|.
name|setLeft
argument_list|(
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|downRect
operator|.
name|setRight
argument_list|(
name|option
operator|->
name|rect
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|buttonRect
operator|=
name|upRect
operator||
name|downRect
expr_stmt|;
if|if
condition|(
name|reverse
condition|)
name|editArea
operator|.
name|setLeft
argument_list|(
name|upRect
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|editArea
operator|.
name|setRight
argument_list|(
name|upRect
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spinBox
operator|->
name|frame
condition|)
block|{
name|GtkStateType
name|state
init|=
name|gtkPainter
operator|.
name|gtkState
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|state
operator|=
name|GTK_STATE_INSENSITIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|state
operator|=
name|GTK_STATE_NORMAL
expr_stmt|;
elseif|else
if|if
condition|(
name|state
operator|==
name|GTK_STATE_PRELIGHT
condition|)
name|state
operator|=
name|GTK_STATE_NORMAL
expr_stmt|;
name|style
operator|=
name|gtkPainter
operator|.
name|getStyle
argument_list|(
name|gtkSpinButton
argument_list|)
expr_stmt|;
name|QString
name|key
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|key
operator|+=
name|QLatin1Char
argument_list|(
literal|'f'
argument_list|)
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkSpinButton
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|uint
name|resolve_mask
init|=
name|option
operator|->
name|palette
operator|.
name|resolve
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolve_mask
operator|&
operator|(
literal|1
operator|<<
name|QPalette
operator|::
name|Base
operator|)
condition|)
comment|// Palette overridden by user
name|painter
operator|->
name|fillRect
argument_list|(
name|editRect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|gtkPainter
operator|.
name|paintFlatBox
argument_list|(
name|gtkSpinButton
argument_list|,
literal|"entry_bg"
argument_list|,
name|editArea
operator|.
name|adjusted
argument_list|(
name|style
operator|->
name|xthickness
argument_list|,
name|style
operator|->
name|ythickness
argument_list|,
operator|-
name|style
operator|->
name|xthickness
argument_list|,
operator|-
name|style
operator|->
name|ythickness
argument_list|)
argument_list|,
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|GTK_STATE_NORMAL
else|:
name|GTK_STATE_INSENSITIVE
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
name|style
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintShadow
argument_list|(
name|gtkSpinButton
argument_list|,
literal|"entry"
argument_list|,
name|editArea
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkSpinButton
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|spinBox
operator|->
name|buttonSymbols
operator|!=
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|)
block|{
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkSpinButton
argument_list|,
literal|"spinbutton"
argument_list|,
name|buttonRect
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|style
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|upRect
operator|.
name|setSize
argument_list|(
name|downRect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkSpinButton
argument_list|,
literal|"spinbutton_up"
argument_list|,
name|upRect
argument_list|,
name|GTK_STATE_INSENSITIVE
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|style
argument_list|,
name|key
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|upIsActive
operator|&&
name|sunken
condition|)
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkSpinButton
argument_list|,
literal|"spinbutton_up"
argument_list|,
name|upRect
argument_list|,
name|GTK_STATE_ACTIVE
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|style
argument_list|,
name|key
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|upIsActive
operator|&&
name|hover
condition|)
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkSpinButton
argument_list|,
literal|"spinbutton_up"
argument_list|,
name|upRect
argument_list|,
name|GTK_STATE_PRELIGHT
argument_list|,
name|GTK_SHADOW_OUT
argument_list|,
name|style
argument_list|,
name|key
argument_list|)
expr_stmt|;
else|else
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkSpinButton
argument_list|,
literal|"spinbutton_up"
argument_list|,
name|upRect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|GTK_SHADOW_OUT
argument_list|,
name|style
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkSpinButton
argument_list|,
literal|"spinbutton_down"
argument_list|,
name|downRect
argument_list|,
name|GTK_STATE_INSENSITIVE
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|style
argument_list|,
name|key
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|downIsActive
operator|&&
name|sunken
condition|)
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkSpinButton
argument_list|,
literal|"spinbutton_down"
argument_list|,
name|downRect
argument_list|,
name|GTK_STATE_ACTIVE
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|style
argument_list|,
name|key
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|downIsActive
operator|&&
name|hover
condition|)
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkSpinButton
argument_list|,
literal|"spinbutton_down"
argument_list|,
name|downRect
argument_list|,
name|GTK_STATE_PRELIGHT
argument_list|,
name|GTK_SHADOW_OUT
argument_list|,
name|style
argument_list|,
name|key
argument_list|)
expr_stmt|;
else|else
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkSpinButton
argument_list|,
literal|"spinbutton_down"
argument_list|,
name|downRect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|GTK_SHADOW_OUT
argument_list|,
name|style
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|QGtkStylePrivate
operator|::
name|gtkWidgetSetFocus
argument_list|(
name|gtkSpinButton
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|spinBox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|PlusMinus
condition|)
block|{
name|int
name|centerX
init|=
name|upRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|centerY
init|=
name|upRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
comment|// plus/minus
if|if
condition|(
name|spinBox
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxUp
operator|&&
name|sunken
condition|)
block|{
name|painter
operator|->
name|drawLine
argument_list|(
literal|1
operator|+
name|centerX
operator|-
literal|2
argument_list|,
literal|1
operator|+
name|centerY
argument_list|,
literal|1
operator|+
name|centerX
operator|+
literal|2
argument_list|,
literal|1
operator|+
name|centerY
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
literal|1
operator|+
name|centerX
argument_list|,
literal|1
operator|+
name|centerY
operator|-
literal|2
argument_list|,
literal|1
operator|+
name|centerX
argument_list|,
literal|1
operator|+
name|centerY
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|drawLine
argument_list|(
name|centerX
operator|-
literal|2
argument_list|,
name|centerY
argument_list|,
name|centerX
operator|+
literal|2
argument_list|,
name|centerY
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|centerX
argument_list|,
name|centerY
operator|-
literal|2
argument_list|,
name|centerX
argument_list|,
name|centerY
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
name|centerX
operator|=
name|downRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
expr_stmt|;
name|centerY
operator|=
name|downRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
expr_stmt|;
if|if
condition|(
name|spinBox
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxDown
operator|&&
name|sunken
condition|)
block|{
name|painter
operator|->
name|drawLine
argument_list|(
literal|1
operator|+
name|centerX
operator|-
literal|2
argument_list|,
literal|1
operator|+
name|centerY
argument_list|,
literal|1
operator|+
name|centerX
operator|+
literal|2
argument_list|,
literal|1
operator|+
name|centerY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|drawLine
argument_list|(
name|centerX
operator|-
literal|2
argument_list|,
name|centerY
argument_list|,
name|centerX
operator|+
literal|2
argument_list|,
name|centerY
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|spinBox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|UpDownArrows
condition|)
block|{
name|int
name|size
init|=
name|d
operator|->
name|getSpinboxArrowSize
argument_list|()
decl_stmt|;
name|int
name|w
init|=
name|size
operator|/
literal|2
operator|-
literal|1
decl_stmt|;
name|w
operator|-=
name|w
operator|%
literal|2
operator|-
literal|1
expr_stmt|;
comment|// force odd
name|int
name|h
init|=
operator|(
name|w
operator|+
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
name|QRect
name|arrowRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|arrowRect
operator|.
name|moveCenter
argument_list|(
name|upRect
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
comment|// arrows
name|GtkStateType
name|state
init|=
name|GTK_STATE_NORMAL
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|||
operator|!
operator|(
name|spinBox
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepUpEnabled
operator|)
condition|)
name|state
operator|=
name|GTK_STATE_INSENSITIVE
expr_stmt|;
name|gtkPainter
operator|.
name|paintArrow
argument_list|(
name|gtkSpinButton
argument_list|,
literal|"spinbutton"
argument_list|,
name|arrowRect
argument_list|,
name|GTK_ARROW_UP
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
literal|false
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|arrowRect
operator|.
name|moveCenter
argument_list|(
name|downRect
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|||
operator|!
operator|(
name|spinBox
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepDownEnabled
operator|)
condition|)
name|state
operator|=
name|GTK_STATE_INSENSITIVE
expr_stmt|;
name|gtkPainter
operator|.
name|paintArrow
argument_list|(
name|gtkSpinButton
argument_list|,
literal|"spinbutton"
argument_list|,
name|arrowRect
argument_list|,
name|GTK_ARROW_DOWN
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
literal|false
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SPINBOX
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
case|case
name|CC_Slider
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|hScaleWidget
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkHScale"
argument_list|)
decl_stmt|;
name|GtkWidget
modifier|*
name|vScaleWidget
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkVScale"
argument_list|)
decl_stmt|;
name|QRect
name|groove
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_Slider
argument_list|,
name|option
argument_list|,
name|SC_SliderGroove
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|handle
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_Slider
argument_list|,
name|option
argument_list|,
name|SC_SliderHandle
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|bool
name|horizontal
init|=
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
decl_stmt|;
name|bool
name|ticksAbove
init|=
name|slider
operator|->
name|tickPosition
operator|&
name|QSlider
operator|::
name|TicksAbove
decl_stmt|;
name|bool
name|ticksBelow
init|=
name|slider
operator|->
name|tickPosition
operator|&
name|QSlider
operator|::
name|TicksBelow
decl_stmt|;
name|QBrush
name|oldBrush
init|=
name|painter
operator|->
name|brush
argument_list|()
decl_stmt|;
name|QPen
name|oldPen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|QColor
name|shadowAlpha
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
decl_stmt|;
name|shadowAlpha
operator|.
name|setAlpha
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QColor
name|highlightAlpha
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
decl_stmt|;
name|highlightAlpha
operator|.
name|setAlpha
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|QGtkStylePrivate
operator|::
name|gtk_widget_set_direction
argument_list|(
name|hScaleWidget
argument_list|,
name|slider
operator|->
name|upsideDown
condition|?
name|GTK_TEXT_DIR_RTL
else|:
name|GTK_TEXT_DIR_LTR
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|scaleWidget
init|=
name|horizontal
condition|?
name|hScaleWidget
else|:
name|vScaleWidget
decl_stmt|;
name|style
operator|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|scaleWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|option
operator|->
name|subControls
operator|&
name|SC_SliderGroove
operator|)
operator|&&
name|groove
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|GtkRange
modifier|*
name|range
init|=
operator|(
name|GtkRange
operator|*
operator|)
name|scaleWidget
decl_stmt|;
name|GtkAdjustment
modifier|*
name|adjustment
init|=
name|d
operator|->
name|gtk_range_get_adjustment
argument_list|(
name|range
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjustment
condition|)
block|{
name|d
operator|->
name|gtk_adjustment_configure
argument_list|(
name|adjustment
argument_list|,
name|slider
operator|->
name|sliderPosition
argument_list|,
name|slider
operator|->
name|minimum
argument_list|,
name|slider
operator|->
name|maximum
argument_list|,
name|slider
operator|->
name|singleStep
argument_list|,
name|slider
operator|->
name|singleStep
argument_list|,
name|slider
operator|->
name|pageStep
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|adjustment
operator|=
operator|(
name|GtkAdjustment
operator|*
operator|)
name|d
operator|->
name|gtk_adjustment_new
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|,
name|slider
operator|->
name|minimum
argument_list|,
name|slider
operator|->
name|maximum
argument_list|,
name|slider
operator|->
name|singleStep
argument_list|,
name|slider
operator|->
name|singleStep
argument_list|,
name|slider
operator|->
name|pageStep
argument_list|)
expr_stmt|;
name|d
operator|->
name|gtk_range_set_adjustment
argument_list|(
name|range
argument_list|,
name|adjustment
argument_list|)
expr_stmt|;
block|}
name|int
name|outerSize
decl_stmt|;
name|d
operator|->
name|gtk_range_set_inverted
argument_list|(
name|range
argument_list|,
operator|!
name|horizontal
argument_list|)
expr_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|scaleWidget
argument_list|,
literal|"trough-border"
argument_list|,
operator|&
name|outerSize
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|outerSize
operator|++
expr_stmt|;
name|GtkStateType
name|state
init|=
name|gtkPainter
operator|.
name|gtkState
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|int
name|focusFrameMargin
init|=
literal|2
decl_stmt|;
name|QRect
name|grooveRect
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|focusFrameMargin
argument_list|,
name|outerSize
operator|+
name|focusFrameMargin
argument_list|,
operator|-
name|focusFrameMargin
argument_list|,
operator|-
name|outerSize
operator|-
name|focusFrameMargin
argument_list|)
decl_stmt|;
name|gboolean
name|trough_side_details
init|=
literal|false
decl_stmt|;
comment|// Indicates if the upper or lower scale background differs
if|if
condition|(
operator|!
name|d
operator|->
name|gtk_check_version
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
condition|)
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
operator|(
name|GtkWidget
operator|*
operator|)
operator|(
name|scaleWidget
operator|)
argument_list|,
literal|"trough-side-details"
argument_list|,
operator|&
name|trough_side_details
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|trough_side_details
condition|)
block|{
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|scaleWidget
argument_list|,
literal|"trough"
argument_list|,
name|grooveRect
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|style
argument_list|,
name|QString
argument_list|(
name|QLS
argument_list|(
literal|"p%0"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRect
name|upperGroove
init|=
name|grooveRect
decl_stmt|;
name|QRect
name|lowerGroove
init|=
name|grooveRect
decl_stmt|;
if|if
condition|(
name|horizontal
condition|)
block|{
if|if
condition|(
name|slider
operator|->
name|upsideDown
condition|)
block|{
name|lowerGroove
operator|.
name|setLeft
argument_list|(
name|handle
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|upperGroove
operator|.
name|setRight
argument_list|(
name|handle
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|upperGroove
operator|.
name|setLeft
argument_list|(
name|handle
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|lowerGroove
operator|.
name|setRight
argument_list|(
name|handle
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|slider
operator|->
name|upsideDown
condition|)
block|{
name|lowerGroove
operator|.
name|setBottom
argument_list|(
name|handle
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|upperGroove
operator|.
name|setTop
argument_list|(
name|handle
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|upperGroove
operator|.
name|setBottom
argument_list|(
name|handle
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|lowerGroove
operator|.
name|setTop
argument_list|(
name|handle
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|scaleWidget
argument_list|,
literal|"trough-upper"
argument_list|,
name|upperGroove
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|style
argument_list|,
name|QString
argument_list|(
name|QLS
argument_list|(
literal|"p%0"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|)
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|scaleWidget
argument_list|,
literal|"trough-lower"
argument_list|,
name|lowerGroove
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|style
argument_list|,
name|QString
argument_list|(
name|QLS
argument_list|(
literal|"p%0"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|option
operator|->
name|subControls
operator|&
name|SC_SliderTickmarks
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|darkOutline
argument_list|)
expr_stmt|;
name|int
name|tickSize
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderTickmarkOffset
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|available
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderSpaceAvailable
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|interval
init|=
name|slider
operator|->
name|tickInterval
decl_stmt|;
if|if
condition|(
name|interval
operator|<=
literal|0
condition|)
block|{
name|interval
operator|=
name|slider
operator|->
name|singleStep
expr_stmt|;
if|if
condition|(
name|QStyle
operator|::
name|sliderPositionFromValue
argument_list|(
name|slider
operator|->
name|minimum
argument_list|,
name|slider
operator|->
name|maximum
argument_list|,
name|interval
argument_list|,
name|available
argument_list|)
operator|-
name|QStyle
operator|::
name|sliderPositionFromValue
argument_list|(
name|slider
operator|->
name|minimum
argument_list|,
name|slider
operator|->
name|maximum
argument_list|,
literal|0
argument_list|,
name|available
argument_list|)
operator|<
literal|3
condition|)
name|interval
operator|=
name|slider
operator|->
name|pageStep
expr_stmt|;
block|}
if|if
condition|(
name|interval
operator|<=
literal|0
condition|)
name|interval
operator|=
literal|1
expr_stmt|;
name|int
name|v
init|=
name|slider
operator|->
name|minimum
decl_stmt|;
name|int
name|len
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|,
name|slider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
while|while
condition|(
name|v
operator|<=
name|slider
operator|->
name|maximum
operator|+
literal|1
condition|)
block|{
if|if
condition|(
name|v
operator|==
name|slider
operator|->
name|maximum
operator|+
literal|1
operator|&&
name|interval
operator|==
literal|1
condition|)
break|break;
specifier|const
name|int
name|v_
init|=
name|qMin
argument_list|(
name|v
argument_list|,
name|slider
operator|->
name|maximum
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|sliderPositionFromValue
argument_list|(
name|slider
operator|->
name|minimum
argument_list|,
name|slider
operator|->
name|maximum
argument_list|,
name|v_
argument_list|,
operator|(
name|horizontal
condition|?
name|slider
operator|->
name|rect
operator|.
name|width
argument_list|()
else|:
name|slider
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|)
operator|-
name|len
argument_list|,
name|slider
operator|->
name|upsideDown
argument_list|)
operator|+
name|len
operator|/
literal|2
decl_stmt|;
name|int
name|extra
init|=
literal|2
operator|-
operator|(
operator|(
name|v_
operator|==
name|slider
operator|->
name|minimum
operator|||
name|v_
operator|==
name|slider
operator|->
name|maximum
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|horizontal
condition|)
block|{
if|if
condition|(
name|ticksAbove
condition|)
name|painter
operator|->
name|drawLine
argument_list|(
name|pos
argument_list|,
name|slider
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
name|extra
argument_list|,
name|pos
argument_list|,
name|slider
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
name|tickSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|ticksBelow
condition|)
name|painter
operator|->
name|drawLine
argument_list|(
name|pos
argument_list|,
name|slider
operator|->
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|extra
argument_list|,
name|pos
argument_list|,
name|slider
operator|->
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|tickSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ticksAbove
condition|)
name|painter
operator|->
name|drawLine
argument_list|(
name|slider
operator|->
name|rect
operator|.
name|left
argument_list|()
operator|+
name|extra
argument_list|,
name|pos
argument_list|,
name|slider
operator|->
name|rect
operator|.
name|left
argument_list|()
operator|+
name|tickSize
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|ticksBelow
condition|)
name|painter
operator|->
name|drawLine
argument_list|(
name|slider
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
name|extra
argument_list|,
name|pos
argument_list|,
name|slider
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
name|tickSize
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
comment|// In the case where maximum is max int
name|int
name|nextInterval
init|=
name|v
operator|+
name|interval
decl_stmt|;
if|if
condition|(
name|nextInterval
operator|<
name|v
condition|)
break|break;
name|v
operator|=
name|nextInterval
expr_stmt|;
block|}
block|}
comment|// Draw slider handle
if|if
condition|(
name|option
operator|->
name|subControls
operator|&
name|SC_SliderHandle
condition|)
block|{
name|GtkShadowType
name|shadow
init|=
name|GTK_SHADOW_OUT
decl_stmt|;
name|GtkStateType
name|state
init|=
name|GTK_STATE_NORMAL
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|state
operator|=
name|GTK_STATE_INSENSITIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|&&
name|option
operator|->
name|activeSubControls
operator|&
name|SC_SliderHandle
condition|)
name|state
operator|=
name|GTK_STATE_PRELIGHT
expr_stmt|;
name|bool
name|horizontal
init|=
name|option
operator|->
name|state
operator|&
name|State_Horizontal
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|slider
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|=
name|slider
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|horizontal
condition|)
block|{
name|fropt
operator|.
name|rect
operator|.
name|setTop
argument_list|(
name|handle
operator|.
name|top
argument_list|()
operator|-
literal|3
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|.
name|setBottom
argument_list|(
name|handle
operator|.
name|bottom
argument_list|()
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fropt
operator|.
name|rect
operator|.
name|setLeft
argument_list|(
name|handle
operator|.
name|left
argument_list|()
operator|-
literal|3
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|.
name|setRight
argument_list|(
name|handle
operator|.
name|right
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
block|}
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fropt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|gtkPainter
operator|.
name|paintSlider
argument_list|(
name|scaleWidget
argument_list|,
name|horizontal
condition|?
literal|"hscale"
else|:
literal|"vscale"
argument_list|,
name|handle
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|style
argument_list|,
name|horizontal
condition|?
name|GTK_ORIENTATION_HORIZONTAL
else|:
name|GTK_ORIENTATION_VERTICAL
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setBrush
argument_list|(
name|oldBrush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CC_Dial
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|dial
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
name|QStyleHelper
operator|::
name|drawDial
argument_list|(
name|dial
argument_list|,
name|painter
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
comment|// QT_NO_SLIDER
default|default:
name|QCommonStyle
operator|::
name|drawComplexControl
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|drawControl
name|void
name|QGtkStyle
operator|::
name|drawControl
parameter_list|(
name|ControlElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGtkStyle
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isThemeAvailable
argument_list|()
condition|)
block|{
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|GtkStyle
modifier|*
name|style
init|=
name|d
operator|->
name|gtkStyle
argument_list|()
decl_stmt|;
name|QGtkPainter
name|gtkPainter
argument_list|(
name|painter
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|CE_ProgressBarLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|bar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkProgressBar
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkProgressBar"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|gtkProgressBar
condition|)
return|return;
name|QRect
name|leftRect
decl_stmt|;
name|QRect
name|rect
init|=
name|bar
operator|->
name|rect
decl_stmt|;
name|GtkStyle
modifier|*
name|gtkProgressBarStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkProgressBar
argument_list|)
decl_stmt|;
name|GdkColor
name|gdkText
init|=
name|gtkProgressBarStyle
operator|->
name|fg
index|[
name|GTK_STATE_NORMAL
index|]
decl_stmt|;
name|QColor
name|textColor
init|=
name|QColor
argument_list|(
name|gdkText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|gdkText
operator|=
name|gtkProgressBarStyle
operator|->
name|fg
index|[
name|GTK_STATE_PRELIGHT
index|]
expr_stmt|;
name|QColor
name|alternateTextColor
init|=
name|QColor
argument_list|(
name|gdkText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|bool
name|vertical
init|=
literal|false
decl_stmt|,
name|inverted
init|=
literal|false
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|bar2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|vertical
operator|=
operator|(
name|bar2
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
expr_stmt|;
name|inverted
operator|=
name|bar2
operator|->
name|invertedAppearance
expr_stmt|;
block|}
if|if
condition|(
name|vertical
condition|)
name|rect
operator|=
name|QRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
comment|// flip width and height
specifier|const
name|int
name|progressIndicatorPos
init|=
operator|(
name|bar
operator|->
name|progress
operator|-
name|qreal
argument_list|(
name|bar
operator|->
name|minimum
argument_list|)
operator|)
operator|*
name|rect
operator|.
name|width
argument_list|()
operator|/
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|,
name|qreal
argument_list|(
name|bar
operator|->
name|maximum
argument_list|)
operator|-
name|bar
operator|->
name|minimum
argument_list|)
decl_stmt|;
if|if
condition|(
name|progressIndicatorPos
operator|>=
literal|0
operator|&&
name|progressIndicatorPos
operator|<=
name|rect
operator|.
name|width
argument_list|()
condition|)
name|leftRect
operator|=
name|QRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|progressIndicatorPos
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|vertical
condition|)
name|leftRect
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|width
argument_list|()
operator|-
name|progressIndicatorPos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bool
name|flip
init|=
operator|(
operator|!
name|vertical
operator|&&
operator|(
operator|(
operator|(
name|bar
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
operator|&&
operator|!
name|inverted
operator|)
operator|||
operator|(
operator|(
name|bar
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
operator|)
operator|&&
name|inverted
operator|)
operator|)
operator|)
decl_stmt|;
name|QRegion
name|rightRect
init|=
name|rect
decl_stmt|;
name|rightRect
operator|=
name|rightRect
operator|.
name|subtracted
argument_list|(
name|leftRect
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setClipRegion
argument_list|(
name|rightRect
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|flip
condition|?
name|alternateTextColor
else|:
name|textColor
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawText
argument_list|(
name|rect
argument_list|,
name|bar
operator|->
name|text
argument_list|,
name|QTextOption
argument_list|(
name|Qt
operator|::
name|AlignAbsolute
operator||
name|Qt
operator|::
name|AlignHCenter
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|leftRect
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|flip
condition|?
name|textColor
else|:
name|alternateTextColor
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
name|leftRect
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawText
argument_list|(
name|rect
argument_list|,
name|bar
operator|->
name|text
argument_list|,
name|QTextOption
argument_list|(
name|Qt
operator|::
name|AlignAbsolute
operator||
name|Qt
operator|::
name|AlignHCenter
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|CE_PushButtonLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|ir
init|=
name|button
operator|->
name|rect
decl_stmt|;
name|uint
name|tf
init|=
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
decl_stmt|;
name|QPoint
name|buttonShift
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|buttonShift
operator|=
name|QPoint
argument_list|(
name|pixelMetric
argument_list|(
name|PM_ButtonShiftHorizontal
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_ButtonShiftVertical
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|button
argument_list|,
name|widget
argument_list|)
condition|)
name|tf
operator||=
name|Qt
operator|::
name|TextShowMnemonic
expr_stmt|;
else|else
name|tf
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
if|if
condition|(
operator|!
name|button
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|//Center both icon and text
name|QPoint
name|point
decl_stmt|;
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|button
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|QIcon
operator|::
name|Normal
else|:
name|QIcon
operator|::
name|Disabled
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|QIcon
operator|::
name|Normal
operator|&&
name|button
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|mode
operator|=
name|QIcon
operator|::
name|Active
expr_stmt|;
name|QIcon
operator|::
name|State
name|state
init|=
name|QIcon
operator|::
name|Off
decl_stmt|;
if|if
condition|(
name|button
operator|->
name|state
operator|&
name|State_On
condition|)
name|state
operator|=
name|QIcon
operator|::
name|On
expr_stmt|;
name|QPixmap
name|pixmap
init|=
name|button
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|button
operator|->
name|iconSize
argument_list|,
name|mode
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|pixmap
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|pixmap
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|button
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|w
operator|+=
name|button
operator|->
name|fontMetrics
operator|.
name|boundingRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|tf
argument_list|,
name|button
operator|->
name|text
argument_list|)
operator|.
name|width
argument_list|()
operator|+
literal|4
expr_stmt|;
name|point
operator|=
name|QPoint
argument_list|(
name|ir
operator|.
name|x
argument_list|()
operator|+
name|ir
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|-
name|w
operator|/
literal|2
argument_list|,
name|ir
operator|.
name|y
argument_list|()
operator|+
name|ir
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
name|h
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|button
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|point
operator|.
name|rx
argument_list|()
operator|+=
name|pixmap
operator|.
name|width
argument_list|()
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|visualPos
argument_list|(
name|button
operator|->
name|direction
argument_list|,
name|button
operator|->
name|rect
argument_list|,
name|point
operator|+
name|buttonShift
argument_list|)
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|button
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|ir
operator|.
name|translate
argument_list|(
operator|-
name|point
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|ir
operator|.
name|translate
argument_list|(
name|point
operator|.
name|x
argument_list|()
operator|+
name|pixmap
operator|.
name|width
argument_list|()
operator|+
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// left-align text if there is
if|if
condition|(
operator|!
name|button
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|tf
operator||=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
block|}
else|else
block|{
name|tf
operator||=
name|Qt
operator|::
name|AlignHCenter
expr_stmt|;
block|}
name|ir
operator|.
name|translate
argument_list|(
name|buttonShift
argument_list|)
expr_stmt|;
if|if
condition|(
name|button
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|HasMenu
condition|)
name|ir
operator|=
name|ir
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|pixelMetric
argument_list|(
name|PM_MenuButtonIndicator
argument_list|,
name|button
argument_list|,
name|widget
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkButton"
argument_list|)
decl_stmt|;
name|QPalette
name|pal
init|=
name|button
operator|->
name|palette
decl_stmt|;
name|int
name|labelState
init|=
name|GTK_STATE_INSENSITIVE
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|labelState
operator|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|&&
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
operator|)
operator|)
condition|?
name|GTK_STATE_PRELIGHT
else|:
name|GTK_STATE_NORMAL
expr_stmt|;
name|GdkColor
name|gdkText
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkButton
argument_list|)
operator|->
name|fg
index|[
name|labelState
index|]
decl_stmt|;
name|QColor
name|textColor
init|=
name|QColor
argument_list|(
name|gdkText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|textColor
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|ir
argument_list|,
name|tf
argument_list|,
name|pal
argument_list|,
operator|(
name|button
operator|->
name|state
operator|&
name|State_Enabled
operator|)
argument_list|,
name|button
operator|->
name|text
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CE_RadioButton
case|:
comment|// Fall through
case|case
name|CE_CheckBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|bool
name|isRadio
init|=
operator|(
name|element
operator|==
name|CE_RadioButton
operator|)
decl_stmt|;
comment|// Draw prelight background
name|GtkWidget
modifier|*
name|gtkRadioButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkRadioButton"
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
condition|)
block|{
name|gtkPainter
operator|.
name|paintFlatBox
argument_list|(
name|gtkRadioButton
argument_list|,
literal|"checkbutton"
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|GTK_STATE_PRELIGHT
argument_list|,
name|GTK_SHADOW_ETCHED_OUT
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkRadioButton
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QStyleOptionButton
name|subopt
init|=
operator|*
name|btn
decl_stmt|;
name|subopt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonIndicator
else|:
name|SE_CheckBoxIndicator
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|isRadio
condition|?
name|PE_IndicatorRadioButton
else|:
name|PE_IndicatorCheckBox
argument_list|,
operator|&
name|subopt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|subopt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonContents
else|:
name|SE_CheckBoxContents
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
comment|// Get label text color
name|QPalette
name|pal
init|=
name|subopt
operator|.
name|palette
decl_stmt|;
name|int
name|labelState
init|=
name|GTK_STATE_INSENSITIVE
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|labelState
operator|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|?
name|GTK_STATE_PRELIGHT
else|:
name|GTK_STATE_NORMAL
expr_stmt|;
name|GdkColor
name|gdkText
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkRadioButton
argument_list|)
operator|->
name|fg
index|[
name|labelState
index|]
decl_stmt|;
name|QColor
name|textColor
init|=
name|QColor
argument_list|(
name|gdkText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|textColor
argument_list|)
expr_stmt|;
name|subopt
operator|.
name|palette
operator|=
name|pal
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|isRadio
condition|?
name|CE_RadioButtonLabel
else|:
name|CE_CheckBoxLabel
argument_list|,
operator|&
name|subopt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|btn
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|fropt
decl_stmt|;
name|fropt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|btn
argument_list|)
expr_stmt|;
name|fropt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|isRadio
condition|?
name|SE_RadioButtonFocusRect
else|:
name|SE_CheckBoxFocusRect
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
operator|&
name|fropt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CE_ComboBoxLabel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|editRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|cb
argument_list|,
name|SC_ComboBoxEditField
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|bool
name|appearsAsList
init|=
operator|!
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
name|cb
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
name|editRect
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cb
operator|->
name|currentIcon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|cb
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|QIcon
operator|::
name|Normal
else|:
name|QIcon
operator|::
name|Disabled
decl_stmt|;
name|QPixmap
name|pixmap
init|=
name|cb
operator|->
name|currentIcon
operator|.
name|pixmap
argument_list|(
name|cb
operator|->
name|iconSize
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|QRect
name|iconRect
argument_list|(
name|editRect
argument_list|)
decl_stmt|;
name|iconRect
operator|.
name|setWidth
argument_list|(
name|cb
operator|->
name|iconSize
operator|.
name|width
argument_list|()
operator|+
literal|4
argument_list|)
expr_stmt|;
name|iconRect
operator|=
name|alignedRect
argument_list|(
name|cb
operator|->
name|direction
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|,
name|iconRect
operator|.
name|size
argument_list|()
argument_list|,
name|editRect
argument_list|)
expr_stmt|;
if|if
condition|(
name|cb
operator|->
name|editable
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|iconRect
argument_list|,
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawItemPixmap
argument_list|(
name|painter
argument_list|,
name|iconRect
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|cb
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|editRect
operator|.
name|translate
argument_list|(
operator|-
literal|4
operator|-
name|cb
operator|->
name|iconSize
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|editRect
operator|.
name|translate
argument_list|(
name|cb
operator|->
name|iconSize
operator|.
name|width
argument_list|()
operator|+
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cb
operator|->
name|currentText
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|cb
operator|->
name|editable
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkCombo
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkComboBox"
argument_list|)
decl_stmt|;
name|QPalette
name|pal
init|=
name|cb
operator|->
name|palette
decl_stmt|;
name|int
name|labelState
init|=
name|GTK_STATE_INSENSITIVE
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|)
name|labelState
operator|=
operator|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|&&
operator|!
name|appearsAsList
operator|)
condition|?
name|GTK_STATE_PRELIGHT
else|:
name|GTK_STATE_NORMAL
expr_stmt|;
name|GdkColor
name|gdkText
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkCombo
argument_list|)
operator|->
name|fg
index|[
name|labelState
index|]
decl_stmt|;
name|QColor
name|textColor
init|=
name|QColor
argument_list|(
name|gdkText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|textColor
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|editRect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|visualAlignment
argument_list|(
name|cb
operator|->
name|direction
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
argument_list|,
name|pal
argument_list|,
name|cb
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|cb
operator|->
name|currentText
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
case|case
name|CE_DockWidgetTitle
case|:
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionDockWidget
modifier|*
name|dwOpt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidget
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|QStyleOptionDockWidgetV2
modifier|*
name|v2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidgetV2
operator|*
argument_list|>
argument_list|(
name|dwOpt
argument_list|)
decl_stmt|;
name|bool
name|verticalTitleBar
init|=
name|v2
operator|==
literal|0
condition|?
literal|false
else|:
name|v2
operator|->
name|verticalTitleBar
decl_stmt|;
name|QRect
name|rect
init|=
name|dwOpt
operator|->
name|rect
decl_stmt|;
name|QRect
name|titleRect
init|=
name|subElementRect
argument_list|(
name|SE_DockWidgetTitleBarText
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|.
name|adjusted
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QRect
name|r
init|=
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|verticalTitleBar
condition|)
name|r
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|verticalTitleBar
condition|)
block|{
name|QRect
name|r
init|=
name|rect
decl_stmt|;
name|QSize
name|s
init|=
name|r
operator|.
name|size
argument_list|()
decl_stmt|;
name|s
operator|.
name|transpose
argument_list|()
expr_stmt|;
name|r
operator|.
name|setSize
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|titleRect
operator|=
name|QRect
argument_list|(
name|r
operator|.
name|left
argument_list|()
operator|+
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|titleRect
operator|.
name|bottom
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|titleRect
operator|.
name|left
argument_list|()
operator|-
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|titleRect
operator|.
name|height
argument_list|()
argument_list|,
name|titleRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
operator|-
name|r
operator|.
name|left
argument_list|()
argument_list|,
operator|-
name|r
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|rect
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dwOpt
operator|->
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|titleText
init|=
name|painter
operator|->
name|fontMetrics
argument_list|()
operator|.
name|elidedText
argument_list|(
name|dwOpt
operator|->
name|title
argument_list|,
name|Qt
operator|::
name|ElideRight
argument_list|,
name|titleRect
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|titleRect
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|dwOpt
operator|->
name|palette
argument_list|,
name|dwOpt
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|titleText
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
block|}
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
case|case
name|CE_HeaderSection
case|:
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
comment|// Draws the header in tables.
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|header
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|Q_UNUSED
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkTreeView
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkTreeView"
argument_list|)
decl_stmt|;
comment|// Get the middle column
name|GtkTreeViewColumn
modifier|*
name|column
init|=
name|d
operator|->
name|gtk_tree_view_get_column
argument_list|(
operator|(
name|GtkTreeView
operator|*
operator|)
name|gtkTreeView
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkTreeHeader
init|=
name|column
operator|->
name|button
decl_stmt|;
name|GtkStateType
name|state
init|=
name|gtkPainter
operator|.
name|gtkState
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|GtkShadowType
name|shadow
init|=
name|GTK_SHADOW_OUT
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|shadow
operator|=
name|GTK_SHADOW_IN
expr_stmt|;
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkTreeHeader
argument_list|,
literal|"button"
argument_list|,
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkTreeHeader
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
case|case
name|CE_SizeGrip
case|:
block|{
name|GtkWidget
modifier|*
name|gtkStatusbar
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkStatusbar.GtkFrame"
argument_list|)
decl_stmt|;
name|GtkStyle
modifier|*
name|gtkStatusbarStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkStatusbar
argument_list|)
decl_stmt|;
name|QRect
name|gripRect
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|gtkStatusbarStyle
operator|->
name|xthickness
argument_list|,
operator|-
name|gtkStatusbarStyle
operator|->
name|ythickness
argument_list|)
decl_stmt|;
name|gtkPainter
operator|.
name|paintResizeGrip
argument_list|(
name|gtkStatusbar
argument_list|,
literal|"statusbar"
argument_list|,
name|gripRect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|GTK_SHADOW_OUT
argument_list|,
name|QApplication
operator|::
name|isRightToLeft
argument_list|()
condition|?
name|GDK_WINDOW_EDGE_SOUTH_WEST
else|:
name|GDK_WINDOW_EDGE_SOUTH_EAST
argument_list|,
name|gtkStatusbarStyle
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SIZEGRIP
case|case
name|CE_MenuBarEmptyArea
case|:
block|{
name|GtkWidget
modifier|*
name|gtkMenubar
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkMenuBar"
argument_list|)
decl_stmt|;
name|GdkColor
name|gdkBg
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkMenubar
argument_list|)
operator|->
name|bg
index|[
name|GTK_STATE_NORMAL
index|]
decl_stmt|;
comment|// Theme can depend on transparency
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|QColor
argument_list|(
name|gdkBg
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkBg
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkBg
operator|.
name|blue
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
condition|)
block|{
comment|// See CE_MenuBarItem
name|QRect
name|menuBarRect
init|=
name|widget
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QPixmap
name|pixmap
argument_list|(
name|menuBarRect
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|pmPainter
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|QGtkPainter
name|gtkMenuBarPainter
argument_list|(
operator|&
name|pmPainter
argument_list|)
decl_stmt|;
name|GtkShadowType
name|shadow_type
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkMenubar
argument_list|,
literal|"shadow-type"
argument_list|,
operator|&
name|shadow_type
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|gtkMenuBarPainter
operator|.
name|paintBox
argument_list|(
name|gtkMenubar
argument_list|,
literal|"menubar"
argument_list|,
name|menuBarRect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|shadow_type
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkMenubar
argument_list|)
argument_list|)
expr_stmt|;
name|pmPainter
operator|.
name|end
argument_list|()
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|pixmap
argument_list|,
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CE_MenuBarItem
case|:
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|mbi
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkMenubarItem
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkMenuBar.GtkMenuItem"
argument_list|)
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkMenubar
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkMenuBar"
argument_list|)
decl_stmt|;
name|style
operator|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkMenubarItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
condition|)
block|{
comment|// Since Qt does not currently allow filling the entire background
comment|// we use a hack for this by making a complete menubar each time and
comment|// paint with the correct offset inside it. Pixmap caching should resolve
comment|// most of the performance penalty.
name|QRect
name|menuBarRect
init|=
name|widget
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QPixmap
name|pixmap
argument_list|(
name|menuBarRect
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|pmPainter
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|QGtkPainter
name|menubarPainter
argument_list|(
operator|&
name|pmPainter
argument_list|)
decl_stmt|;
name|GtkShadowType
name|shadow_type
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkMenubar
argument_list|,
literal|"shadow-type"
argument_list|,
operator|&
name|shadow_type
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|GdkColor
name|gdkBg
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkMenubar
argument_list|)
operator|->
name|bg
index|[
name|GTK_STATE_NORMAL
index|]
decl_stmt|;
comment|// Theme can depend on transparency
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|QColor
argument_list|(
name|gdkBg
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkBg
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkBg
operator|.
name|blue
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|menubarPainter
operator|.
name|paintBox
argument_list|(
name|gtkMenubar
argument_list|,
literal|"menubar"
argument_list|,
name|menuBarRect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|shadow_type
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkMenubar
argument_list|)
argument_list|)
expr_stmt|;
name|pmPainter
operator|.
name|end
argument_list|()
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|pixmap
argument_list|,
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
block|}
name|QStyleOptionMenuItem
name|item
init|=
operator|*
name|mbi
decl_stmt|;
name|bool
name|act
init|=
name|mbi
operator|->
name|state
operator|&
name|State_Selected
operator|&&
name|mbi
operator|->
name|state
operator|&
name|State_Sunken
decl_stmt|;
name|bool
name|dis
init|=
operator|!
operator|(
name|mbi
operator|->
name|state
operator|&
name|State_Enabled
operator|)
decl_stmt|;
name|item
operator|.
name|rect
operator|=
name|mbi
operator|->
name|rect
expr_stmt|;
name|GdkColor
name|gdkText
init|=
name|style
operator|->
name|fg
index|[
name|dis
condition|?
name|GTK_STATE_INSENSITIVE
else|:
name|GTK_STATE_NORMAL
index|]
decl_stmt|;
name|GdkColor
name|gdkHText
init|=
name|style
operator|->
name|fg
index|[
name|GTK_STATE_PRELIGHT
index|]
decl_stmt|;
name|QColor
name|normalTextColor
init|=
name|QColor
argument_list|(
name|gdkText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|QColor
name|highlightedTextColor
init|=
name|QColor
argument_list|(
name|gdkHText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkHText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkHText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|item
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|highlightedTextColor
argument_list|)
expr_stmt|;
name|item
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|normalTextColor
argument_list|)
expr_stmt|;
name|item
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|normalTextColor
argument_list|)
expr_stmt|;
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
operator|&
name|item
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|act
condition|)
block|{
name|GtkShadowType
name|shadowType
init|=
name|GTK_SHADOW_NONE
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkMenubarItem
argument_list|,
literal|"selected-shadow-type"
argument_list|,
operator|&
name|shadowType
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkMenubarItem
argument_list|,
literal|"menuitem"
argument_list|,
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|GTK_STATE_PRELIGHT
argument_list|,
name|shadowType
argument_list|,
name|style
argument_list|)
expr_stmt|;
comment|//draw text
name|QPalette
operator|::
name|ColorRole
name|textRole
init|=
name|dis
condition|?
name|QPalette
operator|::
name|Text
else|:
name|QPalette
operator|::
name|HighlightedText
decl_stmt|;
name|uint
name|alignment
init|=
name|Qt
operator|::
name|AlignCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|TextDontClip
operator||
name|Qt
operator|::
name|TextSingleLine
decl_stmt|;
if|if
condition|(
operator|!
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|mbi
argument_list|,
name|widget
argument_list|)
condition|)
name|alignment
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|item
operator|.
name|rect
argument_list|,
name|alignment
argument_list|,
name|item
operator|.
name|palette
argument_list|,
name|mbi
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|mbi
operator|->
name|text
argument_list|,
name|textRole
argument_list|)
expr_stmt|;
block|}
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
case|case
name|CE_Splitter
case|:
block|{
name|GtkWidget
modifier|*
name|gtkWindow
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkWindow"
argument_list|)
decl_stmt|;
comment|// The Murrine Engine currently assumes a widget is passed
name|gtkPainter
operator|.
name|paintHandle
argument_list|(
name|gtkWindow
argument_list|,
literal|"splitter"
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|gtkPainter
operator|.
name|gtkState
argument_list|(
name|option
argument_list|)
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Horizontal
operator|)
condition|?
name|GTK_ORIENTATION_HORIZONTAL
else|:
name|GTK_ORIENTATION_VERTICAL
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
case|case
name|CE_ToolBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolBar
modifier|*
name|toolbar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
comment|// Reserve the beveled appearance only for mainwindow toolbars
if|if
condition|(
operator|!
operator|(
name|widget
operator|&&
name|qobject_cast
argument_list|<
specifier|const
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
operator|)
condition|)
break|break;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
comment|// There is a 1 pixel gap between toolbar lines in some styles (i.e Human)
if|if
condition|(
name|toolbar
operator|->
name|positionWithinLine
operator|!=
name|QStyleOptionToolBar
operator|::
name|End
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkToolbar
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkToolbar"
argument_list|)
decl_stmt|;
name|GtkShadowType
name|shadow_type
init|=
name|GTK_SHADOW_NONE
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkToolbar
argument_list|,
literal|"shadow-type"
argument_list|,
operator|&
name|shadow_type
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkToolbar
argument_list|,
literal|"toolbar"
argument_list|,
name|rect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|shadow_type
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkToolbar
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_TOOLBAR
case|case
name|CE_MenuItem
case|:
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
comment|// Draws one item in a popup menu.
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|menuItem
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|int
name|windowsItemHMargin
init|=
literal|3
decl_stmt|;
comment|// menu item hor text margin
specifier|const
name|int
name|windowsItemVMargin
init|=
literal|26
decl_stmt|;
comment|// menu item ver text margin
name|GtkWidget
modifier|*
name|gtkMenuItem
init|=
name|menuItem
operator|->
name|checked
condition|?
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkMenu.GtkCheckMenuItem"
argument_list|)
else|:
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkMenu.GtkMenuItem"
argument_list|)
decl_stmt|;
name|style
operator|=
name|gtkPainter
operator|.
name|getStyle
argument_list|(
name|gtkMenuItem
argument_list|)
expr_stmt|;
name|QColor
name|shadow
init|=
name|option
operator|->
name|palette
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
if|if
condition|(
name|menuItem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|Separator
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkMenuSeparator
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkMenu.GtkSeparatorMenuItem"
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|shadow
operator|.
name|lighter
argument_list|(
literal|106
argument_list|)
argument_list|)
expr_stmt|;
name|gboolean
name|wide_separators
init|=
literal|0
decl_stmt|;
name|gint
name|separator_height
init|=
literal|0
decl_stmt|;
name|guint
name|horizontal_padding
init|=
literal|3
decl_stmt|;
name|QRect
name|separatorRect
init|=
name|option
operator|->
name|rect
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|gtk_check_version
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkMenuSeparator
argument_list|,
literal|"wide-separators"
argument_list|,
operator|&
name|wide_separators
argument_list|,
literal|"separator-height"
argument_list|,
operator|&
name|separator_height
argument_list|,
literal|"horizontal-padding"
argument_list|,
operator|&
name|horizontal_padding
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
name|GtkStyle
modifier|*
name|gtkMenuSeparatorStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkMenuSeparator
argument_list|)
decl_stmt|;
name|separatorRect
operator|.
name|setHeight
argument_list|(
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|gtkMenuSeparatorStyle
operator|->
name|ythickness
argument_list|)
expr_stmt|;
name|separatorRect
operator|.
name|setWidth
argument_list|(
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
operator|*
operator|(
name|horizontal_padding
operator|+
name|gtkMenuSeparatorStyle
operator|->
name|xthickness
operator|)
argument_list|)
expr_stmt|;
name|separatorRect
operator|.
name|moveCenter
argument_list|(
name|option
operator|->
name|rect
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|wide_separators
condition|)
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkMenuSeparator
argument_list|,
literal|"hseparator"
argument_list|,
name|separatorRect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|GTK_SHADOW_NONE
argument_list|,
name|gtkMenuSeparatorStyle
argument_list|)
expr_stmt|;
else|else
name|gtkPainter
operator|.
name|paintHline
argument_list|(
name|gtkMenuSeparator
argument_list|,
literal|"hseparator"
argument_list|,
name|separatorRect
argument_list|,
name|GTK_STATE_NORMAL
argument_list|,
name|gtkMenuSeparatorStyle
argument_list|,
literal|0
argument_list|,
name|option
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
block|}
name|bool
name|selected
init|=
name|menuItem
operator|->
name|state
operator|&
name|State_Selected
operator|&&
name|menuItem
operator|->
name|state
operator|&
name|State_Enabled
decl_stmt|;
if|if
condition|(
name|selected
condition|)
block|{
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|rect
operator|=
name|option
operator|->
name|rect
expr_stmt|;
endif|#
directive|endif
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkMenuItem
argument_list|,
literal|"menuitem"
argument_list|,
name|rect
argument_list|,
name|GTK_STATE_PRELIGHT
argument_list|,
name|GTK_SHADOW_OUT
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
name|bool
name|checkable
init|=
name|menuItem
operator|->
name|checkType
operator|!=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
decl_stmt|;
name|bool
name|checked
init|=
name|menuItem
operator|->
name|checked
decl_stmt|;
name|bool
name|enabled
init|=
name|menuItem
operator|->
name|state
operator|&
name|State_Enabled
decl_stmt|;
name|bool
name|ignoreCheckMark
init|=
literal|false
decl_stmt|;
name|gint
name|checkSize
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkMenu.GtkCheckMenuItem"
argument_list|)
argument_list|,
literal|"indicator-size"
argument_list|,
operator|&
name|checkSize
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|int
name|checkcol
init|=
name|qMax
argument_list|(
name|menuItem
operator|->
name|maxIconWidth
argument_list|,
name|qMax
argument_list|(
literal|20
argument_list|,
name|checkSize
argument_list|)
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|ignoreCheckMark
operator|=
literal|true
expr_stmt|;
comment|// Ignore the checkmarks provided by the QComboMenuDelegate
endif|#
directive|endif
if|if
condition|(
operator|!
name|ignoreCheckMark
condition|)
block|{
comment|// Check
name|QRect
name|checkRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
operator|+
literal|7
argument_list|,
name|option
operator|->
name|rect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|checkSize
operator|/
literal|2
operator|+
literal|1
argument_list|,
name|checkSize
argument_list|,
name|checkSize
argument_list|)
decl_stmt|;
name|checkRect
operator|=
name|visualRect
argument_list|(
name|menuItem
operator|->
name|direction
argument_list|,
name|menuItem
operator|->
name|rect
argument_list|,
name|checkRect
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkable
operator|&&
name|menuItem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// Some themes such as aero-clone draw slightly outside the paint rect
name|int
name|spacing
init|=
literal|1
decl_stmt|;
comment|// ### Consider using gtkCheckBox : "indicator-spacing" instead
if|if
condition|(
name|menuItem
operator|->
name|checkType
operator|&
name|QStyleOptionMenuItem
operator|::
name|Exclusive
condition|)
block|{
comment|// Radio button
name|GtkShadowType
name|shadow
init|=
name|GTK_SHADOW_OUT
decl_stmt|;
name|GtkStateType
name|state
init|=
name|gtkPainter
operator|.
name|gtkState
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|selected
condition|)
name|state
operator|=
name|GTK_STATE_PRELIGHT
expr_stmt|;
if|if
condition|(
name|checked
condition|)
name|shadow
operator|=
name|GTK_SHADOW_IN
expr_stmt|;
name|gtkPainter
operator|.
name|setClipRect
argument_list|(
name|checkRect
operator|.
name|adjusted
argument_list|(
operator|-
name|spacing
argument_list|,
operator|-
name|spacing
argument_list|,
name|spacing
argument_list|,
name|spacing
argument_list|)
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintOption
argument_list|(
name|gtkMenuItem
argument_list|,
name|checkRect
operator|.
name|translated
argument_list|(
operator|-
name|spacing
argument_list|,
operator|-
name|spacing
argument_list|)
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|style
argument_list|,
name|QLS
argument_list|(
literal|"option"
argument_list|)
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|setClipRect
argument_list|(
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Check box
if|if
condition|(
name|menuItem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|GtkShadowType
name|shadow
init|=
name|GTK_SHADOW_OUT
decl_stmt|;
name|GtkStateType
name|state
init|=
name|gtkPainter
operator|.
name|gtkState
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|selected
condition|)
name|state
operator|=
name|GTK_STATE_PRELIGHT
expr_stmt|;
if|if
condition|(
name|checked
condition|)
name|shadow
operator|=
name|GTK_SHADOW_IN
expr_stmt|;
name|gtkPainter
operator|.
name|setClipRect
argument_list|(
name|checkRect
operator|.
name|adjusted
argument_list|(
operator|-
name|spacing
argument_list|,
operator|-
name|spacing
argument_list|,
operator|-
name|spacing
argument_list|,
operator|-
name|spacing
argument_list|)
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintCheckbox
argument_list|(
name|gtkMenuItem
argument_list|,
name|checkRect
operator|.
name|translated
argument_list|(
operator|-
name|spacing
argument_list|,
operator|-
name|spacing
argument_list|)
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|style
argument_list|,
name|QLS
argument_list|(
literal|"check"
argument_list|)
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|setClipRect
argument_list|(
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// Ignore checkmark
if|if
condition|(
name|menuItem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|checkcol
operator|=
literal|0
expr_stmt|;
else|else
name|checkcol
operator|=
name|menuItem
operator|->
name|maxIconWidth
expr_stmt|;
block|}
name|bool
name|dis
init|=
operator|!
operator|(
name|menuItem
operator|->
name|state
operator|&
name|State_Enabled
operator|)
decl_stmt|;
name|bool
name|act
init|=
name|menuItem
operator|->
name|state
operator|&
name|State_Selected
decl_stmt|;
specifier|const
name|QStyleOption
modifier|*
name|opt
init|=
name|option
decl_stmt|;
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|menuitem
init|=
name|menuItem
decl_stmt|;
name|QPainter
modifier|*
name|p
init|=
name|painter
decl_stmt|;
name|QRect
name|vCheckRect
init|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|3
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|checkcol
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|menuItem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|dis
condition|?
name|QIcon
operator|::
name|Disabled
else|:
name|QIcon
operator|::
name|Normal
decl_stmt|;
if|if
condition|(
name|act
operator|&&
operator|!
name|dis
condition|)
name|mode
operator|=
name|QIcon
operator|::
name|Active
expr_stmt|;
name|QPixmap
name|pixmap
decl_stmt|;
name|int
name|smallIconSize
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QSize
name|iconSize
argument_list|(
name|smallIconSize
argument_list|,
name|smallIconSize
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
if|if
condition|(
specifier|const
name|QComboBox
modifier|*
name|combo
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|iconSize
operator|=
name|combo
operator|->
name|iconSize
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
if|if
condition|(
name|checked
condition|)
name|pixmap
operator|=
name|menuItem
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|iconSize
argument_list|,
name|mode
argument_list|,
name|QIcon
operator|::
name|On
argument_list|)
expr_stmt|;
else|else
name|pixmap
operator|=
name|menuItem
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|iconSize
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|int
name|pixw
init|=
name|pixmap
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|pixh
init|=
name|pixmap
operator|.
name|height
argument_list|()
decl_stmt|;
name|QRect
name|pmr
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pixw
argument_list|,
name|pixh
argument_list|)
decl_stmt|;
name|pmr
operator|.
name|moveCenter
argument_list|(
name|vCheckRect
operator|.
name|center
argument_list|()
operator|-
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|menuItem
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ignoreCheckMark
operator|&&
name|checkable
operator|&&
name|checked
condition|)
block|{
name|QStyleOption
name|opt
init|=
operator|*
name|option
decl_stmt|;
if|if
condition|(
name|act
condition|)
block|{
name|QColor
name|activeColor
init|=
name|mergedColors
argument_list|(
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|option
operator|->
name|palette
operator|.
name|highlight
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
decl_stmt|;
name|opt
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|activeColor
argument_list|)
expr_stmt|;
block|}
name|opt
operator|.
name|state
operator||=
name|State_Sunken
expr_stmt|;
name|opt
operator|.
name|rect
operator|=
name|vCheckRect
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_PanelButtonCommand
argument_list|,
operator|&
name|opt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|drawPixmap
argument_list|(
name|pmr
operator|.
name|topLeft
argument_list|()
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
name|GdkColor
name|gdkText
init|=
name|style
operator|->
name|fg
index|[
name|GTK_STATE_NORMAL
index|]
decl_stmt|;
name|GdkColor
name|gdkDText
init|=
name|style
operator|->
name|fg
index|[
name|GTK_STATE_INSENSITIVE
index|]
decl_stmt|;
name|GdkColor
name|gdkHText
init|=
name|style
operator|->
name|fg
index|[
name|GTK_STATE_PRELIGHT
index|]
decl_stmt|;
name|uint
name|resolve_mask
init|=
name|option
operator|->
name|palette
operator|.
name|resolve
argument_list|()
decl_stmt|;
name|QColor
name|textColor
init|=
name|QColor
argument_list|(
name|gdkText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|QColor
name|disabledTextColor
init|=
name|QColor
argument_list|(
name|gdkDText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkDText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkDText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolve_mask
operator|&
operator|(
literal|1
operator|<<
name|QPalette
operator|::
name|ButtonText
operator|)
condition|)
block|{
name|textColor
operator|=
name|option
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
name|disabledTextColor
operator|=
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|)
operator|.
name|color
argument_list|()
expr_stmt|;
block|}
name|QColor
name|highlightedTextColor
init|=
name|QColor
argument_list|(
name|gdkHText
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkHText
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkHText
operator|.
name|blue
operator|>>
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolve_mask
operator|&
operator|(
literal|1
operator|<<
name|QPalette
operator|::
name|HighlightedText
operator|)
condition|)
block|{
name|highlightedTextColor
operator|=
name|option
operator|->
name|palette
operator|.
name|highlightedText
argument_list|()
operator|.
name|color
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|selected
condition|)
name|painter
operator|->
name|setPen
argument_list|(
name|highlightedTextColor
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|int
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
name|menuitem
operator|->
name|rect
operator|.
name|getRect
argument_list|(
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
name|int
name|tab
init|=
name|menuitem
operator|->
name|tabWidth
decl_stmt|;
name|int
name|xm
init|=
name|QGtkStylePrivate
operator|::
name|menuItemFrame
operator|+
name|checkcol
operator|+
name|windowsItemHMargin
decl_stmt|;
name|int
name|xpos
init|=
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|xm
operator|+
literal|1
decl_stmt|;
name|QRect
name|textRect
argument_list|(
name|xpos
argument_list|,
name|y
operator|+
name|windowsItemVMargin
argument_list|,
name|w
operator|-
name|xm
operator|-
name|QGtkStylePrivate
operator|::
name|menuRightBorder
operator|-
name|tab
operator|+
literal|1
argument_list|,
name|h
operator|-
literal|2
operator|*
name|windowsItemVMargin
argument_list|)
decl_stmt|;
name|QRect
name|vTextRect
init|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|textRect
argument_list|)
decl_stmt|;
name|QString
name|s
init|=
name|menuitem
operator|->
name|text
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Draw text
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|int
name|t
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|text_flags
init|=
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|TextDontClip
operator||
name|Qt
operator|::
name|TextSingleLine
decl_stmt|;
if|if
condition|(
operator|!
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|menuitem
argument_list|,
name|widget
argument_list|)
condition|)
name|text_flags
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
comment|// Draw shortcut right aligned
name|text_flags
operator||=
name|Qt
operator|::
name|AlignRight
expr_stmt|;
if|if
condition|(
name|t
operator|>=
literal|0
condition|)
block|{
name|int
name|rightMargin
init|=
literal|12
decl_stmt|;
comment|// Hardcode for now
name|QRect
name|vShortcutRect
init|=
name|visualRect
argument_list|(
name|opt
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|textRect
operator|.
name|topRight
argument_list|()
argument_list|,
name|QPoint
argument_list|(
name|menuitem
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
name|rightMargin
argument_list|,
name|textRect
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dis
condition|)
name|p
operator|->
name|setPen
argument_list|(
name|disabledTextColor
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawText
argument_list|(
name|vShortcutRect
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|mid
argument_list|(
name|t
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|text_flags
operator|&=
operator|~
name|Qt
operator|::
name|AlignRight
expr_stmt|;
name|text_flags
operator||=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
name|QFont
name|font
init|=
name|menuitem
operator|->
name|font
decl_stmt|;
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|DefaultItem
condition|)
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|p
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
name|dis
condition|)
name|p
operator|->
name|setPen
argument_list|(
name|disabledTextColor
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawText
argument_list|(
name|vTextRect
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
comment|// Arrow
if|if
condition|(
name|menuItem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|SubMenu
condition|)
block|{
comment|// draw sub menu arrow
name|QFontMetrics
name|fm
argument_list|(
name|menuitem
operator|->
name|font
argument_list|)
decl_stmt|;
name|int
name|arrow_size
init|=
name|fm
operator|.
name|ascent
argument_list|()
operator|+
name|fm
operator|.
name|descent
argument_list|()
operator|-
literal|2
operator|*
name|style
operator|->
name|ythickness
decl_stmt|;
name|gfloat
name|arrow_scaling
init|=
literal|0.8
decl_stmt|;
name|int
name|extra
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|gtk_check_version
argument_list|(
literal|2
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|)
condition|)
block|{
comment|// "arrow-scaling" is actually hardcoded and fails on hardy (see gtk+-2.12/gtkmenuitem.c)
comment|// though the current documentation states otherwise
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkMenuItem
argument_list|,
literal|"arrow-scaling"
argument_list|,
operator|&
name|arrow_scaling
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
comment|// in versions< 2.16 ythickness was previously subtracted from the arrow_size
name|extra
operator|=
literal|2
operator|*
name|style
operator|->
name|ythickness
expr_stmt|;
block|}
name|int
name|horizontal_padding
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkMenuItem
argument_list|,
literal|"horizontal-padding"
argument_list|,
operator|&
name|horizontal_padding
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
specifier|const
name|int
name|dim
init|=
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|arrow_size
operator|*
name|arrow_scaling
argument_list|)
operator|+
name|extra
decl_stmt|;
name|int
name|xpos
init|=
name|menuItem
operator|->
name|rect
operator|.
name|left
argument_list|()
operator|+
name|menuItem
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|horizontal_padding
operator|-
name|dim
decl_stmt|;
name|QRect
name|vSubMenuRect
init|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|menuItem
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|xpos
argument_list|,
name|menuItem
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
name|menuItem
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
name|dim
operator|/
literal|2
argument_list|,
name|dim
argument_list|,
name|dim
argument_list|)
argument_list|)
decl_stmt|;
name|GtkStateType
name|state
init|=
name|enabled
condition|?
operator|(
name|act
condition|?
name|GTK_STATE_PRELIGHT
else|:
name|GTK_STATE_NORMAL
operator|)
else|:
name|GTK_STATE_INSENSITIVE
decl_stmt|;
name|GtkShadowType
name|shadowType
init|=
operator|(
name|state
operator|==
name|GTK_STATE_PRELIGHT
operator|)
condition|?
name|GTK_SHADOW_OUT
else|:
name|GTK_SHADOW_IN
decl_stmt|;
name|gtkPainter
operator|.
name|paintArrow
argument_list|(
name|gtkMenuItem
argument_list|,
literal|"menuitem"
argument_list|,
name|vSubMenuRect
argument_list|,
name|QApplication
operator|::
name|isRightToLeft
argument_list|()
condition|?
name|GTK_ARROW_LEFT
else|:
name|GTK_ARROW_RIGHT
argument_list|,
name|state
argument_list|,
name|shadowType
argument_list|,
literal|false
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
break|break;
case|case
name|CE_PushButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkButton"
argument_list|)
decl_stmt|;
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|CE_PushButtonBevel
argument_list|,
name|btn
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QStyleOptionButton
name|subopt
init|=
operator|*
name|btn
decl_stmt|;
name|subopt
operator|.
name|rect
operator|=
name|subElementRect
argument_list|(
name|SE_PushButtonContents
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|gint
name|interiorFocus
init|=
literal|true
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkButton
argument_list|,
literal|"interior-focus"
argument_list|,
operator|&
name|interiorFocus
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|GtkStyle
modifier|*
name|gtkButtonStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkButton
argument_list|)
decl_stmt|;
name|int
name|xt
init|=
name|interiorFocus
condition|?
name|gtkButtonStyle
operator|->
name|xthickness
else|:
literal|0
decl_stmt|;
name|int
name|yt
init|=
name|interiorFocus
condition|?
name|gtkButtonStyle
operator|->
name|ythickness
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|Flat
operator|&&
name|btn
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
comment|// The normal button focus rect does not work well for flat buttons in Clearlooks
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameFocusRect
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|btn
operator|->
name|state
operator|&
name|State_HasFocus
condition|)
name|gtkPainter
operator|.
name|paintFocus
argument_list|(
name|gtkButton
argument_list|,
literal|"button"
argument_list|,
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|xt
argument_list|,
name|yt
argument_list|,
operator|-
name|xt
argument_list|,
operator|-
name|yt
argument_list|)
argument_list|,
name|btn
operator|->
name|state
operator|&
name|State_Sunken
condition|?
name|GTK_STATE_ACTIVE
else|:
name|GTK_STATE_NORMAL
argument_list|,
name|gtkButtonStyle
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|CE_PushButtonLabel
argument_list|,
operator|&
name|subopt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
case|case
name|CE_TabBarTabShape
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkNotebook
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkNotebook"
argument_list|)
decl_stmt|;
name|style
operator|=
name|gtkPainter
operator|.
name|getStyle
argument_list|(
name|gtkNotebook
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|GtkShadowType
name|shadow
init|=
name|GTK_SHADOW_OUT
decl_stmt|;
name|GtkStateType
name|state
init|=
name|GTK_STATE_ACTIVE
decl_stmt|;
if|if
condition|(
name|tab
operator|->
name|state
operator|&
name|State_Selected
condition|)
name|state
operator|=
name|GTK_STATE_NORMAL
expr_stmt|;
name|bool
name|selected
init|=
operator|(
name|tab
operator|->
name|state
operator|&
name|State_Selected
operator|)
decl_stmt|;
name|bool
name|first
init|=
literal|false
decl_stmt|,
name|last
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|widget
condition|)
block|{
comment|// This is most accurate and avoids resizing tabs while moving
name|first
operator|=
name|tab
operator|->
name|rect
operator|.
name|left
argument_list|()
operator|==
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|left
argument_list|()
expr_stmt|;
name|last
operator|=
name|tab
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|==
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|right
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
block|{
name|bool
name|tmp
init|=
name|first
decl_stmt|;
name|first
operator|=
name|last
expr_stmt|;
name|last
operator|=
name|tmp
expr_stmt|;
block|}
name|int
name|topIndent
init|=
literal|3
decl_stmt|;
name|int
name|bottomIndent
init|=
literal|1
decl_stmt|;
name|int
name|tabOverlap
init|=
literal|1
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|tab
operator|->
name|shape
condition|)
block|{
case|case
name|QTabBar
operator|::
name|RoundedNorth
case|:
if|if
condition|(
operator|!
name|selected
condition|)
name|rect
operator|.
name|adjust
argument_list|(
name|first
condition|?
literal|0
else|:
operator|-
name|tabOverlap
argument_list|,
name|topIndent
argument_list|,
name|last
condition|?
literal|0
else|:
name|tabOverlap
argument_list|,
operator|-
name|bottomIndent
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintExtention
argument_list|(
name|gtkNotebook
argument_list|,
literal|"tab"
argument_list|,
name|rect
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|GTK_POS_BOTTOM
argument_list|,
name|style
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedSouth
case|:
if|if
condition|(
operator|!
name|selected
condition|)
name|rect
operator|.
name|adjust
argument_list|(
name|first
condition|?
literal|0
else|:
operator|-
name|tabOverlap
argument_list|,
literal|0
argument_list|,
name|last
condition|?
literal|0
else|:
name|tabOverlap
argument_list|,
operator|-
name|topIndent
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintExtention
argument_list|(
name|gtkNotebook
argument_list|,
literal|"tab"
argument_list|,
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|GTK_POS_TOP
argument_list|,
name|style
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedWest
case|:
if|if
condition|(
operator|!
name|selected
condition|)
name|rect
operator|.
name|adjust
argument_list|(
name|topIndent
argument_list|,
literal|0
argument_list|,
operator|-
name|bottomIndent
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintExtention
argument_list|(
name|gtkNotebook
argument_list|,
literal|"tab"
argument_list|,
name|rect
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|GTK_POS_RIGHT
argument_list|,
name|style
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabBar
operator|::
name|RoundedEast
case|:
if|if
condition|(
operator|!
name|selected
condition|)
name|rect
operator|.
name|adjust
argument_list|(
name|bottomIndent
argument_list|,
literal|0
argument_list|,
operator|-
name|topIndent
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintExtention
argument_list|(
name|gtkNotebook
argument_list|,
literal|"tab"
argument_list|,
name|rect
argument_list|,
name|state
argument_list|,
name|shadow
argument_list|,
name|GTK_POS_LEFT
argument_list|,
name|style
argument_list|)
expr_stmt|;
break|break;
default|default:
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_TABBAR
case|case
name|CE_ProgressBarGroove
case|:
if|if
condition|(
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|bar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|Q_UNUSED
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkProgressBar
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkProgressBar"
argument_list|)
decl_stmt|;
name|GtkStateType
name|state
init|=
name|gtkPainter
operator|.
name|gtkState
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkProgressBar
argument_list|,
literal|"trough"
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkProgressBar
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CE_ProgressBarContents
case|:
if|if
condition|(
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|bar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkStateType
name|state
init|=
name|option
operator|->
name|state
operator|&
name|State_Enabled
condition|?
name|GTK_STATE_NORMAL
else|:
name|GTK_STATE_INSENSITIVE
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkProgressBar
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkProgressBar"
argument_list|)
decl_stmt|;
name|style
operator|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkProgressBar
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkProgressBar
argument_list|,
literal|"trough"
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|state
argument_list|,
name|GTK_SHADOW_IN
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|int
name|xt
init|=
name|style
operator|->
name|xthickness
decl_stmt|;
name|int
name|yt
init|=
name|style
operator|->
name|ythickness
decl_stmt|;
name|QRect
name|rect
init|=
name|bar
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|xt
argument_list|,
name|yt
argument_list|,
operator|-
name|xt
argument_list|,
operator|-
name|yt
argument_list|)
decl_stmt|;
name|bool
name|vertical
init|=
literal|false
decl_stmt|;
name|bool
name|inverted
init|=
literal|false
decl_stmt|;
name|bool
name|indeterminate
init|=
operator|(
name|bar
operator|->
name|minimum
operator|==
literal|0
operator|&&
name|bar
operator|->
name|maximum
operator|==
literal|0
operator|)
decl_stmt|;
comment|// Get extra style options if version 2
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|bar2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|vertical
operator|=
operator|(
name|bar2
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
expr_stmt|;
name|inverted
operator|=
name|bar2
operator|->
name|invertedAppearance
expr_stmt|;
block|}
comment|// If the orientation is vertical, we use a transform to rotate
comment|// the progress bar 90 degrees clockwise.  This way we can use the
comment|// same rendering code for both orientations.
if|if
condition|(
name|vertical
condition|)
block|{
name|rect
operator|.
name|translate
argument_list|(
name|xt
argument_list|,
operator|-
name|yt
operator|*
literal|2
argument_list|)
expr_stmt|;
name|rect
operator|=
name|QRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
comment|// Flip width and height
name|QTransform
name|m
init|=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|rect
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|m
operator|.
name|rotate
argument_list|(
literal|90.0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setTransform
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|int
name|maxWidth
init|=
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|minWidth
init|=
literal|4
decl_stmt|;
name|qint64
name|progress
init|=
operator|(
name|qint64
operator|)
name|qMax
argument_list|(
name|bar
operator|->
name|progress
argument_list|,
name|bar
operator|->
name|minimum
argument_list|)
decl_stmt|;
comment|// Workaround for bug in QProgressBar
name|double
name|vc6_workaround
init|=
operator|(
operator|(
name|progress
operator|-
name|qint64
argument_list|(
name|bar
operator|->
name|minimum
argument_list|)
operator|)
operator|/
name|double
argument_list|(
name|qint64
argument_list|(
name|bar
operator|->
name|maximum
argument_list|)
operator|-
name|qint64
argument_list|(
name|bar
operator|->
name|minimum
argument_list|)
argument_list|)
operator|)
operator|*
name|maxWidth
decl_stmt|;
name|int
name|progressBarWidth
init|=
operator|(
name|int
argument_list|(
name|vc6_workaround
argument_list|)
operator|>
name|minWidth
operator|)
condition|?
name|int
argument_list|(
name|vc6_workaround
argument_list|)
else|:
name|minWidth
decl_stmt|;
name|int
name|width
init|=
name|indeterminate
condition|?
name|maxWidth
else|:
name|progressBarWidth
decl_stmt|;
name|bool
name|reverse
init|=
operator|(
operator|!
name|vertical
operator|&&
operator|(
name|bar
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
operator|)
operator|||
name|vertical
decl_stmt|;
if|if
condition|(
name|inverted
condition|)
name|reverse
operator|=
operator|!
name|reverse
expr_stmt|;
name|int
name|maximum
init|=
literal|2
decl_stmt|;
name|int
name|fakePos
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bar
operator|->
name|minimum
operator|==
name|bar
operator|->
name|maximum
condition|)
name|maximum
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|bar
operator|->
name|progress
operator|==
name|bar
operator|->
name|maximum
condition|)
name|fakePos
operator|=
name|maximum
expr_stmt|;
elseif|else
if|if
condition|(
name|bar
operator|->
name|progress
operator|>
name|bar
operator|->
name|minimum
condition|)
name|fakePos
operator|=
name|maximum
operator|-
literal|1
expr_stmt|;
name|d
operator|->
name|gtk_progress_configure
argument_list|(
operator|(
name|GtkProgress
operator|*
operator|)
name|gtkProgressBar
argument_list|,
name|fakePos
argument_list|,
literal|0
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|QRect
name|progressBar
decl_stmt|;
if|if
condition|(
operator|!
name|indeterminate
condition|)
block|{
if|if
condition|(
operator|!
name|reverse
condition|)
name|progressBar
operator|.
name|setRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|width
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|progressBar
operator|.
name|setRect
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|width
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|width
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|stopAnimation
argument_list|(
name|option
operator|->
name|styleObject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_D
argument_list|(
specifier|const
name|QGtkStyle
argument_list|)
expr_stmt|;
name|int
name|slideWidth
init|=
operator|(
operator|(
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|4
operator|)
operator|*
literal|2
operator|)
operator|/
literal|3
decl_stmt|;
name|int
name|step
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QProgressStyleAnimation
modifier|*
name|animation
init|=
name|qobject_cast
argument_list|<
name|QProgressStyleAnimation
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|animation
argument_list|(
name|option
operator|->
name|styleObject
argument_list|)
argument_list|)
condition|)
name|step
operator|=
name|animation
operator|->
name|progressStep
argument_list|(
name|slideWidth
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|startAnimation
argument_list|(
operator|new
name|QProgressStyleAnimation
argument_list|(
name|d
operator|->
name|animationFps
argument_list|,
name|option
operator|->
name|styleObject
argument_list|)
argument_list|)
expr_stmt|;
name|progressBar
operator|.
name|setRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
name|step
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|slideWidth
operator|/
literal|2
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QString
name|key
init|=
name|QString
argument_list|(
name|QLS
argument_list|(
literal|"%0"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|fakePos
argument_list|)
decl_stmt|;
if|if
condition|(
name|inverted
condition|)
block|{
name|key
operator|+=
name|QLatin1String
argument_list|(
literal|"inv"
argument_list|)
expr_stmt|;
name|gtkPainter
operator|.
name|setFlipHorizontal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|gtkPainter
operator|.
name|paintBox
argument_list|(
name|gtkProgressBar
argument_list|,
literal|"bar"
argument_list|,
name|progressBar
argument_list|,
name|GTK_STATE_SELECTED
argument_list|,
name|GTK_SHADOW_OUT
argument_list|,
name|style
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|QCommonStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|subControlRect
name|QRect
name|QGtkStyle
operator|::
name|subControlRect
parameter_list|(
name|ComplexControl
name|control
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|SubControl
name|subControl
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGtkStyle
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|QCommonStyle
operator|::
name|subControlRect
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|subControl
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isThemeAvailable
argument_list|()
condition|)
return|return
name|QCommonStyle
operator|::
name|subControlRect
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|subControl
argument_list|,
name|widget
argument_list|)
return|;
switch|switch
condition|(
name|control
condition|)
block|{
case|case
name|CC_ScrollBar
case|:
break|break;
case|case
name|CC_Slider
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|tickSize
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderTickmarkOffset
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_SliderHandle
case|:
block|{
if|if
condition|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|rect
operator|.
name|setHeight
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderThickness
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setWidth
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|centerY
init|=
name|slider
operator|->
name|rect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|tickPosition
operator|&
name|QSlider
operator|::
name|TicksAbove
condition|)
name|centerY
operator|+=
name|tickSize
expr_stmt|;
if|if
condition|(
name|slider
operator|->
name|tickPosition
operator|&
name|QSlider
operator|::
name|TicksBelow
condition|)
name|centerY
operator|-=
name|tickSize
expr_stmt|;
name|rect
operator|.
name|moveTop
argument_list|(
name|centerY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rect
operator|.
name|setWidth
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderThickness
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setHeight
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SliderLength
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|centerX
init|=
name|slider
operator|->
name|rect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|tickPosition
operator|&
name|QSlider
operator|::
name|TicksAbove
condition|)
name|centerX
operator|+=
name|tickSize
expr_stmt|;
if|if
condition|(
name|slider
operator|->
name|tickPosition
operator|&
name|QSlider
operator|::
name|TicksBelow
condition|)
name|centerX
operator|-=
name|tickSize
expr_stmt|;
name|rect
operator|.
name|moveLeft
argument_list|(
name|centerX
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|SC_SliderGroove
case|:
block|{
name|QPoint
name|grooveCenter
init|=
name|slider
operator|->
name|rect
operator|.
name|center
argument_list|()
decl_stmt|;
if|if
condition|(
name|slider
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|rect
operator|.
name|setHeight
argument_list|(
literal|7
argument_list|)
expr_stmt|;
if|if
condition|(
name|slider
operator|->
name|tickPosition
operator|&
name|QSlider
operator|::
name|TicksAbove
condition|)
name|grooveCenter
operator|.
name|ry
argument_list|()
operator|+=
name|tickSize
expr_stmt|;
if|if
condition|(
name|slider
operator|->
name|tickPosition
operator|&
name|QSlider
operator|::
name|TicksBelow
condition|)
name|grooveCenter
operator|.
name|ry
argument_list|()
operator|-=
name|tickSize
expr_stmt|;
block|}
else|else
block|{
name|rect
operator|.
name|setWidth
argument_list|(
literal|7
argument_list|)
expr_stmt|;
if|if
condition|(
name|slider
operator|->
name|tickPosition
operator|&
name|QSlider
operator|::
name|TicksAbove
condition|)
name|grooveCenter
operator|.
name|rx
argument_list|()
operator|+=
name|tickSize
expr_stmt|;
if|if
condition|(
name|slider
operator|->
name|tickPosition
operator|&
name|QSlider
operator|::
name|TicksBelow
condition|)
name|grooveCenter
operator|.
name|rx
argument_list|()
operator|-=
name|tickSize
expr_stmt|;
block|}
name|rect
operator|.
name|moveCenter
argument_list|(
name|grooveCenter
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
case|case
name|CC_GroupBox
case|:
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|rect
operator|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
name|groupBoxTopMargin
argument_list|,
literal|0
argument_list|,
operator|-
name|groupBoxBottomMargin
argument_list|)
expr_stmt|;
name|int
name|topMargin
init|=
literal|0
decl_stmt|;
name|int
name|topHeight
init|=
literal|0
decl_stmt|;
name|topHeight
operator|=
literal|10
expr_stmt|;
name|QRect
name|frameRect
init|=
name|rect
decl_stmt|;
name|frameRect
operator|.
name|setTop
argument_list|(
name|topMargin
argument_list|)
expr_stmt|;
if|if
condition|(
name|subControl
operator|==
name|SC_GroupBoxFrame
condition|)
return|return
name|rect
return|;
elseif|else
if|if
condition|(
name|subControl
operator|==
name|SC_GroupBoxContents
condition|)
block|{
name|int
name|margin
init|=
literal|0
decl_stmt|;
name|int
name|leftMarginExtension
init|=
literal|8
decl_stmt|;
return|return
name|frameRect
operator|.
name|adjusted
argument_list|(
name|leftMarginExtension
operator|+
name|margin
argument_list|,
name|margin
operator|+
name|topHeight
operator|+
name|groupBoxTitleMargin
argument_list|,
operator|-
name|margin
argument_list|,
operator|-
name|margin
argument_list|)
return|;
block|}
if|if
condition|(
specifier|const
name|QGroupBox
modifier|*
name|groupBoxWidget
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QGroupBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
comment|//Prepare metrics for a bold font
name|QFont
name|font
init|=
name|widget
operator|->
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QFontMetrics
name|fontMetrics
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QSize
name|textRect
init|=
name|fontMetrics
operator|.
name|boundingRect
argument_list|(
name|groupBoxWidget
operator|->
name|title
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|+
name|QSize
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|int
name|indicatorWidth
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_IndicatorWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|indicatorHeight
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_IndicatorHeight
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|subControl
operator|==
name|SC_GroupBoxCheckBox
condition|)
block|{
name|rect
operator|.
name|setWidth
argument_list|(
name|indicatorWidth
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setHeight
argument_list|(
name|indicatorHeight
argument_list|)
expr_stmt|;
name|rect
operator|.
name|moveTop
argument_list|(
operator|(
name|textRect
operator|.
name|height
argument_list|()
operator|-
name|indicatorHeight
operator|)
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subControl
operator|==
name|SC_GroupBoxLabel
condition|)
block|{
if|if
condition|(
name|groupBoxWidget
operator|->
name|isCheckable
argument_list|()
condition|)
name|rect
operator|.
name|adjust
argument_list|(
name|indicatorWidth
operator|+
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setSize
argument_list|(
name|textRect
argument_list|)
expr_stmt|;
block|}
name|rect
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rect
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinbox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkSpinButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkSpinButton"
argument_list|)
decl_stmt|;
name|int
name|center
init|=
name|spinbox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
decl_stmt|;
name|GtkStyle
modifier|*
name|gtkSpinButtonStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkSpinButton
argument_list|)
decl_stmt|;
name|int
name|xt
init|=
name|spinbox
operator|->
name|frame
condition|?
name|gtkSpinButtonStyle
operator|->
name|xthickness
else|:
literal|0
decl_stmt|;
name|int
name|yt
init|=
name|spinbox
operator|->
name|frame
condition|?
name|gtkSpinButtonStyle
operator|->
name|ythickness
else|:
literal|0
decl_stmt|;
name|int
name|y
init|=
name|yt
decl_stmt|;
name|QSize
name|bs
decl_stmt|;
name|bs
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
literal|8
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|-
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|bs
operator|.
name|setWidth
argument_list|(
name|d
operator|->
name|getSpinboxArrowSize
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|x
decl_stmt|,
name|lx
decl_stmt|,
name|rx
decl_stmt|;
name|x
operator|=
name|spinbox
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|y
operator|-
name|bs
operator|.
name|width
argument_list|()
operator|+
literal|2
expr_stmt|;
name|lx
operator|=
name|xt
expr_stmt|;
name|rx
operator|=
name|x
operator|-
name|xt
expr_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_SpinBoxUp
case|:
if|if
condition|(
name|spinbox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|)
return|return
name|QRect
argument_list|()
return|;
name|rect
operator|=
name|QRect
argument_list|(
name|x
argument_list|,
name|xt
argument_list|,
name|bs
operator|.
name|width
argument_list|()
argument_list|,
name|center
operator|-
name|yt
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_SpinBoxDown
case|:
if|if
condition|(
name|spinbox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|)
return|return
name|QRect
argument_list|()
return|;
name|rect
operator|=
name|QRect
argument_list|(
name|x
argument_list|,
name|center
argument_list|,
name|bs
operator|.
name|width
argument_list|()
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|center
operator|-
name|yt
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_SpinBoxEditField
case|:
if|if
condition|(
name|spinbox
operator|->
name|buttonSymbols
operator|==
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|)
name|rect
operator|=
name|QRect
argument_list|(
name|lx
argument_list|,
name|yt
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|2
operator|*
name|xt
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|yt
argument_list|)
expr_stmt|;
else|else
name|rect
operator|=
name|QRect
argument_list|(
name|lx
argument_list|,
name|yt
argument_list|,
name|rx
operator|-
name|qMax
argument_list|(
name|xt
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|spinbox
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
name|yt
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_SpinBoxFrame
case|:
name|rect
operator|=
name|spinbox
operator|->
name|rect
expr_stmt|;
default|default:
break|break;
block|}
name|rect
operator|=
name|visualRect
argument_list|(
name|spinbox
operator|->
name|direction
argument_list|,
name|spinbox
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// Qt_NO_SPINBOX
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CC_TitleBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTitleBar
modifier|*
name|tb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTitleBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|SubControl
name|sc
init|=
name|subControl
decl_stmt|;
name|QRect
modifier|&
name|ret
init|=
name|rect
decl_stmt|;
specifier|const
name|int
name|indent
init|=
literal|3
decl_stmt|;
specifier|const
name|int
name|controlTopMargin
init|=
literal|3
decl_stmt|;
specifier|const
name|int
name|controlBottomMargin
init|=
literal|3
decl_stmt|;
specifier|const
name|int
name|controlWidthMargin
init|=
literal|2
decl_stmt|;
specifier|const
name|int
name|controlHeight
init|=
name|tb
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|controlTopMargin
operator|-
name|controlBottomMargin
decl_stmt|;
specifier|const
name|int
name|delta
init|=
name|controlHeight
operator|+
name|controlWidthMargin
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|bool
name|isMinimized
init|=
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMinimized
decl_stmt|;
name|bool
name|isMaximized
init|=
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMaximized
decl_stmt|;
switch|switch
condition|(
name|sc
condition|)
block|{
case|case
name|SC_TitleBarLabel
case|:
if|if
condition|(
name|tb
operator|->
name|titleBarFlags
operator|&
operator|(
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator|)
condition|)
block|{
name|ret
operator|=
name|tb
operator|->
name|rect
expr_stmt|;
if|if
condition|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|ret
operator|.
name|adjust
argument_list|(
name|delta
argument_list|,
literal|0
argument_list|,
operator|-
name|delta
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
name|ret
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|delta
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
name|ret
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|delta
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
condition|)
name|ret
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|delta
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|ret
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|delta
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SC_TitleBarContextHelpButton
case|:
if|if
condition|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
case|case
name|SC_TitleBarMinButton
case|:
if|if
condition|(
operator|!
name|isMinimized
operator|&&
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
elseif|else
if|if
condition|(
name|sc
operator|==
name|SC_TitleBarMinButton
condition|)
break|break;
case|case
name|SC_TitleBarNormalButton
case|:
if|if
condition|(
name|isMinimized
operator|&&
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
elseif|else
if|if
condition|(
name|isMaximized
operator|&&
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
elseif|else
if|if
condition|(
name|sc
operator|==
name|SC_TitleBarNormalButton
condition|)
break|break;
case|case
name|SC_TitleBarMaxButton
case|:
if|if
condition|(
operator|!
name|isMaximized
operator|&&
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
elseif|else
if|if
condition|(
name|sc
operator|==
name|SC_TitleBarMaxButton
condition|)
break|break;
case|case
name|SC_TitleBarShadeButton
case|:
if|if
condition|(
operator|!
name|isMinimized
operator|&&
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
operator|)
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
elseif|else
if|if
condition|(
name|sc
operator|==
name|SC_TitleBarShadeButton
condition|)
break|break;
case|case
name|SC_TitleBarUnshadeButton
case|:
if|if
condition|(
name|isMinimized
operator|&&
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
operator|)
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
elseif|else
if|if
condition|(
name|sc
operator|==
name|SC_TitleBarUnshadeButton
condition|)
break|break;
case|case
name|SC_TitleBarCloseButton
case|:
if|if
condition|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|offset
operator|+=
name|delta
expr_stmt|;
elseif|else
if|if
condition|(
name|sc
operator|==
name|SC_TitleBarCloseButton
condition|)
break|break;
name|ret
operator|.
name|setRect
argument_list|(
name|tb
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
name|indent
operator|-
name|offset
argument_list|,
name|tb
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
name|controlTopMargin
argument_list|,
name|controlHeight
argument_list|,
name|controlHeight
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_TitleBarSysMenu
case|:
if|if
condition|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
block|{
name|ret
operator|.
name|setRect
argument_list|(
name|tb
operator|->
name|rect
operator|.
name|left
argument_list|()
operator|+
name|controlWidthMargin
operator|+
name|indent
argument_list|,
name|tb
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
name|controlTopMargin
argument_list|,
name|controlHeight
argument_list|,
name|controlHeight
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
name|ret
operator|=
name|visualRect
argument_list|(
name|tb
operator|->
name|direction
argument_list|,
name|tb
operator|->
name|rect
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|box
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
comment|// We employ the gtk widget to position arrows and separators for us
name|GtkWidget
modifier|*
name|gtkCombo
init|=
name|box
operator|->
name|editable
condition|?
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkComboBoxEntry"
argument_list|)
else|:
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkComboBox"
argument_list|)
decl_stmt|;
name|d
operator|->
name|gtk_widget_set_direction
argument_list|(
name|gtkCombo
argument_list|,
operator|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
condition|?
name|GTK_TEXT_DIR_RTL
else|:
name|GTK_TEXT_DIR_LTR
argument_list|)
expr_stmt|;
name|GtkAllocation
name|geometry
init|=
block|{
literal|0
block|,
literal|0
block|,
name|qMax
argument_list|(
literal|0
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|)
block|,
name|qMax
argument_list|(
literal|0
argument_list|,
argument|option->rect.height()
argument_list|)
block|}
decl_stmt|;
name|d
operator|->
name|gtk_widget_size_allocate
argument_list|(
name|gtkCombo
argument_list|,
operator|&
name|geometry
argument_list|)
expr_stmt|;
name|int
name|appears_as_list
init|=
operator|!
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QHashableLatin1Literal
name|arrowPath
argument_list|(
literal|"GtkComboBoxEntry.GtkToggleButton"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|box
operator|->
name|editable
condition|)
block|{
if|if
condition|(
name|appears_as_list
condition|)
name|arrowPath
operator|=
literal|"GtkComboBox.GtkToggleButton"
expr_stmt|;
else|else
name|arrowPath
operator|=
literal|"GtkComboBox.GtkToggleButton.GtkHBox.GtkArrow"
expr_stmt|;
block|}
name|GtkWidget
modifier|*
name|arrowWidget
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
name|arrowPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|arrowWidget
condition|)
return|return
name|QCommonStyle
operator|::
name|subControlRect
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|subControl
argument_list|,
name|widget
argument_list|)
return|;
name|GtkAllocation
name|allocation
decl_stmt|;
name|d
operator|->
name|gtk_widget_get_allocation
argument_list|(
name|arrowWidget
argument_list|,
operator|&
name|allocation
argument_list|)
expr_stmt|;
name|QRect
name|buttonRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
operator|+
name|allocation
operator|.
name|x
argument_list|,
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
name|allocation
operator|.
name|y
argument_list|,
name|allocation
operator|.
name|width
argument_list|,
name|allocation
operator|.
name|height
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_ComboBoxArrow
case|:
comment|// Note: this indicates the arrowbutton for editable combos
name|rect
operator|=
name|buttonRect
expr_stmt|;
break|break;
case|case
name|SC_ComboBoxEditField
case|:
block|{
name|rect
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|int
name|xMargin
init|=
name|box
operator|->
name|editable
condition|?
literal|1
else|:
literal|4
decl_stmt|,
name|yMargin
init|=
literal|2
decl_stmt|;
name|GtkStyle
modifier|*
name|gtkComboStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkCombo
argument_list|)
decl_stmt|;
name|rect
operator|.
name|setRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
operator|+
name|gtkComboStyle
operator|->
name|xthickness
operator|+
name|xMargin
argument_list|,
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
name|gtkComboStyle
operator|->
name|ythickness
operator|+
name|yMargin
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|buttonRect
operator|.
name|width
argument_list|()
operator|-
literal|2
operator|*
operator|(
name|gtkComboStyle
operator|->
name|xthickness
operator|+
name|xMargin
operator|)
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
literal|2
operator|*
operator|(
name|gtkComboStyle
operator|->
name|ythickness
operator|+
name|yMargin
operator|)
argument_list|)
expr_stmt|;
name|rect
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
default|default:
break|break;
block|}
return|return
name|rect
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|sizeFromContents
name|QSize
name|QGtkStyle
operator|::
name|sizeFromContents
parameter_list|(
name|ContentsType
name|type
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGtkStyle
argument_list|)
expr_stmt|;
name|QSize
name|newSize
init|=
name|QCommonStyle
operator|::
name|sizeFromContents
argument_list|(
name|type
argument_list|,
name|option
argument_list|,
name|size
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isThemeAvailable
argument_list|()
condition|)
return|return
name|newSize
return|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CT_GroupBox
case|:
comment|// Since we use a bold font we have to recalculate base width
if|if
condition|(
specifier|const
name|QGroupBox
modifier|*
name|gb
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QGroupBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|QFont
name|font
init|=
name|gb
operator|->
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QFontMetrics
name|metrics
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|int
name|baseWidth
init|=
name|metrics
operator|.
name|width
argument_list|(
name|gb
operator|->
name|title
argument_list|()
argument_list|)
operator|+
name|metrics
operator|.
name|width
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|gb
operator|->
name|isCheckable
argument_list|()
condition|)
block|{
name|baseWidth
operator|+=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_IndicatorWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|baseWidth
operator|+=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_CheckBoxLabelSpacing
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
name|newSize
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|baseWidth
argument_list|,
name|newSize
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newSize
operator|+=
name|QSize
argument_list|(
literal|4
argument_list|,
literal|1
operator|+
name|groupBoxBottomMargin
operator|+
name|groupBoxTopMargin
operator|+
name|groupBoxTitleMargin
argument_list|)
expr_stmt|;
comment|// Add some space below the groupbox
break|break;
case|case
name|CT_ToolButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolButton
modifier|*
name|toolbutton
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkToolButton.GtkButton"
argument_list|)
decl_stmt|;
name|GtkStyle
modifier|*
name|gtkButtonStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkButton
argument_list|)
decl_stmt|;
name|newSize
operator|=
name|size
operator|+
name|QSize
argument_list|(
literal|2
operator|*
name|gtkButtonStyle
operator|->
name|xthickness
argument_list|,
literal|2
operator|+
literal|2
operator|*
name|gtkButtonStyle
operator|->
name|ythickness
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
block|{
name|QSize
name|minSize
argument_list|(
literal|0
argument_list|,
literal|25
argument_list|)
decl_stmt|;
if|if
condition|(
name|toolbutton
operator|->
name|toolButtonStyle
operator|!=
name|Qt
operator|::
name|ToolButtonTextOnly
condition|)
name|minSize
operator|=
name|toolbutton
operator|->
name|iconSize
operator|+
name|QSize
argument_list|(
literal|12
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|newSize
operator|=
name|newSize
operator|.
name|expandedTo
argument_list|(
name|minSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toolbutton
operator|->
name|features
operator|&
name|QStyleOptionToolButton
operator|::
name|HasMenu
condition|)
name|newSize
operator|+=
name|QSize
argument_list|(
literal|6
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CT_SpinBox
case|:
comment|// QSpinBox does some nasty things that depends on CT_LineEdit
name|newSize
operator|=
name|size
operator|+
name|QSize
argument_list|(
literal|0
argument_list|,
operator|-
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkSpinButton"
argument_list|)
argument_list|)
operator|->
name|ythickness
operator|*
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_RadioButton
case|:
case|case
name|CT_CheckBox
case|:
name|newSize
operator|+=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_PushButton
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|btn
operator|->
name|icon
operator|.
name|isNull
argument_list|()
operator|&&
name|btn
operator|->
name|iconSize
operator|.
name|height
argument_list|()
operator|>
literal|16
condition|)
name|newSize
operator|-=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// From cleanlooksstyle
name|newSize
operator|+=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkButton"
argument_list|)
decl_stmt|;
name|gint
name|focusPadding
decl_stmt|,
name|focusWidth
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkButton
argument_list|,
literal|"focus-padding"
argument_list|,
operator|&
name|focusPadding
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkButton
argument_list|,
literal|"focus-line-width"
argument_list|,
operator|&
name|focusWidth
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|newSize
operator|=
name|size
expr_stmt|;
name|GtkStyle
modifier|*
name|gtkButtonStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkButton
argument_list|)
decl_stmt|;
name|newSize
operator|+=
name|QSize
argument_list|(
literal|2
operator|*
name|gtkButtonStyle
operator|->
name|xthickness
operator|+
literal|4
argument_list|,
literal|2
operator|*
name|gtkButtonStyle
operator|->
name|ythickness
argument_list|)
expr_stmt|;
name|newSize
operator|+=
name|QSize
argument_list|(
literal|2
operator|*
operator|(
name|focusWidth
operator|+
name|focusPadding
operator|+
literal|2
operator|)
argument_list|,
literal|2
operator|*
operator|(
name|focusWidth
operator|+
name|focusPadding
operator|)
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkButtonBox
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkHButtonBox"
argument_list|)
decl_stmt|;
name|gint
name|minWidth
init|=
literal|85
decl_stmt|,
name|minHeight
init|=
literal|0
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkButtonBox
argument_list|,
literal|"child-min-width"
argument_list|,
operator|&
name|minWidth
argument_list|,
literal|"child-min-height"
argument_list|,
operator|&
name|minHeight
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|btn
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
operator|&&
name|newSize
operator|.
name|width
argument_list|()
operator|<
name|minWidth
condition|)
name|newSize
operator|.
name|setWidth
argument_list|(
name|minWidth
argument_list|)
expr_stmt|;
if|if
condition|(
name|newSize
operator|.
name|height
argument_list|()
operator|<
name|minHeight
condition|)
name|newSize
operator|.
name|setHeight
argument_list|(
name|minHeight
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CT_Slider
case|:
block|{
name|GtkWidget
modifier|*
name|gtkSlider
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkHScale"
argument_list|)
decl_stmt|;
name|GtkStyle
modifier|*
name|gtkSliderStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkSlider
argument_list|)
decl_stmt|;
name|newSize
operator|=
name|size
operator|+
name|QSize
argument_list|(
literal|2
operator|*
name|gtkSliderStyle
operator|->
name|xthickness
argument_list|,
literal|2
operator|*
name|gtkSliderStyle
operator|->
name|ythickness
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CT_LineEdit
case|:
block|{
name|GtkWidget
modifier|*
name|gtkEntry
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkEntry"
argument_list|)
decl_stmt|;
name|GtkStyle
modifier|*
name|gtkEntryStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkEntry
argument_list|)
decl_stmt|;
name|newSize
operator|=
name|size
operator|+
name|QSize
argument_list|(
literal|2
operator|*
name|gtkEntryStyle
operator|->
name|xthickness
argument_list|,
literal|2
operator|+
literal|2
operator|*
name|gtkEntryStyle
operator|->
name|ythickness
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CT_ItemViewItem
case|:
name|newSize
operator|+=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|combo
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkCombo
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkComboBox"
argument_list|)
decl_stmt|;
name|QRect
name|arrowButtonRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|combo
argument_list|,
name|SC_ComboBoxArrow
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|GtkStyle
modifier|*
name|gtkComboStyle
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkCombo
argument_list|)
decl_stmt|;
name|newSize
operator|=
name|size
operator|+
name|QSize
argument_list|(
literal|12
operator|+
name|arrowButtonRect
operator|.
name|width
argument_list|()
operator|+
literal|2
operator|*
name|gtkComboStyle
operator|->
name|xthickness
argument_list|,
literal|4
operator|+
literal|2
operator|*
name|gtkComboStyle
operator|->
name|ythickness
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|widget
operator|&&
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
operator|)
condition|)
name|newSize
operator|+=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CT_TabBarTab
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTab
modifier|*
name|tab
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTab
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|tab
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|newSize
operator|+=
name|QSize
argument_list|(
literal|6
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|newSize
operator|+=
name|QSize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_MenuBarItem
case|:
name|newSize
operator|+=
name|QSize
argument_list|(
name|QGtkStylePrivate
operator|::
name|menuItemHMargin
operator|*
literal|4
argument_list|,
name|QGtkStylePrivate
operator|::
name|menuItemVMargin
operator|*
literal|2
operator|+
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_SizeGrip
case|:
name|newSize
operator|+=
name|QSize
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
case|case
name|CT_MdiControls
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComplex
modifier|*
name|styleOpt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComplex
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|width
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|styleOpt
operator|->
name|subControls
operator|&
name|SC_MdiMinButton
condition|)
name|width
operator|+=
literal|19
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|styleOpt
operator|->
name|subControls
operator|&
name|SC_MdiNormalButton
condition|)
name|width
operator|+=
literal|19
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|styleOpt
operator|->
name|subControls
operator|&
name|SC_MdiCloseButton
condition|)
name|width
operator|+=
literal|19
operator|+
literal|1
expr_stmt|;
name|newSize
operator|=
name|QSize
argument_list|(
name|width
argument_list|,
literal|19
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newSize
operator|=
name|QSize
argument_list|(
literal|60
argument_list|,
literal|19
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CT_MenuItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|menuItem
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|w
init|=
name|newSize
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|maxpmw
init|=
name|menuItem
operator|->
name|maxIconWidth
decl_stmt|;
name|int
name|tabSpacing
init|=
literal|20
decl_stmt|;
if|if
condition|(
name|menuItem
operator|->
name|text
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
condition|)
name|w
operator|+=
name|tabSpacing
expr_stmt|;
elseif|else
if|if
condition|(
name|menuItem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|SubMenu
condition|)
name|w
operator|+=
literal|2
operator|*
name|QGtkStylePrivate
operator|::
name|menuArrowHMargin
expr_stmt|;
elseif|else
if|if
condition|(
name|menuItem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|DefaultItem
condition|)
block|{
comment|// adjust the font and add the difference in size.
comment|// it would be better if the font could be adjusted in the initStyleOption qmenu func!!
name|QFontMetrics
name|fm
argument_list|(
name|menuItem
operator|->
name|font
argument_list|)
decl_stmt|;
name|QFont
name|fontBold
init|=
name|menuItem
operator|->
name|font
decl_stmt|;
name|fontBold
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QFontMetrics
name|fmBold
argument_list|(
name|fontBold
argument_list|)
decl_stmt|;
name|w
operator|+=
name|fmBold
operator|.
name|width
argument_list|(
name|menuItem
operator|->
name|text
argument_list|)
operator|-
name|fm
operator|.
name|width
argument_list|(
name|menuItem
operator|->
name|text
argument_list|)
expr_stmt|;
block|}
name|int
name|checkcol
init|=
name|qMax
argument_list|<
name|int
argument_list|>
argument_list|(
name|maxpmw
argument_list|,
name|QGtkStylePrivate
operator|::
name|menuCheckMarkWidth
argument_list|)
decl_stmt|;
comment|// Windows always shows a check column
name|w
operator|+=
name|checkcol
expr_stmt|;
name|w
operator|+=
name|int
argument_list|(
name|QGtkStylePrivate
operator|::
name|menuRightBorder
argument_list|)
operator|+
literal|10
expr_stmt|;
name|newSize
operator|.
name|setWidth
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|int
name|textMargin
init|=
literal|8
decl_stmt|;
if|if
condition|(
name|menuItem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|Separator
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkMenuSeparator
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkMenu.GtkSeparatorMenuItem"
argument_list|)
decl_stmt|;
name|GtkRequisition
name|sizeReq
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|d
operator|->
name|gtk_widget_size_request
argument_list|(
name|gtkMenuSeparator
argument_list|,
operator|&
name|sizeReq
argument_list|)
expr_stmt|;
name|newSize
operator|=
name|QSize
argument_list|(
name|newSize
operator|.
name|width
argument_list|()
argument_list|,
name|sizeReq
operator|.
name|height
argument_list|)
expr_stmt|;
break|break;
block|}
name|GtkWidget
modifier|*
name|gtkMenuItem
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkMenu.GtkCheckMenuItem"
argument_list|)
decl_stmt|;
name|GtkStyle
modifier|*
name|style
init|=
name|d
operator|->
name|gtk_widget_get_style
argument_list|(
name|gtkMenuItem
argument_list|)
decl_stmt|;
comment|// Note we get the perfect height for the default font since we
comment|// set a fake text label on the gtkMenuItem
comment|// But if custom fonts are used on the widget we need a minimum size
name|GtkRequisition
name|sizeReq
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|d
operator|->
name|gtk_widget_size_request
argument_list|(
name|gtkMenuItem
argument_list|,
operator|&
name|sizeReq
argument_list|)
expr_stmt|;
name|newSize
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|newSize
operator|.
name|height
argument_list|()
operator|-
literal|4
argument_list|,
name|sizeReq
operator|.
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|newSize
operator|+=
name|QSize
argument_list|(
name|textMargin
operator|+
name|style
operator|->
name|xthickness
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gint
name|checkSize
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkMenuItem
argument_list|,
literal|"indicator-size"
argument_list|,
operator|&
name|checkSize
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|newSize
operator|.
name|setWidth
argument_list|(
name|newSize
operator|.
name|width
argument_list|()
operator|+
name|qMax
argument_list|(
literal|0
argument_list|,
name|checkSize
operator|-
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|newSize
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|standardPixmap
name|QPixmap
name|QGtkStyle
operator|::
name|standardPixmap
parameter_list|(
name|StandardPixmap
name|sp
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGtkStyle
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isThemeAvailable
argument_list|()
condition|)
return|return
name|QCommonStyle
operator|::
name|standardPixmap
argument_list|(
name|sp
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
name|QPixmap
name|pixmap
decl_stmt|;
switch|switch
condition|(
name|sp
condition|)
block|{
case|case
name|SP_TitleBarNormalButton
case|:
block|{
name|QImage
name|restoreButton
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
name|dock_widget_restore_xpm
argument_list|)
decl_stmt|;
name|QColor
name|alphaCorner
init|=
name|restoreButton
operator|.
name|color
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|alphaCorner
operator|.
name|setAlpha
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|restoreButton
operator|.
name|setColor
argument_list|(
literal|2
argument_list|,
name|alphaCorner
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|alphaCorner
operator|.
name|setAlpha
argument_list|(
literal|180
argument_list|)
expr_stmt|;
name|restoreButton
operator|.
name|setColor
argument_list|(
literal|4
argument_list|,
name|alphaCorner
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|restoreButton
argument_list|)
return|;
block|}
break|break;
case|case
name|SP_TitleBarCloseButton
case|:
comment|// Fall through
case|case
name|SP_DockWidgetCloseButton
case|:
block|{
name|QImage
name|closeButton
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
name|dock_widget_close_xpm
argument_list|)
decl_stmt|;
name|QColor
name|alphaCorner
init|=
name|closeButton
operator|.
name|color
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|alphaCorner
operator|.
name|setAlpha
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|closeButton
operator|.
name|setColor
argument_list|(
literal|2
argument_list|,
name|alphaCorner
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|closeButton
argument_list|)
return|;
block|}
break|break;
case|case
name|SP_DialogDiscardButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_DELETE
argument_list|)
return|;
case|case
name|SP_DialogOkButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_OK
argument_list|)
return|;
case|case
name|SP_DialogCancelButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_CANCEL
argument_list|)
return|;
case|case
name|SP_DialogYesButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_YES
argument_list|)
return|;
case|case
name|SP_DialogNoButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_NO
argument_list|)
return|;
case|case
name|SP_DialogOpenButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_OPEN
argument_list|)
return|;
case|case
name|SP_DialogCloseButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_CLOSE
argument_list|)
return|;
case|case
name|SP_DialogApplyButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_APPLY
argument_list|)
return|;
case|case
name|SP_DialogSaveButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_SAVE
argument_list|)
return|;
case|case
name|SP_MessageBoxWarning
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_DIALOG_WARNING
argument_list|,
name|GTK_ICON_SIZE_DIALOG
argument_list|)
return|;
case|case
name|SP_MessageBoxQuestion
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_DIALOG_QUESTION
argument_list|,
name|GTK_ICON_SIZE_DIALOG
argument_list|)
return|;
case|case
name|SP_MessageBoxInformation
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_DIALOG_INFO
argument_list|,
name|GTK_ICON_SIZE_DIALOG
argument_list|)
return|;
case|case
name|SP_MessageBoxCritical
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_DIALOG_ERROR
argument_list|,
name|GTK_ICON_SIZE_DIALOG
argument_list|)
return|;
default|default:
return|return
name|QCommonStyle
operator|::
name|standardPixmap
argument_list|(
name|sp
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
return|return
name|pixmap
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|standardIcon
name|QIcon
name|QGtkStyle
operator|::
name|standardIcon
parameter_list|(
name|StandardPixmap
name|standardIcon
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGtkStyle
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isThemeAvailable
argument_list|()
condition|)
return|return
name|QCommonStyle
operator|::
name|standardIcon
argument_list|(
name|standardIcon
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
switch|switch
condition|(
name|standardIcon
condition|)
block|{
case|case
name|SP_DialogDiscardButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_DELETE
argument_list|)
return|;
case|case
name|SP_DialogOkButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_OK
argument_list|)
return|;
case|case
name|SP_DialogCancelButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_CANCEL
argument_list|)
return|;
case|case
name|SP_DialogYesButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_YES
argument_list|)
return|;
case|case
name|SP_DialogNoButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_NO
argument_list|)
return|;
case|case
name|SP_DialogOpenButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_OPEN
argument_list|)
return|;
case|case
name|SP_DialogCloseButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_CLOSE
argument_list|)
return|;
case|case
name|SP_DialogApplyButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_APPLY
argument_list|)
return|;
case|case
name|SP_DialogSaveButton
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_SAVE
argument_list|)
return|;
case|case
name|SP_MessageBoxWarning
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_DIALOG_WARNING
argument_list|,
name|GTK_ICON_SIZE_DIALOG
argument_list|)
return|;
case|case
name|SP_MessageBoxQuestion
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_DIALOG_QUESTION
argument_list|,
name|GTK_ICON_SIZE_DIALOG
argument_list|)
return|;
case|case
name|SP_MessageBoxInformation
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_DIALOG_INFO
argument_list|,
name|GTK_ICON_SIZE_DIALOG
argument_list|)
return|;
case|case
name|SP_MessageBoxCritical
case|:
return|return
name|QGtkPainter
operator|::
name|getIcon
argument_list|(
name|GTK_STOCK_DIALOG_ERROR
argument_list|,
name|GTK_ICON_SIZE_DIALOG
argument_list|)
return|;
default|default:
return|return
name|QCommonStyle
operator|::
name|standardIcon
argument_list|(
name|standardIcon
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|subElementRect
name|QRect
name|QGtkStyle
operator|::
name|subElementRect
parameter_list|(
name|SubElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGtkStyle
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isThemeAvailable
argument_list|()
condition|)
return|return
name|r
return|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|SE_PushButtonFocusRect
case|:
name|r
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_DockWidgetTitleBarText
case|:
block|{
specifier|const
name|QStyleOptionDockWidgetV2
modifier|*
name|v2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidgetV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|bool
name|verticalTitleBar
init|=
name|v2
operator|==
literal|0
condition|?
literal|false
else|:
name|v2
operator|->
name|verticalTitleBar
decl_stmt|;
if|if
condition|(
name|verticalTitleBar
condition|)
block|{
name|r
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|r
operator|.
name|adjust
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|r
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|SE_ProgressBarLabel
case|:
case|case
name|SE_ProgressBarContents
case|:
case|case
name|SE_ProgressBarGroove
case|:
return|return
name|option
operator|->
name|rect
return|;
case|case
name|SE_PushButtonContents
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|gtk_check_version
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|GtkWidget
modifier|*
name|gtkButton
init|=
name|d
operator|->
name|gtkWidget
argument_list|(
literal|"GtkButton"
argument_list|)
decl_stmt|;
name|GtkBorder
modifier|*
name|border
init|=
literal|0
decl_stmt|;
name|d
operator|->
name|gtk_widget_style_get
argument_list|(
name|gtkButton
argument_list|,
literal|"inner-border"
argument_list|,
operator|&
name|border
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|border
condition|)
block|{
name|r
operator|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|border
operator|->
name|left
argument_list|,
name|border
operator|->
name|top
argument_list|,
operator|-
name|border
operator|->
name|right
argument_list|,
operator|-
name|border
operator|->
name|bottom
argument_list|)
expr_stmt|;
name|d
operator|->
name|gtk_border_free
argument_list|(
name|border
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|r
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|itemPixmapRect
name|QRect
name|QGtkStyle
operator|::
name|itemPixmapRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|,
name|int
name|flags
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
specifier|const
block|{
return|return
name|QCommonStyle
operator|::
name|itemPixmapRect
argument_list|(
name|r
argument_list|,
name|flags
argument_list|,
name|pixmap
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|drawItemPixmap
name|void
name|QGtkStyle
operator|::
name|drawItemPixmap
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|alignment
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
specifier|const
block|{
name|QCommonStyle
operator|::
name|drawItemPixmap
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|alignment
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|hitTestComplexControl
name|QStyle
operator|::
name|SubControl
name|QGtkStyle
operator|::
name|hitTestComplexControl
parameter_list|(
name|ComplexControl
name|cc
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|opt
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
return|return
name|QCommonStyle
operator|::
name|hitTestComplexControl
argument_list|(
name|cc
argument_list|,
name|opt
argument_list|,
name|pt
argument_list|,
name|w
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|generatedIconPixmap
name|QPixmap
name|QGtkStyle
operator|::
name|generatedIconPixmap
parameter_list|(
name|QIcon
operator|::
name|Mode
name|iconMode
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|)
specifier|const
block|{
return|return
name|QCommonStyle
operator|::
name|generatedIconPixmap
argument_list|(
name|iconMode
argument_list|,
name|pixmap
argument_list|,
name|opt
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|drawItemText
name|void
name|QGtkStyle
operator|::
name|drawItemText
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|alignment
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|,
name|bool
name|enabled
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QPalette
operator|::
name|ColorRole
name|textRole
parameter_list|)
specifier|const
block|{
return|return
name|QCommonStyle
operator|::
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|alignment
argument_list|,
name|pal
argument_list|,
name|enabled
argument_list|,
name|text
argument_list|,
name|textRole
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//!defined(QT_NO_STYLE_QGTK)
end_comment
end_unit
