begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsvistastyle_p.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsvistastyle_p_p.h"
end_include
begin_include
include|#
directive|include
file|<qscreen.h>
end_include
begin_include
include|#
directive|include
file|<qwindow.h>
end_include
begin_include
include|#
directive|include
file|<private/qstyleanimation_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qstylehelper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformnativeinterface.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_PLUGIN
argument_list|)
end_if
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|windowsItemFrame
specifier|static
specifier|const
name|int
name|windowsItemFrame
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsItemFrame
comment|// menu item frame width
end_comment
begin_decl_stmt
DECL|variable|windowsItemHMargin
specifier|static
specifier|const
name|int
name|windowsItemHMargin
init|=
literal|3
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsItemHMargin
comment|// menu item hor text margin
end_comment
begin_decl_stmt
DECL|variable|windowsItemVMargin
specifier|static
specifier|const
name|int
name|windowsItemVMargin
init|=
literal|4
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsItemVMargin
comment|// menu item ver text margin
end_comment
begin_decl_stmt
DECL|variable|windowsArrowHMargin
specifier|static
specifier|const
name|int
name|windowsArrowHMargin
init|=
literal|6
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsArrowHMargin
comment|// arrow horizontal margin
end_comment
begin_decl_stmt
DECL|variable|windowsRightBorder
specifier|static
specifier|const
name|int
name|windowsRightBorder
init|=
literal|15
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|windowsRightBorder
comment|// right border on windows
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|TMT_CONTENTMARGINS
end_ifndef
begin_define
DECL|macro|TMT_CONTENTMARGINS
define|#
directive|define
name|TMT_CONTENTMARGINS
value|3602
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|TMT_SIZINGMARGINS
end_ifndef
begin_define
DECL|macro|TMT_SIZINGMARGINS
define|#
directive|define
name|TMT_SIZINGMARGINS
value|3601
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|LISS_NORMAL
end_ifndef
begin_define
DECL|macro|LISS_NORMAL
define|#
directive|define
name|LISS_NORMAL
value|1
end_define
begin_define
DECL|macro|LISS_HOT
define|#
directive|define
name|LISS_HOT
value|2
end_define
begin_define
DECL|macro|LISS_SELECTED
define|#
directive|define
name|LISS_SELECTED
value|3
end_define
begin_define
DECL|macro|LISS_DISABLED
define|#
directive|define
name|LISS_DISABLED
value|4
end_define
begin_define
DECL|macro|LISS_SELECTEDNOTFOCUS
define|#
directive|define
name|LISS_SELECTEDNOTFOCUS
value|5
end_define
begin_define
DECL|macro|LISS_HOTSELECTED
define|#
directive|define
name|LISS_HOTSELECTED
value|6
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|BP_COMMANDLINK
end_ifndef
begin_define
DECL|macro|BP_COMMANDLINK
define|#
directive|define
name|BP_COMMANDLINK
value|6
end_define
begin_define
DECL|macro|BP_COMMANDLINKGLYPH
define|#
directive|define
name|BP_COMMANDLINKGLYPH
value|7
end_define
begin_define
DECL|macro|CMDLGS_NORMAL
define|#
directive|define
name|CMDLGS_NORMAL
value|1
end_define
begin_define
DECL|macro|CMDLGS_HOT
define|#
directive|define
name|CMDLGS_HOT
value|2
end_define
begin_define
DECL|macro|CMDLGS_PRESSED
define|#
directive|define
name|CMDLGS_PRESSED
value|3
end_define
begin_define
DECL|macro|CMDLGS_DISABLED
define|#
directive|define
name|CMDLGS_DISABLED
value|4
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Runtime resolved theme engine function calls
end_comment
begin_typedef
DECL|typedef|PtrGetThemePartSize
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemePartSize
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|HDC
name|hdc
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|OPTIONAL
name|RECT
modifier|*
name|prc
parameter_list|,
name|enum
name|THEMESIZE
name|eSize
parameter_list|,
name|OUT
name|SIZE
modifier|*
name|psz
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrOpenThemeData
typedef|typedef
name|HTHEME
function_decl|(
name|WINAPI
modifier|*
name|PtrOpenThemeData
function_decl|)
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|LPCWSTR
name|pszClassList
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrOpenThemeData
typedef|typedef
name|HTHEME
function_decl|(
name|WINAPI
modifier|*
name|PtrOpenThemeData
function_decl|)
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|LPCWSTR
name|pszClassList
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrCloseThemeData
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrCloseThemeData
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrDrawThemeBackground
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrDrawThemeBackground
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|HDC
name|hdc
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
specifier|const
name|RECT
modifier|*
name|pRect
parameter_list|,
name|OPTIONAL
specifier|const
name|RECT
modifier|*
name|pClipRect
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrDrawThemeBackgroundEx
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrDrawThemeBackgroundEx
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|HDC
name|hdc
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
specifier|const
name|RECT
modifier|*
name|pRect
parameter_list|,
name|OPTIONAL
specifier|const
name|DTBGOPTS
modifier|*
name|pOptions
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetCurrentThemeName
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetCurrentThemeName
function_decl|)
parameter_list|(
name|OUT
name|LPWSTR
name|pszThemeFileName
parameter_list|,
name|int
name|cchMaxNameChars
parameter_list|,
name|OUT
name|OPTIONAL
name|LPWSTR
name|pszColorBuff
parameter_list|,
name|int
name|cchMaxColorChars
parameter_list|,
name|OUT
name|OPTIONAL
name|LPWSTR
name|pszSizeBuff
parameter_list|,
name|int
name|cchMaxSizeChars
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemeBool
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemeBool
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|OUT
name|BOOL
modifier|*
name|pfVal
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemeColor
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemeColor
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|OUT
name|COLORREF
modifier|*
name|pColor
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemeEnumValue
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemeEnumValue
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|OUT
name|int
modifier|*
name|piVal
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemeFilename
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemeFilename
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|OUT
name|LPWSTR
name|pszThemeFileName
parameter_list|,
name|int
name|cchMaxBuffChars
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemeFont
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemeFont
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|OPTIONAL
name|HDC
name|hdc
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|OUT
name|LOGFONT
modifier|*
name|pFont
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemeInt
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemeInt
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|OUT
name|int
modifier|*
name|piVal
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemeIntList
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemeIntList
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|OUT
name|INTLIST
modifier|*
name|pIntList
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemeMargins
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemeMargins
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|OPTIONAL
name|HDC
name|hdc
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|OPTIONAL
name|RECT
modifier|*
name|prc
parameter_list|,
name|OUT
name|MARGINS
modifier|*
name|pMargins
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemeMetric
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemeMetric
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|OPTIONAL
name|HDC
name|hdc
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|OUT
name|int
modifier|*
name|piVal
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemePartSize
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemePartSize
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|HDC
name|hdc
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|OPTIONAL
name|RECT
modifier|*
name|prc
parameter_list|,
name|enum
name|THEMESIZE
name|eSize
parameter_list|,
name|OUT
name|SIZE
modifier|*
name|psz
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemePosition
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemePosition
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|OUT
name|POINT
modifier|*
name|pPoint
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemeRect
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemeRect
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|OUT
name|RECT
modifier|*
name|pRect
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemeString
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemeString
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|OUT
name|LPWSTR
name|pszBuff
parameter_list|,
name|int
name|cchMaxBuffChars
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemeTransitionDuration
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemeTransitionDuration
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateFromId
parameter_list|,
name|int
name|iStateToId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|int
modifier|*
name|pDuration
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrIsThemePartDefined
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrIsThemePartDefined
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrSetWindowTheme
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrSetWindowTheme
function_decl|)
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|LPCWSTR
name|pszSubAppName
parameter_list|,
name|LPCWSTR
name|pszSubIdList
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrGetThemePropertyOrigin
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrGetThemePropertyOrigin
function_decl|)
parameter_list|(
name|HTHEME
name|hTheme
parameter_list|,
name|int
name|iPartId
parameter_list|,
name|int
name|iStateId
parameter_list|,
name|int
name|iPropId
parameter_list|,
name|OUT
name|enum
name|PROPERTYORIGIN
modifier|*
name|pOrigin
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|pIsThemePartDefined
specifier|static
name|PtrIsThemePartDefined
name|pIsThemePartDefined
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pOpenThemeData
specifier|static
name|PtrOpenThemeData
name|pOpenThemeData
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pCloseThemeData
specifier|static
name|PtrCloseThemeData
name|pCloseThemeData
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pDrawThemeBackground
specifier|static
name|PtrDrawThemeBackground
name|pDrawThemeBackground
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pDrawThemeBackgroundEx
specifier|static
name|PtrDrawThemeBackgroundEx
name|pDrawThemeBackgroundEx
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetCurrentThemeName
specifier|static
name|PtrGetCurrentThemeName
name|pGetCurrentThemeName
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemeBool
specifier|static
name|PtrGetThemeBool
name|pGetThemeBool
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemeColor
specifier|static
name|PtrGetThemeColor
name|pGetThemeColor
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemeEnumValue
specifier|static
name|PtrGetThemeEnumValue
name|pGetThemeEnumValue
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemeFilename
specifier|static
name|PtrGetThemeFilename
name|pGetThemeFilename
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemeFont
specifier|static
name|PtrGetThemeFont
name|pGetThemeFont
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemeInt
specifier|static
name|PtrGetThemeInt
name|pGetThemeInt
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemeIntList
specifier|static
name|PtrGetThemeIntList
name|pGetThemeIntList
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemeMargins
specifier|static
name|PtrGetThemeMargins
name|pGetThemeMargins
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemeMetric
specifier|static
name|PtrGetThemeMetric
name|pGetThemeMetric
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemePartSize
specifier|static
name|PtrGetThemePartSize
name|pGetThemePartSize
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemePosition
specifier|static
name|PtrGetThemePosition
name|pGetThemePosition
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemeRect
specifier|static
name|PtrGetThemeRect
name|pGetThemeRect
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemeString
specifier|static
name|PtrGetThemeString
name|pGetThemeString
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemeTransitionDuration
specifier|static
name|PtrGetThemeTransitionDuration
name|pGetThemeTransitionDuration
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pSetWindowTheme
specifier|static
name|PtrSetWindowTheme
name|pSetWindowTheme
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pGetThemePropertyOrigin
specifier|static
name|PtrGetThemePropertyOrigin
name|pGetThemePropertyOrigin
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* \internal     Checks if we should use Vista style , or if we should     fall back to Windows style. */
end_comment
begin_function
DECL|function|useVista
name|bool
name|QWindowsVistaStylePrivate
operator|::
name|useVista
parameter_list|()
block|{
return|return
operator|(
name|QWindowsVistaStylePrivate
operator|::
name|useXP
argument_list|()
operator|&&
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
operator|&&
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
operator|)
operator|)
return|;
block|}
end_function
begin_comment
comment|/* \internal     Checks and returns the style object */
end_comment
begin_function
DECL|function|styleObject
specifier|inline
name|QObject
modifier|*
name|styleObject
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|)
block|{
return|return
name|option
condition|?
name|option
operator|->
name|styleObject
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/* \internal     Checks if we can animate on a style option */
end_comment
begin_function
DECL|function|canAnimate
name|bool
name|canAnimate
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|)
block|{
return|return
name|option
operator|&&
name|option
operator|->
name|styleObject
operator|&&
operator|!
name|option
operator|->
name|styleObject
operator|->
name|property
argument_list|(
literal|"_q_no_animation"
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/* \internal     Used by animations to clone a styleoption and shift its offset */
end_comment
begin_function
DECL|function|clonedAnimationStyleOption
name|QStyleOption
modifier|*
name|clonedAnimationStyleOption
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|)
block|{
name|QStyleOption
modifier|*
name|styleOption
init|=
literal|0
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
name|styleOption
operator|=
operator|new
name|QStyleOptionSlider
argument_list|(
operator|*
name|slider
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinbox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
name|styleOption
operator|=
operator|new
name|QStyleOptionSpinBox
argument_list|(
operator|*
name|spinbox
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|groupBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
name|styleOption
operator|=
operator|new
name|QStyleOptionGroupBox
argument_list|(
operator|*
name|groupBox
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|combo
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
name|styleOption
operator|=
operator|new
name|QStyleOptionComboBox
argument_list|(
operator|*
name|combo
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
name|styleOption
operator|=
operator|new
name|QStyleOptionButton
argument_list|(
operator|*
name|button
argument_list|)
expr_stmt|;
else|else
name|styleOption
operator|=
operator|new
name|QStyleOption
argument_list|(
operator|*
name|option
argument_list|)
expr_stmt|;
name|styleOption
operator|->
name|rect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|option
operator|->
name|rect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|styleOption
return|;
block|}
end_function
begin_comment
comment|/* \internal     Used by animations to delete cloned styleoption */
end_comment
begin_function
DECL|function|deleteClonedAnimationStyleOption
name|void
name|deleteClonedAnimationStyleOption
parameter_list|(
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|slider
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
operator|delete
name|slider
expr_stmt|;
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|spinbox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
operator|delete
name|spinbox
expr_stmt|;
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionGroupBox
modifier|*
name|groupBox
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionGroupBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
operator|delete
name|groupBox
expr_stmt|;
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|combo
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
operator|delete
name|combo
expr_stmt|;
elseif|else
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
operator|delete
name|button
expr_stmt|;
else|else
operator|delete
name|option
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \class QWindowsVistaStyle   \brief The QWindowsVistaStyle class provides a look and feel suitable for applications on Microsoft Windows Vista.   \since 4.3   \ingroup appearance   \inmodule QtWidgets   \internal    \warning This style is only available on the Windows Vista platform   because it makes use of Windows Vista's style engine.    \sa QMacStyle, QWindowsXPStyle, QFusionStyle */
end_comment
begin_comment
comment|/*!   Constructs a QWindowsVistaStyle object. */
end_comment
begin_constructor
DECL|function|QWindowsVistaStyle
name|QWindowsVistaStyle
operator|::
name|QWindowsVistaStyle
parameter_list|()
member_init_list|:
name|QWindowsXPStyle
argument_list|(
operator|*
operator|new
name|QWindowsVistaStylePrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!   Destructor. */
end_comment
begin_destructor
DECL|function|~QWindowsVistaStyle
name|QWindowsVistaStyle
operator|::
name|~
name|QWindowsVistaStyle
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|//convert Qt state flags to uxtheme button states
end_comment
begin_function
DECL|function|buttonStateId
specifier|static
name|int
name|buttonStateId
parameter_list|(
name|int
name|flags
parameter_list|,
name|int
name|partId
parameter_list|)
block|{
name|int
name|stateId
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|partId
operator|==
name|BP_RADIOBUTTON
operator|||
name|partId
operator|==
name|BP_CHECKBOX
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|RBS_UNCHECKEDDISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|QStyle
operator|::
name|State_Sunken
condition|)
name|stateId
operator|=
name|RBS_UNCHECKEDPRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|QStyle
operator|::
name|State_MouseOver
condition|)
name|stateId
operator|=
name|RBS_UNCHECKEDHOT
expr_stmt|;
else|else
name|stateId
operator|=
name|RBS_UNCHECKEDNORMAL
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QStyle
operator|::
name|State_On
condition|)
name|stateId
operator|+=
name|RBS_CHECKEDNORMAL
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|partId
operator|==
name|BP_PUSHBUTTON
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|PBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
operator|(
name|QStyle
operator|::
name|State_Sunken
operator||
name|QStyle
operator|::
name|State_On
operator|)
condition|)
name|stateId
operator|=
name|PBS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|QStyle
operator|::
name|State_MouseOver
condition|)
name|stateId
operator|=
name|PBS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|PBS_NORMAL
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|stateId
return|;
block|}
end_function
begin_function
DECL|function|isUpdateNeeded
name|bool
name|QWindowsVistaAnimation
operator|::
name|isUpdateNeeded
parameter_list|()
specifier|const
block|{
return|return
name|QWindowsVistaStylePrivate
operator|::
name|useVista
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|paint
name|void
name|QWindowsVistaAnimation
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|)
block|{
name|painter
operator|->
name|drawImage
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|currentImage
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!  \internal    Animations are used for some state transitions on specific widgets.    Only one running animation can exist for a widget at any specific   time.  Animations can be added through   QWindowsVistaStylePrivate::startAnimation(Animation *) and any   existing animation on a widget can be retrieved with   QWindowsVistaStylePrivate::widgetAnimation(Widget *).    Once an animation has been started,   QWindowsVistaStylePrivate::timerEvent(QTimerEvent *) will   continuously call update() on the widget until it is stopped,   meaning that drawPrimitive will be called many times until the   transition has completed. During this time, the result will be   retrieved by the Animation::paint(...) function and not by the style   itself.    To determine if a transition should occur, the style needs to know   the previous state of the widget as well as the current one. This is   solved by updating dynamic properties on the widget every time the   function is called.    Transitions interrupting existing transitions should always be   smooth, so whenever a hover-transition is started on a pulsating   button, it uses the current frame of the pulse-animation as the   starting image for the hover transition.   */
end_comment
begin_function
DECL|function|drawPrimitive
name|void
name|QWindowsVistaStyle
operator|::
name|drawPrimitive
parameter_list|(
name|PrimitiveElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QWindowsVistaStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsVistaStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|state
init|=
name|option
operator|->
name|state
decl_stmt|;
if|if
condition|(
operator|!
name|QWindowsVistaStylePrivate
operator|::
name|useVista
argument_list|()
condition|)
block|{
foreach|foreach
control|(
specifier|const
name|QObject
modifier|*
name|target
decl|,
name|d
operator|->
name|animationTargets
argument_list|()
control|)
name|d
operator|->
name|stopAnimation
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|QWindowsStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
operator|&&
name|d
operator|->
name|transitionsEnabled
argument_list|()
operator|&&
name|canAnimate
argument_list|(
name|option
argument_list|)
condition|)
block|{
block|{
name|QRect
name|oldRect
decl_stmt|;
name|QRect
name|newRect
decl_stmt|;
comment|/* widgets that support state transitions : */
if|if
condition|(
name|element
operator|==
name|PE_FrameLineEdit
operator|||
name|element
operator|==
name|PE_IndicatorRadioButton
operator|||
name|element
operator|==
name|PE_IndicatorCheckBox
condition|)
block|{
comment|// Retrieve and update the dynamic properties tracking
comment|// the previous state of the widget:
name|QObject
modifier|*
name|styleObject
init|=
name|option
operator|->
name|styleObject
decl_stmt|;
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_no_animation"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|oldState
init|=
name|styleObject
operator|->
name|property
argument_list|(
literal|"_q_stylestate"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|oldRect
operator|=
name|styleObject
operator|->
name|property
argument_list|(
literal|"_q_stylerect"
argument_list|)
operator|.
name|toRect
argument_list|()
expr_stmt|;
name|newRect
operator|=
name|option
operator|->
name|rect
expr_stmt|;
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_stylestate"
argument_list|,
operator|(
name|int
operator|)
name|option
operator|->
name|state
argument_list|)
expr_stmt|;
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_stylerect"
argument_list|,
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
name|bool
name|doTransition
init|=
name|oldState
operator|&&
operator|(
operator|(
name|state
operator|&
name|State_Sunken
operator|)
operator|!=
operator|(
name|oldState
operator|&
name|State_Sunken
operator|)
operator|||
operator|(
name|state
operator|&
name|State_On
operator|)
operator|!=
operator|(
name|oldState
operator|&
name|State_On
operator|)
operator|||
operator|(
name|state
operator|&
name|State_MouseOver
operator|)
operator|!=
operator|(
name|oldState
operator|&
name|State_MouseOver
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|oldRect
operator|!=
name|newRect
operator|||
operator|(
name|state
operator|&
name|State_Enabled
operator|)
operator|!=
operator|(
name|oldState
operator|&
name|State_Enabled
operator|)
operator|||
operator|(
name|state
operator|&
name|State_Active
operator|)
operator|!=
operator|(
name|oldState
operator|&
name|State_Active
operator|)
condition|)
name|d
operator|->
name|stopAnimation
argument_list|(
name|styleObject
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_ReadOnly
operator|&&
name|element
operator|==
name|PE_FrameLineEdit
condition|)
comment|// Do not animate read only line edits
name|doTransition
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|doTransition
condition|)
block|{
name|QStyleOption
modifier|*
name|styleOption
init|=
name|clonedAnimationStyleOption
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|styleOption
operator|->
name|state
operator|=
operator|(
name|QStyle
operator|::
name|State
operator|)
name|oldState
expr_stmt|;
name|QWindowsVistaAnimation
modifier|*
name|anim
init|=
name|qobject_cast
argument_list|<
name|QWindowsVistaAnimation
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|animation
argument_list|(
name|styleObject
argument_list|)
argument_list|)
decl_stmt|;
name|QWindowsVistaTransition
modifier|*
name|t
init|=
operator|new
name|QWindowsVistaTransition
argument_list|(
name|styleObject
argument_list|)
decl_stmt|;
comment|// We create separate images for the initial and final transition states and store them in the
comment|// Transition object.
name|QImage
name|startImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|startImage
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPainter
name|startPainter
argument_list|(
operator|&
name|startImage
argument_list|)
decl_stmt|;
name|QImage
name|endImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|endImage
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPainter
name|endPainter
argument_list|(
operator|&
name|endImage
argument_list|)
decl_stmt|;
comment|// If we have a running animation on the widget already, we will use that to paint the initial
comment|// state of the new transition, this ensures a smooth transition from a current animation such as a
comment|// pulsating default button into the intended target state.
if|if
condition|(
operator|!
name|anim
condition|)
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|styleOption
argument_list|,
operator|&
name|startPainter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
else|else
name|anim
operator|->
name|paint
argument_list|(
operator|&
name|startPainter
argument_list|,
name|styleOption
argument_list|)
expr_stmt|;
name|t
operator|->
name|setStartImage
argument_list|(
name|startImage
argument_list|)
expr_stmt|;
comment|// The end state of the transition is simply the result we would have painted
comment|// if the style was not animated.
name|styleOption
operator|->
name|styleObject
operator|=
literal|0
expr_stmt|;
name|styleOption
operator|->
name|state
operator|=
name|option
operator|->
name|state
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|styleOption
argument_list|,
operator|&
name|endPainter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|t
operator|->
name|setEndImage
argument_list|(
name|endImage
argument_list|)
expr_stmt|;
name|HTHEME
name|theme
decl_stmt|;
name|int
name|partId
decl_stmt|;
name|int
name|duration
decl_stmt|;
name|int
name|fromState
init|=
literal|0
decl_stmt|;
name|int
name|toState
init|=
literal|0
decl_stmt|;
comment|//translate state flags to UXTHEME states :
if|if
condition|(
name|element
operator|==
name|PE_FrameLineEdit
condition|)
block|{
name|theme
operator|=
name|pOpenThemeData
argument_list|(
literal|0
argument_list|,
literal|L"Edit"
argument_list|)
expr_stmt|;
name|partId
operator|=
name|EP_EDITBORDER_NOSCROLL
expr_stmt|;
if|if
condition|(
name|oldState
operator|&
name|State_MouseOver
condition|)
name|fromState
operator|=
name|ETS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|oldState
operator|&
name|State_HasFocus
condition|)
name|fromState
operator|=
name|ETS_FOCUSED
expr_stmt|;
else|else
name|fromState
operator|=
name|ETS_NORMAL
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|State_MouseOver
condition|)
name|toState
operator|=
name|ETS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|state
operator|&
name|State_HasFocus
condition|)
name|toState
operator|=
name|ETS_FOCUSED
expr_stmt|;
else|else
name|toState
operator|=
name|ETS_NORMAL
expr_stmt|;
block|}
else|else
block|{
name|theme
operator|=
name|pOpenThemeData
argument_list|(
literal|0
argument_list|,
literal|L"Button"
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|==
name|PE_IndicatorRadioButton
condition|)
name|partId
operator|=
name|BP_RADIOBUTTON
expr_stmt|;
elseif|else
if|if
condition|(
name|element
operator|==
name|PE_IndicatorCheckBox
condition|)
name|partId
operator|=
name|BP_CHECKBOX
expr_stmt|;
else|else
name|partId
operator|=
name|BP_PUSHBUTTON
expr_stmt|;
name|fromState
operator|=
name|buttonStateId
argument_list|(
name|oldState
argument_list|,
name|partId
argument_list|)
expr_stmt|;
name|toState
operator|=
name|buttonStateId
argument_list|(
name|option
operator|->
name|state
argument_list|,
name|partId
argument_list|)
expr_stmt|;
block|}
comment|// Retrieve the transition time between the states from the system.
if|if
condition|(
name|theme
operator|&&
name|pGetThemeTransitionDuration
argument_list|(
name|theme
argument_list|,
name|partId
argument_list|,
name|fromState
argument_list|,
name|toState
argument_list|,
name|TMT_TRANSITIONDURATIONS
argument_list|,
operator|&
name|duration
argument_list|)
operator|==
name|S_OK
condition|)
block|{
name|t
operator|->
name|setDuration
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
name|t
operator|->
name|setStartTime
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
name|deleteClonedAnimationStyleOption
argument_list|(
name|styleOption
argument_list|)
expr_stmt|;
name|d
operator|->
name|startAnimation
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_no_animation"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// End of animation part
block|}
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|PE_IndicatorHeaderArrow
case|:
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|header
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|stateId
init|=
name|HSAS_SORTEDDOWN
decl_stmt|;
if|if
condition|(
name|header
operator|->
name|sortIndicator
operator|&
name|QStyleOptionHeader
operator|::
name|SortDown
condition|)
name|stateId
operator|=
name|HSAS_SORTEDUP
expr_stmt|;
comment|//note that the uxtheme sort down indicator is the inverse of ours
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|HeaderTheme
argument_list|,
name|HP_HEADERSORTARROW
argument_list|,
name|stateId
argument_list|,
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_IndicatorBranch
case|:
block|{
name|XPThemeData
name|theme
argument_list|(
literal|0
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|TreeViewTheme
argument_list|)
decl_stmt|;
specifier|static
name|int
name|decoration_size
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|initTreeViewTheming
argument_list|()
operator|&&
name|theme
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|decoration_size
condition|)
block|{
name|SIZE
name|size
decl_stmt|;
name|pGetThemePartSize
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|TVP_HOTGLYPH
argument_list|,
name|GLPS_OPENED
argument_list|,
literal|0
argument_list|,
name|TS_TRUE
argument_list|,
operator|&
name|size
argument_list|)
expr_stmt|;
name|decoration_size
operator|=
name|qMax
argument_list|(
name|size
operator|.
name|cx
argument_list|,
name|size
operator|.
name|cy
argument_list|)
expr_stmt|;
block|}
name|int
name|mid_h
init|=
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|int
name|mid_v
init|=
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
decl_stmt|;
name|int
name|bef_h
init|=
name|mid_h
decl_stmt|;
name|int
name|bef_v
init|=
name|mid_v
decl_stmt|;
name|int
name|aft_h
init|=
name|mid_h
decl_stmt|;
name|int
name|aft_v
init|=
name|mid_v
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Children
condition|)
block|{
name|int
name|delta
init|=
name|decoration_size
operator|/
literal|2
decl_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|bef_h
operator|-
name|delta
argument_list|,
name|bef_v
operator|-
name|delta
argument_list|,
name|decoration_size
argument_list|,
name|decoration_size
argument_list|)
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|option
operator|->
name|state
operator|&
name|State_MouseOver
condition|?
name|TVP_HOTGLYPH
else|:
name|TVP_GLYPH
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|option
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Open
condition|?
name|GLPS_OPENED
else|:
name|GLPS_CLOSED
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|theme
operator|.
name|mirrorHorizontally
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|bef_h
operator|-=
name|delta
operator|+
literal|2
expr_stmt|;
name|bef_v
operator|-=
name|delta
operator|+
literal|2
expr_stmt|;
name|aft_h
operator|+=
name|delta
operator|-
literal|2
expr_stmt|;
name|aft_v
operator|+=
name|delta
operator|-
literal|2
expr_stmt|;
block|}
if|#
directive|if
literal|0
block|QBrush brush(option->palette.dark().color(), Qt::Dense4Pattern);             if (option->state& State_Item) {                 if (option->direction == Qt::RightToLeft)                     painter->fillRect(option->rect.left(), mid_v, bef_h - option->rect.left(), 1, brush);                 else                     painter->fillRect(aft_h, mid_v, option->rect.right() - aft_h + 1, 1, brush);             }             if (option->state& State_Sibling&& option->rect.bottom()> aft_v)                 painter->fillRect(mid_h, aft_v, 1, option->rect.bottom() - aft_v + 1, brush);             if (option->state& (State_Open | State_Children | State_Item | State_Sibling)&& (bef_v> option->rect.y()))                 painter->fillRect(mid_h, option->rect.y(), 1, bef_v - option->rect.y(), brush);
endif|#
directive|endif
block|}
break|break;
case|case
name|PE_PanelButtonBevel
case|:
case|case
name|PE_IndicatorCheckBox
case|:
case|case
name|PE_IndicatorRadioButton
case|:
block|{
if|if
condition|(
name|QWindowsVistaAnimation
modifier|*
name|a
init|=
name|qobject_cast
argument_list|<
name|QWindowsVistaAnimation
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|animation
argument_list|(
name|styleObject
argument_list|(
name|option
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|a
operator|->
name|paint
argument_list|(
name|painter
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowsXPStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PE_FrameMenu
case|:
block|{
name|int
name|stateId
init|=
name|option
operator|->
name|state
operator|&
name|State_Active
condition|?
name|MB_ACTIVE
else|:
name|MB_INACTIVE
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|MenuTheme
argument_list|,
name|MENU_POPUPBORDERS
argument_list|,
name|stateId
argument_list|,
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_Frame
case|:
block|{
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
if|if
condition|(
name|QStyleHelper
operator|::
name|isInstanceOf
argument_list|(
name|option
operator|->
name|styleObject
argument_list|,
name|QAccessible
operator|::
name|EditableText
argument_list|)
operator|||
name|QStyleHelper
operator|::
name|isInstanceOf
argument_list|(
name|option
operator|->
name|styleObject
argument_list|,
name|QAccessible
operator|::
name|StaticText
argument_list|)
operator|||
else|#
directive|else
if|if
condition|(
endif|#
directive|endif
operator|(
name|widget
operator|&&
name|widget
operator|->
name|inherits
argument_list|(
literal|"QTextEdit"
argument_list|)
operator|)
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|int
name|stateId
init|=
name|ETS_NORMAL
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|ETS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|state
operator|&
name|State_ReadOnly
condition|)
name|stateId
operator|=
name|ETS_READONLY
expr_stmt|;
elseif|else
if|if
condition|(
name|state
operator|&
name|State_HasFocus
condition|)
name|stateId
operator|=
name|ETS_SELECTED
expr_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|EditTheme
argument_list|,
name|EP_EDITBORDER_HVSCROLL
argument_list|,
name|stateId
argument_list|,
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
comment|// Since EP_EDITBORDER_HVSCROLL does not us borderfill, theme.noContent cannot be used for clipping
name|int
name|borderSize
init|=
literal|1
decl_stmt|;
name|pGetThemeInt
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|theme
operator|.
name|partId
argument_list|,
name|theme
operator|.
name|stateId
argument_list|,
name|TMT_BORDERSIZE
argument_list|,
operator|&
name|borderSize
argument_list|)
expr_stmt|;
name|QRegion
name|clipRegion
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|QRegion
name|content
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|borderSize
argument_list|,
name|borderSize
argument_list|,
operator|-
name|borderSize
argument_list|,
operator|-
name|borderSize
argument_list|)
decl_stmt|;
name|clipRegion
operator|^=
name|content
expr_stmt|;
name|painter
operator|->
name|setClipRegion
argument_list|(
name|clipRegion
argument_list|)
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QWindowsXPStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PE_PanelLineEdit
case|:
if|if
condition|(
specifier|const
name|QStyleOptionFrame
modifier|*
name|panel
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionFrame
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QBrush
name|bg
decl_stmt|;
name|bool
name|usePalette
init|=
literal|false
decl_stmt|;
name|bool
name|isEnabled
init|=
name|option
operator|->
name|state
operator|&
name|State_Enabled
decl_stmt|;
name|uint
name|resolve_mask
init|=
name|panel
operator|->
name|palette
operator|.
name|resolve
argument_list|()
decl_stmt|;
if|if
condition|(
name|widget
condition|)
block|{
comment|// Since spin box includes a line edit we need to resolve the palette mask also from
comment|// the parent, as while the color is always correct on the palette supplied by panel,
comment|// the mask can still be empty. If either mask specifies custom base color, use that.
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
if|if
condition|(
name|QAbstractSpinBox
modifier|*
name|spinbox
init|=
name|qobject_cast
argument_list|<
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
name|resolve_mask
operator||=
name|spinbox
operator|->
name|palette
argument_list|()
operator|.
name|resolve
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_SPINBOX
block|}
if|if
condition|(
name|resolve_mask
operator|&
operator|(
literal|1
operator|<<
name|QPalette
operator|::
name|Base
operator|)
condition|)
block|{
comment|// Base color is set for this widget, so use it
name|bg
operator|=
name|panel
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|usePalette
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|usePalette
condition|)
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|panel
operator|->
name|rect
argument_list|,
name|bg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|partId
init|=
name|EP_BACKGROUND
decl_stmt|;
name|int
name|stateId
init|=
name|EBS_NORMAL
decl_stmt|;
if|if
condition|(
operator|!
name|isEnabled
condition|)
name|stateId
operator|=
name|EBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|state
operator|&
name|State_ReadOnly
condition|)
name|stateId
operator|=
name|EBS_READONLY
expr_stmt|;
elseif|else
if|if
condition|(
name|state
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|EBS_HOT
expr_stmt|;
name|XPThemeData
name|theme
argument_list|(
literal|0
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|EditTheme
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QWindowsStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|bgType
decl_stmt|;
name|pGetThemeEnumValue
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|TMT_BGTYPE
argument_list|,
operator|&
name|bgType
argument_list|)
expr_stmt|;
if|if
condition|(
name|bgType
operator|==
name|BT_IMAGEFILE
condition|)
block|{
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QBrush
name|fillColor
init|=
name|option
operator|->
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isEnabled
condition|)
block|{
name|PROPERTYORIGIN
name|origin
init|=
name|PO_NOTFOUND
decl_stmt|;
name|pGetThemePropertyOrigin
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|theme
operator|.
name|partId
argument_list|,
name|theme
operator|.
name|stateId
argument_list|,
name|TMT_FILLCOLOR
argument_list|,
operator|&
name|origin
argument_list|)
expr_stmt|;
comment|// Use only if the fill property comes from our part
if|if
condition|(
operator|(
name|origin
operator|==
name|PO_PART
operator|||
name|origin
operator|==
name|PO_STATE
operator|)
condition|)
block|{
name|COLORREF
name|bgRef
decl_stmt|;
name|pGetThemeColor
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|TMT_FILLCOLOR
argument_list|,
operator|&
name|bgRef
argument_list|)
expr_stmt|;
name|fillColor
operator|=
name|QBrush
argument_list|(
name|qRgb
argument_list|(
name|GetRValue
argument_list|(
name|bgRef
argument_list|)
argument_list|,
name|GetGValue
argument_list|(
name|bgRef
argument_list|)
argument_list|,
name|GetBValue
argument_list|(
name|bgRef
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|->
name|rect
argument_list|,
name|fillColor
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|panel
operator|->
name|lineWidth
operator|>
literal|0
condition|)
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_FrameLineEdit
argument_list|,
name|panel
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|PE_FrameLineEdit
case|:
if|if
condition|(
name|QWindowsVistaAnimation
modifier|*
name|anim
init|=
name|qobject_cast
argument_list|<
name|QWindowsVistaAnimation
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|animation
argument_list|(
name|styleObject
argument_list|(
name|option
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|anim
operator|->
name|paint
argument_list|(
name|painter
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPainter
modifier|*
name|p
init|=
name|painter
decl_stmt|;
if|if
condition|(
name|QWindowsXPStylePrivate
operator|::
name|isItemViewDelegateLineEdit
argument_list|(
name|widget
argument_list|)
condition|)
block|{
comment|// we try to check if this lineedit is a delegate on a QAbstractItemView-derived class.
name|QPen
name|oldPen
init|=
name|p
operator|->
name|pen
argument_list|()
decl_stmt|;
comment|// Inner white border
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Outer dark border
name|p
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|int
name|stateId
init|=
name|ETS_NORMAL
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|ETS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|state
operator|&
name|State_ReadOnly
condition|)
name|stateId
operator|=
name|ETS_READONLY
expr_stmt|;
elseif|else
if|if
condition|(
name|state
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|ETS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|state
operator|&
name|State_HasFocus
condition|)
name|stateId
operator|=
name|ETS_SELECTED
expr_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|EditTheme
argument_list|,
name|EP_EDITBORDER_NOSCROLL
argument_list|,
name|stateId
argument_list|,
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|QRegion
name|clipRegion
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|clipRegion
operator|-=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setClipRegion
argument_list|(
name|clipRegion
argument_list|)
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
name|PE_IndicatorToolBarHandle
case|:
block|{
name|XPThemeData
name|theme
decl_stmt|;
name|QRect
name|rect
decl_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
name|theme
operator|=
name|XPThemeData
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|RebarTheme
argument_list|,
name|RP_GRIPPER
argument_list|,
name|ETS_NORMAL
argument_list|,
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setWidth
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|theme
operator|=
name|XPThemeData
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|RebarTheme
argument_list|,
name|RP_GRIPPERVERT
argument_list|,
name|ETS_NORMAL
argument_list|,
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setHeight
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|theme
operator|.
name|rect
operator|=
name|rect
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_IndicatorToolBarSeparator
case|:
block|{
name|QPen
name|pen
init|=
name|painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|int
name|margin
init|=
literal|3
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|114
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
name|int
name|x1
init|=
name|option
operator|->
name|rect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|QPoint
argument_list|(
name|x1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
name|margin
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|x1
argument_list|,
name|option
operator|->
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|margin
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|y1
init|=
name|option
operator|->
name|rect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|QPoint
argument_list|(
name|option
operator|->
name|rect
operator|.
name|left
argument_list|()
operator|+
name|margin
argument_list|,
name|y1
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|option
operator|->
name|rect
operator|.
name|right
argument_list|()
operator|-
name|margin
argument_list|,
name|y1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PE_PanelTipLabel
case|:
block|{
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ToolTipTheme
argument_list|,
name|TTP_STANDARD
argument_list|,
name|TTSS_NORMAL
argument_list|,
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PE_PanelItemViewItem
case|:
block|{
specifier|const
name|QStyleOptionViewItem
modifier|*
name|vopt
decl_stmt|;
specifier|const
name|QAbstractItemView
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|bool
name|newStyle
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|newStyle
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|newStyle
operator|&&
name|view
operator|&&
operator|(
name|vopt
operator|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
operator|)
condition|)
block|{
name|bool
name|selected
init|=
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
decl_stmt|;
name|bool
name|hover
init|=
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_MouseOver
decl_stmt|;
name|bool
name|active
init|=
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Active
decl_stmt|;
if|if
condition|(
name|vopt
operator|->
name|features
operator|&
name|QStyleOptionViewItem
operator|::
name|Alternate
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|vopt
operator|->
name|rect
argument_list|,
name|vopt
operator|->
name|palette
operator|.
name|alternateBase
argument_list|()
argument_list|)
expr_stmt|;
name|QPalette
operator|::
name|ColorGroup
name|cg
init|=
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
condition|?
name|QPalette
operator|::
name|Normal
else|:
name|QPalette
operator|::
name|Disabled
decl_stmt|;
if|if
condition|(
name|cg
operator|==
name|QPalette
operator|::
name|Normal
operator|&&
operator|!
operator|(
name|vopt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_Active
operator|)
condition|)
name|cg
operator|=
name|QPalette
operator|::
name|Inactive
expr_stmt|;
name|QRect
name|itemRect
init|=
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_ItemViewItemFocusRect
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
operator|.
name|adjusted
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|itemRect
operator|.
name|setTop
argument_list|(
name|vopt
operator|->
name|rect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|itemRect
operator|.
name|setBottom
argument_list|(
name|vopt
operator|->
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|QSize
name|sectionSize
init|=
name|itemRect
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|vopt
operator|->
name|showDecorationSelected
condition|)
name|sectionSize
operator|=
name|vopt
operator|->
name|rect
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|selectionBehavior
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|SelectRows
condition|)
name|sectionSize
operator|.
name|setWidth
argument_list|(
name|vopt
operator|->
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|NoSelection
condition|)
name|hover
operator|=
literal|false
expr_stmt|;
name|QPixmap
name|pixmap
decl_stmt|;
if|if
condition|(
name|vopt
operator|->
name|backgroundBrush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
specifier|const
name|QPointF
name|oldBrushOrigin
init|=
name|painter
operator|->
name|brushOrigin
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|vopt
operator|->
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|vopt
operator|->
name|rect
argument_list|,
name|vopt
operator|->
name|backgroundBrush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|oldBrushOrigin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hover
operator|||
name|selected
condition|)
block|{
if|if
condition|(
name|sectionSize
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|&&
name|sectionSize
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QString
name|key
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"qvdelegate-%1-%2-%3-%4-%5"
argument_list|)
operator|.
name|arg
argument_list|(
name|sectionSize
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|sectionSize
operator|.
name|height
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|selected
argument_list|)
operator|.
name|arg
argument_list|(
name|active
argument_list|)
operator|.
name|arg
argument_list|(
name|hover
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
name|pixmap
argument_list|)
condition|)
block|{
name|pixmap
operator|=
name|QPixmap
argument_list|(
name|sectionSize
argument_list|)
expr_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|int
name|state
decl_stmt|;
if|if
condition|(
name|selected
operator|&&
name|hover
condition|)
name|state
operator|=
name|LISS_HOTSELECTED
expr_stmt|;
elseif|else
if|if
condition|(
name|selected
operator|&&
operator|!
name|active
condition|)
name|state
operator|=
name|LISS_SELECTEDNOTFOCUS
expr_stmt|;
elseif|else
if|if
condition|(
name|selected
condition|)
name|state
operator|=
name|LISS_SELECTED
expr_stmt|;
else|else
name|state
operator|=
name|LISS_HOT
expr_stmt|;
name|QPainter
name|pixmapPainter
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
literal|0
argument_list|,
operator|&
name|pixmapPainter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|TreeViewTheme
argument_list|,
name|LVP_LISTITEM
argument_list|,
name|state
argument_list|,
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sectionSize
operator|.
name|width
argument_list|()
argument_list|,
name|sectionSize
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|initTreeViewTheming
argument_list|()
operator|&&
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowsXPStyle
operator|::
name|drawPrimitive
argument_list|(
name|PE_PanelItemViewItem
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
empty_stmt|;
block|}
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|key
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|vopt
operator|->
name|showDecorationSelected
condition|)
block|{
specifier|const
name|int
name|frame
init|=
literal|2
decl_stmt|;
comment|//Assumes a 2 pixel pixmap border
name|QRect
name|srcRect
init|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sectionSize
operator|.
name|width
argument_list|()
argument_list|,
name|sectionSize
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|pixmapRect
init|=
name|vopt
operator|->
name|rect
decl_stmt|;
name|bool
name|reverse
init|=
name|vopt
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
decl_stmt|;
name|bool
name|leftSection
init|=
name|vopt
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|Beginning
decl_stmt|;
name|bool
name|rightSection
init|=
name|vopt
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|End
decl_stmt|;
if|if
condition|(
name|vopt
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|OnlyOne
operator|||
name|vopt
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|Invalid
condition|)
name|painter
operator|->
name|drawPixmap
argument_list|(
name|pixmapRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|reverse
condition|?
name|rightSection
else|:
name|leftSection
condition|)
block|{
name|painter
operator|->
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
name|pixmapRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|QSize
argument_list|(
name|frame
argument_list|,
name|pixmapRect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|pixmap
argument_list|,
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QSize
argument_list|(
name|frame
argument_list|,
name|pixmapRect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|pixmapRect
operator|.
name|adjusted
argument_list|(
name|frame
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pixmap
argument_list|,
name|srcRect
operator|.
name|adjusted
argument_list|(
name|frame
argument_list|,
literal|0
argument_list|,
operator|-
name|frame
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reverse
condition|?
name|leftSection
else|:
name|rightSection
condition|)
block|{
name|painter
operator|->
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
name|pixmapRect
operator|.
name|topRight
argument_list|()
operator|-
name|QPoint
argument_list|(
name|frame
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QSize
argument_list|(
name|frame
argument_list|,
name|pixmapRect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|pixmap
argument_list|,
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|pixmapRect
operator|.
name|width
argument_list|()
operator|-
name|frame
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QSize
argument_list|(
name|frame
argument_list|,
name|pixmapRect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|pixmapRect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|frame
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pixmap
argument_list|,
name|srcRect
operator|.
name|adjusted
argument_list|(
name|frame
argument_list|,
literal|0
argument_list|,
operator|-
name|frame
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|vopt
operator|->
name|viewItemPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|Middle
condition|)
name|painter
operator|->
name|drawPixmap
argument_list|(
name|pixmapRect
argument_list|,
name|pixmap
argument_list|,
name|srcRect
operator|.
name|adjusted
argument_list|(
name|frame
argument_list|,
literal|0
argument_list|,
operator|-
name|frame
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|vopt
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
operator|&&
name|vopt
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
break|break;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|itemRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|QWindowsXPStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|PE_Widget
case|:
block|{
specifier|const
name|QDialogButtonBox
modifier|*
name|buttonBox
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QMessageBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|buttonBox
operator|=
name|widget
operator|->
name|findChild
argument_list|<
specifier|const
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_msgbox_buttonbox"
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_INPUTDIALOG
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QInputDialog
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|buttonBox
operator|=
name|widget
operator|->
name|findChild
argument_list|<
specifier|const
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_inputdlg_buttonbox"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_INPUTDIALOG
if|if
condition|(
name|buttonBox
condition|)
block|{
comment|//draw white panel part
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|TaskDialogTheme
argument_list|,
name|TDLG_PRIMARYPANEL
argument_list|,
literal|0
argument_list|,
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|QRect
name|toprect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|toprect
operator|.
name|setBottom
argument_list|(
name|buttonBox
operator|->
name|geometry
argument_list|()
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|toprect
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
comment|//draw bottom panel part
name|QRect
name|buttonRect
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|buttonRect
operator|.
name|setTop
argument_list|(
name|buttonBox
operator|->
name|geometry
argument_list|()
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|buttonRect
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|TDLG_SECONDARYPANEL
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|QWindowsXPStyle
operator|::
name|drawPrimitive
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_comment
comment|/*!  \internal   see drawPrimitive for comments on the animation support  */
end_comment
begin_function
DECL|function|drawControl
name|void
name|QWindowsVistaStyle
operator|::
name|drawControl
parameter_list|(
name|ControlElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QWindowsVistaStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsVistaStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QWindowsVistaStylePrivate
operator|::
name|useVista
argument_list|()
condition|)
block|{
foreach|foreach
control|(
specifier|const
name|QObject
modifier|*
name|target
decl|,
name|d
operator|->
name|animationTargets
argument_list|()
control|)
name|d
operator|->
name|stopAnimation
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|bool
name|selected
init|=
name|option
operator|->
name|state
operator|&
name|State_Selected
decl_stmt|;
name|bool
name|pressed
init|=
name|option
operator|->
name|state
operator|&
name|State_Sunken
decl_stmt|;
name|bool
name|disabled
init|=
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
decl_stmt|;
name|int
name|state
init|=
name|option
operator|->
name|state
decl_stmt|;
name|int
name|themeNumber
init|=
operator|-
literal|1
decl_stmt|;
name|QRect
name|rect
argument_list|(
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|State
name|flags
init|=
name|option
operator|->
name|state
decl_stmt|;
name|int
name|partId
init|=
literal|0
decl_stmt|;
name|int
name|stateId
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|transitionsEnabled
argument_list|()
operator|&&
name|canAnimate
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|element
operator|==
name|CE_PushButtonBevel
condition|)
block|{
name|QRect
name|oldRect
decl_stmt|;
name|QRect
name|newRect
decl_stmt|;
name|QObject
modifier|*
name|styleObject
init|=
name|option
operator|->
name|styleObject
decl_stmt|;
name|int
name|oldState
init|=
name|styleObject
operator|->
name|property
argument_list|(
literal|"_q_stylestate"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|oldRect
operator|=
name|styleObject
operator|->
name|property
argument_list|(
literal|"_q_stylerect"
argument_list|)
operator|.
name|toRect
argument_list|()
expr_stmt|;
name|newRect
operator|=
name|option
operator|->
name|rect
expr_stmt|;
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_stylestate"
argument_list|,
operator|(
name|int
operator|)
name|option
operator|->
name|state
argument_list|)
expr_stmt|;
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_stylerect"
argument_list|,
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
name|bool
name|wasDefault
init|=
literal|false
decl_stmt|;
name|bool
name|isDefault
init|=
literal|false
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|button
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|wasDefault
operator|=
name|styleObject
operator|->
name|property
argument_list|(
literal|"_q_isdefault"
argument_list|)
operator|.
name|toBool
argument_list|()
expr_stmt|;
name|isDefault
operator|=
name|button
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|DefaultButton
expr_stmt|;
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_isdefault"
argument_list|,
name|isDefault
argument_list|)
expr_stmt|;
block|}
name|bool
name|doTransition
init|=
operator|(
operator|(
name|state
operator|&
name|State_Sunken
operator|)
operator|!=
operator|(
name|oldState
operator|&
name|State_Sunken
operator|)
operator|||
operator|(
name|state
operator|&
name|State_On
operator|)
operator|!=
operator|(
name|oldState
operator|&
name|State_On
operator|)
operator|||
operator|(
name|state
operator|&
name|State_MouseOver
operator|)
operator|!=
operator|(
name|oldState
operator|&
name|State_MouseOver
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|oldRect
operator|!=
name|newRect
operator|||
operator|(
name|wasDefault
operator|&&
operator|!
name|isDefault
operator|)
condition|)
block|{
name|doTransition
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|stopAnimation
argument_list|(
name|styleObject
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doTransition
condition|)
block|{
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_no_animation"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QWindowsVistaTransition
modifier|*
name|t
init|=
operator|new
name|QWindowsVistaTransition
argument_list|(
name|styleObject
argument_list|)
decl_stmt|;
name|QWindowsVistaAnimation
modifier|*
name|anim
init|=
name|qobject_cast
argument_list|<
name|QWindowsVistaAnimation
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|animation
argument_list|(
name|styleObject
argument_list|)
argument_list|)
decl_stmt|;
name|QStyleOption
modifier|*
name|styleOption
init|=
name|clonedAnimationStyleOption
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|styleOption
operator|->
name|state
operator|=
operator|(
name|QStyle
operator|::
name|State
operator|)
name|oldState
expr_stmt|;
name|QImage
name|startImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|startImage
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPainter
name|startPainter
argument_list|(
operator|&
name|startImage
argument_list|)
decl_stmt|;
comment|// Use current state of existing animation if already one is running
if|if
condition|(
operator|!
name|anim
condition|)
block|{
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|element
argument_list|,
name|styleOption
argument_list|,
operator|&
name|startPainter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|anim
operator|->
name|paint
argument_list|(
operator|&
name|startPainter
argument_list|,
name|styleOption
argument_list|)
expr_stmt|;
name|d
operator|->
name|stopAnimation
argument_list|(
name|styleObject
argument_list|)
expr_stmt|;
block|}
name|t
operator|->
name|setStartImage
argument_list|(
name|startImage
argument_list|)
expr_stmt|;
name|QImage
name|endImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|endImage
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPainter
name|endPainter
argument_list|(
operator|&
name|endImage
argument_list|)
decl_stmt|;
name|styleOption
operator|->
name|state
operator|=
name|option
operator|->
name|state
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|element
argument_list|,
name|styleOption
argument_list|,
operator|&
name|endPainter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|t
operator|->
name|setEndImage
argument_list|(
name|endImage
argument_list|)
expr_stmt|;
name|int
name|duration
init|=
literal|0
decl_stmt|;
name|HTHEME
name|theme
init|=
name|pOpenThemeData
argument_list|(
literal|0
argument_list|,
literal|L"Button"
argument_list|)
decl_stmt|;
name|int
name|fromState
init|=
name|buttonStateId
argument_list|(
name|oldState
argument_list|,
name|BP_PUSHBUTTON
argument_list|)
decl_stmt|;
name|int
name|toState
init|=
name|buttonStateId
argument_list|(
name|option
operator|->
name|state
argument_list|,
name|BP_PUSHBUTTON
argument_list|)
decl_stmt|;
if|if
condition|(
name|pGetThemeTransitionDuration
argument_list|(
name|theme
argument_list|,
name|BP_PUSHBUTTON
argument_list|,
name|fromState
argument_list|,
name|toState
argument_list|,
name|TMT_TRANSITIONDURATIONS
argument_list|,
operator|&
name|duration
argument_list|)
operator|==
name|S_OK
condition|)
name|t
operator|->
name|setDuration
argument_list|(
name|duration
argument_list|)
expr_stmt|;
else|else
name|t
operator|->
name|setDuration
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|t
operator|->
name|setStartTime
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_no_animation"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|deleteClonedAnimationStyleOption
argument_list|(
name|styleOption
argument_list|)
expr_stmt|;
name|d
operator|->
name|startAnimation
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|QWindowsVistaAnimation
modifier|*
name|anim
init|=
name|qobject_cast
argument_list|<
name|QWindowsVistaAnimation
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|animation
argument_list|(
name|styleObject
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|anim
condition|)
block|{
name|anim
operator|->
name|paint
argument_list|(
name|painter
argument_list|,
name|option
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|CE_PushButtonBevel
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|themeNumber
operator|=
name|QWindowsXPStylePrivate
operator|::
name|ButtonTheme
expr_stmt|;
name|partId
operator|=
name|BP_PUSHBUTTON
expr_stmt|;
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|CommandLinkButton
condition|)
name|partId
operator|=
name|BP_COMMANDLINK
expr_stmt|;
name|bool
name|justFlat
init|=
operator|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|Flat
operator|)
operator|&&
operator|!
operator|(
name|flags
operator|&
operator|(
name|State_On
operator||
name|State_Sunken
operator|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
operator|&&
operator|!
operator|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|Flat
operator|)
condition|)
name|stateId
operator|=
name|PBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|justFlat
condition|)
empty_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
condition|)
name|stateId
operator|=
name|PBS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|PBS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|DefaultButton
operator|&&
operator|(
name|state
operator|&
name|State_Active
operator|)
condition|)
name|stateId
operator|=
name|PBS_DEFAULTED
expr_stmt|;
else|else
name|stateId
operator|=
name|PBS_NORMAL
expr_stmt|;
if|if
condition|(
operator|!
name|justFlat
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|transitionsEnabled
argument_list|()
operator|&&
operator|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|DefaultButton
operator|)
operator|&&
operator|!
operator|(
name|state
operator|&
operator|(
name|State_Sunken
operator||
name|State_On
operator|)
operator|)
operator|&&
operator|!
operator|(
name|state
operator|&
name|State_MouseOver
operator|)
operator|&&
operator|(
name|state
operator|&
name|State_Enabled
operator|)
operator|&&
operator|(
name|state
operator|&
name|State_Active
operator|)
condition|)
block|{
name|QWindowsVistaAnimation
modifier|*
name|anim
init|=
name|qobject_cast
argument_list|<
name|QWindowsVistaAnimation
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|animation
argument_list|(
name|styleObject
argument_list|(
name|option
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|anim
condition|)
block|{
name|QImage
name|startImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|startImage
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QImage
name|alternateImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|alternateImage
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QWindowsVistaPulse
modifier|*
name|pulse
init|=
operator|new
name|QWindowsVistaPulse
argument_list|(
name|styleObject
argument_list|(
name|option
argument_list|)
argument_list|)
decl_stmt|;
name|QPainter
name|startPainter
argument_list|(
operator|&
name|startImage
argument_list|)
decl_stmt|;
name|stateId
operator|=
name|PBS_DEFAULTED
expr_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
operator|&
name|startPainter
argument_list|,
name|themeNumber
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|rect
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|QPainter
name|alternatePainter
argument_list|(
operator|&
name|alternateImage
argument_list|)
decl_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|PBS_DEFAULTED_ANIMATING
expr_stmt|;
name|theme
operator|.
name|painter
operator|=
operator|&
name|alternatePainter
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|pulse
operator|->
name|setStartImage
argument_list|(
name|startImage
argument_list|)
expr_stmt|;
name|pulse
operator|->
name|setEndImage
argument_list|(
name|alternateImage
argument_list|)
expr_stmt|;
name|pulse
operator|->
name|setStartTime
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
name|pulse
operator|->
name|setDuration
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|d
operator|->
name|startAnimation
argument_list|(
name|pulse
argument_list|)
expr_stmt|;
name|anim
operator|=
name|pulse
expr_stmt|;
block|}
if|if
condition|(
name|anim
condition|)
name|anim
operator|->
name|paint
argument_list|(
name|painter
argument_list|,
name|option
argument_list|)
expr_stmt|;
else|else
block|{
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|themeNumber
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|rect
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|themeNumber
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|rect
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|HasMenu
condition|)
block|{
name|int
name|mbiw
init|=
literal|0
decl_stmt|,
name|mbih
init|=
literal|0
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ToolBarTheme
argument_list|,
name|TP_DROPDOWNBUTTON
argument_list|)
decl_stmt|;
if|if
condition|(
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SIZE
name|size
decl_stmt|;
if|if
condition|(
name|pGetThemePartSize
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|theme
operator|.
name|partId
argument_list|,
name|theme
operator|.
name|stateId
argument_list|,
literal|0
argument_list|,
name|TS_TRUE
argument_list|,
operator|&
name|size
argument_list|)
operator|==
name|S_OK
condition|)
block|{
name|mbiw
operator|=
name|size
operator|.
name|cx
expr_stmt|;
name|mbih
operator|=
name|size
operator|.
name|cy
expr_stmt|;
block|}
block|}
name|QRect
name|ir
init|=
name|subElementRect
argument_list|(
name|SE_PushButtonContents
argument_list|,
name|option
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QStyleOptionButton
name|newBtn
init|=
operator|*
name|btn
decl_stmt|;
name|newBtn
operator|.
name|rect
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|ir
operator|.
name|right
argument_list|()
operator|-
name|mbiw
operator|-
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|top
argument_list|()
operator|+
operator|(
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|)
operator|-
operator|(
name|mbih
operator|/
literal|2
operator|)
argument_list|,
name|mbiw
operator|+
literal|1
argument_list|,
name|mbih
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|PE_IndicatorArrowDown
argument_list|,
operator|&
name|newBtn
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
break|break;
case|case
name|CE_ProgressBarContents
case|:
if|if
condition|(
specifier|const
name|QStyleOptionProgressBar
modifier|*
name|bar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|bool
name|isIndeterminate
init|=
operator|(
name|bar
operator|->
name|minimum
operator|==
literal|0
operator|&&
name|bar
operator|->
name|maximum
operator|==
literal|0
operator|)
decl_stmt|;
name|bool
name|vertical
init|=
literal|false
decl_stmt|;
name|bool
name|inverted
init|=
literal|false
decl_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionProgressBarV2
modifier|*
name|pb2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionProgressBarV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|vertical
operator|=
operator|(
name|pb2
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|)
expr_stmt|;
name|inverted
operator|=
name|pb2
operator|->
name|invertedAppearance
expr_stmt|;
block|}
if|if
condition|(
name|isIndeterminate
operator|||
operator|(
name|bar
operator|->
name|progress
operator|>
literal|0
operator|&&
operator|(
name|bar
operator|->
name|progress
operator|<
name|bar
operator|->
name|maximum
operator|)
operator|&&
name|d
operator|->
name|transitionsEnabled
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|animation
argument_list|(
name|styleObject
argument_list|(
name|option
argument_list|)
argument_list|)
condition|)
name|d
operator|->
name|startAnimation
argument_list|(
operator|new
name|QProgressStyleAnimation
argument_list|(
name|d
operator|->
name|animationFps
argument_list|,
name|styleObject
argument_list|(
name|option
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|stopAnimation
argument_list|(
name|styleObject
argument_list|(
name|option
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ProgressTheme
argument_list|,
name|vertical
condition|?
name|PP_FILLVERT
else|:
name|PP_FILL
argument_list|)
decl_stmt|;
name|theme
operator|.
name|rect
operator|=
name|option
operator|->
name|rect
expr_stmt|;
name|bool
name|reverse
init|=
operator|(
name|bar
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
operator|&&
name|inverted
operator|)
operator|||
operator|(
name|bar
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|&&
operator|!
name|inverted
operator|)
decl_stmt|;
name|QTime
name|current
init|=
name|QTime
operator|::
name|currentTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|isIndeterminate
condition|)
block|{
if|if
condition|(
name|QProgressStyleAnimation
modifier|*
name|a
init|=
name|qobject_cast
argument_list|<
name|QProgressStyleAnimation
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|animation
argument_list|(
name|styleObject
argument_list|(
name|option
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|int
name|glowSize
init|=
literal|120
decl_stmt|;
name|int
name|animationWidth
init|=
name|glowSize
operator|*
literal|2
operator|+
operator|(
name|vertical
condition|?
name|theme
operator|.
name|rect
operator|.
name|height
argument_list|()
else|:
name|theme
operator|.
name|rect
operator|.
name|width
argument_list|()
operator|)
decl_stmt|;
name|int
name|animOffset
init|=
name|a
operator|->
name|startTime
argument_list|()
operator|.
name|msecsTo
argument_list|(
name|current
argument_list|)
operator|/
literal|4
decl_stmt|;
if|if
condition|(
name|animOffset
operator|>
name|animationWidth
condition|)
name|a
operator|->
name|setStartTime
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
name|theme
operator|.
name|rect
argument_list|)
expr_stmt|;
name|QRect
name|animRect
decl_stmt|;
name|QSize
name|pixmapSize
argument_list|(
literal|14
argument_list|,
literal|14
argument_list|)
decl_stmt|;
if|if
condition|(
name|vertical
condition|)
block|{
name|animRect
operator|=
name|QRect
argument_list|(
name|theme
operator|.
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|inverted
condition|?
name|rect
operator|.
name|top
argument_list|()
operator|-
name|glowSize
operator|+
name|animOffset
else|:
name|rect
operator|.
name|bottom
argument_list|()
operator|+
name|glowSize
operator|-
name|animOffset
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|glowSize
argument_list|)
expr_stmt|;
name|pixmapSize
operator|.
name|setHeight
argument_list|(
name|animRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|animRect
operator|=
name|QRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|-
name|glowSize
operator|+
name|animOffset
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|glowSize
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|animRect
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|reverse
condition|?
name|Qt
operator|::
name|RightToLeft
else|:
name|Qt
operator|::
name|LeftToRight
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|animRect
argument_list|)
expr_stmt|;
name|pixmapSize
operator|.
name|setWidth
argument_list|(
name|animRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QString
name|name
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"qiprogress-%1-%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|pixmapSize
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|pixmapSize
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QPixmap
name|pixmap
decl_stmt|;
if|if
condition|(
operator|!
name|QPixmapCache
operator|::
name|find
argument_list|(
name|name
argument_list|,
name|pixmap
argument_list|)
condition|)
block|{
name|QImage
name|image
argument_list|(
name|pixmapSize
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|imagePainter
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|theme
operator|.
name|painter
operator|=
operator|&
name|imagePainter
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|vertical
condition|?
name|PP_FILLVERT
else|:
name|PP_FILL
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|theme
operator|.
name|rect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QLinearGradient
name|alphaGradient
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|vertical
condition|?
literal|0
else|:
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|vertical
condition|?
name|image
operator|.
name|height
argument_list|()
else|:
literal|0
argument_list|)
decl_stmt|;
name|alphaGradient
operator|.
name|setColorAt
argument_list|(
literal|0
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|alphaGradient
operator|.
name|setColorAt
argument_list|(
literal|0.5
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|220
argument_list|)
argument_list|)
expr_stmt|;
name|alphaGradient
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|imagePainter
operator|.
name|fillRect
argument_list|(
name|image
operator|.
name|rect
argument_list|()
argument_list|,
name|alphaGradient
argument_list|)
expr_stmt|;
name|imagePainter
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceIn
argument_list|)
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|imagePainter
operator|.
name|end
argument_list|()
expr_stmt|;
name|pixmap
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|name
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|drawPixmap
argument_list|(
name|animRect
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|qint64
name|progress
init|=
name|qMax
argument_list|<
name|qint64
argument_list|>
argument_list|(
name|bar
operator|->
name|progress
argument_list|,
name|bar
operator|->
name|minimum
argument_list|)
decl_stmt|;
comment|// workaround for bug in QProgressBar
if|if
condition|(
name|vertical
condition|)
block|{
name|int
name|maxHeight
init|=
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|minHeight
init|=
literal|0
decl_stmt|;
name|double
name|vc6_workaround
init|=
operator|(
operator|(
name|progress
operator|-
name|qint64
argument_list|(
name|bar
operator|->
name|minimum
argument_list|)
operator|)
operator|/
name|qMax
argument_list|(
name|double
argument_list|(
literal|1.0
argument_list|)
argument_list|,
name|double
argument_list|(
name|qint64
argument_list|(
name|bar
operator|->
name|maximum
argument_list|)
operator|-
name|qint64
argument_list|(
name|bar
operator|->
name|minimum
argument_list|)
argument_list|)
argument_list|)
operator|*
name|maxHeight
operator|)
decl_stmt|;
name|int
name|height
init|=
name|isIndeterminate
condition|?
name|maxHeight
else|:
name|qMax
argument_list|(
name|int
argument_list|(
name|vc6_workaround
argument_list|)
argument_list|,
name|minHeight
argument_list|)
decl_stmt|;
name|theme
operator|.
name|rect
operator|.
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inverted
condition|)
name|theme
operator|.
name|rect
operator|.
name|moveTop
argument_list|(
name|rect
operator|.
name|height
argument_list|()
operator|-
name|theme
operator|.
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|maxWidth
init|=
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|minWidth
init|=
literal|0
decl_stmt|;
name|double
name|vc6_workaround
init|=
operator|(
operator|(
name|progress
operator|-
name|qint64
argument_list|(
name|bar
operator|->
name|minimum
argument_list|)
operator|)
operator|/
name|qMax
argument_list|(
name|double
argument_list|(
literal|1.0
argument_list|)
argument_list|,
name|double
argument_list|(
name|qint64
argument_list|(
name|bar
operator|->
name|maximum
argument_list|)
operator|-
name|qint64
argument_list|(
name|bar
operator|->
name|minimum
argument_list|)
argument_list|)
argument_list|)
operator|*
name|maxWidth
operator|)
decl_stmt|;
name|int
name|width
init|=
name|isIndeterminate
condition|?
name|maxWidth
else|:
name|qMax
argument_list|(
name|int
argument_list|(
name|vc6_workaround
argument_list|)
argument_list|,
name|minWidth
argument_list|)
decl_stmt|;
name|theme
operator|.
name|rect
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|reverse
condition|?
name|Qt
operator|::
name|RightToLeft
else|:
name|Qt
operator|::
name|LeftToRight
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|theme
operator|.
name|rect
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
if|if
condition|(
name|QProgressStyleAnimation
modifier|*
name|a
init|=
name|qobject_cast
argument_list|<
name|QProgressStyleAnimation
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|animation
argument_list|(
name|styleObject
argument_list|(
name|option
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|int
name|glowSize
init|=
literal|140
decl_stmt|;
name|int
name|animationWidth
init|=
name|glowSize
operator|*
literal|2
operator|+
operator|(
name|vertical
condition|?
name|theme
operator|.
name|rect
operator|.
name|height
argument_list|()
else|:
name|theme
operator|.
name|rect
operator|.
name|width
argument_list|()
operator|)
decl_stmt|;
name|int
name|animOffset
init|=
name|a
operator|->
name|startTime
argument_list|()
operator|.
name|msecsTo
argument_list|(
name|current
argument_list|)
operator|/
literal|4
decl_stmt|;
name|theme
operator|.
name|partId
operator|=
name|vertical
condition|?
name|PP_MOVEOVERLAYVERT
else|:
name|PP_MOVEOVERLAY
expr_stmt|;
if|if
condition|(
name|animOffset
operator|>
name|animationWidth
condition|)
block|{
if|if
condition|(
name|bar
operator|->
name|progress
operator|<
name|bar
operator|->
name|maximum
condition|)
name|a
operator|->
name|setStartTime
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|stopAnimation
argument_list|(
name|styleObject
argument_list|(
name|option
argument_list|)
argument_list|)
expr_stmt|;
comment|//we stop the glow motion only after it has
comment|//moved out of view
block|}
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
name|theme
operator|.
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|vertical
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|theme
operator|.
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|inverted
condition|?
name|rect
operator|.
name|top
argument_list|()
operator|-
name|glowSize
operator|+
name|animOffset
else|:
name|rect
operator|.
name|bottom
argument_list|()
operator|+
name|glowSize
operator|-
name|animOffset
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|glowSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|-
name|glowSize
operator|+
name|animOffset
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|glowSize
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|reverse
condition|?
name|Qt
operator|::
name|RightToLeft
else|:
name|Qt
operator|::
name|LeftToRight
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|theme
operator|.
name|rect
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|CE_MenuBarItem
case|:
block|{
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|mbi
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|mbi
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|DefaultItem
condition|)
break|break;
name|QPalette
operator|::
name|ColorRole
name|textRole
init|=
name|disabled
condition|?
name|QPalette
operator|::
name|Text
else|:
name|QPalette
operator|::
name|ButtonText
decl_stmt|;
name|QPixmap
name|pix
init|=
name|mbi
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
name|QIcon
operator|::
name|Normal
argument_list|)
decl_stmt|;
name|uint
name|alignment
init|=
name|Qt
operator|::
name|AlignCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|TextDontClip
operator||
name|Qt
operator|::
name|TextSingleLine
decl_stmt|;
if|if
condition|(
operator|!
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|mbi
argument_list|,
name|widget
argument_list|)
condition|)
name|alignment
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
if|if
condition|(
name|widget
condition|)
block|{
comment|// Not needed for QtQuick Controls
comment|//The rect adjustment is a workaround for the menu not really filling its background.
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|MenuTheme
argument_list|,
name|MENU_BARBACKGROUND
argument_list|,
literal|0
argument_list|,
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
name|int
name|stateId
init|=
name|MBI_NORMAL
decl_stmt|;
if|if
condition|(
name|disabled
condition|)
name|stateId
operator|=
name|MBI_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|pressed
condition|)
name|stateId
operator|=
name|MBI_PUSHED
expr_stmt|;
elseif|else
if|if
condition|(
name|selected
condition|)
name|stateId
operator|=
name|MBI_HOT
expr_stmt|;
name|XPThemeData
name|theme2
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|MenuTheme
argument_list|,
name|MENU_BARITEM
argument_list|,
name|stateId
argument_list|,
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pix
operator|.
name|isNull
argument_list|()
condition|)
name|drawItemPixmap
argument_list|(
name|painter
argument_list|,
name|mbi
operator|->
name|rect
argument_list|,
name|alignment
argument_list|,
name|pix
argument_list|)
expr_stmt|;
else|else
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|mbi
operator|->
name|rect
argument_list|,
name|alignment
argument_list|,
name|mbi
operator|->
name|palette
argument_list|,
name|mbi
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|mbi
operator|->
name|text
argument_list|,
name|textRole
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_MENU
case|case
name|CE_MenuItem
case|:
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|menuitem
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
comment|// windows always has a check column, regardless whether we have an icon or not
name|int
name|checkcol
init|=
literal|25
decl_stmt|;
block|{
name|SIZE
name|size
decl_stmt|;
name|MARGINS
name|margins
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|MenuTheme
argument_list|,
name|MENU_POPUPCHECKBACKGROUND
argument_list|,
name|MBI_HOT
argument_list|)
decl_stmt|;
name|pGetThemePartSize
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|MENU_POPUPCHECK
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|TS_TRUE
argument_list|,
operator|&
name|size
argument_list|)
expr_stmt|;
name|pGetThemeMargins
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|MENU_POPUPCHECK
argument_list|,
literal|0
argument_list|,
name|TMT_CONTENTMARGINS
argument_list|,
name|NULL
argument_list|,
operator|&
name|margins
argument_list|)
expr_stmt|;
name|checkcol
operator|=
name|qMax
argument_list|(
name|menuitem
operator|->
name|maxIconWidth
argument_list|,
name|int
argument_list|(
literal|3
operator|+
name|size
operator|.
name|cx
operator|+
name|margins
operator|.
name|cxLeftWidth
operator|+
name|margins
operator|.
name|cxRightWidth
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
comment|//draw vertical menu line
if|if
condition|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|checkcol
operator|+=
name|rect
operator|.
name|x
argument_list|()
expr_stmt|;
name|QPoint
name|p1
init|=
name|QStyle
operator|::
name|visualPos
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QPoint
argument_list|(
name|checkcol
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QPoint
name|p2
init|=
name|QStyle
operator|::
name|visualPos
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QPoint
argument_list|(
name|checkcol
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QRect
name|gutterRect
argument_list|(
name|p1
operator|.
name|x
argument_list|()
argument_list|,
name|p1
operator|.
name|y
argument_list|()
argument_list|,
literal|3
argument_list|,
name|p2
operator|.
name|y
argument_list|()
operator|-
name|p1
operator|.
name|y
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|XPThemeData
name|theme2
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|MenuTheme
argument_list|,
name|MENU_POPUPGUTTER
argument_list|,
name|stateId
argument_list|,
name|gutterRect
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme2
argument_list|)
expr_stmt|;
name|int
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
name|menuitem
operator|->
name|rect
operator|.
name|getRect
argument_list|(
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
name|int
name|tab
init|=
name|menuitem
operator|->
name|tabWidth
decl_stmt|;
name|bool
name|dis
init|=
operator|!
operator|(
name|menuitem
operator|->
name|state
operator|&
name|State_Enabled
operator|)
decl_stmt|;
name|bool
name|checked
init|=
name|menuitem
operator|->
name|checkType
operator|!=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
condition|?
name|menuitem
operator|->
name|checked
else|:
literal|false
decl_stmt|;
name|bool
name|act
init|=
name|menuitem
operator|->
name|state
operator|&
name|State_Selected
decl_stmt|;
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|Separator
condition|)
block|{
name|int
name|yoff
init|=
name|y
operator|-
literal|2
operator|+
name|h
operator|/
literal|2
decl_stmt|;
name|QPoint
name|p1
init|=
name|QPoint
argument_list|(
name|x
operator|+
name|checkcol
argument_list|,
name|yoff
argument_list|)
decl_stmt|;
name|QPoint
name|p2
init|=
name|QPoint
argument_list|(
name|x
operator|+
name|w
operator|+
literal|6
argument_list|,
name|yoff
argument_list|)
decl_stmt|;
name|stateId
operator|=
name|MBI_HOT
expr_stmt|;
name|QRect
name|subRect
argument_list|(
name|p1
operator|.
name|x
argument_list|()
operator|+
operator|(
literal|3
operator|-
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|)
argument_list|,
name|p1
operator|.
name|y
argument_list|()
argument_list|,
name|p2
operator|.
name|x
argument_list|()
operator|-
name|p1
operator|.
name|x
argument_list|()
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|subRect
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|subRect
argument_list|)
expr_stmt|;
name|XPThemeData
name|theme2
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|MenuTheme
argument_list|,
name|MENU_POPUPSEPARATOR
argument_list|,
name|stateId
argument_list|,
name|subRect
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme2
argument_list|)
expr_stmt|;
return|return;
block|}
name|QRect
name|vCheckRect
init|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|checkcol
operator|-
operator|(
literal|3
operator|+
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|)
argument_list|,
name|menuitem
operator|->
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|act
condition|)
block|{
name|stateId
operator|=
name|dis
condition|?
name|MBI_DISABLED
else|:
name|MBI_HOT
expr_stmt|;
name|XPThemeData
name|theme2
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|MenuTheme
argument_list|,
name|MENU_POPUPITEM
argument_list|,
name|stateId
argument_list|,
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checked
condition|)
block|{
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|MenuTheme
argument_list|,
name|MENU_POPUPCHECKBACKGROUND
argument_list|,
name|menuitem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|?
name|MBI_HOT
else|:
name|MBI_PUSHED
argument_list|,
name|vCheckRect
argument_list|)
decl_stmt|;
name|SIZE
name|size
decl_stmt|;
name|MARGINS
name|margins
decl_stmt|;
name|pGetThemePartSize
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|MENU_POPUPCHECK
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|TS_TRUE
argument_list|,
operator|&
name|size
argument_list|)
expr_stmt|;
name|pGetThemeMargins
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|MENU_POPUPCHECK
argument_list|,
literal|0
argument_list|,
name|TMT_CONTENTMARGINS
argument_list|,
name|NULL
argument_list|,
operator|&
name|margins
argument_list|)
expr_stmt|;
name|QRect
name|checkRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|cx
operator|+
name|margins
operator|.
name|cxLeftWidth
operator|+
name|margins
operator|.
name|cxRightWidth
argument_list|,
name|size
operator|.
name|cy
operator|+
name|margins
operator|.
name|cyBottomHeight
operator|+
name|margins
operator|.
name|cyTopHeight
argument_list|)
decl_stmt|;
name|checkRect
operator|.
name|moveCenter
argument_list|(
name|vCheckRect
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|checkRect
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
if|if
condition|(
name|menuitem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|checkRect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|cx
argument_list|,
name|size
operator|.
name|cy
argument_list|)
expr_stmt|;
name|checkRect
operator|.
name|moveCenter
argument_list|(
name|theme
operator|.
name|rect
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|checkRect
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|MENU_POPUPCHECK
expr_stmt|;
name|bool
name|bullet
init|=
name|menuitem
operator|->
name|checkType
operator|&
name|QStyleOptionMenuItem
operator|::
name|Exclusive
decl_stmt|;
if|if
condition|(
name|dis
condition|)
name|theme
operator|.
name|stateId
operator|=
name|bullet
condition|?
name|MC_BULLETDISABLED
else|:
name|MC_CHECKMARKDISABLED
expr_stmt|;
else|else
name|theme
operator|.
name|stateId
operator|=
name|bullet
condition|?
name|MC_BULLETNORMAL
else|:
name|MC_CHECKMARKNORMAL
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|menuitem
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|dis
condition|?
name|QIcon
operator|::
name|Disabled
else|:
name|QIcon
operator|::
name|Normal
decl_stmt|;
if|if
condition|(
name|act
operator|&&
operator|!
name|dis
condition|)
name|mode
operator|=
name|QIcon
operator|::
name|Active
expr_stmt|;
name|QPixmap
name|pixmap
decl_stmt|;
if|if
condition|(
name|checked
condition|)
name|pixmap
operator|=
name|menuitem
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
name|mode
argument_list|,
name|QIcon
operator|::
name|On
argument_list|)
expr_stmt|;
else|else
name|pixmap
operator|=
name|menuitem
operator|->
name|icon
operator|.
name|pixmap
argument_list|(
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|int
name|pixw
init|=
name|pixmap
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|pixh
init|=
name|pixmap
operator|.
name|height
argument_list|()
decl_stmt|;
name|QRect
name|pmr
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pixw
argument_list|,
name|pixh
argument_list|)
decl_stmt|;
name|pmr
operator|.
name|moveCenter
argument_list|(
name|vCheckRect
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|pmr
operator|.
name|topLeft
argument_list|()
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setPen
argument_list|(
name|menuitem
operator|->
name|palette
operator|.
name|buttonText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QColor
name|textColor
init|=
name|menuitem
operator|->
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
if|if
condition|(
name|dis
condition|)
name|painter
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|int
name|xm
init|=
name|windowsItemFrame
operator|+
name|checkcol
operator|+
name|windowsItemHMargin
operator|+
operator|(
literal|3
operator|-
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|)
operator|-
literal|1
decl_stmt|;
name|int
name|xpos
init|=
name|menuitem
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|xm
decl_stmt|;
name|QRect
name|textRect
argument_list|(
name|xpos
argument_list|,
name|y
operator|+
name|windowsItemVMargin
argument_list|,
name|w
operator|-
name|xm
operator|-
name|windowsRightBorder
operator|-
name|tab
operator|+
literal|1
argument_list|,
name|h
operator|-
literal|2
operator|*
name|windowsItemVMargin
argument_list|)
decl_stmt|;
name|QRect
name|vTextRect
init|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|textRect
argument_list|)
decl_stmt|;
name|QString
name|s
init|=
name|menuitem
operator|->
name|text
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// draw text
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|int
name|t
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|text_flags
init|=
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
operator||
name|Qt
operator|::
name|TextDontClip
operator||
name|Qt
operator|::
name|TextSingleLine
decl_stmt|;
if|if
condition|(
operator|!
name|proxy
argument_list|()
operator|->
name|styleHint
argument_list|(
name|SH_UnderlineShortcut
argument_list|,
name|menuitem
argument_list|,
name|widget
argument_list|)
condition|)
name|text_flags
operator||=
name|Qt
operator|::
name|TextHideMnemonic
expr_stmt|;
name|text_flags
operator||=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
if|if
condition|(
name|t
operator|>=
literal|0
condition|)
block|{
name|QRect
name|vShortcutRect
init|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|textRect
operator|.
name|topRight
argument_list|()
argument_list|,
name|QPoint
argument_list|(
name|menuitem
operator|->
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|textRect
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|painter
operator|->
name|drawText
argument_list|(
name|vShortcutRect
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|mid
argument_list|(
name|t
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|QFont
name|font
init|=
name|menuitem
operator|->
name|font
decl_stmt|;
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|DefaultItem
condition|)
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawText
argument_list|(
name|vTextRect
argument_list|,
name|text_flags
argument_list|,
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|==
name|QStyleOptionMenuItem
operator|::
name|SubMenu
condition|)
block|{
comment|// draw sub menu arrow
name|int
name|dim
init|=
operator|(
name|h
operator|-
literal|2
operator|*
name|windowsItemFrame
operator|)
operator|/
literal|2
decl_stmt|;
name|PrimitiveElement
name|arrow
decl_stmt|;
name|arrow
operator|=
operator|(
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
condition|?
name|PE_IndicatorArrowLeft
else|:
name|PE_IndicatorArrowRight
expr_stmt|;
name|xpos
operator|=
name|x
operator|+
name|w
operator|-
name|windowsArrowHMargin
operator|-
name|windowsItemFrame
operator|-
name|dim
expr_stmt|;
name|QRect
name|vSubMenuRect
init|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|menuitem
operator|->
name|rect
argument_list|,
name|QRect
argument_list|(
name|xpos
argument_list|,
name|y
operator|+
name|h
operator|/
literal|2
operator|-
name|dim
operator|/
literal|2
argument_list|,
name|dim
argument_list|,
name|dim
argument_list|)
argument_list|)
decl_stmt|;
name|QStyleOptionMenuItem
name|newMI
init|=
operator|*
name|menuitem
decl_stmt|;
name|newMI
operator|.
name|rect
operator|=
name|vSubMenuRect
expr_stmt|;
name|newMI
operator|.
name|state
operator|=
name|dis
condition|?
name|State_None
else|:
name|State_Enabled
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|arrow
argument_list|,
operator|&
name|newMI
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_MENU
case|case
name|CE_HeaderSection
case|:
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|header
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|partId
operator|=
name|HP_HEADERITEM
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|State_Sunken
condition|)
name|stateId
operator|=
name|HIS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|HIS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|HIS_NORMAL
expr_stmt|;
if|if
condition|(
name|header
operator|->
name|sortIndicator
operator|!=
name|QStyleOptionHeader
operator|::
name|None
condition|)
name|stateId
operator|+=
literal|3
expr_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|HeaderTheme
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CE_MenuBarEmptyArea
case|:
block|{
name|stateId
operator|=
name|MBI_NORMAL
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|MBI_DISABLED
expr_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|MenuTheme
argument_list|,
name|MENU_BARBACKGROUND
argument_list|,
name|stateId
argument_list|,
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CE_ToolBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionToolBar
modifier|*
name|toolbar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionToolBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QPalette
name|pal
init|=
name|option
operator|->
name|palette
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|,
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|130
argument_list|)
argument_list|)
expr_stmt|;
name|QStyleOptionToolBar
name|copyOpt
init|=
operator|*
name|toolbar
decl_stmt|;
name|copyOpt
operator|.
name|palette
operator|=
name|pal
expr_stmt|;
name|QWindowsStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
operator|&
name|copyOpt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CE_DockWidgetTitle
case|:
if|if
condition|(
specifier|const
name|QStyleOptionDockWidget
modifier|*
name|dwOpt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidget
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
specifier|const
name|QDockWidget
modifier|*
name|dockWidget
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|option
operator|->
name|rect
decl_stmt|;
if|if
condition|(
name|dockWidget
operator|&&
name|dockWidget
operator|->
name|isFloating
argument_list|()
condition|)
block|{
name|QWindowsXPStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
comment|//otherwise fall through
block|}
specifier|const
name|QStyleOptionDockWidgetV2
modifier|*
name|v2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionDockWidgetV2
operator|*
argument_list|>
argument_list|(
name|dwOpt
argument_list|)
decl_stmt|;
name|bool
name|verticalTitleBar
init|=
name|v2
operator|==
literal|0
condition|?
literal|false
else|:
name|v2
operator|->
name|verticalTitleBar
decl_stmt|;
if|if
condition|(
name|verticalTitleBar
condition|)
block|{
name|QSize
name|s
init|=
name|rect
operator|.
name|size
argument_list|()
decl_stmt|;
name|s
operator|.
name|transpose
argument_list|()
expr_stmt|;
name|rect
operator|.
name|setSize
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
operator|-
name|rect
operator|.
name|left
argument_list|()
operator|+
literal|1
argument_list|,
operator|-
name|rect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setBrush
argument_list|(
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|110
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|->
name|palette
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|130
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|buttonMargin
init|=
literal|4
decl_stmt|;
name|int
name|mw
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DockWidgetTitleMargin
argument_list|,
name|dwOpt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|fw
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DockWidgetFrameWidth
argument_list|,
name|dwOpt
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|QDockWidget
modifier|*
name|dw
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|bool
name|isFloating
init|=
name|dw
operator|!=
literal|0
operator|&&
name|dw
operator|->
name|isFloating
argument_list|()
decl_stmt|;
name|QRect
name|r
init|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|3
argument_list|)
decl_stmt|;
name|QRect
name|titleRect
init|=
name|r
decl_stmt|;
if|if
condition|(
name|dwOpt
operator|->
name|closable
condition|)
block|{
name|QSize
name|sz
init|=
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarCloseButton
argument_list|,
name|dwOpt
argument_list|,
name|widget
argument_list|)
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|titleRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|sz
operator|.
name|width
argument_list|()
operator|-
name|mw
operator|-
name|buttonMargin
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dwOpt
operator|->
name|floatable
condition|)
block|{
name|QSize
name|sz
init|=
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarMaxButton
argument_list|,
name|dwOpt
argument_list|,
name|widget
argument_list|)
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|titleRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|sz
operator|.
name|width
argument_list|()
operator|-
name|mw
operator|-
name|buttonMargin
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isFloating
condition|)
block|{
name|titleRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
operator|-
name|fw
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|!=
literal|0
operator|&&
name|widget
operator|->
name|windowIcon
argument_list|()
operator|.
name|cacheKey
argument_list|()
operator|!=
name|QApplication
operator|::
name|windowIcon
argument_list|()
operator|.
name|cacheKey
argument_list|()
condition|)
name|titleRect
operator|.
name|adjust
argument_list|(
name|titleRect
operator|.
name|height
argument_list|()
operator|+
name|mw
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|titleRect
operator|.
name|adjust
argument_list|(
name|mw
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dwOpt
operator|->
name|floatable
operator|&&
operator|!
name|dwOpt
operator|->
name|closable
condition|)
name|titleRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|mw
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|verticalTitleBar
condition|)
name|titleRect
operator|=
name|visualRect
argument_list|(
name|dwOpt
operator|->
name|direction
argument_list|,
name|r
argument_list|,
name|titleRect
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dwOpt
operator|->
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|titleText
init|=
name|painter
operator|->
name|fontMetrics
argument_list|()
operator|.
name|elidedText
argument_list|(
name|dwOpt
operator|->
name|title
argument_list|,
name|Qt
operator|::
name|ElideRight
argument_list|,
name|verticalTitleBar
condition|?
name|titleRect
operator|.
name|height
argument_list|()
else|:
name|titleRect
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|indent
init|=
literal|4
decl_stmt|;
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|rect
operator|.
name|adjusted
argument_list|(
name|indent
operator|+
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
name|indent
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|,
name|dwOpt
operator|->
name|palette
argument_list|,
name|dwOpt
operator|->
name|state
operator|&
name|State_Enabled
argument_list|,
name|titleText
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
case|case
name|CE_ItemViewItem
case|:
block|{
specifier|const
name|QStyleOptionViewItem
modifier|*
name|vopt
decl_stmt|;
specifier|const
name|QAbstractItemView
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|bool
name|newStyle
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|newStyle
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|newStyle
operator|&&
name|view
operator|&&
operator|(
name|vopt
operator|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
operator|)
condition|)
block|{
comment|/*                 // We cannot currently get the correct selection color for "explorer style" views                 COLORREF cref = 0;                 XPThemeData theme(d->treeViewHelper(), 0, QLatin1String("LISTVIEW"), 0, 0);                 unsigned int res = pGetThemeColor(theme.handle(), LVP_LISTITEM, LISS_SELECTED, TMT_TEXTCOLOR,&cref);                 QColor textColor(GetRValue(cref), GetGValue(cref), GetBValue(cref));                 */
name|QPalette
name|palette
init|=
name|vopt
operator|->
name|palette
decl_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
comment|// Note that setting a saturated color here results in ugly XOR colors in the focus rect
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|palette
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|108
argument_list|)
argument_list|)
expr_stmt|;
name|QStyleOptionViewItem
name|adjustedOption
init|=
operator|*
name|vopt
decl_stmt|;
name|adjustedOption
operator|.
name|palette
operator|=
name|palette
expr_stmt|;
comment|// We hide the  focusrect in singleselection as it is not required
if|if
condition|(
operator|(
name|view
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|SingleSelection
operator|)
operator|&&
operator|!
operator|(
name|vopt
operator|->
name|state
operator|&
name|State_KeyboardFocusChange
operator|)
condition|)
name|adjustedOption
operator|.
name|state
operator|&=
operator|~
name|State_HasFocus
expr_stmt|;
name|QWindowsXPStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
operator|&
name|adjustedOption
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowsXPStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_ITEMVIEWS
default|default:
name|QWindowsXPStyle
operator|::
name|drawControl
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal    see drawPrimitive for comments on the animation support   */
end_comment
begin_function
DECL|function|drawComplexControl
name|void
name|QWindowsVistaStyle
operator|::
name|drawComplexControl
parameter_list|(
name|ComplexControl
name|control
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QWindowsVistaStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsVistaStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QWindowsVistaStylePrivate
operator|::
name|useVista
argument_list|()
condition|)
block|{
foreach|foreach
control|(
specifier|const
name|QObject
modifier|*
name|target
decl|,
name|d
operator|->
name|animationTargets
argument_list|()
control|)
name|d
operator|->
name|stopAnimation
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|QWindowsStyle
operator|::
name|drawComplexControl
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return;
block|}
name|State
name|state
init|=
name|option
operator|->
name|state
decl_stmt|;
name|SubControls
name|sub
init|=
name|option
operator|->
name|subControls
decl_stmt|;
name|QRect
name|r
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|int
name|partId
init|=
literal|0
decl_stmt|;
name|int
name|stateId
init|=
literal|0
decl_stmt|;
name|State
name|flags
init|=
name|option
operator|->
name|state
decl_stmt|;
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_UnderMouse
argument_list|)
operator|&&
name|widget
operator|->
name|isActiveWindow
argument_list|()
condition|)
name|flags
operator||=
name|State_MouseOver
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|transitionsEnabled
argument_list|()
operator|&&
name|canAnimate
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|control
operator|==
name|CC_ScrollBar
operator|||
name|control
operator|==
name|CC_SpinBox
condition|)
block|{
name|QObject
modifier|*
name|styleObject
init|=
name|option
operator|->
name|styleObject
decl_stmt|;
comment|// Can be widget or qquickitem
name|int
name|oldState
init|=
name|styleObject
operator|->
name|property
argument_list|(
literal|"_q_stylestate"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|oldActiveControls
init|=
name|styleObject
operator|->
name|property
argument_list|(
literal|"_q_stylecontrols"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QRect
name|oldRect
init|=
name|styleObject
operator|->
name|property
argument_list|(
literal|"_q_stylerect"
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_stylestate"
argument_list|,
operator|(
name|int
operator|)
name|option
operator|->
name|state
argument_list|)
expr_stmt|;
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_stylecontrols"
argument_list|,
operator|(
name|int
operator|)
name|option
operator|->
name|activeSubControls
argument_list|)
expr_stmt|;
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_stylerect"
argument_list|,
name|option
operator|->
name|rect
argument_list|)
expr_stmt|;
name|bool
name|doTransition
init|=
operator|(
operator|(
name|state
operator|&
name|State_Sunken
operator|)
operator|!=
operator|(
name|oldState
operator|&
name|State_Sunken
operator|)
operator|||
operator|(
name|state
operator|&
name|State_On
operator|)
operator|!=
operator|(
name|oldState
operator|&
name|State_On
operator|)
operator|||
operator|(
name|state
operator|&
name|State_MouseOver
operator|)
operator|!=
operator|(
name|oldState
operator|&
name|State_MouseOver
operator|)
operator|||
name|oldActiveControls
operator|!=
name|int
argument_list|(
name|option
operator|->
name|activeSubControls
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|oldSliderPos
init|=
name|styleObject
operator|->
name|property
argument_list|(
literal|"_q_stylesliderpos"
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|QRect
name|currentPos
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarSlider
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_stylesliderpos"
argument_list|,
name|currentPos
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldSliderPos
operator|!=
name|currentPos
condition|)
block|{
name|doTransition
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|stopAnimation
argument_list|(
name|styleObject
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|control
operator|==
name|CC_SpinBox
condition|)
block|{
comment|//spinboxes have a transition when focus changes
if|if
condition|(
operator|!
name|doTransition
condition|)
name|doTransition
operator|=
operator|(
name|state
operator|&
name|State_HasFocus
operator|)
operator|!=
operator|(
name|oldState
operator|&
name|State_HasFocus
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|oldRect
operator|!=
name|option
operator|->
name|rect
condition|)
block|{
name|doTransition
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|stopAnimation
argument_list|(
name|styleObject
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doTransition
condition|)
block|{
name|QImage
name|startImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|startImage
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPainter
name|startPainter
argument_list|(
operator|&
name|startImage
argument_list|)
decl_stmt|;
name|QImage
name|endImage
argument_list|(
name|option
operator|->
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|endImage
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPainter
name|endPainter
argument_list|(
operator|&
name|endImage
argument_list|)
decl_stmt|;
name|QWindowsVistaAnimation
modifier|*
name|anim
init|=
name|qobject_cast
argument_list|<
name|QWindowsVistaAnimation
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|animation
argument_list|(
name|styleObject
argument_list|)
argument_list|)
decl_stmt|;
name|QWindowsVistaTransition
modifier|*
name|t
init|=
operator|new
name|QWindowsVistaTransition
argument_list|(
name|styleObject
argument_list|)
decl_stmt|;
comment|// Draw the image that ends the animation by using the current styleoption
name|QStyleOptionComplex
modifier|*
name|styleOption
init|=
name|qstyleoption_cast
argument_list|<
name|QStyleOptionComplex
operator|*
argument_list|>
argument_list|(
name|clonedAnimationStyleOption
argument_list|(
name|option
argument_list|)
argument_list|)
decl_stmt|;
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_no_animation"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Draw transition source
if|if
condition|(
operator|!
name|anim
condition|)
block|{
name|styleOption
operator|->
name|state
operator|=
operator|(
name|QStyle
operator|::
name|State
operator|)
name|oldState
expr_stmt|;
name|styleOption
operator|->
name|activeSubControls
operator|=
operator|(
name|QStyle
operator|::
name|SubControl
operator|)
name|oldActiveControls
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|control
argument_list|,
name|styleOption
argument_list|,
operator|&
name|startPainter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|anim
operator|->
name|paint
argument_list|(
operator|&
name|startPainter
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
name|t
operator|->
name|setStartImage
argument_list|(
name|startImage
argument_list|)
expr_stmt|;
comment|// Draw transition target
name|styleOption
operator|->
name|state
operator|=
name|option
operator|->
name|state
expr_stmt|;
name|styleOption
operator|->
name|activeSubControls
operator|=
name|option
operator|->
name|activeSubControls
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|control
argument_list|,
name|styleOption
argument_list|,
operator|&
name|endPainter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|styleObject
operator|->
name|setProperty
argument_list|(
literal|"_q_no_animation"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|t
operator|->
name|setEndImage
argument_list|(
name|endImage
argument_list|)
expr_stmt|;
name|t
operator|->
name|setStartTime
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
operator|||
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|t
operator|->
name|setDuration
argument_list|(
literal|150
argument_list|)
expr_stmt|;
else|else
name|t
operator|->
name|setDuration
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|deleteClonedAnimationStyleOption
argument_list|(
name|styleOption
argument_list|)
expr_stmt|;
name|d
operator|->
name|startAnimation
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QWindowsVistaAnimation
modifier|*
name|anim
init|=
name|qobject_cast
argument_list|<
name|QWindowsVistaAnimation
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|animation
argument_list|(
name|styleObject
argument_list|)
argument_list|)
condition|)
block|{
name|anim
operator|->
name|paint
argument_list|(
name|painter
argument_list|,
name|option
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
switch|switch
condition|(
name|control
condition|)
block|{
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cmb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|cmb
operator|->
name|editable
condition|)
block|{
if|if
condition|(
name|sub
operator|&
name|SC_ComboBoxEditField
condition|)
block|{
name|partId
operator|=
name|EP_EDITBORDER_NOSCROLL
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|ETS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|ETS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_HasFocus
condition|)
name|stateId
operator|=
name|ETS_FOCUSED
expr_stmt|;
else|else
name|stateId
operator|=
name|ETS_NORMAL
expr_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|EditTheme
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_ComboBoxArrow
condition|)
block|{
name|QRect
name|subRect
init|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ComboBox
argument_list|,
name|option
argument_list|,
name|SC_ComboBoxArrow
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ComboboxTheme
argument_list|)
decl_stmt|;
name|theme
operator|.
name|rect
operator|=
name|subRect
expr_stmt|;
name|partId
operator|=
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|?
name|CP_DROPDOWNBUTTONLEFT
else|:
name|CP_DROPDOWNBUTTONRIGHT
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|cmb
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|CBXS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|cmb
operator|->
name|state
operator|&
name|State_Sunken
operator|||
name|cmb
operator|->
name|state
operator|&
name|State_On
condition|)
name|stateId
operator|=
name|CBXS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|cmb
operator|->
name|state
operator|&
name|State_MouseOver
operator|&&
name|option
operator|->
name|activeSubControls
operator|&
name|SC_ComboBoxArrow
condition|)
name|stateId
operator|=
name|CBXS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|CBXS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|sub
operator|&
name|SC_ComboBoxFrame
condition|)
block|{
name|QStyleOptionButton
name|btn
decl_stmt|;
name|btn
operator|.
name|QStyleOption
operator|::
name|operator
name|=
argument_list|(
operator|*
name|option
argument_list|)
expr_stmt|;
name|btn
operator|.
name|rect
operator|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|sub
operator|&
name|SC_ComboBoxArrow
condition|)
name|btn
operator|.
name|features
operator|=
name|QStyleOptionButton
operator|::
name|HasMenu
expr_stmt|;
name|proxy
argument_list|()
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_PushButton
argument_list|,
operator|&
name|btn
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|CC_ScrollBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSlider
modifier|*
name|scrollbar
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSlider
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ScrollBarTheme
argument_list|)
decl_stmt|;
name|bool
name|maxedOut
init|=
operator|(
name|scrollbar
operator|->
name|maximum
operator|==
name|scrollbar
operator|->
name|minimum
operator|)
decl_stmt|;
if|if
condition|(
name|maxedOut
condition|)
name|flags
operator|&=
operator|~
name|State_Enabled
expr_stmt|;
name|bool
name|isHorz
init|=
name|flags
operator|&
name|State_Horizontal
decl_stmt|;
name|bool
name|isRTL
init|=
name|option
operator|->
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
decl_stmt|;
if|if
condition|(
name|sub
operator|&
name|SC_ScrollBarAddLine
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarAddLine
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|SBP_ARROWBTN
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_LEFTDISABLED
else|:
name|ABS_RIGHTDISABLED
operator|)
else|:
name|ABS_DOWNDISABLED
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarAddLine
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_LEFTPRESSED
else|:
name|ABS_RIGHTPRESSED
operator|)
else|:
name|ABS_DOWNPRESSED
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarAddLine
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_LEFTHOT
else|:
name|ABS_RIGHTHOT
operator|)
else|:
name|ABS_DOWNHOT
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|state
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_LEFTHOVER
else|:
name|ABS_RIGHTHOVER
operator|)
else|:
name|ABS_DOWNHOVER
operator|)
expr_stmt|;
else|else
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_LEFTNORMAL
else|:
name|ABS_RIGHTNORMAL
operator|)
else|:
name|ABS_DOWNNORMAL
operator|)
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_ScrollBarSubLine
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarSubLine
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|SBP_ARROWBTN
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_RIGHTDISABLED
else|:
name|ABS_LEFTDISABLED
operator|)
else|:
name|ABS_UPDISABLED
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSubLine
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_RIGHTPRESSED
else|:
name|ABS_LEFTPRESSED
operator|)
else|:
name|ABS_UPPRESSED
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSubLine
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_RIGHTHOT
else|:
name|ABS_LEFTHOT
operator|)
else|:
name|ABS_UPHOT
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|state
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_RIGHTHOVER
else|:
name|ABS_LEFTHOVER
operator|)
else|:
name|ABS_UPHOVER
operator|)
expr_stmt|;
else|else
name|stateId
operator|=
operator|(
name|isHorz
condition|?
operator|(
name|isRTL
condition|?
name|ABS_RIGHTNORMAL
else|:
name|ABS_LEFTNORMAL
operator|)
else|:
name|ABS_UPNORMAL
operator|)
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxedOut
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarSlider
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|theme
operator|.
name|rect
operator|.
name|united
argument_list|(
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarSubPage
argument_list|,
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|theme
operator|.
name|rect
operator|.
name|united
argument_list|(
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarAddPage
argument_list|,
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|partId
operator|=
name|flags
operator|&
name|State_Horizontal
condition|?
name|SBP_LOWERTRACKHORZ
else|:
name|SBP_LOWERTRACKVERT
expr_stmt|;
name|stateId
operator|=
name|SCRBS_DISABLED
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sub
operator|&
name|SC_ScrollBarSubPage
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarSubPage
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|flags
operator|&
name|State_Horizontal
condition|?
name|SBP_UPPERTRACKHORZ
else|:
name|SBP_UPPERTRACKVERT
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSubPage
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSubPage
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|SCRBS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_ScrollBarAddPage
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarAddPage
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|flags
operator|&
name|State_Horizontal
condition|?
name|SBP_LOWERTRACKHORZ
else|:
name|SBP_LOWERTRACKVERT
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarAddPage
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarAddPage
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|SCRBS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_ScrollBarSlider
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarSlider
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSlider
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|scrollbar
operator|->
name|activeSubControls
operator|&
name|SC_ScrollBarSlider
operator|&&
operator|(
name|scrollbar
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|SCRBS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|SCRBS_HOVER
expr_stmt|;
else|else
name|stateId
operator|=
name|SCRBS_NORMAL
expr_stmt|;
comment|// Draw handle
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_ScrollBar
argument_list|,
name|option
argument_list|,
name|SC_ScrollBarSlider
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|flags
operator|&
name|State_Horizontal
condition|?
name|SBP_THUMBBTNHORZ
else|:
name|SBP_THUMBBTNVERT
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
comment|// Calculate rect of gripper
specifier|const
name|int
name|swidth
init|=
name|theme
operator|.
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|sheight
init|=
name|theme
operator|.
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|MARGINS
name|contentsMargin
decl_stmt|;
name|RECT
name|rect
init|=
name|theme
operator|.
name|toRECT
argument_list|(
name|theme
operator|.
name|rect
argument_list|)
decl_stmt|;
name|pGetThemeMargins
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|theme
operator|.
name|partId
argument_list|,
name|theme
operator|.
name|stateId
argument_list|,
name|TMT_SIZINGMARGINS
argument_list|,
operator|&
name|rect
argument_list|,
operator|&
name|contentsMargin
argument_list|)
expr_stmt|;
name|SIZE
name|size
decl_stmt|;
name|theme
operator|.
name|partId
operator|=
name|flags
operator|&
name|State_Horizontal
condition|?
name|SBP_GRIPPERHORZ
else|:
name|SBP_GRIPPERVERT
expr_stmt|;
name|pGetThemePartSize
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|theme
operator|.
name|partId
argument_list|,
name|theme
operator|.
name|stateId
argument_list|,
literal|0
argument_list|,
name|TS_TRUE
argument_list|,
operator|&
name|size
argument_list|)
expr_stmt|;
name|int
name|gw
init|=
name|size
operator|.
name|cx
decl_stmt|,
name|gh
init|=
name|size
operator|.
name|cy
decl_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|<
name|QSysInfo
operator|::
name|WV_WINDOWS8
condition|)
block|{
name|QRect
name|gripperBounds
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|State_Horizontal
operator|&&
operator|(
operator|(
name|swidth
operator|-
name|contentsMargin
operator|.
name|cxLeftWidth
operator|-
name|contentsMargin
operator|.
name|cxRightWidth
operator|)
operator|>
name|gw
operator|)
condition|)
block|{
name|gripperBounds
operator|.
name|setLeft
argument_list|(
name|theme
operator|.
name|rect
operator|.
name|left
argument_list|()
operator|+
name|swidth
operator|/
literal|2
operator|-
name|gw
operator|/
literal|2
argument_list|)
expr_stmt|;
name|gripperBounds
operator|.
name|setTop
argument_list|(
name|theme
operator|.
name|rect
operator|.
name|top
argument_list|()
operator|+
name|sheight
operator|/
literal|2
operator|-
name|gh
operator|/
literal|2
argument_list|)
expr_stmt|;
name|gripperBounds
operator|.
name|setWidth
argument_list|(
name|gw
argument_list|)
expr_stmt|;
name|gripperBounds
operator|.
name|setHeight
argument_list|(
name|gh
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|sheight
operator|-
name|contentsMargin
operator|.
name|cyTopHeight
operator|-
name|contentsMargin
operator|.
name|cyBottomHeight
operator|)
operator|>
name|gh
condition|)
block|{
name|gripperBounds
operator|.
name|setLeft
argument_list|(
name|theme
operator|.
name|rect
operator|.
name|left
argument_list|()
operator|+
name|swidth
operator|/
literal|2
operator|-
name|gw
operator|/
literal|2
argument_list|)
expr_stmt|;
name|gripperBounds
operator|.
name|setTop
argument_list|(
name|theme
operator|.
name|rect
operator|.
name|top
argument_list|()
operator|+
name|sheight
operator|/
literal|2
operator|-
name|gh
operator|/
literal|2
argument_list|)
expr_stmt|;
name|gripperBounds
operator|.
name|setWidth
argument_list|(
name|gw
argument_list|)
expr_stmt|;
name|gripperBounds
operator|.
name|setHeight
argument_list|(
name|gh
argument_list|)
expr_stmt|;
block|}
comment|// Draw gripper if there is enough space
if|if
condition|(
operator|!
name|gripperBounds
operator|.
name|isEmpty
argument_list|()
operator|&&
name|flags
operator|&
name|State_Enabled
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|XPThemeData
name|grippBackground
init|=
name|theme
decl_stmt|;
name|grippBackground
operator|.
name|partId
operator|=
name|flags
operator|&
name|State_Horizontal
condition|?
name|SBP_LOWERTRACKHORZ
else|:
name|SBP_LOWERTRACKVERT
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|gripperBounds
expr_stmt|;
name|painter
operator|->
name|setClipRegion
argument_list|(
name|d
operator|->
name|region
argument_list|(
name|theme
argument_list|)
argument_list|)
expr_stmt|;
comment|// Only change inside the region of the gripper
name|d
operator|->
name|drawBackground
argument_list|(
name|grippBackground
argument_list|)
expr_stmt|;
comment|// The gutter is the grippers background
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
comment|// Transparent gripper ontop of background
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
case|case
name|CC_SpinBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionSpinBox
modifier|*
name|sb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionSpinBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|SpinTheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|sb
operator|->
name|frame
operator|&&
operator|(
name|sub
operator|&
name|SC_SpinBoxFrame
operator|)
condition|)
block|{
name|partId
operator|=
name|EP_EDITBORDER_NOSCROLL
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|ETS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|ETS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|State_HasFocus
condition|)
name|stateId
operator|=
name|ETS_SELECTED
expr_stmt|;
else|else
name|stateId
operator|=
name|ETS_NORMAL
expr_stmt|;
name|XPThemeData
name|ftheme
argument_list|(
name|widget
argument_list|,
name|painter
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|EditTheme
argument_list|,
name|partId
argument_list|,
name|stateId
argument_list|,
name|r
argument_list|)
decl_stmt|;
comment|// The spinbox in Windows QStyle is drawn with frameless QLineEdit inside it
comment|// That however breaks with QtQuickControls where this results in transparent
comment|// spinbox background, so if there's no "widget" passed (QtQuickControls case),
comment|// let ftheme.noContent be false, which fixes the spinbox rendering in QQC
name|ftheme
operator|.
name|noContent
operator|=
operator|(
name|widget
operator|!=
name|NULL
operator|)
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|ftheme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_SpinBoxUp
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|option
argument_list|,
name|SC_SpinBoxUp
argument_list|,
name|widget
argument_list|)
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|partId
operator|=
name|SPNP_UP
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|sb
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepUpEnabled
operator|)
operator|||
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|UPS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|sb
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxUp
operator|&&
operator|(
name|sb
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|UPS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|sb
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxUp
operator|&&
operator|(
name|sb
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|UPS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|UPS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|&
name|SC_SpinBoxDown
condition|)
block|{
name|theme
operator|.
name|rect
operator|=
name|proxy
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|CC_SpinBox
argument_list|,
name|option
argument_list|,
name|SC_SpinBoxDown
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|partId
operator|=
name|SPNP_DOWN
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|sb
operator|->
name|stepEnabled
operator|&
name|QAbstractSpinBox
operator|::
name|StepDownEnabled
operator|)
operator|||
operator|!
operator|(
name|flags
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|DNS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|sb
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxDown
operator|&&
operator|(
name|sb
operator|->
name|state
operator|&
name|State_Sunken
operator|)
condition|)
name|stateId
operator|=
name|DNS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|sb
operator|->
name|activeSubControls
operator|==
name|SC_SpinBoxDown
operator|&&
operator|(
name|sb
operator|->
name|state
operator|&
name|State_MouseOver
operator|)
condition|)
name|stateId
operator|=
name|DNS_HOT
expr_stmt|;
else|else
name|stateId
operator|=
name|DNS_NORMAL
expr_stmt|;
name|theme
operator|.
name|partId
operator|=
name|partId
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|stateId
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_SPINBOX
default|default:
name|QWindowsXPStyle
operator|::
name|drawComplexControl
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_comment
comment|/*!  \internal  */
end_comment
begin_function
DECL|function|sizeFromContents
name|QSize
name|QWindowsVistaStyle
operator|::
name|sizeFromContents
parameter_list|(
name|ContentsType
name|type
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|QWindowsVistaStylePrivate
operator|::
name|useVista
argument_list|()
condition|)
return|return
name|QWindowsStyle
operator|::
name|sizeFromContents
argument_list|(
name|type
argument_list|,
name|option
argument_list|,
name|size
argument_list|,
name|widget
argument_list|)
return|;
name|QSize
name|sz
argument_list|(
name|size
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CT_MenuItem
case|:
name|sz
operator|=
name|QWindowsXPStyle
operator|::
name|sizeFromContents
argument_list|(
name|type
argument_list|,
name|option
argument_list|,
name|size
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|int
name|minimumHeight
decl_stmt|;
block|{
name|SIZE
name|size
decl_stmt|;
name|MARGINS
name|margins
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|MenuTheme
argument_list|,
name|MENU_POPUPCHECKBACKGROUND
argument_list|,
name|MBI_HOT
argument_list|)
decl_stmt|;
name|pGetThemePartSize
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|MENU_POPUPCHECK
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|TS_TRUE
argument_list|,
operator|&
name|size
argument_list|)
expr_stmt|;
name|pGetThemeMargins
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|MENU_POPUPCHECK
argument_list|,
literal|0
argument_list|,
name|TMT_CONTENTMARGINS
argument_list|,
name|NULL
argument_list|,
operator|&
name|margins
argument_list|)
expr_stmt|;
name|minimumHeight
operator|=
name|qMax
argument_list|<
name|qint32
argument_list|>
argument_list|(
name|size
operator|.
name|cy
operator|+
name|margins
operator|.
name|cyBottomHeight
operator|+
name|margins
operator|.
name|cyTopHeight
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|sz
operator|.
name|rwidth
argument_list|()
operator|+=
name|size
operator|.
name|cx
operator|+
name|margins
operator|.
name|cxLeftWidth
operator|+
name|margins
operator|.
name|cxRightWidth
expr_stmt|;
block|}
if|if
condition|(
specifier|const
name|QStyleOptionMenuItem
modifier|*
name|menuitem
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionMenuItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
name|menuitem
operator|->
name|menuItemType
operator|!=
name|QStyleOptionMenuItem
operator|::
name|Separator
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|minimumHeight
argument_list|)
expr_stmt|;
block|}
return|return
name|sz
return|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
case|case
name|CT_MenuBarItem
case|:
if|if
condition|(
operator|!
name|sz
operator|.
name|isEmpty
argument_list|()
condition|)
name|sz
operator|+=
name|QSize
argument_list|(
name|windowsItemHMargin
operator|*
literal|5
operator|+
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
break|break;
endif|#
directive|endif
case|case
name|CT_ItemViewItem
case|:
name|sz
operator|=
name|QWindowsXPStyle
operator|::
name|sizeFromContents
argument_list|(
name|type
argument_list|,
name|option
argument_list|,
name|size
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|sz
operator|.
name|rheight
argument_list|()
operator|+=
literal|2
expr_stmt|;
return|return
name|sz
return|;
case|case
name|CT_SpinBox
case|:
block|{
comment|//Spinbox adds frame twice
name|sz
operator|=
name|QWindowsStyle
operator|::
name|sizeFromContents
argument_list|(
name|type
argument_list|,
name|option
argument_list|,
name|size
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|int
name|border
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SpinBoxFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|sz
operator|-=
name|QSize
argument_list|(
literal|2
operator|*
name|border
argument_list|,
literal|2
operator|*
name|border
argument_list|)
expr_stmt|;
block|}
return|return
name|sz
return|;
case|case
name|CT_HeaderSection
case|:
block|{
comment|// When there is a sort indicator it adds to the width but it is shown
comment|// above the text natively and not on the side
if|if
condition|(
name|QStyleOptionHeader
modifier|*
name|hdr
init|=
name|qstyleoption_cast
argument_list|<
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
name|QStyleOption
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
argument_list|)
condition|)
block|{
name|QStyleOptionHeader
operator|::
name|SortIndicator
name|sortInd
init|=
name|hdr
operator|->
name|sortIndicator
decl_stmt|;
name|hdr
operator|->
name|sortIndicator
operator|=
name|QStyleOptionHeader
operator|::
name|None
expr_stmt|;
name|sz
operator|=
name|QWindowsXPStyle
operator|::
name|sizeFromContents
argument_list|(
name|type
argument_list|,
name|hdr
argument_list|,
name|size
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|hdr
operator|->
name|sortIndicator
operator|=
name|sortInd
expr_stmt|;
return|return
name|sz
return|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|QWindowsXPStyle
operator|::
name|sizeFromContents
argument_list|(
name|type
argument_list|,
name|option
argument_list|,
name|size
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!  \internal  */
end_comment
begin_function
DECL|function|subElementRect
name|QRect
name|QWindowsVistaStyle
operator|::
name|subElementRect
parameter_list|(
name|SubElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|QWindowsVistaStylePrivate
operator|::
name|useVista
argument_list|()
condition|)
return|return
name|QWindowsStyle
operator|::
name|subElementRect
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
name|QRect
name|rect
init|=
name|QWindowsXPStyle
operator|::
name|subElementRect
argument_list|(
name|element
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|SE_PushButtonContents
case|:
if|if
condition|(
specifier|const
name|QStyleOptionButton
modifier|*
name|btn
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|MARGINS
name|borderSize
decl_stmt|;
name|HTHEME
name|theme
init|=
name|pOpenThemeData
argument_list|(
name|widget
condition|?
name|QWindowsVistaStylePrivate
operator|::
name|winId
argument_list|(
name|widget
argument_list|)
else|:
literal|0
argument_list|,
literal|L"Button"
argument_list|)
decl_stmt|;
if|if
condition|(
name|theme
condition|)
block|{
name|int
name|stateId
init|=
name|PBS_NORMAL
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Enabled
operator|)
condition|)
name|stateId
operator|=
name|PBS_DISABLED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Sunken
condition|)
name|stateId
operator|=
name|PBS_PRESSED
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_MouseOver
condition|)
name|stateId
operator|=
name|PBS_HOT
expr_stmt|;
elseif|else
if|if
condition|(
name|btn
operator|->
name|features
operator|&
name|QStyleOptionButton
operator|::
name|DefaultButton
condition|)
name|stateId
operator|=
name|PBS_DEFAULTED
expr_stmt|;
name|int
name|border
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_DefaultFrameWidth
argument_list|,
name|btn
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|rect
operator|=
name|option
operator|->
name|rect
operator|.
name|adjusted
argument_list|(
name|border
argument_list|,
name|border
argument_list|,
operator|-
name|border
argument_list|,
operator|-
name|border
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|pGetThemeMargins
argument_list|(
name|theme
argument_list|,
name|NULL
argument_list|,
name|BP_PUSHBUTTON
argument_list|,
name|stateId
argument_list|,
name|TMT_CONTENTMARGINS
argument_list|,
name|NULL
argument_list|,
operator|&
name|borderSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|S_OK
condition|)
block|{
name|rect
operator|.
name|adjust
argument_list|(
name|borderSize
operator|.
name|cxLeftWidth
argument_list|,
name|borderSize
operator|.
name|cyTopHeight
argument_list|,
operator|-
name|borderSize
operator|.
name|cxRightWidth
argument_list|,
operator|-
name|borderSize
operator|.
name|cyBottomHeight
argument_list|)
expr_stmt|;
name|rect
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|SE_HeaderArrow
case|:
block|{
name|QRect
name|r
init|=
name|rect
decl_stmt|;
name|int
name|h
init|=
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|w
init|=
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|margin
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_HeaderMargin
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|XPThemeData
name|theme
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|HeaderTheme
argument_list|,
name|HP_HEADERSORTARROW
argument_list|,
name|HSAS_SORTEDDOWN
argument_list|,
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|int
name|arrowWidth
init|=
literal|13
decl_stmt|;
name|int
name|arrowHeight
init|=
literal|5
decl_stmt|;
if|if
condition|(
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SIZE
name|size
decl_stmt|;
if|if
condition|(
name|pGetThemePartSize
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|theme
operator|.
name|partId
argument_list|,
name|theme
operator|.
name|stateId
argument_list|,
literal|0
argument_list|,
name|TS_TRUE
argument_list|,
operator|&
name|size
argument_list|)
operator|==
name|S_OK
condition|)
block|{
name|arrowWidth
operator|=
name|size
operator|.
name|cx
expr_stmt|;
name|arrowHeight
operator|=
name|size
operator|.
name|cy
expr_stmt|;
block|}
block|}
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|State_Horizontal
condition|)
block|{
name|r
operator|.
name|setRect
argument_list|(
name|x
operator|+
name|w
operator|/
literal|2
operator|-
name|arrowWidth
operator|/
literal|2
argument_list|,
name|y
argument_list|,
name|arrowWidth
argument_list|,
name|arrowHeight
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|vert_size
init|=
name|w
operator|/
literal|2
decl_stmt|;
name|r
operator|.
name|setRect
argument_list|(
name|x
operator|+
literal|5
argument_list|,
name|y
operator|+
name|h
operator|-
name|margin
operator|*
literal|2
operator|-
name|vert_size
argument_list|,
name|w
operator|-
name|margin
operator|*
literal|2
operator|-
literal|5
argument_list|,
name|vert_size
argument_list|)
expr_stmt|;
block|}
name|rect
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SE_HeaderLabel
case|:
block|{
name|int
name|margin
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_HeaderMargin
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|r
init|=
name|option
operator|->
name|rect
decl_stmt|;
name|r
operator|.
name|setRect
argument_list|(
name|option
operator|->
name|rect
operator|.
name|x
argument_list|()
operator|+
name|margin
argument_list|,
name|option
operator|->
name|rect
operator|.
name|y
argument_list|()
operator|+
name|margin
argument_list|,
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|-
name|margin
operator|*
literal|2
argument_list|,
name|option
operator|->
name|rect
operator|.
name|height
argument_list|()
operator|-
name|margin
operator|*
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QStyleOptionHeader
modifier|*
name|header
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionHeader
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
comment|// Subtract width needed for arrow, if there is one
if|if
condition|(
name|header
operator|->
name|sortIndicator
operator|!=
name|QStyleOptionHeader
operator|::
name|None
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|option
operator|->
name|state
operator|&
name|State_Horizontal
operator|)
condition|)
comment|//horizontal arrows are positioned on top
name|r
operator|.
name|setHeight
argument_list|(
name|r
operator|.
name|height
argument_list|()
operator|-
operator|(
name|option
operator|->
name|rect
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|)
operator|-
operator|(
name|margin
operator|*
literal|2
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rect
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SE_ProgressBarContents
case|:
name|rect
operator|=
name|QCommonStyle
operator|::
name|subElementRect
argument_list|(
name|SE_ProgressBarGroove
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ItemViewItemDecoration
case|:
if|if
condition|(
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
name|rect
operator|.
name|adjust
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|SE_ItemViewItemFocusRect
case|:
if|if
condition|(
specifier|const
name|QStyleOptionViewItem
modifier|*
name|vopt
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItem
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|textRect
init|=
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_ItemViewItemText
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QRect
name|displayRect
init|=
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_ItemViewItemDecoration
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vopt
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|rect
operator|=
name|textRect
operator|.
name|united
argument_list|(
name|displayRect
argument_list|)
expr_stmt|;
else|else
name|rect
operator|=
name|textRect
expr_stmt|;
name|rect
operator|=
name|rect
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|rect
return|;
block|}
end_function
begin_comment
comment|/*   This function is used by subControlRect to check if a button   should be drawn for the given subControl given a set of window flags. */
end_comment
begin_function
DECL|function|buttonVisible
specifier|static
name|bool
name|buttonVisible
parameter_list|(
specifier|const
name|QStyle
operator|::
name|SubControl
name|sc
parameter_list|,
specifier|const
name|QStyleOptionTitleBar
modifier|*
name|tb
parameter_list|)
block|{
name|bool
name|isMinimized
init|=
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMinimized
decl_stmt|;
name|bool
name|isMaximized
init|=
name|tb
operator|->
name|titleBarState
operator|&
name|Qt
operator|::
name|WindowMaximized
decl_stmt|;
specifier|const
name|uint
name|flags
init|=
name|tb
operator|->
name|titleBarFlags
decl_stmt|;
name|bool
name|retVal
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|sc
condition|)
block|{
case|case
name|QStyle
operator|::
name|SC_TitleBarContextHelpButton
case|:
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarMinButton
case|:
if|if
condition|(
operator|!
name|isMinimized
operator|&&
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarNormalButton
case|:
if|if
condition|(
name|isMinimized
operator|&&
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|isMaximized
operator|&&
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarMaxButton
case|:
if|if
condition|(
operator|!
name|isMaximized
operator|&&
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarShadeButton
case|:
if|if
condition|(
operator|!
name|isMinimized
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarUnshadeButton
case|:
if|if
condition|(
name|isMinimized
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarCloseButton
case|:
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarSysMenu
case|:
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|retVal
operator|=
literal|true
expr_stmt|;
break|break;
default|default :
name|retVal
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|styleHint
name|int
name|QWindowsVistaStyle
operator|::
name|styleHint
parameter_list|(
name|StyleHint
name|hint
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QStyleHintReturn
modifier|*
name|returnData
parameter_list|)
specifier|const
block|{
name|QWindowsVistaStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsVistaStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|SH_MessageBox_CenterButtons
case|:
name|ret
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|SH_ToolTip_Mask
case|:
if|if
condition|(
name|option
condition|)
block|{
if|if
condition|(
name|QStyleHintReturnMask
modifier|*
name|mask
init|=
name|qstyleoption_cast
argument_list|<
name|QStyleHintReturnMask
operator|*
argument_list|>
argument_list|(
name|returnData
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|true
expr_stmt|;
name|XPThemeData
name|themeData
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ToolTipTheme
argument_list|,
name|TTP_STANDARD
argument_list|,
name|TTSS_NORMAL
argument_list|,
name|option
operator|->
name|rect
argument_list|)
decl_stmt|;
name|mask
operator|->
name|region
operator|=
name|d
operator|->
name|region
argument_list|(
name|themeData
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|SH_Table_GridLineColor
case|:
if|if
condition|(
name|option
condition|)
name|ret
operator|=
name|option
operator|->
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
operator|.
name|darker
argument_list|(
literal|118
argument_list|)
operator|.
name|rgb
argument_list|()
expr_stmt|;
else|else
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
default|default:
name|ret
operator|=
name|QWindowsXPStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|option
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!  \internal  */
end_comment
begin_function
DECL|function|subControlRect
name|QRect
name|QWindowsVistaStyle
operator|::
name|subControlRect
parameter_list|(
name|ComplexControl
name|control
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
name|SubControl
name|subControl
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|QWindowsVistaStylePrivate
operator|::
name|useVista
argument_list|()
condition|)
return|return
name|QWindowsStyle
operator|::
name|subControlRect
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|subControl
argument_list|,
name|widget
argument_list|)
return|;
name|QRect
name|rect
init|=
name|QWindowsXPStyle
operator|::
name|subControlRect
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|subControl
argument_list|,
name|widget
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|control
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
case|case
name|CC_ComboBox
case|:
if|if
condition|(
specifier|const
name|QStyleOptionComboBox
modifier|*
name|cb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|int
name|x
init|=
name|cb
operator|->
name|rect
operator|.
name|x
argument_list|()
decl_stmt|,
name|y
init|=
name|cb
operator|->
name|rect
operator|.
name|y
argument_list|()
decl_stmt|,
name|wi
init|=
name|cb
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|,
name|he
init|=
name|cb
operator|->
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|xpos
init|=
name|x
decl_stmt|;
name|int
name|margin
init|=
name|cb
operator|->
name|frame
condition|?
literal|3
else|:
literal|0
decl_stmt|;
name|int
name|bmarg
init|=
name|cb
operator|->
name|frame
condition|?
literal|2
else|:
literal|0
decl_stmt|;
name|int
name|arrowButtonWidth
init|=
name|bmarg
operator|+
literal|16
decl_stmt|;
name|xpos
operator|+=
name|wi
operator|-
name|arrowButtonWidth
expr_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_ComboBoxFrame
case|:
name|rect
operator|=
name|cb
operator|->
name|rect
expr_stmt|;
break|break;
case|case
name|SC_ComboBoxArrow
case|:
name|rect
operator|.
name|setRect
argument_list|(
name|xpos
argument_list|,
name|y
argument_list|,
name|arrowButtonWidth
argument_list|,
name|he
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ComboBoxEditField
case|:
name|rect
operator|.
name|setRect
argument_list|(
name|x
operator|+
name|margin
argument_list|,
name|y
operator|+
name|margin
argument_list|,
name|wi
operator|-
literal|2
operator|*
name|margin
operator|-
literal|16
argument_list|,
name|he
operator|-
literal|2
operator|*
name|margin
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_ComboBoxListBoxPopup
case|:
name|rect
operator|=
name|cb
operator|->
name|rect
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|rect
operator|=
name|visualRect
argument_list|(
name|cb
operator|->
name|direction
argument_list|,
name|cb
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_COMBOBOX
case|case
name|CC_TitleBar
case|:
if|if
condition|(
specifier|const
name|QStyleOptionTitleBar
modifier|*
name|tb
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionTitleBar
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|buttonVisible
argument_list|(
name|subControl
argument_list|,
name|tb
argument_list|)
condition|)
return|return
name|rect
return|;
specifier|const
name|bool
name|isToolTitle
init|=
literal|false
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|tb
operator|->
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|tb
operator|->
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|buttonWidth
init|=
name|GetSystemMetrics
argument_list|(
name|SM_CXSIZE
argument_list|)
operator|-
literal|4
decl_stmt|;
specifier|const
name|int
name|frameWidth
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_MdiSubWindowFrameWidth
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|sysmenuHint
init|=
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
operator|)
operator|!=
literal|0
decl_stmt|;
specifier|const
name|bool
name|minimizeHint
init|=
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
operator|!=
literal|0
decl_stmt|;
specifier|const
name|bool
name|maximizeHint
init|=
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
operator|!=
literal|0
decl_stmt|;
specifier|const
name|bool
name|contextHint
init|=
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator|)
operator|!=
literal|0
decl_stmt|;
specifier|const
name|bool
name|shadeHint
init|=
operator|(
name|tb
operator|->
name|titleBarFlags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
operator|)
operator|!=
literal|0
decl_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|SC_TitleBarLabel
case|:
name|rect
operator|=
name|QRect
argument_list|(
name|frameWidth
argument_list|,
literal|0
argument_list|,
name|width
operator|-
operator|(
name|buttonWidth
operator|+
name|frameWidth
operator|+
literal|10
operator|)
argument_list|,
name|height
argument_list|)
expr_stmt|;
if|if
condition|(
name|isToolTitle
condition|)
block|{
if|if
condition|(
name|sysmenuHint
condition|)
block|{
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|buttonWidth
operator|-
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minimizeHint
operator|||
name|maximizeHint
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|buttonWidth
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sysmenuHint
condition|)
block|{
specifier|const
name|int
name|leftOffset
init|=
name|height
operator|-
literal|8
decl_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
name|leftOffset
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minimizeHint
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|buttonWidth
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|maximizeHint
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|buttonWidth
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextHint
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|buttonWidth
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|shadeHint
condition|)
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|buttonWidth
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|rect
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rect
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_TitleBarSysMenu
case|:
block|{
specifier|const
name|int
name|controlTop
init|=
literal|6
decl_stmt|;
specifier|const
name|int
name|controlHeight
init|=
name|height
operator|-
name|controlTop
operator|-
literal|3
decl_stmt|;
name|int
name|iconExtent
init|=
name|proxy
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|PM_SmallIconSize
argument_list|)
decl_stmt|;
name|QSize
name|iconSize
init|=
name|tb
operator|->
name|icon
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
name|iconExtent
argument_list|,
name|iconExtent
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tb
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|iconSize
operator|=
name|QSize
argument_list|(
name|controlHeight
argument_list|,
name|controlHeight
argument_list|)
expr_stmt|;
name|int
name|hPad
init|=
operator|(
name|controlHeight
operator|-
name|iconSize
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|vPad
init|=
operator|(
name|controlHeight
operator|-
name|iconSize
operator|.
name|width
argument_list|()
operator|)
operator|/
literal|2
decl_stmt|;
name|rect
operator|=
name|QRect
argument_list|(
name|frameWidth
operator|+
name|hPad
argument_list|,
name|controlTop
operator|+
name|vPad
argument_list|,
name|iconSize
operator|.
name|width
argument_list|()
argument_list|,
name|iconSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|rect
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rect
operator|=
name|visualRect
argument_list|(
name|option
operator|->
name|direction
argument_list|,
name|option
operator|->
name|rect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|rect
return|;
block|}
end_function
begin_comment
comment|/*!  \internal  */
end_comment
begin_function
DECL|function|hitTestComplexControl
name|QStyle
operator|::
name|SubControl
name|QWindowsVistaStyle
operator|::
name|hitTestComplexControl
parameter_list|(
name|ComplexControl
name|control
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|QWindowsVistaStylePrivate
operator|::
name|useVista
argument_list|()
condition|)
block|{
return|return
name|QWindowsStyle
operator|::
name|hitTestComplexControl
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|pos
argument_list|,
name|widget
argument_list|)
return|;
block|}
return|return
name|QWindowsXPStyle
operator|::
name|hitTestComplexControl
argument_list|(
name|control
argument_list|,
name|option
argument_list|,
name|pos
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!  \internal  */
end_comment
begin_function
DECL|function|pixelMetric
name|int
name|QWindowsVistaStyle
operator|::
name|pixelMetric
parameter_list|(
name|PixelMetric
name|metric
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|QWindowsVistaStylePrivate
operator|::
name|useVista
argument_list|()
condition|)
block|{
return|return
name|QWindowsStyle
operator|::
name|pixelMetric
argument_list|(
name|metric
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|PM_DockWidgetTitleBarButtonMargin
case|:
return|return
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|5.
argument_list|)
argument_list|)
return|;
case|case
name|PM_ScrollBarSliderMin
case|:
return|return
name|int
argument_list|(
name|QStyleHelper
operator|::
name|dpiScaled
argument_list|(
literal|18.
argument_list|)
argument_list|)
return|;
case|case
name|PM_MenuHMargin
case|:
case|case
name|PM_MenuVMargin
case|:
return|return
literal|0
return|;
case|case
name|PM_MenuPanelWidth
case|:
return|return
literal|3
return|;
default|default:
break|break;
block|}
return|return
name|QWindowsXPStyle
operator|::
name|pixelMetric
argument_list|(
name|metric
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!  \internal  */
end_comment
begin_function
DECL|function|standardPalette
name|QPalette
name|QWindowsVistaStyle
operator|::
name|standardPalette
parameter_list|()
specifier|const
block|{
return|return
name|QWindowsXPStyle
operator|::
name|standardPalette
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!  \internal  */
end_comment
begin_function
DECL|function|polish
name|void
name|QWindowsVistaStyle
operator|::
name|polish
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
block|{
name|QWindowsXPStyle
operator|::
name|polish
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!  \internal  */
end_comment
begin_function
DECL|function|polish
name|void
name|QWindowsVistaStyle
operator|::
name|polish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QWindowsXPStyle
operator|::
name|polish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_LINEEDIT
if|if
condition|(
name|qobject_cast
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|)
expr_stmt|;
elseif|else
endif|#
directive|endif
comment|// QT_NO_LINEEDIT
if|if
condition|(
name|qobject_cast
argument_list|<
name|QGroupBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QCommandLinkButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|QFont
name|buttonFont
init|=
name|widget
operator|->
name|font
argument_list|()
decl_stmt|;
name|buttonFont
operator|.
name|setFamily
argument_list|(
name|QLatin1String
argument_list|(
literal|"Segoe UI"
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setFont
argument_list|(
name|buttonFont
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|widget
operator|->
name|inherits
argument_list|(
literal|"QTipLabel"
argument_list|)
condition|)
block|{
comment|//note that since tooltips are not reused
comment|//we do not have to care about unpolishing
name|widget
operator|->
name|setContentsMargins
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|COLORREF
name|bgRef
decl_stmt|;
name|HTHEME
name|theme
init|=
name|pOpenThemeData
argument_list|(
name|widget
condition|?
name|QWindowsVistaStylePrivate
operator|::
name|winId
argument_list|(
name|widget
argument_list|)
else|:
literal|0
argument_list|,
literal|L"TOOLTIP"
argument_list|)
decl_stmt|;
if|if
condition|(
name|theme
condition|)
block|{
if|if
condition|(
name|pGetThemeColor
argument_list|(
name|theme
argument_list|,
name|TTP_STANDARD
argument_list|,
name|TTSS_NORMAL
argument_list|,
name|TMT_TEXTCOLOR
argument_list|,
operator|&
name|bgRef
argument_list|)
operator|==
name|S_OK
condition|)
block|{
name|QColor
name|textColor
init|=
name|QColor
operator|::
name|fromRgb
argument_list|(
name|bgRef
argument_list|)
decl_stmt|;
name|QPalette
name|pal
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|ToolTipText
argument_list|,
name|textColor
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMessageBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyledBackground
argument_list|)
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|buttonBox
init|=
name|widget
operator|->
name|findChild
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_msgbox_buttonbox"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|buttonBox
condition|)
name|buttonBox
operator|->
name|setContentsMargins
argument_list|(
literal|0
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_INPUTDIALOG
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QInputDialog
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyledBackground
argument_list|)
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|buttonBox
init|=
name|widget
operator|->
name|findChild
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_inputdlg_buttonbox"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|buttonBox
condition|)
name|buttonBox
operator|->
name|setContentsMargins
argument_list|(
literal|0
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_INPUTDIALOG
elseif|else
if|if
condition|(
name|QTreeView
modifier|*
name|tree
init|=
name|qobject_cast
argument_list|<
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|tree
operator|->
name|viewport
argument_list|()
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QListView
modifier|*
name|list
init|=
name|qobject_cast
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|list
operator|->
name|viewport
argument_list|()
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!  \internal  */
end_comment
begin_function
DECL|function|unpolish
name|void
name|QWindowsVistaStyle
operator|::
name|unpolish
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QWindowsXPStyle
operator|::
name|unpolish
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QWindowsVistaStylePrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
comment|// Delete the tree view helper in case the XP style cleaned the
comment|// theme handle map due to a theme or QStyle change (QProxyStyle).
if|if
condition|(
operator|!
name|QWindowsXPStylePrivate
operator|::
name|hasTheme
argument_list|(
name|QWindowsXPStylePrivate
operator|::
name|TreeViewTheme
argument_list|)
condition|)
name|d
operator|->
name|cleanupTreeViewTheming
argument_list|()
expr_stmt|;
name|d
operator|->
name|stopAnimation
argument_list|(
name|widget
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_LINEEDIT
if|if
condition|(
name|qobject_cast
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|,
literal|false
argument_list|)
expr_stmt|;
elseif|else
endif|#
directive|endif
comment|// QT_NO_LINEEDIT
if|if
condition|(
name|qobject_cast
argument_list|<
name|QGroupBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|,
literal|false
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMessageBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyledBackground
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|buttonBox
init|=
name|widget
operator|->
name|findChild
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_msgbox_buttonbox"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|buttonBox
condition|)
name|buttonBox
operator|->
name|setContentsMargins
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_INPUTDIALOG
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QInputDialog
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StyledBackground
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|buttonBox
init|=
name|widget
operator|->
name|findChild
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_inputdlg_buttonbox"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|buttonBox
condition|)
name|buttonBox
operator|->
name|setContentsMargins
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_INPUTDIALOG
elseif|else
if|if
condition|(
name|QTreeView
modifier|*
name|tree
init|=
name|qobject_cast
argument_list|<
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|tree
operator|->
name|viewport
argument_list|()
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QCommandLinkButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|QFont
name|font
init|=
name|QApplication
operator|::
name|font
argument_list|(
literal|"QCommandLinkButton"
argument_list|)
decl_stmt|;
name|QFont
name|widgetFont
init|=
name|widget
operator|->
name|font
argument_list|()
decl_stmt|;
name|widgetFont
operator|.
name|setFamily
argument_list|(
name|font
operator|.
name|family
argument_list|()
argument_list|)
expr_stmt|;
comment|//Only family set by polish
name|widget
operator|->
name|setFont
argument_list|(
name|widgetFont
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!  \internal  */
end_comment
begin_function
DECL|function|unpolish
name|void
name|QWindowsVistaStyle
operator|::
name|unpolish
parameter_list|(
name|QApplication
modifier|*
name|app
parameter_list|)
block|{
name|QWindowsXPStyle
operator|::
name|unpolish
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!  \internal  */
end_comment
begin_function
DECL|function|polish
name|void
name|QWindowsVistaStyle
operator|::
name|polish
parameter_list|(
name|QPalette
modifier|&
name|pal
parameter_list|)
block|{
name|QWindowsStyle
operator|::
name|polish
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|pal
operator|.
name|base
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|104
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!  \internal  */
end_comment
begin_function
DECL|function|standardPixmap
name|QPixmap
name|QWindowsVistaStyle
operator|::
name|standardPixmap
parameter_list|(
name|StandardPixmap
name|standardPixmap
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|QWindowsVistaStylePrivate
operator|::
name|useVista
argument_list|()
condition|)
block|{
return|return
name|QWindowsStyle
operator|::
name|standardPixmap
argument_list|(
name|standardPixmap
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
return|return
name|QWindowsXPStyle
operator|::
name|standardPixmap
argument_list|(
name|standardPixmap
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QWindowsVistaStylePrivate
name|QWindowsVistaStylePrivate
operator|::
name|QWindowsVistaStylePrivate
parameter_list|()
member_init_list|:
name|QWindowsXPStylePrivate
argument_list|()
member_init_list|,
name|m_treeViewHelper
argument_list|(
literal|0
argument_list|)
block|{
name|resolveSymbols
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsVistaStylePrivate
name|QWindowsVistaStylePrivate
operator|::
name|~
name|QWindowsVistaStylePrivate
parameter_list|()
block|{
name|cleanupTreeViewTheming
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|transitionsEnabled
name|bool
name|QWindowsVistaStylePrivate
operator|::
name|transitionsEnabled
parameter_list|()
specifier|const
block|{
name|BOOL
name|animEnabled
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
name|SPI_GETCLIENTAREAANIMATION
argument_list|,
literal|0
argument_list|,
operator|&
name|animEnabled
argument_list|,
literal|0
argument_list|)
condition|)
block|{
if|if
condition|(
name|animEnabled
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Returns \c true if all the necessary theme engine symbols were     resolved. */
end_comment
begin_function
DECL|function|resolveSymbols
name|bool
name|QWindowsVistaStylePrivate
operator|::
name|resolveSymbols
parameter_list|()
block|{
specifier|static
name|bool
name|tried
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|tried
condition|)
block|{
name|tried
operator|=
literal|true
expr_stmt|;
name|QSystemLibrary
name|themeLib
argument_list|(
name|QLatin1String
argument_list|(
literal|"uxtheme"
argument_list|)
argument_list|)
decl_stmt|;
name|pSetWindowTheme
operator|=
operator|(
name|PtrSetWindowTheme
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"SetWindowTheme"
argument_list|)
expr_stmt|;
name|pIsThemePartDefined
operator|=
operator|(
name|PtrIsThemePartDefined
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"IsThemePartDefined"
argument_list|)
expr_stmt|;
name|pGetThemePartSize
operator|=
operator|(
name|PtrGetThemePartSize
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemePartSize"
argument_list|)
expr_stmt|;
name|pOpenThemeData
operator|=
operator|(
name|PtrOpenThemeData
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"OpenThemeData"
argument_list|)
expr_stmt|;
name|pCloseThemeData
operator|=
operator|(
name|PtrCloseThemeData
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"CloseThemeData"
argument_list|)
expr_stmt|;
name|pDrawThemeBackground
operator|=
operator|(
name|PtrDrawThemeBackground
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"DrawThemeBackground"
argument_list|)
expr_stmt|;
name|pDrawThemeBackgroundEx
operator|=
operator|(
name|PtrDrawThemeBackgroundEx
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"DrawThemeBackgroundEx"
argument_list|)
expr_stmt|;
name|pGetCurrentThemeName
operator|=
operator|(
name|PtrGetCurrentThemeName
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetCurrentThemeName"
argument_list|)
expr_stmt|;
name|pGetThemeBool
operator|=
operator|(
name|PtrGetThemeBool
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeBool"
argument_list|)
expr_stmt|;
name|pGetThemeColor
operator|=
operator|(
name|PtrGetThemeColor
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeColor"
argument_list|)
expr_stmt|;
name|pGetThemeEnumValue
operator|=
operator|(
name|PtrGetThemeEnumValue
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeEnumValue"
argument_list|)
expr_stmt|;
name|pGetThemeFilename
operator|=
operator|(
name|PtrGetThemeFilename
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeFilename"
argument_list|)
expr_stmt|;
name|pGetThemeFont
operator|=
operator|(
name|PtrGetThemeFont
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeFont"
argument_list|)
expr_stmt|;
name|pGetThemeInt
operator|=
operator|(
name|PtrGetThemeInt
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeInt"
argument_list|)
expr_stmt|;
name|pGetThemeIntList
operator|=
operator|(
name|PtrGetThemeIntList
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeIntList"
argument_list|)
expr_stmt|;
name|pGetThemeMargins
operator|=
operator|(
name|PtrGetThemeMargins
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeMargins"
argument_list|)
expr_stmt|;
name|pGetThemeMetric
operator|=
operator|(
name|PtrGetThemeMetric
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeMetric"
argument_list|)
expr_stmt|;
name|pGetThemePartSize
operator|=
operator|(
name|PtrGetThemePartSize
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemePartSize"
argument_list|)
expr_stmt|;
name|pGetThemePosition
operator|=
operator|(
name|PtrGetThemePosition
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemePosition"
argument_list|)
expr_stmt|;
name|pGetThemeRect
operator|=
operator|(
name|PtrGetThemeRect
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeRect"
argument_list|)
expr_stmt|;
name|pGetThemeString
operator|=
operator|(
name|PtrGetThemeString
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeString"
argument_list|)
expr_stmt|;
name|pGetThemeTransitionDuration
operator|=
operator|(
name|PtrGetThemeTransitionDuration
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemeTransitionDuration"
argument_list|)
expr_stmt|;
name|pGetThemePropertyOrigin
operator|=
operator|(
name|PtrGetThemePropertyOrigin
operator|)
name|themeLib
operator|.
name|resolve
argument_list|(
literal|"GetThemePropertyOrigin"
argument_list|)
expr_stmt|;
block|}
return|return
name|pGetThemeTransitionDuration
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*  * We need to set the windows "explorer" theme explicitly on a native  * window and open the "TREEVIEW" theme handle passing its window handle  * in order to get Vista-style item view themes (particulary drawBackground()  * for selected items needs this).  * We invoke a service of the native Windows interface to create  * a non-visible window handle, open the theme on it and insert it into  * the cache so that it is found by XPThemeData::handle() first.  */
end_comment
begin_function
DECL|function|createTreeViewHelperWindow
specifier|static
specifier|inline
name|HWND
name|createTreeViewHelperWindow
parameter_list|()
block|{
if|if
condition|(
name|QPlatformNativeInterface
modifier|*
name|ni
init|=
name|QGuiApplication
operator|::
name|platformNativeInterface
argument_list|()
condition|)
block|{
name|void
modifier|*
name|hwnd
init|=
literal|0
decl_stmt|;
name|void
modifier|*
name|wndProc
init|=
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|DefWindowProc
argument_list|)
decl_stmt|;
if|if
condition|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|ni
argument_list|,
literal|"createMessageWindow"
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|void
operator|*
argument_list|,
name|hwnd
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QString
argument_list|,
name|QStringLiteral
argument_list|(
literal|"QTreeViewThemeHelperWindowClass"
argument_list|)
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QString
argument_list|,
name|QStringLiteral
argument_list|(
literal|"QTreeViewThemeHelperWindow"
argument_list|)
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|void
operator|*
argument_list|,
name|wndProc
argument_list|)
argument_list|)
operator|&&
name|hwnd
condition|)
block|{
return|return
cast|reinterpret_cast
argument_list|<
name|HWND
argument_list|>
argument_list|(
name|hwnd
argument_list|)
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|initTreeViewTheming
name|bool
name|QWindowsVistaStylePrivate
operator|::
name|initTreeViewTheming
parameter_list|()
block|{
if|if
condition|(
name|m_treeViewHelper
condition|)
return|return
literal|true
return|;
name|m_treeViewHelper
operator|=
name|createTreeViewHelperWindow
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_treeViewHelper
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Unable to create the treeview helper window."
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|HRESULT
name|hr
init|=
name|pSetWindowTheme
argument_list|(
name|m_treeViewHelper
argument_list|,
literal|L"explorer"
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|hr
operator|!=
name|S_OK
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: SetWindowTheme() failed."
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|QWindowsXPStylePrivate
operator|::
name|createTheme
argument_list|(
name|QWindowsXPStylePrivate
operator|::
name|TreeViewTheme
argument_list|,
name|m_treeViewHelper
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|cleanupTreeViewTheming
name|void
name|QWindowsVistaStylePrivate
operator|::
name|cleanupTreeViewTheming
parameter_list|()
block|{
if|if
condition|(
name|m_treeViewHelper
condition|)
block|{
name|DestroyWindow
argument_list|(
name|m_treeViewHelper
argument_list|)
expr_stmt|;
name|m_treeViewHelper
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|standardIcon
name|QIcon
name|QWindowsVistaStyle
operator|::
name|standardIcon
parameter_list|(
name|StandardPixmap
name|standardIcon
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|QWindowsVistaStylePrivate
operator|::
name|useVista
argument_list|()
condition|)
block|{
return|return
name|QWindowsStyle
operator|::
name|standardIcon
argument_list|(
name|standardIcon
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
name|QWindowsVistaStylePrivate
modifier|*
name|d
init|=
cast|const_cast
argument_list|<
name|QWindowsVistaStylePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|standardIcon
condition|)
block|{
case|case
name|SP_CommandLink
case|:
block|{
name|XPThemeData
name|theme
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QWindowsXPStylePrivate
operator|::
name|ButtonTheme
argument_list|,
name|BP_COMMANDLINKGLYPH
argument_list|,
name|CMDLGS_NORMAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|theme
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SIZE
name|size
decl_stmt|;
name|pGetThemePartSize
argument_list|(
name|theme
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|theme
operator|.
name|partId
argument_list|,
name|theme
operator|.
name|stateId
argument_list|,
literal|0
argument_list|,
name|TS_TRUE
argument_list|,
operator|&
name|size
argument_list|)
expr_stmt|;
name|QIcon
name|linkGlyph
decl_stmt|;
name|QPixmap
name|pm
init|=
name|QPixmap
argument_list|(
name|size
operator|.
name|cx
argument_list|,
name|size
operator|.
name|cy
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|pm
argument_list|)
decl_stmt|;
name|theme
operator|.
name|painter
operator|=
operator|&
name|p
expr_stmt|;
name|theme
operator|.
name|rect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|cx
argument_list|,
name|size
operator|.
name|cy
argument_list|)
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|linkGlyph
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Normal
argument_list|,
name|QIcon
operator|::
name|Off
argument_list|)
expr_stmt|;
comment|// Normal
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|CMDLGS_PRESSED
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|linkGlyph
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Normal
argument_list|,
name|QIcon
operator|::
name|On
argument_list|)
expr_stmt|;
comment|// Pressed
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|CMDLGS_HOT
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|linkGlyph
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Active
argument_list|,
name|QIcon
operator|::
name|Off
argument_list|)
expr_stmt|;
comment|// Hover
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|theme
operator|.
name|stateId
operator|=
name|CMDLGS_DISABLED
expr_stmt|;
name|d
operator|->
name|drawBackground
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|linkGlyph
operator|.
name|addPixmap
argument_list|(
name|pm
argument_list|,
name|QIcon
operator|::
name|Disabled
argument_list|,
name|QIcon
operator|::
name|Off
argument_list|)
expr_stmt|;
comment|// Disabled
return|return
name|linkGlyph
return|;
block|}
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|QWindowsXPStyle
operator|::
name|standardIcon
argument_list|(
name|standardIcon
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_WINDOWSVISTA
end_comment
end_unit
