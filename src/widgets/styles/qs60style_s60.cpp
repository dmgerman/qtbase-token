begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qs60style.h"
end_include
begin_include
include|#
directive|include
file|"qs60style_p.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"private/qt_s60_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpixmap_s60_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qcore_symbian_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qvolatileimage_p.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qsettings.h"
end_include
begin_include
include|#
directive|include
file|<w32std.h>
end_include
begin_include
include|#
directive|include
file|<AknsConstants.h>
end_include
begin_include
include|#
directive|include
file|<aknconsts.h>
end_include
begin_include
include|#
directive|include
file|<AknsItemID.h>
end_include
begin_include
include|#
directive|include
file|<AknsUtils.h>
end_include
begin_include
include|#
directive|include
file|<AknsDrawUtils.h>
end_include
begin_include
include|#
directive|include
file|<AknsSkinInstance.h>
end_include
begin_include
include|#
directive|include
file|<AknsBasicBackgroundControlContext.h>
end_include
begin_include
include|#
directive|include
file|<avkon.mbg>
end_include
begin_include
include|#
directive|include
file|<AknFontAccess.h>
end_include
begin_include
include|#
directive|include
file|<AknLayoutFont.h>
end_include
begin_include
include|#
directive|include
file|<AknUtils.h>
end_include
begin_include
include|#
directive|include
file|<aknnavi.h>
end_include
begin_include
include|#
directive|include
file|<gulicon.h>
end_include
begin_include
include|#
directive|include
file|<AknBitmapAnimation.h>
end_include
begin_include
include|#
directive|include
file|<centralrepository.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_S60
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_PLUGIN
argument_list|)
end_if
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|enum|TDrawType
name|enum
name|TDrawType
argument_list|{
DECL|enumerator|EDrawIcon
name|EDrawIcon
argument_list|,
DECL|enumerator|EDrawGulIcon
name|EDrawGulIcon
argument_list|,
DECL|enumerator|EDrawBackground
name|EDrawBackground
argument_list|,
DECL|enumerator|EDrawAnimation
name|EDrawAnimation
argument_list|,
DECL|enumerator|ENoDraw
name|ENoDraw
argument_list|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|personalisationUID
specifier|const
name|TUid
name|personalisationUID
init|=
block|{
literal|0x101F876F
block|}
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enum|TSupportRelease
enum|enum
name|TSupportRelease
block|{
DECL|enumerator|ES60_None
name|ES60_None
init|=
literal|0x0000
block|,
comment|//indicates that the commonstyle should draw the graphics
DECL|enumerator|ES60_3_1
name|ES60_3_1
init|=
literal|0x0001
block|,
DECL|enumerator|ES60_3_2
name|ES60_3_2
init|=
literal|0x0002
block|,
DECL|enumerator|ES60_5_0
name|ES60_5_0
init|=
literal|0x0004
block|,
DECL|enumerator|ES60_5_1
name|ES60_5_1
init|=
literal|0x0008
block|,
DECL|enumerator|ES60_5_2
name|ES60_5_2
init|=
literal|0x0010
block|,
DECL|enumerator|ES60_5_3
name|ES60_5_3
init|=
literal|0x0020
block|,
DECL|enumerator|ES60_3_X
name|ES60_3_X
init|=
name|ES60_3_1
operator||
name|ES60_3_2
block|,
comment|// Releases before Symbian Foundation
DECL|enumerator|ES60_PreSF
name|ES60_PreSF
init|=
name|ES60_3_1
operator||
name|ES60_3_2
operator||
name|ES60_5_0
block|,
comment|// Releases before the S60 5.2
DECL|enumerator|ES60_Pre52
name|ES60_Pre52
init|=
name|ES60_3_1
operator||
name|ES60_3_2
operator||
name|ES60_5_0
operator||
name|ES60_5_1
block|,
comment|// Releases before S60 5.3
DECL|enumerator|ES60_Pre53
name|ES60_Pre53
init|=
name|ES60_3_1
operator||
name|ES60_3_2
operator||
name|ES60_5_0
operator||
name|ES60_5_1
operator||
name|ES60_5_2
block|,
comment|// Add all new releases here
DECL|enumerator|ES60_All
name|ES60_All
init|=
name|ES60_3_1
operator||
name|ES60_3_2
operator||
name|ES60_5_0
operator||
name|ES60_5_1
operator||
name|ES60_5_2
operator||
name|ES60_5_3
block|}
enum|;
end_enum
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|skinID
specifier|const
name|TAknsItemID
modifier|&
name|skinID
decl_stmt|;
comment|// Determines default theme graphics ID.
DECL|member|drawType
name|TDrawType
name|drawType
decl_stmt|;
comment|// Determines which native drawing routine is used to draw this item.
DECL|member|supportInfo
name|int
name|supportInfo
decl_stmt|;
comment|// Defines the S60 versions that use the default graphics.
comment|// These two, define new graphics that are used in releases other than partMapEntry.supportInfo defined releases.
comment|// In general, these are given in numeric form to allow style compilation in earlier
comment|// native releases that do not contain the new graphics.
DECL|member|newMajorSkinId
name|int
name|newMajorSkinId
decl_stmt|;
DECL|member|newMinorSkinId
name|int
name|newMinorSkinId
decl_stmt|;
block|}
DECL|typedef|partMapEntry
name|partMapEntry
typedef|;
end_typedef
begin_constructor
DECL|function|AnimationData
name|AnimationData
operator|::
name|AnimationData
parameter_list|(
specifier|const
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
parameter_list|,
name|int
name|frames
parameter_list|,
name|int
name|interval
parameter_list|)
member_init_list|:
name|m_id
argument_list|(
name|part
argument_list|)
member_init_list|,
name|m_frames
argument_list|(
name|frames
argument_list|)
member_init_list|,
name|m_interval
argument_list|(
name|interval
argument_list|)
member_init_list|,
name|m_mode
argument_list|(
name|QS60StyleEnums
operator|::
name|AM_Looping
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|AnimationDataV2
name|AnimationDataV2
operator|::
name|AnimationDataV2
parameter_list|(
specifier|const
name|AnimationData
modifier|&
name|data
parameter_list|)
member_init_list|:
name|AnimationData
argument_list|(
name|data
operator|.
name|m_id
argument_list|,
name|data
operator|.
name|m_frames
argument_list|,
name|data
operator|.
name|m_interval
argument_list|)
member_init_list|,
name|m_animation
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_currentFrame
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_resourceBased
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_timerId
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~AnimationDataV2
name|AnimationDataV2
operator|::
name|~
name|AnimationDataV2
parameter_list|()
block|{
operator|delete
name|m_animation
expr_stmt|;
block|}
end_destructor
begin_constructor
DECL|function|QS60StyleAnimation
name|QS60StyleAnimation
operator|::
name|QS60StyleAnimation
parameter_list|(
specifier|const
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
parameter_list|,
name|int
name|frames
parameter_list|,
name|int
name|interval
parameter_list|)
block|{
name|QT_TRAP_THROWING
argument_list|(
name|m_defaultData
operator|=
operator|new
operator|(
name|ELeave
operator|)
name|AnimationData
argument_list|(
name|part
argument_list|,
name|frames
argument_list|,
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|QT_TRAP_THROWING
argument_list|(
name|m_currentData
operator|=
operator|new
operator|(
name|ELeave
operator|)
name|AnimationDataV2
argument_list|(
operator|*
name|m_defaultData
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QS60StyleAnimation
name|QS60StyleAnimation
operator|::
name|~
name|QS60StyleAnimation
parameter_list|()
block|{
operator|delete
name|m_currentData
expr_stmt|;
operator|delete
name|m_defaultData
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setAnimationObject
name|void
name|QS60StyleAnimation
operator|::
name|setAnimationObject
parameter_list|(
name|CAknBitmapAnimation
modifier|*
name|animation
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|animation
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_currentData
operator|->
name|m_animation
condition|)
operator|delete
name|m_currentData
operator|->
name|m_animation
expr_stmt|;
name|m_currentData
operator|->
name|m_animation
operator|=
name|animation
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetToDefaults
name|void
name|QS60StyleAnimation
operator|::
name|resetToDefaults
parameter_list|()
block|{
operator|delete
name|m_currentData
expr_stmt|;
name|m_currentData
operator|=
literal|0
expr_stmt|;
name|QT_TRAP_THROWING
argument_list|(
name|m_currentData
operator|=
operator|new
operator|(
name|ELeave
operator|)
name|AnimationDataV2
argument_list|(
operator|*
name|m_defaultData
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QS60StyleModeSpecifics
class|class
name|QS60StyleModeSpecifics
block|{
public|public:
specifier|static
name|QPixmap
name|skinnedGraphics
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
name|stylepart
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|)
function_decl|;
specifier|static
name|QPixmap
name|skinnedGraphics
parameter_list|(
name|QS60StylePrivate
operator|::
name|SkinFrameElements
name|frameElement
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|)
function_decl|;
specifier|static
name|QPixmap
name|colorSkinnedGraphics
parameter_list|(
specifier|const
name|QS60StyleEnums
operator|::
name|SkinParts
modifier|&
name|stylepart
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|)
function_decl|;
specifier|static
name|QColor
name|colorValue
parameter_list|(
specifier|const
name|TAknsItemID
modifier|&
name|colorGroup
parameter_list|,
name|int
name|colorIndex
parameter_list|)
function_decl|;
specifier|static
name|QPixmap
name|fromFbsBitmap
parameter_list|(
name|CFbsBitmap
modifier|*
name|icon
parameter_list|,
name|CFbsBitmap
modifier|*
name|mask
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|,
specifier|const
name|TSize
modifier|&
name|targetSize
parameter_list|)
function_decl|;
specifier|static
name|bool
name|disabledPartGraphic
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
modifier|&
name|part
parameter_list|)
function_decl|;
specifier|static
name|bool
name|disabledFrameGraphic
parameter_list|(
name|QS60StylePrivate
operator|::
name|SkinFrameElements
modifier|&
name|frame
parameter_list|)
function_decl|;
specifier|static
name|QPixmap
name|generateMissingThemeGraphic
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
modifier|&
name|part
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|)
function_decl|;
specifier|static
name|TAknsItemID
name|partSpecificThemeId
parameter_list|(
name|int
name|part
parameter_list|)
function_decl|;
specifier|static
name|QVariant
name|themeDefinition
parameter_list|(
name|QS60StyleEnums
operator|::
name|ThemeDefinitions
name|definition
parameter_list|,
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
parameter_list|)
function_decl|;
private|private:
specifier|static
name|QPixmap
name|createSkinnedGraphicsLX
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|)
function_decl|;
specifier|static
name|QPixmap
name|createSkinnedGraphicsLX
parameter_list|(
name|QS60StylePrivate
operator|::
name|SkinFrameElements
name|frameElement
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|)
function_decl|;
specifier|static
name|QPixmap
name|colorSkinnedGraphicsLX
parameter_list|(
specifier|const
name|QS60StyleEnums
operator|::
name|SkinParts
modifier|&
name|stylepart
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|)
function_decl|;
specifier|static
name|void
name|frameIdAndCenterId
parameter_list|(
name|QS60StylePrivate
operator|::
name|SkinFrameElements
name|frameElement
parameter_list|,
name|TAknsItemID
modifier|&
name|frameId
parameter_list|,
name|TAknsItemID
modifier|&
name|centerId
parameter_list|)
function_decl|;
specifier|static
name|TRect
name|innerRectFromElement
parameter_list|(
name|QS60StylePrivate
operator|::
name|SkinFrameElements
name|frameElement
parameter_list|,
specifier|const
name|TRect
modifier|&
name|outerRect
parameter_list|)
function_decl|;
specifier|static
name|void
name|fallbackInfo
parameter_list|(
specifier|const
name|QS60StyleEnums
operator|::
name|SkinParts
modifier|&
name|stylePart
parameter_list|,
name|TInt
modifier|&
name|fallbackIndex
parameter_list|)
function_decl|;
specifier|static
name|bool
name|checkSupport
parameter_list|(
specifier|const
name|int
name|supportedRelease
parameter_list|)
function_decl|;
comment|// Array to match the skin ID, fallback graphics and Qt widget graphics.
DECL|member|m_partMap
specifier|static
specifier|const
name|partMapEntry
name|m_partMap
index|[]
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|m_partMap
specifier|const
name|partMapEntry
name|QS60StyleModeSpecifics
operator|::
name|m_partMap
index|[]
init|=
block|{
comment|/* SP_QgnGrafBarWaitAnim */
block|{
name|KAknsIIDQgnGrafBarWaitAnim
block|,
name|EDrawAnimation
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnGrafBarFrameCenter */
block|{
name|KAknsIIDQgnGrafBarFrameCenter
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnGrafBarFrameSideL */
block|{
name|KAknsIIDQgnGrafBarFrameSideL
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnGrafBarFrameSideR */
block|{
name|KAknsIIDQgnGrafBarFrameSideR
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnGrafBarProgress */
block|{
name|KAknsIIDQgnGrafBarProgress
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|// No drop area for 3.x non-touch devices
comment|/* SP_QgnGrafOrgBgGrid */
block|{
name|KAknsIIDNone
block|,
name|EDrawIcon
block|,
name|ES60_3_X
block|,
name|EAknsMajorGeneric
block|,
literal|0x1eba
block|}
block|,
comment|//KAknsIIDQgnGrafOrgBgGrid
comment|/* SP_QgnGrafScrollArrowDown */
block|{
name|KAknsIIDQgnGrafScrollArrowDown
block|,
name|EDrawGulIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnGrafScrollArrowLeft */
block|{
name|KAknsIIDQgnGrafScrollArrowLeft
block|,
name|EDrawGulIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnGrafScrollArrowRight */
block|{
name|KAknsIIDQgnGrafScrollArrowRight
block|,
name|EDrawGulIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnGrafScrollArrowUp */
block|{
name|KAknsIIDQgnGrafScrollArrowUp
block|,
name|EDrawGulIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|// In S60 5.3 there is a new tab graphic
comment|/* SP_QgnGrafTabActiveL */
block|{
name|KAknsIIDQgnGrafTabActiveL
block|,
name|EDrawIcon
block|,
name|ES60_Pre53
block|,
name|EAknsMajorSkin
block|,
literal|0x2219
block|}
block|,
comment|//KAknsIIDQtgFrTabActiveNormalL
comment|/* SP_QgnGrafTabActiveM */
block|{
name|KAknsIIDQgnGrafTabActiveM
block|,
name|EDrawIcon
block|,
name|ES60_Pre53
block|,
name|EAknsMajorSkin
block|,
literal|0x221b
block|}
block|,
comment|//KAknsIIDQtgFrTabActiveNormalC
comment|/* SP_QgnGrafTabActiveR */
block|{
name|KAknsIIDQgnGrafTabActiveR
block|,
name|EDrawIcon
block|,
name|ES60_Pre53
block|,
name|EAknsMajorSkin
block|,
literal|0x221a
block|}
block|,
comment|//KAknsIIDQtgFrTabActiveNormalR
comment|/* SP_QgnGrafTabPassiveL */
block|{
name|KAknsIIDQgnGrafTabPassiveL
block|,
name|EDrawIcon
block|,
name|ES60_Pre53
block|,
name|EAknsMajorSkin
block|,
literal|0x2221
block|}
block|,
comment|//KAknsIIDQtgFrTabPassiveNormalL
comment|/* SP_QgnGrafTabPassiveM */
block|{
name|KAknsIIDQgnGrafTabPassiveM
block|,
name|EDrawIcon
block|,
name|ES60_Pre53
block|,
name|EAknsMajorSkin
block|,
literal|0x2223
block|}
block|,
comment|//KAknsIIDQtgFrTabPassiveNormalC
comment|/* SP_QgnGrafTabPassiveR */
block|{
name|KAknsIIDQgnGrafTabPassiveR
block|,
name|EDrawIcon
block|,
name|ES60_Pre53
block|,
name|EAknsMajorSkin
block|,
literal|0x2222
block|}
block|,
comment|//KAknsIIDQtgFrTabPassiveNormalR
comment|// In 3.1 there is no slider groove.
comment|/* SP_QgnGrafNsliderEndLeft */
block|{
name|KAknsIIDNone
block|,
name|EDrawIcon
block|,
name|ES60_3_1
block|,
name|EAknsMajorGeneric
block|,
literal|0x19cf
comment|/* KAknsIIDQgnGrafNsliderEndLeft */
block|}
block|,
comment|/* SP_QgnGrafNsliderEndRight */
block|{
name|KAknsIIDNone
block|,
name|EDrawIcon
block|,
name|ES60_3_1
block|,
name|EAknsMajorGeneric
block|,
literal|0x19d0
comment|/* KAknsIIDQgnGrafNsliderEndRight */
block|}
block|,
comment|/* SP_QgnGrafNsliderMiddle */
block|{
name|KAknsIIDNone
block|,
name|EDrawIcon
block|,
name|ES60_3_1
block|,
name|EAknsMajorGeneric
block|,
literal|0x19d2
comment|/* KAknsIIDQgnGrafNsliderMiddle */
block|}
block|,
comment|/* SP_QgnIndiCheckboxOff */
block|{
name|KAknsIIDQgnIndiCheckboxOff
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnIndiCheckboxOn */
block|{
name|KAknsIIDQgnIndiCheckboxOn
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|// Following 5 items (SP_QgnIndiHlColSuper - SP_QgnIndiHlLineStraight) are available starting from S60 release 3.2.
comment|// In 3.1 CommonStyle drawing is used for these QTreeView elements, since no similar icons in AVKON UI.
comment|/* SP_QgnIndiHlColSuper */
block|{
name|KAknsIIDNone
block|,
name|EDrawIcon
block|,
name|ES60_3_1
block|,
name|EAknsMajorGeneric
block|,
literal|0x17d5
comment|/* KAknsIIDQgnIndiHlColSuper */
block|}
block|,
comment|/* SP_QgnIndiHlExpSuper */
block|{
name|KAknsIIDNone
block|,
name|EDrawIcon
block|,
name|ES60_3_1
block|,
name|EAknsMajorGeneric
block|,
literal|0x17d6
comment|/* KAknsIIDQgnIndiHlExpSuper */
block|}
block|,
comment|/* SP_QgnIndiHlLineBranch */
block|{
name|KAknsIIDNone
block|,
name|EDrawIcon
block|,
name|ES60_3_1
block|,
name|EAknsMajorGeneric
block|,
literal|0x17d7
comment|/* KAknsIIDQgnIndiHlLineBranch */
block|}
block|,
comment|/* SP_QgnIndiHlLineEnd */
block|{
name|KAknsIIDNone
block|,
name|EDrawIcon
block|,
name|ES60_3_1
block|,
name|EAknsMajorGeneric
block|,
literal|0x17d8
comment|/* KAknsIIDQgnIndiHlLineEnd */
block|}
block|,
comment|/* SP_QgnIndiHlLineStraight */
block|{
name|KAknsIIDNone
block|,
name|EDrawIcon
block|,
name|ES60_3_1
block|,
name|EAknsMajorGeneric
block|,
literal|0x17d9
comment|/* KAknsIIDQgnIndiHlLineStraight */
block|}
block|,
comment|/* SP_QgnIndiMarkedAdd */
block|{
name|KAknsIIDQgnIndiMarkedAdd
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnIndiNaviArrowLeft */
block|{
name|KAknsIIDQgnIndiNaviArrowLeft
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnIndiNaviArrowRight */
block|{
name|KAknsIIDQgnIndiNaviArrowRight
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnIndiRadiobuttOff */
block|{
name|KAknsIIDQgnIndiRadiobuttOff
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnIndiRadiobuttOn */
block|{
name|KAknsIIDQgnIndiRadiobuttOn
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|// In 3.1 there different slider graphic and no pressed state.
comment|/* SP_QgnGrafNsliderMarker */
block|{
name|KAknsIIDQgnIndiSliderEdit
block|,
name|EDrawIcon
block|,
name|ES60_3_1
block|,
name|EAknsMajorGeneric
block|,
literal|0x19d1
comment|/* KAknsIIDQgnGrafNsliderMarker */
block|}
block|,
comment|/* SP_QgnGrafNsliderMarkerSelected */
block|{
name|KAknsIIDQgnIndiSliderEdit
block|,
name|EDrawIcon
block|,
name|ES60_3_1
block|,
name|EAknsMajorGeneric
block|,
literal|0x1a4a
comment|/* KAknsIIDQgnGrafNsliderMarkerSelected */
block|}
block|,
comment|/* SP_QgnIndiSubmenu */
block|{
name|KAknsIIDQgnIndiSubmenu
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnNoteErased */
block|{
name|KAknsIIDQgnNoteErased
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnNoteError */
block|{
name|KAknsIIDQgnNoteError
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnNoteInfo */
block|{
name|KAknsIIDQgnNoteInfo
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnNoteOk */
block|{
name|KAknsIIDQgnNoteOk
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnNoteQuery */
block|{
name|KAknsIIDQgnNoteQuery
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnNoteWarning */
block|{
name|KAknsIIDQgnNoteWarning
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnPropFileSmall */
block|{
name|KAknsIIDQgnPropFileSmall
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnPropFolderCurrent */
block|{
name|KAknsIIDQgnPropFolderCurrent
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnPropFolderSmall */
block|{
name|KAknsIIDQgnPropFolderSmall
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnPropFolderSmallNew */
block|{
name|KAknsIIDQgnPropFolderSmallNew
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QgnPropPhoneMemcLarge */
block|{
name|KAknsIIDQgnPropPhoneMemcLarge
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|// Toolbar graphics is different in 3.1/3.2 vs. 5.0
comment|/* SP_QgnFrSctrlButtonCornerTl */
block|{
name|KAknsIIDQsnFrButtonTbCornerTl
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2301
block|}
block|,
comment|/* KAknsIIDQgnFrSctrlButtonCornerTl*/
comment|/* SP_QgnFrSctrlButtonCornerTr */
block|{
name|KAknsIIDQsnFrButtonTbCornerTr
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2302
block|}
block|,
comment|/* SP_QgnFrSctrlButtonCornerBl */
block|{
name|KAknsIIDQsnFrButtonTbCornerBl
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2303
block|}
block|,
comment|/* SP_QgnFrSctrlButtonCornerBr */
block|{
name|KAknsIIDQsnFrButtonTbCornerBr
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2304
block|}
block|,
comment|/* SP_QgnFrSctrlButtonSideT */
block|{
name|KAknsIIDQsnFrButtonTbSideT
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2305
block|}
block|,
comment|/* SP_QgnFrSctrlButtonSideB */
block|{
name|KAknsIIDQsnFrButtonTbSideB
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2306
block|}
block|,
comment|/* SP_QgnFrSctrlButtonSideL */
block|{
name|KAknsIIDQsnFrButtonTbSideL
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2307
block|}
block|,
comment|/* SP_QgnFrSctrlButtonSideR */
block|{
name|KAknsIIDQsnFrButtonTbSideR
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2308
block|}
block|,
comment|/* SP_QgnFrSctrlButtonCenter */
block|{
name|KAknsIIDQsnFrButtonTbCenter
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2309
block|}
block|,
comment|/*KAknsIIDQgnFrSctrlButtonCenter*/
comment|// No pressed state for toolbar button in 3.1/3.2.
comment|/* SP_QgnFrSctrlButtonCornerTlPressed */
block|{
name|KAknsIIDQsnFrButtonTbCornerTl
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2621
block|}
block|,
comment|/*KAknsIIDQgnFrSctrlButtonCornerTlPressed*/
comment|/* SP_QgnFrSctrlButtonCornerTrPressed */
block|{
name|KAknsIIDQsnFrButtonTbCornerTr
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2622
block|}
block|,
comment|/* SP_QgnFrSctrlButtonCornerBlPressed */
block|{
name|KAknsIIDQsnFrButtonTbCornerBl
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2623
block|}
block|,
comment|/* SP_QgnFrSctrlButtonCornerBrPressed */
block|{
name|KAknsIIDQsnFrButtonTbCornerBr
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2624
block|}
block|,
comment|/* SP_QgnFrSctrlButtonSideTPressed */
block|{
name|KAknsIIDQsnFrButtonTbSideT
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2625
block|}
block|,
comment|/* SP_QgnFrSctrlButtonSideBPressed */
block|{
name|KAknsIIDQsnFrButtonTbSideB
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2626
block|}
block|,
comment|/* SP_QgnFrSctrlButtonSideLPressed */
block|{
name|KAknsIIDQsnFrButtonTbSideL
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2627
block|}
block|,
comment|/* SP_QgnFrSctrlButtonSideRPressed */
block|{
name|KAknsIIDQsnFrButtonTbSideR
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2628
block|}
block|,
comment|/* SP_QgnFrSctrlButtonCenterPressed */
block|{
name|KAknsIIDQsnFrButtonTbCenter
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2629
block|}
block|,
comment|// 3.1& 3.2 do not have pressed state for scrollbar, so use normal scrollbar graphics instead.
comment|/* SP_QsnCpScrollHandleBottomPressed*/
block|{
name|KAknsIIDQsnCpScrollHandleBottom
block|,
name|EDrawIcon
block|,
name|ES60_3_X
block|,
name|EAknsMajorGeneric
block|,
literal|0x20f8
block|}
block|,
comment|/*KAknsIIDQsnCpScrollHandleBottomPressed*/
comment|/* SP_QsnCpScrollHandleMiddlePressed*/
block|{
name|KAknsIIDQsnCpScrollHandleMiddle
block|,
name|EDrawIcon
block|,
name|ES60_3_X
block|,
name|EAknsMajorGeneric
block|,
literal|0x20f9
block|}
block|,
comment|/*KAknsIIDQsnCpScrollHandleMiddlePressed*/
comment|/* SP_QsnCpScrollHandleTopPressed*/
block|{
name|KAknsIIDQsnCpScrollHandleTop
block|,
name|EDrawIcon
block|,
name|ES60_3_X
block|,
name|EAknsMajorGeneric
block|,
literal|0x20fa
block|}
block|,
comment|/*KAknsIIDQsnCpScrollHandleTopPressed*/
comment|/* SP_QsnBgScreen */
block|{
name|KAknsIIDQsnBgScreen
block|,
name|EDrawBackground
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnCpScrollBgBottom */
block|{
name|KAknsIIDQsnCpScrollBgBottom
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnCpScrollBgMiddle */
block|{
name|KAknsIIDQsnCpScrollBgMiddle
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnCpScrollBgTop */
block|{
name|KAknsIIDQsnCpScrollBgTop
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnCpScrollHandleBottom */
block|{
name|KAknsIIDQsnCpScrollHandleBottom
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnCpScrollHandleMiddle */
block|{
name|KAknsIIDQsnCpScrollHandleMiddle
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnCpScrollHandleTop */
block|{
name|KAknsIIDQsnCpScrollHandleTop
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbCornerTl */
block|{
name|KAknsIIDQsnFrButtonTbCornerTl
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbCornerTr */
block|{
name|KAknsIIDQsnFrButtonTbCornerTr
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbCornerBl */
block|{
name|KAknsIIDQsnFrButtonTbCornerBl
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbCornerBr */
block|{
name|KAknsIIDQsnFrButtonTbCornerBr
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbSideT */
block|{
name|KAknsIIDQsnFrButtonTbSideT
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbSideB */
block|{
name|KAknsIIDQsnFrButtonTbSideB
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbSideL */
block|{
name|KAknsIIDQsnFrButtonTbSideL
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbSideR */
block|{
name|KAknsIIDQsnFrButtonTbSideR
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbCenter */
block|{
name|KAknsIIDQsnFrButtonTbCenter
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbCornerTlPressed */
block|{
name|KAknsIIDQsnFrButtonTbCornerTlPressed
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbCornerTrPressed */
block|{
name|KAknsIIDQsnFrButtonTbCornerTrPressed
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbCornerBlPressed */
block|{
name|KAknsIIDQsnFrButtonTbCornerBlPressed
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbCornerBrPressed */
block|{
name|KAknsIIDQsnFrButtonTbCornerBrPressed
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbSideTPressed */
block|{
name|KAknsIIDQsnFrButtonTbSideTPressed
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbSideBPressed */
block|{
name|KAknsIIDQsnFrButtonTbSideBPressed
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbSideLPressed */
block|{
name|KAknsIIDQsnFrButtonTbSideLPressed
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbSideRPressed */
block|{
name|KAknsIIDQsnFrButtonTbSideRPressed
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrButtonTbCenterPressed */
block|{
name|KAknsIIDQsnFrButtonTbCenterPressed
block|,
name|EDrawIcon
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleCornerTl */
block|{
name|KAknsIIDQsnFrCaleCornerTl
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleCornerTr */
block|{
name|KAknsIIDQsnFrCaleCornerTr
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleCornerBl */
block|{
name|KAknsIIDQsnFrCaleCornerBl
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleCornerBr */
block|{
name|KAknsIIDQsnFrCaleCornerBr
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleSideT */
block|{
name|KAknsIIDQsnFrCaleSideT
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleSideB */
block|{
name|KAknsIIDQsnFrCaleSideB
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleSideL */
block|{
name|KAknsIIDQsnFrCaleSideL
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleSideR */
block|{
name|KAknsIIDQsnFrCaleSideR
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleCenter */
block|{
name|KAknsIIDQsnFrCaleCenter
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleHeadingCornerTl */
block|{
name|KAknsIIDQsnFrCaleHeadingCornerTl
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleHeadingCornerTr */
block|{
name|KAknsIIDQsnFrCaleHeadingCornerTr
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleHeadingCornerBl */
block|{
name|KAknsIIDQsnFrCaleHeadingCornerBl
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleHeadingCornerBr */
block|{
name|KAknsIIDQsnFrCaleHeadingCornerBr
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleHeadingSideT */
block|{
name|KAknsIIDQsnFrCaleHeadingSideT
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleHeadingSideB */
block|{
name|KAknsIIDQsnFrCaleHeadingSideB
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleHeadingSideL */
block|{
name|KAknsIIDQsnFrCaleHeadingSideL
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleHeadingSideR */
block|{
name|KAknsIIDQsnFrCaleHeadingSideR
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrCaleHeadingCenter */
block|{
name|KAknsIIDQsnFrCaleHeadingCenter
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrInputCornerTl */
block|{
name|KAknsIIDQsnFrInputCornerTl
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrInputCornerTr */
block|{
name|KAknsIIDQsnFrInputCornerTr
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrInputCornerBl */
block|{
name|KAknsIIDQsnFrInputCornerBl
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrInputCornerBr */
block|{
name|KAknsIIDQsnFrInputCornerBr
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrInputSideT */
block|{
name|KAknsIIDQsnFrInputSideT
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrInputSideB */
block|{
name|KAknsIIDQsnFrInputSideB
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrInputSideL */
block|{
name|KAknsIIDQsnFrInputSideL
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrInputSideR */
block|{
name|KAknsIIDQsnFrInputSideR
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrInputCenter */
block|{
name|KAknsIIDQsnFrInputCenter
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrListCornerTl */
block|{
name|KAknsIIDQsnFrListCornerTl
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrListCornerTr */
block|{
name|KAknsIIDQsnFrListCornerTr
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrListCornerBl */
block|{
name|KAknsIIDQsnFrListCornerBl
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrListCornerBr */
block|{
name|KAknsIIDQsnFrListCornerBr
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrListSideT */
block|{
name|KAknsIIDQsnFrListSideT
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrListSideB */
block|{
name|KAknsIIDQsnFrListSideB
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrListSideL */
block|{
name|KAknsIIDQsnFrListSideL
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrListSideR */
block|{
name|KAknsIIDQsnFrListSideR
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrListCenter */
block|{
name|KAknsIIDQsnFrListCenter
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupCornerTl */
block|{
name|KAknsIIDQsnFrPopupCornerTl
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupCornerTr */
block|{
name|KAknsIIDQsnFrPopupCornerTr
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupCornerBl */
block|{
name|KAknsIIDQsnFrPopupCornerBl
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupCornerBr */
block|{
name|KAknsIIDQsnFrPopupCornerBr
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupSideT */
block|{
name|KAknsIIDQsnFrPopupSideT
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupSideB */
block|{
name|KAknsIIDQsnFrPopupSideB
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupSideL */
block|{
name|KAknsIIDQsnFrPopupSideL
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupSideR */
block|{
name|KAknsIIDQsnFrPopupSideR
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupCenter */
block|{
name|KAknsIIDQsnFrPopupCenterSubmenu
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|// ToolTip graphics different in 3.1 vs. 3.2+.
comment|/* SP_QsnFrPopupPreviewCornerTl */
block|{
name|KAknsIIDQsnFrPopupCornerTl
block|,
name|ENoDraw
block|,
name|ES60_3_1
block|,
name|EAknsMajorSkin
block|,
literal|0x19c5
block|}
block|,
comment|/* KAknsIIDQsnFrPopupPreviewCornerTl */
comment|/* SP_QsnFrPopupPreviewCornerTr */
block|{
name|KAknsIIDQsnFrPopupCornerTr
block|,
name|ENoDraw
block|,
name|ES60_3_1
block|,
name|EAknsMajorSkin
block|,
literal|0x19c6
block|}
block|,
comment|/* SP_QsnFrPopupPreviewCornerBl */
block|{
name|KAknsIIDQsnFrPopupCornerBl
block|,
name|ENoDraw
block|,
name|ES60_3_1
block|,
name|EAknsMajorSkin
block|,
literal|0x19c3
block|}
block|,
comment|/* SP_QsnFrPopupPreviewCornerBr */
block|{
name|KAknsIIDQsnFrPopupCornerBr
block|,
name|ENoDraw
block|,
name|ES60_3_1
block|,
name|EAknsMajorSkin
block|,
literal|0x19c4
block|}
block|,
comment|/* SP_QsnFrPopupPreviewSideT */
block|{
name|KAknsIIDQsnFrPopupSideT
block|,
name|ENoDraw
block|,
name|ES60_3_1
block|,
name|EAknsMajorSkin
block|,
literal|0x19ca
block|}
block|,
comment|/* SP_QsnFrPopupPreviewSideB */
block|{
name|KAknsIIDQsnFrPopupSideB
block|,
name|ENoDraw
block|,
name|ES60_3_1
block|,
name|EAknsMajorSkin
block|,
literal|0x19c7
block|}
block|,
comment|/* SP_QsnFrPopupPreviewSideL */
block|{
name|KAknsIIDQsnFrPopupSideL
block|,
name|ENoDraw
block|,
name|ES60_3_1
block|,
name|EAknsMajorSkin
block|,
literal|0x19c8
block|}
block|,
comment|/* SP_QsnFrPopupPreviewSideR */
block|{
name|KAknsIIDQsnFrPopupSideR
block|,
name|ENoDraw
block|,
name|ES60_3_1
block|,
name|EAknsMajorSkin
block|,
literal|0x19c9
block|}
block|,
comment|/* SP_QsnFrPopupPreviewCenter */
block|{
name|KAknsIIDQsnFrPopupCenter
block|,
name|ENoDraw
block|,
name|ES60_3_1
block|,
name|EAknsMajorSkin
block|,
literal|0x19c2
block|}
block|,
comment|/* SP_QsnFrSetOptCornerTl */
block|{
name|KAknsIIDQsnFrSetOptCornerTl
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrSetOptCornerTr */
block|{
name|KAknsIIDQsnFrSetOptCornerTr
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrSetOptCornerBl */
block|{
name|KAknsIIDQsnFrSetOptCornerBl
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrSetOptCornerBr */
block|{
name|KAknsIIDQsnFrSetOptCornerBr
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrSetOptSideT */
block|{
name|KAknsIIDQsnFrSetOptSideT
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrSetOptSideB */
block|{
name|KAknsIIDQsnFrSetOptSideB
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrSetOptSideL */
block|{
name|KAknsIIDQsnFrSetOptSideL
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrSetOptSideR */
block|{
name|KAknsIIDQsnFrSetOptSideR
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrSetOptCenter */
block|{
name|KAknsIIDQsnFrSetOptCenter
block|,
name|ENoDraw
block|,
name|ES60_All
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|// No toolbar frame for 5.0+ releases.
comment|/* SP_QsnFrPopupSubCornerTl */
block|{
name|KAknsIIDQsnFrPopupSubCornerTl
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupSubCornerTr */
block|{
name|KAknsIIDQsnFrPopupSubCornerTr
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupSubCornerBl */
block|{
name|KAknsIIDQsnFrPopupSubCornerBl
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupSubCornerBr */
block|{
name|KAknsIIDQsnFrPopupSubCornerBr
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupSubSideT */
block|{
name|KAknsIIDQsnFrPopupSubSideT
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupSubSideB */
block|{
name|KAknsIIDQsnFrPopupSubSideB
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupSubSideL */
block|{
name|KAknsIIDQsnFrPopupSubSideL
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupSubSideR */
block|{
name|KAknsIIDQsnFrPopupSubSideR
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|/* SP_QsnFrPopupSubCenter */
block|{
name|KAknsIIDQsnFrPopupCenterSubmenu
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
comment|// No inactive button graphics in 3.1/3.2
comment|/* SP_QsnFrButtonCornerTlInactive */
block|{
name|KAknsIIDQsnFrButtonTbCornerTl
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x21b1
block|}
block|,
comment|/*KAknsIIDQsnFrButtonCornerTlInactive*/
comment|/* SP_QsnFrButtonCornerTrInactive */
block|{
name|KAknsIIDQsnFrButtonTbCornerTr
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x21b2
block|}
block|,
comment|/* SP_QsnFrButtonCornerBlInactive */
block|{
name|KAknsIIDQsnFrButtonTbCornerBl
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x21b3
block|}
block|,
comment|/* SP_QsnFrButtonCornerTrInactive */
block|{
name|KAknsIIDQsnFrButtonTbCornerBr
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x21b4
block|}
block|,
comment|/* SP_QsnFrButtonSideTInactive */
block|{
name|KAknsIIDQsnFrButtonTbSideT
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x21b5
block|}
block|,
comment|/* SP_QsnFrButtonSideBInactive */
block|{
name|KAknsIIDQsnFrButtonTbSideB
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x21b6
block|}
block|,
comment|/* SP_QsnFrButtonSideLInactive */
block|{
name|KAknsIIDQsnFrButtonTbSideL
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x21b7
block|}
block|,
comment|/* SP_QsnFrButtonSideRInactive */
block|{
name|KAknsIIDQsnFrButtonTbSideR
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x21b8
block|}
block|,
comment|/* SP_QsnFrButtonCenterInactive */
block|{
name|KAknsIIDQsnFrButtonTbCenter
block|,
name|EDrawIcon
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x21b9
block|}
block|,
comment|// No pressed down grid in 3.1/3.2
comment|/* SP_QsnFrGridCornerTlPressed */
block|{
name|KAknsIIDQsnFrGridCornerTl
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2681
block|}
block|,
comment|/*KAknsIIDQsnFrGridCornerTlPressed*/
comment|/* SP_QsnFrGridCornerTrPressed */
block|{
name|KAknsIIDQsnFrGridCornerTr
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2682
block|}
block|,
comment|/* SP_QsnFrGridCornerBlPressed */
block|{
name|KAknsIIDQsnFrGridCornerBl
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2683
block|}
block|,
comment|/* SP_QsnFrGridCornerBrPressed */
block|{
name|KAknsIIDQsnFrGridCornerBr
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2684
block|}
block|,
comment|/* SP_QsnFrGridSideTPressed */
block|{
name|KAknsIIDQsnFrGridSideT
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2685
block|}
block|,
comment|/* SP_QsnFrGridSideBPressed */
block|{
name|KAknsIIDQsnFrGridSideB
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2686
block|}
block|,
comment|/* SP_QsnFrGridSideLPressed */
block|{
name|KAknsIIDQsnFrGridSideL
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2687
block|}
block|,
comment|/* SP_QsnFrGridSideRPressed */
block|{
name|KAknsIIDQsnFrGridSideR
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2688
block|}
block|,
comment|/* SP_QsnFrGridCenterPressed */
block|{
name|KAknsIIDQsnFrGridCenter
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2689
block|}
block|,
comment|// No pressed down list in 3.1/3.2
comment|/* SP_QsnFrListCornerTlPressed */
block|{
name|KAknsIIDQsnFrListCornerTl
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x268b
block|}
block|,
comment|/*KAknsIIDQsnFrListCornerTlPressed*/
comment|/* SP_QsnFrListCornerTrPressed */
block|{
name|KAknsIIDQsnFrListCornerTr
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x268c
block|}
block|,
comment|/* SP_QsnFrListCornerBlPressed */
block|{
name|KAknsIIDQsnFrListCornerBl
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x268d
block|}
block|,
comment|/* SP_QsnFrListCornerBrPressed */
block|{
name|KAknsIIDQsnFrListCornerBr
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x268e
block|}
block|,
comment|/* SP_QsnFrListSideTPressed */
block|{
name|KAknsIIDQsnFrListSideT
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x268f
block|}
block|,
comment|/* SP_QsnFrListSideBPressed */
block|{
name|KAknsIIDQsnFrListSideB
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2690
block|}
block|,
comment|/* SP_QsnFrListSideLPressed */
block|{
name|KAknsIIDQsnFrListSideL
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2691
block|}
block|,
comment|/* SP_QsnFrListSideRPressed */
block|{
name|KAknsIIDQsnFrListSideR
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2692
block|}
block|,
comment|/* SP_QsnFrListCenterPressed */
block|{
name|KAknsIIDQsnFrListCenter
block|,
name|ENoDraw
block|,
name|ES60_3_X
block|,
name|EAknsMajorSkin
block|,
literal|0x2693
block|}
block|, }
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|skinnedGraphics
name|QPixmap
name|QS60StyleModeSpecifics
operator|::
name|skinnedGraphics
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
name|stylepart
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|)
block|{
name|QPixmap
name|themedImage
decl_stmt|;
name|TRAPD
argument_list|(
argument|error
argument_list|,
argument|QT_TRYCATCH_LEAVING({             const QPixmap skinnedImage = createSkinnedGraphicsLX(stylepart, size, flags);             themedImage = skinnedImage;     })
argument_list|)
empty_stmt|;
if|if
condition|(
name|error
condition|)
return|return
name|themedImage
operator|=
name|QPixmap
argument_list|()
return|;
return|return
name|themedImage
return|;
block|}
end_function
begin_function
DECL|function|skinnedGraphics
name|QPixmap
name|QS60StyleModeSpecifics
operator|::
name|skinnedGraphics
parameter_list|(
name|QS60StylePrivate
operator|::
name|SkinFrameElements
name|frame
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|)
block|{
name|QPixmap
name|themedImage
decl_stmt|;
name|TRAPD
argument_list|(
argument|error
argument_list|,
argument|QT_TRYCATCH_LEAVING({             const QPixmap skinnedImage = createSkinnedGraphicsLX(frame, size, flags);             themedImage = skinnedImage;     })
argument_list|)
empty_stmt|;
if|if
condition|(
name|error
condition|)
return|return
name|themedImage
operator|=
name|QPixmap
argument_list|()
return|;
return|return
name|themedImage
return|;
block|}
end_function
begin_function
DECL|function|colorSkinnedGraphics
name|QPixmap
name|QS60StyleModeSpecifics
operator|::
name|colorSkinnedGraphics
parameter_list|(
specifier|const
name|QS60StyleEnums
operator|::
name|SkinParts
modifier|&
name|stylepart
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|)
block|{
name|QPixmap
name|colorGraphics
decl_stmt|;
name|TRAPD
argument_list|(
name|error
argument_list|,
name|QT_TRYCATCH_LEAVING
argument_list|(
name|colorGraphics
operator|=
name|colorSkinnedGraphicsLX
argument_list|(
name|stylepart
argument_list|,
name|size
argument_list|,
name|painter
argument_list|,
name|flags
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|error
condition|?
name|QPixmap
argument_list|()
else|:
name|colorGraphics
return|;
block|}
end_function
begin_function
DECL|function|fallbackInfo
name|void
name|QS60StyleModeSpecifics
operator|::
name|fallbackInfo
parameter_list|(
specifier|const
name|QS60StyleEnums
operator|::
name|SkinParts
modifier|&
name|stylePart
parameter_list|,
name|TInt
modifier|&
name|fallbackIndex
parameter_list|)
block|{
switch|switch
condition|(
name|stylePart
condition|)
block|{
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarWaitAnim
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_graf_bar_wait_1
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarFrameCenter
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_graf_bar_frame_center
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarFrameSideL
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_graf_bar_frame_side_l
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarFrameSideR
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_graf_bar_frame_side_r
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarProgress
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_graf_bar_progress
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveL
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_graf_tab_active_l
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveM
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_graf_tab_active_m
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabActiveR
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_graf_tab_active_r
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveL
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_graf_tab_passive_l
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveM
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_graf_tab_passive_m
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafTabPassiveR
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_graf_tab_passive_r
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnIndiCheckboxOff
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_indi_checkbox_off
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnIndiCheckboxOn
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_indi_checkbox_on
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnIndiHlColSuper
case|:
name|fallbackIndex
operator|=
literal|0x4456
expr_stmt|;
comment|/* EMbmAvkonQgn_indi_hl_col_super */
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnIndiHlExpSuper
case|:
name|fallbackIndex
operator|=
literal|0x4458
expr_stmt|;
comment|/* EMbmAvkonQgn_indi_hl_exp_super */
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnIndiHlLineBranch
case|:
name|fallbackIndex
operator|=
literal|0x445A
expr_stmt|;
comment|/* EMbmAvkonQgn_indi_hl_line_branch */
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnIndiHlLineEnd
case|:
name|fallbackIndex
operator|=
literal|0x445C
expr_stmt|;
comment|/* EMbmAvkonQgn_indi_hl_line_end */
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnIndiHlLineStraight
case|:
name|fallbackIndex
operator|=
literal|0x445E
expr_stmt|;
comment|/* EMbmAvkonQgn_indi_hl_line_straight */
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnIndiMarkedAdd
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_indi_marked_add
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnIndiNaviArrowLeft
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_indi_navi_arrow_left
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnIndiNaviArrowRight
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_indi_navi_arrow_right
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnIndiRadiobuttOff
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_indi_radiobutt_off
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnIndiRadiobuttOn
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_indi_radiobutt_on
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderMarker
case|:
name|fallbackIndex
operator|=
literal|17572
expr_stmt|;
comment|/* EMbmAvkonQgn_graf_nslider_marker */
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnGrafNsliderMarkerSelected
case|:
name|fallbackIndex
operator|=
literal|17574
expr_stmt|;
comment|/* EMbmAvkonQgn_graf_nslider_marker_selected */
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnIndiSubmenu
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_indi_submenu
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnNoteErased
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_note_erased
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnNoteError
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_note_error
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnNoteInfo
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_note_info
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnNoteOk
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_note_ok
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnNoteQuery
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_note_query
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnNoteWarning
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_note_warning
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnPropFileSmall
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_prop_file_small
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnPropFolderCurrent
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_prop_folder_current
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnPropFolderSmall
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_prop_folder_small
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnPropFolderSmallNew
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_prop_folder_small_new
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QgnPropPhoneMemcLarge
case|:
name|fallbackIndex
operator|=
name|EMbmAvkonQgn_prop_phone_memc_large
expr_stmt|;
break|break;
default|default:
name|fallbackIndex
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|colorSkinnedGraphicsLX
name|QPixmap
name|QS60StyleModeSpecifics
operator|::
name|colorSkinnedGraphicsLX
parameter_list|(
specifier|const
name|QS60StyleEnums
operator|::
name|SkinParts
modifier|&
name|stylepart
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|)
block|{
comment|// this function can throw both exceptions and leaves. There are no cleanup dependencies between Qt and Symbian parts.
specifier|const
name|int
name|stylepartIndex
init|=
operator|(
name|int
operator|)
name|stylepart
decl_stmt|;
specifier|const
name|TAknsItemID
name|skinId
init|=
name|m_partMap
index|[
name|stylepartIndex
index|]
operator|.
name|skinID
decl_stmt|;
name|TInt
name|fallbackGraphicID
init|=
operator|-
literal|1
decl_stmt|;
name|HBufC
modifier|*
name|iconFile
init|=
name|HBufC
operator|::
name|NewLC
argument_list|(
name|KMaxFileName
argument_list|)
decl_stmt|;
name|fallbackInfo
argument_list|(
name|stylepart
argument_list|,
name|fallbackGraphicID
argument_list|)
expr_stmt|;
name|TAknsItemID
name|colorGroup
init|=
name|KAknsIIDQsnIconColors
decl_stmt|;
name|TRgb
name|defaultColor
init|=
name|KRgbBlack
decl_stmt|;
name|int
name|colorIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|//set a bogus value to color index to ensure that painter color is used
comment|//to color the icon
if|if
condition|(
name|painter
condition|)
block|{
name|QRgb
name|widgetColor
init|=
name|painter
operator|->
name|pen
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|rgb
argument_list|()
decl_stmt|;
name|defaultColor
operator|=
name|TRgb
argument_list|(
name|qRed
argument_list|(
name|widgetColor
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|widgetColor
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|widgetColor
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|bool
name|rotatedBy90or270
init|=
operator|(
name|flags
operator|&
operator|(
name|QS60StylePrivate
operator|::
name|SF_PointEast
operator||
name|QS60StylePrivate
operator|::
name|SF_PointWest
operator|)
operator|)
decl_stmt|;
specifier|const
name|TSize
name|targetSize
init|=
name|rotatedBy90or270
condition|?
name|TSize
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|)
else|:
name|TSize
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|CFbsBitmap
modifier|*
name|icon
init|=
literal|0
decl_stmt|;
name|CFbsBitmap
modifier|*
name|iconMask
init|=
literal|0
decl_stmt|;
specifier|const
name|TInt
name|fallbackGraphicsMaskID
init|=
name|fallbackGraphicID
operator|==
name|KErrNotFound
condition|?
name|KErrNotFound
else|:
name|fallbackGraphicID
operator|+
literal|1
decl_stmt|;
comment|//masks are auto-generated as next in mif files
name|MAknsSkinInstance
modifier|*
name|skinInstance
init|=
name|AknsUtils
operator|::
name|SkinInstance
argument_list|()
decl_stmt|;
name|AknsUtils
operator|::
name|CreateColorIconLC
argument_list|(
name|skinInstance
argument_list|,
name|skinId
argument_list|,
name|colorGroup
argument_list|,
name|colorIndex
argument_list|,
name|icon
argument_list|,
name|iconMask
argument_list|,
name|AknIconUtils
operator|::
name|AvkonIconFileName
argument_list|()
argument_list|,
name|fallbackGraphicID
argument_list|,
name|fallbackGraphicsMaskID
argument_list|,
name|defaultColor
argument_list|)
expr_stmt|;
name|QPixmap
name|result
init|=
name|fromFbsBitmap
argument_list|(
name|icon
argument_list|,
name|iconMask
argument_list|,
name|flags
argument_list|,
name|targetSize
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|//icon, iconMask, iconFile
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|colorValue
name|QColor
name|QS60StyleModeSpecifics
operator|::
name|colorValue
parameter_list|(
specifier|const
name|TAknsItemID
modifier|&
name|colorGroup
parameter_list|,
name|int
name|colorIndex
parameter_list|)
block|{
name|TRgb
name|skinnedColor
decl_stmt|;
name|MAknsSkinInstance
modifier|*
name|skin
init|=
name|AknsUtils
operator|::
name|SkinInstance
argument_list|()
decl_stmt|;
name|AknsUtils
operator|::
name|GetCachedColor
argument_list|(
name|skin
argument_list|,
name|skinnedColor
argument_list|,
name|colorGroup
argument_list|,
name|colorIndex
argument_list|)
expr_stmt|;
return|return
name|QColor
argument_list|(
name|skinnedColor
operator|.
name|Red
argument_list|()
argument_list|,
name|skinnedColor
operator|.
name|Green
argument_list|()
argument_list|,
name|skinnedColor
operator|.
name|Blue
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_struct
DECL|struct|QAutoFbsBitmapHeapLock
struct|struct
name|QAutoFbsBitmapHeapLock
block|{
DECL|function|QAutoFbsBitmapHeapLock
name|QAutoFbsBitmapHeapLock
parameter_list|(
name|CFbsBitmap
modifier|*
name|aBmp
parameter_list|)
member_init_list|:
name|mBmp
argument_list|(
name|aBmp
argument_list|)
block|{
name|mBmp
operator|->
name|LockHeap
argument_list|()
expr_stmt|;
block|}
DECL|function|~QAutoFbsBitmapHeapLock
name|~
name|QAutoFbsBitmapHeapLock
parameter_list|()
block|{
name|mBmp
operator|->
name|UnlockHeap
argument_list|()
expr_stmt|;
block|}
DECL|member|mBmp
name|CFbsBitmap
modifier|*
name|mBmp
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|fromFbsBitmap
name|QPixmap
name|QS60StyleModeSpecifics
operator|::
name|fromFbsBitmap
parameter_list|(
name|CFbsBitmap
modifier|*
name|icon
parameter_list|,
name|CFbsBitmap
modifier|*
name|mask
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|,
specifier|const
name|TSize
modifier|&
name|targetSize
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|AknIconUtils
operator|::
name|DisableCompression
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|TInt
name|error
init|=
name|AknIconUtils
operator|::
name|SetSize
argument_list|(
name|icon
argument_list|,
name|targetSize
argument_list|,
name|EAspectRatioNotPreserved
argument_list|)
decl_stmt|;
if|if
condition|(
name|mask
operator|&&
operator|!
name|error
condition|)
block|{
name|AknIconUtils
operator|::
name|DisableCompression
argument_list|(
name|mask
argument_list|)
expr_stmt|;
name|error
operator|=
name|AknIconUtils
operator|::
name|SetSize
argument_list|(
name|mask
argument_list|,
name|targetSize
argument_list|,
name|EAspectRatioNotPreserved
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
condition|)
return|return
name|QPixmap
argument_list|()
return|;
name|QPixmap
name|pixmap
decl_stmt|;
name|QScopedPointer
argument_list|<
name|QPlatformPixmap
argument_list|>
name|pd
argument_list|(
name|QPlatformPixmap
operator|::
name|create
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QPlatformPixmap
operator|::
name|PixmapType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mask
condition|)
block|{
comment|// Try the efficient path with less copying and conversion.
name|QVolatileImage
name|img
argument_list|(
name|icon
argument_list|,
name|mask
argument_list|)
decl_stmt|;
name|pd
operator|->
name|fromNativeType
argument_list|(
operator|&
name|img
argument_list|,
name|QPlatformPixmap
operator|::
name|VolatileImage
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pd
operator|->
name|isNull
argument_list|()
condition|)
name|pixmap
operator|=
name|QPixmap
argument_list|(
name|pd
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// Potentially more expensive path.
name|pd
operator|->
name|fromNativeType
argument_list|(
name|icon
argument_list|,
name|QPlatformPixmap
operator|::
name|FbsBitmap
argument_list|)
expr_stmt|;
name|pixmap
operator|=
name|QPixmap
argument_list|(
name|pd
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
condition|)
block|{
name|pixmap
operator|.
name|setAlphaChannel
argument_list|(
name|QPixmap
operator|::
name|fromSymbianCFbsBitmap
argument_list|(
name|mask
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|QS60StylePrivate
operator|::
name|SF_PointEast
operator|)
operator|||
operator|(
name|flags
operator|&
name|QS60StylePrivate
operator|::
name|SF_PointSouth
operator|)
operator|||
operator|(
name|flags
operator|&
name|QS60StylePrivate
operator|::
name|SF_PointWest
operator|)
condition|)
block|{
name|QImage
name|iconImage
init|=
name|pixmap
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QTransform
name|imageTransform
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|QS60StylePrivate
operator|::
name|SF_PointEast
condition|)
block|{
name|imageTransform
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|QS60StylePrivate
operator|::
name|SF_PointSouth
condition|)
block|{
name|imageTransform
operator|.
name|rotate
argument_list|(
literal|180
argument_list|)
expr_stmt|;
name|iconImage
operator|=
name|iconImage
operator|.
name|transformed
argument_list|(
name|imageTransform
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|QS60StylePrivate
operator|::
name|SF_PointWest
condition|)
block|{
name|imageTransform
operator|.
name|rotate
argument_list|(
literal|270
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|imageTransform
operator|.
name|isRotating
argument_list|()
condition|)
name|iconImage
operator|=
name|iconImage
operator|.
name|transformed
argument_list|(
name|imageTransform
argument_list|)
expr_stmt|;
name|pixmap
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|iconImage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|QS60StylePrivate
operator|::
name|SF_Mirrored_X_Axis
operator|)
operator|||
operator|(
name|flags
operator|&
name|QS60StylePrivate
operator|::
name|SF_Mirrored_Y_Axis
operator|)
condition|)
block|{
name|QImage
name|iconImage
init|=
name|pixmap
operator|.
name|toImage
argument_list|()
operator|.
name|mirrored
argument_list|(
name|flags
operator|&
name|QS60StylePrivate
operator|::
name|SF_Mirrored_X_Axis
argument_list|,
name|flags
operator|&
name|QS60StylePrivate
operator|::
name|SF_Mirrored_Y_Axis
argument_list|)
decl_stmt|;
name|pixmap
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|iconImage
argument_list|)
expr_stmt|;
block|}
return|return
name|pixmap
return|;
block|}
end_function
begin_function
DECL|function|isTouchSupported
name|bool
name|QS60StylePrivate
operator|::
name|isTouchSupported
parameter_list|()
block|{
return|return
name|bool
argument_list|(
name|AknLayoutUtils
operator|::
name|PenEnabled
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isToolBarBackground
name|bool
name|QS60StylePrivate
operator|::
name|isToolBarBackground
parameter_list|()
block|{
return|return
operator|(
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_1
operator|||
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_2
operator|)
return|;
block|}
end_function
begin_function
DECL|function|hasSliderGrooveGraphic
name|bool
name|QS60StylePrivate
operator|::
name|hasSliderGrooveGraphic
parameter_list|()
block|{
return|return
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|!=
name|QSysInfo
operator|::
name|SV_S60_3_1
return|;
block|}
end_function
begin_function
DECL|function|isSingleClickUi
name|bool
name|QS60StylePrivate
operator|::
name|isSingleClickUi
parameter_list|()
block|{
return|return
operator|(
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|>
name|QSysInfo
operator|::
name|SV_S60_5_0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|deleteStoredSettings
name|void
name|QS60StylePrivate
operator|::
name|deleteStoredSettings
parameter_list|()
block|{
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"Trolltech"
argument_list|)
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"QS60Style"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|remove
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// Since S60Style has 'button' as a graphic, we don't have any native color which to use
end_comment
begin_comment
comment|// for QPalette::Button. Therefore S60Style needs to guesstimate palette color by calculating
end_comment
begin_comment
comment|// average rgb values for button pixels.
end_comment
begin_comment
comment|// Returns Qt::black if there is an issue with the graphics (image is NULL, or no constBits() found).
end_comment
begin_function
DECL|function|colorFromFrameGraphics
name|QColor
name|QS60StylePrivate
operator|::
name|colorFromFrameGraphics
parameter_list|(
name|SkinFrameElements
name|frame
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SETTINGS
name|TInt
name|themeID
init|=
literal|0
decl_stmt|;
comment|//First we need to fetch active theme ID. We need to store the themeID at the same time
comment|//as color, so that we can later check if the stored color is still from the same theme.
comment|//Native side stores active theme UID/Timestamp into central repository.
name|int
name|error
init|=
literal|0
decl_stmt|;
name|QT_TRAP_THROWING
argument_list|(
argument|CRepository *themeRepository = CRepository::NewLC(personalisationUID);         if (themeRepository) {             TBuf<
literal|32
argument|> value;
comment|//themeID is currently max of 8 + 1 + 8 characters, but lets have some extra space
argument|const TUint32 key =
literal|0x00000002
argument|;
comment|//active theme key in the repository
argument|error = themeRepository->Get(key, value);             if (error == KErrNone) {                 TLex lex(value);                 TPtrC numberToken(lex.NextToken());                 if (numberToken.Length())                     error = TLex(numberToken).Val(themeID);                 else                     error = KErrArgument;             }         }         CleanupStack::PopAndDestroy(themeRepository);
argument_list|)
empty_stmt|;
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"Trolltech"
argument_list|)
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"QS60Style"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|themeID
operator|!=
literal|0
condition|)
block|{
name|QVariant
name|buttonColor
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"ButtonColor"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buttonColor
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|//there is a stored color value, lets see if the theme ID matches
if|if
condition|(
name|error
operator|==
name|KErrNone
condition|)
block|{
name|QVariant
name|themeUID
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"ThemeUID"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|themeUID
operator|.
name|isNull
argument_list|()
operator|&&
name|themeUID
operator|.
name|toInt
argument_list|()
operator|==
name|themeID
condition|)
block|{
name|QColor
name|storedColor
argument_list|(
name|buttonColor
operator|.
name|value
argument_list|<
name|QColor
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedColor
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|storedColor
return|;
block|}
block|}
name|settings
operator|.
name|remove
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|//if color was invalid, or theme has been changed, just delete all stored settings
block|}
block|}
endif|#
directive|endif
name|QColor
name|color
init|=
name|calculatedColor
argument_list|(
name|frame
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SETTINGS
name|settings
operator|.
name|setValue
argument_list|(
name|QLatin1String
argument_list|(
literal|"ThemeUID"
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|themeID
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|frame
operator|==
name|SF_ButtonNormal
condition|)
comment|//other colors are not currently calculated from graphics
name|settings
operator|.
name|setValue
argument_list|(
name|QLatin1String
argument_list|(
literal|"ButtonColor"
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
name|color
return|;
block|}
end_function
begin_function
DECL|function|qt_s60_fill_background_offset
name|QPoint
name|qt_s60_fill_background_offset
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|targetWidget
parameter_list|)
block|{
name|CCoeControl
modifier|*
name|control
init|=
name|targetWidget
operator|->
name|effectiveWinId
argument_list|()
decl_stmt|;
name|TPoint
name|pos
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|control
condition|)
name|pos
operator|=
name|control
operator|->
name|PositionRelativeToScreen
argument_list|()
expr_stmt|;
return|return
name|QPoint
argument_list|(
name|pos
operator|.
name|iX
argument_list|,
name|pos
operator|.
name|iY
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createSkinnedGraphicsLX
name|QPixmap
name|QS60StyleModeSpecifics
operator|::
name|createSkinnedGraphicsLX
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|)
block|{
comment|// this function can throw both exceptions and leaves. There are no cleanup dependencies between Qt and Symbian parts.
if|if
condition|(
operator|!
name|size
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QPixmap
argument_list|()
return|;
comment|// Check release support and change part, if necessary.
specifier|const
name|TAknsItemID
name|skinId
init|=
name|partSpecificThemeId
argument_list|(
operator|(
name|int
operator|)
name|part
argument_list|)
decl_stmt|;
specifier|const
name|int
name|stylepartIndex
init|=
operator|(
name|int
operator|)
name|part
decl_stmt|;
specifier|const
name|TDrawType
name|drawType
init|=
name|m_partMap
index|[
name|stylepartIndex
index|]
operator|.
name|drawType
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|drawType
operator|!=
name|ENoDraw
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|rotatedBy90or270
init|=
operator|(
name|flags
operator|&
operator|(
name|QS60StylePrivate
operator|::
name|SF_PointEast
operator||
name|QS60StylePrivate
operator|::
name|SF_PointWest
operator|)
operator|)
decl_stmt|;
specifier|const
name|TSize
name|targetSize
init|=
name|rotatedBy90or270
condition|?
name|TSize
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|)
else|:
name|qt_QSize2TSize
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|MAknsSkinInstance
modifier|*
name|skinInstance
init|=
name|AknsUtils
operator|::
name|SkinInstance
argument_list|()
decl_stmt|;
specifier|static
specifier|const
name|TDisplayMode
name|displayMode
init|=
name|S60
operator|->
name|supportsPremultipliedAlpha
condition|?
name|Q_SYMBIAN_ECOLOR16MAP
else|:
name|EColor16MA
decl_stmt|;
specifier|static
specifier|const
name|TInt
name|drawParam
init|=
name|S60
operator|->
name|supportsPremultipliedAlpha
condition|?
name|KAknsDrawParamDefault
else|:
name|KAknsDrawParamRGBOnly
decl_stmt|;
name|QPixmap
name|result
decl_stmt|;
switch|switch
condition|(
name|drawType
condition|)
block|{
case|case
name|EDrawGulIcon
case|:
block|{
name|CGulIcon
modifier|*
name|icon
init|=
name|AknsUtils
operator|::
name|CreateGulIconL
argument_list|(
name|AknsUtils
operator|::
name|SkinInstance
argument_list|()
argument_list|,
name|skinId
argument_list|,
name|EFalse
argument_list|)
decl_stmt|;
if|if
condition|(
name|icon
condition|)
name|result
operator|=
name|fromFbsBitmap
argument_list|(
name|icon
operator|->
name|Bitmap
argument_list|()
argument_list|,
name|icon
operator|->
name|Mask
argument_list|()
argument_list|,
name|flags
argument_list|,
name|targetSize
argument_list|)
expr_stmt|;
operator|delete
name|icon
expr_stmt|;
break|break;
block|}
case|case
name|EDrawIcon
case|:
block|{
name|TInt
name|fallbackGraphicID
init|=
operator|-
literal|1
decl_stmt|;
name|fallbackInfo
argument_list|(
name|part
argument_list|,
name|fallbackGraphicID
argument_list|)
expr_stmt|;
name|CFbsBitmap
modifier|*
name|icon
init|=
literal|0
decl_stmt|;
name|CFbsBitmap
modifier|*
name|iconMask
init|=
literal|0
decl_stmt|;
specifier|const
name|TInt
name|fallbackGraphicsMaskID
init|=
name|fallbackGraphicID
operator|==
name|KErrNotFound
condition|?
name|KErrNotFound
else|:
name|fallbackGraphicID
operator|+
literal|1
decl_stmt|;
comment|//masks are auto-generated as next in mif files
name|AknsUtils
operator|::
name|CreateIconL
argument_list|(
name|skinInstance
argument_list|,
name|skinId
argument_list|,
name|icon
argument_list|,
name|iconMask
argument_list|,
name|AknIconUtils
operator|::
name|AvkonIconFileName
argument_list|()
argument_list|,
name|fallbackGraphicID
argument_list|,
name|fallbackGraphicsMaskID
argument_list|)
expr_stmt|;
name|result
operator|=
name|fromFbsBitmap
argument_list|(
name|icon
argument_list|,
name|iconMask
argument_list|,
name|flags
argument_list|,
name|targetSize
argument_list|)
expr_stmt|;
operator|delete
name|icon
expr_stmt|;
operator|delete
name|iconMask
expr_stmt|;
break|break;
block|}
case|case
name|EDrawBackground
case|:
block|{
comment|//        QS60WindowSurface::unlockBitmapHeap();
name|CFbsBitmap
modifier|*
name|background
init|=
operator|new
operator|(
name|ELeave
operator|)
name|CFbsBitmap
argument_list|()
decl_stmt|;
comment|//offscreen
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|background
argument_list|)
expr_stmt|;
name|User
operator|::
name|LeaveIfError
argument_list|(
name|background
operator|->
name|Create
argument_list|(
name|targetSize
argument_list|,
name|displayMode
argument_list|)
argument_list|)
expr_stmt|;
name|CFbsBitmapDevice
modifier|*
name|dev
init|=
name|CFbsBitmapDevice
operator|::
name|NewL
argument_list|(
name|background
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|dev
argument_list|)
expr_stmt|;
name|CFbsBitGc
modifier|*
name|gc
init|=
name|NULL
decl_stmt|;
name|User
operator|::
name|LeaveIfError
argument_list|(
name|dev
operator|->
name|CreateContext
argument_list|(
name|gc
argument_list|)
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|gc
argument_list|)
expr_stmt|;
name|CAknsBasicBackgroundControlContext
modifier|*
name|bgContext
init|=
name|CAknsBasicBackgroundControlContext
operator|::
name|NewL
argument_list|(
name|skinId
argument_list|,
name|targetSize
argument_list|,
name|EFalse
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|bgContext
argument_list|)
expr_stmt|;
specifier|const
name|TBool
name|drawn
init|=
name|AknsDrawUtils
operator|::
name|DrawBackground
argument_list|(
name|skinInstance
argument_list|,
name|bgContext
argument_list|,
name|NULL
argument_list|,
operator|*
name|gc
argument_list|,
name|TPoint
argument_list|()
argument_list|,
name|targetSize
argument_list|,
name|drawParam
argument_list|)
decl_stmt|;
if|if
condition|(
name|drawn
condition|)
name|result
operator|=
name|fromFbsBitmap
argument_list|(
name|background
argument_list|,
name|NULL
argument_list|,
name|flags
argument_list|,
name|targetSize
argument_list|)
expr_stmt|;
comment|// if drawing fails in skin server, just ignore the background (probably OOM case)
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
literal|4
argument_list|,
name|background
argument_list|)
expr_stmt|;
comment|//background, dev, gc, bgContext
comment|//        QS60WindowSurface::lockBitmapHeap();
break|break;
block|}
case|case
name|EDrawAnimation
case|:
block|{
name|CFbsBitmap
modifier|*
name|animationFrame
decl_stmt|;
name|CFbsBitmap
modifier|*
name|frameMask
decl_stmt|;
name|CAknBitmapAnimation
modifier|*
name|aknAnimation
init|=
literal|0
decl_stmt|;
name|TBool
name|constructedFromTheme
init|=
name|ETrue
decl_stmt|;
name|QS60StyleAnimation
modifier|*
name|animation
init|=
name|QS60StylePrivate
operator|::
name|animationDefinition
argument_list|(
name|part
argument_list|)
decl_stmt|;
comment|//ownership is not passed
if|if
condition|(
name|animation
condition|)
block|{
if|if
condition|(
operator|!
name|animation
operator|->
name|animationObject
argument_list|()
operator|&&
operator|!
name|animation
operator|->
name|isResourceBased
argument_list|()
condition|)
block|{
comment|// no pre-made item exists, create new animation
name|CAknBitmapAnimation
modifier|*
name|newAnimation
init|=
name|CAknBitmapAnimation
operator|::
name|NewL
argument_list|()
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|newAnimation
argument_list|)
expr_stmt|;
if|if
condition|(
name|newAnimation
condition|)
name|constructedFromTheme
operator|=
name|newAnimation
operator|->
name|ConstructFromSkinL
argument_list|(
name|skinId
argument_list|)
expr_stmt|;
if|if
condition|(
name|constructedFromTheme
operator|&&
name|newAnimation
operator|->
name|BitmapAnimData
argument_list|()
operator|->
name|FrameArray
argument_list|()
operator|.
name|Count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|animation
operator|->
name|setResourceBased
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|animation
operator|->
name|setAnimationObject
argument_list|(
name|newAnimation
argument_list|)
expr_stmt|;
comment|//animation takes ownership
block|}
name|CleanupStack
operator|::
name|Pop
argument_list|(
name|newAnimation
argument_list|)
expr_stmt|;
block|}
comment|//fill-in stored information
name|aknAnimation
operator|=
name|animation
operator|->
name|animationObject
argument_list|()
expr_stmt|;
name|constructedFromTheme
operator|=
operator|!
name|animation
operator|->
name|isResourceBased
argument_list|()
expr_stmt|;
block|}
specifier|const
name|int
name|currentFrame
init|=
name|QS60StylePrivate
operator|::
name|currentAnimationFrame
argument_list|(
name|part
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructedFromTheme
operator|&&
name|aknAnimation
operator|&&
name|aknAnimation
operator|->
name|BitmapAnimData
argument_list|()
operator|->
name|FrameArray
argument_list|()
operator|.
name|Count
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//Animation was created successfully and contains frames, just fetch current frame
if|if
condition|(
name|currentFrame
operator|>=
name|aknAnimation
operator|->
name|BitmapAnimData
argument_list|()
operator|->
name|FrameArray
argument_list|()
operator|.
name|Count
argument_list|()
condition|)
name|User
operator|::
name|Leave
argument_list|(
name|KErrOverflow
argument_list|)
expr_stmt|;
specifier|const
name|CBitmapFrameData
modifier|*
name|frameData
init|=
name|aknAnimation
operator|->
name|BitmapAnimData
argument_list|()
operator|->
name|FrameArray
argument_list|()
operator|.
name|At
argument_list|(
name|currentFrame
argument_list|)
decl_stmt|;
if|if
condition|(
name|frameData
condition|)
block|{
name|animationFrame
operator|=
name|frameData
operator|->
name|Bitmap
argument_list|()
expr_stmt|;
name|frameMask
operator|=
name|frameData
operator|->
name|Mask
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Theme does not contain animation theming, create frames from resource file
name|TInt
name|fallbackGraphicID
init|=
operator|-
literal|1
decl_stmt|;
name|fallbackInfo
argument_list|(
name|part
argument_list|,
name|fallbackGraphicID
argument_list|)
expr_stmt|;
name|fallbackGraphicID
operator|=
name|fallbackGraphicID
operator|+
operator|(
name|currentFrame
operator|*
literal|2
operator|)
expr_stmt|;
comment|//skip masks
name|TInt
name|fallbackGraphicsMaskID
init|=
operator|(
name|fallbackGraphicID
operator|==
name|KErrNotFound
operator|)
condition|?
name|KErrNotFound
else|:
name|fallbackGraphicID
operator|+
literal|1
decl_stmt|;
comment|//masks are auto-generated as next in mif files
if|if
condition|(
name|fallbackGraphicsMaskID
operator|!=
name|KErrNotFound
condition|)
name|fallbackGraphicsMaskID
operator|=
name|fallbackGraphicsMaskID
operator|+
operator|(
name|currentFrame
operator|*
literal|2
operator|)
expr_stmt|;
comment|//skip actual graphics
comment|//Then draw animation frame
name|AknsUtils
operator|::
name|CreateIconL
argument_list|(
name|skinInstance
argument_list|,
name|KAknsIIDDefault
argument_list|,
comment|//animation is not themed, lets force fallback graphics
name|animationFrame
argument_list|,
name|frameMask
argument_list|,
name|AknIconUtils
operator|::
name|AvkonIconFileName
argument_list|()
argument_list|,
name|fallbackGraphicID
argument_list|,
name|fallbackGraphicsMaskID
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|fromFbsBitmap
argument_list|(
name|animationFrame
argument_list|,
name|frameMask
argument_list|,
name|flags
argument_list|,
name|targetSize
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|constructedFromTheme
condition|)
block|{
operator|delete
name|animationFrame
expr_stmt|;
name|animationFrame
operator|=
literal|0
expr_stmt|;
operator|delete
name|frameMask
expr_stmt|;
name|frameMask
operator|=
literal|0
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|result
condition|)
name|result
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|createSkinnedGraphicsLX
name|QPixmap
name|QS60StyleModeSpecifics
operator|::
name|createSkinnedGraphicsLX
parameter_list|(
name|QS60StylePrivate
operator|::
name|SkinFrameElements
name|frameElement
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|)
block|{
comment|// this function can throw both exceptions and leaves. There are no cleanup dependencies between Qt and Symbian parts.
if|if
condition|(
operator|!
name|size
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QPixmap
argument_list|()
return|;
specifier|const
name|bool
name|rotatedBy90or270
init|=
operator|(
name|flags
operator|&
operator|(
name|QS60StylePrivate
operator|::
name|SF_PointEast
operator||
name|QS60StylePrivate
operator|::
name|SF_PointWest
operator|)
operator|)
decl_stmt|;
specifier|const
name|TSize
name|targetSize
init|=
name|rotatedBy90or270
condition|?
name|TSize
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|)
else|:
name|qt_QSize2TSize
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|MAknsSkinInstance
modifier|*
name|skinInstance
init|=
name|AknsUtils
operator|::
name|SkinInstance
argument_list|()
decl_stmt|;
name|QPixmap
name|result
decl_stmt|;
specifier|static
specifier|const
name|TDisplayMode
name|displayMode
init|=
name|S60
operator|->
name|supportsPremultipliedAlpha
condition|?
name|Q_SYMBIAN_ECOLOR16MAP
else|:
name|EColor16MA
decl_stmt|;
specifier|static
specifier|const
name|TInt
name|drawParam
init|=
name|S60
operator|->
name|supportsPremultipliedAlpha
condition|?
name|KAknsDrawParamDefault
else|:
name|KAknsDrawParamNoClearUnderImage
operator||
name|KAknsDrawParamRGBOnly
decl_stmt|;
name|CFbsBitmap
modifier|*
name|frame
init|=
operator|new
operator|(
name|ELeave
operator|)
name|CFbsBitmap
argument_list|()
decl_stmt|;
comment|//offscreen
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|User
operator|::
name|LeaveIfError
argument_list|(
name|frame
operator|->
name|Create
argument_list|(
name|targetSize
argument_list|,
name|displayMode
argument_list|)
argument_list|)
expr_stmt|;
name|CFbsBitmapDevice
modifier|*
name|bitmapDev
init|=
name|CFbsBitmapDevice
operator|::
name|NewL
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|bitmapDev
argument_list|)
expr_stmt|;
name|CFbsBitGc
modifier|*
name|bitmapGc
init|=
name|NULL
decl_stmt|;
name|User
operator|::
name|LeaveIfError
argument_list|(
name|bitmapDev
operator|->
name|CreateContext
argument_list|(
name|bitmapGc
argument_list|)
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|bitmapGc
argument_list|)
expr_stmt|;
name|frame
operator|->
name|LockHeap
argument_list|()
expr_stmt|;
name|memset
argument_list|(
name|frame
operator|->
name|DataAddress
argument_list|()
argument_list|,
literal|0
argument_list|,
name|frame
operator|->
name|SizeInPixels
argument_list|()
operator|.
name|iWidth
operator|*
name|frame
operator|->
name|SizeInPixels
argument_list|()
operator|.
name|iHeight
operator|*
literal|4
argument_list|)
expr_stmt|;
comment|// 4: argb bytes
name|frame
operator|->
name|UnlockHeap
argument_list|()
expr_stmt|;
specifier|const
name|TRect
name|outerRect
argument_list|(
name|TPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|targetSize
argument_list|)
decl_stmt|;
specifier|const
name|TRect
name|innerRect
init|=
name|innerRectFromElement
argument_list|(
name|frameElement
argument_list|,
name|outerRect
argument_list|)
decl_stmt|;
name|TAknsItemID
name|frameSkinID
decl_stmt|,
name|centerSkinID
decl_stmt|;
name|frameSkinID
operator|=
name|centerSkinID
operator|=
name|partSpecificThemeId
argument_list|(
name|QS60StylePrivate
operator|::
name|m_frameElementsData
index|[
name|frameElement
index|]
operator|.
name|center
argument_list|)
expr_stmt|;
name|frameIdAndCenterId
argument_list|(
name|frameElement
argument_list|,
name|frameSkinID
argument_list|,
name|centerSkinID
argument_list|)
expr_stmt|;
name|TBool
name|drawn
init|=
name|AknsDrawUtils
operator|::
name|DrawFrame
argument_list|(
name|skinInstance
argument_list|,
operator|*
name|bitmapGc
argument_list|,
name|outerRect
argument_list|,
name|innerRect
argument_list|,
name|frameSkinID
argument_list|,
name|centerSkinID
argument_list|,
name|drawParam
argument_list|)
decl_stmt|;
if|if
condition|(
name|S60
operator|->
name|supportsPremultipliedAlpha
condition|)
block|{
if|if
condition|(
name|drawn
condition|)
block|{
name|result
operator|=
name|fromFbsBitmap
argument_list|(
name|frame
argument_list|,
name|NULL
argument_list|,
name|flags
argument_list|,
name|targetSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Drawing might fail due to OOM (we can do nothing about that),
comment|// or due to skin item not being available.
comment|// If the latter occurs, lets try switch to non-release specific items (if available)
comment|// and re-try the drawing.
name|frameSkinID
operator|=
name|centerSkinID
operator|=
name|m_partMap
index|[
operator|(
name|int
operator|)
name|QS60StylePrivate
operator|::
name|m_frameElementsData
index|[
name|frameElement
index|]
operator|.
name|center
index|]
operator|.
name|skinID
expr_stmt|;
name|frameIdAndCenterId
argument_list|(
name|frameElement
argument_list|,
name|frameSkinID
argument_list|,
name|centerSkinID
argument_list|)
expr_stmt|;
name|drawn
operator|=
name|AknsDrawUtils
operator|::
name|DrawFrame
argument_list|(
name|skinInstance
argument_list|,
operator|*
name|bitmapGc
argument_list|,
name|outerRect
argument_list|,
name|innerRect
argument_list|,
name|frameSkinID
argument_list|,
name|centerSkinID
argument_list|,
name|drawParam
argument_list|)
expr_stmt|;
comment|// in case drawing fails, even after using default graphics, ignore the error
if|if
condition|(
name|drawn
condition|)
name|result
operator|=
name|fromFbsBitmap
argument_list|(
name|frame
argument_list|,
name|NULL
argument_list|,
name|flags
argument_list|,
name|targetSize
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|TDisplayMode
name|maskDepth
init|=
name|EGray256
decl_stmt|;
comment|// Query the skin item for possible frame graphics mask details.
if|if
condition|(
name|skinInstance
condition|)
block|{
name|CAknsMaskedBitmapItemData
modifier|*
name|skinMaskedBmp
init|=
cast|static_cast
argument_list|<
name|CAknsMaskedBitmapItemData
operator|*
argument_list|>
argument_list|(
name|skinInstance
operator|->
name|GetCachedItemData
argument_list|(
name|frameSkinID
argument_list|,
name|EAknsITMaskedBitmap
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|skinMaskedBmp
operator|&&
name|skinMaskedBmp
operator|->
name|Mask
argument_list|()
condition|)
name|maskDepth
operator|=
name|skinMaskedBmp
operator|->
name|Mask
argument_list|()
operator|->
name|DisplayMode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|maskDepth
operator|!=
name|ENone
condition|)
block|{
name|CFbsBitmap
modifier|*
name|frameMask
init|=
operator|new
operator|(
name|ELeave
operator|)
name|CFbsBitmap
argument_list|()
decl_stmt|;
comment|//offscreen
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|frameMask
argument_list|)
expr_stmt|;
name|User
operator|::
name|LeaveIfError
argument_list|(
name|frameMask
operator|->
name|Create
argument_list|(
name|targetSize
argument_list|,
name|maskDepth
argument_list|)
argument_list|)
expr_stmt|;
name|CFbsBitmapDevice
modifier|*
name|maskBitmapDevice
init|=
name|CFbsBitmapDevice
operator|::
name|NewL
argument_list|(
name|frameMask
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|maskBitmapDevice
argument_list|)
expr_stmt|;
name|CFbsBitGc
modifier|*
name|maskBitGc
init|=
name|NULL
decl_stmt|;
name|User
operator|::
name|LeaveIfError
argument_list|(
name|maskBitmapDevice
operator|->
name|CreateContext
argument_list|(
name|maskBitGc
argument_list|)
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|maskBitGc
argument_list|)
expr_stmt|;
if|if
condition|(
name|drawn
condition|)
block|{
comment|//ensure that the mask is really transparent
name|maskBitGc
operator|->
name|Activate
argument_list|(
name|maskBitmapDevice
argument_list|)
expr_stmt|;
name|maskBitGc
operator|->
name|SetPenStyle
argument_list|(
name|CGraphicsContext
operator|::
name|ENullPen
argument_list|)
expr_stmt|;
name|maskBitGc
operator|->
name|SetBrushStyle
argument_list|(
name|CGraphicsContext
operator|::
name|ESolidBrush
argument_list|)
expr_stmt|;
name|maskBitGc
operator|->
name|SetBrushColor
argument_list|(
name|KRgbWhite
argument_list|)
expr_stmt|;
name|maskBitGc
operator|->
name|Clear
argument_list|()
expr_stmt|;
name|maskBitGc
operator|->
name|SetBrushStyle
argument_list|(
name|CGraphicsContext
operator|::
name|ENullBrush
argument_list|)
expr_stmt|;
name|drawn
operator|=
name|AknsDrawUtils
operator|::
name|DrawFrame
argument_list|(
name|skinInstance
argument_list|,
operator|*
name|maskBitGc
argument_list|,
name|outerRect
argument_list|,
name|innerRect
argument_list|,
name|frameSkinID
argument_list|,
name|centerSkinID
argument_list|,
name|KAknsSDMAlphaOnly
operator||
name|KAknsDrawParamNoClearUnderImage
argument_list|)
expr_stmt|;
if|if
condition|(
name|drawn
condition|)
name|result
operator|=
name|fromFbsBitmap
argument_list|(
name|frame
argument_list|,
name|frameMask
argument_list|,
name|flags
argument_list|,
name|targetSize
argument_list|)
expr_stmt|;
block|}
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
literal|3
argument_list|,
name|frameMask
argument_list|)
expr_stmt|;
block|}
block|}
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
literal|3
argument_list|,
name|frame
argument_list|)
expr_stmt|;
comment|//frame, bitmapDev, bitmapGc
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|frameIdAndCenterId
name|void
name|QS60StyleModeSpecifics
operator|::
name|frameIdAndCenterId
parameter_list|(
name|QS60StylePrivate
operator|::
name|SkinFrameElements
name|frameElement
parameter_list|,
name|TAknsItemID
modifier|&
name|frameId
parameter_list|,
name|TAknsItemID
modifier|&
name|centerId
parameter_list|)
block|{
comment|// There are some major mix-ups in skin declarations for some frames.
comment|// First, the frames are not declared in sequence.
comment|// Second, the parts use different major than the frame-master.
switch|switch
condition|(
name|frameElement
condition|)
block|{
case|case
name|QS60StylePrivate
operator|::
name|SF_ToolTip
case|:
if|if
condition|(
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|!=
name|QSysInfo
operator|::
name|SV_S60_3_1
condition|)
block|{
name|centerId
operator|.
name|Set
argument_list|(
name|EAknsMajorGeneric
argument_list|,
literal|0x19c2
argument_list|)
expr_stmt|;
name|frameId
operator|.
name|Set
argument_list|(
name|EAknsMajorSkin
argument_list|,
literal|0x5300
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|centerId
operator|.
name|Set
argument_list|(
name|KAknsIIDQsnFrPopupCenter
argument_list|)
expr_stmt|;
name|frameId
operator|.
name|iMinor
operator|=
name|centerId
operator|.
name|iMinor
operator|-
literal|9
expr_stmt|;
block|}
break|break;
case|case
name|QS60StylePrivate
operator|::
name|SF_ToolBar
case|:
if|if
condition|(
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_1
operator|||
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_2
condition|)
block|{
name|centerId
operator|.
name|Set
argument_list|(
name|KAknsIIDQsnFrPopupCenterSubmenu
argument_list|)
expr_stmt|;
name|frameId
operator|.
name|Set
argument_list|(
name|KAknsIIDQsnFrPopupSub
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QS60StylePrivate
operator|::
name|SF_PopupBackground
case|:
name|centerId
operator|.
name|Set
argument_list|(
name|KAknsIIDQsnFrPopupCenterSubmenu
argument_list|)
expr_stmt|;
name|frameId
operator|.
name|Set
argument_list|(
name|KAknsIIDQsnFrPopupSub
argument_list|)
expr_stmt|;
break|break;
case|case
name|QS60StylePrivate
operator|::
name|SF_PanelBackground
case|:
comment|// remove center piece for panel graphics, so that only border is drawn
name|centerId
operator|.
name|Set
argument_list|(
name|KAknsIIDNone
argument_list|)
expr_stmt|;
name|frameId
operator|.
name|Set
argument_list|(
name|KAknsIIDQsnFrSetOpt
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// center should be correct here
name|frameId
operator|.
name|iMinor
operator|=
name|centerId
operator|.
name|iMinor
operator|-
literal|9
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|innerRectFromElement
name|TRect
name|QS60StyleModeSpecifics
operator|::
name|innerRectFromElement
parameter_list|(
name|QS60StylePrivate
operator|::
name|SkinFrameElements
name|frameElement
parameter_list|,
specifier|const
name|TRect
modifier|&
name|outerRect
parameter_list|)
block|{
name|TInt
name|widthShrink
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_FrameCornerWidth
argument_list|)
decl_stmt|;
name|TInt
name|heightShrink
init|=
name|QS60StylePrivate
operator|::
name|pixelMetric
argument_list|(
name|PM_FrameCornerHeight
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|frameElement
condition|)
block|{
case|case
name|QS60StylePrivate
operator|::
name|SF_PanelBackground
case|:
comment|// panel should have slightly slimmer border to enable thin line of background graphics between closest component
name|widthShrink
operator|=
name|widthShrink
operator|-
literal|2
expr_stmt|;
name|heightShrink
operator|=
name|heightShrink
operator|-
literal|2
expr_stmt|;
break|break;
case|case
name|QS60StylePrivate
operator|::
name|SF_ToolTip
case|:
name|widthShrink
operator|=
name|widthShrink
operator|>>
literal|1
expr_stmt|;
name|heightShrink
operator|=
name|heightShrink
operator|>>
literal|1
expr_stmt|;
break|break;
case|case
name|QS60StylePrivate
operator|::
name|SF_ListHighlight
case|:
comment|//In Sym^3 devices highlights are less blocky
if|if
condition|(
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|>
name|QSysInfo
operator|::
name|SV_S60_5_0
condition|)
block|{
name|widthShrink
operator|+=
literal|2
expr_stmt|;
name|heightShrink
operator|+=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|widthShrink
operator|-=
literal|2
expr_stmt|;
name|heightShrink
operator|-=
literal|2
expr_stmt|;
block|}
break|break;
case|case
name|QS60StylePrivate
operator|::
name|SF_PopupBackground
case|:
name|widthShrink
operator|=
name|widthShrink
operator|+
literal|5
expr_stmt|;
name|heightShrink
operator|=
name|heightShrink
operator|+
literal|5
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|TRect
name|innerRect
argument_list|(
name|outerRect
argument_list|)
decl_stmt|;
name|innerRect
operator|.
name|Shrink
argument_list|(
name|widthShrink
argument_list|,
name|heightShrink
argument_list|)
expr_stmt|;
return|return
name|innerRect
return|;
block|}
end_function
begin_function
DECL|function|checkSupport
name|bool
name|QS60StyleModeSpecifics
operator|::
name|checkSupport
parameter_list|(
specifier|const
name|int
name|supportedRelease
parameter_list|)
block|{
specifier|const
name|QSysInfo
operator|::
name|S60Version
name|currentRelease
init|=
name|QSysInfo
operator|::
name|s60Version
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|currentRelease
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_1
operator|&&
name|supportedRelease
operator|&
name|ES60_3_1
operator|)
operator|||
operator|(
name|currentRelease
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_2
operator|&&
name|supportedRelease
operator|&
name|ES60_3_2
operator|)
operator|||
operator|(
name|currentRelease
operator|==
name|QSysInfo
operator|::
name|SV_S60_5_0
operator|&&
name|supportedRelease
operator|&
name|ES60_5_0
operator|)
operator|||
operator|(
name|currentRelease
operator|==
name|QSysInfo
operator|::
name|SV_S60_5_1
operator|&&
name|supportedRelease
operator|&
name|ES60_5_1
operator|)
operator|||
operator|(
name|currentRelease
operator|==
name|QSysInfo
operator|::
name|SV_S60_5_2
operator|&&
name|supportedRelease
operator|&
name|ES60_5_2
operator|)
operator|||
operator|(
name|currentRelease
operator|==
name|QSysInfo
operator|::
name|SV_S60_5_3
operator|&&
name|supportedRelease
operator|&
name|ES60_5_3
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|partSpecificThemeId
name|TAknsItemID
name|QS60StyleModeSpecifics
operator|::
name|partSpecificThemeId
parameter_list|(
name|int
name|part
parameter_list|)
block|{
name|TAknsItemID
name|newSkinId
decl_stmt|;
if|if
condition|(
operator|!
name|checkSupport
argument_list|(
name|m_partMap
index|[
operator|(
name|int
operator|)
name|part
index|]
operator|.
name|supportInfo
argument_list|)
condition|)
name|newSkinId
operator|.
name|Set
argument_list|(
name|m_partMap
index|[
operator|(
name|int
operator|)
name|part
index|]
operator|.
name|newMajorSkinId
argument_list|,
name|m_partMap
index|[
operator|(
name|int
operator|)
name|part
index|]
operator|.
name|newMinorSkinId
argument_list|)
expr_stmt|;
else|else
name|newSkinId
operator|.
name|Set
argument_list|(
name|m_partMap
index|[
operator|(
name|int
operator|)
name|part
index|]
operator|.
name|skinID
argument_list|)
expr_stmt|;
return|return
name|newSkinId
return|;
block|}
end_function
begin_function
DECL|function|s60Font_specific
name|QFont
name|QS60StylePrivate
operator|::
name|s60Font_specific
parameter_list|(
name|QS60StyleEnums
operator|::
name|FontCategories
name|fontCategory
parameter_list|,
name|int
name|pointSize
parameter_list|,
name|bool
name|resolveFontSize
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|resolveFontSize
argument_list|)
expr_stmt|;
name|TAknFontCategory
name|aknFontCategory
init|=
name|EAknFontCategoryUndefined
decl_stmt|;
switch|switch
condition|(
name|fontCategory
condition|)
block|{
case|case
name|QS60StyleEnums
operator|::
name|FC_Primary
case|:
name|aknFontCategory
operator|=
name|EAknFontCategoryPrimary
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|FC_Secondary
case|:
name|aknFontCategory
operator|=
name|EAknFontCategorySecondary
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|FC_Title
case|:
name|aknFontCategory
operator|=
name|EAknFontCategoryTitle
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|FC_PrimarySmall
case|:
name|aknFontCategory
operator|=
name|EAknFontCategoryPrimarySmall
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|FC_Digital
case|:
name|aknFontCategory
operator|=
name|EAknFontCategoryDigital
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|FC_Undefined
case|:
default|default:
break|break;
block|}
comment|// Create AVKON font according the given parameters
name|CWsScreenDevice
modifier|*
name|dev
init|=
name|CCoeEnv
operator|::
name|Static
argument_list|()
operator|->
name|ScreenDevice
argument_list|()
decl_stmt|;
name|TAknFontSpecification
name|spec
argument_list|(
name|aknFontCategory
argument_list|,
name|TFontSpec
argument_list|()
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|pointSize
operator|>
literal|0
condition|)
block|{
specifier|const
name|TInt
name|pixelSize
init|=
name|dev
operator|->
name|VerticalTwipsToPixels
argument_list|(
name|pointSize
operator|*
name|KTwipsPerPoint
argument_list|)
decl_stmt|;
name|spec
operator|.
name|SetTextPaneHeight
argument_list|(
name|pixelSize
operator|+
literal|4
argument_list|)
expr_stmt|;
comment|// TODO: Is 4 a reasonable top+bottom margin?
block|}
name|QFont
name|result
decl_stmt|;
name|TRAPD
argument_list|(
argument|error
argument_list|,
argument|QT_TRYCATCH_LEAVING({         const CAknLayoutFont* aknFont =             AknFontAccess::CreateLayoutFontFromSpecificationL(*dev, spec);          result = qt_TFontSpec2QFontL(aknFont->DoFontSpecInTwips());         if (result.pointSize() != pointSize)             result.setPointSize(pointSize);
comment|// Correct the font size returned by CreateLayoutFontFromSpecificationL()
argument|delete aknFont;     })
argument_list|)
empty_stmt|;
if|if
condition|(
name|error
condition|)
name|result
operator|=
name|QFont
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|setActiveLayout
name|void
name|QS60StylePrivate
operator|::
name|setActiveLayout
parameter_list|()
block|{
specifier|const
name|QSize
name|activeScreenSize
argument_list|(
name|screenSize
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|activeLayoutIndex
init|=
operator|-
literal|1
decl_stmt|;
specifier|const
name|short
name|screenHeight
init|=
operator|(
name|short
operator|)
name|activeScreenSize
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|short
name|screenWidth
init|=
operator|(
name|short
operator|)
name|activeScreenSize
operator|.
name|width
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_numberOfLayouts
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|screenHeight
operator|==
name|m_layoutHeaders
index|[
name|i
index|]
operator|.
name|height
operator|&&
name|screenWidth
operator|==
name|m_layoutHeaders
index|[
name|i
index|]
operator|.
name|width
condition|)
block|{
name|activeLayoutIndex
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
comment|//not found, lets try with either of dimensions
if|if
condition|(
name|activeLayoutIndex
operator|==
operator|-
literal|1
condition|)
block|{
specifier|const
name|QSysInfo
operator|::
name|S60Version
name|currentRelease
init|=
name|QSysInfo
operator|::
name|s60Version
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|landscape
init|=
name|screenHeight
operator|<
name|screenWidth
decl_stmt|;
name|activeLayoutIndex
operator|=
operator|(
name|currentRelease
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_1
operator|||
name|currentRelease
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_2
operator|)
condition|?
literal|0
else|:
literal|2
expr_stmt|;
name|activeLayoutIndex
operator|+=
operator|(
operator|!
name|landscape
operator|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
name|setCurrentLayout
argument_list|(
name|activeLayoutIndex
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QList<QS60StyleAnimation *>
argument_list|,
argument|m_animations
argument_list|)
end_macro
begin_constructor
DECL|function|QS60StylePrivate
name|QS60StylePrivate
operator|::
name|QS60StylePrivate
parameter_list|()
block|{
comment|//Animation defaults need to be created when style is instantiated
name|QS60StyleAnimation
modifier|*
name|progressBarAnimation
init|=
operator|new
name|QS60StyleAnimation
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarWaitAnim
argument_list|,
literal|7
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|m_animations
argument_list|()
operator|->
name|append
argument_list|(
name|progressBarAnimation
argument_list|)
expr_stmt|;
comment|// No need to set active layout, if dynamic metrics API is available
name|setActiveLayout
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|removeAnimations
name|void
name|QS60StylePrivate
operator|::
name|removeAnimations
parameter_list|()
block|{
comment|//currently only one animation in the list.
name|m_animations
argument_list|()
operator|->
name|removeFirst
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|s60Color
name|QColor
name|QS60StylePrivate
operator|::
name|s60Color
parameter_list|(
name|QS60StyleEnums
operator|::
name|ColorLists
name|list
parameter_list|,
name|int
name|index
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|)
block|{
specifier|static
specifier|const
name|TAknsItemID
modifier|*
name|idMap
index|[]
init|=
block|{
operator|&
name|KAknsIIDQsnHighlightColors
block|,
operator|&
name|KAknsIIDQsnIconColors
block|,
operator|&
name|KAknsIIDQsnLineColors
block|,
operator|&
name|KAknsIIDQsnOtherColors
block|,
operator|&
name|KAknsIIDQsnParentColors
block|,
operator|&
name|KAknsIIDQsnTextColors
block|}
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|(
name|int
operator|)
name|list
operator|<
operator|(
name|int
operator|)
sizeof|sizeof
argument_list|(
name|idMap
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|idMap
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QColor
name|color
init|=
name|QS60StyleModeSpecifics
operator|::
name|colorValue
argument_list|(
operator|*
name|idMap
index|[
operator|(
name|int
operator|)
name|list
index|]
argument_list|,
name|index
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|option
condition|?
name|QS60StylePrivate
operator|::
name|stateColor
argument_list|(
name|color
argument_list|,
name|option
argument_list|)
else|:
name|color
return|;
block|}
end_function
begin_comment
comment|// In some cases, the AVKON UI themegraphic is already in 'disabled state'.
end_comment
begin_comment
comment|// If so, return true for these parts.
end_comment
begin_function
DECL|function|disabledPartGraphic
name|bool
name|QS60StyleModeSpecifics
operator|::
name|disabledPartGraphic
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
modifier|&
name|part
parameter_list|)
block|{
name|bool
name|disabledGraphic
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|part
condition|)
block|{
comment|// inactive button graphics are available from 5.0 onwards
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonCornerTlInactive
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonCornerTrInactive
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonCornerBlInactive
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonCornerBrInactive
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonSideTInactive
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonSideBInactive
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonSideLInactive
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonSideRInactive
case|:
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnFrButtonCenterInactive
case|:
if|if
condition|(
operator|!
operator|(
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_1
operator|||
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_2
operator|)
condition|)
name|disabledGraphic
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|disabledGraphic
return|;
block|}
end_function
begin_comment
comment|// In some cases, the AVKON UI themegraphic is already in 'disabled state'.
end_comment
begin_comment
comment|// If so, return true for these frames.
end_comment
begin_function
DECL|function|disabledFrameGraphic
name|bool
name|QS60StyleModeSpecifics
operator|::
name|disabledFrameGraphic
parameter_list|(
name|QS60StylePrivate
operator|::
name|SkinFrameElements
modifier|&
name|frame
parameter_list|)
block|{
name|bool
name|disabledGraphic
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|frame
condition|)
block|{
comment|// inactive button graphics are available from 5.0 onwards
case|case
name|QS60StylePrivate
operator|::
name|SF_ButtonInactive
case|:
if|if
condition|(
operator|!
operator|(
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_1
operator|||
name|QSysInfo
operator|::
name|s60Version
argument_list|()
operator|==
name|QSysInfo
operator|::
name|SV_S60_3_2
operator|)
condition|)
name|disabledGraphic
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|disabledGraphic
return|;
block|}
end_function
begin_function
DECL|function|generateMissingThemeGraphic
name|QPixmap
name|QS60StyleModeSpecifics
operator|::
name|generateMissingThemeGraphic
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
modifier|&
name|part
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QS60StylePrivate
operator|::
name|SkinElementFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QS60StylePrivate
operator|::
name|isTouchSupported
argument_list|()
condition|)
return|return
name|QPixmap
argument_list|()
return|;
name|QS60StyleEnums
operator|::
name|SkinParts
name|updatedPart
init|=
name|part
decl_stmt|;
switch|switch
condition|(
name|part
condition|)
block|{
comment|// AVKON UI has a abnormal handling for scrollbar graphics. It is possible that the root
comment|// skin does not contain mandatory graphics for scrollbar pressed states. Therefore, AVKON UI
comment|// creates dynamically these graphics by modifying the normal state scrollbar graphics slightly.
comment|// S60Style needs to work similarly. Therefore if skingraphics call provides to be a miss
comment|// (i.e. result is not valid), style needs to draw normal graphics instead and apply some
comment|// modifications (similar to generatedIconPixmap()) to the result.
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleBottomPressed
case|:
name|updatedPart
operator|=
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleBottom
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleMiddlePressed
case|:
name|updatedPart
operator|=
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleMiddle
expr_stmt|;
break|break;
case|case
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleTopPressed
case|:
name|updatedPart
operator|=
name|QS60StyleEnums
operator|::
name|SP_QsnCpScrollHandleTop
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|part
operator|==
name|updatedPart
condition|)
block|{
return|return
name|QPixmap
argument_list|()
return|;
block|}
else|else
block|{
name|QPixmap
name|result
init|=
name|skinnedGraphics
argument_list|(
name|updatedPart
argument_list|,
name|size
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|QStyleOption
name|opt
decl_stmt|;
name|QPalette
modifier|*
name|themePalette
init|=
name|QS60StylePrivate
operator|::
name|themePalette
argument_list|()
decl_stmt|;
if|if
condition|(
name|themePalette
condition|)
name|opt
operator|.
name|palette
operator|=
operator|*
name|themePalette
expr_stmt|;
comment|// For now, always generate new icon based on "selected". In the future possibly, expand
comment|// this to consist other possibilities as well.
name|result
operator|=
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|generatedIconPixmap
argument_list|(
name|QIcon
operator|::
name|Selected
argument_list|,
name|result
argument_list|,
operator|&
name|opt
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_function
begin_function
DECL|function|part
name|QPixmap
name|QS60StylePrivate
operator|::
name|part
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QPainter
modifier|*
name|painter
parameter_list|,
name|SkinElementFlags
name|flags
parameter_list|)
block|{
name|QSymbianFbsHeapLock
name|lock
argument_list|(
name|QSymbianFbsHeapLock
operator|::
name|Unlock
argument_list|)
decl_stmt|;
name|QPixmap
name|result
init|=
operator|(
name|flags
operator|&
name|SF_ColorSkinned
operator|)
condition|?
name|QS60StyleModeSpecifics
operator|::
name|colorSkinnedGraphics
argument_list|(
name|part
argument_list|,
name|size
argument_list|,
name|painter
argument_list|,
name|flags
argument_list|)
else|:
name|QS60StyleModeSpecifics
operator|::
name|skinnedGraphics
argument_list|(
name|part
argument_list|,
name|size
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|lock
operator|.
name|relock
argument_list|()
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|SF_StateDisabled
operator|&&
operator|!
name|QS60StyleModeSpecifics
operator|::
name|disabledPartGraphic
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|QStyleOption
name|opt
decl_stmt|;
name|QPalette
modifier|*
name|themePalette
init|=
name|QS60StylePrivate
operator|::
name|themePalette
argument_list|()
decl_stmt|;
if|if
condition|(
name|themePalette
condition|)
name|opt
operator|.
name|palette
operator|=
operator|*
name|themePalette
expr_stmt|;
name|result
operator|=
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|generatedIconPixmap
argument_list|(
name|QIcon
operator|::
name|Disabled
argument_list|,
name|result
argument_list|,
operator|&
name|opt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|result
condition|)
name|result
operator|=
name|QS60StyleModeSpecifics
operator|::
name|generateMissingThemeGraphic
argument_list|(
name|part
argument_list|,
name|size
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|frame
name|QPixmap
name|QS60StylePrivate
operator|::
name|frame
parameter_list|(
name|SkinFrameElements
name|frame
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|SkinElementFlags
name|flags
parameter_list|)
block|{
name|QSymbianFbsHeapLock
name|lock
argument_list|(
name|QSymbianFbsHeapLock
operator|::
name|Unlock
argument_list|)
decl_stmt|;
name|QPixmap
name|result
init|=
name|QS60StyleModeSpecifics
operator|::
name|skinnedGraphics
argument_list|(
name|frame
argument_list|,
name|size
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|lock
operator|.
name|relock
argument_list|()
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|SF_StateDisabled
operator|&&
operator|!
name|QS60StyleModeSpecifics
operator|::
name|disabledFrameGraphic
argument_list|(
name|frame
argument_list|)
condition|)
block|{
name|QStyleOption
name|opt
decl_stmt|;
name|QPalette
modifier|*
name|themePalette
init|=
name|QS60StylePrivate
operator|::
name|themePalette
argument_list|()
decl_stmt|;
if|if
condition|(
name|themePalette
condition|)
name|opt
operator|.
name|palette
operator|=
operator|*
name|themePalette
expr_stmt|;
name|result
operator|=
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|generatedIconPixmap
argument_list|(
name|QIcon
operator|::
name|Disabled
argument_list|,
name|result
argument_list|,
operator|&
name|opt
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|backgroundTexture
name|QPixmap
name|QS60StylePrivate
operator|::
name|backgroundTexture
parameter_list|(
name|bool
name|skipCreation
parameter_list|)
block|{
name|bool
name|createNewBackground
init|=
literal|false
decl_stmt|;
name|TRect
name|applicationRect
init|=
operator|(
cast|static_cast
argument_list|<
name|CEikAppUi
operator|*
argument_list|>
argument_list|(
name|S60
operator|->
name|appUi
argument_list|()
argument_list|)
operator|->
name|ApplicationRect
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_background
condition|)
block|{
name|createNewBackground
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|//if background brush does not match screensize, re-create it
if|if
condition|(
name|m_background
operator|->
name|width
argument_list|()
operator|!=
name|applicationRect
operator|.
name|Width
argument_list|()
operator|||
name|m_background
operator|->
name|height
argument_list|()
operator|!=
name|applicationRect
operator|.
name|Height
argument_list|()
condition|)
block|{
operator|delete
name|m_background
expr_stmt|;
name|m_background
operator|=
literal|0
expr_stmt|;
name|createNewBackground
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|createNewBackground
operator|&&
operator|!
name|skipCreation
condition|)
block|{
name|QPixmap
name|background
init|=
name|part
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QsnBgScreen
argument_list|,
name|QSize
argument_list|(
name|applicationRect
operator|.
name|Width
argument_list|()
argument_list|,
name|applicationRect
operator|.
name|Height
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|SkinElementFlags
argument_list|()
argument_list|)
decl_stmt|;
name|m_background
operator|=
operator|new
name|QPixmap
argument_list|(
name|background
argument_list|)
expr_stmt|;
comment|// Notify all widgets that palette is updated with the actual background texture.
name|QPalette
name|pal
init|=
name|QApplication
operator|::
name|palette
argument_list|()
decl_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
operator|*
name|m_background
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|setThemePaletteHash
argument_list|(
operator|&
name|pal
argument_list|)
expr_stmt|;
name|storeThemePalette
argument_list|(
operator|&
name|pal
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|widget
decl|,
name|QApplication
operator|::
name|allWidgets
argument_list|()
control|)
block|{
name|QEvent
name|e
argument_list|(
name|QEvent
operator|::
name|PaletteChange
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|setThemePalette
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|->
name|ensurePolished
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|m_background
condition|)
return|return
name|QPixmap
argument_list|()
return|;
return|return
operator|*
name|m_background
return|;
block|}
end_function
begin_function
DECL|function|screenSize
name|QSize
name|QS60StylePrivate
operator|::
name|screenSize
parameter_list|()
block|{
return|return
name|QSize
argument_list|(
name|S60
operator|->
name|screenWidthInPixels
argument_list|,
name|S60
operator|->
name|screenHeightInPixels
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QS60Style
name|QS60Style
operator|::
name|QS60Style
parameter_list|()
member_init_list|:
name|QCommonStyle
argument_list|(
operator|*
operator|new
name|QS60StylePrivate
argument_list|)
block|{ }
end_constructor
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_S60
end_ifdef
begin_function
DECL|function|handleDynamicLayoutVariantSwitch
name|void
name|QS60StylePrivate
operator|::
name|handleDynamicLayoutVariantSwitch
parameter_list|()
block|{
name|clearCaches
argument_list|(
name|QS60StylePrivate
operator|::
name|CC_LayoutChange
argument_list|)
expr_stmt|;
name|setBackgroundTexture
argument_list|(
name|qApp
argument_list|)
expr_stmt|;
name|setActiveLayout
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|widget
decl|,
name|QApplication
operator|::
name|allWidgets
argument_list|()
control|)
name|widget
operator|->
name|ensurePolished
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleSkinChange
name|void
name|QS60StylePrivate
operator|::
name|handleSkinChange
parameter_list|()
block|{
name|clearCaches
argument_list|(
name|QS60StylePrivate
operator|::
name|CC_ThemeChange
argument_list|)
expr_stmt|;
name|setThemePalette
argument_list|(
name|qApp
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|topLevelWidget
decl|,
name|QApplication
operator|::
name|allWidgets
argument_list|()
control|)
block|{
name|QEvent
name|e
argument_list|(
name|QEvent
operator|::
name|StyleChange
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|topLevelWidget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|setThemePalette
argument_list|(
name|topLevelWidget
argument_list|)
expr_stmt|;
name|topLevelWidget
operator|->
name|ensurePolished
argument_list|()
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
comment|//re-start animation timer
name|stopAnimation
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarWaitAnim
argument_list|)
expr_stmt|;
comment|//todo: once we have more animations, we could say "stop all running ones"
name|startAnimation
argument_list|(
name|QS60StyleEnums
operator|::
name|SP_QgnGrafBarWaitAnim
argument_list|)
expr_stmt|;
comment|//and "re-start all previously running ones"
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|currentAnimationFrame
name|int
name|QS60StylePrivate
operator|::
name|currentAnimationFrame
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
parameter_list|)
block|{
name|QS60StyleAnimation
modifier|*
name|animation
init|=
name|animationDefinition
argument_list|(
name|part
argument_list|)
decl_stmt|;
comment|// todo: looping could be done in QS60Style::timerEvent
if|if
condition|(
name|animation
operator|->
name|frameCount
argument_list|()
operator|==
name|animation
operator|->
name|currentFrame
argument_list|()
condition|)
name|animation
operator|->
name|setCurrentFrame
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|animation
operator|->
name|currentFrame
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|animationDefinition
name|QS60StyleAnimation
modifier|*
name|QS60StylePrivate
operator|::
name|animationDefinition
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|animationsCount
init|=
name|m_animations
argument_list|()
operator|->
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|m_animations
argument_list|()
operator|->
name|count
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|animationsCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|part
operator|==
name|m_animations
argument_list|()
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|animationId
argument_list|()
condition|)
break|break;
block|}
return|return
name|m_animations
argument_list|()
operator|->
name|at
argument_list|(
name|i
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|startAnimation
name|void
name|QS60StylePrivate
operator|::
name|startAnimation
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
name|animationPart
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QS60Style
argument_list|)
expr_stmt|;
comment|//Query animation data from theme and store values to local struct.
name|QVariant
name|themeAnimationDataVariant
init|=
name|QS60StyleModeSpecifics
operator|::
name|themeDefinition
argument_list|(
name|QS60StyleEnums
operator|::
name|TD_AnimationData
argument_list|,
name|animationPart
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|themeAnimationData
init|=
name|themeAnimationDataVariant
operator|.
name|toList
argument_list|()
decl_stmt|;
name|QS60StyleAnimation
modifier|*
name|animation
init|=
name|QS60StylePrivate
operator|::
name|animationDefinition
argument_list|(
name|animationPart
argument_list|)
decl_stmt|;
if|if
condition|(
name|animation
condition|)
block|{
if|if
condition|(
name|themeAnimationData
operator|.
name|at
argument_list|(
name|QS60StyleEnums
operator|::
name|AD_Interval
argument_list|)
operator|.
name|toInt
argument_list|()
operator|!=
literal|0
condition|)
name|animation
operator|->
name|setInterval
argument_list|(
name|themeAnimationData
operator|.
name|at
argument_list|(
name|QS60StyleEnums
operator|::
name|AD_Interval
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|themeAnimationData
operator|.
name|at
argument_list|(
name|QS60StyleEnums
operator|::
name|AD_NumberOfFrames
argument_list|)
operator|.
name|toInt
argument_list|()
operator|!=
literal|0
condition|)
name|animation
operator|->
name|setFrameCount
argument_list|(
name|themeAnimationData
operator|.
name|at
argument_list|(
name|QS60StyleEnums
operator|::
name|AD_NumberOfFrames
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
comment|//todo: playmode is ignored for now, since it seems to return invalid data on some themes
comment|//lets use the table values for play mode
name|animation
operator|->
name|setCurrentFrame
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//always initialize
specifier|const
name|int
name|timerId
init|=
name|q
operator|->
name|startTimer
argument_list|(
name|animation
operator|->
name|interval
argument_list|()
argument_list|)
decl_stmt|;
name|animation
operator|->
name|setTimerId
argument_list|(
name|timerId
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stopAnimation
name|void
name|QS60StylePrivate
operator|::
name|stopAnimation
parameter_list|(
name|QS60StyleEnums
operator|::
name|SkinParts
name|animationPart
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QS60Style
argument_list|)
expr_stmt|;
name|QS60StyleAnimation
modifier|*
name|animation
init|=
name|QS60StylePrivate
operator|::
name|animationDefinition
argument_list|(
name|animationPart
argument_list|)
decl_stmt|;
if|if
condition|(
name|animation
condition|)
block|{
name|animation
operator|->
name|setCurrentFrame
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|animation
operator|->
name|timerId
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|q
operator|->
name|killTimer
argument_list|(
name|animation
operator|->
name|timerId
argument_list|()
argument_list|)
expr_stmt|;
name|animation
operator|->
name|setTimerId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|animation
operator|->
name|resetToDefaults
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|themeDefinition
name|QVariant
name|QS60StyleModeSpecifics
operator|::
name|themeDefinition
parameter_list|(
name|QS60StyleEnums
operator|::
name|ThemeDefinitions
name|definition
parameter_list|,
name|QS60StyleEnums
operator|::
name|SkinParts
name|part
parameter_list|)
block|{
name|MAknsSkinInstance
modifier|*
name|skinInstance
init|=
name|AknsUtils
operator|::
name|SkinInstance
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|skinInstance
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|definition
condition|)
block|{
comment|//Animation definitions
case|case
name|QS60StyleEnums
operator|::
name|TD_AnimationData
case|:
block|{
name|CAknsBmpAnimItemData
modifier|*
name|animationData
decl_stmt|;
name|TAknsItemID
name|animationSkinId
init|=
name|partSpecificThemeId
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|list
decl_stmt|;
name|TRAPD
argument_list|(
name|error
argument_list|,
name|QT_TRYCATCH_LEAVING
argument_list|(
name|animationData
operator|=
cast|static_cast
argument_list|<
name|CAknsBmpAnimItemData
operator|*
argument_list|>
argument_list|(
name|skinInstance
operator|->
name|CreateUncachedItemDataL
argument_list|(
name|animationSkinId
argument_list|,
name|EAknsITBmpAnim
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
return|return
name|list
return|;
if|if
condition|(
name|animationData
condition|)
block|{
name|list
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
name|animationData
operator|->
name|FrameInterval
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
name|animationData
operator|->
name|NumberOfImages
argument_list|()
argument_list|)
expr_stmt|;
name|QS60StyleEnums
operator|::
name|AnimationMode
name|playMode
decl_stmt|;
switch|switch
condition|(
name|animationData
operator|->
name|PlayMode
argument_list|()
condition|)
block|{
case|case
name|CBitmapAnimClientData
operator|::
name|EPlay
case|:
name|playMode
operator|=
name|QS60StyleEnums
operator|::
name|AM_PlayOnce
expr_stmt|;
break|break;
case|case
name|CBitmapAnimClientData
operator|::
name|ECycle
case|:
name|playMode
operator|=
name|QS60StyleEnums
operator|::
name|AM_Looping
expr_stmt|;
break|break;
case|case
name|CBitmapAnimClientData
operator|::
name|EBounce
case|:
name|playMode
operator|=
name|QS60StyleEnums
operator|::
name|AM_Bounce
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|list
operator|.
name|append
argument_list|(
name|QVariant
argument_list|(
operator|(
name|int
operator|)
name|playMode
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|animationData
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_WS_S60
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STYLE_S60 || QT_PLUGIN
end_comment
end_unit
