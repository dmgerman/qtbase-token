begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"QtWidgets/qwidget.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qevent.h"
end_include
begin_include
include|#
directive|include
file|"QtWidgets/qapplication.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidgetbackingstore_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidgetwindow_qpa_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"QtWidgets/qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformwindow.h>
end_include
begin_include
include|#
directive|include
file|"QtGui/qsurfaceformat.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformopenglcontext.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|"QtGui/private/qwindow_p.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/private/qguiapplication_p.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformcursor.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMargins>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|q_createNativeChildrenAndSetParent
name|void
name|q_createNativeChildrenAndSetParent
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
name|QObjectList
name|children
init|=
name|parentWidget
operator|->
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
specifier|const
name|QWidget
modifier|*
name|childWidget
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QWidget
operator|*
argument_list|>
argument_list|(
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|childWidget
condition|)
block|{
comment|// should not be necessary
if|if
condition|(
name|childWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|childWidget
operator|->
name|windowHandle
argument_list|()
condition|)
name|childWidget
operator|->
name|winId
argument_list|()
expr_stmt|;
if|if
condition|(
name|childWidget
operator|->
name|windowHandle
argument_list|()
condition|)
block|{
name|QWindow
modifier|*
name|parentWindow
init|=
name|childWidget
operator|->
name|nativeParentWidget
argument_list|()
operator|->
name|windowHandle
argument_list|()
decl_stmt|;
if|if
condition|(
name|childWidget
operator|->
name|isWindow
argument_list|()
condition|)
name|childWidget
operator|->
name|windowHandle
argument_list|()
operator|->
name|setTransientParent
argument_list|(
name|parentWindow
argument_list|)
expr_stmt|;
else|else
name|childWidget
operator|->
name|windowHandle
argument_list|()
operator|->
name|setParent
argument_list|(
name|parentWindow
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|q_createNativeChildrenAndSetParent
argument_list|(
name|childWidget
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|create_sys
name|void
name|QWidgetPrivate
operator|::
name|create_sys
parameter_list|(
name|WId
name|window
parameter_list|,
name|bool
name|initializeWindow
parameter_list|,
name|bool
name|destroyOldWindow
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|initializeWindow
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|destroyOldWindow
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|data
operator|.
name|window_flags
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
operator|&&
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
return|return;
comment|// we only care about real toplevels
name|QWindow
modifier|*
name|win
init|=
name|topData
argument_list|()
operator|->
name|window
decl_stmt|;
comment|// topData() ensures the extra is created but does not ensure 'window' is non-null
comment|// in case the extra was already valid.
if|if
condition|(
operator|!
name|win
condition|)
block|{
name|createTLSysExtra
argument_list|()
expr_stmt|;
name|win
operator|=
name|topData
argument_list|()
operator|->
name|window
expr_stmt|;
block|}
name|win
operator|->
name|setFlags
argument_list|(
name|data
operator|.
name|window_flags
argument_list|)
expr_stmt|;
name|fixPosIncludesFrame
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|)
condition|)
name|win
operator|->
name|setGeometry
argument_list|(
name|q
operator|->
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|win
operator|->
name|resize
argument_list|(
name|q
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|win
operator|->
name|setScreen
argument_list|(
name|QGuiApplication
operator|::
name|screens
argument_list|()
operator|.
name|value
argument_list|(
name|topData
argument_list|()
operator|->
name|screenIndex
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
condition|)
block|{
name|QSurfaceFormat
name|format
decl_stmt|;
name|format
operator|.
name|setAlphaBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|win
operator|->
name|setFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QWidget
modifier|*
name|nativeParent
init|=
name|q
operator|->
name|nativeParentWidget
argument_list|()
condition|)
block|{
if|if
condition|(
name|nativeParent
operator|->
name|windowHandle
argument_list|()
condition|)
block|{
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|Window
condition|)
block|{
name|win
operator|->
name|setTransientParent
argument_list|(
name|nativeParent
operator|->
name|windowHandle
argument_list|()
argument_list|)
expr_stmt|;
name|win
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|win
operator|->
name|setTransientParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|win
operator|->
name|setParent
argument_list|(
name|nativeParent
operator|->
name|windowHandle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|qt_window_private
argument_list|(
name|win
argument_list|)
operator|->
name|positionPolicy
operator|=
name|topData
argument_list|()
operator|->
name|posIncludesFrame
condition|?
name|QWindowPrivate
operator|::
name|WindowFrameInclusive
else|:
name|QWindowPrivate
operator|::
name|WindowFrameExclusive
expr_stmt|;
name|win
operator|->
name|create
argument_list|()
expr_stmt|;
comment|// Enable nonclient-area events for QDockWidget and other NonClientArea-mouse event processing.
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|Desktop
operator|)
operator|==
name|Qt
operator|::
name|Window
condition|)
name|win
operator|->
name|handle
argument_list|()
operator|->
name|setFrameStrutEventsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|data
operator|.
name|window_flags
operator|=
name|win
operator|->
name|flags
argument_list|()
expr_stmt|;
name|QBackingStore
modifier|*
name|store
init|=
name|q
operator|->
name|backingStore
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|store
condition|)
block|{
if|if
condition|(
name|win
operator|&&
name|q
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Desktop
condition|)
name|q
operator|->
name|setBackingStore
argument_list|(
operator|new
name|QBackingStore
argument_list|(
name|win
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PaintOnScreen
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|setWindowModified_helper
argument_list|()
expr_stmt|;
name|WId
name|id
init|=
name|win
operator|->
name|winId
argument_list|()
decl_stmt|;
comment|// See the QPlatformWindow::winId() documentation
name|Q_ASSERT
argument_list|(
name|id
operator|!=
name|WId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|setWinId
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// Check children and create windows for them if necessary
name|q_createNativeChildrenAndSetParent
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|extra
operator|&&
operator|!
name|extra
operator|->
name|mask
operator|.
name|isEmpty
argument_list|()
condition|)
name|setMask_sys
argument_list|(
name|extra
operator|->
name|mask
argument_list|)
expr_stmt|;
comment|// If widget is already shown, set window visible, too
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
condition|)
name|win
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|destroy
name|void
name|QWidget
operator|::
name|destroy
parameter_list|(
name|bool
name|destroyWindow
parameter_list|,
name|bool
name|destroySubWindows
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|aboutToDestroy
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isWindow
argument_list|()
operator|&&
name|parentWidget
argument_list|()
condition|)
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|d
operator|->
name|effectiveRectFor
argument_list|(
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|deactivateWidgetCleanup
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
operator|&&
name|qApp
condition|)
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|closePopup
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|==
name|QApplicationPrivate
operator|::
name|active_window
condition|)
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
operator|==
name|this
condition|)
name|releaseMouse
argument_list|()
expr_stmt|;
if|if
condition|(
name|QWidget
operator|::
name|keyboardGrabber
argument_list|()
operator|==
name|this
condition|)
name|releaseKeyboard
argument_list|()
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Desktop
condition|)
block|{
if|if
condition|(
name|destroySubWindows
condition|)
block|{
name|QObjectList
name|childList
argument_list|(
name|children
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QWidget
modifier|*
name|widget
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|childList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
condition|)
block|{
if|if
condition|(
name|widget
operator|->
name|windowHandle
argument_list|()
condition|)
block|{
name|widget
operator|->
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|destroyWindow
condition|)
block|{
name|d
operator|->
name|deleteTLSysExtra
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|parentWidget
argument_list|()
operator|&&
name|parentWidget
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
block|{
name|d
operator|->
name|hide_sys
argument_list|()
expr_stmt|;
block|}
block|}
name|d
operator|->
name|setWinId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setParent_sys
name|void
name|QWidgetPrivate
operator|::
name|setParent_sys
parameter_list|(
name|QWidget
modifier|*
name|newparent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|WindowFlags
name|oldFlags
init|=
name|data
operator|.
name|window_flags
decl_stmt|;
name|bool
name|wasCreated
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
decl_stmt|;
name|int
name|targetScreen
init|=
operator|-
literal|1
decl_stmt|;
comment|// Handle a request to move the widget to a particular screen
if|if
condition|(
name|newparent
operator|&&
name|newparent
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
condition|)
block|{
comment|// make sure the widget is created on the same screen as the
comment|// programmer specified desktop widget
comment|// get the desktop's screen number
name|targetScreen
operator|=
name|newparent
operator|->
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|screenIndex
expr_stmt|;
name|newparent
operator|=
literal|0
expr_stmt|;
block|}
name|setWinId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
name|newparent
condition|)
block|{
name|QObjectPrivate
operator|::
name|setParent_helper
argument_list|(
name|newparent
argument_list|)
expr_stmt|;
comment|//### why does this have to be done in the _sys function???
if|if
condition|(
name|q
operator|->
name|windowHandle
argument_list|()
condition|)
block|{
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|setFlags
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|parentWithWindow
init|=
name|newparent
condition|?
operator|(
name|newparent
operator|->
name|windowHandle
argument_list|()
condition|?
name|newparent
else|:
name|newparent
operator|->
name|nativeParentWidget
argument_list|()
operator|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|parentWithWindow
condition|)
block|{
if|if
condition|(
name|f
operator|&
name|Qt
operator|::
name|Window
condition|)
block|{
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|setTransientParent
argument_list|(
name|parentWithWindow
operator|->
name|windowHandle
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|setTransientParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|setParent
argument_list|(
name|parentWithWindow
operator|->
name|windowHandle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|setTransientParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|newparent
condition|)
block|{
name|f
operator||=
name|Qt
operator|::
name|Window
expr_stmt|;
if|if
condition|(
name|targetScreen
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|parent
condition|)
name|targetScreen
operator|=
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|screenIndex
expr_stmt|;
block|}
block|}
name|bool
name|explicitlyHidden
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
decl_stmt|;
comment|// Reparenting toplevel to child
if|if
condition|(
name|wasCreated
operator|&&
operator|!
operator|(
name|f
operator|&
name|Qt
operator|::
name|Window
operator|)
operator|&&
operator|(
name|oldFlags
operator|&
name|Qt
operator|::
name|Window
operator|)
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
condition|)
name|q
operator|->
name|destroy
argument_list|()
expr_stmt|;
name|adjustFlags
argument_list|(
name|f
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|data
operator|.
name|window_flags
operator|=
name|f
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|newparent
operator|&&
name|wasCreated
operator|&&
operator|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
operator|||
operator|(
name|f
operator|&
name|Qt
operator|::
name|Window
operator|)
operator|)
condition|)
name|q
operator|->
name|createWinId
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|||
operator|(
operator|!
name|newparent
operator|||
name|newparent
operator|->
name|isVisible
argument_list|()
operator|)
operator|||
name|explicitlyHidden
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|,
name|explicitlyHidden
argument_list|)
expr_stmt|;
comment|// move the window to the selected screen
if|if
condition|(
operator|!
name|newparent
operator|&&
name|targetScreen
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|maybeTopData
argument_list|()
condition|)
name|maybeTopData
argument_list|()
operator|->
name|screenIndex
operator|=
name|targetScreen
expr_stmt|;
comment|// only if it is already created
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
block|{
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|setScreen
argument_list|(
name|QGuiApplication
operator|::
name|screens
argument_list|()
operator|.
name|value
argument_list|(
name|targetScreen
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|mapToGlobal
name|QPoint
name|QWidget
operator|::
name|mapToGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|int
name|x
init|=
name|pos
operator|.
name|x
argument_list|()
decl_stmt|,
name|y
init|=
name|pos
operator|.
name|y
argument_list|()
decl_stmt|;
specifier|const
name|QWidget
modifier|*
name|w
init|=
name|this
decl_stmt|;
while|while
condition|(
name|w
condition|)
block|{
name|QWindow
modifier|*
name|window
init|=
name|w
operator|->
name|windowHandle
argument_list|()
decl_stmt|;
if|if
condition|(
name|window
operator|&&
name|window
operator|->
name|handle
argument_list|()
condition|)
return|return
name|window
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
return|;
name|x
operator|+=
name|w
operator|->
name|data
operator|->
name|crect
operator|.
name|x
argument_list|()
expr_stmt|;
name|y
operator|+=
name|w
operator|->
name|data
operator|->
name|crect
operator|.
name|y
argument_list|()
expr_stmt|;
name|w
operator|=
name|w
operator|->
name|isWindow
argument_list|()
condition|?
literal|0
else|:
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
return|return
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mapFromGlobal
name|QPoint
name|QWidget
operator|::
name|mapFromGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|int
name|x
init|=
name|pos
operator|.
name|x
argument_list|()
decl_stmt|,
name|y
init|=
name|pos
operator|.
name|y
argument_list|()
decl_stmt|;
specifier|const
name|QWidget
modifier|*
name|w
init|=
name|this
decl_stmt|;
while|while
condition|(
name|w
condition|)
block|{
name|QWindow
modifier|*
name|window
init|=
name|w
operator|->
name|windowHandle
argument_list|()
decl_stmt|;
if|if
condition|(
name|window
operator|&&
name|window
operator|->
name|handle
argument_list|()
condition|)
return|return
name|window
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
return|;
name|x
operator|-=
name|w
operator|->
name|data
operator|->
name|crect
operator|.
name|x
argument_list|()
expr_stmt|;
name|y
operator|-=
name|w
operator|->
name|data
operator|->
name|crect
operator|.
name|y
argument_list|()
expr_stmt|;
name|w
operator|=
name|w
operator|->
name|isWindow
argument_list|()
condition|?
literal|0
else|:
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
return|return
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|updateSystemBackground
name|void
name|QWidgetPrivate
operator|::
name|updateSystemBackground
parameter_list|()
block|{}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|setCursor_sys
name|void
name|QWidgetPrivate
operator|::
name|setCursor_sys
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|qt_qpa_set_cursor
argument_list|(
name|q
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unsetCursor_sys
name|void
name|QWidgetPrivate
operator|::
name|unsetCursor_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|qt_qpa_set_cursor
argument_list|(
name|q
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_CURSOR
end_comment
begin_function
DECL|function|setWindowTitle_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowTitle_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|caption
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
return|return;
if|if
condition|(
name|QWindow
modifier|*
name|window
init|=
name|q
operator|->
name|windowHandle
argument_list|()
condition|)
name|window
operator|->
name|setTitle
argument_list|(
name|caption
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowFilePath_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowFilePath_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|filePath
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
return|return;
if|if
condition|(
name|QWindow
modifier|*
name|window
init|=
name|q
operator|->
name|windowHandle
argument_list|()
condition|)
name|window
operator|->
name|setFilePath
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowIcon_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowIcon_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindow
modifier|*
name|window
init|=
name|q
operator|->
name|windowHandle
argument_list|()
condition|)
name|window
operator|->
name|setIcon
argument_list|(
name|q
operator|->
name|windowIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowIconText_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowIconText_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|iconText
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|iconText
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|qt_pressGrab
name|QWidget
modifier|*
name|qt_pressGrab
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_mouseGrb
name|QWidget
modifier|*
name|qt_mouseGrb
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|keyboardGrb
specifier|static
name|QWidget
modifier|*
name|keyboardGrb
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|grabberWindow
specifier|static
specifier|inline
name|QWindow
modifier|*
name|grabberWindow
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|QWindow
modifier|*
name|window
init|=
name|w
operator|->
name|windowHandle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|window
condition|)
if|if
condition|(
specifier|const
name|QWidget
modifier|*
name|nativeParent
init|=
name|w
operator|->
name|nativeParentWidget
argument_list|()
condition|)
name|window
operator|=
name|nativeParent
operator|->
name|windowHandle
argument_list|()
expr_stmt|;
return|return
name|window
return|;
block|}
end_function
begin_function
DECL|function|grabMouse
name|void
name|QWidget
operator|::
name|grabMouse
parameter_list|()
block|{
if|if
condition|(
name|qt_mouseGrb
condition|)
name|qt_mouseGrb
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
if|if
condition|(
name|QWindow
modifier|*
name|window
init|=
name|grabberWindow
argument_list|(
name|this
argument_list|)
condition|)
name|window
operator|->
name|setMouseGrabEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qt_mouseGrb
operator|=
name|this
expr_stmt|;
name|qt_pressGrab
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|grabMouse
name|void
name|QWidget
operator|::
name|grabMouse
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|grabMouse
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|stealMouseGrab
name|bool
name|QWidgetPrivate
operator|::
name|stealMouseGrab
parameter_list|(
name|bool
name|grab
parameter_list|)
block|{
comment|// This is like a combination of grab/releaseMouse() but with error checking
comment|// and it has no effect on the result of mouseGrabber().
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QWindow
modifier|*
name|window
init|=
name|grabberWindow
argument_list|(
name|q
argument_list|)
decl_stmt|;
return|return
name|window
condition|?
name|window
operator|->
name|setMouseGrabEnabled
argument_list|(
name|grab
argument_list|)
else|:
literal|false
return|;
block|}
end_function
begin_function
DECL|function|releaseMouse
name|void
name|QWidget
operator|::
name|releaseMouse
parameter_list|()
block|{
if|if
condition|(
name|qt_mouseGrb
operator|==
name|this
condition|)
block|{
if|if
condition|(
name|QWindow
modifier|*
name|window
init|=
name|grabberWindow
argument_list|(
name|this
argument_list|)
condition|)
name|window
operator|->
name|setMouseGrabEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qt_mouseGrb
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|grabKeyboard
name|void
name|QWidget
operator|::
name|grabKeyboard
parameter_list|()
block|{
if|if
condition|(
name|keyboardGrb
condition|)
name|keyboardGrb
operator|->
name|releaseKeyboard
argument_list|()
expr_stmt|;
if|if
condition|(
name|QWindow
modifier|*
name|window
init|=
name|grabberWindow
argument_list|(
name|this
argument_list|)
condition|)
name|window
operator|->
name|setKeyboardGrabEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|keyboardGrb
operator|=
name|this
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stealKeyboardGrab
name|bool
name|QWidgetPrivate
operator|::
name|stealKeyboardGrab
parameter_list|(
name|bool
name|grab
parameter_list|)
block|{
comment|// This is like a combination of grab/releaseKeyboard() but with error
comment|// checking and it has no effect on the result of keyboardGrabber().
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QWindow
modifier|*
name|window
init|=
name|grabberWindow
argument_list|(
name|q
argument_list|)
decl_stmt|;
return|return
name|window
condition|?
name|window
operator|->
name|setKeyboardGrabEnabled
argument_list|(
name|grab
argument_list|)
else|:
literal|false
return|;
block|}
end_function
begin_function
DECL|function|releaseKeyboard
name|void
name|QWidget
operator|::
name|releaseKeyboard
parameter_list|()
block|{
if|if
condition|(
name|keyboardGrb
operator|==
name|this
condition|)
block|{
if|if
condition|(
name|QWindow
modifier|*
name|window
init|=
name|grabberWindow
argument_list|(
name|this
argument_list|)
condition|)
name|window
operator|->
name|setKeyboardGrabEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|keyboardGrb
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mouseGrabber
name|QWidget
modifier|*
name|QWidget
operator|::
name|mouseGrabber
parameter_list|()
block|{
if|if
condition|(
name|qt_mouseGrb
condition|)
return|return
name|qt_mouseGrb
return|;
return|return
name|qt_pressGrab
return|;
block|}
end_function
begin_function
DECL|function|keyboardGrabber
name|QWidget
modifier|*
name|QWidget
operator|::
name|keyboardGrabber
parameter_list|()
block|{
return|return
name|keyboardGrb
return|;
block|}
end_function
begin_function
DECL|function|activateWindow
name|void
name|QWidget
operator|::
name|activateWindow
parameter_list|()
block|{
name|QWindow
modifier|*
specifier|const
name|wnd
init|=
name|window
argument_list|()
operator|->
name|windowHandle
argument_list|()
decl_stmt|;
if|if
condition|(
name|wnd
condition|)
name|wnd
operator|->
name|requestActivate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// move() was invoked with Qt::WA_WState_Created not set (frame geometry
end_comment
begin_comment
comment|// unknown), that is, crect has a position including the frame.
end_comment
begin_comment
comment|// If we can determine the frame strut, fix that and clear the flag.
end_comment
begin_function
DECL|function|fixPosIncludesFrame
name|void
name|QWidgetPrivate
operator|::
name|fixPosIncludesFrame
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTLWExtra
modifier|*
name|te
init|=
name|maybeTopData
argument_list|()
condition|)
block|{
if|if
condition|(
name|te
operator|->
name|posIncludesFrame
condition|)
block|{
comment|// For Qt::WA_DontShowOnScreen, assume a frame of 0 (for
comment|// example, in QGraphicsProxyWidget).
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
name|te
operator|->
name|posIncludesFrame
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|q
operator|->
name|windowHandle
argument_list|()
condition|)
block|{
name|updateFrameStrut
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|data
operator|->
name|fstrut_dirty
condition|)
block|{
name|data
operator|.
name|crect
operator|.
name|translate
argument_list|(
name|te
operator|->
name|frameStrut
operator|.
name|x
argument_list|()
argument_list|,
name|te
operator|->
name|frameStrut
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|te
operator|->
name|posIncludesFrame
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|// windowHandle()
block|}
comment|// !WA_DontShowOnScreen
block|}
comment|// posIncludesFrame
block|}
comment|// QTLWExtra
block|}
end_function
begin_function
DECL|function|show_sys
name|void
name|QWidgetPrivate
operator|::
name|show_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QWindow
modifier|*
name|window
init|=
name|q
operator|->
name|windowHandle
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|q
operator|->
name|windowModality
argument_list|()
operator|!=
name|Qt
operator|::
name|NonModal
operator|&&
name|window
condition|)
block|{
comment|// add our window to the modal window list
name|QGuiApplicationPrivate
operator|::
name|showModalWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|QApplication
operator|::
name|postEvent
argument_list|(
name|q
argument_list|,
operator|new
name|QUpdateLaterEvent
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
condition|)
return|return;
if|if
condition|(
name|window
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
name|fixPosIncludesFrame
argument_list|()
expr_stmt|;
name|QRect
name|geomRect
init|=
name|q
operator|->
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|QPoint
name|topLeftOfWindow
init|=
name|q
operator|->
name|mapTo
argument_list|(
name|q
operator|->
name|nativeParentWidget
argument_list|()
argument_list|,
name|QPoint
argument_list|()
argument_list|)
decl_stmt|;
name|geomRect
operator|.
name|moveTopLeft
argument_list|(
name|topLeftOfWindow
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QRect
name|windowRect
init|=
name|window
operator|->
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|windowRect
operator|!=
name|geomRect
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|)
condition|)
name|window
operator|->
name|setGeometry
argument_list|(
name|geomRect
argument_list|)
expr_stmt|;
else|else
name|window
operator|->
name|resize
argument_list|(
name|geomRect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QBackingStore
modifier|*
name|store
init|=
name|q
operator|->
name|backingStore
argument_list|()
condition|)
block|{
if|if
condition|(
name|store
operator|->
name|size
argument_list|()
operator|!=
name|geomRect
operator|.
name|size
argument_list|()
condition|)
block|{
name|store
operator|->
name|resize
argument_list|(
name|geomRect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|qt_qpa_set_cursor
argument_list|(
name|q
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Needed in case cursor was set before show
endif|#
directive|endif
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Was the window moved by the Window system or QPlatformWindow::initialGeometry() ?
if|if
condition|(
name|window
operator|->
name|isTopLevel
argument_list|()
condition|)
block|{
specifier|const
name|QPoint
name|crectTopLeft
init|=
name|q
operator|->
name|data
operator|->
name|crect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
specifier|const
name|QPoint
name|windowTopLeft
init|=
name|window
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
if|if
condition|(
name|crectTopLeft
operator|==
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|&&
name|windowTopLeft
operator|!=
name|crectTopLeft
condition|)
name|q
operator|->
name|data
operator|->
name|crect
operator|.
name|moveTopLeft
argument_list|(
name|windowTopLeft
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|hide_sys
name|void
name|QWidgetPrivate
operator|::
name|hide_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QWindow
modifier|*
name|window
init|=
name|q
operator|->
name|windowHandle
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|q
operator|->
name|windowModality
argument_list|()
operator|!=
name|Qt
operator|::
name|NonModal
operator|&&
name|window
condition|)
block|{
comment|// remove our window from the modal window list
name|QGuiApplicationPrivate
operator|::
name|hideModalWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
comment|// do not return here, if window non-zero, we must hide it
block|}
name|deactivateWidgetCleanup
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|p
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|&&
name|p
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|invalidateBuffer
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|window
condition|)
name|window
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|effectiveState
name|Qt
operator|::
name|WindowState
name|effectiveState
parameter_list|(
name|Qt
operator|::
name|WindowStates
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
return|return
name|Qt
operator|::
name|WindowMinimized
return|;
elseif|else
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
return|return
name|Qt
operator|::
name|WindowFullScreen
return|;
elseif|else
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
return|return
name|Qt
operator|::
name|WindowMaximized
return|;
return|return
name|Qt
operator|::
name|WindowNoState
return|;
block|}
end_function
begin_function
DECL|function|setWindowState
name|void
name|QWidget
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowStates
name|newstate
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|WindowStates
name|oldstate
init|=
name|windowState
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldstate
operator|==
name|newstate
condition|)
return|return;
if|if
condition|(
name|isWindow
argument_list|()
operator|&&
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
name|create
argument_list|()
expr_stmt|;
name|data
operator|->
name|window_state
operator|=
name|newstate
expr_stmt|;
name|data
operator|->
name|in_set_window_state
operator|=
literal|1
expr_stmt|;
name|Qt
operator|::
name|WindowState
name|newEffectiveState
init|=
name|effectiveState
argument_list|(
name|newstate
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|WindowState
name|oldEffectiveState
init|=
name|effectiveState
argument_list|(
name|oldstate
argument_list|)
decl_stmt|;
if|if
condition|(
name|isWindow
argument_list|()
operator|&&
name|newEffectiveState
operator|!=
name|oldEffectiveState
condition|)
block|{
comment|// Ensure the initial size is valid, since we store it as normalGeometry below.
if|if
condition|(
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
operator|&&
operator|!
name|isVisible
argument_list|()
condition|)
name|adjustSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|createTLExtra
argument_list|()
expr_stmt|;
if|if
condition|(
name|oldEffectiveState
operator|==
name|Qt
operator|::
name|WindowNoState
condition|)
name|d
operator|->
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|windowHandle
argument_list|()
argument_list|)
expr_stmt|;
name|windowHandle
argument_list|()
operator|->
name|setWindowState
argument_list|(
name|newEffectiveState
argument_list|)
expr_stmt|;
block|}
name|data
operator|->
name|in_set_window_state
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|newstate
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|activateWindow
argument_list|()
expr_stmt|;
name|QWindowStateChangeEvent
name|e
argument_list|(
name|oldstate
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|this
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFocus_sys
name|void
name|QWidgetPrivate
operator|::
name|setFocus_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
comment|// Embedded native widget may have taken the focus; get it back to toplevel if that is the case
specifier|const
name|QWidget
modifier|*
name|topLevel
init|=
name|q
operator|->
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
name|topLevel
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Popup
condition|)
block|{
if|if
condition|(
name|QWindow
modifier|*
name|nativeWindow
init|=
name|q
operator|->
name|window
argument_list|()
operator|->
name|windowHandle
argument_list|()
condition|)
block|{
if|if
condition|(
name|nativeWindow
operator|!=
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
block|{
name|nativeWindow
operator|->
name|requestActivate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|raise_sys
name|void
name|QWidgetPrivate
operator|::
name|raise_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|||
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
condition|)
block|{
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|raise
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lower_sys
name|void
name|QWidgetPrivate
operator|::
name|lower_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|||
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|lower
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QWidget
modifier|*
name|p
init|=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
block|{
name|setDirtyOpaqueRegion
argument_list|()
expr_stmt|;
name|p
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|effectiveRectFor
argument_list|(
name|q
operator|->
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stackUnder_sys
name|void
name|QWidgetPrivate
operator|::
name|stackUnder_sys
parameter_list|(
name|QWidget
modifier|*
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|p
init|=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
block|{
name|setDirtyOpaqueRegion
argument_list|()
expr_stmt|;
name|p
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|effectiveRectFor
argument_list|(
name|q
operator|->
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setGeometry_sys
name|void
name|QWidgetPrivate
operator|::
name|setGeometry_sys
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|bool
name|isMove
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|extra
condition|)
block|{
comment|// any size restrictions?
name|w
operator|=
name|qMin
argument_list|(
name|w
argument_list|,
name|extra
operator|->
name|maxw
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMin
argument_list|(
name|h
argument_list|,
name|extra
operator|->
name|maxh
argument_list|)
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|extra
operator|->
name|minw
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|extra
operator|->
name|minh
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|q
operator|->
name|windowHandle
argument_list|()
condition|)
block|{
name|QPlatformIntegration
modifier|*
name|integration
init|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|integration
operator|->
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|NonFullScreenWindows
argument_list|)
condition|)
block|{
name|x
operator|=
literal|0
expr_stmt|;
name|y
operator|=
literal|0
expr_stmt|;
name|w
operator|=
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|height
argument_list|()
expr_stmt|;
block|}
block|}
name|QPoint
name|oldp
init|=
name|q
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|QSize
name|olds
init|=
name|q
operator|->
name|size
argument_list|()
decl_stmt|;
name|QRect
name|r
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|bool
name|isResize
init|=
name|olds
operator|!=
name|r
operator|.
name|size
argument_list|()
decl_stmt|;
name|isMove
operator|=
name|oldp
operator|!=
name|r
operator|.
name|topLeft
argument_list|()
expr_stmt|;
comment|//### why do we have isMove as a parameter?
comment|// We only care about stuff that changes the geometry, or may
comment|// cause the window manager to change its state
if|if
condition|(
name|r
operator|.
name|size
argument_list|()
operator|==
name|olds
operator|&&
name|oldp
operator|==
name|r
operator|.
name|topLeft
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|data
operator|.
name|in_set_window_state
condition|)
block|{
name|q
operator|->
name|data
operator|->
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
name|q
operator|->
name|data
operator|->
name|window_state
operator|&=
operator|~
name|Qt
operator|::
name|WindowFullScreen
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
name|topData
argument_list|()
operator|->
name|normalGeometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|QPoint
name|oldPos
init|=
name|q
operator|->
name|pos
argument_list|()
decl_stmt|;
name|data
operator|.
name|crect
operator|=
name|r
expr_stmt|;
name|bool
name|needsShow
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|data
operator|.
name|window_state
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
operator|&&
operator|(
name|w
operator|==
literal|0
operator|||
name|h
operator|==
literal|0
operator|)
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
condition|)
name|hide_sys
argument_list|()
expr_stmt|;
name|data
operator|.
name|crect
operator|=
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
condition|)
block|{
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|needsShow
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|windowHandle
argument_list|()
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|setGeometry
argument_list|(
name|q
operator|->
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPoint
name|posInNativeParent
init|=
name|q
operator|->
name|mapTo
argument_list|(
name|q
operator|->
name|nativeParentWidget
argument_list|()
argument_list|,
name|QPoint
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|posInNativeParent
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QWidgetBackingStore
modifier|*
name|bs
init|=
name|maybeBackingStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|&&
name|bs
operator|->
name|store
condition|)
block|{
if|if
condition|(
name|isResize
condition|)
name|bs
operator|->
name|store
operator|->
name|resize
argument_list|(
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needsShow
condition|)
name|show_sys
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
block|{
if|if
condition|(
name|isMove
operator|&&
operator|!
name|isResize
condition|)
name|moveRect
argument_list|(
name|QRect
argument_list|(
name|oldPos
argument_list|,
name|olds
argument_list|)
argument_list|,
name|x
operator|-
name|oldPos
operator|.
name|x
argument_list|()
argument_list|,
name|y
operator|-
name|oldPos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|invalidateBuffer_resizeHelper
argument_list|(
name|oldPos
argument_list|,
name|olds
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isMove
condition|)
block|{
name|QMoveEvent
name|e
argument_list|(
name|q
operator|->
name|pos
argument_list|()
argument_list|,
name|oldPos
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isResize
condition|)
block|{
name|QResizeEvent
name|e
argument_list|(
name|r
operator|.
name|size
argument_list|()
argument_list|,
name|olds
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|windowHandle
argument_list|()
condition|)
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// not visible
if|if
condition|(
name|isMove
operator|&&
name|q
operator|->
name|pos
argument_list|()
operator|!=
name|oldPos
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingMoveEvent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|isResize
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingResizeEvent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setConstraints_sys
name|void
name|QWidgetPrivate
operator|::
name|setConstraints_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|extra
operator|&&
name|q
operator|->
name|windowHandle
argument_list|()
condition|)
block|{
name|QWindow
modifier|*
name|win
init|=
name|q
operator|->
name|windowHandle
argument_list|()
decl_stmt|;
name|QWindowPrivate
modifier|*
name|winp
init|=
name|qt_window_private
argument_list|(
name|win
argument_list|)
decl_stmt|;
name|winp
operator|->
name|minimumSize
operator|=
name|QSize
argument_list|(
name|extra
operator|->
name|minw
argument_list|,
name|extra
operator|->
name|minh
argument_list|)
expr_stmt|;
name|winp
operator|->
name|maximumSize
operator|=
name|QSize
argument_list|(
name|extra
operator|->
name|maxw
argument_list|,
name|extra
operator|->
name|maxh
argument_list|)
expr_stmt|;
if|if
condition|(
name|extra
operator|->
name|topextra
condition|)
block|{
name|winp
operator|->
name|baseSize
operator|=
name|QSize
argument_list|(
name|extra
operator|->
name|topextra
operator|->
name|basew
argument_list|,
name|extra
operator|->
name|topextra
operator|->
name|baseh
argument_list|)
expr_stmt|;
name|winp
operator|->
name|sizeIncrement
operator|=
name|QSize
argument_list|(
name|extra
operator|->
name|topextra
operator|->
name|incw
argument_list|,
name|extra
operator|->
name|topextra
operator|->
name|inch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|winp
operator|->
name|platformWindow
condition|)
block|{
name|fixPosIncludesFrame
argument_list|()
expr_stmt|;
name|winp
operator|->
name|platformWindow
operator|->
name|propagateSizeHints
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|scroll_sys
name|void
name|QWidgetPrivate
operator|::
name|scroll_sys
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|scrollChildren
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
name|scrollRect
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scroll_sys
name|void
name|QWidgetPrivate
operator|::
name|scroll_sys
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|scrollRect
argument_list|(
name|r
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QWidget
operator|::
name|metric
parameter_list|(
name|PaintDeviceMetric
name|m
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
name|QScreen
modifier|*
name|screen
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|topLevel
init|=
name|window
argument_list|()
condition|)
if|if
condition|(
name|QWindow
modifier|*
name|topLevelWindow
init|=
name|topLevel
operator|->
name|windowHandle
argument_list|()
condition|)
block|{
name|QPlatformScreen
modifier|*
name|platformScreen
init|=
name|QPlatformScreen
operator|::
name|platformScreenForWindow
argument_list|(
name|topLevelWindow
argument_list|)
decl_stmt|;
if|if
condition|(
name|platformScreen
condition|)
name|screen
operator|=
name|platformScreen
operator|->
name|screen
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|screen
operator|&&
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
condition|)
name|screen
operator|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
block|{
if|if
condition|(
name|m
operator|==
name|PdmDpiX
operator|||
name|m
operator|==
name|PdmDpiY
condition|)
return|return
literal|72
return|;
return|return
name|QPaintDevice
operator|::
name|metric
argument_list|(
name|m
argument_list|)
return|;
block|}
name|int
name|val
decl_stmt|;
if|if
condition|(
name|m
operator|==
name|PdmWidth
condition|)
block|{
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmWidthMM
condition|)
block|{
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|width
argument_list|()
operator|*
name|screen
operator|->
name|physicalSize
argument_list|()
operator|.
name|width
argument_list|()
operator|/
name|screen
operator|->
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmHeight
condition|)
block|{
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmHeightMM
condition|)
block|{
name|val
operator|=
name|data
operator|->
name|crect
operator|.
name|height
argument_list|()
operator|*
name|screen
operator|->
name|physicalSize
argument_list|()
operator|.
name|height
argument_list|()
operator|/
name|screen
operator|->
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmDepth
condition|)
block|{
return|return
name|screen
operator|->
name|depth
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmDpiX
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|extra
operator|&&
name|d
operator|->
name|extra
operator|->
name|customDpiX
condition|)
return|return
name|d
operator|->
name|extra
operator|->
name|customDpiX
return|;
elseif|else
if|if
condition|(
name|d
operator|->
name|parent
condition|)
return|return
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|parent
argument_list|)
operator|->
name|metric
argument_list|(
name|m
argument_list|)
return|;
return|return
name|qRound
argument_list|(
name|screen
operator|->
name|logicalDotsPerInchX
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmDpiY
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|extra
operator|&&
name|d
operator|->
name|extra
operator|->
name|customDpiY
condition|)
return|return
name|d
operator|->
name|extra
operator|->
name|customDpiY
return|;
elseif|else
if|if
condition|(
name|d
operator|->
name|parent
condition|)
return|return
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|parent
argument_list|)
operator|->
name|metric
argument_list|(
name|m
argument_list|)
return|;
return|return
name|qRound
argument_list|(
name|screen
operator|->
name|logicalDotsPerInchY
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmPhysicalDpiX
condition|)
block|{
return|return
name|qRound
argument_list|(
name|screen
operator|->
name|physicalDotsPerInchX
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmPhysicalDpiY
condition|)
block|{
return|return
name|qRound
argument_list|(
name|screen
operator|->
name|physicalDotsPerInchY
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|PdmDevicePixelRatio
condition|)
block|{
return|return
name|screen
operator|->
name|devicePixelRatio
argument_list|()
return|;
block|}
else|else
block|{
name|val
operator|=
name|QPaintDevice
operator|::
name|metric
argument_list|(
name|m
argument_list|)
expr_stmt|;
comment|// XXX
block|}
return|return
name|val
return|;
block|}
end_function
begin_comment
comment|/*!     \preliminary      Returns the QPlatformWindow this widget will be drawn into. */
end_comment
begin_function
DECL|function|windowHandle
name|QWindow
modifier|*
name|QWidget
operator|::
name|windowHandle
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidget
argument_list|)
expr_stmt|;
name|QTLWExtra
modifier|*
name|extra
init|=
name|d
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
if|if
condition|(
name|extra
condition|)
return|return
name|extra
operator|->
name|window
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|createSysExtra
name|void
name|QWidgetPrivate
operator|::
name|createSysExtra
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|deleteSysExtra
name|void
name|QWidgetPrivate
operator|::
name|deleteSysExtra
parameter_list|()
block|{  }
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_decl_stmt
DECL|variable|activeXNativeParentHandleProperty
specifier|static
specifier|const
name|char
name|activeXNativeParentHandleProperty
index|[]
init|=
literal|"_q_embedded_native_parent_handle"
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|createTLSysExtra
name|void
name|QWidgetPrivate
operator|::
name|createTLSysExtra
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|extra
operator|->
name|topextra
operator|->
name|window
operator|&&
operator|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
operator|||
name|q
operator|->
name|isWindow
argument_list|()
operator|)
condition|)
block|{
name|extra
operator|->
name|topextra
operator|->
name|window
operator|=
operator|new
name|QWidgetWindow
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|extra
operator|->
name|minw
operator|||
name|extra
operator|->
name|minh
condition|)
name|extra
operator|->
name|topextra
operator|->
name|window
operator|->
name|setMinimumSize
argument_list|(
name|QSize
argument_list|(
name|extra
operator|->
name|minw
argument_list|,
name|extra
operator|->
name|minh
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|extra
operator|->
name|maxw
operator|!=
name|QWIDGETSIZE_MAX
operator|||
name|extra
operator|->
name|maxh
operator|!=
name|QWIDGETSIZE_MAX
condition|)
name|extra
operator|->
name|topextra
operator|->
name|window
operator|->
name|setMaximumSize
argument_list|(
name|QSize
argument_list|(
name|extra
operator|->
name|maxw
argument_list|,
name|extra
operator|->
name|maxh
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|extra
operator|->
name|topextra
operator|->
name|opacity
operator|!=
literal|255
operator|&&
name|q
operator|->
name|isWindow
argument_list|()
condition|)
name|extra
operator|->
name|topextra
operator|->
name|window
operator|->
name|setOpacity
argument_list|(
name|qreal
argument_list|(
name|extra
operator|->
name|topextra
operator|->
name|opacity
argument_list|)
operator|/
name|qreal
argument_list|(
literal|255
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// Pass on native parent handle for Widget embedded into Active X.
specifier|const
name|QVariant
name|activeXNativeParentHandle
init|=
name|q
operator|->
name|property
argument_list|(
name|activeXNativeParentHandleProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|activeXNativeParentHandle
operator|.
name|isValid
argument_list|()
condition|)
name|extra
operator|->
name|topextra
operator|->
name|window
operator|->
name|setProperty
argument_list|(
name|activeXNativeParentHandleProperty
argument_list|,
name|activeXNativeParentHandle
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|inherits
argument_list|(
literal|"QTipLabel"
argument_list|)
operator|||
name|q
operator|->
name|inherits
argument_list|(
literal|"QAlphaWidget"
argument_list|)
condition|)
name|extra
operator|->
name|topextra
operator|->
name|window
operator|->
name|setProperty
argument_list|(
literal|"_q_windowsDropShadow"
argument_list|,
name|QVariant
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|deleteTLSysExtra
name|void
name|QWidgetPrivate
operator|::
name|deleteTLSysExtra
parameter_list|()
block|{
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|topextra
condition|)
block|{
comment|//the toplevel might have a context with a "qglcontext associated with it. We need to
comment|//delete the qglcontext before we delete the qplatformopenglcontext.
comment|//One unfortunate thing about this is that we potentially create a glContext just to
comment|//delete it straight afterwards.
if|if
condition|(
name|extra
operator|->
name|topextra
operator|->
name|window
condition|)
block|{
name|extra
operator|->
name|topextra
operator|->
name|window
operator|->
name|destroy
argument_list|()
expr_stmt|;
block|}
name|setWinId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|extra
operator|->
name|topextra
operator|->
name|window
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|window
operator|=
literal|0
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|backingStoreTracker
operator|.
name|destroy
argument_list|()
expr_stmt|;
operator|delete
name|extra
operator|->
name|topextra
operator|->
name|backingStore
expr_stmt|;
name|extra
operator|->
name|topextra
operator|->
name|backingStore
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|registerDropSite
name|void
name|QWidgetPrivate
operator|::
name|registerDropSite
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMask_sys
name|void
name|QWidgetPrivate
operator|::
name|setMask_sys
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|WindowMasks
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Not supported on %s."
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|qPrintable
argument_list|(
name|QGuiApplication
operator|::
name|platformName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QWindow
modifier|*
name|window
init|=
name|q
operator|->
name|windowHandle
argument_list|()
condition|)
if|if
condition|(
name|QPlatformWindow
modifier|*
name|platformWindow
init|=
name|window
operator|->
name|handle
argument_list|()
condition|)
name|platformWindow
operator|->
name|setMask
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateFrameStrut
name|void
name|QWidgetPrivate
operator|::
name|updateFrameStrut
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|data
operator|->
name|fstrut_dirty
condition|)
block|{
if|if
condition|(
name|QTLWExtra
modifier|*
name|te
init|=
name|maybeTopData
argument_list|()
condition|)
block|{
if|if
condition|(
name|te
operator|->
name|window
condition|)
block|{
if|if
condition|(
specifier|const
name|QPlatformWindow
modifier|*
name|pw
init|=
name|te
operator|->
name|window
operator|->
name|handle
argument_list|()
condition|)
block|{
specifier|const
name|QMargins
name|margins
init|=
name|pw
operator|->
name|frameMargins
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|margins
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|te
operator|->
name|frameStrut
operator|.
name|setCoords
argument_list|(
name|margins
operator|.
name|left
argument_list|()
argument_list|,
name|margins
operator|.
name|top
argument_list|()
argument_list|,
name|margins
operator|.
name|right
argument_list|()
argument_list|,
name|margins
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|data
operator|->
name|fstrut_dirty
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|setWindowOpacity_sys
name|void
name|QWidgetPrivate
operator|::
name|setWindowOpacity_sys
parameter_list|(
name|qreal
name|level
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|windowHandle
argument_list|()
condition|)
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|setOpacity
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWSGeometry
name|void
name|QWidgetPrivate
operator|::
name|setWSGeometry
parameter_list|(
name|bool
name|dontShow
parameter_list|,
specifier|const
name|QRect
modifier|&
name|oldRect
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|dontShow
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|oldRect
argument_list|)
expr_stmt|;
comment|// XXX
block|}
end_function
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QWidget
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
name|qWarning
argument_list|(
literal|"QWidget::paintEngine: Should no longer be called"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// We set this bit which is checked in setAttribute for
comment|// Qt::WA_PaintOnScreen. We do this to allow these two scenarios:
comment|//
comment|// 1. Users accidentally set Qt::WA_PaintOnScreen on X and port to
comment|// Windows which would mean suddenly their widgets stop working.
comment|//
comment|// 2. Users set paint on screen and subclass paintEngine() to
comment|// return 0, in which case we have a "hole" in the backingstore
comment|// allowing use of GDI or DirectX directly.
comment|//
comment|// 1 is WRONG, but to minimize silent failures, we have set this
comment|// bit to ignore the setAttribute call. 2. needs to be
comment|// supported because its our only means of embedding native
comment|// graphics stuff.
cast|const_cast
argument_list|<
name|QWidgetPrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
operator|->
name|noPaintOnScreen
operator|=
literal|1
expr_stmt|;
endif|#
directive|endif
return|return
literal|0
return|;
comment|//##### @@@
block|}
end_function
begin_function
DECL|function|setModal_sys
name|void
name|QWidgetPrivate
operator|::
name|setModal_sys
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|windowHandle
argument_list|()
condition|)
name|q
operator|->
name|windowHandle
argument_list|()
operator|->
name|setModality
argument_list|(
name|q
operator|->
name|windowModality
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|applyCursor
specifier|static
specifier|inline
name|void
name|applyCursor
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|QCursor
name|c
parameter_list|)
block|{
if|if
condition|(
name|QWindow
modifier|*
name|window
init|=
name|w
operator|->
name|windowHandle
argument_list|()
condition|)
name|window
operator|->
name|setCursor
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unsetCursor
specifier|static
specifier|inline
name|void
name|unsetCursor
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
name|QWindow
modifier|*
name|window
init|=
name|w
operator|->
name|windowHandle
argument_list|()
condition|)
name|window
operator|->
name|unsetCursor
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_qpa_set_cursor
name|void
name|qt_qpa_set_cursor
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|force
parameter_list|)
block|{
if|if
condition|(
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
condition|)
return|return;
specifier|static
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|lastUnderMouse
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|force
condition|)
block|{
name|lastUnderMouse
operator|=
name|w
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastUnderMouse
condition|)
block|{
specifier|const
name|WId
name|lastWinId
init|=
name|lastUnderMouse
operator|->
name|effectiveWinId
argument_list|()
decl_stmt|;
specifier|const
name|WId
name|winId
init|=
name|w
operator|->
name|effectiveWinId
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastWinId
operator|&&
name|lastWinId
operator|==
name|winId
condition|)
name|w
operator|=
name|lastUnderMouse
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
return|return;
comment|// The mouse is not under this widget, and it's not native, so don't change it.
block|}
while|while
condition|(
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
operator|&&
name|w
operator|->
name|parentWidget
argument_list|()
operator|&&
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetCursor
argument_list|)
condition|)
name|w
operator|=
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|nativeParent
init|=
name|w
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
name|nativeParent
operator|=
name|w
operator|->
name|nativeParentWidget
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|nativeParent
operator|||
operator|!
name|nativeParent
operator|->
name|internalWinId
argument_list|()
condition|)
return|return;
if|if
condition|(
name|w
operator|->
name|isWindow
argument_list|()
operator|||
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetCursor
argument_list|)
condition|)
block|{
if|if
condition|(
name|w
operator|->
name|isEnabled
argument_list|()
condition|)
name|applyCursor
argument_list|(
name|nativeParent
argument_list|,
name|w
operator|->
name|cursor
argument_list|()
argument_list|)
expr_stmt|;
else|else
comment|// Enforce the windows behavior of clearing the cursor on
comment|// disabled widgets.
name|unsetCursor
argument_list|(
name|nativeParent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unsetCursor
argument_list|(
name|nativeParent
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_CURSOR
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
