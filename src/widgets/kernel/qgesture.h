begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QGESTURE_H
end_ifndef
begin_define
DECL|macro|QGESTURE_H
define|#
directive|define
name|QGESTURE_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpoint.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrect.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmetatype.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qevent.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::GestureState
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::GestureType
argument_list|)
end_macro
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QGesturePrivate
name|class
name|QGesturePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QGesture
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QGesture
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::GestureState state READ state
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::GestureType gestureType READ gestureType
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QGesture::GestureCancelPolicy gestureCancelPolicy READ gestureCancelPolicy WRITE setGestureCancelPolicy
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QPointF hotSpot READ hotSpot WRITE setHotSpot RESET unsetHotSpot
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool hasHotSpot READ hasHotSpot
argument_list|)
name|public
operator|:
name|explicit
name|QGesture
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QGesture
argument_list|()
block|;
name|Qt
operator|::
name|GestureType
name|gestureType
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|GestureState
name|state
argument_list|()
specifier|const
block|;
name|QPointF
name|hotSpot
argument_list|()
specifier|const
block|;
name|void
name|setHotSpot
argument_list|(
specifier|const
name|QPointF
operator|&
name|value
argument_list|)
block|;
name|bool
name|hasHotSpot
argument_list|()
specifier|const
block|;
name|void
name|unsetHotSpot
argument_list|()
block|;      enum
name|GestureCancelPolicy
block|{
name|CancelNone
operator|=
literal|0
block|,
name|CancelAllInContext
block|}
block|;
name|void
name|setGestureCancelPolicy
argument_list|(
argument|GestureCancelPolicy policy
argument_list|)
block|;
name|GestureCancelPolicy
name|gestureCancelPolicy
argument_list|()
specifier|const
block|;
name|protected
operator|:
name|QGesture
argument_list|(
name|QGesturePrivate
operator|&
name|dd
argument_list|,
name|QObject
operator|*
name|parent
argument_list|)
block|;
name|private
operator|:
name|friend
name|class
name|QGestureEvent
block|;
name|friend
name|class
name|QGestureRecognizer
block|;
name|friend
name|class
name|QGestureManager
block|;
name|friend
name|class
name|QGraphicsScenePrivate
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPanGesturePrivate
name|class
name|QPanGesturePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QPanGesture
range|:
name|public
name|QGesture
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QPanGesture
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QPointF lastOffset READ lastOffset WRITE setLastOffset
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QPointF offset READ offset WRITE setOffset
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QPointF delta READ delta STORED false
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|qreal acceleration READ acceleration WRITE setAcceleration
argument_list|)
name|Q_PRIVATE_PROPERTY
argument_list|(
argument|QPanGesture::d_func()
argument_list|,
argument|qreal horizontalVelocity READ horizontalVelocity WRITE setHorizontalVelocity
argument_list|)
name|Q_PRIVATE_PROPERTY
argument_list|(
argument|QPanGesture::d_func()
argument_list|,
argument|qreal verticalVelocity READ verticalVelocity WRITE setVerticalVelocity
argument_list|)
name|public
operator|:
name|explicit
name|QPanGesture
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QPanGesture
argument_list|()
block|;
name|QPointF
name|lastOffset
argument_list|()
specifier|const
block|;
name|QPointF
name|offset
argument_list|()
specifier|const
block|;
name|QPointF
name|delta
argument_list|()
specifier|const
block|;
name|qreal
name|acceleration
argument_list|()
specifier|const
block|;
name|void
name|setLastOffset
argument_list|(
specifier|const
name|QPointF
operator|&
name|value
argument_list|)
block|;
name|void
name|setOffset
argument_list|(
specifier|const
name|QPointF
operator|&
name|value
argument_list|)
block|;
name|void
name|setAcceleration
argument_list|(
argument|qreal value
argument_list|)
block|;
name|friend
name|class
name|QPanGestureRecognizer
block|;
name|friend
name|class
name|QWinNativePanGestureRecognizer
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPinchGesturePrivate
name|class
name|QPinchGesturePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QPinchGesture
range|:
name|public
name|QGesture
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QPinchGesture
argument_list|)
name|Q_FLAGS
argument_list|(
argument|ChangeFlags ChangeFlag
argument_list|)
name|public
operator|:
expr|enum
name|ChangeFlag
block|{
name|ScaleFactorChanged
operator|=
literal|0x1
block|,
name|RotationAngleChanged
operator|=
literal|0x2
block|,
name|CenterPointChanged
operator|=
literal|0x4
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|ChangeFlags
argument_list|,
argument|ChangeFlag
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|ChangeFlags totalChangeFlags READ totalChangeFlags WRITE setTotalChangeFlags
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|ChangeFlags changeFlags READ changeFlags WRITE setChangeFlags
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|qreal totalScaleFactor READ totalScaleFactor WRITE setTotalScaleFactor
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|qreal lastScaleFactor READ lastScaleFactor WRITE setLastScaleFactor
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|qreal scaleFactor READ scaleFactor WRITE setScaleFactor
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|qreal totalRotationAngle READ totalRotationAngle WRITE setTotalRotationAngle
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|qreal lastRotationAngle READ lastRotationAngle WRITE setLastRotationAngle
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|qreal rotationAngle READ rotationAngle WRITE setRotationAngle
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QPointF startCenterPoint READ startCenterPoint WRITE setStartCenterPoint
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QPointF lastCenterPoint READ lastCenterPoint WRITE setLastCenterPoint
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QPointF centerPoint READ centerPoint WRITE setCenterPoint
argument_list|)
name|public
operator|:
name|explicit
name|QPinchGesture
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QPinchGesture
argument_list|()
block|;
name|ChangeFlags
name|totalChangeFlags
argument_list|()
specifier|const
block|;
name|void
name|setTotalChangeFlags
argument_list|(
argument|ChangeFlags value
argument_list|)
block|;
name|ChangeFlags
name|changeFlags
argument_list|()
specifier|const
block|;
name|void
name|setChangeFlags
argument_list|(
argument|ChangeFlags value
argument_list|)
block|;
name|QPointF
name|startCenterPoint
argument_list|()
specifier|const
block|;
name|QPointF
name|lastCenterPoint
argument_list|()
specifier|const
block|;
name|QPointF
name|centerPoint
argument_list|()
specifier|const
block|;
name|void
name|setStartCenterPoint
argument_list|(
specifier|const
name|QPointF
operator|&
name|value
argument_list|)
block|;
name|void
name|setLastCenterPoint
argument_list|(
specifier|const
name|QPointF
operator|&
name|value
argument_list|)
block|;
name|void
name|setCenterPoint
argument_list|(
specifier|const
name|QPointF
operator|&
name|value
argument_list|)
block|;
name|qreal
name|totalScaleFactor
argument_list|()
specifier|const
block|;
name|qreal
name|lastScaleFactor
argument_list|()
specifier|const
block|;
name|qreal
name|scaleFactor
argument_list|()
specifier|const
block|;
name|void
name|setTotalScaleFactor
argument_list|(
argument|qreal value
argument_list|)
block|;
name|void
name|setLastScaleFactor
argument_list|(
argument|qreal value
argument_list|)
block|;
name|void
name|setScaleFactor
argument_list|(
argument|qreal value
argument_list|)
block|;
name|qreal
name|totalRotationAngle
argument_list|()
specifier|const
block|;
name|qreal
name|lastRotationAngle
argument_list|()
specifier|const
block|;
name|qreal
name|rotationAngle
argument_list|()
specifier|const
block|;
name|void
name|setTotalRotationAngle
argument_list|(
argument|qreal value
argument_list|)
block|;
name|void
name|setLastRotationAngle
argument_list|(
argument|qreal value
argument_list|)
block|;
name|void
name|setRotationAngle
argument_list|(
argument|qreal value
argument_list|)
block|;
name|friend
name|class
name|QPinchGestureRecognizer
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QPinchGesture::ChangeFlags
argument_list|)
end_macro
begin_decl_stmt
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
argument_list|(
name|QPinchGesture
operator|::
name|ChangeFlags
argument_list|)
name|QT_BEGIN_NAMESPACE
DECL|variable|QSwipeGesturePrivate
name|class
name|QSwipeGesturePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QSwipeGesture
range|:
name|public
name|QGesture
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QSwipeGesture
argument_list|)
name|Q_ENUMS
argument_list|(
argument|SwipeDirection
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|SwipeDirection horizontalDirection READ horizontalDirection STORED false
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|SwipeDirection verticalDirection READ verticalDirection STORED false
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|qreal swipeAngle READ swipeAngle WRITE setSwipeAngle
argument_list|)
name|Q_PRIVATE_PROPERTY
argument_list|(
argument|QSwipeGesture::d_func()
argument_list|,
argument|qreal velocity READ velocity WRITE setVelocity
argument_list|)
name|public
operator|:
expr|enum
name|SwipeDirection
block|{
name|NoDirection
block|,
name|Left
block|,
name|Right
block|,
name|Up
block|,
name|Down
block|}
block|;
name|explicit
name|QSwipeGesture
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QSwipeGesture
argument_list|()
block|;
name|SwipeDirection
name|horizontalDirection
argument_list|()
specifier|const
block|;
name|SwipeDirection
name|verticalDirection
argument_list|()
specifier|const
block|;
name|qreal
name|swipeAngle
argument_list|()
specifier|const
block|;
name|void
name|setSwipeAngle
argument_list|(
argument|qreal value
argument_list|)
block|;
name|friend
name|class
name|QSwipeGestureRecognizer
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTapGesturePrivate
name|class
name|QTapGesturePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QTapGesture
range|:
name|public
name|QGesture
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QTapGesture
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QPointF position READ position WRITE setPosition
argument_list|)
name|public
operator|:
name|explicit
name|QTapGesture
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QTapGesture
argument_list|()
block|;
name|QPointF
name|position
argument_list|()
specifier|const
block|;
name|void
name|setPosition
argument_list|(
specifier|const
name|QPointF
operator|&
name|pos
argument_list|)
block|;
name|friend
name|class
name|QTapGestureRecognizer
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTapAndHoldGesturePrivate
name|class
name|QTapAndHoldGesturePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QTapAndHoldGesture
range|:
name|public
name|QGesture
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QTapAndHoldGesture
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QPointF position READ position WRITE setPosition
argument_list|)
name|public
operator|:
name|explicit
name|QTapAndHoldGesture
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QTapAndHoldGesture
argument_list|()
block|;
name|QPointF
name|position
argument_list|()
specifier|const
block|;
name|void
name|setPosition
argument_list|(
specifier|const
name|QPointF
operator|&
name|pos
argument_list|)
block|;
specifier|static
name|void
name|setTimeout
argument_list|(
argument|int msecs
argument_list|)
block|;
specifier|static
name|int
name|timeout
argument_list|()
block|;
name|friend
name|class
name|QTapAndHoldGestureRecognizer
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QGesture
name|class
name|QGesture
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QGestureEventPrivate
name|class
name|QGestureEventPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QGestureEvent
range|:
name|public
name|QEvent
block|{
name|public
operator|:
name|explicit
name|QGestureEvent
argument_list|(
specifier|const
name|QList
operator|<
name|QGesture
operator|*
operator|>
operator|&
name|gestures
argument_list|)
block|;
operator|~
name|QGestureEvent
argument_list|()
block|;
name|QList
operator|<
name|QGesture
operator|*
operator|>
name|gestures
argument_list|()
specifier|const
block|;
name|QGesture
operator|*
name|gesture
argument_list|(
argument|Qt::GestureType type
argument_list|)
specifier|const
block|;
name|QList
operator|<
name|QGesture
operator|*
operator|>
name|activeGestures
argument_list|()
specifier|const
block|;
name|QList
operator|<
name|QGesture
operator|*
operator|>
name|canceledGestures
argument_list|()
specifier|const
block|;
name|using
name|QEvent
operator|::
name|setAccepted
block|;
name|using
name|QEvent
operator|::
name|isAccepted
block|;
name|using
name|QEvent
operator|::
name|accept
block|;
name|using
name|QEvent
operator|::
name|ignore
block|;
name|void
name|setAccepted
argument_list|(
name|QGesture
operator|*
argument_list|,
name|bool
argument_list|)
block|;
name|void
name|accept
argument_list|(
name|QGesture
operator|*
argument_list|)
block|;
name|void
name|ignore
argument_list|(
name|QGesture
operator|*
argument_list|)
block|;
name|bool
name|isAccepted
argument_list|(
argument|QGesture *
argument_list|)
specifier|const
block|;
name|void
name|setAccepted
argument_list|(
name|Qt
operator|::
name|GestureType
argument_list|,
name|bool
argument_list|)
block|;
name|void
name|accept
argument_list|(
name|Qt
operator|::
name|GestureType
argument_list|)
block|;
name|void
name|ignore
argument_list|(
name|Qt
operator|::
name|GestureType
argument_list|)
block|;
name|bool
name|isAccepted
argument_list|(
argument|Qt::GestureType
argument_list|)
specifier|const
block|;
name|void
name|setWidget
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
block|;
name|QWidget
operator|*
name|widget
argument_list|()
specifier|const
block|;
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
name|QPointF
name|mapToGraphicsScene
argument_list|(
argument|const QPointF&gesturePoint
argument_list|)
specifier|const
block|;
endif|#
directive|endif
name|private
operator|:
name|QList
operator|<
name|QGesture
operator|*
operator|>
name|m_gestures
block|;
name|QWidget
operator|*
name|m_widget
block|;
name|QMap
operator|<
name|Qt
operator|::
name|GestureType
block|,
name|bool
operator|>
name|m_accepted
block|;
name|QMap
operator|<
name|Qt
operator|::
name|GestureType
block|,
name|QWidget
operator|*
operator|>
name|m_targetWidgets
block|;
name|friend
name|class
name|QApplication
block|;
name|friend
name|class
name|QGestureManager
block|; }
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_WIDGETS_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QGesture
operator|*
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_WIDGETS_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QGestureEvent
operator|*
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
argument_list|(
name|QGesture
operator|::
name|GestureCancelPolicy
argument_list|)
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_GESTURES
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QGESTURE_H
end_comment
end_unit
