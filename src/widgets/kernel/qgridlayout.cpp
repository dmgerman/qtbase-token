begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgridlayout.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qlist.h"
end_include
begin_include
include|#
directive|include
file|"qsizepolicy.h"
end_include
begin_include
include|#
directive|include
file|"qvector.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|"qlayoutengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qlayout_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_struct
DECL|struct|QGridLayoutSizeTriple
struct|struct
name|QGridLayoutSizeTriple
block|{
DECL|member|minS
name|QSize
name|minS
decl_stmt|;
DECL|member|hint
name|QSize
name|hint
decl_stmt|;
DECL|member|maxS
name|QSize
name|maxS
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|/*   Three internal classes related to QGridLayout: (1) QGridBox is a   QLayoutItem with (row, column) information and (torow, tocolumn) information; (3) QGridLayoutData is   the internal representation of a QGridLayout. */
end_comment
begin_class
DECL|class|QGridBox
class|class
name|QGridBox
block|{
public|public:
DECL|function|QGridBox
name|QGridBox
parameter_list|(
name|QLayoutItem
modifier|*
name|lit
parameter_list|)
block|{
name|item_
operator|=
name|lit
expr_stmt|;
block|}
DECL|function|QGridBox
name|QGridBox
parameter_list|(
specifier|const
name|QLayout
modifier|*
name|l
parameter_list|,
name|QWidget
modifier|*
name|wid
parameter_list|)
block|{
name|item_
operator|=
name|QLayoutPrivate
operator|::
name|createWidgetItem
argument_list|(
name|l
argument_list|,
name|wid
argument_list|)
expr_stmt|;
block|}
DECL|function|~QGridBox
name|~
name|QGridBox
parameter_list|()
block|{
operator|delete
name|item_
expr_stmt|;
block|}
DECL|function|sizeHint
name|QSize
name|sizeHint
parameter_list|()
specifier|const
block|{
return|return
name|item_
operator|->
name|sizeHint
argument_list|()
return|;
block|}
DECL|function|minimumSize
name|QSize
name|minimumSize
parameter_list|()
specifier|const
block|{
return|return
name|item_
operator|->
name|minimumSize
argument_list|()
return|;
block|}
DECL|function|maximumSize
name|QSize
name|maximumSize
parameter_list|()
specifier|const
block|{
return|return
name|item_
operator|->
name|maximumSize
argument_list|()
return|;
block|}
DECL|function|expandingDirections
name|Qt
operator|::
name|Orientations
name|expandingDirections
parameter_list|()
specifier|const
block|{
return|return
name|item_
operator|->
name|expandingDirections
argument_list|()
return|;
block|}
DECL|function|isEmpty
name|bool
name|isEmpty
parameter_list|()
specifier|const
block|{
return|return
name|item_
operator|->
name|isEmpty
argument_list|()
return|;
block|}
DECL|function|hasHeightForWidth
name|bool
name|hasHeightForWidth
parameter_list|()
specifier|const
block|{
return|return
name|item_
operator|->
name|hasHeightForWidth
argument_list|()
return|;
block|}
DECL|function|heightForWidth
name|int
name|heightForWidth
parameter_list|(
name|int
name|w
parameter_list|)
specifier|const
block|{
return|return
name|item_
operator|->
name|heightForWidth
argument_list|(
name|w
argument_list|)
return|;
block|}
DECL|function|setAlignment
name|void
name|setAlignment
parameter_list|(
name|Qt
operator|::
name|Alignment
name|a
parameter_list|)
block|{
name|item_
operator|->
name|setAlignment
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
DECL|function|setGeometry
name|void
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|item_
operator|->
name|setGeometry
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
DECL|function|alignment
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|()
specifier|const
block|{
return|return
name|item_
operator|->
name|alignment
argument_list|()
return|;
block|}
DECL|function|item
name|QLayoutItem
modifier|*
name|item
parameter_list|()
block|{
return|return
name|item_
return|;
block|}
DECL|function|setItem
name|void
name|setItem
parameter_list|(
name|QLayoutItem
modifier|*
name|newitem
parameter_list|)
block|{
name|item_
operator|=
name|newitem
expr_stmt|;
block|}
DECL|function|takeItem
name|QLayoutItem
modifier|*
name|takeItem
parameter_list|()
block|{
name|QLayoutItem
modifier|*
name|i
init|=
name|item_
decl_stmt|;
name|item_
operator|=
literal|0
expr_stmt|;
return|return
name|i
return|;
block|}
DECL|function|hStretch
name|int
name|hStretch
parameter_list|()
block|{
return|return
name|item_
operator|->
name|widget
argument_list|()
condition|?
name|item_
operator|->
name|widget
argument_list|()
operator|->
name|sizePolicy
argument_list|()
operator|.
name|horizontalStretch
argument_list|()
else|:
literal|0
return|;
block|}
DECL|function|vStretch
name|int
name|vStretch
parameter_list|()
block|{
return|return
name|item_
operator|->
name|widget
argument_list|()
condition|?
name|item_
operator|->
name|widget
argument_list|()
operator|->
name|sizePolicy
argument_list|()
operator|.
name|verticalStretch
argument_list|()
else|:
literal|0
return|;
block|}
private|private:
friend|friend
class_decl|class
name|QGridLayoutPrivate
class_decl|;
friend|friend
class_decl|class
name|QGridLayout
class_decl|;
DECL|function|toRow
specifier|inline
name|int
name|toRow
parameter_list|(
name|int
name|rr
parameter_list|)
specifier|const
block|{
return|return
name|torow
operator|>=
literal|0
condition|?
name|torow
else|:
name|rr
operator|-
literal|1
return|;
block|}
DECL|function|toCol
specifier|inline
name|int
name|toCol
parameter_list|(
name|int
name|cc
parameter_list|)
specifier|const
block|{
return|return
name|tocol
operator|>=
literal|0
condition|?
name|tocol
else|:
name|cc
operator|-
literal|1
return|;
block|}
DECL|member|item_
name|QLayoutItem
modifier|*
name|item_
decl_stmt|;
DECL|member|row
DECL|member|col
name|int
name|row
decl_stmt|,
name|col
decl_stmt|;
DECL|member|torow
DECL|member|tocol
name|int
name|torow
decl_stmt|,
name|tocol
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QGridLayoutPrivate
class|class
name|QGridLayoutPrivate
super|:
specifier|public
name|QLayoutPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QGridLayout
parameter_list|)
specifier|public
private|:
name|QGridLayoutPrivate
parameter_list|()
constructor_decl|;
name|void
name|add
parameter_list|(
name|QGridBox
modifier|*
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
function_decl|;
name|void
name|add
parameter_list|(
name|QGridBox
modifier|*
parameter_list|,
name|int
name|row1
parameter_list|,
name|int
name|row2
parameter_list|,
name|int
name|col1
parameter_list|,
name|int
name|col2
parameter_list|)
function_decl|;
name|QSize
name|sizeHint
parameter_list|(
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
specifier|const
function_decl|;
name|QSize
name|minimumSize
parameter_list|(
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
specifier|const
function_decl|;
name|QSize
name|maximumSize
parameter_list|(
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
specifier|const
function_decl|;
name|Qt
operator|::
name|Orientations
name|expandingDirections
parameter_list|(
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
specifier|const
function_decl|;
name|void
name|distribute
parameter_list|(
name|QRect
name|rect
parameter_list|,
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
function_decl|;
DECL|function|numRows
specifier|inline
name|int
name|numRows
parameter_list|()
specifier|const
block|{
return|return
name|rr
return|;
block|}
DECL|function|numCols
specifier|inline
name|int
name|numCols
parameter_list|()
specifier|const
block|{
return|return
name|cc
return|;
block|}
DECL|function|expand
specifier|inline
name|void
name|expand
parameter_list|(
name|int
name|rows
parameter_list|,
name|int
name|cols
parameter_list|)
block|{
name|setSize
argument_list|(
name|qMax
argument_list|(
name|rows
argument_list|,
name|rr
argument_list|)
argument_list|,
name|qMax
argument_list|(
name|cols
argument_list|,
name|cc
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setRowStretch
specifier|inline
name|void
name|setRowStretch
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|s
parameter_list|)
block|{
name|expand
argument_list|(
name|r
operator|+
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rStretch
index|[
name|r
index|]
operator|=
name|s
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
DECL|function|setColStretch
specifier|inline
name|void
name|setColStretch
parameter_list|(
name|int
name|c
parameter_list|,
name|int
name|s
parameter_list|)
block|{
name|expand
argument_list|(
literal|0
argument_list|,
name|c
operator|+
literal|1
argument_list|)
expr_stmt|;
name|cStretch
index|[
name|c
index|]
operator|=
name|s
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
DECL|function|rowStretch
specifier|inline
name|int
name|rowStretch
parameter_list|(
name|int
name|r
parameter_list|)
specifier|const
block|{
return|return
name|rStretch
operator|.
name|at
argument_list|(
name|r
argument_list|)
return|;
block|}
DECL|function|colStretch
specifier|inline
name|int
name|colStretch
parameter_list|(
name|int
name|c
parameter_list|)
specifier|const
block|{
return|return
name|cStretch
operator|.
name|at
argument_list|(
name|c
argument_list|)
return|;
block|}
DECL|function|setRowMinimumHeight
specifier|inline
name|void
name|setRowMinimumHeight
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|s
parameter_list|)
block|{
name|expand
argument_list|(
name|r
operator|+
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rMinHeights
index|[
name|r
index|]
operator|=
name|s
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
DECL|function|setColumnMinimumWidth
specifier|inline
name|void
name|setColumnMinimumWidth
parameter_list|(
name|int
name|c
parameter_list|,
name|int
name|s
parameter_list|)
block|{
name|expand
argument_list|(
literal|0
argument_list|,
name|c
operator|+
literal|1
argument_list|)
expr_stmt|;
name|cMinWidths
index|[
name|c
index|]
operator|=
name|s
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
DECL|function|rowSpacing
specifier|inline
name|int
name|rowSpacing
parameter_list|(
name|int
name|r
parameter_list|)
specifier|const
block|{
return|return
name|rMinHeights
operator|.
name|at
argument_list|(
name|r
argument_list|)
return|;
block|}
DECL|function|colSpacing
specifier|inline
name|int
name|colSpacing
parameter_list|(
name|int
name|c
parameter_list|)
specifier|const
block|{
return|return
name|cMinWidths
operator|.
name|at
argument_list|(
name|c
argument_list|)
return|;
block|}
DECL|function|setReversed
specifier|inline
name|void
name|setReversed
parameter_list|(
name|bool
name|r
parameter_list|,
name|bool
name|c
parameter_list|)
block|{
name|hReversed
operator|=
name|c
expr_stmt|;
name|vReversed
operator|=
name|r
expr_stmt|;
block|}
DECL|function|horReversed
specifier|inline
name|bool
name|horReversed
parameter_list|()
specifier|const
block|{
return|return
name|hReversed
return|;
block|}
DECL|function|verReversed
specifier|inline
name|bool
name|verReversed
parameter_list|()
specifier|const
block|{
return|return
name|vReversed
return|;
block|}
DECL|function|setDirty
specifier|inline
name|void
name|setDirty
parameter_list|()
block|{
name|needRecalc
operator|=
literal|true
expr_stmt|;
name|hfw_width
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|function|isDirty
specifier|inline
name|bool
name|isDirty
parameter_list|()
specifier|const
block|{
return|return
name|needRecalc
return|;
block|}
name|bool
name|hasHeightForWidth
parameter_list|(
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
function_decl|;
name|int
name|heightForWidth
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
function_decl|;
name|int
name|minimumHeightForWidth
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
function_decl|;
DECL|function|getNextPos
specifier|inline
name|void
name|getNextPos
parameter_list|(
name|int
modifier|&
name|row
parameter_list|,
name|int
modifier|&
name|col
parameter_list|)
block|{
name|row
operator|=
name|nextR
expr_stmt|;
name|col
operator|=
name|nextC
expr_stmt|;
block|}
DECL|function|count
specifier|inline
name|int
name|count
parameter_list|()
specifier|const
block|{
return|return
name|things
operator|.
name|count
argument_list|()
return|;
block|}
name|QRect
name|cellRect
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
specifier|const
function_decl|;
DECL|function|itemAt
specifier|inline
name|QLayoutItem
modifier|*
name|itemAt
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|<
name|things
operator|.
name|count
argument_list|()
condition|)
return|return
name|things
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|->
name|item
argument_list|()
return|;
else|else
return|return
literal|0
return|;
block|}
DECL|function|takeAt
specifier|inline
name|QLayoutItem
modifier|*
name|takeAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
name|things
operator|.
name|count
argument_list|()
condition|)
block|{
if|if
condition|(
name|QGridBox
modifier|*
name|b
init|=
name|things
operator|.
name|takeAt
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|QLayoutItem
modifier|*
name|item
init|=
name|b
operator|->
name|takeItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|QLayout
modifier|*
name|l
init|=
name|item
operator|->
name|layout
argument_list|()
condition|)
block|{
comment|// sanity check in case the user passed something weird to QObject::setParent()
if|if
condition|(
name|l
operator|->
name|parent
argument_list|()
operator|==
name|q
condition|)
name|l
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
operator|delete
name|b
expr_stmt|;
return|return
name|item
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
name|QLayoutItem
modifier|*
name|replaceAt
parameter_list|(
name|int
name|index
parameter_list|,
name|QLayoutItem
modifier|*
name|newitem
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
operator|!
name|newitem
condition|)
return|return
literal|0
return|;
name|QLayoutItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
name|QGridBox
modifier|*
name|b
init|=
name|things
operator|.
name|value
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|item
operator|=
name|b
operator|->
name|takeItem
argument_list|()
expr_stmt|;
name|b
operator|->
name|setItem
argument_list|(
name|newitem
argument_list|)
expr_stmt|;
block|}
return|return
name|item
return|;
block|}
DECL|function|getItemPosition
name|void
name|getItemPosition
parameter_list|(
name|int
name|index
parameter_list|,
name|int
modifier|*
name|row
parameter_list|,
name|int
modifier|*
name|column
parameter_list|,
name|int
modifier|*
name|rowSpan
parameter_list|,
name|int
modifier|*
name|columnSpan
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|<
name|things
operator|.
name|count
argument_list|()
condition|)
block|{
specifier|const
name|QGridBox
modifier|*
name|b
init|=
name|things
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|int
name|toRow
init|=
name|b
operator|->
name|toRow
argument_list|(
name|rr
argument_list|)
decl_stmt|;
name|int
name|toCol
init|=
name|b
operator|->
name|toCol
argument_list|(
name|cc
argument_list|)
decl_stmt|;
operator|*
name|row
operator|=
name|b
operator|->
name|row
expr_stmt|;
operator|*
name|column
operator|=
name|b
operator|->
name|col
expr_stmt|;
operator|*
name|rowSpan
operator|=
name|toRow
operator|-
operator|*
name|row
operator|+
literal|1
expr_stmt|;
operator|*
name|columnSpan
operator|=
name|toCol
operator|-
operator|*
name|column
operator|+
literal|1
expr_stmt|;
block|}
block|}
name|void
name|deleteAll
parameter_list|()
function_decl|;
private|private:
name|void
name|setNextPosAfter
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|c
parameter_list|)
function_decl|;
name|void
name|recalcHFW
parameter_list|(
name|int
name|w
parameter_list|)
function_decl|;
name|void
name|addHfwData
parameter_list|(
name|QGridBox
modifier|*
name|box
parameter_list|,
name|int
name|width
parameter_list|)
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|QSize
name|findSize
argument_list|(
name|int
name|QLayoutStruct
operator|::
modifier|*
argument_list|,
name|int
name|hSpacing
argument_list|,
name|int
name|vSpacing
argument_list|)
decl|const
decl_stmt|;
name|void
name|addData
parameter_list|(
name|QGridBox
modifier|*
name|b
parameter_list|,
specifier|const
name|QGridLayoutSizeTriple
modifier|&
name|sizes
parameter_list|,
name|bool
name|r
parameter_list|,
name|bool
name|c
parameter_list|)
function_decl|;
name|void
name|setSize
parameter_list|(
name|int
name|rows
parameter_list|,
name|int
name|cols
parameter_list|)
function_decl|;
name|void
name|setupSpacings
parameter_list|(
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
modifier|&
name|chain
parameter_list|,
name|QGridBox
modifier|*
name|grid
index|[]
parameter_list|,
name|int
name|fixedSpacing
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
function_decl|;
name|void
name|setupLayoutData
parameter_list|(
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
function_decl|;
name|void
name|setupHfwLayoutData
parameter_list|()
function_decl|;
name|void
name|effectiveMargins
parameter_list|(
name|int
modifier|*
name|left
parameter_list|,
name|int
modifier|*
name|top
parameter_list|,
name|int
modifier|*
name|right
parameter_list|,
name|int
modifier|*
name|bottom
parameter_list|)
specifier|const
function_decl|;
DECL|member|rr
name|int
name|rr
decl_stmt|;
DECL|member|cc
name|int
name|cc
decl_stmt|;
DECL|member|rowData
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
name|rowData
decl_stmt|;
DECL|member|colData
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
name|colData
decl_stmt|;
DECL|member|hfwData
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
modifier|*
name|hfwData
decl_stmt|;
DECL|member|rStretch
name|QVector
argument_list|<
name|int
argument_list|>
name|rStretch
decl_stmt|;
DECL|member|cStretch
name|QVector
argument_list|<
name|int
argument_list|>
name|cStretch
decl_stmt|;
DECL|member|rMinHeights
name|QVector
argument_list|<
name|int
argument_list|>
name|rMinHeights
decl_stmt|;
DECL|member|cMinWidths
name|QVector
argument_list|<
name|int
argument_list|>
name|cMinWidths
decl_stmt|;
DECL|member|things
name|QList
argument_list|<
name|QGridBox
modifier|*
argument_list|>
name|things
decl_stmt|;
DECL|member|hfw_width
name|int
name|hfw_width
decl_stmt|;
DECL|member|hfw_height
name|int
name|hfw_height
decl_stmt|;
DECL|member|hfw_minheight
name|int
name|hfw_minheight
decl_stmt|;
DECL|member|nextR
name|int
name|nextR
decl_stmt|;
DECL|member|nextC
name|int
name|nextC
decl_stmt|;
DECL|member|horizontalSpacing
name|int
name|horizontalSpacing
decl_stmt|;
DECL|member|verticalSpacing
name|int
name|verticalSpacing
decl_stmt|;
DECL|member|leftMargin
name|int
name|leftMargin
decl_stmt|;
DECL|member|topMargin
name|int
name|topMargin
decl_stmt|;
DECL|member|rightMargin
name|int
name|rightMargin
decl_stmt|;
DECL|member|bottomMargin
name|int
name|bottomMargin
decl_stmt|;
name|uint
name|hReversed
range|:
literal|1
decl_stmt|;
name|uint
name|vReversed
range|:
literal|1
decl_stmt|;
name|uint
name|needRecalc
range|:
literal|1
decl_stmt|;
name|uint
name|has_hfw
range|:
literal|1
decl_stmt|;
name|uint
name|addVertical
range|:
literal|1
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|effectiveMargins
name|void
name|QGridLayoutPrivate
operator|::
name|effectiveMargins
parameter_list|(
name|int
modifier|*
name|left
parameter_list|,
name|int
modifier|*
name|top
parameter_list|,
name|int
modifier|*
name|right
parameter_list|,
name|int
modifier|*
name|bottom
parameter_list|)
specifier|const
block|{
name|int
name|l
init|=
name|leftMargin
decl_stmt|;
name|int
name|t
init|=
name|topMargin
decl_stmt|;
name|int
name|r
init|=
name|rightMargin
decl_stmt|;
name|int
name|b
init|=
name|bottomMargin
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|int
name|leftMost
init|=
name|INT_MAX
decl_stmt|;
name|int
name|topMost
init|=
name|INT_MAX
decl_stmt|;
name|int
name|rightMost
init|=
literal|0
decl_stmt|;
name|int
name|bottomMost
init|=
literal|0
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|n
init|=
name|things
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|QGridBox
modifier|*
name|box
init|=
name|things
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QLayoutItem
modifier|*
name|itm
init|=
name|box
operator|->
name|item
argument_list|()
decl_stmt|;
name|w
operator|=
name|itm
operator|->
name|widget
argument_list|()
expr_stmt|;
if|if
condition|(
name|w
condition|)
block|{
name|bool
name|visualHReversed
init|=
name|hReversed
operator|!=
operator|(
name|w
operator|->
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
decl_stmt|;
name|QRect
name|lir
init|=
name|itm
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QRect
name|wr
init|=
name|w
operator|->
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|box
operator|->
name|col
operator|<=
name|leftMost
condition|)
block|{
if|if
condition|(
name|box
operator|->
name|col
operator|<
name|leftMost
condition|)
block|{
comment|// we found an item even closer to the margin, discard.
name|leftMost
operator|=
name|box
operator|->
name|col
expr_stmt|;
if|if
condition|(
name|visualHReversed
condition|)
name|r
operator|=
name|rightMargin
expr_stmt|;
else|else
name|l
operator|=
name|leftMargin
expr_stmt|;
block|}
if|if
condition|(
name|visualHReversed
condition|)
block|{
name|r
operator|=
name|qMax
argument_list|(
name|r
argument_list|,
name|wr
operator|.
name|right
argument_list|()
operator|-
name|lir
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l
operator|=
name|qMax
argument_list|(
name|l
argument_list|,
name|lir
operator|.
name|left
argument_list|()
operator|-
name|wr
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|box
operator|->
name|row
operator|<=
name|topMost
condition|)
block|{
if|if
condition|(
name|box
operator|->
name|row
operator|<
name|topMost
condition|)
block|{
comment|// we found an item even closer to the margin, discard.
name|topMost
operator|=
name|box
operator|->
name|row
expr_stmt|;
if|if
condition|(
name|vReversed
condition|)
name|b
operator|=
name|bottomMargin
expr_stmt|;
else|else
name|t
operator|=
name|topMargin
expr_stmt|;
block|}
if|if
condition|(
name|vReversed
condition|)
name|b
operator|=
name|qMax
argument_list|(
name|b
argument_list|,
name|wr
operator|.
name|bottom
argument_list|()
operator|-
name|lir
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|t
operator|=
name|qMax
argument_list|(
name|t
argument_list|,
name|lir
operator|.
name|top
argument_list|()
operator|-
name|wr
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|box
operator|->
name|toCol
argument_list|(
name|cc
argument_list|)
operator|>=
name|rightMost
condition|)
block|{
if|if
condition|(
name|box
operator|->
name|toCol
argument_list|(
name|cc
argument_list|)
operator|>
name|rightMost
condition|)
block|{
comment|// we found an item even closer to the margin, discard.
name|rightMost
operator|=
name|box
operator|->
name|toCol
argument_list|(
name|cc
argument_list|)
expr_stmt|;
if|if
condition|(
name|visualHReversed
condition|)
name|l
operator|=
name|leftMargin
expr_stmt|;
else|else
name|r
operator|=
name|rightMargin
expr_stmt|;
block|}
if|if
condition|(
name|visualHReversed
condition|)
block|{
name|l
operator|=
name|qMax
argument_list|(
name|l
argument_list|,
name|lir
operator|.
name|left
argument_list|()
operator|-
name|wr
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|qMax
argument_list|(
name|r
argument_list|,
name|wr
operator|.
name|right
argument_list|()
operator|-
name|lir
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|box
operator|->
name|toRow
argument_list|(
name|rr
argument_list|)
operator|>=
name|bottomMost
condition|)
block|{
if|if
condition|(
name|box
operator|->
name|toRow
argument_list|(
name|rr
argument_list|)
operator|>
name|bottomMost
condition|)
block|{
comment|// we found an item even closer to the margin, discard.
name|bottomMost
operator|=
name|box
operator|->
name|toRow
argument_list|(
name|rr
argument_list|)
expr_stmt|;
if|if
condition|(
name|vReversed
condition|)
name|t
operator|=
name|topMargin
expr_stmt|;
else|else
name|b
operator|=
name|bottomMargin
expr_stmt|;
block|}
if|if
condition|(
name|vReversed
condition|)
name|t
operator|=
name|qMax
argument_list|(
name|t
argument_list|,
name|lir
operator|.
name|top
argument_list|()
operator|-
name|wr
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|b
operator|=
name|qMax
argument_list|(
name|b
argument_list|,
name|wr
operator|.
name|bottom
argument_list|()
operator|-
name|lir
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|left
condition|)
operator|*
name|left
operator|=
name|l
expr_stmt|;
if|if
condition|(
name|top
condition|)
operator|*
name|top
operator|=
name|t
expr_stmt|;
if|if
condition|(
name|right
condition|)
operator|*
name|right
operator|=
name|r
expr_stmt|;
if|if
condition|(
name|bottom
condition|)
operator|*
name|bottom
operator|=
name|b
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QGridLayoutPrivate
name|QGridLayoutPrivate
operator|::
name|QGridLayoutPrivate
parameter_list|()
block|{
name|addVertical
operator|=
literal|false
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
name|rr
operator|=
name|cc
operator|=
literal|0
expr_stmt|;
name|nextR
operator|=
name|nextC
operator|=
literal|0
expr_stmt|;
name|hfwData
operator|=
literal|0
expr_stmt|;
name|hReversed
operator|=
literal|false
expr_stmt|;
name|vReversed
operator|=
literal|false
expr_stmt|;
name|horizontalSpacing
operator|=
operator|-
literal|1
expr_stmt|;
name|verticalSpacing
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_constructor
begin_if
if|#
directive|if
literal|0
end_if
begin_endif
unit|QGridLayoutPrivate::QGridLayoutPrivate(int nRows, int nCols)     : rowData(0), colData(0) {     init();     if (nRows< 0) {         nRows = 1;         addVertical = false;     }     if (nCols< 0) {         nCols = 1;         addVertical = true;     }     setSize(nRows, nCols); }
endif|#
directive|endif
end_endif
begin_function
DECL|function|deleteAll
name|void
name|QGridLayoutPrivate
operator|::
name|deleteAll
parameter_list|()
block|{
while|while
condition|(
operator|!
name|things
operator|.
name|isEmpty
argument_list|()
condition|)
operator|delete
name|things
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
operator|delete
name|hfwData
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasHeightForWidth
name|bool
name|QGridLayoutPrivate
operator|::
name|hasHeightForWidth
parameter_list|(
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
block|{
name|setupLayoutData
argument_list|(
name|hSpacing
argument_list|,
name|vSpacing
argument_list|)
expr_stmt|;
return|return
name|has_hfw
return|;
block|}
end_function
begin_comment
comment|/*   Assumes that setupLayoutData() has been called, and that   qGeomCalc() has filled in colData with appropriate values. */
end_comment
begin_function
DECL|function|recalcHFW
name|void
name|QGridLayoutPrivate
operator|::
name|recalcHFW
parameter_list|(
name|int
name|w
parameter_list|)
block|{
comment|/*       Go through all children, using colData and heightForWidth()       and put the results in hfwData.     */
if|if
condition|(
operator|!
name|hfwData
condition|)
name|hfwData
operator|=
operator|new
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
argument_list|(
name|rr
argument_list|)
expr_stmt|;
name|setupHfwLayoutData
argument_list|()
expr_stmt|;
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
modifier|&
name|rData
init|=
operator|*
name|hfwData
decl_stmt|;
name|int
name|h
init|=
literal|0
decl_stmt|;
name|int
name|mh
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rr
condition|;
name|r
operator|++
control|)
block|{
name|int
name|spacing
init|=
name|rData
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|.
name|spacing
decl_stmt|;
name|h
operator|+=
name|rData
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|.
name|sizeHint
operator|+
name|spacing
expr_stmt|;
name|mh
operator|+=
name|rData
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|.
name|minimumSize
operator|+
name|spacing
expr_stmt|;
block|}
name|hfw_width
operator|=
name|w
expr_stmt|;
name|hfw_height
operator|=
name|qMin
argument_list|(
name|QLAYOUTSIZE_MAX
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|hfw_minheight
operator|=
name|qMin
argument_list|(
name|QLAYOUTSIZE_MAX
argument_list|,
name|mh
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|heightForWidth
name|int
name|QGridLayoutPrivate
operator|::
name|heightForWidth
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
block|{
name|setupLayoutData
argument_list|(
name|hSpacing
argument_list|,
name|vSpacing
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|has_hfw
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|effectiveMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
name|int
name|hMargins
init|=
name|left
operator|+
name|right
decl_stmt|;
if|if
condition|(
name|w
operator|-
name|hMargins
operator|!=
name|hfw_width
condition|)
block|{
name|qGeomCalc
argument_list|(
name|colData
argument_list|,
literal|0
argument_list|,
name|cc
argument_list|,
literal|0
argument_list|,
name|w
operator|-
name|hMargins
argument_list|)
expr_stmt|;
name|recalcHFW
argument_list|(
name|w
operator|-
name|hMargins
argument_list|)
expr_stmt|;
block|}
return|return
name|hfw_height
operator|+
name|top
operator|+
name|bottom
return|;
block|}
end_function
begin_function
DECL|function|minimumHeightForWidth
name|int
name|QGridLayoutPrivate
operator|::
name|minimumHeightForWidth
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
block|{
operator|(
name|void
operator|)
name|heightForWidth
argument_list|(
name|w
argument_list|,
name|hSpacing
argument_list|,
name|vSpacing
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|has_hfw
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|top
decl_stmt|,
name|bottom
decl_stmt|;
name|effectiveMargins
argument_list|(
literal|0
argument_list|,
operator|&
name|top
argument_list|,
literal|0
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
return|return
name|hfw_minheight
operator|+
name|top
operator|+
name|bottom
return|;
block|}
end_function
begin_function
DECL|function|findSize
name|QSize
name|QGridLayoutPrivate
operator|::
name|findSize
parameter_list|(
name|int
name|QLayoutStruct
operator|::
modifier|*
name|size
parameter_list|,
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
specifier|const
block|{
name|QGridLayoutPrivate
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QGridLayoutPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|that
operator|->
name|setupLayoutData
argument_list|(
name|hSpacing
argument_list|,
name|vSpacing
argument_list|)
expr_stmt|;
name|int
name|w
init|=
literal|0
decl_stmt|;
name|int
name|h
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rr
condition|;
name|r
operator|++
control|)
name|h
operator|+=
name|rowData
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|.*
name|size
operator|+
name|rowData
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|.
name|spacing
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|cc
condition|;
name|c
operator|++
control|)
name|w
operator|+=
name|colData
operator|.
name|at
argument_list|(
name|c
argument_list|)
operator|.*
name|size
operator|+
name|colData
operator|.
name|at
argument_list|(
name|c
argument_list|)
operator|.
name|spacing
expr_stmt|;
name|w
operator|=
name|qMin
argument_list|(
name|QLAYOUTSIZE_MAX
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMin
argument_list|(
name|QLAYOUTSIZE_MAX
argument_list|,
name|h
argument_list|)
expr_stmt|;
return|return
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|expandingDirections
name|Qt
operator|::
name|Orientations
name|QGridLayoutPrivate
operator|::
name|expandingDirections
parameter_list|(
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
specifier|const
block|{
name|QGridLayoutPrivate
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QGridLayoutPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|that
operator|->
name|setupLayoutData
argument_list|(
name|hSpacing
argument_list|,
name|vSpacing
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|Orientations
name|ret
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rr
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
name|rowData
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|.
name|expansive
condition|)
block|{
name|ret
operator||=
name|Qt
operator|::
name|Vertical
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|cc
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|colData
operator|.
name|at
argument_list|(
name|c
argument_list|)
operator|.
name|expansive
condition|)
block|{
name|ret
operator||=
name|Qt
operator|::
name|Horizontal
expr_stmt|;
break|break;
block|}
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSize
name|QGridLayoutPrivate
operator|::
name|sizeHint
parameter_list|(
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
specifier|const
block|{
return|return
name|findSize
argument_list|(
operator|&
name|QLayoutStruct
operator|::
name|sizeHint
argument_list|,
name|hSpacing
argument_list|,
name|vSpacing
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|maximumSize
name|QSize
name|QGridLayoutPrivate
operator|::
name|maximumSize
parameter_list|(
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
specifier|const
block|{
return|return
name|findSize
argument_list|(
operator|&
name|QLayoutStruct
operator|::
name|maximumSize
argument_list|,
name|hSpacing
argument_list|,
name|vSpacing
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|minimumSize
name|QSize
name|QGridLayoutPrivate
operator|::
name|minimumSize
parameter_list|(
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
specifier|const
block|{
return|return
name|findSize
argument_list|(
operator|&
name|QLayoutStruct
operator|::
name|minimumSize
argument_list|,
name|hSpacing
argument_list|,
name|vSpacing
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setSize
name|void
name|QGridLayoutPrivate
operator|::
name|setSize
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|c
parameter_list|)
block|{
if|if
condition|(
operator|(
name|int
operator|)
name|rowData
operator|.
name|size
argument_list|()
operator|<
name|r
condition|)
block|{
name|int
name|newR
init|=
name|qMax
argument_list|(
name|r
argument_list|,
name|rr
operator|*
literal|2
argument_list|)
decl_stmt|;
name|rowData
operator|.
name|resize
argument_list|(
name|newR
argument_list|)
expr_stmt|;
name|rStretch
operator|.
name|resize
argument_list|(
name|newR
argument_list|)
expr_stmt|;
name|rMinHeights
operator|.
name|resize
argument_list|(
name|newR
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|rr
init|;
name|i
operator|<
name|newR
condition|;
name|i
operator|++
control|)
block|{
name|rowData
index|[
name|i
index|]
operator|.
name|init
argument_list|()
expr_stmt|;
name|rowData
index|[
name|i
index|]
operator|.
name|maximumSize
operator|=
literal|0
expr_stmt|;
name|rowData
index|[
name|i
index|]
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
name|rowData
index|[
name|i
index|]
operator|.
name|size
operator|=
literal|0
expr_stmt|;
name|rStretch
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|rMinHeights
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|int
operator|)
name|colData
operator|.
name|size
argument_list|()
operator|<
name|c
condition|)
block|{
name|int
name|newC
init|=
name|qMax
argument_list|(
name|c
argument_list|,
name|cc
operator|*
literal|2
argument_list|)
decl_stmt|;
name|colData
operator|.
name|resize
argument_list|(
name|newC
argument_list|)
expr_stmt|;
name|cStretch
operator|.
name|resize
argument_list|(
name|newC
argument_list|)
expr_stmt|;
name|cMinWidths
operator|.
name|resize
argument_list|(
name|newC
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|cc
init|;
name|i
operator|<
name|newC
condition|;
name|i
operator|++
control|)
block|{
name|colData
index|[
name|i
index|]
operator|.
name|init
argument_list|()
expr_stmt|;
name|colData
index|[
name|i
index|]
operator|.
name|maximumSize
operator|=
literal|0
expr_stmt|;
name|colData
index|[
name|i
index|]
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
name|colData
index|[
name|i
index|]
operator|.
name|size
operator|=
literal|0
expr_stmt|;
name|cStretch
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|cMinWidths
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hfwData
operator|&&
operator|(
name|int
operator|)
name|hfwData
operator|->
name|size
argument_list|()
operator|<
name|r
condition|)
block|{
operator|delete
name|hfwData
expr_stmt|;
name|hfwData
operator|=
literal|0
expr_stmt|;
name|hfw_width
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|rr
operator|=
name|r
expr_stmt|;
name|cc
operator|=
name|c
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setNextPosAfter
name|void
name|QGridLayoutPrivate
operator|::
name|setNextPosAfter
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|addVertical
condition|)
block|{
if|if
condition|(
name|col
operator|>
name|nextC
operator|||
operator|(
name|col
operator|==
name|nextC
operator|&&
name|row
operator|>=
name|nextR
operator|)
condition|)
block|{
name|nextR
operator|=
name|row
operator|+
literal|1
expr_stmt|;
name|nextC
operator|=
name|col
expr_stmt|;
if|if
condition|(
name|nextR
operator|>=
name|rr
condition|)
block|{
name|nextR
operator|=
literal|0
expr_stmt|;
name|nextC
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|row
operator|>
name|nextR
operator|||
operator|(
name|row
operator|==
name|nextR
operator|&&
name|col
operator|>=
name|nextC
operator|)
condition|)
block|{
name|nextR
operator|=
name|row
expr_stmt|;
name|nextC
operator|=
name|col
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|nextC
operator|>=
name|cc
condition|)
block|{
name|nextC
operator|=
literal|0
expr_stmt|;
name|nextR
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|add
name|void
name|QGridLayoutPrivate
operator|::
name|add
parameter_list|(
name|QGridBox
modifier|*
name|box
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
name|expand
argument_list|(
name|row
operator|+
literal|1
argument_list|,
name|col
operator|+
literal|1
argument_list|)
expr_stmt|;
name|box
operator|->
name|row
operator|=
name|box
operator|->
name|torow
operator|=
name|row
expr_stmt|;
name|box
operator|->
name|col
operator|=
name|box
operator|->
name|tocol
operator|=
name|col
expr_stmt|;
name|things
operator|.
name|append
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
name|setNextPosAfter
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|add
name|void
name|QGridLayoutPrivate
operator|::
name|add
parameter_list|(
name|QGridBox
modifier|*
name|box
parameter_list|,
name|int
name|row1
parameter_list|,
name|int
name|row2
parameter_list|,
name|int
name|col1
parameter_list|,
name|int
name|col2
parameter_list|)
block|{
if|if
condition|(
name|row2
operator|>=
literal|0
operator|&&
name|row2
operator|<
name|row1
condition|)
name|qWarning
argument_list|(
literal|"QGridLayout: Multi-cell fromRow greater than toRow"
argument_list|)
expr_stmt|;
if|if
condition|(
name|col2
operator|>=
literal|0
operator|&&
name|col2
operator|<
name|col1
condition|)
name|qWarning
argument_list|(
literal|"QGridLayout: Multi-cell fromCol greater than toCol"
argument_list|)
expr_stmt|;
if|if
condition|(
name|row1
operator|==
name|row2
operator|&&
name|col1
operator|==
name|col2
condition|)
block|{
name|add
argument_list|(
name|box
argument_list|,
name|row1
argument_list|,
name|col1
argument_list|)
expr_stmt|;
return|return;
block|}
name|expand
argument_list|(
name|qMax
argument_list|(
name|row1
argument_list|,
name|row2
argument_list|)
operator|+
literal|1
argument_list|,
name|qMax
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|box
operator|->
name|row
operator|=
name|row1
expr_stmt|;
name|box
operator|->
name|col
operator|=
name|col1
expr_stmt|;
name|box
operator|->
name|torow
operator|=
name|row2
expr_stmt|;
name|box
operator|->
name|tocol
operator|=
name|col2
expr_stmt|;
name|things
operator|.
name|append
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
if|if
condition|(
name|col2
operator|<
literal|0
condition|)
name|col2
operator|=
name|cc
operator|-
literal|1
expr_stmt|;
name|setNextPosAfter
argument_list|(
name|row2
argument_list|,
name|col2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addData
name|void
name|QGridLayoutPrivate
operator|::
name|addData
parameter_list|(
name|QGridBox
modifier|*
name|box
parameter_list|,
specifier|const
name|QGridLayoutSizeTriple
modifier|&
name|sizes
parameter_list|,
name|bool
name|r
parameter_list|,
name|bool
name|c
parameter_list|)
block|{
specifier|const
name|QWidget
modifier|*
name|widget
init|=
name|box
operator|->
name|item
argument_list|()
operator|->
name|widget
argument_list|()
decl_stmt|;
if|if
condition|(
name|box
operator|->
name|isEmpty
argument_list|()
operator|&&
name|widget
condition|)
return|return;
if|if
condition|(
name|c
condition|)
block|{
name|QLayoutStruct
modifier|*
name|data
init|=
operator|&
name|colData
index|[
name|box
operator|->
name|col
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|cStretch
operator|.
name|at
argument_list|(
name|box
operator|->
name|col
argument_list|)
condition|)
name|data
operator|->
name|stretch
operator|=
name|qMax
argument_list|(
name|data
operator|->
name|stretch
argument_list|,
name|box
operator|->
name|hStretch
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|->
name|sizeHint
operator|=
name|qMax
argument_list|(
name|sizes
operator|.
name|hint
operator|.
name|width
argument_list|()
argument_list|,
name|data
operator|->
name|sizeHint
argument_list|)
expr_stmt|;
name|data
operator|->
name|minimumSize
operator|=
name|qMax
argument_list|(
name|sizes
operator|.
name|minS
operator|.
name|width
argument_list|()
argument_list|,
name|data
operator|->
name|minimumSize
argument_list|)
expr_stmt|;
name|qMaxExpCalc
argument_list|(
name|data
operator|->
name|maximumSize
argument_list|,
name|data
operator|->
name|expansive
argument_list|,
name|data
operator|->
name|empty
argument_list|,
name|sizes
operator|.
name|maxS
operator|.
name|width
argument_list|()
argument_list|,
name|box
operator|->
name|expandingDirections
argument_list|()
operator|&
name|Qt
operator|::
name|Horizontal
argument_list|,
name|box
operator|->
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
condition|)
block|{
name|QLayoutStruct
modifier|*
name|data
init|=
operator|&
name|rowData
index|[
name|box
operator|->
name|row
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|rStretch
operator|.
name|at
argument_list|(
name|box
operator|->
name|row
argument_list|)
condition|)
name|data
operator|->
name|stretch
operator|=
name|qMax
argument_list|(
name|data
operator|->
name|stretch
argument_list|,
name|box
operator|->
name|vStretch
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|->
name|sizeHint
operator|=
name|qMax
argument_list|(
name|sizes
operator|.
name|hint
operator|.
name|height
argument_list|()
argument_list|,
name|data
operator|->
name|sizeHint
argument_list|)
expr_stmt|;
name|data
operator|->
name|minimumSize
operator|=
name|qMax
argument_list|(
name|sizes
operator|.
name|minS
operator|.
name|height
argument_list|()
argument_list|,
name|data
operator|->
name|minimumSize
argument_list|)
expr_stmt|;
name|qMaxExpCalc
argument_list|(
name|data
operator|->
name|maximumSize
argument_list|,
name|data
operator|->
name|expansive
argument_list|,
name|data
operator|->
name|empty
argument_list|,
name|sizes
operator|.
name|maxS
operator|.
name|height
argument_list|()
argument_list|,
name|box
operator|->
name|expandingDirections
argument_list|()
operator|&
name|Qt
operator|::
name|Vertical
argument_list|,
name|box
operator|->
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|initEmptyMultiBox
specifier|static
name|void
name|initEmptyMultiBox
parameter_list|(
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
modifier|&
name|chain
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|QLayoutStruct
modifier|*
name|data
init|=
operator|&
name|chain
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|empty
operator|&&
name|data
operator|->
name|maximumSize
operator|==
literal|0
condition|)
comment|// truly empty box
name|data
operator|->
name|maximumSize
operator|=
name|QWIDGETSIZE_MAX
expr_stmt|;
name|data
operator|->
name|empty
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|distributeMultiBox
specifier|static
name|void
name|distributeMultiBox
parameter_list|(
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
modifier|&
name|chain
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|minSize
parameter_list|,
name|int
name|sizeHint
parameter_list|,
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|stretchArray
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|int
name|w
init|=
literal|0
decl_stmt|;
name|int
name|wh
init|=
literal|0
decl_stmt|;
name|int
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|QLayoutStruct
modifier|*
name|data
init|=
operator|&
name|chain
index|[
name|i
index|]
decl_stmt|;
name|w
operator|+=
name|data
operator|->
name|minimumSize
expr_stmt|;
name|wh
operator|+=
name|data
operator|->
name|sizeHint
expr_stmt|;
name|max
operator|+=
name|data
operator|->
name|maximumSize
expr_stmt|;
if|if
condition|(
name|stretchArray
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|0
condition|)
name|data
operator|->
name|stretch
operator|=
name|qMax
argument_list|(
name|data
operator|->
name|stretch
argument_list|,
name|stretch
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|end
condition|)
block|{
name|int
name|spacing
init|=
name|data
operator|->
name|spacing
decl_stmt|;
name|w
operator|+=
name|spacing
expr_stmt|;
name|wh
operator|+=
name|spacing
expr_stmt|;
name|max
operator|+=
name|spacing
expr_stmt|;
block|}
block|}
if|if
condition|(
name|max
operator|<
name|minSize
condition|)
block|{
comment|// implies w< minSize
comment|/*           We must increase the maximum size of at least one of the           items. qGeomCalc() will put the extra space in between the           items. We must recover that extra space and put it           somewhere. It does not really matter where, since the user           can always specify stretch factors and avoid this code.         */
name|qGeomCalc
argument_list|(
name|chain
argument_list|,
name|start
argument_list|,
name|end
operator|-
name|start
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|QLayoutStruct
modifier|*
name|data
init|=
operator|&
name|chain
index|[
name|i
index|]
decl_stmt|;
name|int
name|nextPos
init|=
operator|(
name|i
operator|==
name|end
operator|)
condition|?
name|minSize
else|:
name|chain
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|pos
decl_stmt|;
name|int
name|realSize
init|=
name|nextPos
operator|-
name|pos
decl_stmt|;
if|if
condition|(
name|i
operator|!=
name|end
condition|)
name|realSize
operator|-=
name|data
operator|->
name|spacing
expr_stmt|;
if|if
condition|(
name|data
operator|->
name|minimumSize
operator|<
name|realSize
condition|)
name|data
operator|->
name|minimumSize
operator|=
name|realSize
expr_stmt|;
if|if
condition|(
name|data
operator|->
name|maximumSize
operator|<
name|data
operator|->
name|minimumSize
condition|)
name|data
operator|->
name|maximumSize
operator|=
name|data
operator|->
name|minimumSize
expr_stmt|;
name|pos
operator|=
name|nextPos
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|w
operator|<
name|minSize
condition|)
block|{
name|qGeomCalc
argument_list|(
name|chain
argument_list|,
name|start
argument_list|,
name|end
operator|-
name|start
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|QLayoutStruct
modifier|*
name|data
init|=
operator|&
name|chain
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|minimumSize
operator|<
name|data
operator|->
name|size
condition|)
name|data
operator|->
name|minimumSize
operator|=
name|data
operator|->
name|size
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wh
operator|<
name|sizeHint
condition|)
block|{
name|qGeomCalc
argument_list|(
name|chain
argument_list|,
name|start
argument_list|,
name|end
operator|-
name|start
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|QLayoutStruct
modifier|*
name|data
init|=
operator|&
name|chain
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|sizeHint
operator|<
name|data
operator|->
name|size
condition|)
name|data
operator|->
name|sizeHint
operator|=
name|data
operator|->
name|size
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|gridAt
specifier|static
name|QGridBox
modifier|*
modifier|&
name|gridAt
parameter_list|(
name|QGridBox
modifier|*
name|grid
index|[]
parameter_list|,
name|int
name|r
parameter_list|,
name|int
name|c
parameter_list|,
name|int
name|cc
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
init|=
name|Qt
operator|::
name|Vertical
parameter_list|)
block|{
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|qSwap
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|grid
index|[
operator|(
name|r
operator|*
name|cc
operator|)
operator|+
name|c
index|]
return|;
block|}
end_function
begin_function
DECL|function|setupSpacings
name|void
name|QGridLayoutPrivate
operator|::
name|setupSpacings
parameter_list|(
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
modifier|&
name|chain
parameter_list|,
name|QGridBox
modifier|*
name|grid
index|[]
parameter_list|,
name|int
name|fixedSpacing
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|int
name|numRows
init|=
name|rr
decl_stmt|;
comment|// or columns if orientation is horizontal
name|int
name|numColumns
init|=
name|cc
decl_stmt|;
comment|// or rows if orientation is horizontal
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|qSwap
argument_list|(
name|numRows
argument_list|,
name|numColumns
argument_list|)
expr_stmt|;
block|}
name|QStyle
modifier|*
name|style
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|fixedSpacing
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|parentWidget
init|=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
name|style
operator|=
name|parentWidget
operator|->
name|style
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numColumns
condition|;
operator|++
name|c
control|)
block|{
name|QGridBox
modifier|*
name|previousBox
init|=
literal|0
decl_stmt|;
name|int
name|previousRow
init|=
operator|-
literal|1
decl_stmt|;
comment|// previous *non-empty* row
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|numRows
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
name|chain
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|.
name|empty
condition|)
continue|continue;
name|QGridBox
modifier|*
name|box
init|=
name|gridAt
argument_list|(
name|grid
argument_list|,
name|r
argument_list|,
name|c
argument_list|,
name|cc
argument_list|,
name|orientation
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousRow
operator|!=
operator|-
literal|1
operator|&&
operator|(
operator|!
name|box
operator|||
name|previousBox
operator|!=
name|box
operator|)
condition|)
block|{
name|int
name|spacing
init|=
name|fixedSpacing
decl_stmt|;
if|if
condition|(
name|spacing
operator|<
literal|0
condition|)
block|{
name|QSizePolicy
operator|::
name|ControlTypes
name|controlTypes1
init|=
name|QSizePolicy
operator|::
name|DefaultType
decl_stmt|;
name|QSizePolicy
operator|::
name|ControlTypes
name|controlTypes2
init|=
name|QSizePolicy
operator|::
name|DefaultType
decl_stmt|;
if|if
condition|(
name|previousBox
condition|)
name|controlTypes1
operator|=
name|previousBox
operator|->
name|item
argument_list|()
operator|->
name|controlTypes
argument_list|()
expr_stmt|;
if|if
condition|(
name|box
condition|)
name|controlTypes2
operator|=
name|box
operator|->
name|item
argument_list|()
operator|->
name|controlTypes
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|&&
name|hReversed
operator|)
operator|||
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|&&
name|vReversed
operator|)
condition|)
name|qSwap
argument_list|(
name|controlTypes1
argument_list|,
name|controlTypes2
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
condition|)
name|spacing
operator|=
name|style
operator|->
name|combinedLayoutSpacing
argument_list|(
name|controlTypes1
argument_list|,
name|controlTypes2
argument_list|,
name|orientation
argument_list|,
literal|0
argument_list|,
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
condition|)
block|{
name|QGridBox
modifier|*
name|sibling
init|=
name|vReversed
condition|?
name|previousBox
else|:
name|box
decl_stmt|;
if|if
condition|(
name|sibling
condition|)
block|{
name|QWidget
modifier|*
name|wid
init|=
name|sibling
operator|->
name|item
argument_list|()
operator|->
name|widget
argument_list|()
decl_stmt|;
if|if
condition|(
name|wid
condition|)
name|spacing
operator|=
name|qMax
argument_list|(
name|spacing
argument_list|,
name|sibling
operator|->
name|item
argument_list|()
operator|->
name|geometry
argument_list|()
operator|.
name|top
argument_list|()
operator|-
name|wid
operator|->
name|geometry
argument_list|()
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|spacing
operator|>
name|chain
operator|.
name|at
argument_list|(
name|previousRow
argument_list|)
operator|.
name|spacing
condition|)
name|chain
index|[
name|previousRow
index|]
operator|.
name|spacing
operator|=
name|spacing
expr_stmt|;
block|}
name|previousBox
operator|=
name|box
expr_stmt|;
name|previousRow
operator|=
name|r
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|//#define QT_LAYOUT_DISABLE_CACHING
end_comment
begin_function
DECL|function|setupLayoutData
name|void
name|QGridLayoutPrivate
operator|::
name|setupLayoutData
parameter_list|(
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_LAYOUT_DISABLE_CACHING
if|if
condition|(
operator|!
name|needRecalc
condition|)
return|return;
endif|#
directive|endif
name|has_hfw
operator|=
literal|false
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|rr
condition|;
name|i
operator|++
control|)
block|{
name|rowData
index|[
name|i
index|]
operator|.
name|init
argument_list|(
name|rStretch
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|rMinHeights
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|rowData
index|[
name|i
index|]
operator|.
name|maximumSize
operator|=
name|rStretch
operator|.
name|at
argument_list|(
name|i
argument_list|)
condition|?
name|QLAYOUTSIZE_MAX
else|:
name|rMinHeights
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|cc
condition|;
name|i
operator|++
control|)
block|{
name|colData
index|[
name|i
index|]
operator|.
name|init
argument_list|(
name|cStretch
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|cMinWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|colData
index|[
name|i
index|]
operator|.
name|maximumSize
operator|=
name|cStretch
operator|.
name|at
argument_list|(
name|i
argument_list|)
condition|?
name|QLAYOUTSIZE_MAX
else|:
name|cMinWidths
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|n
init|=
name|things
operator|.
name|size
argument_list|()
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QGridLayoutSizeTriple
argument_list|>
name|sizes
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|bool
name|has_multi
init|=
literal|false
decl_stmt|;
comment|/*         Grid of items. We use it to determine which items are         adjacent to which and compute the spacings correctly.     */
name|QVarLengthArray
argument_list|<
name|QGridBox
modifier|*
argument_list|>
name|grid
argument_list|(
name|rr
operator|*
name|cc
argument_list|)
decl_stmt|;
name|memset
argument_list|(
name|grid
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rr
operator|*
name|cc
operator|*
sizeof|sizeof
argument_list|(
name|QGridBox
operator|*
argument_list|)
argument_list|)
expr_stmt|;
comment|/*         Initialize 'sizes' and 'grid' data structures, and insert         non-spanning items to our row and column data structures.     */
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|QGridBox
modifier|*
specifier|const
name|box
init|=
name|things
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sizes
index|[
name|i
index|]
operator|.
name|minS
operator|=
name|box
operator|->
name|minimumSize
argument_list|()
expr_stmt|;
name|sizes
index|[
name|i
index|]
operator|.
name|hint
operator|=
name|box
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
name|sizes
index|[
name|i
index|]
operator|.
name|maxS
operator|=
name|box
operator|->
name|maximumSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|box
operator|->
name|hasHeightForWidth
argument_list|()
condition|)
name|has_hfw
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|box
operator|->
name|row
operator|==
name|box
operator|->
name|toRow
argument_list|(
name|rr
argument_list|)
condition|)
block|{
name|addData
argument_list|(
name|box
argument_list|,
name|sizes
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initEmptyMultiBox
argument_list|(
name|rowData
argument_list|,
name|box
operator|->
name|row
argument_list|,
name|box
operator|->
name|toRow
argument_list|(
name|rr
argument_list|)
argument_list|)
expr_stmt|;
name|has_multi
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|box
operator|->
name|col
operator|==
name|box
operator|->
name|toCol
argument_list|(
name|cc
argument_list|)
condition|)
block|{
name|addData
argument_list|(
name|box
argument_list|,
name|sizes
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initEmptyMultiBox
argument_list|(
name|colData
argument_list|,
name|box
operator|->
name|col
argument_list|,
name|box
operator|->
name|toCol
argument_list|(
name|cc
argument_list|)
argument_list|)
expr_stmt|;
name|has_multi
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|r
init|=
name|box
operator|->
name|row
init|;
name|r
operator|<=
name|box
operator|->
name|toRow
argument_list|(
name|rr
argument_list|)
condition|;
operator|++
name|r
control|)
block|{
for|for
control|(
name|int
name|c
init|=
name|box
operator|->
name|col
init|;
name|c
operator|<=
name|box
operator|->
name|toCol
argument_list|(
name|cc
argument_list|)
condition|;
operator|++
name|c
control|)
block|{
name|gridAt
argument_list|(
name|grid
operator|.
name|data
argument_list|()
argument_list|,
name|r
argument_list|,
name|c
argument_list|,
name|cc
argument_list|)
operator|=
name|box
expr_stmt|;
block|}
block|}
block|}
name|setupSpacings
argument_list|(
name|colData
argument_list|,
name|grid
operator|.
name|data
argument_list|()
argument_list|,
name|hSpacing
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|setupSpacings
argument_list|(
name|rowData
argument_list|,
name|grid
operator|.
name|data
argument_list|()
argument_list|,
name|vSpacing
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
comment|/*         Insert multicell items to our row and column data structures.         This must be done after the non-spanning items to obtain a         better distribution in distributeMultiBox().     */
if|if
condition|(
name|has_multi
condition|)
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|QGridBox
modifier|*
specifier|const
name|box
init|=
name|things
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|->
name|row
operator|!=
name|box
operator|->
name|toRow
argument_list|(
name|rr
argument_list|)
condition|)
name|distributeMultiBox
argument_list|(
name|rowData
argument_list|,
name|box
operator|->
name|row
argument_list|,
name|box
operator|->
name|toRow
argument_list|(
name|rr
argument_list|)
argument_list|,
name|sizes
index|[
name|i
index|]
operator|.
name|minS
operator|.
name|height
argument_list|()
argument_list|,
name|sizes
index|[
name|i
index|]
operator|.
name|hint
operator|.
name|height
argument_list|()
argument_list|,
name|rStretch
argument_list|,
name|box
operator|->
name|vStretch
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|box
operator|->
name|col
operator|!=
name|box
operator|->
name|toCol
argument_list|(
name|cc
argument_list|)
condition|)
name|distributeMultiBox
argument_list|(
name|colData
argument_list|,
name|box
operator|->
name|col
argument_list|,
name|box
operator|->
name|toCol
argument_list|(
name|cc
argument_list|)
argument_list|,
name|sizes
index|[
name|i
index|]
operator|.
name|minS
operator|.
name|width
argument_list|()
argument_list|,
name|sizes
index|[
name|i
index|]
operator|.
name|hint
operator|.
name|width
argument_list|()
argument_list|,
name|cStretch
argument_list|,
name|box
operator|->
name|hStretch
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|rr
condition|;
name|i
operator|++
control|)
name|rowData
index|[
name|i
index|]
operator|.
name|expansive
operator|=
name|rowData
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|expansive
operator|||
name|rowData
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|stretch
operator|>
literal|0
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|cc
condition|;
name|i
operator|++
control|)
name|colData
index|[
name|i
index|]
operator|.
name|expansive
operator|=
name|colData
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|expansive
operator|||
name|colData
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|stretch
operator|>
literal|0
expr_stmt|;
name|q
operator|->
name|getContentsMargins
argument_list|(
operator|&
name|leftMargin
argument_list|,
operator|&
name|topMargin
argument_list|,
operator|&
name|rightMargin
argument_list|,
operator|&
name|bottomMargin
argument_list|)
expr_stmt|;
name|needRecalc
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addHfwData
name|void
name|QGridLayoutPrivate
operator|::
name|addHfwData
parameter_list|(
name|QGridBox
modifier|*
name|box
parameter_list|,
name|int
name|width
parameter_list|)
block|{
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
modifier|&
name|rData
init|=
operator|*
name|hfwData
decl_stmt|;
if|if
condition|(
name|box
operator|->
name|hasHeightForWidth
argument_list|()
condition|)
block|{
name|int
name|hint
init|=
name|box
operator|->
name|heightForWidth
argument_list|(
name|width
argument_list|)
decl_stmt|;
name|rData
index|[
name|box
operator|->
name|row
index|]
operator|.
name|sizeHint
operator|=
name|qMax
argument_list|(
name|hint
argument_list|,
name|rData
operator|.
name|at
argument_list|(
name|box
operator|->
name|row
argument_list|)
operator|.
name|sizeHint
argument_list|)
expr_stmt|;
name|rData
index|[
name|box
operator|->
name|row
index|]
operator|.
name|minimumSize
operator|=
name|qMax
argument_list|(
name|hint
argument_list|,
name|rData
operator|.
name|at
argument_list|(
name|box
operator|->
name|row
argument_list|)
operator|.
name|minimumSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSize
name|hint
init|=
name|box
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|QSize
name|minS
init|=
name|box
operator|->
name|minimumSize
argument_list|()
decl_stmt|;
name|rData
index|[
name|box
operator|->
name|row
index|]
operator|.
name|sizeHint
operator|=
name|qMax
argument_list|(
name|hint
operator|.
name|height
argument_list|()
argument_list|,
name|rData
operator|.
name|at
argument_list|(
name|box
operator|->
name|row
argument_list|)
operator|.
name|sizeHint
argument_list|)
expr_stmt|;
name|rData
index|[
name|box
operator|->
name|row
index|]
operator|.
name|minimumSize
operator|=
name|qMax
argument_list|(
name|minS
operator|.
name|height
argument_list|()
argument_list|,
name|rData
operator|.
name|at
argument_list|(
name|box
operator|->
name|row
argument_list|)
operator|.
name|minimumSize
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*   Similar to setupLayoutData(), but uses heightForWidth(colData)   instead of sizeHint(). Assumes that setupLayoutData() and   qGeomCalc(colData) has been called. */
end_comment
begin_function
DECL|function|setupHfwLayoutData
name|void
name|QGridLayoutPrivate
operator|::
name|setupHfwLayoutData
parameter_list|()
block|{
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
modifier|&
name|rData
init|=
operator|*
name|hfwData
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rr
condition|;
name|i
operator|++
control|)
block|{
name|rData
index|[
name|i
index|]
operator|=
name|rowData
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|rData
index|[
name|i
index|]
operator|.
name|minimumSize
operator|=
name|rData
index|[
name|i
index|]
operator|.
name|sizeHint
operator|=
name|rMinHeights
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|2
condition|;
operator|++
name|pass
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|things
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QGridBox
modifier|*
name|box
init|=
name|things
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|r1
init|=
name|box
operator|->
name|row
decl_stmt|;
name|int
name|c1
init|=
name|box
operator|->
name|col
decl_stmt|;
name|int
name|r2
init|=
name|box
operator|->
name|toRow
argument_list|(
name|rr
argument_list|)
decl_stmt|;
name|int
name|c2
init|=
name|box
operator|->
name|toCol
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|colData
operator|.
name|at
argument_list|(
name|c2
argument_list|)
operator|.
name|pos
operator|+
name|colData
operator|.
name|at
argument_list|(
name|c2
argument_list|)
operator|.
name|size
operator|-
name|colData
operator|.
name|at
argument_list|(
name|c1
argument_list|)
operator|.
name|pos
decl_stmt|;
if|if
condition|(
name|r1
operator|==
name|r2
condition|)
block|{
if|if
condition|(
name|pass
operator|==
literal|0
condition|)
name|addHfwData
argument_list|(
name|box
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|pass
operator|==
literal|0
condition|)
block|{
name|initEmptyMultiBox
argument_list|(
name|rData
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSize
name|hint
init|=
name|box
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|QSize
name|min
init|=
name|box
operator|->
name|minimumSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|box
operator|->
name|hasHeightForWidth
argument_list|()
condition|)
block|{
name|int
name|hfwh
init|=
name|box
operator|->
name|heightForWidth
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|hfwh
operator|>
name|hint
operator|.
name|height
argument_list|()
condition|)
name|hint
operator|.
name|setHeight
argument_list|(
name|hfwh
argument_list|)
expr_stmt|;
if|if
condition|(
name|hfwh
operator|>
name|min
operator|.
name|height
argument_list|()
condition|)
name|min
operator|.
name|setHeight
argument_list|(
name|hfwh
argument_list|)
expr_stmt|;
block|}
name|distributeMultiBox
argument_list|(
name|rData
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|,
name|min
operator|.
name|height
argument_list|()
argument_list|,
name|hint
operator|.
name|height
argument_list|()
argument_list|,
name|rStretch
argument_list|,
name|box
operator|->
name|vStretch
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rr
condition|;
name|i
operator|++
control|)
name|rData
index|[
name|i
index|]
operator|.
name|expansive
operator|=
name|rData
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|expansive
operator|||
name|rData
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|stretch
operator|>
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|distribute
name|void
name|QGridLayoutPrivate
operator|::
name|distribute
parameter_list|(
name|QRect
name|r
parameter_list|,
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|bool
name|visualHReversed
init|=
name|hReversed
decl_stmt|;
name|QWidget
modifier|*
name|parent
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|&&
name|parent
operator|->
name|isRightToLeft
argument_list|()
condition|)
name|visualHReversed
operator|=
operator|!
name|visualHReversed
expr_stmt|;
name|setupLayoutData
argument_list|(
name|hSpacing
argument_list|,
name|vSpacing
argument_list|)
expr_stmt|;
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|effectiveMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
name|r
operator|.
name|adjust
argument_list|(
operator|+
name|left
argument_list|,
operator|+
name|top
argument_list|,
operator|-
name|right
argument_list|,
operator|-
name|bottom
argument_list|)
expr_stmt|;
name|qGeomCalc
argument_list|(
name|colData
argument_list|,
literal|0
argument_list|,
name|cc
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
modifier|*
name|rDataPtr
decl_stmt|;
if|if
condition|(
name|has_hfw
condition|)
block|{
name|recalcHFW
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|qGeomCalc
argument_list|(
operator|*
name|hfwData
argument_list|,
literal|0
argument_list|,
name|rr
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|rDataPtr
operator|=
name|hfwData
expr_stmt|;
block|}
else|else
block|{
name|qGeomCalc
argument_list|(
name|rowData
argument_list|,
literal|0
argument_list|,
name|rr
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|rDataPtr
operator|=
operator|&
name|rowData
expr_stmt|;
block|}
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
modifier|&
name|rData
init|=
operator|*
name|rDataPtr
decl_stmt|;
name|int
name|i
decl_stmt|;
name|bool
name|reverse
init|=
operator|(
operator|(
name|r
operator|.
name|bottom
argument_list|()
operator|>
name|rect
operator|.
name|bottom
argument_list|()
operator|)
operator|||
operator|(
name|r
operator|.
name|bottom
argument_list|()
operator|==
name|rect
operator|.
name|bottom
argument_list|()
operator|&&
operator|(
operator|(
name|r
operator|.
name|right
argument_list|()
operator|>
name|rect
operator|.
name|right
argument_list|()
operator|)
operator|!=
name|visualHReversed
operator|)
operator|)
operator|)
decl_stmt|;
name|int
name|n
init|=
name|things
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|QGridBox
modifier|*
name|box
init|=
name|things
operator|.
name|at
argument_list|(
name|reverse
condition|?
name|n
operator|-
name|i
operator|-
literal|1
else|:
name|i
argument_list|)
decl_stmt|;
name|int
name|r2
init|=
name|box
operator|->
name|toRow
argument_list|(
name|rr
argument_list|)
decl_stmt|;
name|int
name|c2
init|=
name|box
operator|->
name|toCol
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|colData
operator|.
name|at
argument_list|(
name|box
operator|->
name|col
argument_list|)
operator|.
name|pos
decl_stmt|;
name|int
name|y
init|=
name|rData
operator|.
name|at
argument_list|(
name|box
operator|->
name|row
argument_list|)
operator|.
name|pos
decl_stmt|;
name|int
name|x2p
init|=
name|colData
operator|.
name|at
argument_list|(
name|c2
argument_list|)
operator|.
name|pos
operator|+
name|colData
operator|.
name|at
argument_list|(
name|c2
argument_list|)
operator|.
name|size
decl_stmt|;
comment|// x2+1
name|int
name|y2p
init|=
name|rData
operator|.
name|at
argument_list|(
name|r2
argument_list|)
operator|.
name|pos
operator|+
name|rData
operator|.
name|at
argument_list|(
name|r2
argument_list|)
operator|.
name|size
decl_stmt|;
comment|// y2+1
name|int
name|w
init|=
name|x2p
operator|-
name|x
decl_stmt|;
name|int
name|h
init|=
name|y2p
operator|-
name|y
decl_stmt|;
if|if
condition|(
name|visualHReversed
condition|)
name|x
operator|=
name|r
operator|.
name|left
argument_list|()
operator|+
name|r
operator|.
name|right
argument_list|()
operator|-
name|x
operator|-
name|w
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|vReversed
condition|)
name|y
operator|=
name|r
operator|.
name|top
argument_list|()
operator|+
name|r
operator|.
name|bottom
argument_list|()
operator|-
name|y
operator|-
name|h
operator|+
literal|1
expr_stmt|;
name|box
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cellRect
name|QRect
name|QGridLayoutPrivate
operator|::
name|cellRect
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|row
operator|>=
name|rr
operator|||
name|col
operator|<
literal|0
operator|||
name|col
operator|>=
name|cc
condition|)
return|return
name|QRect
argument_list|()
return|;
specifier|const
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
modifier|*
name|rDataPtr
decl_stmt|;
if|if
condition|(
name|has_hfw
operator|&&
name|hfwData
condition|)
name|rDataPtr
operator|=
name|hfwData
expr_stmt|;
else|else
name|rDataPtr
operator|=
operator|&
name|rowData
expr_stmt|;
return|return
name|QRect
argument_list|(
name|colData
operator|.
name|at
argument_list|(
name|col
argument_list|)
operator|.
name|pos
argument_list|,
name|rDataPtr
operator|->
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|pos
argument_list|,
name|colData
operator|.
name|at
argument_list|(
name|col
argument_list|)
operator|.
name|size
argument_list|,
name|rDataPtr
operator|->
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|size
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QGridLayout      \brief The QGridLayout class lays out widgets in a grid.      \ingroup geomanagement     \inmodule QtWidgets      QGridLayout takes the space made available to it (by its parent     layout or by the parentWidget()), divides it up into rows and     columns, and puts each widget it manages into the correct cell.      Columns and rows behave identically; we will discuss columns, but     there are equivalent functions for rows.      Each column has a minimum width and a stretch factor. The minimum     width is the greatest of that set using setColumnMinimumWidth() and the     minimum width of each widget in that column. The stretch factor is     set using setColumnStretch() and determines how much of the available     space the column will get over and above its necessary minimum.      Normally, each managed widget or layout is put into a cell of its     own using addWidget(). It is also possible for a widget to occupy     multiple cells using the row and column spanning overloads of     addItem() and addWidget(). If you do this, QGridLayout will guess     how to distribute the size over the columns/rows (based on the     stretch factors).      To remove a widget from a layout, call removeWidget(). Calling     QWidget::hide() on a widget also effectively removes the widget     from the layout until QWidget::show() is called.      This illustration shows a fragment of a dialog with a five-column,     three-row grid (the grid is shown overlaid in magenta):      \image gridlayout.png A grid layout      Columns 0, 2 and 4 in this dialog fragment are made up of a     QLabel, a QLineEdit, and a QListBox. Columns 1 and 3 are     placeholders made with setColumnMinimumWidth(). Row 0 consists of three     QLabel objects, row 1 of three QLineEdit objects and row 2 of     three QListBox objects. We used placeholder columns (1 and 3) to     get the right amount of space between the columns.      Note that the columns and rows are not equally wide or tall. If     you want two columns to have the same width, you must set their     minimum widths and stretch factors to be the same yourself. You do     this using setColumnMinimumWidth() and setColumnStretch().      If the QGridLayout is not the top-level layout (i.e. does not     manage all of the widget's area and children), you must add it to     its parent layout when you create it, but before you do anything     with it. The normal way to add a layout is by calling     addLayout() on the parent layout.      Once you have added your layout you can start putting widgets and     other layouts into the cells of your grid layout using     addWidget(), addItem(), and addLayout().      QGridLayout also includes two margin widths:     the \l{getContentsMargins()}{contents margin} and the spacing().     The contents margin is the width of the reserved space along each     of the QGridLayout's four sides. The spacing() is the width of the     automatically allocated spacing between neighboring boxes.      The default contents margin values are provided by the     \l{QStyle::pixelMetric()}{style}. The default value Qt styles specify     is 9 for child widgets and 11 for windows. The spacing defaults to the same as     the margin width for a top-level layout, or to the same as the     parent layout.      \sa QBoxLayout, QStackedLayout, {Layout Management}, {Basic Layouts Example} */
end_comment
begin_comment
comment|/*!     Constructs a new QGridLayout with parent widget, \a parent.  The     layout has one row and one column initially, and will expand when     new items are inserted. */
end_comment
begin_constructor
DECL|function|QGridLayout
name|QGridLayout
operator|::
name|QGridLayout
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QLayout
argument_list|(
operator|*
operator|new
name|QGridLayoutPrivate
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|expand
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a new grid layout.      You must insert this grid into another layout. You can insert     widgets and layouts into this layout at any time, but laying out     will not be performed before this is inserted into another layout. */
end_comment
begin_constructor
DECL|function|QGridLayout
name|QGridLayout
operator|::
name|QGridLayout
parameter_list|()
member_init_list|:
name|QLayout
argument_list|(
operator|*
operator|new
name|QGridLayoutPrivate
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|expand
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! \internal (mostly)  Sets the positioning mode used by addItem(). If \a orient is Qt::Horizontal, this layout is expanded to \a n columns, and items will be added columns-first. Otherwise it is expanded to \a n rows and items will be added rows-first. */
end_comment
begin_function
DECL|function|setDefaultPositioning
name|void
name|QGridLayout
operator|::
name|setDefaultPositioning
parameter_list|(
name|int
name|n
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|orient
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|d
operator|->
name|expand
argument_list|(
literal|1
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|d
operator|->
name|addVertical
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|expand
argument_list|(
name|n
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|d
operator|->
name|addVertical
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Destroys the grid layout. Geometry management is terminated if     this is a top-level grid.      The layout's widgets aren't destroyed. */
end_comment
begin_destructor
DECL|function|~QGridLayout
name|QGridLayout
operator|::
name|~
name|QGridLayout
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|deleteAll
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \property QGridLayout::horizontalSpacing     \brief the spacing between widgets that are laid out side by side     \since 4.3      If no value is explicitly set, the layout's horizontal spacing is     inherited from the parent layout, or from the style settings for     the parent widget.      \sa verticalSpacing, QStyle::pixelMetric(), {QStyle::}{PM_LayoutHorizontalSpacing} */
end_comment
begin_function
DECL|function|setHorizontalSpacing
name|void
name|QGridLayout
operator|::
name|setHorizontalSpacing
parameter_list|(
name|int
name|spacing
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|horizontalSpacing
operator|=
name|spacing
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|horizontalSpacing
name|int
name|QGridLayout
operator|::
name|horizontalSpacing
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|horizontalSpacing
operator|>=
literal|0
condition|)
block|{
return|return
name|d
operator|->
name|horizontalSpacing
return|;
block|}
else|else
block|{
return|return
name|qSmartSpacing
argument_list|(
name|this
argument_list|,
name|QStyle
operator|::
name|PM_LayoutHorizontalSpacing
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QGridLayout::verticalSpacing     \brief the spacing between widgets that are laid out on top of each other     \since 4.3      If no value is explicitly set, the layout's vertical spacing is     inherited from the parent layout, or from the style settings for     the parent widget.      \sa horizontalSpacing, QStyle::pixelMetric(), {QStyle::}{PM_LayoutHorizontalSpacing} */
end_comment
begin_function
DECL|function|setVerticalSpacing
name|void
name|QGridLayout
operator|::
name|setVerticalSpacing
parameter_list|(
name|int
name|spacing
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|verticalSpacing
operator|=
name|spacing
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|verticalSpacing
name|int
name|QGridLayout
operator|::
name|verticalSpacing
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|verticalSpacing
operator|>=
literal|0
condition|)
block|{
return|return
name|d
operator|->
name|verticalSpacing
return|;
block|}
else|else
block|{
return|return
name|qSmartSpacing
argument_list|(
name|this
argument_list|,
name|QStyle
operator|::
name|PM_LayoutVerticalSpacing
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     This function sets both the vertical and horizontal spacing to     \a spacing.      \sa setVerticalSpacing(), setHorizontalSpacing() */
end_comment
begin_function
DECL|function|setSpacing
name|void
name|QGridLayout
operator|::
name|setSpacing
parameter_list|(
name|int
name|spacing
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|horizontalSpacing
operator|=
name|d
operator|->
name|verticalSpacing
operator|=
name|spacing
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     If the vertical spacing is equal to the horizontal spacing,     this function returns that value; otherwise it return -1.      \sa setSpacing(), verticalSpacing(), horizontalSpacing() */
end_comment
begin_function
DECL|function|spacing
name|int
name|QGridLayout
operator|::
name|spacing
parameter_list|()
specifier|const
block|{
name|int
name|hSpacing
init|=
name|horizontalSpacing
argument_list|()
decl_stmt|;
if|if
condition|(
name|hSpacing
operator|==
name|verticalSpacing
argument_list|()
condition|)
block|{
return|return
name|hSpacing
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the number of rows in this grid. */
end_comment
begin_function
DECL|function|rowCount
name|int
name|QGridLayout
operator|::
name|rowCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|numRows
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of columns in this grid. */
end_comment
begin_function
DECL|function|columnCount
name|int
name|QGridLayout
operator|::
name|columnCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|numCols
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QGridLayout
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
name|QSize
name|result
argument_list|(
name|d
operator|->
name|sizeHint
argument_list|(
name|horizontalSpacing
argument_list|()
argument_list|,
name|verticalSpacing
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|d
operator|->
name|effectiveMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
name|result
operator|+=
name|QSize
argument_list|(
name|left
operator|+
name|right
argument_list|,
name|top
operator|+
name|bottom
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|minimumSize
name|QSize
name|QGridLayout
operator|::
name|minimumSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
name|QSize
name|result
argument_list|(
name|d
operator|->
name|minimumSize
argument_list|(
name|horizontalSpacing
argument_list|()
argument_list|,
name|verticalSpacing
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|d
operator|->
name|effectiveMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
name|result
operator|+=
name|QSize
argument_list|(
name|left
operator|+
name|right
argument_list|,
name|top
operator|+
name|bottom
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|maximumSize
name|QSize
name|QGridLayout
operator|::
name|maximumSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
name|QSize
name|s
init|=
name|d
operator|->
name|maximumSize
argument_list|(
name|horizontalSpacing
argument_list|()
argument_list|,
name|verticalSpacing
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|d
operator|->
name|effectiveMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
name|s
operator|+=
name|QSize
argument_list|(
name|left
operator|+
name|right
argument_list|,
name|top
operator|+
name|bottom
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|boundedTo
argument_list|(
name|QSize
argument_list|(
name|QLAYOUTSIZE_MAX
argument_list|,
name|QLAYOUTSIZE_MAX
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|alignment
argument_list|()
operator|&
name|Qt
operator|::
name|AlignHorizontal_Mask
condition|)
name|s
operator|.
name|setWidth
argument_list|(
name|QLAYOUTSIZE_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|alignment
argument_list|()
operator|&
name|Qt
operator|::
name|AlignVertical_Mask
condition|)
name|s
operator|.
name|setHeight
argument_list|(
name|QLAYOUTSIZE_MAX
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|hasHeightForWidth
name|bool
name|QGridLayout
operator|::
name|hasHeightForWidth
parameter_list|()
specifier|const
block|{
return|return
cast|const_cast
argument_list|<
name|QGridLayout
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|hasHeightForWidth
argument_list|(
name|horizontalSpacing
argument_list|()
argument_list|,
name|verticalSpacing
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|heightForWidth
name|int
name|QGridLayout
operator|::
name|heightForWidth
parameter_list|(
name|int
name|w
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
name|QGridLayoutPrivate
modifier|*
name|dat
init|=
cast|const_cast
argument_list|<
name|QGridLayoutPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
decl_stmt|;
return|return
name|dat
operator|->
name|heightForWidth
argument_list|(
name|w
argument_list|,
name|horizontalSpacing
argument_list|()
argument_list|,
name|verticalSpacing
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|minimumHeightForWidth
name|int
name|QGridLayout
operator|::
name|minimumHeightForWidth
parameter_list|(
name|int
name|w
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
name|QGridLayoutPrivate
modifier|*
name|dat
init|=
cast|const_cast
argument_list|<
name|QGridLayoutPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
decl_stmt|;
return|return
name|dat
operator|->
name|minimumHeightForWidth
argument_list|(
name|w
argument_list|,
name|horizontalSpacing
argument_list|()
argument_list|,
name|verticalSpacing
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|count
name|int
name|QGridLayout
operator|::
name|count
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|count
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|itemAt
name|QLayoutItem
modifier|*
name|QGridLayout
operator|::
name|itemAt
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|itemAt
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns the layout item that occupies cell (\a row, \a column), or 0 if     the cell is empty.      \sa getItemPosition(), indexOf() */
end_comment
begin_function
DECL|function|itemAtPosition
name|QLayoutItem
modifier|*
name|QGridLayout
operator|::
name|itemAtPosition
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|d
operator|->
name|things
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|QGridBox
modifier|*
name|box
init|=
name|d
operator|->
name|things
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|>=
name|box
operator|->
name|row
operator|&&
name|row
operator|<=
name|box
operator|->
name|toRow
argument_list|(
name|d
operator|->
name|rr
argument_list|)
operator|&&
name|column
operator|>=
name|box
operator|->
name|col
operator|&&
name|column
operator|<=
name|box
operator|->
name|toCol
argument_list|(
name|d
operator|->
name|cc
argument_list|)
condition|)
block|{
return|return
name|box
operator|->
name|item
argument_list|()
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|takeAt
name|QLayoutItem
modifier|*
name|QGridLayout
operator|::
name|takeAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|takeAt
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the position information of the item with the given \a index.    The variables passed as \a row and \a column are updated with the position of the   item in the layout, and the \a rowSpan and \a columnSpan variables are updated   with the vertical and horizontal spans of the item.    \sa itemAtPosition(), itemAt() */
end_comment
begin_function
DECL|function|getItemPosition
name|void
name|QGridLayout
operator|::
name|getItemPosition
parameter_list|(
name|int
name|index
parameter_list|,
name|int
modifier|*
name|row
parameter_list|,
name|int
modifier|*
name|column
parameter_list|,
name|int
modifier|*
name|rowSpan
parameter_list|,
name|int
modifier|*
name|columnSpan
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|getItemPosition
argument_list|(
name|index
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|rowSpan
argument_list|,
name|columnSpan
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setGeometry
name|void
name|QGridLayout
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isDirty
argument_list|()
operator|||
name|rect
operator|!=
name|geometry
argument_list|()
condition|)
block|{
name|QRect
name|cr
init|=
name|alignment
argument_list|()
condition|?
name|alignmentRect
argument_list|(
name|rect
argument_list|)
else|:
name|rect
decl_stmt|;
name|d
operator|->
name|distribute
argument_list|(
name|cr
argument_list|,
name|horizontalSpacing
argument_list|()
argument_list|,
name|verticalSpacing
argument_list|()
argument_list|)
expr_stmt|;
name|QLayout
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the geometry of the cell with row \a row and column \a column     in the grid. Returns an invalid rectangle if \a row or \a column is     outside the grid.      \warning in the current version of Qt this function does not     return valid results until setGeometry() has been called, i.e.     after the parentWidget() is visible. */
end_comment
begin_function
DECL|function|cellRect
name|QRect
name|QGridLayout
operator|::
name|cellRect
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|cellRect
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|addItem
name|void
name|QGridLayout
operator|::
name|addItem
parameter_list|(
name|QLayoutItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|int
name|r
decl_stmt|,
name|c
decl_stmt|;
name|d
operator|->
name|getNextPos
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|item
argument_list|,
name|r
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Adds \a item at position \a row, \a column, spanning \a rowSpan     rows and \a columnSpan columns, and aligns it according to \a     alignment. If \a rowSpan and/or \a columnSpan is -1, then the item     will extend to the bottom and/or right edge, respectively. The     layout takes ownership of the \a item.      \warning Do not use this function to add child layouts or child     widget items. Use addLayout() or addWidget() instead. */
end_comment
begin_function
DECL|function|addItem
name|void
name|QGridLayout
operator|::
name|addItem
parameter_list|(
name|QLayoutItem
modifier|*
name|item
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|int
name|rowSpan
parameter_list|,
name|int
name|columnSpan
parameter_list|,
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|QGridBox
modifier|*
name|b
init|=
operator|new
name|QGridBox
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|b
operator|->
name|setAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
name|d
operator|->
name|add
argument_list|(
name|b
argument_list|,
name|row
argument_list|,
operator|(
name|rowSpan
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
name|row
operator|+
name|rowSpan
operator|-
literal|1
argument_list|,
name|column
argument_list|,
operator|(
name|columnSpan
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
name|column
operator|+
name|columnSpan
operator|-
literal|1
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Adds the given \a widget to the cell grid at \a row, \a column. The     top-left position is (0, 0) by default.      The alignment is specified by \a alignment. The default     alignment is 0, which means that the widget fills the entire cell.  */
end_comment
begin_function
DECL|function|addWidget
name|void
name|QGridLayout
operator|::
name|addWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|checkWidget
argument_list|(
name|widget
argument_list|)
condition|)
return|return;
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|column
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGridLayout: Cannot add %s/%s to %s/%s at row %d column %d"
argument_list|,
name|widget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
name|widget
operator|->
name|objectName
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
name|objectName
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
return|return;
block|}
name|addChildWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QWidgetItem
modifier|*
name|b
init|=
name|QLayoutPrivate
operator|::
name|createWidgetItem
argument_list|(
name|this
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|addItem
argument_list|(
name|b
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      This version adds the given \a widget to the cell grid, spanning     multiple rows/columns. The cell will start at \a fromRow, \a     fromColumn spanning \a rowSpan rows and \a columnSpan columns. The     \a widget will have the given \a alignment.      If \a rowSpan and/or \a columnSpan is -1, then the widget will     extend to the bottom and/or right edge, respectively.  */
end_comment
begin_function
DECL|function|addWidget
name|void
name|QGridLayout
operator|::
name|addWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|fromRow
parameter_list|,
name|int
name|fromColumn
parameter_list|,
name|int
name|rowSpan
parameter_list|,
name|int
name|columnSpan
parameter_list|,
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|checkWidget
argument_list|(
name|widget
argument_list|)
condition|)
return|return;
name|int
name|toRow
init|=
operator|(
name|rowSpan
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
name|fromRow
operator|+
name|rowSpan
operator|-
literal|1
decl_stmt|;
name|int
name|toColumn
init|=
operator|(
name|columnSpan
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
name|fromColumn
operator|+
name|columnSpan
operator|-
literal|1
decl_stmt|;
name|addChildWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QGridBox
modifier|*
name|b
init|=
operator|new
name|QGridBox
argument_list|(
name|this
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|b
operator|->
name|setAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
name|d
operator|->
name|add
argument_list|(
name|b
argument_list|,
name|fromRow
argument_list|,
name|toRow
argument_list|,
name|fromColumn
argument_list|,
name|toColumn
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGridLayout::addWidget(QWidget *widget)      \overload     \internal */
end_comment
begin_comment
comment|/*!     Places the \a layout at position (\a row, \a column) in the grid. The     top-left position is (0, 0).      The alignment is specified by \a alignment. The default     alignment is 0, which means that the widget fills the entire cell.      A non-zero alignment indicates that the layout should not grow to     fill the available space but should be sized according to     sizeHint().       \a layout becomes a child of the grid layout. */
end_comment
begin_function
DECL|function|addLayout
name|void
name|QGridLayout
operator|::
name|addLayout
parameter_list|(
name|QLayout
modifier|*
name|layout
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|checkLayout
argument_list|(
name|layout
argument_list|)
condition|)
return|return;
if|if
condition|(
operator|!
name|adoptLayout
argument_list|(
name|layout
argument_list|)
condition|)
return|return;
name|QGridBox
modifier|*
name|b
init|=
operator|new
name|QGridBox
argument_list|(
name|layout
argument_list|)
decl_stmt|;
name|b
operator|->
name|setAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
name|d
operator|->
name|add
argument_list|(
name|b
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \overload     This version adds the layout \a layout to the cell grid, spanning multiple     rows/columns. The cell will start at \a row, \a column spanning \a     rowSpan rows and \a columnSpan columns.      If \a rowSpan and/or \a columnSpan is -1, then the layout will extend to the bottom     and/or right edge, respectively. */
end_comment
begin_function
DECL|function|addLayout
name|void
name|QGridLayout
operator|::
name|addLayout
parameter_list|(
name|QLayout
modifier|*
name|layout
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|int
name|rowSpan
parameter_list|,
name|int
name|columnSpan
parameter_list|,
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|checkLayout
argument_list|(
name|layout
argument_list|)
condition|)
return|return;
if|if
condition|(
operator|!
name|adoptLayout
argument_list|(
name|layout
argument_list|)
condition|)
return|return;
name|QGridBox
modifier|*
name|b
init|=
operator|new
name|QGridBox
argument_list|(
name|layout
argument_list|)
decl_stmt|;
name|b
operator|->
name|setAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
name|d
operator|->
name|add
argument_list|(
name|b
argument_list|,
name|row
argument_list|,
operator|(
name|rowSpan
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
name|row
operator|+
name|rowSpan
operator|-
literal|1
argument_list|,
name|column
argument_list|,
operator|(
name|columnSpan
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
name|column
operator|+
name|columnSpan
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the stretch factor of row \a row to \a stretch. The first row     is number 0.      The stretch factor is relative to the other rows in this grid.     Rows with a higher stretch factor take more of the available     space.      The default stretch factor is 0. If the stretch factor is 0 and no     other row in this table can grow at all, the row may still grow.      \sa rowStretch(), setRowMinimumHeight(), setColumnStretch() */
end_comment
begin_function
DECL|function|setRowStretch
name|void
name|QGridLayout
operator|::
name|setRowStretch
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|setRowStretch
argument_list|(
name|row
argument_list|,
name|stretch
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the stretch factor for row \a row.      \sa setRowStretch() */
end_comment
begin_function
DECL|function|rowStretch
name|int
name|QGridLayout
operator|::
name|rowStretch
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|rowStretch
argument_list|(
name|row
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the stretch factor for column \a column.      \sa setColumnStretch() */
end_comment
begin_function
DECL|function|columnStretch
name|int
name|QGridLayout
operator|::
name|columnStretch
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|colStretch
argument_list|(
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the stretch factor of column \a column to \a stretch. The first     column is number 0.      The stretch factor is relative to the other columns in this grid.     Columns with a higher stretch factor take more of the available     space.      The default stretch factor is 0. If the stretch factor is 0 and no     other column in this table can grow at all, the column may still     grow.      An alternative approach is to add spacing using addItem() with a     QSpacerItem.      \sa columnStretch(), setRowStretch() */
end_comment
begin_function
DECL|function|setColumnStretch
name|void
name|QGridLayout
operator|::
name|setColumnStretch
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|setColStretch
argument_list|(
name|column
argument_list|,
name|stretch
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the minimum height of row \a row to \a minSize pixels.      \sa rowMinimumHeight(), setColumnMinimumWidth() */
end_comment
begin_function
DECL|function|setRowMinimumHeight
name|void
name|QGridLayout
operator|::
name|setRowMinimumHeight
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|setRowMinimumHeight
argument_list|(
name|row
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the minimum width set for row \a row.      \sa setRowMinimumHeight() */
end_comment
begin_function
DECL|function|rowMinimumHeight
name|int
name|QGridLayout
operator|::
name|rowMinimumHeight
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|rowSpacing
argument_list|(
name|row
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the minimum width of column \a column to \a minSize pixels.      \sa columnMinimumWidth(), setRowMinimumHeight() */
end_comment
begin_function
DECL|function|setColumnMinimumWidth
name|void
name|QGridLayout
operator|::
name|setColumnMinimumWidth
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|setColumnMinimumWidth
argument_list|(
name|column
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the column spacing for column \a column.      \sa setColumnMinimumWidth() */
end_comment
begin_function
DECL|function|columnMinimumWidth
name|int
name|QGridLayout
operator|::
name|columnMinimumWidth
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|colSpacing
argument_list|(
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|expandingDirections
name|Qt
operator|::
name|Orientations
name|QGridLayout
operator|::
name|expandingDirections
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|expandingDirections
argument_list|(
name|horizontalSpacing
argument_list|()
argument_list|,
name|verticalSpacing
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the grid's origin corner, i.e. position (0, 0), to \a corner. */
end_comment
begin_function
DECL|function|setOriginCorner
name|void
name|QGridLayout
operator|::
name|setOriginCorner
parameter_list|(
name|Qt
operator|::
name|Corner
name|corner
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|setReversed
argument_list|(
name|corner
operator|==
name|Qt
operator|::
name|BottomLeftCorner
operator|||
name|corner
operator|==
name|Qt
operator|::
name|BottomRightCorner
argument_list|,
name|corner
operator|==
name|Qt
operator|::
name|TopRightCorner
operator|||
name|corner
operator|==
name|Qt
operator|::
name|BottomRightCorner
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the corner that's used for the grid's origin, i.e. for     position (0, 0). */
end_comment
begin_function
DECL|function|originCorner
name|Qt
operator|::
name|Corner
name|QGridLayout
operator|::
name|originCorner
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGridLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|horReversed
argument_list|()
condition|)
block|{
return|return
name|d
operator|->
name|verReversed
argument_list|()
condition|?
name|Qt
operator|::
name|BottomRightCorner
else|:
name|Qt
operator|::
name|TopRightCorner
return|;
block|}
else|else
block|{
return|return
name|d
operator|->
name|verReversed
argument_list|()
condition|?
name|Qt
operator|::
name|BottomLeftCorner
else|:
name|Qt
operator|::
name|TopLeftCorner
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|invalidate
name|void
name|QGridLayout
operator|::
name|invalidate
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|setDirty
argument_list|()
expr_stmt|;
name|QLayout
operator|::
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
