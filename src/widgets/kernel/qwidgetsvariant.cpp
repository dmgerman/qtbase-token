begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qvariant.h"
end_include
begin_include
include|#
directive|include
file|"qicon.h"
end_include
begin_include
include|#
directive|include
file|"qsizepolicy.h"
end_include
begin_include
include|#
directive|include
file|"private/qvariant_p.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|construct
specifier|static
name|void
name|construct
parameter_list|(
name|QVariant
operator|::
name|Private
modifier|*
name|x
parameter_list|,
specifier|const
name|void
modifier|*
name|copy
parameter_list|)
block|{
switch|switch
condition|(
name|x
operator|->
name|type
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_ICON
case|case
name|QVariant
operator|::
name|Icon
case|:
name|v_construct
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|SizePolicy
case|:
name|v_construct
argument_list|<
name|QSizePolicy
argument_list|>
argument_list|(
name|x
argument_list|,
name|copy
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|x
operator|->
name|is_null
operator|=
operator|!
name|copy
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
specifier|static
name|void
name|clear
parameter_list|(
name|QVariant
operator|::
name|Private
modifier|*
name|d
parameter_list|)
block|{
switch|switch
condition|(
name|d
operator|->
name|type
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_ICON
case|case
name|QVariant
operator|::
name|Icon
case|:
name|v_clear
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|SizePolicy
case|:
name|v_clear
argument_list|<
name|QSizePolicy
argument_list|>
argument_list|(
name|d
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|type
operator|=
name|QVariant
operator|::
name|Invalid
expr_stmt|;
name|d
operator|->
name|is_null
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|is_shared
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isNull
specifier|static
name|bool
name|isNull
parameter_list|(
specifier|const
name|QVariant
operator|::
name|Private
modifier|*
name|d
parameter_list|)
block|{
switch|switch
condition|(
name|d
operator|->
name|type
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_ICON
case|case
name|QVariant
operator|::
name|Icon
case|:
return|return
name|v_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|isNull
argument_list|()
return|;
endif|#
directive|endif
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|compare
specifier|static
name|bool
name|compare
parameter_list|(
specifier|const
name|QVariant
operator|::
name|Private
modifier|*
name|a
parameter_list|,
specifier|const
name|QVariant
operator|::
name|Private
modifier|*
name|b
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|a
operator|->
name|type
operator|==
name|b
operator|->
name|type
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|a
operator|->
name|type
condition|)
block|{
case|case
name|QVariant
operator|::
name|SizePolicy
case|:
return|return
operator|*
name|v_cast
argument_list|<
name|QSizePolicy
argument_list|>
argument_list|(
name|a
argument_list|)
operator|==
operator|*
name|v_cast
argument_list|<
name|QSizePolicy
argument_list|>
argument_list|(
name|b
argument_list|)
return|;
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|widgets_handler
specifier|static
specifier|const
name|QVariant
operator|::
name|Handler
name|widgets_handler
init|=
block|{
name|construct
block|,
name|clear
block|,
name|isNull
block|,
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
literal|0
block|,
literal|0
block|,
endif|#
directive|endif
name|compare
block|,
literal|0
block|,
literal|0
block|,
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DEBUG_STREAM
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_BROKEN_DEBUG_STREAM
argument_list|)
literal|0
else|#
directive|else
literal|0
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|QMetaTypeGuiHelper
struct|struct
name|QMetaTypeGuiHelper
block|{
DECL|member|creator
name|QMetaType
operator|::
name|Creator
name|creator
decl_stmt|;
DECL|member|deleter
name|QMetaType
operator|::
name|Deleter
name|deleter
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
DECL|member|saveOp
name|QMetaType
operator|::
name|SaveOperator
name|saveOp
decl_stmt|;
DECL|member|loadOp
name|QMetaType
operator|::
name|LoadOperator
name|loadOp
decl_stmt|;
endif|#
directive|endif
DECL|member|constructor
name|QMetaType
operator|::
name|Constructor
name|constructor
decl_stmt|;
DECL|member|destructor
name|QMetaType
operator|::
name|Destructor
name|destructor
decl_stmt|;
DECL|member|size
name|int
name|size
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
specifier|extern
name|Q_CORE_EXPORT
specifier|const
name|QMetaTypeGuiHelper
modifier|*
name|qMetaTypeWidgetsHelper
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_DATASTREAM
end_ifdef
begin_define
DECL|macro|Q_DECL_METATYPE_HELPER
define|#
directive|define
name|Q_DECL_METATYPE_HELPER
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|typedef void *(*QCreate##TYPE)(const TYPE *); \      static const QCreate##TYPE qCreate##TYPE = qMetaTypeCreateHelper<TYPE>; \      typedef void (*QDelete##TYPE)(TYPE *); \      static const QDelete##TYPE qDelete##TYPE = qMetaTypeDeleteHelper<TYPE>; \      typedef void *(*QConstruct##TYPE)(void *, const TYPE *); \      static const QConstruct##TYPE qConstruct##TYPE = qMetaTypeConstructHelper<TYPE>; \      typedef void (*QDestruct##TYPE)(TYPE *); \      static const QDestruct##TYPE qDestruct##TYPE = qMetaTypeDestructHelper<TYPE>;
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_DECL_METATYPE_HELPER
define|#
directive|define
name|Q_DECL_METATYPE_HELPER
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|typedef void *(*QCreate##TYPE)(const TYPE *); \      static const QCreate##TYPE qCreate##TYPE = qMetaTypeCreateHelper<TYPE>; \      typedef void (*QDelete##TYPE)(TYPE *); \      static const QDelete##TYPE qDelete##TYPE = qMetaTypeDeleteHelper<TYPE>; \      typedef void *(*QConstruct##TYPE)(void *, const TYPE *); \      static const QConstruct##TYPE qConstruct##TYPE = qMetaTypeConstructHelper<TYPE>; \      typedef void (*QDestruct##TYPE)(TYPE *); \      static const QDestruct##TYPE qDestruct##TYPE = qMetaTypeDestructHelper<TYPE>; \      typedef void (*QSave##TYPE)(QDataStream&, const TYPE *); \      static const QSave##TYPE qSave##TYPE = qMetaTypeSaveHelper<TYPE>; \      typedef void (*QLoad##TYPE)(QDataStream&, TYPE *); \      static const QLoad##TYPE qLoad##TYPE = qMetaTypeLoadHelper<TYPE>;
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ICON
end_ifndef
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QIcon
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECL_METATYPE_HELPER
argument_list|(
argument|QSizePolicy
argument_list|)
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_DATASTREAM
end_ifdef
begin_define
DECL|macro|Q_IMPL_METATYPE_HELPER
define|#
directive|define
name|Q_IMPL_METATYPE_HELPER
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|{ reinterpret_cast<QMetaType::Creator>(qCreate##TYPE), \        reinterpret_cast<QMetaType::Deleter>(qDelete##TYPE), \        reinterpret_cast<QMetaType::Constructor>(qConstruct##TYPE), \        reinterpret_cast<QMetaType::Destructor>(qDestruct##TYPE), \        sizeof(TYPE) \      }
end_define
begin_else
else|#
directive|else
end_else
begin_define
define|#
directive|define
name|Q_IMPL_METATYPE_HELPER
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|{ reinterpret_cast<QMetaType::Creator>(qCreate##TYPE), \        reinterpret_cast<QMetaType::Deleter>(qDelete##TYPE), \        reinterpret_cast<QMetaType::SaveOperator>(qSave##TYPE), \        reinterpret_cast<QMetaType::LoadOperator>(qLoad##TYPE), \        reinterpret_cast<QMetaType::Constructor>(qConstruct##TYPE), \        reinterpret_cast<QMetaType::Destructor>(qDestruct##TYPE), \        sizeof(TYPE) \      }
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|qVariantWidgetsHelper
specifier|static
specifier|const
name|QMetaTypeGuiHelper
name|qVariantWidgetsHelper
index|[]
init|=
block|{
ifdef|#
directive|ifdef
name|QT_NO_ICON
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
else|#
directive|else
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QIcon
argument_list|)
block|,
endif|#
directive|endif
name|Q_IMPL_METATYPE_HELPER
argument_list|(
name|QSizePolicy
argument_list|)
block|, }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|Q_GUI_EXPORT
specifier|const
name|QVariant
operator|::
name|Handler
modifier|*
name|qt_widgets_variant_handler
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qRegisterWidgetsVariant
name|int
name|qRegisterWidgetsVariant
parameter_list|()
block|{
name|qt_widgets_variant_handler
operator|=
operator|&
name|widgets_handler
expr_stmt|;
name|qMetaTypeWidgetsHelper
operator|=
name|qVariantWidgetsHelper
expr_stmt|;
return|return
literal|1
return|;
block|}
end_function
begin_macro
name|Q_CONSTRUCTOR_FUNCTION
argument_list|(
argument|qRegisterWidgetsVariant
argument_list|)
end_macro
begin_function
DECL|function|qUnregisterWidgetsVariant
name|int
name|qUnregisterWidgetsVariant
parameter_list|()
block|{
name|qt_widgets_variant_handler
operator|=
literal|0
expr_stmt|;
name|qMetaTypeWidgetsHelper
operator|=
literal|0
expr_stmt|;
return|return
literal|1
return|;
block|}
end_function
begin_macro
name|Q_DESTRUCTOR_FUNCTION
argument_list|(
argument|qUnregisterWidgetsVariant
argument_list|)
end_macro
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
