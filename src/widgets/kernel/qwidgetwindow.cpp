begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"private/qwindow_p.h"
end_include
begin_include
include|#
directive|include
file|"qwidgetwindow_qpa_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qapplication_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|<QtGui/qaccessible.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<private/qwidgetbackingstore_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformtheme.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformwindow.h>
end_include
begin_include
include|#
directive|include
file|<private/qgesturemanager_p.h>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_WIDGETS_EXPORT
specifier|extern
name|bool
name|qt_tab_all_widgets
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|qt_button_down
name|QWidget
modifier|*
name|qt_button_down
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qt_button_down
comment|// widget got last button-down
end_comment
begin_decl_stmt
DECL|variable|qt_tablet_target
specifier|static
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|qt_tablet_target
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|// popup control
end_comment
begin_decl_stmt
DECL|variable|qt_popup_down
name|QWidget
modifier|*
name|qt_popup_down
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|qt_popup_down
comment|// popup that contains the pressed widget
end_comment
begin_decl_stmt
specifier|extern
name|int
name|openPopupCount
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_replay_popup_mouse_event
name|bool
name|qt_replay_popup_mouse_event
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|bool
name|qt_try_modal
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QEvent
operator|::
name|Type
name|type
parameter_list|)
function_decl|;
end_function_decl
begin_class
DECL|class|QWidgetWindowPrivate
class|class
name|QWidgetWindowPrivate
super|:
specifier|public
name|QWindowPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QWidgetWindow
parameter_list|)
specifier|public
private|:
DECL|function|eventReceiver
name|QWindow
modifier|*
name|eventReceiver
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidgetWindow
argument_list|)
expr_stmt|;
name|QWindow
modifier|*
name|w
init|=
name|q
decl_stmt|;
while|while
condition|(
name|w
operator|->
name|parent
argument_list|()
operator|&&
name|qobject_cast
argument_list|<
name|QWidgetWindow
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|&&
name|qobject_cast
argument_list|<
name|QWidgetWindow
operator|*
argument_list|>
argument_list|(
name|w
operator|->
name|parent
argument_list|()
argument_list|)
condition|)
block|{
name|w
operator|=
name|w
operator|->
name|parent
argument_list|()
expr_stmt|;
block|}
return|return
name|w
return|;
block|}
DECL|function|clearFocusObject
name|void
name|clearFocusObject
parameter_list|()
block|{
if|if
condition|(
name|QApplicationPrivate
operator|::
name|focus_widget
condition|)
name|QApplicationPrivate
operator|::
name|focus_widget
operator|->
name|clearFocus
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|QWidgetWindow
name|QWidgetWindow
operator|::
name|QWidgetWindow
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QWindow
argument_list|(
operator|*
operator|new
name|QWidgetWindowPrivate
argument_list|()
argument_list|,
literal|0
argument_list|)
member_init_list|,
name|m_widget
argument_list|(
name|widget
argument_list|)
block|{
name|updateObjectName
argument_list|()
expr_stmt|;
comment|// Enable QOpenGLWidget/QQuickWidget children if the platform plugin supports it,
comment|// and the application developer has not explicitly disabled it.
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|RasterGLSurface
argument_list|)
operator|&&
operator|!
name|QApplication
operator|::
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_ForceRasterWidgets
argument_list|)
condition|)
block|{
name|setSurfaceType
argument_list|(
name|QSurface
operator|::
name|RasterGLSurface
argument_list|)
expr_stmt|;
block|}
name|connect
argument_list|(
name|m_widget
argument_list|,
operator|&
name|QObject
operator|::
name|objectNameChanged
argument_list|,
name|this
argument_list|,
operator|&
name|QWidgetWindow
operator|::
name|updateObjectName
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|screenChanged
argument_list|(
name|QScreen
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|repaintWindow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWidgetWindow
name|QWidgetWindow
operator|::
name|~
name|QWidgetWindow
parameter_list|()
block|{ }
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_function
DECL|function|accessibleRoot
name|QAccessibleInterface
modifier|*
name|QWidgetWindow
operator|::
name|accessibleRoot
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_widget
condition|)
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|m_widget
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|focusObject
name|QObject
modifier|*
name|QWidgetWindow
operator|::
name|focusObject
parameter_list|()
specifier|const
block|{
name|QWidget
modifier|*
name|widget
init|=
name|m_widget
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
name|widget
operator|=
name|m_widget
expr_stmt|;
return|return
name|widget
return|;
block|}
end_function
begin_function
DECL|function|event
name|bool
name|QWidgetWindow
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|m_widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
comment|// \a event is uninteresting for QWidgetWindow, the event was probably
comment|// generated before WA_DontShowOnScreen was set
return|return
name|m_widget
operator|->
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|Close
case|:
name|handleCloseEvent
argument_list|(
cast|static_cast
argument_list|<
name|QCloseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|Enter
case|:
case|case
name|QEvent
operator|::
name|Leave
case|:
name|handleEnterLeaveEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|// these should not be sent to QWidget, the corresponding events
comment|// are sent by QApplicationPrivate::notifyActiveWindowChange()
case|case
name|QEvent
operator|::
name|FocusIn
case|:
name|handleFocusInEvent
argument_list|(
cast|static_cast
argument_list|<
name|QFocusEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fallthrough
case|case
name|QEvent
operator|::
name|FocusOut
case|:
block|{
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessible
operator|::
name|State
name|state
decl_stmt|;
name|state
operator|.
name|active
operator|=
literal|true
expr_stmt|;
name|QAccessibleStateChangeEvent
name|ev
argument_list|(
name|widget
argument_list|()
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|ev
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
case|case
name|QEvent
operator|::
name|FocusAboutToChange
case|:
if|if
condition|(
name|QApplicationPrivate
operator|::
name|focus_widget
condition|)
block|{
if|if
condition|(
name|QApplicationPrivate
operator|::
name|focus_widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
condition|)
name|qApp
operator|->
name|inputMethod
argument_list|()
operator|->
name|commit
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|QApplicationPrivate
operator|::
name|focus_widget
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|KeyPress
case|:
case|case
name|QEvent
operator|::
name|KeyRelease
case|:
case|case
name|QEvent
operator|::
name|ShortcutOverride
case|:
name|handleKeyEvent
argument_list|(
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|MouseMove
case|:
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
name|handleMouseEvent
argument_list|(
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|NonClientAreaMouseMove
case|:
case|case
name|QEvent
operator|::
name|NonClientAreaMouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|NonClientAreaMouseButtonRelease
case|:
case|case
name|QEvent
operator|::
name|NonClientAreaMouseButtonDblClick
case|:
name|handleNonClientAreaMouseEvent
argument_list|(
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
case|case
name|QEvent
operator|::
name|TouchUpdate
case|:
case|case
name|QEvent
operator|::
name|TouchEnd
case|:
case|case
name|QEvent
operator|::
name|TouchCancel
case|:
name|handleTouchEvent
argument_list|(
cast|static_cast
argument_list|<
name|QTouchEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|Move
case|:
name|handleMoveEvent
argument_list|(
cast|static_cast
argument_list|<
name|QMoveEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|Resize
case|:
name|handleResizeEvent
argument_list|(
cast|static_cast
argument_list|<
name|QResizeEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
case|case
name|QEvent
operator|::
name|Wheel
case|:
name|handleWheelEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWheelEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
case|case
name|QEvent
operator|::
name|DragEnter
case|:
case|case
name|QEvent
operator|::
name|DragMove
case|:
name|handleDragEnterMoveEvent
argument_list|(
cast|static_cast
argument_list|<
name|QDragMoveEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|DragLeave
case|:
name|handleDragLeaveEvent
argument_list|(
cast|static_cast
argument_list|<
name|QDragLeaveEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|Drop
case|:
name|handleDropEvent
argument_list|(
cast|static_cast
argument_list|<
name|QDropEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
case|case
name|QEvent
operator|::
name|Expose
case|:
name|handleExposeEvent
argument_list|(
cast|static_cast
argument_list|<
name|QExposeEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|WindowStateChange
case|:
name|handleWindowStateChangedEvent
argument_list|(
cast|static_cast
argument_list|<
name|QWindowStateChangeEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|ThemeChange
case|:
block|{
name|QEvent
name|widgetEvent
argument_list|(
name|QEvent
operator|::
name|ThemeChange
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|m_widget
argument_list|,
operator|&
name|widgetEvent
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
case|case
name|QEvent
operator|::
name|TabletPress
case|:
case|case
name|QEvent
operator|::
name|TabletMove
case|:
case|case
name|QEvent
operator|::
name|TabletRelease
case|:
name|handleTabletEvent
argument_list|(
cast|static_cast
argument_list|<
name|QTabletEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
case|case
name|QEvent
operator|::
name|NativeGesture
case|:
name|handleGestureEvent
argument_list|(
cast|static_cast
argument_list|<
name|QNativeGestureEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
case|case
name|QEvent
operator|::
name|ContextMenu
case|:
name|handleContextMenuEvent
argument_list|(
cast|static_cast
argument_list|<
name|QContextMenuEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
comment|// Handing show events to widgets (see below) here would cause them to be triggered twice
case|case
name|QEvent
operator|::
name|Show
case|:
case|case
name|QEvent
operator|::
name|Hide
case|:
return|return
name|QWindow
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
case|case
name|QEvent
operator|::
name|WindowBlocked
case|:
name|qt_button_down
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|m_widget
operator|->
name|event
argument_list|(
name|event
argument_list|)
operator|||
name|QWindow
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|qt_last_mouse_receiver
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|qt_last_mouse_receiver
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|handleEnterLeaveEvent
name|void
name|QWidgetWindow
operator|::
name|handleEnterLeaveEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Leave
condition|)
block|{
name|QWidget
modifier|*
name|enter
init|=
literal|0
decl_stmt|;
comment|// Check from window system event queue if the next queued enter targets a window
comment|// in the same window hierarchy (e.g. enter a child of this window). If so,
comment|// remove the enter event from queue and handle both in single dispatch.
name|QWindowSystemInterfacePrivate
operator|::
name|EnterEvent
modifier|*
name|systemEvent
init|=
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|EnterEvent
operator|*
argument_list|>
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|peekWindowSystemEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|Enter
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QPointF
name|globalPosF
init|=
name|systemEvent
condition|?
name|systemEvent
operator|->
name|globalPos
else|:
name|QGuiApplicationPrivate
operator|::
name|lastCursorPosition
decl_stmt|;
if|if
condition|(
name|systemEvent
condition|)
block|{
if|if
condition|(
name|QWidgetWindow
modifier|*
name|enterWindow
init|=
name|qobject_cast
argument_list|<
name|QWidgetWindow
operator|*
argument_list|>
argument_list|(
name|systemEvent
operator|->
name|enter
argument_list|)
condition|)
block|{
name|QWindow
modifier|*
name|thisParent
init|=
name|this
decl_stmt|;
name|QWindow
modifier|*
name|enterParent
init|=
name|enterWindow
decl_stmt|;
while|while
condition|(
name|thisParent
operator|->
name|parent
argument_list|()
condition|)
name|thisParent
operator|=
name|thisParent
operator|->
name|parent
argument_list|()
expr_stmt|;
while|while
condition|(
name|enterParent
operator|->
name|parent
argument_list|()
condition|)
name|enterParent
operator|=
name|enterParent
operator|->
name|parent
argument_list|()
expr_stmt|;
if|if
condition|(
name|thisParent
operator|==
name|enterParent
condition|)
block|{
name|QGuiApplicationPrivate
operator|::
name|currentMouseWindow
operator|=
name|enterWindow
expr_stmt|;
name|enter
operator|=
name|enterWindow
operator|->
name|widget
argument_list|()
expr_stmt|;
name|QWindowSystemInterfacePrivate
operator|::
name|removeWindowSystemEvent
argument_list|(
name|systemEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Enter-leave between sibling widgets is ignored when there is a mousegrabber - this makes
comment|// both native and non-native widgets work similarly.
comment|// When mousegrabbing, leaves are only generated if leaving the parent window.
if|if
condition|(
operator|!
name|enter
operator|||
operator|!
name|QWidget
operator|::
name|mouseGrabber
argument_list|()
condition|)
block|{
comment|// Preferred leave target is the last mouse receiver, unless it has native window,
comment|// in which case it is assumed to receive it's own leave event when relevant.
name|QWidget
modifier|*
name|leave
init|=
name|m_widget
decl_stmt|;
if|if
condition|(
name|qt_last_mouse_receiver
operator|&&
operator|!
name|qt_last_mouse_receiver
operator|->
name|internalWinId
argument_list|()
condition|)
name|leave
operator|=
name|qt_last_mouse_receiver
operator|.
name|data
argument_list|()
expr_stmt|;
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
name|enter
argument_list|,
name|leave
argument_list|,
name|globalPosF
argument_list|)
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
name|enter
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|QEnterEvent
modifier|*
name|ee
init|=
cast|static_cast
argument_list|<
name|QEnterEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|child
init|=
name|m_widget
operator|->
name|childAt
argument_list|(
name|ee
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|receiver
init|=
name|child
condition|?
name|child
else|:
name|m_widget
decl_stmt|;
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
name|receiver
argument_list|,
literal|0
argument_list|,
name|ee
operator|->
name|screenPos
argument_list|()
argument_list|)
expr_stmt|;
name|qt_last_mouse_receiver
operator|=
name|receiver
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|getFocusWidget
name|QWidget
modifier|*
name|QWidgetWindow
operator|::
name|getFocusWidget
parameter_list|(
name|FocusWidgets
name|fw
parameter_list|)
block|{
name|QWidget
modifier|*
name|tlw
init|=
name|m_widget
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|tlw
operator|->
name|nextInFocusChain
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|last
init|=
name|tlw
decl_stmt|;
name|uint
name|focus_flag
init|=
name|qt_tab_all_widgets
argument_list|()
condition|?
name|Qt
operator|::
name|TabFocus
else|:
name|Qt
operator|::
name|StrongFocus
decl_stmt|;
while|while
condition|(
name|w
operator|!=
name|tlw
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|w
operator|->
name|focusPolicy
argument_list|()
operator|&
name|focus_flag
operator|)
operator|==
name|focus_flag
operator|)
operator|&&
name|w
operator|->
name|isVisibleTo
argument_list|(
name|m_widget
argument_list|)
operator|&&
name|w
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|last
operator|=
name|w
expr_stmt|;
if|if
condition|(
name|fw
operator|==
name|FirstFocusWidget
condition|)
break|break;
block|}
name|w
operator|=
name|w
operator|->
name|nextInFocusChain
argument_list|()
expr_stmt|;
block|}
return|return
name|last
return|;
block|}
end_function
begin_function
DECL|function|handleFocusInEvent
name|void
name|QWidgetWindow
operator|::
name|handleFocusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|e
parameter_list|)
block|{
name|QWidget
modifier|*
name|focusWidget
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|reason
argument_list|()
operator|==
name|Qt
operator|::
name|BacktabFocusReason
condition|)
name|focusWidget
operator|=
name|getFocusWidget
argument_list|(
name|LastFocusWidget
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|e
operator|->
name|reason
argument_list|()
operator|==
name|Qt
operator|::
name|TabFocusReason
condition|)
name|focusWidget
operator|=
name|getFocusWidget
argument_list|(
name|FirstFocusWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|focusWidget
operator|!=
literal|0
condition|)
name|focusWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleNonClientAreaMouseEvent
name|void
name|QWidgetWindow
operator|::
name|handleNonClientAreaMouseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|m_widget
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleMouseEvent
name|void
name|QWidgetWindow
operator|::
name|handleMouseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
specifier|static
specifier|const
name|QEvent
operator|::
name|Type
name|contextMenuTrigger
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|ContextMenuOnMouseRelease
argument_list|)
operator|.
name|toBool
argument_list|()
condition|?
name|QEvent
operator|::
name|MouseButtonRelease
else|:
name|QEvent
operator|::
name|MouseButtonPress
decl_stmt|;
if|if
condition|(
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|inPopupMode
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|activePopupWidget
init|=
name|qApp
operator|->
name|activePopupWidget
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|popup
init|=
name|activePopupWidget
decl_stmt|;
name|QPoint
name|mapped
init|=
name|event
operator|->
name|pos
argument_list|()
decl_stmt|;
if|if
condition|(
name|popup
operator|!=
name|m_widget
condition|)
name|mapped
operator|=
name|popup
operator|->
name|mapFromGlobal
argument_list|(
name|event
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|releaseAfter
init|=
literal|false
decl_stmt|;
name|QWidget
modifier|*
name|popupChild
init|=
name|popup
operator|->
name|childAt
argument_list|(
name|mapped
argument_list|)
decl_stmt|;
if|if
condition|(
name|popup
operator|!=
name|qt_popup_down
condition|)
block|{
name|qt_button_down
operator|=
literal|0
expr_stmt|;
name|qt_popup_down
operator|=
literal|0
expr_stmt|;
block|}
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
name|qt_button_down
operator|=
name|popupChild
expr_stmt|;
name|qt_popup_down
operator|=
name|popup
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|releaseAfter
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
comment|// nothing for mouse move
block|}
name|int
name|oldOpenPopupCount
init|=
name|openPopupCount
decl_stmt|;
if|if
condition|(
name|popup
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
comment|// deliver event
name|qt_replay_popup_mouse_event
operator|=
literal|false
expr_stmt|;
name|QWidget
modifier|*
name|receiver
init|=
name|popup
decl_stmt|;
name|QPoint
name|widgetPos
init|=
name|mapped
decl_stmt|;
if|if
condition|(
name|qt_button_down
condition|)
name|receiver
operator|=
name|qt_button_down
expr_stmt|;
elseif|else
if|if
condition|(
name|popupChild
condition|)
name|receiver
operator|=
name|popupChild
expr_stmt|;
if|if
condition|(
name|receiver
operator|!=
name|popup
condition|)
name|widgetPos
operator|=
name|receiver
operator|->
name|mapFromGlobal
argument_list|(
name|event
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|alien
init|=
name|m_widget
operator|->
name|childAt
argument_list|(
name|m_widget
operator|->
name|mapFromGlobal
argument_list|(
name|event
operator|->
name|globalPos
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QMouseEvent
name|e
argument_list|(
name|event
operator|->
name|type
argument_list|()
argument_list|,
name|widgetPos
argument_list|,
name|event
operator|->
name|windowPos
argument_list|()
argument_list|,
name|event
operator|->
name|screenPos
argument_list|()
argument_list|,
name|event
operator|->
name|button
argument_list|()
argument_list|,
name|event
operator|->
name|buttons
argument_list|()
argument_list|,
name|event
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QGuiApplicationPrivate
operator|::
name|setMouseEventSource
argument_list|(
operator|&
name|e
argument_list|,
name|QGuiApplicationPrivate
operator|::
name|mouseEventSource
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTimestamp
argument_list|(
name|event
operator|->
name|timestamp
argument_list|()
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|sendMouseEvent
argument_list|(
name|receiver
argument_list|,
operator|&
name|e
argument_list|,
name|alien
argument_list|,
name|m_widget
argument_list|,
operator|&
name|qt_button_down
argument_list|,
name|qt_last_mouse_receiver
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// close disabled popups when a mouse button is pressed or released
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|popup
operator|->
name|close
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|qApp
operator|->
name|activePopupWidget
argument_list|()
operator|!=
name|activePopupWidget
operator|&&
name|qt_replay_popup_mouse_event
condition|)
block|{
if|if
condition|(
name|m_widget
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Popup
condition|)
name|qt_button_down
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonPress
condition|)
block|{
comment|// the popup disappeared, replay the mouse press event
name|QWidget
modifier|*
name|w
init|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|event
operator|->
name|globalPos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|&&
operator|!
name|QApplicationPrivate
operator|::
name|isBlockedByModal
argument_list|(
name|w
argument_list|)
condition|)
block|{
comment|// activate window of the widget under mouse pointer
if|if
condition|(
operator|!
name|w
operator|->
name|isActiveWindow
argument_list|()
condition|)
block|{
name|w
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
name|w
operator|->
name|raise
argument_list|()
expr_stmt|;
block|}
name|QWindow
modifier|*
name|win
init|=
name|w
operator|->
name|windowHandle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|win
condition|)
name|win
operator|=
name|w
operator|->
name|nativeParentWidget
argument_list|()
operator|->
name|windowHandle
argument_list|()
expr_stmt|;
if|if
condition|(
name|win
operator|&&
name|win
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|event
operator|->
name|globalPos
argument_list|()
argument_list|)
condition|)
block|{
comment|// Use postEvent() to ensure the local QEventLoop terminates when called from QMenu::exec()
specifier|const
name|QPoint
name|localPos
init|=
name|win
operator|->
name|mapFromGlobal
argument_list|(
name|event
operator|->
name|globalPos
argument_list|()
argument_list|)
decl_stmt|;
name|QMouseEvent
modifier|*
name|e
init|=
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonPress
argument_list|,
name|localPos
argument_list|,
name|localPos
argument_list|,
name|event
operator|->
name|globalPos
argument_list|()
argument_list|,
name|event
operator|->
name|button
argument_list|()
argument_list|,
name|event
operator|->
name|buttons
argument_list|()
argument_list|,
name|event
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QCoreApplicationPrivate
operator|::
name|setEventSpontaneous
argument_list|(
name|e
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|setMouseEventSource
argument_list|(
name|e
argument_list|,
name|QGuiApplicationPrivate
operator|::
name|mouseEventSource
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|->
name|setTimestamp
argument_list|(
name|event
operator|->
name|timestamp
argument_list|()
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|win
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|qt_replay_popup_mouse_event
operator|=
literal|false
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|contextMenuTrigger
operator|&&
name|event
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|RightButton
operator|&&
operator|(
name|openPopupCount
operator|==
name|oldOpenPopupCount
operator|)
condition|)
block|{
name|QWidget
modifier|*
name|popupEvent
init|=
name|popup
decl_stmt|;
if|if
condition|(
name|qt_button_down
condition|)
name|popupEvent
operator|=
name|qt_button_down
expr_stmt|;
elseif|else
if|if
condition|(
name|popupChild
condition|)
name|popupEvent
operator|=
name|popupChild
expr_stmt|;
name|QContextMenuEvent
name|e
argument_list|(
name|QContextMenuEvent
operator|::
name|Mouse
argument_list|,
name|mapped
argument_list|,
name|event
operator|->
name|globalPos
argument_list|()
argument_list|,
name|event
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|popupEvent
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|releaseAfter
condition|)
block|{
name|qt_button_down
operator|=
literal|0
expr_stmt|;
name|qt_popup_down
operator|=
literal|0
expr_stmt|;
block|}
return|return;
block|}
comment|// modal event handling
if|if
condition|(
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|modalState
argument_list|()
operator|&&
operator|!
name|qt_try_modal
argument_list|(
name|m_widget
argument_list|,
name|event
operator|->
name|type
argument_list|()
argument_list|)
condition|)
return|return;
comment|// which child should have it?
name|QWidget
modifier|*
name|widget
init|=
name|m_widget
operator|->
name|childAt
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|mapped
init|=
name|event
operator|->
name|pos
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
name|widget
operator|=
name|m_widget
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonPress
condition|)
name|qt_button_down
operator|=
name|widget
expr_stmt|;
name|QWidget
modifier|*
name|receiver
init|=
name|QApplicationPrivate
operator|::
name|pickMouseReceiver
argument_list|(
name|m_widget
argument_list|,
name|event
operator|->
name|windowPos
argument_list|()
operator|.
name|toPoint
argument_list|()
argument_list|,
operator|&
name|mapped
argument_list|,
name|event
operator|->
name|type
argument_list|()
argument_list|,
name|event
operator|->
name|buttons
argument_list|()
argument_list|,
name|qt_button_down
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|receiver
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
condition|)
name|QApplicationPrivate
operator|::
name|mouse_buttons
operator|&=
operator|~
name|event
operator|->
name|button
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|(
name|event
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|MouseButtonPress
operator|)
operator|||
operator|!
operator|(
name|event
operator|->
name|flags
argument_list|()
operator|.
name|testFlag
argument_list|(
name|Qt
operator|::
name|MouseEventCreatedDoubleClick
argument_list|)
operator|)
condition|)
block|{
comment|// The preceding statement excludes MouseButtonPress events which caused
comment|// creation of a MouseButtonDblClick event. QTBUG-25831
name|QMouseEvent
name|translated
argument_list|(
name|event
operator|->
name|type
argument_list|()
argument_list|,
name|mapped
argument_list|,
name|event
operator|->
name|windowPos
argument_list|()
argument_list|,
name|event
operator|->
name|screenPos
argument_list|()
argument_list|,
name|event
operator|->
name|button
argument_list|()
argument_list|,
name|event
operator|->
name|buttons
argument_list|()
argument_list|,
name|event
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QGuiApplicationPrivate
operator|::
name|setMouseEventSource
argument_list|(
operator|&
name|translated
argument_list|,
name|QGuiApplicationPrivate
operator|::
name|mouseEventSource
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|translated
operator|.
name|setTimestamp
argument_list|(
name|event
operator|->
name|timestamp
argument_list|()
argument_list|)
expr_stmt|;
name|QApplicationPrivate
operator|::
name|sendMouseEvent
argument_list|(
name|receiver
argument_list|,
operator|&
name|translated
argument_list|,
name|widget
argument_list|,
name|m_widget
argument_list|,
operator|&
name|qt_button_down
argument_list|,
name|qt_last_mouse_receiver
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|contextMenuTrigger
operator|&&
name|event
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|RightButton
condition|)
block|{
name|QContextMenuEvent
name|e
argument_list|(
name|QContextMenuEvent
operator|::
name|Mouse
argument_list|,
name|mapped
argument_list|,
name|event
operator|->
name|globalPos
argument_list|()
argument_list|,
name|event
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|receiver
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|handleTouchEvent
name|void
name|QWidgetWindow
operator|::
name|handleTouchEvent
parameter_list|(
name|QTouchEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|TouchCancel
condition|)
block|{
name|QApplicationPrivate
operator|::
name|translateTouchCancel
argument_list|(
name|event
operator|->
name|device
argument_list|()
argument_list|,
name|event
operator|->
name|timestamp
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qApp
operator|->
name|d_func
argument_list|()
operator|->
name|inPopupMode
argument_list|()
condition|)
block|{
comment|// Ignore touch events for popups. This will cause QGuiApplication to synthesise mouse
comment|// events instead, which QWidgetWindow::handleMouseEvent will forward correctly:
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|event
operator|->
name|setAccepted
argument_list|(
name|QApplicationPrivate
operator|::
name|translateRawTouchEvent
argument_list|(
name|m_widget
argument_list|,
name|event
operator|->
name|device
argument_list|()
argument_list|,
name|event
operator|->
name|touchPoints
argument_list|()
argument_list|,
name|event
operator|->
name|timestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleKeyEvent
name|void
name|QWidgetWindow
operator|::
name|handleKeyEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|modalState
argument_list|()
operator|&&
operator|!
name|qt_try_modal
argument_list|(
name|m_widget
argument_list|,
name|event
operator|->
name|type
argument_list|()
argument_list|)
condition|)
return|return;
name|QObject
modifier|*
name|receiver
init|=
name|QWidget
operator|::
name|keyboardGrabber
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|receiver
operator|&&
name|QApplicationPrivate
operator|::
name|inPopupMode
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|popup
init|=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|popupFocusWidget
init|=
name|popup
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
name|receiver
operator|=
name|popupFocusWidget
condition|?
name|popupFocusWidget
else|:
name|popup
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|receiver
condition|)
name|receiver
operator|=
name|focusObject
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|receiver
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateGeometry
name|void
name|QWidgetWindow
operator|::
name|updateGeometry
parameter_list|()
block|{
if|if
condition|(
name|m_widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OutsideWSRange
argument_list|)
condition|)
return|return;
specifier|const
name|QMargins
name|margins
init|=
name|frameMargins
argument_list|()
decl_stmt|;
name|m_widget
operator|->
name|data
operator|->
name|crect
operator|=
name|geometry
argument_list|()
expr_stmt|;
name|QTLWExtra
modifier|*
name|te
init|=
name|m_widget
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
decl_stmt|;
name|te
operator|->
name|posIncludesFrame
operator|=
literal|false
expr_stmt|;
name|te
operator|->
name|frameStrut
operator|.
name|setCoords
argument_list|(
name|margins
operator|.
name|left
argument_list|()
argument_list|,
name|margins
operator|.
name|top
argument_list|()
argument_list|,
name|margins
operator|.
name|right
argument_list|()
argument_list|,
name|margins
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|m_widget
operator|->
name|data
operator|->
name|fstrut_dirty
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|// Invalidates the backing store buffer and repaints immediately.
end_comment
begin_comment
comment|// ### Qt 5.4: replace with QUpdateWindowRequestEvent.
end_comment
begin_function
DECL|function|repaintWindow
name|void
name|QWidgetWindow
operator|::
name|repaintWindow
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_widget
operator|->
name|isVisible
argument_list|()
operator|||
operator|!
name|m_widget
operator|->
name|updatesEnabled
argument_list|()
condition|)
return|return;
name|QTLWExtra
modifier|*
name|tlwExtra
init|=
name|m_widget
operator|->
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
if|if
condition|(
name|tlwExtra
operator|&&
operator|!
name|tlwExtra
operator|->
name|inTopLevelResize
operator|&&
name|tlwExtra
operator|->
name|backingStore
condition|)
name|tlwExtra
operator|->
name|backingStoreTracker
operator|->
name|markDirty
argument_list|(
name|m_widget
operator|->
name|rect
argument_list|()
argument_list|,
name|m_widget
argument_list|,
name|QWidgetBackingStore
operator|::
name|UpdateNow
argument_list|,
name|QWidgetBackingStore
operator|::
name|BufferInvalid
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
name|Qt
operator|::
name|WindowState
name|effectiveState
parameter_list|(
name|Qt
operator|::
name|WindowStates
name|state
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Store normal geometry used for saving application settings.
end_comment
begin_function
DECL|function|updateNormalGeometry
name|void
name|QWidgetWindow
operator|::
name|updateNormalGeometry
parameter_list|()
block|{
name|QTLWExtra
modifier|*
name|tle
init|=
name|m_widget
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tle
condition|)
return|return;
comment|// Ask platform window, default to widget geometry.
name|QRect
name|normalGeometry
decl_stmt|;
if|if
condition|(
specifier|const
name|QPlatformWindow
modifier|*
name|pw
init|=
name|handle
argument_list|()
condition|)
name|normalGeometry
operator|=
name|pw
operator|->
name|normalGeometry
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|normalGeometry
operator|.
name|isValid
argument_list|()
operator|&&
name|effectiveState
argument_list|(
name|m_widget
operator|->
name|windowState
argument_list|()
argument_list|)
operator|==
name|Qt
operator|::
name|WindowNoState
condition|)
name|normalGeometry
operator|=
name|m_widget
operator|->
name|geometry
argument_list|()
expr_stmt|;
if|if
condition|(
name|normalGeometry
operator|.
name|isValid
argument_list|()
condition|)
name|tle
operator|->
name|normalGeometry
operator|=
name|normalGeometry
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleMoveEvent
name|void
name|QWidgetWindow
operator|::
name|handleMoveEvent
parameter_list|(
name|QMoveEvent
modifier|*
name|event
parameter_list|)
block|{
name|updateGeometry
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|m_widget
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleResizeEvent
name|void
name|QWidgetWindow
operator|::
name|handleResizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|event
parameter_list|)
block|{
name|QSize
name|oldSize
init|=
name|m_widget
operator|->
name|data
operator|->
name|crect
operator|.
name|size
argument_list|()
decl_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|m_widget
argument_list|,
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_widget
operator|->
name|d_func
argument_list|()
operator|->
name|paintOnScreen
argument_list|()
condition|)
block|{
name|QRegion
name|updateRegion
argument_list|(
name|geometry
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_StaticContents
argument_list|)
condition|)
name|updateRegion
operator|-=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|oldSize
operator|.
name|width
argument_list|()
argument_list|,
name|oldSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|m_widget
operator|->
name|d_func
argument_list|()
operator|->
name|syncBackingStore
argument_list|(
name|updateRegion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_widget
operator|->
name|d_func
argument_list|()
operator|->
name|syncBackingStore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleCloseEvent
name|void
name|QWidgetWindow
operator|::
name|handleCloseEvent
parameter_list|(
name|QCloseEvent
modifier|*
name|event
parameter_list|)
block|{
name|bool
name|is_closing
init|=
name|m_widget
operator|->
name|d_func
argument_list|()
operator|->
name|close_helper
argument_list|(
name|QWidgetPrivate
operator|::
name|CloseWithSpontaneousEvent
argument_list|)
decl_stmt|;
name|event
operator|->
name|setAccepted
argument_list|(
name|is_closing
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_function
DECL|function|handleWheelEvent
name|void
name|QWidgetWindow
operator|::
name|handleWheelEvent
parameter_list|(
name|QWheelEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|modalState
argument_list|()
operator|&&
operator|!
name|qt_try_modal
argument_list|(
name|m_widget
argument_list|,
name|event
operator|->
name|type
argument_list|()
argument_list|)
condition|)
return|return;
comment|// which child should have it?
name|QWidget
modifier|*
name|widget
init|=
name|m_widget
operator|->
name|childAt
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
name|widget
operator|=
name|m_widget
expr_stmt|;
name|QPoint
name|mapped
init|=
name|widget
operator|->
name|mapFrom
argument_list|(
name|m_widget
argument_list|,
name|event
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
name|QWheelEvent
name|translated
argument_list|(
name|mapped
argument_list|,
name|event
operator|->
name|globalPos
argument_list|()
argument_list|,
name|event
operator|->
name|pixelDelta
argument_list|()
argument_list|,
name|event
operator|->
name|angleDelta
argument_list|()
argument_list|,
name|event
operator|->
name|delta
argument_list|()
argument_list|,
name|event
operator|->
name|orientation
argument_list|()
argument_list|,
name|event
operator|->
name|buttons
argument_list|()
argument_list|,
name|event
operator|->
name|modifiers
argument_list|()
argument_list|,
name|event
operator|->
name|phase
argument_list|()
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|translated
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_WHEELEVENT
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function
DECL|function|handleDragEnterMoveEvent
name|void
name|QWidgetWindow
operator|::
name|handleDragEnterMoveEvent
parameter_list|(
name|QDragMoveEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|DragMove
operator|||
operator|!
name|m_dragTarget
argument_list|)
expr_stmt|;
comment|// Find a target widget under mouse that accepts drops (QTBUG-22987).
name|QWidget
modifier|*
name|widget
init|=
name|m_widget
operator|->
name|childAt
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
name|widget
operator|=
name|m_widget
expr_stmt|;
for|for
control|(
init|;
name|widget
operator|&&
operator|!
name|widget
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|widget
operator|->
name|acceptDrops
argument_list|()
condition|;
name|widget
operator|=
name|widget
operator|->
name|parentWidget
argument_list|()
control|)
empty_stmt|;
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|acceptDrops
argument_list|()
condition|)
name|widget
operator|=
literal|0
expr_stmt|;
comment|// Target widget unchanged: DragMove
if|if
condition|(
name|widget
operator|&&
name|widget
operator|==
name|m_dragTarget
operator|.
name|data
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|DragMove
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|mapped
init|=
name|widget
operator|->
name|mapFromGlobal
argument_list|(
name|m_widget
operator|->
name|mapToGlobal
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QDragMoveEvent
name|translated
argument_list|(
name|mapped
argument_list|,
name|event
operator|->
name|possibleActions
argument_list|()
argument_list|,
name|event
operator|->
name|mimeData
argument_list|()
argument_list|,
name|event
operator|->
name|mouseButtons
argument_list|()
argument_list|,
name|event
operator|->
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|translated
operator|.
name|setDropAction
argument_list|(
name|event
operator|->
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|isAccepted
argument_list|()
condition|)
block|{
comment|// Handling 'DragEnter' should suffice for the application.
name|translated
operator|.
name|accept
argument_list|()
expr_stmt|;
name|translated
operator|.
name|setDropAction
argument_list|(
name|event
operator|->
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|translated
argument_list|)
expr_stmt|;
if|if
condition|(
name|translated
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
name|event
operator|->
name|setDropAction
argument_list|(
name|translated
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Target widget changed: Send DragLeave to previous, DragEnter to new if there is any
if|if
condition|(
name|m_dragTarget
operator|.
name|data
argument_list|()
condition|)
block|{
name|QDragLeaveEvent
name|le
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|m_dragTarget
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|le
argument_list|)
expr_stmt|;
name|m_dragTarget
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|widget
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|m_dragTarget
operator|=
name|widget
expr_stmt|;
specifier|const
name|QPoint
name|mapped
init|=
name|widget
operator|->
name|mapFromGlobal
argument_list|(
name|m_widget
operator|->
name|mapToGlobal
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QDragEnterEvent
name|translated
argument_list|(
name|mapped
argument_list|,
name|event
operator|->
name|possibleActions
argument_list|()
argument_list|,
name|event
operator|->
name|mimeData
argument_list|()
argument_list|,
name|event
operator|->
name|mouseButtons
argument_list|()
argument_list|,
name|event
operator|->
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|translated
argument_list|)
expr_stmt|;
if|if
condition|(
name|translated
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
name|event
operator|->
name|setDropAction
argument_list|(
name|translated
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleDragLeaveEvent
name|void
name|QWidgetWindow
operator|::
name|handleDragLeaveEvent
parameter_list|(
name|QDragLeaveEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|m_dragTarget
condition|)
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|m_dragTarget
operator|.
name|data
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|m_dragTarget
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleDropEvent
name|void
name|QWidgetWindow
operator|::
name|handleDropEvent
parameter_list|(
name|QDropEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|m_dragTarget
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|m_widget
operator|<<
literal|": No drag target set."
expr_stmt|;
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|const
name|QPoint
name|mapped
init|=
name|m_dragTarget
operator|.
name|data
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|m_widget
operator|->
name|mapToGlobal
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QDropEvent
name|translated
argument_list|(
name|mapped
argument_list|,
name|event
operator|->
name|possibleActions
argument_list|()
argument_list|,
name|event
operator|->
name|mimeData
argument_list|()
argument_list|,
name|event
operator|->
name|mouseButtons
argument_list|()
argument_list|,
name|event
operator|->
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|m_dragTarget
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|translated
argument_list|)
expr_stmt|;
if|if
condition|(
name|translated
operator|.
name|isAccepted
argument_list|()
condition|)
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
name|event
operator|->
name|setDropAction
argument_list|(
name|translated
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
name|m_dragTarget
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_function
DECL|function|handleExposeEvent
name|void
name|QWidgetWindow
operator|::
name|handleExposeEvent
parameter_list|(
name|QExposeEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|isExposed
argument_list|()
condition|)
block|{
name|m_widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|event
operator|->
name|region
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// Exposed native widgets need to be marked dirty to get them repainted correctly.
if|if
condition|(
name|m_widget
operator|->
name|internalWinId
argument_list|()
operator|&&
operator|!
name|m_widget
operator|->
name|isWindow
argument_list|()
operator|&&
name|m_widget
operator|->
name|isVisible
argument_list|()
operator|&&
name|m_widget
operator|->
name|updatesEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|QWidgetBackingStore
modifier|*
name|bs
init|=
name|m_widget
operator|->
name|d_func
argument_list|()
operator|->
name|maybeBackingStore
argument_list|()
condition|)
name|bs
operator|->
name|markDirty
argument_list|(
name|event
operator|->
name|region
argument_list|()
argument_list|,
name|m_widget
argument_list|)
expr_stmt|;
block|}
name|m_widget
operator|->
name|d_func
argument_list|()
operator|->
name|syncBackingStore
argument_list|(
name|event
operator|->
name|region
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|m_widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleWindowStateChangedEvent
name|void
name|QWidgetWindow
operator|::
name|handleWindowStateChangedEvent
parameter_list|(
name|QWindowStateChangeEvent
modifier|*
name|event
parameter_list|)
block|{
comment|// QWindow does currently not know 'active'.
name|Qt
operator|::
name|WindowStates
name|eventState
init|=
name|event
operator|->
name|oldState
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|WindowStates
name|widgetState
init|=
name|m_widget
operator|->
name|windowState
argument_list|()
decl_stmt|;
if|if
condition|(
name|widgetState
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|eventState
operator||=
name|Qt
operator|::
name|WindowActive
expr_stmt|;
comment|// Determine the new widget state, remember maximized/full screen
comment|// during minimized.
switch|switch
condition|(
name|windowState
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|WindowNoState
case|:
name|widgetState
operator|&=
operator|~
operator|(
name|Qt
operator|::
name|WindowMinimized
operator||
name|Qt
operator|::
name|WindowMaximized
operator||
name|Qt
operator|::
name|WindowFullScreen
operator|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowMinimized
case|:
name|widgetState
operator||=
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowMaximized
case|:
name|updateNormalGeometry
argument_list|()
expr_stmt|;
name|widgetState
operator||=
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
name|widgetState
operator|&=
operator|~
operator|(
name|Qt
operator|::
name|WindowMinimized
operator||
name|Qt
operator|::
name|WindowFullScreen
operator|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowFullScreen
case|:
name|updateNormalGeometry
argument_list|()
expr_stmt|;
name|widgetState
operator||=
name|Qt
operator|::
name|WindowFullScreen
expr_stmt|;
name|widgetState
operator|&=
operator|~
operator|(
name|Qt
operator|::
name|WindowMinimized
operator|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowActive
case|:
comment|// Not handled by QWindow
break|break;
block|}
comment|// Sent event if the state changed (that is, it is not triggered by
comment|// QWidget::setWindowState(), which also sends an event to the widget).
if|if
condition|(
name|widgetState
operator|!=
name|int
argument_list|(
name|m_widget
operator|->
name|data
operator|->
name|window_state
argument_list|)
condition|)
block|{
name|m_widget
operator|->
name|data
operator|->
name|window_state
operator|=
name|widgetState
expr_stmt|;
name|QWindowStateChangeEvent
name|widgetEvent
argument_list|(
name|eventState
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|m_widget
argument_list|,
operator|&
name|widgetEvent
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|nativeEvent
name|bool
name|QWidgetWindow
operator|::
name|nativeEvent
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|eventType
parameter_list|,
name|void
modifier|*
name|message
parameter_list|,
name|long
modifier|*
name|result
parameter_list|)
block|{
return|return
name|m_widget
operator|->
name|nativeEvent
argument_list|(
name|eventType
argument_list|,
name|message
argument_list|,
name|result
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
end_ifndef
begin_function
DECL|function|handleTabletEvent
name|void
name|QWidgetWindow
operator|::
name|handleTabletEvent
parameter_list|(
name|QTabletEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|TabletPress
condition|)
block|{
name|QWidget
modifier|*
name|widget
init|=
name|m_widget
operator|->
name|childAt
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
name|widget
operator|=
name|m_widget
expr_stmt|;
name|qt_tablet_target
operator|=
name|widget
expr_stmt|;
block|}
if|if
condition|(
name|qt_tablet_target
condition|)
block|{
name|QPointF
name|delta
init|=
name|event
operator|->
name|globalPosF
argument_list|()
operator|-
name|event
operator|->
name|globalPos
argument_list|()
decl_stmt|;
name|QPointF
name|mapped
init|=
name|qt_tablet_target
operator|->
name|mapFromGlobal
argument_list|(
name|event
operator|->
name|globalPos
argument_list|()
argument_list|)
operator|+
name|delta
decl_stmt|;
name|QTabletEvent
name|ev
argument_list|(
name|event
operator|->
name|type
argument_list|()
argument_list|,
name|mapped
argument_list|,
name|event
operator|->
name|globalPosF
argument_list|()
argument_list|,
name|event
operator|->
name|device
argument_list|()
argument_list|,
name|event
operator|->
name|pointerType
argument_list|()
argument_list|,
name|event
operator|->
name|pressure
argument_list|()
argument_list|,
name|event
operator|->
name|xTilt
argument_list|()
argument_list|,
name|event
operator|->
name|yTilt
argument_list|()
argument_list|,
name|event
operator|->
name|tangentialPressure
argument_list|()
argument_list|,
name|event
operator|->
name|rotation
argument_list|()
argument_list|,
name|event
operator|->
name|z
argument_list|()
argument_list|,
name|event
operator|->
name|modifiers
argument_list|()
argument_list|,
name|event
operator|->
name|uniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|ev
operator|.
name|setTimestamp
argument_list|(
name|event
operator|->
name|timestamp
argument_list|()
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|qt_tablet_target
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|TabletRelease
condition|)
name|qt_tablet_target
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABLETEVENT
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_function
DECL|function|handleGestureEvent
name|void
name|QWidgetWindow
operator|::
name|handleGestureEvent
parameter_list|(
name|QNativeGestureEvent
modifier|*
name|e
parameter_list|)
block|{
comment|// copy-pasted code to find correct widget follows:
name|QObject
modifier|*
name|receiver
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|inPopupMode
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|popup
init|=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|popupFocusWidget
init|=
name|popup
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
name|receiver
operator|=
name|popupFocusWidget
condition|?
name|popupFocusWidget
else|:
name|popup
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|receiver
condition|)
name|receiver
operator|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|receiver
condition|)
name|receiver
operator|=
name|m_widget
expr_stmt|;
comment|// last resort
name|QApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|receiver
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_GESTURES
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_function
DECL|function|handleContextMenuEvent
name|void
name|QWidgetWindow
operator|::
name|handleContextMenuEvent
parameter_list|(
name|QContextMenuEvent
modifier|*
name|e
parameter_list|)
block|{
comment|// We are only interested in keyboard originating context menu events here,
comment|// mouse originated context menu events for widgets are generated in mouse handling methods.
if|if
condition|(
name|e
operator|->
name|reason
argument_list|()
operator|!=
name|QContextMenuEvent
operator|::
name|Keyboard
condition|)
return|return;
name|QWidget
modifier|*
name|fw
init|=
name|QWidget
operator|::
name|keyboardGrabber
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fw
condition|)
block|{
if|if
condition|(
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
condition|)
block|{
name|fw
operator|=
operator|(
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|->
name|focusWidget
argument_list|()
condition|?
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|->
name|focusWidget
argument_list|()
else|:
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
block|{
name|fw
operator|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fw
operator|=
name|m_widget
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fw
operator|&&
name|fw
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|QPoint
name|pos
init|=
name|fw
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImMicroFocus
argument_list|)
operator|.
name|toRect
argument_list|()
operator|.
name|center
argument_list|()
decl_stmt|;
name|QContextMenuEvent
name|widgetEvent
argument_list|(
name|QContextMenuEvent
operator|::
name|Keyboard
argument_list|,
name|pos
argument_list|,
name|fw
operator|->
name|mapToGlobal
argument_list|(
name|pos
argument_list|)
argument_list|,
name|e
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendSpontaneousEvent
argument_list|(
name|fw
argument_list|,
operator|&
name|widgetEvent
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONTEXTMENU
end_comment
begin_function
DECL|function|updateObjectName
name|void
name|QWidgetWindow
operator|::
name|updateObjectName
parameter_list|()
block|{
name|QString
name|name
init|=
name|m_widget
operator|->
name|objectName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|name
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|m_widget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
name|QStringLiteral
argument_list|(
literal|"Class"
argument_list|)
expr_stmt|;
name|name
operator|+=
name|QStringLiteral
argument_list|(
literal|"Window"
argument_list|)
expr_stmt|;
name|setObjectName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
