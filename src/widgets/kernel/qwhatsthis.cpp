begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwhatsthis.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
end_ifndef
begin_include
include|#
directive|include
file|"qpointer.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qscreen.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qtimer.h"
end_include
begin_include
include|#
directive|include
file|"qaction.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qtextdocument.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformtheme.h>
end_include
begin_include
include|#
directive|include
file|"private/qtextdocumentlayout_p.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbutton.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qaccessible.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QWhatsThis     \brief The QWhatsThis class provides a simple description of any     widget, i.e. answering the question "What's This?".      \ingroup helpsystem     \inmodule QtWidgets      "What's This?" help is part of an application's online help     system, and provides users with information about the     functionality and usage of a particular widget. "What's This?"     help texts are typically longer and more detailed than     \l{QToolTip}{tooltips}, but generally provide less information     than that supplied by separate help windows.      QWhatsThis provides a single window with an explanatory text that     pops up when the user asks "What's This?". The default way for     users to ask the question is to move the focus to the relevant     widget and press Shift+F1. The help text appears immediately; it     goes away as soon as the user does something else.     (Note that if there is a shortcut for Shift+F1, this mechanism     will not work.) Some dialogs provide a "?" button that users can     click to enter "What's This?" mode; they then click the relevant     widget to pop up the "What's This?" window. It is also possible to     provide a a menu option or toolbar button to switch into "What's     This?" mode.      To add "What's This?" text to a widget or an action, you simply     call QWidget::setWhatsThis() or QAction::setWhatsThis().      The text can be either rich text or plain text. If you specify a     rich text formatted string, it will be rendered using the default     stylesheet, making it possible to embed images in the displayed     text. To be as fast as possible, the default stylesheet uses a     simple method to determine whether the text can be rendered as     plain text. See Qt::mightBeRichText() for details.      \snippet whatsthis/whatsthis.cpp 0      An alternative way to enter "What's This?" mode is to call     createAction(), and add the returned QAction to either a menu or     a tool bar. By invoking this context help action (in the picture     below, the button with the arrow and question mark icon) the user     switches into "What's This?" mode. If they now click on a widget     the appropriate help text is shown. The mode is left when help is     given or when the user presses Esc.      \image whatsthis.png      You can enter "What's This?" mode programmatically with     enterWhatsThisMode(), check the mode with inWhatsThisMode(), and     return to normal mode with leaveWhatsThisMode().      If you want to control the "What's This?" behavior of a widget     manually see Qt::WA_CustomWhatsThis.      It is also possible to show different help texts for different     regions of a widget, by using a QHelpEvent of type     QEvent::WhatsThis. Intercept the help event in your widget's     QWidget::event() function and call QWhatsThis::showText() with the     text you want to display for the position specified in     QHelpEvent::pos(). If the text is rich text and the user clicks     on a link, the widget also receives a QWhatsThisClickedEvent with     the link's reference as QWhatsThisClickedEvent::href(). If a     QWhatsThisClickedEvent is handled (i.e. QWidget::event() returns     true), the help window remains visible. Call     QWhatsThis::hideText() to hide it explicitly.      \sa QToolTip */
name|Q_CORE_EXPORT
name|void
name|qDeleteInEventHandler
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|)
function_decl|;
end_function_decl
begin_class
DECL|class|QWhatsThat
class|class
name|QWhatsThat
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
name|QWhatsThat
parameter_list|(
specifier|const
name|QString
modifier|&
name|txt
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
name|QWidget
modifier|*
name|showTextFor
parameter_list|)
constructor_decl|;
name|~
name|QWhatsThat
parameter_list|()
destructor_decl|;
DECL|member|instance
specifier|static
name|QWhatsThat
modifier|*
name|instance
decl_stmt|;
protected|protected:
DECL|member|Q_DECL_OVERRIDE
name|void
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
name|e
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
private|private:
DECL|member|widget
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|widget
decl_stmt|;
DECL|member|pressed
name|bool
name|pressed
decl_stmt|;
DECL|member|text
name|QString
name|text
decl_stmt|;
DECL|member|doc
name|QTextDocument
modifier|*
name|doc
decl_stmt|;
DECL|member|anchor
name|QString
name|anchor
decl_stmt|;
DECL|member|background
name|QPixmap
name|background
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|instance
name|QWhatsThat
modifier|*
name|QWhatsThat
operator|::
name|instance
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|// shadowWidth not const, for XP drop-shadow-fu turns it to 0
end_comment
begin_decl_stmt
DECL|variable|shadowWidth
specifier|static
name|int
name|shadowWidth
init|=
literal|6
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|shadowWidth
comment|// also used as '5' and '6' and even '8' below
end_comment
begin_decl_stmt
DECL|variable|vMargin
specifier|static
specifier|const
name|int
name|vMargin
init|=
literal|8
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|hMargin
specifier|static
specifier|const
name|int
name|hMargin
init|=
literal|12
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|dropShadow
specifier|static
specifier|inline
name|bool
name|dropShadow
parameter_list|()
block|{
if|if
condition|(
specifier|const
name|QPlatformTheme
modifier|*
name|theme
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
condition|)
return|return
name|theme
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|DropShadow
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_constructor
DECL|function|QWhatsThat
name|QWhatsThat
operator|::
name|QWhatsThat
parameter_list|(
specifier|const
name|QString
modifier|&
name|txt
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
name|QWidget
modifier|*
name|showTextFor
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|,
name|Qt
operator|::
name|Popup
argument_list|)
member_init_list|,
name|widget
argument_list|(
name|showTextFor
argument_list|)
member_init_list|,
name|pressed
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|text
argument_list|(
name|txt
argument_list|)
block|{
operator|delete
name|instance
expr_stmt|;
name|instance
operator|=
name|this
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoSystemBackground
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
condition|)
name|setPalette
argument_list|(
name|parent
operator|->
name|palette
argument_list|()
argument_list|)
expr_stmt|;
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|setCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QRect
name|r
decl_stmt|;
name|doc
operator|=
literal|0
expr_stmt|;
name|ensurePolished
argument_list|()
expr_stmt|;
comment|// Ensures style sheet font before size calc
if|if
condition|(
name|Qt
operator|::
name|mightBeRichText
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|doc
operator|=
operator|new
name|QTextDocument
argument_list|()
expr_stmt|;
name|doc
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setDefaultFont
argument_list|(
name|QApplication
operator|::
name|font
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_TEXTHTMLPARSER
name|doc
operator|->
name|setPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
else|#
directive|else
name|doc
operator|->
name|setHtml
argument_list|(
name|text
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|doc
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doc
operator|->
name|adjustSize
argument_list|()
expr_stmt|;
name|r
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|r
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSize
argument_list|(
name|doc
operator|->
name|size
argument_list|()
operator|.
name|toSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|sw
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|width
argument_list|()
operator|/
literal|3
decl_stmt|;
if|if
condition|(
name|sw
operator|<
literal|200
condition|)
name|sw
operator|=
literal|200
expr_stmt|;
elseif|else
if|if
condition|(
name|sw
operator|>
literal|300
condition|)
name|sw
operator|=
literal|300
expr_stmt|;
name|r
operator|=
name|fontMetrics
argument_list|()
operator|.
name|boundingRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sw
argument_list|,
literal|1000
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator|+
name|Qt
operator|::
name|AlignTop
operator|+
name|Qt
operator|::
name|TextWordWrap
operator|+
name|Qt
operator|::
name|TextExpandTabs
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
name|shadowWidth
operator|=
name|dropShadow
argument_list|()
condition|?
literal|0
else|:
literal|6
expr_stmt|;
name|resize
argument_list|(
name|r
operator|.
name|width
argument_list|()
operator|+
literal|2
operator|*
name|hMargin
operator|+
name|shadowWidth
argument_list|,
name|r
operator|.
name|height
argument_list|()
operator|+
literal|2
operator|*
name|vMargin
operator|+
name|shadowWidth
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWhatsThat
name|QWhatsThat
operator|::
name|~
name|QWhatsThat
parameter_list|()
block|{
name|instance
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|doc
condition|)
operator|delete
name|doc
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|showEvent
name|void
name|QWhatsThat
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
parameter_list|)
block|{
name|background
operator|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|grabWindow
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|,
name|x
argument_list|()
argument_list|,
name|y
argument_list|()
argument_list|,
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QWhatsThat
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|pressed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|&&
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|doc
condition|)
name|anchor
operator|=
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|anchorAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
operator|-
name|QPoint
argument_list|(
name|hMargin
argument_list|,
name|vMargin
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QWhatsThat
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|pressed
condition|)
return|return;
if|if
condition|(
name|widget
operator|&&
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|&&
name|doc
operator|&&
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
name|QString
name|a
init|=
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|anchorAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
operator|-
name|QPoint
argument_list|(
name|hMargin
argument_list|,
name|vMargin
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|href
decl_stmt|;
if|if
condition|(
name|anchor
operator|==
name|a
condition|)
name|href
operator|=
name|a
expr_stmt|;
name|anchor
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|href
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QWhatsThisClickedEvent
name|e
argument_list|(
name|href
argument_list|)
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|e
argument_list|)
condition|)
return|return;
block|}
block|}
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|QWhatsThat
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_CURSOR
name|Q_UNUSED
argument_list|(
name|e
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
operator|!
name|doc
condition|)
return|return;
name|QString
name|a
init|=
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|anchorAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
operator|-
name|QPoint
argument_list|(
name|hMargin
argument_list|,
name|vMargin
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|a
operator|.
name|isEmpty
argument_list|()
condition|)
name|setCursor
argument_list|(
name|Qt
operator|::
name|PointingHandCursor
argument_list|)
expr_stmt|;
else|else
name|setCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|keyPressEvent
name|void
name|QWhatsThat
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|QWhatsThat
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
specifier|const
name|bool
name|drawShadow
init|=
name|dropShadow
argument_list|()
decl_stmt|;
name|QRect
name|r
init|=
name|rect
argument_list|()
decl_stmt|;
name|r
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|drawShadow
condition|)
name|r
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|shadowWidth
argument_list|,
operator|-
name|shadowWidth
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|background
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|palette
argument_list|()
operator|.
name|toolTipText
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|palette
argument_list|()
operator|.
name|toolTipBase
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|int
name|w
init|=
name|r
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|r
operator|.
name|height
argument_list|()
decl_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|palette
argument_list|()
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|)
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|w
operator|-
literal|2
argument_list|,
name|h
operator|-
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|drawShadow
condition|)
block|{
name|p
operator|.
name|setPen
argument_list|(
name|palette
argument_list|()
operator|.
name|shadow
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPoint
argument_list|(
name|w
operator|+
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
name|w
operator|+
literal|3
argument_list|,
literal|6
argument_list|,
name|w
operator|+
literal|5
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
name|w
operator|+
literal|1
argument_list|,
literal|6
argument_list|,
name|w
operator|+
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|7
init|;
name|i
operator|<
name|h
condition|;
name|i
operator|+=
literal|2
control|)
name|p
operator|.
name|drawLine
argument_list|(
name|w
argument_list|,
name|i
argument_list|,
name|w
operator|+
literal|5
argument_list|,
name|i
operator|+
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|w
operator|-
name|i
operator|+
name|h
init|;
name|i
operator|>
literal|6
condition|;
name|i
operator|-=
literal|2
control|)
name|p
operator|.
name|drawLine
argument_list|(
name|i
argument_list|,
name|h
argument_list|,
name|i
operator|+
literal|5
argument_list|,
name|h
operator|+
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|-=
literal|2
control|)
name|p
operator|.
name|drawLine
argument_list|(
literal|6
argument_list|,
name|h
operator|+
literal|6
operator|-
name|i
argument_list|,
name|i
operator|+
literal|5
argument_list|,
name|h
operator|+
literal|5
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|palette
argument_list|()
operator|.
name|toolTipText
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|adjust
argument_list|(
name|hMargin
argument_list|,
name|vMargin
argument_list|,
operator|-
name|hMargin
argument_list|,
operator|-
name|vMargin
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
condition|)
block|{
name|p
operator|.
name|translate
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|r
decl_stmt|;
name|rect
operator|.
name|translate
argument_list|(
operator|-
name|r
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|r
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setClipRect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
name|context
decl_stmt|;
name|context
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|context
operator|.
name|palette
operator|.
name|toolTipText
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|draw
argument_list|(
operator|&
name|p
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|.
name|drawText
argument_list|(
name|r
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator|+
name|Qt
operator|::
name|AlignTop
operator|+
name|Qt
operator|::
name|TextWordWrap
operator|+
name|Qt
operator|::
name|TextExpandTabs
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_decl_stmt
DECL|variable|button_image
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|button_image
index|[]
init|=
block|{
literal|"16 16 3 1"
block|,
literal|"         c None"
block|,
literal|"o        c #000000"
block|,
literal|"a        c #000080"
block|,
literal|"o        aaaaa  "
block|,
literal|"oo      aaa aaa "
block|,
literal|"ooo    aaa   aaa"
block|,
literal|"oooo   aa     aa"
block|,
literal|"ooooo  aa     aa"
block|,
literal|"oooooo  a    aaa"
block|,
literal|"ooooooo     aaa "
block|,
literal|"oooooooo   aaa  "
block|,
literal|"ooooooooo aaa   "
block|,
literal|"ooooo     aaa   "
block|,
literal|"oo ooo          "
block|,
literal|"o  ooo    aaa   "
block|,
literal|"    ooo   aaa   "
block|,
literal|"    ooo         "
block|,
literal|"     ooo        "
block|,
literal|"     ooo        "
block|}
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QWhatsThisPrivate
class|class
name|QWhatsThisPrivate
super|:
specifier|public
name|QObject
block|{
public|public:
name|QWhatsThisPrivate
parameter_list|()
constructor_decl|;
name|~
name|QWhatsThisPrivate
parameter_list|()
destructor_decl|;
DECL|member|instance
specifier|static
name|QWhatsThisPrivate
modifier|*
name|instance
decl_stmt|;
DECL|member|Q_DECL_OVERRIDE
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|action
name|QPointer
argument_list|<
name|QAction
argument_list|>
name|action
decl_stmt|;
specifier|static
name|void
name|say
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
name|int
name|x
init|=
literal|0
parameter_list|,
name|int
name|y
init|=
literal|0
parameter_list|)
function_decl|;
specifier|static
name|void
name|notifyToplevels
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
function_decl|;
DECL|member|leaveOnMouseRelease
name|bool
name|leaveOnMouseRelease
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|notifyToplevels
name|void
name|QWhatsThisPrivate
operator|::
name|notifyToplevels
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|QWidgetList
name|toplevels
init|=
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toplevels
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|toplevels
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|w
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_decl_stmt
DECL|member|instance
name|QWhatsThisPrivate
modifier|*
name|QWhatsThisPrivate
operator|::
name|instance
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QWhatsThisPrivate
name|QWhatsThisPrivate
operator|::
name|QWhatsThisPrivate
parameter_list|()
member_init_list|:
name|leaveOnMouseRelease
argument_list|(
literal|false
argument_list|)
block|{
name|instance
operator|=
name|this
expr_stmt|;
name|qApp
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QPoint
name|pos
init|=
name|QCursor
operator|::
name|pos
argument_list|()
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|QApplication
operator|::
name|widgetAt
argument_list|(
name|pos
argument_list|)
condition|)
block|{
name|QHelpEvent
name|e
argument_list|(
name|QEvent
operator|::
name|QueryWhatsThis
argument_list|,
name|w
operator|->
name|mapFromGlobal
argument_list|(
name|pos
argument_list|)
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|bool
name|sentEvent
init|=
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|w
argument_list|,
operator|&
name|e
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_CURSOR
name|Q_UNUSED
argument_list|(
name|sentEvent
argument_list|)
expr_stmt|;
else|#
directive|else
name|QApplication
operator|::
name|setOverrideCursor
argument_list|(
operator|(
operator|!
name|sentEvent
operator|||
operator|!
name|e
operator|.
name|isAccepted
argument_list|()
operator|)
condition|?
name|Qt
operator|::
name|ForbiddenCursor
else|:
name|Qt
operator|::
name|WhatsThisCursor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QApplication
operator|::
name|setOverrideCursor
argument_list|(
name|Qt
operator|::
name|WhatsThisCursor
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessibleEvent
name|event
argument_list|(
name|this
argument_list|,
name|QAccessible
operator|::
name|ContextHelpStart
argument_list|)
decl_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QWhatsThisPrivate
name|QWhatsThisPrivate
operator|::
name|~
name|QWhatsThisPrivate
parameter_list|()
block|{
if|if
condition|(
name|action
condition|)
name|action
operator|->
name|setChecked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QApplication
operator|::
name|restoreOverrideCursor
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessibleEvent
name|event
argument_list|(
name|this
argument_list|,
name|QAccessible
operator|::
name|ContextHelpEnd
argument_list|)
decl_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|instance
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|eventFilter
name|bool
name|QWhatsThisPrivate
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|o
operator|->
name|isWidgetType
argument_list|()
condition|)
return|return
literal|false
return|;
name|QWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|bool
name|customWhatsThis
init|=
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_CustomWhatsThis
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
block|{
name|QMouseEvent
modifier|*
name|me
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|me
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|RightButton
operator|||
name|customWhatsThis
condition|)
return|return
literal|false
return|;
name|QHelpEvent
name|e
argument_list|(
name|QEvent
operator|::
name|WhatsThis
argument_list|,
name|me
operator|->
name|pos
argument_list|()
argument_list|,
name|me
operator|->
name|globalPos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|w
argument_list|,
operator|&
name|e
argument_list|)
operator|||
operator|!
name|e
operator|.
name|isAccepted
argument_list|()
condition|)
name|leaveOnMouseRelease
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
name|QEvent
operator|::
name|MouseMove
case|:
block|{
name|QMouseEvent
modifier|*
name|me
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|QHelpEvent
name|e
argument_list|(
name|QEvent
operator|::
name|QueryWhatsThis
argument_list|,
name|me
operator|->
name|pos
argument_list|()
argument_list|,
name|me
operator|->
name|globalPos
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|sentEvent
init|=
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|w
argument_list|,
operator|&
name|e
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_CURSOR
name|Q_UNUSED
argument_list|(
name|sentEvent
argument_list|)
expr_stmt|;
else|#
directive|else
name|QApplication
operator|::
name|changeOverrideCursor
argument_list|(
operator|(
operator|!
name|sentEvent
operator|||
operator|!
name|e
operator|.
name|isAccepted
argument_list|()
operator|)
condition|?
name|Qt
operator|::
name|ForbiddenCursor
else|:
name|Qt
operator|::
name|WhatsThisCursor
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
comment|// fall through
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
if|if
condition|(
name|leaveOnMouseRelease
operator|&&
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
condition|)
name|QWhatsThis
operator|::
name|leaveWhatsThisMode
argument_list|()
expr_stmt|;
if|if
condition|(
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|RightButton
operator|||
name|customWhatsThis
condition|)
return|return
literal|false
return|;
comment|// ignore RMB release
break|break;
case|case
name|QEvent
operator|::
name|KeyPress
case|:
block|{
name|QKeyEvent
modifier|*
name|kev
init|=
operator|(
name|QKeyEvent
operator|*
operator|)
name|e
decl_stmt|;
if|if
condition|(
name|kev
operator|->
name|matches
argument_list|(
name|QKeySequence
operator|::
name|Cancel
argument_list|)
condition|)
block|{
name|QWhatsThis
operator|::
name|leaveWhatsThisMode
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|customWhatsThis
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|kev
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Menu
operator|||
operator|(
name|kev
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_F10
operator|&&
name|kev
operator|->
name|modifiers
argument_list|()
operator|==
name|Qt
operator|::
name|ShiftModifier
operator|)
condition|)
block|{
comment|// we don't react to these keys, they are used for context menus
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|kev
operator|->
name|key
argument_list|()
operator|!=
name|Qt
operator|::
name|Key_Shift
operator|&&
name|kev
operator|->
name|key
argument_list|()
operator|!=
name|Qt
operator|::
name|Key_Alt
comment|// not a modifier key
operator|&&
name|kev
operator|->
name|key
argument_list|()
operator|!=
name|Qt
operator|::
name|Key_Control
operator|&&
name|kev
operator|->
name|key
argument_list|()
operator|!=
name|Qt
operator|::
name|Key_Meta
condition|)
block|{
name|QWhatsThis
operator|::
name|leaveWhatsThisMode
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
default|default:
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_class
DECL|class|QWhatsThisAction
class|class
name|QWhatsThisAction
super|:
specifier|public
name|QAction
block|{
name|Q_OBJECT
public|public:
specifier|explicit
name|QWhatsThisAction
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
private|private
name|slots
private|:
name|void
name|actionTriggered
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWhatsThisAction
name|QWhatsThisAction
operator|::
name|QWhatsThisAction
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"What's This?"
argument_list|)
argument_list|,
name|parent
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_IMAGEFORMAT_XPM
name|QPixmap
name|p
argument_list|(
name|button_image
argument_list|)
decl_stmt|;
name|setIcon
argument_list|(
name|p
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|actionTriggered
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|setShortcut
argument_list|(
name|Qt
operator|::
name|ShiftModifier
operator|+
name|Qt
operator|::
name|Key_F1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_function
DECL|function|actionTriggered
name|void
name|QWhatsThisAction
operator|::
name|actionTriggered
parameter_list|()
block|{
if|if
condition|(
name|isChecked
argument_list|()
condition|)
block|{
name|QWhatsThis
operator|::
name|enterWhatsThisMode
argument_list|()
expr_stmt|;
name|QWhatsThisPrivate
operator|::
name|instance
operator|->
name|action
operator|=
name|this
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     This function switches the user interface into "What's This?"     mode. The user interface can be switched back into normal mode by     the user (e.g. by them clicking or pressing Esc), or     programmatically by calling leaveWhatsThisMode().      When entering "What's This?" mode, a QEvent of type     Qt::EnterWhatsThisMode is sent to all toplevel widgets.      \sa inWhatsThisMode(), leaveWhatsThisMode() */
end_comment
begin_function
DECL|function|enterWhatsThisMode
name|void
name|QWhatsThis
operator|::
name|enterWhatsThisMode
parameter_list|()
block|{
if|if
condition|(
name|QWhatsThisPrivate
operator|::
name|instance
condition|)
return|return;
operator|(
name|void
operator|)
operator|new
name|QWhatsThisPrivate
expr_stmt|;
name|QEvent
name|e
argument_list|(
name|QEvent
operator|::
name|EnterWhatsThisMode
argument_list|)
decl_stmt|;
name|QWhatsThisPrivate
operator|::
name|notifyToplevels
argument_list|(
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the user interface is in "What's This?" mode;     otherwise returns \c false.      \sa enterWhatsThisMode() */
end_comment
begin_function
DECL|function|inWhatsThisMode
name|bool
name|QWhatsThis
operator|::
name|inWhatsThisMode
parameter_list|()
block|{
return|return
operator|(
name|QWhatsThisPrivate
operator|::
name|instance
operator|!=
literal|0
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     If the user interface is in "What's This?" mode, this function     switches back to normal mode; otherwise it does nothing.      When leaving "What's This?" mode, a QEvent of type     Qt::LeaveWhatsThisMode is sent to all toplevel widgets.      \sa enterWhatsThisMode(), inWhatsThisMode() */
end_comment
begin_function
DECL|function|leaveWhatsThisMode
name|void
name|QWhatsThis
operator|::
name|leaveWhatsThisMode
parameter_list|()
block|{
operator|delete
name|QWhatsThisPrivate
operator|::
name|instance
expr_stmt|;
name|QEvent
name|e
argument_list|(
name|QEvent
operator|::
name|LeaveWhatsThisMode
argument_list|)
decl_stmt|;
name|QWhatsThisPrivate
operator|::
name|notifyToplevels
argument_list|(
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|say
name|void
name|QWhatsThisPrivate
operator|::
name|say
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
if|if
condition|(
name|text
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
comment|// make a fresh widget, and set it up
name|QWhatsThat
modifier|*
name|whatsThat
init|=
operator|new
name|QWhatsThat
argument_list|(
name|text
argument_list|,
if|#
directive|if
name|defined
argument_list|(
name|Q_DEAD_CODE_FROM_QT4_X11
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_CURSOR
argument_list|)
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screen
argument_list|(
name|widget
condition|?
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
else|:
name|QCursor
operator|::
name|x11Screen
argument_list|()
argument_list|)
argument_list|,
else|#
directive|else
literal|0
argument_list|,
endif|#
directive|endif
name|widget
argument_list|)
decl_stmt|;
comment|// okay, now to find a suitable location
name|int
name|scr
init|=
operator|(
name|widget
condition|?
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenNumber
argument_list|(
name|widget
argument_list|)
else|:
if|#
directive|if
name|defined
argument_list|(
name|Q_DEAD_CODE_FROM_QT4_X11
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_CURSOR
argument_list|)
name|QCursor
operator|::
name|x11Screen
operator|(
operator|)
else|#
directive|else
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenNumber
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
endif|#
directive|endif
comment|// Q_DEAD_CODE_FROM_QT4_X11
operator|)
decl_stmt|;
name|QRect
name|screen
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|scr
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|whatsThat
operator|->
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|whatsThat
operator|->
name|height
argument_list|()
decl_stmt|;
name|int
name|sx
init|=
name|screen
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|sy
init|=
name|screen
operator|.
name|y
argument_list|()
decl_stmt|;
comment|// first try locating the widget immediately above/below,
comment|// with nice alignment if possible.
name|QPoint
name|pos
decl_stmt|;
if|if
condition|(
name|widget
condition|)
name|pos
operator|=
name|widget
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
name|w
operator|>
name|widget
operator|->
name|width
argument_list|()
operator|+
literal|16
condition|)
name|x
operator|=
name|pos
operator|.
name|x
argument_list|()
operator|+
name|widget
operator|->
name|width
argument_list|()
operator|/
literal|2
operator|-
name|w
operator|/
literal|2
expr_stmt|;
else|else
name|x
operator|=
name|x
operator|-
name|w
operator|/
literal|2
expr_stmt|;
comment|// squeeze it in if that would result in part of what's this
comment|// being only partially visible
if|if
condition|(
name|x
operator|+
name|w
operator|+
name|shadowWidth
operator|>
name|sx
operator|+
name|screen
operator|.
name|width
argument_list|()
condition|)
name|x
operator|=
operator|(
name|widget
condition|?
operator|(
name|qMin
argument_list|(
name|screen
operator|.
name|width
argument_list|()
argument_list|,
name|pos
operator|.
name|x
argument_list|()
operator|+
name|widget
operator|->
name|width
argument_list|()
argument_list|)
operator|)
else|:
name|screen
operator|.
name|width
argument_list|()
operator|)
operator|-
name|w
expr_stmt|;
if|if
condition|(
name|x
operator|<
name|sx
condition|)
name|x
operator|=
name|sx
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
name|h
operator|>
name|widget
operator|->
name|height
argument_list|()
operator|+
literal|16
condition|)
block|{
name|y
operator|=
name|pos
operator|.
name|y
argument_list|()
operator|+
name|widget
operator|->
name|height
argument_list|()
operator|+
literal|2
expr_stmt|;
comment|// below, two pixels spacing
comment|// what's this is above or below, wherever there's most space
if|if
condition|(
name|y
operator|+
name|h
operator|+
literal|10
operator|>
name|sy
operator|+
name|screen
operator|.
name|height
argument_list|()
condition|)
name|y
operator|=
name|pos
operator|.
name|y
argument_list|()
operator|+
literal|2
operator|-
name|shadowWidth
operator|-
name|h
expr_stmt|;
comment|// above, overlap
block|}
name|y
operator|=
name|y
operator|+
literal|2
expr_stmt|;
comment|// squeeze it in if that would result in part of what's this
comment|// being only partially visible
if|if
condition|(
name|y
operator|+
name|h
operator|+
name|shadowWidth
operator|>
name|sy
operator|+
name|screen
operator|.
name|height
argument_list|()
condition|)
name|y
operator|=
operator|(
name|widget
condition|?
operator|(
name|qMin
argument_list|(
name|screen
operator|.
name|height
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
operator|+
name|widget
operator|->
name|height
argument_list|()
argument_list|)
operator|)
else|:
name|screen
operator|.
name|height
argument_list|()
operator|)
operator|-
name|h
expr_stmt|;
if|if
condition|(
name|y
operator|<
name|sy
condition|)
name|y
operator|=
name|sy
expr_stmt|;
name|whatsThat
operator|->
name|move
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|whatsThat
operator|->
name|show
argument_list|()
expr_stmt|;
name|whatsThat
operator|->
name|grabKeyboard
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Shows \a text as a "What's This?" window, at global position \a     pos. The optional widget argument, \a w, is used to determine the     appropriate screen on multi-head systems.      \sa hideText() */
end_comment
begin_function
DECL|function|showText
name|void
name|QWhatsThis
operator|::
name|showText
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|leaveWhatsThisMode
argument_list|()
expr_stmt|;
name|QWhatsThisPrivate
operator|::
name|say
argument_list|(
name|w
argument_list|,
name|text
argument_list|,
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     If a "What's This?" window is showing, this destroys it.      \sa showText() */
end_comment
begin_function
DECL|function|hideText
name|void
name|QWhatsThis
operator|::
name|hideText
parameter_list|()
block|{
name|qDeleteInEventHandler
argument_list|(
name|QWhatsThat
operator|::
name|instance
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a ready-made QAction, used to invoke "What's This?" context     help, with the given \a parent.      The returned QAction provides a convenient way to let users enter     "What's This?" mode. */
end_comment
begin_function
DECL|function|createAction
name|QAction
modifier|*
name|QWhatsThis
operator|::
name|createAction
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
block|{
return|return
operator|new
name|QWhatsThisAction
argument_list|(
name|parent
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qwhatsthis.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_WHATSTHIS
end_comment
end_unit
