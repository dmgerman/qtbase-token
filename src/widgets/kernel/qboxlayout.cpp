begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qboxlayout.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qlist.h"
end_include
begin_include
include|#
directive|include
file|"qsizepolicy.h"
end_include
begin_include
include|#
directive|include
file|"qvector.h"
end_include
begin_include
include|#
directive|include
file|"qlayoutengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qlayout_p.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*     Returns true if the \a widget can be added to the \a layout;     otherwise returns false. */
DECL|function|checkWidget
specifier|static
name|bool
name|checkWidget
parameter_list|(
name|QLayout
modifier|*
name|layout
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
condition|)
block|{
name|qWarning
argument_list|(
literal|"QLayout: Cannot add null widget to %s/%s"
argument_list|,
name|layout
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
name|layout
operator|->
name|objectName
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_struct
DECL|struct|QBoxLayoutItem
struct|struct
name|QBoxLayoutItem
block|{
DECL|function|QBoxLayoutItem
name|QBoxLayoutItem
parameter_list|(
name|QLayoutItem
modifier|*
name|it
parameter_list|,
name|int
name|stretch_
init|=
literal|0
parameter_list|)
member_init_list|:
name|item
argument_list|(
name|it
argument_list|)
member_init_list|,
name|stretch
argument_list|(
name|stretch_
argument_list|)
member_init_list|,
name|magic
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|~QBoxLayoutItem
name|~
name|QBoxLayoutItem
parameter_list|()
block|{
operator|delete
name|item
expr_stmt|;
block|}
DECL|function|hfw
name|int
name|hfw
parameter_list|(
name|int
name|w
parameter_list|)
block|{
if|if
condition|(
name|item
operator|->
name|hasHeightForWidth
argument_list|()
condition|)
block|{
return|return
name|item
operator|->
name|heightForWidth
argument_list|(
name|w
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|item
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
return|;
block|}
block|}
DECL|function|mhfw
name|int
name|mhfw
parameter_list|(
name|int
name|w
parameter_list|)
block|{
if|if
condition|(
name|item
operator|->
name|hasHeightForWidth
argument_list|()
condition|)
block|{
return|return
name|item
operator|->
name|heightForWidth
argument_list|(
name|w
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|item
operator|->
name|minimumSize
argument_list|()
operator|.
name|height
argument_list|()
return|;
block|}
block|}
DECL|function|hStretch
name|int
name|hStretch
parameter_list|()
block|{
if|if
condition|(
name|stretch
operator|==
literal|0
operator|&&
name|item
operator|->
name|widget
argument_list|()
condition|)
block|{
return|return
name|item
operator|->
name|widget
argument_list|()
operator|->
name|sizePolicy
argument_list|()
operator|.
name|horizontalStretch
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|stretch
return|;
block|}
block|}
DECL|function|vStretch
name|int
name|vStretch
parameter_list|()
block|{
if|if
condition|(
name|stretch
operator|==
literal|0
operator|&&
name|item
operator|->
name|widget
argument_list|()
condition|)
block|{
return|return
name|item
operator|->
name|widget
argument_list|()
operator|->
name|sizePolicy
argument_list|()
operator|.
name|verticalStretch
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|stretch
return|;
block|}
block|}
DECL|member|item
name|QLayoutItem
modifier|*
name|item
decl_stmt|;
DECL|member|stretch
name|int
name|stretch
decl_stmt|;
DECL|member|magic
name|bool
name|magic
decl_stmt|;
block|}
struct|;
end_struct
begin_class
DECL|class|QBoxLayoutPrivate
class|class
name|QBoxLayoutPrivate
super|:
specifier|public
name|QLayoutPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QBoxLayout
parameter_list|)
specifier|public
private|:
DECL|function|QBoxLayoutPrivate
name|QBoxLayoutPrivate
parameter_list|()
member_init_list|:
name|hfwWidth
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|dirty
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|spacing
argument_list|(
operator|-
literal|1
argument_list|)
block|{ }
name|~
name|QBoxLayoutPrivate
parameter_list|()
destructor_decl|;
DECL|function|setDirty
name|void
name|setDirty
parameter_list|()
block|{
name|geomArray
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hfwWidth
operator|=
operator|-
literal|1
expr_stmt|;
name|hfwHeight
operator|=
operator|-
literal|1
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
DECL|member|list
name|QList
argument_list|<
name|QBoxLayoutItem
modifier|*
argument_list|>
name|list
decl_stmt|;
DECL|member|geomArray
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
name|geomArray
decl_stmt|;
DECL|member|hfwWidth
name|int
name|hfwWidth
decl_stmt|;
DECL|member|hfwHeight
name|int
name|hfwHeight
decl_stmt|;
DECL|member|hfwMinHeight
name|int
name|hfwMinHeight
decl_stmt|;
DECL|member|sizeHint
name|QSize
name|sizeHint
decl_stmt|;
DECL|member|minSize
name|QSize
name|minSize
decl_stmt|;
DECL|member|maxSize
name|QSize
name|maxSize
decl_stmt|;
DECL|member|leftMargin
DECL|member|topMargin
DECL|member|rightMargin
DECL|member|bottomMargin
name|int
name|leftMargin
decl_stmt|,
name|topMargin
decl_stmt|,
name|rightMargin
decl_stmt|,
name|bottomMargin
decl_stmt|;
DECL|member|expanding
name|Qt
operator|::
name|Orientations
name|expanding
decl_stmt|;
name|uint
name|hasHfw
range|:
literal|1
decl_stmt|;
name|uint
name|dirty
range|:
literal|1
decl_stmt|;
DECL|member|dir
name|QBoxLayout
operator|::
name|Direction
name|dir
decl_stmt|;
DECL|member|spacing
name|int
name|spacing
decl_stmt|;
DECL|function|deleteAll
specifier|inline
name|void
name|deleteAll
parameter_list|()
block|{
while|while
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
operator|delete
name|list
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
block|}
name|void
name|setupGeom
parameter_list|()
function_decl|;
name|void
name|calcHfw
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|effectiveMargins
parameter_list|(
name|int
modifier|*
name|left
parameter_list|,
name|int
modifier|*
name|top
parameter_list|,
name|int
modifier|*
name|right
parameter_list|,
name|int
modifier|*
name|bottom
parameter_list|)
specifier|const
function_decl|;
block|}
class|;
end_class
begin_destructor
DECL|function|~QBoxLayoutPrivate
name|QBoxLayoutPrivate
operator|::
name|~
name|QBoxLayoutPrivate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|horz
specifier|static
specifier|inline
name|bool
name|horz
parameter_list|(
name|QBoxLayout
operator|::
name|Direction
name|dir
parameter_list|)
block|{
return|return
name|dir
operator|==
name|QBoxLayout
operator|::
name|RightToLeft
operator|||
name|dir
operator|==
name|QBoxLayout
operator|::
name|LeftToRight
return|;
block|}
end_function
begin_comment
comment|/**  * The purpose of this function is to make sure that widgets are not laid out outside its layout.  * E.g. the layoutItemRect margins are only meant to take of the surrounding margins/spacings.  * However, if the margin is 0, it can easily cover the area of a widget above it.  */
end_comment
begin_function
DECL|function|effectiveMargins
name|void
name|QBoxLayoutPrivate
operator|::
name|effectiveMargins
parameter_list|(
name|int
modifier|*
name|left
parameter_list|,
name|int
modifier|*
name|top
parameter_list|,
name|int
modifier|*
name|right
parameter_list|,
name|int
modifier|*
name|bottom
parameter_list|)
specifier|const
block|{
name|int
name|l
init|=
name|leftMargin
decl_stmt|;
name|int
name|t
init|=
name|topMargin
decl_stmt|;
name|int
name|r
init|=
name|rightMargin
decl_stmt|;
name|int
name|b
init|=
name|bottomMargin
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|Q_Q
argument_list|(
specifier|const
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|horz
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|QBoxLayoutItem
modifier|*
name|leftBox
init|=
literal|0
decl_stmt|;
name|QBoxLayoutItem
modifier|*
name|rightBox
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|left
operator|||
name|right
condition|)
block|{
name|leftBox
operator|=
name|list
operator|.
name|value
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rightBox
operator|=
name|list
operator|.
name|value
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|==
name|QBoxLayout
operator|::
name|RightToLeft
condition|)
name|qSwap
argument_list|(
name|leftBox
argument_list|,
name|rightBox
argument_list|)
expr_stmt|;
name|int
name|leftDelta
init|=
literal|0
decl_stmt|;
name|int
name|rightDelta
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|leftBox
condition|)
block|{
name|QLayoutItem
modifier|*
name|itm
init|=
name|leftBox
operator|->
name|item
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|itm
operator|->
name|widget
argument_list|()
condition|)
name|leftDelta
operator|=
name|itm
operator|->
name|geometry
argument_list|()
operator|.
name|left
argument_list|()
operator|-
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|left
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rightBox
condition|)
block|{
name|QLayoutItem
modifier|*
name|itm
init|=
name|rightBox
operator|->
name|item
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|itm
operator|->
name|widget
argument_list|()
condition|)
name|rightDelta
operator|=
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|right
argument_list|()
operator|-
name|itm
operator|->
name|geometry
argument_list|()
operator|.
name|right
argument_list|()
expr_stmt|;
block|}
name|QWidget
modifier|*
name|w
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|LayoutDirection
name|layoutDirection
init|=
name|w
condition|?
name|w
operator|->
name|layoutDirection
argument_list|()
else|:
name|QApplication
operator|::
name|layoutDirection
argument_list|()
decl_stmt|;
if|if
condition|(
name|layoutDirection
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|qSwap
argument_list|(
name|leftDelta
argument_list|,
name|rightDelta
argument_list|)
expr_stmt|;
name|l
operator|=
name|qMax
argument_list|(
name|l
argument_list|,
name|leftDelta
argument_list|)
expr_stmt|;
name|r
operator|=
name|qMax
argument_list|(
name|r
argument_list|,
name|rightDelta
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
name|top
operator|||
name|bottom
condition|?
name|list
operator|.
name|count
argument_list|()
else|:
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QBoxLayoutItem
modifier|*
name|box
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QLayoutItem
modifier|*
name|itm
init|=
name|box
operator|->
name|item
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|itm
operator|->
name|widget
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
condition|)
block|{
name|QRect
name|lir
init|=
name|itm
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QRect
name|wr
init|=
name|w
operator|->
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|top
condition|)
name|t
operator|=
name|qMax
argument_list|(
name|t
argument_list|,
name|lir
operator|.
name|top
argument_list|()
operator|-
name|wr
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bottom
condition|)
name|b
operator|=
name|qMax
argument_list|(
name|b
argument_list|,
name|wr
operator|.
name|bottom
argument_list|()
operator|-
name|lir
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// vertical layout
name|QBoxLayoutItem
modifier|*
name|topBox
init|=
literal|0
decl_stmt|;
name|QBoxLayoutItem
modifier|*
name|bottomBox
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|top
operator|||
name|bottom
condition|)
block|{
name|topBox
operator|=
name|list
operator|.
name|value
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bottomBox
operator|=
name|list
operator|.
name|value
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|==
name|QBoxLayout
operator|::
name|BottomToTop
condition|)
block|{
name|qSwap
argument_list|(
name|topBox
argument_list|,
name|bottomBox
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|top
operator|&&
name|topBox
condition|)
block|{
name|QLayoutItem
modifier|*
name|itm
init|=
name|topBox
operator|->
name|item
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|itm
operator|->
name|widget
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
condition|)
name|t
operator|=
name|qMax
argument_list|(
name|t
argument_list|,
name|itm
operator|->
name|geometry
argument_list|()
operator|.
name|top
argument_list|()
operator|-
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bottom
operator|&&
name|bottomBox
condition|)
block|{
name|QLayoutItem
modifier|*
name|itm
init|=
name|bottomBox
operator|->
name|item
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|itm
operator|->
name|widget
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
condition|)
name|b
operator|=
name|qMax
argument_list|(
name|b
argument_list|,
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|bottom
argument_list|()
operator|-
name|itm
operator|->
name|geometry
argument_list|()
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|count
init|=
name|left
operator|||
name|right
condition|?
name|list
operator|.
name|count
argument_list|()
else|:
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QBoxLayoutItem
modifier|*
name|box
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QLayoutItem
modifier|*
name|itm
init|=
name|box
operator|->
name|item
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|itm
operator|->
name|widget
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
condition|)
block|{
name|QRect
name|lir
init|=
name|itm
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QRect
name|wr
init|=
name|w
operator|->
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|left
condition|)
name|l
operator|=
name|qMax
argument_list|(
name|l
argument_list|,
name|lir
operator|.
name|left
argument_list|()
operator|-
name|wr
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|right
condition|)
name|r
operator|=
name|qMax
argument_list|(
name|r
argument_list|,
name|wr
operator|.
name|right
argument_list|()
operator|-
name|lir
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|left
condition|)
operator|*
name|left
operator|=
name|l
expr_stmt|;
if|if
condition|(
name|top
condition|)
operator|*
name|top
operator|=
name|t
expr_stmt|;
if|if
condition|(
name|right
condition|)
operator|*
name|right
operator|=
name|r
expr_stmt|;
if|if
condition|(
name|bottom
condition|)
operator|*
name|bottom
operator|=
name|b
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Initializes the data structure needed by qGeomCalc and     recalculates max/min and size hint. */
end_comment
begin_function
DECL|function|setupGeom
name|void
name|QBoxLayoutPrivate
operator|::
name|setupGeom
parameter_list|()
block|{
if|if
condition|(
operator|!
name|dirty
condition|)
return|return;
name|Q_Q
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
name|int
name|maxw
init|=
name|horz
argument_list|(
name|dir
argument_list|)
condition|?
literal|0
else|:
name|QLAYOUTSIZE_MAX
decl_stmt|;
name|int
name|maxh
init|=
name|horz
argument_list|(
name|dir
argument_list|)
condition|?
name|QLAYOUTSIZE_MAX
else|:
literal|0
decl_stmt|;
name|int
name|minw
init|=
literal|0
decl_stmt|;
name|int
name|minh
init|=
literal|0
decl_stmt|;
name|int
name|hintw
init|=
literal|0
decl_stmt|;
name|int
name|hinth
init|=
literal|0
decl_stmt|;
name|bool
name|horexp
init|=
literal|false
decl_stmt|;
name|bool
name|verexp
init|=
literal|false
decl_stmt|;
name|hasHfw
operator|=
literal|false
expr_stmt|;
name|int
name|n
init|=
name|list
operator|.
name|count
argument_list|()
decl_stmt|;
name|geomArray
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
name|a
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|QSizePolicy
operator|::
name|ControlTypes
name|controlTypes1
decl_stmt|;
name|QSizePolicy
operator|::
name|ControlTypes
name|controlTypes2
decl_stmt|;
name|int
name|fixedSpacing
init|=
name|q
operator|->
name|spacing
argument_list|()
decl_stmt|;
name|int
name|previousNonEmptyIndex
init|=
operator|-
literal|1
decl_stmt|;
name|QStyle
modifier|*
name|style
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|fixedSpacing
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|parentWidget
init|=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
name|style
operator|=
name|parentWidget
operator|->
name|style
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|QBoxLayoutItem
modifier|*
name|box
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QSize
name|max
init|=
name|box
operator|->
name|item
operator|->
name|maximumSize
argument_list|()
decl_stmt|;
name|QSize
name|min
init|=
name|box
operator|->
name|item
operator|->
name|minimumSize
argument_list|()
decl_stmt|;
name|QSize
name|hint
init|=
name|box
operator|->
name|item
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|Orientations
name|exp
init|=
name|box
operator|->
name|item
operator|->
name|expandingDirections
argument_list|()
decl_stmt|;
name|bool
name|empty
init|=
name|box
operator|->
name|item
operator|->
name|isEmpty
argument_list|()
decl_stmt|;
name|int
name|spacing
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|empty
condition|)
block|{
if|if
condition|(
name|fixedSpacing
operator|>=
literal|0
condition|)
block|{
name|spacing
operator|=
operator|(
name|previousNonEmptyIndex
operator|>=
literal|0
operator|)
condition|?
name|fixedSpacing
else|:
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
operator|!
name|horz
argument_list|(
name|dir
argument_list|)
operator|&&
name|previousNonEmptyIndex
operator|>=
literal|0
condition|)
block|{
name|QBoxLayoutItem
modifier|*
name|sibling
init|=
operator|(
name|dir
operator|==
name|QBoxLayout
operator|::
name|TopToBottom
condition|?
name|box
else|:
name|list
operator|.
name|at
argument_list|(
name|previousNonEmptyIndex
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|sibling
condition|)
block|{
name|QWidget
modifier|*
name|wid
init|=
name|sibling
operator|->
name|item
operator|->
name|widget
argument_list|()
decl_stmt|;
if|if
condition|(
name|wid
condition|)
name|spacing
operator|=
name|qMax
argument_list|(
name|spacing
argument_list|,
name|sibling
operator|->
name|item
operator|->
name|geometry
argument_list|()
operator|.
name|top
argument_list|()
operator|-
name|wid
operator|->
name|geometry
argument_list|()
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
else|else
block|{
name|controlTypes1
operator|=
name|controlTypes2
expr_stmt|;
name|controlTypes2
operator|=
name|box
operator|->
name|item
operator|->
name|controlTypes
argument_list|()
expr_stmt|;
if|if
condition|(
name|previousNonEmptyIndex
operator|>=
literal|0
condition|)
block|{
name|QSizePolicy
operator|::
name|ControlTypes
name|actual1
init|=
name|controlTypes1
decl_stmt|;
name|QSizePolicy
operator|::
name|ControlTypes
name|actual2
init|=
name|controlTypes2
decl_stmt|;
if|if
condition|(
name|dir
operator|==
name|QBoxLayout
operator|::
name|RightToLeft
operator|||
name|dir
operator|==
name|QBoxLayout
operator|::
name|BottomToTop
condition|)
name|qSwap
argument_list|(
name|actual1
argument_list|,
name|actual2
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
condition|)
block|{
name|spacing
operator|=
name|style
operator|->
name|combinedLayoutSpacing
argument_list|(
name|actual1
argument_list|,
name|actual2
argument_list|,
name|horz
argument_list|(
name|dir
argument_list|)
condition|?
name|Qt
operator|::
name|Horizontal
else|:
name|Qt
operator|::
name|Vertical
argument_list|,
literal|0
argument_list|,
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|spacing
operator|<
literal|0
condition|)
name|spacing
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|previousNonEmptyIndex
operator|>=
literal|0
condition|)
name|a
index|[
name|previousNonEmptyIndex
index|]
operator|.
name|spacing
operator|=
name|spacing
expr_stmt|;
name|previousNonEmptyIndex
operator|=
name|i
expr_stmt|;
block|}
name|bool
name|ignore
init|=
name|empty
operator|&&
name|box
operator|->
name|item
operator|->
name|widget
argument_list|()
decl_stmt|;
comment|// ignore hidden widgets
name|bool
name|dummy
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|horz
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|bool
name|expand
init|=
operator|(
name|exp
operator|&
name|Qt
operator|::
name|Horizontal
operator|||
name|box
operator|->
name|stretch
operator|>
literal|0
operator|)
decl_stmt|;
name|horexp
operator|=
name|horexp
operator|||
name|expand
expr_stmt|;
name|maxw
operator|+=
name|spacing
operator|+
name|max
operator|.
name|width
argument_list|()
expr_stmt|;
name|minw
operator|+=
name|spacing
operator|+
name|min
operator|.
name|width
argument_list|()
expr_stmt|;
name|hintw
operator|+=
name|spacing
operator|+
name|hint
operator|.
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ignore
condition|)
name|qMaxExpCalc
argument_list|(
name|maxh
argument_list|,
name|verexp
argument_list|,
name|dummy
argument_list|,
name|max
operator|.
name|height
argument_list|()
argument_list|,
name|exp
operator|&
name|Qt
operator|::
name|Vertical
argument_list|,
name|box
operator|->
name|item
operator|->
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|minh
operator|=
name|qMax
argument_list|(
name|minh
argument_list|,
name|min
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|hinth
operator|=
name|qMax
argument_list|(
name|hinth
argument_list|,
name|hint
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|sizeHint
operator|=
name|hint
operator|.
name|width
argument_list|()
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|maximumSize
operator|=
name|max
operator|.
name|width
argument_list|()
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|minimumSize
operator|=
name|min
operator|.
name|width
argument_list|()
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|expansive
operator|=
name|expand
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|stretch
operator|=
name|box
operator|->
name|stretch
condition|?
name|box
operator|->
name|stretch
else|:
name|box
operator|->
name|hStretch
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bool
name|expand
init|=
operator|(
name|exp
operator|&
name|Qt
operator|::
name|Vertical
operator|||
name|box
operator|->
name|stretch
operator|>
literal|0
operator|)
decl_stmt|;
name|verexp
operator|=
name|verexp
operator|||
name|expand
expr_stmt|;
name|maxh
operator|+=
name|spacing
operator|+
name|max
operator|.
name|height
argument_list|()
expr_stmt|;
name|minh
operator|+=
name|spacing
operator|+
name|min
operator|.
name|height
argument_list|()
expr_stmt|;
name|hinth
operator|+=
name|spacing
operator|+
name|hint
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ignore
condition|)
name|qMaxExpCalc
argument_list|(
name|maxw
argument_list|,
name|horexp
argument_list|,
name|dummy
argument_list|,
name|max
operator|.
name|width
argument_list|()
argument_list|,
name|exp
operator|&
name|Qt
operator|::
name|Horizontal
argument_list|,
name|box
operator|->
name|item
operator|->
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|minw
operator|=
name|qMax
argument_list|(
name|minw
argument_list|,
name|min
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|hintw
operator|=
name|qMax
argument_list|(
name|hintw
argument_list|,
name|hint
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|sizeHint
operator|=
name|hint
operator|.
name|height
argument_list|()
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|maximumSize
operator|=
name|max
operator|.
name|height
argument_list|()
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|minimumSize
operator|=
name|min
operator|.
name|height
argument_list|()
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|expansive
operator|=
name|expand
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|stretch
operator|=
name|box
operator|->
name|stretch
condition|?
name|box
operator|->
name|stretch
else|:
name|box
operator|->
name|vStretch
argument_list|()
expr_stmt|;
block|}
name|a
index|[
name|i
index|]
operator|.
name|empty
operator|=
name|empty
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|spacing
operator|=
literal|0
expr_stmt|;
comment|// might be initialized with a non-zero value in a later iteration
name|hasHfw
operator|=
name|hasHfw
operator|||
name|box
operator|->
name|item
operator|->
name|hasHeightForWidth
argument_list|()
expr_stmt|;
block|}
name|geomArray
operator|=
name|a
expr_stmt|;
name|expanding
operator|=
call|(
name|Qt
operator|::
name|Orientations
call|)
argument_list|(
operator|(
name|horexp
condition|?
name|Qt
operator|::
name|Horizontal
else|:
literal|0
operator|)
operator||
operator|(
name|verexp
condition|?
name|Qt
operator|::
name|Vertical
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|minSize
operator|=
name|QSize
argument_list|(
name|minw
argument_list|,
name|minh
argument_list|)
expr_stmt|;
name|maxSize
operator|=
name|QSize
argument_list|(
name|maxw
argument_list|,
name|maxh
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|minSize
argument_list|)
expr_stmt|;
name|sizeHint
operator|=
name|QSize
argument_list|(
name|hintw
argument_list|,
name|hinth
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|minSize
argument_list|)
operator|.
name|boundedTo
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
name|q
operator|->
name|getContentsMargins
argument_list|(
operator|&
name|leftMargin
argument_list|,
operator|&
name|topMargin
argument_list|,
operator|&
name|rightMargin
argument_list|,
operator|&
name|bottomMargin
argument_list|)
expr_stmt|;
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|effectiveMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
name|QSize
name|extra
argument_list|(
name|left
operator|+
name|right
argument_list|,
name|top
operator|+
name|bottom
argument_list|)
decl_stmt|;
name|minSize
operator|+=
name|extra
expr_stmt|;
name|maxSize
operator|+=
name|extra
expr_stmt|;
name|sizeHint
operator|+=
name|extra
expr_stmt|;
name|dirty
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   Calculates and stores the preferred height given the width \a w. */
end_comment
begin_function
DECL|function|calcHfw
name|void
name|QBoxLayoutPrivate
operator|::
name|calcHfw
parameter_list|(
name|int
name|w
parameter_list|)
block|{
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
modifier|&
name|a
init|=
name|geomArray
decl_stmt|;
name|int
name|n
init|=
name|a
operator|.
name|count
argument_list|()
decl_stmt|;
name|int
name|h
init|=
literal|0
decl_stmt|;
name|int
name|mh
init|=
literal|0
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|n
operator|==
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|horz
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|qGeomCalc
argument_list|(
name|a
argument_list|,
literal|0
argument_list|,
name|n
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|QBoxLayoutItem
modifier|*
name|box
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|box
operator|->
name|hfw
argument_list|(
name|a
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|mh
operator|=
name|qMax
argument_list|(
name|mh
argument_list|,
name|box
operator|->
name|mhfw
argument_list|(
name|a
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|QBoxLayoutItem
modifier|*
name|box
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|spacing
init|=
name|a
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|spacing
decl_stmt|;
name|h
operator|+=
name|box
operator|->
name|hfw
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|mh
operator|+=
name|box
operator|->
name|mhfw
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|h
operator|+=
name|spacing
expr_stmt|;
name|mh
operator|+=
name|spacing
expr_stmt|;
block|}
block|}
name|hfwWidth
operator|=
name|w
expr_stmt|;
name|hfwHeight
operator|=
name|h
expr_stmt|;
name|hfwMinHeight
operator|=
name|mh
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QBoxLayout      \brief The QBoxLayout class lines up child widgets horizontally or     vertically.      \ingroup geomanagement     \inmodule QtWidgets      QBoxLayout takes the space it gets (from its parent layout or from     the parentWidget()), divides it up into a row of boxes, and makes     each managed widget fill one box.      \image qhboxlayout-with-5-children.png Horizontal box layout with five child widgets      If the QBoxLayout's orientation is Qt::Horizontal the boxes are     placed in a row, with suitable sizes. Each widget (or other box)     will get at least its minimum size and at most its maximum size.     Any excess space is shared according to the stretch factors (more     about that below).      \image qvboxlayout-with-5-children.png Vertical box layout with five child widgets      If the QBoxLayout's orientation is Qt::Vertical, the boxes are     placed in a column, again with suitable sizes.      The easiest way to create a QBoxLayout is to use one of the     convenience classes, e.g. QHBoxLayout (for Qt::Horizontal boxes)     or QVBoxLayout (for Qt::Vertical boxes). You can also use the     QBoxLayout constructor directly, specifying its direction as     LeftToRight, RightToLeft, TopToBottom, or BottomToTop.      If the QBoxLayout is not the top-level layout (i.e. it is not     managing all of the widget's area and children), you must add it     to its parent layout before you can do anything with it. The     normal way to add a layout is by calling     parentLayout-\>addLayout().      Once you have done this, you can add boxes to the QBoxLayout using     one of four functions:      \list     \li addWidget() to add a widget to the QBoxLayout and set the     widget's stretch factor. (The stretch factor is along the row of     boxes.)      \li addSpacing() to create an empty box; this is one of the     functions you use to create nice and spacious dialogs. See below     for ways to set margins.      \li addStretch() to create an empty, stretchable box.      \li addLayout() to add a box containing another QLayout to the row     and set that layout's stretch factor.     \endlist      Use insertWidget(), insertSpacing(), insertStretch() or     insertLayout() to insert a box at a specified position in the     layout.      QBoxLayout also includes two margin widths:      \list     \li setContentsMargins() sets the width of the outer border on        each side of the widget. This is the width of the reserved space         along each of the QBoxLayout's four sides.     \li setSpacing() sets the width between neighboring boxes. (You        can use addSpacing() to get more space at a particular spot.)     \endlist      The margin default is provided by the style. The default margin     most Qt styles specify is 9 for child widgets and 11 for windows.     The spacing defaults to the same as the margin width for a     top-level layout, or to the same as the parent layout.      To remove a widget from a layout, call removeWidget(). Calling     QWidget::hide() on a widget also effectively removes the widget     from the layout until QWidget::show() is called.      You will almost always want to use QVBoxLayout and QHBoxLayout     rather than QBoxLayout because of their convenient constructors.      \sa QGridLayout, QStackedLayout, {Layout Management} */
end_comment
begin_comment
comment|/*!     \enum QBoxLayout::Direction      This type is used to determine the direction of a box layout.      \value LeftToRight  Horizontal from left to right.     \value RightToLeft  Horizontal from right to left.     \value TopToBottom  Vertical from top to bottom.     \value BottomToTop  Vertical from bottom to top.      \omitvalue Down     \omitvalue Up */
end_comment
begin_comment
comment|/*!     Constructs a new QBoxLayout with direction \a dir and parent widget \a     parent.      \sa direction() */
end_comment
begin_constructor
DECL|function|QBoxLayout
name|QBoxLayout
operator|::
name|QBoxLayout
parameter_list|(
name|Direction
name|dir
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QLayout
argument_list|(
operator|*
operator|new
name|QBoxLayoutPrivate
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|dir
operator|=
name|dir
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys this box layout.      The layout's widgets aren't destroyed. */
end_comment
begin_destructor
DECL|function|~QBoxLayout
name|QBoxLayout
operator|::
name|~
name|QBoxLayout
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|deleteAll
argument_list|()
expr_stmt|;
comment|// must do it before QObject deletes children, so can't be in ~QBoxLayoutPrivate
block|}
end_destructor
begin_comment
comment|/*!   Reimplements QLayout::spacing(). If the spacing property is   valid, that value is returned. Otherwise, a value for the spacing   property is computed and returned. Since layout spacing in a widget   is style dependent, if the parent is a widget, it queries the style   for the (horizontal or vertical) spacing of the layout. Otherwise,   the parent is a layout, and it queries the parent layout for the   spacing().    \sa QLayout::spacing(), setSpacing()  */
end_comment
begin_function
DECL|function|spacing
name|int
name|QBoxLayout
operator|::
name|spacing
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|spacing
operator|>=
literal|0
condition|)
block|{
return|return
name|d
operator|->
name|spacing
return|;
block|}
else|else
block|{
return|return
name|qSmartSpacing
argument_list|(
name|this
argument_list|,
name|d
operator|->
name|dir
operator|==
name|LeftToRight
operator|||
name|d
operator|->
name|dir
operator|==
name|RightToLeft
condition|?
name|QStyle
operator|::
name|PM_LayoutHorizontalSpacing
else|:
name|QStyle
operator|::
name|PM_LayoutVerticalSpacing
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|/*!   Reimplements QLayout::setSpacing(). Sets the spacing   property to \a spacing.     \sa QLayout::setSpacing(), spacing()  */
end_comment
begin_function
DECL|function|setSpacing
name|void
name|QBoxLayout
operator|::
name|setSpacing
parameter_list|(
name|int
name|spacing
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|spacing
operator|=
name|spacing
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QBoxLayout
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|dirty
condition|)
cast|const_cast
argument_list|<
name|QBoxLayout
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|setupGeom
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|sizeHint
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|minimumSize
name|QSize
name|QBoxLayout
operator|::
name|minimumSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|dirty
condition|)
cast|const_cast
argument_list|<
name|QBoxLayout
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|setupGeom
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|minSize
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|maximumSize
name|QSize
name|QBoxLayout
operator|::
name|maximumSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|dirty
condition|)
cast|const_cast
argument_list|<
name|QBoxLayout
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|setupGeom
argument_list|()
expr_stmt|;
name|QSize
name|s
init|=
name|d
operator|->
name|maxSize
operator|.
name|boundedTo
argument_list|(
name|QSize
argument_list|(
name|QLAYOUTSIZE_MAX
argument_list|,
name|QLAYOUTSIZE_MAX
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|alignment
argument_list|()
operator|&
name|Qt
operator|::
name|AlignHorizontal_Mask
condition|)
name|s
operator|.
name|setWidth
argument_list|(
name|QLAYOUTSIZE_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|alignment
argument_list|()
operator|&
name|Qt
operator|::
name|AlignVertical_Mask
condition|)
name|s
operator|.
name|setHeight
argument_list|(
name|QLAYOUTSIZE_MAX
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|hasHeightForWidth
name|bool
name|QBoxLayout
operator|::
name|hasHeightForWidth
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|dirty
condition|)
cast|const_cast
argument_list|<
name|QBoxLayout
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|setupGeom
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|hasHfw
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|heightForWidth
name|int
name|QBoxLayout
operator|::
name|heightForWidth
parameter_list|(
name|int
name|w
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasHeightForWidth
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|d
operator|->
name|effectiveMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
name|w
operator|-=
name|left
operator|+
name|right
expr_stmt|;
if|if
condition|(
name|w
operator|!=
name|d
operator|->
name|hfwWidth
condition|)
cast|const_cast
argument_list|<
name|QBoxLayout
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|calcHfw
argument_list|(
name|w
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|hfwHeight
operator|+
name|top
operator|+
name|bottom
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|minimumHeightForWidth
name|int
name|QBoxLayout
operator|::
name|minimumHeightForWidth
parameter_list|(
name|int
name|w
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBoxLayout
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|heightForWidth
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|int
name|top
decl_stmt|,
name|bottom
decl_stmt|;
name|d
operator|->
name|effectiveMargins
argument_list|(
literal|0
argument_list|,
operator|&
name|top
argument_list|,
literal|0
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|hasHfw
condition|?
operator|(
name|d
operator|->
name|hfwMinHeight
operator|+
name|top
operator|+
name|bottom
operator|)
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     Resets cached information. */
end_comment
begin_function
DECL|function|invalidate
name|void
name|QBoxLayout
operator|::
name|invalidate
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|setDirty
argument_list|()
expr_stmt|;
name|QLayout
operator|::
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|count
name|int
name|QBoxLayout
operator|::
name|count
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBoxLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|list
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|itemAt
name|QLayoutItem
modifier|*
name|QBoxLayout
operator|::
name|itemAt
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBoxLayout
argument_list|)
expr_stmt|;
return|return
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|list
operator|.
name|count
argument_list|()
condition|?
name|d
operator|->
name|list
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|->
name|item
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|takeAt
name|QLayoutItem
modifier|*
name|QBoxLayout
operator|::
name|takeAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|d
operator|->
name|list
operator|.
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
name|QBoxLayoutItem
modifier|*
name|b
init|=
name|d
operator|->
name|list
operator|.
name|takeAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|QLayoutItem
modifier|*
name|item
init|=
name|b
operator|->
name|item
decl_stmt|;
name|b
operator|->
name|item
operator|=
literal|0
expr_stmt|;
operator|delete
name|b
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
return|return
name|item
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|expandingDirections
name|Qt
operator|::
name|Orientations
name|QBoxLayout
operator|::
name|expandingDirections
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|dirty
condition|)
cast|const_cast
argument_list|<
name|QBoxLayout
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|setupGeom
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|expanding
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setGeometry
name|void
name|QBoxLayout
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|dirty
operator|||
name|r
operator|!=
name|geometry
argument_list|()
condition|)
block|{
name|QRect
name|oldRect
init|=
name|geometry
argument_list|()
decl_stmt|;
name|QLayout
operator|::
name|setGeometry
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|dirty
condition|)
name|d
operator|->
name|setupGeom
argument_list|()
expr_stmt|;
name|QRect
name|cr
init|=
name|alignment
argument_list|()
condition|?
name|alignmentRect
argument_list|(
name|r
argument_list|)
else|:
name|r
decl_stmt|;
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|d
operator|->
name|effectiveMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
name|QRect
name|s
argument_list|(
name|cr
operator|.
name|x
argument_list|()
operator|+
name|left
argument_list|,
name|cr
operator|.
name|y
argument_list|()
operator|+
name|top
argument_list|,
name|cr
operator|.
name|width
argument_list|()
operator|-
operator|(
name|left
operator|+
name|right
operator|)
argument_list|,
name|cr
operator|.
name|height
argument_list|()
operator|-
operator|(
name|top
operator|+
name|bottom
operator|)
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
name|a
init|=
name|d
operator|->
name|geomArray
decl_stmt|;
name|int
name|pos
init|=
name|horz
argument_list|(
name|d
operator|->
name|dir
argument_list|)
condition|?
name|s
operator|.
name|x
argument_list|()
else|:
name|s
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|space
init|=
name|horz
argument_list|(
name|d
operator|->
name|dir
argument_list|)
condition|?
name|s
operator|.
name|width
argument_list|()
else|:
name|s
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|a
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|hasHfw
operator|&&
operator|!
name|horz
argument_list|(
name|d
operator|->
name|dir
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|QBoxLayoutItem
modifier|*
name|box
init|=
name|d
operator|->
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|->
name|item
operator|->
name|hasHeightForWidth
argument_list|()
condition|)
block|{
name|int
name|width
init|=
name|qBound
argument_list|(
name|box
operator|->
name|item
operator|->
name|minimumSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|box
operator|->
name|item
operator|->
name|maximumSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|sizeHint
operator|=
name|a
index|[
name|i
index|]
operator|.
name|minimumSize
operator|=
name|box
operator|->
name|item
operator|->
name|heightForWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Direction
name|visualDir
init|=
name|d
operator|->
name|dir
decl_stmt|;
name|QWidget
modifier|*
name|parent
init|=
name|parentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|&&
name|parent
operator|->
name|isRightToLeft
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|dir
operator|==
name|LeftToRight
condition|)
name|visualDir
operator|=
name|RightToLeft
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|dir
operator|==
name|RightToLeft
condition|)
name|visualDir
operator|=
name|LeftToRight
expr_stmt|;
block|}
name|qGeomCalc
argument_list|(
name|a
argument_list|,
literal|0
argument_list|,
name|n
argument_list|,
name|pos
argument_list|,
name|space
argument_list|)
expr_stmt|;
name|bool
name|reverse
init|=
operator|(
name|horz
argument_list|(
name|visualDir
argument_list|)
condition|?
operator|(
operator|(
name|r
operator|.
name|right
argument_list|()
operator|>
name|oldRect
operator|.
name|right
argument_list|()
operator|)
operator|!=
operator|(
name|visualDir
operator|==
name|RightToLeft
operator|)
operator|)
else|:
name|r
operator|.
name|bottom
argument_list|()
operator|>
name|oldRect
operator|.
name|bottom
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|reverse
condition|?
name|n
operator|-
name|j
operator|-
literal|1
else|:
name|j
decl_stmt|;
name|QBoxLayoutItem
modifier|*
name|box
init|=
name|d
operator|->
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|visualDir
condition|)
block|{
case|case
name|LeftToRight
case|:
name|box
operator|->
name|item
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|a
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|pos
argument_list|,
name|s
operator|.
name|y
argument_list|()
argument_list|,
name|a
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|,
name|s
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|RightToLeft
case|:
name|box
operator|->
name|item
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|s
operator|.
name|left
argument_list|()
operator|+
name|s
operator|.
name|right
argument_list|()
operator|-
name|a
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|pos
operator|-
name|a
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
operator|+
literal|1
argument_list|,
name|s
operator|.
name|y
argument_list|()
argument_list|,
name|a
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|,
name|s
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TopToBottom
case|:
name|box
operator|->
name|item
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|s
operator|.
name|x
argument_list|()
argument_list|,
name|a
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|pos
argument_list|,
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|a
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BottomToTop
case|:
name|box
operator|->
name|item
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|s
operator|.
name|x
argument_list|()
argument_list|,
name|s
operator|.
name|top
argument_list|()
operator|+
name|s
operator|.
name|bottom
argument_list|()
operator|-
name|a
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|pos
operator|-
name|a
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
operator|+
literal|1
argument_list|,
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|a
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|addItem
name|void
name|QBoxLayout
operator|::
name|addItem
parameter_list|(
name|QLayoutItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
name|QBoxLayoutItem
modifier|*
name|it
init|=
operator|new
name|QBoxLayoutItem
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|d
operator|->
name|list
operator|.
name|append
argument_list|(
name|it
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts \a item into this box layout at position \a index. If \a     index is negative, the item is added at the end.      \sa addItem(), insertWidget(), insertLayout(), insertStretch(),         insertSpacing() */
end_comment
begin_function
DECL|function|insertItem
name|void
name|QBoxLayout
operator|::
name|insertItem
parameter_list|(
name|int
name|index
parameter_list|,
name|QLayoutItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
comment|// append
name|index
operator|=
name|d
operator|->
name|list
operator|.
name|count
argument_list|()
expr_stmt|;
name|QBoxLayoutItem
modifier|*
name|it
init|=
operator|new
name|QBoxLayoutItem
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|d
operator|->
name|list
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts a non-stretchable space (a QSpacerItem) at position \a index, with     size \a size. If \a index is negative the space is added at the end.      The box layout has default margin and spacing. This function adds     additional space.      \sa addSpacing(), insertItem(), QSpacerItem */
end_comment
begin_function
DECL|function|insertSpacing
name|void
name|QBoxLayout
operator|::
name|insertSpacing
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
comment|// append
name|index
operator|=
name|d
operator|->
name|list
operator|.
name|count
argument_list|()
expr_stmt|;
name|QLayoutItem
modifier|*
name|b
decl_stmt|;
if|if
condition|(
name|horz
argument_list|(
name|d
operator|->
name|dir
argument_list|)
condition|)
name|b
operator|=
name|QLayoutPrivate
operator|::
name|createSpacerItem
argument_list|(
name|this
argument_list|,
name|size
argument_list|,
literal|0
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
expr_stmt|;
else|else
name|b
operator|=
name|QLayoutPrivate
operator|::
name|createSpacerItem
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QT_TRY
block|{
name|QBoxLayoutItem
modifier|*
name|it
init|=
operator|new
name|QBoxLayoutItem
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|it
operator|->
name|magic
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|list
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|it
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
operator|delete
name|b
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts a stretchable space (a QSpacerItem) at position \a     index, with zero minimum size and stretch factor \a stretch. If \a     index is negative the space is added at the end.      \sa addStretch(), insertItem(), QSpacerItem */
end_comment
begin_function
DECL|function|insertStretch
name|void
name|QBoxLayout
operator|::
name|insertStretch
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
comment|// append
name|index
operator|=
name|d
operator|->
name|list
operator|.
name|count
argument_list|()
expr_stmt|;
name|QLayoutItem
modifier|*
name|b
decl_stmt|;
if|if
condition|(
name|horz
argument_list|(
name|d
operator|->
name|dir
argument_list|)
condition|)
name|b
operator|=
name|QLayoutPrivate
operator|::
name|createSpacerItem
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
expr_stmt|;
else|else
name|b
operator|=
name|QLayoutPrivate
operator|::
name|createSpacerItem
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
expr_stmt|;
name|QBoxLayoutItem
modifier|*
name|it
init|=
operator|new
name|QBoxLayoutItem
argument_list|(
name|b
argument_list|,
name|stretch
argument_list|)
decl_stmt|;
name|it
operator|->
name|magic
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|list
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Inserts \a spacerItem at position \a index, with zero minimum     size and stretch factor. If \a index is negative the     space is added at the end.      \sa addSpacerItem(), insertStretch(), insertSpacing() */
end_comment
begin_function
DECL|function|insertSpacerItem
name|void
name|QBoxLayout
operator|::
name|insertSpacerItem
parameter_list|(
name|int
name|index
parameter_list|,
name|QSpacerItem
modifier|*
name|spacerItem
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
comment|// append
name|index
operator|=
name|d
operator|->
name|list
operator|.
name|count
argument_list|()
expr_stmt|;
name|QBoxLayoutItem
modifier|*
name|it
init|=
operator|new
name|QBoxLayoutItem
argument_list|(
name|spacerItem
argument_list|)
decl_stmt|;
name|it
operator|->
name|magic
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|list
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts \a layout at position \a index, with stretch factor \a     stretch. If \a index is negative, the layout is added at the end.      \a layout becomes a child of the box layout.      \sa addLayout(), insertItem() */
end_comment
begin_function
DECL|function|insertLayout
name|void
name|QBoxLayout
operator|::
name|insertLayout
parameter_list|(
name|int
name|index
parameter_list|,
name|QLayout
modifier|*
name|layout
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
name|addChildLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
comment|// append
name|index
operator|=
name|d
operator|->
name|list
operator|.
name|count
argument_list|()
expr_stmt|;
name|QBoxLayoutItem
modifier|*
name|it
init|=
operator|new
name|QBoxLayoutItem
argument_list|(
name|layout
argument_list|,
name|stretch
argument_list|)
decl_stmt|;
name|d
operator|->
name|list
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts \a widget at position \a index, with stretch factor \a     stretch and alignment \a alignment. If \a index is negative, the     widget is added at the end.      The stretch factor applies only in the \l{direction()}{direction}     of the QBoxLayout, and is relative to the other boxes and widgets     in this QBoxLayout. Widgets and boxes with higher stretch factors     grow more.      If the stretch factor is 0 and nothing else in the QBoxLayout has     a stretch factor greater than zero, the space is distributed     according to the QWidget:sizePolicy() of each widget that's     involved.      The alignment is specified by \a alignment. The default alignment     is 0, which means that the widget fills the entire cell.      \sa addWidget(), insertItem() */
end_comment
begin_function
DECL|function|insertWidget
name|void
name|QBoxLayout
operator|::
name|insertWidget
parameter_list|(
name|int
name|index
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|stretch
parameter_list|,
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|checkWidget
argument_list|(
name|this
argument_list|,
name|widget
argument_list|)
condition|)
return|return;
name|addChildWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
comment|// append
name|index
operator|=
name|d
operator|->
name|list
operator|.
name|count
argument_list|()
expr_stmt|;
name|QWidgetItem
modifier|*
name|b
init|=
name|QLayoutPrivate
operator|::
name|createWidgetItem
argument_list|(
name|this
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|b
operator|->
name|setAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
name|QBoxLayoutItem
modifier|*
name|it
decl_stmt|;
name|QT_TRY
block|{
name|it
operator|=
operator|new
name|QBoxLayoutItem
argument_list|(
name|b
argument_list|,
name|stretch
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
operator|delete
name|b
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
name|QT_TRY
block|{
name|d
operator|->
name|list
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|it
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
operator|delete
name|it
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Adds a non-stretchable space (a QSpacerItem) with size \a size     to the end of this box layout. QBoxLayout provides default margin     and spacing. This function adds additional space.      \sa insertSpacing(), addItem(), QSpacerItem */
end_comment
begin_function
DECL|function|addSpacing
name|void
name|QBoxLayout
operator|::
name|addSpacing
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|insertSpacing
argument_list|(
operator|-
literal|1
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Adds a stretchable space (a QSpacerItem) with zero minimum     size and stretch factor \a stretch to the end of this box layout.      \sa insertStretch(), addItem(), QSpacerItem */
end_comment
begin_function
DECL|function|addStretch
name|void
name|QBoxLayout
operator|::
name|addStretch
parameter_list|(
name|int
name|stretch
parameter_list|)
block|{
name|insertStretch
argument_list|(
operator|-
literal|1
argument_list|,
name|stretch
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Adds \a spacerItem to the end of this box layout.      \sa addSpacing(), addStretch() */
end_comment
begin_function
DECL|function|addSpacerItem
name|void
name|QBoxLayout
operator|::
name|addSpacerItem
parameter_list|(
name|QSpacerItem
modifier|*
name|spacerItem
parameter_list|)
block|{
name|insertSpacerItem
argument_list|(
operator|-
literal|1
argument_list|,
name|spacerItem
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Adds \a widget to the end of this box layout, with a stretch     factor of \a stretch and alignment \a alignment.      The stretch factor applies only in the \l{direction()}{direction}     of the QBoxLayout, and is relative to the other boxes and widgets     in this QBoxLayout. Widgets and boxes with higher stretch factors     grow more.      If the stretch factor is 0 and nothing else in the QBoxLayout has     a stretch factor greater than zero, the space is distributed     according to the QWidget:sizePolicy() of each widget that's     involved.      The alignment is specified by \a alignment. The default     alignment is 0, which means that the widget fills the entire cell.      \sa insertWidget(), addItem(), addLayout(), addStretch(),         addSpacing(), addStrut() */
end_comment
begin_function
DECL|function|addWidget
name|void
name|QBoxLayout
operator|::
name|addWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|stretch
parameter_list|,
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|)
block|{
name|insertWidget
argument_list|(
operator|-
literal|1
argument_list|,
name|widget
argument_list|,
name|stretch
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Adds \a layout to the end of the box, with serial stretch factor     \a stretch.      \sa insertLayout(), addItem(), addWidget() */
end_comment
begin_function
DECL|function|addLayout
name|void
name|QBoxLayout
operator|::
name|addLayout
parameter_list|(
name|QLayout
modifier|*
name|layout
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
name|insertLayout
argument_list|(
operator|-
literal|1
argument_list|,
name|layout
argument_list|,
name|stretch
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Limits the perpendicular dimension of the box (e.g. height if the     box is \l LeftToRight) to a minimum of \a size. Other constraints     may increase the limit.      \sa addItem() */
end_comment
begin_function
DECL|function|addStrut
name|void
name|QBoxLayout
operator|::
name|addStrut
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
name|QLayoutItem
modifier|*
name|b
decl_stmt|;
if|if
condition|(
name|horz
argument_list|(
name|d
operator|->
name|dir
argument_list|)
condition|)
name|b
operator|=
name|QLayoutPrivate
operator|::
name|createSpacerItem
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
expr_stmt|;
else|else
name|b
operator|=
name|QLayoutPrivate
operator|::
name|createSpacerItem
argument_list|(
name|this
argument_list|,
name|size
argument_list|,
literal|0
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QBoxLayoutItem
modifier|*
name|it
init|=
operator|new
name|QBoxLayoutItem
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|it
operator|->
name|magic
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|list
operator|.
name|append
argument_list|(
name|it
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the stretch factor for \a widget to \a stretch and returns     true if \a widget is found in this layout (not including child     layouts); otherwise returns false.      \sa setAlignment() */
end_comment
begin_function
DECL|function|setStretchFactor
name|bool
name|QBoxLayout
operator|::
name|setStretchFactor
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QBoxLayoutItem
modifier|*
name|box
init|=
name|d
operator|->
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|->
name|item
operator|->
name|widget
argument_list|()
operator|==
name|widget
condition|)
block|{
name|box
operator|->
name|stretch
operator|=
name|stretch
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the stretch factor for the layout \a layout to \a stretch and     returns true if \a layout is found in this layout (not including     child layouts); otherwise returns false. */
end_comment
begin_function
DECL|function|setStretchFactor
name|bool
name|QBoxLayout
operator|::
name|setStretchFactor
parameter_list|(
name|QLayout
modifier|*
name|layout
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QBoxLayoutItem
modifier|*
name|box
init|=
name|d
operator|->
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|->
name|item
operator|->
name|layout
argument_list|()
operator|==
name|layout
condition|)
block|{
if|if
condition|(
name|box
operator|->
name|stretch
operator|!=
name|stretch
condition|)
block|{
name|box
operator|->
name|stretch
operator|=
name|stretch
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the stretch factor at position \a index. to \a stretch.      \since 4.5 */
end_comment
begin_function
DECL|function|setStretch
name|void
name|QBoxLayout
operator|::
name|setStretch
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
name|QBoxLayoutItem
modifier|*
name|box
init|=
name|d
operator|->
name|list
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|->
name|stretch
operator|!=
name|stretch
condition|)
block|{
name|box
operator|->
name|stretch
operator|=
name|stretch
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the stretch factor at position \a index.      \since 4.5 */
end_comment
begin_function
DECL|function|stretch
name|int
name|QBoxLayout
operator|::
name|stretch
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|list
operator|.
name|size
argument_list|()
condition|)
return|return
name|d
operator|->
name|list
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|->
name|stretch
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the direction of this layout to \a direction. */
end_comment
begin_function
DECL|function|setDirection
name|void
name|QBoxLayout
operator|::
name|setDirection
parameter_list|(
name|Direction
name|direction
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QBoxLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|dir
operator|==
name|direction
condition|)
return|return;
if|if
condition|(
name|horz
argument_list|(
name|d
operator|->
name|dir
argument_list|)
operator|!=
name|horz
argument_list|(
name|direction
argument_list|)
condition|)
block|{
comment|//swap around the spacers (the "magic" bits)
comment|//#### a bit yucky, knows too much.
comment|//#### probably best to add access functions to spacerItem
comment|//#### or even a QSpacerItem::flip()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QBoxLayoutItem
modifier|*
name|box
init|=
name|d
operator|->
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|->
name|magic
condition|)
block|{
name|QSpacerItem
modifier|*
name|sp
init|=
name|box
operator|->
name|item
operator|->
name|spacerItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|sp
condition|)
block|{
if|if
condition|(
name|sp
operator|->
name|expandingDirections
argument_list|()
operator|==
name|Qt
operator|::
name|Orientations
argument_list|(
literal|0
argument_list|)
comment|/*No Direction*/
condition|)
block|{
comment|//spacing or strut
name|QSize
name|s
init|=
name|sp
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|sp
operator|->
name|changeSize
argument_list|(
name|s
operator|.
name|height
argument_list|()
argument_list|,
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|horz
argument_list|(
name|direction
argument_list|)
condition|?
name|QSizePolicy
operator|::
name|Fixed
else|:
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|horz
argument_list|(
name|direction
argument_list|)
condition|?
name|QSizePolicy
operator|::
name|Minimum
else|:
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//stretch
if|if
condition|(
name|horz
argument_list|(
name|direction
argument_list|)
condition|)
name|sp
operator|->
name|changeSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
expr_stmt|;
else|else
name|sp
operator|->
name|changeSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|d
operator|->
name|dir
operator|=
name|direction
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QBoxLayout::Direction QBoxLayout::direction() const      Returns the direction of the box. addWidget() and addSpacing()     work in this direction; the stretch stretches in this direction.      \sa QBoxLayout::Direction, addWidget(), addSpacing() */
end_comment
begin_function
DECL|function|direction
name|QBoxLayout
operator|::
name|Direction
name|QBoxLayout
operator|::
name|direction
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QBoxLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|dir
return|;
block|}
end_function
begin_comment
comment|/*!     \class QHBoxLayout     \brief The QHBoxLayout class lines up widgets horizontally.      \ingroup geomanagement     \inmodule QtWidgets      This class is used to construct horizontal box layout objects. See     QBoxLayout for details.      The simplest use of the class is like this:      \snippet layouts/layouts.cpp 0     \snippet layouts/layouts.cpp 1     \snippet layouts/layouts.cpp 2     \codeline     \snippet layouts/layouts.cpp 3     \snippet layouts/layouts.cpp 4     \snippet layouts/layouts.cpp 5      First, we create the widgets we want in the layout. Then, we     create the QHBoxLayout object and add the widgets into the     layout. Finally, we call QWidget::setLayout() to install the     QHBoxLayout object onto the widget. At that point, the widgets in     the layout are reparented to have \c window as their parent.      \image qhboxlayout-with-5-children.png Horizontal box layout with five child widgets      \sa QVBoxLayout, QGridLayout, QStackedLayout, {Layout Management}, {Basic Layouts Example} */
end_comment
begin_comment
comment|/*!     Constructs a new top-level horizontal box with     parent \a parent. */
end_comment
begin_constructor
DECL|function|QHBoxLayout
name|QHBoxLayout
operator|::
name|QHBoxLayout
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QBoxLayout
argument_list|(
name|LeftToRight
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a new horizontal box. You must add     it to another layout. */
end_comment
begin_constructor
DECL|function|QHBoxLayout
name|QHBoxLayout
operator|::
name|QHBoxLayout
parameter_list|()
member_init_list|:
name|QBoxLayout
argument_list|(
name|LeftToRight
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys this box layout.      The layout's widgets aren't destroyed. */
end_comment
begin_destructor
DECL|function|~QHBoxLayout
name|QHBoxLayout
operator|::
name|~
name|QHBoxLayout
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \class QVBoxLayout     \brief The QVBoxLayout class lines up widgets vertically.      \ingroup geomanagement     \inmodule QtWidgets      This class is used to construct vertical box layout objects. See     QBoxLayout for details.      The simplest use of the class is like this:      \snippet layouts/layouts.cpp 6     \snippet layouts/layouts.cpp 7     \snippet layouts/layouts.cpp 8     \codeline     \snippet layouts/layouts.cpp 9     \snippet layouts/layouts.cpp 10     \snippet layouts/layouts.cpp 11      First, we create the widgets we want in the layout. Then, we     create the QVBoxLayout object and add the widgets into the     layout. Finally, we call QWidget::setLayout() to install the     QVBoxLayout object onto the widget. At that point, the widgets in     the layout are reparented to have \c window as their parent.      \image qvboxlayout-with-5-children.png Horizontal box layout with five child widgets      \sa QHBoxLayout, QGridLayout, QStackedLayout, {Layout Management}, {Basic Layouts Example} */
end_comment
begin_comment
comment|/*!     Constructs a new top-level vertical box with     parent \a parent. */
end_comment
begin_constructor
DECL|function|QVBoxLayout
name|QVBoxLayout
operator|::
name|QVBoxLayout
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QBoxLayout
argument_list|(
name|TopToBottom
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a new vertical box. You must add     it to another layout.  */
end_comment
begin_constructor
DECL|function|QVBoxLayout
name|QVBoxLayout
operator|::
name|QVBoxLayout
parameter_list|()
member_init_list|:
name|QBoxLayout
argument_list|(
name|TopToBottom
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys this box layout.      The layout's widgets aren't destroyed. */
end_comment
begin_destructor
DECL|function|~QVBoxLayout
name|QVBoxLayout
operator|::
name|~
name|QVBoxLayout
parameter_list|()
block|{ }
end_destructor
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
