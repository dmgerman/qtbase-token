begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWIDGET_H
end_ifndef
begin_define
DECL|macro|QWIDGET_H
define|#
directive|define
name|QWIDGET_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qwindowdefs.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmargins.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpaintdevice.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpalette.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qfont.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qfontmetrics.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qfontinfo.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qsizepolicy.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qregion.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qbrush.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qcursor.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qkeysequence.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_INCLUDE_COMPAT
end_ifdef
begin_include
include|#
directive|include
file|<QtGui/qevent.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|variable|QLayout
name|class
name|QLayout
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWSRegionManager
name|class
name|QWSRegionManager
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QStyle
name|class
name|QStyle
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QAction
name|class
name|QAction
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QVariant
name|class
name|QVariant
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWindow
name|class
name|QWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QActionEvent
name|class
name|QActionEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMouseEvent
name|class
name|QMouseEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWheelEvent
name|class
name|QWheelEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QHoverEvent
name|class
name|QHoverEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QKeyEvent
name|class
name|QKeyEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QFocusEvent
name|class
name|QFocusEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPaintEvent
name|class
name|QPaintEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMoveEvent
name|class
name|QMoveEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QResizeEvent
name|class
name|QResizeEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QCloseEvent
name|class
name|QCloseEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QContextMenuEvent
name|class
name|QContextMenuEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QInputMethodEvent
name|class
name|QInputMethodEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTabletEvent
name|class
name|QTabletEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDragEnterEvent
name|class
name|QDragEnterEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDragMoveEvent
name|class
name|QDragMoveEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDragLeaveEvent
name|class
name|QDragLeaveEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDropEvent
name|class
name|QDropEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QShowEvent
name|class
name|QShowEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QHideEvent
name|class
name|QHideEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QIcon
name|class
name|QIcon
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QBackingStore
name|class
name|QBackingStore
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPlatformWindow
name|class
name|QPlatformWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QLocale
name|class
name|QLocale
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QGraphicsProxyWidget
name|class
name|QGraphicsProxyWidget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QGraphicsEffect
name|class
name|QGraphicsEffect
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QRasterWindowSurface
name|class
name|QRasterWindowSurface
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QUnifiedToolbarSurface
name|class
name|QUnifiedToolbarSurface
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPixmap
name|class
name|QPixmap
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QWidgetData
block|{
name|public
label|:
name|WId
name|winid
decl_stmt|;
name|uint
name|widget_attributes
decl_stmt|;
name|Qt
operator|::
name|WindowFlags
name|window_flags
expr_stmt|;
name|uint
name|window_state
range|:
literal|4
decl_stmt|;
name|uint
name|focus_policy
range|:
literal|4
decl_stmt|;
name|uint
name|sizehint_forced
range|:
literal|1
decl_stmt|;
name|uint
name|is_closing
range|:
literal|1
decl_stmt|;
name|uint
name|in_show
range|:
literal|1
decl_stmt|;
name|uint
name|in_set_window_state
range|:
literal|1
decl_stmt|;
name|mutable
name|uint
name|fstrut_dirty
range|:
literal|1
decl_stmt|;
name|uint
name|context_menu_policy
range|:
literal|3
decl_stmt|;
name|uint
name|window_modality
range|:
literal|2
decl_stmt|;
name|uint
name|in_destructor
range|:
literal|1
decl_stmt|;
name|uint
name|unused
range|:
literal|13
decl_stmt|;
name|QRect
name|crect
decl_stmt|;
name|mutable
name|QPalette
name|pal
decl_stmt|;
name|QFont
name|fnt
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
comment|//    QRegion req_region;                 // Requested region
comment|//     mutable QRegion paintable_region;   // Paintable region
comment|//     mutable bool paintable_region_dirty;// needs to be recalculated
comment|//     mutable QRegion alloc_region;       // Allocated region
comment|//     mutable bool alloc_region_dirty;    // needs to be recalculated
comment|//     mutable int overlapping_children;   // Handle overlapping children
name|int
name|alloc_region_index
decl_stmt|;
comment|//    int alloc_region_revision;
endif|#
directive|endif
name|QRect
name|wrect
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
DECL|variable|QWidgetPrivate
name|class
name|QWidgetPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QObject
name|class
name|Q_WIDGETS_EXPORT
name|QWidget
range|:
name|public
name|QObject
decl_stmt|,
name|public
name|QPaintDevice
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
name|QWidget
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|modal
name|READ
name|isModal
argument_list|)
name|Q_PROPERTY
argument_list|(
name|Qt
operator|::
name|WindowModality
name|windowModality
name|READ
name|windowModality
name|WRITE
name|setWindowModality
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|enabled
name|READ
name|isEnabled
name|WRITE
name|setEnabled
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QRect
name|geometry
name|READ
name|geometry
name|WRITE
name|setGeometry
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QRect
name|frameGeometry
name|READ
name|frameGeometry
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QRect
name|normalGeometry
name|READ
name|normalGeometry
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|x
name|READ
name|x
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|y
name|READ
name|y
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QPoint
name|pos
name|READ
name|pos
name|WRITE
name|move
name|DESIGNABLE
name|false
name|STORED
name|false
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QSize
name|frameSize
name|READ
name|frameSize
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QSize
name|size
name|READ
name|size
name|WRITE
name|resize
name|DESIGNABLE
name|false
name|STORED
name|false
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|width
name|READ
name|width
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|height
name|READ
name|height
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QRect
name|rect
name|READ
name|rect
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QRect
name|childrenRect
name|READ
name|childrenRect
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QRegion
name|childrenRegion
name|READ
name|childrenRegion
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QSizePolicy
name|sizePolicy
name|READ
name|sizePolicy
name|WRITE
name|setSizePolicy
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QSize
name|minimumSize
name|READ
name|minimumSize
name|WRITE
name|setMinimumSize
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QSize
name|maximumSize
name|READ
name|maximumSize
name|WRITE
name|setMaximumSize
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|minimumWidth
name|READ
name|minimumWidth
name|WRITE
name|setMinimumWidth
name|STORED
name|false
name|DESIGNABLE
name|false
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|minimumHeight
name|READ
name|minimumHeight
name|WRITE
name|setMinimumHeight
name|STORED
name|false
name|DESIGNABLE
name|false
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|maximumWidth
name|READ
name|maximumWidth
name|WRITE
name|setMaximumWidth
name|STORED
name|false
name|DESIGNABLE
name|false
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|maximumHeight
name|READ
name|maximumHeight
name|WRITE
name|setMaximumHeight
name|STORED
name|false
name|DESIGNABLE
name|false
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QSize
name|sizeIncrement
name|READ
name|sizeIncrement
name|WRITE
name|setSizeIncrement
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QSize
name|baseSize
name|READ
name|baseSize
name|WRITE
name|setBaseSize
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QPalette
name|palette
name|READ
name|palette
name|WRITE
name|setPalette
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QFont
name|font
name|READ
name|font
name|WRITE
name|setFont
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|Q_PROPERTY
argument_list|(
name|QCursor
name|cursor
name|READ
name|cursor
name|WRITE
name|setCursor
name|RESET
name|unsetCursor
argument_list|)
endif|#
directive|endif
name|Q_PROPERTY
argument_list|(
name|bool
name|mouseTracking
name|READ
name|hasMouseTracking
name|WRITE
name|setMouseTracking
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|isActiveWindow
name|READ
name|isActiveWindow
argument_list|)
name|Q_PROPERTY
argument_list|(
name|Qt
operator|::
name|FocusPolicy
name|focusPolicy
name|READ
name|focusPolicy
name|WRITE
name|setFocusPolicy
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|focus
name|READ
name|hasFocus
argument_list|)
name|Q_PROPERTY
argument_list|(
name|Qt
operator|::
name|ContextMenuPolicy
name|contextMenuPolicy
name|READ
name|contextMenuPolicy
name|WRITE
name|setContextMenuPolicy
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|updatesEnabled
name|READ
name|updatesEnabled
name|WRITE
name|setUpdatesEnabled
name|DESIGNABLE
name|false
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|visible
name|READ
name|isVisible
name|WRITE
name|setVisible
name|DESIGNABLE
name|false
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|minimized
name|READ
name|isMinimized
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|maximized
name|READ
name|isMaximized
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|fullScreen
name|READ
name|isFullScreen
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QSize
name|sizeHint
name|READ
name|sizeHint
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QSize
name|minimumSizeHint
name|READ
name|minimumSizeHint
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|acceptDrops
name|READ
name|acceptDrops
name|WRITE
name|setAcceptDrops
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|windowTitle
name|READ
name|windowTitle
name|WRITE
name|setWindowTitle
name|DESIGNABLE
name|isWindow
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QIcon
name|windowIcon
name|READ
name|windowIcon
name|WRITE
name|setWindowIcon
name|DESIGNABLE
name|isWindow
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|windowIconText
name|READ
name|windowIconText
name|WRITE
name|setWindowIconText
name|DESIGNABLE
name|isWindow
argument_list|)
name|Q_PROPERTY
argument_list|(
name|double
name|windowOpacity
name|READ
name|windowOpacity
name|WRITE
name|setWindowOpacity
name|DESIGNABLE
name|isWindow
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|windowModified
name|READ
name|isWindowModified
name|WRITE
name|setWindowModified
name|DESIGNABLE
name|isWindow
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
name|Q_PROPERTY
argument_list|(
name|QString
name|toolTip
name|READ
name|toolTip
name|WRITE
name|setToolTip
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_STATUSTIP
name|Q_PROPERTY
argument_list|(
name|QString
name|statusTip
name|READ
name|statusTip
name|WRITE
name|setStatusTip
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
name|Q_PROPERTY
argument_list|(
name|QString
name|whatsThis
name|READ
name|whatsThis
name|WRITE
name|setWhatsThis
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|Q_PROPERTY
argument_list|(
name|QString
name|accessibleName
name|READ
name|accessibleName
name|WRITE
name|setAccessibleName
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|accessibleDescription
name|READ
name|accessibleDescription
name|WRITE
name|setAccessibleDescription
argument_list|)
endif|#
directive|endif
name|Q_PROPERTY
argument_list|(
name|Qt
operator|::
name|LayoutDirection
name|layoutDirection
name|READ
name|layoutDirection
name|WRITE
name|setLayoutDirection
name|RESET
name|unsetLayoutDirection
argument_list|)
name|QDOC_PROPERTY
argument_list|(
name|Qt
operator|::
name|WindowFlags
name|windowFlags
name|READ
name|windowFlags
name|WRITE
name|setWindowFlags
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|autoFillBackground
name|READ
name|autoFillBackground
name|WRITE
name|setAutoFillBackground
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_STYLE_STYLESHEET
name|Q_PROPERTY
argument_list|(
name|QString
name|styleSheet
name|READ
name|styleSheet
name|WRITE
name|setStyleSheet
argument_list|)
endif|#
directive|endif
name|Q_PROPERTY
argument_list|(
name|QLocale
name|locale
name|READ
name|locale
name|WRITE
name|setLocale
name|RESET
name|unsetLocale
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|windowFilePath
name|READ
name|windowFilePath
name|WRITE
name|setWindowFilePath
name|DESIGNABLE
name|isWindow
argument_list|)
name|Q_PROPERTY
argument_list|(
name|Qt
operator|::
name|InputMethodHints
name|inputMethodHints
name|READ
name|inputMethodHints
name|WRITE
name|setInputMethodHints
argument_list|)
name|public
range|:     enum
name|RenderFlag
block|{
name|DrawWindowBackground
operator|=
literal|0x1
block|,
name|DrawChildren
operator|=
literal|0x2
block|,
name|IgnoreMask
operator|=
literal|0x4
block|}
decl_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|RenderFlags
argument_list|,
argument|RenderFlag
argument_list|)
name|explicit
name|QWidget
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|WindowFlags
name|f
operator|=
literal|0
argument_list|)
decl_stmt|;
operator|~
name|QWidget
argument_list|()
expr_stmt|;
name|int
name|devType
argument_list|()
specifier|const
expr_stmt|;
name|WId
name|winId
argument_list|()
specifier|const
expr_stmt|;
name|void
name|createWinId
parameter_list|()
function_decl|;
comment|// internal, going away
specifier|inline
name|WId
name|internalWinId
argument_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|winid
return|;
block|}
name|WId
name|effectiveWinId
argument_list|()
specifier|const
expr_stmt|;
comment|// GUI style setting
name|QStyle
operator|*
name|style
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setStyle
parameter_list|(
name|QStyle
modifier|*
parameter_list|)
function_decl|;
comment|// Widget types and states
name|bool
name|isTopLevel
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isWindow
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isModal
argument_list|()
specifier|const
expr_stmt|;
name|Qt
operator|::
name|WindowModality
name|windowModality
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWindowModality
argument_list|(
name|Qt
operator|::
name|WindowModality
name|windowModality
argument_list|)
decl_stmt|;
name|bool
name|isEnabled
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isEnabledTo
argument_list|(
specifier|const
name|QWidget
operator|*
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isEnabledToTLW
argument_list|()
specifier|const
expr_stmt|;
name|public
name|Q_SLOTS
range|:
name|void
name|setEnabled
argument_list|(
name|bool
argument_list|)
decl_stmt|;
name|void
name|setDisabled
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|void
name|setWindowModified
parameter_list|(
name|bool
parameter_list|)
function_decl|;
comment|// Widget coordinates
name|public
label|:
name|QRect
name|frameGeometry
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|QRect
operator|&
name|geometry
argument_list|()
specifier|const
expr_stmt|;
name|QRect
name|normalGeometry
argument_list|()
specifier|const
expr_stmt|;
name|int
name|x
argument_list|()
specifier|const
expr_stmt|;
name|int
name|y
argument_list|()
specifier|const
expr_stmt|;
name|QPoint
name|pos
argument_list|()
specifier|const
expr_stmt|;
name|QSize
name|frameSize
argument_list|()
specifier|const
expr_stmt|;
name|QSize
name|size
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|int
name|width
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|int
name|height
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QRect
name|rect
argument_list|()
specifier|const
expr_stmt|;
name|QRect
name|childrenRect
argument_list|()
specifier|const
expr_stmt|;
name|QRegion
name|childrenRegion
argument_list|()
specifier|const
expr_stmt|;
name|QSize
name|minimumSize
argument_list|()
specifier|const
expr_stmt|;
name|QSize
name|maximumSize
argument_list|()
specifier|const
expr_stmt|;
name|int
name|minimumWidth
argument_list|()
specifier|const
expr_stmt|;
name|int
name|minimumHeight
argument_list|()
specifier|const
expr_stmt|;
name|int
name|maximumWidth
argument_list|()
specifier|const
expr_stmt|;
name|int
name|maximumHeight
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setMinimumSize
parameter_list|(
specifier|const
name|QSize
modifier|&
parameter_list|)
function_decl|;
name|void
name|setMinimumSize
parameter_list|(
name|int
name|minw
parameter_list|,
name|int
name|minh
parameter_list|)
function_decl|;
name|void
name|setMaximumSize
parameter_list|(
specifier|const
name|QSize
modifier|&
parameter_list|)
function_decl|;
name|void
name|setMaximumSize
parameter_list|(
name|int
name|maxw
parameter_list|,
name|int
name|maxh
parameter_list|)
function_decl|;
name|void
name|setMinimumWidth
parameter_list|(
name|int
name|minw
parameter_list|)
function_decl|;
name|void
name|setMinimumHeight
parameter_list|(
name|int
name|minh
parameter_list|)
function_decl|;
name|void
name|setMaximumWidth
parameter_list|(
name|int
name|maxw
parameter_list|)
function_decl|;
name|void
name|setMaximumHeight
parameter_list|(
name|int
name|maxh
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|Q_QDOC
name|void
name|setupUi
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
endif|#
directive|endif
name|QSize
name|sizeIncrement
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setSizeIncrement
parameter_list|(
specifier|const
name|QSize
modifier|&
parameter_list|)
function_decl|;
name|void
name|setSizeIncrement
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
function_decl|;
name|QSize
name|baseSize
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setBaseSize
parameter_list|(
specifier|const
name|QSize
modifier|&
parameter_list|)
function_decl|;
name|void
name|setBaseSize
parameter_list|(
name|int
name|basew
parameter_list|,
name|int
name|baseh
parameter_list|)
function_decl|;
name|void
name|setFixedSize
parameter_list|(
specifier|const
name|QSize
modifier|&
parameter_list|)
function_decl|;
name|void
name|setFixedSize
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
function_decl|;
name|void
name|setFixedWidth
parameter_list|(
name|int
name|w
parameter_list|)
function_decl|;
name|void
name|setFixedHeight
parameter_list|(
name|int
name|h
parameter_list|)
function_decl|;
comment|// Widget coordinate mapping
name|QPoint
name|mapToGlobal
argument_list|(
specifier|const
name|QPoint
operator|&
argument_list|)
decl|const
decl_stmt|;
name|QPoint
name|mapFromGlobal
argument_list|(
specifier|const
name|QPoint
operator|&
argument_list|)
decl|const
decl_stmt|;
name|QPoint
name|mapToParent
argument_list|(
specifier|const
name|QPoint
operator|&
argument_list|)
decl|const
decl_stmt|;
name|QPoint
name|mapFromParent
argument_list|(
specifier|const
name|QPoint
operator|&
argument_list|)
decl|const
decl_stmt|;
name|QPoint
name|mapTo
argument_list|(
specifier|const
name|QWidget
operator|*
argument_list|,
specifier|const
name|QPoint
operator|&
argument_list|)
decl|const
decl_stmt|;
name|QPoint
name|mapFrom
argument_list|(
specifier|const
name|QWidget
operator|*
argument_list|,
specifier|const
name|QPoint
operator|&
argument_list|)
decl|const
decl_stmt|;
name|QWidget
operator|*
name|window
argument_list|()
specifier|const
expr_stmt|;
name|QWidget
operator|*
name|nativeParentWidget
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QWidget
operator|*
name|topLevelWidget
argument_list|()
specifier|const
block|{
return|return
name|window
argument_list|()
return|;
block|}
comment|// Widget appearance functions
specifier|const
name|QPalette
operator|&
name|palette
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setPalette
parameter_list|(
specifier|const
name|QPalette
modifier|&
parameter_list|)
function_decl|;
name|void
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|ColorRole
argument_list|)
decl_stmt|;
name|QPalette
operator|::
name|ColorRole
name|backgroundRole
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setForegroundRole
argument_list|(
name|QPalette
operator|::
name|ColorRole
argument_list|)
decl_stmt|;
name|QPalette
operator|::
name|ColorRole
name|foregroundRole
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|QFont
operator|&
name|font
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setFont
parameter_list|(
specifier|const
name|QFont
modifier|&
parameter_list|)
function_decl|;
name|QFontMetrics
name|fontMetrics
argument_list|()
specifier|const
expr_stmt|;
name|QFontInfo
name|fontInfo
argument_list|()
specifier|const
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursor
name|cursor
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
parameter_list|)
function_decl|;
name|void
name|unsetCursor
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|setMouseTracking
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
name|bool
name|hasMouseTracking
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|underMouse
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setMask
parameter_list|(
specifier|const
name|QBitmap
modifier|&
parameter_list|)
function_decl|;
name|void
name|setMask
parameter_list|(
specifier|const
name|QRegion
modifier|&
parameter_list|)
function_decl|;
name|QRegion
name|mask
argument_list|()
specifier|const
expr_stmt|;
name|void
name|clearMask
parameter_list|()
function_decl|;
name|void
name|render
parameter_list|(
name|QPaintDevice
modifier|*
name|target
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|targetOffset
init|=
name|QPoint
argument_list|()
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|sourceRegion
init|=
name|QRegion
argument_list|()
parameter_list|,
name|RenderFlags
name|renderFlags
init|=
name|RenderFlags
argument_list|(
name|DrawWindowBackground
operator||
name|DrawChildren
argument_list|)
parameter_list|)
function_decl|;
name|void
name|render
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|targetOffset
init|=
name|QPoint
argument_list|()
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|sourceRegion
init|=
name|QRegion
argument_list|()
parameter_list|,
name|RenderFlags
name|renderFlags
init|=
name|RenderFlags
argument_list|(
name|DrawWindowBackground
operator||
name|DrawChildren
argument_list|)
parameter_list|)
function_decl|;
name|Q_INVOKABLE
name|QPixmap
name|grab
argument_list|(
specifier|const
name|QRect
operator|&
name|rectangle
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QSize
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSEFFECT
name|QGraphicsEffect
operator|*
name|graphicsEffect
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setGraphicsEffect
parameter_list|(
name|QGraphicsEffect
modifier|*
name|effect
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|//QT_NO_GRAPHICSEFFECT
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
name|void
name|grabGesture
argument_list|(
name|Qt
operator|::
name|GestureType
name|type
argument_list|,
name|Qt
operator|::
name|GestureFlags
name|flags
operator|=
name|Qt
operator|::
name|GestureFlags
argument_list|()
argument_list|)
decl_stmt|;
name|void
name|ungrabGesture
argument_list|(
name|Qt
operator|::
name|GestureType
name|type
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|public
name|Q_SLOTS
range|:
name|void
name|setWindowTitle
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_STYLE_STYLESHEET
name|void
name|setStyleSheet
parameter_list|(
specifier|const
name|QString
modifier|&
name|styleSheet
parameter_list|)
function_decl|;
endif|#
directive|endif
name|public
label|:
ifndef|#
directive|ifndef
name|QT_NO_STYLE_STYLESHEET
name|QString
name|styleSheet
argument_list|()
specifier|const
expr_stmt|;
endif|#
directive|endif
name|QString
name|windowTitle
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWindowIcon
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|)
function_decl|;
name|QIcon
name|windowIcon
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWindowIconText
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
name|QString
name|windowIconText
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWindowRole
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
name|QString
name|windowRole
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWindowFilePath
parameter_list|(
specifier|const
name|QString
modifier|&
name|filePath
parameter_list|)
function_decl|;
name|QString
name|windowFilePath
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWindowOpacity
parameter_list|(
name|qreal
name|level
parameter_list|)
function_decl|;
name|qreal
name|windowOpacity
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isWindowModified
argument_list|()
specifier|const
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
name|void
name|setToolTip
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
name|QString
name|toolTip
argument_list|()
specifier|const
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_STATUSTIP
name|void
name|setStatusTip
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
name|QString
name|statusTip
argument_list|()
specifier|const
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
name|void
name|setWhatsThis
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
name|QString
name|whatsThis
argument_list|()
specifier|const
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QString
name|accessibleName
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setAccessibleName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
name|QString
name|accessibleDescription
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setAccessibleDescription
parameter_list|(
specifier|const
name|QString
modifier|&
name|description
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|LayoutDirection
name|direction
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|LayoutDirection
name|layoutDirection
argument_list|()
specifier|const
expr_stmt|;
name|void
name|unsetLayoutDirection
parameter_list|()
function_decl|;
name|void
name|setLocale
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
function_decl|;
name|QLocale
name|locale
argument_list|()
specifier|const
expr_stmt|;
name|void
name|unsetLocale
parameter_list|()
function_decl|;
specifier|inline
name|bool
name|isRightToLeft
argument_list|()
specifier|const
block|{
return|return
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
return|;
block|}
specifier|inline
name|bool
name|isLeftToRight
argument_list|()
specifier|const
block|{
return|return
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|LeftToRight
return|;
block|}
name|public
name|Q_SLOTS
range|:
specifier|inline
name|void
name|setFocus
argument_list|()
block|{
name|setFocus
argument_list|(
name|Qt
operator|::
name|OtherFocusReason
argument_list|)
block|; }
name|public
operator|:
name|bool
name|isActiveWindow
argument_list|()
specifier|const
decl_stmt|;
name|void
name|activateWindow
parameter_list|()
function_decl|;
name|void
name|clearFocus
parameter_list|()
function_decl|;
name|void
name|setFocus
argument_list|(
name|Qt
operator|::
name|FocusReason
name|reason
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|FocusPolicy
name|focusPolicy
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|FocusPolicy
name|policy
argument_list|)
decl_stmt|;
name|bool
name|hasFocus
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|void
name|setTabOrder
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|QWidget
modifier|*
parameter_list|)
function_decl|;
name|void
name|setFocusProxy
parameter_list|(
name|QWidget
modifier|*
parameter_list|)
function_decl|;
name|QWidget
operator|*
name|focusProxy
argument_list|()
specifier|const
expr_stmt|;
name|Qt
operator|::
name|ContextMenuPolicy
name|contextMenuPolicy
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setContextMenuPolicy
argument_list|(
name|Qt
operator|::
name|ContextMenuPolicy
name|policy
argument_list|)
decl_stmt|;
comment|// Grab functions
name|void
name|grabMouse
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|void
name|grabMouse
parameter_list|(
specifier|const
name|QCursor
modifier|&
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|releaseMouse
parameter_list|()
function_decl|;
name|void
name|grabKeyboard
parameter_list|()
function_decl|;
name|void
name|releaseKeyboard
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|int
name|grabShortcut
argument_list|(
specifier|const
name|QKeySequence
operator|&
name|key
argument_list|,
name|Qt
operator|::
name|ShortcutContext
name|context
operator|=
name|Qt
operator|::
name|WindowShortcut
argument_list|)
decl_stmt|;
name|void
name|releaseShortcut
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
name|void
name|setShortcutEnabled
parameter_list|(
name|int
name|id
parameter_list|,
name|bool
name|enable
init|=
name|true
parameter_list|)
function_decl|;
name|void
name|setShortcutAutoRepeat
parameter_list|(
name|int
name|id
parameter_list|,
name|bool
name|enable
init|=
name|true
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|static
name|QWidget
modifier|*
name|mouseGrabber
parameter_list|()
function_decl|;
specifier|static
name|QWidget
modifier|*
name|keyboardGrabber
parameter_list|()
function_decl|;
comment|// Update/refresh functions
specifier|inline
name|bool
name|updatesEnabled
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setUpdatesEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
if|#
directive|if
literal|0
comment|//def Q_WS_QWS
block|void repaintUnclipped(const QRegion&, bool erase = true);
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
name|QGraphicsProxyWidget
operator|*
name|graphicsProxyWidget
argument_list|()
specifier|const
expr_stmt|;
endif|#
directive|endif
name|public
name|Q_SLOTS
range|:
name|void
name|update
argument_list|()
decl_stmt|;
name|void
name|repaint
parameter_list|()
function_decl|;
name|public
label|:
specifier|inline
name|void
name|update
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
function_decl|;
name|void
name|update
parameter_list|(
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
name|void
name|update
parameter_list|(
specifier|const
name|QRegion
modifier|&
parameter_list|)
function_decl|;
name|void
name|repaint
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
function_decl|;
name|void
name|repaint
parameter_list|(
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
name|void
name|repaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
parameter_list|)
function_decl|;
name|public
name|Q_SLOTS
range|:
comment|// Widget management functions
name|virtual
name|void
name|setVisible
argument_list|(
argument|bool visible
argument_list|)
decl_stmt|;
specifier|inline
name|void
name|setHidden
parameter_list|(
name|bool
name|hidden
parameter_list|)
block|{
name|setVisible
argument_list|(
operator|!
name|hidden
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|show
parameter_list|()
block|{
name|setVisible
argument_list|(
name|true
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|hide
parameter_list|()
block|{
name|setVisible
argument_list|(
name|false
argument_list|)
expr_stmt|;
block|}
name|void
name|showMinimized
parameter_list|()
function_decl|;
name|void
name|showMaximized
parameter_list|()
function_decl|;
name|void
name|showFullScreen
parameter_list|()
function_decl|;
name|void
name|showNormal
parameter_list|()
function_decl|;
name|bool
name|close
parameter_list|()
function_decl|;
name|void
name|raise
parameter_list|()
function_decl|;
name|void
name|lower
parameter_list|()
function_decl|;
name|public
label|:
name|void
name|stackUnder
parameter_list|(
name|QWidget
modifier|*
parameter_list|)
function_decl|;
name|void
name|move
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
name|void
name|move
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|)
function_decl|;
name|void
name|resize
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
function_decl|;
name|void
name|resize
parameter_list|(
specifier|const
name|QSize
modifier|&
parameter_list|)
function_decl|;
specifier|inline
name|void
name|setGeometry
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
function_decl|;
name|void
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
name|QByteArray
name|saveGeometry
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|restoreGeometry
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|geometry
parameter_list|)
function_decl|;
name|void
name|adjustSize
parameter_list|()
function_decl|;
name|bool
name|isVisible
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isVisibleTo
argument_list|(
specifier|const
name|QWidget
operator|*
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|bool
name|isHidden
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isMinimized
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isMaximized
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isFullScreen
argument_list|()
specifier|const
expr_stmt|;
name|Qt
operator|::
name|WindowStates
name|windowState
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowStates
name|state
argument_list|)
decl_stmt|;
name|void
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowStates
name|state
argument_list|)
decl_stmt|;
name|virtual
name|QSize
name|sizeHint
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QSize
name|minimumSizeHint
argument_list|()
specifier|const
expr_stmt|;
name|QSizePolicy
name|sizePolicy
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setSizePolicy
parameter_list|(
name|QSizePolicy
parameter_list|)
function_decl|;
specifier|inline
name|void
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Policy
name|horizontal
argument_list|,
name|QSizePolicy
operator|::
name|Policy
name|vertical
argument_list|)
decl_stmt|;
name|virtual
name|int
name|heightForWidth
argument_list|(
name|int
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|hasHeightForWidth
argument_list|()
specifier|const
expr_stmt|;
name|QRegion
name|visibleRegion
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setContentsMargins
parameter_list|(
name|int
name|left
parameter_list|,
name|int
name|top
parameter_list|,
name|int
name|right
parameter_list|,
name|int
name|bottom
parameter_list|)
function_decl|;
name|void
name|setContentsMargins
parameter_list|(
specifier|const
name|QMargins
modifier|&
name|margins
parameter_list|)
function_decl|;
name|void
name|getContentsMargins
argument_list|(
name|int
operator|*
name|left
argument_list|,
name|int
operator|*
name|top
argument_list|,
name|int
operator|*
name|right
argument_list|,
name|int
operator|*
name|bottom
argument_list|)
decl|const
decl_stmt|;
name|QMargins
name|contentsMargins
argument_list|()
specifier|const
expr_stmt|;
name|QRect
name|contentsRect
argument_list|()
specifier|const
expr_stmt|;
name|public
label|:
name|QLayout
operator|*
name|layout
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setLayout
parameter_list|(
name|QLayout
modifier|*
parameter_list|)
function_decl|;
name|void
name|updateGeometry
parameter_list|()
function_decl|;
name|void
name|setParent
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
function_decl|;
name|void
name|setParent
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|,
name|Qt
operator|::
name|WindowFlags
name|f
argument_list|)
decl_stmt|;
name|void
name|scroll
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
function_decl|;
name|void
name|scroll
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
comment|// Misc. functions
name|QWidget
operator|*
name|focusWidget
argument_list|()
specifier|const
expr_stmt|;
name|QWidget
operator|*
name|nextInFocusChain
argument_list|()
specifier|const
expr_stmt|;
name|QWidget
operator|*
name|previousInFocusChain
argument_list|()
specifier|const
expr_stmt|;
comment|// drag and drop
name|bool
name|acceptDrops
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setAcceptDrops
parameter_list|(
name|bool
name|on
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_ACTION
comment|//actions
name|void
name|addAction
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
function_decl|;
name|void
name|addActions
argument_list|(
name|QList
operator|<
name|QAction
operator|*
operator|>
name|actions
argument_list|)
decl_stmt|;
name|void
name|insertAction
parameter_list|(
name|QAction
modifier|*
name|before
parameter_list|,
name|QAction
modifier|*
name|action
parameter_list|)
function_decl|;
name|void
name|insertActions
argument_list|(
name|QAction
operator|*
name|before
argument_list|,
name|QList
operator|<
name|QAction
operator|*
operator|>
name|actions
argument_list|)
decl_stmt|;
name|void
name|removeAction
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
function_decl|;
name|QList
operator|<
name|QAction
operator|*
operator|>
name|actions
argument_list|()
specifier|const
expr_stmt|;
endif|#
directive|endif
name|QWidget
operator|*
name|parentWidget
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|WindowFlags
name|type
argument_list|)
decl_stmt|;
specifier|inline
name|Qt
operator|::
name|WindowFlags
name|windowFlags
argument_list|()
specifier|const
expr_stmt|;
name|void
name|overrideWindowFlags
argument_list|(
name|Qt
operator|::
name|WindowFlags
name|type
argument_list|)
decl_stmt|;
specifier|inline
name|Qt
operator|::
name|WindowType
name|windowType
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|QWidget
modifier|*
name|find
parameter_list|(
name|WId
parameter_list|)
function_decl|;
specifier|inline
name|QWidget
modifier|*
name|childAt
argument_list|(
name|int
name|x
argument_list|,
name|int
name|y
argument_list|)
decl|const
decl_stmt|;
name|QWidget
modifier|*
name|childAt
argument_list|(
specifier|const
name|QPoint
operator|&
name|p
argument_list|)
decl|const
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
specifier|const
name|QX11Info
operator|&
name|x11Info
argument_list|()
specifier|const
expr_stmt|;
name|Qt
operator|::
name|HANDLE
name|x11PictureHandle
argument_list|()
specifier|const
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
name|Qt
operator|::
name|HANDLE
name|macQDHandle
argument_list|()
specifier|const
expr_stmt|;
name|Qt
operator|::
name|HANDLE
name|macCGHandle
argument_list|()
specifier|const
expr_stmt|;
endif|#
directive|endif
name|void
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WidgetAttribute
argument_list|,
name|bool
name|on
operator|=
name|true
argument_list|)
decl_stmt|;
specifier|inline
name|bool
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WidgetAttribute
argument_list|)
decl|const
decl_stmt|;
name|QPaintEngine
operator|*
name|paintEngine
argument_list|()
specifier|const
expr_stmt|;
name|void
name|ensurePolished
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isAncestorOf
argument_list|(
specifier|const
name|QWidget
operator|*
name|child
argument_list|)
decl|const
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
name|bool
name|hasEditFocus
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setEditFocus
parameter_list|(
name|bool
name|on
parameter_list|)
function_decl|;
endif|#
directive|endif
name|bool
name|autoFillBackground
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setAutoFillBackground
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
name|QBackingStore
operator|*
name|backingStore
argument_list|()
specifier|const
expr_stmt|;
name|QWindow
operator|*
name|windowHandle
argument_list|()
specifier|const
expr_stmt|;
name|friend
name|class
name|QDesktopScreenWidget
decl_stmt|;
name|Q_SIGNALS
label|:
name|void
name|customContextMenuRequested
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
function_decl|;
name|protected
label|:
comment|// Event handlers
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
name|virtual
name|void
name|wheelEvent
parameter_list|(
name|QWheelEvent
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
name|virtual
name|void
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|keyReleaseEvent
parameter_list|(
name|QKeyEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|focusOutEvent
parameter_list|(
name|QFocusEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|enterEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|moveEvent
parameter_list|(
name|QMoveEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|closeEvent
parameter_list|(
name|QCloseEvent
modifier|*
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
name|virtual
name|void
name|contextMenuEvent
parameter_list|(
name|QContextMenuEvent
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
name|virtual
name|void
name|tabletEvent
parameter_list|(
name|QTabletEvent
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_ACTION
name|virtual
name|void
name|actionEvent
parameter_list|(
name|QActionEvent
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|virtual
name|void
name|dragEnterEvent
parameter_list|(
name|QDragEnterEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|dragMoveEvent
parameter_list|(
name|QDragMoveEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|dragLeaveEvent
parameter_list|(
name|QDragLeaveEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|dropEvent
parameter_list|(
name|QDropEvent
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
name|virtual
name|void
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|void
name|hideEvent
parameter_list|(
name|QHideEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|bool
name|nativeEvent
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|eventType
parameter_list|,
name|void
modifier|*
name|message
parameter_list|,
name|long
modifier|*
name|result
parameter_list|)
function_decl|;
comment|// Misc. protected functions
name|virtual
name|void
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
function_decl|;
name|int
name|metric
argument_list|(
name|PaintDeviceMetric
argument_list|)
decl|const
decl_stmt|;
name|void
name|init
argument_list|(
name|QPainter
operator|*
name|painter
argument_list|)
decl|const
decl_stmt|;
name|QPaintDevice
modifier|*
name|redirected
argument_list|(
name|QPoint
operator|*
name|offset
argument_list|)
decl|const
decl_stmt|;
name|QPainter
operator|*
name|sharedPainter
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|void
name|inputMethodEvent
parameter_list|(
name|QInputMethodEvent
modifier|*
parameter_list|)
function_decl|;
name|public
label|:
name|virtual
name|QVariant
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|InputMethodQuery
argument_list|)
decl|const
decl_stmt|;
name|Qt
operator|::
name|InputMethodHints
name|inputMethodHints
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setInputMethodHints
argument_list|(
name|Qt
operator|::
name|InputMethodHints
name|hints
argument_list|)
decl_stmt|;
name|protected
name|Q_SLOTS
range|:
name|void
name|updateMicroFocus
argument_list|()
decl_stmt|;
name|protected
label|:
name|void
name|create
parameter_list|(
name|WId
init|=
literal|0
parameter_list|,
name|bool
name|initializeWindow
init|=
name|true
parameter_list|,
name|bool
name|destroyOldWindow
init|=
name|true
parameter_list|)
function_decl|;
name|void
name|destroy
parameter_list|(
name|bool
name|destroyWindow
init|=
name|true
parameter_list|,
name|bool
name|destroySubWindows
init|=
name|true
parameter_list|)
function_decl|;
name|virtual
name|bool
name|focusNextPrevChild
parameter_list|(
name|bool
name|next
parameter_list|)
function_decl|;
specifier|inline
name|bool
name|focusNextChild
parameter_list|()
block|{
return|return
name|focusNextPrevChild
argument_list|(
name|true
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|focusPreviousChild
parameter_list|()
block|{
return|return
name|focusNextPrevChild
argument_list|(
name|false
argument_list|)
return|;
block|}
name|protected
label|:
name|QWidget
argument_list|(
argument|QWidgetPrivate&d
argument_list|,
argument|QWidget* parent
argument_list|,
argument|Qt::WindowFlags f
argument_list|)
empty_stmt|;
name|private
label|:
name|void
name|setBackingStore
parameter_list|(
name|QBackingStore
modifier|*
name|store
parameter_list|)
function_decl|;
name|bool
name|testAttribute_helper
argument_list|(
name|Qt
operator|::
name|WidgetAttribute
argument_list|)
decl|const
decl_stmt|;
name|QLayout
modifier|*
name|takeLayout
parameter_list|()
function_decl|;
name|friend
name|class
name|QBackingStoreDevice
decl_stmt|;
name|friend
name|class
name|QWidgetBackingStore
decl_stmt|;
name|friend
name|class
name|QApplication
decl_stmt|;
name|friend
name|class
name|QApplicationPrivate
decl_stmt|;
name|friend
name|class
name|QGuiApplication
decl_stmt|;
name|friend
name|class
name|QGuiApplicationPrivate
decl_stmt|;
name|friend
name|class
name|QBaseApplication
decl_stmt|;
name|friend
name|class
name|QPainter
decl_stmt|;
name|friend
name|class
name|QPainterPrivate
decl_stmt|;
name|friend
name|class
name|QPixmap
decl_stmt|;
comment|// for QPixmap::fill()
name|friend
name|class
name|QFontMetrics
decl_stmt|;
name|friend
name|class
name|QFontInfo
decl_stmt|;
name|friend
name|class
name|QETWidget
decl_stmt|;
name|friend
name|class
name|QLayout
decl_stmt|;
name|friend
name|class
name|QWidgetItem
decl_stmt|;
name|friend
name|class
name|QWidgetItemV2
decl_stmt|;
name|friend
name|class
name|QGLContext
decl_stmt|;
name|friend
name|class
name|QGLWidget
decl_stmt|;
name|friend
name|class
name|QGLWindowSurface
decl_stmt|;
name|friend
name|class
name|QX11PaintEngine
decl_stmt|;
name|friend
name|class
name|QWin32PaintEngine
decl_stmt|;
name|friend
name|class
name|QShortcutPrivate
decl_stmt|;
name|friend
name|class
name|QWindowSurface
decl_stmt|;
name|friend
name|class
name|QGraphicsProxyWidget
decl_stmt|;
name|friend
name|class
name|QGraphicsProxyWidgetPrivate
decl_stmt|;
name|friend
name|class
name|QStyleSheetStyle
decl_stmt|;
name|friend
struct_decl|struct
name|QWidgetExceptionCleaner
struct_decl|;
name|friend
name|class
name|QWidgetWindow
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
name|friend
name|class
name|QGestureManager
decl_stmt|;
name|friend
name|class
name|QWinNativePanGestureRecognizer
decl_stmt|;
endif|#
directive|endif
comment|// QT_NO_GESTURES
name|friend
name|class
name|QWidgetEffectSourcePrivate
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|friend
name|bool
name|qt_mac_is_metal
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
endif|#
directive|endif
name|friend
name|Q_WIDGETS_EXPORT
name|QWidgetData
modifier|*
name|qt_qwidget_data
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
name|friend
name|Q_WIDGETS_EXPORT
name|QWidgetPrivate
modifier|*
name|qt_widget_private
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
name|private
label|:
name|Q_DISABLE_COPY
argument_list|(
argument|QWidget
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_showIfNotHidden()
argument_list|)
name|QWidgetData
modifier|*
name|data
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QWidget::RenderFlags
argument_list|)
end_macro
begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|QWidget
operator|*
name|qobject_cast
operator|<
name|QWidget
operator|*
operator|>
operator|(
name|QObject
operator|*
name|o
operator|)
block|{
if|if
condition|(
operator|!
name|o
operator|||
operator|!
name|o
operator|->
name|isWidgetType
argument_list|()
condition|)
return|return
literal|0
return|;
end_expr_stmt
begin_return
return|return
name|static_cast
operator|<
name|QWidget
operator|*
operator|>
operator|(
name|o
operator|)
return|;
end_return
begin_expr_stmt
unit|} template
operator|<
operator|>
specifier|inline
specifier|const
name|QWidget
operator|*
name|qobject_cast
operator|<
specifier|const
name|QWidget
operator|*
operator|>
operator|(
specifier|const
name|QObject
operator|*
name|o
operator|)
block|{
if|if
condition|(
operator|!
name|o
operator|||
operator|!
name|o
operator|->
name|isWidgetType
argument_list|()
condition|)
return|return
literal|0
return|;
end_expr_stmt
begin_return
return|return
name|static_cast
operator|<
specifier|const
name|QWidget
operator|*
operator|>
operator|(
name|o
operator|)
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|childAt
name|QWidget
operator|*
name|QWidget
operator|::
name|childAt
argument_list|(
argument|int ax
argument_list|,
argument|int ay
argument_list|)
specifier|const
block|{
return|return
name|childAt
argument_list|(
name|QPoint
argument_list|(
name|ax
argument_list|,
name|ay
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|windowType
specifier|inline
name|Qt
operator|::
name|WindowType
name|QWidget
operator|::
name|windowType
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|Qt
operator|::
name|WindowType
operator|>
operator|(
name|int
argument_list|(
name|data
operator|->
name|window_flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|windowFlags
specifier|inline
name|Qt
operator|::
name|WindowFlags
name|QWidget
operator|::
name|windowFlags
argument_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|window_flags
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isTopLevel
specifier|inline
name|bool
name|QWidget
operator|::
name|isTopLevel
argument_list|()
specifier|const
block|{
return|return
operator|(
name|windowType
argument_list|()
operator|&
name|Qt
operator|::
name|Window
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isWindow
specifier|inline
name|bool
name|QWidget
operator|::
name|isWindow
argument_list|()
specifier|const
block|{
return|return
operator|(
name|windowType
argument_list|()
operator|&
name|Qt
operator|::
name|Window
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isEnabled
specifier|inline
name|bool
name|QWidget
operator|::
name|isEnabled
argument_list|()
specifier|const
block|{
return|return
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Disabled
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isModal
specifier|inline
name|bool
name|QWidget
operator|::
name|isModal
argument_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|window_modality
operator|!=
name|Qt
operator|::
name|NonModal
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isEnabledToTLW
specifier|inline
name|bool
name|QWidget
operator|::
name|isEnabledToTLW
argument_list|()
specifier|const
block|{
return|return
name|isEnabled
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|minimumWidth
specifier|inline
name|int
name|QWidget
operator|::
name|minimumWidth
argument_list|()
specifier|const
block|{
return|return
name|minimumSize
argument_list|()
operator|.
name|width
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|minimumHeight
specifier|inline
name|int
name|QWidget
operator|::
name|minimumHeight
argument_list|()
specifier|const
block|{
return|return
name|minimumSize
argument_list|()
operator|.
name|height
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|maximumWidth
specifier|inline
name|int
name|QWidget
operator|::
name|maximumWidth
argument_list|()
specifier|const
block|{
return|return
name|maximumSize
argument_list|()
operator|.
name|width
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|maximumHeight
specifier|inline
name|int
name|QWidget
operator|::
name|maximumHeight
argument_list|()
specifier|const
block|{
return|return
name|maximumSize
argument_list|()
operator|.
name|height
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setMinimumSize
specifier|inline
name|void
name|QWidget
operator|::
name|setMinimumSize
argument_list|(
argument|const QSize&s
argument_list|)
block|{
name|setMinimumSize
argument_list|(
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|s
operator|.
name|height
argument_list|()
argument_list|)
block|; }
DECL|function|setMaximumSize
specifier|inline
name|void
name|QWidget
operator|::
name|setMaximumSize
argument_list|(
argument|const QSize&s
argument_list|)
block|{
name|setMaximumSize
argument_list|(
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|s
operator|.
name|height
argument_list|()
argument_list|)
block|; }
DECL|function|setSizeIncrement
specifier|inline
name|void
name|QWidget
operator|::
name|setSizeIncrement
argument_list|(
argument|const QSize&s
argument_list|)
block|{
name|setSizeIncrement
argument_list|(
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|s
operator|.
name|height
argument_list|()
argument_list|)
block|; }
DECL|function|setBaseSize
specifier|inline
name|void
name|QWidget
operator|::
name|setBaseSize
argument_list|(
argument|const QSize&s
argument_list|)
block|{
name|setBaseSize
argument_list|(
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|s
operator|.
name|height
argument_list|()
argument_list|)
block|; }
DECL|function|font
specifier|inline
specifier|const
name|QFont
operator|&
name|QWidget
operator|::
name|font
argument_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|fnt
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fontMetrics
specifier|inline
name|QFontMetrics
name|QWidget
operator|::
name|fontMetrics
argument_list|()
specifier|const
block|{
return|return
name|QFontMetrics
argument_list|(
name|data
operator|->
name|fnt
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fontInfo
specifier|inline
name|QFontInfo
name|QWidget
operator|::
name|fontInfo
argument_list|()
specifier|const
block|{
return|return
name|QFontInfo
argument_list|(
name|data
operator|->
name|fnt
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setMouseTracking
specifier|inline
name|void
name|QWidget
operator|::
name|setMouseTracking
argument_list|(
argument|bool enable
argument_list|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_MouseTracking
argument_list|,
name|enable
argument_list|)
block|; }
DECL|function|hasMouseTracking
specifier|inline
name|bool
name|QWidget
operator|::
name|hasMouseTracking
argument_list|()
specifier|const
block|{
return|return
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_MouseTracking
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|underMouse
specifier|inline
name|bool
name|QWidget
operator|::
name|underMouse
argument_list|()
specifier|const
block|{
return|return
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_UnderMouse
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|updatesEnabled
specifier|inline
name|bool
name|QWidget
operator|::
name|updatesEnabled
argument_list|()
specifier|const
block|{
return|return
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_UpdatesDisabled
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|update
specifier|inline
name|void
name|QWidget
operator|::
name|update
argument_list|(
argument|int ax
argument_list|,
argument|int ay
argument_list|,
argument|int aw
argument_list|,
argument|int ah
argument_list|)
block|{
name|update
argument_list|(
name|QRect
argument_list|(
name|ax
argument_list|,
name|ay
argument_list|,
name|aw
argument_list|,
name|ah
argument_list|)
argument_list|)
block|; }
DECL|function|isVisible
specifier|inline
name|bool
name|QWidget
operator|::
name|isVisible
argument_list|()
specifier|const
block|{
return|return
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isHidden
specifier|inline
name|bool
name|QWidget
operator|::
name|isHidden
argument_list|()
specifier|const
block|{
return|return
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|move
specifier|inline
name|void
name|QWidget
operator|::
name|move
argument_list|(
argument|int ax
argument_list|,
argument|int ay
argument_list|)
block|{
name|move
argument_list|(
name|QPoint
argument_list|(
name|ax
argument_list|,
name|ay
argument_list|)
argument_list|)
block|; }
DECL|function|resize
specifier|inline
name|void
name|QWidget
operator|::
name|resize
argument_list|(
argument|int w
argument_list|,
argument|int h
argument_list|)
block|{
name|resize
argument_list|(
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
block|; }
DECL|function|setGeometry
specifier|inline
name|void
name|QWidget
operator|::
name|setGeometry
argument_list|(
argument|int ax
argument_list|,
argument|int ay
argument_list|,
argument|int aw
argument_list|,
argument|int ah
argument_list|)
block|{
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|ax
argument_list|,
name|ay
argument_list|,
name|aw
argument_list|,
name|ah
argument_list|)
argument_list|)
block|; }
DECL|function|rect
specifier|inline
name|QRect
name|QWidget
operator|::
name|rect
argument_list|()
specifier|const
block|{
return|return
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|data
operator|->
name|crect
operator|.
name|width
argument_list|()
argument_list|,
name|data
operator|->
name|crect
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|geometry
specifier|inline
specifier|const
name|QRect
operator|&
name|QWidget
operator|::
name|geometry
argument_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|crect
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|size
specifier|inline
name|QSize
name|QWidget
operator|::
name|size
argument_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|crect
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|width
specifier|inline
name|int
name|QWidget
operator|::
name|width
argument_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|crect
operator|.
name|width
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|height
specifier|inline
name|int
name|QWidget
operator|::
name|height
argument_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|crect
operator|.
name|height
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|parentWidget
specifier|inline
name|QWidget
operator|*
name|QWidget
operator|::
name|parentWidget
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|QWidget
operator|*
operator|>
operator|(
name|QObject
operator|::
name|parent
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setSizePolicy
specifier|inline
name|void
name|QWidget
operator|::
name|setSizePolicy
argument_list|(
argument|QSizePolicy::Policy hor
argument_list|,
argument|QSizePolicy::Policy ver
argument_list|)
block|{
name|setSizePolicy
argument_list|(
name|QSizePolicy
argument_list|(
name|hor
argument_list|,
name|ver
argument_list|)
argument_list|)
block|; }
DECL|function|testAttribute
specifier|inline
name|bool
name|QWidget
operator|::
name|testAttribute
argument_list|(
argument|Qt::WidgetAttribute attribute
argument_list|)
specifier|const
block|{
if|if
condition|(
name|attribute
operator|<
name|int
argument_list|(
literal|8
operator|*
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
argument_list|)
condition|)
return|return
name|data
operator|->
name|widget_attributes
operator|&
operator|(
literal|1
operator|<<
name|attribute
operator|)
return|;
end_expr_stmt
begin_return
return|return
name|testAttribute_helper
argument_list|(
name|attribute
argument_list|)
return|;
end_return
begin_define
DECL|macro|QWIDGETSIZE_MAX
unit|}
define|#
directive|define
name|QWIDGETSIZE_MAX
value|((1<<24)-1)
end_define
begin_macro
DECL|macro|QWIDGETSIZE_MAX
unit|QT_END_NAMESPACE
name|QT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWIDGET_H
end_comment
end_unit
