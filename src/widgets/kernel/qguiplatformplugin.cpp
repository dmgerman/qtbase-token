begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qguiplatformplugin_p.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qsettings.h>
end_include
begin_include
include|#
directive|include
file|"private/qfactoryloader_p.h"
end_include
begin_include
include|#
directive|include
file|"qstylefactory.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qicon.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_smartphone
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//qguifunctions_wince.cpp
end_comment
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_mobile
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//qguifunctions_wince.cpp
end_comment
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_pocket_pc
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//qguifunctions_wince.cpp
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
end_if
begin_include
include|#
directive|include
file|<private/qkde_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgtkstyle_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_x11_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*! \internal     Return (an construct if necesseray) the Gui Platform plugin.      The plugin key to be loaded is inside the QT_PLATFORM_PLUGIN environment variable.     If it is not set, it will be the DESKTOP_SESSION on X11.      If no plugin can be loaded, the default one is returned.  */
DECL|function|qt_guiPlatformPlugin
name|QGuiPlatformPlugin
modifier|*
name|qt_guiPlatformPlugin
parameter_list|()
block|{
specifier|static
name|QGuiPlatformPlugin
modifier|*
name|plugin
decl_stmt|;
if|if
condition|(
operator|!
name|plugin
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|QString
name|key
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_PLATFORM_PLUGIN"
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
if|if
condition|(
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|X11
operator|->
name|desktopEnvironment
condition|)
block|{
case|case
name|DE_KDE
case|:
name|key
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"kde"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|key
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"DESKTOP_SESSION"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QApplication
operator|::
name|desktopSettingsAware
argument_list|()
condition|)
block|{
name|QFactoryLoader
name|loader
argument_list|(
name|QGuiPlatformPluginInterface_iid
argument_list|,
name|QLatin1String
argument_list|(
literal|"/gui_platform"
argument_list|)
argument_list|)
decl_stmt|;
name|plugin
operator|=
name|qobject_cast
argument_list|<
name|QGuiPlatformPlugin
operator|*
argument_list|>
argument_list|(
name|loader
operator|.
name|instance
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_LIBRARY
if|if
condition|(
operator|!
name|plugin
condition|)
block|{
specifier|static
name|QGuiPlatformPlugin
name|def
decl_stmt|;
name|plugin
operator|=
operator|&
name|def
expr_stmt|;
block|}
block|}
return|return
name|plugin
return|;
block|}
end_function
begin_comment
comment|/* \class QPlatformPlugin     QGuiPlatformPlugin can be used to integrate Qt applications in a platform built on top of Qt.     The application developer should not know or use the plugin, it is only used by Qt internaly.      But full platforms that are built on top of Qt may provide a plugin so 3rd party Qt applications     running on the platform are integrated.  */
end_comment
begin_comment
comment|/*     The constructor can be used to install hooks in Qt  */
end_comment
begin_constructor
DECL|function|QGuiPlatformPlugin
name|QGuiPlatformPlugin
operator|::
name|QGuiPlatformPlugin
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{}
end_constructor
begin_destructor
DECL|function|~QGuiPlatformPlugin
name|QGuiPlatformPlugin
operator|::
name|~
name|QGuiPlatformPlugin
parameter_list|()
block|{}
end_destructor
begin_comment
comment|/* backend for QFileIconProvider,  null icon means default */
end_comment
begin_function
DECL|function|fileSystemIcon
name|QIcon
name|QGuiPlatformPlugin
operator|::
name|fileSystemIcon
parameter_list|(
specifier|const
name|QFileInfo
modifier|&
parameter_list|)
block|{
return|return
name|QIcon
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
