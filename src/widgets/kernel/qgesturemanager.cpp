begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"private/qgesturemanager_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qstandardgestures_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qgesture_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qgraphicsitem_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qevent_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qgesture.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicsitem.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC
end_ifdef
begin_include
include|#
directive|include
file|"qmacgesturerecognizer_mac_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_NATIVE_GESTURES
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qwinnativepangesturerecognizer_win_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_comment
comment|// #define GESTURE_DEBUG
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|GESTURE_DEBUG
end_ifndef
begin_define
DECL|macro|DEBUG
define|#
directive|define
name|DEBUG
value|if (0) qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|DEBUG
define|#
directive|define
name|DEBUG
value|qDebug
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QGestureManager
name|QGestureManager
operator|::
name|QGestureManager
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|state
argument_list|(
name|NotGesture
argument_list|)
member_init_list|,
name|m_lastCustomGestureId
argument_list|(
name|Qt
operator|::
name|CustomGesture
argument_list|)
block|{
name|qRegisterMetaType
argument_list|<
name|Qt
operator|::
name|GestureState
argument_list|>
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
name|registerGestureRecognizer
argument_list|(
operator|new
name|QMacSwipeGestureRecognizer
argument_list|)
expr_stmt|;
name|registerGestureRecognizer
argument_list|(
operator|new
name|QMacPinchGestureRecognizer
argument_list|)
expr_stmt|;
name|registerGestureRecognizer
argument_list|(
operator|new
name|QMacPanGestureRecognizer
argument_list|)
expr_stmt|;
else|#
directive|else
name|registerGestureRecognizer
argument_list|(
operator|new
name|QPanGestureRecognizer
argument_list|)
expr_stmt|;
name|registerGestureRecognizer
argument_list|(
operator|new
name|QPinchGestureRecognizer
argument_list|)
expr_stmt|;
name|registerGestureRecognizer
argument_list|(
operator|new
name|QSwipeGestureRecognizer
argument_list|)
expr_stmt|;
name|registerGestureRecognizer
argument_list|(
operator|new
name|QTapGestureRecognizer
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_NATIVE_GESTURES
argument_list|)
if|if
condition|(
name|QApplicationPrivate
operator|::
name|HasTouchSupport
condition|)
name|registerGestureRecognizer
argument_list|(
operator|new
name|QWinNativePanGestureRecognizer
argument_list|)
expr_stmt|;
endif|#
directive|endif
else|#
directive|else
name|registerGestureRecognizer
argument_list|(
operator|new
name|QTapAndHoldGestureRecognizer
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QGestureManager
name|QGestureManager
operator|::
name|~
name|QGestureManager
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_recognizers
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QGestureRecognizer
modifier|*
name|recognizer
decl|,
name|m_obsoleteGestures
operator|.
name|keys
argument_list|()
control|)
block|{
name|qDeleteAll
argument_list|(
name|m_obsoleteGestures
operator|.
name|value
argument_list|(
name|recognizer
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|recognizer
expr_stmt|;
block|}
name|m_obsoleteGestures
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|registerGestureRecognizer
name|Qt
operator|::
name|GestureType
name|QGestureManager
operator|::
name|registerGestureRecognizer
parameter_list|(
name|QGestureRecognizer
modifier|*
name|recognizer
parameter_list|)
block|{
name|QGesture
modifier|*
name|dummy
init|=
name|recognizer
operator|->
name|create
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dummy
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGestureManager::registerGestureRecognizer: "
literal|"the recognizer fails to create a gesture object, skipping registration."
argument_list|)
expr_stmt|;
return|return
name|Qt
operator|::
name|GestureType
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|Qt
operator|::
name|GestureType
name|type
init|=
name|dummy
operator|->
name|gestureType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|CustomGesture
condition|)
block|{
comment|// generate a new custom gesture id
operator|++
name|m_lastCustomGestureId
expr_stmt|;
name|type
operator|=
name|Qt
operator|::
name|GestureType
argument_list|(
name|m_lastCustomGestureId
argument_list|)
expr_stmt|;
block|}
name|m_recognizers
operator|.
name|insertMulti
argument_list|(
name|type
argument_list|,
name|recognizer
argument_list|)
expr_stmt|;
operator|delete
name|dummy
expr_stmt|;
return|return
name|type
return|;
block|}
end_function
begin_function
DECL|function|unregisterGestureRecognizer
name|void
name|QGestureManager
operator|::
name|unregisterGestureRecognizer
parameter_list|(
name|Qt
operator|::
name|GestureType
name|type
parameter_list|)
block|{
name|QList
argument_list|<
name|QGestureRecognizer
modifier|*
argument_list|>
name|list
init|=
name|m_recognizers
operator|.
name|values
argument_list|(
name|type
argument_list|)
decl_stmt|;
while|while
condition|(
name|QGestureRecognizer
modifier|*
name|recognizer
init|=
name|m_recognizers
operator|.
name|take
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|m_obsoleteGestures
operator|.
name|contains
argument_list|(
name|recognizer
argument_list|)
condition|)
block|{
comment|// inserting even an empty QSet will cause the recognizer to be deleted on destruction of the manager
name|m_obsoleteGestures
operator|.
name|insert
argument_list|(
name|recognizer
argument_list|,
name|QSet
argument_list|<
name|QGesture
operator|*
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
foreach|foreach
control|(
name|QGesture
modifier|*
name|g
decl|,
name|m_gestureToRecognizer
operator|.
name|keys
argument_list|()
control|)
block|{
name|QGestureRecognizer
modifier|*
name|recognizer
init|=
name|m_gestureToRecognizer
operator|.
name|value
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|contains
argument_list|(
name|recognizer
argument_list|)
condition|)
block|{
name|m_deletedRecognizers
operator|.
name|insert
argument_list|(
name|g
argument_list|,
name|recognizer
argument_list|)
expr_stmt|;
block|}
block|}
name|QMap
argument_list|<
name|ObjectGesture
argument_list|,
name|QList
argument_list|<
name|QGesture
modifier|*
argument_list|>
argument_list|>
operator|::
name|const_iterator
name|iter
init|=
name|m_objectGestures
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|!=
name|m_objectGestures
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|ObjectGesture
name|objectGesture
init|=
name|iter
operator|.
name|key
argument_list|()
decl_stmt|;
if|if
condition|(
name|objectGesture
operator|.
name|gesture
operator|==
name|type
condition|)
block|{
foreach|foreach
control|(
name|QGesture
modifier|*
name|g
decl|,
name|iter
operator|.
name|value
argument_list|()
control|)
block|{
if|if
condition|(
name|QGestureRecognizer
modifier|*
name|recognizer
init|=
name|m_gestureToRecognizer
operator|.
name|value
argument_list|(
name|g
argument_list|)
condition|)
block|{
name|m_gestureToRecognizer
operator|.
name|remove
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|m_obsoleteGestures
index|[
name|recognizer
index|]
operator|.
name|insert
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|++
name|iter
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanupCachedGestures
name|void
name|QGestureManager
operator|::
name|cleanupCachedGestures
parameter_list|(
name|QObject
modifier|*
name|target
parameter_list|,
name|Qt
operator|::
name|GestureType
name|type
parameter_list|)
block|{
name|QMap
argument_list|<
name|ObjectGesture
argument_list|,
name|QList
argument_list|<
name|QGesture
modifier|*
argument_list|>
argument_list|>
operator|::
name|Iterator
name|iter
init|=
name|m_objectGestures
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|!=
name|m_objectGestures
operator|.
name|end
argument_list|()
condition|)
block|{
name|ObjectGesture
name|objectGesture
init|=
name|iter
operator|.
name|key
argument_list|()
decl_stmt|;
if|if
condition|(
name|objectGesture
operator|.
name|gesture
operator|==
name|type
operator|&&
name|target
operator|==
name|objectGesture
operator|.
name|object
condition|)
block|{
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|gestures
init|=
name|iter
operator|.
name|value
argument_list|()
operator|.
name|toSet
argument_list|()
decl_stmt|;
for|for
control|(
name|QHash
argument_list|<
name|QGestureRecognizer
operator|*
argument_list|,
name|QSet
argument_list|<
name|QGesture
operator|*
argument_list|>
argument_list|>
operator|::
name|iterator
name|it
init|=
name|m_obsoleteGestures
operator|.
name|begin
argument_list|()
init|,
name|e
init|=
name|m_obsoleteGestures
operator|.
name|end
argument_list|()
init|;
name|it
operator|!=
name|e
condition|;
operator|++
name|it
control|)
block|{
name|it
operator|.
name|value
argument_list|()
operator|-=
name|gestures
expr_stmt|;
block|}
foreach|foreach
control|(
name|QGesture
modifier|*
name|g
decl|,
name|gestures
control|)
block|{
name|m_deletedRecognizers
operator|.
name|remove
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|m_gestureToRecognizer
operator|.
name|remove
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|m_maybeGestures
operator|.
name|remove
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|m_activeGestures
operator|.
name|remove
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|m_gestureOwners
operator|.
name|remove
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|m_gestureTargets
operator|.
name|remove
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|m_gesturesToDelete
operator|.
name|insert
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
name|iter
operator|=
name|m_objectGestures
operator|.
name|erase
argument_list|(
name|iter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|iter
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// get or create a QGesture object that will represent the state for a given object, used by the recognizer
end_comment
begin_function
DECL|function|getState
name|QGesture
modifier|*
name|QGestureManager
operator|::
name|getState
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QGestureRecognizer
modifier|*
name|recognizer
parameter_list|,
name|Qt
operator|::
name|GestureType
name|type
parameter_list|)
block|{
comment|// if the widget is being deleted we should be careful not to
comment|// create a new state, as it will create QWeakPointer which doesn't work
comment|// from the destructor.
if|if
condition|(
name|object
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|data
operator|.
name|in_destructor
condition|)
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|QGesture
modifier|*
name|g
init|=
name|qobject_cast
argument_list|<
name|QGesture
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
condition|)
block|{
return|return
name|g
return|;
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QGraphicsObject
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
name|QGraphicsObject
modifier|*
name|graphicsObject
init|=
cast|static_cast
argument_list|<
name|QGraphicsObject
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|graphicsObject
operator|->
name|QGraphicsItem
operator|::
name|d_func
argument_list|()
operator|->
name|inDestructor
condition|)
return|return
literal|0
return|;
endif|#
directive|endif
block|}
comment|// check if the QGesture for this recognizer has already been created
foreach|foreach
control|(
name|QGesture
modifier|*
name|state
decl|,
name|m_objectGestures
operator|.
name|value
argument_list|(
name|QGestureManager
operator|::
name|ObjectGesture
argument_list|(
name|object
argument_list|,
name|type
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|m_gestureToRecognizer
operator|.
name|value
argument_list|(
name|state
argument_list|)
operator|==
name|recognizer
condition|)
return|return
name|state
return|;
block|}
name|Q_ASSERT
argument_list|(
name|recognizer
argument_list|)
expr_stmt|;
name|QGesture
modifier|*
name|state
init|=
name|recognizer
operator|->
name|create
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|state
condition|)
return|return
literal|0
return|;
name|state
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|gestureType
argument_list|()
operator|==
name|Qt
operator|::
name|CustomGesture
condition|)
block|{
comment|// if the recognizer didn't fill in the gesture type, then this
comment|// is a custom gesture with autogenerated id and we fill it.
name|state
operator|->
name|d_func
argument_list|()
operator|->
name|gestureType
operator|=
name|type
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|GESTURE_DEBUG
argument_list|)
name|state
operator|->
name|setObjectName
argument_list|(
name|QString
operator|::
name|number
argument_list|(
operator|(
name|int
operator|)
name|type
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|m_objectGestures
index|[
name|QGestureManager
operator|::
name|ObjectGesture
argument_list|(
name|object
argument_list|,
name|type
argument_list|)
index|]
operator|.
name|append
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|m_gestureToRecognizer
index|[
name|state
index|]
operator|=
name|recognizer
expr_stmt|;
name|m_gestureOwners
index|[
name|state
index|]
operator|=
name|object
expr_stmt|;
return|return
name|state
return|;
block|}
end_function
begin_function
DECL|function|filterEventThroughContexts
name|bool
name|QGestureManager
operator|::
name|filterEventThroughContexts
parameter_list|(
specifier|const
name|QMultiMap
argument_list|<
name|QObject
modifier|*
argument_list|,
name|Qt
operator|::
name|GestureType
argument_list|>
modifier|&
name|contexts
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|triggeredGestures
decl_stmt|;
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|finishedGestures
decl_stmt|;
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|newMaybeGestures
decl_stmt|;
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|notGestures
decl_stmt|;
comment|// TODO: sort contexts by the gesture type and check if one of the contexts
comment|//       is already active.
name|bool
name|consumeEventHint
init|=
literal|false
decl_stmt|;
comment|// filter the event through recognizers
typedef|typedef
name|QMultiMap
argument_list|<
name|QObject
modifier|*
argument_list|,
name|Qt
operator|::
name|GestureType
argument_list|>
operator|::
name|const_iterator
name|ContextIterator
typedef|;
name|ContextIterator
name|contextEnd
init|=
name|contexts
operator|.
name|end
argument_list|()
decl_stmt|;
for|for
control|(
name|ContextIterator
name|context
init|=
name|contexts
operator|.
name|begin
argument_list|()
init|;
name|context
operator|!=
name|contextEnd
condition|;
operator|++
name|context
control|)
block|{
name|Qt
operator|::
name|GestureType
name|gestureType
init|=
name|context
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|const
name|QMap
argument_list|<
name|Qt
operator|::
name|GestureType
argument_list|,
name|QGestureRecognizer
modifier|*
argument_list|>
modifier|&
name|const_recognizers
init|=
name|m_recognizers
decl_stmt|;
name|QMap
argument_list|<
name|Qt
operator|::
name|GestureType
argument_list|,
name|QGestureRecognizer
modifier|*
argument_list|>
operator|::
name|const_iterator
name|typeToRecognizerIterator
init|=
name|const_recognizers
operator|.
name|lowerBound
argument_list|(
name|gestureType
argument_list|)
decl_stmt|,
name|typeToRecognizerEnd
init|=
name|const_recognizers
operator|.
name|upperBound
argument_list|(
name|gestureType
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|typeToRecognizerIterator
operator|!=
name|typeToRecognizerEnd
condition|;
operator|++
name|typeToRecognizerIterator
control|)
block|{
name|QGestureRecognizer
modifier|*
name|recognizer
init|=
name|typeToRecognizerIterator
operator|.
name|value
argument_list|()
decl_stmt|;
name|QObject
modifier|*
name|target
init|=
name|context
operator|.
name|key
argument_list|()
decl_stmt|;
name|QGesture
modifier|*
name|state
init|=
name|getState
argument_list|(
name|target
argument_list|,
name|recognizer
argument_list|,
name|gestureType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|state
condition|)
continue|continue;
name|QGestureRecognizer
operator|::
name|Result
name|recognizerResult
init|=
name|recognizer
operator|->
name|recognize
argument_list|(
name|state
argument_list|,
name|target
argument_list|,
name|event
argument_list|)
decl_stmt|;
name|QGestureRecognizer
operator|::
name|Result
name|recognizerState
init|=
name|recognizerResult
operator|&
name|QGestureRecognizer
operator|::
name|ResultState_Mask
decl_stmt|;
name|QGestureRecognizer
operator|::
name|Result
name|resultHint
init|=
name|recognizerResult
operator|&
name|QGestureRecognizer
operator|::
name|ResultHint_Mask
decl_stmt|;
if|if
condition|(
name|recognizerState
operator|==
name|QGestureRecognizer
operator|::
name|TriggerGesture
condition|)
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QGestureManager:Recognizer: gesture triggered: "
operator|<<
name|state
expr_stmt|;
name|triggeredGestures
operator|<<
name|state
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|recognizerState
operator|==
name|QGestureRecognizer
operator|::
name|FinishGesture
condition|)
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QGestureManager:Recognizer: gesture finished: "
operator|<<
name|state
expr_stmt|;
name|finishedGestures
operator|<<
name|state
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|recognizerState
operator|==
name|QGestureRecognizer
operator|::
name|MayBeGesture
condition|)
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QGestureManager:Recognizer: maybe gesture: "
operator|<<
name|state
expr_stmt|;
name|newMaybeGestures
operator|<<
name|state
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|recognizerState
operator|==
name|QGestureRecognizer
operator|::
name|CancelGesture
condition|)
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QGestureManager:Recognizer: not gesture: "
operator|<<
name|state
expr_stmt|;
name|notGestures
operator|<<
name|state
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|recognizerState
operator|==
name|QGestureRecognizer
operator|::
name|Ignore
condition|)
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QGestureManager:Recognizer: ignored the event: "
operator|<<
name|state
expr_stmt|;
block|}
else|else
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QGestureManager:Recognizer: hm, lets assume the recognizer"
operator|<<
literal|"ignored the event: "
operator|<<
name|state
expr_stmt|;
block|}
if|if
condition|(
name|resultHint
operator|&
name|QGestureRecognizer
operator|::
name|ConsumeEventHint
condition|)
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QGestureManager: we were asked to consume the event: "
operator|<<
name|state
expr_stmt|;
name|consumeEventHint
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|triggeredGestures
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|finishedGestures
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|newMaybeGestures
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|notGestures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|startedGestures
init|=
name|triggeredGestures
operator|-
name|m_activeGestures
decl_stmt|;
name|triggeredGestures
operator|&=
name|m_activeGestures
expr_stmt|;
comment|// check if a running gesture switched back to maybe state
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|activeToMaybeGestures
init|=
name|m_activeGestures
operator|&
name|newMaybeGestures
decl_stmt|;
comment|// check if a maybe gesture switched to canceled - reset it but don't send an event
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|maybeToCanceledGestures
init|=
name|m_maybeGestures
operator|&
name|notGestures
decl_stmt|;
comment|// check if a running gesture switched back to not gesture state,
comment|// i.e. were canceled
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|canceledGestures
init|=
name|m_activeGestures
operator|&
name|notGestures
decl_stmt|;
comment|// new gestures in maybe state
name|m_maybeGestures
operator|+=
name|newMaybeGestures
expr_stmt|;
comment|// gestures that were in maybe state
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|notMaybeGestures
init|=
operator|(
name|startedGestures
operator||
name|triggeredGestures
operator||
name|finishedGestures
operator||
name|canceledGestures
operator||
name|notGestures
operator|)
decl_stmt|;
name|m_maybeGestures
operator|-=
name|notMaybeGestures
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|(
name|startedGestures
operator|&
name|finishedGestures
operator|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|(
name|startedGestures
operator|&
name|newMaybeGestures
operator|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|(
name|startedGestures
operator|&
name|canceledGestures
operator|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|(
name|finishedGestures
operator|&
name|newMaybeGestures
operator|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|(
name|finishedGestures
operator|&
name|canceledGestures
operator|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|(
name|canceledGestures
operator|&
name|newMaybeGestures
operator|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|notStarted
init|=
name|finishedGestures
operator|-
name|m_activeGestures
decl_stmt|;
if|if
condition|(
operator|!
name|notStarted
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// there are some gestures that claim to be finished, but never started.
comment|// probably those are "singleshot" gestures so we'll fake the started state.
foreach|foreach
control|(
name|QGesture
modifier|*
name|gesture
decl|,
name|notStarted
control|)
name|gesture
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|=
name|Qt
operator|::
name|GestureStarted
expr_stmt|;
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|undeliveredGestures
decl_stmt|;
name|deliverEvents
argument_list|(
name|notStarted
argument_list|,
operator|&
name|undeliveredGestures
argument_list|)
expr_stmt|;
name|finishedGestures
operator|-=
name|undeliveredGestures
expr_stmt|;
block|}
name|m_activeGestures
operator|+=
name|startedGestures
expr_stmt|;
comment|// sanity check: all triggered gestures should already be in active gestures list
name|Q_ASSERT
argument_list|(
operator|(
name|m_activeGestures
operator|&
name|triggeredGestures
operator|)
operator|.
name|size
argument_list|()
operator|==
name|triggeredGestures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|m_activeGestures
operator|-=
name|finishedGestures
expr_stmt|;
name|m_activeGestures
operator|-=
name|activeToMaybeGestures
expr_stmt|;
name|m_activeGestures
operator|-=
name|canceledGestures
expr_stmt|;
comment|// set the proper gesture state on each gesture
foreach|foreach
control|(
name|QGesture
modifier|*
name|gesture
decl|,
name|startedGestures
control|)
name|gesture
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|=
name|Qt
operator|::
name|GestureStarted
expr_stmt|;
foreach|foreach
control|(
name|QGesture
modifier|*
name|gesture
decl|,
name|triggeredGestures
control|)
name|gesture
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|=
name|Qt
operator|::
name|GestureUpdated
expr_stmt|;
foreach|foreach
control|(
name|QGesture
modifier|*
name|gesture
decl|,
name|finishedGestures
control|)
name|gesture
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|=
name|Qt
operator|::
name|GestureFinished
expr_stmt|;
foreach|foreach
control|(
name|QGesture
modifier|*
name|gesture
decl|,
name|canceledGestures
control|)
name|gesture
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|=
name|Qt
operator|::
name|GestureCanceled
expr_stmt|;
foreach|foreach
control|(
name|QGesture
modifier|*
name|gesture
decl|,
name|activeToMaybeGestures
control|)
name|gesture
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|=
name|Qt
operator|::
name|GestureFinished
expr_stmt|;
if|if
condition|(
operator|!
name|m_activeGestures
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|m_maybeGestures
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|startedGestures
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|triggeredGestures
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|finishedGestures
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|canceledGestures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QGestureManager::filterEventThroughContexts:"
operator|<<
literal|"\n\tactiveGestures:"
operator|<<
name|m_activeGestures
operator|<<
literal|"\n\tmaybeGestures:"
operator|<<
name|m_maybeGestures
operator|<<
literal|"\n\tstarted:"
operator|<<
name|startedGestures
operator|<<
literal|"\n\ttriggered:"
operator|<<
name|triggeredGestures
operator|<<
literal|"\n\tfinished:"
operator|<<
name|finishedGestures
operator|<<
literal|"\n\tcanceled:"
operator|<<
name|canceledGestures
operator|<<
literal|"\n\tmaybe-canceled:"
operator|<<
name|maybeToCanceledGestures
expr_stmt|;
block|}
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|undeliveredGestures
decl_stmt|;
name|deliverEvents
argument_list|(
name|startedGestures
operator|+
name|triggeredGestures
operator|+
name|finishedGestures
operator|+
name|canceledGestures
argument_list|,
operator|&
name|undeliveredGestures
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QGesture
modifier|*
name|g
decl|,
name|startedGestures
control|)
block|{
if|if
condition|(
name|undeliveredGestures
operator|.
name|contains
argument_list|(
name|g
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|g
operator|->
name|gestureCancelPolicy
argument_list|()
operator|==
name|QGesture
operator|::
name|CancelAllInContext
condition|)
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"lets try to cancel some"
expr_stmt|;
comment|// find gestures in context in Qt::GestureStarted or Qt::GestureUpdated state and cancel them
name|cancelGesturesForChildren
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
block|}
name|m_activeGestures
operator|-=
name|undeliveredGestures
expr_stmt|;
comment|// reset gestures that ended
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|endedGestures
init|=
name|finishedGestures
operator|+
name|canceledGestures
operator|+
name|undeliveredGestures
operator|+
name|maybeToCanceledGestures
decl_stmt|;
foreach|foreach
control|(
name|QGesture
modifier|*
name|gesture
decl|,
name|endedGestures
control|)
block|{
name|recycle
argument_list|(
name|gesture
argument_list|)
expr_stmt|;
name|m_gestureTargets
operator|.
name|remove
argument_list|(
name|gesture
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Clean up the Gestures
name|qDeleteAll
argument_list|(
name|m_gesturesToDelete
argument_list|)
expr_stmt|;
name|m_gesturesToDelete
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|consumeEventHint
return|;
block|}
end_function
begin_comment
comment|// Cancel all gestures of children of the widget that original is associated with
end_comment
begin_function
DECL|function|cancelGesturesForChildren
name|void
name|QGestureManager
operator|::
name|cancelGesturesForChildren
parameter_list|(
name|QGesture
modifier|*
name|original
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|originatingWidget
init|=
name|m_gestureTargets
operator|.
name|value
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|originatingWidget
argument_list|)
expr_stmt|;
comment|// iterate over all active gestures and all maybe gestures
comment|// for each find the owner
comment|// if the owner is part of our sub-hierarchy, cancel it.
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|cancelledGestures
decl_stmt|;
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
operator|::
name|Iterator
name|iter
init|=
name|m_activeGestures
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|!=
name|m_activeGestures
operator|.
name|end
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|widget
init|=
name|m_gestureTargets
operator|.
name|value
argument_list|(
operator|*
name|iter
argument_list|)
decl_stmt|;
comment|// note that we don't touch the gestures for our originatingWidget
if|if
condition|(
name|widget
operator|!=
name|originatingWidget
operator|&&
name|originatingWidget
operator|->
name|isAncestorOf
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"  found a gesture to cancel"
operator|<<
operator|(
operator|*
name|iter
operator|)
expr_stmt|;
operator|(
operator|*
name|iter
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|=
name|Qt
operator|::
name|GestureCanceled
expr_stmt|;
name|cancelledGestures
operator|<<
operator|*
name|iter
expr_stmt|;
name|iter
operator|=
name|m_activeGestures
operator|.
name|erase
argument_list|(
name|iter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|iter
expr_stmt|;
block|}
block|}
comment|// TODO handle 'maybe' gestures too
comment|// sort them per target widget by cherry picking from almostCanceledGestures and delivering
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|almostCanceledGestures
init|=
name|cancelledGestures
decl_stmt|;
while|while
condition|(
operator|!
name|almostCanceledGestures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|target
init|=
literal|0
decl_stmt|;
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|gestures
decl_stmt|;
name|iter
operator|=
name|almostCanceledGestures
operator|.
name|begin
argument_list|()
expr_stmt|;
comment|// sort per target widget
while|while
condition|(
name|iter
operator|!=
name|almostCanceledGestures
operator|.
name|end
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|widget
init|=
name|m_gestureTargets
operator|.
name|value
argument_list|(
operator|*
name|iter
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|==
literal|0
condition|)
name|target
operator|=
name|widget
expr_stmt|;
if|if
condition|(
name|target
operator|==
name|widget
condition|)
block|{
name|gestures
operator|<<
operator|*
name|iter
expr_stmt|;
name|iter
operator|=
name|almostCanceledGestures
operator|.
name|erase
argument_list|(
name|iter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|iter
expr_stmt|;
block|}
block|}
name|Q_ASSERT
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|undeliveredGestures
decl_stmt|;
name|deliverEvents
argument_list|(
name|gestures
argument_list|,
operator|&
name|undeliveredGestures
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|iter
operator|=
name|cancelledGestures
operator|.
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|cancelledGestures
operator|.
name|end
argument_list|()
condition|;
operator|++
name|iter
control|)
name|recycle
argument_list|(
operator|*
name|iter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupGesturesForRemovedRecognizer
name|void
name|QGestureManager
operator|::
name|cleanupGesturesForRemovedRecognizer
parameter_list|(
name|QGesture
modifier|*
name|gesture
parameter_list|)
block|{
name|QGestureRecognizer
modifier|*
name|recognizer
init|=
name|m_deletedRecognizers
operator|.
name|value
argument_list|(
name|gesture
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|recognizer
condition|)
comment|//The Gesture is removed while in the even loop, so the recognizers for this gestures was removed
return|return;
name|m_deletedRecognizers
operator|.
name|remove
argument_list|(
name|gesture
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_deletedRecognizers
operator|.
name|keys
argument_list|(
name|recognizer
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no more active gestures, cleanup!
name|qDeleteAll
argument_list|(
name|m_obsoleteGestures
operator|.
name|value
argument_list|(
name|recognizer
argument_list|)
argument_list|)
expr_stmt|;
name|m_obsoleteGestures
operator|.
name|remove
argument_list|(
name|recognizer
argument_list|)
expr_stmt|;
operator|delete
name|recognizer
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// return true if accepted (consumed)
end_comment
begin_function
DECL|function|filterEvent
name|bool
name|QGestureManager
operator|::
name|filterEvent
parameter_list|(
name|QWidget
modifier|*
name|receiver
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|QMap
argument_list|<
name|Qt
operator|::
name|GestureType
argument_list|,
name|int
argument_list|>
name|types
decl_stmt|;
name|QMultiMap
argument_list|<
name|QObject
modifier|*
argument_list|,
name|Qt
operator|::
name|GestureType
argument_list|>
name|contexts
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|receiver
decl_stmt|;
typedef|typedef
name|QMap
argument_list|<
name|Qt
operator|::
name|GestureType
argument_list|,
name|Qt
operator|::
name|GestureFlags
argument_list|>
operator|::
name|const_iterator
name|ContextIterator
typedef|;
if|if
condition|(
operator|!
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|gestureContext
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ContextIterator
name|it
init|=
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|gestureContext
operator|.
name|constBegin
argument_list|()
init|,
name|e
init|=
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|gestureContext
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|e
condition|;
operator|++
name|it
control|)
block|{
name|types
operator|.
name|insert
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|contexts
operator|.
name|insertMulti
argument_list|(
name|w
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// find all gesture contexts for the widget tree
name|w
operator|=
name|w
operator|->
name|isWindow
argument_list|()
condition|?
literal|0
else|:
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
while|while
condition|(
name|w
condition|)
block|{
for|for
control|(
name|ContextIterator
name|it
init|=
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|gestureContext
operator|.
name|constBegin
argument_list|()
init|,
name|e
init|=
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|gestureContext
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|e
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|it
operator|.
name|value
argument_list|()
operator|&
name|Qt
operator|::
name|DontStartGestureOnChildren
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|types
operator|.
name|contains
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
condition|)
block|{
name|types
operator|.
name|insert
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|contexts
operator|.
name|insertMulti
argument_list|(
name|w
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|w
operator|->
name|isWindow
argument_list|()
condition|)
break|break;
name|w
operator|=
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
return|return
name|contexts
operator|.
name|isEmpty
argument_list|()
condition|?
literal|false
else|:
name|filterEventThroughContexts
argument_list|(
name|contexts
argument_list|,
name|event
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
end_ifndef
begin_function
DECL|function|filterEvent
name|bool
name|QGestureManager
operator|::
name|filterEvent
parameter_list|(
name|QGraphicsObject
modifier|*
name|receiver
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|QMap
argument_list|<
name|Qt
operator|::
name|GestureType
argument_list|,
name|int
argument_list|>
name|types
decl_stmt|;
name|QMultiMap
argument_list|<
name|QObject
modifier|*
argument_list|,
name|Qt
operator|::
name|GestureType
argument_list|>
name|contexts
decl_stmt|;
name|QGraphicsObject
modifier|*
name|item
init|=
name|receiver
decl_stmt|;
if|if
condition|(
operator|!
name|item
operator|->
name|QGraphicsItem
operator|::
name|d_func
argument_list|()
operator|->
name|gestureContext
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
typedef|typedef
name|QMap
argument_list|<
name|Qt
operator|::
name|GestureType
argument_list|,
name|Qt
operator|::
name|GestureFlags
argument_list|>
operator|::
name|const_iterator
name|ContextIterator
typedef|;
for|for
control|(
name|ContextIterator
name|it
init|=
name|item
operator|->
name|QGraphicsItem
operator|::
name|d_func
argument_list|()
operator|->
name|gestureContext
operator|.
name|constBegin
argument_list|()
init|,
name|e
init|=
name|item
operator|->
name|QGraphicsItem
operator|::
name|d_func
argument_list|()
operator|->
name|gestureContext
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|e
condition|;
operator|++
name|it
control|)
block|{
name|types
operator|.
name|insert
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|contexts
operator|.
name|insertMulti
argument_list|(
name|item
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// find all gesture contexts for the graphics object tree
name|item
operator|=
name|item
operator|->
name|parentObject
argument_list|()
expr_stmt|;
while|while
condition|(
name|item
condition|)
block|{
typedef|typedef
name|QMap
argument_list|<
name|Qt
operator|::
name|GestureType
argument_list|,
name|Qt
operator|::
name|GestureFlags
argument_list|>
operator|::
name|const_iterator
name|ContextIterator
typedef|;
for|for
control|(
name|ContextIterator
name|it
init|=
name|item
operator|->
name|QGraphicsItem
operator|::
name|d_func
argument_list|()
operator|->
name|gestureContext
operator|.
name|constBegin
argument_list|()
init|,
name|e
init|=
name|item
operator|->
name|QGraphicsItem
operator|::
name|d_func
argument_list|()
operator|->
name|gestureContext
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|e
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|it
operator|.
name|value
argument_list|()
operator|&
name|Qt
operator|::
name|DontStartGestureOnChildren
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|types
operator|.
name|contains
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
condition|)
block|{
name|types
operator|.
name|insert
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|contexts
operator|.
name|insertMulti
argument_list|(
name|item
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|item
operator|=
name|item
operator|->
name|parentObject
argument_list|()
expr_stmt|;
block|}
return|return
name|contexts
operator|.
name|isEmpty
argument_list|()
condition|?
literal|false
else|:
name|filterEventThroughContexts
argument_list|(
name|contexts
argument_list|,
name|event
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|filterEvent
name|bool
name|QGestureManager
operator|::
name|filterEvent
parameter_list|(
name|QObject
modifier|*
name|receiver
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_gestureToRecognizer
operator|.
name|contains
argument_list|(
cast|static_cast
argument_list|<
name|QGesture
operator|*
argument_list|>
argument_list|(
name|receiver
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
name|QGesture
modifier|*
name|state
init|=
cast|static_cast
argument_list|<
name|QGesture
operator|*
argument_list|>
argument_list|(
name|receiver
argument_list|)
decl_stmt|;
name|QMultiMap
argument_list|<
name|QObject
modifier|*
argument_list|,
name|Qt
operator|::
name|GestureType
argument_list|>
name|contexts
decl_stmt|;
name|contexts
operator|.
name|insert
argument_list|(
name|state
argument_list|,
name|state
operator|->
name|gestureType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|filterEventThroughContexts
argument_list|(
name|contexts
argument_list|,
name|event
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getGestureTargets
name|void
name|QGestureManager
operator|::
name|getGestureTargets
parameter_list|(
specifier|const
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
modifier|&
name|gestures
parameter_list|,
name|QHash
argument_list|<
name|QWidget
modifier|*
argument_list|,
name|QList
argument_list|<
name|QGesture
modifier|*
argument_list|>
argument_list|>
modifier|*
name|conflicts
parameter_list|,
name|QHash
argument_list|<
name|QWidget
modifier|*
argument_list|,
name|QList
argument_list|<
name|QGesture
modifier|*
argument_list|>
argument_list|>
modifier|*
name|normal
parameter_list|)
block|{
typedef|typedef
name|QHash
argument_list|<
name|Qt
operator|::
name|GestureType
argument_list|,
name|QHash
argument_list|<
name|QWidget
modifier|*
argument_list|,
name|QGesture
modifier|*
argument_list|>
argument_list|>
name|GestureByTypes
typedef|;
name|GestureByTypes
name|gestureByTypes
decl_stmt|;
comment|// sort gestures by types
foreach|foreach
control|(
name|QGesture
modifier|*
name|gesture
decl|,
name|gestures
control|)
block|{
name|QWidget
modifier|*
name|receiver
init|=
name|m_gestureTargets
operator|.
name|value
argument_list|(
name|gesture
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
name|gestureByTypes
index|[
name|gesture
operator|->
name|gestureType
argument_list|()
index|]
operator|.
name|insert
argument_list|(
name|receiver
argument_list|,
name|gesture
argument_list|)
expr_stmt|;
block|}
comment|// for each gesture type
foreach|foreach
control|(
name|Qt
operator|::
name|GestureType
name|type
decl|,
name|gestureByTypes
operator|.
name|keys
argument_list|()
control|)
block|{
name|QHash
argument_list|<
name|QWidget
modifier|*
argument_list|,
name|QGesture
modifier|*
argument_list|>
name|gestures
init|=
name|gestureByTypes
operator|.
name|value
argument_list|(
name|type
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|widget
decl|,
name|gestures
operator|.
name|keys
argument_list|()
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|widget
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
while|while
condition|(
name|w
condition|)
block|{
name|QMap
argument_list|<
name|Qt
operator|::
name|GestureType
argument_list|,
name|Qt
operator|::
name|GestureFlags
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|gestureContext
operator|.
name|constFind
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|gestureContext
operator|.
name|constEnd
argument_list|()
condition|)
block|{
comment|// i.e. 'w' listens to gesture 'type'
if|if
condition|(
operator|!
operator|(
name|it
operator|.
name|value
argument_list|()
operator|&
name|Qt
operator|::
name|DontStartGestureOnChildren
operator|)
operator|&&
name|w
operator|!=
name|widget
condition|)
block|{
comment|// conflicting gesture!
operator|(
operator|*
name|conflicts
operator|)
index|[
name|widget
index|]
operator|.
name|append
argument_list|(
name|gestures
index|[
name|widget
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|w
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|w
operator|=
literal|0
expr_stmt|;
break|break;
block|}
name|w
operator|=
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|w
condition|)
operator|(
operator|*
name|normal
operator|)
index|[
name|widget
index|]
operator|.
name|append
argument_list|(
name|gestures
index|[
name|widget
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|deliverEvents
name|void
name|QGestureManager
operator|::
name|deliverEvents
parameter_list|(
specifier|const
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
modifier|&
name|gestures
parameter_list|,
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
modifier|*
name|undeliveredGestures
parameter_list|)
block|{
if|if
condition|(
name|gestures
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
typedef|typedef
name|QHash
argument_list|<
name|QWidget
modifier|*
argument_list|,
name|QList
argument_list|<
name|QGesture
modifier|*
argument_list|>
argument_list|>
name|GesturesPerWidget
typedef|;
name|GesturesPerWidget
name|conflictedGestures
decl_stmt|;
name|GesturesPerWidget
name|normalStartedGestures
decl_stmt|;
name|QSet
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|startedGestures
decl_stmt|;
comment|// first figure out the initial receivers of gestures
for|for
control|(
name|QSet
argument_list|<
name|QGesture
operator|*
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|gestures
operator|.
name|begin
argument_list|()
init|,
name|e
init|=
name|gestures
operator|.
name|end
argument_list|()
init|;
name|it
operator|!=
name|e
condition|;
operator|++
name|it
control|)
block|{
name|QGesture
modifier|*
name|gesture
init|=
operator|*
name|it
decl_stmt|;
name|QWidget
modifier|*
name|target
init|=
name|m_gestureTargets
operator|.
name|value
argument_list|(
name|gesture
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|target
condition|)
block|{
comment|// the gesture has just started and doesn't have a target yet.
name|Q_ASSERT
argument_list|(
name|gesture
operator|->
name|state
argument_list|()
operator|==
name|Qt
operator|::
name|GestureStarted
argument_list|)
expr_stmt|;
if|if
condition|(
name|gesture
operator|->
name|hasHotSpot
argument_list|()
condition|)
block|{
comment|// guess the target widget using the hotspot of the gesture
name|QPoint
name|pt
init|=
name|gesture
operator|->
name|hotSpot
argument_list|()
operator|.
name|toPoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|topLevel
init|=
name|qApp
operator|->
name|topLevelAt
argument_list|(
name|pt
argument_list|)
condition|)
block|{
name|QWidget
modifier|*
name|child
init|=
name|topLevel
operator|->
name|childAt
argument_list|(
name|topLevel
operator|->
name|mapFromGlobal
argument_list|(
name|pt
argument_list|)
argument_list|)
decl_stmt|;
name|target
operator|=
name|child
condition|?
name|child
else|:
name|topLevel
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// or use the context of the gesture
name|QObject
modifier|*
name|context
init|=
name|m_gestureOwners
operator|.
name|value
argument_list|(
name|gesture
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|->
name|isWidgetType
argument_list|()
condition|)
name|target
operator|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|target
condition|)
name|m_gestureTargets
operator|.
name|insert
argument_list|(
name|gesture
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
name|Qt
operator|::
name|GestureType
name|gestureType
init|=
name|gesture
operator|->
name|gestureType
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|gestureType
operator|!=
name|Qt
operator|::
name|CustomGesture
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|gestureType
argument_list|)
expr_stmt|;
if|if
condition|(
name|target
condition|)
block|{
if|if
condition|(
name|gesture
operator|->
name|state
argument_list|()
operator|==
name|Qt
operator|::
name|GestureStarted
condition|)
block|{
name|startedGestures
operator|.
name|insert
argument_list|(
name|gesture
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|normalStartedGestures
index|[
name|target
index|]
operator|.
name|append
argument_list|(
name|gesture
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QGestureManager::deliverEvent: could not find the target for gesture"
operator|<<
name|gesture
operator|->
name|gestureType
argument_list|()
expr_stmt|;
name|qWarning
argument_list|(
literal|"QGestureManager::deliverEvent: could not find the target for gesture"
argument_list|)
expr_stmt|;
name|undeliveredGestures
operator|->
name|insert
argument_list|(
name|gesture
argument_list|)
expr_stmt|;
block|}
block|}
name|getGestureTargets
argument_list|(
name|startedGestures
argument_list|,
operator|&
name|conflictedGestures
argument_list|,
operator|&
name|normalStartedGestures
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|()
operator|<<
literal|"QGestureManager::deliverEvents:"
operator|<<
literal|"\nstarted: "
operator|<<
name|startedGestures
operator|<<
literal|"\nconflicted: "
operator|<<
name|conflictedGestures
operator|<<
literal|"\nnormal: "
operator|<<
name|normalStartedGestures
operator|<<
literal|"\n"
expr_stmt|;
comment|// if there are conflicting gestures, send the GestureOverride event
for|for
control|(
name|GesturesPerWidget
operator|::
name|const_iterator
name|it
init|=
name|conflictedGestures
operator|.
name|constBegin
argument_list|()
init|,
name|e
init|=
name|conflictedGestures
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|e
condition|;
operator|++
name|it
control|)
block|{
name|QWidget
modifier|*
name|receiver
init|=
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QGesture
modifier|*
argument_list|>
name|gestures
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|DEBUG
argument_list|()
operator|<<
literal|"QGestureManager::deliverEvents: sending GestureOverride to"
operator|<<
name|receiver
operator|<<
literal|"gestures:"
operator|<<
name|gestures
expr_stmt|;
name|QGestureEvent
name|event
argument_list|(
name|gestures
argument_list|)
decl_stmt|;
name|event
operator|.
name|t
operator|=
name|QEvent
operator|::
name|GestureOverride
expr_stmt|;
comment|// mark event and individual gestures as ignored
name|event
operator|.
name|ignore
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|QGesture
modifier|*
name|g
decl|,
name|gestures
control|)
name|event
operator|.
name|setAccepted
argument_list|(
name|g
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|receiver
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|bool
name|eventAccepted
init|=
name|event
operator|.
name|isAccepted
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QGesture
modifier|*
name|gesture
decl|,
name|event
operator|.
name|gestures
argument_list|()
control|)
block|{
if|if
condition|(
name|eventAccepted
operator|||
name|event
operator|.
name|isAccepted
argument_list|(
name|gesture
argument_list|)
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|event
operator|.
name|m_targetWidgets
operator|.
name|value
argument_list|(
name|gesture
operator|->
name|gestureType
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|()
operator|<<
literal|"override event: gesture was accepted:"
operator|<<
name|gesture
operator|<<
name|w
expr_stmt|;
name|QList
argument_list|<
name|QGesture
modifier|*
argument_list|>
modifier|&
name|gestures
init|=
name|normalStartedGestures
index|[
name|w
index|]
decl_stmt|;
name|gestures
operator|.
name|append
argument_list|(
name|gesture
argument_list|)
expr_stmt|;
comment|// override the target
name|m_gestureTargets
index|[
name|gesture
index|]
operator|=
name|w
expr_stmt|;
block|}
else|else
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"override event: gesture wasn't accepted. putting back:"
operator|<<
name|gesture
expr_stmt|;
name|QList
argument_list|<
name|QGesture
modifier|*
argument_list|>
modifier|&
name|gestures
init|=
name|normalStartedGestures
index|[
name|receiver
index|]
decl_stmt|;
name|gestures
operator|.
name|append
argument_list|(
name|gesture
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// delivering gestures that are not in conflicted state
for|for
control|(
name|GesturesPerWidget
operator|::
name|const_iterator
name|it
init|=
name|normalStartedGestures
operator|.
name|constBegin
argument_list|()
init|,
name|e
init|=
name|normalStartedGestures
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|e
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
name|it
operator|.
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QGestureManager::deliverEvents: sending to"
operator|<<
name|it
operator|.
name|key
argument_list|()
operator|<<
literal|"gestures:"
operator|<<
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
name|QGestureEvent
name|event
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|bool
name|eventAccepted
init|=
name|event
operator|.
name|isAccepted
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QGesture
modifier|*
name|gesture
decl|,
name|event
operator|.
name|gestures
argument_list|()
control|)
block|{
if|if
condition|(
name|gesture
operator|->
name|state
argument_list|()
operator|==
name|Qt
operator|::
name|GestureStarted
operator|&&
operator|(
name|eventAccepted
operator|||
name|event
operator|.
name|isAccepted
argument_list|(
name|gesture
argument_list|)
operator|)
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|event
operator|.
name|m_targetWidgets
operator|.
name|value
argument_list|(
name|gesture
operator|->
name|gestureType
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|()
operator|<<
literal|"started gesture was delivered and accepted by"
operator|<<
name|w
expr_stmt|;
name|m_gestureTargets
index|[
name|gesture
index|]
operator|=
name|w
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|recycle
name|void
name|QGestureManager
operator|::
name|recycle
parameter_list|(
name|QGesture
modifier|*
name|gesture
parameter_list|)
block|{
name|QGestureRecognizer
modifier|*
name|recognizer
init|=
name|m_gestureToRecognizer
operator|.
name|value
argument_list|(
name|gesture
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|recognizer
condition|)
block|{
name|gesture
operator|->
name|setGestureCancelPolicy
argument_list|(
name|QGesture
operator|::
name|CancelNone
argument_list|)
expr_stmt|;
name|recognizer
operator|->
name|reset
argument_list|(
name|gesture
argument_list|)
expr_stmt|;
name|m_activeGestures
operator|.
name|remove
argument_list|(
name|gesture
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cleanupGesturesForRemovedRecognizer
argument_list|(
name|gesture
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_GESTURES
end_comment
begin_include
include|#
directive|include
file|"moc_qgesturemanager_p.cpp"
end_include
end_unit
