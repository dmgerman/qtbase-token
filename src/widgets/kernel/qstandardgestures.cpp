begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qstandardgestures_p.h"
end_include
begin_include
include|#
directive|include
file|"qgesture.h"
end_include
begin_include
include|#
directive|include
file|"qgesture_p.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qabstractscrollarea.h"
end_include
begin_include
include|#
directive|include
file|<qgraphicssceneevent.h>
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|QPanGestureRecognizer
name|QPanGestureRecognizer
operator|::
name|QPanGestureRecognizer
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|create
name|QGesture
modifier|*
name|QPanGestureRecognizer
operator|::
name|create
parameter_list|(
name|QObject
modifier|*
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|&&
name|target
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_NATIVE_GESTURES
argument_list|)
comment|// for scroll areas on Windows we want to use native gestures instead
if|if
condition|(
operator|!
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|target
operator|->
name|parent
argument_list|()
argument_list|)
condition|)
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|target
argument_list|)
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
expr_stmt|;
else|#
directive|else
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|target
argument_list|)
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
operator|new
name|QPanGesture
return|;
block|}
end_function
begin_function
DECL|function|recognize
name|QGestureRecognizer
operator|::
name|Result
name|QPanGestureRecognizer
operator|::
name|recognize
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|,
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|QPanGesture
modifier|*
name|q
init|=
cast|static_cast
argument_list|<
name|QPanGesture
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|QPanGesturePrivate
modifier|*
name|d
init|=
name|q
operator|->
name|d_func
argument_list|()
decl_stmt|;
specifier|const
name|QTouchEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTouchEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|QGestureRecognizer
operator|::
name|Result
name|result
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
block|{
name|result
operator|=
name|QGestureRecognizer
operator|::
name|MayBeGesture
expr_stmt|;
name|QTouchEvent
operator|::
name|TouchPoint
name|p
init|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|d
operator|->
name|lastOffset
operator|=
name|d
operator|->
name|offset
operator|=
name|QPointF
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|TouchEnd
case|:
block|{
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
operator|!=
name|Qt
operator|::
name|NoGesture
condition|)
block|{
if|if
condition|(
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|QTouchEvent
operator|::
name|TouchPoint
name|p1
init|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QTouchEvent
operator|::
name|TouchPoint
name|p2
init|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|d
operator|->
name|lastOffset
operator|=
name|d
operator|->
name|offset
expr_stmt|;
name|d
operator|->
name|offset
operator|=
name|QPointF
argument_list|(
name|p1
operator|.
name|pos
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|p1
operator|.
name|startPos
argument_list|()
operator|.
name|x
argument_list|()
operator|+
name|p2
operator|.
name|pos
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|p2
operator|.
name|startPos
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|p1
operator|.
name|pos
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|p1
operator|.
name|startPos
argument_list|()
operator|.
name|y
argument_list|()
operator|+
name|p2
operator|.
name|pos
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|p2
operator|.
name|startPos
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
operator|/
literal|2
expr_stmt|;
block|}
name|result
operator|=
name|QGestureRecognizer
operator|::
name|FinishGesture
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|QGestureRecognizer
operator|::
name|CancelGesture
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QEvent
operator|::
name|TouchUpdate
case|:
block|{
if|if
condition|(
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|QTouchEvent
operator|::
name|TouchPoint
name|p1
init|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QTouchEvent
operator|::
name|TouchPoint
name|p2
init|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|d
operator|->
name|lastOffset
operator|=
name|d
operator|->
name|offset
expr_stmt|;
name|d
operator|->
name|offset
operator|=
name|QPointF
argument_list|(
name|p1
operator|.
name|pos
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|p1
operator|.
name|startPos
argument_list|()
operator|.
name|x
argument_list|()
operator|+
name|p2
operator|.
name|pos
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|p2
operator|.
name|startPos
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|p1
operator|.
name|pos
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|p1
operator|.
name|startPos
argument_list|()
operator|.
name|y
argument_list|()
operator|+
name|p2
operator|.
name|pos
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|p2
operator|.
name|startPos
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|offset
operator|.
name|x
argument_list|()
operator|>
literal|10
operator|||
name|d
operator|->
name|offset
operator|.
name|y
argument_list|()
operator|>
literal|10
operator|||
name|d
operator|->
name|offset
operator|.
name|x
argument_list|()
operator|<
operator|-
literal|10
operator|||
name|d
operator|->
name|offset
operator|.
name|y
argument_list|()
operator|<
operator|-
literal|10
condition|)
block|{
name|q
operator|->
name|setHotSpot
argument_list|(
name|p1
operator|.
name|startScreenPos
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|QGestureRecognizer
operator|::
name|TriggerGesture
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|QGestureRecognizer
operator|::
name|MayBeGesture
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseMove
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|result
operator|=
name|QGestureRecognizer
operator|::
name|Ignore
expr_stmt|;
break|break;
default|default:
name|result
operator|=
name|QGestureRecognizer
operator|::
name|Ignore
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QPanGestureRecognizer
operator|::
name|reset
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|)
block|{
name|QPanGesture
modifier|*
name|pan
init|=
cast|static_cast
argument_list|<
name|QPanGesture
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|QPanGesturePrivate
modifier|*
name|d
init|=
name|pan
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|d
operator|->
name|lastOffset
operator|=
name|d
operator|->
name|offset
operator|=
name|QPointF
argument_list|()
expr_stmt|;
name|d
operator|->
name|acceleration
operator|=
literal|0
expr_stmt|;
name|QGestureRecognizer
operator|::
name|reset
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// QPinchGestureRecognizer
end_comment
begin_comment
comment|//
end_comment
begin_constructor
DECL|function|QPinchGestureRecognizer
name|QPinchGestureRecognizer
operator|::
name|QPinchGestureRecognizer
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|create
name|QGesture
modifier|*
name|QPinchGestureRecognizer
operator|::
name|create
parameter_list|(
name|QObject
modifier|*
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|&&
name|target
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|target
argument_list|)
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|QPinchGesture
return|;
block|}
end_function
begin_function
DECL|function|recognize
name|QGestureRecognizer
operator|::
name|Result
name|QPinchGestureRecognizer
operator|::
name|recognize
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|,
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|QPinchGesture
modifier|*
name|q
init|=
cast|static_cast
argument_list|<
name|QPinchGesture
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|QPinchGesturePrivate
modifier|*
name|d
init|=
name|q
operator|->
name|d_func
argument_list|()
decl_stmt|;
specifier|const
name|QTouchEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTouchEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|QGestureRecognizer
operator|::
name|Result
name|result
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
block|{
name|result
operator|=
name|QGestureRecognizer
operator|::
name|MayBeGesture
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|TouchEnd
case|:
block|{
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
operator|!=
name|Qt
operator|::
name|NoGesture
condition|)
block|{
name|result
operator|=
name|QGestureRecognizer
operator|::
name|FinishGesture
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|QGestureRecognizer
operator|::
name|CancelGesture
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QEvent
operator|::
name|TouchUpdate
case|:
block|{
name|d
operator|->
name|changeFlags
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|QTouchEvent
operator|::
name|TouchPoint
name|p1
init|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QTouchEvent
operator|::
name|TouchPoint
name|p2
init|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|d
operator|->
name|hotSpot
operator|=
name|p1
operator|.
name|screenPos
argument_list|()
expr_stmt|;
name|d
operator|->
name|isHotSpotSet
operator|=
literal|true
expr_stmt|;
name|QPointF
name|centerPoint
init|=
operator|(
name|p1
operator|.
name|screenPos
argument_list|()
operator|+
name|p2
operator|.
name|screenPos
argument_list|()
operator|)
operator|/
literal|2.0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|isNewSequence
condition|)
block|{
name|d
operator|->
name|startPosition
index|[
literal|0
index|]
operator|=
name|p1
operator|.
name|screenPos
argument_list|()
expr_stmt|;
name|d
operator|->
name|startPosition
index|[
literal|1
index|]
operator|=
name|p2
operator|.
name|screenPos
argument_list|()
expr_stmt|;
name|d
operator|->
name|lastCenterPoint
operator|=
name|centerPoint
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|lastCenterPoint
operator|=
name|d
operator|->
name|centerPoint
expr_stmt|;
block|}
name|d
operator|->
name|centerPoint
operator|=
name|centerPoint
expr_stmt|;
name|d
operator|->
name|changeFlags
operator||=
name|QPinchGesture
operator|::
name|CenterPointChanged
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isNewSequence
condition|)
block|{
name|d
operator|->
name|scaleFactor
operator|=
literal|1.0
expr_stmt|;
name|d
operator|->
name|lastScaleFactor
operator|=
literal|1.0
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|lastScaleFactor
operator|=
name|d
operator|->
name|scaleFactor
expr_stmt|;
name|QLineF
name|line
argument_list|(
name|p1
operator|.
name|screenPos
argument_list|()
argument_list|,
name|p2
operator|.
name|screenPos
argument_list|()
argument_list|)
decl_stmt|;
name|QLineF
name|lastLine
argument_list|(
name|p1
operator|.
name|lastScreenPos
argument_list|()
argument_list|,
name|p2
operator|.
name|lastScreenPos
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|scaleFactor
operator|=
name|line
operator|.
name|length
argument_list|()
operator|/
name|lastLine
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|totalScaleFactor
operator|=
name|d
operator|->
name|totalScaleFactor
operator|*
name|d
operator|->
name|scaleFactor
expr_stmt|;
name|d
operator|->
name|changeFlags
operator||=
name|QPinchGesture
operator|::
name|ScaleFactorChanged
expr_stmt|;
name|qreal
name|angle
init|=
name|QLineF
argument_list|(
name|p1
operator|.
name|screenPos
argument_list|()
argument_list|,
name|p2
operator|.
name|screenPos
argument_list|()
argument_list|)
operator|.
name|angle
argument_list|()
decl_stmt|;
if|if
condition|(
name|angle
operator|>
literal|180
condition|)
name|angle
operator|-=
literal|360
expr_stmt|;
name|qreal
name|startAngle
init|=
name|QLineF
argument_list|(
name|p1
operator|.
name|startScreenPos
argument_list|()
argument_list|,
name|p2
operator|.
name|startScreenPos
argument_list|()
argument_list|)
operator|.
name|angle
argument_list|()
decl_stmt|;
if|if
condition|(
name|startAngle
operator|>
literal|180
condition|)
name|startAngle
operator|-=
literal|360
expr_stmt|;
specifier|const
name|qreal
name|rotationAngle
init|=
name|startAngle
operator|-
name|angle
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|isNewSequence
condition|)
name|d
operator|->
name|lastRotationAngle
operator|=
literal|0.0
expr_stmt|;
else|else
name|d
operator|->
name|lastRotationAngle
operator|=
name|d
operator|->
name|rotationAngle
expr_stmt|;
name|d
operator|->
name|rotationAngle
operator|=
name|rotationAngle
expr_stmt|;
name|d
operator|->
name|totalRotationAngle
operator|+=
name|d
operator|->
name|rotationAngle
operator|-
name|d
operator|->
name|lastRotationAngle
expr_stmt|;
name|d
operator|->
name|changeFlags
operator||=
name|QPinchGesture
operator|::
name|RotationAngleChanged
expr_stmt|;
name|d
operator|->
name|totalChangeFlags
operator||=
name|d
operator|->
name|changeFlags
expr_stmt|;
name|d
operator|->
name|isNewSequence
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|QGestureRecognizer
operator|::
name|TriggerGesture
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|isNewSequence
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
operator|==
name|Qt
operator|::
name|NoGesture
condition|)
name|result
operator|=
name|QGestureRecognizer
operator|::
name|Ignore
expr_stmt|;
else|else
name|result
operator|=
name|QGestureRecognizer
operator|::
name|FinishGesture
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseMove
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|result
operator|=
name|QGestureRecognizer
operator|::
name|Ignore
expr_stmt|;
break|break;
default|default:
name|result
operator|=
name|QGestureRecognizer
operator|::
name|Ignore
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QPinchGestureRecognizer
operator|::
name|reset
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|)
block|{
name|QPinchGesture
modifier|*
name|pinch
init|=
cast|static_cast
argument_list|<
name|QPinchGesture
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|QPinchGesturePrivate
modifier|*
name|d
init|=
name|pinch
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|d
operator|->
name|totalChangeFlags
operator|=
name|d
operator|->
name|changeFlags
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|startCenterPoint
operator|=
name|d
operator|->
name|lastCenterPoint
operator|=
name|d
operator|->
name|centerPoint
operator|=
name|QPointF
argument_list|()
expr_stmt|;
name|d
operator|->
name|totalScaleFactor
operator|=
name|d
operator|->
name|lastScaleFactor
operator|=
name|d
operator|->
name|scaleFactor
operator|=
literal|1
expr_stmt|;
name|d
operator|->
name|totalRotationAngle
operator|=
name|d
operator|->
name|lastRotationAngle
operator|=
name|d
operator|->
name|rotationAngle
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|isNewSequence
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|startPosition
index|[
literal|0
index|]
operator|=
name|d
operator|->
name|startPosition
index|[
literal|1
index|]
operator|=
name|QPointF
argument_list|()
expr_stmt|;
name|QGestureRecognizer
operator|::
name|reset
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// QSwipeGestureRecognizer
end_comment
begin_comment
comment|//
end_comment
begin_constructor
DECL|function|QSwipeGestureRecognizer
name|QSwipeGestureRecognizer
operator|::
name|QSwipeGestureRecognizer
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|create
name|QGesture
modifier|*
name|QSwipeGestureRecognizer
operator|::
name|create
parameter_list|(
name|QObject
modifier|*
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|&&
name|target
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|target
argument_list|)
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|QSwipeGesture
return|;
block|}
end_function
begin_function
DECL|function|recognize
name|QGestureRecognizer
operator|::
name|Result
name|QSwipeGestureRecognizer
operator|::
name|recognize
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|,
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|QSwipeGesture
modifier|*
name|q
init|=
cast|static_cast
argument_list|<
name|QSwipeGesture
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|QSwipeGesturePrivate
modifier|*
name|d
init|=
name|q
operator|->
name|d_func
argument_list|()
decl_stmt|;
specifier|const
name|QTouchEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTouchEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|QGestureRecognizer
operator|::
name|Result
name|result
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
block|{
name|d
operator|->
name|velocityValue
operator|=
literal|1
expr_stmt|;
name|d
operator|->
name|time
operator|.
name|start
argument_list|()
expr_stmt|;
name|d
operator|->
name|started
operator|=
literal|true
expr_stmt|;
name|result
operator|=
name|QGestureRecognizer
operator|::
name|MayBeGesture
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|TouchEnd
case|:
block|{
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
operator|!=
name|Qt
operator|::
name|NoGesture
condition|)
block|{
name|result
operator|=
name|QGestureRecognizer
operator|::
name|FinishGesture
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|QGestureRecognizer
operator|::
name|CancelGesture
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QEvent
operator|::
name|TouchUpdate
case|:
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|started
condition|)
name|result
operator|=
name|QGestureRecognizer
operator|::
name|CancelGesture
expr_stmt|;
elseif|else
if|if
condition|(
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|QTouchEvent
operator|::
name|TouchPoint
name|p1
init|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QTouchEvent
operator|::
name|TouchPoint
name|p2
init|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QTouchEvent
operator|::
name|TouchPoint
name|p3
init|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|lastPositions
index|[
literal|0
index|]
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|d
operator|->
name|lastPositions
index|[
literal|0
index|]
operator|=
name|p1
operator|.
name|startScreenPos
argument_list|()
operator|.
name|toPoint
argument_list|()
expr_stmt|;
name|d
operator|->
name|lastPositions
index|[
literal|1
index|]
operator|=
name|p2
operator|.
name|startScreenPos
argument_list|()
operator|.
name|toPoint
argument_list|()
expr_stmt|;
name|d
operator|->
name|lastPositions
index|[
literal|2
index|]
operator|=
name|p3
operator|.
name|startScreenPos
argument_list|()
operator|.
name|toPoint
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|hotSpot
operator|=
name|p1
operator|.
name|screenPos
argument_list|()
expr_stmt|;
name|d
operator|->
name|isHotSpotSet
operator|=
literal|true
expr_stmt|;
name|int
name|xDistance
init|=
operator|(
name|p1
operator|.
name|screenPos
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|d
operator|->
name|lastPositions
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
operator|+
name|p2
operator|.
name|screenPos
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|d
operator|->
name|lastPositions
index|[
literal|1
index|]
operator|.
name|x
argument_list|()
operator|+
name|p3
operator|.
name|screenPos
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|d
operator|->
name|lastPositions
index|[
literal|2
index|]
operator|.
name|x
argument_list|()
operator|)
operator|/
literal|3
decl_stmt|;
name|int
name|yDistance
init|=
operator|(
name|p1
operator|.
name|screenPos
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|d
operator|->
name|lastPositions
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
operator|+
name|p2
operator|.
name|screenPos
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|d
operator|->
name|lastPositions
index|[
literal|1
index|]
operator|.
name|y
argument_list|()
operator|+
name|p3
operator|.
name|screenPos
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|d
operator|->
name|lastPositions
index|[
literal|2
index|]
operator|.
name|y
argument_list|()
operator|)
operator|/
literal|3
decl_stmt|;
specifier|const
name|int
name|distance
init|=
name|xDistance
operator|>=
name|yDistance
condition|?
name|xDistance
else|:
name|yDistance
decl_stmt|;
name|int
name|elapsedTime
init|=
name|d
operator|->
name|time
operator|.
name|restart
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|elapsedTime
condition|)
name|elapsedTime
operator|=
literal|1
expr_stmt|;
name|d
operator|->
name|velocityValue
operator|=
literal|0.9
operator|*
name|d
operator|->
name|velocityValue
operator|+
name|distance
operator|/
name|elapsedTime
expr_stmt|;
name|d
operator|->
name|swipeAngle
operator|=
name|QLineF
argument_list|(
name|p1
operator|.
name|startScreenPos
argument_list|()
argument_list|,
name|p1
operator|.
name|screenPos
argument_list|()
argument_list|)
operator|.
name|angle
argument_list|()
expr_stmt|;
specifier|static
specifier|const
name|int
name|MoveThreshold
init|=
literal|50
decl_stmt|;
if|if
condition|(
name|xDistance
operator|>
name|MoveThreshold
operator|||
name|yDistance
operator|>
name|MoveThreshold
condition|)
block|{
comment|// measure the distance to check if the direction changed
name|d
operator|->
name|lastPositions
index|[
literal|0
index|]
operator|=
name|p1
operator|.
name|screenPos
argument_list|()
operator|.
name|toPoint
argument_list|()
expr_stmt|;
name|d
operator|->
name|lastPositions
index|[
literal|1
index|]
operator|=
name|p2
operator|.
name|screenPos
argument_list|()
operator|.
name|toPoint
argument_list|()
expr_stmt|;
name|d
operator|->
name|lastPositions
index|[
literal|2
index|]
operator|=
name|p3
operator|.
name|screenPos
argument_list|()
operator|.
name|toPoint
argument_list|()
expr_stmt|;
name|QSwipeGesture
operator|::
name|SwipeDirection
name|horizontal
init|=
name|xDistance
operator|>
literal|0
condition|?
name|QSwipeGesture
operator|::
name|Right
else|:
name|QSwipeGesture
operator|::
name|Left
decl_stmt|;
name|QSwipeGesture
operator|::
name|SwipeDirection
name|vertical
init|=
name|yDistance
operator|>
literal|0
condition|?
name|QSwipeGesture
operator|::
name|Down
else|:
name|QSwipeGesture
operator|::
name|Up
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|verticalDirection
operator|==
name|QSwipeGesture
operator|::
name|NoDirection
condition|)
name|d
operator|->
name|verticalDirection
operator|=
name|vertical
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|horizontalDirection
operator|==
name|QSwipeGesture
operator|::
name|NoDirection
condition|)
name|d
operator|->
name|horizontalDirection
operator|=
name|horizontal
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|verticalDirection
operator|!=
name|vertical
operator|||
name|d
operator|->
name|horizontalDirection
operator|!=
name|horizontal
condition|)
block|{
comment|// the user has changed the direction!
name|result
operator|=
name|QGestureRecognizer
operator|::
name|CancelGesture
expr_stmt|;
block|}
name|result
operator|=
name|QGestureRecognizer
operator|::
name|TriggerGesture
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
operator|!=
name|Qt
operator|::
name|NoGesture
condition|)
name|result
operator|=
name|QGestureRecognizer
operator|::
name|TriggerGesture
expr_stmt|;
else|else
name|result
operator|=
name|QGestureRecognizer
operator|::
name|MayBeGesture
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
block|{
name|result
operator|=
name|QGestureRecognizer
operator|::
name|CancelGesture
expr_stmt|;
block|}
else|else
block|{
comment|// less than 3 touch points
if|if
condition|(
name|d
operator|->
name|started
operator|&&
operator|(
name|ev
operator|->
name|touchPointStates
argument_list|()
operator|&
name|Qt
operator|::
name|TouchPointPressed
operator|)
condition|)
name|result
operator|=
name|QGestureRecognizer
operator|::
name|CancelGesture
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|started
condition|)
name|result
operator|=
name|QGestureRecognizer
operator|::
name|Ignore
expr_stmt|;
else|else
name|result
operator|=
name|QGestureRecognizer
operator|::
name|MayBeGesture
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseMove
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|result
operator|=
name|QGestureRecognizer
operator|::
name|Ignore
expr_stmt|;
break|break;
default|default:
name|result
operator|=
name|QGestureRecognizer
operator|::
name|Ignore
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QSwipeGestureRecognizer
operator|::
name|reset
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|)
block|{
name|QSwipeGesture
modifier|*
name|q
init|=
cast|static_cast
argument_list|<
name|QSwipeGesture
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|QSwipeGesturePrivate
modifier|*
name|d
init|=
name|q
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|d
operator|->
name|verticalDirection
operator|=
name|d
operator|->
name|horizontalDirection
operator|=
name|QSwipeGesture
operator|::
name|NoDirection
expr_stmt|;
name|d
operator|->
name|swipeAngle
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|lastPositions
index|[
literal|0
index|]
operator|=
name|d
operator|->
name|lastPositions
index|[
literal|1
index|]
operator|=
name|d
operator|->
name|lastPositions
index|[
literal|2
index|]
operator|=
name|QPoint
argument_list|()
expr_stmt|;
name|d
operator|->
name|started
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|velocityValue
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|time
operator|.
name|invalidate
argument_list|()
expr_stmt|;
name|QGestureRecognizer
operator|::
name|reset
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// QTapGestureRecognizer
end_comment
begin_comment
comment|//
end_comment
begin_constructor
DECL|function|QTapGestureRecognizer
name|QTapGestureRecognizer
operator|::
name|QTapGestureRecognizer
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|create
name|QGesture
modifier|*
name|QTapGestureRecognizer
operator|::
name|create
parameter_list|(
name|QObject
modifier|*
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|&&
name|target
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|target
argument_list|)
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|QTapGesture
return|;
block|}
end_function
begin_function
DECL|function|recognize
name|QGestureRecognizer
operator|::
name|Result
name|QTapGestureRecognizer
operator|::
name|recognize
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|,
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|QTapGesture
modifier|*
name|q
init|=
cast|static_cast
argument_list|<
name|QTapGesture
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|QTapGesturePrivate
modifier|*
name|d
init|=
name|q
operator|->
name|d_func
argument_list|()
decl_stmt|;
specifier|const
name|QTouchEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTouchEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|QGestureRecognizer
operator|::
name|Result
name|result
init|=
name|QGestureRecognizer
operator|::
name|CancelGesture
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
block|{
name|d
operator|->
name|position
operator|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|pos
argument_list|()
expr_stmt|;
name|q
operator|->
name|setHotSpot
argument_list|(
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|screenPos
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|QGestureRecognizer
operator|::
name|TriggerGesture
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|TouchUpdate
case|:
case|case
name|QEvent
operator|::
name|TouchEnd
case|:
block|{
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
operator|!=
name|Qt
operator|::
name|NoGesture
operator|&&
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QTouchEvent
operator|::
name|TouchPoint
name|p
init|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QPoint
name|delta
init|=
name|p
operator|.
name|pos
argument_list|()
operator|.
name|toPoint
argument_list|()
operator|-
name|p
operator|.
name|startPos
argument_list|()
operator|.
name|toPoint
argument_list|()
decl_stmt|;
enum|enum
block|{
name|TapRadius
init|=
literal|40
block|}
enum|;
if|if
condition|(
name|delta
operator|.
name|manhattanLength
argument_list|()
operator|<=
name|TapRadius
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|TouchEnd
condition|)
name|result
operator|=
name|QGestureRecognizer
operator|::
name|FinishGesture
expr_stmt|;
else|else
name|result
operator|=
name|QGestureRecognizer
operator|::
name|TriggerGesture
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseMove
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|result
operator|=
name|QGestureRecognizer
operator|::
name|Ignore
expr_stmt|;
break|break;
default|default:
name|result
operator|=
name|QGestureRecognizer
operator|::
name|Ignore
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QTapGestureRecognizer
operator|::
name|reset
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|)
block|{
name|QTapGesture
modifier|*
name|q
init|=
cast|static_cast
argument_list|<
name|QTapGesture
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|QTapGesturePrivate
modifier|*
name|d
init|=
name|q
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|d
operator|->
name|position
operator|=
name|QPointF
argument_list|()
expr_stmt|;
name|QGestureRecognizer
operator|::
name|reset
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// QTapAndHoldGestureRecognizer
end_comment
begin_comment
comment|//
end_comment
begin_constructor
DECL|function|QTapAndHoldGestureRecognizer
name|QTapAndHoldGestureRecognizer
operator|::
name|QTapAndHoldGestureRecognizer
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|create
name|QGesture
modifier|*
name|QTapAndHoldGestureRecognizer
operator|::
name|create
parameter_list|(
name|QObject
modifier|*
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|&&
name|target
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|target
argument_list|)
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|QTapAndHoldGesture
return|;
block|}
end_function
begin_function
name|QGestureRecognizer
operator|::
name|Result
DECL|function|recognize
name|QTapAndHoldGestureRecognizer
operator|::
name|recognize
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|,
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|QTapAndHoldGesture
modifier|*
name|q
init|=
cast|static_cast
argument_list|<
name|QTapAndHoldGesture
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|QTapAndHoldGesturePrivate
modifier|*
name|d
init|=
name|q
operator|->
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
operator|==
name|state
operator|&&
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Timer
condition|)
block|{
name|q
operator|->
name|killTimer
argument_list|(
name|d
operator|->
name|timerId
argument_list|)
expr_stmt|;
name|d
operator|->
name|timerId
operator|=
literal|0
expr_stmt|;
return|return
name|QGestureRecognizer
operator|::
name|FinishGesture
operator||
name|QGestureRecognizer
operator|::
name|ConsumeEventHint
return|;
block|}
specifier|const
name|QTouchEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTouchEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
specifier|const
name|QMouseEvent
modifier|*
name|me
init|=
cast|static_cast
argument_list|<
specifier|const
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
specifier|const
name|QGraphicsSceneMouseEvent
modifier|*
name|gsme
init|=
cast|static_cast
argument_list|<
specifier|const
name|QGraphicsSceneMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
endif|#
directive|endif
enum|enum
block|{
name|TapRadius
init|=
literal|40
block|}
enum|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
case|case
name|QEvent
operator|::
name|GraphicsSceneMousePress
case|:
name|d
operator|->
name|position
operator|=
name|gsme
operator|->
name|screenPos
argument_list|()
expr_stmt|;
name|q
operator|->
name|setHotSpot
argument_list|(
name|d
operator|->
name|position
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|timerId
condition|)
name|q
operator|->
name|killTimer
argument_list|(
name|d
operator|->
name|timerId
argument_list|)
expr_stmt|;
name|d
operator|->
name|timerId
operator|=
name|q
operator|->
name|startTimer
argument_list|(
name|QTapAndHoldGesturePrivate
operator|::
name|Timeout
argument_list|)
expr_stmt|;
return|return
name|QGestureRecognizer
operator|::
name|MayBeGesture
return|;
comment|// we don't show a sign of life until the timeout
endif|#
directive|endif
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
name|d
operator|->
name|position
operator|=
name|me
operator|->
name|globalPos
argument_list|()
expr_stmt|;
name|q
operator|->
name|setHotSpot
argument_list|(
name|d
operator|->
name|position
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|timerId
condition|)
name|q
operator|->
name|killTimer
argument_list|(
name|d
operator|->
name|timerId
argument_list|)
expr_stmt|;
name|d
operator|->
name|timerId
operator|=
name|q
operator|->
name|startTimer
argument_list|(
name|QTapAndHoldGesturePrivate
operator|::
name|Timeout
argument_list|)
expr_stmt|;
return|return
name|QGestureRecognizer
operator|::
name|MayBeGesture
return|;
comment|// we don't show a sign of life until the timeout
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
name|d
operator|->
name|position
operator|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|startScreenPos
argument_list|()
expr_stmt|;
name|q
operator|->
name|setHotSpot
argument_list|(
name|d
operator|->
name|position
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|timerId
condition|)
name|q
operator|->
name|killTimer
argument_list|(
name|d
operator|->
name|timerId
argument_list|)
expr_stmt|;
name|d
operator|->
name|timerId
operator|=
name|q
operator|->
name|startTimer
argument_list|(
name|QTapAndHoldGesturePrivate
operator|::
name|Timeout
argument_list|)
expr_stmt|;
return|return
name|QGestureRecognizer
operator|::
name|MayBeGesture
return|;
comment|// we don't show a sign of life until the timeout
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
case|case
name|QEvent
operator|::
name|GraphicsSceneMouseRelease
case|:
endif|#
directive|endif
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
case|case
name|QEvent
operator|::
name|TouchEnd
case|:
return|return
name|QGestureRecognizer
operator|::
name|CancelGesture
return|;
comment|// get out of the MayBeGesture state
case|case
name|QEvent
operator|::
name|TouchUpdate
case|:
if|if
condition|(
name|d
operator|->
name|timerId
operator|&&
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QTouchEvent
operator|::
name|TouchPoint
name|p
init|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QPoint
name|delta
init|=
name|p
operator|.
name|pos
argument_list|()
operator|.
name|toPoint
argument_list|()
operator|-
name|p
operator|.
name|startPos
argument_list|()
operator|.
name|toPoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|delta
operator|.
name|manhattanLength
argument_list|()
operator|<=
name|TapRadius
condition|)
return|return
name|QGestureRecognizer
operator|::
name|MayBeGesture
return|;
block|}
return|return
name|QGestureRecognizer
operator|::
name|CancelGesture
return|;
case|case
name|QEvent
operator|::
name|MouseMove
case|:
block|{
name|QPoint
name|delta
init|=
name|me
operator|->
name|globalPos
argument_list|()
operator|-
name|d
operator|->
name|position
operator|.
name|toPoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|timerId
operator|&&
name|delta
operator|.
name|manhattanLength
argument_list|()
operator|<=
name|TapRadius
condition|)
return|return
name|QGestureRecognizer
operator|::
name|MayBeGesture
return|;
return|return
name|QGestureRecognizer
operator|::
name|CancelGesture
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
case|case
name|QEvent
operator|::
name|GraphicsSceneMouseMove
case|:
block|{
name|QPoint
name|delta
init|=
name|gsme
operator|->
name|screenPos
argument_list|()
operator|-
name|d
operator|->
name|position
operator|.
name|toPoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|timerId
operator|&&
name|delta
operator|.
name|manhattanLength
argument_list|()
operator|<=
name|TapRadius
condition|)
return|return
name|QGestureRecognizer
operator|::
name|MayBeGesture
return|;
return|return
name|QGestureRecognizer
operator|::
name|CancelGesture
return|;
block|}
endif|#
directive|endif
default|default:
return|return
name|QGestureRecognizer
operator|::
name|Ignore
return|;
block|}
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QTapAndHoldGestureRecognizer
operator|::
name|reset
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|)
block|{
name|QTapAndHoldGesture
modifier|*
name|q
init|=
cast|static_cast
argument_list|<
name|QTapAndHoldGesture
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|QTapAndHoldGesturePrivate
modifier|*
name|d
init|=
name|q
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|d
operator|->
name|position
operator|=
name|QPointF
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|timerId
condition|)
name|q
operator|->
name|killTimer
argument_list|(
name|d
operator|->
name|timerId
argument_list|)
expr_stmt|;
name|d
operator|->
name|timerId
operator|=
literal|0
expr_stmt|;
name|QGestureRecognizer
operator|::
name|reset
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_GESTURES
end_comment
end_unit
