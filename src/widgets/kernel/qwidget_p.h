begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWIDGET_P_H
end_ifndef
begin_define
DECL|macro|QWIDGET_P_H
define|#
directive|define
name|QWIDGET_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of qapplication_*.cpp, qwidget*.cpp and qfiledialog.cpp.  This header
end_comment
begin_comment
comment|// file may change from version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtWidgets/qwidget.h"
end_include
begin_include
include|#
directive|include
file|"private/qobject_p.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qrect.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qlocale.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qset.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qregion.h"
end_include
begin_include
include|#
directive|include
file|"QtWidgets/qsizepolicy.h"
end_include
begin_include
include|#
directive|include
file|"QtWidgets/qstyle.h"
end_include
begin_include
include|#
directive|include
file|"QtWidgets/qapplication.h"
end_include
begin_include
include|#
directive|include
file|<private/qgraphicseffect_p.h>
end_include
begin_include
include|#
directive|include
file|"QtWidgets/qgraphicsproxywidget.h"
end_include
begin_include
include|#
directive|include
file|"QtWidgets/qgraphicsscene.h"
end_include
begin_include
include|#
directive|include
file|"QtWidgets/qgraphicsview.h"
end_include
begin_include
include|#
directive|include
file|<private/qgesture_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WIN
end_ifdef
begin_include
include|#
directive|include
file|"QtCore/qt_windows.h"
end_include
begin_include
include|#
directive|include
file|<private/qdnd_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_WS_WIN
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_include
include|#
directive|include
file|"QtGui/qx11info_x11.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC
end_ifdef
begin_include
include|#
directive|include
file|<private/qt_mac_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
end_if
begin_include
include|#
directive|include
file|"QtWidgets/qinputcontext.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qscreen_qws.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_if
begin_decl_stmt
DECL|variable|RDrawableWindow
name|class
name|RDrawableWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|CCoeControl
name|class
name|CCoeControl
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// Extra QWidget data
comment|//  - to minimize memory usage for members that are seldom used.
comment|//  - top-level widgets have extra extra data to reduce cost further
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
DECL|variable|QWSManager
name|class
name|QWSManager
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
end_if
begin_decl_stmt
DECL|variable|QCoreGraphicsPaintEnginePrivate
name|class
name|QCoreGraphicsPaintEnginePrivate
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QPA
argument_list|)
end_if
begin_decl_stmt
DECL|variable|QWidgetWindow
name|class
name|QWidgetWindow
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|QPaintEngine
name|class
name|QPaintEngine
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPixmap
name|class
name|QPixmap
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWidgetBackingStore
name|class
name|QWidgetBackingStore
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QGraphicsProxyWidget
name|class
name|QGraphicsProxyWidget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWidgetItemV2
name|class
name|QWidgetItemV2
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QStyle
name|class
name|QStyle
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QUnifiedToolbarSurface
name|class
name|QUnifiedToolbarSurface
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_AUTOTEST_EXPORT
name|QWidgetBackingStoreTracker
block|{
name|public
label|:
name|QWidgetBackingStoreTracker
argument_list|()
expr_stmt|;
operator|~
name|QWidgetBackingStoreTracker
argument_list|()
expr_stmt|;
name|void
name|create
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|)
function_decl|;
name|void
name|destroy
parameter_list|()
function_decl|;
name|void
name|registerWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
name|void
name|unregisterWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
name|void
name|unregisterWidgetSubtree
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
specifier|inline
name|QWidgetBackingStore
modifier|*
name|data
parameter_list|()
block|{
return|return
name|m_ptr
return|;
block|}
specifier|inline
name|QWidgetBackingStore
operator|*
name|operator
operator|->
expr|(
block|)
block|{
return|return
name|m_ptr
return|;
block|}
end_decl_stmt
begin_function
specifier|inline
name|QWidgetBackingStore
modifier|&
name|operator
modifier|*
parameter_list|()
block|{
return|return
operator|*
name|m_ptr
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
operator|(
literal|0
operator|!=
name|m_ptr
operator|)
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_macro
name|Q_DISABLE_COPY
argument_list|(
argument|QWidgetBackingStoreTracker
argument_list|)
end_macro
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|QWidgetBackingStore
modifier|*
name|m_ptr
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QSet
operator|<
name|QWidget
operator|*
operator|>
name|m_widgets
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|QTLWExtra
unit|};
struct|struct
name|QTLWExtra
block|{
comment|// *************************** Cross-platform variables *****************************
comment|// Regular pointers (keep them together to avoid gaps on 64 bits architectures).
DECL|member|icon
name|QIcon
modifier|*
name|icon
decl_stmt|;
comment|// widget icon
DECL|member|iconPixmap
name|QPixmap
modifier|*
name|iconPixmap
decl_stmt|;
DECL|member|backingStore
name|QWidgetBackingStoreTracker
name|backingStore
decl_stmt|;
DECL|member|windowSurface
name|QWindowSurface
modifier|*
name|windowSurface
decl_stmt|;
DECL|member|sharedPainter
name|QPainter
modifier|*
name|sharedPainter
decl_stmt|;
comment|// Implicit pointers (shared_null).
DECL|member|caption
name|QString
name|caption
decl_stmt|;
comment|// widget caption
DECL|member|iconText
name|QString
name|iconText
decl_stmt|;
comment|// widget icon text
DECL|member|role
name|QString
name|role
decl_stmt|;
comment|// widget role
DECL|member|filePath
name|QString
name|filePath
decl_stmt|;
comment|// widget file path
comment|// Other variables.
DECL|member|incw
DECL|member|inch
name|short
name|incw
decl_stmt|,
name|inch
decl_stmt|;
comment|// size increments
DECL|member|basew
DECL|member|baseh
name|short
name|basew
decl_stmt|,
name|baseh
decl_stmt|;
comment|// base sizes
comment|// frame strut, don't use these directly, use QWidgetPrivate::frameStrut() instead.
DECL|member|frameStrut
name|QRect
name|frameStrut
decl_stmt|;
DECL|member|normalGeometry
name|QRect
name|normalGeometry
decl_stmt|;
comment|// used by showMin/maximized/FullScreen
DECL|member|savedFlags
name|Qt
operator|::
name|WindowFlags
name|savedFlags
expr_stmt|;
comment|// Save widget flags while showing fullscreen
comment|// *************************** Cross-platform bit fields ****************************
DECL|member|opacity
name|uint
name|opacity
range|:
literal|8
decl_stmt|;
DECL|member|posFromMove
name|uint
name|posFromMove
range|:
literal|1
decl_stmt|;
DECL|member|sizeAdjusted
name|uint
name|sizeAdjusted
range|:
literal|1
decl_stmt|;
DECL|member|inTopLevelResize
name|uint
name|inTopLevelResize
range|:
literal|1
decl_stmt|;
DECL|member|inRepaint
name|uint
name|inRepaint
range|:
literal|1
decl_stmt|;
DECL|member|embedded
name|uint
name|embedded
range|:
literal|1
decl_stmt|;
comment|// *************************** Platform specific values (bit fields first) **********
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
comment|//<----------------------------------------------------------- X11
DECL|member|spont_unmapped
name|uint
name|spont_unmapped
range|:
literal|1
decl_stmt|;
comment|// window was spontaneously unmapped
DECL|member|dnd
name|uint
name|dnd
range|:
literal|1
decl_stmt|;
comment|// DND properties installed
DECL|member|validWMState
name|uint
name|validWMState
range|:
literal|1
decl_stmt|;
comment|// is WM_STATE valid?
DECL|member|waitingForMapNotify
name|uint
name|waitingForMapNotify
range|:
literal|1
decl_stmt|;
comment|// show() has been called, haven't got the MapNotify yet
DECL|member|parentWinId
name|WId
name|parentWinId
decl_stmt|;
comment|// parent window Id (valid after reparenting)
DECL|member|userTimeWindow
name|WId
name|userTimeWindow
decl_stmt|;
comment|// window id that contains user-time timestamp when WM supports a _NET_WM_USER_TIME_WINDOW atom
DECL|member|fullScreenOffset
name|QPoint
name|fullScreenOffset
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_XSYNC
DECL|member|syncUpdateCounter
name|WId
name|syncUpdateCounter
decl_stmt|;
DECL|member|syncRequestTimestamp
name|ulong
name|syncRequestTimestamp
decl_stmt|;
DECL|member|newCounterValueHi
name|qint32
name|newCounterValueHi
decl_stmt|;
DECL|member|newCounterValueLo
name|quint32
name|newCounterValueLo
decl_stmt|;
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
comment|//<--------------------------------------------------------- WIN
DECL|member|hotkeyRegistered
name|uint
name|hotkeyRegistered
range|:
literal|1
decl_stmt|;
comment|// Hot key from the STARTUPINFO has been registered.
DECL|member|winIconBig
name|HICON
name|winIconBig
decl_stmt|;
comment|// internal big Windows icon
DECL|member|winIconSmall
name|HICON
name|winIconSmall
decl_stmt|;
comment|// internal small Windows icon
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
comment|//<--------------------------------------------------------- MAC
DECL|member|resizer
name|uint
name|resizer
range|:
literal|4
decl_stmt|;
DECL|member|isSetGeometry
name|uint
name|isSetGeometry
range|:
literal|1
decl_stmt|;
DECL|member|isMove
name|uint
name|isMove
range|:
literal|1
decl_stmt|;
DECL|member|wattr
name|quint32
name|wattr
decl_stmt|;
DECL|member|wclass
name|quint32
name|wclass
decl_stmt|;
DECL|member|group
name|WindowGroupRef
name|group
decl_stmt|;
DECL|member|windowIcon
name|IconRef
name|windowIcon
decl_stmt|;
comment|// the current window icon, if set with setWindowIcon_sys.
DECL|member|savedWindowAttributesFromMaximized
name|quint32
name|savedWindowAttributesFromMaximized
decl_stmt|;
comment|// Saved attributes from when the calling updateMaximizeButton_sys()
ifdef|#
directive|ifdef
name|QT_MAC_USE_COCOA
comment|// This value is just to make sure we maximize and restore to the right location, yet we allow apps to be maximized and
comment|// manually resized.
comment|// The name is misleading, since this is set when maximizing the window. It is a hint to saveGeometry(..) to record the
comment|// starting position as 0,0 instead of the normal starting position.
DECL|member|wasMaximized
name|bool
name|wasMaximized
decl_stmt|;
endif|#
directive|endif
comment|// QT_MAC_USE_COCOA
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
comment|//<--------------------------------------------------------- QWS
ifndef|#
directive|ifndef
name|QT_NO_QWS_MANAGER
DECL|member|qwsManager
name|QWSManager
modifier|*
name|qwsManager
decl_stmt|;
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
DECL|member|inExpose
name|uint
name|inExpose
range|:
literal|1
decl_stmt|;
comment|// Prevents drawing recursion
DECL|member|nativeWindowTransparencyEnabled
name|uint
name|nativeWindowTransparencyEnabled
range|:
literal|1
decl_stmt|;
comment|// Tracks native window transparency
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_QPA
argument_list|)
DECL|member|window
name|QWidgetWindow
modifier|*
name|window
decl_stmt|;
DECL|member|screenIndex
name|quint32
name|screenIndex
decl_stmt|;
comment|// index in qplatformscreenlist
endif|#
directive|endif
block|}
struct|;
end_struct
begin_struct
DECL|struct|QWExtra
struct|struct
name|QWExtra
block|{
comment|// *************************** Cross-platform variables *****************************
comment|// Regular pointers (keep them together to avoid gaps on 64 bits architectures).
DECL|member|glContext
name|void
modifier|*
name|glContext
decl_stmt|;
comment|// if the widget is hijacked by QGLWindowSurface
DECL|member|topextra
name|QTLWExtra
modifier|*
name|topextra
decl_stmt|;
comment|// only useful for TLWs
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
DECL|member|proxyWidget
name|QGraphicsProxyWidget
modifier|*
name|proxyWidget
decl_stmt|;
comment|// if the widget is embedded
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
DECL|member|curs
name|QCursor
modifier|*
name|curs
decl_stmt|;
endif|#
directive|endif
DECL|member|style
name|QPointer
operator|<
name|QStyle
operator|>
name|style
expr_stmt|;
DECL|member|focus_proxy
name|QPointer
operator|<
name|QWidget
operator|>
name|focus_proxy
expr_stmt|;
comment|// Implicit pointers (shared_empty/shared_null).
DECL|member|mask
name|QRegion
name|mask
decl_stmt|;
comment|// widget mask
DECL|member|styleSheet
name|QString
name|styleSheet
decl_stmt|;
comment|// Other variables.
DECL|member|minw
name|qint32
name|minw
decl_stmt|;
DECL|member|minh
name|qint32
name|minh
decl_stmt|;
comment|// minimum size
DECL|member|maxw
name|qint32
name|maxw
decl_stmt|;
DECL|member|maxh
name|qint32
name|maxh
decl_stmt|;
comment|// maximum size
DECL|member|customDpiX
name|quint16
name|customDpiX
decl_stmt|;
DECL|member|customDpiY
name|quint16
name|customDpiY
decl_stmt|;
DECL|member|staticContentsSize
name|QSize
name|staticContentsSize
decl_stmt|;
comment|// *************************** Cross-platform bit fields ****************************
DECL|member|explicitMinSize
name|uint
name|explicitMinSize
range|:
literal|2
decl_stmt|;
DECL|member|explicitMaxSize
name|uint
name|explicitMaxSize
range|:
literal|2
decl_stmt|;
DECL|member|autoFillBackground
name|uint
name|autoFillBackground
range|:
literal|1
decl_stmt|;
DECL|member|nativeChildrenForced
name|uint
name|nativeChildrenForced
range|:
literal|1
decl_stmt|;
DECL|member|inRenderWithPainter
name|uint
name|inRenderWithPainter
range|:
literal|1
decl_stmt|;
DECL|member|hasMask
name|uint
name|hasMask
range|:
literal|1
decl_stmt|;
comment|// *************************** Platform specific values (bit fields first) **********
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
comment|//<----------------------------------------------------------- WIN
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
DECL|member|dropTarget
name|QOleDropTarget
modifier|*
name|dropTarget
decl_stmt|;
comment|// drop target
DECL|member|oleDropWidgets
name|QList
operator|<
name|QPointer
operator|<
name|QWidget
operator|>
expr|>
name|oleDropWidgets
expr_stmt|;
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
comment|//<--------------------------------------------------------- X11
DECL|member|compress_events
name|uint
name|compress_events
range|:
literal|1
decl_stmt|;
DECL|member|xDndProxy
name|WId
name|xDndProxy
decl_stmt|;
comment|// XDND forwarding to embedded windows
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
comment|//<------------------------------------------------------ MAC
ifdef|#
directive|ifdef
name|QT_MAC_USE_COCOA
comment|// Cocoa Mask stuff
DECL|member|maskBits
name|QImage
name|maskBits
decl_stmt|;
DECL|member|imageMask
name|CGImageRef
name|imageMask
decl_stmt|;
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
comment|//<----------------------------------------------------- Symbian
DECL|member|activated
name|uint
name|activated
range|:
literal|1
decl_stmt|;
comment|// RWindowBase::Activated has been called
comment|/**      * If this bit is set, each native widget receives the signals from the      * Symbian control immediately before and immediately after draw ops are      * sent to the window server for this control:      *      void beginNativePaintEvent(const QRect&paintRect);      *      void endNativePaintEvent(const QRect&paintRect);      */
DECL|member|receiveNativePaintEvents
name|uint
name|receiveNativePaintEvents
range|:
literal|1
decl_stmt|;
comment|/**      * Defines the behaviour of QSymbianControl::Draw.      */
DECL|enum|NativePaintMode
enum|enum
name|NativePaintMode
block|{
comment|/**          * Normal drawing mode: blits the required region of the backing store          * via WSERV.          */
DECL|enumerator|Blit
name|Blit
block|,
comment|/**          * Disable drawing for this widget.          */
DECL|enumerator|Disable
name|Disable
block|,
comment|/**          * Paint zeros into the WSERV framebuffer, using BitGDI APIs.  For windows          * with an EColor16MU display mode, zero is written only into the R, G and B          * channels of the pixel.          */
DECL|enumerator|ZeroFill
name|ZeroFill
block|,
comment|/**          * Blit backing store, propagating alpha channel into the framebuffer.          */
DECL|enumerator|BlitWriteAlpha
name|BlitWriteAlpha
block|,
DECL|enumerator|Default
name|Default
init|=
name|Blit
block|}
enum|;
DECL|member|nativePaintMode
name|NativePaintMode
name|nativePaintMode
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct
begin_comment
comment|/*!     \internal      Returns true if \a p or any of its parents enable the     Qt::BypassGraphicsProxyWidget window flag. Used in QWidget::show() and     QWidget::setParent() to determine whether it's necessary to embed the     widget into a QGraphicsProxyWidget or not. */
end_comment
begin_function
DECL|function|bypassGraphicsProxyWidget
specifier|static
specifier|inline
name|bool
name|bypassGraphicsProxyWidget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|p
parameter_list|)
block|{
while|while
condition|(
name|p
condition|)
block|{
if|if
condition|(
name|p
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|BypassGraphicsProxyWidget
condition|)
return|return
name|true
return|;
name|p
operator|=
name|p
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
return|return
name|false
return|;
block|}
end_function
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QWidgetPrivate
range|:
name|public
name|QObjectPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QWidget
argument_list|)
name|public
operator|:
comment|// *************************** Cross-platform ***************************************
expr|enum
name|DrawWidgetFlags
block|{
name|DrawAsRoot
operator|=
literal|0x01
block|,
name|DrawPaintOnScreen
operator|=
literal|0x02
block|,
name|DrawRecursive
operator|=
literal|0x04
block|,
name|DrawInvisible
operator|=
literal|0x08
block|,
name|DontSubtractOpaqueChildren
operator|=
literal|0x10
block|,
name|DontSetCompositionMode
operator|=
literal|0x20
block|,
name|DontDrawOpaqueChildren
operator|=
literal|0x40
block|,
name|DontDrawNativeChildren
operator|=
literal|0x80
block|}
block|;      enum
name|CloseMode
block|{
name|CloseNoEvent
block|,
name|CloseWithEvent
block|,
name|CloseWithSpontaneousEvent
block|}
block|;      enum
name|Direction
block|{
name|DirectionNorth
operator|=
literal|0x01
block|,
name|DirectionEast
operator|=
literal|0x10
block|,
name|DirectionSouth
operator|=
literal|0x02
block|,
name|DirectionWest
operator|=
literal|0x20
block|}
block|;
comment|// Functions.
name|explicit
name|QWidgetPrivate
argument_list|(
argument|int version = QObjectPrivateVersion
argument_list|)
block|;
operator|~
name|QWidgetPrivate
argument_list|()
block|;
name|QWExtra
operator|*
name|extraData
argument_list|()
specifier|const
block|;
name|QTLWExtra
operator|*
name|topData
argument_list|()
specifier|const
block|;
name|QTLWExtra
operator|*
name|maybeTopData
argument_list|()
specifier|const
block|;
name|QPainter
operator|*
name|sharedPainter
argument_list|()
specifier|const
block|;
name|void
name|setSharedPainter
argument_list|(
name|QPainter
operator|*
name|painter
argument_list|)
block|;
name|QWidgetBackingStore
operator|*
name|maybeBackingStore
argument_list|()
specifier|const
block|;
name|void
name|init
argument_list|(
argument|QWidget *desktopWidget
argument_list|,
argument|Qt::WindowFlags f
argument_list|)
block|;
name|void
name|create_sys
argument_list|(
argument|WId window
argument_list|,
argument|bool initializeWindow
argument_list|,
argument|bool destroyOldWindow
argument_list|)
block|;
name|void
name|createRecursively
argument_list|()
block|;
name|void
name|createWinId
argument_list|(
argument|WId id =
literal|0
argument_list|)
block|;
name|void
name|createTLExtra
argument_list|()
block|;
name|void
name|createExtra
argument_list|()
block|;
name|void
name|deleteExtra
argument_list|()
block|;
name|void
name|createSysExtra
argument_list|()
block|;
name|void
name|deleteSysExtra
argument_list|()
block|;
name|void
name|createTLSysExtra
argument_list|()
block|;
name|void
name|deleteTLSysExtra
argument_list|()
block|;
name|void
name|updateSystemBackground
argument_list|()
block|;
name|void
name|propagatePaletteChange
argument_list|()
block|;
name|void
name|setPalette_helper
argument_list|(
specifier|const
name|QPalette
operator|&
argument_list|)
block|;
name|void
name|resolvePalette
argument_list|()
block|;
name|QPalette
name|naturalWidgetPalette
argument_list|(
argument|uint inheritedMask
argument_list|)
specifier|const
block|;
name|void
name|setMask_sys
argument_list|(
specifier|const
name|QRegion
operator|&
argument_list|)
block|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|void
name|setSoftKeys_sys
argument_list|(
specifier|const
name|QList
operator|<
name|QAction
operator|*
operator|>
operator|&
name|softkeys
argument_list|)
block|;
name|void
name|activateSymbianWindow
argument_list|(
argument|WId wid =
literal|0
argument_list|)
block|;
name|void
name|_q_delayedDestroy
argument_list|(
argument|WId winId
argument_list|)
block|;
endif|#
directive|endif
name|void
name|raise_sys
argument_list|()
block|;
name|void
name|lower_sys
argument_list|()
block|;
name|void
name|stackUnder_sys
argument_list|(
name|QWidget
operator|*
argument_list|)
block|;
name|void
name|setFocus_sys
argument_list|()
block|;
name|void
name|updateFont
argument_list|(
specifier|const
name|QFont
operator|&
argument_list|)
block|;
specifier|inline
name|void
name|setFont_helper
argument_list|(
argument|const QFont&font
argument_list|)
block|{
if|if
condition|(
name|data
operator|.
name|fnt
operator|==
name|font
operator|&&
name|data
operator|.
name|fnt
operator|.
name|resolve
argument_list|()
operator|==
name|font
operator|.
name|resolve
argument_list|()
condition|)
return|return;
name|updateFont
argument_list|(
name|font
argument_list|)
block|;     }
name|void
name|resolveFont
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QFont
name|naturalWidgetFont
argument_list|(
name|uint
name|inheritedMask
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
name|setLayoutDirection_helper
argument_list|(
name|Qt
operator|::
name|LayoutDirection
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|resolveLayoutDirection
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setLocale_helper
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|l
parameter_list|,
name|bool
name|forceUpdate
init|=
name|false
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|resolveLocale
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setStyle_helper
parameter_list|(
name|QStyle
modifier|*
name|newStyle
parameter_list|,
name|bool
name|propagate
parameter_list|,
name|bool
name|metalHack
init|=
name|false
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|inheritStyle
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setUpdatesEnabled_helper
parameter_list|(
name|bool
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|void
name|paintBackground
argument_list|(
name|QPainter
operator|*
argument_list|,
specifier|const
name|QRegion
operator|&
argument_list|,
name|int
name|flags
operator|=
name|DrawAsRoot
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|bool
name|isAboutToShow
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QRegion
name|prepareToRender
argument_list|(
specifier|const
name|QRegion
operator|&
name|region
argument_list|,
name|QWidget
operator|::
name|RenderFlags
name|renderFlags
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
name|render_helper
argument_list|(
name|QPainter
operator|*
name|painter
argument_list|,
specifier|const
name|QPoint
operator|&
name|targetOffset
argument_list|,
specifier|const
name|QRegion
operator|&
name|sourceRegion
argument_list|,
name|QWidget
operator|::
name|RenderFlags
name|renderFlags
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
name|render
argument_list|(
name|QPaintDevice
operator|*
name|target
argument_list|,
specifier|const
name|QPoint
operator|&
name|targetOffset
argument_list|,
specifier|const
name|QRegion
operator|&
name|sourceRegion
argument_list|,
name|QWidget
operator|::
name|RenderFlags
name|renderFlags
argument_list|,
name|bool
name|readyToRender
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|drawWidget
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|,
name|int
name|flags
parameter_list|,
name|QPainter
modifier|*
name|sharedPainter
init|=
literal|0
parameter_list|,
name|QWidgetBackingStore
modifier|*
name|backingStore
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|paintSiblingsRecursive
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|,
specifier|const
name|QObjectList
modifier|&
name|children
parameter_list|,
name|int
name|index
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|,
name|int
name|flags
ifdef|#
directive|ifdef
name|Q_BACKINGSTORE_SUBSURFACES
parameter_list|,
specifier|const
name|QWindowSurface
modifier|*
name|currentSurface
endif|#
directive|endif
parameter_list|,
name|QPainter
modifier|*
name|sharedPainter
parameter_list|,
name|QWidgetBackingStore
modifier|*
name|backingStore
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QPainter
modifier|*
name|beginSharedPainter
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|endSharedPainter
parameter_list|()
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
end_ifndef
begin_function_decl
specifier|static
name|QGraphicsProxyWidget
modifier|*
name|nearestGraphicsProxyWidget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|origin
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QWindowSurface
modifier|*
name|createDefaultWindowSurface
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|QWindowSurface
modifier|*
name|createDefaultWindowSurface_sys
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|repaint_sys
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QRect
name|clipRect
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QRegion
name|clipRegion
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|void
name|subtractOpaqueChildren
argument_list|(
name|QRegion
operator|&
name|rgn
argument_list|,
specifier|const
name|QRect
operator|&
name|clipRect
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
name|subtractOpaqueSiblings
argument_list|(
name|QRegion
operator|&
name|source
argument_list|,
name|bool
operator|*
name|hasDirtySiblingsAbove
operator|=
literal|0
argument_list|,
name|bool
name|alsoNonOpaque
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
name|clipToEffectiveMask
argument_list|(
name|QRegion
operator|&
name|region
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|updateIsOpaque
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setOpaque
parameter_list|(
name|bool
name|opaque
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|updateIsTranslucent
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|paintOnScreen
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSEFFECT
end_ifndef
begin_function_decl
name|void
name|invalidateGraphicsEffectsRecursively
parameter_list|()
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_GRAPHICSEFFECT
end_comment
begin_expr_stmt
specifier|const
name|QRegion
operator|&
name|getOpaqueChildren
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setDirtyOpaqueRegion
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|close_helper
parameter_list|(
name|CloseMode
name|mode
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setWindowIcon_helper
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setWindowIcon_sys
parameter_list|(
name|bool
name|forceReset
init|=
name|false
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setWindowOpacity_sys
parameter_list|(
name|qreal
name|opacity
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|adjustQuitOnCloseAttribute
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|scrollChildren
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|moveRect
parameter_list|(
specifier|const
name|QRect
modifier|&
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|scrollRect
parameter_list|(
specifier|const
name|QRect
modifier|&
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|invalidateBuffer_resizeHelper
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|oldPos
parameter_list|,
specifier|const
name|QSize
modifier|&
name|oldSize
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// ### Qt 4.6: Merge into a template function (after MSVC isn't supported anymore).
end_comment
begin_function_decl
name|void
name|invalidateBuffer
parameter_list|(
specifier|const
name|QRegion
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|invalidateBuffer
parameter_list|(
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|bool
name|isOverlapped
argument_list|(
specifier|const
name|QRect
operator|&
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|syncBackingStore
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|syncBackingStore
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|reparentFocusWidgets
parameter_list|(
name|QWidget
modifier|*
name|oldtlw
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|int
name|pointToRect
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setWinId
parameter_list|(
name|WId
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|showChildren
parameter_list|(
name|bool
name|spontaneous
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|hideChildren
parameter_list|(
name|bool
name|spontaneous
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|void
name|setParent_sys
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|,
name|Qt
operator|::
name|WindowFlags
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|scroll_sys
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|scroll_sys
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|deactivateWidgetCleanup
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setGeometry_sys
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|bool
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|sendPendingMoveAndResizeEvents
parameter_list|(
name|bool
name|recursive
init|=
name|false
parameter_list|,
name|bool
name|disableUpdates
init|=
name|false
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|activateChildLayoutsRecursively
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|show_recursive
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|show_helper
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|show_sys
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|hide_sys
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|hide_helper
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|_q_showIfNotHidden
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setEnabled_helper
parameter_list|(
name|bool
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|registerDropSite
parameter_list|(
name|bool
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|static
name|void
name|adjustFlags
argument_list|(
name|Qt
operator|::
name|WindowFlags
operator|&
name|flags
argument_list|,
name|QWidget
operator|*
name|w
operator|=
literal|0
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|updateFrameStrut
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|QRect
name|frameStrut
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
end_ifdef
begin_function_decl
specifier|static
name|bool
name|navigateToDirection
parameter_list|(
name|Direction
name|direction
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QWidget
modifier|*
name|widgetInNavigationDirection
parameter_list|(
name|Direction
name|direction
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|static
name|bool
name|canKeypadNavigate
argument_list|(
name|Qt
operator|::
name|Orientation
name|orientation
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|static
name|bool
name|inTabWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|void
name|setWindowIconText_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|cap
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setWindowIconText_helper
parameter_list|(
specifier|const
name|QString
modifier|&
name|cap
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setWindowTitle_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|cap
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function_decl
name|void
name|setCursor_sys
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|unsetCursor_sys
parameter_list|()
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|void
name|setWindowTitle_helper
parameter_list|(
specifier|const
name|QString
modifier|&
name|cap
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setWindowFilePath_helper
parameter_list|(
specifier|const
name|QString
modifier|&
name|filePath
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|setMinimumSize_helper
parameter_list|(
name|int
modifier|&
name|minw
parameter_list|,
name|int
modifier|&
name|minh
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|setMaximumSize_helper
parameter_list|(
name|int
modifier|&
name|maxw
parameter_list|,
name|int
modifier|&
name|maxh
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|virtual
name|bool
name|hasHeightForWidth
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setConstraints_sys
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
name|bool
name|pointInsideRectAndMask
argument_list|(
specifier|const
name|QPoint
operator|&
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QWidget
modifier|*
name|childAt_helper
argument_list|(
specifier|const
name|QPoint
operator|&
argument_list|,
name|bool
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QWidget
modifier|*
name|childAtRecursiveHelper
argument_list|(
specifier|const
name|QPoint
operator|&
name|p
argument_list|,
name|bool
argument_list|,
name|bool
name|includeFrame
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|updateGeometry_helper
parameter_list|(
name|bool
name|forceUpdate
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|void
name|getLayoutItemMargins
argument_list|(
name|int
operator|*
name|left
argument_list|,
name|int
operator|*
name|top
argument_list|,
name|int
operator|*
name|right
argument_list|,
name|int
operator|*
name|bottom
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|setLayoutItemMargins
parameter_list|(
name|int
name|left
parameter_list|,
name|int
name|top
parameter_list|,
name|int
name|right
parameter_list|,
name|int
name|bottom
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|void
name|setLayoutItemMargins
argument_list|(
name|QStyle
operator|::
name|SubElement
name|element
argument_list|,
specifier|const
name|QStyleOption
operator|*
name|opt
operator|=
literal|0
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// aboutToDestroy() is called just before the contents of
end_comment
begin_comment
comment|// QWidget::destroy() is executed. It's used to signal QWidget
end_comment
begin_comment
comment|// sub-classes that their internals are about to be released.
end_comment
begin_function
name|virtual
name|void
name|aboutToDestroy
parameter_list|()
block|{}
end_function
begin_expr_stmt
name|QInputContext
operator|*
name|assignedInputContext
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QInputContext
operator|*
name|inputContext
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function
specifier|inline
name|QWidget
modifier|*
name|effectiveFocusWidget
parameter_list|()
block|{
name|QWidget
modifier|*
name|w
init|=
name|q_func
argument_list|()
decl_stmt|;
while|while
condition|(
name|w
operator|->
name|focusProxy
argument_list|()
condition|)
name|w
operator|=
name|w
operator|->
name|focusProxy
argument_list|()
expr_stmt|;
return|return
name|w
return|;
block|}
end_function
begin_function_decl
name|void
name|setModal_sys
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|// This is an helper function that return the available geometry for
end_comment
begin_comment
comment|// a widget and takes care is this one is in QGraphicsView.
end_comment
begin_comment
comment|// If the widget is not embed in a scene then the geometry available is
end_comment
begin_comment
comment|// null, we let QDesktopWidget decide for us.
end_comment
begin_function
specifier|static
name|QRect
name|screenGeometry
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QRect
name|screen
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
name|QGraphicsProxyWidget
modifier|*
name|ancestorProxy
init|=
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|nearestGraphicsProxyWidget
argument_list|(
name|widget
argument_list|)
decl_stmt|;
comment|//It's embedded if it has an ancestor
if|if
condition|(
name|ancestorProxy
condition|)
block|{
if|if
condition|(
operator|!
name|bypassGraphicsProxyWidget
argument_list|(
name|widget
argument_list|)
operator|&&
name|ancestorProxy
operator|->
name|scene
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// One view, let be smart and return the viewport rect then the popup is aligned
if|if
condition|(
name|ancestorProxy
operator|->
name|scene
argument_list|()
operator|->
name|views
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QGraphicsView
modifier|*
name|view
init|=
name|ancestorProxy
operator|->
name|scene
argument_list|()
operator|->
name|views
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|screen
operator|=
name|view
operator|->
name|mapToScene
argument_list|(
name|view
operator|->
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
operator|.
name|boundingRect
argument_list|()
operator|.
name|toRect
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|screen
operator|=
name|ancestorProxy
operator|->
name|scene
argument_list|()
operator|->
name|sceneRect
argument_list|()
operator|.
name|toRect
argument_list|()
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
return|return
name|screen
return|;
block|}
end_function
begin_function
specifier|inline
name|void
name|setRedirected
parameter_list|(
name|QPaintDevice
modifier|*
name|replacement
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|q_func
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_InPaintEvent
argument_list|)
argument_list|)
expr_stmt|;
name|redirectDev
operator|=
name|replacement
expr_stmt|;
name|redirectOffset
operator|=
name|offset
expr_stmt|;
block|}
end_function
begin_decl_stmt
specifier|inline
name|QPaintDevice
modifier|*
name|redirected
argument_list|(
name|QPoint
operator|*
name|offset
argument_list|)
decl|const
block|{
if|if
condition|(
name|offset
condition|)
operator|*
name|offset
operator|=
name|redirectDev
condition|?
name|redirectOffset
else|:
name|QPoint
argument_list|()
expr_stmt|;
return|return
name|redirectDev
return|;
block|}
end_decl_stmt
begin_function
specifier|inline
name|void
name|restoreRedirected
parameter_list|()
block|{
name|redirectDev
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|enforceNativeChildren
parameter_list|()
block|{
if|if
condition|(
operator|!
name|extra
condition|)
name|createExtra
argument_list|()
expr_stmt|;
if|if
condition|(
name|extra
operator|->
name|nativeChildrenForced
condition|)
return|return;
name|extra
operator|->
name|nativeChildrenForced
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|child
init|=
name|qobject_cast
operator|<
name|QWidget
operator|*
operator|>
operator|(
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|)
condition|)
name|child
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|nativeChildrenForced
argument_list|()
specifier|const
block|{
return|return
name|extra
operator|?
name|extra
operator|->
name|nativeChildrenForced
operator|:
name|false
return|;
block|}
end_expr_stmt
begin_decl_stmt
specifier|inline
name|QRect
name|effectiveRectFor
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
decl|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSEFFECT
if|if
condition|(
name|graphicsEffect
operator|&&
name|graphicsEffect
operator|->
name|isEnabled
argument_list|()
condition|)
return|return
name|graphicsEffect
operator|->
name|boundingRectFor
argument_list|(
name|rect
argument_list|)
operator|.
name|toAlignedRect
argument_list|()
return|;
endif|#
directive|endif
comment|//QT_NO_GRAPHICSEFFECT
return|return
name|rect
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|QSize
name|adjustedSize
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|inline
name|void
name|handleSoftwareInputPanel
argument_list|(
name|Qt
operator|::
name|MouseButton
name|button
argument_list|,
name|bool
name|clickCausedFocus
argument_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|LeftButton
operator|&&
name|qApp
operator|->
name|autoSipEnabled
argument_list|()
condition|)
block|{
name|QStyle
operator|::
name|RequestSoftwareInputPanel
name|behavior
operator|=
name|QStyle
operator|::
name|RequestSoftwareInputPanel
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_RequestSoftwareInputPanel
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|clickCausedFocus
operator|||
name|behavior
operator|==
name|QStyle
operator|::
name|RSIP_OnMouseClick
condition|)
block|{
name|QEvent
name|event
argument_list|(
name|QEvent
operator|::
name|RequestSoftwareInputPanel
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|Q_WS_QWS
end_ifndef
begin_comment
comment|// Almost cross-platform :-)
end_comment
begin_function_decl
name|void
name|setWSGeometry
parameter_list|(
name|bool
name|dontShow
init|=
name|false
parameter_list|,
specifier|const
name|QRect
modifier|&
name|oldRect
init|=
name|QRect
argument_list|()
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|inline
name|QPoint
name|mapToWS
argument_list|(
specifier|const
name|QPoint
operator|&
name|p
argument_list|)
decl|const
block|{
return|return
name|p
operator|-
name|data
operator|.
name|wrect
operator|.
name|topLeft
argument_list|()
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|QPoint
name|mapFromWS
argument_list|(
specifier|const
name|QPoint
operator|&
name|p
argument_list|)
decl|const
block|{
return|return
name|p
operator|+
name|data
operator|.
name|wrect
operator|.
name|topLeft
argument_list|()
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|QRect
name|mapToWS
argument_list|(
specifier|const
name|QRect
operator|&
name|r
argument_list|)
decl|const
block|{
name|QRect
name|rr
parameter_list|(
name|r
parameter_list|)
function_decl|;
name|rr
operator|.
name|translate
argument_list|(
operator|-
name|data
operator|.
name|wrect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rr
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|QRect
name|mapFromWS
argument_list|(
specifier|const
name|QRect
operator|&
name|r
argument_list|)
decl|const
block|{
name|QRect
name|rr
parameter_list|(
name|r
parameter_list|)
function_decl|;
name|rr
operator|.
name|translate
argument_list|(
name|data
operator|.
name|wrect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rr
return|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Variables.
end_comment
begin_comment
comment|// Regular pointers (keep them together to avoid gaps on 64 bit architectures).
end_comment
begin_decl_stmt
name|QWExtra
modifier|*
name|extra
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QWidget
modifier|*
name|focus_next
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QWidget
modifier|*
name|focus_prev
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QWidget
modifier|*
name|focus_child
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QLayout
modifier|*
name|layout
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QRegion
modifier|*
name|needsFlush
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QPaintDevice
modifier|*
name|redirectDev
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QWidgetItemV2
modifier|*
name|widgetItem
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QPaintEngine
modifier|*
name|extraPaintEngine
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|mutable
specifier|const
name|QMetaObject
modifier|*
name|polished
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QGraphicsEffect
modifier|*
name|graphicsEffect
decl_stmt|;
end_decl_stmt
begin_comment
comment|// All widgets are added into the allWidgets set. Once
end_comment
begin_comment
comment|// they receive a window id they are also added to the mapper.
end_comment
begin_comment
comment|// This should just ensure that all widgets are deleted by QApplication
end_comment
begin_decl_stmt
specifier|static
name|QWidgetMapper
modifier|*
name|mapper
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QWidgetSet
modifier|*
name|allWidgets
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_IM
argument_list|)
end_if
begin_expr_stmt
name|QPointer
operator|<
name|QInputContext
operator|>
name|ic
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Qt
operator|::
name|InputMethodHints
name|imHints
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
end_ifdef
begin_expr_stmt
specifier|static
name|QPointer
operator|<
name|QWidget
operator|>
name|editingWidget
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Implicit pointers (shared_null/shared_empty).
end_comment
begin_decl_stmt
name|QRegion
name|opaqueChildren
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QRegion
name|dirty
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
end_ifndef
begin_decl_stmt
name|QString
name|toolTip
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STATUSTIP
end_ifndef
begin_decl_stmt
name|QString
name|statusTip
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
end_ifndef
begin_decl_stmt
name|QString
name|whatsThis
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_decl_stmt
name|QString
name|accessibleName
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|accessibleDescription
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Other variables.
end_comment
begin_decl_stmt
name|uint
name|inheritedFontResolveMask
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|inheritedPaletteResolveMask
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|short
name|leftmargin
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|short
name|topmargin
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|short
name|rightmargin
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|short
name|bottommargin
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|signed
name|char
name|leftLayoutItemMargin
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|signed
name|char
name|topLayoutItemMargin
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|signed
name|char
name|rightLayoutItemMargin
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|signed
name|char
name|bottomLayoutItemMargin
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|instanceCounter
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Current number of widget instances
end_comment
begin_decl_stmt
specifier|static
name|int
name|maxInstances
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Maximum number of widget instances
end_comment
begin_expr_stmt
name|Qt
operator|::
name|HANDLE
name|hd
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QWidgetData
name|data
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QSizePolicy
name|size_policy
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QLocale
name|locale
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QPoint
name|redirectOffset
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACTION
end_ifndef
begin_expr_stmt
name|QList
operator|<
name|QAction
operator|*
operator|>
name|actions
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_expr_stmt
name|QMap
operator|<
name|Qt
operator|::
name|GestureType
operator|,
name|Qt
operator|::
name|GestureFlags
operator|>
name|gestureContext
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Bit fields.
end_comment
begin_decl_stmt
name|uint
name|high_attributes
index|[
literal|4
index|]
decl_stmt|;
end_decl_stmt
begin_comment
comment|// the low ones are in QWidget::widget_attributes
end_comment
begin_expr_stmt
name|QPalette
operator|::
name|ColorRole
name|fg_role
operator|:
literal|8
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QPalette
operator|::
name|ColorRole
name|bg_role
operator|:
literal|8
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|uint
name|dirtyOpaqueChildren
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|isOpaque
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|inDirtyList
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|isScrolled
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|isMoved
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|isGLWidget
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|usesDoubleBufferedGLContext
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_IM
end_ifndef
begin_decl_stmt
name|uint
name|inheritsInputMethodHints
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// *************************** Platform specific ************************************
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
end_if
begin_comment
comment|//<----------------------------------------------------------- X11
end_comment
begin_decl_stmt
name|QX11Info
name|xinfo
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Qt
operator|::
name|HANDLE
name|picture
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|static
name|QWidget
modifier|*
name|mouseGrabber
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QWidget
modifier|*
name|keyboardGrabber
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|setWindowRole
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
name|void
name|sendStartupMessage
argument_list|(
specifier|const
name|char
operator|*
name|message
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|setNetWmWindowTypes
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|x11UpdateIsOpaque
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|isBackgroundInherited
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|updateX11AcceptFocus
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
name|QPoint
name|mapToGlobal
argument_list|(
specifier|const
name|QPoint
operator|&
name|pos
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QPoint
name|mapFromGlobal
argument_list|(
specifier|const
name|QPoint
operator|&
name|pos
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
end_elif
begin_comment
comment|//<--------------------------------------------------------- WIN
end_comment
begin_decl_stmt
name|uint
name|noPaintOnScreen
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_comment
comment|// see qwidget_win.cpp ::paintEngine()
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_decl_stmt
name|uint
name|nativeGesturePanEnabled
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|bool
name|shouldShowMaximizeButton
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|winUpdateIsOpaque
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|reparentChildren
parameter_list|()
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function_decl
name|QOleDropTarget
modifier|*
name|registerOleDnd
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|unregisterOleDnd
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QOleDropTarget
modifier|*
name|target
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|void
name|grabMouseWhileInWindow
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|registerTouchWindow
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|winSetupGestures
parameter_list|()
function_decl|;
end_function_decl
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
end_elif
begin_comment
comment|//<--------------------------------------------------------- MAC
end_comment
begin_comment
comment|// This is new stuff
end_comment
begin_decl_stmt
name|uint
name|needWindowChange
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Each wiget keeps a list of all its child and grandchild OpenGL widgets.
end_comment
begin_comment
comment|// This list is used to update the gl context whenever a parent and a granparent
end_comment
begin_comment
comment|// moves, and also to check for intersections with gl widgets within the window
end_comment
begin_comment
comment|// when a widget moves.
end_comment
begin_struct
struct|struct
name|GlWidgetInfo
block|{
name|GlWidgetInfo
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
operator|:
name|widget
argument_list|(
name|widget
argument_list|)
operator|,
name|lastUpdateWidget
argument_list|(
literal|0
argument_list|)
block|{ }
name|bool
name|operator
operator|==
operator|(
specifier|const
name|GlWidgetInfo
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|(
name|widget
operator|==
name|other
operator|.
name|widget
operator|)
return|;
block|}
name|QWidget
modifier|*
name|widget
decl_stmt|;
name|QWidget
modifier|*
name|lastUpdateWidget
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|// dirtyOnWidget contains the areas in the widget that needs to be repained,
end_comment
begin_comment
comment|// in the same way as dirtyOnScreen does for the window. Areas are added in
end_comment
begin_comment
comment|// dirtyWidget_sys and cleared in the paint event. In scroll_sys we then use
end_comment
begin_comment
comment|// this information repaint invalid areas when widgets are scrolled.
end_comment
begin_decl_stmt
name|QRegion
name|dirtyOnWidget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|EventHandlerRef
name|window_event
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QList
operator|<
name|GlWidgetInfo
operator|>
name|glWidgets
expr_stmt|;
end_expr_stmt
begin_comment
comment|//these are here just for code compat (HIViews)
end_comment
begin_expr_stmt
name|Qt
operator|::
name|HANDLE
name|qd_hd
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|macUpdateSizeAttribute
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|macUpdateHideOnSuspend
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|macUpdateOpaqueSizeGrip
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|macUpdateIgnoreMouseEvents
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|macUpdateMetalAttribute
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|macUpdateIsOpaque
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|macSetNeedsDisplay
parameter_list|(
name|QRegion
name|region
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setEnabled_helper_sys
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|isRealWindow
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|adjustWithinMaxAndMinSize
parameter_list|(
name|int
modifier|&
name|w
parameter_list|,
name|int
modifier|&
name|h
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|applyMaxAndMinSizeOnWindow
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|update_sys
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|update_sys
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setGeometry_sys_helper
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|bool
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setWindowModified_sys
parameter_list|(
name|bool
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|updateMaximizeButton_sys
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setWindowFilePath_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|filePath
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|createWindow_sys
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|recreateMacWindow
parameter_list|()
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_MAC_USE_COCOA
end_ifndef
begin_function_decl
name|void
name|initWindowPtr
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|finishCreateWindow_sys_Carbon
parameter_list|(
name|OSWindowRef
name|windowRef
parameter_list|)
function_decl|;
end_function_decl
begin_else
else|#
directive|else
end_else
begin_function_decl
name|void
name|setSubWindowStacking
parameter_list|(
name|bool
name|set
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setWindowLevel
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|finishCreateWindow_sys_Cocoa
parameter_list|(
name|void
modifier|*
comment|/*NSWindow * */
name|windowRef
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|syncCocoaMask
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|finishCocoaMaskSetup
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|syncUnifiedMode
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|// Did we add the drawRectOriginal method?
end_comment
begin_decl_stmt
name|bool
name|drawRectOriginalAdded
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Is the original drawRect method available?
end_comment
begin_decl_stmt
name|bool
name|originalDrawMethod
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Do we need to change the methods?
end_comment
begin_decl_stmt
name|bool
name|changeMethods
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Unified toolbar variables
end_comment
begin_decl_stmt
name|bool
name|isInUnifiedToolbar
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QUnifiedToolbarSurface
modifier|*
name|unifiedSurface
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QPoint
name|toolbar_offset
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QWidget
modifier|*
name|toolbar_ancestor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|flushRequested
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|touchEventsEnabled
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_MAC_USE_COCOA
end_comment
begin_function_decl
name|void
name|determineWindowClass
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|transferChildren
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|qt_mac_dnd_event
parameter_list|(
name|uint
parameter_list|,
name|DragRef
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|toggleDrawers
parameter_list|(
name|bool
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//mac event functions
end_comment
begin_function_decl
specifier|static
name|bool
name|qt_create_root_win
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|qt_clean_root_win
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|qt_mac_update_sizer
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|int
name|up
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|OSStatus
name|qt_window_event
parameter_list|(
name|EventHandlerCallRef
name|er
parameter_list|,
name|EventRef
name|event
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|OSStatus
name|qt_widget_event
parameter_list|(
name|EventHandlerCallRef
name|er
parameter_list|,
name|EventRef
name|event
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|qt_widget_rgn
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|short
parameter_list|,
name|RgnHandle
parameter_list|,
name|bool
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|registerTouchWindow
parameter_list|(
name|bool
name|enable
init|=
name|true
parameter_list|)
function_decl|;
end_function_decl
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
end_elif
begin_comment
comment|//<--------------------------------------------------------- QWS
end_comment
begin_function_decl
name|void
name|setMaxWindowState_helper
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setFullScreenSize_helper
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|moveSurface
parameter_list|(
name|QWindowSurface
modifier|*
name|surface
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QRegion
name|localRequestedRegion
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QRegion
name|localAllocatedRegion
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|friend
name|class
name|QWSManager
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QWSManagerPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QDecoration
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_expr_stmt
name|void
name|updateCursor
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QScreen
operator|*
name|getScreen
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_QPA
argument_list|)
end_elif
begin_comment
comment|//<--------------------------------------------------------- QPA
end_comment
begin_function_decl
name|void
name|setMaxWindowState_helper
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setFullScreenSize_helper
parameter_list|()
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_expr_stmt
name|void
name|updateCursor
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_elif
begin_comment
comment|//<--------------------------------------------------------- SYMBIAN
end_comment
begin_decl_stmt
specifier|static
name|QWidget
modifier|*
name|mouseGrabber
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QWidget
modifier|*
name|keyboardGrabber
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|symbianScreenNumber
decl_stmt|;
end_decl_stmt
begin_comment
comment|// only valid for desktop widget and top-levels
end_comment
begin_decl_stmt
name|bool
name|fixNativeOrientationCalled
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|s60UpdateIsOpaque
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|reparentChildren
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|registerTouchWindow
parameter_list|()
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_struct
DECL|struct|QWidgetPaintContext
unit|};
struct|struct
name|QWidgetPaintContext
block|{
DECL|function|QWidgetPaintContext
specifier|inline
name|QWidgetPaintContext
argument_list|(
argument|QPaintDevice *d
argument_list|,
argument|const QRegion&r
argument_list|,
argument|const QPoint&o
argument_list|,
argument|int f
argument_list|,
argument|QPainter *p
argument_list|,
argument|QWidgetBackingStore *b
argument_list|)
operator|:
name|pdev
argument_list|(
name|d
argument_list|)
operator|,
name|rgn
argument_list|(
name|r
argument_list|)
operator|,
name|offset
argument_list|(
name|o
argument_list|)
operator|,
name|flags
argument_list|(
name|f
argument_list|)
operator|,
name|sharedPainter
argument_list|(
name|p
argument_list|)
operator|,
name|backingStore
argument_list|(
name|b
argument_list|)
operator|,
name|painter
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|pdev
name|QPaintDevice
operator|*
name|pdev
expr_stmt|;
DECL|member|rgn
name|QRegion
name|rgn
decl_stmt|;
DECL|member|offset
name|QPoint
name|offset
decl_stmt|;
DECL|member|flags
name|int
name|flags
decl_stmt|;
DECL|member|sharedPainter
name|QPainter
modifier|*
name|sharedPainter
decl_stmt|;
DECL|member|backingStore
name|QWidgetBackingStore
modifier|*
name|backingStore
decl_stmt|;
DECL|member|painter
name|QPainter
modifier|*
name|painter
decl_stmt|;
block|}
struct|;
end_struct
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSEFFECT
end_ifndef
begin_decl_stmt
name|class
name|QWidgetEffectSourcePrivate
range|:
name|public
name|QGraphicsEffectSourcePrivate
block|{
name|public
operator|:
name|QWidgetEffectSourcePrivate
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
operator|:
name|QGraphicsEffectSourcePrivate
argument_list|()
block|,
name|m_widget
argument_list|(
name|widget
argument_list|)
block|,
name|context
argument_list|(
literal|0
argument_list|)
block|,
name|updateDueToGraphicsEffect
argument_list|(
argument|false
argument_list|)
block|{}
specifier|inline
name|void
name|detach
argument_list|()
block|{
name|m_widget
operator|->
name|d_func
argument_list|()
operator|->
name|graphicsEffect
operator|=
literal|0
block|; }
specifier|inline
specifier|const
name|QGraphicsItem
operator|*
name|graphicsItem
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
specifier|inline
specifier|const
name|QWidget
operator|*
name|widget
argument_list|()
specifier|const
block|{
return|return
name|m_widget
return|;
block|}
specifier|inline
name|void
name|update
argument_list|()
block|{
name|updateDueToGraphicsEffect
operator|=
name|true
block|;
name|m_widget
operator|->
name|update
argument_list|()
block|;
name|updateDueToGraphicsEffect
operator|=
name|false
block|;     }
specifier|inline
name|bool
name|isPixmap
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|void
name|effectBoundingRectChanged
argument_list|()
block|{
comment|// ### This function should take a rect parameter; then we can avoid
comment|// updating too much on the parent widget.
if|if
condition|(
name|QWidget
modifier|*
name|parent
init|=
name|m_widget
operator|->
name|parentWidget
argument_list|()
condition|)
name|parent
operator|->
name|update
argument_list|()
expr_stmt|;
else|else
name|update
argument_list|()
expr_stmt|;
block|}
specifier|inline
specifier|const
name|QStyleOption
operator|*
name|styleOption
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
specifier|inline
name|QRect
name|deviceRect
argument_list|()
specifier|const
block|{
return|return
name|m_widget
operator|->
name|window
argument_list|()
operator|->
name|rect
argument_list|()
return|;
block|}
name|QRectF
name|boundingRect
argument_list|(
argument|Qt::CoordinateSystem system
argument_list|)
specifier|const
block|;
name|void
name|draw
argument_list|(
name|QPainter
operator|*
name|p
argument_list|)
block|;
name|QPixmap
name|pixmap
argument_list|(
argument|Qt::CoordinateSystem system
argument_list|,
argument|QPoint *offset
argument_list|,
argument|QGraphicsEffect::PixmapPadMode mode
argument_list|)
specifier|const
block|;
name|QWidget
operator|*
name|m_widget
block|;
name|QWidgetPaintContext
operator|*
name|context
block|;
name|QTransform
name|lastEffectTransform
block|;
name|bool
name|updateDueToGraphicsEffect
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_GRAPHICSEFFECT
end_comment
begin_expr_stmt
DECL|function|extraData
specifier|inline
name|QWExtra
operator|*
name|QWidgetPrivate
operator|::
name|extraData
argument_list|()
specifier|const
block|{
return|return
name|extra
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|topData
specifier|inline
name|QTLWExtra
operator|*
name|QWidgetPrivate
operator|::
name|topData
argument_list|()
specifier|const
block|{
name|const_cast
operator|<
name|QWidgetPrivate
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|createTLExtra
argument_list|()
block|;
return|return
name|extra
operator|->
name|topextra
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|maybeTopData
specifier|inline
name|QTLWExtra
operator|*
name|QWidgetPrivate
operator|::
name|maybeTopData
argument_list|()
specifier|const
block|{
return|return
name|extra
operator|?
name|extra
operator|->
name|topextra
operator|:
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|sharedPainter
specifier|inline
name|QPainter
operator|*
name|QWidgetPrivate
operator|::
name|sharedPainter
argument_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWidget
argument_list|)
block|;
name|QTLWExtra
operator|*
name|x
operator|=
name|q
operator|->
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
block|;
return|return
name|x
condition|?
name|x
operator|->
name|sharedPainter
else|:
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setSharedPainter
specifier|inline
name|void
name|QWidgetPrivate
operator|::
name|setSharedPainter
argument_list|(
argument|QPainter *painter
argument_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
block|;
name|QTLWExtra
operator|*
name|x
operator|=
name|q
operator|->
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
block|;
name|x
operator|->
name|sharedPainter
operator|=
name|painter
block|; }
DECL|function|pointInsideRectAndMask
specifier|inline
name|bool
name|QWidgetPrivate
operator|::
name|pointInsideRectAndMask
argument_list|(
argument|const QPoint&p
argument_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWidget
argument_list|)
block|;
return|return
name|q
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|p
argument_list|)
operator|&&
operator|(
operator|!
name|extra
operator|||
operator|!
name|extra
operator|->
name|hasMask
operator|||
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_MouseNoMask
argument_list|)
operator|||
name|extra
operator|->
name|mask
operator|.
name|contains
argument_list|(
name|p
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|maybeBackingStore
specifier|inline
name|QWidgetBackingStore
operator|*
name|QWidgetPrivate
operator|::
name|maybeBackingStore
argument_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWidget
argument_list|)
block|;
name|QTLWExtra
operator|*
name|x
operator|=
name|q
operator|->
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
block|;
return|return
name|x
condition|?
name|x
operator|->
name|backingStore
operator|.
name|data
argument_list|()
else|:
literal|0
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWIDGET_P_H
end_comment
end_unit
