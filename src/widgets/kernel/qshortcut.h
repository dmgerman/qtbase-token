begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSHORTCUT_H
end_ifndef
begin_define
DECL|macro|QSHORTCUT_H
define|#
directive|define
name|QSHORTCUT_H
end_define
begin_include
include|#
directive|include
file|<QtWidgets/qwidget.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qkeysequence.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
DECL|variable|QShortcutPrivate
name|class
name|QShortcutPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QShortcut
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QShortcut
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QKeySequence key READ key WRITE setKey
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString whatsThis READ whatsThis WRITE setWhatsThis
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool enabled READ isEnabled WRITE setEnabled
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool autoRepeat READ autoRepeat WRITE setAutoRepeat
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::ShortcutContext context READ context WRITE setContext
argument_list|)
name|public
operator|:
name|explicit
name|QShortcut
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|)
block|;
name|QShortcut
argument_list|(
argument|const QKeySequence& key
argument_list|,
argument|QWidget *parent
argument_list|,
argument|const char *member = Q_NULLPTR
argument_list|,
argument|const char *ambiguousMember = Q_NULLPTR
argument_list|,
argument|Qt::ShortcutContext context = Qt::WindowShortcut
argument_list|)
block|;
operator|~
name|QShortcut
argument_list|()
block|;
name|void
name|setKey
argument_list|(
specifier|const
name|QKeySequence
operator|&
name|key
argument_list|)
block|;
name|QKeySequence
name|key
argument_list|()
specifier|const
block|;
name|void
name|setEnabled
argument_list|(
argument|bool enable
argument_list|)
block|;
name|bool
name|isEnabled
argument_list|()
specifier|const
block|;
name|void
name|setContext
argument_list|(
argument|Qt::ShortcutContext context
argument_list|)
block|;
name|Qt
operator|::
name|ShortcutContext
name|context
argument_list|()
specifier|const
block|;
name|void
name|setWhatsThis
argument_list|(
specifier|const
name|QString
operator|&
name|text
argument_list|)
block|;
name|QString
name|whatsThis
argument_list|()
specifier|const
block|;
name|void
name|setAutoRepeat
argument_list|(
argument|bool on
argument_list|)
block|;
name|bool
name|autoRepeat
argument_list|()
specifier|const
block|;
name|int
name|id
argument_list|()
specifier|const
block|;
specifier|inline
name|QWidget
operator|*
name|parentWidget
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|QWidget
operator|*
operator|>
operator|(
name|QObject
operator|::
name|parent
argument_list|()
operator|)
return|;
block|}
name|Q_SIGNALS
operator|:
name|void
name|activated
argument_list|()
block|;
name|void
name|activatedAmbiguously
argument_list|()
block|;
name|protected
operator|:
name|bool
name|event
argument_list|(
argument|QEvent *e
argument_list|)
name|Q_DECL_OVERRIDE
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SHORTCUT
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSHORTCUT_H
end_comment
end_unit
