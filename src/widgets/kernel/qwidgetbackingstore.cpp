begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qwidgetbackingstore_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qevent.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpaintengine.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicsproxywidget.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgraphicseffect_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qwindow_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformbackingstore.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PAINT_DEBUG
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtCore/qt_windows.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformnativeinterface.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|QRegion
name|qt_dirtyRegion
parameter_list|(
name|QWidget
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/**  * Flushes the contents of the \a backingStore into the screen area of \a widget.  * \a tlwOffset is the position of the top level widget relative to the window surface.  * \a region is the region to be updated in \a widget coordinates.  */
end_comment
begin_function
DECL|function|qt_flush
name|void
name|QWidgetBackingStore
operator|::
name|qt_flush
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|QBackingStore
modifier|*
name|backingStore
parameter_list|,
name|QWidget
modifier|*
name|tlw
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|tlwOffset
parameter_list|,
name|QPlatformTextureList
modifier|*
name|widgetTextures
parameter_list|,
name|QWidgetBackingStore
modifier|*
name|widgetBackingStore
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_OPENGL
name|Q_UNUSED
argument_list|(
name|widgetTextures
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|region
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
operator|!
name|region
operator|.
name|isEmpty
argument_list|()
operator|||
name|widgetTextures
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|backingStore
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|tlw
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_PAINT_DEBUG
argument_list|)
specifier|static
name|int
name|flushUpdate
init|=
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_FLUSH_UPDATE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|flushUpdate
operator|>
literal|0
condition|)
name|QWidgetBackingStore
operator|::
name|showYellowThing
argument_list|(
name|widget
argument_list|,
name|region
argument_list|,
name|flushUpdate
operator|*
literal|10
argument_list|,
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|tlw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
operator|||
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
return|return;
specifier|static
name|bool
name|fpsDebug
init|=
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_DEBUG_FPS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fpsDebug
condition|)
block|{
if|if
condition|(
operator|!
name|widgetBackingStore
operator|->
name|perfFrames
operator|++
condition|)
name|widgetBackingStore
operator|->
name|perfTime
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|widgetBackingStore
operator|->
name|perfTime
operator|.
name|elapsed
argument_list|()
operator|>
literal|5000
condition|)
block|{
name|double
name|fps
init|=
name|double
argument_list|(
name|widgetBackingStore
operator|->
name|perfFrames
operator|*
literal|1000
argument_list|)
operator|/
name|widgetBackingStore
operator|->
name|perfTime
operator|.
name|restart
argument_list|()
decl_stmt|;
name|qDebug
argument_list|(
literal|"FPS: %.1f\n"
argument_list|,
name|fps
argument_list|)
expr_stmt|;
name|widgetBackingStore
operator|->
name|perfFrames
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|QPoint
name|offset
init|=
name|tlwOffset
decl_stmt|;
if|if
condition|(
name|widget
operator|!=
name|tlw
condition|)
name|offset
operator|+=
name|widget
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
if|if
condition|(
name|widgetTextures
condition|)
block|{
name|qt_window_private
argument_list|(
name|tlw
operator|->
name|windowHandle
argument_list|()
argument_list|)
operator|->
name|compositing
operator|=
literal|true
expr_stmt|;
name|widget
operator|->
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|sendComposeStatus
argument_list|(
name|widget
operator|->
name|window
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// A window may have alpha even when the app did not request
comment|// WA_TranslucentBackground. Therefore the compositor needs to know whether the app intends
comment|// to rely on translucency, in order to decide if it should clear to transparent or opaque.
specifier|const
name|bool
name|translucentBackground
init|=
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
decl_stmt|;
comment|// Use the tlw's context, not widget's. The difference is important with native child
comment|// widgets where tlw != widget.
name|backingStore
operator|->
name|handle
argument_list|()
operator|->
name|composeAndFlush
argument_list|(
name|widget
operator|->
name|windowHandle
argument_list|()
argument_list|,
name|region
argument_list|,
name|offset
argument_list|,
name|widgetTextures
argument_list|,
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|shareContext
argument_list|()
argument_list|,
name|translucentBackground
argument_list|)
expr_stmt|;
name|widget
operator|->
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|sendComposeStatus
argument_list|(
name|widget
operator|->
name|window
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
name|backingStore
operator|->
name|flush
argument_list|(
name|region
argument_list|,
name|widget
operator|->
name|windowHandle
argument_list|()
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PAINT_DEBUG
end_ifndef
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
end_if
begin_function
DECL|function|showYellowThing_win
specifier|static
name|void
name|showYellowThing_win
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|int
name|msec
parameter_list|)
block|{
comment|// We expect to be passed a native parent.
name|QWindow
modifier|*
name|nativeWindow
init|=
name|widget
operator|->
name|windowHandle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nativeWindow
condition|)
return|return;
name|void
modifier|*
name|hdcV
init|=
name|QGuiApplication
operator|::
name|platformNativeInterface
argument_list|()
operator|->
name|nativeResourceForWindow
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"getDC"
argument_list|)
argument_list|,
name|nativeWindow
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hdcV
condition|)
return|return;
specifier|const
name|HDC
name|hdc
init|=
cast|reinterpret_cast
argument_list|<
name|HDC
argument_list|>
argument_list|(
name|hdcV
argument_list|)
decl_stmt|;
name|HBRUSH
name|brush
decl_stmt|;
specifier|static
name|int
name|i
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|brush
operator|=
name|CreateSolidBrush
argument_list|(
name|RGB
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|brush
operator|=
name|CreateSolidBrush
argument_list|(
name|RGB
argument_list|(
literal|255
argument_list|,
literal|200
argument_list|,
literal|55
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|brush
operator|=
name|CreateSolidBrush
argument_list|(
name|RGB
argument_list|(
literal|200
argument_list|,
literal|255
argument_list|,
literal|55
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|brush
operator|=
name|CreateSolidBrush
argument_list|(
name|RGB
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|i
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|&
literal|3
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QRect
modifier|&
name|rect
decl|,
name|region
operator|.
name|rects
argument_list|()
control|)
block|{
name|RECT
name|winRect
decl_stmt|;
name|SetRect
argument_list|(
operator|&
name|winRect
argument_list|,
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|FillRect
argument_list|(
name|hdc
argument_list|,
operator|&
name|winRect
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
name|DeleteObject
argument_list|(
name|brush
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|platformNativeInterface
argument_list|()
operator|->
name|nativeResourceForWindow
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"releaseDC"
argument_list|)
argument_list|,
name|nativeWindow
argument_list|)
expr_stmt|;
operator|::
name|Sleep
argument_list|(
name|msec
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//  defined(Q_OS_WIN)&& !defined(Q_OS_WINRT)
end_comment
begin_function
DECL|function|showYellowThing
name|void
name|QWidgetBackingStore
operator|::
name|showYellowThing
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|toBePainted
parameter_list|,
name|int
name|msec
parameter_list|,
name|bool
name|unclipped
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINRT
name|Q_UNUSED
argument_list|(
argument|msec
argument_list|)
endif|#
directive|endif
name|QRegion
name|paintRegion
init|=
name|toBePainted
decl_stmt|;
name|QRect
name|widgetRect
init|=
name|widget
operator|->
name|rect
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|widget
operator|->
name|internalWinId
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|nativeParent
init|=
name|widget
operator|->
name|nativeParentWidget
argument_list|()
decl_stmt|;
specifier|const
name|QPoint
name|offset
init|=
name|widget
operator|->
name|mapTo
argument_list|(
name|nativeParent
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|paintRegion
operator|.
name|translate
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|widgetRect
operator|.
name|translate
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|widget
operator|=
name|nativeParent
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
name|Q_UNUSED
argument_list|(
name|unclipped
argument_list|)
expr_stmt|;
name|showYellowThing_win
argument_list|(
name|widget
argument_list|,
name|paintRegion
argument_list|,
name|msec
argument_list|)
expr_stmt|;
else|#
directive|else
comment|//flags to fool painter
name|bool
name|paintUnclipped
init|=
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_PaintUnclipped
argument_list|)
decl_stmt|;
if|if
condition|(
name|unclipped
operator|&&
operator|!
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|paintOnScreen
argument_list|()
condition|)
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PaintUnclipped
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|setFlag
init|=
operator|!
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_InPaintEvent
argument_list|)
decl_stmt|;
if|if
condition|(
name|setFlag
condition|)
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_InPaintEvent
argument_list|)
expr_stmt|;
comment|//setup the engine
name|QPaintEngine
modifier|*
name|pe
init|=
name|widget
operator|->
name|paintEngine
argument_list|()
decl_stmt|;
if|if
condition|(
name|pe
condition|)
block|{
name|pe
operator|->
name|setSystemClip
argument_list|(
name|paintRegion
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|p
operator|.
name|setClipRegion
argument_list|(
name|paintRegion
argument_list|)
expr_stmt|;
specifier|static
name|int
name|i
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|p
operator|.
name|fillRect
argument_list|(
name|widgetRect
argument_list|,
name|QColor
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|p
operator|.
name|fillRect
argument_list|(
name|widgetRect
argument_list|,
name|QColor
argument_list|(
literal|255
argument_list|,
literal|200
argument_list|,
literal|55
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|p
operator|.
name|fillRect
argument_list|(
name|widgetRect
argument_list|,
name|QColor
argument_list|(
literal|200
argument_list|,
literal|255
argument_list|,
literal|55
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|p
operator|.
name|fillRect
argument_list|(
name|widgetRect
argument_list|,
name|QColor
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|i
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|&
literal|3
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|setFlag
condition|)
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_InPaintEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//restore
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_PaintUnclipped
argument_list|,
name|paintUnclipped
argument_list|)
expr_stmt|;
if|if
condition|(
name|pe
condition|)
name|pe
operator|->
name|setSystemClip
argument_list|(
name|QRegion
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|::
name|usleep
argument_list|(
literal|1000
operator|*
name|msec
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
comment|// !Q_OS_WIN
block|}
end_function
begin_function
DECL|function|flushPaint
name|bool
name|QWidgetBackingStore
operator|::
name|flushPaint
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return
literal|false
return|;
name|int
name|delay
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_InPaintEvent
argument_list|)
condition|)
block|{
specifier|static
name|int
name|flushPaintEvent
init|=
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_FLUSH_PAINT_EVENT"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|flushPaintEvent
condition|)
return|return
literal|false
return|;
name|delay
operator|=
name|flushPaintEvent
expr_stmt|;
block|}
else|else
block|{
specifier|static
name|int
name|flushPaint
init|=
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_FLUSH_PAINT"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|flushPaint
condition|)
return|return
literal|false
return|;
name|delay
operator|=
name|flushPaint
expr_stmt|;
block|}
name|QWidgetBackingStore
operator|::
name|showYellowThing
argument_list|(
name|widget
argument_list|,
name|rgn
argument_list|,
name|delay
operator|*
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|unflushPaint
name|void
name|QWidgetBackingStore
operator|::
name|unflushPaint
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
block|{
if|if
condition|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|paintOnScreen
argument_list|()
operator|||
name|rgn
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QWidget
modifier|*
name|tlw
init|=
name|widget
operator|->
name|window
argument_list|()
decl_stmt|;
name|QTLWExtra
modifier|*
name|tlwExtra
init|=
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tlwExtra
condition|)
return|return;
specifier|const
name|QPoint
name|offset
init|=
name|widget
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
decl_stmt|;
name|qt_flush
argument_list|(
name|widget
argument_list|,
name|rgn
argument_list|,
name|tlwExtra
operator|->
name|backingStoreTracker
operator|->
name|store
argument_list|,
name|tlw
argument_list|,
name|offset
argument_list|,
literal|0
argument_list|,
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|maybeBackingStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PAINT_DEBUG
end_comment
begin_comment
comment|/*     Moves the whole rect by (dx, dy) in widget's coordinate system.     Doesn't generate any updates. */
end_comment
begin_function
DECL|function|bltRect
name|bool
name|QWidgetBackingStore
operator|::
name|bltRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
specifier|const
name|QPoint
name|pos
argument_list|(
name|tlwOffset
operator|+
name|widget
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|tlwRect
argument_list|(
name|QRect
argument_list|(
name|pos
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fullUpdatePending
operator|||
name|dirty
operator|.
name|intersects
argument_list|(
name|tlwRect
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// We don't want to scroll junk.
return|return
name|store
operator|->
name|scroll
argument_list|(
name|tlwRect
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|releaseBuffer
name|void
name|QWidgetBackingStore
operator|::
name|releaseBuffer
parameter_list|()
block|{
if|if
condition|(
name|store
condition|)
name|store
operator|->
name|resize
argument_list|(
name|QSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Prepares the window surface to paint a\ toClean region of the \a widget and     updates the BeginPaintInfo struct accordingly.      The \a toClean region might be clipped by the window surface. */
end_comment
begin_function
DECL|function|beginPaint
name|void
name|QWidgetBackingStore
operator|::
name|beginPaint
parameter_list|(
name|QRegion
modifier|&
name|toClean
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QBackingStore
modifier|*
name|backingStore
parameter_list|,
name|BeginPaintInfo
modifier|*
name|returnInfo
parameter_list|,
name|bool
name|toCleanIsInTopLevelCoordinates
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|toCleanIsInTopLevelCoordinates
argument_list|)
expr_stmt|;
comment|// Always flush repainted areas.
name|dirtyOnScreen
operator|+=
name|toClean
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_PAINT_DEBUG
name|backingStore
operator|->
name|beginPaint
argument_list|(
name|toClean
argument_list|)
expr_stmt|;
else|#
directive|else
name|returnInfo
operator|->
name|wasFlushed
operator|=
name|QWidgetBackingStore
operator|::
name|flushPaint
argument_list|(
name|tlw
argument_list|,
name|toClean
argument_list|)
expr_stmt|;
comment|// Avoid deadlock with QT_FLUSH_PAINT: the server will wait for
comment|// the BackingStore lock, so if we hold that, the server will
comment|// never release the Communication lock that we are waiting for in
comment|// sendSynchronousCommand
if|if
condition|(
operator|!
name|returnInfo
operator|->
name|wasFlushed
condition|)
name|backingStore
operator|->
name|beginPaint
argument_list|(
name|toClean
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_UNUSED
argument_list|(
name|returnInfo
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endPaint
name|void
name|QWidgetBackingStore
operator|::
name|endPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|cleaned
parameter_list|,
name|QBackingStore
modifier|*
name|backingStore
parameter_list|,
name|BeginPaintInfo
modifier|*
name|beginPaintInfo
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_PAINT_DEBUG
if|if
condition|(
operator|!
name|beginPaintInfo
operator|->
name|wasFlushed
condition|)
name|backingStore
operator|->
name|endPaint
argument_list|()
expr_stmt|;
else|else
name|QWidgetBackingStore
operator|::
name|unflushPaint
argument_list|(
name|tlw
argument_list|,
name|cleaned
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|beginPaintInfo
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|cleaned
argument_list|)
expr_stmt|;
name|backingStore
operator|->
name|endPaint
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|flush
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the region (in top-level coordinates) that needs repaint and/or flush.      If the widget is non-zero, only the dirty region for the widget is returned     and the region will be in widget coordinates. */
end_comment
begin_function
DECL|function|dirtyRegion
name|QRegion
name|QWidgetBackingStore
operator|::
name|dirtyRegion
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
specifier|const
name|bool
name|widgetDirty
init|=
name|widget
operator|&&
name|widget
operator|!=
name|tlw
decl_stmt|;
specifier|const
name|QRect
name|tlwRect
argument_list|(
name|topLevelRect
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|surfaceGeometry
argument_list|(
name|tlwRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|store
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fullUpdatePending
operator|||
operator|(
name|surfaceGeometry
operator|!=
name|tlwRect
operator|&&
name|surfaceGeometry
operator|.
name|size
argument_list|()
operator|!=
name|tlwRect
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|widgetDirty
condition|)
block|{
specifier|const
name|QRect
name|dirtyTlwRect
init|=
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|tlwRect
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|offset
argument_list|(
name|widget
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|dirtyWidgetRect
argument_list|(
name|dirtyTlwRect
operator|&
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|translated
argument_list|(
name|offset
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|dirtyWidgetRect
operator|.
name|translated
argument_list|(
operator|-
name|offset
argument_list|)
return|;
block|}
return|return
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|tlwRect
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
comment|// Calculate the region that needs repaint.
name|QRegion
name|r
argument_list|(
name|dirty
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirtyWidgets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|dirtyWidgets
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|widgetDirty
operator|&&
name|w
operator|!=
name|widget
operator|&&
operator|!
name|widget
operator|->
name|isAncestorOf
argument_list|(
name|w
argument_list|)
condition|)
continue|continue;
name|r
operator|+=
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
operator|.
name|translated
argument_list|(
name|w
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Append the region that needs flush.
name|r
operator|+=
name|dirtyOnScreen
expr_stmt|;
if|if
condition|(
name|dirtyOnScreenWidgets
condition|)
block|{
comment|// Only in use with native child widgets.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirtyOnScreenWidgets
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|dirtyOnScreenWidgets
operator|->
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|widgetDirty
operator|&&
name|w
operator|!=
name|widget
operator|&&
operator|!
name|widget
operator|->
name|isAncestorOf
argument_list|(
name|w
argument_list|)
condition|)
continue|continue;
name|QWidgetPrivate
modifier|*
name|wd
init|=
name|w
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|wd
operator|->
name|needsFlush
argument_list|)
expr_stmt|;
name|r
operator|+=
name|wd
operator|->
name|needsFlush
operator|->
name|translated
argument_list|(
name|w
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|widgetDirty
condition|)
block|{
comment|// Intersect with the widget geometry and translate to its coordinates.
specifier|const
name|QPoint
name|offset
argument_list|(
name|widget
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|&=
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|translated
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|r
operator|.
name|translate
argument_list|(
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the static content inside the \a parent if non-zero; otherwise the static content     for the entire backing store is returned. The content will be clipped to \a withinClipRect     if non-empty. */
end_comment
begin_function
DECL|function|staticContents
name|QRegion
name|QWidgetBackingStore
operator|::
name|staticContents
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QRect
modifier|&
name|withinClipRect
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|parent
operator|&&
name|tlw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_StaticContents
argument_list|)
condition|)
block|{
specifier|const
name|QSize
name|surfaceGeometry
argument_list|(
name|store
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|surfaceRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|surfaceGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|surfaceGeometry
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|withinClipRect
operator|.
name|isEmpty
argument_list|()
condition|)
name|surfaceRect
operator|&=
name|withinClipRect
expr_stmt|;
return|return
name|QRegion
argument_list|(
name|surfaceRect
argument_list|)
return|;
block|}
name|QRegion
name|region
decl_stmt|;
if|if
condition|(
name|parent
operator|&&
name|parent
operator|->
name|d_func
argument_list|()
operator|->
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|region
return|;
specifier|const
name|bool
name|clipToRect
init|=
operator|!
name|withinClipRect
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
specifier|const
name|int
name|count
init|=
name|staticWidgets
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|staticWidgets
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QWidgetPrivate
modifier|*
name|wd
init|=
name|w
operator|->
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|wd
operator|->
name|isOpaque
operator|||
operator|!
name|wd
operator|->
name|extra
operator|||
name|wd
operator|->
name|extra
operator|->
name|staticContentsSize
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|w
operator|->
name|isVisible
argument_list|()
operator|||
operator|(
name|parent
operator|&&
operator|!
name|parent
operator|->
name|isAncestorOf
argument_list|(
name|w
argument_list|)
operator|)
condition|)
block|{
continue|continue;
block|}
name|QRect
name|rect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|wd
operator|->
name|extra
operator|->
name|staticContentsSize
operator|.
name|width
argument_list|()
argument_list|,
name|wd
operator|->
name|extra
operator|->
name|staticContentsSize
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|offset
init|=
name|w
operator|->
name|mapTo
argument_list|(
name|parent
condition|?
name|parent
else|:
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clipToRect
condition|)
name|rect
operator|&=
name|withinClipRect
operator|.
name|translated
argument_list|(
operator|-
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|rect
operator|&=
name|wd
operator|->
name|clipRect
argument_list|()
expr_stmt|;
if|if
condition|(
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|QRegion
name|visible
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|wd
operator|->
name|clipToEffectiveMask
argument_list|(
name|visible
argument_list|)
expr_stmt|;
if|if
condition|(
name|visible
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|wd
operator|->
name|subtractOpaqueSiblings
argument_list|(
name|visible
argument_list|,
literal|0
argument_list|,
comment|/*alsoNonOpaque=*/
literal|true
argument_list|)
expr_stmt|;
name|visible
operator|.
name|translate
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|region
operator|+=
name|visible
expr_stmt|;
block|}
return|return
name|region
return|;
block|}
end_function
begin_function
DECL|function|sendUpdateRequest
name|void
name|QWidgetBackingStore
operator|::
name|sendUpdateRequest
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|UpdateTime
name|updateTime
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return;
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
comment|// Having every repaint() leading to a sync/flush is bad as it causes
comment|// compositing and waiting for vsync each and every time. Change to
comment|// UpdateLater, except for approx. once per frame to prevent starvation in
comment|// case the control does not get back to the event loop.
name|QWidget
modifier|*
name|w
init|=
name|widget
operator|->
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
name|updateTime
operator|==
name|UpdateNow
operator|&&
name|w
operator|&&
name|w
operator|->
name|windowHandle
argument_list|()
operator|&&
name|QWindowPrivate
operator|::
name|get
argument_list|(
name|w
operator|->
name|windowHandle
argument_list|()
argument_list|)
operator|->
name|compositing
condition|)
block|{
name|int
name|refresh
init|=
literal|60
decl_stmt|;
name|QScreen
modifier|*
name|ws
init|=
name|w
operator|->
name|windowHandle
argument_list|()
operator|->
name|screen
argument_list|()
decl_stmt|;
if|if
condition|(
name|ws
condition|)
name|refresh
operator|=
name|ws
operator|->
name|refreshRate
argument_list|()
expr_stmt|;
name|QWindowPrivate
modifier|*
name|wd
init|=
name|QWindowPrivate
operator|::
name|get
argument_list|(
name|w
operator|->
name|windowHandle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|wd
operator|->
name|lastComposeTime
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|qint64
name|elapsed
init|=
name|wd
operator|->
name|lastComposeTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
if|if
condition|(
name|elapsed
operator|<=
name|qint64
argument_list|(
literal|1000.0f
operator|/
name|refresh
argument_list|)
condition|)
name|updateTime
operator|=
name|UpdateLater
expr_stmt|;
block|}
block|}
endif|#
directive|endif
switch|switch
condition|(
name|updateTime
condition|)
block|{
case|case
name|UpdateLater
case|:
name|updateRequestSent
operator|=
literal|true
expr_stmt|;
name|QApplication
operator|::
name|postEvent
argument_list|(
name|widget
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|UpdateRequest
argument_list|)
argument_list|,
name|Qt
operator|::
name|LowEventPriority
argument_list|)
expr_stmt|;
break|break;
case|case
name|UpdateNow
case|:
block|{
name|QEvent
name|event
argument_list|(
name|QEvent
operator|::
name|UpdateRequest
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     Marks the region of the widget as dirty (if not already marked as dirty) and     posts an UpdateRequest event to the top-level widget (if not already posted).      If updateTime is UpdateNow, the event is sent immediately instead of posted.      If bufferState is BufferInvalid, all widgets intersecting with the region will be dirty.      If the widget paints directly on screen, the event is sent to the widget     instead of the top-level widget, and bufferState is completely ignored.      ### Qt 4.6: Merge into a template function (after MSVC isn't supported anymore). */
end_comment
begin_function
DECL|function|markDirty
name|void
name|QWidgetBackingStore
operator|::
name|markDirty
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
name|UpdateTime
name|updateTime
parameter_list|,
name|BufferState
name|bufferState
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|extra
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|topextra
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|topextra
operator|->
name|inTopLevelResize
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|widget
operator|->
name|isVisible
argument_list|()
operator|&&
name|widget
operator|->
name|updatesEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|widget
operator|->
name|window
argument_list|()
operator|==
name|tlw
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|rgn
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSEFFECT
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateGraphicsEffectsRecursively
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_GRAPHICSEFFECT
if|if
condition|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|paintOnScreen
argument_list|()
condition|)
block|{
if|if
condition|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
operator|=
name|rgn
expr_stmt|;
name|sendUpdateRequest
argument_list|(
name|widget
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|qt_region_strictContains
argument_list|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
argument_list|,
name|widget
operator|->
name|rect
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|updateTime
operator|==
name|UpdateNow
condition|)
name|sendUpdateRequest
argument_list|(
name|widget
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
comment|// Already dirty.
block|}
specifier|const
name|bool
name|eventAlreadyPosted
init|=
operator|!
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
operator|+=
name|rgn
expr_stmt|;
if|if
condition|(
operator|!
name|eventAlreadyPosted
operator|||
name|updateTime
operator|==
name|UpdateNow
condition|)
name|sendUpdateRequest
argument_list|(
name|widget
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//### FIXME fullUpdatePending seems to be always false????
if|if
condition|(
name|fullUpdatePending
condition|)
block|{
if|if
condition|(
name|updateTime
operator|==
name|UpdateNow
condition|)
name|sendUpdateRequest
argument_list|(
name|tlw
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|QPoint
name|offset
init|=
name|widget
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWidgetPrivate
operator|::
name|get
argument_list|(
name|widget
argument_list|)
operator|->
name|renderToTexture
condition|)
block|{
if|if
condition|(
operator|!
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|inDirtyList
condition|)
name|addDirtyRenderToTextureWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|updateRequestSent
operator|||
name|updateTime
operator|==
name|UpdateNow
condition|)
name|sendUpdateRequest
argument_list|(
name|tlw
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|QRect
name|widgetRect
init|=
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|effectiveRectFor
argument_list|(
name|widget
operator|->
name|rect
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|qt_region_strictContains
argument_list|(
name|dirty
argument_list|,
name|widgetRect
operator|.
name|translated
argument_list|(
name|offset
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|updateTime
operator|==
name|UpdateNow
condition|)
name|sendUpdateRequest
argument_list|(
name|tlw
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
comment|// Already dirty.
block|}
if|if
condition|(
name|bufferState
operator|==
name|BufferInvalid
condition|)
block|{
specifier|const
name|bool
name|eventAlreadyPosted
init|=
operator|!
name|dirty
operator|.
name|isEmpty
argument_list|()
operator|||
name|updateRequestSent
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSEFFECT
if|if
condition|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|graphicsEffect
condition|)
name|dirty
operator|+=
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|effectiveRectFor
argument_list|(
name|rgn
operator|.
name|boundingRect
argument_list|()
argument_list|)
operator|.
name|translated
argument_list|(
name|offset
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
comment|//QT_NO_GRAPHICSEFFECT
name|dirty
operator|+=
name|rgn
operator|.
name|translated
argument_list|(
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|eventAlreadyPosted
operator|||
name|updateTime
operator|==
name|UpdateNow
condition|)
name|sendUpdateRequest
argument_list|(
name|tlw
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|dirtyWidgets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addDirtyWidget
argument_list|(
name|widget
argument_list|,
name|rgn
argument_list|)
expr_stmt|;
name|sendUpdateRequest
argument_list|(
name|tlw
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|inDirtyList
condition|)
block|{
if|if
condition|(
operator|!
name|qt_region_strictContains
argument_list|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
argument_list|,
name|widgetRect
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSEFFECT
if|if
condition|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|graphicsEffect
condition|)
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
operator|+=
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|effectiveRectFor
argument_list|(
name|rgn
operator|.
name|boundingRect
argument_list|()
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
comment|//QT_NO_GRAPHICSEFFECT
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
operator|+=
name|rgn
expr_stmt|;
block|}
block|}
else|else
block|{
name|addDirtyWidget
argument_list|(
name|widget
argument_list|,
name|rgn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateTime
operator|==
name|UpdateNow
condition|)
name|sendUpdateRequest
argument_list|(
name|tlw
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This function is equivalent to calling markDirty(QRegion(rect), ...), but     is more efficient as it eliminates QRegion operations/allocations and can     use the rect more precisely for additional cut-offs.      ### Qt 4.6: Merge into a template function (after MSVC isn't supported anymore). */
end_comment
begin_function
DECL|function|markDirty
name|void
name|QWidgetBackingStore
operator|::
name|markDirty
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
name|UpdateTime
name|updateTime
parameter_list|,
name|BufferState
name|bufferState
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|extra
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|topextra
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|topextra
operator|->
name|inTopLevelResize
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|widget
operator|->
name|isVisible
argument_list|()
operator|&&
name|widget
operator|->
name|updatesEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|widget
operator|->
name|window
argument_list|()
operator|==
name|tlw
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|rect
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSEFFECT
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateGraphicsEffectsRecursively
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_GRAPHICSEFFECT
if|if
condition|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|paintOnScreen
argument_list|()
condition|)
block|{
if|if
condition|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
operator|=
name|QRegion
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|sendUpdateRequest
argument_list|(
name|widget
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|qt_region_strictContains
argument_list|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
argument_list|,
name|rect
argument_list|)
condition|)
block|{
if|if
condition|(
name|updateTime
operator|==
name|UpdateNow
condition|)
name|sendUpdateRequest
argument_list|(
name|widget
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
comment|// Already dirty.
block|}
specifier|const
name|bool
name|eventAlreadyPosted
init|=
operator|!
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
operator|+=
name|rect
expr_stmt|;
if|if
condition|(
operator|!
name|eventAlreadyPosted
operator|||
name|updateTime
operator|==
name|UpdateNow
condition|)
name|sendUpdateRequest
argument_list|(
name|widget
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|fullUpdatePending
condition|)
block|{
if|if
condition|(
name|updateTime
operator|==
name|UpdateNow
condition|)
name|sendUpdateRequest
argument_list|(
name|tlw
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|QWidgetPrivate
operator|::
name|get
argument_list|(
name|widget
argument_list|)
operator|->
name|renderToTexture
condition|)
block|{
if|if
condition|(
operator|!
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|inDirtyList
condition|)
name|addDirtyRenderToTextureWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|updateRequestSent
operator|||
name|updateTime
operator|==
name|UpdateNow
condition|)
name|sendUpdateRequest
argument_list|(
name|tlw
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|QRect
name|widgetRect
init|=
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|effectiveRectFor
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|QRect
name|translatedRect
init|=
name|widgetRect
decl_stmt|;
if|if
condition|(
name|widget
operator|!=
name|tlw
condition|)
name|translatedRect
operator|.
name|translate
argument_list|(
name|widget
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Graphics effects may exceed window size, clamp.
name|translatedRect
operator|=
name|translatedRect
operator|.
name|intersected
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|tlw
operator|->
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_region_strictContains
argument_list|(
name|dirty
argument_list|,
name|translatedRect
argument_list|)
condition|)
block|{
if|if
condition|(
name|updateTime
operator|==
name|UpdateNow
condition|)
name|sendUpdateRequest
argument_list|(
name|tlw
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
comment|// Already dirty
block|}
if|if
condition|(
name|bufferState
operator|==
name|BufferInvalid
condition|)
block|{
specifier|const
name|bool
name|eventAlreadyPosted
init|=
operator|!
name|dirty
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|dirty
operator|+=
name|translatedRect
expr_stmt|;
if|if
condition|(
operator|!
name|eventAlreadyPosted
operator|||
name|updateTime
operator|==
name|UpdateNow
condition|)
name|sendUpdateRequest
argument_list|(
name|tlw
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|dirtyWidgets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addDirtyWidget
argument_list|(
name|widget
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|sendUpdateRequest
argument_list|(
name|tlw
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|inDirtyList
condition|)
block|{
if|if
condition|(
operator|!
name|qt_region_strictContains
argument_list|(
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
argument_list|,
name|widgetRect
argument_list|)
condition|)
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|dirty
operator|+=
name|widgetRect
expr_stmt|;
block|}
else|else
block|{
name|addDirtyWidget
argument_list|(
name|widget
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateTime
operator|==
name|UpdateNow
condition|)
name|sendUpdateRequest
argument_list|(
name|tlw
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Marks the \a region of the \a widget as dirty on screen. The \a region will be copied from     the backing store to the \a widget's native parent next time flush() is called.      Paint on screen widgets are ignored. */
end_comment
begin_function
DECL|function|markDirtyOnScreen
name|void
name|QWidgetBackingStore
operator|::
name|markDirtyOnScreen
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|topLevelOffset
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
operator|||
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|paintOnScreen
argument_list|()
operator|||
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|#
directive|if
name|defined
argument_list|(
name|Q_DEAD_CODE_FROM_QT4_MAC
argument_list|)
if|if
condition|(
operator|!
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_InPaintEvent
argument_list|)
condition|)
name|dirtyOnScreen
operator|+=
name|region
operator|.
name|translated
argument_list|(
name|topLevelOffset
argument_list|)
expr_stmt|;
return|return;
endif|#
directive|endif
comment|// Top-level.
if|if
condition|(
name|widget
operator|==
name|tlw
condition|)
block|{
if|if
condition|(
operator|!
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_InPaintEvent
argument_list|)
condition|)
name|dirtyOnScreen
operator|+=
name|region
expr_stmt|;
return|return;
block|}
comment|// Alien widgets.
if|if
condition|(
operator|!
name|widget
operator|->
name|internalWinId
argument_list|()
operator|&&
operator|!
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|nativeParent
init|=
name|widget
operator|->
name|nativeParentWidget
argument_list|()
decl_stmt|;
comment|// Alien widgets with the top-level as the native parent (common case).
if|if
condition|(
name|nativeParent
operator|==
name|tlw
condition|)
block|{
if|if
condition|(
operator|!
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_InPaintEvent
argument_list|)
condition|)
name|dirtyOnScreen
operator|+=
name|region
operator|.
name|translated
argument_list|(
name|topLevelOffset
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Alien widgets with native parent != tlw.
name|QWidgetPrivate
modifier|*
name|nativeParentPrivate
init|=
name|nativeParent
operator|->
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nativeParentPrivate
operator|->
name|needsFlush
condition|)
name|nativeParentPrivate
operator|->
name|needsFlush
operator|=
operator|new
name|QRegion
expr_stmt|;
specifier|const
name|QPoint
name|nativeParentOffset
init|=
name|widget
operator|->
name|mapTo
argument_list|(
name|nativeParent
argument_list|,
name|QPoint
argument_list|()
argument_list|)
decl_stmt|;
operator|*
name|nativeParentPrivate
operator|->
name|needsFlush
operator|+=
name|region
operator|.
name|translated
argument_list|(
name|nativeParentOffset
argument_list|)
expr_stmt|;
name|appendDirtyOnScreenWidget
argument_list|(
name|nativeParent
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Native child widgets.
name|QWidgetPrivate
modifier|*
name|widgetPrivate
init|=
name|widget
operator|->
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|widgetPrivate
operator|->
name|needsFlush
condition|)
name|widgetPrivate
operator|->
name|needsFlush
operator|=
operator|new
name|QRegion
expr_stmt|;
operator|*
name|widgetPrivate
operator|->
name|needsFlush
operator|+=
name|region
expr_stmt|;
name|appendDirtyOnScreenWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeDirtyWidget
name|void
name|QWidgetBackingStore
operator|::
name|removeDirtyWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
operator|!
name|w
condition|)
return|return;
name|dirtyWidgetsRemoveAll
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|dirtyOnScreenWidgetsRemoveAll
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|dirtyRenderToTextureWidgets
operator|.
name|removeAll
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|resetWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|QWidgetPrivate
modifier|*
name|wd
init|=
name|w
operator|->
name|d_func
argument_list|()
decl_stmt|;
specifier|const
name|int
name|n
init|=
name|wd
operator|->
name|children
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|child
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|wd
operator|->
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|removeDirtyWidget
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateLists
name|void
name|QWidgetBackingStore
operator|::
name|updateLists
parameter_list|(
name|QWidget
modifier|*
name|cur
parameter_list|)
block|{
if|if
condition|(
operator|!
name|cur
condition|)
return|return;
name|QList
argument_list|<
name|QObject
modifier|*
argument_list|>
name|children
init|=
name|cur
operator|->
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|child
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|child
condition|)
continue|continue;
name|updateLists
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cur
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_StaticContents
argument_list|)
condition|)
name|addStaticWidget
argument_list|(
name|cur
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QWidgetBackingStore
name|QWidgetBackingStore
operator|::
name|QWidgetBackingStore
parameter_list|(
name|QWidget
modifier|*
name|topLevel
parameter_list|)
member_init_list|:
name|tlw
argument_list|(
name|topLevel
argument_list|)
member_init_list|,
name|dirtyOnScreenWidgets
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|fullUpdatePending
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|updateRequestSent
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|textureListWatcher
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|perfFrames
argument_list|(
literal|0
argument_list|)
block|{
name|store
operator|=
name|tlw
operator|->
name|backingStore
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|store
argument_list|)
expr_stmt|;
comment|// Ensure all existing subsurfaces and static widgets are added to their respective lists.
name|updateLists
argument_list|(
name|topLevel
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWidgetBackingStore
name|QWidgetBackingStore
operator|::
name|~
name|QWidgetBackingStore
parameter_list|()
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|dirtyWidgets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c
control|)
name|resetWidget
argument_list|(
name|dirtyWidgets
operator|.
name|at
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|dirtyRenderToTextureWidgets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c
control|)
name|resetWidget
argument_list|(
name|dirtyRenderToTextureWidgets
operator|.
name|at
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|dirtyOnScreenWidgets
expr_stmt|;
block|}
end_destructor
begin_comment
comment|//parent's coordinates; move whole rect; update parent and widget
end_comment
begin_comment
comment|//assume the screen blt has already been done, so we don't need to refresh that part
end_comment
begin_function
DECL|function|moveRect
name|void
name|QWidgetPrivate
operator|::
name|moveRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isVisible
argument_list|()
operator|||
operator|(
name|dx
operator|==
literal|0
operator|&&
name|dy
operator|==
literal|0
operator|)
condition|)
return|return;
name|QWidget
modifier|*
name|tlw
init|=
name|q
operator|->
name|window
argument_list|()
decl_stmt|;
name|QTLWExtra
modifier|*
name|x
init|=
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|->
name|inTopLevelResize
condition|)
return|return;
specifier|static
specifier|const
name|bool
name|accelEnv
init|=
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_NO_FAST_MOVE"
argument_list|)
operator|==
literal|0
decl_stmt|;
name|QWidget
modifier|*
name|pw
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
name|QPoint
name|toplevelOffset
init|=
name|pw
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
decl_stmt|;
name|QWidgetPrivate
modifier|*
name|pd
init|=
name|pw
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|QRect
name|clipR
argument_list|(
name|pd
operator|->
name|clipRect
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|newRect
argument_list|(
name|rect
operator|.
name|translated
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
argument_list|)
decl_stmt|;
name|QRect
name|destRect
init|=
name|rect
operator|.
name|intersected
argument_list|(
name|clipR
argument_list|)
decl_stmt|;
if|if
condition|(
name|destRect
operator|.
name|isValid
argument_list|()
condition|)
name|destRect
operator|=
name|destRect
operator|.
name|translated
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
operator|.
name|intersected
argument_list|(
name|clipR
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|sourceRect
argument_list|(
name|destRect
operator|.
name|translated
argument_list|(
operator|-
name|dx
argument_list|,
operator|-
name|dy
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|parentRect
argument_list|(
name|rect
operator|&
name|clipR
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|nativeWithTextureChild
init|=
name|textureChildSeen
operator|&&
name|q
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
name|bool
name|accelerateMove
init|=
name|accelEnv
operator|&&
name|isOpaque
operator|&&
operator|!
name|nativeWithTextureChild
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
comment|// No accelerate move for proxy widgets.
operator|&&
operator|!
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|proxyWidget
endif|#
directive|endif
operator|&&
operator|!
name|isOverlapped
argument_list|(
name|sourceRect
argument_list|)
operator|&&
operator|!
name|isOverlapped
argument_list|(
name|destRect
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|accelerateMove
condition|)
block|{
name|QRegion
name|parentR
argument_list|(
name|effectiveRectFor
argument_list|(
name|parentRect
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|extra
operator|||
operator|!
name|extra
operator|->
name|hasMask
condition|)
block|{
name|parentR
operator|-=
name|newRect
expr_stmt|;
block|}
else|else
block|{
comment|// invalidateBuffer() excludes anything outside the mask
name|parentR
operator|+=
name|newRect
operator|&
name|clipR
expr_stmt|;
block|}
name|pd
operator|->
name|invalidateBuffer
argument_list|(
name|parentR
argument_list|)
expr_stmt|;
name|invalidateBuffer
argument_list|(
operator|(
name|newRect
operator|&
name|clipR
operator|)
operator|.
name|translated
argument_list|(
operator|-
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWidgetBackingStore
modifier|*
name|wbs
init|=
name|x
operator|->
name|backingStoreTracker
operator|.
name|data
argument_list|()
decl_stmt|;
name|QRegion
name|childExpose
argument_list|(
name|newRect
operator|&
name|clipR
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceRect
operator|.
name|isValid
argument_list|()
operator|&&
name|wbs
operator|->
name|bltRect
argument_list|(
name|sourceRect
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|pw
argument_list|)
condition|)
name|childExpose
operator|-=
name|destRect
expr_stmt|;
if|if
condition|(
operator|!
name|pw
operator|->
name|updatesEnabled
argument_list|()
condition|)
return|return;
specifier|const
name|bool
name|childUpdatesEnabled
init|=
name|q
operator|->
name|updatesEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|childUpdatesEnabled
operator|&&
operator|!
name|childExpose
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|childExpose
operator|.
name|translate
argument_list|(
operator|-
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|wbs
operator|->
name|markDirty
argument_list|(
name|childExpose
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|isMoved
operator|=
literal|true
expr_stmt|;
block|}
name|QRegion
name|parentExpose
argument_list|(
name|parentRect
argument_list|)
decl_stmt|;
name|parentExpose
operator|-=
name|newRect
expr_stmt|;
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|hasMask
condition|)
name|parentExpose
operator|+=
name|QRegion
argument_list|(
name|newRect
argument_list|)
operator|-
name|extra
operator|->
name|mask
operator|.
name|translated
argument_list|(
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parentExpose
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wbs
operator|->
name|markDirty
argument_list|(
name|parentExpose
argument_list|,
name|pw
argument_list|)
expr_stmt|;
name|pd
operator|->
name|isMoved
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|childUpdatesEnabled
condition|)
block|{
name|QRegion
name|needsFlush
argument_list|(
name|sourceRect
argument_list|)
decl_stmt|;
name|needsFlush
operator|+=
name|destRect
expr_stmt|;
name|wbs
operator|->
name|markDirtyOnScreen
argument_list|(
name|needsFlush
argument_list|,
name|pw
argument_list|,
name|toplevelOffset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|//widget's coordinates; scroll within rect;  only update widget
end_comment
begin_function
DECL|function|scrollRect
name|void
name|QWidgetPrivate
operator|::
name|scrollRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|tlw
init|=
name|q
operator|->
name|window
argument_list|()
decl_stmt|;
name|QTLWExtra
modifier|*
name|x
init|=
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|->
name|inTopLevelResize
condition|)
return|return;
name|QWidgetBackingStore
modifier|*
name|wbs
init|=
name|x
operator|->
name|backingStoreTracker
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|wbs
condition|)
return|return;
specifier|static
specifier|const
name|bool
name|accelEnv
init|=
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_NO_FAST_SCROLL"
argument_list|)
operator|==
literal|0
decl_stmt|;
name|QRect
name|scrollRect
init|=
name|rect
operator|&
name|clipRect
argument_list|()
decl_stmt|;
name|bool
name|overlapped
init|=
literal|false
decl_stmt|;
name|bool
name|accelerateScroll
init|=
name|accelEnv
operator|&&
name|isOpaque
operator|&&
operator|!
name|q_func
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_InPaintEvent
argument_list|)
operator|&&
operator|!
operator|(
name|overlapped
operator|=
name|isOverlapped
argument_list|(
name|scrollRect
operator|.
name|translated
argument_list|(
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|accelerateScroll
condition|)
block|{
if|if
condition|(
name|overlapped
condition|)
block|{
name|QRegion
name|region
argument_list|(
name|scrollRect
argument_list|)
decl_stmt|;
name|subtractOpaqueSiblings
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|invalidateBuffer
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|invalidateBuffer
argument_list|(
name|scrollRect
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|QPoint
name|toplevelOffset
init|=
name|q
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|destRect
init|=
name|scrollRect
operator|.
name|translated
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
operator|&
name|scrollRect
decl_stmt|;
specifier|const
name|QRect
name|sourceRect
init|=
name|destRect
operator|.
name|translated
argument_list|(
operator|-
name|dx
argument_list|,
operator|-
name|dy
argument_list|)
decl_stmt|;
name|QRegion
name|childExpose
argument_list|(
name|scrollRect
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|wbs
operator|->
name|bltRect
argument_list|(
name|sourceRect
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|q
argument_list|)
condition|)
name|childExpose
operator|-=
name|destRect
expr_stmt|;
block|}
if|if
condition|(
name|inDirtyList
condition|)
block|{
if|if
condition|(
name|rect
operator|==
name|q
operator|->
name|rect
argument_list|()
condition|)
block|{
name|dirty
operator|.
name|translate
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRegion
name|dirtyScrollRegion
init|=
name|dirty
operator|.
name|intersected
argument_list|(
name|scrollRect
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dirtyScrollRegion
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dirty
operator|-=
name|dirtyScrollRegion
expr_stmt|;
name|dirtyScrollRegion
operator|.
name|translate
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
name|dirty
operator|+=
name|dirtyScrollRegion
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|q
operator|->
name|updatesEnabled
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|childExpose
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wbs
operator|->
name|markDirty
argument_list|(
name|childExpose
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|isScrolled
operator|=
literal|true
expr_stmt|;
block|}
comment|// Instead of using native scroll-on-screen, we copy from
comment|// backingstore, giving only one screen update for each
comment|// scroll, and a solid appearance
name|wbs
operator|->
name|markDirtyOnScreen
argument_list|(
name|destRect
argument_list|,
name|q
argument_list|,
name|toplevelOffset
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
end_ifndef
begin_function
DECL|function|findTextureWidgetsRecursively
specifier|static
name|void
name|findTextureWidgetsRecursively
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QPlatformTextureList
modifier|*
name|widgetTextures
parameter_list|,
name|QVector
argument_list|<
name|QWidget
modifier|*
argument_list|>
modifier|*
name|nativeChildren
parameter_list|)
block|{
name|QWidgetPrivate
modifier|*
name|wd
init|=
name|QWidgetPrivate
operator|::
name|get
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|wd
operator|->
name|renderToTexture
condition|)
block|{
name|QPlatformTextureList
operator|::
name|Flags
name|flags
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_AlwaysStackOnTop
argument_list|)
condition|)
name|flags
operator||=
name|QPlatformTextureList
operator|::
name|StacksOnTop
expr_stmt|;
specifier|const
name|QRect
name|rect
argument_list|(
name|widget
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
argument_list|,
name|widget
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|widgetTextures
operator|->
name|appendTexture
argument_list|(
name|widget
argument_list|,
name|wd
operator|->
name|textureId
argument_list|()
argument_list|,
name|rect
argument_list|,
name|wd
operator|->
name|clipRect
argument_list|()
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wd
operator|->
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|wd
operator|->
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
comment|// Stop at native widgets but store them. Stop at hidden widgets too.
if|if
condition|(
name|w
operator|&&
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|&&
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
name|nativeChildren
operator|->
name|append
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|&&
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
operator|&&
operator|!
name|w
operator|->
name|isHidden
argument_list|()
operator|&&
name|QWidgetPrivate
operator|::
name|get
argument_list|(
name|w
argument_list|)
operator|->
name|textureChildSeen
condition|)
name|findTextureWidgetsRecursively
argument_list|(
name|tlw
argument_list|,
name|w
argument_list|,
name|widgetTextures
argument_list|,
name|nativeChildren
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|findAllTextureWidgetsRecursively
specifier|static
name|void
name|findAllTextureWidgetsRecursively
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
comment|// textureChildSeen does not take native child widgets into account and that's good.
if|if
condition|(
name|QWidgetPrivate
operator|::
name|get
argument_list|(
name|widget
argument_list|)
operator|->
name|textureChildSeen
condition|)
block|{
name|QVector
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|nativeChildren
decl_stmt|;
name|QScopedPointer
argument_list|<
name|QPlatformTextureList
argument_list|>
name|tl
argument_list|(
operator|new
name|QPlatformTextureList
argument_list|)
decl_stmt|;
comment|// Look for texture widgets (incl. widget itself) from 'widget' down,
comment|// but skip subtrees with a parent of a native child widget.
name|findTextureWidgetsRecursively
argument_list|(
name|tlw
argument_list|,
name|widget
argument_list|,
name|tl
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|nativeChildren
argument_list|)
expr_stmt|;
comment|// tl may be empty regardless of textureChildSeen if we have native or hidden children.
if|if
condition|(
operator|!
name|tl
operator|->
name|isEmpty
argument_list|()
condition|)
name|QWidgetPrivate
operator|::
name|get
argument_list|(
name|tlw
argument_list|)
operator|->
name|topData
argument_list|()
operator|->
name|widgetTextures
operator|.
name|append
argument_list|(
name|tl
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
comment|// Native child widgets, if there was any, get their own separate QPlatformTextureList.
foreach|foreach
control|(
name|QWidget
modifier|*
name|ncw
decl|,
name|nativeChildren
control|)
block|{
if|if
condition|(
name|QWidgetPrivate
operator|::
name|get
argument_list|(
name|ncw
argument_list|)
operator|->
name|textureChildSeen
condition|)
name|findAllTextureWidgetsRecursively
argument_list|(
name|tlw
argument_list|,
name|ncw
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QPlatformTextureList
argument_list|,
argument|qt_dummy_platformTextureList
argument_list|)
end_macro
begin_function
DECL|function|widgetTexturesFor
specifier|static
name|QPlatformTextureList
modifier|*
name|widgetTexturesFor
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
foreach|foreach
control|(
name|QPlatformTextureList
modifier|*
name|tl
decl|,
name|QWidgetPrivate
operator|::
name|get
argument_list|(
name|tlw
argument_list|)
operator|->
name|topData
argument_list|()
operator|->
name|widgetTextures
control|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|tl
operator|->
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tl
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|tl
operator|->
name|source
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|w
operator|->
name|internalWinId
argument_list|()
operator|&&
name|w
operator|==
name|widget
operator|)
operator|||
operator|(
operator|!
name|w
operator|->
name|internalWinId
argument_list|()
operator|&&
name|w
operator|->
name|nativeParentWidget
argument_list|()
operator|==
name|widget
operator|)
condition|)
return|return
name|tl
return|;
block|}
block|}
if|if
condition|(
name|QWidgetPrivate
operator|::
name|get
argument_list|(
name|tlw
argument_list|)
operator|->
name|textureChildSeen
condition|)
block|{
comment|// No render-to-texture widgets in the (sub-)tree due to hidden or native
comment|// children. Returning null results in using the normal backingstore flush path
comment|// without OpenGL-based compositing. This is very desirable normally. However,
comment|// some platforms cannot handle switching between the non-GL and GL paths for
comment|// their windows so it has to be opt-in.
specifier|static
name|bool
name|switchableWidgetComposition
init|=
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|platformIntegration
argument_list|()
operator|->
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|SwitchableWidgetComposition
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|switchableWidgetComposition
condition|)
return|return
name|qt_dummy_platformTextureList
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|// Watches one or more QPlatformTextureLists for changes in the lock state and
end_comment
begin_comment
comment|// triggers a backingstore sync when all the registered lists turn into
end_comment
begin_comment
comment|// unlocked state. This is essential when a custom composeAndFlush()
end_comment
begin_comment
comment|// implementation in a platform plugin is not synchronous and keeps
end_comment
begin_comment
comment|// holding on to the textures for some time even after returning from there.
end_comment
begin_constructor
DECL|function|QPlatformTextureListWatcher
name|QPlatformTextureListWatcher
operator|::
name|QPlatformTextureListWatcher
parameter_list|(
name|QWidgetBackingStore
modifier|*
name|backingStore
parameter_list|)
member_init_list|:
name|m_backingStore
argument_list|(
name|backingStore
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|watch
name|void
name|QPlatformTextureListWatcher
operator|::
name|watch
parameter_list|(
name|QPlatformTextureList
modifier|*
name|textureList
parameter_list|)
block|{
name|connect
argument_list|(
name|textureList
argument_list|,
name|SIGNAL
argument_list|(
name|locked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|onLockStatusChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m_locked
index|[
name|textureList
index|]
operator|=
name|textureList
operator|->
name|isLocked
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isLocked
name|bool
name|QPlatformTextureListWatcher
operator|::
name|isLocked
parameter_list|()
specifier|const
block|{
foreach|foreach
control|(
name|bool
name|v
decl|,
name|m_locked
control|)
block|{
if|if
condition|(
name|v
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|onLockStatusChanged
name|void
name|QPlatformTextureListWatcher
operator|::
name|onLockStatusChanged
parameter_list|(
name|bool
name|locked
parameter_list|)
block|{
name|QPlatformTextureList
modifier|*
name|tl
init|=
cast|static_cast
argument_list|<
name|QPlatformTextureList
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|m_locked
index|[
name|tl
index|]
operator|=
name|locked
expr_stmt|;
if|if
condition|(
operator|!
name|isLocked
argument_list|()
condition|)
name|m_backingStore
operator|->
name|sync
argument_list|()
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|widgetTexturesFor
specifier|static
name|QPlatformTextureList
modifier|*
name|widgetTexturesFor
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|tlw
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_OPENGL
end_comment
begin_function
DECL|function|discardSyncRequest
specifier|static
specifier|inline
name|bool
name|discardSyncRequest
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|,
name|QTLWExtra
modifier|*
name|tlwExtra
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tlw
operator|||
operator|!
name|tlwExtra
operator|||
operator|!
name|tlw
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
operator|||
operator|!
name|tlw
operator|->
name|isVisible
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Synchronizes the \a exposedRegion of the \a exposedWidget with the backing store.      If there's nothing to repaint, the area is flushed and painting does not occur;     otherwise the area is marked as dirty on screen and will be flushed right after     we are done with all painting. */
end_comment
begin_function
DECL|function|sync
name|void
name|QWidgetBackingStore
operator|::
name|sync
parameter_list|(
name|QWidget
modifier|*
name|exposedWidget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|exposedRegion
parameter_list|)
block|{
name|QTLWExtra
modifier|*
name|tlwExtra
init|=
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tlw
operator|->
name|isVisible
argument_list|()
operator|||
operator|!
name|tlwExtra
operator|||
name|tlwExtra
operator|->
name|inTopLevelResize
condition|)
return|return;
if|if
condition|(
operator|!
name|exposedWidget
operator|||
operator|!
name|exposedWidget
operator|->
name|internalWinId
argument_list|()
operator|||
operator|!
name|exposedWidget
operator|->
name|isVisible
argument_list|()
operator|||
operator|!
name|exposedWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Mapped
argument_list|)
operator|||
operator|!
name|exposedWidget
operator|->
name|updatesEnabled
argument_list|()
operator|||
name|exposedRegion
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Nothing to repaint.
if|if
condition|(
operator|!
name|isDirty
argument_list|()
operator|&&
name|store
operator|->
name|size
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qt_flush
argument_list|(
name|exposedWidget
argument_list|,
name|exposedRegion
argument_list|,
name|store
argument_list|,
name|tlw
argument_list|,
name|tlwOffset
argument_list|,
name|widgetTexturesFor
argument_list|(
name|tlw
argument_list|,
name|tlw
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|exposedWidget
operator|!=
name|tlw
condition|)
name|markDirtyOnScreen
argument_list|(
name|exposedRegion
argument_list|,
name|exposedWidget
argument_list|,
name|exposedWidget
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|markDirtyOnScreen
argument_list|(
name|exposedRegion
argument_list|,
name|exposedWidget
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|doSync
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Synchronizes the backing store, i.e. dirty areas are repainted and flushed. */
end_comment
begin_function
DECL|function|sync
name|void
name|QWidgetBackingStore
operator|::
name|sync
parameter_list|()
block|{
name|updateRequestSent
operator|=
literal|false
expr_stmt|;
name|QTLWExtra
modifier|*
name|tlwExtra
init|=
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
if|if
condition|(
name|discardSyncRequest
argument_list|(
name|tlw
argument_list|,
name|tlwExtra
argument_list|)
condition|)
block|{
comment|// If the top-level is minimized, it's not visible on the screen so we can delay the
comment|// update until it's shown again. In order to do that we must keep the dirty states.
comment|// These will be cleared when we receive the first expose after showNormal().
comment|// However, if the widget is not visible (isVisible() returns false), everything will
comment|// be invalidated once the widget is shown again, so clear all dirty states.
if|if
condition|(
operator|!
name|tlw
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|dirty
operator|=
name|QRegion
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirtyWidgets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|resetWidget
argument_list|(
name|dirtyWidgets
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|dirtyWidgets
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fullUpdatePending
operator|=
literal|false
expr_stmt|;
block|}
return|return;
block|}
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
if|if
condition|(
name|textureListWatcher
operator|&&
operator|!
name|textureListWatcher
operator|->
name|isLocked
argument_list|()
condition|)
block|{
name|textureListWatcher
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|textureListWatcher
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|tlwExtra
operator|->
name|widgetTextures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bool
name|skipSync
init|=
literal|false
decl_stmt|;
foreach|foreach
control|(
name|QPlatformTextureList
modifier|*
name|tl
decl|,
name|tlwExtra
operator|->
name|widgetTextures
control|)
block|{
if|if
condition|(
name|tl
operator|->
name|isLocked
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|textureListWatcher
condition|)
name|textureListWatcher
operator|=
operator|new
name|QPlatformTextureListWatcher
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|textureListWatcher
operator|->
name|isLocked
argument_list|()
condition|)
name|textureListWatcher
operator|->
name|watch
argument_list|(
name|tl
argument_list|)
expr_stmt|;
name|skipSync
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|skipSync
condition|)
comment|// cannot compose due to widget textures being in use
return|return;
block|}
endif|#
directive|endif
name|doSync
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doSync
name|void
name|QWidgetBackingStore
operator|::
name|doSync
parameter_list|()
block|{
specifier|const
name|bool
name|updatesDisabled
init|=
operator|!
name|tlw
operator|->
name|updatesEnabled
argument_list|()
decl_stmt|;
name|bool
name|repaintAllWidgets
init|=
literal|false
decl_stmt|;
specifier|const
name|bool
name|inTopLevelResize
init|=
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
operator|->
name|inTopLevelResize
decl_stmt|;
specifier|const
name|QRect
name|tlwRect
argument_list|(
name|topLevelRect
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|surfaceGeometry
argument_list|(
name|tlwRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|store
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|fullUpdatePending
operator|||
name|inTopLevelResize
operator|||
name|surfaceGeometry
operator|.
name|size
argument_list|()
operator|!=
name|tlwRect
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|!
name|updatesDisabled
condition|)
block|{
if|if
condition|(
name|hasStaticContents
argument_list|()
operator|&&
operator|!
name|store
operator|->
name|size
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Repaint existing dirty area and newly visible area.
specifier|const
name|QRect
name|clipRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|surfaceGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|surfaceGeometry
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QRegion
name|staticRegion
argument_list|(
name|staticContents
argument_list|(
literal|0
argument_list|,
name|clipRect
argument_list|)
argument_list|)
decl_stmt|;
name|QRegion
name|newVisible
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|tlwRect
operator|.
name|width
argument_list|()
argument_list|,
name|tlwRect
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|newVisible
operator|-=
name|staticRegion
expr_stmt|;
name|dirty
operator|+=
name|newVisible
expr_stmt|;
name|store
operator|->
name|setStaticContents
argument_list|(
name|staticRegion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Repaint everything.
name|dirty
operator|=
name|QRegion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|tlwRect
operator|.
name|width
argument_list|()
argument_list|,
name|tlwRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirtyWidgets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|resetWidget
argument_list|(
name|dirtyWidgets
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|dirtyWidgets
operator|.
name|clear
argument_list|()
expr_stmt|;
name|repaintAllWidgets
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|inTopLevelResize
operator|||
name|surfaceGeometry
operator|.
name|size
argument_list|()
operator|!=
name|tlwRect
operator|.
name|size
argument_list|()
condition|)
name|store
operator|->
name|resize
argument_list|(
name|tlwRect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|updatesDisabled
condition|)
return|return;
comment|// Contains everything that needs repaint.
name|QRegion
name|toClean
argument_list|(
name|dirty
argument_list|)
decl_stmt|;
comment|// Loop through all update() widgets and remove them from the list before they are
comment|// painted (in case someone calls update() in paintEvent). If the widget is opaque
comment|// and does not have transparent overlapping siblings, append it to the
comment|// opaqueNonOverlappedWidgets list and paint it directly without composition.
name|QVarLengthArray
argument_list|<
name|QWidget
modifier|*
argument_list|,
literal|32
argument_list|>
name|opaqueNonOverlappedWidgets
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirtyWidgets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|dirtyWidgets
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QWidgetPrivate
modifier|*
name|wd
init|=
name|w
operator|->
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|wd
operator|->
name|data
operator|.
name|in_destructor
condition|)
continue|continue;
comment|// Clip with mask() and clipRect().
name|wd
operator|->
name|dirty
operator|&=
name|wd
operator|->
name|clipRect
argument_list|()
expr_stmt|;
name|wd
operator|->
name|clipToEffectiveMask
argument_list|(
name|wd
operator|->
name|dirty
argument_list|)
expr_stmt|;
comment|// Subtract opaque siblings and children.
name|bool
name|hasDirtySiblingsAbove
init|=
literal|false
decl_stmt|;
comment|// We know for sure that the widget isn't overlapped if 'isMoved' is true.
if|if
condition|(
operator|!
name|wd
operator|->
name|isMoved
condition|)
name|wd
operator|->
name|subtractOpaqueSiblings
argument_list|(
name|wd
operator|->
name|dirty
argument_list|,
operator|&
name|hasDirtySiblingsAbove
argument_list|)
expr_stmt|;
comment|// Scrolled and moved widgets must draw all children.
if|if
condition|(
operator|!
name|wd
operator|->
name|isScrolled
operator|&&
operator|!
name|wd
operator|->
name|isMoved
condition|)
name|wd
operator|->
name|subtractOpaqueChildren
argument_list|(
name|wd
operator|->
name|dirty
argument_list|,
name|w
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|wd
operator|->
name|dirty
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resetWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|const
name|QRegion
name|widgetDirty
argument_list|(
name|w
operator|!=
name|tlw
condition|?
name|wd
operator|->
name|dirty
operator|.
name|translated
argument_list|(
name|w
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
argument_list|)
else|:
name|wd
operator|->
name|dirty
argument_list|)
decl_stmt|;
name|toClean
operator|+=
name|widgetDirty
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
if|if
condition|(
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|proxyWidget
condition|)
block|{
name|resetWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
continue|continue;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|hasDirtySiblingsAbove
operator|&&
name|wd
operator|->
name|isOpaque
operator|&&
operator|!
name|dirty
operator|.
name|intersects
argument_list|(
name|widgetDirty
operator|.
name|boundingRect
argument_list|()
argument_list|)
condition|)
block|{
name|opaqueNonOverlappedWidgets
operator|.
name|append
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resetWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|dirty
operator|+=
name|widgetDirty
expr_stmt|;
block|}
block|}
name|dirtyWidgets
operator|.
name|clear
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
comment|// Find all render-to-texture child widgets (including self).
comment|// The search is cut at native widget boundaries, meaning that each native child widget
comment|// has its own list for the subtree below it.
name|QTLWExtra
modifier|*
name|tlwExtra
init|=
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
decl_stmt|;
name|qDeleteAll
argument_list|(
name|tlwExtra
operator|->
name|widgetTextures
argument_list|)
expr_stmt|;
name|tlwExtra
operator|->
name|widgetTextures
operator|.
name|clear
argument_list|()
expr_stmt|;
name|findAllTextureWidgetsRecursively
argument_list|(
name|tlw
argument_list|,
name|tlw
argument_list|)
expr_stmt|;
name|qt_window_private
argument_list|(
name|tlw
operator|->
name|windowHandle
argument_list|()
argument_list|)
operator|->
name|compositing
operator|=
literal|false
expr_stmt|;
comment|// will get updated in qt_flush()
name|fullUpdatePending
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|toClean
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Nothing to repaint. However renderToTexture widgets are handled
comment|// specially, they are not in the regular dirty list, in order to
comment|// prevent triggering unnecessary backingstore painting when only the
comment|// OpenGL content changes. Check if we have such widgets in the special
comment|// dirty list.
name|QVarLengthArray
argument_list|<
name|QWidget
modifier|*
argument_list|,
literal|16
argument_list|>
name|paintPending
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirtyRenderToTextureWidgets
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|dirtyRenderToTextureWidgets
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|paintPending
operator|<<
name|w
expr_stmt|;
name|resetWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
name|dirtyRenderToTextureWidgets
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paintPending
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|paintPending
index|[
name|i
index|]
decl_stmt|;
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|sendPaintEvent
argument_list|(
name|w
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|npw
init|=
name|w
operator|->
name|nativeParentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|internalWinId
argument_list|()
operator|||
operator|(
name|npw
operator|&&
name|npw
operator|!=
name|tlw
operator|)
condition|)
name|markDirtyOnScreen
argument_list|(
name|w
operator|->
name|rect
argument_list|()
argument_list|,
name|w
argument_list|,
name|w
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// We might have newly exposed areas on the screen if this function was
comment|// called from sync(QWidget *, QRegion)), so we have to make sure those
comment|// are flushed. We also need to composite the renderToTexture widgets.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
foreach|foreach
control|(
name|QPlatformTextureList
modifier|*
name|tl
decl|,
name|tlwExtra
operator|->
name|widgetTextures
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tl
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|tl
operator|->
name|source
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirtyRenderToTextureWidgets
operator|.
name|contains
argument_list|(
name|w
argument_list|)
condition|)
block|{
specifier|const
name|QRect
name|rect
init|=
name|tl
operator|->
name|geometry
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// mapped to the tlw already
comment|// Set a flag to indicate that the paint event for this
comment|// render-to-texture widget must not to be optimized away.
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|renderToTextureReallyDirty
operator|=
literal|1
expr_stmt|;
name|dirty
operator|+=
name|rect
expr_stmt|;
name|toClean
operator|+=
name|rect
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirtyRenderToTextureWidgets
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|dirtyRenderToTextureWidgets
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|resetWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|npw
init|=
name|w
operator|->
name|nativeParentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|internalWinId
argument_list|()
operator|||
operator|(
name|npw
operator|&&
name|npw
operator|!=
name|tlw
operator|)
condition|)
name|markDirtyOnScreen
argument_list|(
name|w
operator|->
name|rect
argument_list|()
argument_list|,
name|w
argument_list|,
name|w
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dirtyRenderToTextureWidgets
operator|.
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
if|if
condition|(
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|proxyWidget
condition|)
block|{
name|updateStaticContentsSize
argument_list|()
expr_stmt|;
name|dirty
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|updateRequestSent
operator|=
literal|false
expr_stmt|;
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
argument_list|(
name|toClean
operator|.
name|rects
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|proxyWidget
operator|->
name|update
argument_list|(
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|BeginPaintInfo
name|beginPaintInfo
decl_stmt|;
name|beginPaint
argument_list|(
name|toClean
argument_list|,
name|tlw
argument_list|,
name|store
argument_list|,
operator|&
name|beginPaintInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|beginPaintInfo
operator|.
name|nothingToPaint
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|opaqueNonOverlappedWidgets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|resetWidget
argument_list|(
name|opaqueNonOverlappedWidgets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|dirty
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|updateRequestSent
operator|=
literal|false
expr_stmt|;
return|return;
block|}
comment|// Must do this before sending any paint events because
comment|// the size may change in the paint event.
name|updateStaticContentsSize
argument_list|()
expr_stmt|;
specifier|const
name|QRegion
name|dirtyCopy
argument_list|(
name|dirty
argument_list|)
decl_stmt|;
name|dirty
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|updateRequestSent
operator|=
literal|false
expr_stmt|;
comment|// Paint opaque non overlapped widgets.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|opaqueNonOverlappedWidgets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|opaqueNonOverlappedWidgets
index|[
name|i
index|]
decl_stmt|;
name|QWidgetPrivate
modifier|*
name|wd
init|=
name|w
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|int
name|flags
init|=
name|QWidgetPrivate
operator|::
name|DrawRecursive
decl_stmt|;
comment|// Scrolled and moved widgets must draw all children.
if|if
condition|(
operator|!
name|wd
operator|->
name|isScrolled
operator|&&
operator|!
name|wd
operator|->
name|isMoved
condition|)
name|flags
operator||=
name|QWidgetPrivate
operator|::
name|DontDrawOpaqueChildren
expr_stmt|;
if|if
condition|(
name|w
operator|==
name|tlw
condition|)
name|flags
operator||=
name|QWidgetPrivate
operator|::
name|DrawAsRoot
expr_stmt|;
name|QRegion
name|toBePainted
argument_list|(
name|wd
operator|->
name|dirty
argument_list|)
decl_stmt|;
name|resetWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|QPoint
name|offset
argument_list|(
name|tlwOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
name|tlw
condition|)
name|offset
operator|+=
name|w
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|wd
operator|->
name|drawWidget
argument_list|(
name|store
operator|->
name|paintDevice
argument_list|()
argument_list|,
name|toBePainted
argument_list|,
name|offset
argument_list|,
name|flags
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|// Paint the rest with composition.
if|if
condition|(
name|repaintAllWidgets
operator|||
operator|!
name|dirtyCopy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|int
name|flags
init|=
name|QWidgetPrivate
operator|::
name|DrawAsRoot
operator||
name|QWidgetPrivate
operator|::
name|DrawRecursive
decl_stmt|;
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|drawWidget
argument_list|(
name|store
operator|->
name|paintDevice
argument_list|()
argument_list|,
name|dirtyCopy
argument_list|,
name|tlwOffset
argument_list|,
name|flags
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|endPaint
argument_list|(
name|toClean
argument_list|,
name|store
argument_list|,
operator|&
name|beginPaintInfo
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Flushes the contents of the backing store into the top-level widget.     If the \a widget is non-zero, the content is flushed to the \a widget.     If the \a surface is non-zero, the content of the \a surface is flushed. */
end_comment
begin_function
DECL|function|flush
name|void
name|QWidgetBackingStore
operator|::
name|flush
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
specifier|const
name|bool
name|hasDirtyOnScreenWidgets
init|=
name|dirtyOnScreenWidgets
operator|&&
operator|!
name|dirtyOnScreenWidgets
operator|->
name|isEmpty
argument_list|()
decl_stmt|;
name|bool
name|flushed
init|=
literal|false
decl_stmt|;
comment|// Flush the region in dirtyOnScreen.
if|if
condition|(
operator|!
name|dirtyOnScreen
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|target
init|=
name|widget
condition|?
name|widget
else|:
name|tlw
decl_stmt|;
name|qt_flush
argument_list|(
name|target
argument_list|,
name|dirtyOnScreen
argument_list|,
name|store
argument_list|,
name|tlw
argument_list|,
name|tlwOffset
argument_list|,
name|widgetTexturesFor
argument_list|(
name|tlw
argument_list|,
name|tlw
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|dirtyOnScreen
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|flushed
operator|=
literal|true
expr_stmt|;
block|}
comment|// Render-to-texture widgets are not in dirtyOnScreen so flush if we have not done it above.
if|if
condition|(
operator|!
name|flushed
operator|&&
operator|!
name|hasDirtyOnScreenWidgets
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
if|if
condition|(
operator|!
name|tlw
operator|->
name|d_func
argument_list|()
operator|->
name|topData
argument_list|()
operator|->
name|widgetTextures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QPlatformTextureList
modifier|*
name|tl
init|=
name|widgetTexturesFor
argument_list|(
name|tlw
argument_list|,
name|tlw
argument_list|)
decl_stmt|;
if|if
condition|(
name|tl
condition|)
block|{
name|QWidget
modifier|*
name|target
init|=
name|widget
condition|?
name|widget
else|:
name|tlw
decl_stmt|;
name|qt_flush
argument_list|(
name|target
argument_list|,
name|QRegion
argument_list|()
argument_list|,
name|store
argument_list|,
name|tlw
argument_list|,
name|tlwOffset
argument_list|,
name|tl
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
if|if
condition|(
operator|!
name|hasDirtyOnScreenWidgets
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirtyOnScreenWidgets
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|dirtyOnScreenWidgets
operator|->
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QWidgetPrivate
modifier|*
name|wd
init|=
name|w
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|wd
operator|->
name|needsFlush
argument_list|)
expr_stmt|;
name|QPlatformTextureList
modifier|*
name|widgetTexturesForNative
init|=
name|wd
operator|->
name|textureChildSeen
condition|?
name|widgetTexturesFor
argument_list|(
name|tlw
argument_list|,
name|w
argument_list|)
else|:
literal|0
decl_stmt|;
name|qt_flush
argument_list|(
name|w
argument_list|,
operator|*
name|wd
operator|->
name|needsFlush
argument_list|,
name|store
argument_list|,
name|tlw
argument_list|,
name|tlwOffset
argument_list|,
name|widgetTexturesForNative
argument_list|,
name|this
argument_list|)
expr_stmt|;
operator|*
name|wd
operator|->
name|needsFlush
operator|=
name|QRegion
argument_list|()
expr_stmt|;
block|}
name|dirtyOnScreenWidgets
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|discardInvalidateBufferRequest
specifier|static
specifier|inline
name|bool
name|discardInvalidateBufferRequest
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QTLWExtra
modifier|*
name|tlwExtra
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|closingDown
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|tlwExtra
operator|||
name|tlwExtra
operator|->
name|inTopLevelResize
operator|||
operator|!
name|tlwExtra
operator|->
name|backingStore
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|widget
operator|->
name|isVisible
argument_list|()
operator|||
operator|!
name|widget
operator|->
name|updatesEnabled
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Invalidates the buffer when the widget is resized.     Static areas are never invalidated unless absolutely needed. */
end_comment
begin_function
DECL|function|invalidateBuffer_resizeHelper
name|void
name|QWidgetPrivate
operator|::
name|invalidateBuffer_resizeHelper
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|oldPos
parameter_list|,
specifier|const
name|QSize
modifier|&
name|oldSize
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|q
operator|->
name|isWindow
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|staticContents
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_StaticContents
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|sizeDecreased
init|=
operator|(
name|data
operator|.
name|crect
operator|.
name|width
argument_list|()
operator|<
name|oldSize
operator|.
name|width
argument_list|()
operator|)
operator|||
operator|(
name|data
operator|.
name|crect
operator|.
name|height
argument_list|()
operator|<
name|oldSize
operator|.
name|height
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|QPoint
name|offset
argument_list|(
name|data
operator|.
name|crect
operator|.
name|x
argument_list|()
operator|-
name|oldPos
operator|.
name|x
argument_list|()
argument_list|,
name|data
operator|.
name|crect
operator|.
name|y
argument_list|()
operator|-
name|oldPos
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|parentAreaExposed
init|=
operator|!
name|offset
operator|.
name|isNull
argument_list|()
operator|||
name|sizeDecreased
decl_stmt|;
specifier|const
name|QRect
name|newWidgetRect
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|oldWidgetRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|oldSize
operator|.
name|width
argument_list|()
argument_list|,
name|oldSize
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|staticContents
operator|||
name|graphicsEffect
condition|)
block|{
name|QRegion
name|staticChildren
decl_stmt|;
name|QWidgetBackingStore
modifier|*
name|bs
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|offset
operator|.
name|isNull
argument_list|()
operator|&&
operator|(
name|bs
operator|=
name|maybeBackingStore
argument_list|()
operator|)
condition|)
name|staticChildren
operator|=
name|bs
operator|->
name|staticContents
argument_list|(
name|q
argument_list|,
name|oldWidgetRect
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|hasStaticChildren
init|=
operator|!
name|staticChildren
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasStaticChildren
condition|)
block|{
name|QRegion
name|dirty
argument_list|(
name|newWidgetRect
argument_list|)
decl_stmt|;
name|dirty
operator|-=
name|staticChildren
expr_stmt|;
name|invalidateBuffer
argument_list|(
name|dirty
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Entire widget needs repaint.
name|invalidateBuffer
argument_list|(
name|newWidgetRect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|parentAreaExposed
condition|)
return|return;
comment|// Invalidate newly exposed area of the parent.
if|if
condition|(
operator|!
name|graphicsEffect
operator|&&
name|extra
operator|&&
name|extra
operator|->
name|hasMask
condition|)
block|{
name|QRegion
name|parentExpose
argument_list|(
name|extra
operator|->
name|mask
operator|.
name|translated
argument_list|(
name|oldPos
argument_list|)
argument_list|)
decl_stmt|;
name|parentExpose
operator|&=
name|QRect
argument_list|(
name|oldPos
argument_list|,
name|oldSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasStaticChildren
condition|)
name|parentExpose
operator|-=
name|data
operator|.
name|crect
expr_stmt|;
comment|// Offset is unchanged, safe to do this.
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|parentExpose
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasStaticChildren
operator|&&
operator|!
name|graphicsEffect
condition|)
block|{
name|QRegion
name|parentExpose
argument_list|(
name|QRect
argument_list|(
name|oldPos
argument_list|,
name|oldSize
argument_list|)
argument_list|)
decl_stmt|;
name|parentExpose
operator|-=
name|data
operator|.
name|crect
expr_stmt|;
comment|// Offset is unchanged, safe to do this.
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|parentExpose
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|effectiveRectFor
argument_list|(
name|QRect
argument_list|(
name|oldPos
argument_list|,
name|oldSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
comment|// Move static content to its new position.
if|if
condition|(
operator|!
name|offset
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|sizeDecreased
condition|)
block|{
specifier|const
name|QSize
name|minSize
argument_list|(
name|qMin
argument_list|(
name|oldSize
operator|.
name|width
argument_list|()
argument_list|,
name|data
operator|.
name|crect
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|oldSize
operator|.
name|height
argument_list|()
argument_list|,
name|data
operator|.
name|crect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|moveRect
argument_list|(
name|QRect
argument_list|(
name|oldPos
argument_list|,
name|minSize
argument_list|)
argument_list|,
name|offset
operator|.
name|x
argument_list|()
argument_list|,
name|offset
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|moveRect
argument_list|(
name|QRect
argument_list|(
name|oldPos
argument_list|,
name|oldSize
argument_list|)
argument_list|,
name|offset
operator|.
name|x
argument_list|()
argument_list|,
name|offset
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Invalidate newly visible area of the widget.
if|if
condition|(
operator|!
name|sizeDecreased
operator|||
operator|!
name|oldWidgetRect
operator|.
name|contains
argument_list|(
name|newWidgetRect
argument_list|)
condition|)
block|{
name|QRegion
name|newVisible
argument_list|(
name|newWidgetRect
argument_list|)
decl_stmt|;
name|newVisible
operator|-=
name|oldWidgetRect
expr_stmt|;
name|invalidateBuffer
argument_list|(
name|newVisible
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|parentAreaExposed
condition|)
return|return;
comment|// Invalidate newly exposed area of the parent.
specifier|const
name|QRect
name|oldRect
argument_list|(
name|oldPos
argument_list|,
name|oldSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|hasMask
condition|)
block|{
name|QRegion
name|parentExpose
argument_list|(
name|oldRect
argument_list|)
decl_stmt|;
name|parentExpose
operator|&=
name|extra
operator|->
name|mask
operator|.
name|translated
argument_list|(
name|oldPos
argument_list|)
expr_stmt|;
name|parentExpose
operator|-=
operator|(
name|extra
operator|->
name|mask
operator|.
name|translated
argument_list|(
name|data
operator|.
name|crect
operator|.
name|topLeft
argument_list|()
argument_list|)
operator|&
name|data
operator|.
name|crect
operator|)
expr_stmt|;
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|parentExpose
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRegion
name|parentExpose
argument_list|(
name|oldRect
argument_list|)
decl_stmt|;
name|parentExpose
operator|-=
name|data
operator|.
name|crect
expr_stmt|;
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateBuffer
argument_list|(
name|parentExpose
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Invalidates the \a rgn (in widget's coordinates) of the backing store, i.e.     all widgets intersecting with the region will be repainted when the backing store     is synced.      ### Qt 4.6: Merge into a template function (after MSVC isn't supported anymore). */
end_comment
begin_function
DECL|function|invalidateBuffer
name|void
name|QWidgetPrivate
operator|::
name|invalidateBuffer
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QTLWExtra
modifier|*
name|tlwExtra
init|=
name|q
operator|->
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
if|if
condition|(
name|discardInvalidateBufferRequest
argument_list|(
name|q
argument_list|,
name|tlwExtra
argument_list|)
operator|||
name|rgn
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QRegion
name|wrgn
argument_list|(
name|rgn
argument_list|)
decl_stmt|;
name|wrgn
operator|&=
name|clipRect
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|graphicsEffect
operator|&&
name|extra
operator|&&
name|extra
operator|->
name|hasMask
condition|)
name|wrgn
operator|&=
name|extra
operator|->
name|mask
expr_stmt|;
if|if
condition|(
name|wrgn
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|tlwExtra
operator|->
name|backingStoreTracker
operator|->
name|markDirty
argument_list|(
name|wrgn
argument_list|,
name|q
argument_list|,
name|QWidgetBackingStore
operator|::
name|UpdateLater
argument_list|,
name|QWidgetBackingStore
operator|::
name|BufferInvalid
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This function is equivalent to calling invalidateBuffer(QRegion(rect), ...), but     is more efficient as it eliminates QRegion operations/allocations and can     use the rect more precisely for additional cut-offs.      ### Qt 4.6: Merge into a template function (after MSVC isn't supported anymore). */
end_comment
begin_function
DECL|function|invalidateBuffer
name|void
name|QWidgetPrivate
operator|::
name|invalidateBuffer
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|QTLWExtra
modifier|*
name|tlwExtra
init|=
name|q
operator|->
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|maybeTopData
argument_list|()
decl_stmt|;
if|if
condition|(
name|discardInvalidateBufferRequest
argument_list|(
name|q
argument_list|,
name|tlwExtra
argument_list|)
operator|||
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QRect
name|wRect
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|wRect
operator|&=
name|clipRect
argument_list|()
expr_stmt|;
if|if
condition|(
name|wRect
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|graphicsEffect
operator|||
operator|!
name|extra
operator|||
operator|!
name|extra
operator|->
name|hasMask
condition|)
block|{
name|tlwExtra
operator|->
name|backingStoreTracker
operator|->
name|markDirty
argument_list|(
name|wRect
argument_list|,
name|q
argument_list|,
name|QWidgetBackingStore
operator|::
name|UpdateLater
argument_list|,
name|QWidgetBackingStore
operator|::
name|BufferInvalid
argument_list|)
expr_stmt|;
return|return;
block|}
name|QRegion
name|wRgn
argument_list|(
name|extra
operator|->
name|mask
argument_list|)
decl_stmt|;
name|wRgn
operator|&=
name|wRect
expr_stmt|;
if|if
condition|(
name|wRgn
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|tlwExtra
operator|->
name|backingStoreTracker
operator|->
name|markDirty
argument_list|(
name|wRgn
argument_list|,
name|q
argument_list|,
name|QWidgetBackingStore
operator|::
name|UpdateLater
argument_list|,
name|QWidgetBackingStore
operator|::
name|BufferInvalid
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|repaint_sys
name|void
name|QWidgetPrivate
operator|::
name|repaint_sys
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|in_destructor
condition|)
return|return;
name|Q_Q
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|discardSyncRequest
argument_list|(
name|q
argument_list|,
name|maybeTopData
argument_list|()
argument_list|)
condition|)
return|return;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_StaticContents
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|extra
condition|)
name|createExtra
argument_list|()
expr_stmt|;
name|extra
operator|->
name|staticContentsSize
operator|=
name|data
operator|.
name|crect
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|QPaintEngine
modifier|*
name|engine
init|=
name|q
operator|->
name|paintEngine
argument_list|()
decl_stmt|;
comment|// QGLWidget does not support partial updates if:
comment|// 1) The context is double buffered
comment|// 2) The context is single buffered and auto-fill background is enabled.
specifier|const
name|bool
name|noPartialUpdateSupport
init|=
operator|(
name|engine
operator|&&
operator|(
name|engine
operator|->
name|type
argument_list|()
operator|==
name|QPaintEngine
operator|::
name|OpenGL
operator|||
name|engine
operator|->
name|type
argument_list|()
operator|==
name|QPaintEngine
operator|::
name|OpenGL2
operator|)
operator|)
operator|&&
operator|(
name|usesDoubleBufferedGLContext
operator|||
name|q
operator|->
name|autoFillBackground
argument_list|()
operator|)
decl_stmt|;
name|QRegion
name|toBePainted
argument_list|(
name|noPartialUpdateSupport
condition|?
name|q
operator|->
name|rect
argument_list|()
else|:
name|rgn
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
comment|// No difference between update() and repaint() on the Mac.
name|update_sys
argument_list|(
name|toBePainted
argument_list|)
expr_stmt|;
return|return;
endif|#
directive|endif
name|toBePainted
operator|&=
name|clipRect
argument_list|()
expr_stmt|;
name|clipToEffectiveMask
argument_list|(
name|toBePainted
argument_list|)
expr_stmt|;
if|if
condition|(
name|toBePainted
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
comment|// Nothing to repaint.
ifndef|#
directive|ifndef
name|QT_NO_PAINT_DEBUG
name|bool
name|flushed
init|=
name|QWidgetBackingStore
operator|::
name|flushPaint
argument_list|(
name|q
argument_list|,
name|toBePainted
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|drawWidget
argument_list|(
name|q
argument_list|,
name|toBePainted
argument_list|,
name|QPoint
argument_list|()
argument_list|,
name|QWidgetPrivate
operator|::
name|DrawAsRoot
operator||
name|QWidgetPrivate
operator|::
name|DrawPaintOnScreen
argument_list|,
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_PAINT_DEBUG
if|if
condition|(
name|flushed
condition|)
name|QWidgetBackingStore
operator|::
name|unflushPaint
argument_list|(
name|q
argument_list|,
name|toBePainted
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|q
operator|->
name|paintingActive
argument_list|()
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"QWidget::repaint: It is dangerous to leave painters active on a widget outside of the PaintEvent"
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
