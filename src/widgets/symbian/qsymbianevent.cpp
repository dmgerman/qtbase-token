begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsymbianevent.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<w32std.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QSymbianEvent     \brief The QSymbianEvent class contains a Symbian event of any type.     \since 4.6      The class is used as a generic container type for all types of Symbian     events.      \note This class is only available on Symbian.      \sa QApplication::symbianEventFilter() */
end_comment
begin_comment
comment|/*!     \enum QSymbianEvent::Type      \value InvalidEvent        The event is not valid.     \value WindowServerEvent   Indicates an event of type \c TWsEvent.     \value CommandEvent        Indicates that the event is a Symbian command.     \value ResourceChangeEvent Indicates that the event is a Symbian resource change type. */
end_comment
begin_comment
comment|/*!     \fn QSymbianEvent::type() const      Returns the event type contained in the QSymbianEvent instance. */
end_comment
begin_comment
comment|/*!     \fn QSymbianEvent::isValid() const      Returns whether this QSymbianEvent instance contains a valid event. */
end_comment
begin_comment
comment|/*!     Constructs a QSymbianEvent containing the given window server event     \a windowServerEvent. */
end_comment
begin_constructor
DECL|function|QSymbianEvent
name|QSymbianEvent
operator|::
name|QSymbianEvent
parameter_list|(
specifier|const
name|TWsEvent
modifier|*
name|windowServerEvent
parameter_list|)
member_init_list|:
name|m_type
argument_list|(
name|WindowServerEvent
argument_list|)
member_init_list|,
name|m_eventPtr
argument_list|(
name|windowServerEvent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a QSymbianEvent containing the given event value     \a value. The type of event is controlled by the \a eventType parameter. */
end_comment
begin_constructor
DECL|function|QSymbianEvent
name|QSymbianEvent
operator|::
name|QSymbianEvent
parameter_list|(
name|QSymbianEvent
operator|::
name|Type
name|eventType
parameter_list|,
name|int
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|eventType
condition|)
block|{
case|case
name|CommandEvent
case|:
case|case
name|ResourceChangeEvent
case|:
name|m_type
operator|=
name|eventType
expr_stmt|;
name|m_eventValue
operator|=
name|value
expr_stmt|;
break|break;
default|default:
name|m_type
operator|=
name|InvalidEvent
expr_stmt|;
name|m_eventValue
operator|=
literal|0
expr_stmt|;
break|break;
block|}
block|}
end_constructor
begin_comment
comment|/*!     Destroys the QSymbianEvent. */
end_comment
begin_destructor
DECL|function|~QSymbianEvent
name|QSymbianEvent
operator|::
name|~
name|QSymbianEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the window server event contained in the class instance, or 0 if the event type     is not \c WindowServerEvent. */
end_comment
begin_function
DECL|function|windowServerEvent
specifier|const
name|TWsEvent
modifier|*
name|QSymbianEvent
operator|::
name|windowServerEvent
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|m_type
operator|==
name|WindowServerEvent
operator|)
condition|?
cast|static_cast
argument_list|<
specifier|const
name|TWsEvent
operator|*
argument_list|>
argument_list|(
name|m_eventPtr
argument_list|)
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the command contained in the class instance, or 0 if the event type     is not \c CommandEvent. */
end_comment
begin_function
DECL|function|command
name|int
name|QSymbianEvent
operator|::
name|command
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|m_type
operator|==
name|CommandEvent
operator|)
condition|?
name|m_eventValue
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the resource change type contained in the class instance, or 0 if the event type     is not \c ResourceChangeEvent. */
end_comment
begin_function
DECL|function|resourceChangeType
name|int
name|QSymbianEvent
operator|::
name|resourceChangeType
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|m_type
operator|==
name|ResourceChangeEvent
operator|)
condition|?
name|m_eventValue
else|:
literal|0
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QSymbianEvent
modifier|*
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
name|o
condition|)
block|{
name|dbg
operator|<<
literal|"QSymbianEvent(0x0)"
expr_stmt|;
return|return
name|dbg
return|;
block|}
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QSymbianEvent("
expr_stmt|;
switch|switch
condition|(
name|o
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QSymbianEvent
operator|::
name|InvalidEvent
case|:
name|dbg
operator|<<
literal|"InvalidEvent"
expr_stmt|;
break|break;
case|case
name|QSymbianEvent
operator|::
name|WindowServerEvent
case|:
name|dbg
operator|<<
literal|"WindowServerEvent, Type = "
operator|<<
name|o
operator|->
name|windowServerEvent
argument_list|()
operator|->
name|Type
argument_list|()
expr_stmt|;
break|break;
case|case
name|QSymbianEvent
operator|::
name|CommandEvent
case|:
name|dbg
operator|<<
literal|"CommandEvent, command = "
operator|<<
name|o
operator|->
name|command
argument_list|()
expr_stmt|;
break|break;
case|case
name|QSymbianEvent
operator|::
name|ResourceChangeEvent
case|:
name|dbg
operator|<<
literal|"ResourceChangeEvent, resourceChangeType = "
operator|<<
name|o
operator|->
name|resourceChangeType
argument_list|()
expr_stmt|;
break|break;
default|default:
name|dbg
operator|<<
literal|"Unknown event type"
expr_stmt|;
break|break;
block|}
name|dbg
operator|<<
literal|")"
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
