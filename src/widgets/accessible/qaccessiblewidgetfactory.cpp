begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qaccessiblewidgets_p.h"
end_include
begin_include
include|#
directive|include
file|"qaccessiblemenu_p.h"
end_include
begin_include
include|#
directive|include
file|"simplewidgets_p.h"
end_include
begin_include
include|#
directive|include
file|"rangecontrols_p.h"
end_include
begin_include
include|#
directive|include
file|"complexwidgets_p.h"
end_include
begin_include
include|#
directive|include
file|"itemviews_p.h"
end_include
begin_include
include|#
directive|include
file|<qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbutton.h>
end_include
begin_include
include|#
directive|include
file|<qtreeview.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qaccessible.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|qAccessibleFactory
name|QAccessibleInterface
modifier|*
name|qAccessibleFactory
parameter_list|(
specifier|const
name|QString
modifier|&
name|classname
parameter_list|,
name|QObject
modifier|*
name|object
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|iface
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|object
operator|||
operator|!
name|object
operator|->
name|isWidgetType
argument_list|()
condition|)
return|return
name|iface
return|;
comment|// QWidget emits destroyed() from its destructor instead of letting the QObject
comment|// destructor do it, which means the QWidget is unregistered from the accessibillity
comment|// cache. But QWidget destruction also emits enter and leave events, which may end
comment|// up here, so we have to ensure that we don't fill the cache with an entry of
comment|// a widget that is going away.
name|QWidget
modifier|*
name|widget
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWidgetPrivate
operator|::
name|get
argument_list|(
name|widget
argument_list|)
operator|->
name|data
operator|.
name|in_destructor
condition|)
return|return
name|iface
return|;
if|if
condition|(
literal|false
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_LINEEDIT
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QLineEdit"
argument_list|)
condition|)
block|{
if|if
condition|(
name|widget
operator|->
name|objectName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"qt_spinbox_lineedit"
argument_list|)
condition|)
name|iface
operator|=
literal|0
expr_stmt|;
else|else
name|iface
operator|=
operator|new
name|QAccessibleLineEdit
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QComboBox"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleComboBox
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QAbstractSpinBox"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleAbstractSpinBox
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QSpinBox"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleSpinBox
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QDoubleSpinBox"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleDoubleSpinBox
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QScrollBar"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleScrollBar
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QAbstractSlider"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleAbstractSlider
argument_list|(
name|widget
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QSlider"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleSlider
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBUTTON
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QToolButton"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleToolButton
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TOOLBUTTON
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QCheckBox"
argument_list|)
operator|||
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QRadioButton"
argument_list|)
operator|||
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QPushButton"
argument_list|)
operator|||
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QAbstractButton"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleButton
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QDialog"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|Dialog
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QMessageBox"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|AlertMessage
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MAINWINDOW
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QMainWindow"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleMainWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QLabel"
argument_list|)
operator|||
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QLCDNumber"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleDisplay
argument_list|(
name|widget
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QGroupBox"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleGroupBox
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QStatusBar"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleDisplay
argument_list|(
name|widget
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QProgressBar"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleProgressBar
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QToolBar"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|ToolBar
argument_list|,
name|widget
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QMenuBar"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleMenuBar
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MENU
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QMenu"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleMenu
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QTreeView"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleTree
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QTableView"
argument_list|)
operator|||
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QListView"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleTable
argument_list|(
name|widget
argument_list|)
expr_stmt|;
comment|// ### This should be cleaned up. We return the parent for the scrollarea to hide it.
endif|#
directive|endif
comment|// QT_NO_ITEMVIEWS
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QTabBar"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleTabBar
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QSizeGrip"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|Grip
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SPLITTER
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QSplitter"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|Splitter
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QSplitterHandle"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|Grip
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TEXTEDIT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_CURSOR
argument_list|)
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QTextEdit"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleTextEdit
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QPlainTextEdit"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessiblePlainTextEdit
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QTipLabel"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleDisplay
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|ToolTip
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QFrame"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|Border
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_STACKEDWIDGET
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QStackedWidget"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleStackedWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBOX
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QToolBox"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleToolBox
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MDIAREA
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QMdiArea"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleMdiArea
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QMdiSubWindow"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleMdiSubWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QDialogButtonBox"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleDialogButtonBox
argument_list|(
name|widget
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DIAL
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QDial"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleDial
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QRubberBand"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|Border
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TEXTBROWSER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_CURSOR
argument_list|)
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QTextBrowser"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleTextBrowser
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SCROLLAREA
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QAbstractScrollArea"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleAbstractScrollArea
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QScrollArea"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleScrollArea
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_CALENDARWIDGET
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QCalendarWidget"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleCalendarWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QDockWidget"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleDockWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QDesktopScreenWidget"
argument_list|)
condition|)
block|{
name|iface
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QWidget"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|classname
operator|==
name|QLatin1String
argument_list|(
literal|"QWindowContainer"
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleWindowContainer
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
return|return
name|iface
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
end_unit
