begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qaccessible.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|"qmessagebox.h"
end_include
begin_comment
comment|// ### dependency
end_comment
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qsettings.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qmap.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpair.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicsitem.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicsscene.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicsview.h>
end_include
begin_include
include|#
directive|include
file|<winuser.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|WINABLEAPI
argument_list|)
end_if
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<bldver.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<winable.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<oleacc.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_CC_BOR
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
end_if
begin_include
include|#
directive|include
file|<comdef.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|"qguifunctions_wince.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
comment|//#define DEBUG_SHOW_ATCLIENT_COMMANDS
ifdef|#
directive|ifdef
name|DEBUG_SHOW_ATCLIENT_COMMANDS
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<qdebug.h>
name|QT_END_INCLUDE_NAMESPACE
DECL|function|roleString
specifier|static
specifier|const
name|char
modifier|*
name|roleString
parameter_list|(
name|QAccessible
operator|::
name|Role
name|role
parameter_list|)
block|{
specifier|static
specifier|const
name|char
modifier|*
name|roles
index|[]
init|=
block|{
literal|"NoRole"
comment|/* = 0x00000000 */
block|,
literal|"TitleBar"
comment|/* = 0x00000001 */
block|,
literal|"MenuBar"
comment|/* = 0x00000002 */
block|,
literal|"ScrollBar"
comment|/* = 0x00000003 */
block|,
literal|"Grip"
comment|/* = 0x00000004 */
block|,
literal|"Sound"
comment|/* = 0x00000005 */
block|,
literal|"Cursor"
comment|/* = 0x00000006 */
block|,
literal|"Caret"
comment|/* = 0x00000007 */
block|,
literal|"AlertMessage"
comment|/* = 0x00000008 */
block|,
literal|"Window"
comment|/* = 0x00000009 */
block|,
literal|"Client"
comment|/* = 0x0000000A */
block|,
literal|"PopupMenu"
comment|/* = 0x0000000B */
block|,
literal|"MenuItem"
comment|/* = 0x0000000C */
block|,
literal|"ToolTip"
comment|/* = 0x0000000D */
block|,
literal|"Application"
comment|/* = 0x0000000E */
block|,
literal|"Document"
comment|/* = 0x0000000F */
block|,
literal|"Pane"
comment|/* = 0x00000010 */
block|,
literal|"Chart"
comment|/* = 0x00000011 */
block|,
literal|"Dialog"
comment|/* = 0x00000012 */
block|,
literal|"Border"
comment|/* = 0x00000013 */
block|,
literal|"Grouping"
comment|/* = 0x00000014 */
block|,
literal|"Separator"
comment|/* = 0x00000015 */
block|,
literal|"ToolBar"
comment|/* = 0x00000016 */
block|,
literal|"StatusBar"
comment|/* = 0x00000017 */
block|,
literal|"Table"
comment|/* = 0x00000018 */
block|,
literal|"ColumnHeader"
comment|/* = 0x00000019 */
block|,
literal|"RowHeader"
comment|/* = 0x0000001A */
block|,
literal|"Column"
comment|/* = 0x0000001B */
block|,
literal|"Row"
comment|/* = 0x0000001C */
block|,
literal|"Cell"
comment|/* = 0x0000001D */
block|,
literal|"Link"
comment|/* = 0x0000001E */
block|,
literal|"HelpBalloon"
comment|/* = 0x0000001F */
block|,
literal|"Assistant"
comment|/* = 0x00000020 */
block|,
literal|"List"
comment|/* = 0x00000021 */
block|,
literal|"ListItem"
comment|/* = 0x00000022 */
block|,
literal|"Tree"
comment|/* = 0x00000023 */
block|,
literal|"TreeItem"
comment|/* = 0x00000024 */
block|,
literal|"PageTab"
comment|/* = 0x00000025 */
block|,
literal|"PropertyPage"
comment|/* = 0x00000026 */
block|,
literal|"Indicator"
comment|/* = 0x00000027 */
block|,
literal|"Graphic"
comment|/* = 0x00000028 */
block|,
literal|"StaticText"
comment|/* = 0x00000029 */
block|,
literal|"EditableText"
comment|/* = 0x0000002A */
block|,
comment|// Editable, selectable, etc.
literal|"PushButton"
comment|/* = 0x0000002B */
block|,
literal|"CheckBox"
comment|/* = 0x0000002C */
block|,
literal|"RadioButton"
comment|/* = 0x0000002D */
block|,
literal|"ComboBox"
comment|/* = 0x0000002E */
block|,
literal|"DropList"
comment|/* = 0x0000002F */
block|,
comment|// commented out
literal|"ProgressBar"
comment|/* = 0x00000030 */
block|,
literal|"Dial"
comment|/* = 0x00000031 */
block|,
literal|"HotkeyField"
comment|/* = 0x00000032 */
block|,
literal|"Slider"
comment|/* = 0x00000033 */
block|,
literal|"SpinBox"
comment|/* = 0x00000034 */
block|,
literal|"Canvas"
comment|/* = 0x00000035 */
block|,
literal|"Animation"
comment|/* = 0x00000036 */
block|,
literal|"Equation"
comment|/* = 0x00000037 */
block|,
literal|"ButtonDropDown"
comment|/* = 0x00000038 */
block|,
literal|"ButtonMenu"
comment|/* = 0x00000039 */
block|,
literal|"ButtonDropGrid"
comment|/* = 0x0000003A */
block|,
literal|"Whitespace"
comment|/* = 0x0000003B */
block|,
literal|"PageTabList"
comment|/* = 0x0000003C */
block|,
literal|"Clock"
comment|/* = 0x0000003D */
block|,
literal|"Splitter"
comment|/* = 0x0000003E */
block|,
literal|"LayeredPane"
comment|/* = 0x0000003F */
block|,
literal|"UserRole"
comment|/* = 0x0000ffff*/
block|}
decl_stmt|;
if|if
condition|(
name|role
operator|>=
literal|0x40
condition|)
name|role
operator|=
name|QAccessible
operator|::
name|UserRole
expr_stmt|;
return|return
name|roles
index|[
name|int
argument_list|(
name|role
argument_list|)
index|]
return|;
block|}
end_function
begin_function
DECL|function|eventString
specifier|static
specifier|const
name|char
modifier|*
name|eventString
parameter_list|(
name|QAccessible
operator|::
name|Event
name|ev
parameter_list|)
block|{
specifier|static
specifier|const
name|char
modifier|*
name|events
index|[]
init|=
block|{
literal|"null"
block|,
comment|// 0
literal|"SoundPlayed"
comment|/*= 0x0001*/
block|,
literal|"Alert"
comment|/*= 0x0002*/
block|,
literal|"ForegroundChanged"
comment|/*= 0x0003*/
block|,
literal|"MenuStart"
comment|/*= 0x0004*/
block|,
literal|"MenuEnd"
comment|/*= 0x0005*/
block|,
literal|"PopupMenuStart"
comment|/*= 0x0006*/
block|,
literal|"PopupMenuEnd"
comment|/*= 0x0007*/
block|,
literal|"ContextHelpStart"
comment|/*= 0x000C*/
block|,
comment|// 8
literal|"ContextHelpEnd"
comment|/*= 0x000D*/
block|,
literal|"DragDropStart"
comment|/*= 0x000E*/
block|,
literal|"DragDropEnd"
comment|/*= 0x000F*/
block|,
literal|"DialogStart"
comment|/*= 0x0010*/
block|,
literal|"DialogEnd"
comment|/*= 0x0011*/
block|,
literal|"ScrollingStart"
comment|/*= 0x0012*/
block|,
literal|"ScrollingEnd"
comment|/*= 0x0013*/
block|,
literal|"MenuCommand"
comment|/*= 0x0018*/
block|,
comment|// 16
comment|// Values from IAccessible2
literal|"ActionChanged"
comment|/*= 0x0101*/
block|,
comment|// 17
literal|"ActiveDescendantChanged"
block|,
literal|"AttributeChanged"
block|,
literal|"DocumentContentChanged"
block|,
literal|"DocumentLoadComplete"
block|,
literal|"DocumentLoadStopped"
block|,
literal|"DocumentReload"
block|,
literal|"HyperlinkEndIndexChanged"
block|,
literal|"HyperlinkNumberOfAnchorsChanged"
block|,
literal|"HyperlinkSelectedLinkChanged"
block|,
literal|"HypertextLinkActivated"
block|,
literal|"HypertextLinkSelected"
block|,
literal|"HyperlinkStartIndexChanged"
block|,
literal|"HypertextChanged"
block|,
literal|"HypertextNLinksChanged"
block|,
literal|"ObjectAttributeChanged"
block|,
literal|"PageChanged"
block|,
literal|"SectionChanged"
block|,
literal|"TableCaptionChanged"
block|,
literal|"TableColumnDescriptionChanged"
block|,
literal|"TableColumnHeaderChanged"
block|,
literal|"TableModelChanged"
block|,
literal|"TableRowDescriptionChanged"
block|,
literal|"TableRowHeaderChanged"
block|,
literal|"TableSummaryChanged"
block|,
literal|"TextAttributeChanged"
block|,
literal|"TextCaretMoved"
block|,
comment|// TextChanged, deprecated, use TextUpdated
comment|//TextColumnChanged = TextCaretMoved + 2,
literal|"TextInserted"
block|,
literal|"TextRemoved"
block|,
literal|"TextUpdated"
block|,
literal|"TextSelectionChanged"
block|,
literal|"VisibleDataChanged"
block|,
comment|/*= 0x0101+32*/
literal|"ObjectCreated"
comment|/*= 0x8000*/
block|,
comment|// 49
literal|"ObjectDestroyed"
comment|/*= 0x8001*/
block|,
literal|"ObjectShow"
comment|/*= 0x8002*/
block|,
literal|"ObjectHide"
comment|/*= 0x8003*/
block|,
literal|"ObjectReorder"
comment|/*= 0x8004*/
block|,
literal|"Focus"
comment|/*= 0x8005*/
block|,
literal|"Selection"
comment|/*= 0x8006*/
block|,
literal|"SelectionAdd"
comment|/*= 0x8007*/
block|,
literal|"SelectionRemove"
comment|/*= 0x8008*/
block|,
literal|"SelectionWithin"
comment|/*= 0x8009*/
block|,
literal|"StateChanged"
comment|/*= 0x800A*/
block|,
literal|"LocationChanged"
comment|/*= 0x800B*/
block|,
literal|"NameChanged"
comment|/*= 0x800C*/
block|,
literal|"DescriptionChanged"
comment|/*= 0x800D*/
block|,
literal|"ValueChanged"
comment|/*= 0x800E*/
block|,
literal|"ParentChanged"
comment|/*= 0x800F*/
block|,
literal|"HelpChanged"
comment|/*= 0x80A0*/
block|,
literal|"DefaultActionChanged"
comment|/*= 0x80B0*/
block|,
literal|"AcceleratorChanged"
comment|/*= 0x80C0*/
block|}
decl_stmt|;
name|int
name|e
init|=
name|int
argument_list|(
name|ev
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|<=
literal|0x80c0
condition|)
block|{
specifier|const
name|int
name|last
init|=
sizeof|sizeof
argument_list|(
name|events
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|char
operator|*
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|e
operator|<=
literal|0x07
condition|)
return|return
name|events
index|[
name|e
index|]
return|;
elseif|else
if|if
condition|(
name|e
operator|<=
literal|0x13
condition|)
return|return
name|events
index|[
name|e
operator|-
literal|0x0c
operator|+
literal|8
index|]
return|;
elseif|else
if|if
condition|(
name|e
operator|==
literal|0x18
condition|)
return|return
name|events
index|[
literal|16
index|]
return|;
elseif|else
if|if
condition|(
name|e
operator|<=
literal|0x0101
operator|+
literal|32
condition|)
return|return
name|events
index|[
name|e
operator|-
literal|0x101
operator|+
literal|17
index|]
return|;
elseif|else
if|if
condition|(
name|e
operator|<=
literal|0x800f
condition|)
return|return
name|events
index|[
name|e
operator|-
literal|0x8000
operator|+
literal|49
index|]
return|;
elseif|else
if|if
condition|(
name|e
operator|==
literal|0x80a0
condition|)
return|return
name|events
index|[
name|last
operator|-
literal|2
index|]
return|;
elseif|else
if|if
condition|(
name|e
operator|==
literal|0x80b0
condition|)
return|return
name|events
index|[
name|last
operator|-
literal|1
index|]
return|;
elseif|else
if|if
condition|(
name|e
operator|==
literal|0x80c0
condition|)
return|return
name|events
index|[
name|last
index|]
return|;
block|}
return|return
literal|"unknown"
return|;
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function
DECL|function|showDebug
name|void
name|showDebug
parameter_list|(
specifier|const
name|char
modifier|*
name|funcName
parameter_list|,
specifier|const
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Role:"
operator|<<
name|roleString
argument_list|(
name|iface
operator|->
name|role
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"Name:"
operator|<<
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|,
literal|0
argument_list|)
operator|<<
literal|"State:"
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|int
argument_list|(
name|iface
operator|->
name|state
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|16
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
name|funcName
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_define
define|#
directive|define
name|showDebug
parameter_list|(
name|f
parameter_list|,
name|iface
parameter_list|)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// This stuff is used for widgets/items with no window handle:
end_comment
begin_typedef
DECL|typedef|NotifyMap
typedef|typedef
name|QMap
argument_list|<
name|int
argument_list|,
name|QPair
argument_list|<
name|QObject
modifier|*
argument_list|,
name|int
argument_list|>
argument_list|>
name|NotifyMap
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|NotifyMap
argument_list|,
argument|qAccessibleRecentSentEvents
argument_list|)
end_macro
begin_decl_stmt
DECL|variable|eventNum
specifier|static
name|int
name|eventNum
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|initialize
name|void
name|QAccessible
operator|::
name|initialize
parameter_list|()
block|{  }
end_function
begin_function
DECL|function|cleanup
name|void
name|QAccessible
operator|::
name|cleanup
parameter_list|()
block|{  }
end_function
begin_function
DECL|function|updateAccessibility
name|void
name|QAccessible
operator|::
name|updateAccessibility
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|int
name|who
parameter_list|,
name|Event
name|reason
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateHandler
condition|)
block|{
name|updateHandler
argument_list|(
name|o
argument_list|,
name|who
argument_list|,
name|reason
argument_list|)
expr_stmt|;
return|return;
block|}
name|QString
name|soundName
decl_stmt|;
switch|switch
condition|(
name|reason
condition|)
block|{
case|case
name|PopupMenuStart
case|:
name|soundName
operator|=
name|QLatin1String
argument_list|(
literal|"MenuPopup"
argument_list|)
expr_stmt|;
break|break;
case|case
name|MenuCommand
case|:
name|soundName
operator|=
name|QLatin1String
argument_list|(
literal|"MenuCommand"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Alert
case|:
block|{
ifndef|#
directive|ifndef
name|QT_NO_MESSAGEBOX
name|QMessageBox
modifier|*
name|mb
init|=
name|qobject_cast
argument_list|<
name|QMessageBox
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|mb
condition|)
block|{
switch|switch
condition|(
name|mb
operator|->
name|icon
argument_list|()
condition|)
block|{
case|case
name|QMessageBox
operator|::
name|Warning
case|:
name|soundName
operator|=
name|QLatin1String
argument_list|(
literal|"SystemExclamation"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMessageBox
operator|::
name|Critical
case|:
name|soundName
operator|=
name|QLatin1String
argument_list|(
literal|"SystemHand"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMessageBox
operator|::
name|Information
case|:
name|soundName
operator|=
name|QLatin1String
argument_list|(
literal|"SystemAsterisk"
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
else|else
endif|#
directive|endif
comment|// QT_NO_MESSAGEBOX
block|{
name|soundName
operator|=
name|QLatin1String
argument_list|(
literal|"SystemAsterisk"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|soundName
operator|.
name|size
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SETTINGS
name|QSettings
name|settings
argument_list|(
name|QLatin1String
argument_list|(
literal|"HKEY_CURRENT_USER\\AppEvents\\Schemes\\Apps\\.Default\\"
argument_list|)
operator|+
name|soundName
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
decl_stmt|;
name|QString
name|file
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|".Current/."
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
else|#
directive|else
name|QString
name|file
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|file
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PlaySound
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|soundName
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|SND_ALIAS
operator||
name|SND_ASYNC
operator||
name|SND_NODEFAULT
operator||
name|SND_NOWAIT
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isActive
argument_list|()
condition|)
return|return;
typedef|typedef
name|void
function_decl|(
name|WINAPI
modifier|*
name|PtrNotifyWinEvent
function_decl|)
parameter_list|(
name|DWORD
parameter_list|,
name|HWND
parameter_list|,
name|LONG
parameter_list|,
name|LONG
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
comment|// ### TODO: check for NotifyWinEvent in CE 6.0
comment|// There is no user32.lib nor NotifyWinEvent for CE
return|return;
else|#
directive|else
specifier|static
name|PtrNotifyWinEvent
name|ptrNotifyWinEvent
init|=
literal|0
decl_stmt|;
specifier|static
name|bool
name|resolvedNWE
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|resolvedNWE
condition|)
block|{
name|resolvedNWE
operator|=
literal|true
expr_stmt|;
name|ptrNotifyWinEvent
operator|=
operator|(
name|PtrNotifyWinEvent
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"user32"
argument_list|)
argument_list|,
literal|"NotifyWinEvent"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ptrNotifyWinEvent
condition|)
return|return;
comment|// An event has to be associated with a window,
comment|// so find the first parent that is a widget.
name|QWidget
modifier|*
name|w
init|=
literal|0
decl_stmt|;
name|QObject
modifier|*
name|p
init|=
name|o
decl_stmt|;
do|do
block|{
if|if
condition|(
name|p
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
name|w
operator|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|internalWinId
argument_list|()
condition|)
break|break;
block|}
if|if
condition|(
name|QGraphicsObject
modifier|*
name|gfxObj
init|=
name|qobject_cast
argument_list|<
name|QGraphicsObject
operator|*
argument_list|>
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|QGraphicsItem
modifier|*
name|parentItem
init|=
name|gfxObj
operator|->
name|parentItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentItem
condition|)
block|{
name|p
operator|=
name|parentItem
operator|->
name|toGraphicsObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QGraphicsView
modifier|*
name|view
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QGraphicsScene
modifier|*
name|scene
init|=
name|gfxObj
operator|->
name|scene
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|fw
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QGraphicsView
modifier|*
argument_list|>
name|views
init|=
name|scene
operator|->
name|views
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|views
operator|.
name|count
argument_list|()
operator|&&
name|view
operator|!=
name|fw
condition|;
operator|++
name|i
control|)
block|{
name|view
operator|=
name|views
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|p
operator|=
name|view
expr_stmt|;
block|}
block|}
else|else
block|{
name|p
operator|=
name|p
operator|->
name|parent
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|p
condition|)
do|;
comment|//qDebug()<< "updateAccessibility(), hwnd:"<< w<< ", object:"<< o<< ","<< eventString(reason);
if|if
condition|(
operator|!
name|w
condition|)
block|{
if|if
condition|(
name|reason
operator|!=
name|QAccessible
operator|::
name|ContextHelpStart
operator|&&
name|reason
operator|!=
name|QAccessible
operator|::
name|ContextHelpEnd
condition|)
name|w
operator|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
block|{
name|w
operator|=
name|QApplication
operator|::
name|activeWindow
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
return|return;
comment|// ### Fixme
comment|//             if (!w) {
comment|//                 w = qApp->mainWidget();
comment|//                 if (!w)
comment|//                     return;
comment|//             }
block|}
block|}
name|WId
name|wid
init|=
name|w
operator|->
name|internalWinId
argument_list|()
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
name|MenuCommand
condition|)
block|{
comment|// MenuCommand is faked
if|if
condition|(
name|w
operator|!=
name|o
condition|)
block|{
comment|// See comment "SENDING EVENTS TO OBJECTS WITH NO WINDOW HANDLE"
name|eventNum
operator|%=
literal|50
expr_stmt|;
comment|//[0..49]
name|int
name|eventId
init|=
operator|-
name|eventNum
operator|-
literal|1
decl_stmt|;
name|qAccessibleRecentSentEvents
argument_list|()
operator|->
name|insert
argument_list|(
name|eventId
argument_list|,
name|qMakePair
argument_list|(
name|o
argument_list|,
name|who
argument_list|)
argument_list|)
expr_stmt|;
name|ptrNotifyWinEvent
argument_list|(
name|reason
argument_list|,
name|wid
argument_list|,
name|OBJID_CLIENT
argument_list|,
name|eventId
argument_list|)
expr_stmt|;
operator|++
name|eventNum
expr_stmt|;
block|}
else|else
block|{
name|ptrNotifyWinEvent
argument_list|(
name|reason
argument_list|,
name|wid
argument_list|,
name|OBJID_CLIENT
argument_list|,
name|who
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// Q_WS_WINCE
block|}
end_function
begin_comment
comment|/*  == SENDING EVENTS TO OBJECTS WITH NO WINDOW HANDLE ==      If the user requested to send the event to a widget with no window,     we need to send an event to an object with no hwnd.     The way we do that is to send it to the *first* ancestor widget     with a window.     Then we'll need a way of identifying the child:     We'll just keep a list of the most recent events that we have sent,     where each entry in the list is identified by a negative value     between [-50,-1]. This negative value we will pass on to     NotifyWinEvent() as the child id. When the negative value have     reached -50, it will wrap around to -1. This seems to be enough      Now, when the client receives that event, he will first call     AccessibleObjectFromEvent() where dwChildID is the special     negative value. AccessibleObjectFromEvent does two steps:     1. It will first sent a WM_GETOBJECT to the server, asking        for the IAccessible interface for the HWND.     2. With the IAccessible interface it got hold of it will call        acc_getChild where the child id argument is the special        negative identifier. In our reimplementation of get_accChild        we check for this if the child id is negative. If it is, then        we'll look up in our table for the entry that is associated        with that value.        The entry will then contain a pointer to the QObject /QWidget        that we can use to call queryAccessibleInterface() on.       The following figure shows how the interaction between server and     client is in the case when the server is sending an event.  SERVER (Qt)                                 | CLIENT                                | --------------------------------------------+---------------------------------------+                                             | acc->updateAccessibility(obj,  childIndex)  |                                             | recentEvents()->insert(- 1 - eventNum,      |             qMakePair(obj, childIndex)      | NotifyWinEvent(hwnd, childId) =>            |                                             |   AccessibleObjectFromEvent(event, hwnd, OBJID_CLIENT, childId )                                             |   will do:<===  1. send WM_GETOBJECT(hwnd, OBJID_CLIENT) widget ~= hwnd iface = queryAccessibleInteface(widget) (create IAccessible interface wrapper for  iface)  return iface                              ===> IAccessible* iface; (for hwnd)                                             |<===  call iface->get_accChild(childId) get_accChild() {                            |     if (varChildID.lVal< 0) {         QPair ref = recentEvents().value(varChildID.lVal);         [...]     } */
end_comment
begin_function
DECL|function|setRootObject
name|void
name|QAccessible
operator|::
name|setRootObject
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|)
block|{
if|if
condition|(
name|rootObjectHandler
condition|)
block|{
name|rootObjectHandler
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|QWindowsEnumerate
class|class
name|QWindowsEnumerate
super|:
specifier|public
name|IEnumVARIANT
block|{
public|public:
DECL|function|QWindowsEnumerate
name|QWindowsEnumerate
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|a
parameter_list|)
member_init_list|:
name|ref
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|current
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|array
argument_list|(
name|a
argument_list|)
block|{     }
DECL|function|~QWindowsEnumerate
specifier|virtual
name|~
name|QWindowsEnumerate
parameter_list|()
block|{}
name|HRESULT
name|STDMETHODCALLTYPE
name|QueryInterface
parameter_list|(
name|REFIID
parameter_list|,
name|LPVOID
modifier|*
parameter_list|)
function_decl|;
name|ULONG
name|STDMETHODCALLTYPE
name|AddRef
parameter_list|()
function_decl|;
name|ULONG
name|STDMETHODCALLTYPE
name|Release
parameter_list|()
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|Clone
parameter_list|(
name|IEnumVARIANT
modifier|*
modifier|*
name|ppEnum
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|Next
parameter_list|(
name|unsigned
name|long
name|celt
parameter_list|,
name|VARIANT
name|FAR
modifier|*
name|rgVar
parameter_list|,
name|unsigned
name|long
name|FAR
modifier|*
name|pCeltFetched
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|Reset
parameter_list|()
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|Skip
parameter_list|(
name|unsigned
name|long
name|celt
parameter_list|)
function_decl|;
private|private:
DECL|member|ref
name|ULONG
name|ref
decl_stmt|;
DECL|member|current
name|ULONG
name|current
decl_stmt|;
DECL|member|array
name|QVector
argument_list|<
name|int
argument_list|>
name|array
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|QueryInterface
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsEnumerate
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|id
parameter_list|,
name|LPVOID
modifier|*
name|iface
parameter_list|)
block|{
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|id
operator|==
name|IID_IUnknown
condition|)
operator|*
name|iface
operator|=
operator|(
name|IUnknown
operator|*
operator|)
name|this
expr_stmt|;
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IEnumVARIANT
condition|)
operator|*
name|iface
operator|=
operator|(
name|IEnumVARIANT
operator|*
operator|)
name|this
expr_stmt|;
if|if
condition|(
operator|*
name|iface
condition|)
block|{
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_NOINTERFACE
return|;
block|}
end_function
begin_function
DECL|function|AddRef
name|ULONG
name|STDMETHODCALLTYPE
name|QWindowsEnumerate
operator|::
name|AddRef
parameter_list|()
block|{
return|return
operator|++
name|ref
return|;
block|}
end_function
begin_function
DECL|function|Release
name|ULONG
name|STDMETHODCALLTYPE
name|QWindowsEnumerate
operator|::
name|Release
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|--
name|ref
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|ref
return|;
block|}
end_function
begin_function
DECL|function|Clone
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsEnumerate
operator|::
name|Clone
parameter_list|(
name|IEnumVARIANT
modifier|*
modifier|*
name|ppEnum
parameter_list|)
block|{
name|QWindowsEnumerate
modifier|*
name|penum
init|=
literal|0
decl_stmt|;
operator|*
name|ppEnum
operator|=
literal|0
expr_stmt|;
name|penum
operator|=
operator|new
name|QWindowsEnumerate
argument_list|(
name|array
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|penum
condition|)
return|return
name|E_OUTOFMEMORY
return|;
name|penum
operator|->
name|current
operator|=
name|current
expr_stmt|;
name|penum
operator|->
name|array
operator|=
name|array
expr_stmt|;
name|penum
operator|->
name|AddRef
argument_list|()
expr_stmt|;
operator|*
name|ppEnum
operator|=
name|penum
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|Next
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsEnumerate
operator|::
name|Next
parameter_list|(
name|unsigned
name|long
name|celt
parameter_list|,
name|VARIANT
name|FAR
modifier|*
name|rgVar
parameter_list|,
name|unsigned
name|long
name|FAR
modifier|*
name|pCeltFetched
parameter_list|)
block|{
if|if
condition|(
name|pCeltFetched
condition|)
operator|*
name|pCeltFetched
operator|=
literal|0
expr_stmt|;
name|ULONG
name|l
decl_stmt|;
for|for
control|(
name|l
operator|=
literal|0
init|;
name|l
operator|<
name|celt
condition|;
name|l
operator|++
control|)
block|{
name|VariantInit
argument_list|(
operator|&
name|rgVar
index|[
name|l
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|current
operator|+
literal|1
operator|)
operator|>
operator|(
name|ULONG
operator|)
name|array
operator|.
name|size
argument_list|()
condition|)
block|{
operator|*
name|pCeltFetched
operator|=
name|l
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
name|rgVar
index|[
name|l
index|]
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
name|rgVar
index|[
name|l
index|]
operator|.
name|lVal
operator|=
name|array
index|[
operator|(
name|int
operator|)
name|current
index|]
expr_stmt|;
operator|++
name|current
expr_stmt|;
block|}
operator|*
name|pCeltFetched
operator|=
name|l
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|Reset
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsEnumerate
operator|::
name|Reset
parameter_list|()
block|{
name|current
operator|=
literal|0
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|Skip
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsEnumerate
operator|::
name|Skip
parameter_list|(
name|unsigned
name|long
name|celt
parameter_list|)
block|{
name|current
operator|+=
name|celt
expr_stmt|;
if|if
condition|(
name|current
operator|>
operator|(
name|ULONG
operator|)
name|array
operator|.
name|size
argument_list|()
condition|)
block|{
name|current
operator|=
name|array
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
return|return
name|S_OK
return|;
block|}
end_function
begin_comment
comment|/* */
end_comment
begin_class
DECL|class|QWindowsAccessible
class|class
name|QWindowsAccessible
super|:
specifier|public
name|IAccessible
super|,
name|IOleWindow
super|,
name|QAccessible
block|{
public|public:
DECL|function|QWindowsAccessible
name|QWindowsAccessible
parameter_list|(
name|QAccessibleInterface
modifier|*
name|a
parameter_list|)
member_init_list|:
name|ref
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|accessible
argument_list|(
name|a
argument_list|)
block|{     }
DECL|function|~QWindowsAccessible
specifier|virtual
name|~
name|QWindowsAccessible
parameter_list|()
block|{
operator|delete
name|accessible
expr_stmt|;
block|}
comment|/* IUnknown */
name|HRESULT
name|STDMETHODCALLTYPE
name|QueryInterface
parameter_list|(
name|REFIID
parameter_list|,
name|LPVOID
modifier|*
parameter_list|)
function_decl|;
name|ULONG
name|STDMETHODCALLTYPE
name|AddRef
parameter_list|()
function_decl|;
name|ULONG
name|STDMETHODCALLTYPE
name|Release
parameter_list|()
function_decl|;
comment|/* IDispatch */
name|HRESULT
name|STDMETHODCALLTYPE
name|GetTypeInfoCount
parameter_list|(
name|unsigned
name|int
modifier|*
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|GetTypeInfo
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|ITypeInfo
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|GetIDsOfNames
parameter_list|(
specifier|const
name|_GUID
modifier|&
parameter_list|,
name|wchar_t
modifier|*
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|long
modifier|*
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|Invoke
parameter_list|(
name|long
parameter_list|,
specifier|const
name|_GUID
modifier|&
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|unsigned
name|short
parameter_list|,
name|tagDISPPARAMS
modifier|*
parameter_list|,
name|tagVARIANT
modifier|*
parameter_list|,
name|tagEXCEPINFO
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
parameter_list|)
function_decl|;
comment|/* IAccessible */
name|HRESULT
name|STDMETHODCALLTYPE
name|accHitTest
parameter_list|(
name|long
name|xLeft
parameter_list|,
name|long
name|yTop
parameter_list|,
name|VARIANT
modifier|*
name|pvarID
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|accLocation
parameter_list|(
name|long
modifier|*
name|pxLeft
parameter_list|,
name|long
modifier|*
name|pyTop
parameter_list|,
name|long
modifier|*
name|pcxWidth
parameter_list|,
name|long
modifier|*
name|pcyHeight
parameter_list|,
name|VARIANT
name|varID
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|accNavigate
parameter_list|(
name|long
name|navDir
parameter_list|,
name|VARIANT
name|varStart
parameter_list|,
name|VARIANT
modifier|*
name|pvarEnd
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|get_accChild
parameter_list|(
name|VARIANT
name|varChildID
parameter_list|,
name|IDispatch
modifier|*
modifier|*
name|ppdispChild
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|get_accChildCount
parameter_list|(
name|long
modifier|*
name|pcountChildren
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|get_accParent
parameter_list|(
name|IDispatch
modifier|*
modifier|*
name|ppdispParent
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|accDoDefaultAction
parameter_list|(
name|VARIANT
name|varID
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|get_accDefaultAction
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszDefaultAction
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|get_accDescription
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszDescription
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|get_accHelp
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszHelp
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|get_accHelpTopic
parameter_list|(
name|BSTR
modifier|*
name|pszHelpFile
parameter_list|,
name|VARIANT
name|varChild
parameter_list|,
name|long
modifier|*
name|pidTopic
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|get_accKeyboardShortcut
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszKeyboardShortcut
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|get_accName
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszName
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|put_accName
parameter_list|(
name|VARIANT
name|varChild
parameter_list|,
name|BSTR
name|szName
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|get_accRole
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|VARIANT
modifier|*
name|pvarRole
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|get_accState
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|VARIANT
modifier|*
name|pvarState
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|get_accValue
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszValue
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|put_accValue
parameter_list|(
name|VARIANT
name|varChild
parameter_list|,
name|BSTR
name|szValue
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|accSelect
parameter_list|(
name|long
name|flagsSelect
parameter_list|,
name|VARIANT
name|varID
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|get_accFocus
parameter_list|(
name|VARIANT
modifier|*
name|pvarID
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|get_accSelection
parameter_list|(
name|VARIANT
modifier|*
name|pvarChildren
parameter_list|)
function_decl|;
comment|/* IOleWindow */
name|HRESULT
name|STDMETHODCALLTYPE
name|GetWindow
parameter_list|(
name|HWND
modifier|*
name|phwnd
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|ContextSensitiveHelp
parameter_list|(
name|BOOL
name|fEnterMode
parameter_list|)
function_decl|;
private|private:
DECL|member|ref
name|ULONG
name|ref
decl_stmt|;
DECL|member|accessible
name|QAccessibleInterface
modifier|*
name|accessible
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|QStringToBSTR
specifier|static
specifier|inline
name|BSTR
name|QStringToBSTR
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|BSTR
name|bstrVal
decl_stmt|;
name|int
name|wlen
init|=
name|str
operator|.
name|length
argument_list|()
operator|+
literal|1
decl_stmt|;
name|bstrVal
operator|=
name|SysAllocStringByteLen
argument_list|(
literal|0
argument_list|,
name|wlen
operator|*
literal|2
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|bstrVal
argument_list|,
name|str
operator|.
name|unicode
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
operator|*
operator|(
name|wlen
operator|)
argument_list|)
expr_stmt|;
name|bstrVal
index|[
name|wlen
index|]
operator|=
literal|0
expr_stmt|;
return|return
name|bstrVal
return|;
block|}
end_function
begin_comment
comment|/* */
end_comment
begin_function
DECL|function|qt_createWindowsAccessible
name|IAccessible
modifier|*
name|qt_createWindowsAccessible
parameter_list|(
name|QAccessibleInterface
modifier|*
name|access
parameter_list|)
block|{
name|QWindowsAccessible
modifier|*
name|acc
init|=
operator|new
name|QWindowsAccessible
argument_list|(
name|access
argument_list|)
decl_stmt|;
name|IAccessible
modifier|*
name|iface
decl_stmt|;
name|acc
operator|->
name|QueryInterface
argument_list|(
name|IID_IAccessible
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|iface
argument_list|)
expr_stmt|;
return|return
name|iface
return|;
block|}
end_function
begin_comment
comment|/*   IUnknown */
end_comment
begin_function
DECL|function|QueryInterface
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|id
parameter_list|,
name|LPVOID
modifier|*
name|iface
parameter_list|)
block|{
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|id
operator|==
name|IID_IUnknown
condition|)
operator|*
name|iface
operator|=
operator|(
name|IUnknown
operator|*
operator|)
operator|(
name|IDispatch
operator|*
operator|)
name|this
expr_stmt|;
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IDispatch
condition|)
operator|*
name|iface
operator|=
operator|(
name|IDispatch
operator|*
operator|)
name|this
expr_stmt|;
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessible
condition|)
operator|*
name|iface
operator|=
operator|(
name|IAccessible
operator|*
operator|)
name|this
expr_stmt|;
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IOleWindow
condition|)
operator|*
name|iface
operator|=
operator|(
name|IOleWindow
operator|*
operator|)
name|this
expr_stmt|;
else|else
return|return
name|E_NOINTERFACE
return|;
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|AddRef
name|ULONG
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|AddRef
parameter_list|()
block|{
return|return
operator|++
name|ref
return|;
block|}
end_function
begin_function
DECL|function|Release
name|ULONG
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|Release
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|--
name|ref
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|ref
return|;
block|}
end_function
begin_comment
comment|/*   IDispatch */
end_comment
begin_function
DECL|function|GetTypeInfoCount
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|GetTypeInfoCount
parameter_list|(
name|unsigned
name|int
modifier|*
name|pctinfo
parameter_list|)
block|{
comment|// We don't use a type library
operator|*
name|pctinfo
operator|=
literal|0
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|GetTypeInfo
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|GetTypeInfo
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|ITypeInfo
modifier|*
modifier|*
name|pptinfo
parameter_list|)
block|{
comment|// We don't use a type library
operator|*
name|pptinfo
operator|=
literal|0
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|GetIDsOfNames
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|GetIDsOfNames
parameter_list|(
specifier|const
name|_GUID
modifier|&
parameter_list|,
name|wchar_t
modifier|*
modifier|*
name|rgszNames
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|long
modifier|*
name|rgdispid
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_CC_BOR
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
comment|// PROPERTIES:  Hierarchical
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accParent"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_PARENT
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accChildCount"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_CHILDCOUNT
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accChild"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_CHILD
expr_stmt|;
comment|// PROPERTIES:  Descriptional
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accName("
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_NAME
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accValue"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_VALUE
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accDescription"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_DESCRIPTION
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accRole"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_ROLE
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accState"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_STATE
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accHelp"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_HELP
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accHelpTopic"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_HELPTOPIC
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accKeyboardShortcut"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_KEYBOARDSHORTCUT
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accFocus"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_FOCUS
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accSelection"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_SELECTION
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accDefaultAction"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_DEFAULTACTION
expr_stmt|;
comment|// METHODS
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accSelect"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_SELECT
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accLocation"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_LOCATION
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accNavigate"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_NAVIGATE
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accHitTest"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_HITTEST
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accDoDefaultAction"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_DODEFAULTACTION
expr_stmt|;
else|else
return|return
name|DISP_E_UNKNOWNINTERFACE
return|;
return|return
name|S_OK
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|rgszNames
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|rgdispid
argument_list|)
expr_stmt|;
return|return
name|DISP_E_MEMBERNOTFOUND
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|Invoke
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|Invoke
parameter_list|(
name|long
name|dispIdMember
parameter_list|,
specifier|const
name|_GUID
modifier|&
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|unsigned
name|short
name|wFlags
parameter_list|,
name|tagDISPPARAMS
modifier|*
name|pDispParams
parameter_list|,
name|tagVARIANT
modifier|*
name|pVarResult
parameter_list|,
name|tagEXCEPINFO
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
parameter_list|)
block|{
name|HRESULT
name|hr
init|=
name|DISP_E_MEMBERNOTFOUND
decl_stmt|;
switch|switch
condition|(
name|dispIdMember
condition|)
block|{
case|case
name|DISPID_ACC_PARENT
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
block|{
if|if
condition|(
operator|!
name|pVarResult
condition|)
return|return
name|E_INVALIDARG
return|;
name|hr
operator|=
name|get_accParent
argument_list|(
operator|&
name|pVarResult
operator|->
name|pdispVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
block|}
break|break;
case|case
name|DISPID_ACC_CHILDCOUNT
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
block|{
if|if
condition|(
operator|!
name|pVarResult
condition|)
return|return
name|E_INVALIDARG
return|;
name|hr
operator|=
name|get_accChildCount
argument_list|(
operator|&
name|pVarResult
operator|->
name|lVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
block|}
break|break;
case|case
name|DISPID_ACC_CHILD
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accChild
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
operator|&
name|pVarResult
operator|->
name|pdispVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_NAME
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accName
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
operator|&
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYPUT
condition|)
name|hr
operator|=
name|put_accName
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_VALUE
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accValue
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
operator|&
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYPUT
condition|)
name|hr
operator|=
name|put_accValue
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_DESCRIPTION
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accDescription
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
operator|&
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_ROLE
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accRole
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
name|pVarResult
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_STATE
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accState
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
name|pVarResult
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_HELP
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accHelp
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
operator|&
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_HELPTOPIC
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accHelpTopic
argument_list|(
operator|&
name|pDispParams
operator|->
name|rgvarg
index|[
literal|2
index|]
operator|.
name|bstrVal
argument_list|,
name|pDispParams
operator|->
name|rgvarg
index|[
literal|1
index|]
argument_list|,
operator|&
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
operator|.
name|lVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_KEYBOARDSHORTCUT
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accKeyboardShortcut
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
operator|&
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_FOCUS
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accFocus
argument_list|(
name|pVarResult
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_SELECTION
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accSelection
argument_list|(
name|pVarResult
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_DEFAULTACTION
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accDefaultAction
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
operator|&
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_SELECT
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_METHOD
condition|)
name|hr
operator|=
name|accSelect
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|1
index|]
operator|.
name|lVal
argument_list|,
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_LOCATION
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_METHOD
condition|)
name|hr
operator|=
name|accLocation
argument_list|(
operator|&
name|pDispParams
operator|->
name|rgvarg
index|[
literal|4
index|]
operator|.
name|lVal
argument_list|,
operator|&
name|pDispParams
operator|->
name|rgvarg
index|[
literal|3
index|]
operator|.
name|lVal
argument_list|,
operator|&
name|pDispParams
operator|->
name|rgvarg
index|[
literal|2
index|]
operator|.
name|lVal
argument_list|,
operator|&
name|pDispParams
operator|->
name|rgvarg
index|[
literal|1
index|]
operator|.
name|lVal
argument_list|,
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_NAVIGATE
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_METHOD
condition|)
name|hr
operator|=
name|accNavigate
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|1
index|]
operator|.
name|lVal
argument_list|,
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
name|pVarResult
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_HITTEST
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_METHOD
condition|)
name|hr
operator|=
name|accHitTest
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|1
index|]
operator|.
name|lVal
argument_list|,
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
operator|.
name|lVal
argument_list|,
name|pVarResult
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_DODEFAULTACTION
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_METHOD
condition|)
name|hr
operator|=
name|accDoDefaultAction
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
default|default:
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
return|return
name|hr
return|;
block|}
return|return
name|hr
return|;
block|}
end_function
begin_comment
comment|/*   IAccessible */
end_comment
begin_function
DECL|function|accHitTest
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|accHitTest
parameter_list|(
name|long
name|xLeft
parameter_list|,
name|long
name|yTop
parameter_list|,
name|VARIANT
modifier|*
name|pvarID
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
name|int
name|control
init|=
name|accessible
operator|->
name|childAt
argument_list|(
name|xLeft
argument_list|,
name|yTop
argument_list|)
decl_stmt|;
if|if
condition|(
name|control
operator|==
operator|-
literal|1
condition|)
block|{
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
name|QAccessibleInterface
modifier|*
name|acc
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|control
condition|)
name|accessible
operator|->
name|navigate
argument_list|(
name|Child
argument_list|,
name|control
argument_list|,
operator|&
name|acc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|acc
condition|)
block|{
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|lVal
operator|=
name|control
expr_stmt|;
return|return
name|S_OK
return|;
block|}
name|QWindowsAccessible
modifier|*
name|wacc
init|=
operator|new
name|QWindowsAccessible
argument_list|(
name|acc
argument_list|)
decl_stmt|;
name|IDispatch
modifier|*
name|iface
init|=
literal|0
decl_stmt|;
name|wacc
operator|->
name|QueryInterface
argument_list|(
name|IID_IDispatch
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|iface
argument_list|)
expr_stmt|;
if|if
condition|(
name|iface
condition|)
block|{
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|vt
operator|=
name|VT_DISPATCH
expr_stmt|;
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|pdispVal
operator|=
name|iface
expr_stmt|;
return|return
name|S_OK
return|;
block|}
else|else
block|{
operator|delete
name|wacc
expr_stmt|;
block|}
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|accLocation
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|accLocation
parameter_list|(
name|long
modifier|*
name|pxLeft
parameter_list|,
name|long
modifier|*
name|pyTop
parameter_list|,
name|long
modifier|*
name|pcxWidth
parameter_list|,
name|long
modifier|*
name|pcyHeight
parameter_list|,
name|VARIANT
name|varID
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
name|QRect
name|rect
init|=
name|accessible
operator|->
name|rect
argument_list|(
name|varID
operator|.
name|lVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isValid
argument_list|()
condition|)
block|{
operator|*
name|pxLeft
operator|=
name|rect
operator|.
name|x
argument_list|()
expr_stmt|;
operator|*
name|pyTop
operator|=
name|rect
operator|.
name|y
argument_list|()
expr_stmt|;
operator|*
name|pcxWidth
operator|=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
operator|*
name|pcyHeight
operator|=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|*
name|pxLeft
operator|=
literal|0
expr_stmt|;
operator|*
name|pyTop
operator|=
literal|0
expr_stmt|;
operator|*
name|pcxWidth
operator|=
literal|0
expr_stmt|;
operator|*
name|pcyHeight
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|accNavigate
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|accNavigate
parameter_list|(
name|long
name|navDir
parameter_list|,
name|VARIANT
name|varStart
parameter_list|,
name|VARIANT
modifier|*
name|pvarEnd
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
name|QAccessibleInterface
modifier|*
name|acc
init|=
literal|0
decl_stmt|;
name|int
name|control
init|=
operator|-
literal|1
decl_stmt|;
switch|switch
condition|(
name|navDir
condition|)
block|{
case|case
name|NAVDIR_FIRSTCHILD
case|:
name|control
operator|=
name|accessible
operator|->
name|navigate
argument_list|(
name|Child
argument_list|,
literal|1
argument_list|,
operator|&
name|acc
argument_list|)
expr_stmt|;
break|break;
case|case
name|NAVDIR_LASTCHILD
case|:
name|control
operator|=
name|accessible
operator|->
name|navigate
argument_list|(
name|Child
argument_list|,
name|accessible
operator|->
name|childCount
argument_list|()
argument_list|,
operator|&
name|acc
argument_list|)
expr_stmt|;
break|break;
case|case
name|NAVDIR_NEXT
case|:
case|case
name|NAVDIR_PREVIOUS
case|:
if|if
condition|(
operator|!
name|varStart
operator|.
name|lVal
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|parent
init|=
literal|0
decl_stmt|;
name|accessible
operator|->
name|navigate
argument_list|(
name|Ancestor
argument_list|,
literal|1
argument_list|,
operator|&
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
condition|)
block|{
name|int
name|index
init|=
name|parent
operator|->
name|indexOfChild
argument_list|(
name|accessible
argument_list|)
decl_stmt|;
name|index
operator|+=
operator|(
name|navDir
operator|==
name|NAVDIR_NEXT
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
operator|&&
name|index
operator|<=
name|parent
operator|->
name|childCount
argument_list|()
condition|)
name|control
operator|=
name|parent
operator|->
name|navigate
argument_list|(
name|Child
argument_list|,
name|index
argument_list|,
operator|&
name|acc
argument_list|)
expr_stmt|;
operator|delete
name|parent
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|index
init|=
name|varStart
operator|.
name|lVal
decl_stmt|;
name|index
operator|+=
operator|(
name|navDir
operator|==
name|NAVDIR_NEXT
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
operator|&&
name|index
operator|<=
name|accessible
operator|->
name|childCount
argument_list|()
condition|)
name|control
operator|=
name|accessible
operator|->
name|navigate
argument_list|(
name|Child
argument_list|,
name|index
argument_list|,
operator|&
name|acc
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NAVDIR_UP
case|:
name|control
operator|=
name|accessible
operator|->
name|navigate
argument_list|(
name|Up
argument_list|,
name|varStart
operator|.
name|lVal
argument_list|,
operator|&
name|acc
argument_list|)
expr_stmt|;
break|break;
case|case
name|NAVDIR_DOWN
case|:
name|control
operator|=
name|accessible
operator|->
name|navigate
argument_list|(
name|Down
argument_list|,
name|varStart
operator|.
name|lVal
argument_list|,
operator|&
name|acc
argument_list|)
expr_stmt|;
break|break;
case|case
name|NAVDIR_LEFT
case|:
name|control
operator|=
name|accessible
operator|->
name|navigate
argument_list|(
name|Left
argument_list|,
name|varStart
operator|.
name|lVal
argument_list|,
operator|&
name|acc
argument_list|)
expr_stmt|;
break|break;
case|case
name|NAVDIR_RIGHT
case|:
name|control
operator|=
name|accessible
operator|->
name|navigate
argument_list|(
name|Right
argument_list|,
name|varStart
operator|.
name|lVal
argument_list|,
operator|&
name|acc
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|control
operator|==
operator|-
literal|1
condition|)
block|{
operator|(
operator|*
name|pvarEnd
operator|)
operator|.
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
if|if
condition|(
operator|!
name|acc
condition|)
block|{
operator|(
operator|*
name|pvarEnd
operator|)
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
operator|(
operator|*
name|pvarEnd
operator|)
operator|.
name|lVal
operator|=
name|control
expr_stmt|;
return|return
name|S_OK
return|;
block|}
name|QWindowsAccessible
modifier|*
name|wacc
init|=
operator|new
name|QWindowsAccessible
argument_list|(
name|acc
argument_list|)
decl_stmt|;
name|IDispatch
modifier|*
name|iface
init|=
literal|0
decl_stmt|;
name|wacc
operator|->
name|QueryInterface
argument_list|(
name|IID_IDispatch
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|iface
argument_list|)
expr_stmt|;
if|if
condition|(
name|iface
condition|)
block|{
operator|(
operator|*
name|pvarEnd
operator|)
operator|.
name|vt
operator|=
name|VT_DISPATCH
expr_stmt|;
operator|(
operator|*
name|pvarEnd
operator|)
operator|.
name|pdispVal
operator|=
name|iface
expr_stmt|;
return|return
name|S_OK
return|;
block|}
else|else
block|{
operator|delete
name|wacc
expr_stmt|;
block|}
operator|(
operator|*
name|pvarEnd
operator|)
operator|.
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_accChild
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|get_accChild
parameter_list|(
name|VARIANT
name|varChildID
parameter_list|,
name|IDispatch
modifier|*
modifier|*
name|ppdispChild
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|varChildID
operator|.
name|vt
operator|==
name|VT_EMPTY
condition|)
return|return
name|E_INVALIDARG
return|;
name|int
name|childIndex
init|=
name|varChildID
operator|.
name|lVal
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|acc
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|childIndex
operator|<
literal|0
condition|)
block|{
specifier|const
name|int
name|entry
init|=
name|childIndex
decl_stmt|;
name|QPair
argument_list|<
name|QObject
modifier|*
argument_list|,
name|int
argument_list|>
name|ref
init|=
name|qAccessibleRecentSentEvents
argument_list|()
operator|->
name|value
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|first
condition|)
block|{
name|acc
operator|=
name|queryAccessibleInterface
argument_list|(
name|ref
operator|.
name|first
argument_list|)
expr_stmt|;
if|if
condition|(
name|acc
operator|&&
name|ref
operator|.
name|second
condition|)
block|{
if|if
condition|(
name|ref
operator|.
name|second
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|res
decl_stmt|;
name|int
name|index
init|=
name|acc
operator|->
name|navigate
argument_list|(
name|Child
argument_list|,
name|ref
operator|.
name|second
argument_list|,
operator|&
name|res
argument_list|)
decl_stmt|;
operator|delete
name|acc
expr_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
return|return
name|E_INVALIDARG
return|;
name|acc
operator|=
name|res
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|RelationFlag
name|rel
init|=
name|childIndex
condition|?
name|Child
else|:
name|Self
decl_stmt|;
name|accessible
operator|->
name|navigate
argument_list|(
name|rel
argument_list|,
name|childIndex
argument_list|,
operator|&
name|acc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acc
condition|)
block|{
name|QWindowsAccessible
modifier|*
name|wacc
init|=
operator|new
name|QWindowsAccessible
argument_list|(
name|acc
argument_list|)
decl_stmt|;
name|wacc
operator|->
name|QueryInterface
argument_list|(
name|IID_IDispatch
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
name|ppdispChild
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
operator|*
name|ppdispChild
operator|=
literal|0
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_accChildCount
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|get_accChildCount
parameter_list|(
name|long
modifier|*
name|pcountChildren
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|pcountChildren
operator|=
name|accessible
operator|->
name|childCount
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_accParent
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|get_accParent
parameter_list|(
name|IDispatch
modifier|*
modifier|*
name|ppdispParent
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
name|QAccessibleInterface
modifier|*
name|acc
init|=
literal|0
decl_stmt|;
name|accessible
operator|->
name|navigate
argument_list|(
name|Ancestor
argument_list|,
literal|1
argument_list|,
operator|&
name|acc
argument_list|)
expr_stmt|;
if|if
condition|(
name|acc
condition|)
block|{
name|QWindowsAccessible
modifier|*
name|wacc
init|=
operator|new
name|QWindowsAccessible
argument_list|(
name|acc
argument_list|)
decl_stmt|;
name|wacc
operator|->
name|QueryInterface
argument_list|(
name|IID_IDispatch
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
name|ppdispParent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|ppdispParent
condition|)
return|return
name|S_OK
return|;
block|}
operator|*
name|ppdispParent
operator|=
literal|0
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_comment
comment|/*   Properties and methods */
end_comment
begin_function
DECL|function|accDoDefaultAction
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|accDoDefaultAction
parameter_list|(
name|VARIANT
name|varID
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
return|return
name|accessible
operator|->
name|doAction
argument_list|(
name|DefaultAction
argument_list|,
name|varID
operator|.
name|lVal
argument_list|,
name|QVariantList
argument_list|()
argument_list|)
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_accDefaultAction
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|get_accDefaultAction
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszDefaultAction
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
name|QString
name|def
init|=
name|accessible
operator|->
name|actionText
argument_list|(
name|DefaultAction
argument_list|,
name|Name
argument_list|,
name|varID
operator|.
name|lVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|*
name|pszDefaultAction
operator|=
literal|0
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
operator|*
name|pszDefaultAction
operator|=
name|QStringToBSTR
argument_list|(
name|def
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_accDescription
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|get_accDescription
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszDescription
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
name|QString
name|descr
init|=
name|accessible
operator|->
name|text
argument_list|(
name|Description
argument_list|,
name|varID
operator|.
name|lVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|descr
operator|.
name|size
argument_list|()
condition|)
block|{
operator|*
name|pszDescription
operator|=
name|QStringToBSTR
argument_list|(
name|descr
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
operator|*
name|pszDescription
operator|=
literal|0
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_accHelp
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|get_accHelp
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszHelp
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
name|QString
name|help
init|=
name|accessible
operator|->
name|text
argument_list|(
name|Help
argument_list|,
name|varID
operator|.
name|lVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|help
operator|.
name|size
argument_list|()
condition|)
block|{
operator|*
name|pszHelp
operator|=
name|QStringToBSTR
argument_list|(
name|help
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
operator|*
name|pszHelp
operator|=
literal|0
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_accHelpTopic
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|get_accHelpTopic
parameter_list|(
name|BSTR
modifier|*
parameter_list|,
name|VARIANT
parameter_list|,
name|long
modifier|*
parameter_list|)
block|{
return|return
name|DISP_E_MEMBERNOTFOUND
return|;
block|}
end_function
begin_function
DECL|function|get_accKeyboardShortcut
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|get_accKeyboardShortcut
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszKeyboardShortcut
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
name|QString
name|sc
init|=
name|accessible
operator|->
name|text
argument_list|(
name|Accelerator
argument_list|,
name|varID
operator|.
name|lVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|sc
operator|.
name|size
argument_list|()
condition|)
block|{
operator|*
name|pszKeyboardShortcut
operator|=
name|QStringToBSTR
argument_list|(
name|sc
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
operator|*
name|pszKeyboardShortcut
operator|=
literal|0
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_accName
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|get_accName
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszName
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
name|QString
name|n
init|=
name|accessible
operator|->
name|text
argument_list|(
name|Name
argument_list|,
name|varID
operator|.
name|lVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|size
argument_list|()
condition|)
block|{
operator|*
name|pszName
operator|=
name|QStringToBSTR
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
operator|*
name|pszName
operator|=
literal|0
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|put_accName
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|put_accName
parameter_list|(
name|VARIANT
parameter_list|,
name|BSTR
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
return|return
name|DISP_E_MEMBERNOTFOUND
return|;
block|}
end_function
begin_function
DECL|function|get_accRole
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|get_accRole
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|VARIANT
modifier|*
name|pvarRole
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
name|Role
name|role
init|=
name|accessible
operator|->
name|role
argument_list|(
name|varID
operator|.
name|lVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|!=
name|NoRole
condition|)
block|{
if|if
condition|(
name|role
operator|==
name|LayeredPane
condition|)
name|role
operator|=
name|QAccessible
operator|::
name|Pane
expr_stmt|;
operator|(
operator|*
name|pvarRole
operator|)
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
operator|(
operator|*
name|pvarRole
operator|)
operator|.
name|lVal
operator|=
name|role
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|*
name|pvarRole
operator|)
operator|.
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
block|}
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_accState
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|get_accState
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|VARIANT
modifier|*
name|pvarState
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
operator|(
operator|*
name|pvarState
operator|)
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
operator|(
operator|*
name|pvarState
operator|)
operator|.
name|lVal
operator|=
name|accessible
operator|->
name|state
argument_list|(
name|varID
operator|.
name|lVal
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_accValue
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|get_accValue
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszValue
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
name|QString
name|value
init|=
name|accessible
operator|->
name|text
argument_list|(
name|Value
argument_list|,
name|varID
operator|.
name|lVal
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isNull
argument_list|()
condition|)
block|{
operator|*
name|pszValue
operator|=
name|QStringToBSTR
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
operator|*
name|pszValue
operator|=
literal|0
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|put_accValue
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|put_accValue
parameter_list|(
name|VARIANT
parameter_list|,
name|BSTR
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
return|return
name|DISP_E_MEMBERNOTFOUND
return|;
block|}
end_function
begin_function
DECL|function|accSelect
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|accSelect
parameter_list|(
name|long
name|flagsSelect
parameter_list|,
name|VARIANT
name|varID
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
name|bool
name|res
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|flagsSelect
operator|&
name|SELFLAG_TAKEFOCUS
condition|)
name|res
operator|=
name|accessible
operator|->
name|doAction
argument_list|(
name|SetFocus
argument_list|,
name|varID
operator|.
name|lVal
argument_list|,
name|QVariantList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flagsSelect
operator|&
name|SELFLAG_TAKESELECTION
condition|)
block|{
name|accessible
operator|->
name|doAction
argument_list|(
name|ClearSelection
argument_list|,
literal|0
argument_list|,
name|QVariantList
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|accessible
operator|->
name|doAction
argument_list|(
name|AddToSelection
argument_list|,
name|varID
operator|.
name|lVal
argument_list|,
name|QVariantList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flagsSelect
operator|&
name|SELFLAG_EXTENDSELECTION
condition|)
name|res
operator|=
name|accessible
operator|->
name|doAction
argument_list|(
name|ExtendSelection
argument_list|,
name|varID
operator|.
name|lVal
argument_list|,
name|QVariantList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flagsSelect
operator|&
name|SELFLAG_ADDSELECTION
condition|)
name|res
operator|=
name|accessible
operator|->
name|doAction
argument_list|(
name|AddToSelection
argument_list|,
name|varID
operator|.
name|lVal
argument_list|,
name|QVariantList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flagsSelect
operator|&
name|SELFLAG_REMOVESELECTION
condition|)
name|res
operator|=
name|accessible
operator|->
name|doAction
argument_list|(
name|RemoveSelection
argument_list|,
name|varID
operator|.
name|lVal
argument_list|,
name|QVariantList
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|res
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_accFocus
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|get_accFocus
parameter_list|(
name|VARIANT
modifier|*
name|pvarID
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
name|QAccessibleInterface
modifier|*
name|acc
init|=
literal|0
decl_stmt|;
name|int
name|control
init|=
name|accessible
operator|->
name|navigate
argument_list|(
name|FocusChild
argument_list|,
literal|1
argument_list|,
operator|&
name|acc
argument_list|)
decl_stmt|;
if|if
condition|(
name|control
operator|==
operator|-
literal|1
condition|)
block|{
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
if|if
condition|(
operator|!
name|acc
operator|||
name|control
operator|==
literal|0
condition|)
block|{
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|lVal
operator|=
name|control
condition|?
name|control
else|:
name|CHILDID_SELF
expr_stmt|;
return|return
name|S_OK
return|;
block|}
name|QWindowsAccessible
modifier|*
name|wacc
init|=
operator|new
name|QWindowsAccessible
argument_list|(
name|acc
argument_list|)
decl_stmt|;
name|IDispatch
modifier|*
name|iface
init|=
literal|0
decl_stmt|;
name|wacc
operator|->
name|QueryInterface
argument_list|(
name|IID_IDispatch
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|iface
argument_list|)
expr_stmt|;
if|if
condition|(
name|iface
condition|)
block|{
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|vt
operator|=
name|VT_DISPATCH
expr_stmt|;
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|pdispVal
operator|=
name|iface
expr_stmt|;
return|return
name|S_OK
return|;
block|}
else|else
block|{
operator|delete
name|wacc
expr_stmt|;
block|}
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_accSelection
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|get_accSelection
parameter_list|(
name|VARIANT
modifier|*
name|pvarChildren
parameter_list|)
block|{
name|showDebug
argument_list|(
name|__FUNCTION__
argument_list|,
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
name|int
name|cc
init|=
name|accessible
operator|->
name|childCount
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|sel
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|int
name|selIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|cc
condition|;
operator|++
name|i
control|)
block|{
name|QAccessibleInterface
modifier|*
name|child
init|=
literal|0
decl_stmt|;
name|int
name|i2
init|=
name|accessible
operator|->
name|navigate
argument_list|(
name|Child
argument_list|,
name|i
argument_list|,
operator|&
name|child
argument_list|)
decl_stmt|;
name|bool
name|isSelected
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|child
condition|)
block|{
name|isSelected
operator|=
name|child
operator|->
name|state
argument_list|(
literal|0
argument_list|)
operator|&
name|Selected
expr_stmt|;
operator|delete
name|child
expr_stmt|;
name|child
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|isSelected
operator|=
name|accessible
operator|->
name|state
argument_list|(
name|i2
argument_list|)
operator|&
name|Selected
expr_stmt|;
block|}
if|if
condition|(
name|isSelected
condition|)
name|sel
index|[
name|selIndex
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
name|sel
operator|.
name|resize
argument_list|(
name|selIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|sel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|(
operator|*
name|pvarChildren
operator|)
operator|.
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
if|if
condition|(
name|sel
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
operator|(
operator|*
name|pvarChildren
operator|)
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
operator|(
operator|*
name|pvarChildren
operator|)
operator|.
name|lVal
operator|=
name|sel
index|[
literal|0
index|]
expr_stmt|;
return|return
name|S_OK
return|;
block|}
name|IEnumVARIANT
modifier|*
name|iface
init|=
operator|new
name|QWindowsEnumerate
argument_list|(
name|sel
argument_list|)
decl_stmt|;
name|IUnknown
modifier|*
name|uiface
decl_stmt|;
name|iface
operator|->
name|QueryInterface
argument_list|(
name|IID_IUnknown
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|uiface
argument_list|)
expr_stmt|;
operator|(
operator|*
name|pvarChildren
operator|)
operator|.
name|vt
operator|=
name|VT_UNKNOWN
expr_stmt|;
operator|(
operator|*
name|pvarChildren
operator|)
operator|.
name|punkVal
operator|=
name|uiface
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|GetWindow
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|GetWindow
parameter_list|(
name|HWND
modifier|*
name|phwnd
parameter_list|)
block|{
operator|*
name|phwnd
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_UNEXPECTED
return|;
name|QObject
modifier|*
name|o
init|=
name|accessible
operator|->
name|object
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|o
operator|||
operator|!
name|o
operator|->
name|isWidgetType
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|phwnd
operator|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
operator|->
name|effectiveWinId
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|ContextSensitiveHelp
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsAccessible
operator|::
name|ContextSensitiveHelp
parameter_list|(
name|BOOL
parameter_list|)
block|{
return|return
name|S_OK
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
end_unit
