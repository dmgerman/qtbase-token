begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qaccessiblewidget.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qaction.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qgroupbox.h"
end_include
begin_include
include|#
directive|include
file|"qlabel.h"
end_include
begin_include
include|#
directive|include
file|"qtooltip.h"
end_include
begin_include
include|#
directive|include
file|"qwhatsthis.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<QRubberBand>
end_include
begin_include
include|#
directive|include
file|<QFocusFrame>
end_include
begin_include
include|#
directive|include
file|<QMenu>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|childWidgets
specifier|static
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|childWidgets
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QList
argument_list|<
name|QObject
modifier|*
argument_list|>
name|list
init|=
name|widget
operator|->
name|children
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|widgets
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|&&
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|qobject_cast
argument_list|<
name|QFocusFrame
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_MENU
argument_list|)
operator|&&
operator|!
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
endif|#
directive|endif
operator|&&
name|w
operator|->
name|objectName
argument_list|()
operator|!=
name|QLatin1String
argument_list|(
literal|"qt_rubberband"
argument_list|)
condition|)
name|widgets
operator|.
name|append
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
return|return
name|widgets
return|;
block|}
end_function
begin_function
DECL|function|buddyString
specifier|static
name|QString
name|buddyString
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return
name|QString
argument_list|()
return|;
name|QWidget
modifier|*
name|parent
init|=
name|widget
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parent
condition|)
return|return
name|QString
argument_list|()
return|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|QObjectList
name|ol
init|=
name|parent
operator|->
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ol
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QLabel
modifier|*
name|label
init|=
name|qobject_cast
argument_list|<
name|QLabel
operator|*
argument_list|>
argument_list|(
name|ol
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|label
operator|&&
name|label
operator|->
name|buddy
argument_list|()
operator|==
name|widget
condition|)
return|return
name|label
operator|->
name|text
argument_list|()
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
name|QGroupBox
modifier|*
name|groupbox
init|=
name|qobject_cast
argument_list|<
name|QGroupBox
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupbox
condition|)
return|return
name|groupbox
operator|->
name|title
argument_list|()
return|;
endif|#
directive|endif
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qt_accStripAmp
name|QString
name|Q_WIDGETS_EXPORT
name|qt_accStripAmp
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
return|return
name|QString
argument_list|(
name|text
argument_list|)
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_accHotKey
name|QString
name|Q_WIDGETS_EXPORT
name|qt_accHotKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|text
return|;
name|int
name|fa
init|=
literal|0
decl_stmt|;
name|QChar
name|ac
decl_stmt|;
while|while
condition|(
operator|(
name|fa
operator|=
name|text
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
argument_list|,
name|fa
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
operator|++
name|fa
expr_stmt|;
if|if
condition|(
name|fa
operator|<
name|text
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// ignore "&&"
if|if
condition|(
name|text
operator|.
name|at
argument_list|(
name|fa
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
condition|)
block|{
operator|++
name|fa
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|ac
operator|=
name|text
operator|.
name|at
argument_list|(
name|fa
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|ac
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
operator|(
name|QString
operator|)
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|ALT
argument_list|)
operator|+
name|ac
operator|.
name|toUpper
argument_list|()
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
endif|#
directive|endif
block|}
end_function
begin_class
DECL|class|QAccessibleWidgetPrivate
class|class
name|QAccessibleWidgetPrivate
block|{
public|public:
DECL|function|QAccessibleWidgetPrivate
name|QAccessibleWidgetPrivate
parameter_list|()
member_init_list|:
name|role
argument_list|(
name|QAccessible
operator|::
name|Client
argument_list|)
block|{}
DECL|member|role
name|QAccessible
operator|::
name|Role
name|role
decl_stmt|;
DECL|member|name
name|QString
name|name
decl_stmt|;
DECL|member|description
name|QString
name|description
decl_stmt|;
DECL|member|value
name|QString
name|value
decl_stmt|;
DECL|member|help
name|QString
name|help
decl_stmt|;
DECL|member|accelerator
name|QString
name|accelerator
decl_stmt|;
DECL|member|primarySignals
name|QStringList
name|primarySignals
decl_stmt|;
DECL|member|asking
specifier|const
name|QAccessibleInterface
modifier|*
name|asking
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \class QAccessibleWidget     \brief The QAccessibleWidget class implements the QAccessibleInterface for QWidgets.      \ingroup accessibility     \inmodule QtWidgets      This class is convenient to use as a base class for custom     implementations of QAccessibleInterfaces that provide information     about widget objects.      The class provides functions to retrieve the parentObject() (the     widget's parent widget), and the associated widget(). Controlling     signals can be added with addControllingSignal(), and setters are     provided for various aspects of the interface implementation, for     example setValue(), setDescription(), setAccelerator(), and     setHelp().      \sa QAccessible, QAccessibleObject */
end_comment
begin_comment
comment|/*!     Creates a QAccessibleWidget object for widget \a w.     \a role and \a name are optional parameters that set the object's     role and name properties. */
end_comment
begin_constructor
DECL|function|QAccessibleWidget
name|QAccessibleWidget
operator|::
name|QAccessibleWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|QAccessible
operator|::
name|Role
name|role
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
member_init_list|:
name|QAccessibleObject
argument_list|(
name|w
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|widget
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|QAccessibleWidgetPrivate
argument_list|()
expr_stmt|;
name|d
operator|->
name|role
operator|=
name|role
expr_stmt|;
name|d
operator|->
name|name
operator|=
name|name
expr_stmt|;
name|d
operator|->
name|asking
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|window
name|QWindow
modifier|*
name|QAccessibleWidget
operator|::
name|window
parameter_list|()
specifier|const
block|{
return|return
name|widget
argument_list|()
operator|->
name|windowHandle
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Destroys this object. */
end_comment
begin_destructor
DECL|function|~QAccessibleWidget
name|QAccessibleWidget
operator|::
name|~
name|QAccessibleWidget
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Returns the associated widget. */
end_comment
begin_function
DECL|function|widget
name|QWidget
modifier|*
name|QAccessibleWidget
operator|::
name|widget
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the associated widget's parent object, which is either the     parent widget, or qApp for top-level widgets. */
end_comment
begin_function
DECL|function|parentObject
name|QObject
modifier|*
name|QAccessibleWidget
operator|::
name|parentObject
parameter_list|()
specifier|const
block|{
name|QObject
modifier|*
name|parent
init|=
name|object
argument_list|()
operator|->
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parent
condition|)
name|parent
operator|=
name|qApp
expr_stmt|;
return|return
name|parent
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|rect
name|QRect
name|QAccessibleWidget
operator|::
name|rect
parameter_list|()
specifier|const
block|{
name|QWidget
modifier|*
name|w
init|=
name|widget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QPoint
name|wpos
init|=
name|w
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|wpos
operator|.
name|x
argument_list|()
argument_list|,
name|wpos
operator|.
name|y
argument_list|()
argument_list|,
name|w
operator|->
name|width
argument_list|()
argument_list|,
name|w
operator|->
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<private/qobject_p.h>
name|QT_END_INCLUDE_NAMESPACE
DECL|class|QACConnectionObject
name|class
name|QACConnectionObject
operator|:
specifier|public
name|QObject
block|{
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QObject
argument_list|)
specifier|public
operator|:
DECL|function|isSender
specifier|inline
name|bool
name|isSender
argument_list|(
argument|const QObject *receiver
argument_list|,
argument|const char *signal
argument_list|)
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|isSender
argument_list|(
name|receiver
argument_list|,
name|signal
argument_list|)
return|;
block|}
DECL|function|receiverList
specifier|inline
name|QObjectList
name|receiverList
argument_list|(
argument|const char *signal
argument_list|)
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|receiverList
argument_list|(
name|signal
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
DECL|function|senderList
specifier|inline
name|QObjectList
name|senderList
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|senderList
argument_list|()
return|;
block|}
end_function
begin_comment
unit|};
comment|/*!     Registers \a signal as a controlling signal.      An object is a Controller to any other object connected to a     controlling signal. */
end_comment
begin_function
DECL|function|addControllingSignal
name|void
name|QAccessibleWidget
operator|::
name|addControllingSignal
parameter_list|(
specifier|const
name|QString
modifier|&
name|signal
parameter_list|)
block|{
name|QByteArray
name|s
init|=
name|QMetaObject
operator|::
name|normalizedSignature
argument_list|(
name|signal
operator|.
name|toAscii
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|indexOfSignal
argument_list|(
name|s
argument_list|)
operator|<
literal|0
condition|)
name|qWarning
argument_list|(
literal|"Signal %s unknown in %s"
argument_list|,
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|object
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|primarySignals
operator|<<
name|QLatin1String
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the value of this interface implementation to \a value.      The default implementation of text() returns the set value for     the Value text.      Note that the object wrapped by this interface is not modified. */
end_comment
begin_function
DECL|function|setValue
name|void
name|QAccessibleWidget
operator|::
name|setValue
parameter_list|(
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
block|{
name|d
operator|->
name|value
operator|=
name|value
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the description of this interface implementation to \a desc.      The default implementation of text() returns the set value for     the Description text.      Note that the object wrapped by this interface is not modified. */
end_comment
begin_function
DECL|function|setDescription
name|void
name|QAccessibleWidget
operator|::
name|setDescription
parameter_list|(
specifier|const
name|QString
modifier|&
name|desc
parameter_list|)
block|{
name|d
operator|->
name|description
operator|=
name|desc
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the help of this interface implementation to \a help.      The default implementation of text() returns the set value for     the Help text.      Note that the object wrapped by this interface is not modified. */
end_comment
begin_function
DECL|function|setHelp
name|void
name|QAccessibleWidget
operator|::
name|setHelp
parameter_list|(
specifier|const
name|QString
modifier|&
name|help
parameter_list|)
block|{
name|d
operator|->
name|help
operator|=
name|help
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the accelerator of this interface implementation to \a accel.      The default implementation of text() returns the set value for     the Accelerator text.      Note that the object wrapped by this interface is not modified. */
end_comment
begin_function
DECL|function|setAccelerator
name|void
name|QAccessibleWidget
operator|::
name|setAccelerator
parameter_list|(
specifier|const
name|QString
modifier|&
name|accel
parameter_list|)
block|{
name|d
operator|->
name|accelerator
operator|=
name|accel
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isAncestor
specifier|static
specifier|inline
name|bool
name|isAncestor
parameter_list|(
specifier|const
name|QObject
modifier|*
name|obj
parameter_list|,
specifier|const
name|QObject
modifier|*
name|child
parameter_list|)
block|{
while|while
condition|(
name|child
condition|)
block|{
if|if
condition|(
name|child
operator|==
name|obj
condition|)
return|return
literal|true
return|;
name|child
operator|=
name|child
operator|->
name|parent
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|relationTo
name|QAccessible
operator|::
name|Relation
name|QAccessibleWidget
operator|::
name|relationTo
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|other
parameter_list|)
specifier|const
block|{
name|QAccessible
operator|::
name|Relation
name|relation
init|=
name|QAccessible
operator|::
name|Unrelated
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|asking
operator|==
name|this
condition|)
comment|// recursive call
return|return
name|relation
return|;
name|QObject
modifier|*
name|o
init|=
name|other
condition|?
name|other
operator|->
name|object
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|o
condition|)
return|return
name|relation
return|;
name|QWidget
modifier|*
name|focus
init|=
name|widget
argument_list|()
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
argument_list|()
operator|==
name|focus
operator|&&
name|isAncestor
argument_list|(
name|o
argument_list|,
name|focus
argument_list|)
condition|)
name|relation
operator||=
name|QAccessible
operator|::
name|FocusChild
expr_stmt|;
name|QACConnectionObject
modifier|*
name|connectionObject
init|=
operator|(
name|QACConnectionObject
operator|*
operator|)
name|object
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|sig
init|=
literal|0
init|;
name|sig
operator|<
name|d
operator|->
name|primarySignals
operator|.
name|count
argument_list|()
condition|;
operator|++
name|sig
control|)
block|{
if|if
condition|(
name|connectionObject
operator|->
name|isSender
argument_list|(
name|o
argument_list|,
name|d
operator|->
name|primarySignals
operator|.
name|at
argument_list|(
name|sig
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
condition|)
block|{
name|relation
operator||=
name|QAccessible
operator|::
name|Controller
expr_stmt|;
break|break;
block|}
block|}
comment|// test for passive relationships.
comment|// d->asking protects from endless recursion.
name|d
operator|->
name|asking
operator|=
name|this
expr_stmt|;
name|int
name|inverse
init|=
name|other
operator|->
name|relationTo
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|d
operator|->
name|asking
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|inverse
operator|&
name|QAccessible
operator|::
name|Controller
condition|)
name|relation
operator||=
name|QAccessible
operator|::
name|Controlled
expr_stmt|;
if|if
condition|(
name|inverse
operator|&
name|QAccessible
operator|::
name|Label
condition|)
name|relation
operator||=
name|QAccessible
operator|::
name|Labelled
expr_stmt|;
if|if
condition|(
name|o
operator|==
name|object
argument_list|()
condition|)
block|{
return|return
name|relation
operator||
name|QAccessible
operator|::
name|Self
return|;
block|}
name|QObject
modifier|*
name|parent
init|=
name|object
argument_list|()
operator|->
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|==
name|parent
condition|)
return|return
name|relation
operator||
name|QAccessible
operator|::
name|Child
return|;
if|if
condition|(
name|o
operator|->
name|parent
argument_list|()
operator|==
name|parent
condition|)
block|{
name|relation
operator||=
name|QAccessible
operator|::
name|Sibling
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|sibIface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|sibIface
argument_list|)
expr_stmt|;
name|QRect
name|wg
init|=
name|rect
argument_list|()
decl_stmt|;
name|QRect
name|sg
init|=
name|sibIface
operator|->
name|rect
argument_list|()
decl_stmt|;
if|if
condition|(
name|wg
operator|.
name|intersects
argument_list|(
name|sg
argument_list|)
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|pIface
init|=
literal|0
decl_stmt|;
name|pIface
operator|=
name|sibIface
operator|->
name|parent
argument_list|()
expr_stmt|;
if|if
condition|(
name|pIface
operator|&&
operator|!
operator|(
operator|(
name|sibIface
operator|->
name|state
argument_list|()
operator||
name|state
argument_list|()
operator|)
operator|&
name|QAccessible
operator|::
name|Invisible
operator|)
condition|)
block|{
name|int
name|wi
init|=
name|pIface
operator|->
name|indexOfChild
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|int
name|si
init|=
name|pIface
operator|->
name|indexOfChild
argument_list|(
name|sibIface
argument_list|)
decl_stmt|;
if|if
condition|(
name|wi
operator|>
name|si
condition|)
name|relation
operator||=
name|QAccessible
operator|::
name|Covers
expr_stmt|;
else|else
name|relation
operator||=
name|QAccessible
operator|::
name|Covered
expr_stmt|;
block|}
operator|delete
name|pIface
expr_stmt|;
block|}
else|else
block|{
name|QPoint
name|wc
init|=
name|wg
operator|.
name|center
argument_list|()
decl_stmt|;
name|QPoint
name|sc
init|=
name|sg
operator|.
name|center
argument_list|()
decl_stmt|;
if|if
condition|(
name|wc
operator|.
name|x
argument_list|()
operator|<
name|sc
operator|.
name|x
argument_list|()
condition|)
name|relation
operator||=
name|QAccessible
operator|::
name|Left
expr_stmt|;
elseif|else
if|if
condition|(
name|wc
operator|.
name|x
argument_list|()
operator|>
name|sc
operator|.
name|x
argument_list|()
condition|)
name|relation
operator||=
name|QAccessible
operator|::
name|Right
expr_stmt|;
if|if
condition|(
name|wc
operator|.
name|y
argument_list|()
operator|<
name|sc
operator|.
name|y
argument_list|()
condition|)
name|relation
operator||=
name|QAccessible
operator|::
name|Up
expr_stmt|;
elseif|else
if|if
condition|(
name|wc
operator|.
name|y
argument_list|()
operator|>
name|sc
operator|.
name|y
argument_list|()
condition|)
name|relation
operator||=
name|QAccessible
operator|::
name|Down
expr_stmt|;
block|}
operator|delete
name|sibIface
expr_stmt|;
return|return
name|relation
return|;
block|}
if|if
condition|(
name|isAncestor
argument_list|(
name|o
argument_list|,
name|object
argument_list|()
argument_list|)
condition|)
return|return
name|relation
operator||
name|QAccessible
operator|::
name|Descendent
return|;
if|if
condition|(
name|isAncestor
argument_list|(
name|object
argument_list|()
argument_list|,
name|o
argument_list|)
condition|)
return|return
name|relation
operator||
name|QAccessible
operator|::
name|Ancestor
return|;
return|return
name|relation
return|;
block|}
end_function
begin_function
DECL|function|parent
name|QAccessibleInterface
modifier|*
name|QAccessibleWidget
operator|::
name|parent
parameter_list|()
specifier|const
block|{
name|QObject
modifier|*
name|parentWidget
init|=
name|widget
argument_list|()
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parentWidget
condition|)
name|parentWidget
operator|=
name|qApp
expr_stmt|;
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|parentWidget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|child
name|QAccessibleInterface
modifier|*
name|QAccessibleWidget
operator|::
name|child
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|QWidgetList
name|childList
init|=
name|childWidgets
argument_list|(
name|widget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|childList
operator|.
name|size
argument_list|()
condition|)
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|childList
operator|.
name|at
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|navigate
name|int
name|QAccessibleWidget
operator|::
name|navigate
parameter_list|(
name|QAccessible
operator|::
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|target
condition|)
return|return
operator|-
literal|1
return|;
operator|*
name|target
operator|=
literal|0
expr_stmt|;
name|QObject
modifier|*
name|targetObject
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|relation
condition|)
block|{
comment|// Hierarchical
case|case
name|QAccessible
operator|::
name|Self
case|:
name|targetObject
operator|=
name|object
argument_list|()
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|Child
case|:
name|qWarning
argument_list|()
operator|<<
literal|"QAccessibleWidget::navigate is deprecated for QAccessible::Child in:"
operator|<<
name|object
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
expr_stmt|;
operator|*
name|target
operator|=
name|child
argument_list|(
name|entry
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
operator|*
name|target
condition|?
literal|0
else|:
operator|-
literal|1
return|;
case|case
name|QAccessible
operator|::
name|Ancestor
case|:
name|qWarning
argument_list|()
operator|<<
literal|"QAccessibleWidget::navigate is deprecated for QAccessible::Ancestor in:"
operator|<<
name|object
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
expr_stmt|;
operator|*
name|target
operator|=
name|parent
argument_list|()
expr_stmt|;
return|return
operator|*
name|target
condition|?
literal|0
else|:
operator|-
literal|1
return|;
case|case
name|QAccessible
operator|::
name|Sibling
case|:
block|{
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|parentObject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iface
condition|)
return|return
operator|-
literal|1
return|;
operator|*
name|target
operator|=
name|iface
operator|->
name|child
argument_list|(
name|entry
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
if|if
condition|(
operator|*
name|target
condition|)
return|return
literal|0
return|;
block|}
break|break;
comment|// Geometrical
case|case
name|QAccessible
operator|::
name|Left
case|:
comment|// fall through
case|case
name|QAccessible
operator|::
name|Right
case|:
comment|// fall through
case|case
name|QAccessible
operator|::
name|Up
case|:
comment|// fall through
case|case
name|QAccessible
operator|::
name|Down
case|:
block|{
name|QAccessibleInterface
modifier|*
name|pIface
init|=
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pIface
condition|)
return|return
operator|-
literal|1
return|;
name|QRect
name|startg
init|=
name|rect
argument_list|()
decl_stmt|;
name|QPoint
name|startc
init|=
name|startg
operator|.
name|center
argument_list|()
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|candidate
init|=
literal|0
decl_stmt|;
name|int
name|mindist
init|=
literal|100000
decl_stmt|;
name|int
name|sibCount
init|=
name|pIface
operator|->
name|childCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sibCount
condition|;
operator|++
name|i
control|)
block|{
name|QAccessibleInterface
modifier|*
name|sibling
init|=
literal|0
decl_stmt|;
name|sibling
operator|=
name|pIface
operator|->
name|child
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|sibling
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|relationTo
argument_list|(
name|sibling
argument_list|)
operator|&
name|QAccessible
operator|::
name|Self
operator|)
operator|||
operator|(
name|sibling
operator|->
name|state
argument_list|()
operator|&
name|QAccessible
operator|::
name|Invisible
operator|)
condition|)
block|{
comment|//ignore ourself and invisible siblings
operator|delete
name|sibling
expr_stmt|;
continue|continue;
block|}
name|QRect
name|sibg
init|=
name|sibling
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QPoint
name|sibc
init|=
name|sibg
operator|.
name|center
argument_list|()
decl_stmt|;
name|QPoint
name|sibp
decl_stmt|;
name|QPoint
name|startp
decl_stmt|;
name|QPoint
name|distp
decl_stmt|;
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|QAccessible
operator|::
name|Left
case|:
name|startp
operator|=
name|QPoint
argument_list|(
name|startg
operator|.
name|left
argument_list|()
argument_list|,
name|startg
operator|.
name|top
argument_list|()
operator|+
name|startg
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sibp
operator|=
name|QPoint
argument_list|(
name|sibg
operator|.
name|right
argument_list|()
argument_list|,
name|sibg
operator|.
name|top
argument_list|()
operator|+
name|sibg
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|QPoint
argument_list|(
name|sibc
operator|-
name|startc
argument_list|)
operator|.
name|x
argument_list|()
operator|>=
literal|0
condition|)
block|{
operator|delete
name|sibling
expr_stmt|;
continue|continue;
block|}
name|distp
operator|=
name|sibp
operator|-
name|startp
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|Right
case|:
name|startp
operator|=
name|QPoint
argument_list|(
name|startg
operator|.
name|right
argument_list|()
argument_list|,
name|startg
operator|.
name|top
argument_list|()
operator|+
name|startg
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sibp
operator|=
name|QPoint
argument_list|(
name|sibg
operator|.
name|left
argument_list|()
argument_list|,
name|sibg
operator|.
name|top
argument_list|()
operator|+
name|sibg
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|QPoint
argument_list|(
name|sibc
operator|-
name|startc
argument_list|)
operator|.
name|x
argument_list|()
operator|<=
literal|0
condition|)
block|{
operator|delete
name|sibling
expr_stmt|;
continue|continue;
block|}
name|distp
operator|=
name|sibp
operator|-
name|startp
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|Up
case|:
name|startp
operator|=
name|QPoint
argument_list|(
name|startg
operator|.
name|left
argument_list|()
operator|+
name|startg
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|startg
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|sibp
operator|=
name|QPoint
argument_list|(
name|sibg
operator|.
name|left
argument_list|()
operator|+
name|sibg
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|sibg
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QPoint
argument_list|(
name|sibc
operator|-
name|startc
argument_list|)
operator|.
name|y
argument_list|()
operator|>=
literal|0
condition|)
block|{
operator|delete
name|sibling
expr_stmt|;
continue|continue;
block|}
name|distp
operator|=
name|sibp
operator|-
name|startp
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|Down
case|:
name|startp
operator|=
name|QPoint
argument_list|(
name|startg
operator|.
name|left
argument_list|()
operator|+
name|startg
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|startg
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|sibp
operator|=
name|QPoint
argument_list|(
name|sibg
operator|.
name|left
argument_list|()
operator|+
name|sibg
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|sibg
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QPoint
argument_list|(
name|sibc
operator|-
name|startc
argument_list|)
operator|.
name|y
argument_list|()
operator|<=
literal|0
condition|)
block|{
operator|delete
name|sibling
expr_stmt|;
continue|continue;
block|}
name|distp
operator|=
name|sibp
operator|-
name|startp
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|int
name|dist
init|=
operator|(
name|int
operator|)
name|qSqrt
argument_list|(
operator|(
name|qreal
operator|)
name|distp
operator|.
name|x
argument_list|()
operator|*
name|distp
operator|.
name|x
argument_list|()
operator|+
name|distp
operator|.
name|y
argument_list|()
operator|*
name|distp
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist
operator|<
name|mindist
condition|)
block|{
operator|delete
name|candidate
expr_stmt|;
name|candidate
operator|=
name|sibling
expr_stmt|;
name|mindist
operator|=
name|dist
expr_stmt|;
block|}
else|else
block|{
operator|delete
name|sibling
expr_stmt|;
block|}
block|}
operator|delete
name|pIface
expr_stmt|;
operator|*
name|target
operator|=
name|candidate
expr_stmt|;
if|if
condition|(
operator|*
name|target
condition|)
return|return
literal|0
return|;
block|}
break|break;
case|case
name|QAccessible
operator|::
name|Covers
case|:
if|if
condition|(
name|entry
operator|>
literal|0
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|pIface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|parentObject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pIface
condition|)
return|return
operator|-
literal|1
return|;
name|QRect
name|r
init|=
name|rect
argument_list|()
decl_stmt|;
name|int
name|sibCount
init|=
name|pIface
operator|->
name|childCount
argument_list|()
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|sibling
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|pIface
operator|->
name|indexOfChild
argument_list|(
name|this
argument_list|)
operator|+
literal|1
init|;
name|i
operator|<=
name|sibCount
operator|&&
name|entry
condition|;
operator|++
name|i
control|)
block|{
name|sibling
operator|=
name|pIface
operator|->
name|child
argument_list|(
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sibling
operator|||
operator|(
name|sibling
operator|->
name|state
argument_list|()
operator|&
name|QAccessible
operator|::
name|Invisible
operator|)
condition|)
block|{
operator|delete
name|sibling
expr_stmt|;
name|sibling
operator|=
literal|0
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|sibling
operator|->
name|rect
argument_list|()
operator|.
name|intersects
argument_list|(
name|r
argument_list|)
condition|)
operator|--
name|entry
expr_stmt|;
if|if
condition|(
operator|!
name|entry
condition|)
break|break;
operator|delete
name|sibling
expr_stmt|;
name|sibling
operator|=
literal|0
expr_stmt|;
block|}
operator|delete
name|pIface
expr_stmt|;
operator|*
name|target
operator|=
name|sibling
expr_stmt|;
if|if
condition|(
operator|*
name|target
condition|)
return|return
literal|0
return|;
block|}
break|break;
case|case
name|QAccessible
operator|::
name|Covered
case|:
if|if
condition|(
name|entry
operator|>
literal|0
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|pIface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|parentObject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pIface
condition|)
return|return
operator|-
literal|1
return|;
name|QRect
name|r
init|=
name|rect
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|pIface
operator|->
name|indexOfChild
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|sibling
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|index
operator|&&
name|entry
condition|;
operator|++
name|i
control|)
block|{
name|sibling
operator|=
name|pIface
operator|->
name|child
argument_list|(
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|sibling
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sibling
operator|||
operator|(
name|sibling
operator|->
name|state
argument_list|()
operator|&
name|QAccessible
operator|::
name|Invisible
operator|)
condition|)
block|{
operator|delete
name|sibling
expr_stmt|;
name|sibling
operator|=
literal|0
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|sibling
operator|->
name|rect
argument_list|()
operator|.
name|intersects
argument_list|(
name|r
argument_list|)
condition|)
operator|--
name|entry
expr_stmt|;
if|if
condition|(
operator|!
name|entry
condition|)
break|break;
operator|delete
name|sibling
expr_stmt|;
name|sibling
operator|=
literal|0
expr_stmt|;
block|}
operator|delete
name|pIface
expr_stmt|;
operator|*
name|target
operator|=
name|sibling
expr_stmt|;
if|if
condition|(
operator|*
name|target
condition|)
return|return
literal|0
return|;
block|}
break|break;
comment|// Logical
case|case
name|QAccessible
operator|::
name|FocusChild
case|:
block|{
if|if
condition|(
name|widget
argument_list|()
operator|->
name|hasFocus
argument_list|()
condition|)
block|{
name|targetObject
operator|=
name|object
argument_list|()
expr_stmt|;
break|break;
block|}
name|QWidget
modifier|*
name|fw
init|=
name|widget
argument_list|()
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fw
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|isAncestor
argument_list|(
name|widget
argument_list|()
argument_list|,
name|fw
argument_list|)
operator|||
name|fw
operator|==
name|widget
argument_list|()
condition|)
name|targetObject
operator|=
name|fw
expr_stmt|;
comment|/* ###             QWidget *parent = fw;             while (parent&& !targetObject) {                 parent = parent->parentWidget();                 if (parent == widget())                     targetObject = fw;             }             */
block|}
break|break;
case|case
name|QAccessible
operator|::
name|Label
case|:
if|if
condition|(
name|entry
operator|>
literal|0
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|pIface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|parentObject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pIface
condition|)
return|return
operator|-
literal|1
return|;
comment|// first check for all siblings that are labels to us
comment|// ideally we would go through all objects and check, but that
comment|// will be too expensive
name|int
name|sibCount
init|=
name|pIface
operator|->
name|childCount
argument_list|()
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|candidate
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sibCount
operator|&&
name|entry
condition|;
operator|++
name|i
control|)
block|{
name|candidate
operator|=
name|pIface
operator|->
name|child
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
if|if
condition|(
name|candidate
operator|->
name|relationTo
argument_list|(
name|this
argument_list|)
operator|&
name|QAccessible
operator|::
name|Label
condition|)
operator|--
name|entry
expr_stmt|;
if|if
condition|(
operator|!
name|entry
condition|)
break|break;
operator|delete
name|candidate
expr_stmt|;
name|candidate
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|candidate
condition|)
block|{
if|if
condition|(
name|pIface
operator|->
name|relationTo
argument_list|(
name|this
argument_list|)
operator|&
name|QAccessible
operator|::
name|Label
condition|)
operator|--
name|entry
expr_stmt|;
if|if
condition|(
operator|!
name|entry
condition|)
name|candidate
operator|=
name|pIface
expr_stmt|;
block|}
if|if
condition|(
name|pIface
operator|!=
name|candidate
condition|)
operator|delete
name|pIface
expr_stmt|;
operator|*
name|target
operator|=
name|candidate
expr_stmt|;
if|if
condition|(
operator|*
name|target
condition|)
return|return
literal|0
return|;
block|}
break|break;
case|case
name|QAccessible
operator|::
name|Labelled
case|:
comment|// only implemented in subclasses
break|break;
case|case
name|QAccessible
operator|::
name|Controller
case|:
if|if
condition|(
name|entry
operator|>
literal|0
condition|)
block|{
comment|// check all senders we are connected to,
comment|// and figure out which one are controllers to us
name|QACConnectionObject
modifier|*
name|connectionObject
init|=
operator|(
name|QACConnectionObject
operator|*
operator|)
name|object
argument_list|()
decl_stmt|;
name|QObjectList
name|allSenders
init|=
name|connectionObject
operator|->
name|senderList
argument_list|()
decl_stmt|;
name|QObjectList
name|senders
decl_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|allSenders
operator|.
name|size
argument_list|()
condition|;
operator|++
name|s
control|)
block|{
name|QObject
modifier|*
name|sender
init|=
name|allSenders
operator|.
name|at
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|candidate
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|sender
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|candidate
condition|)
continue|continue;
if|if
condition|(
name|candidate
operator|->
name|relationTo
argument_list|(
name|this
argument_list|)
operator|&
name|QAccessible
operator|::
name|Controller
condition|)
name|senders
operator|<<
name|sender
expr_stmt|;
operator|delete
name|candidate
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|<=
name|senders
operator|.
name|size
argument_list|()
condition|)
name|targetObject
operator|=
name|senders
operator|.
name|at
argument_list|(
name|entry
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QAccessible
operator|::
name|Controlled
case|:
if|if
condition|(
name|entry
operator|>
literal|0
condition|)
block|{
name|QObjectList
name|allReceivers
decl_stmt|;
name|QACConnectionObject
modifier|*
name|connectionObject
init|=
operator|(
name|QACConnectionObject
operator|*
operator|)
name|object
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|sig
init|=
literal|0
init|;
name|sig
operator|<
name|d
operator|->
name|primarySignals
operator|.
name|count
argument_list|()
condition|;
operator|++
name|sig
control|)
block|{
name|QObjectList
name|receivers
init|=
name|connectionObject
operator|->
name|receiverList
argument_list|(
name|d
operator|->
name|primarySignals
operator|.
name|at
argument_list|(
name|sig
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
decl_stmt|;
name|allReceivers
operator|+=
name|receivers
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|<=
name|allReceivers
operator|.
name|size
argument_list|()
condition|)
name|targetObject
operator|=
name|allReceivers
operator|.
name|at
argument_list|(
name|entry
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
operator|*
name|target
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|targetObject
argument_list|)
expr_stmt|;
return|return
operator|*
name|target
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|childCount
name|int
name|QAccessibleWidget
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
name|QWidgetList
name|cl
init|=
name|childWidgets
argument_list|(
name|widget
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|cl
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleWidget
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
name|QWidgetList
name|cl
init|=
name|childWidgets
argument_list|(
name|widget
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|cl
operator|.
name|indexOf
argument_list|(
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|child
operator|->
name|object
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
operator|++
name|index
expr_stmt|;
return|return
name|index
return|;
block|}
end_function
begin_comment
comment|// from qwidget.cpp
end_comment
begin_function_decl
specifier|extern
name|QString
name|qt_setWindowTitle_helperHelper
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|text
name|QString
name|QAccessibleWidget
operator|::
name|text
parameter_list|(
name|QAccessible
operator|::
name|Text
name|t
parameter_list|)
specifier|const
block|{
name|QString
name|str
decl_stmt|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|QAccessible
operator|::
name|Name
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|str
operator|=
name|d
operator|->
name|name
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|widget
argument_list|()
operator|->
name|accessibleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|str
operator|=
name|widget
argument_list|()
operator|->
name|accessibleName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|widget
argument_list|()
operator|->
name|isWindow
argument_list|()
condition|)
block|{
if|if
condition|(
name|widget
argument_list|()
operator|->
name|isMinimized
argument_list|()
condition|)
name|str
operator|=
name|qt_setWindowTitle_helperHelper
argument_list|(
name|widget
argument_list|()
operator|->
name|windowIconText
argument_list|()
argument_list|,
name|widget
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|str
operator|=
name|qt_setWindowTitle_helperHelper
argument_list|(
name|widget
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|widget
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|str
operator|=
name|qt_accStripAmp
argument_list|(
name|buddyString
argument_list|(
name|widget
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QAccessible
operator|::
name|Description
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|description
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|d
operator|->
name|description
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|widget
argument_list|()
operator|->
name|accessibleDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|widget
argument_list|()
operator|->
name|accessibleDescription
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
else|else
name|str
operator|=
name|widget
argument_list|()
operator|->
name|toolTip
argument_list|()
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|QAccessible
operator|::
name|Help
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|help
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|d
operator|->
name|help
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
else|else
name|str
operator|=
name|widget
argument_list|()
operator|->
name|whatsThis
argument_list|()
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|QAccessible
operator|::
name|Accelerator
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|accelerator
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|d
operator|->
name|accelerator
expr_stmt|;
else|else
name|str
operator|=
name|qt_accHotKey
argument_list|(
name|buddyString
argument_list|(
name|widget
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|Value
case|:
name|str
operator|=
name|d
operator|->
name|value
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|actionNames
name|QStringList
name|QAccessibleWidget
operator|::
name|actionNames
parameter_list|()
specifier|const
block|{
name|QStringList
name|names
decl_stmt|;
if|if
condition|(
name|widget
argument_list|()
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|widget
argument_list|()
operator|->
name|focusPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoFocus
condition|)
name|names
operator|<<
name|setFocusAction
argument_list|()
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
end_function
begin_function
DECL|function|doAction
name|void
name|QAccessibleWidget
operator|::
name|doAction
parameter_list|(
specifier|const
name|QString
modifier|&
name|actionName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
argument_list|()
operator|->
name|isEnabled
argument_list|()
condition|)
return|return;
if|if
condition|(
name|actionName
operator|==
name|setFocusAction
argument_list|()
condition|)
block|{
if|if
condition|(
name|widget
argument_list|()
operator|->
name|isWindow
argument_list|()
condition|)
name|widget
argument_list|()
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
name|widget
argument_list|()
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|keyBindingsForAction
name|QStringList
name|QAccessibleWidget
operator|::
name|keyBindingsForAction
parameter_list|(
specifier|const
name|QString
modifier|&
comment|/* actionName */
parameter_list|)
specifier|const
block|{
return|return
name|QStringList
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleWidget
operator|::
name|role
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|role
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleWidget
operator|::
name|state
parameter_list|()
specifier|const
block|{
name|QAccessible
operator|::
name|State
name|state
init|=
name|QAccessible
operator|::
name|Normal
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|widget
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|)
operator|==
literal|false
condition|)
name|state
operator||=
name|QAccessible
operator|::
name|Invisible
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|focusPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoFocus
operator|&&
name|w
operator|->
name|isActiveWindow
argument_list|()
condition|)
name|state
operator||=
name|QAccessible
operator|::
name|Focusable
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|hasFocus
argument_list|()
condition|)
name|state
operator||=
name|QAccessible
operator|::
name|Focused
expr_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isEnabled
argument_list|()
condition|)
name|state
operator||=
name|QAccessible
operator|::
name|Unavailable
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|isWindow
argument_list|()
condition|)
block|{
if|if
condition|(
name|w
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|state
operator||=
name|QAccessible
operator|::
name|Movable
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|minimumSize
argument_list|()
operator|!=
name|w
operator|->
name|maximumSize
argument_list|()
condition|)
name|state
operator||=
name|QAccessible
operator|::
name|Sizeable
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
end_function
begin_function
DECL|function|foregroundColor
name|QColor
name|QAccessibleWidget
operator|::
name|foregroundColor
parameter_list|()
specifier|const
block|{
return|return
name|widget
argument_list|()
operator|->
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|widget
argument_list|()
operator|->
name|foregroundRole
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|backgroundColor
name|QColor
name|QAccessibleWidget
operator|::
name|backgroundColor
parameter_list|()
specifier|const
block|{
return|return
name|widget
argument_list|()
operator|->
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|widget
argument_list|()
operator|->
name|backgroundRole
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|interface_cast
name|void
modifier|*
name|QAccessibleWidget
operator|::
name|interface_cast
parameter_list|(
name|QAccessible
operator|::
name|InterfaceType
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|ActionInterface
condition|)
return|return
cast|static_cast
argument_list|<
name|QAccessibleActionInterface
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_ACCESSIBILITY
end_comment
end_unit
