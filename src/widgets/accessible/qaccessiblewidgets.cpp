begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qaccessiblewidgets.h"
end_include
begin_include
include|#
directive|include
file|"qabstracttextdocumentlayout.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qclipboard.h"
end_include
begin_include
include|#
directive|include
file|"qtextedit.h"
end_include
begin_include
include|#
directive|include
file|"private/qtextedit_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextdocument.h"
end_include
begin_include
include|#
directive|include
file|"qtextobject.h"
end_include
begin_include
include|#
directive|include
file|"qplaintextedit.h"
end_include
begin_include
include|#
directive|include
file|"qtextboundaryfinder.h"
end_include
begin_include
include|#
directive|include
file|"qscrollbar.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QStackedWidget>
end_include
begin_include
include|#
directive|include
file|<QToolBox>
end_include
begin_include
include|#
directive|include
file|<QMdiArea>
end_include
begin_include
include|#
directive|include
file|<QMdiSubWindow>
end_include
begin_include
include|#
directive|include
file|<QDialogButtonBox>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<QRubberBand>
end_include
begin_include
include|#
directive|include
file|<QTextBrowser>
end_include
begin_include
include|#
directive|include
file|<QCalendarWidget>
end_include
begin_include
include|#
directive|include
file|<QAbstractItemView>
end_include
begin_include
include|#
directive|include
file|<QDockWidget>
end_include
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QAbstractButton>
end_include
begin_include
include|#
directive|include
file|<private/qdockwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<QFocusFrame>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|QString
name|qt_accStripAmp
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|childWidgets
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|childWidgets
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|widget
operator|==
literal|0
condition|)
return|return
name|QList
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|()
return|;
name|QList
argument_list|<
name|QObject
modifier|*
argument_list|>
name|list
init|=
name|widget
operator|->
name|children
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|widgets
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
continue|continue;
name|QString
name|objectName
init|=
name|w
operator|->
name|objectName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|qobject_cast
argument_list|<
name|QFocusFrame
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|&&
operator|!
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|&&
name|objectName
operator|!=
name|QLatin1String
argument_list|(
literal|"qt_rubberband"
argument_list|)
operator|&&
name|objectName
operator|!=
name|QLatin1String
argument_list|(
literal|"qt_qmainwindow_extended_splitter"
argument_list|)
condition|)
block|{
name|widgets
operator|.
name|append
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|widgets
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TEXTEDIT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_CURSOR
argument_list|)
end_if
begin_constructor
DECL|function|QAccessiblePlainTextEdit
name|QAccessiblePlainTextEdit
operator|::
name|QAccessiblePlainTextEdit
parameter_list|(
name|QWidget
modifier|*
name|o
parameter_list|)
member_init_list|:
name|QAccessibleTextWidget
argument_list|(
name|o
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|widget
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QPlainTextEdit"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|plainTextEdit
name|QPlainTextEdit
modifier|*
name|QAccessiblePlainTextEdit
operator|::
name|plainTextEdit
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QPlainTextEdit
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessiblePlainTextEdit
operator|::
name|text
parameter_list|(
name|QAccessible
operator|::
name|Text
name|t
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|Value
condition|)
return|return
name|plainTextEdit
argument_list|()
operator|->
name|toPlainText
argument_list|()
return|;
return|return
name|QAccessibleWidget
operator|::
name|text
argument_list|(
name|t
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|QAccessiblePlainTextEdit
operator|::
name|setText
parameter_list|(
name|QAccessible
operator|::
name|Text
name|t
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
name|t
operator|!=
name|QAccessible
operator|::
name|Value
condition|)
block|{
name|QAccessibleWidget
operator|::
name|setText
argument_list|(
name|t
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|plainTextEdit
argument_list|()
operator|->
name|isReadOnly
argument_list|()
condition|)
return|return;
name|plainTextEdit
argument_list|()
operator|->
name|setPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessiblePlainTextEdit
operator|::
name|state
parameter_list|()
specifier|const
block|{
name|QAccessible
operator|::
name|State
name|st
init|=
name|QAccessibleTextWidget
operator|::
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|plainTextEdit
argument_list|()
operator|->
name|isReadOnly
argument_list|()
condition|)
name|st
operator|.
name|readOnly
operator|=
literal|true
expr_stmt|;
else|else
name|st
operator|.
name|editable
operator|=
literal|true
expr_stmt|;
return|return
name|st
return|;
block|}
end_function
begin_function
DECL|function|interface_cast
name|void
modifier|*
name|QAccessiblePlainTextEdit
operator|::
name|interface_cast
parameter_list|(
name|QAccessible
operator|::
name|InterfaceType
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|TextInterface
condition|)
return|return
cast|static_cast
argument_list|<
name|QAccessibleTextInterface
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
elseif|else
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|EditableTextInterface
condition|)
return|return
cast|static_cast
argument_list|<
name|QAccessibleEditableTextInterface
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
return|return
name|QAccessibleWidget
operator|::
name|interface_cast
argument_list|(
name|t
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|scrollBarPosition
name|QPoint
name|QAccessiblePlainTextEdit
operator|::
name|scrollBarPosition
parameter_list|()
specifier|const
block|{
name|QPoint
name|result
decl_stmt|;
name|result
operator|.
name|setX
argument_list|(
name|plainTextEdit
argument_list|()
operator|->
name|horizontalScrollBar
argument_list|()
condition|?
name|plainTextEdit
argument_list|()
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|sliderPosition
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|setY
argument_list|(
name|plainTextEdit
argument_list|()
operator|->
name|verticalScrollBar
argument_list|()
condition|?
name|plainTextEdit
argument_list|()
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|sliderPosition
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|textCursor
name|QTextCursor
name|QAccessiblePlainTextEdit
operator|::
name|textCursor
parameter_list|()
specifier|const
block|{
return|return
name|plainTextEdit
argument_list|()
operator|->
name|textCursor
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setTextCursor
name|void
name|QAccessiblePlainTextEdit
operator|::
name|setTextCursor
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|textCursor
parameter_list|)
block|{
name|plainTextEdit
argument_list|()
operator|->
name|setTextCursor
argument_list|(
name|textCursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textDocument
name|QTextDocument
modifier|*
name|QAccessiblePlainTextEdit
operator|::
name|textDocument
parameter_list|()
specifier|const
block|{
return|return
name|plainTextEdit
argument_list|()
operator|->
name|document
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|viewport
name|QWidget
modifier|*
name|QAccessiblePlainTextEdit
operator|::
name|viewport
parameter_list|()
specifier|const
block|{
return|return
name|plainTextEdit
argument_list|()
operator|->
name|viewport
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|scrollToSubstring
name|void
name|QAccessiblePlainTextEdit
operator|::
name|scrollToSubstring
parameter_list|(
name|int
name|startIndex
parameter_list|,
name|int
name|endIndex
parameter_list|)
block|{
comment|//TODO: Not implemented
name|Q_UNUSED
argument_list|(
name|startIndex
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|endIndex
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \class QAccessibleTextEdit   \brief The QAccessibleTextEdit class implements the QAccessibleInterface for richtext editors.   \internal */
end_comment
begin_comment
comment|/*!   \fn QAccessibleTextEdit::QAccessibleTextEdit(QWidget *widget)    Constructs a QAccessibleTextEdit object for a \a widget. */
end_comment
begin_constructor
DECL|function|QAccessibleTextEdit
name|QAccessibleTextEdit
operator|::
name|QAccessibleTextEdit
parameter_list|(
name|QWidget
modifier|*
name|o
parameter_list|)
member_init_list|:
name|QAccessibleTextWidget
argument_list|(
name|o
argument_list|,
name|QAccessible
operator|::
name|EditableText
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|widget
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QTextEdit"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! Returns the text edit. */
end_comment
begin_function
DECL|function|textEdit
name|QTextEdit
modifier|*
name|QAccessibleTextEdit
operator|::
name|textEdit
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QTextEdit
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|textCursor
name|QTextCursor
name|QAccessibleTextEdit
operator|::
name|textCursor
parameter_list|()
specifier|const
block|{
return|return
name|textEdit
argument_list|()
operator|->
name|textCursor
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|textDocument
name|QTextDocument
modifier|*
name|QAccessibleTextEdit
operator|::
name|textDocument
parameter_list|()
specifier|const
block|{
return|return
name|textEdit
argument_list|()
operator|->
name|document
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setTextCursor
name|void
name|QAccessibleTextEdit
operator|::
name|setTextCursor
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|textCursor
parameter_list|)
block|{
name|textEdit
argument_list|()
operator|->
name|setTextCursor
argument_list|(
name|textCursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|viewport
name|QWidget
modifier|*
name|QAccessibleTextEdit
operator|::
name|viewport
parameter_list|()
specifier|const
block|{
return|return
name|textEdit
argument_list|()
operator|->
name|viewport
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|scrollBarPosition
name|QPoint
name|QAccessibleTextEdit
operator|::
name|scrollBarPosition
parameter_list|()
specifier|const
block|{
name|QPoint
name|result
decl_stmt|;
name|result
operator|.
name|setX
argument_list|(
name|textEdit
argument_list|()
operator|->
name|horizontalScrollBar
argument_list|()
condition|?
name|textEdit
argument_list|()
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|sliderPosition
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|setY
argument_list|(
name|textEdit
argument_list|()
operator|->
name|verticalScrollBar
argument_list|()
condition|?
name|textEdit
argument_list|()
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|sliderPosition
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleTextEdit
operator|::
name|text
parameter_list|(
name|QAccessible
operator|::
name|Text
name|t
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|Value
condition|)
return|return
name|textEdit
argument_list|()
operator|->
name|toPlainText
argument_list|()
return|;
return|return
name|QAccessibleWidget
operator|::
name|text
argument_list|(
name|t
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|QAccessibleTextEdit
operator|::
name|setText
parameter_list|(
name|QAccessible
operator|::
name|Text
name|t
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
name|t
operator|!=
name|QAccessible
operator|::
name|Value
condition|)
block|{
name|QAccessibleWidget
operator|::
name|setText
argument_list|(
name|t
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|textEdit
argument_list|()
operator|->
name|isReadOnly
argument_list|()
condition|)
return|return;
name|textEdit
argument_list|()
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleTextEdit
operator|::
name|state
parameter_list|()
specifier|const
block|{
name|QAccessible
operator|::
name|State
name|st
init|=
name|QAccessibleTextWidget
operator|::
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|textEdit
argument_list|()
operator|->
name|isReadOnly
argument_list|()
condition|)
name|st
operator|.
name|readOnly
operator|=
literal|true
expr_stmt|;
else|else
name|st
operator|.
name|editable
operator|=
literal|true
expr_stmt|;
return|return
name|st
return|;
block|}
end_function
begin_function
DECL|function|interface_cast
name|void
modifier|*
name|QAccessibleTextEdit
operator|::
name|interface_cast
parameter_list|(
name|QAccessible
operator|::
name|InterfaceType
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|TextInterface
condition|)
return|return
cast|static_cast
argument_list|<
name|QAccessibleTextInterface
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
elseif|else
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|EditableTextInterface
condition|)
return|return
cast|static_cast
argument_list|<
name|QAccessibleEditableTextInterface
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
return|return
name|QAccessibleWidget
operator|::
name|interface_cast
argument_list|(
name|t
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|scrollToSubstring
name|void
name|QAccessibleTextEdit
operator|::
name|scrollToSubstring
parameter_list|(
name|int
name|startIndex
parameter_list|,
name|int
name|endIndex
parameter_list|)
block|{
name|QTextEdit
modifier|*
name|edit
init|=
name|textEdit
argument_list|()
decl_stmt|;
name|QTextCursor
name|cursor
init|=
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|startIndex
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|edit
operator|->
name|cursorRect
argument_list|(
name|cursor
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|endIndex
argument_list|)
expr_stmt|;
name|r
operator|.
name|setBottomRight
argument_list|(
name|edit
operator|->
name|cursorRect
argument_list|(
name|cursor
argument_list|)
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|moveTo
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|+
name|edit
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|edit
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
comment|// E V I L, but ensureVisible is not public
if|if
condition|(
operator|!
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|edit
argument_list|,
literal|"_q_ensureVisible"
argument_list|,
name|Q_ARG
argument_list|(
name|QRectF
argument_list|,
name|r
argument_list|)
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"AccessibleTextEdit::scrollToSubstring failed!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTEDIT&& QT_NO_CURSOR
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STACKEDWIDGET
end_ifndef
begin_comment
comment|// ======================= QAccessibleStackedWidget ======================
end_comment
begin_constructor
DECL|function|QAccessibleStackedWidget
name|QAccessibleStackedWidget
operator|::
name|QAccessibleStackedWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|LayeredPane
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QStackedWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|childAt
name|QAccessibleInterface
modifier|*
name|QAccessibleStackedWidget
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|stackedWidget
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
literal|0
return|;
name|QWidget
modifier|*
name|currentWidget
init|=
name|stackedWidget
argument_list|()
operator|->
name|currentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|currentWidget
condition|)
return|return
literal|0
return|;
name|QPoint
name|position
init|=
name|currentWidget
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentWidget
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|position
argument_list|)
condition|)
return|return
name|child
argument_list|(
name|stackedWidget
argument_list|()
operator|->
name|currentIndex
argument_list|()
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleStackedWidget
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|stackedWidget
argument_list|()
operator|->
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleStackedWidget
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
condition|)
return|return
operator|-
literal|1
return|;
name|QWidget
modifier|*
name|widget
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|child
operator|->
name|object
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|stackedWidget
argument_list|()
operator|->
name|indexOf
argument_list|(
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|child
name|QAccessibleInterface
modifier|*
name|QAccessibleStackedWidget
operator|::
name|child
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|stackedWidget
argument_list|()
operator|->
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|stackedWidget
argument_list|()
operator|->
name|widget
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|stackedWidget
name|QStackedWidget
modifier|*
name|QAccessibleStackedWidget
operator|::
name|stackedWidget
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QStackedWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STACKEDWIDGET
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLBOX
end_ifndef
begin_comment
comment|// ======================= QAccessibleToolBox ======================
end_comment
begin_constructor
DECL|function|QAccessibleToolBox
name|QAccessibleToolBox
operator|::
name|QAccessibleToolBox
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|LayeredPane
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QToolBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|toolBox
name|QToolBox
modifier|*
name|QAccessibleToolBox
operator|::
name|toolBox
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QToolBox
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLBOX
end_comment
begin_comment
comment|// ======================= QAccessibleMdiArea ======================
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MDIAREA
end_ifndef
begin_constructor
DECL|function|QAccessibleMdiArea
name|QAccessibleMdiArea
operator|::
name|QAccessibleMdiArea
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|LayeredPane
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QMdiArea
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|childCount
name|int
name|QAccessibleMdiArea
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|mdiArea
argument_list|()
operator|->
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|child
name|QAccessibleInterface
modifier|*
name|QAccessibleMdiArea
operator|::
name|child
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|subWindows
init|=
name|mdiArea
argument_list|()
operator|->
name|subWindowList
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|targetObject
init|=
name|subWindows
operator|.
name|value
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetObject
condition|)
return|return
literal|0
return|;
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|targetObject
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleMdiArea
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
operator|||
operator|!
name|child
operator|->
name|object
argument_list|()
operator|||
name|mdiArea
argument_list|()
operator|->
name|subWindowList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|QMdiSubWindow
modifier|*
name|window
init|=
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|child
operator|->
name|object
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|mdiArea
argument_list|()
operator|->
name|subWindowList
argument_list|()
operator|.
name|indexOf
argument_list|(
name|window
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|mdiArea
name|QMdiArea
modifier|*
name|QAccessibleMdiArea
operator|::
name|mdiArea
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QMdiArea
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// ======================= QAccessibleMdiSubWindow ======================
end_comment
begin_constructor
DECL|function|QAccessibleMdiSubWindow
name|QAccessibleMdiSubWindow
operator|::
name|QAccessibleMdiSubWindow
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|Window
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|text
name|QString
name|QAccessibleMdiSubWindow
operator|::
name|text
parameter_list|(
name|QAccessible
operator|::
name|Text
name|textType
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|textType
operator|==
name|QAccessible
operator|::
name|Name
condition|)
block|{
name|QString
name|title
init|=
name|mdiSubWindow
argument_list|()
operator|->
name|windowTitle
argument_list|()
decl_stmt|;
name|title
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"[*]"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|title
return|;
block|}
return|return
name|QAccessibleWidget
operator|::
name|text
argument_list|(
name|textType
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|QAccessibleMdiSubWindow
operator|::
name|setText
parameter_list|(
name|QAccessible
operator|::
name|Text
name|textType
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
name|textType
operator|==
name|QAccessible
operator|::
name|Name
condition|)
name|mdiSubWindow
argument_list|()
operator|->
name|setWindowTitle
argument_list|(
name|text
argument_list|)
expr_stmt|;
else|else
name|QAccessibleWidget
operator|::
name|setText
argument_list|(
name|textType
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleMdiSubWindow
operator|::
name|state
parameter_list|()
specifier|const
block|{
name|QAccessible
operator|::
name|State
name|state
decl_stmt|;
name|state
operator|.
name|focusable
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|mdiSubWindow
argument_list|()
operator|->
name|isMaximized
argument_list|()
condition|)
block|{
name|state
operator|.
name|movable
operator|=
literal|true
expr_stmt|;
name|state
operator|.
name|sizeable
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|mdiSubWindow
argument_list|()
operator|->
name|isAncestorOf
argument_list|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
operator|||
name|QApplication
operator|::
name|focusWidget
argument_list|()
operator|==
name|mdiSubWindow
argument_list|()
condition|)
name|state
operator|.
name|focused
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|mdiSubWindow
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
name|state
operator|.
name|invisible
operator|=
literal|true
expr_stmt|;
if|if
condition|(
specifier|const
name|QWidget
modifier|*
name|parent
init|=
name|mdiSubWindow
argument_list|()
operator|->
name|parentWidget
argument_list|()
condition|)
if|if
condition|(
operator|!
name|parent
operator|->
name|contentsRect
argument_list|()
operator|.
name|contains
argument_list|(
name|mdiSubWindow
argument_list|()
operator|->
name|geometry
argument_list|()
argument_list|)
condition|)
name|state
operator|.
name|offscreen
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|mdiSubWindow
argument_list|()
operator|->
name|isEnabled
argument_list|()
condition|)
name|state
operator|.
name|disabled
operator|=
literal|true
expr_stmt|;
return|return
name|state
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleMdiSubWindow
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|mdiSubWindow
argument_list|()
operator|->
name|widget
argument_list|()
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|child
name|QAccessibleInterface
modifier|*
name|QAccessibleMdiSubWindow
operator|::
name|child
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|QMdiSubWindow
modifier|*
name|source
init|=
name|mdiSubWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|0
operator|||
operator|!
name|source
operator|->
name|widget
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|source
operator|->
name|widget
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleMdiSubWindow
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
operator|&&
name|child
operator|->
name|object
argument_list|()
operator|&&
name|child
operator|->
name|object
argument_list|()
operator|==
name|mdiSubWindow
argument_list|()
operator|->
name|widget
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleMdiSubWindow
operator|::
name|rect
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|mdiSubWindow
argument_list|()
operator|->
name|isHidden
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
if|if
condition|(
operator|!
name|mdiSubWindow
argument_list|()
operator|->
name|parent
argument_list|()
condition|)
return|return
name|QAccessibleWidget
operator|::
name|rect
argument_list|()
return|;
specifier|const
name|QPoint
name|pos
init|=
name|mdiSubWindow
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|pos
argument_list|,
name|mdiSubWindow
argument_list|()
operator|->
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mdiSubWindow
name|QMdiSubWindow
modifier|*
name|QAccessibleMdiSubWindow
operator|::
name|mdiSubWindow
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MDIAREA
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DIALOGBUTTONBOX
end_ifndef
begin_comment
comment|// ======================= QAccessibleDialogButtonBox ======================
end_comment
begin_constructor
DECL|function|QAccessibleDialogButtonBox
name|QAccessibleDialogButtonBox
operator|::
name|QAccessibleDialogButtonBox
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|Grouping
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DIALOGBUTTONBOX
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TEXTBROWSER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_CURSOR
argument_list|)
end_if
begin_constructor
DECL|function|QAccessibleTextBrowser
name|QAccessibleTextBrowser
operator|::
name|QAccessibleTextBrowser
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleTextEdit
argument_list|(
name|widget
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QTextBrowser
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleTextBrowser
operator|::
name|role
parameter_list|()
specifier|const
block|{
return|return
name|QAccessible
operator|::
name|StaticText
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTBROWSER&& QT_NO_CURSOR
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CALENDARWIDGET
end_ifndef
begin_comment
comment|// ===================== QAccessibleCalendarWidget ========================
end_comment
begin_constructor
DECL|function|QAccessibleCalendarWidget
name|QAccessibleCalendarWidget
operator|::
name|QAccessibleCalendarWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|Table
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QCalendarWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|childCount
name|int
name|QAccessibleCalendarWidget
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|calendarWidget
argument_list|()
operator|->
name|isNavigationBarVisible
argument_list|()
condition|?
literal|2
else|:
literal|1
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleCalendarWidget
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
operator|||
operator|!
name|child
operator|->
name|object
argument_list|()
operator|||
name|childCount
argument_list|()
operator|<=
literal|0
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|qobject_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|child
operator|->
name|object
argument_list|()
argument_list|)
condition|)
return|return
name|childCount
argument_list|()
operator|-
literal|1
return|;
comment|// FIXME
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|child
name|QAccessibleInterface
modifier|*
name|QAccessibleCalendarWidget
operator|::
name|child
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|childCount
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|childCount
argument_list|()
operator|>
literal|1
operator|&&
name|index
operator|==
literal|0
condition|)
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|navigationBar
argument_list|()
argument_list|)
return|;
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|calendarView
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|calendarWidget
name|QCalendarWidget
modifier|*
name|QAccessibleCalendarWidget
operator|::
name|calendarWidget
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QCalendarWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|calendarView
name|QAbstractItemView
modifier|*
name|QAccessibleCalendarWidget
operator|::
name|calendarView
parameter_list|()
specifier|const
block|{
foreach|foreach
control|(
name|QObject
modifier|*
name|child
decl|,
name|calendarWidget
argument_list|()
operator|->
name|children
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|->
name|objectName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"qt_calendar_calendarview"
argument_list|)
condition|)
return|return
cast|static_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|child
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|navigationBar
name|QWidget
modifier|*
name|QAccessibleCalendarWidget
operator|::
name|navigationBar
parameter_list|()
specifier|const
block|{
foreach|foreach
control|(
name|QObject
modifier|*
name|child
decl|,
name|calendarWidget
argument_list|()
operator|->
name|children
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|->
name|objectName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"qt_calendar_navigationbar"
argument_list|)
condition|)
return|return
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|child
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CALENDARWIDGET
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
end_ifndef
begin_comment
comment|// Dock Widget - order of children:
end_comment
begin_comment
comment|// - Content widget
end_comment
begin_comment
comment|// - Float button
end_comment
begin_comment
comment|// - Close button
end_comment
begin_comment
comment|// If there is a custom title bar widget, that one becomes child 1, after the content 0
end_comment
begin_comment
comment|// (in that case the buttons are ignored)
end_comment
begin_constructor
DECL|function|QAccessibleDockWidget
name|QAccessibleDockWidget
operator|::
name|QAccessibleDockWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|Window
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|dockWidgetLayout
name|QDockWidgetLayout
modifier|*
name|QAccessibleDockWidget
operator|::
name|dockWidgetLayout
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|dockWidget
argument_list|()
operator|->
name|layout
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleDockWidget
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|dockWidget
argument_list|()
operator|->
name|titleBarWidget
argument_list|()
condition|)
block|{
return|return
name|dockWidget
argument_list|()
operator|->
name|widget
argument_list|()
condition|?
literal|2
else|:
literal|1
return|;
block|}
return|return
name|dockWidgetLayout
argument_list|()
operator|->
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|child
name|QAccessibleInterface
modifier|*
name|QAccessibleDockWidget
operator|::
name|child
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|dockWidget
argument_list|()
operator|->
name|titleBarWidget
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
operator|!
name|dockWidget
argument_list|()
operator|->
name|widget
argument_list|()
operator|&&
name|index
operator|==
literal|0
operator|)
operator|||
operator|(
name|index
operator|==
literal|1
operator|)
condition|)
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|dockWidget
argument_list|()
operator|->
name|titleBarWidget
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|index
operator|==
literal|0
condition|)
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|dockWidget
argument_list|()
operator|->
name|widget
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|QLayoutItem
modifier|*
name|item
init|=
name|dockWidgetLayout
argument_list|()
operator|->
name|itemAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|item
operator|->
name|widget
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleDockWidget
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
operator|||
operator|!
name|child
operator|->
name|object
argument_list|()
operator|||
name|child
operator|->
name|object
argument_list|()
operator|->
name|parent
argument_list|()
operator|!=
name|object
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|dockWidget
argument_list|()
operator|->
name|titleBarWidget
argument_list|()
operator|==
name|child
operator|->
name|object
argument_list|()
condition|)
block|{
return|return
name|dockWidget
argument_list|()
operator|->
name|widget
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
block|}
return|return
name|dockWidgetLayout
argument_list|()
operator|->
name|indexOf
argument_list|(
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|child
operator|->
name|object
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleDockWidget
operator|::
name|rect
parameter_list|()
specifier|const
block|{
name|QRect
name|rect
decl_stmt|;
if|if
condition|(
name|dockWidget
argument_list|()
operator|->
name|isFloating
argument_list|()
condition|)
block|{
name|rect
operator|=
name|dockWidget
argument_list|()
operator|->
name|frameGeometry
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rect
operator|=
name|dockWidget
argument_list|()
operator|->
name|rect
argument_list|()
expr_stmt|;
name|rect
operator|.
name|moveTopLeft
argument_list|(
name|dockWidget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rect
return|;
block|}
end_function
begin_function
DECL|function|dockWidget
name|QDockWidget
modifier|*
name|QAccessibleDockWidget
operator|::
name|dockWidget
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleDockWidget
operator|::
name|text
parameter_list|(
name|QAccessible
operator|::
name|Text
name|t
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|Name
condition|)
block|{
return|return
name|qt_accStripAmp
argument_list|(
name|dockWidget
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DOCKWIDGET
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_constructor
DECL|function|QAccessibleTextWidget
name|QAccessibleTextWidget
operator|::
name|QAccessibleTextWidget
parameter_list|(
name|QWidget
modifier|*
name|o
parameter_list|,
name|QAccessible
operator|::
name|Role
name|r
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|o
argument_list|,
name|r
argument_list|,
name|name
argument_list|)
block|{  }
end_constructor
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleTextWidget
operator|::
name|state
parameter_list|()
specifier|const
block|{
name|QAccessible
operator|::
name|State
name|s
init|=
name|QAccessibleWidget
operator|::
name|state
argument_list|()
decl_stmt|;
name|s
operator|.
name|selectableText
operator|=
literal|true
expr_stmt|;
name|s
operator|.
name|multiLine
operator|=
literal|true
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|characterRect
name|QRect
name|QAccessibleTextWidget
operator|::
name|characterRect
parameter_list|(
name|int
name|offset
parameter_list|)
specifier|const
block|{
name|QTextBlock
name|block
init|=
name|textDocument
argument_list|()
operator|->
name|findBlock
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|block
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QTextLayout
modifier|*
name|layout
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
name|QPointF
name|layoutPosition
init|=
name|layout
operator|->
name|position
argument_list|()
decl_stmt|;
name|int
name|relativeOffset
init|=
name|offset
operator|-
name|block
operator|.
name|position
argument_list|()
decl_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|->
name|lineForTextPosition
argument_list|(
name|relativeOffset
argument_list|)
decl_stmt|;
name|QRect
name|r
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qreal
name|x
init|=
name|line
operator|.
name|cursorToX
argument_list|(
name|relativeOffset
argument_list|)
decl_stmt|;
name|QFontMetrics
name|fm
argument_list|(
name|textCursor
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|ch
init|=
name|text
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|w
init|=
name|fm
operator|.
name|width
argument_list|(
name|ch
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|fm
operator|.
name|height
argument_list|()
decl_stmt|;
name|r
operator|=
name|QRect
argument_list|(
name|layoutPosition
operator|.
name|x
argument_list|()
operator|+
name|x
argument_list|,
name|layoutPosition
operator|.
name|y
argument_list|()
operator|+
name|line
operator|.
name|y
argument_list|()
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|r
operator|.
name|moveTo
argument_list|(
name|viewport
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|translate
argument_list|(
operator|-
name|scrollBarPosition
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|offsetAtPoint
name|int
name|QAccessibleTextWidget
operator|::
name|offsetAtPoint
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|)
specifier|const
block|{
name|QPoint
name|p
init|=
name|viewport
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|point
argument_list|)
decl_stmt|;
comment|// convert to document coordinates
name|p
operator|+=
name|scrollBarPosition
argument_list|()
expr_stmt|;
return|return
name|textDocument
argument_list|()
operator|->
name|documentLayout
argument_list|()
operator|->
name|hitTest
argument_list|(
name|p
argument_list|,
name|Qt
operator|::
name|ExactHit
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|selectionCount
name|int
name|QAccessibleTextWidget
operator|::
name|selectionCount
parameter_list|()
specifier|const
block|{
return|return
name|textCursor
argument_list|()
operator|.
name|hasSelection
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|attributes
name|QString
name|QAccessibleTextWidget
operator|::
name|attributes
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
specifier|const
block|{
comment|/* The list of attributes can be found at:      http://linuxfoundation.org/collaborate/workgroups/accessibility/iaccessible2/textattributes     */
comment|// IAccessible2 defines -1 as length and -2 as cursor position
if|if
condition|(
name|offset
operator|==
operator|-
literal|2
condition|)
name|offset
operator|=
name|cursorPosition
argument_list|()
expr_stmt|;
specifier|const
name|int
name|charCount
init|=
name|characterCount
argument_list|()
decl_stmt|;
comment|// -1 doesn't make much sense here, but it's better to return something
comment|// screen readers may ask for text attributes at the cursor pos which may be equal to length
if|if
condition|(
name|offset
operator|==
operator|-
literal|1
operator|||
name|offset
operator|==
name|charCount
condition|)
name|offset
operator|=
name|charCount
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|offset
argument_list|<
literal|0
operator|||
name|offset
argument_list|>
name|charCount
condition|)
block|{
operator|*
name|startOffset
operator|=
operator|-
literal|1
expr_stmt|;
operator|*
name|endOffset
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
name|QTextCursor
name|cursor
init|=
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|cursor
operator|.
name|block
argument_list|()
decl_stmt|;
name|int
name|blockStart
init|=
name|block
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|blockEnd
init|=
name|blockStart
operator|+
name|block
operator|.
name|length
argument_list|()
decl_stmt|;
name|QTextBlock
operator|::
name|iterator
name|iter
init|=
name|block
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|iter
operator|.
name|fragment
argument_list|()
operator|.
name|contains
argument_list|(
name|offset
argument_list|)
condition|)
operator|++
name|iter
expr_stmt|;
name|QTextFragment
name|fragment
init|=
name|iter
operator|.
name|fragment
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|fragment
operator|.
name|position
argument_list|()
decl_stmt|;
comment|// text block and fragment may overlap, use the smallest common range
operator|*
name|startOffset
operator|=
name|qMax
argument_list|(
name|pos
argument_list|,
name|blockStart
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|*
name|startOffset
operator|<=
name|offset
argument_list|)
expr_stmt|;
operator|*
name|endOffset
operator|=
name|qMin
argument_list|(
name|pos
operator|+
name|fragment
operator|.
name|length
argument_list|()
argument_list|,
name|blockEnd
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|*
name|endOffset
operator|>=
name|offset
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|charFormat
init|=
name|fragment
operator|.
name|charFormat
argument_list|()
decl_stmt|;
name|QTextBlockFormat
name|blockFormat
init|=
name|cursor
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QMap
argument_list|<
name|QByteArray
argument_list|,
name|QString
argument_list|>
name|attrs
decl_stmt|;
name|QString
name|family
init|=
name|charFormat
operator|.
name|fontFamily
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|family
operator|=
name|family
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
name|QStringLiteral
argument_list|(
literal|"\\\\"
argument_list|)
argument_list|)
expr_stmt|;
name|family
operator|=
name|family
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
name|QStringLiteral
argument_list|(
literal|"\\:"
argument_list|)
argument_list|)
expr_stmt|;
name|family
operator|=
name|family
operator|.
name|replace
argument_list|(
literal|','
argument_list|,
name|QStringLiteral
argument_list|(
literal|"\\,"
argument_list|)
argument_list|)
expr_stmt|;
name|family
operator|=
name|family
operator|.
name|replace
argument_list|(
literal|'='
argument_list|,
name|QStringLiteral
argument_list|(
literal|"\\="
argument_list|)
argument_list|)
expr_stmt|;
name|family
operator|=
name|family
operator|.
name|replace
argument_list|(
literal|';'
argument_list|,
name|QStringLiteral
argument_list|(
literal|"\\;"
argument_list|)
argument_list|)
expr_stmt|;
name|family
operator|=
name|family
operator|.
name|replace
argument_list|(
literal|'\"'
argument_list|,
name|QStringLiteral
argument_list|(
literal|"\\\""
argument_list|)
argument_list|)
expr_stmt|;
name|attrs
index|[
literal|"font-family"
index|]
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"%1\""
argument_list|)
operator|.
name|arg
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
name|int
name|fontSize
init|=
name|int
argument_list|(
name|charFormat
operator|.
name|fontPointSize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontSize
condition|)
name|attrs
index|[
literal|"font-size"
index|]
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1pt"
argument_list|)
operator|.
name|arg
argument_list|(
name|fontSize
argument_list|)
expr_stmt|;
comment|//Different weight values are not handled
name|attrs
index|[
literal|"font-weight"
index|]
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|charFormat
operator|.
name|fontWeight
argument_list|()
operator|>
name|QFont
operator|::
name|Normal
condition|?
literal|"bold"
else|:
literal|"normal"
argument_list|)
expr_stmt|;
name|QFont
operator|::
name|Style
name|style
init|=
name|charFormat
operator|.
name|font
argument_list|()
operator|.
name|style
argument_list|()
decl_stmt|;
name|attrs
index|[
literal|"font-style"
index|]
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
operator|(
name|style
operator|==
name|QFont
operator|::
name|StyleItalic
operator|)
condition|?
literal|"italic"
else|:
operator|(
operator|(
name|style
operator|==
name|QFont
operator|::
name|StyleOblique
operator|)
condition|?
literal|"oblique"
else|:
literal|"normal"
operator|)
argument_list|)
expr_stmt|;
name|attrs
index|[
literal|"text-underline-style"
index|]
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|charFormat
operator|.
name|font
argument_list|()
operator|.
name|underline
argument_list|()
condition|?
literal|"solid"
else|:
literal|"none"
argument_list|)
expr_stmt|;
name|QTextCharFormat
operator|::
name|VerticalAlignment
name|alignment
init|=
name|charFormat
operator|.
name|verticalAlignment
argument_list|()
decl_stmt|;
name|attrs
index|[
literal|"text-position"
index|]
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
operator|(
name|alignment
operator|==
name|QTextCharFormat
operator|::
name|AlignSubScript
operator|)
condition|?
literal|"sub"
else|:
operator|(
operator|(
name|alignment
operator|==
name|QTextCharFormat
operator|::
name|AlignSuperScript
operator|)
condition|?
literal|"super"
else|:
literal|"baseline"
operator|)
argument_list|)
expr_stmt|;
name|QBrush
name|background
init|=
name|charFormat
operator|.
name|background
argument_list|()
decl_stmt|;
if|if
condition|(
name|background
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
condition|)
block|{
name|attrs
index|[
literal|"background-color"
index|]
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"rgb(%1,%2,%3)"
argument_list|)
operator|.
name|arg
argument_list|(
name|background
operator|.
name|color
argument_list|()
operator|.
name|red
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|background
operator|.
name|color
argument_list|()
operator|.
name|green
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|background
operator|.
name|color
argument_list|()
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QBrush
name|foreground
init|=
name|charFormat
operator|.
name|foreground
argument_list|()
decl_stmt|;
if|if
condition|(
name|foreground
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
condition|)
block|{
name|attrs
index|[
literal|"color"
index|]
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"rgb(%1,%2,%3)"
argument_list|)
operator|.
name|arg
argument_list|(
name|foreground
operator|.
name|color
argument_list|()
operator|.
name|red
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|foreground
operator|.
name|color
argument_list|()
operator|.
name|green
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|foreground
operator|.
name|color
argument_list|()
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|blockFormat
operator|.
name|alignment
argument_list|()
operator|&
operator|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignHCenter
operator||
name|Qt
operator|::
name|AlignJustify
operator|)
condition|)
block|{
case|case
name|Qt
operator|::
name|AlignLeft
case|:
name|attrs
index|[
literal|"text-align"
index|]
operator|=
name|QStringLiteral
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|AlignRight
case|:
name|attrs
index|[
literal|"text-align"
index|]
operator|=
name|QStringLiteral
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|AlignHCenter
case|:
name|attrs
index|[
literal|"text-align"
index|]
operator|=
name|QStringLiteral
argument_list|(
literal|"center"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|AlignJustify
case|:
name|attrs
index|[
literal|"text-align"
index|]
operator|=
name|QStringLiteral
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
break|break;
block|}
name|QString
name|result
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QByteArray
modifier|&
name|attributeName
decl|,
name|attrs
operator|.
name|keys
argument_list|()
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|attributeName
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|attrs
index|[
name|attributeName
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|cursorPosition
name|int
name|QAccessibleTextWidget
operator|::
name|cursorPosition
parameter_list|()
specifier|const
block|{
return|return
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|selection
name|void
name|QAccessibleTextWidget
operator|::
name|selection
parameter_list|(
name|int
name|selectionIndex
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
specifier|const
block|{
operator|*
name|startOffset
operator|=
operator|*
name|endOffset
operator|=
literal|0
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|textCursor
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectionIndex
operator|!=
literal|0
operator|||
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
return|return;
operator|*
name|startOffset
operator|=
name|cursor
operator|.
name|selectionStart
argument_list|()
expr_stmt|;
operator|*
name|endOffset
operator|=
name|cursor
operator|.
name|selectionEnd
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleTextWidget
operator|::
name|text
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
specifier|const
block|{
name|QTextCursor
name|cursor
argument_list|(
name|textCursor
argument_list|()
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|startOffset
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|endOffset
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
return|return
name|cursor
operator|.
name|selectedText
argument_list|()
operator|.
name|replace
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|scrollBarPosition
name|QPoint
name|QAccessibleTextWidget
operator|::
name|scrollBarPosition
parameter_list|()
specifier|const
block|{
return|return
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|textBeforeOffset
name|QString
name|QAccessibleTextWidget
operator|::
name|textBeforeOffset
parameter_list|(
name|int
name|offset
parameter_list|,
name|QAccessible
operator|::
name|TextBoundaryType
name|boundaryType
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|boundaries
init|=
name|QAccessible
operator|::
name|qAccessibleTextBoundaryHelper
argument_list|(
name|cursor
argument_list|,
name|boundaryType
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|boundaries
operator|.
name|first
operator|-
literal|1
argument_list|)
expr_stmt|;
name|boundaries
operator|=
name|QAccessible
operator|::
name|qAccessibleTextBoundaryHelper
argument_list|(
name|cursor
argument_list|,
name|boundaryType
argument_list|)
expr_stmt|;
operator|*
name|startOffset
operator|=
name|boundaries
operator|.
name|first
expr_stmt|;
operator|*
name|endOffset
operator|=
name|boundaries
operator|.
name|second
expr_stmt|;
return|return
name|text
argument_list|(
name|boundaries
operator|.
name|first
argument_list|,
name|boundaries
operator|.
name|second
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|textAfterOffset
name|QString
name|QAccessibleTextWidget
operator|::
name|textAfterOffset
parameter_list|(
name|int
name|offset
parameter_list|,
name|QAccessible
operator|::
name|TextBoundaryType
name|boundaryType
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|boundaries
init|=
name|QAccessible
operator|::
name|qAccessibleTextBoundaryHelper
argument_list|(
name|cursor
argument_list|,
name|boundaryType
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|boundaries
operator|.
name|second
argument_list|)
expr_stmt|;
name|boundaries
operator|=
name|QAccessible
operator|::
name|qAccessibleTextBoundaryHelper
argument_list|(
name|cursor
argument_list|,
name|boundaryType
argument_list|)
expr_stmt|;
operator|*
name|startOffset
operator|=
name|boundaries
operator|.
name|first
expr_stmt|;
operator|*
name|endOffset
operator|=
name|boundaries
operator|.
name|second
expr_stmt|;
return|return
name|text
argument_list|(
name|boundaries
operator|.
name|first
argument_list|,
name|boundaries
operator|.
name|second
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|textAtOffset
name|QString
name|QAccessibleTextWidget
operator|::
name|textAtOffset
parameter_list|(
name|int
name|offset
parameter_list|,
name|QAccessible
operator|::
name|TextBoundaryType
name|boundaryType
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|boundaries
init|=
name|QAccessible
operator|::
name|qAccessibleTextBoundaryHelper
argument_list|(
name|cursor
argument_list|,
name|boundaryType
argument_list|)
decl_stmt|;
operator|*
name|startOffset
operator|=
name|boundaries
operator|.
name|first
expr_stmt|;
operator|*
name|endOffset
operator|=
name|boundaries
operator|.
name|second
expr_stmt|;
return|return
name|text
argument_list|(
name|boundaries
operator|.
name|first
argument_list|,
name|boundaries
operator|.
name|second
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setCursorPosition
name|void
name|QAccessibleTextWidget
operator|::
name|setCursorPosition
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|QTextCursor
name|cursor
init|=
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addSelection
name|void
name|QAccessibleTextWidget
operator|::
name|addSelection
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|setSelection
argument_list|(
literal|0
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeSelection
name|void
name|QAccessibleTextWidget
operator|::
name|removeSelection
parameter_list|(
name|int
name|selectionIndex
parameter_list|)
block|{
if|if
condition|(
name|selectionIndex
operator|!=
literal|0
condition|)
return|return;
name|QTextCursor
name|cursor
init|=
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSelection
name|void
name|QAccessibleTextWidget
operator|::
name|setSelection
parameter_list|(
name|int
name|selectionIndex
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
if|if
condition|(
name|selectionIndex
operator|!=
literal|0
condition|)
return|return;
name|QTextCursor
name|cursor
init|=
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|startOffset
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|endOffset
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|characterCount
name|int
name|QAccessibleTextWidget
operator|::
name|characterCount
parameter_list|()
specifier|const
block|{
name|QTextCursor
name|cursor
init|=
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
return|return
name|cursor
operator|.
name|position
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|textCursorForRange
name|QTextCursor
name|QAccessibleTextWidget
operator|::
name|textCursorForRange
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
specifier|const
block|{
name|QTextCursor
name|cursor
init|=
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|startOffset
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|endOffset
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
return|return
name|cursor
return|;
block|}
end_function
begin_function
DECL|function|deleteText
name|void
name|QAccessibleTextWidget
operator|::
name|deleteText
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|QTextCursor
name|cursor
init|=
name|textCursorForRange
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertText
name|void
name|QAccessibleTextWidget
operator|::
name|insertText
parameter_list|(
name|int
name|offset
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QTextCursor
name|cursor
init|=
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replaceText
name|void
name|QAccessibleTextWidget
operator|::
name|replaceText
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QTextCursor
name|cursor
init|=
name|textCursorForRange
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CURSOR
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MAINWINDOW
end_ifndef
begin_constructor
DECL|function|QAccessibleMainWindow
name|QAccessibleMainWindow
operator|::
name|QAccessibleMainWindow
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|Window
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|child
name|QAccessibleInterface
modifier|*
name|QAccessibleMainWindow
operator|::
name|child
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|kids
init|=
name|childWidgets
argument_list|(
name|mainWindow
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|kids
operator|.
name|count
argument_list|()
condition|)
block|{
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|kids
operator|.
name|at
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleMainWindow
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|kids
init|=
name|childWidgets
argument_list|(
name|mainWindow
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|kids
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleMainWindow
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|kids
init|=
name|childWidgets
argument_list|(
name|mainWindow
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|kids
operator|.
name|indexOf
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|iface
operator|->
name|object
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|QAccessibleInterface
modifier|*
name|QAccessibleMainWindow
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
name|QWidget
modifier|*
name|w
init|=
name|widget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isVisible
argument_list|()
condition|)
return|return
literal|0
return|;
name|QPoint
name|gp
init|=
name|w
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QRect
argument_list|(
name|gp
operator|.
name|x
argument_list|()
argument_list|,
name|gp
operator|.
name|y
argument_list|()
argument_list|,
name|w
operator|->
name|width
argument_list|()
argument_list|,
name|w
operator|->
name|height
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
return|return
literal|0
return|;
name|QWidgetList
name|kids
init|=
name|childWidgets
argument_list|(
name|mainWindow
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|rp
init|=
name|mainWindow
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kids
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|child
init|=
name|kids
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|child
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|child
operator|->
name|isHidden
argument_list|()
operator|&&
name|child
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|rp
argument_list|)
condition|)
block|{
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|child
argument_list|)
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|mainWindow
name|QMainWindow
modifier|*
name|QAccessibleMainWindow
operator|::
name|mainWindow
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_MAINWINDOW
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
end_unit
