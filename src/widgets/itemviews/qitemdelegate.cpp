begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qitemdelegate.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
end_ifndef
begin_include
include|#
directive|include
file|<qabstractitemmodel.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qbrush.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<qtextedit.h>
end_include
begin_include
include|#
directive|include
file|<qplaintextedit.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qpalette.h>
end_include
begin_include
include|#
directive|include
file|<qpoint.h>
end_include
begin_include
include|#
directive|include
file|<qrect.h>
end_include
begin_include
include|#
directive|include
file|<qsize.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qpixmap.h>
end_include
begin_include
include|#
directive|include
file|<qbitmap.h>
end_include
begin_include
include|#
directive|include
file|<qpixmapcache.h>
end_include
begin_include
include|#
directive|include
file|<qitemeditorfactory.h>
end_include
begin_include
include|#
directive|include
file|<qmetaobject.h>
end_include
begin_include
include|#
directive|include
file|<qtextlayout.h>
end_include
begin_include
include|#
directive|include
file|<private/qobject_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdnd_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qtextengine_p.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qlocale.h>
end_include
begin_include
include|#
directive|include
file|<qdialog.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|DBL_DIG
end_ifndef
begin_define
DECL|macro|DBL_DIG
define|#
directive|define
name|DBL_DIG
value|10
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QItemDelegatePrivate
class|class
name|QItemDelegatePrivate
super|:
specifier|public
name|QObjectPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QItemDelegate
parameter_list|)
specifier|public
private|:
DECL|function|QItemDelegatePrivate
name|QItemDelegatePrivate
parameter_list|()
member_init_list|:
name|f
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|clipPainting
argument_list|(
literal|true
argument_list|)
block|{}
DECL|function|editorFactory
specifier|inline
specifier|const
name|QItemEditorFactory
modifier|*
name|editorFactory
parameter_list|()
specifier|const
block|{
return|return
name|f
condition|?
name|f
else|:
name|QItemEditorFactory
operator|::
name|defaultFactory
argument_list|()
return|;
block|}
DECL|function|iconMode
specifier|inline
name|QIcon
operator|::
name|Mode
name|iconMode
parameter_list|(
name|QStyle
operator|::
name|State
name|state
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
operator|(
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
condition|)
return|return
name|QIcon
operator|::
name|Disabled
return|;
if|if
condition|(
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
return|return
name|QIcon
operator|::
name|Selected
return|;
return|return
name|QIcon
operator|::
name|Normal
return|;
block|}
DECL|function|iconState
specifier|inline
name|QIcon
operator|::
name|State
name|iconState
parameter_list|(
name|QStyle
operator|::
name|State
name|state
parameter_list|)
specifier|const
block|{
return|return
name|state
operator|&
name|QStyle
operator|::
name|State_Open
condition|?
name|QIcon
operator|::
name|On
else|:
name|QIcon
operator|::
name|Off
return|;
block|}
DECL|function|replaceNewLine
specifier|inline
specifier|static
name|QString
name|replaceNewLine
parameter_list|(
name|QString
name|text
parameter_list|)
block|{
specifier|const
name|QChar
name|nl
init|=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|text
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|nl
condition|)
name|text
index|[
name|i
index|]
operator|=
name|QChar
operator|::
name|LineSeparator
expr_stmt|;
return|return
name|text
return|;
block|}
specifier|static
name|QString
name|valueToText
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
specifier|const
name|QStyleOptionViewItemV4
modifier|&
name|option
parameter_list|)
function_decl|;
name|void
name|_q_commitDataAndCloseEditor
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|)
function_decl|;
DECL|member|f
name|QItemEditorFactory
modifier|*
name|f
decl_stmt|;
DECL|member|clipPainting
name|bool
name|clipPainting
decl_stmt|;
name|QRect
name|textLayoutBounds
parameter_list|(
specifier|const
name|QStyleOptionViewItemV2
modifier|&
name|options
parameter_list|)
specifier|const
function_decl|;
name|QSizeF
name|doTextLayout
parameter_list|(
name|int
name|lineWidth
parameter_list|)
specifier|const
function_decl|;
DECL|member|textLayout
specifier|mutable
name|QTextLayout
name|textLayout
decl_stmt|;
DECL|member|textOption
specifier|mutable
name|QTextOption
name|textOption
decl_stmt|;
DECL|function|widget
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|(
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|)
specifier|const
block|{
if|if
condition|(
specifier|const
name|QStyleOptionViewItemV3
modifier|*
name|v3
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItemV3
operator|*
argument_list|>
argument_list|(
operator|&
name|option
argument_list|)
condition|)
return|return
name|v3
operator|->
name|widget
return|;
return|return
literal|0
return|;
block|}
comment|// ### temporary hack until we have QStandardItemDelegate
DECL|struct|Icon
specifier|mutable
struct|struct
name|Icon
block|{
DECL|member|icon
name|QIcon
name|icon
decl_stmt|;
DECL|member|mode
name|QIcon
operator|::
name|Mode
name|mode
decl_stmt|;
DECL|member|state
name|QIcon
operator|::
name|State
name|state
decl_stmt|;
DECL|member|tmp
block|}
name|tmp
struct|;
block|}
class|;
end_class
begin_function
DECL|function|_q_commitDataAndCloseEditor
name|void
name|QItemDelegatePrivate
operator|::
name|_q_commitDataAndCloseEditor
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QItemDelegate
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|commitData
argument_list|(
name|editor
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|closeEditor
argument_list|(
name|editor
argument_list|,
name|QAbstractItemDelegate
operator|::
name|SubmitModelCache
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|textLayoutBounds
name|QRect
name|QItemDelegatePrivate
operator|::
name|textLayoutBounds
parameter_list|(
specifier|const
name|QStyleOptionViewItemV2
modifier|&
name|option
parameter_list|)
specifier|const
block|{
name|QRect
name|rect
init|=
name|option
operator|.
name|rect
decl_stmt|;
specifier|const
name|bool
name|wrapText
init|=
name|option
operator|.
name|features
operator|&
name|QStyleOptionViewItemV2
operator|::
name|WrapText
decl_stmt|;
switch|switch
condition|(
name|option
operator|.
name|decorationPosition
condition|)
block|{
case|case
name|QStyleOptionViewItem
operator|::
name|Left
case|:
case|case
name|QStyleOptionViewItem
operator|::
name|Right
case|:
name|rect
operator|.
name|setWidth
argument_list|(
name|wrapText
operator|&&
name|rect
operator|.
name|isValid
argument_list|()
condition|?
name|rect
operator|.
name|width
argument_list|()
else|:
operator|(
name|QFIXED_MAX
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QStyleOptionViewItem
operator|::
name|Top
case|:
case|case
name|QStyleOptionViewItem
operator|::
name|Bottom
case|:
name|rect
operator|.
name|setWidth
argument_list|(
name|wrapText
condition|?
name|option
operator|.
name|decorationSize
operator|.
name|width
argument_list|()
else|:
operator|(
name|QFIXED_MAX
operator|)
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|rect
return|;
block|}
end_function
begin_function
DECL|function|doTextLayout
name|QSizeF
name|QItemDelegatePrivate
operator|::
name|doTextLayout
parameter_list|(
name|int
name|lineWidth
parameter_list|)
specifier|const
block|{
name|qreal
name|height
init|=
literal|0
decl_stmt|;
name|qreal
name|widthUsed
init|=
literal|0
decl_stmt|;
name|textLayout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|QTextLine
name|line
init|=
name|textLayout
operator|.
name|createLine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|isValid
argument_list|()
condition|)
break|break;
name|line
operator|.
name|setLineWidth
argument_list|(
name|lineWidth
argument_list|)
expr_stmt|;
name|line
operator|.
name|setPosition
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|height
operator|+=
name|line
operator|.
name|height
argument_list|()
expr_stmt|;
name|widthUsed
operator|=
name|qMax
argument_list|(
name|widthUsed
argument_list|,
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|textLayout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
return|return
name|QSizeF
argument_list|(
name|widthUsed
argument_list|,
name|height
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QItemDelegate      \brief The QItemDelegate class provides display and editing facilities for     data items from a model.      \ingroup model-view     \inmodule QtWidgets      QItemDelegate can be used to provide custom display features and editor     widgets for item views based on QAbstractItemView subclasses. Using a     delegate for this purpose allows the display and editing mechanisms to be     customized and developed independently from the model and view.      The QItemDelegate class is one of the \l{Model/View Classes} and     is part of Qt's \l{Model/View Programming}{model/view framework}.     Note that QStyledItemDelegate has taken over the job of drawing     Qt's item views. We recommend the use of QStyledItemDelegate when     creating new delegates.      When displaying items from a custom model in a standard view, it is     often sufficient to simply ensure that the model returns appropriate     data for each of the \l{Qt::ItemDataRole}{roles} that determine the     appearance of items in views. The default delegate used by Qt's     standard views uses this role information to display items in most     of the common forms expected by users. However, it is sometimes     necessary to have even more control over the appearance of items than     the default delegate can provide.      This class provides default implementations of the functions for     painting item data in a view and editing data from item models.     Default implementations of the paint() and sizeHint() virtual     functions, defined in QAbstractItemDelegate, are provided to     ensure that the delegate implements the correct basic behavior     expected by views. You can reimplement these functions in     subclasses to customize the appearance of items.      When editing data in an item view, QItemDelegate provides an     editor widget, which is a widget that is placed on top of the view     while editing takes place. Editors are created with a     QItemEditorFactory; a default static instance provided by     QItemEditorFactory is installed on all item delegates. You can set     a custom factory using setItemEditorFactory() or set a new default     factory with QItemEditorFactory::setDefaultFactory(). It is the     data stored in the item model with the Qt::EditRole that is edited.      Only the standard editing functions for widget-based delegates are     reimplemented here:      \list         \o createEditor() returns the widget used to change data from the model            and can be reimplemented to customize editing behavior.         \o setEditorData() provides the widget with data to manipulate.         \o updateEditorGeometry() ensures that the editor is displayed correctly            with respect to the item view.         \o setModelData() returns updated data to the model.     \endlist      The closeEditor() signal indicates that the user has completed editing the data,     and that the editor widget can be destroyed.      \section1 Standard Roles and Data Types      The default delegate used by the standard views supplied with Qt     associates each standard role (defined by Qt::ItemDataRole) with certain     data types. Models that return data in these types can influence the     appearance of the delegate as described in the following table.      \table     \header \o Role \o Accepted Types     \omit     \row    \o \l Qt::AccessibleDescriptionRole \o QString     \row    \o \l Qt::AccessibleTextRole \o QString     \endomit     \row    \o \l Qt::BackgroundRole \o QBrush     \row    \o \l Qt::BackgroundColorRole \o QColor (obsolete; use Qt::BackgroundRole instead)     \row    \o \l Qt::CheckStateRole \o Qt::CheckState     \row    \o \l Qt::DecorationRole \o QIcon, QPixmap and QColor     \row    \o \l Qt::DisplayRole \o QString and types with a string representation     \row    \o \l Qt::EditRole \o See QItemEditorFactory for details     \row    \o \l Qt::FontRole \o QFont     \row    \o \l Qt::SizeHintRole \o QSize     \omit     \row    \o \l Qt::StatusTipRole \o     \endomit     \row    \o \l Qt::TextAlignmentRole \o Qt::Alignment     \row    \o \l Qt::ForegroundRole \o QBrush     \row    \o \l Qt::TextColorRole \o QColor (obsolete; use Qt::ForegroundRole instead)     \omit     \row    \o \l Qt::ToolTipRole     \row    \o \l Qt::WhatsThisRole     \endomit     \endtable      If the default delegate does not allow the level of customization that     you need, either for display purposes or for editing data, it is possible to     subclass QItemDelegate to implement the desired behavior.      \section1 Subclassing      When subclassing QItemDelegate to create a delegate that displays items     using a custom renderer, it is important to ensure that the delegate can     render items suitably for all the required states; e.g. selected,     disabled, checked. The documentation for the paint() function contains     some hints to show how this can be achieved.      You can provide custom editors by using a QItemEditorFactory. The     \l{Color Editor Factory Example} shows how a custom editor can be     made available to delegates with the default item editor     factory. This way, there is no need to subclass QItemDelegate.  An     alternative is to reimplement createEditor(), setEditorData(),     setModelData(), and updateEditorGeometry(). This process is     described in the \l{Spin Box Delegate Example}.      \section1 QStyledItemDelegate vs. QItemDelegate      Since Qt 4.4, there are two delegate classes: QItemDelegate and     QStyledItemDelegate. However, the default delegate is QStyledItemDelegate.     These two classes are independent alternatives to painting and providing     editors for items in views. The difference between them is that     QStyledItemDelegate uses the current style to paint its items. We therefore     recommend using QStyledItemDelegate as the base class when implementing     custom delegates or when working with Qt style sheets. The code required     for either class should be equal unless the custom delegate needs to use     the style for drawing.      \sa {Delegate Classes}, QStyledItemDelegate, QAbstractItemDelegate,         {Spin Box Delegate Example}, {Settings Editor Example},         {Icons Example} */
end_comment
begin_comment
comment|/*!     Constructs an item delegate with the given \a parent. */
end_comment
begin_constructor
DECL|function|QItemDelegate
name|QItemDelegate
operator|::
name|QItemDelegate
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemDelegate
argument_list|(
operator|*
operator|new
name|QItemDelegatePrivate
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{  }
end_constructor
begin_comment
comment|/*!     Destroys the item delegate. */
end_comment
begin_destructor
DECL|function|~QItemDelegate
name|QItemDelegate
operator|::
name|~
name|QItemDelegate
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!   \property QItemDelegate::clipping   \brief if the delegate should clip the paint events   \since 4.2    This property will set the paint clip to the size of the item.   The default value is on. It is useful for cases such   as when images are larger than the size of the item. */
end_comment
begin_function
DECL|function|hasClipping
name|bool
name|QItemDelegate
operator|::
name|hasClipping
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|clipPainting
return|;
block|}
end_function
begin_function
DECL|function|setClipping
name|void
name|QItemDelegate
operator|::
name|setClipping
parameter_list|(
name|bool
name|clip
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QItemDelegate
argument_list|)
expr_stmt|;
name|d
operator|->
name|clipPainting
operator|=
name|clip
expr_stmt|;
block|}
end_function
begin_function
DECL|function|valueToText
name|QString
name|QItemDelegatePrivate
operator|::
name|valueToText
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
specifier|const
name|QStyleOptionViewItemV4
modifier|&
name|option
parameter_list|)
block|{
name|QString
name|text
decl_stmt|;
switch|switch
condition|(
name|value
operator|.
name|userType
argument_list|()
condition|)
block|{
case|case
name|QMetaType
operator|::
name|Float
case|:
name|text
operator|=
name|option
operator|.
name|locale
operator|.
name|toString
argument_list|(
name|value
operator|.
name|toFloat
argument_list|()
argument_list|,
literal|'g'
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
name|text
operator|=
name|option
operator|.
name|locale
operator|.
name|toString
argument_list|(
name|value
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|'g'
argument_list|,
name|DBL_DIG
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Int
case|:
case|case
name|QVariant
operator|::
name|LongLong
case|:
name|text
operator|=
name|option
operator|.
name|locale
operator|.
name|toString
argument_list|(
name|value
operator|.
name|toLongLong
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|UInt
case|:
case|case
name|QVariant
operator|::
name|ULongLong
case|:
name|text
operator|=
name|option
operator|.
name|locale
operator|.
name|toString
argument_list|(
name|value
operator|.
name|toULongLong
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Date
case|:
name|text
operator|=
name|option
operator|.
name|locale
operator|.
name|toString
argument_list|(
name|value
operator|.
name|toDate
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Time
case|:
name|text
operator|=
name|option
operator|.
name|locale
operator|.
name|toString
argument_list|(
name|value
operator|.
name|toTime
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|DateTime
case|:
name|text
operator|=
name|option
operator|.
name|locale
operator|.
name|toString
argument_list|(
name|value
operator|.
name|toDateTime
argument_list|()
operator|.
name|date
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
expr_stmt|;
name|text
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|text
operator|+=
name|option
operator|.
name|locale
operator|.
name|toString
argument_list|(
name|value
operator|.
name|toDateTime
argument_list|()
operator|.
name|time
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
expr_stmt|;
break|break;
default|default:
name|text
operator|=
name|replaceNewLine
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|text
return|;
block|}
end_function
begin_comment
comment|/*!     Renders the delegate using the given \a painter and style \a option for     the item specified by \a index.      When reimplementing this function in a subclass, you should update the area     held by the option's \l{QStyleOption::rect}{rect} variable, using the     option's \l{QStyleOption::state}{state} variable to determine the state of     the item to be displayed, and adjust the way it is painted accordingly.      For example, a selected item may need to be displayed differently to     unselected items, as shown in the following code:      \snippet examples/itemviews/pixelator/pixeldelegate.cpp 2     \dots      After painting, you should ensure that the painter is returned to its     the state it was supplied in when this function was called. For example,     it may be useful to call QPainter::save() before painting and     QPainter::restore() afterwards.      \sa QStyle::State */
end_comment
begin_function
DECL|function|paint
name|void
name|QItemDelegate
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QStyleOptionViewItemV4
name|opt
init|=
name|setOptions
argument_list|(
name|index
argument_list|,
name|option
argument_list|)
decl_stmt|;
specifier|const
name|QStyleOptionViewItemV2
modifier|*
name|v2
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItemV2
operator|*
argument_list|>
argument_list|(
operator|&
name|option
argument_list|)
decl_stmt|;
name|opt
operator|.
name|features
operator|=
name|v2
condition|?
name|v2
operator|->
name|features
else|:
name|QStyleOptionViewItemV2
operator|::
name|ViewItemFeatures
argument_list|(
name|QStyleOptionViewItemV2
operator|::
name|None
argument_list|)
expr_stmt|;
specifier|const
name|QStyleOptionViewItemV3
modifier|*
name|v3
init|=
name|qstyleoption_cast
argument_list|<
specifier|const
name|QStyleOptionViewItemV3
operator|*
argument_list|>
argument_list|(
operator|&
name|option
argument_list|)
decl_stmt|;
name|opt
operator|.
name|locale
operator|=
name|v3
condition|?
name|v3
operator|->
name|locale
else|:
name|QLocale
argument_list|()
expr_stmt|;
name|opt
operator|.
name|widget
operator|=
name|v3
condition|?
name|v3
operator|->
name|widget
else|:
literal|0
expr_stmt|;
comment|// prepare
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|clipPainting
condition|)
name|painter
operator|->
name|setClipRect
argument_list|(
name|opt
operator|.
name|rect
argument_list|)
expr_stmt|;
comment|// get the data and the rectangles
name|QVariant
name|value
decl_stmt|;
name|QPixmap
name|pixmap
decl_stmt|;
name|QRect
name|decorationRect
decl_stmt|;
name|value
operator|=
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|DecorationRole
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// ### we need the pixmap to call the virtual function
name|pixmap
operator|=
name|decoration
argument_list|(
name|opt
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Icon
condition|)
block|{
name|d
operator|->
name|tmp
operator|.
name|icon
operator|=
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|d
operator|->
name|tmp
operator|.
name|mode
operator|=
name|d
operator|->
name|iconMode
argument_list|(
name|option
operator|.
name|state
argument_list|)
expr_stmt|;
name|d
operator|->
name|tmp
operator|.
name|state
operator|=
name|d
operator|->
name|iconState
argument_list|(
name|option
operator|.
name|state
argument_list|)
expr_stmt|;
specifier|const
name|QSize
name|size
init|=
name|d
operator|->
name|tmp
operator|.
name|icon
operator|.
name|actualSize
argument_list|(
name|option
operator|.
name|decorationSize
argument_list|,
name|d
operator|->
name|tmp
operator|.
name|mode
argument_list|,
name|d
operator|->
name|tmp
operator|.
name|state
argument_list|)
decl_stmt|;
name|decorationRect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|tmp
operator|.
name|icon
operator|=
name|QIcon
argument_list|()
expr_stmt|;
name|decorationRect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pixmap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|d
operator|->
name|tmp
operator|.
name|icon
operator|=
name|QIcon
argument_list|()
expr_stmt|;
name|decorationRect
operator|=
name|QRect
argument_list|()
expr_stmt|;
block|}
name|QString
name|text
decl_stmt|;
name|QRect
name|displayRect
decl_stmt|;
name|value
operator|=
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|value
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|text
operator|=
name|QItemDelegatePrivate
operator|::
name|valueToText
argument_list|(
name|value
argument_list|,
name|opt
argument_list|)
expr_stmt|;
name|displayRect
operator|=
name|textRectangle
argument_list|(
name|painter
argument_list|,
name|d
operator|->
name|textLayoutBounds
argument_list|(
name|opt
argument_list|)
argument_list|,
name|opt
operator|.
name|font
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
name|QRect
name|checkRect
decl_stmt|;
name|Qt
operator|::
name|CheckState
name|checkState
init|=
name|Qt
operator|::
name|Unchecked
decl_stmt|;
name|value
operator|=
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|CheckStateRole
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|checkState
operator|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|CheckState
argument_list|>
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|checkRect
operator|=
name|doCheck
argument_list|(
name|opt
argument_list|,
name|opt
operator|.
name|rect
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// do the layout
name|doLayout
argument_list|(
name|opt
argument_list|,
operator|&
name|checkRect
argument_list|,
operator|&
name|decorationRect
argument_list|,
operator|&
name|displayRect
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// draw the item
name|drawBackground
argument_list|(
name|painter
argument_list|,
name|opt
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|drawCheck
argument_list|(
name|painter
argument_list|,
name|opt
argument_list|,
name|checkRect
argument_list|,
name|checkState
argument_list|)
expr_stmt|;
name|drawDecoration
argument_list|(
name|painter
argument_list|,
name|opt
argument_list|,
name|decorationRect
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|drawDisplay
argument_list|(
name|painter
argument_list|,
name|opt
argument_list|,
name|displayRect
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|drawFocus
argument_list|(
name|painter
argument_list|,
name|opt
argument_list|,
name|displayRect
argument_list|)
expr_stmt|;
comment|// done
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the size needed by the delegate to display the item     specified by \a index, taking into account the style information     provided by \a option.      When reimplementing this function, note that in case of text     items, QItemDelegate adds a margin (i.e. 2 *     QStyle::PM_FocusFrameHMargin) to the length of the text. */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QItemDelegate
operator|::
name|sizeHint
parameter_list|(
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QVariant
name|value
init|=
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|SizeHintRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|qvariant_cast
argument_list|<
name|QSize
argument_list|>
argument_list|(
name|value
argument_list|)
return|;
name|QRect
name|decorationRect
init|=
name|rect
argument_list|(
name|option
argument_list|,
name|index
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
decl_stmt|;
name|QRect
name|displayRect
init|=
name|rect
argument_list|(
name|option
argument_list|,
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
decl_stmt|;
name|QRect
name|checkRect
init|=
name|rect
argument_list|(
name|option
argument_list|,
name|index
argument_list|,
name|Qt
operator|::
name|CheckStateRole
argument_list|)
decl_stmt|;
name|doLayout
argument_list|(
name|option
argument_list|,
operator|&
name|checkRect
argument_list|,
operator|&
name|decorationRect
argument_list|,
operator|&
name|displayRect
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|decorationRect
operator||
name|displayRect
operator||
name|checkRect
operator|)
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the widget used to edit the item specified by \a index     for editing. The \a parent widget and style \a option are used to     control how the editor widget appears.      \sa QAbstractItemDelegate::createEditor() */
end_comment
begin_function
DECL|function|createEditor
name|QWidget
modifier|*
name|QItemDelegate
operator|::
name|createEditor
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
name|QVariant
operator|::
name|Type
name|t
init|=
cast|static_cast
argument_list|<
name|QVariant
operator|::
name|Type
argument_list|>
argument_list|(
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|EditRole
argument_list|)
operator|.
name|userType
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QItemEditorFactory
modifier|*
name|factory
init|=
name|d
operator|->
name|f
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|0
condition|)
name|factory
operator|=
name|QItemEditorFactory
operator|::
name|defaultFactory
argument_list|()
expr_stmt|;
return|return
name|factory
operator|->
name|createEditor
argument_list|(
name|t
argument_list|,
name|parent
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the data to be displayed and edited by the \a editor from the     data model item specified by the model \a index.      The default implementation stores the data in the \a editor     widget's \l {Qt's Property System} {user property}.      \sa QMetaProperty::isUser() */
end_comment
begin_function
DECL|function|setEditorData
name|void
name|QItemDelegate
operator|::
name|setEditorData
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
ifdef|#
directive|ifdef
name|QT_NO_PROPERTIES
name|Q_UNUSED
argument_list|(
name|editor
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|index
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|EditRole
argument_list|)
decl_stmt|;
name|QByteArray
name|n
init|=
name|editor
operator|->
name|metaObject
argument_list|()
operator|->
name|userProperty
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
comment|// ### Qt 5: remove
comment|// A work-around for missing "USER true" in qdatetimeedit.h for
comment|// QTimeEdit's time property and QDateEdit's date property.
comment|// It only triggers if the default user property "dateTime" is
comment|// reported for QTimeEdit and QDateEdit.
if|if
condition|(
name|n
operator|==
literal|"dateTime"
condition|)
block|{
if|if
condition|(
name|editor
operator|->
name|inherits
argument_list|(
literal|"QTimeEdit"
argument_list|)
condition|)
name|n
operator|=
literal|"time"
expr_stmt|;
elseif|else
if|if
condition|(
name|editor
operator|->
name|inherits
argument_list|(
literal|"QDateEdit"
argument_list|)
condition|)
name|n
operator|=
literal|"date"
expr_stmt|;
block|}
comment|// ### Qt 5: give QComboBox a USER property
if|if
condition|(
name|n
operator|.
name|isEmpty
argument_list|()
operator|&&
name|editor
operator|->
name|inherits
argument_list|(
literal|"QComboBox"
argument_list|)
condition|)
name|n
operator|=
name|d
operator|->
name|editorFactory
argument_list|()
operator|->
name|valuePropertyName
argument_list|(
cast|static_cast
argument_list|<
name|QVariant
operator|::
name|Type
argument_list|>
argument_list|(
name|v
operator|.
name|userType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|n
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|v
operator|.
name|isValid
argument_list|()
condition|)
name|v
operator|=
name|QVariant
argument_list|(
name|editor
operator|->
name|property
argument_list|(
name|n
argument_list|)
operator|.
name|userType
argument_list|()
argument_list|,
operator|(
specifier|const
name|void
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|editor
operator|->
name|setProperty
argument_list|(
name|n
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Gets data from the \a editor widget and stores it in the specified     \a model at the item \a index.      The default implementation gets the value to be stored in the data     model from the \a editor widget's \l {Qt's Property System} {user     property}.      \sa QMetaProperty::isUser() */
end_comment
begin_function
DECL|function|setModelData
name|void
name|QItemDelegate
operator|::
name|setModelData
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|,
name|QAbstractItemModel
modifier|*
name|model
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
ifdef|#
directive|ifdef
name|QT_NO_PROPERTIES
name|Q_UNUSED
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|editor
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|index
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|editor
argument_list|)
expr_stmt|;
name|QByteArray
name|n
init|=
name|editor
operator|->
name|metaObject
argument_list|()
operator|->
name|userProperty
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|isEmpty
argument_list|()
condition|)
name|n
operator|=
name|d
operator|->
name|editorFactory
argument_list|()
operator|->
name|valuePropertyName
argument_list|(
cast|static_cast
argument_list|<
name|QVariant
operator|::
name|Type
argument_list|>
argument_list|(
name|model
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
operator|.
name|userType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|n
operator|.
name|isEmpty
argument_list|()
condition|)
name|model
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|editor
operator|->
name|property
argument_list|(
name|n
argument_list|)
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Updates the \a editor for the item specified by \a index     according to the style \a option given. */
end_comment
begin_function
DECL|function|updateEditorGeometry
name|void
name|QItemDelegate
operator|::
name|updateEditorGeometry
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|editor
condition|)
return|return;
name|Q_ASSERT
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QPixmap
name|pixmap
init|=
name|decoration
argument_list|(
name|option
argument_list|,
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|DecorationRole
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|text
init|=
name|QItemDelegatePrivate
operator|::
name|replaceNewLine
argument_list|(
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|pixmapRect
init|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|option
operator|.
name|decorationSize
argument_list|)
operator|.
name|intersected
argument_list|(
name|pixmap
operator|.
name|rect
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|textRect
init|=
name|textRectangle
argument_list|(
literal|0
argument_list|,
name|option
operator|.
name|rect
argument_list|,
name|option
operator|.
name|font
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|QRect
name|checkRect
init|=
name|doCheck
argument_list|(
name|option
argument_list|,
name|textRect
argument_list|,
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|CheckStateRole
argument_list|)
argument_list|)
decl_stmt|;
name|QStyleOptionViewItem
name|opt
init|=
name|option
decl_stmt|;
name|opt
operator|.
name|showDecorationSelected
operator|=
literal|true
expr_stmt|;
comment|// let the editor take up all available space
name|doLayout
argument_list|(
name|opt
argument_list|,
operator|&
name|checkRect
argument_list|,
operator|&
name|pixmapRect
argument_list|,
operator|&
name|textRect
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|editor
operator|->
name|setGeometry
argument_list|(
name|textRect
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the editor factory used by the item delegate.   If no editor factory is set, the function will return null.    \sa setItemEditorFactory() */
end_comment
begin_function
DECL|function|itemEditorFactory
name|QItemEditorFactory
modifier|*
name|QItemDelegate
operator|::
name|itemEditorFactory
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|f
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the editor factory to be used by the item delegate to be the \a factory   specified. If no editor factory is set, the item delegate will use the   default editor factory.    \sa itemEditorFactory() */
end_comment
begin_function
DECL|function|setItemEditorFactory
name|void
name|QItemDelegate
operator|::
name|setItemEditorFactory
parameter_list|(
name|QItemEditorFactory
modifier|*
name|factory
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QItemDelegate
argument_list|)
expr_stmt|;
name|d
operator|->
name|f
operator|=
name|factory
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!    Renders the item view \a text within the rectangle specified by \a rect    using the given \a painter and style \a option. */
end_comment
begin_function
DECL|function|drawDisplay
name|void
name|QItemDelegate
operator|::
name|drawDisplay
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
name|QPalette
operator|::
name|ColorGroup
name|cg
init|=
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
condition|?
name|QPalette
operator|::
name|Normal
else|:
name|QPalette
operator|::
name|Disabled
decl_stmt|;
if|if
condition|(
name|cg
operator|==
name|QPalette
operator|::
name|Normal
operator|&&
operator|!
operator|(
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Active
operator|)
condition|)
name|cg
operator|=
name|QPalette
operator|::
name|Inactive
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|,
name|option
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|.
name|palette
operator|.
name|color
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|.
name|palette
operator|.
name|color
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Editing
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|option
operator|.
name|palette
operator|.
name|color
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|rect
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
specifier|const
name|QStyleOptionViewItemV4
name|opt
init|=
name|option
decl_stmt|;
specifier|const
name|QWidget
modifier|*
name|widget
init|=
name|d
operator|->
name|widget
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|widget
condition|?
name|widget
operator|->
name|style
argument_list|()
else|:
name|QApplication
operator|::
name|style
argument_list|()
decl_stmt|;
specifier|const
name|int
name|textMargin
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_FocusFrameHMargin
argument_list|,
literal|0
argument_list|,
name|widget
argument_list|)
operator|+
literal|1
decl_stmt|;
name|QRect
name|textRect
init|=
name|rect
operator|.
name|adjusted
argument_list|(
name|textMargin
argument_list|,
literal|0
argument_list|,
operator|-
name|textMargin
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// remove width padding
specifier|const
name|bool
name|wrapText
init|=
name|opt
operator|.
name|features
operator|&
name|QStyleOptionViewItemV2
operator|::
name|WrapText
decl_stmt|;
name|d
operator|->
name|textOption
operator|.
name|setWrapMode
argument_list|(
name|wrapText
condition|?
name|QTextOption
operator|::
name|WordWrap
else|:
name|QTextOption
operator|::
name|ManualWrap
argument_list|)
expr_stmt|;
name|d
operator|->
name|textOption
operator|.
name|setTextDirection
argument_list|(
name|option
operator|.
name|direction
argument_list|)
expr_stmt|;
name|d
operator|->
name|textOption
operator|.
name|setAlignment
argument_list|(
name|QStyle
operator|::
name|visualAlignment
argument_list|(
name|option
operator|.
name|direction
argument_list|,
name|option
operator|.
name|displayAlignment
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|textLayout
operator|.
name|setTextOption
argument_list|(
name|d
operator|->
name|textOption
argument_list|)
expr_stmt|;
name|d
operator|->
name|textLayout
operator|.
name|setFont
argument_list|(
name|option
operator|.
name|font
argument_list|)
expr_stmt|;
name|d
operator|->
name|textLayout
operator|.
name|setText
argument_list|(
name|QItemDelegatePrivate
operator|::
name|replaceNewLine
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|QSizeF
name|textLayoutSize
init|=
name|d
operator|->
name|doTextLayout
argument_list|(
name|textRect
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|textRect
operator|.
name|width
argument_list|()
operator|<
name|textLayoutSize
operator|.
name|width
argument_list|()
operator|||
name|textRect
operator|.
name|height
argument_list|()
operator|<
name|textLayoutSize
operator|.
name|height
argument_list|()
condition|)
block|{
name|QString
name|elided
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
name|text
operator|.
name|indexOf
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|,
name|start
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|==
operator|-
literal|1
condition|)
block|{
name|elided
operator|+=
name|option
operator|.
name|fontMetrics
operator|.
name|elidedText
argument_list|(
name|text
argument_list|,
name|option
operator|.
name|textElideMode
argument_list|,
name|textRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|end
operator|!=
operator|-
literal|1
condition|)
block|{
name|elided
operator|+=
name|option
operator|.
name|fontMetrics
operator|.
name|elidedText
argument_list|(
name|text
operator|.
name|mid
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
argument_list|,
name|option
operator|.
name|textElideMode
argument_list|,
name|textRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|elided
operator|+=
name|QChar
operator|::
name|LineSeparator
expr_stmt|;
name|start
operator|=
name|end
operator|+
literal|1
expr_stmt|;
name|end
operator|=
name|text
operator|.
name|indexOf
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
comment|//let's add the last line (after the last QChar::LineSeparator)
name|elided
operator|+=
name|option
operator|.
name|fontMetrics
operator|.
name|elidedText
argument_list|(
name|text
operator|.
name|mid
argument_list|(
name|start
argument_list|)
argument_list|,
name|option
operator|.
name|textElideMode
argument_list|,
name|textRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|textLayout
operator|.
name|setText
argument_list|(
name|elided
argument_list|)
expr_stmt|;
name|textLayoutSize
operator|=
name|d
operator|->
name|doTextLayout
argument_list|(
name|textRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QSize
name|layoutSize
argument_list|(
name|textRect
operator|.
name|width
argument_list|()
argument_list|,
name|int
argument_list|(
name|textLayoutSize
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|layoutRect
init|=
name|QStyle
operator|::
name|alignedRect
argument_list|(
name|option
operator|.
name|direction
argument_list|,
name|option
operator|.
name|displayAlignment
argument_list|,
name|layoutSize
argument_list|,
name|textRect
argument_list|)
decl_stmt|;
comment|// if we still overflow even after eliding the text, enable clipping
if|if
condition|(
operator|!
name|hasClipping
argument_list|()
operator|&&
operator|(
name|textRect
operator|.
name|width
argument_list|()
operator|<
name|textLayoutSize
operator|.
name|width
argument_list|()
operator|||
name|textRect
operator|.
name|height
argument_list|()
operator|<
name|textLayoutSize
operator|.
name|height
argument_list|()
operator|)
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
name|layoutRect
argument_list|)
expr_stmt|;
name|d
operator|->
name|textLayout
operator|.
name|draw
argument_list|(
name|painter
argument_list|,
name|layoutRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|QVector
argument_list|<
name|QTextLayout
operator|::
name|FormatRange
argument_list|>
argument_list|()
argument_list|,
name|layoutRect
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|textLayout
operator|.
name|draw
argument_list|(
name|painter
argument_list|,
name|layoutRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|QVector
argument_list|<
name|QTextLayout
operator|::
name|FormatRange
argument_list|>
argument_list|()
argument_list|,
name|layoutRect
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Renders the decoration \a pixmap within the rectangle specified by     \a rect using the given \a painter and style \a option. */
end_comment
begin_function
DECL|function|drawDecoration
name|void
name|QItemDelegate
operator|::
name|drawDecoration
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
comment|// if we have an icon, we ignore the pixmap
if|if
condition|(
operator|!
name|d
operator|->
name|tmp
operator|.
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|d
operator|->
name|tmp
operator|.
name|icon
operator|.
name|paint
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|option
operator|.
name|decorationAlignment
argument_list|,
name|d
operator|->
name|tmp
operator|.
name|mode
argument_list|,
name|d
operator|->
name|tmp
operator|.
name|state
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
operator|||
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QPoint
name|p
init|=
name|QStyle
operator|::
name|alignedRect
argument_list|(
name|option
operator|.
name|direction
argument_list|,
name|option
operator|.
name|decorationAlignment
argument_list|,
name|pixmap
operator|.
name|size
argument_list|()
argument_list|,
name|rect
argument_list|)
operator|.
name|topLeft
argument_list|()
decl_stmt|;
if|if
condition|(
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
block|{
name|QPixmap
modifier|*
name|pm
init|=
name|selected
argument_list|(
name|pixmap
argument_list|,
name|option
operator|.
name|palette
argument_list|,
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
argument_list|)
decl_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|p
argument_list|,
operator|*
name|pm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|drawPixmap
argument_list|(
name|p
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Renders the region within the rectangle specified by \a rect, indicating     that it has the focus, using the given \a painter and style \a option. */
end_comment
begin_function
DECL|function|drawFocus
name|void
name|QItemDelegate
operator|::
name|drawFocus
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_HasFocus
operator|)
operator|==
literal|0
operator|||
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QStyleOptionFocusRect
name|o
decl_stmt|;
name|o
operator|.
name|QStyleOption
operator|::
name|operator
name|=
parameter_list|(
name|option
parameter_list|)
function_decl|;
name|o
operator|.
name|rect
operator|=
name|rect
expr_stmt|;
name|o
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_KeyboardFocusChange
expr_stmt|;
name|o
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Item
expr_stmt|;
name|QPalette
operator|::
name|ColorGroup
name|cg
init|=
operator|(
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
condition|?
name|QPalette
operator|::
name|Normal
else|:
name|QPalette
operator|::
name|Disabled
decl_stmt|;
name|o
operator|.
name|backgroundColor
operator|=
name|option
operator|.
name|palette
operator|.
name|color
argument_list|(
name|cg
argument_list|,
operator|(
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
operator|)
condition|?
name|QPalette
operator|::
name|Highlight
else|:
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
specifier|const
name|QWidget
modifier|*
name|widget
init|=
name|d
operator|->
name|widget
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|widget
condition|?
name|widget
operator|->
name|style
argument_list|()
else|:
name|QApplication
operator|::
name|style
argument_list|()
decl_stmt|;
name|style
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameFocusRect
argument_list|,
operator|&
name|o
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Renders a check indicator within the rectangle specified by \a     rect, using the given \a painter and style \a option, using the     given \a state. */
end_comment
begin_function
DECL|function|drawCheck
name|void
name|QItemDelegate
operator|::
name|drawCheck
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|Qt
operator|::
name|CheckState
name|state
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QStyleOptionViewItem
name|opt
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|opt
operator|.
name|rect
operator|=
name|rect
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|opt
operator|.
name|state
operator|&
operator|~
name|QStyle
operator|::
name|State_HasFocus
expr_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|Qt
operator|::
name|Unchecked
case|:
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Off
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|PartiallyChecked
case|:
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_NoChange
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Checked
case|:
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_On
expr_stmt|;
break|break;
block|}
specifier|const
name|QWidget
modifier|*
name|widget
init|=
name|d
operator|->
name|widget
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|widget
condition|?
name|widget
operator|->
name|style
argument_list|()
else|:
name|QApplication
operator|::
name|style
argument_list|()
decl_stmt|;
name|style
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_IndicatorViewItemCheck
argument_list|,
operator|&
name|opt
argument_list|,
name|painter
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Renders the item background for the given \a index,     using the given \a painter and style \a option. */
end_comment
begin_function
DECL|function|drawBackground
name|void
name|QItemDelegate
operator|::
name|drawBackground
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|option
operator|.
name|showDecorationSelected
operator|&&
operator|(
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
operator|)
condition|)
block|{
name|QPalette
operator|::
name|ColorGroup
name|cg
init|=
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
condition|?
name|QPalette
operator|::
name|Normal
else|:
name|QPalette
operator|::
name|Disabled
decl_stmt|;
if|if
condition|(
name|cg
operator|==
name|QPalette
operator|::
name|Normal
operator|&&
operator|!
operator|(
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Active
operator|)
condition|)
name|cg
operator|=
name|QPalette
operator|::
name|Inactive
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|.
name|rect
argument_list|,
name|option
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVariant
name|value
init|=
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|BackgroundRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|canConvert
argument_list|<
name|QBrush
argument_list|>
argument_list|()
condition|)
block|{
name|QPointF
name|oldBO
init|=
name|painter
operator|->
name|brushOrigin
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|option
operator|.
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|option
operator|.
name|rect
argument_list|,
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|oldBO
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      Code duplicated in QCommonStylePrivate::viewItemLayout */
end_comment
begin_function
DECL|function|doLayout
name|void
name|QItemDelegate
operator|::
name|doLayout
parameter_list|(
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
name|QRect
modifier|*
name|checkRect
parameter_list|,
name|QRect
modifier|*
name|pixmapRect
parameter_list|,
name|QRect
modifier|*
name|textRect
parameter_list|,
name|bool
name|hint
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|checkRect
operator|&&
name|pixmapRect
operator|&&
name|textRect
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
specifier|const
name|QWidget
modifier|*
name|widget
init|=
name|d
operator|->
name|widget
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|widget
condition|?
name|widget
operator|->
name|style
argument_list|()
else|:
name|QApplication
operator|::
name|style
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|hasCheck
init|=
name|checkRect
operator|->
name|isValid
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|hasPixmap
init|=
name|pixmapRect
operator|->
name|isValid
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|hasText
init|=
name|textRect
operator|->
name|isValid
argument_list|()
decl_stmt|;
specifier|const
name|int
name|textMargin
init|=
name|hasText
condition|?
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_FocusFrameHMargin
argument_list|,
literal|0
argument_list|,
name|widget
argument_list|)
operator|+
literal|1
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|pixmapMargin
init|=
name|hasPixmap
condition|?
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_FocusFrameHMargin
argument_list|,
literal|0
argument_list|,
name|widget
argument_list|)
operator|+
literal|1
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|checkMargin
init|=
name|hasCheck
condition|?
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_FocusFrameHMargin
argument_list|,
literal|0
argument_list|,
name|widget
argument_list|)
operator|+
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|x
init|=
name|option
operator|.
name|rect
operator|.
name|left
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|option
operator|.
name|rect
operator|.
name|top
argument_list|()
decl_stmt|;
name|int
name|w
decl_stmt|,
name|h
decl_stmt|;
name|textRect
operator|->
name|adjust
argument_list|(
operator|-
name|textMargin
argument_list|,
literal|0
argument_list|,
name|textMargin
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// add width padding
if|if
condition|(
name|textRect
operator|->
name|height
argument_list|()
operator|==
literal|0
operator|&&
operator|(
operator|!
name|hasPixmap
operator|||
operator|!
name|hint
operator|)
condition|)
block|{
comment|//if there is no text, we still want to have a decent height for the item sizeHint and the editor size
name|textRect
operator|->
name|setHeight
argument_list|(
name|option
operator|.
name|fontMetrics
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QSize
name|pm
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasPixmap
condition|)
block|{
name|pm
operator|=
name|pixmapRect
operator|->
name|size
argument_list|()
expr_stmt|;
name|pm
operator|.
name|rwidth
argument_list|()
operator|+=
literal|2
operator|*
name|pixmapMargin
expr_stmt|;
block|}
if|if
condition|(
name|hint
condition|)
block|{
name|h
operator|=
name|qMax
argument_list|(
name|checkRect
operator|->
name|height
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|textRect
operator|->
name|height
argument_list|()
argument_list|,
name|pm
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|decorationPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|Left
operator|||
name|option
operator|.
name|decorationPosition
operator|==
name|QStyleOptionViewItem
operator|::
name|Right
condition|)
block|{
name|w
operator|=
name|textRect
operator|->
name|width
argument_list|()
operator|+
name|pm
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|w
operator|=
name|qMax
argument_list|(
name|textRect
operator|->
name|width
argument_list|()
argument_list|,
name|pm
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|w
operator|=
name|option
operator|.
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|option
operator|.
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|int
name|cw
init|=
literal|0
decl_stmt|;
name|QRect
name|check
decl_stmt|;
if|if
condition|(
name|hasCheck
condition|)
block|{
name|cw
operator|=
name|checkRect
operator|->
name|width
argument_list|()
operator|+
literal|2
operator|*
name|checkMargin
expr_stmt|;
if|if
condition|(
name|hint
condition|)
name|w
operator|+=
name|cw
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
block|{
name|check
operator|.
name|setRect
argument_list|(
name|x
operator|+
name|w
operator|-
name|cw
argument_list|,
name|y
argument_list|,
name|cw
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|check
operator|.
name|setRect
argument_list|(
name|x
operator|+
name|checkMargin
argument_list|,
name|y
argument_list|,
name|cw
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
comment|// at this point w should be the *total* width
name|QRect
name|display
decl_stmt|;
name|QRect
name|decoration
decl_stmt|;
switch|switch
condition|(
name|option
operator|.
name|decorationPosition
condition|)
block|{
case|case
name|QStyleOptionViewItem
operator|::
name|Top
case|:
block|{
if|if
condition|(
name|hasPixmap
condition|)
name|pm
operator|.
name|setHeight
argument_list|(
name|pm
operator|.
name|height
argument_list|()
operator|+
name|pixmapMargin
argument_list|)
expr_stmt|;
comment|// add space
name|h
operator|=
name|hint
condition|?
name|textRect
operator|->
name|height
argument_list|()
else|:
name|h
operator|-
name|pm
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
block|{
name|decoration
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
operator|-
name|cw
argument_list|,
name|pm
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|display
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
operator|+
name|pm
operator|.
name|height
argument_list|()
argument_list|,
name|w
operator|-
name|cw
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|decoration
operator|.
name|setRect
argument_list|(
name|x
operator|+
name|cw
argument_list|,
name|y
argument_list|,
name|w
operator|-
name|cw
argument_list|,
name|pm
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|display
operator|.
name|setRect
argument_list|(
name|x
operator|+
name|cw
argument_list|,
name|y
operator|+
name|pm
operator|.
name|height
argument_list|()
argument_list|,
name|w
operator|-
name|cw
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QStyleOptionViewItem
operator|::
name|Bottom
case|:
block|{
if|if
condition|(
name|hasText
condition|)
name|textRect
operator|->
name|setHeight
argument_list|(
name|textRect
operator|->
name|height
argument_list|()
operator|+
name|textMargin
argument_list|)
expr_stmt|;
comment|// add space
name|h
operator|=
name|hint
condition|?
name|textRect
operator|->
name|height
argument_list|()
operator|+
name|pm
operator|.
name|height
argument_list|()
else|:
name|h
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
block|{
name|display
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
operator|-
name|cw
argument_list|,
name|textRect
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|decoration
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
operator|+
name|textRect
operator|->
name|height
argument_list|()
argument_list|,
name|w
operator|-
name|cw
argument_list|,
name|h
operator|-
name|textRect
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|display
operator|.
name|setRect
argument_list|(
name|x
operator|+
name|cw
argument_list|,
name|y
argument_list|,
name|w
operator|-
name|cw
argument_list|,
name|textRect
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|decoration
operator|.
name|setRect
argument_list|(
name|x
operator|+
name|cw
argument_list|,
name|y
operator|+
name|textRect
operator|->
name|height
argument_list|()
argument_list|,
name|w
operator|-
name|cw
argument_list|,
name|h
operator|-
name|textRect
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QStyleOptionViewItem
operator|::
name|Left
case|:
block|{
if|if
condition|(
name|option
operator|.
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
block|{
name|decoration
operator|.
name|setRect
argument_list|(
name|x
operator|+
name|cw
argument_list|,
name|y
argument_list|,
name|pm
operator|.
name|width
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|display
operator|.
name|setRect
argument_list|(
name|decoration
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|,
name|y
argument_list|,
name|w
operator|-
name|pm
operator|.
name|width
argument_list|()
operator|-
name|cw
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|display
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
operator|-
name|pm
operator|.
name|width
argument_list|()
operator|-
name|cw
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|decoration
operator|.
name|setRect
argument_list|(
name|display
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|,
name|y
argument_list|,
name|pm
operator|.
name|width
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QStyleOptionViewItem
operator|::
name|Right
case|:
block|{
if|if
condition|(
name|option
operator|.
name|direction
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
block|{
name|display
operator|.
name|setRect
argument_list|(
name|x
operator|+
name|cw
argument_list|,
name|y
argument_list|,
name|w
operator|-
name|pm
operator|.
name|width
argument_list|()
operator|-
name|cw
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|decoration
operator|.
name|setRect
argument_list|(
name|display
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|,
name|y
argument_list|,
name|pm
operator|.
name|width
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|decoration
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pm
operator|.
name|width
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|display
operator|.
name|setRect
argument_list|(
name|decoration
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|,
name|y
argument_list|,
name|w
operator|-
name|pm
operator|.
name|width
argument_list|()
operator|-
name|cw
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
name|qWarning
argument_list|(
literal|"doLayout: decoration position is invalid"
argument_list|)
expr_stmt|;
name|decoration
operator|=
operator|*
name|pixmapRect
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|hint
condition|)
block|{
comment|// we only need to do the internal layout if we are going to paint
operator|*
name|checkRect
operator|=
name|QStyle
operator|::
name|alignedRect
argument_list|(
name|option
operator|.
name|direction
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|checkRect
operator|->
name|size
argument_list|()
argument_list|,
name|check
argument_list|)
expr_stmt|;
operator|*
name|pixmapRect
operator|=
name|QStyle
operator|::
name|alignedRect
argument_list|(
name|option
operator|.
name|direction
argument_list|,
name|option
operator|.
name|decorationAlignment
argument_list|,
name|pixmapRect
operator|->
name|size
argument_list|()
argument_list|,
name|decoration
argument_list|)
expr_stmt|;
comment|// the text takes up all available space, unless the decoration is not shown as selected
if|if
condition|(
name|option
operator|.
name|showDecorationSelected
condition|)
operator|*
name|textRect
operator|=
name|display
expr_stmt|;
else|else
operator|*
name|textRect
operator|=
name|QStyle
operator|::
name|alignedRect
argument_list|(
name|option
operator|.
name|direction
argument_list|,
name|option
operator|.
name|displayAlignment
argument_list|,
name|textRect
operator|->
name|size
argument_list|()
operator|.
name|boundedTo
argument_list|(
name|display
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|display
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|*
name|checkRect
operator|=
name|check
expr_stmt|;
operator|*
name|pixmapRect
operator|=
name|decoration
expr_stmt|;
operator|*
name|textRect
operator|=
name|display
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      Returns the pixmap used to decorate the root of the item view.     The style \a option controls the appearance of the root; the \a variant     refers to the data associated with an item. */
end_comment
begin_function
DECL|function|decoration
name|QPixmap
name|QItemDelegate
operator|::
name|decoration
parameter_list|(
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|variant
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|variant
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Icon
case|:
block|{
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|d
operator|->
name|iconMode
argument_list|(
name|option
operator|.
name|state
argument_list|)
decl_stmt|;
name|QIcon
operator|::
name|State
name|state
init|=
name|d
operator|->
name|iconState
argument_list|(
name|option
operator|.
name|state
argument_list|)
decl_stmt|;
return|return
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|variant
argument_list|)
operator|.
name|pixmap
argument_list|(
name|option
operator|.
name|decorationSize
argument_list|,
name|mode
argument_list|,
name|state
argument_list|)
return|;
block|}
case|case
name|QVariant
operator|::
name|Color
case|:
block|{
specifier|static
name|QPixmap
name|pixmap
argument_list|(
name|option
operator|.
name|decorationSize
argument_list|)
decl_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pixmap
return|;
block|}
default|default:
break|break;
block|}
return|return
name|qvariant_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|variant
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// hacky but faster version of "QString::sprintf("%d-%d", i, enabled)"
end_comment
begin_function
DECL|function|qPixmapSerial
specifier|static
name|QString
name|qPixmapSerial
parameter_list|(
name|quint64
name|i
parameter_list|,
name|bool
name|enabled
parameter_list|)
block|{
name|ushort
name|arr
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|'-'
block|,
name|ushort
argument_list|(
literal|'0'
argument|+ enabled
argument_list|)
block|}
decl_stmt|;
name|ushort
modifier|*
name|ptr
init|=
operator|&
name|arr
index|[
literal|16
index|]
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|0
condition|)
block|{
comment|// hey - it's our internal representation, so use the ascii character after '9'
comment|// instead of 'a' for hex
operator|*
operator|(
operator|--
name|ptr
operator|)
operator|=
literal|'0'
operator|+
name|i
operator|%
literal|16
expr_stmt|;
name|i
operator|>>=
literal|4
expr_stmt|;
block|}
return|return
name|QString
argument_list|(
operator|(
specifier|const
name|QChar
operator|*
operator|)
name|ptr
argument_list|,
name|int
argument_list|(
operator|&
name|arr
index|[
sizeof|sizeof
argument_list|(
name|arr
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
index|]
operator|-
name|ptr
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   Returns the selected version of the given \a pixmap using the given \a palette.   The \a enabled argument decides whether the normal or disabled highlight color of   the palette is used. */
end_comment
begin_function
DECL|function|selected
name|QPixmap
modifier|*
name|QItemDelegate
operator|::
name|selected
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|palette
parameter_list|,
name|bool
name|enabled
parameter_list|)
specifier|const
block|{
name|QString
name|key
init|=
name|qPixmapSerial
argument_list|(
name|pixmap
operator|.
name|cacheKey
argument_list|()
argument_list|,
name|enabled
argument_list|)
decl_stmt|;
name|QPixmap
modifier|*
name|pm
init|=
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pm
condition|)
block|{
name|QImage
name|img
init|=
name|pixmap
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QColor
name|color
init|=
name|palette
operator|.
name|color
argument_list|(
name|enabled
condition|?
name|QPalette
operator|::
name|Normal
else|:
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
decl_stmt|;
name|color
operator|.
name|setAlphaF
argument_list|(
operator|(
name|qreal
operator|)
literal|0.3
argument_list|)
expr_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|img
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceAtop
argument_list|)
expr_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|,
name|color
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
name|QPixmap
name|selected
init|=
name|QPixmap
argument_list|(
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|n
init|=
operator|(
name|img
operator|.
name|byteCount
argument_list|()
operator|>>
literal|10
operator|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|QPixmapCache
operator|::
name|cacheLimit
argument_list|()
operator|<
name|n
condition|)
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|key
argument_list|,
name|selected
argument_list|)
expr_stmt|;
name|pm
operator|=
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|pm
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|rect
name|QRect
name|QItemDelegate
operator|::
name|rect
parameter_list|(
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
name|QVariant
name|value
init|=
name|index
operator|.
name|data
argument_list|(
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|CheckStateRole
condition|)
return|return
name|doCheck
argument_list|(
name|option
argument_list|,
name|option
operator|.
name|rect
argument_list|,
name|value
argument_list|)
return|;
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|value
operator|.
name|isNull
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|value
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Invalid
case|:
break|break;
case|case
name|QVariant
operator|::
name|Pixmap
case|:
return|return
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|value
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Image
case|:
return|return
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|value
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Icon
case|:
block|{
name|QIcon
operator|::
name|Mode
name|mode
init|=
name|d
operator|->
name|iconMode
argument_list|(
name|option
operator|.
name|state
argument_list|)
decl_stmt|;
name|QIcon
operator|::
name|State
name|state
init|=
name|d
operator|->
name|iconState
argument_list|(
name|option
operator|.
name|state
argument_list|)
decl_stmt|;
name|QIcon
name|icon
init|=
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QSize
name|size
init|=
name|icon
operator|.
name|actualSize
argument_list|(
name|option
operator|.
name|decorationSize
argument_list|,
name|mode
argument_list|,
name|state
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|)
return|;
block|}
case|case
name|QVariant
operator|::
name|Color
case|:
return|return
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|option
operator|.
name|decorationSize
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|String
case|:
default|default:
block|{
name|QString
name|text
init|=
name|QItemDelegatePrivate
operator|::
name|valueToText
argument_list|(
name|value
argument_list|,
name|option
argument_list|)
decl_stmt|;
name|value
operator|=
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|FontRole
argument_list|)
expr_stmt|;
name|QFont
name|fnt
init|=
name|qvariant_cast
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|value
argument_list|)
operator|.
name|resolve
argument_list|(
name|option
operator|.
name|font
argument_list|)
decl_stmt|;
return|return
name|textRectangle
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|textLayoutBounds
argument_list|(
name|option
argument_list|)
argument_list|,
name|fnt
argument_list|,
name|text
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|doCheck
name|QRect
name|QItemDelegate
operator|::
name|doCheck
parameter_list|(
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QRect
modifier|&
name|bounding
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
name|QStyleOptionButton
name|opt
decl_stmt|;
name|opt
operator|.
name|QStyleOption
operator|::
name|operator
name|=
parameter_list|(
name|option
parameter_list|)
function_decl|;
name|opt
operator|.
name|rect
operator|=
name|bounding
expr_stmt|;
specifier|const
name|QWidget
modifier|*
name|widget
init|=
name|d
operator|->
name|widget
argument_list|(
name|option
argument_list|)
decl_stmt|;
comment|// cast
name|QStyle
modifier|*
name|style
init|=
name|widget
condition|?
name|widget
operator|->
name|style
argument_list|()
else|:
name|QApplication
operator|::
name|style
argument_list|()
decl_stmt|;
return|return
name|style
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_ViewItemCheckIndicator
argument_list|,
operator|&
name|opt
argument_list|,
name|widget
argument_list|)
return|;
block|}
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|textRectangle
name|QRect
name|QItemDelegate
operator|::
name|textRectangle
parameter_list|(
name|QPainter
modifier|*
comment|/*painter*/
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QFont
modifier|&
name|font
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QItemDelegate
argument_list|)
expr_stmt|;
name|d
operator|->
name|textOption
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WordWrap
argument_list|)
expr_stmt|;
name|d
operator|->
name|textLayout
operator|.
name|setTextOption
argument_list|(
name|d
operator|->
name|textOption
argument_list|)
expr_stmt|;
name|d
operator|->
name|textLayout
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|d
operator|->
name|textLayout
operator|.
name|setText
argument_list|(
name|QItemDelegatePrivate
operator|::
name|replaceNewLine
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|QSizeF
name|fpSize
init|=
name|d
operator|->
name|doTextLayout
argument_list|(
name|rect
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QSize
name|size
init|=
name|QSize
argument_list|(
name|qCeil
argument_list|(
name|fpSize
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|qCeil
argument_list|(
name|fpSize
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// ###: textRectangle should take style option as argument
specifier|const
name|int
name|textMargin
init|=
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_FocusFrameHMargin
argument_list|)
operator|+
literal|1
decl_stmt|;
return|return
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|()
operator|+
literal|2
operator|*
name|textMargin
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QItemDelegate::eventFilter(QObject *editor, QEvent *event)      Returns true if the given \a editor is a valid QWidget and the     given \a event is handled; otherwise returns false. The following     key press events are handled by default:      \list         \o \gui Tab         \o \gui Backtab         \o \gui Enter         \o \gui Return         \o \gui Esc     \endlist      In the case of \gui Tab, \gui Backtab, \gui Enter and \gui Return     key press events, the \a editor's data is comitted to the model     and the editor is closed. If the \a event is a \gui Tab key press     the view will open an editor on the next item in the     view. Likewise, if the \a event is a \gui Backtab key press the     view will open an editor on the \e previous item in the view.      If the event is a \gui Esc key press event, the \a editor is     closed \e without committing its data.      \sa commitData(), closeEditor() */
end_comment
begin_function
DECL|function|eventFilter
name|bool
name|QItemDelegate
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|QWidget
modifier|*
name|editor
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|editor
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyPress
condition|)
block|{
switch|switch
condition|(
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Tab
case|:
emit|emit
name|commitData
argument_list|(
name|editor
argument_list|)
emit|;
emit|emit
name|closeEditor
argument_list|(
name|editor
argument_list|,
name|QAbstractItemDelegate
operator|::
name|EditNextItem
argument_list|)
emit|;
return|return
literal|true
return|;
case|case
name|Qt
operator|::
name|Key_Backtab
case|:
emit|emit
name|commitData
argument_list|(
name|editor
argument_list|)
emit|;
emit|emit
name|closeEditor
argument_list|(
name|editor
argument_list|,
name|QAbstractItemDelegate
operator|::
name|EditPreviousItem
argument_list|)
emit|;
return|return
literal|true
return|;
case|case
name|Qt
operator|::
name|Key_Enter
case|:
case|case
name|Qt
operator|::
name|Key_Return
case|:
ifndef|#
directive|ifndef
name|QT_NO_TEXTEDIT
if|if
condition|(
name|qobject_cast
argument_list|<
name|QTextEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QPlainTextEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// don't filter enter key events for QTextEdit
comment|// We want the editor to be able to process the key press
comment|// before committing the data (e.g. so it can do
comment|// validation/fixup of the input).
endif|#
directive|endif
comment|// QT_NO_TEXTEDIT
ifndef|#
directive|ifndef
name|QT_NO_LINEEDIT
if|if
condition|(
name|QLineEdit
modifier|*
name|e
init|=
name|qobject_cast
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
condition|)
if|if
condition|(
operator|!
name|e
operator|->
name|hasAcceptableInput
argument_list|()
condition|)
return|return
literal|false
return|;
endif|#
directive|endif
comment|// QT_NO_LINEEDIT
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"_q_commitDataAndCloseEditor"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|QWidget
operator|*
argument_list|,
name|editor
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
case|case
name|Qt
operator|::
name|Key_Escape
case|:
comment|// don't commit data
emit|emit
name|closeEditor
argument_list|(
name|editor
argument_list|,
name|QAbstractItemDelegate
operator|::
name|RevertModelCache
argument_list|)
emit|;
break|break;
default|default:
return|return
literal|false
return|;
block|}
if|if
condition|(
name|editor
operator|->
name|parentWidget
argument_list|()
condition|)
name|editor
operator|->
name|parentWidget
argument_list|()
operator|->
name|setFocus
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FocusOut
operator|||
operator|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Hide
operator|&&
name|editor
operator|->
name|isWindow
argument_list|()
operator|)
condition|)
block|{
comment|//the Hide event will take care of he editors that are in fact complete dialogs
if|if
condition|(
operator|!
name|editor
operator|->
name|isActiveWindow
argument_list|()
operator|||
operator|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
operator|!=
name|editor
operator|)
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
decl_stmt|;
while|while
condition|(
name|w
condition|)
block|{
comment|// don't worry about focus changes internally in the editor
if|if
condition|(
name|w
operator|==
name|editor
condition|)
return|return
literal|false
return|;
name|w
operator|=
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
comment|// The window may lose focus during an drag operation.
comment|// i.e when dragging involves the taskbar on Windows.
if|if
condition|(
name|QDragManager
operator|::
name|self
argument_list|()
operator|&&
name|QDragManager
operator|::
name|self
argument_list|()
operator|->
name|object
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
endif|#
directive|endif
emit|emit
name|commitData
argument_list|(
name|editor
argument_list|)
emit|;
emit|emit
name|closeEditor
argument_list|(
name|editor
argument_list|,
name|NoHint
argument_list|)
emit|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ShortcutOverride
condition|)
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Escape
condition|)
block|{
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|editorEvent
name|bool
name|QItemDelegate
operator|::
name|editorEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|,
name|QAbstractItemModel
modifier|*
name|model
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|// make sure that the item is checkable
name|Qt
operator|::
name|ItemFlags
name|flags
init|=
name|model
operator|->
name|flags
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|ItemIsUserCheckable
operator|)
operator|||
operator|!
operator|(
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
operator|||
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|ItemIsEnabled
operator|)
condition|)
return|return
literal|false
return|;
comment|// make sure that we have a check state
name|QVariant
name|value
init|=
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|CheckStateRole
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// make sure that we have the right event type
if|if
condition|(
operator|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
operator|)
operator|||
operator|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonDblClick
operator|)
operator|||
operator|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|)
condition|)
block|{
name|QRect
name|checkRect
init|=
name|doCheck
argument_list|(
name|option
argument_list|,
name|option
operator|.
name|rect
argument_list|,
name|Qt
operator|::
name|Checked
argument_list|)
decl_stmt|;
name|QRect
name|emptyRect
decl_stmt|;
name|doLayout
argument_list|(
name|option
argument_list|,
operator|&
name|checkRect
argument_list|,
operator|&
name|emptyRect
argument_list|,
operator|&
name|emptyRect
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QMouseEvent
modifier|*
name|me
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|me
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
operator|||
operator|!
name|checkRect
operator|.
name|contains
argument_list|(
name|me
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// eat the double click events inside the check rect
if|if
condition|(
operator|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|)
operator|||
operator|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonDblClick
operator|)
condition|)
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyPress
condition|)
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|key
argument_list|()
operator|!=
name|Qt
operator|::
name|Key_Space
operator|&&
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|key
argument_list|()
operator|!=
name|Qt
operator|::
name|Key_Select
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
name|Qt
operator|::
name|CheckState
name|state
init|=
operator|(
cast|static_cast
argument_list|<
name|Qt
operator|::
name|CheckState
argument_list|>
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
operator|==
name|Qt
operator|::
name|Checked
condition|?
name|Qt
operator|::
name|Unchecked
else|:
name|Qt
operator|::
name|Checked
operator|)
decl_stmt|;
return|return
name|model
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|state
argument_list|,
name|Qt
operator|::
name|CheckStateRole
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|setOptions
name|QStyleOptionViewItem
name|QItemDelegate
operator|::
name|setOptions
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|)
specifier|const
block|{
name|QStyleOptionViewItem
name|opt
init|=
name|option
decl_stmt|;
comment|// set font
name|QVariant
name|value
init|=
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|FontRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|opt
operator|.
name|font
operator|=
name|qvariant_cast
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|value
argument_list|)
operator|.
name|resolve
argument_list|(
name|opt
operator|.
name|font
argument_list|)
expr_stmt|;
name|opt
operator|.
name|fontMetrics
operator|=
name|QFontMetrics
argument_list|(
name|opt
operator|.
name|font
argument_list|)
expr_stmt|;
block|}
comment|// set text alignment
name|value
operator|=
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|TextAlignmentRole
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
condition|)
name|opt
operator|.
name|displayAlignment
operator|=
name|Qt
operator|::
name|Alignment
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// set foreground brush
name|value
operator|=
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|ForegroundRole
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|canConvert
argument_list|<
name|QBrush
argument_list|>
argument_list|()
condition|)
name|opt
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|opt
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qitemdelegate.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ITEMVIEWS
end_comment
end_unit
