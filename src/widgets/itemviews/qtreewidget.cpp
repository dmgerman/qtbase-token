begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtreewidget.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TREEWIDGET
end_ifndef
begin_include
include|#
directive|include
file|<qheaderview.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qitemdelegate.h>
end_include
begin_include
include|#
directive|include
file|<qstack.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<private/qtreewidget_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidgetitemdata_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qtreewidgetitemiterator_p.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// workaround for VC++ 6.0 linker bug (?)
end_comment
begin_typedef
DECL|typedef|LessThan
typedef|typedef
name|bool
function_decl|(
modifier|*
name|LessThan
function_decl|)
parameter_list|(
specifier|const
name|QPair
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
parameter_list|,
specifier|const
name|QPair
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
parameter_list|)
function_decl|;
end_typedef
begin_class
DECL|class|QTreeModelLessThan
class|class
name|QTreeModelLessThan
block|{
public|public:
DECL|function|operator ()
specifier|inline
name|bool
name|operator
name|()
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|i1
parameter_list|,
name|QTreeWidgetItem
modifier|*
name|i2
parameter_list|)
specifier|const
block|{
return|return
operator|*
name|i1
operator|<
operator|*
name|i2
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QTreeModelGreaterThan
class|class
name|QTreeModelGreaterThan
block|{
public|public:
DECL|function|operator ()
specifier|inline
name|bool
name|operator
name|()
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|i1
parameter_list|,
name|QTreeWidgetItem
modifier|*
name|i2
parameter_list|)
specifier|const
block|{
return|return
operator|*
name|i2
operator|<
operator|*
name|i1
return|;
block|}
block|}
class|;
end_class
begin_comment
comment|/*     \class QTreeModel     \brief The QTreeModel class manages the items stored in a tree view.      \ingroup model-view     \inmodule QtWidgets  */
end_comment
begin_comment
comment|/*!     \enum QTreeWidgetItem::ChildIndicatorPolicy     \since 4.3      \value ShowIndicator     The controls for expanding and collapsing will be shown for this item even if there are no children.     \value DontShowIndicator   The controls for expanding and collapsing will never be shown even if there are children.  If the node is forced open the user will not be able to expand or collapse the item.     \value DontShowIndicatorWhenChildless  The controls for expanding and collapsing will be shown if the item contains children. */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidgetItem::setDisabled(bool disabled)     \since 4.3      Disables the item if \a disabled is true; otherwise enables the item.      \sa setFlags() */
end_comment
begin_comment
comment|/*!     \fn bool QTreeWidgetItem::isDisabled() const     \since 4.3      Returns \c true if the item is disabled; otherwise returns \c false.      \sa setFlags() */
end_comment
begin_comment
comment|/*!   \internal    Constructs a tree model with a \a parent object and the given   number of \a columns. */
end_comment
begin_constructor
DECL|function|QTreeModel
name|QTreeModel
operator|::
name|QTreeModel
parameter_list|(
name|int
name|columns
parameter_list|,
name|QTreeWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|rootItem
argument_list|(
operator|new
name|QTreeWidgetItem
argument_list|)
member_init_list|,
name|headerItem
argument_list|(
operator|new
name|QTreeWidgetItem
argument_list|)
member_init_list|,
name|skipPendingSort
argument_list|(
literal|false
argument_list|)
block|{
name|rootItem
operator|->
name|view
operator|=
name|parent
expr_stmt|;
name|rootItem
operator|->
name|itemFlags
operator|=
name|Qt
operator|::
name|ItemIsDropEnabled
expr_stmt|;
name|headerItem
operator|->
name|view
operator|=
name|parent
expr_stmt|;
name|setColumnCount
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   \internal  */
end_comment
begin_constructor
DECL|function|QTreeModel
name|QTreeModel
operator|::
name|QTreeModel
parameter_list|(
name|QTreeModelPrivate
modifier|&
name|dd
parameter_list|,
name|QTreeWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
member_init_list|,
name|rootItem
argument_list|(
operator|new
name|QTreeWidgetItem
argument_list|)
member_init_list|,
name|headerItem
argument_list|(
operator|new
name|QTreeWidgetItem
argument_list|)
member_init_list|,
name|skipPendingSort
argument_list|(
literal|false
argument_list|)
block|{
name|rootItem
operator|->
name|view
operator|=
name|parent
expr_stmt|;
name|rootItem
operator|->
name|itemFlags
operator|=
name|Qt
operator|::
name|ItemIsDropEnabled
expr_stmt|;
name|headerItem
operator|->
name|view
operator|=
name|parent
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   \internal    Destroys this tree model. */
end_comment
begin_destructor
DECL|function|~QTreeModel
name|QTreeModel
operator|::
name|~
name|QTreeModel
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|headerItem
expr_stmt|;
name|rootItem
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|rootItem
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!   \internal    Removes all items in the model. */
end_comment
begin_function
DECL|function|clear
name|void
name|QTreeModel
operator|::
name|clear
parameter_list|()
block|{
name|SkipSorting
name|skipSorting
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|beginResetModel
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rootItem
operator|->
name|childCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|item
init|=
name|rootItem
operator|->
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|item
operator|->
name|par
operator|=
literal|0
expr_stmt|;
name|item
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|item
expr_stmt|;
block|}
name|rootItem
operator|->
name|children
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sortPendingTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|endResetModel
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal    Sets the number of \a columns in the tree model. */
end_comment
begin_function
DECL|function|setColumnCount
name|void
name|QTreeModel
operator|::
name|setColumnCount
parameter_list|(
name|int
name|columns
parameter_list|)
block|{
name|SkipSorting
name|skipSorting
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|<
literal|0
condition|)
return|return;
if|if
condition|(
operator|!
name|headerItem
condition|)
block|{
name|headerItem
operator|=
operator|new
name|QTreeWidgetItem
argument_list|()
expr_stmt|;
name|headerItem
operator|->
name|view
operator|=
name|view
argument_list|()
expr_stmt|;
block|}
name|int
name|count
init|=
name|columnCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|==
name|columns
condition|)
return|return;
if|if
condition|(
name|columns
operator|<
name|count
condition|)
block|{
name|beginRemoveColumns
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|columns
argument_list|,
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|headerItem
operator|->
name|values
operator|.
name|resize
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|endRemoveColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|beginInsertColumns
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|count
argument_list|,
name|columns
operator|-
literal|1
argument_list|)
expr_stmt|;
name|headerItem
operator|->
name|values
operator|.
name|resize
argument_list|(
name|columns
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|count
init|;
name|i
operator|<
name|columns
condition|;
operator|++
name|i
control|)
block|{
comment|// insert data without emitting the dataChanged signal
name|headerItem
operator|->
name|values
index|[
name|i
index|]
operator|.
name|append
argument_list|(
name|QWidgetItemData
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|headerItem
operator|->
name|d
operator|->
name|display
operator|.
name|append
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|endInsertColumns
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal    Returns the tree view item corresponding to the \a index given.    \sa QModelIndex */
end_comment
begin_function
DECL|function|item
name|QTreeWidgetItem
modifier|*
name|QTreeModel
operator|::
name|item
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
cast|static_cast
argument_list|<
name|QTreeWidgetItem
operator|*
argument_list|>
argument_list|(
name|index
operator|.
name|internalPointer
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal    Returns the model index that refers to the   tree view \a item and \a column. */
end_comment
begin_function
DECL|function|index
name|QModelIndex
name|QTreeModel
operator|::
name|index
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|executePendingSort
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|item
operator|||
operator|(
name|item
operator|==
name|rootItem
operator|)
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
specifier|const
name|QTreeWidgetItem
modifier|*
name|par
init|=
name|item
operator|->
name|parent
argument_list|()
decl_stmt|;
name|QTreeWidgetItem
modifier|*
name|itm
init|=
cast|const_cast
argument_list|<
name|QTreeWidgetItem
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|par
condition|)
name|par
operator|=
name|rootItem
expr_stmt|;
name|int
name|row
decl_stmt|;
name|int
name|guess
init|=
name|item
operator|->
name|d
operator|->
name|rowGuess
decl_stmt|;
if|if
condition|(
name|guess
operator|>=
literal|0
operator|&&
name|par
operator|->
name|children
operator|.
name|count
argument_list|()
operator|>
name|guess
operator|&&
name|par
operator|->
name|children
operator|.
name|at
argument_list|(
name|guess
argument_list|)
operator|==
name|itm
condition|)
block|{
name|row
operator|=
name|guess
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
name|par
operator|->
name|children
operator|.
name|lastIndexOf
argument_list|(
name|itm
argument_list|)
expr_stmt|;
name|itm
operator|->
name|d
operator|->
name|rowGuess
operator|=
name|row
expr_stmt|;
block|}
return|return
name|createIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|itm
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   \reimp    Returns the model index with the given \a row,   \a column and \a parent. */
end_comment
begin_function
DECL|function|index
name|QModelIndex
name|QTreeModel
operator|::
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|executePendingSort
argument_list|()
expr_stmt|;
name|int
name|c
init|=
name|columnCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|column
operator|<
literal|0
operator|||
name|column
operator|>=
name|c
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|QTreeWidgetItem
modifier|*
name|parentItem
init|=
name|parent
operator|.
name|isValid
argument_list|()
condition|?
name|item
argument_list|(
name|parent
argument_list|)
else|:
name|rootItem
decl_stmt|;
if|if
condition|(
name|parentItem
operator|&&
name|row
operator|<
name|parentItem
operator|->
name|childCount
argument_list|()
condition|)
block|{
name|QTreeWidgetItem
modifier|*
name|itm
init|=
name|parentItem
operator|->
name|child
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
condition|)
return|return
name|createIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|itm
argument_list|)
return|;
return|return
name|QModelIndex
argument_list|()
return|;
block|}
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   \reimp    Returns the parent model index of the index given as   the \a child. */
end_comment
begin_function
DECL|function|parent
name|QModelIndex
name|QTreeModel
operator|::
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|child
parameter_list|)
specifier|const
block|{
name|SkipSorting
name|skipSorting
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|//The reason we don't sort here is that this might be called from a valid QPersistentModelIndex
comment|//We don't want it to become suddenly invalid
if|if
condition|(
operator|!
name|child
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|QTreeWidgetItem
modifier|*
name|itm
init|=
cast|static_cast
argument_list|<
name|QTreeWidgetItem
operator|*
argument_list|>
argument_list|(
name|child
operator|.
name|internalPointer
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|itm
operator|||
name|itm
operator|==
name|rootItem
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|QTreeWidgetItem
modifier|*
name|parent
init|=
name|itm
operator|->
name|parent
argument_list|()
decl_stmt|;
return|return
name|index
argument_list|(
name|parent
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   \reimp    Returns the number of rows in the \a parent model index. */
end_comment
begin_function
DECL|function|rowCount
name|int
name|QTreeModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|parent
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|rootItem
operator|->
name|childCount
argument_list|()
return|;
name|QTreeWidgetItem
modifier|*
name|parentItem
init|=
name|item
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentItem
condition|)
return|return
name|parentItem
operator|->
name|childCount
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   \reimp    Returns the number of columns in the item referred to by   the given \a index. */
end_comment
begin_function
DECL|function|columnCount
name|int
name|QTreeModel
operator|::
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|headerItem
condition|)
return|return
literal|0
return|;
return|return
name|headerItem
operator|->
name|columnCount
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|hasChildren
name|bool
name|QTreeModel
operator|::
name|hasChildren
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|parent
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|(
name|rootItem
operator|->
name|childCount
argument_list|()
operator|>
literal|0
operator|)
return|;
name|QTreeWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|itm
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|itm
operator|->
name|d
operator|->
name|policy
condition|)
block|{
case|case
name|QTreeWidgetItem
operator|::
name|ShowIndicator
case|:
return|return
literal|true
return|;
case|case
name|QTreeWidgetItem
operator|::
name|DontShowIndicator
case|:
return|return
literal|false
return|;
case|case
name|QTreeWidgetItem
operator|::
name|DontShowIndicatorWhenChildless
case|:
return|return
operator|(
name|itm
operator|->
name|childCount
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   \reimp    Returns the data corresponding to the given model \a index   and \a role. */
end_comment
begin_function
DECL|function|data
name|QVariant
name|QTreeModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|QTreeWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
condition|)
return|return
name|itm
operator|->
name|data
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|,
name|role
argument_list|)
return|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   \reimp    Sets the data for the item specified by the \a index and \a role   to that referred to by the \a value.    Returns \c true if successful; otherwise returns \c false. */
end_comment
begin_function
DECL|function|setData
name|bool
name|QTreeModel
operator|::
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QTreeWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
condition|)
block|{
name|itm
operator|->
name|setData
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|,
name|role
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|itemData
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|QTreeModel
operator|::
name|itemData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|roles
decl_stmt|;
name|QTreeWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
condition|)
block|{
name|int
name|column
init|=
name|index
operator|.
name|column
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|<
name|itm
operator|->
name|values
operator|.
name|count
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itm
operator|->
name|values
operator|.
name|at
argument_list|(
name|column
argument_list|)
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|roles
operator|.
name|insert
argument_list|(
name|itm
operator|->
name|values
operator|.
name|at
argument_list|(
name|column
argument_list|)
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|role
argument_list|,
name|itm
operator|->
name|values
operator|.
name|at
argument_list|(
name|column
argument_list|)
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// the two special cases
name|QVariant
name|displayValue
init|=
name|itm
operator|->
name|data
argument_list|(
name|column
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayValue
operator|.
name|isValid
argument_list|()
condition|)
name|roles
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|displayValue
argument_list|)
expr_stmt|;
name|QVariant
name|checkValue
init|=
name|itm
operator|->
name|data
argument_list|(
name|column
argument_list|,
name|Qt
operator|::
name|CheckStateRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkValue
operator|.
name|isValid
argument_list|()
condition|)
name|roles
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|CheckStateRole
argument_list|,
name|checkValue
argument_list|)
expr_stmt|;
block|}
return|return
name|roles
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   \reimp */
end_comment
begin_function
DECL|function|insertRows
name|bool
name|QTreeModel
operator|::
name|insertRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|SkipSorting
name|skipSorting
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
argument_list|<
literal|1
operator|||
name|row
argument_list|<
literal|0
operator|||
name|row
argument_list|>
name|rowCount
operator|(
name|parent
operator|)
operator|||
name|parent
operator|.
name|column
operator|(
operator|)
argument_list|>
literal|0
condition|)
return|return
literal|false
return|;
name|beginInsertRows
argument_list|(
name|parent
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QTreeWidgetItem
modifier|*
name|par
init|=
name|item
argument_list|(
name|parent
argument_list|)
decl_stmt|;
while|while
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|QTreeWidgetItem
modifier|*
name|item
init|=
operator|new
name|QTreeWidgetItem
argument_list|()
decl_stmt|;
name|item
operator|->
name|view
operator|=
name|view
argument_list|()
expr_stmt|;
name|item
operator|->
name|par
operator|=
name|par
expr_stmt|;
if|if
condition|(
name|par
condition|)
name|par
operator|->
name|children
operator|.
name|insert
argument_list|(
name|row
operator|++
argument_list|,
name|item
argument_list|)
expr_stmt|;
else|else
name|rootItem
operator|->
name|children
operator|.
name|insert
argument_list|(
name|row
operator|++
argument_list|,
name|item
argument_list|)
expr_stmt|;
operator|--
name|count
expr_stmt|;
block|}
name|endInsertRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   \reimp */
end_comment
begin_function
DECL|function|insertColumns
name|bool
name|QTreeModel
operator|::
name|insertColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|SkipSorting
name|skipSorting
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
argument_list|<
literal|1
operator|||
name|column
argument_list|<
literal|0
operator|||
name|column
argument_list|>
name|columnCount
operator|(
name|parent
operator|)
operator|||
name|parent
operator|.
name|column
operator|(
operator|)
argument_list|>
literal|0
operator|||
operator|!
name|headerItem
condition|)
return|return
literal|false
return|;
name|beginInsertColumns
argument_list|(
name|parent
argument_list|,
name|column
argument_list|,
name|column
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|oldCount
init|=
name|columnCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|column
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|column
argument_list|,
name|oldCount
argument_list|)
expr_stmt|;
name|headerItem
operator|->
name|values
operator|.
name|resize
argument_list|(
name|oldCount
operator|+
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|oldCount
init|;
name|i
operator|<
name|oldCount
operator|+
name|count
condition|;
operator|++
name|i
control|)
block|{
name|headerItem
operator|->
name|values
index|[
name|i
index|]
operator|.
name|append
argument_list|(
name|QWidgetItemData
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|headerItem
operator|->
name|d
operator|->
name|display
operator|.
name|append
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QStack
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|itemstack
decl_stmt|;
name|itemstack
operator|.
name|push
argument_list|(
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|itemstack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTreeWidgetItem
modifier|*
name|par
init|=
name|itemstack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|children
init|=
name|par
condition|?
name|par
operator|->
name|children
else|:
name|rootItem
operator|->
name|children
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|child
init|=
name|children
operator|.
name|at
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|->
name|children
operator|.
name|count
argument_list|()
condition|)
name|itemstack
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|child
operator|->
name|values
operator|.
name|insert
argument_list|(
name|column
argument_list|,
name|count
argument_list|,
name|QVector
argument_list|<
name|QWidgetItemData
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|endInsertColumns
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   \reimp */
end_comment
begin_function
DECL|function|removeRows
name|bool
name|QTreeModel
operator|::
name|removeRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|1
operator|||
name|row
argument_list|<
literal|0
operator|||
operator|(
name|row
operator|+
name|count
operator|)
argument_list|>
name|rowCount
argument_list|(
name|parent
argument_list|)
condition|)
return|return
literal|false
return|;
name|beginRemoveRows
argument_list|(
name|parent
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QSignalBlocker
name|blocker
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QTreeWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|parent
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|row
operator|+
name|count
operator|-
literal|1
init|;
name|i
operator|>=
name|row
condition|;
operator|--
name|i
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|child
init|=
name|itm
condition|?
name|itm
operator|->
name|takeChild
argument_list|(
name|i
argument_list|)
else|:
name|rootItem
operator|->
name|children
operator|.
name|takeAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|child
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|child
expr_stmt|;
name|child
operator|=
literal|0
expr_stmt|;
block|}
name|blocker
operator|.
name|unblock
argument_list|()
expr_stmt|;
name|endRemoveRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   \reimp    Returns the header data corresponding to the given header \a section,   \a orientation and data \a role. */
end_comment
begin_function
DECL|function|headerData
name|QVariant
name|QTreeModel
operator|::
name|headerData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|orientation
operator|!=
name|Qt
operator|::
name|Horizontal
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|headerItem
condition|)
return|return
name|headerItem
operator|->
name|data
argument_list|(
name|section
argument_list|,
name|role
argument_list|)
return|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|DisplayRole
condition|)
return|return
name|QString
operator|::
name|number
argument_list|(
name|section
operator|+
literal|1
argument_list|)
return|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   \reimp    Sets the header data for the item specified by the header \a section,   \a orientation and data \a role to the given \a value.    Returns \c true if successful; otherwise returns \c false. */
end_comment
begin_function
DECL|function|setHeaderData
name|bool
name|QTreeModel
operator|::
name|setHeaderData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
if|if
condition|(
name|section
operator|<
literal|0
operator|||
name|orientation
operator|!=
name|Qt
operator|::
name|Horizontal
operator|||
operator|!
name|headerItem
operator|||
name|section
operator|>=
name|columnCount
argument_list|()
condition|)
return|return
literal|false
return|;
name|headerItem
operator|->
name|setData
argument_list|(
name|section
argument_list|,
name|role
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp    Returns the flags for the item referred to the given \a index.  */
end_comment
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|QTreeModel
operator|::
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|rootItem
operator|->
name|flags
argument_list|()
return|;
name|QTreeWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|itm
argument_list|)
expr_stmt|;
return|return
name|itm
operator|->
name|flags
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \internal    Sorts the entire tree in the model in the given \a order,   by the values in the given \a column. */
end_comment
begin_function
DECL|function|sort
name|void
name|QTreeModel
operator|::
name|sort
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
name|SkipSorting
name|skipSorting
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|sortPendingTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|column
operator|<
literal|0
operator|||
name|column
operator|>=
name|columnCount
argument_list|()
condition|)
return|return;
comment|//layoutAboutToBeChanged and layoutChanged will be called by sortChildren
name|rootItem
operator|->
name|sortChildren
argument_list|(
name|column
argument_list|,
name|order
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|ensureSorted
name|void
name|QTreeModel
operator|::
name|ensureSorted
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
if|if
condition|(
name|isChanging
argument_list|()
condition|)
return|return;
name|sortPendingTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|column
operator|<
literal|0
operator|||
name|column
operator|>=
name|columnCount
argument_list|()
condition|)
return|return;
name|SkipSorting
name|skipSorting
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QTreeWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|itm
condition|)
name|itm
operator|=
name|rootItem
expr_stmt|;
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|lst
init|=
name|itm
operator|->
name|children
decl_stmt|;
name|int
name|count
init|=
name|end
operator|-
name|start
operator|+
literal|1
decl_stmt|;
name|QVector
argument_list|<
name|QPair
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
argument_list|>
name|sorting
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|sorting
index|[
name|i
index|]
operator|.
name|first
operator|=
name|lst
operator|.
name|at
argument_list|(
name|start
operator|+
name|i
argument_list|)
expr_stmt|;
name|sorting
index|[
name|i
index|]
operator|.
name|second
operator|=
name|start
operator|+
name|i
expr_stmt|;
block|}
name|LessThan
name|compare
init|=
operator|(
name|order
operator|==
name|Qt
operator|::
name|AscendingOrder
condition|?
operator|&
name|itemLessThan
else|:
operator|&
name|itemGreaterThan
operator|)
decl_stmt|;
name|std
operator|::
name|stable_sort
argument_list|(
name|sorting
operator|.
name|begin
argument_list|()
argument_list|,
name|sorting
operator|.
name|end
argument_list|()
argument_list|,
name|compare
argument_list|)
expr_stmt|;
name|QModelIndexList
name|oldPersistentIndexes
decl_stmt|;
name|QModelIndexList
name|newPersistentIndexes
decl_stmt|;
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
name|lit
init|=
name|lst
operator|.
name|begin
argument_list|()
decl_stmt|;
name|bool
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|int
name|oldRow
init|=
name|sorting
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
decl_stmt|;
name|int
name|tmpitepos
init|=
name|lit
operator|-
name|lst
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QTreeWidgetItem
modifier|*
name|item
init|=
name|lst
operator|.
name|takeAt
argument_list|(
name|oldRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpitepos
operator|>
name|lst
operator|.
name|size
argument_list|()
condition|)
operator|--
name|tmpitepos
expr_stmt|;
name|lit
operator|=
name|lst
operator|.
name|begin
argument_list|()
operator|+
name|tmpitepos
expr_stmt|;
name|lit
operator|=
name|sortedInsertionIterator
argument_list|(
name|lit
argument_list|,
name|lst
operator|.
name|end
argument_list|()
argument_list|,
name|order
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|int
name|newRow
init|=
name|qMax
argument_list|(
name|lit
operator|-
name|lst
operator|.
name|begin
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|newRow
operator|<
name|oldRow
operator|)
operator|&&
operator|!
operator|(
operator|*
name|item
operator|<
operator|*
name|lst
operator|.
name|at
argument_list|(
name|oldRow
operator|-
literal|1
argument_list|)
operator|)
operator|&&
operator|!
operator|(
operator|*
name|lst
operator|.
name|at
argument_list|(
name|oldRow
operator|-
literal|1
argument_list|)
operator|<
operator|*
name|item
operator|)
condition|)
name|newRow
operator|=
name|oldRow
expr_stmt|;
name|lit
operator|=
name|lst
operator|.
name|insert
argument_list|(
name|lit
argument_list|,
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|newRow
operator|!=
name|oldRow
condition|)
block|{
comment|// we are going to change the persistent indexes, so we need to prepare
if|if
condition|(
operator|!
name|changed
condition|)
block|{
comment|// this will only happen once
name|changed
operator|=
literal|true
expr_stmt|;
emit|emit
name|layoutAboutToBeChanged
argument_list|()
emit|;
comment|// the selection model needs to know
name|oldPersistentIndexes
operator|=
name|persistentIndexList
argument_list|()
expr_stmt|;
name|newPersistentIndexes
operator|=
name|oldPersistentIndexes
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|count
condition|;
operator|++
name|j
control|)
block|{
name|int
name|otherRow
init|=
name|sorting
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|.
name|second
decl_stmt|;
if|if
condition|(
name|oldRow
operator|<
name|otherRow
operator|&&
name|newRow
operator|>=
name|otherRow
condition|)
operator|--
name|sorting
index|[
name|j
index|]
operator|.
name|second
expr_stmt|;
elseif|else
if|if
condition|(
name|oldRow
operator|>
name|otherRow
operator|&&
name|newRow
operator|<=
name|otherRow
condition|)
operator|++
name|sorting
index|[
name|j
index|]
operator|.
name|second
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|newPersistentIndexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|k
control|)
block|{
name|QModelIndex
name|pi
init|=
name|newPersistentIndexes
operator|.
name|at
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|pi
operator|.
name|parent
argument_list|()
operator|!=
name|parent
condition|)
continue|continue;
name|int
name|oldPersistentRow
init|=
name|pi
operator|.
name|row
argument_list|()
decl_stmt|;
name|int
name|newPersistentRow
init|=
name|oldPersistentRow
decl_stmt|;
if|if
condition|(
name|oldPersistentRow
operator|==
name|oldRow
condition|)
name|newPersistentRow
operator|=
name|newRow
expr_stmt|;
elseif|else
if|if
condition|(
name|oldRow
operator|<
name|oldPersistentRow
operator|&&
name|newRow
operator|>=
name|oldPersistentRow
condition|)
name|newPersistentRow
operator|=
name|oldPersistentRow
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|oldRow
operator|>
name|oldPersistentRow
operator|&&
name|newRow
operator|<=
name|oldPersistentRow
condition|)
name|newPersistentRow
operator|=
name|oldPersistentRow
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|newPersistentRow
operator|!=
name|oldPersistentRow
condition|)
name|newPersistentIndexes
index|[
name|k
index|]
operator|=
name|createIndex
argument_list|(
name|newPersistentRow
argument_list|,
name|pi
operator|.
name|column
argument_list|()
argument_list|,
name|pi
operator|.
name|internalPointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|itm
operator|->
name|children
operator|=
name|lst
expr_stmt|;
name|changePersistentIndexList
argument_list|(
name|oldPersistentIndexes
argument_list|,
name|newPersistentIndexes
argument_list|)
expr_stmt|;
emit|emit
name|layoutChanged
argument_list|()
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal    Returns \c true if the value of the \a left item is   less than the value of the \a right item.    Used by the sorting functions. */
end_comment
begin_function
DECL|function|itemLessThan
name|bool
name|QTreeModel
operator|::
name|itemLessThan
parameter_list|(
specifier|const
name|QPair
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|left
parameter_list|,
specifier|const
name|QPair
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|right
parameter_list|)
block|{
return|return
operator|*
operator|(
name|left
operator|.
name|first
operator|)
operator|<
operator|*
operator|(
name|right
operator|.
name|first
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal    Returns \c true if the value of the \a left item is   greater than the value of the \a right item.    Used by the sorting functions. */
end_comment
begin_function
DECL|function|itemGreaterThan
name|bool
name|QTreeModel
operator|::
name|itemGreaterThan
parameter_list|(
specifier|const
name|QPair
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|left
parameter_list|,
specifier|const
name|QPair
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|right
parameter_list|)
block|{
return|return
operator|*
operator|(
name|right
operator|.
name|first
operator|)
operator|<
operator|*
operator|(
name|left
operator|.
name|first
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|sortedInsertionIterator
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
name|QTreeModel
operator|::
name|sortedInsertionIterator
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
modifier|&
name|begin
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
modifier|&
name|end
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|,
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
name|order
operator|==
name|Qt
operator|::
name|AscendingOrder
condition|)
return|return
name|std
operator|::
name|lower_bound
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|item
argument_list|,
name|QTreeModelLessThan
argument_list|()
argument_list|)
return|;
return|return
name|std
operator|::
name|lower_bound
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|item
argument_list|,
name|QTreeModelGreaterThan
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mimeTypes
name|QStringList
name|QTreeModel
operator|::
name|mimeTypes
parameter_list|()
specifier|const
block|{
return|return
name|view
argument_list|()
operator|->
name|mimeTypes
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|internalMimeData
name|QMimeData
modifier|*
name|QTreeModel
operator|::
name|internalMimeData
parameter_list|()
specifier|const
block|{
return|return
name|QAbstractItemModel
operator|::
name|mimeData
argument_list|(
name|cachedIndexes
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mimeData
name|QMimeData
modifier|*
name|QTreeModel
operator|::
name|mimeData
parameter_list|(
specifier|const
name|QModelIndexList
modifier|&
name|indexes
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|items
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|column
argument_list|()
operator|==
literal|0
condition|)
comment|// only one item per row
name|items
operator|<<
name|item
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// cachedIndexes is a little hack to avoid copying from QModelIndexList to
comment|// QList<QTreeWidgetItem*> and back again in the view
name|cachedIndexes
operator|=
name|indexes
expr_stmt|;
name|QMimeData
modifier|*
name|mimeData
init|=
name|view
argument_list|()
operator|->
name|mimeData
argument_list|(
name|items
argument_list|)
decl_stmt|;
name|cachedIndexes
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|mimeData
return|;
block|}
end_function
begin_function
DECL|function|dropMimeData
name|bool
name|QTreeModel
operator|::
name|dropMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|DropAction
name|action
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
if|if
condition|(
name|row
operator|==
operator|-
literal|1
operator|&&
name|column
operator|==
operator|-
literal|1
condition|)
name|row
operator|=
name|rowCount
argument_list|(
name|parent
argument_list|)
expr_stmt|;
comment|// append
return|return
name|view
argument_list|()
operator|->
name|dropMimeData
argument_list|(
name|item
argument_list|(
name|parent
argument_list|)
argument_list|,
name|row
argument_list|,
name|data
argument_list|,
name|action
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|supportedDropActions
name|Qt
operator|::
name|DropActions
name|QTreeModel
operator|::
name|supportedDropActions
parameter_list|()
specifier|const
block|{
return|return
name|view
argument_list|()
operator|->
name|supportedDropActions
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|itemChanged
name|void
name|QTreeModel
operator|::
name|itemChanged
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|SkipSorting
name|skipSorting
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|//this is kind of wrong, but not doing this would kill performence
name|QModelIndex
name|left
init|=
name|index
argument_list|(
name|item
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QModelIndex
name|right
init|=
name|index
argument_list|(
name|item
argument_list|,
name|item
operator|->
name|columnCount
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
emit|emit
name|dataChanged
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|isChanging
name|bool
name|QTreeModel
operator|::
name|isChanging
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeModel
argument_list|)
expr_stmt|;
return|return
operator|!
name|d
operator|->
name|changes
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \internal     Emits the dataChanged() signal for the given \a item.     if column is -1 then all columns have changed */
end_comment
begin_function
DECL|function|emitDataChanged
name|void
name|QTreeModel
operator|::
name|emitDataChanged
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|signalsBlocked
argument_list|()
condition|)
return|return;
if|if
condition|(
name|headerItem
operator|==
name|item
operator|&&
name|column
operator|<
name|item
operator|->
name|columnCount
argument_list|()
condition|)
block|{
if|if
condition|(
name|column
operator|==
operator|-
literal|1
condition|)
emit|emit
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
literal|0
argument_list|,
name|columnCount
argument_list|()
operator|-
literal|1
argument_list|)
emit|;
else|else
emit|emit
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|column
argument_list|,
name|column
argument_list|)
emit|;
return|return;
block|}
name|SkipSorting
name|skipSorting
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|//This is a little bit wrong, but not doing it would kill performence
name|QModelIndex
name|bottomRight
decl_stmt|,
name|topLeft
decl_stmt|;
if|if
condition|(
name|column
operator|==
operator|-
literal|1
condition|)
block|{
name|topLeft
operator|=
name|index
argument_list|(
name|item
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bottomRight
operator|=
name|createIndex
argument_list|(
name|topLeft
operator|.
name|row
argument_list|()
argument_list|,
name|columnCount
argument_list|()
operator|-
literal|1
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|topLeft
operator|=
name|index
argument_list|(
name|item
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|bottomRight
operator|=
name|topLeft
expr_stmt|;
block|}
emit|emit
name|dataChanged
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|beginInsertItems
name|void
name|QTreeModel
operator|::
name|beginInsertItems
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|parent
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|QModelIndex
name|par
init|=
name|index
argument_list|(
name|parent
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|beginInsertRows
argument_list|(
name|par
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endInsertItems
name|void
name|QTreeModel
operator|::
name|endInsertItems
parameter_list|()
block|{
name|endInsertRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|beginRemoveItems
name|void
name|QTreeModel
operator|::
name|beginRemoveItems
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|parent
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|row
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|count
operator|>
literal|0
argument_list|)
expr_stmt|;
name|beginRemoveRows
argument_list|(
name|index
argument_list|(
name|parent
argument_list|,
literal|0
argument_list|)
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parent
condition|)
name|parent
operator|=
name|rootItem
expr_stmt|;
comment|// now update the iterators
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterators
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
name|j
operator|++
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|c
init|=
name|parent
operator|->
name|child
argument_list|(
name|row
operator|+
name|j
argument_list|)
decl_stmt|;
name|iterators
index|[
name|i
index|]
operator|->
name|d_func
argument_list|()
operator|->
name|ensureValidIterator
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|endRemoveItems
name|void
name|QTreeModel
operator|::
name|endRemoveItems
parameter_list|()
block|{
name|endRemoveRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortItems
name|void
name|QTreeModel
operator|::
name|sortItems
parameter_list|(
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
modifier|*
name|items
parameter_list|,
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
comment|// see QTreeViewItem::operator<
name|Q_UNUSED
argument_list|(
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|isChanging
argument_list|()
condition|)
return|return;
comment|// store the original order of indexes
name|QVector
argument_list|<
name|QPair
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
argument_list|>
name|sorting
argument_list|(
name|items
operator|->
name|count
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sorting
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|sorting
index|[
name|i
index|]
operator|.
name|first
operator|=
name|items
operator|->
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|sorting
index|[
name|i
index|]
operator|.
name|second
operator|=
name|i
expr_stmt|;
block|}
comment|// do the sorting
name|LessThan
name|compare
init|=
operator|(
name|order
operator|==
name|Qt
operator|::
name|AscendingOrder
condition|?
operator|&
name|itemLessThan
else|:
operator|&
name|itemGreaterThan
operator|)
decl_stmt|;
name|std
operator|::
name|stable_sort
argument_list|(
name|sorting
operator|.
name|begin
argument_list|()
argument_list|,
name|sorting
operator|.
name|end
argument_list|()
argument_list|,
name|compare
argument_list|)
expr_stmt|;
name|QModelIndexList
name|fromList
decl_stmt|;
name|QModelIndexList
name|toList
decl_stmt|;
name|int
name|colCount
init|=
name|columnCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|sorting
operator|.
name|count
argument_list|()
condition|;
operator|++
name|r
control|)
block|{
name|int
name|oldRow
init|=
name|sorting
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|.
name|second
decl_stmt|;
if|if
condition|(
name|oldRow
operator|==
name|r
condition|)
continue|continue;
name|QTreeWidgetItem
modifier|*
name|item
init|=
name|sorting
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|.
name|first
decl_stmt|;
name|items
operator|->
name|replace
argument_list|(
name|r
argument_list|,
name|item
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|colCount
condition|;
operator|++
name|c
control|)
block|{
name|QModelIndex
name|from
init|=
name|createIndex
argument_list|(
name|oldRow
argument_list|,
name|c
argument_list|,
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
cast|static_cast
argument_list|<
name|QAbstractItemModelPrivate
operator|*
argument_list|>
argument_list|(
name|d_ptr
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|persistent
operator|.
name|indexes
operator|.
name|contains
argument_list|(
name|from
argument_list|)
condition|)
block|{
name|QModelIndex
name|to
init|=
name|createIndex
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|item
argument_list|)
decl_stmt|;
name|fromList
operator|<<
name|from
expr_stmt|;
name|toList
operator|<<
name|to
expr_stmt|;
block|}
block|}
block|}
name|changePersistentIndexList
argument_list|(
name|fromList
argument_list|,
name|toList
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QTreeModel
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|ev
parameter_list|)
block|{
if|if
condition|(
name|ev
operator|->
name|timerId
argument_list|()
operator|==
name|sortPendingTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|executePendingSort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QAbstractItemModel
operator|::
name|timerEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \class QTreeWidgetItem    \brief The QTreeWidgetItem class provides an item for use with the   QTreeWidget convenience class.    \ingroup model-view   \inmodule QtWidgets    Tree widget items are used to hold rows of information for tree widgets.   Rows usually contain several columns of data, each of which can contain   a text label and an icon.    The QTreeWidgetItem class is a convenience class that replaces the   QListViewItem class in Qt 3. It provides an item for use with   the QTreeWidget class.    Items are usually constructed with a parent that is either a QTreeWidget   (for top-level items) or a QTreeWidgetItem (for items on lower levels of   the tree). For example, the following code constructs a top-level item   to represent cities of the world, and adds a entry for Oslo as a child   item:    \snippet qtreewidget-using/mainwindow.cpp 3    Items can be added in a particular order by specifying the item they   follow when they are constructed:    \snippet qtreewidget-using/mainwindow.cpp 5    Each column in an item can have its own background brush which is set with   the setBackground() function. The current background brush can be   found with background().   The text label for each column can be rendered with its own font and brush.   These are specified with the setFont() and setForeground() functions,   and read with font() and foreground().    The main difference between top-level items and those in lower levels of   the tree is that a top-level item has no parent(). This information   can be used to tell the difference between items, and is useful to know   when inserting and removing items from the tree.   Children of an item can be removed with takeChild() and inserted at a   given index in the list of children with the insertChild() function.    By default, items are enabled, selectable, checkable, and can be the source   of a drag and drop operation.   Each item's flags can be changed by calling setFlags() with the appropriate   value (see \l{Qt::ItemFlags}). Checkable items can be checked and unchecked   with the setCheckState() function. The corresponding checkState() function   indicates whether the item is currently checked.    \section1 Subclassing    When subclassing QTreeWidgetItem to provide custom items, it is possible to   define new types for them so that they can be distinguished from standard   items. The constructors for subclasses that require this feature need to   call the base class constructor with a new type value equal to or greater   than \l UserType.    \sa QTreeWidget, QTreeWidgetItemIterator, {Model/View Programming},   QListWidgetItem, QTableWidgetItem */
end_comment
begin_comment
comment|/*!     \enum QTreeWidgetItem::ItemType      This enum describes the types that are used to describe tree widget items.      \value Type     The default type for tree widget items.     \value UserType The minimum value for custom types. Values below UserType are                     reserved by Qt.      You can define new user types in QTreeWidgetItem subclasses to ensure that     custom items are treated specially; for example, when items are sorted.      \sa type() */
end_comment
begin_comment
comment|/*!     \fn int QTreeWidgetItem::type() const      Returns the type passed to the QTreeWidgetItem constructor. */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidgetItem::sortChildren(int column, Qt::SortOrder order)     \since 4.2      Sorts the children of the item using the given \a order,     by the values in the given \a column.      \note This function does nothing if the item is not associated with a     QTreeWidget. */
end_comment
begin_comment
comment|/*!     \fn QTreeWidget *QTreeWidgetItem::treeWidget() const      Returns the tree widget that contains the item. */
end_comment
begin_comment
comment|/*!   \fn void QTreeWidgetItem::setSelected(bool select)   \since 4.2    Sets the selected state of the item to \a select.    \sa isSelected()  */
end_comment
begin_comment
comment|/*!   \fn bool QTreeWidgetItem::isSelected() const   \since 4.2    Returns \c true if the item is selected, otherwise returns \c false.    \sa setSelected() */
end_comment
begin_comment
comment|/*!   \fn void QTreeWidgetItem::setHidden(bool hide)   \since 4.2    Hides the item if \a hide is true, otherwise shows the item.   \note A call to this function has no effect if the item is not currently in a view. In particular,         calling \c setHidden(true) on an item and only then adding it to a view will result in         a visible item.    \sa isHidden() */
end_comment
begin_comment
comment|/*!   \fn bool QTreeWidgetItem::isHidden() const   \since 4.2    Returns \c true if the item is hidden, otherwise returns \c false.    \sa setHidden() */
end_comment
begin_comment
comment|/*!   \fn void QTreeWidgetItem::setExpanded(bool expand)   \since 4.2    Expands the item if \a expand is true, otherwise collapses the item.   \warning The QTreeWidgetItem must be added to the QTreeWidget before calling this function.    \sa isExpanded() */
end_comment
begin_comment
comment|/*!   \fn bool QTreeWidgetItem::isExpanded() const   \since 4.2    Returns \c true if the item is expanded, otherwise returns \c false.    \sa setExpanded() */
end_comment
begin_comment
comment|/*!   \fn void QTreeWidgetItem::setFirstColumnSpanned(bool span)   \since 4.3    Sets the first section to span all columns if \a span is true;   otherwise all item sections are shown.    \sa isFirstColumnSpanned() */
end_comment
begin_comment
comment|/*!   \fn bool QTreeWidgetItem::isFirstColumnSpanned() const   \since 4.3    Returns \c true if the item is spanning all the columns in a row; otherwise returns \c false.    \sa setFirstColumnSpanned() */
end_comment
begin_comment
comment|/*!     \fn QString QTreeWidgetItem::text(int column) const      Returns the text in the specified \a column.      \sa setText() */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidgetItem::setText(int column, const QString&text)      Sets the text to be displayed in the given \a column to the given \a text.      \sa text(), setFont(), setForeground() */
end_comment
begin_comment
comment|/*!     \fn QIcon QTreeWidgetItem::icon(int column) const      Returns the icon that is displayed in the specified \a column.      \sa setIcon(), {QAbstractItemView::iconSize}{iconSize} */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidgetItem::setIcon(int column, const QIcon&icon)      Sets the icon to be displayed in the given \a column to \a icon.      \sa icon(), setText(), {QAbstractItemView::iconSize}{iconSize} */
end_comment
begin_comment
comment|/*!     \fn QString QTreeWidgetItem::statusTip(int column) const      Returns the status tip for the contents of the given \a column.      \sa setStatusTip() */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidgetItem::setStatusTip(int column, const QString&statusTip)      Sets the status tip for the given \a column to the given \a statusTip.     QTreeWidget mouse tracking needs to be enabled for this feature to work.      \sa statusTip(), setToolTip(), setWhatsThis() */
end_comment
begin_comment
comment|/*!     \fn QString QTreeWidgetItem::toolTip(int column) const      Returns the tool tip for the given \a column.      \sa setToolTip() */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidgetItem::setToolTip(int column, const QString&toolTip)      Sets the tooltip for the given \a column to \a toolTip.      \sa toolTip(), setStatusTip(), setWhatsThis() */
end_comment
begin_comment
comment|/*!     \fn QString QTreeWidgetItem::whatsThis(int column) const      Returns the "What's This?" help for the contents of the given \a column.      \sa setWhatsThis() */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidgetItem::setWhatsThis(int column, const QString&whatsThis)      Sets the "What's This?" help for the given \a column to \a whatsThis.      \sa whatsThis(), setStatusTip(), setToolTip() */
end_comment
begin_comment
comment|/*!     \fn QFont QTreeWidgetItem::font(int column) const      Returns the font used to render the text in the specified \a column.      \sa setFont() */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidgetItem::setFont(int column, const QFont&font)      Sets the font used to display the text in the given \a column to the given     \a font.      \sa font(), setText(), setForeground() */
end_comment
begin_comment
comment|/*!     \fn QColor QTreeWidgetItem::backgroundColor(int column) const     \obsolete      This function is deprecated. Use background() instead. */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidgetItem::setBackgroundColor(int column, const QColor&color)     \obsolete      This function is deprecated. Use setBackground() instead. */
end_comment
begin_comment
comment|/*!     \fn QBrush QTreeWidgetItem::background(int column) const     \since 4.2      Returns the brush used to render the background of the specified \a column.      \sa foreground() */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidgetItem::setBackground(int column, const QBrush&brush)     \since 4.2      Sets the background brush of the label in the given \a column to the     specified \a brush.      \sa setForeground() */
end_comment
begin_comment
comment|/*!     \fn QColor QTreeWidgetItem::textColor(int column) const     \obsolete      This function is deprecated. Use foreground() instead. */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidgetItem::setTextColor(int column, const QColor&color)     \obsolete      This function is deprecated. Use setForeground() instead. */
end_comment
begin_comment
comment|/*!     \fn QBrush QTreeWidgetItem::foreground(int column) const     \since 4.2      Returns the brush used to render the foreground (e.g. text) of the     specified \a column.      \sa background() */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidgetItem::setForeground(int column, const QBrush&brush)     \since 4.2      Sets the foreground brush of the label in the given \a column to the     specified \a brush.      \sa setBackground() */
end_comment
begin_comment
comment|/*!     \fn Qt::CheckState QTreeWidgetItem::checkState(int column) const      Returns the check state of the label in the given \a column.      \sa Qt::CheckState */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidgetItem::setCheckState(int column, Qt::CheckState state)      Sets the item in the given \a column check state to be \a state.      \sa checkState() */
end_comment
begin_comment
comment|/*!   \fn QSize QTreeWidgetItem::sizeHint(int column) const   \since 4.1    Returns the size hint set for the tree item in the given   \a column (see \l{QSize}). */
end_comment
begin_comment
comment|/*!   \fn void QTreeWidgetItem::setSizeHint(int column, const QSize&size)   \since 4.1    Sets the size hint for the tree item in the given \a column to be \a size.   If no size hint is set, the item delegate will compute the size hint based   on the item data. */
end_comment
begin_comment
comment|/*!     \fn QTreeWidgetItem *QTreeWidgetItem::parent() const      Returns the item's parent.      \sa child() */
end_comment
begin_comment
comment|/*!     \fn QTreeWidgetItem *QTreeWidgetItem::child(int index) const      Returns the item at the given \a index in the list of the item's children.      \sa parent() */
end_comment
begin_comment
comment|/*!     \fn int QTreeWidgetItem::childCount() const      Returns the number of child items. */
end_comment
begin_comment
comment|/*!     \fn int QTreeWidgetItem::columnCount() const      Returns the number of columns in the item. */
end_comment
begin_comment
comment|/*!   \fn int QTreeWidgetItem::textAlignment(int column) const    Returns the text alignment for the label in the given \a column   (see \l{Qt::AlignmentFlag}). */
end_comment
begin_comment
comment|/*!   \fn void QTreeWidgetItem::setTextAlignment(int column, int alignment)    Sets the text alignment for the label in the given \a column to   the \a alignment specified (see \l{Qt::AlignmentFlag}). */
end_comment
begin_comment
comment|/*!     \fn int QTreeWidgetItem::indexOfChild(QTreeWidgetItem *child) const      Returns the index of the given \a child in the item's list of children. */
end_comment
begin_comment
comment|/*!     Constructs a tree widget item of the specified \a type. The item     must be inserted into a tree widget.      \sa type() */
end_comment
begin_constructor
DECL|function|QTreeWidgetItem
name|QTreeWidgetItem
operator|::
name|QTreeWidgetItem
parameter_list|(
name|int
name|type
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|type
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QTreeWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|par
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a tree widget item of the specified \a type. The item     must be inserted into a tree widget.     The given list of \a strings will be set as the item text for each     column in the item.      \sa type() */
end_comment
begin_constructor
DECL|function|QTreeWidgetItem
name|QTreeWidgetItem
operator|::
name|QTreeWidgetItem
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|strings
parameter_list|,
name|int
name|type
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|type
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QTreeWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|par
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|setText
argument_list|(
name|i
argument_list|,
name|strings
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \fn QTreeWidgetItem::QTreeWidgetItem(QTreeWidget *parent, int type)      Constructs a tree widget item of the specified \a type and appends it     to the items in the given \a parent.      \sa type() */
end_comment
begin_constructor
DECL|function|QTreeWidgetItem
name|QTreeWidgetItem
operator|::
name|QTreeWidgetItem
parameter_list|(
name|QTreeWidget
modifier|*
name|view
parameter_list|,
name|int
name|type
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|type
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QTreeWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|par
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
block|{
if|if
condition|(
name|view
operator|&&
name|view
operator|->
name|model
argument_list|()
condition|)
block|{
name|QTreeModel
modifier|*
name|model
init|=
name|qobject_cast
argument_list|<
name|QTreeModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|->
name|rootItem
operator|->
name|addChild
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|values
operator|.
name|reserve
argument_list|(
name|model
operator|->
name|headerItem
operator|->
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_comment
comment|/*!   \fn QTreeWidgetItem::QTreeWidgetItem(QTreeWidget *parent, const QStringList&strings, int type)    Constructs a tree widget item of the specified \a type and appends it   to the items in the given \a parent. The given list of \a strings will be set as   the item text for each column in the item.    \sa type() */
end_comment
begin_constructor
DECL|function|QTreeWidgetItem
name|QTreeWidgetItem
operator|::
name|QTreeWidgetItem
parameter_list|(
name|QTreeWidget
modifier|*
name|view
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|strings
parameter_list|,
name|int
name|type
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|type
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QTreeWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|par
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|setText
argument_list|(
name|i
argument_list|,
name|strings
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|&&
name|view
operator|->
name|model
argument_list|()
condition|)
block|{
name|QTreeModel
modifier|*
name|model
init|=
name|qobject_cast
argument_list|<
name|QTreeModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|->
name|rootItem
operator|->
name|addChild
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|values
operator|.
name|reserve
argument_list|(
name|model
operator|->
name|headerItem
operator|->
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_comment
comment|/*!     \fn QTreeWidgetItem::QTreeWidgetItem(QTreeWidget *parent, QTreeWidgetItem *preceding, int type)      Constructs a tree widget item of the specified \a type and inserts it into     the given \a parent after the \a preceding item.      \sa type() */
end_comment
begin_constructor
DECL|function|QTreeWidgetItem
name|QTreeWidgetItem
operator|::
name|QTreeWidgetItem
parameter_list|(
name|QTreeWidget
modifier|*
name|view
parameter_list|,
name|QTreeWidgetItem
modifier|*
name|after
parameter_list|,
name|int
name|type
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|type
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QTreeWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|par
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
block|{
if|if
condition|(
name|view
condition|)
block|{
name|QTreeModel
modifier|*
name|model
init|=
name|qobject_cast
argument_list|<
name|QTreeModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
condition|)
block|{
name|int
name|i
init|=
name|model
operator|->
name|rootItem
operator|->
name|children
operator|.
name|indexOf
argument_list|(
name|after
argument_list|)
operator|+
literal|1
decl_stmt|;
name|model
operator|->
name|rootItem
operator|->
name|insertChild
argument_list|(
name|i
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|values
operator|.
name|reserve
argument_list|(
name|model
operator|->
name|headerItem
operator|->
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_constructor
begin_comment
comment|/*!     Constructs a tree widget item and append it to the given \a parent.      \sa type() */
end_comment
begin_constructor
DECL|function|QTreeWidgetItem
name|QTreeWidgetItem
operator|::
name|QTreeWidgetItem
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|parent
parameter_list|,
name|int
name|type
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|type
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QTreeWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|par
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
block|{
if|if
condition|(
name|parent
condition|)
name|parent
operator|->
name|addChild
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a tree widget item and append it to the given \a parent.     The given list of \a strings will be set as the item text for each column in the item.      \sa type() */
end_comment
begin_constructor
DECL|function|QTreeWidgetItem
name|QTreeWidgetItem
operator|::
name|QTreeWidgetItem
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|parent
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|strings
parameter_list|,
name|int
name|type
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|type
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QTreeWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|par
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|setText
argument_list|(
name|i
argument_list|,
name|strings
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
condition|)
name|parent
operator|->
name|addChild
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \fn QTreeWidgetItem::QTreeWidgetItem(QTreeWidgetItem *parent, QTreeWidgetItem *preceding, int type)      Constructs a tree widget item of the specified \a type that is inserted     into the \a parent after the \a preceding child item.      \sa type() */
end_comment
begin_constructor
DECL|function|QTreeWidgetItem
name|QTreeWidgetItem
operator|::
name|QTreeWidgetItem
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|parent
parameter_list|,
name|QTreeWidgetItem
modifier|*
name|after
parameter_list|,
name|int
name|type
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|type
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QTreeWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|par
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
block|{
if|if
condition|(
name|parent
condition|)
block|{
name|int
name|i
init|=
name|parent
operator|->
name|children
operator|.
name|indexOf
argument_list|(
name|after
argument_list|)
operator|+
literal|1
decl_stmt|;
name|parent
operator|->
name|insertChild
argument_list|(
name|i
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_comment
comment|/*!   Destroys this tree widget item.    The item will be removed from \l{QTreeWidget}s to which it has   been added. This makes it safe to delete an item at any time.  */
end_comment
begin_destructor
DECL|function|~QTreeWidgetItem
name|QTreeWidgetItem
operator|::
name|~
name|QTreeWidgetItem
parameter_list|()
block|{
name|QTreeModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QTreeModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
decl_stmt|;
name|bool
name|wasSkipSort
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|model
condition|)
block|{
name|wasSkipSort
operator|=
name|model
operator|->
name|skipPendingSort
expr_stmt|;
name|model
operator|->
name|skipPendingSort
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|par
condition|)
block|{
name|int
name|i
init|=
name|par
operator|->
name|children
operator|.
name|indexOf
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|beginRemoveItems
argument_list|(
name|par
argument_list|,
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// users _could_ do changes when connected to rowsAboutToBeRemoved,
comment|// so we check again to make sure 'i' is valid
if|if
condition|(
operator|!
name|par
operator|->
name|children
operator|.
name|isEmpty
argument_list|()
operator|&&
name|par
operator|->
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|this
condition|)
name|par
operator|->
name|children
operator|.
name|takeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|endRemoveItems
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|model
condition|)
block|{
if|if
condition|(
name|this
operator|==
name|model
operator|->
name|headerItem
condition|)
block|{
name|model
operator|->
name|headerItem
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|int
name|i
init|=
name|model
operator|->
name|rootItem
operator|->
name|children
operator|.
name|indexOf
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|model
operator|->
name|beginRemoveItems
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// users _could_ do changes when connected to rowsAboutToBeRemoved,
comment|// so we check again to make sure 'i' is valid
if|if
condition|(
operator|!
name|model
operator|->
name|rootItem
operator|->
name|children
operator|.
name|isEmpty
argument_list|()
operator|&&
name|model
operator|->
name|rootItem
operator|->
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|this
condition|)
name|model
operator|->
name|rootItem
operator|->
name|children
operator|.
name|takeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|model
operator|->
name|endRemoveItems
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// at this point the persistent indexes for the children should also be invalidated
comment|// since we invalidated the parent
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|child
init|=
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// make sure the child does not try to remove itself from our children list
name|child
operator|->
name|par
operator|=
literal|0
expr_stmt|;
comment|// make sure the child does not try to remove itself from the top level list
name|child
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|child
expr_stmt|;
block|}
name|children
operator|.
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|d
expr_stmt|;
if|if
condition|(
name|model
condition|)
block|{
name|model
operator|->
name|skipPendingSort
operator|=
name|wasSkipSort
expr_stmt|;
block|}
block|}
end_destructor
begin_comment
comment|/*!     Creates a deep copy of the item and of its children. */
end_comment
begin_function
DECL|function|clone
name|QTreeWidgetItem
modifier|*
name|QTreeWidgetItem
operator|::
name|clone
parameter_list|()
specifier|const
block|{
name|QTreeWidgetItem
modifier|*
name|copy
init|=
literal|0
decl_stmt|;
name|QStack
argument_list|<
specifier|const
name|QTreeWidgetItem
modifier|*
argument_list|>
name|stack
decl_stmt|;
name|QStack
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|parentStack
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|parentStack
operator|.
name|push
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTreeWidgetItem
modifier|*
name|root
init|=
literal|0
decl_stmt|;
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
name|QTreeWidgetItem
modifier|*
name|parent
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// get current item, and copied parent
name|item
operator|=
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|parent
operator|=
name|parentStack
operator|.
name|pop
argument_list|()
expr_stmt|;
comment|// copy item
name|copy
operator|=
operator|new
name|QTreeWidgetItem
argument_list|(
operator|*
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|root
condition|)
name|root
operator|=
name|copy
expr_stmt|;
comment|// set parent and add to parents children list
if|if
condition|(
name|parent
condition|)
block|{
name|copy
operator|->
name|par
operator|=
name|parent
expr_stmt|;
name|parent
operator|->
name|children
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|item
operator|->
name|childCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|stack
operator|.
name|push
argument_list|(
name|item
operator|->
name|child
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|parentStack
operator|.
name|push
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|root
return|;
block|}
end_function
begin_comment
comment|/*!    Sets the item indicator \a policy. This policy decides when the    tree branch expand/collapse indicator is shown.    The default value is ShowForChildren.     \sa childIndicatorPolicy() */
end_comment
begin_function
DECL|function|setChildIndicatorPolicy
name|void
name|QTreeWidgetItem
operator|::
name|setChildIndicatorPolicy
parameter_list|(
name|QTreeWidgetItem
operator|::
name|ChildIndicatorPolicy
name|policy
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|policy
operator|==
name|policy
condition|)
return|return;
name|d
operator|->
name|policy
operator|=
name|policy
expr_stmt|;
if|if
condition|(
operator|!
name|view
condition|)
return|return;
name|view
operator|->
name|scheduleDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!    Returns the item indicator policy. This policy decides when the    tree branch expand/collapse indicator is shown.     \sa setChildIndicatorPolicy() */
end_comment
begin_function
DECL|function|childIndicatorPolicy
name|QTreeWidgetItem
operator|::
name|ChildIndicatorPolicy
name|QTreeWidgetItem
operator|::
name|childIndicatorPolicy
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|policy
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QTreeWidgetItem::setFlags(Qt::ItemFlags flags)      Sets the flags for the item to the given \a flags. These determine whether     the item can be selected or modified.  This is often used to disable an item.      \sa flags() */
end_comment
begin_function
DECL|function|setFlags
name|void
name|QTreeWidgetItem
operator|::
name|setFlags
parameter_list|(
name|Qt
operator|::
name|ItemFlags
name|flags
parameter_list|)
block|{
specifier|const
name|bool
name|enable
init|=
operator|(
name|flags
operator|&
name|Qt
operator|::
name|ItemIsEnabled
operator|)
decl_stmt|;
specifier|const
name|bool
name|changedState
init|=
name|bool
argument_list|(
name|itemFlags
operator|&
name|Qt
operator|::
name|ItemIsEnabled
argument_list|)
operator|!=
name|enable
decl_stmt|;
specifier|const
name|bool
name|changedExplicit
init|=
name|d
operator|->
name|disabled
operator|!=
operator|!
name|enable
decl_stmt|;
name|d
operator|->
name|disabled
operator|=
operator|!
name|enable
expr_stmt|;
if|if
condition|(
name|enable
operator|&&
name|par
operator|&&
operator|!
operator|(
name|par
operator|->
name|itemFlags
operator|&
name|Qt
operator|::
name|ItemIsEnabled
operator|)
condition|)
comment|// inherit from parent
name|itemFlags
operator|=
name|flags
operator|&
operator|~
name|Qt
operator|::
name|ItemIsEnabled
expr_stmt|;
else|else
comment|// this item is explicitly disabled or has no parent
name|itemFlags
operator|=
name|flags
expr_stmt|;
if|if
condition|(
name|changedState
operator|&&
name|changedExplicit
condition|)
block|{
comment|// if the propagate the change to the children
name|QStack
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|parents
decl_stmt|;
name|parents
operator|.
name|push
argument_list|(
name|this
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|parents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTreeWidgetItem
modifier|*
name|parent
init|=
name|parents
operator|.
name|pop
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parent
operator|->
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|child
init|=
name|parent
operator|->
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|child
operator|->
name|d
operator|->
name|disabled
condition|)
block|{
comment|// if not explicitly disabled
name|parents
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|enable
condition|)
name|child
operator|->
name|itemFlags
operator|=
name|child
operator|->
name|itemFlags
operator||
name|Qt
operator|::
name|ItemIsEnabled
expr_stmt|;
else|else
name|child
operator|->
name|itemFlags
operator|=
name|child
operator|->
name|itemFlags
operator|&
operator|~
name|Qt
operator|::
name|ItemIsEnabled
expr_stmt|;
name|child
operator|->
name|itemChanged
argument_list|()
expr_stmt|;
comment|// ### we may want to optimize this
block|}
block|}
block|}
block|}
name|itemChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|propagateDisabled
name|void
name|QTreeWidgetItemPrivate
operator|::
name|propagateDisabled
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|item
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|enable
init|=
name|item
operator|->
name|par
condition|?
operator|(
name|item
operator|->
name|par
operator|->
name|itemFlags
operator|.
name|testFlag
argument_list|(
name|Qt
operator|::
name|ItemIsEnabled
argument_list|)
operator|)
else|:
literal|true
decl_stmt|;
name|QStack
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|parents
decl_stmt|;
name|parents
operator|.
name|push
argument_list|(
name|item
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|parents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTreeWidgetItem
modifier|*
name|parent
init|=
name|parents
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|->
name|d
operator|->
name|disabled
condition|)
block|{
comment|// if not explicitly disabled
name|Qt
operator|::
name|ItemFlags
name|oldFlags
init|=
name|parent
operator|->
name|itemFlags
decl_stmt|;
if|if
condition|(
name|enable
condition|)
name|parent
operator|->
name|itemFlags
operator|=
name|parent
operator|->
name|itemFlags
operator||
name|Qt
operator|::
name|ItemIsEnabled
expr_stmt|;
else|else
name|parent
operator|->
name|itemFlags
operator|=
name|parent
operator|->
name|itemFlags
operator|&
operator|~
name|Qt
operator|::
name|ItemIsEnabled
expr_stmt|;
if|if
condition|(
name|parent
operator|->
name|itemFlags
operator|!=
name|oldFlags
condition|)
name|parent
operator|->
name|itemChanged
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parent
operator|->
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|child
init|=
name|parent
operator|->
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|parents
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \fn Qt::ItemFlags QTreeWidgetItem::flags() const      Returns the flags used to describe the item. These determine whether     the item can be checked, edited, and selected.      The default value for flags is     Qt::ItemIsSelectable | Qt::ItemIsUserCheckable | Qt::ItemIsEnabled |     Qt::ItemIsDragEnabled | Qt::ItemIsDropEnabled.      \sa setFlags() */
end_comment
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|QTreeWidgetItem
operator|::
name|flags
parameter_list|()
specifier|const
block|{
return|return
name|itemFlags
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the value for the item's \a column and \a role to the given     \a value.      The \a role describes the type of data specified by \a value, and is defined by     the Qt::ItemDataRole enum. */
end_comment
begin_function
DECL|function|setData
name|void
name|QTreeWidgetItem
operator|::
name|setData
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|role
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
if|if
condition|(
name|column
operator|<
literal|0
condition|)
return|return;
name|QTreeModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QTreeModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
decl_stmt|;
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|Qt
operator|::
name|EditRole
case|:
case|case
name|Qt
operator|::
name|DisplayRole
case|:
block|{
if|if
condition|(
name|values
operator|.
name|count
argument_list|()
operator|<=
name|column
condition|)
block|{
if|if
condition|(
name|model
operator|&&
name|this
operator|==
name|model
operator|->
name|headerItem
condition|)
name|model
operator|->
name|setColumnCount
argument_list|(
name|column
operator|+
literal|1
argument_list|)
expr_stmt|;
else|else
name|values
operator|.
name|resize
argument_list|(
name|column
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|display
operator|.
name|count
argument_list|()
operator|<=
name|column
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|d
operator|->
name|display
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|<
name|column
operator|-
literal|1
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|display
operator|.
name|append
argument_list|(
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|display
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|display
index|[
name|column
index|]
operator|!=
name|value
condition|)
block|{
name|d
operator|->
name|display
index|[
name|column
index|]
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
return|return;
comment|// value is unchanged
block|}
block|}
break|break;
case|case
name|Qt
operator|::
name|CheckStateRole
case|:
if|if
condition|(
operator|(
name|itemFlags
operator|&
name|Qt
operator|::
name|ItemIsAutoTristate
operator|)
operator|&&
name|value
operator|!=
name|Qt
operator|::
name|PartiallyChecked
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|child
init|=
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|->
name|data
argument_list|(
name|column
argument_list|,
name|role
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// has a CheckState
name|Qt
operator|::
name|ItemFlags
name|f
init|=
name|itemFlags
decl_stmt|;
comment|// a little hack to avoid multiple dataChanged signals
name|itemFlags
operator|&=
operator|~
name|Qt
operator|::
name|ItemIsAutoTristate
expr_stmt|;
name|child
operator|->
name|setData
argument_list|(
name|column
argument_list|,
name|role
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|itemFlags
operator|=
name|f
expr_stmt|;
block|}
block|}
block|}
comment|// Don't break, but fall through
default|default:
if|if
condition|(
name|column
operator|<
name|values
operator|.
name|count
argument_list|()
condition|)
block|{
name|bool
name|found
init|=
literal|false
decl_stmt|;
name|QVector
argument_list|<
name|QWidgetItemData
argument_list|>
name|column_values
init|=
name|values
operator|.
name|at
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|column_values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|column_values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|role
operator|==
name|role
condition|)
block|{
if|if
condition|(
name|column_values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|==
name|value
condition|)
return|return;
comment|// value is unchanged
name|values
index|[
name|column
index|]
index|[
name|i
index|]
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
name|values
index|[
name|column
index|]
operator|.
name|append
argument_list|(
name|QWidgetItemData
argument_list|(
name|role
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|model
operator|&&
name|this
operator|==
name|model
operator|->
name|headerItem
condition|)
name|model
operator|->
name|setColumnCount
argument_list|(
name|column
operator|+
literal|1
argument_list|)
expr_stmt|;
else|else
name|values
operator|.
name|resize
argument_list|(
name|column
operator|+
literal|1
argument_list|)
expr_stmt|;
name|values
index|[
name|column
index|]
operator|.
name|append
argument_list|(
name|QWidgetItemData
argument_list|(
name|role
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|model
condition|)
block|{
name|model
operator|->
name|emitDataChanged
argument_list|(
name|this
argument_list|,
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|CheckStateRole
condition|)
block|{
name|QTreeWidgetItem
modifier|*
name|p
decl_stmt|;
for|for
control|(
name|p
operator|=
name|par
init|;
name|p
operator|&&
operator|(
name|p
operator|->
name|itemFlags
operator|&
name|Qt
operator|::
name|ItemIsAutoTristate
operator|)
condition|;
name|p
operator|=
name|p
operator|->
name|par
control|)
name|model
operator|->
name|emitDataChanged
argument_list|(
name|p
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the value for the item's \a column and \a role. */
end_comment
begin_function
DECL|function|data
name|QVariant
name|QTreeWidgetItem
operator|::
name|data
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|Qt
operator|::
name|EditRole
case|:
case|case
name|Qt
operator|::
name|DisplayRole
case|:
if|if
condition|(
name|column
operator|>=
literal|0
operator|&&
name|column
operator|<
name|d
operator|->
name|display
operator|.
name|count
argument_list|()
condition|)
return|return
name|d
operator|->
name|display
operator|.
name|at
argument_list|(
name|column
argument_list|)
return|;
break|break;
case|case
name|Qt
operator|::
name|CheckStateRole
case|:
comment|// special case for check state in tristate
if|if
condition|(
name|children
operator|.
name|count
argument_list|()
operator|&&
operator|(
name|itemFlags
operator|&
name|Qt
operator|::
name|ItemIsAutoTristate
operator|)
condition|)
return|return
name|childrenCheckState
argument_list|(
name|column
argument_list|)
return|;
comment|// fallthrough intended
default|default:
if|if
condition|(
name|column
operator|>=
literal|0
operator|&&
name|column
operator|<
name|values
operator|.
name|size
argument_list|()
condition|)
block|{
specifier|const
name|QVector
argument_list|<
name|QWidgetItemData
argument_list|>
modifier|&
name|column_values
init|=
name|values
operator|.
name|at
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|column_values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|column_values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|role
operator|==
name|role
condition|)
return|return
name|column_values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
return|;
block|}
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Returns \c true if the text in the item is less than the text in the   \a other item, otherwise returns \c false. */
end_comment
begin_function
DECL|function|operator <
name|bool
name|QTreeWidgetItem
operator|::
name|operator
name|<
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|&
name|other
parameter_list|)
specifier|const
block|{
name|int
name|column
init|=
name|view
condition|?
name|view
operator|->
name|sortColumn
argument_list|()
else|:
literal|0
decl_stmt|;
specifier|const
name|QVariant
name|v1
init|=
name|data
argument_list|(
name|column
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
decl_stmt|;
specifier|const
name|QVariant
name|v2
init|=
name|other
operator|.
name|data
argument_list|(
name|column
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
decl_stmt|;
return|return
name|QAbstractItemModelPrivate
operator|::
name|variantLessThan
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     Reads the item from stream \a in. This only reads data into a single item.      \sa write() */
end_comment
begin_function
DECL|function|read
name|void
name|QTreeWidgetItem
operator|::
name|read
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|)
block|{
comment|// convert from streams written before we introduced display (4.2.0)
if|if
condition|(
name|in
operator|.
name|version
argument_list|()
operator|<
name|QDataStream
operator|::
name|Qt_4_2
condition|)
block|{
name|d
operator|->
name|display
operator|.
name|clear
argument_list|()
expr_stmt|;
name|in
operator|>>
name|values
expr_stmt|;
comment|// move the display value over to the display string list
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|column
control|)
block|{
name|d
operator|->
name|display
operator|<<
name|QVariant
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|at
argument_list|(
name|column
argument_list|)
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|values
operator|.
name|at
argument_list|(
name|column
argument_list|)
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|role
operator|==
name|Qt
operator|::
name|DisplayRole
condition|)
block|{
name|d
operator|->
name|display
index|[
name|column
index|]
operator|=
name|values
operator|.
name|at
argument_list|(
name|column
argument_list|)
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
expr_stmt|;
name|values
index|[
name|column
index|]
operator|.
name|remove
argument_list|(
name|i
operator|--
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|in
operator|>>
name|values
operator|>>
name|d
operator|->
name|display
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Writes the item to stream \a out. This only writes data from one single item.      \sa read() */
end_comment
begin_function
DECL|function|write
name|void
name|QTreeWidgetItem
operator|::
name|write
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|)
specifier|const
block|{
name|out
operator|<<
name|values
operator|<<
name|d
operator|->
name|display
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_comment
comment|/*!     \since 4.1      Constructs a copy of \a other. Note that type() and treeWidget()     are not copied.      This function is useful when reimplementing clone().      \sa data(), flags() */
end_comment
begin_constructor
DECL|function|QTreeWidgetItem
name|QTreeWidgetItem
operator|::
name|QTreeWidgetItem
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|&
name|other
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|Type
argument_list|)
member_init_list|,
name|values
argument_list|(
name|other
operator|.
name|values
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QTreeWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|par
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|other
operator|.
name|itemFlags
argument_list|)
block|{
name|d
operator|->
name|display
operator|=
name|other
operator|.
name|d
operator|->
name|display
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Assigns \a other's data and flags to this item. Note that type()     and treeWidget() are not copied.      This function is useful when reimplementing clone().      \sa data(), flags() */
end_comment
begin_function
DECL|function|operator =
name|QTreeWidgetItem
modifier|&
name|QTreeWidgetItem
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|&
name|other
parameter_list|)
block|{
name|values
operator|=
name|other
operator|.
name|values
expr_stmt|;
name|d
operator|->
name|display
operator|=
name|other
operator|.
name|d
operator|->
name|display
expr_stmt|;
name|d
operator|->
name|policy
operator|=
name|other
operator|.
name|d
operator|->
name|policy
expr_stmt|;
name|itemFlags
operator|=
name|other
operator|.
name|itemFlags
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!   Appends the \a child item to the list of children.    \sa insertChild(), takeChild() */
end_comment
begin_function
DECL|function|addChild
name|void
name|QTreeWidgetItem
operator|::
name|addChild
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|child
parameter_list|)
block|{
if|if
condition|(
name|child
condition|)
block|{
name|insertChild
argument_list|(
name|children
operator|.
name|count
argument_list|()
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|child
operator|->
name|d
operator|->
name|rowGuess
operator|=
name|children
operator|.
name|count
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   Inserts the \a child item at \a index in the list of children.    If the child has already been inserted somewhere else it won't be inserted again. */
end_comment
begin_function
DECL|function|insertChild
name|void
name|QTreeWidgetItem
operator|::
name|insertChild
parameter_list|(
name|int
name|index
parameter_list|,
name|QTreeWidgetItem
modifier|*
name|child
parameter_list|)
block|{
if|if
condition|(
name|index
argument_list|<
literal|0
operator|||
name|index
argument_list|>
name|children
operator|.
name|count
argument_list|()
operator|||
name|child
operator|==
literal|0
operator|||
name|child
operator|->
name|view
operator|!=
literal|0
operator|||
name|child
operator|->
name|par
operator|!=
literal|0
condition|)
return|return;
if|if
condition|(
name|QTreeModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QTreeModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
condition|)
block|{
specifier|const
name|bool
name|wasSkipSort
init|=
name|model
operator|->
name|skipPendingSort
decl_stmt|;
name|model
operator|->
name|skipPendingSort
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|model
operator|->
name|rootItem
operator|==
name|this
condition|)
name|child
operator|->
name|par
operator|=
literal|0
expr_stmt|;
else|else
name|child
operator|->
name|par
operator|=
name|this
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|isSortingEnabled
argument_list|()
condition|)
block|{
comment|// do a delayed sort instead
if|if
condition|(
operator|!
name|model
operator|->
name|sortPendingTimer
operator|.
name|isActive
argument_list|()
condition|)
name|model
operator|->
name|sortPendingTimer
operator|.
name|start
argument_list|(
literal|0
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
name|model
operator|->
name|beginInsertItems
argument_list|(
name|this
argument_list|,
name|index
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|cols
init|=
name|model
operator|->
name|columnCount
argument_list|()
decl_stmt|;
name|QStack
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|stack
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTreeWidgetItem
modifier|*
name|i
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|i
operator|->
name|view
operator|=
name|view
expr_stmt|;
name|i
operator|->
name|values
operator|.
name|reserve
argument_list|(
name|cols
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|i
operator|->
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|c
control|)
name|stack
operator|.
name|push
argument_list|(
name|i
operator|->
name|children
operator|.
name|at
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|children
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|model
operator|->
name|endInsertItems
argument_list|()
expr_stmt|;
name|model
operator|->
name|skipPendingSort
operator|=
name|wasSkipSort
expr_stmt|;
block|}
else|else
block|{
name|child
operator|->
name|par
operator|=
name|this
expr_stmt|;
name|children
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|child
operator|->
name|par
condition|)
name|d
operator|->
name|propagateDisabled
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Removes the given item indicated by \a child.   The removed item will not be deleted. */
end_comment
begin_function
DECL|function|removeChild
name|void
name|QTreeWidgetItem
operator|::
name|removeChild
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|child
parameter_list|)
block|{
operator|(
name|void
operator|)
name|takeChild
argument_list|(
name|children
operator|.
name|indexOf
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Removes the item at \a index and returns it, otherwise return 0. */
end_comment
begin_function
DECL|function|takeChild
name|QTreeWidgetItem
modifier|*
name|QTreeWidgetItem
operator|::
name|takeChild
parameter_list|(
name|int
name|index
parameter_list|)
block|{
comment|// we move this outside the check of the index to allow executing
comment|// pending sorts from inline functions, using this function (hack)
name|QTreeModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QTreeModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|model
condition|)
block|{
comment|// This will trigger a layoutChanged signal, thus we might want to optimize
comment|// this function by not emitting the rowsRemoved signal etc to the view.
comment|// On the other hand we also need to make sure that the selectionmodel
comment|// is updated in case we take an item that is selected.
name|model
operator|->
name|skipPendingSort
operator|=
literal|false
expr_stmt|;
name|model
operator|->
name|executePendingSort
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|children
operator|.
name|count
argument_list|()
condition|)
block|{
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|beginRemoveItems
argument_list|(
name|this
argument_list|,
name|index
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTreeWidgetItem
modifier|*
name|item
init|=
name|children
operator|.
name|takeAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|item
operator|->
name|par
operator|=
literal|0
expr_stmt|;
name|QStack
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|stack
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|item
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTreeWidgetItem
modifier|*
name|i
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|i
operator|->
name|view
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|i
operator|->
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|c
control|)
name|stack
operator|.
name|push
argument_list|(
name|i
operator|->
name|children
operator|.
name|at
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|propagateDisabled
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|endRemoveRows
argument_list|()
expr_stmt|;
return|return
name|item
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.1    Appends the given list of \a children to the item.    \sa insertChildren(), takeChildren() */
end_comment
begin_function
DECL|function|addChildren
name|void
name|QTreeWidgetItem
operator|::
name|addChildren
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
modifier|&
name|children
parameter_list|)
block|{
name|insertChildren
argument_list|(
name|this
operator|->
name|children
operator|.
name|count
argument_list|()
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.1    Inserts the given list of \a children into the list of the item children at \a index .    Children that have already been inserted somewhere else won't be inserted. */
end_comment
begin_function
DECL|function|insertChildren
name|void
name|QTreeWidgetItem
operator|::
name|insertChildren
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
modifier|&
name|children
parameter_list|)
block|{
if|if
condition|(
name|view
operator|&&
name|view
operator|->
name|isSortingEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|n
control|)
name|insertChild
argument_list|(
name|index
argument_list|,
name|children
operator|.
name|at
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|QTreeModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QTreeModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
decl_stmt|;
name|QStack
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|stack
decl_stmt|;
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|itemsToInsert
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|n
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|child
init|=
name|children
operator|.
name|at
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|->
name|view
operator|||
name|child
operator|->
name|par
condition|)
continue|continue;
name|itemsToInsert
operator|.
name|append
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|&&
name|model
condition|)
block|{
if|if
condition|(
name|child
operator|->
name|childCount
argument_list|()
operator|==
literal|0
condition|)
name|child
operator|->
name|view
operator|=
name|view
expr_stmt|;
else|else
name|stack
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|model
operator|&&
operator|(
name|model
operator|->
name|rootItem
operator|==
name|this
operator|)
condition|)
name|child
operator|->
name|par
operator|=
literal|0
expr_stmt|;
else|else
name|child
operator|->
name|par
operator|=
name|this
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|itemsToInsert
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTreeWidgetItem
modifier|*
name|i
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|i
operator|->
name|view
operator|=
name|view
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|i
operator|->
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|c
control|)
name|stack
operator|.
name|push
argument_list|(
name|i
operator|->
name|children
operator|.
name|at
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|beginInsertItems
argument_list|(
name|this
argument_list|,
name|index
argument_list|,
name|itemsToInsert
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|itemsToInsert
operator|.
name|count
argument_list|()
condition|;
operator|++
name|n
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|child
init|=
name|itemsToInsert
operator|.
name|at
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|this
operator|->
name|children
operator|.
name|insert
argument_list|(
name|index
operator|+
name|n
argument_list|,
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|->
name|par
condition|)
name|d
operator|->
name|propagateDisabled
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|endInsertItems
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \since 4.1    Removes the list of children and returns it, otherwise returns an empty list. */
end_comment
begin_function
DECL|function|takeChildren
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|QTreeWidgetItem
operator|::
name|takeChildren
parameter_list|()
block|{
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|removed
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QTreeModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QTreeModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|model
condition|)
block|{
comment|// This will trigger a layoutChanged signal, thus we might want to optimize
comment|// this function by not emitting the rowsRemoved signal etc to the view.
comment|// On the other hand we also need to make sure that the selectionmodel
comment|// is updated in case we take an item that is selected.
name|model
operator|->
name|executePendingSort
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|beginRemoveItems
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|children
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|n
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|item
init|=
name|children
operator|.
name|at
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|item
operator|->
name|par
operator|=
literal|0
expr_stmt|;
name|QStack
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|stack
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|item
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTreeWidgetItem
modifier|*
name|i
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|i
operator|->
name|view
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|i
operator|->
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|c
control|)
name|stack
operator|.
name|push
argument_list|(
name|i
operator|->
name|children
operator|.
name|at
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|propagateDisabled
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|removed
operator|=
name|children
expr_stmt|;
name|children
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// detach
if|if
condition|(
name|model
condition|)
name|model
operator|->
name|endRemoveItems
argument_list|()
expr_stmt|;
block|}
return|return
name|removed
return|;
block|}
end_function
begin_function
DECL|function|sortChildren
name|void
name|QTreeWidgetItemPrivate
operator|::
name|sortChildren
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|,
name|bool
name|climb
parameter_list|)
block|{
name|QTreeModel
modifier|*
name|model
init|=
operator|(
name|q
operator|->
name|view
condition|?
name|qobject_cast
argument_list|<
name|QTreeModel
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|model
condition|)
return|return;
name|model
operator|->
name|sortItems
argument_list|(
operator|&
name|q
operator|->
name|children
argument_list|,
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
if|if
condition|(
name|climb
condition|)
block|{
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
name|it
init|=
name|q
operator|->
name|children
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|q
operator|->
name|children
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
comment|//here we call the private object's method to avoid emitting
comment|//the layoutAboutToBeChanged and layoutChanged signals
operator|(
operator|*
name|it
operator|)
operator|->
name|d
operator|->
name|sortChildren
argument_list|(
name|column
argument_list|,
name|order
argument_list|,
name|climb
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!   \internal    Sorts the children by the value in the given \a column, in the \a order   specified. If \a climb is true, the items below each of the children will   also be sorted. */
end_comment
begin_function
DECL|function|sortChildren
name|void
name|QTreeWidgetItem
operator|::
name|sortChildren
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|,
name|bool
name|climb
parameter_list|)
block|{
name|QTreeModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QTreeModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|model
condition|)
return|return;
if|if
condition|(
name|model
operator|->
name|isChanging
argument_list|()
condition|)
return|return;
name|QTreeModel
operator|::
name|SkipSorting
name|skipSorting
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|int
name|oldSortColumn
init|=
name|view
operator|->
name|d_func
argument_list|()
operator|->
name|explicitSortColumn
decl_stmt|;
name|view
operator|->
name|d_func
argument_list|()
operator|->
name|explicitSortColumn
operator|=
name|column
expr_stmt|;
emit|emit
name|model
operator|->
name|layoutAboutToBeChanged
argument_list|()
emit|;
name|d
operator|->
name|sortChildren
argument_list|(
name|column
argument_list|,
name|order
argument_list|,
name|climb
argument_list|)
expr_stmt|;
emit|emit
name|model
operator|->
name|layoutChanged
argument_list|()
emit|;
name|view
operator|->
name|d_func
argument_list|()
operator|->
name|explicitSortColumn
operator|=
name|oldSortColumn
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal    Calculates the checked state of the item based on the checked state   of its children. E.g. if all children checked => this item is also   checked; if some children checked => this item is partially checked;   if no children checked => this item is unchecked. */
end_comment
begin_function
DECL|function|childrenCheckState
name|QVariant
name|QTreeWidgetItem
operator|::
name|childrenCheckState
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|column
operator|<
literal|0
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|bool
name|checkedChildren
init|=
literal|false
decl_stmt|;
name|bool
name|uncheckedChildren
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVariant
name|value
init|=
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|data
argument_list|(
name|column
argument_list|,
name|Qt
operator|::
name|CheckStateRole
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
switch|switch
condition|(
cast|static_cast
argument_list|<
name|Qt
operator|::
name|CheckState
argument_list|>
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|Qt
operator|::
name|Unchecked
case|:
name|uncheckedChildren
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Checked
case|:
name|checkedChildren
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|PartiallyChecked
case|:
default|default:
return|return
name|Qt
operator|::
name|PartiallyChecked
return|;
block|}
if|if
condition|(
name|uncheckedChildren
operator|&&
name|checkedChildren
condition|)
return|return
name|Qt
operator|::
name|PartiallyChecked
return|;
block|}
if|if
condition|(
name|uncheckedChildren
condition|)
return|return
name|Qt
operator|::
name|Unchecked
return|;
elseif|else
if|if
condition|(
name|checkedChildren
condition|)
return|return
name|Qt
operator|::
name|Checked
return|;
else|else
return|return
name|QVariant
argument_list|()
return|;
comment|// value was not defined
block|}
end_function
begin_comment
comment|/*!   \since 4.5    Causes the model associated with this item to emit a   \l{QAbstractItemModel::dataChanged()}{dataChanged}() signal for this   item.    You normally only need to call this function if you have subclassed   QTreeWidgetItem and reimplemented data() and/or setData().    \sa setData() */
end_comment
begin_function
DECL|function|emitDataChanged
name|void
name|QTreeWidgetItem
operator|::
name|emitDataChanged
parameter_list|()
block|{
name|itemChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|itemChanged
name|void
name|QTreeWidgetItem
operator|::
name|itemChanged
parameter_list|()
block|{
if|if
condition|(
name|QTreeModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QTreeModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
condition|)
name|model
operator|->
name|itemChanged
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|executePendingSort
name|void
name|QTreeWidgetItem
operator|::
name|executePendingSort
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|QTreeModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QTreeModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
condition|)
name|model
operator|->
name|executePendingSort
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     \relates QTreeWidgetItem      Writes the tree widget item \a item to stream \a out.      This operator uses QTreeWidgetItem::write().      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QTreeWidgetItem
modifier|&
name|item
parameter_list|)
block|{
name|item
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_comment
comment|/*!     \relates QTreeWidgetItem      Reads a tree widget item from stream \a in into \a item.      This operator uses QTreeWidgetItem::read().      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|,
name|QTreeWidgetItem
modifier|&
name|item
parameter_list|)
block|{
name|item
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|in
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_function
DECL|function|_q_emitItemPressed
name|void
name|QTreeWidgetPrivate
operator|::
name|_q_emitItemPressed
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|itemPressed
argument_list|(
name|item
argument_list|(
name|index
argument_list|)
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemClicked
name|void
name|QTreeWidgetPrivate
operator|::
name|_q_emitItemClicked
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|itemClicked
argument_list|(
name|item
argument_list|(
name|index
argument_list|)
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemDoubleClicked
name|void
name|QTreeWidgetPrivate
operator|::
name|_q_emitItemDoubleClicked
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|itemDoubleClicked
argument_list|(
name|item
argument_list|(
name|index
argument_list|)
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemActivated
name|void
name|QTreeWidgetPrivate
operator|::
name|_q_emitItemActivated
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|itemActivated
argument_list|(
name|item
argument_list|(
name|index
argument_list|)
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemEntered
name|void
name|QTreeWidgetPrivate
operator|::
name|_q_emitItemEntered
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|itemEntered
argument_list|(
name|item
argument_list|(
name|index
argument_list|)
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemChanged
name|void
name|QTreeWidgetPrivate
operator|::
name|_q_emitItemChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|QTreeWidgetItem
modifier|*
name|indexItem
init|=
name|item
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexItem
condition|)
emit|emit
name|q
operator|->
name|itemChanged
argument_list|(
name|indexItem
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemExpanded
name|void
name|QTreeWidgetPrivate
operator|::
name|_q_emitItemExpanded
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|itemExpanded
argument_list|(
name|item
argument_list|(
name|index
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemCollapsed
name|void
name|QTreeWidgetPrivate
operator|::
name|_q_emitItemCollapsed
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|itemCollapsed
argument_list|(
name|item
argument_list|(
name|index
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitCurrentItemChanged
name|void
name|QTreeWidgetPrivate
operator|::
name|_q_emitCurrentItemChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|current
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|previous
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|QTreeWidgetItem
modifier|*
name|currentItem
init|=
name|item
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|QTreeWidgetItem
modifier|*
name|previousItem
init|=
name|item
argument_list|(
name|previous
argument_list|)
decl_stmt|;
emit|emit
name|q
operator|->
name|currentItemChanged
argument_list|(
name|currentItem
argument_list|,
name|previousItem
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_sort
name|void
name|QTreeWidgetPrivate
operator|::
name|_q_sort
parameter_list|()
block|{
if|if
condition|(
name|sortingEnabled
condition|)
block|{
name|int
name|column
init|=
name|header
operator|->
name|sortIndicatorSection
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|SortOrder
name|order
init|=
name|header
operator|->
name|sortIndicatorOrder
argument_list|()
decl_stmt|;
name|treeModel
argument_list|()
operator|->
name|sort
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_selectionChanged
name|void
name|QTreeWidgetPrivate
operator|::
name|_q_selectionChanged
parameter_list|(
specifier|const
name|QItemSelection
modifier|&
name|selected
parameter_list|,
specifier|const
name|QItemSelection
modifier|&
name|deselected
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|QModelIndexList
name|indices
init|=
name|selected
operator|.
name|indexes
argument_list|()
decl_stmt|;
name|int
name|i
decl_stmt|;
name|QTreeModel
modifier|*
name|m
init|=
name|treeModel
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|indices
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|item
init|=
name|m
operator|->
name|item
argument_list|(
name|indices
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|item
operator|->
name|d
operator|->
name|selected
operator|=
literal|true
expr_stmt|;
block|}
name|indices
operator|=
name|deselected
operator|.
name|indexes
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|indices
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|item
init|=
name|m
operator|->
name|item
argument_list|(
name|indices
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|item
operator|->
name|d
operator|->
name|selected
operator|=
literal|false
expr_stmt|;
block|}
emit|emit
name|q
operator|->
name|itemSelectionChanged
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|_q_dataChanged
name|void
name|QTreeWidgetPrivate
operator|::
name|_q_dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|)
block|{
if|if
condition|(
name|sortingEnabled
operator|&&
name|topLeft
operator|.
name|isValid
argument_list|()
operator|&&
name|bottomRight
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|treeModel
argument_list|()
operator|->
name|sortPendingTimer
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|int
name|column
init|=
name|header
operator|->
name|sortIndicatorSection
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|>=
name|topLeft
operator|.
name|column
argument_list|()
operator|&&
name|column
operator|<=
name|bottomRight
operator|.
name|column
argument_list|()
condition|)
block|{
name|Qt
operator|::
name|SortOrder
name|order
init|=
name|header
operator|->
name|sortIndicatorOrder
argument_list|()
decl_stmt|;
name|treeModel
argument_list|()
operator|->
name|ensureSorted
argument_list|(
name|column
argument_list|,
name|order
argument_list|,
name|topLeft
operator|.
name|row
argument_list|()
argument_list|,
name|bottomRight
operator|.
name|row
argument_list|()
argument_list|,
name|topLeft
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!   \class QTreeWidget    \brief The QTreeWidget class provides a tree view that uses a predefined   tree model.    \ingroup model-view   \inmodule QtWidgets    The QTreeWidget class is a convenience class that provides a standard   tree widget with a classic item-based interface similar to that used by   the QListView class in Qt 3.   This class is based on Qt's Model/View architecture and uses a default   model to hold items, each of which is a QTreeWidgetItem.    Developers who do not need the flexibility of the Model/View framework   can use this class to create simple hierarchical lists very easily. A more   flexible approach involves combining a QTreeView with a standard item model.   This allows the storage of data to be separated from its representation.    In its simplest form, a tree widget can be constructed in the following way:    \snippet code/src_gui_itemviews_qtreewidget.cpp 0    Before items can be added to the tree widget, the number of columns must   be set with setColumnCount(). This allows each item to have one or more   labels or other decorations. The number of columns in use can be found   with the columnCount() function.    The tree can have a header that contains a section for each column in   the widget. It is easiest to set up the labels for each section by   supplying a list of strings with setHeaderLabels(), but a custom header   can be constructed with a QTreeWidgetItem and inserted into the tree   with the setHeaderItem() function.    The items in the tree can be sorted by column according to a predefined   sort order. If sorting is enabled, the user can sort the items by clicking   on a column header. Sorting can be enabled or disabled by calling   \l{QTreeView::setSortingEnabled()}{setSortingEnabled()}. The   \l{QTreeView::isSortingEnabled()}{isSortingEnabled()} function indicates   whether sorting is enabled.    \table 100%   \row \li \inlineimage windowsvista-treeview.png Screenshot of a Windows Vista style tree widget        \li \inlineimage macintosh-treeview.png Screenshot of a Macintosh style tree widget        \li \inlineimage fusion-treeview.png Screenshot of a Fusion style tree widget   \row \li A \l{Windows Vista Style Widget Gallery}{Windows Vista style} tree widget.        \li A \l{Macintosh Style Widget Gallery}{Macintosh style} tree widget.        \li A \l{Fusion Style Widget Gallery}{Fusion style} tree widget.   \endtable    \sa QTreeWidgetItem, QTreeWidgetItemIterator, QTreeView,   {Model/View Programming}, {Settings Editor Example} */
end_comment
begin_comment
comment|/*!     \property QTreeWidget::columnCount     \brief the number of columns displayed in the tree widget      By default, this property has a value of 1. */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidget::itemActivated(QTreeWidgetItem *item, int column)      This signal is emitted when the user activates an item by single-     or double-clicking (depending on the platform, i.e. on the     QStyle::SH_ItemView_ActivateItemOnSingleClick style hint) or     pressing a special key (e.g., \uicontrol Enter).      The specified \a item is the item that was clicked, or 0 if no     item was clicked. The \a column is the item's column that was     clicked, or -1 if no item was clicked. */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidget::itemPressed(QTreeWidgetItem *item, int column)      This signal is emitted when the user presses a mouse button inside     the widget.      The specified \a item is the item that was clicked, or 0 if no     item was clicked. The \a column is the item's column that was     clicked, or -1 if no item was clicked. */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidget::itemClicked(QTreeWidgetItem *item, int column)      This signal is emitted when the user clicks inside the widget.      The specified \a item is the item that was clicked. The \a column is the     item's column that was clicked. If no item was clicked, no signal will be     emitted. */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidget::itemDoubleClicked(QTreeWidgetItem *item, int column)      This signal is emitted when the user double clicks inside the     widget.      The specified \a item is the item that was clicked, or 0 if no     item was clicked. The \a column is the item's column that was     clicked. If no item was double clicked, no signal will be emitted. */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidget::itemExpanded(QTreeWidgetItem *item)      This signal is emitted when the specified \a item is expanded so that     all of its children are displayed.      \note This signal will not be emitted if an item changes its state when     expandAll() is invoked.      \sa QTreeWidgetItem::isExpanded(), itemCollapsed(), expandItem() */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidget::itemCollapsed(QTreeWidgetItem *item)      This signal is emitted when the specified \a item is collapsed so that     none of its children are displayed.      \note This signal will not be emitted if an item changes its state when     collapseAll() is invoked.      \sa QTreeWidgetItem::isExpanded(), itemExpanded(), collapseItem() */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidget::currentItemChanged(QTreeWidgetItem *current, QTreeWidgetItem *previous)      This signal is emitted when the current item changes. The current     item is specified by \a current, and this replaces the \a previous     current item.      \sa setCurrentItem() */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidget::itemSelectionChanged()      This signal is emitted when the selection changes in the tree widget.     The current selection can be found with selectedItems(). */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidget::itemEntered(QTreeWidgetItem *item, int column)      This signal is emitted when the mouse cursor enters an \a item over the     specified \a column.     QTreeWidget mouse tracking needs to be enabled for this feature to work. */
end_comment
begin_comment
comment|/*!     \fn void QTreeWidget::itemChanged(QTreeWidgetItem *item, int column)      This signal is emitted when the contents of the \a column in the specified     \a item changes. */
end_comment
begin_comment
comment|/*!   \since 4.3    \fn void QTreeWidget::removeItemWidget(QTreeWidgetItem *item, int column)    Removes the widget set in the given \a item in the given \a column. */
end_comment
begin_comment
comment|/*!   Constructs a tree widget with the given \a parent. */
end_comment
begin_constructor
DECL|function|QTreeWidget
name|QTreeWidget
operator|::
name|QTreeWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QTreeView
argument_list|(
operator|*
operator|new
name|QTreeWidgetPrivate
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{
name|QTreeView
operator|::
name|setModel
argument_list|(
operator|new
name|QTreeModel
argument_list|(
literal|1
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|pressed
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemPressed
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemClicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|doubleClicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemDoubleClicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemActivated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|entered
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemEntered
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|expanded
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemExpanded
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|collapsed
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemCollapsed
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_emitCurrentItemChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemChanged
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|columnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|selectionChanged
argument_list|(
name|QItemSelection
argument_list|,
name|QItemSelection
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_selectionChanged
argument_list|(
name|QItemSelection
argument_list|,
name|QItemSelection
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|header
argument_list|()
operator|->
name|setSectionsClickable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the tree widget and all its items. */
end_comment
begin_destructor
DECL|function|~QTreeWidget
name|QTreeWidget
operator|::
name|~
name|QTreeWidget
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*   Retuns the number of header columns in the view.    \sa sortColumn(), currentColumn(), topLevelItemCount() */
end_comment
begin_function
DECL|function|columnCount
name|int
name|QTreeWidget
operator|::
name|columnCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|columnCount
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*   Sets the number of header \a columns in the tree widget. */
end_comment
begin_function
DECL|function|setColumnCount
name|void
name|QTreeWidget
operator|::
name|setColumnCount
parameter_list|(
name|int
name|columns
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|<
literal|0
condition|)
return|return;
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|setColumnCount
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.2    Returns the tree widget's invisible root item.    The invisible root item provides access to the tree widget's top-level items   through the QTreeWidgetItem API, making it possible to write functions that   can treat top-level items and their children in a uniform way; for example,   recursive functions. */
end_comment
begin_function
DECL|function|invisibleRootItem
name|QTreeWidgetItem
modifier|*
name|QTreeWidget
operator|::
name|invisibleRootItem
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|rootItem
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the top level item at the given \a index, or 0 if the item does   not exist.    \sa topLevelItemCount(), insertTopLevelItem() */
end_comment
begin_function
DECL|function|topLevelItem
name|QTreeWidgetItem
modifier|*
name|QTreeWidget
operator|::
name|topLevelItem
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|rootItem
operator|->
name|child
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QTreeWidget::topLevelItemCount     \brief the number of top-level items      By default, this property has a value of 0.      \sa columnCount(), currentItem() */
end_comment
begin_function
DECL|function|topLevelItemCount
name|int
name|QTreeWidget
operator|::
name|topLevelItemCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|rootItem
operator|->
name|childCount
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Inserts the \a item at \a index in the top level in the view.    If the item has already been inserted somewhere else it won't be inserted.    \sa addTopLevelItem(), columnCount() */
end_comment
begin_function
DECL|function|insertTopLevelItem
name|void
name|QTreeWidget
operator|::
name|insertTopLevelItem
parameter_list|(
name|int
name|index
parameter_list|,
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|rootItem
operator|->
name|insertChild
argument_list|(
name|index
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Appends the \a item as a top-level item in the widget.      \sa insertTopLevelItem() */
end_comment
begin_function
DECL|function|addTopLevelItem
name|void
name|QTreeWidget
operator|::
name|addTopLevelItem
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|insertTopLevelItem
argument_list|(
name|topLevelItemCount
argument_list|()
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Removes the top-level item at the given \a index in the tree and   returns it, otherwise returns 0;    \sa insertTopLevelItem(), topLevelItem(), topLevelItemCount() */
end_comment
begin_function
DECL|function|takeTopLevelItem
name|QTreeWidgetItem
modifier|*
name|QTreeWidget
operator|::
name|takeTopLevelItem
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|rootItem
operator|->
name|takeChild
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the index of the given top-level \a item, or -1 if the item   cannot be found.    \sa sortItems(), topLevelItemCount()  */
end_comment
begin_function
DECL|function|indexOfTopLevelItem
name|int
name|QTreeWidget
operator|::
name|indexOfTopLevelItem
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|executePendingSort
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|rootItem
operator|->
name|children
operator|.
name|indexOf
argument_list|(
name|item
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.1    Inserts the list of \a items at \a index in the top level in the view.    Items that have already been inserted somewhere else won't be inserted.    \sa addTopLevelItems() */
end_comment
begin_function
DECL|function|insertTopLevelItems
name|void
name|QTreeWidget
operator|::
name|insertTopLevelItems
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
modifier|&
name|items
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|rootItem
operator|->
name|insertChildren
argument_list|(
name|index
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Appends the list of \a items as a top-level items in the widget.    \sa insertTopLevelItems() */
end_comment
begin_function
DECL|function|addTopLevelItems
name|void
name|QTreeWidget
operator|::
name|addTopLevelItems
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
modifier|&
name|items
parameter_list|)
block|{
name|insertTopLevelItems
argument_list|(
name|topLevelItemCount
argument_list|()
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the item used for the tree widget's header.      \sa setHeaderItem() */
end_comment
begin_function
DECL|function|headerItem
name|QTreeWidgetItem
modifier|*
name|QTreeWidget
operator|::
name|headerItem
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|headerItem
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the header \a item for the tree widget. The label for each column in     the header is supplied by the corresponding label in the item.      The tree widget takes ownership of the item.      \sa headerItem(), setHeaderLabels() */
end_comment
begin_function
DECL|function|setHeaderItem
name|void
name|QTreeWidget
operator|::
name|setHeaderItem
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
return|return;
name|item
operator|->
name|view
operator|=
name|this
expr_stmt|;
name|int
name|oldCount
init|=
name|columnCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldCount
operator|<
name|item
operator|->
name|columnCount
argument_list|()
condition|)
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|beginInsertColumns
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|oldCount
argument_list|,
name|item
operator|->
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|beginRemoveColumns
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|item
operator|->
name|columnCount
argument_list|()
argument_list|,
name|oldCount
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|headerItem
expr_stmt|;
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|headerItem
operator|=
name|item
expr_stmt|;
if|if
condition|(
name|oldCount
operator|<
name|item
operator|->
name|columnCount
argument_list|()
condition|)
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|endInsertColumns
argument_list|()
expr_stmt|;
else|else
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|endRemoveColumns
argument_list|()
expr_stmt|;
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
literal|0
argument_list|,
name|oldCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Adds a column in the header for each item in the \a labels list, and sets   the label for each column.    Note that setHeaderLabels() won't remove existing columns.    \sa setHeaderItem(), setHeaderLabel() */
end_comment
begin_function
DECL|function|setHeaderLabels
name|void
name|QTreeWidget
operator|::
name|setHeaderLabels
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|labels
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnCount
argument_list|()
operator|<
name|labels
operator|.
name|count
argument_list|()
condition|)
name|setColumnCount
argument_list|(
name|labels
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QTreeWidgetItem
modifier|*
name|item
init|=
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|headerItem
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|labels
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|item
operator|->
name|setText
argument_list|(
name|i
argument_list|,
name|labels
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QTreeWidget::setHeaderLabel(const QString&label)     \since 4.2      Same as setHeaderLabels(QStringList(\a label)). */
end_comment
begin_comment
comment|/*!     Returns the current item in the tree widget.      \sa setCurrentItem(), currentItemChanged() */
end_comment
begin_function
DECL|function|currentItem
name|QTreeWidgetItem
modifier|*
name|QTreeWidget
operator|::
name|currentItem
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|item
argument_list|(
name|currentIndex
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1     Returns the current column in the tree widget.      \sa setCurrentItem(), columnCount() */
end_comment
begin_function
DECL|function|currentColumn
name|int
name|QTreeWidget
operator|::
name|currentColumn
parameter_list|()
specifier|const
block|{
return|return
name|currentIndex
argument_list|()
operator|.
name|column
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the current \a item in the tree widget.    Unless the selection mode is \l{QAbstractItemView::}{NoSelection},   the item is also selected.    \sa currentItem(), currentItemChanged() */
end_comment
begin_function
DECL|function|setCurrentItem
name|void
name|QTreeWidget
operator|::
name|setCurrentItem
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|setCurrentItem
argument_list|(
name|item
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.1   Sets the current \a item in the tree widget and the current column to \a column.    \sa currentItem() */
end_comment
begin_function
DECL|function|setCurrentItem
name|void
name|QTreeWidget
operator|::
name|setCurrentItem
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|,
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.4   Sets the current \a item in the tree widget and the current column to \a column,   using the given \a command.    \sa currentItem() */
end_comment
begin_function
DECL|function|setCurrentItem
name|void
name|QTreeWidget
operator|::
name|setCurrentItem
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|int
name|column
parameter_list|,
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|command
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|selectionModel
operator|->
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|,
name|column
argument_list|)
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns a pointer to the item at the coordinates \a p. The coordinates   are relative to the tree widget's \l{QAbstractScrollArea::}{viewport()}.    \sa visualItemRect() */
end_comment
begin_function
DECL|function|itemAt
name|QTreeWidgetItem
modifier|*
name|QTreeWidget
operator|::
name|itemAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|item
argument_list|(
name|indexAt
argument_list|(
name|p
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QTreeWidgetItem *QTreeWidget::itemAt(int x, int y) const     \overload      Returns a pointer to the item at the coordinates (\a x, \a y). The coordinates     are relative to the tree widget's \l{QAbstractScrollArea::}{viewport()}. */
end_comment
begin_comment
comment|/*!   Returns the rectangle on the viewport occupied by the item at \a item.    \sa itemAt() */
end_comment
begin_function
DECL|function|visualItemRect
name|QRect
name|QTreeWidget
operator|::
name|visualItemRect
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
comment|//the visual rect for an item is across all columns. So we need to determine
comment|//what is the first and last column and get their visual index rects
name|QModelIndex
name|base
init|=
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
specifier|const
name|int
name|firstVisiblesection
init|=
name|header
argument_list|()
operator|->
name|logicalIndexAt
argument_list|(
operator|-
name|header
argument_list|()
operator|->
name|offset
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|lastVisibleSection
init|=
name|header
argument_list|()
operator|->
name|logicalIndexAt
argument_list|(
name|header
argument_list|()
operator|->
name|length
argument_list|()
operator|-
name|header
argument_list|()
operator|->
name|offset
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QModelIndex
name|first
init|=
name|base
operator|.
name|sibling
argument_list|(
name|base
operator|.
name|row
argument_list|()
argument_list|,
name|header
argument_list|()
operator|->
name|logicalIndex
argument_list|(
name|firstVisiblesection
argument_list|)
argument_list|)
decl_stmt|;
name|QModelIndex
name|last
init|=
name|base
operator|.
name|sibling
argument_list|(
name|base
operator|.
name|row
argument_list|()
argument_list|,
name|header
argument_list|()
operator|->
name|logicalIndex
argument_list|(
name|lastVisibleSection
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|visualRect
argument_list|(
name|first
argument_list|)
operator||
name|visualRect
argument_list|(
name|last
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.1    Returns the column used to sort the contents of the widget.    \sa sortItems() */
end_comment
begin_function
DECL|function|sortColumn
name|int
name|QTreeWidget
operator|::
name|sortColumn
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|explicitSortColumn
operator|!=
operator|-
literal|1
condition|?
name|d
operator|->
name|explicitSortColumn
else|:
name|header
argument_list|()
operator|->
name|sortIndicatorSection
argument_list|()
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!   Sorts the items in the widget in the specified \a order by the values in   the given \a column.    \sa sortColumn() */
end_comment
begin_function
DECL|function|sortItems
name|void
name|QTreeWidget
operator|::
name|sortItems
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|header
argument_list|()
operator|->
name|setSortIndicator
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
name|d
operator|->
name|model
operator|->
name|sort
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Starts editing the \a item in the given \a column if it is editable. */
end_comment
begin_function
DECL|function|editItem
name|void
name|QTreeWidget
operator|::
name|editItem
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|edit
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|,
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Opens a persistent editor for the \a item in the given \a column.    \sa closePersistentEditor() */
end_comment
begin_function
DECL|function|openPersistentEditor
name|void
name|QTreeWidget
operator|::
name|openPersistentEditor
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|QAbstractItemView
operator|::
name|openPersistentEditor
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|,
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Closes the persistent editor for the \a item in the given \a column.    This function has no effect if no persistent editor is open for this   combination of item and column.    \sa openPersistentEditor() */
end_comment
begin_function
DECL|function|closePersistentEditor
name|void
name|QTreeWidget
operator|::
name|closePersistentEditor
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|QAbstractItemView
operator|::
name|closePersistentEditor
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|,
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the widget displayed in the cell specified by \a item and the given \a column.  */
end_comment
begin_function
DECL|function|itemWidget
name|QWidget
modifier|*
name|QTreeWidget
operator|::
name|itemWidget
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
return|return
name|QAbstractItemView
operator|::
name|indexWidget
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|,
name|column
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Sets the given \a widget to be displayed in the cell specified by the given     \a item and \a column.      The given \a widget's \l {QWidget::}{autoFillBackground} property must be     set to true, otherwise the widget's background will be transparent, showing     both the model data and the tree widget item.      This function should only be used to display static content in the place of     a tree widget item. If you want to display custom dynamic content or     implement a custom editor widget, use QTreeView and subclass QItemDelegate     instead.      This function cannot be called before the item hierarchy has been set up,     i.e., the QTreeWidgetItem that will hold \a widget must have been added to     the view before \a widget is set.      \note The tree takes ownership of the widget.      \sa {Delegate Classes} */
end_comment
begin_function
DECL|function|setItemWidget
name|void
name|QTreeWidget
operator|::
name|setItemWidget
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|int
name|column
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|QAbstractItemView
operator|::
name|setIndexWidget
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|,
name|column
argument_list|)
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns \c true if the \a item is selected; otherwise returns \c false.    \sa itemSelectionChanged()    \obsolete    This function is deprecated. Use \l{QTreeWidgetItem::isSelected()} instead. */
end_comment
begin_function
DECL|function|isItemSelected
name|bool
name|QTreeWidget
operator|::
name|isItemSelected
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|item
condition|)
return|return
literal|false
return|;
return|return
name|item
operator|->
name|d
operator|->
name|selected
return|;
block|}
end_function
begin_comment
comment|/*!   If \a select is true, the given \a item is selected; otherwise it is   deselected.    \sa itemSelectionChanged()    \obsolete    This function is deprecated. Use \l{QTreeWidgetItem::setSelected()} instead. */
end_comment
begin_function
DECL|function|setItemSelected
name|void
name|QTreeWidget
operator|::
name|setItemSelected
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|bool
name|select
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
return|return;
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|)
argument_list|,
operator|(
name|select
condition|?
name|QItemSelectionModel
operator|::
name|Select
else|:
name|QItemSelectionModel
operator|::
name|Deselect
operator|)
operator||
name|QItemSelectionModel
operator|::
name|Rows
argument_list|)
expr_stmt|;
name|item
operator|->
name|d
operator|->
name|selected
operator|=
name|select
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns a list of all selected non-hidden items.    \sa itemSelectionChanged() */
end_comment
begin_function
DECL|function|selectedItems
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|QTreeWidget
operator|::
name|selectedItems
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
name|QModelIndexList
name|indexes
init|=
name|selectionModel
argument_list|()
operator|->
name|selectedIndexes
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|items
decl_stmt|;
name|items
operator|.
name|reserve
argument_list|(
name|indexes
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|seen
decl_stmt|;
name|seen
operator|.
name|reserve
argument_list|(
name|indexes
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|item
init|=
name|d
operator|->
name|item
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isItemHidden
argument_list|(
name|item
argument_list|)
operator|||
name|seen
operator|.
name|contains
argument_list|(
name|item
argument_list|)
condition|)
continue|continue;
name|seen
operator|.
name|insert
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|items
operator|.
name|append
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|items
return|;
block|}
end_function
begin_comment
comment|/*!   Returns a list of items that match the given \a text, using the given \a flags, in the given \a column. */
end_comment
begin_function
DECL|function|findItems
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|QTreeWidget
operator|::
name|findItems
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|Qt
operator|::
name|MatchFlags
name|flags
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
name|QModelIndexList
name|indexes
init|=
name|d
operator|->
name|model
operator|->
name|match
argument_list|(
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|column
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|text
argument_list|,
operator|-
literal|1
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|items
decl_stmt|;
specifier|const
name|int
name|indexesSize
init|=
name|indexes
operator|.
name|size
argument_list|()
decl_stmt|;
name|items
operator|.
name|reserve
argument_list|(
name|indexesSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexesSize
condition|;
operator|++
name|i
control|)
name|items
operator|.
name|append
argument_list|(
name|d
operator|->
name|item
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|items
return|;
block|}
end_function
begin_comment
comment|/*!   Returns \c true if the \a item is explicitly hidden, otherwise returns \c false.    \obsolete    This function is deprecated. Use \l{QTreeWidgetItem::isHidden()} instead. */
end_comment
begin_function
DECL|function|isItemHidden
name|bool
name|QTreeWidget
operator|::
name|isItemHidden
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|==
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|headerItem
condition|)
return|return
name|header
argument_list|()
operator|->
name|isHidden
argument_list|()
return|;
if|if
condition|(
name|d
operator|->
name|hiddenIndexes
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|QTreeModel
operator|::
name|SkipSorting
name|skipSorting
argument_list|(
name|d
operator|->
name|treeModel
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|isRowHidden
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Hides the given \a item if \a hide is true; otherwise shows the item.    \sa itemChanged()    \obsolete    This function is deprecated. Use \l{QTreeWidgetItem::setHidden()} instead. */
end_comment
begin_function
DECL|function|setItemHidden
name|void
name|QTreeWidget
operator|::
name|setItemHidden
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|bool
name|hide
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|==
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|headerItem
condition|)
block|{
name|header
argument_list|()
operator|->
name|setHidden
argument_list|(
name|hide
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QModelIndex
name|index
init|=
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|setRowHidden
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|parent
argument_list|()
argument_list|,
name|hide
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   Returns \c true if the given \a item is open; otherwise returns \c false.    \sa itemExpanded()    \obsolete    This function is deprecated. Use \l{QTreeWidgetItem::isExpanded()} instead. */
end_comment
begin_function
DECL|function|isItemExpanded
name|bool
name|QTreeWidget
operator|::
name|isItemExpanded
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
name|QTreeModel
operator|::
name|SkipSorting
name|skipSorting
argument_list|(
name|d
operator|->
name|treeModel
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|isExpanded
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the item referred to by \a item to either closed or opened,     depending on the value of \a expand.      \sa expandItem(), collapseItem(), itemExpanded()      \obsolete      This function is deprecated. Use \l{QTreeWidgetItem::setExpanded()} instead. */
end_comment
begin_function
DECL|function|setItemExpanded
name|void
name|QTreeWidget
operator|::
name|setItemExpanded
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|bool
name|expand
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|QTreeModel
operator|::
name|SkipSorting
name|skipSorting
argument_list|(
name|d
operator|->
name|treeModel
argument_list|()
argument_list|)
decl_stmt|;
name|setExpanded
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|)
argument_list|,
name|expand
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.3    Returns \c true if the given \a item is set to show only one section over all columns;   otherwise returns \c false.    \sa setFirstItemColumnSpanned() */
end_comment
begin_function
DECL|function|isFirstItemColumnSpanned
name|bool
name|QTreeWidget
operator|::
name|isFirstItemColumnSpanned
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|==
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|headerItem
condition|)
return|return
literal|false
return|;
comment|// We can't set the header items to spanning
specifier|const
name|QModelIndex
name|index
init|=
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
return|return
name|isFirstColumnSpanned
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|parent
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.3    Sets the given \a item to only show one section for all columns if \a span is true;   otherwise the item will show one section per column.    \sa isFirstItemColumnSpanned() */
end_comment
begin_function
DECL|function|setFirstItemColumnSpanned
name|void
name|QTreeWidget
operator|::
name|setFirstItemColumnSpanned
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|bool
name|span
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|==
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|headerItem
condition|)
return|return;
comment|// We can't set header items to spanning
specifier|const
name|QModelIndex
name|index
init|=
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|setFirstColumnSpanned
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|parent
argument_list|()
argument_list|,
name|span
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.3    Returns the item above the given \a item. */
end_comment
begin_function
DECL|function|itemAbove
name|QTreeWidgetItem
modifier|*
name|QTreeWidget
operator|::
name|itemAbove
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|==
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|headerItem
condition|)
return|return
literal|0
return|;
specifier|const
name|QModelIndex
name|index
init|=
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
specifier|const
name|QModelIndex
name|above
init|=
name|indexAbove
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|item
argument_list|(
name|above
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.3    Returns the item visually below the given \a item. */
end_comment
begin_function
DECL|function|itemBelow
name|QTreeWidgetItem
modifier|*
name|QTreeWidget
operator|::
name|itemBelow
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|==
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|headerItem
condition|)
return|return
literal|0
return|;
specifier|const
name|QModelIndex
name|index
init|=
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
specifier|const
name|QModelIndex
name|below
init|=
name|indexBelow
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|item
argument_list|(
name|below
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!    \reimp  */
end_comment
begin_function
DECL|function|setSelectionModel
name|void
name|QTreeWidget
operator|::
name|setSelectionModel
parameter_list|(
name|QItemSelectionModel
modifier|*
name|selectionModel
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|QTreeView
operator|::
name|setSelectionModel
argument_list|(
name|selectionModel
argument_list|)
expr_stmt|;
name|QItemSelection
name|newSelection
init|=
name|selectionModel
operator|->
name|selection
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newSelection
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|_q_selectionChanged
argument_list|(
name|newSelection
argument_list|,
name|QItemSelection
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Ensures that the \a item is visible, scrolling the view if necessary using     the specified \a hint.      \sa currentItem(), itemAt(), topLevelItem() */
end_comment
begin_function
DECL|function|scrollToItem
name|void
name|QTreeWidget
operator|::
name|scrollToItem
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|QAbstractItemView
operator|::
name|ScrollHint
name|hint
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|QTreeView
operator|::
name|scrollTo
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|)
argument_list|,
name|hint
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Expands the \a item. This causes the tree containing the item's children     to be expanded.      \sa collapseItem(), currentItem(), itemAt(), topLevelItem(), itemExpanded() */
end_comment
begin_function
DECL|function|expandItem
name|void
name|QTreeWidget
operator|::
name|expandItem
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|QTreeModel
operator|::
name|SkipSorting
name|skipSorting
argument_list|(
name|d
operator|->
name|treeModel
argument_list|()
argument_list|)
decl_stmt|;
name|expand
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Closes the \a item. This causes the tree containing the item's children     to be collapsed.      \sa expandItem(), currentItem(), itemAt(), topLevelItem() */
end_comment
begin_function
DECL|function|collapseItem
name|void
name|QTreeWidget
operator|::
name|collapseItem
parameter_list|(
specifier|const
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|QTreeModel
operator|::
name|SkipSorting
name|skipSorting
argument_list|(
name|d
operator|->
name|treeModel
argument_list|()
argument_list|)
decl_stmt|;
name|collapse
argument_list|(
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Clears the tree widget by removing all of its items and selections.      \b{Note:} Since each item is removed from the tree widget before being     deleted, the return value of QTreeWidgetItem::treeWidget() will be invalid     when called from an item's destructor.      \sa takeTopLevelItem(), topLevelItemCount(), columnCount() */
end_comment
begin_function
DECL|function|clear
name|void
name|QTreeWidget
operator|::
name|clear
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|selectionModel
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of MIME types that can be used to describe a list of     treewidget items.      \sa mimeData() */
end_comment
begin_function
DECL|function|mimeTypes
name|QStringList
name|QTreeWidget
operator|::
name|mimeTypes
parameter_list|()
specifier|const
block|{
return|return
name|model
argument_list|()
operator|->
name|QAbstractItemModel
operator|::
name|mimeTypes
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns an object that contains a serialized description of the specified     \a items. The format used to describe the items is obtained from the     mimeTypes() function.      If the list of items is empty, 0 is returned rather than a serialized     empty list. */
end_comment
begin_if
if|#
directive|if
name|QT_VERSION
operator|>=
name|QT_VERSION_CHECK
argument_list|(
literal|6
operator|,
literal|0
operator|,
literal|0
argument_list|)
end_if
begin_decl_stmt
DECL|function|mimeData
name|QMimeData
modifier|*
name|QTreeWidget
operator|::
name|mimeData
argument_list|(
specifier|const
name|QList
argument_list|<
name|QTreeWidgetItem
operator|*
argument_list|>
operator|&
name|items
argument_list|)
decl|const
else|#
directive|else
name|QMimeData
modifier|*
name|QTreeWidget
operator|::
name|mimeData
argument_list|(
specifier|const
name|QList
argument_list|<
name|QTreeWidgetItem
operator|*
argument_list|>
name|items
argument_list|)
decl|const
endif|#
directive|endif
argument_list|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
argument_list|;     if
operator|(
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|cachedIndexes
operator|.
name|isEmpty
argument_list|()
operator|)
block|{
name|QList
argument_list|<
name|QModelIndex
argument_list|>
name|indexes
block|;
for|for
control|(
name|int
name|i
type|= 0
init|;
name|i
operator|<
name|items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTreeWidgetItem
operator|*
name|item
operator|=
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
block|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|item
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QTreeWidget::mimeData: Null-item passed"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
for|for
control|(
name|int
name|c
type|= 0
init|;
name|c
operator|<
name|item
operator|->
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
specifier|const
name|QModelIndex
name|index
operator|=
name|indexFromItem
argument_list|(
name|item
argument_list|,
name|c
argument_list|)
block|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QTreeWidget::mimeData: No index associated with item :"
operator|<<
name|item
block|;
return|return
literal|0
return|;
block|}
name|indexes
operator|<<
name|index
expr_stmt|;
block|}
expr|}
return|return
name|d
operator|->
name|model
operator|->
name|QAbstractItemModel
operator|::
name|mimeData
argument_list|(
name|indexes
argument_list|)
return|;
end_decl_stmt
begin_expr_stmt
unit|}     return
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|internalMimeData
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/*!     Handles the \a data supplied by a drag and drop operation that ended with     the given \a action in the \a index in the given \a parent item.      The default implementation returns \c true if the drop was     successfully handled by decoding the mime data and inserting it     into the model; otherwise it returns \c false.      \sa supportedDropActions() */
end_comment
begin_macro
unit|bool
DECL|function|dropMimeData
name|QTreeWidget
end_macro
begin_expr_stmt
DECL|function|dropMimeData
operator|::
name|dropMimeData
operator|(
name|QTreeWidgetItem
operator|*
name|parent
operator|,
name|int
name|index
operator|,
specifier|const
name|QMimeData
operator|*
name|data
operator|,
name|Qt
operator|::
name|DropAction
name|action
operator|)
block|{
name|QModelIndex
name|idx
block|;
if|if
condition|(
name|parent
condition|)
name|idx
operator|=
name|indexFromItem
argument_list|(
name|parent
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|model
argument_list|()
operator|->
name|QAbstractItemModel
operator|::
name|dropMimeData
argument_list|(
name|data
argument_list|,
name|action
argument_list|,
name|index
argument_list|,
literal|0
argument_list|,
name|idx
argument_list|)
return|;
end_return
begin_comment
unit|}
comment|/*!   Returns the drop actions supported by this view.    \sa Qt::DropActions */
end_comment
begin_function
unit|Qt
DECL|function|supportedDropActions
operator|::
name|DropActions
name|QTreeWidget
operator|::
name|supportedDropActions
parameter_list|()
specifier|const
block|{
return|return
name|model
argument_list|()
operator|->
name|QAbstractItemModel
operator|::
name|supportedDropActions
argument_list|()
operator||
name|Qt
operator|::
name|MoveAction
return|;
block|}
end_function
begin_comment
comment|/*!   \obsolete   Returns an empty list    \sa mimeData() */
end_comment
begin_function
DECL|function|items
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|QTreeWidget
operator|::
name|items
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|QTreeWidgetItem
operator|*
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the QModelIndex assocated with the given \a item in the given \a column.      \sa itemFromIndex(), topLevelItem() */
end_comment
begin_function
DECL|function|indexFromItem
name|QModelIndex
name|QTreeWidget
operator|::
name|indexFromItem
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|index
argument_list|(
name|item
argument_list|,
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the QTreeWidgetItem assocated with the given \a index.      \sa indexFromItem() */
end_comment
begin_function
DECL|function|itemFromIndex
name|QTreeWidgetItem
modifier|*
name|QTreeWidget
operator|::
name|itemFromIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|item
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|dropEvent
name|void
name|QTreeWidget
operator|::
name|dropEvent
parameter_list|(
name|QDropEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|source
argument_list|()
operator|==
name|this
operator|&&
operator|(
name|event
operator|->
name|dropAction
argument_list|()
operator|==
name|Qt
operator|::
name|MoveAction
operator|||
name|dragDropMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|InternalMove
operator|)
condition|)
block|{
name|QModelIndex
name|topIndex
decl_stmt|;
name|int
name|col
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|row
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|dropOn
argument_list|(
name|event
argument_list|,
operator|&
name|row
argument_list|,
operator|&
name|col
argument_list|,
operator|&
name|topIndex
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|QModelIndex
argument_list|>
name|idxs
init|=
name|selectedIndexes
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|indexes
decl_stmt|;
specifier|const
name|int
name|indexesCount
init|=
name|idxs
operator|.
name|count
argument_list|()
decl_stmt|;
name|indexes
operator|.
name|reserve
argument_list|(
name|indexesCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexesCount
condition|;
name|i
operator|++
control|)
name|indexes
operator|.
name|append
argument_list|(
name|idxs
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexes
operator|.
name|contains
argument_list|(
name|topIndex
argument_list|)
condition|)
return|return;
comment|// When removing items the drop location could shift
name|QPersistentModelIndex
name|dropRow
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|topIndex
argument_list|)
decl_stmt|;
comment|// Remove the items
name|QList
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|>
name|taken
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|parent
init|=
name|itemFromIndex
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|||
operator|!
name|parent
operator|->
name|parent
argument_list|()
condition|)
block|{
name|taken
operator|.
name|append
argument_list|(
name|takeTopLevelItem
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taken
operator|.
name|append
argument_list|(
name|parent
operator|->
name|parent
argument_list|()
operator|->
name|takeChild
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// insert them back in at their new positions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// Either at a specific point or appended
if|if
condition|(
name|row
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|topIndex
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QTreeWidgetItem
modifier|*
name|parent
init|=
name|itemFromIndex
argument_list|(
name|topIndex
argument_list|)
decl_stmt|;
name|parent
operator|->
name|insertChild
argument_list|(
name|parent
operator|->
name|childCount
argument_list|()
argument_list|,
name|taken
operator|.
name|takeFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|insertTopLevelItem
argument_list|(
name|topLevelItemCount
argument_list|()
argument_list|,
name|taken
operator|.
name|takeFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|r
init|=
name|dropRow
operator|.
name|row
argument_list|()
operator|>=
literal|0
condition|?
name|dropRow
operator|.
name|row
argument_list|()
else|:
name|row
decl_stmt|;
if|if
condition|(
name|topIndex
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QTreeWidgetItem
modifier|*
name|parent
init|=
name|itemFromIndex
argument_list|(
name|topIndex
argument_list|)
decl_stmt|;
name|parent
operator|->
name|insertChild
argument_list|(
name|qMin
argument_list|(
name|r
argument_list|,
name|parent
operator|->
name|childCount
argument_list|()
argument_list|)
argument_list|,
name|taken
operator|.
name|takeFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|insertTopLevelItem
argument_list|(
name|qMin
argument_list|(
name|r
argument_list|,
name|topLevelItemCount
argument_list|()
argument_list|)
argument_list|,
name|taken
operator|.
name|takeFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
comment|// Don't want QAbstractItemView to delete it because it was "moved" we already did it
name|event
operator|->
name|setDropAction
argument_list|(
name|Qt
operator|::
name|CopyAction
argument_list|)
expr_stmt|;
block|}
block|}
name|QTreeView
operator|::
name|dropEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|setModel
name|void
name|QTreeWidget
operator|::
name|setModel
parameter_list|(
name|QAbstractItemModel
modifier|*
comment|/*model*/
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
literal|"QTreeWidget::setModel() - Changing the model of the QTreeWidget is not allowed."
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QTreeWidget
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Polish
condition|)
name|d
operator|->
name|treeModel
argument_list|()
operator|->
name|executePendingSort
argument_list|()
expr_stmt|;
return|return
name|QTreeView
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qtreewidget.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TREEWIDGET
end_comment
end_unit
