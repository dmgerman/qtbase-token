begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qheaderview.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
end_ifndef
begin_include
include|#
directive|include
file|<qbitarray.h>
end_include
begin_include
include|#
directive|include
file|<qbrush.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qscrollbar.h>
end_include
begin_include
include|#
directive|include
file|<qtooltip.h>
end_include
begin_include
include|#
directive|include
file|<qwhatsthis.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<qabstractitemdelegate.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<private/qheaderview_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qabstractitemmodel_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_include
include|#
directive|include
file|<qdatastream.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QHeaderViewPrivate
operator|::
name|SectionItem
modifier|&
name|section
parameter_list|)
block|{
name|section
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|,
name|QHeaderViewPrivate
operator|::
name|SectionItem
modifier|&
name|section
parameter_list|)
block|{
name|section
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|in
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_decl_stmt
DECL|variable|maxSizeSection
specifier|static
specifier|const
name|int
name|maxSizeSection
init|=
literal|1048575
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|maxSizeSection
comment|// since section size is in a bitfield (uint 20). See qheaderview_p.h
end_comment
begin_comment
comment|// if this is changed then the docs in maximumSectionSize should be changed.
end_comment
begin_comment
comment|/*!     \class QHeaderView      \brief The QHeaderView class provides a header row or header column for     item views.      \ingroup model-view     \inmodule QtWidgets      A QHeaderView displays the headers used in item views such as the     QTableView and QTreeView classes. It takes the place of Qt3's \c QHeader     class previously used for the same purpose, but uses the Qt's model/view     architecture for consistency with the item view classes.      The QHeaderView class is one of the \l{Model/View Classes} and is part of     Qt's \l{Model/View Programming}{model/view framework}.      The header gets the data for each section from the model using the     QAbstractItemModel::headerData() function. You can set the data by using     QAbstractItemModel::setHeaderData().      Each header has an orientation() and a number of sections, given by the     count() function. A section refers to a part of the header - either a row     or a column, depending on the orientation.      Sections can be moved and resized using moveSection() and resizeSection();     they can also be hidden and shown with hideSection() and showSection().      Each section of a header is described by a section ID, specified by its     section(), and can be located at a particular visualIndex() in the header.     A section can have a sort indicator set with setSortIndicator(); this     indicates whether the items in the associated item view will be sorted in     the order given by the section.      For a horizontal header the section is equivalent to a column in the model,     and for a vertical header the section is equivalent to a row in the model.      \section1 Moving Header Sections      A header can be fixed in place, or made movable with setSectionsMovable(). It can     be made clickable with setSectionsClickable(), and has resizing behavior in     accordance with setSectionResizeMode()      \note Double-clicking on a header to resize a section only applies for     visible rows.      A header will emit sectionMoved() if the user moves a section,     sectionResized() if the user resizes a section, and sectionClicked() as     well as sectionHandleDoubleClicked() in response to mouse clicks. A header     will also emit sectionCountChanged().      You can identify a section using the logicalIndex() and logicalIndexAt()     functions, or by its index position, using the visualIndex() and     visualIndexAt() functions. The visual index will change if a section is     moved, but the logical index will not change.      \section1 Appearance      QTableWidget and QTableView create default headers. If you want     the headers to be visible, you can use \l{QFrame::}{setVisible()}.      Not all \l{Qt::}{ItemDataRole}s will have an effect on a     QHeaderView. If you need to draw other roles, you can subclass     QHeaderView and reimplement \l{QHeaderView::}{paintEvent()}.     QHeaderView respects the following item data roles:     \l{Qt::}{TextAlignmentRole}, \l{Qt::}{DisplayRole},     \l{Qt::}{FontRole}, \l{Qt::}{DecorationRole},     \l{Qt::}{ForegroundRole}, and \l{Qt::}{BackgroundRole}.      \note Each header renders the data for each section itself, and does not     rely on a delegate. As a result, calling a header's setItemDelegate()     function will have no effect.      \sa {Model/View Programming}, QListView, QTableView, QTreeView */
end_comment
begin_comment
comment|/*!     \enum QHeaderView::ResizeMode      The resize mode specifies the behavior of the header sections. It can be     set on the entire header view or on individual sections using     setSectionResizeMode().      \value Interactive The user can resize the section. The section can also be            resized programmatically using resizeSection().  The section size            defaults to \l defaultSectionSize. (See also            \l cascadingSectionResizes.)      \value Fixed The user cannot resize the section. The section can only be            resized programmatically using resizeSection(). The section size            defaults to \l defaultSectionSize.      \value Stretch QHeaderView will automatically resize the section to fill            the available space. The size cannot be changed by the user or            programmatically.      \value ResizeToContents QHeaderView will automatically resize the section            to its optimal size based on the contents of the entire column or            row. The size cannot be changed by the user or programmatically.            (This value was introduced in 4.2)      The following values are obsolete:     \value Custom Use Fixed instead.      \sa setResizeMode(), setSectionResizeMode(), stretchLastSection, minimumSectionSize */
end_comment
begin_comment
comment|/*!     \fn void QHeaderView::sectionMoved(int logicalIndex, int oldVisualIndex,     int newVisualIndex)      This signal is emitted when a section is moved. The section's logical index     is specified by \a logicalIndex, the old index by \a oldVisualIndex, and     the new index position by \a newVisualIndex.      \sa moveSection() */
end_comment
begin_comment
comment|/*!     \fn void QHeaderView::sectionResized(int logicalIndex, int oldSize,     int newSize)      This signal is emitted when a section is resized. The section's logical     number is specified by \a logicalIndex, the old size by \a oldSize, and the     new size by \a newSize.      \sa resizeSection() */
end_comment
begin_comment
comment|/*!     \fn void QHeaderView::sectionPressed(int logicalIndex)      This signal is emitted when a section is pressed. The section's logical     index is specified by \a logicalIndex.      \sa setSectionsClickable() */
end_comment
begin_comment
comment|/*!     \fn void QHeaderView::sectionClicked(int logicalIndex)      This signal is emitted when a section is clicked. The section's logical     index is specified by \a logicalIndex.      Note that the sectionPressed signal will also be emitted.      \sa setSectionsClickable(), sectionPressed() */
end_comment
begin_comment
comment|/*!     \fn void QHeaderView::sectionEntered(int logicalIndex)     \since 4.3      This signal is emitted when the cursor moves over the section and the left     mouse button is pressed. The section's logical index is specified by     \a logicalIndex.      \sa setSectionsClickable(), sectionPressed() */
end_comment
begin_comment
comment|/*!     \fn void QHeaderView::sectionDoubleClicked(int logicalIndex)      This signal is emitted when a section is double-clicked. The section's     logical index is specified by \a logicalIndex.      \sa setSectionsClickable() */
end_comment
begin_comment
comment|/*!     \fn void QHeaderView::sectionCountChanged(int oldCount, int newCount)      This signal is emitted when the number of sections changes, i.e., when     sections are added or deleted. The original count is specified by     \a oldCount, and the new count by \a newCount.      \sa count(), length(), headerDataChanged() */
end_comment
begin_comment
comment|/*!     \fn void QHeaderView::sectionHandleDoubleClicked(int logicalIndex)      This signal is emitted when a section is double-clicked. The section's     logical index is specified by \a logicalIndex.      \sa setSectionsClickable() */
end_comment
begin_comment
comment|/*!     \fn void QHeaderView::sortIndicatorChanged(int logicalIndex,     Qt::SortOrder order)     \since 4.3      This signal is emitted when the section containing the sort indicator or     the order indicated is changed. The section's logical index is specified     by \a logicalIndex and the sort order is specified by \a order.      \sa setSortIndicator() */
end_comment
begin_comment
comment|/*!     \fn void QHeaderView::geometriesChanged()     \since 4.2      This signal is emitted when the header's geometries have changed. */
end_comment
begin_comment
comment|/*!     \property QHeaderView::highlightSections     \brief whether the sections containing selected items are highlighted      By default, this property is \c false. */
end_comment
begin_comment
comment|/*!     Creates a new generic header with the given \a orientation and \a parent. */
end_comment
begin_constructor
DECL|function|QHeaderView
name|QHeaderView
operator|::
name|QHeaderView
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemView
argument_list|(
operator|*
operator|new
name|QHeaderViewPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|setDefaultValues
argument_list|(
name|orientation
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_constructor
DECL|function|QHeaderView
name|QHeaderView
operator|::
name|QHeaderView
parameter_list|(
name|QHeaderViewPrivate
modifier|&
name|dd
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemView
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|setDefaultValues
argument_list|(
name|orientation
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Destroys the header. */
end_comment
begin_destructor
DECL|function|~QHeaderView
name|QHeaderView
operator|::
name|~
name|QHeaderView
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|initialize
name|void
name|QHeaderView
operator|::
name|initialize
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
name|setFrameStyle
argument_list|(
name|NoFrame
argument_list|)
expr_stmt|;
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|d
operator|->
name|textElideMode
operator|=
name|Qt
operator|::
name|ElideNone
expr_stmt|;
operator|delete
name|d
operator|->
name|itemDelegate
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|setModel
name|void
name|QHeaderView
operator|::
name|setModel
parameter_list|(
name|QAbstractItemModel
modifier|*
name|model
parameter_list|)
block|{
if|if
condition|(
name|model
operator|==
name|this
operator|->
name|model
argument_list|()
condition|)
return|return;
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|persistentHiddenSections
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
operator|&&
name|d
operator|->
name|model
operator|!=
name|QAbstractItemModelPrivate
operator|::
name|staticEmptyModel
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|QObject
operator|::
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sectionsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sectionsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sectionsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QObject
operator|::
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sectionsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sectionsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sectionsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QObject
operator|::
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|model
operator|&&
name|model
operator|!=
name|QAbstractItemModelPrivate
operator|::
name|staticEmptyModel
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sectionsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sectionsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sectionsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sectionsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sectionsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sectionsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|state
operator|=
name|QHeaderViewPrivate
operator|::
name|NoClear
expr_stmt|;
name|QAbstractItemView
operator|::
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|d
operator|->
name|state
operator|=
name|QHeaderViewPrivate
operator|::
name|NoState
expr_stmt|;
comment|// Users want to set sizes and modes before the widget is shown.
comment|// Thus, we have to initialize when the model is set,
comment|// and not lazily like we do in the other views.
name|initializeSections
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the orientation of the header.      \sa Qt::Orientation */
end_comment
begin_function
DECL|function|orientation
name|Qt
operator|::
name|Orientation
name|QHeaderView
operator|::
name|orientation
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|orientation
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the offset of the header: this is the header's left-most (or     top-most for vertical headers) visible pixel.      \sa setOffset() */
end_comment
begin_function
DECL|function|offset
name|int
name|QHeaderView
operator|::
name|offset
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|offset
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QHeaderView::setOffset(int offset)      Sets the header's offset to \a offset.      \sa offset(), length() */
end_comment
begin_function
DECL|function|setOffset
name|void
name|QHeaderView
operator|::
name|setOffset
parameter_list|(
name|int
name|newOffset
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|offset
operator|==
operator|(
name|int
operator|)
name|newOffset
condition|)
return|return;
name|int
name|ndelta
init|=
name|d
operator|->
name|offset
operator|-
name|newOffset
decl_stmt|;
name|d
operator|->
name|offset
operator|=
name|newOffset
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|d
operator|->
name|viewport
operator|->
name|scroll
argument_list|(
name|isRightToLeft
argument_list|()
condition|?
operator|-
name|ndelta
else|:
name|ndelta
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|viewport
operator|->
name|scroll
argument_list|(
literal|0
argument_list|,
name|ndelta
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|QHeaderViewPrivate
operator|::
name|ResizeSection
operator|&&
operator|!
name|d
operator|->
name|preventCursorChangeInSetOffset
condition|)
block|{
name|QPoint
name|cursorPos
init|=
name|QCursor
operator|::
name|pos
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|QCursor
operator|::
name|setPos
argument_list|(
name|cursorPos
operator|.
name|x
argument_list|()
operator|+
name|ndelta
argument_list|,
name|cursorPos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QCursor
operator|::
name|setPos
argument_list|(
name|cursorPos
operator|.
name|x
argument_list|()
argument_list|,
name|cursorPos
operator|.
name|y
argument_list|()
operator|+
name|ndelta
argument_list|)
expr_stmt|;
name|d
operator|->
name|firstPos
operator|+=
name|ndelta
expr_stmt|;
name|d
operator|->
name|lastPos
operator|+=
name|ndelta
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.2     Sets the offset to the start of the section at the given \a visualSectionNumber.     \a visualSectionNumber is the actual visible section when hiddenSections are     not considered. That is not always the same as visualIndex().      \sa setOffset(), sectionPosition() */
end_comment
begin_function
DECL|function|setOffsetToSectionPosition
name|void
name|QHeaderView
operator|::
name|setOffsetToSectionPosition
parameter_list|(
name|int
name|visualSectionNumber
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|visualSectionNumber
operator|>
operator|-
literal|1
operator|&&
name|visualSectionNumber
operator|<
name|d
operator|->
name|sectionCount
argument_list|()
condition|)
block|{
name|int
name|position
init|=
name|d
operator|->
name|headerSectionPosition
argument_list|(
name|d
operator|->
name|adjustedVisualIndex
argument_list|(
name|visualSectionNumber
argument_list|)
argument_list|)
decl_stmt|;
name|setOffset
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.2     Sets the offset to make the last section visible.      \sa setOffset(), sectionPosition(), setOffsetToSectionPosition() */
end_comment
begin_function
DECL|function|setOffsetToLastSection
name|void
name|QHeaderView
operator|::
name|setOffsetToLastSection
parameter_list|()
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
name|int
name|size
init|=
operator|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
else|:
name|viewport
argument_list|()
operator|->
name|height
argument_list|()
operator|)
decl_stmt|;
name|int
name|position
init|=
name|length
argument_list|()
operator|-
name|size
decl_stmt|;
name|setOffset
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the length along the orientation of the header.      \sa sizeHint(), setSectionResizeMode(), offset() */
end_comment
begin_function
DECL|function|length
name|int
name|QHeaderView
operator|::
name|length
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|d
operator|->
name|executePostedResize
argument_list|()
expr_stmt|;
comment|//Q_ASSERT(d->headerLength() == d->length);
return|return
name|d
operator|->
name|length
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a suitable size hint for this header.      \sa sectionSizeHint() */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QHeaderView
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cachedSizeHint
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|cachedSizeHint
return|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//reinitialize the cached size hint
specifier|const
name|int
name|sectionCount
init|=
name|count
argument_list|()
decl_stmt|;
comment|// get size hint for the first n sections
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|checked
init|=
literal|0
init|;
name|checked
operator|<
literal|100
operator|&&
name|i
operator|<
name|sectionCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|isSectionHidden
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
name|checked
operator|++
expr_stmt|;
name|QSize
name|hint
init|=
name|sectionSizeFromContents
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|d
operator|->
name|cachedSizeHint
operator|.
name|expandedTo
argument_list|(
name|hint
argument_list|)
expr_stmt|;
block|}
comment|// get size hint for the last n sections
name|i
operator|=
name|qMax
argument_list|(
name|i
argument_list|,
name|sectionCount
operator|-
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|sectionCount
operator|-
literal|1
init|,
name|checked
init|=
literal|0
init|;
name|j
operator|>=
name|i
operator|&&
name|checked
operator|<
literal|100
condition|;
operator|--
name|j
control|)
block|{
if|if
condition|(
name|isSectionHidden
argument_list|(
name|j
argument_list|)
condition|)
continue|continue;
name|checked
operator|++
expr_stmt|;
name|QSize
name|hint
init|=
name|sectionSizeFromContents
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|d
operator|->
name|cachedSizeHint
operator|.
name|expandedTo
argument_list|(
name|hint
argument_list|)
expr_stmt|;
block|}
return|return
name|d
operator|->
name|cachedSizeHint
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setVisible
name|void
name|QHeaderView
operator|::
name|setVisible
parameter_list|(
name|bool
name|v
parameter_list|)
block|{
name|bool
name|actualChange
init|=
operator|(
name|v
operator|!=
name|isVisible
argument_list|()
operator|)
decl_stmt|;
name|QAbstractItemView
operator|::
name|setVisible
argument_list|(
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|actualChange
condition|)
block|{
name|QAbstractScrollArea
modifier|*
name|parent
init|=
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
condition|)
name|parent
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns a suitable size hint for the section specified by \a logicalIndex.      \sa sizeHint(), defaultSectionSize(), minimumSectionSize(), maximumSectionSize()     Qt::SizeHintRole */
end_comment
begin_function
DECL|function|sectionSizeHint
name|int
name|QHeaderView
operator|::
name|sectionSizeHint
parameter_list|(
name|int
name|logicalIndex
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSectionHidden
argument_list|(
name|logicalIndex
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|logicalIndex
operator|<
literal|0
operator|||
name|logicalIndex
operator|>=
name|count
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|QSize
name|size
decl_stmt|;
name|QVariant
name|value
init|=
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logicalIndex
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|SizeHintRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
condition|)
name|size
operator|=
name|qvariant_cast
argument_list|<
name|QSize
argument_list|>
argument_list|(
name|value
argument_list|)
expr_stmt|;
else|else
name|size
operator|=
name|sectionSizeFromContents
argument_list|(
name|logicalIndex
argument_list|)
expr_stmt|;
name|int
name|hint
init|=
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|size
operator|.
name|width
argument_list|()
else|:
name|size
operator|.
name|height
argument_list|()
decl_stmt|;
return|return
name|qBound
argument_list|(
name|minimumSectionSize
argument_list|()
argument_list|,
name|hint
argument_list|,
name|maximumSectionSize
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the visual index of the section that covers the given \a position     in the viewport.      \sa logicalIndexAt() */
end_comment
begin_function
DECL|function|visualIndexAt
name|int
name|QHeaderView
operator|::
name|visualIndexAt
parameter_list|(
name|int
name|position
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
name|int
name|vposition
init|=
name|position
decl_stmt|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|d
operator|->
name|executePostedResize
argument_list|()
expr_stmt|;
specifier|const
name|int
name|count
init|=
name|d
operator|->
name|sectionCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|1
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|d
operator|->
name|reverse
argument_list|()
condition|)
name|vposition
operator|=
name|d
operator|->
name|viewport
operator|->
name|width
argument_list|()
operator|-
name|vposition
expr_stmt|;
name|vposition
operator|+=
name|d
operator|->
name|offset
expr_stmt|;
if|if
condition|(
name|vposition
operator|>
name|d
operator|->
name|length
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|visual
init|=
name|d
operator|->
name|headerVisualIndexAt
argument_list|(
name|vposition
argument_list|)
decl_stmt|;
if|if
condition|(
name|visual
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
while|while
condition|(
name|d
operator|->
name|isVisualIndexHidden
argument_list|(
name|visual
argument_list|)
condition|)
block|{
operator|++
name|visual
expr_stmt|;
if|if
condition|(
name|visual
operator|>=
name|count
condition|)
return|return
operator|-
literal|1
return|;
block|}
return|return
name|visual
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the section that covers the given \a position in the viewport.      \sa visualIndexAt(), isSectionHidden() */
end_comment
begin_function
DECL|function|logicalIndexAt
name|int
name|QHeaderView
operator|::
name|logicalIndexAt
parameter_list|(
name|int
name|position
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|visual
init|=
name|visualIndexAt
argument_list|(
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|visual
operator|>
operator|-
literal|1
condition|)
return|return
name|logicalIndex
argument_list|(
name|visual
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the width (or height for vertical headers) of the given     \a logicalIndex.      \sa length(), setSectionResizeMode(), defaultSectionSize() */
end_comment
begin_function
DECL|function|sectionSize
name|int
name|QHeaderView
operator|::
name|sectionSize
parameter_list|(
name|int
name|logicalIndex
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSectionHidden
argument_list|(
name|logicalIndex
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|logicalIndex
operator|<
literal|0
operator|||
name|logicalIndex
operator|>=
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
name|int
name|visual
init|=
name|visualIndex
argument_list|(
name|logicalIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|visual
operator|==
operator|-
literal|1
condition|)
return|return
literal|0
return|;
name|d
operator|->
name|executePostedResize
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|headerSectionSize
argument_list|(
name|visual
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!      Returns the section position of the given \a logicalIndex, or -1     if the section is hidden. The position is measured in pixels from     the first visible item's top-left corner to the top-left corner of     the item with \a logicalIndex. The measurement is along the x-axis     for horizontal headers and along the y-axis for vertical headers.      \sa sectionViewportPosition() */
end_comment
begin_function
DECL|function|sectionPosition
name|int
name|QHeaderView
operator|::
name|sectionPosition
parameter_list|(
name|int
name|logicalIndex
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
name|int
name|visual
init|=
name|visualIndex
argument_list|(
name|logicalIndex
argument_list|)
decl_stmt|;
comment|// in some cases users may change the selections
comment|// before we have a chance to do the layout
if|if
condition|(
name|visual
operator|==
operator|-
literal|1
condition|)
return|return
operator|-
literal|1
return|;
name|d
operator|->
name|executePostedResize
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|headerSectionPosition
argument_list|(
name|visual
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the section viewport position of the given \a logicalIndex.      If the section is hidden, the return value is undefined.      \sa sectionPosition(), isSectionHidden() */
end_comment
begin_function
DECL|function|sectionViewportPosition
name|int
name|QHeaderView
operator|::
name|sectionViewportPosition
parameter_list|(
name|int
name|logicalIndex
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|logicalIndex
operator|>=
name|count
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|position
init|=
name|sectionPosition
argument_list|(
name|logicalIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|position
operator|<
literal|0
condition|)
return|return
name|position
return|;
comment|// the section was hidden
name|int
name|offsetPosition
init|=
name|position
operator|-
name|d
operator|->
name|offset
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|reverse
argument_list|()
condition|)
return|return
name|d
operator|->
name|viewport
operator|->
name|width
argument_list|()
operator|-
operator|(
name|offsetPosition
operator|+
name|sectionSize
argument_list|(
name|logicalIndex
argument_list|)
operator|)
return|;
return|return
name|offsetPosition
return|;
block|}
end_function
begin_comment
comment|/*!     \fn int QHeaderView::logicalIndexAt(int x, int y) const      Returns the logical index of the section at the given coordinate. If the     header is horizontal \a x will be used, otherwise \a y will be used to     find the logical index. */
end_comment
begin_comment
comment|/*!     \fn int QHeaderView::logicalIndexAt(const QPoint&pos) const      Returns the logical index of the section at the position given in \a pos.     If the header is horizontal the x-coordinate will be used, otherwise the     y-coordinate will be used to find the logical index.      \sa sectionPosition() */
end_comment
begin_comment
comment|/*!     Moves the section at visual index \a from to occupy visual index \a to.      \sa sectionsMoved() */
end_comment
begin_function
DECL|function|moveSection
name|void
name|QHeaderView
operator|::
name|moveSection
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
if|if
condition|(
name|from
operator|<
literal|0
operator|||
name|from
operator|>=
name|d
operator|->
name|sectionCount
argument_list|()
operator|||
name|to
operator|<
literal|0
operator|||
name|to
operator|>=
name|d
operator|->
name|sectionCount
argument_list|()
condition|)
return|return;
if|if
condition|(
name|from
operator|==
name|to
condition|)
block|{
name|int
name|logical
init|=
name|logicalIndex
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|logical
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|updateSection
argument_list|(
name|logical
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|stretchLastSection
argument_list|()
operator|&&
name|to
operator|==
name|d
operator|->
name|lastVisibleVisualIndex
argument_list|()
condition|)
name|d
operator|->
name|lastSectionSize
operator|=
name|sectionSize
argument_list|(
name|from
argument_list|)
expr_stmt|;
comment|//int oldHeaderLength = length(); // ### for debugging; remove later
name|d
operator|->
name|initializeIndexMapping
argument_list|()
expr_stmt|;
name|QBitArray
name|sectionHidden
init|=
name|d
operator|->
name|sectionsHiddenToBitVector
argument_list|()
decl_stmt|;
name|int
modifier|*
name|visualIndices
init|=
name|d
operator|->
name|visualIndices
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
modifier|*
name|logicalIndices
init|=
name|d
operator|->
name|logicalIndices
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
name|logical
init|=
name|logicalIndices
index|[
name|from
index|]
decl_stmt|;
name|int
name|visual
init|=
name|from
decl_stmt|;
name|int
name|affected_count
init|=
name|qAbs
argument_list|(
name|to
operator|-
name|from
argument_list|)
operator|+
literal|1
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|sizes
argument_list|(
name|affected_count
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|ResizeMode
argument_list|>
name|modes
argument_list|(
name|affected_count
argument_list|)
decl_stmt|;
comment|// move sections and indices
if|if
condition|(
name|to
operator|>
name|from
condition|)
block|{
name|sizes
index|[
name|to
operator|-
name|from
index|]
operator|=
name|d
operator|->
name|headerSectionSize
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|modes
index|[
name|to
operator|-
name|from
index|]
operator|=
name|d
operator|->
name|headerSectionResizeMode
argument_list|(
name|from
argument_list|)
expr_stmt|;
while|while
condition|(
name|visual
operator|<
name|to
condition|)
block|{
name|sizes
index|[
name|visual
operator|-
name|from
index|]
operator|=
name|d
operator|->
name|headerSectionSize
argument_list|(
name|visual
operator|+
literal|1
argument_list|)
expr_stmt|;
name|modes
index|[
name|visual
operator|-
name|from
index|]
operator|=
name|d
operator|->
name|headerSectionResizeMode
argument_list|(
name|visual
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sectionHidden
operator|.
name|isEmpty
argument_list|()
condition|)
name|sectionHidden
operator|.
name|setBit
argument_list|(
name|visual
argument_list|,
name|sectionHidden
operator|.
name|testBit
argument_list|(
name|visual
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|visualIndices
index|[
name|logicalIndices
index|[
name|visual
operator|+
literal|1
index|]
index|]
operator|=
name|visual
expr_stmt|;
name|logicalIndices
index|[
name|visual
index|]
operator|=
name|logicalIndices
index|[
name|visual
operator|+
literal|1
index|]
expr_stmt|;
operator|++
name|visual
expr_stmt|;
block|}
block|}
else|else
block|{
name|sizes
index|[
literal|0
index|]
operator|=
name|d
operator|->
name|headerSectionSize
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|modes
index|[
literal|0
index|]
operator|=
name|d
operator|->
name|headerSectionResizeMode
argument_list|(
name|from
argument_list|)
expr_stmt|;
while|while
condition|(
name|visual
operator|>
name|to
condition|)
block|{
name|sizes
index|[
name|visual
operator|-
name|to
index|]
operator|=
name|d
operator|->
name|headerSectionSize
argument_list|(
name|visual
operator|-
literal|1
argument_list|)
expr_stmt|;
name|modes
index|[
name|visual
operator|-
name|to
index|]
operator|=
name|d
operator|->
name|headerSectionResizeMode
argument_list|(
name|visual
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sectionHidden
operator|.
name|isEmpty
argument_list|()
condition|)
name|sectionHidden
operator|.
name|setBit
argument_list|(
name|visual
argument_list|,
name|sectionHidden
operator|.
name|testBit
argument_list|(
name|visual
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|visualIndices
index|[
name|logicalIndices
index|[
name|visual
operator|-
literal|1
index|]
index|]
operator|=
name|visual
expr_stmt|;
name|logicalIndices
index|[
name|visual
index|]
operator|=
name|logicalIndices
index|[
name|visual
operator|-
literal|1
index|]
expr_stmt|;
operator|--
name|visual
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|sectionHidden
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sectionHidden
operator|.
name|setBit
argument_list|(
name|to
argument_list|,
name|d
operator|->
name|isVisualIndexHidden
argument_list|(
name|from
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|setHiddenSectionsFromBitVector
argument_list|(
name|sectionHidden
argument_list|)
expr_stmt|;
block|}
name|visualIndices
index|[
name|logical
index|]
operator|=
name|to
expr_stmt|;
name|logicalIndices
index|[
name|to
index|]
operator|=
name|logical
expr_stmt|;
comment|//Q_ASSERT(oldHeaderLength == length());
comment|// move sizes
comment|// ### check for items of section sizes here
if|if
condition|(
name|to
operator|>
name|from
condition|)
block|{
for|for
control|(
name|visual
operator|=
name|from
init|;
name|visual
operator|<=
name|to
condition|;
operator|++
name|visual
control|)
block|{
name|int
name|size
init|=
name|sizes
index|[
name|visual
operator|-
name|from
index|]
decl_stmt|;
name|ResizeMode
name|mode
init|=
name|modes
index|[
name|visual
operator|-
name|from
index|]
decl_stmt|;
name|d
operator|->
name|createSectionItems
argument_list|(
name|visual
argument_list|,
name|visual
argument_list|,
name|size
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|visual
operator|=
name|to
init|;
name|visual
operator|<=
name|from
condition|;
operator|++
name|visual
control|)
block|{
name|int
name|size
init|=
name|sizes
index|[
name|visual
operator|-
name|to
index|]
decl_stmt|;
name|ResizeMode
name|mode
init|=
name|modes
index|[
name|visual
operator|-
name|to
index|]
decl_stmt|;
name|d
operator|->
name|createSectionItems
argument_list|(
name|visual
argument_list|,
name|visual
argument_list|,
name|size
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Q_ASSERT(d->headerLength() == length());
comment|//Q_ASSERT(oldHeaderLength == length());
comment|//Q_ASSERT(d->logicalIndices.count() == d->sectionCount);
if|if
condition|(
name|d
operator|->
name|hasAutoResizeSections
argument_list|()
condition|)
name|d
operator|->
name|doDelayedResizeSections
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
emit|emit
name|sectionMoved
argument_list|(
name|logical
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     Swaps the section at visual index \a first with the section at visual     index \a second.      \sa moveSection() */
end_comment
begin_function
DECL|function|swapSections
name|void
name|QHeaderView
operator|::
name|swapSections
parameter_list|(
name|int
name|first
parameter_list|,
name|int
name|second
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
operator|==
name|second
condition|)
return|return;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
if|if
condition|(
name|first
operator|<
literal|0
operator|||
name|first
operator|>=
name|d
operator|->
name|sectionCount
argument_list|()
operator|||
name|second
operator|<
literal|0
operator|||
name|second
operator|>=
name|d
operator|->
name|sectionCount
argument_list|()
condition|)
return|return;
name|int
name|firstSize
init|=
name|d
operator|->
name|headerSectionSize
argument_list|(
name|first
argument_list|)
decl_stmt|;
name|ResizeMode
name|firstMode
init|=
name|d
operator|->
name|headerSectionResizeMode
argument_list|(
name|first
argument_list|)
decl_stmt|;
name|int
name|firstLogical
init|=
name|d
operator|->
name|logicalIndex
argument_list|(
name|first
argument_list|)
decl_stmt|;
name|int
name|secondSize
init|=
name|d
operator|->
name|headerSectionSize
argument_list|(
name|second
argument_list|)
decl_stmt|;
name|ResizeMode
name|secondMode
init|=
name|d
operator|->
name|headerSectionResizeMode
argument_list|(
name|second
argument_list|)
decl_stmt|;
name|int
name|secondLogical
init|=
name|d
operator|->
name|logicalIndex
argument_list|(
name|second
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|QHeaderViewPrivate
operator|::
name|ResizeSection
condition|)
name|d
operator|->
name|preventCursorChangeInSetOffset
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|createSectionItems
argument_list|(
name|second
argument_list|,
name|second
argument_list|,
name|firstSize
argument_list|,
name|firstMode
argument_list|)
expr_stmt|;
name|d
operator|->
name|createSectionItems
argument_list|(
name|first
argument_list|,
name|first
argument_list|,
name|secondSize
argument_list|,
name|secondMode
argument_list|)
expr_stmt|;
name|d
operator|->
name|initializeIndexMapping
argument_list|()
expr_stmt|;
name|d
operator|->
name|visualIndices
index|[
name|firstLogical
index|]
operator|=
name|second
expr_stmt|;
name|d
operator|->
name|logicalIndices
index|[
name|second
index|]
operator|=
name|firstLogical
expr_stmt|;
name|d
operator|->
name|visualIndices
index|[
name|secondLogical
index|]
operator|=
name|first
expr_stmt|;
name|d
operator|->
name|logicalIndices
index|[
name|first
index|]
operator|=
name|secondLogical
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|hiddenSectionSize
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bool
name|firstHidden
init|=
name|d
operator|->
name|isVisualIndexHidden
argument_list|(
name|first
argument_list|)
decl_stmt|;
name|bool
name|secondHidden
init|=
name|d
operator|->
name|isVisualIndexHidden
argument_list|(
name|second
argument_list|)
decl_stmt|;
name|d
operator|->
name|setVisualIndexHidden
argument_list|(
name|first
argument_list|,
name|secondHidden
argument_list|)
expr_stmt|;
name|d
operator|->
name|setVisualIndexHidden
argument_list|(
name|second
argument_list|,
name|firstHidden
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
emit|emit
name|sectionMoved
argument_list|(
name|firstLogical
argument_list|,
name|first
argument_list|,
name|second
argument_list|)
emit|;
emit|emit
name|sectionMoved
argument_list|(
name|secondLogical
argument_list|,
name|second
argument_list|,
name|first
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \fn void QHeaderView::resizeSection(int logicalIndex, int size)      Resizes the section specified by \a logicalIndex to \a size measured in     pixels. The size parameter must be a value larger or equal to zero. A     size equal to zero is however not recommended. In that situation hideSection     should be used instead.      \sa sectionResized(), resizeMode(), sectionSize(), hideSection() */
end_comment
begin_function
DECL|function|resizeSection
name|void
name|QHeaderView
operator|::
name|resizeSection
parameter_list|(
name|int
name|logical
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|logical
operator|<
literal|0
operator|||
name|logical
operator|>=
name|count
argument_list|()
operator|||
name|size
argument_list|<
literal|0
operator|||
name|size
argument_list|>
name|maxSizeSection
condition|)
return|return;
if|if
condition|(
name|isSectionHidden
argument_list|(
name|logical
argument_list|)
condition|)
block|{
name|d
operator|->
name|hiddenSectionSize
operator|.
name|insert
argument_list|(
name|logical
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|visual
init|=
name|visualIndex
argument_list|(
name|logical
argument_list|)
decl_stmt|;
if|if
condition|(
name|visual
operator|==
operator|-
literal|1
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|QHeaderViewPrivate
operator|::
name|ResizeSection
operator|&&
operator|!
name|d
operator|->
name|cascadingResizing
operator|&&
name|logical
operator|!=
name|d
operator|->
name|section
condition|)
name|d
operator|->
name|preventCursorChangeInSetOffset
operator|=
literal|true
expr_stmt|;
name|int
name|oldSize
init|=
name|d
operator|->
name|headerSectionSize
argument_list|(
name|visual
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldSize
operator|==
name|size
condition|)
return|return;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|d
operator|->
name|invalidateCachedSizeHint
argument_list|()
expr_stmt|;
if|if
condition|(
name|stretchLastSection
argument_list|()
operator|&&
name|visual
operator|==
name|d
operator|->
name|lastVisibleVisualIndex
argument_list|()
condition|)
name|d
operator|->
name|lastSectionSize
operator|=
name|size
expr_stmt|;
name|d
operator|->
name|createSectionItems
argument_list|(
name|visual
argument_list|,
name|visual
argument_list|,
name|size
argument_list|,
name|d
operator|->
name|headerSectionResizeMode
argument_list|(
name|visual
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|updatesEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|hasAutoResizeSections
argument_list|()
condition|)
name|d
operator|->
name|doDelayedResizeSections
argument_list|()
expr_stmt|;
emit|emit
name|sectionResized
argument_list|(
name|logical
argument_list|,
name|oldSize
argument_list|,
name|size
argument_list|)
emit|;
return|return;
block|}
name|int
name|w
init|=
name|d
operator|->
name|viewport
operator|->
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|d
operator|->
name|viewport
operator|->
name|height
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|sectionViewportPosition
argument_list|(
name|logical
argument_list|)
decl_stmt|;
name|QRect
name|r
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
name|r
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pos
operator|+
name|size
argument_list|,
name|h
argument_list|)
expr_stmt|;
else|else
name|r
operator|.
name|setRect
argument_list|(
name|pos
argument_list|,
literal|0
argument_list|,
name|w
operator|-
name|pos
argument_list|,
name|h
argument_list|)
expr_stmt|;
else|else
name|r
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|,
name|w
argument_list|,
name|h
operator|-
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasAutoResizeSections
argument_list|()
condition|)
block|{
name|d
operator|->
name|doDelayedResizeSections
argument_list|()
expr_stmt|;
name|r
operator|=
name|d
operator|->
name|viewport
operator|->
name|rect
argument_list|()
expr_stmt|;
block|}
comment|// If the parent is a QAbstractScrollArea with QAbstractScrollArea::AdjustToContents
comment|// then we want to change the geometry on that widget. Not doing it at once can/will
comment|// cause scrollbars flicker as they would be shown at first but then removed.
comment|// In the same situation it will also allow shrinking the whole view when stretchLastSection is set
comment|// (It is default on QTreeViews - and it wouldn't shrink since the last stretch was made before the
comment|// viewport was resized)
name|QAbstractScrollArea
modifier|*
name|parent
init|=
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|&&
name|parent
operator|->
name|sizeAdjustPolicy
argument_list|()
operator|==
name|QAbstractScrollArea
operator|::
name|AdjustToContents
condition|)
name|parent
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|(
name|r
operator|.
name|normalized
argument_list|()
argument_list|)
expr_stmt|;
emit|emit
name|sectionResized
argument_list|(
name|logical
argument_list|,
name|oldSize
argument_list|,
name|size
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     Resizes the sections according to the given \a mode, ignoring the current     resize mode.      \sa resizeMode(), sectionResized() */
end_comment
begin_function
DECL|function|resizeSections
name|void
name|QHeaderView
operator|::
name|resizeSections
parameter_list|(
name|QHeaderView
operator|::
name|ResizeMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|resizeSections
argument_list|(
name|mode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QHeaderView::hideSection(int logicalIndex)     Hides the section specified by \a logicalIndex.      \sa showSection(), isSectionHidden(), hiddenSectionCount(),     setSectionHidden() */
end_comment
begin_comment
comment|/*!     \fn void QHeaderView::showSection(int logicalIndex)     Shows the section specified by \a logicalIndex.      \sa hideSection(), isSectionHidden(), hiddenSectionCount(),     setSectionHidden() */
end_comment
begin_comment
comment|/*!     Returns \c true if the section specified by \a logicalIndex is explicitly     hidden from the user; otherwise returns \c false.      \sa hideSection(), showSection(), setSectionHidden(), hiddenSectionCount() */
end_comment
begin_function
DECL|function|isSectionHidden
name|bool
name|QHeaderView
operator|::
name|isSectionHidden
parameter_list|(
name|int
name|logicalIndex
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hiddenSectionSize
operator|.
name|isEmpty
argument_list|()
operator|||
name|logicalIndex
operator|<
literal|0
operator|||
name|logicalIndex
operator|>=
name|d
operator|->
name|sectionCount
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|visual
init|=
name|visualIndex
argument_list|(
name|logicalIndex
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|visual
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|isVisualIndexHidden
argument_list|(
name|visual
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the number of sections in the header that has been hidden.      \sa setSectionHidden(), isSectionHidden() */
end_comment
begin_function
DECL|function|hiddenSectionCount
name|int
name|QHeaderView
operator|::
name|hiddenSectionCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|hiddenSectionSize
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   If \a hide is true the section specified by \a logicalIndex is hidden;   otherwise the section is shown.    \sa isSectionHidden(), hiddenSectionCount() */
end_comment
begin_function
DECL|function|setSectionHidden
name|void
name|QHeaderView
operator|::
name|setSectionHidden
parameter_list|(
name|int
name|logicalIndex
parameter_list|,
name|bool
name|hide
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|logicalIndex
operator|<
literal|0
operator|||
name|logicalIndex
operator|>=
name|count
argument_list|()
condition|)
return|return;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|int
name|visual
init|=
name|visualIndex
argument_list|(
name|logicalIndex
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|visual
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|hide
operator|==
name|d
operator|->
name|isVisualIndexHidden
argument_list|(
name|visual
argument_list|)
condition|)
return|return;
if|if
condition|(
name|hide
condition|)
block|{
name|int
name|size
init|=
name|d
operator|->
name|headerSectionSize
argument_list|(
name|visual
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|hasAutoResizeSections
argument_list|()
condition|)
name|resizeSection
argument_list|(
name|logicalIndex
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|hiddenSectionSize
operator|.
name|insert
argument_list|(
name|logicalIndex
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|d
operator|->
name|setVisualIndexHidden
argument_list|(
name|visual
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasAutoResizeSections
argument_list|()
condition|)
name|d
operator|->
name|doDelayedResizeSections
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|int
name|size
init|=
name|d
operator|->
name|hiddenSectionSize
operator|.
name|value
argument_list|(
name|logicalIndex
argument_list|,
name|d
operator|->
name|defaultSectionSize
argument_list|)
decl_stmt|;
name|d
operator|->
name|hiddenSectionSize
operator|.
name|remove
argument_list|(
name|logicalIndex
argument_list|)
expr_stmt|;
name|d
operator|->
name|setVisualIndexHidden
argument_list|(
name|visual
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|resizeSection
argument_list|(
name|logicalIndex
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the number of sections in the header.      \sa sectionCountChanged(), length() */
end_comment
begin_function
DECL|function|count
name|int
name|QHeaderView
operator|::
name|count
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
comment|//Q_ASSERT(d->sectionCount == d->headerSectionCount());
comment|// ### this may affect the lazy layout
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|sectionCount
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the visual index position of the section specified by the given     \a logicalIndex, or -1 otherwise.      Hidden sections still have valid visual indexes.      \sa logicalIndex() */
end_comment
begin_function
DECL|function|visualIndex
name|int
name|QHeaderView
operator|::
name|visualIndex
parameter_list|(
name|int
name|logicalIndex
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|logicalIndex
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|visualIndices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// nothing has been moved, so we have no mapping
if|if
condition|(
name|logicalIndex
operator|<
name|d
operator|->
name|sectionCount
argument_list|()
condition|)
return|return
name|logicalIndex
return|;
block|}
elseif|else
if|if
condition|(
name|logicalIndex
operator|<
name|d
operator|->
name|visualIndices
operator|.
name|count
argument_list|()
condition|)
block|{
name|int
name|visual
init|=
name|d
operator|->
name|visualIndices
operator|.
name|at
argument_list|(
name|logicalIndex
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|visual
operator|<
name|d
operator|->
name|sectionCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|visual
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the logicalIndex for the section at the given \a visualIndex     position, or -1 if visualIndex< 0 or visualIndex>= QHeaderView::count().      Note that the visualIndex is not affected by hidden sections.      \sa visualIndex(), sectionPosition() */
end_comment
begin_function
DECL|function|logicalIndex
name|int
name|QHeaderView
operator|::
name|logicalIndex
parameter_list|(
name|int
name|visualIndex
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|visualIndex
operator|<
literal|0
operator|||
name|visualIndex
operator|>=
name|d
operator|->
name|sectionCount
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|d
operator|->
name|logicalIndex
argument_list|(
name|visualIndex
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.0      If \a movable is true, the header may be moved by the user; otherwise it     is fixed in place.      \sa sectionsMovable(), sectionMoved() */
end_comment
begin_function
DECL|function|setSectionsMovable
name|void
name|QHeaderView
operator|::
name|setSectionsMovable
parameter_list|(
name|bool
name|movable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|movableSections
operator|=
name|movable
expr_stmt|;
block|}
end_function
begin_comment
comment|// ### Qt 6 - remove this obsolete function
end_comment
begin_comment
comment|/*!     \obsolete     \fn void QHeaderView::setMovable(bool movable)      Use setSectionsMovable instead.      \sa setSectionsMovable() */
end_comment
begin_comment
comment|/*!     \since 5.0      Returns \c true if the header can be moved by the user; otherwise returns     false.      \sa setSectionsMovable() */
end_comment
begin_function
DECL|function|sectionsMovable
name|bool
name|QHeaderView
operator|::
name|sectionsMovable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|movableSections
return|;
block|}
end_function
begin_comment
comment|// ### Qt 6 - remove this obsolete function
end_comment
begin_comment
comment|/*!     \obsolete     \fn bool QHeaderView::isMovable() const      Use sectionsMovable instead.      \sa sectionsMovable() */
end_comment
begin_comment
comment|/*!     \since 5.0      If \a clickable is true, the header will respond to single clicks.      \sa sectionsClickable(), sectionClicked(), sectionPressed(),     setSortIndicatorShown() */
end_comment
begin_function
DECL|function|setSectionsClickable
name|void
name|QHeaderView
operator|::
name|setSectionsClickable
parameter_list|(
name|bool
name|clickable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|clickableSections
operator|=
name|clickable
expr_stmt|;
block|}
end_function
begin_comment
comment|// ### Qt 6 - remove this obsolete function
end_comment
begin_comment
comment|/*!     \obsolete     \fn void QHeaderView::setClickable(bool clickable)      Use setSectionsClickable instead.      \sa setSectionsClickable() */
end_comment
begin_comment
comment|/*!     \since 5.0      Returns \c true if the header is clickable; otherwise returns \c false. A     clickable header could be set up to allow the user to change the     representation of the data in the view related to the header.      \sa setSectionsClickable() */
end_comment
begin_function
DECL|function|sectionsClickable
name|bool
name|QHeaderView
operator|::
name|sectionsClickable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|clickableSections
return|;
block|}
end_function
begin_comment
comment|// ### Qt 6 - remove this obsolete function
end_comment
begin_comment
comment|/*!     \obsolete     \fn bool QHeaderView::isClickable() const      Use sectionsClickable instead.      \sa sectionsClickable() */
end_comment
begin_function
DECL|function|setHighlightSections
name|void
name|QHeaderView
operator|::
name|setHighlightSections
parameter_list|(
name|bool
name|highlight
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|highlightSelected
operator|=
name|highlight
expr_stmt|;
block|}
end_function
begin_function
DECL|function|highlightSections
name|bool
name|QHeaderView
operator|::
name|highlightSections
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|highlightSelected
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.0      Sets the constraints on how the header can be resized to those described     by the given \a mode.      \sa resizeMode(), length(), sectionResized() */
end_comment
begin_function
DECL|function|setSectionResizeMode
name|void
name|QHeaderView
operator|::
name|setSectionResizeMode
parameter_list|(
name|ResizeMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|initializeSections
argument_list|()
expr_stmt|;
name|d
operator|->
name|stretchSections
operator|=
operator|(
name|mode
operator|==
name|Stretch
condition|?
name|count
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|d
operator|->
name|contentsSections
operator|=
operator|(
name|mode
operator|==
name|ResizeToContents
condition|?
name|count
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|d
operator|->
name|setGlobalHeaderResizeMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasAutoResizeSections
argument_list|()
condition|)
name|d
operator|->
name|doDelayedResizeSections
argument_list|()
expr_stmt|;
comment|// section sizes may change as a result of the new mode
block|}
end_function
begin_comment
comment|/*!     \since 5.0      Sets the constraints on how the section specified by \a logicalIndex in     the header can be resized to those described by the given \a mode. The logical     index should exist at the time this function is called.      \note This setting will be ignored for the last section if the stretchLastSection     property is set to true. This is the default for the horizontal headers provided     by QTreeView.      \sa setStretchLastSection(), resizeContentsPrecision() */
end_comment
begin_function
DECL|function|setSectionResizeMode
name|void
name|QHeaderView
operator|::
name|setSectionResizeMode
parameter_list|(
name|int
name|logicalIndex
parameter_list|,
name|ResizeMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|int
name|visual
init|=
name|visualIndex
argument_list|(
name|logicalIndex
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|visual
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ResizeMode
name|old
init|=
name|d
operator|->
name|headerSectionResizeMode
argument_list|(
name|visual
argument_list|)
decl_stmt|;
name|d
operator|->
name|setHeaderSectionResizeMode
argument_list|(
name|visual
argument_list|,
name|mode
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|Stretch
operator|&&
name|old
operator|!=
name|Stretch
condition|)
operator|++
name|d
operator|->
name|stretchSections
expr_stmt|;
elseif|else
if|if
condition|(
name|mode
operator|==
name|ResizeToContents
operator|&&
name|old
operator|!=
name|ResizeToContents
condition|)
operator|++
name|d
operator|->
name|contentsSections
expr_stmt|;
elseif|else
if|if
condition|(
name|mode
operator|!=
name|Stretch
operator|&&
name|old
operator|==
name|Stretch
condition|)
operator|--
name|d
operator|->
name|stretchSections
expr_stmt|;
elseif|else
if|if
condition|(
name|mode
operator|!=
name|ResizeToContents
operator|&&
name|old
operator|==
name|ResizeToContents
condition|)
operator|--
name|d
operator|->
name|contentsSections
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasAutoResizeSections
argument_list|()
operator|&&
name|d
operator|->
name|state
operator|==
name|QHeaderViewPrivate
operator|::
name|NoState
condition|)
name|d
operator|->
name|doDelayedResizeSections
argument_list|()
expr_stmt|;
comment|// section sizes may change as a result of the new mode
block|}
end_function
begin_comment
comment|// ### Qt 6 - remove this obsolete function
end_comment
begin_comment
comment|/*!     \overload     \obsolete     \fn void QHeaderView::setResizeMode(int logicalIndex, ResizeMode mode)      Use setSectionResizeMode instead.      \sa setSectionResizeMode() */
end_comment
begin_comment
comment|/*!     \obsolete     \fn void QHeaderView::setResizeMode(ResizeMode mode)      Use setSectionResizeMode instead.      \sa setSectionResizeMode() */
end_comment
begin_comment
comment|/*!     \since 5.0      Returns the resize mode that applies to the section specified by the given     \a logicalIndex.      \sa setSectionResizeMode() */
end_comment
begin_function
DECL|function|sectionResizeMode
name|QHeaderView
operator|::
name|ResizeMode
name|QHeaderView
operator|::
name|sectionResizeMode
parameter_list|(
name|int
name|logicalIndex
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
name|int
name|visual
init|=
name|visualIndex
argument_list|(
name|logicalIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|visual
operator|==
operator|-
literal|1
condition|)
return|return
name|Fixed
return|;
comment|//the default value
return|return
name|d
operator|->
name|headerSectionResizeMode
argument_list|(
name|visual
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!    \since 5.2    Sets how precise QHeaderView should calculate the size when ResizeToContents is used.    A low value will provide a less accurate but fast auto resize while a higher    value will provide a more accurate resize that however can be slow.     The number \a precision specifies how many sections that should be consider    when calculating the preferred size.     The default value is 1000 meaning that a horizontal column with auto-resize will look    at maximum 1000 rows on calculating when doing an auto resize.     Special value 0 means that it will look at only the visible area.    Special value -1 will imply looking at all elements.     This value is used in QTableView::sizeHintForColumn(), QTableView::sizeHintForRow()    and QTreeView::sizeHintForColumn(). Reimplementing these functions can make this    function not having an effect.      \sa resizeContentsPrecision(), setSectionResizeMode(), resizeSections(), QTableView::sizeHintForColumn(), QTableView::sizeHintForRow(), QTreeView::sizeHintForColumn() */
end_comment
begin_function
DECL|function|setResizeContentsPrecision
name|void
name|QHeaderView
operator|::
name|setResizeContentsPrecision
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|resizeContentsPrecision
operator|=
name|precision
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 5.2   Returns how precise QHeaderView will calculate on ResizeToContents.    \sa setResizeContentsPrecision(), setSectionResizeMode()  */
end_comment
begin_function
DECL|function|resizeContentsPrecision
name|int
name|QHeaderView
operator|::
name|resizeContentsPrecision
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|resizeContentsPrecision
return|;
block|}
end_function
begin_comment
comment|// ### Qt 6 - remove this obsolete function
end_comment
begin_comment
comment|/*!     \obsolete     \fn QHeaderView::ResizeMode QHeaderView::resizeMode(int logicalIndex) const      Use sectionResizeMode instead.      \sa sectionResizeMode() */
end_comment
begin_comment
comment|/*!     \since 4.1      Returns the number of sections that are set to resize mode stretch. In     views, this can be used to see if the headerview needs to resize the     sections when the view's geometry changes.      \sa stretchLastSection, resizeMode() */
end_comment
begin_function
DECL|function|stretchSectionCount
name|int
name|QHeaderView
operator|::
name|stretchSectionCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|stretchSections
return|;
block|}
end_function
begin_comment
comment|/*!   \property QHeaderView::showSortIndicator   \brief whether the sort indicator is shown    By default, this property is \c false.    \sa setSectionsClickable() */
end_comment
begin_function
DECL|function|setSortIndicatorShown
name|void
name|QHeaderView
operator|::
name|setSortIndicatorShown
parameter_list|(
name|bool
name|show
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sortIndicatorShown
operator|==
name|show
condition|)
return|return;
name|d
operator|->
name|sortIndicatorShown
operator|=
name|show
expr_stmt|;
if|if
condition|(
name|sortIndicatorSection
argument_list|()
operator|<
literal|0
operator|||
name|sortIndicatorSection
argument_list|()
operator|>
name|count
argument_list|()
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|headerSectionResizeMode
argument_list|(
name|sortIndicatorSection
argument_list|()
argument_list|)
operator|==
name|ResizeToContents
condition|)
name|resizeSections
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isSortIndicatorShown
name|bool
name|QHeaderView
operator|::
name|isSortIndicatorShown
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sortIndicatorShown
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the sort indicator for the section specified by the given     \a logicalIndex in the direction specified by \a order, and removes the     sort indicator from any other section that was showing it.      \a logicalIndex may be -1, in which case no sort indicator will be shown     and the model will return to its natural, unsorted order. Note that not     all models support this and may even crash in this case.      \sa sortIndicatorSection(), sortIndicatorOrder() */
end_comment
begin_function
DECL|function|setSortIndicator
name|void
name|QHeaderView
operator|::
name|setSortIndicator
parameter_list|(
name|int
name|logicalIndex
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
comment|// This is so that people can set the position of the sort indicator before the fill the model
name|int
name|old
init|=
name|d
operator|->
name|sortIndicatorSection
decl_stmt|;
if|if
condition|(
name|old
operator|==
name|logicalIndex
operator|&&
name|order
operator|==
name|d
operator|->
name|sortIndicatorOrder
condition|)
return|return;
name|d
operator|->
name|sortIndicatorSection
operator|=
name|logicalIndex
expr_stmt|;
name|d
operator|->
name|sortIndicatorOrder
operator|=
name|order
expr_stmt|;
if|if
condition|(
name|logicalIndex
operator|>=
name|d
operator|->
name|sectionCount
argument_list|()
condition|)
block|{
emit|emit
name|sortIndicatorChanged
argument_list|(
name|logicalIndex
argument_list|,
name|order
argument_list|)
emit|;
return|return;
comment|// nothing to do
block|}
if|if
condition|(
name|old
operator|!=
name|logicalIndex
operator|&&
operator|(
operator|(
name|logicalIndex
operator|>=
literal|0
operator|&&
name|sectionResizeMode
argument_list|(
name|logicalIndex
argument_list|)
operator|==
name|ResizeToContents
operator|)
operator|||
name|old
operator|>=
name|d
operator|->
name|sectionCount
argument_list|()
operator|||
operator|(
name|old
operator|>=
literal|0
operator|&&
name|sectionResizeMode
argument_list|(
name|old
argument_list|)
operator|==
name|ResizeToContents
operator|)
operator|)
condition|)
block|{
name|resizeSections
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|old
operator|>=
literal|0
operator|&&
name|old
operator|!=
name|logicalIndex
condition|)
name|updateSection
argument_list|(
name|old
argument_list|)
expr_stmt|;
if|if
condition|(
name|logicalIndex
operator|>=
literal|0
condition|)
name|updateSection
argument_list|(
name|logicalIndex
argument_list|)
expr_stmt|;
block|}
emit|emit
name|sortIndicatorChanged
argument_list|(
name|logicalIndex
argument_list|,
name|order
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     Returns the logical index of the section that has a sort indicator.     By default this is section 0.      \sa setSortIndicator(), sortIndicatorOrder(), setSortIndicatorShown() */
end_comment
begin_function
DECL|function|sortIndicatorSection
name|int
name|QHeaderView
operator|::
name|sortIndicatorSection
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sortIndicatorSection
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the order for the sort indicator. If no section has a sort     indicator the return value of this function is undefined.      \sa setSortIndicator(), sortIndicatorSection() */
end_comment
begin_function
DECL|function|sortIndicatorOrder
name|Qt
operator|::
name|SortOrder
name|QHeaderView
operator|::
name|sortIndicatorOrder
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sortIndicatorOrder
return|;
block|}
end_function
begin_comment
comment|/*!     \property QHeaderView::stretchLastSection     \brief whether the last visible section in the header takes up all the     available space      The default value is false.      \note The horizontal headers provided by QTreeView are configured with this     property set to true, ensuring that the view does not waste any of the     space assigned to it for its header. If this value is set to true, this     property will override the resize mode set on the last section in the     header.      \sa setSectionResizeMode() */
end_comment
begin_function
DECL|function|stretchLastSection
name|bool
name|QHeaderView
operator|::
name|stretchLastSection
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|stretchLastSection
return|;
block|}
end_function
begin_function
DECL|function|setStretchLastSection
name|void
name|QHeaderView
operator|::
name|setStretchLastSection
parameter_list|(
name|bool
name|stretch
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|stretchLastSection
operator|=
name|stretch
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|state
operator|!=
name|QHeaderViewPrivate
operator|::
name|NoState
condition|)
return|return;
if|if
condition|(
name|stretch
condition|)
name|resizeSections
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|count
argument_list|()
condition|)
name|resizeSection
argument_list|(
name|count
argument_list|()
operator|-
literal|1
argument_list|,
name|d
operator|->
name|defaultSectionSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     \property QHeaderView::cascadingSectionResizes     \brief whether interactive resizing will be cascaded to the following     sections once the section being resized by the user has reached its     minimum size      This property only affects sections that have \l Interactive as their     resize mode.      The default value is false.      \sa setSectionResizeMode() */
end_comment
begin_function
DECL|function|cascadingSectionResizes
name|bool
name|QHeaderView
operator|::
name|cascadingSectionResizes
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|cascadingResizing
return|;
block|}
end_function
begin_function
DECL|function|setCascadingSectionResizes
name|void
name|QHeaderView
operator|::
name|setCascadingSectionResizes
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|cascadingResizing
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QHeaderView::defaultSectionSize     \brief the default size of the header sections before resizing.      This property only affects sections that have \l Interactive or \l Fixed     as their resize mode.      \sa setSectionResizeMode(), minimumSectionSize */
end_comment
begin_function
DECL|function|defaultSectionSize
name|int
name|QHeaderView
operator|::
name|defaultSectionSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|defaultSectionSize
return|;
block|}
end_function
begin_function
DECL|function|setDefaultSectionSize
name|void
name|QHeaderView
operator|::
name|setDefaultSectionSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
argument_list|<
literal|0
operator|||
name|size
argument_list|>
name|maxSizeSection
condition|)
return|return;
name|d
operator|->
name|setDefaultSectionSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     \property QHeaderView::minimumSectionSize     \brief the minimum size of the header sections.      The minimum section size is the smallest section size allowed. If the     minimum section size is set to -1, QHeaderView will use the maximum of     the \l{QApplication::globalStrut()}{global strut} or the     \l{fontMetrics()}{font metrics} size.      This property is honored by all \l{ResizeMode}{resize modes}.      \sa setSectionResizeMode(), defaultSectionSize */
end_comment
begin_function
DECL|function|minimumSectionSize
name|int
name|QHeaderView
operator|::
name|minimumSectionSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|minimumSectionSize
operator|==
operator|-
literal|1
condition|)
block|{
name|QSize
name|strut
init|=
name|QApplication
operator|::
name|globalStrut
argument_list|()
decl_stmt|;
name|int
name|margin
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_HeaderMargin
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
return|return
name|qMax
argument_list|(
name|strut
operator|.
name|width
argument_list|()
argument_list|,
operator|(
name|fontMetrics
argument_list|()
operator|.
name|maxWidth
argument_list|()
operator|+
name|margin
operator|)
argument_list|)
return|;
return|return
name|qMax
argument_list|(
name|strut
operator|.
name|height
argument_list|()
argument_list|,
operator|(
name|fontMetrics
argument_list|()
operator|.
name|height
argument_list|()
operator|+
name|margin
operator|)
argument_list|)
return|;
block|}
return|return
name|d
operator|->
name|minimumSectionSize
return|;
block|}
end_function
begin_function
DECL|function|setMinimumSectionSize
name|void
name|QHeaderView
operator|::
name|setMinimumSectionSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
argument_list|<
operator|-
literal|1
operator|||
name|size
argument_list|>
name|maxSizeSection
condition|)
return|return;
name|d
operator|->
name|minimumSectionSize
operator|=
name|size
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|minimumSectionSize
operator|>
name|maximumSectionSize
argument_list|()
condition|)
name|d
operator|->
name|maximumSectionSize
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 5.2     \property QHeaderView::maximumSectionSize     \brief the maximum size of the header sections.      The maximum section size is the largest section size allowed.     The default value for this property is 1048575, which is also the largest     possible size for a section. Setting maximum to -1 will reset the value to     the largest section size.      With exception of stretch this property is honored by all \l{ResizeMode}{resize modes}      \sa setSectionResizeMode(), defaultSectionSize */
end_comment
begin_function
DECL|function|maximumSectionSize
name|int
name|QHeaderView
operator|::
name|maximumSectionSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|maximumSectionSize
operator|==
operator|-
literal|1
condition|)
return|return
name|maxSizeSection
return|;
return|return
name|d
operator|->
name|maximumSectionSize
return|;
block|}
end_function
begin_function
DECL|function|setMaximumSectionSize
name|void
name|QHeaderView
operator|::
name|setMaximumSectionSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|maximumSectionSize
operator|=
name|maxSizeSection
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|size
argument_list|<
literal|0
operator|||
name|size
argument_list|>
name|maxSizeSection
condition|)
return|return;
if|if
condition|(
name|minimumSectionSize
argument_list|()
operator|>
name|size
condition|)
name|d
operator|->
name|minimumSectionSize
operator|=
name|size
expr_stmt|;
name|d
operator|->
name|maximumSectionSize
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1     \property QHeaderView::defaultAlignment     \brief the default alignment of the text in each header section */
end_comment
begin_function
DECL|function|defaultAlignment
name|Qt
operator|::
name|Alignment
name|QHeaderView
operator|::
name|defaultAlignment
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|defaultAlignment
return|;
block|}
end_function
begin_function
DECL|function|setDefaultAlignment
name|void
name|QHeaderView
operator|::
name|setDefaultAlignment
parameter_list|(
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|defaultAlignment
operator|==
name|alignment
condition|)
return|return;
name|d
operator|->
name|defaultAlignment
operator|=
name|alignment
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|doItemsLayout
name|void
name|QHeaderView
operator|::
name|doItemsLayout
parameter_list|()
block|{
name|initializeSections
argument_list|()
expr_stmt|;
name|QAbstractItemView
operator|::
name|doItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if sections in the header has been moved; otherwise returns     false;      \sa moveSection() */
end_comment
begin_function
DECL|function|sectionsMoved
name|bool
name|QHeaderView
operator|::
name|sectionsMoved
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
operator|!
name|d
operator|->
name|visualIndices
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns \c true if sections in the header has been hidden; otherwise returns     false;      \sa setSectionHidden() */
end_comment
begin_function
DECL|function|sectionsHidden
name|bool
name|QHeaderView
operator|::
name|sectionsHidden
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
return|return
operator|!
name|d
operator|->
name|hiddenSectionSize
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     \since 4.3      Saves the current state of this header view.      To restore the saved state, pass the return value to restoreState().      \sa restoreState() */
end_comment
begin_function
DECL|function|saveState
name|QByteArray
name|QHeaderView
operator|::
name|saveState
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QHeaderViewPrivate
operator|::
name|VersionMarker
expr_stmt|;
name|stream
operator|<<
literal|0
expr_stmt|;
comment|// current version is 0
name|d
operator|->
name|write
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.3     Restores the \a state of this header view.     This function returns \c true if the state was restored; otherwise returns     false.      \sa saveState() */
end_comment
begin_function
DECL|function|restoreState
name|bool
name|QHeaderView
operator|::
name|restoreState
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|state
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|QByteArray
name|data
init|=
name|state
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|int
name|marker
decl_stmt|;
name|int
name|ver
decl_stmt|;
name|stream
operator|>>
name|marker
expr_stmt|;
name|stream
operator|>>
name|ver
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|status
argument_list|()
operator|!=
name|QDataStream
operator|::
name|Ok
operator|||
name|marker
operator|!=
name|QHeaderViewPrivate
operator|::
name|VersionMarker
operator|||
name|ver
operator|!=
literal|0
condition|)
comment|// current version is 0
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|read
argument_list|(
name|stream
argument_list|)
condition|)
block|{
emit|emit
name|sortIndicatorChanged
argument_list|(
name|d
operator|->
name|sortIndicatorSection
argument_list|,
name|d
operator|->
name|sortIndicatorOrder
argument_list|)
emit|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|reset
name|void
name|QHeaderView
operator|::
name|reset
parameter_list|()
block|{
name|QAbstractItemView
operator|::
name|reset
argument_list|()
expr_stmt|;
comment|// it would be correct to call clear, but some apps rely
comment|// on the header keeping the sections, even after calling reset
comment|//d->clear();
name|initializeSections
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Updates the changed header sections with the given \a orientation, from     \a logicalFirst to \a logicalLast inclusive. */
end_comment
begin_function
DECL|function|headerDataChanged
name|void
name|QHeaderView
operator|::
name|headerDataChanged
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|logicalFirst
parameter_list|,
name|int
name|logicalLast
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|!=
name|orientation
condition|)
return|return;
if|if
condition|(
name|logicalFirst
operator|<
literal|0
operator|||
name|logicalLast
operator|<
literal|0
operator|||
name|logicalFirst
operator|>=
name|count
argument_list|()
operator|||
name|logicalLast
operator|>=
name|count
argument_list|()
condition|)
return|return;
name|d
operator|->
name|invalidateCachedSizeHint
argument_list|()
expr_stmt|;
name|int
name|firstVisualIndex
init|=
name|INT_MAX
decl_stmt|,
name|lastVisualIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|section
init|=
name|logicalFirst
init|;
name|section
operator|<=
name|logicalLast
condition|;
operator|++
name|section
control|)
block|{
specifier|const
name|int
name|visual
init|=
name|visualIndex
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|firstVisualIndex
operator|=
name|qMin
argument_list|(
name|firstVisualIndex
argument_list|,
name|visual
argument_list|)
expr_stmt|;
name|lastVisualIndex
operator|=
name|qMax
argument_list|(
name|lastVisualIndex
argument_list|,
name|visual
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|executePostedResize
argument_list|()
expr_stmt|;
specifier|const
name|int
name|first
init|=
name|d
operator|->
name|headerSectionPosition
argument_list|(
name|firstVisualIndex
argument_list|)
decl_stmt|,
name|last
init|=
name|d
operator|->
name|headerSectionPosition
argument_list|(
name|lastVisualIndex
argument_list|)
operator|+
name|d
operator|->
name|headerSectionSize
argument_list|(
name|lastVisualIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|(
name|first
argument_list|,
literal|0
argument_list|,
name|last
operator|-
name|first
argument_list|,
name|d
operator|->
name|viewport
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|(
literal|0
argument_list|,
name|first
argument_list|,
name|d
operator|->
name|viewport
operator|->
name|width
argument_list|()
argument_list|,
name|last
operator|-
name|first
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.2      Updates the section specified by the given \a logicalIndex. */
end_comment
begin_function
DECL|function|updateSection
name|void
name|QHeaderView
operator|::
name|updateSection
parameter_list|(
name|int
name|logicalIndex
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|(
name|QRect
argument_list|(
name|sectionViewportPosition
argument_list|(
name|logicalIndex
argument_list|)
argument_list|,
literal|0
argument_list|,
name|sectionSize
argument_list|(
name|logicalIndex
argument_list|)
argument_list|,
name|d
operator|->
name|viewport
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
name|sectionViewportPosition
argument_list|(
name|logicalIndex
argument_list|)
argument_list|,
name|d
operator|->
name|viewport
operator|->
name|width
argument_list|()
argument_list|,
name|sectionSize
argument_list|(
name|logicalIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Resizes the sections according to their size hints. Normally, you do not     have to call this function. */
end_comment
begin_function
DECL|function|resizeSections
name|void
name|QHeaderView
operator|::
name|resizeSections
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasAutoResizeSections
argument_list|()
condition|)
name|d
operator|->
name|resizeSections
argument_list|(
name|Interactive
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// no global resize mode
block|}
end_function
begin_comment
comment|/*!     This slot is called when sections are inserted into the \a parent.     \a logicalFirst and \a logicalLast indices signify where the new sections     were inserted.      If only one section is inserted, \a logicalFirst and \a logicalLast will     be the same. */
end_comment
begin_function
DECL|function|sectionsInserted
name|void
name|QHeaderView
operator|::
name|sectionsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|logicalFirst
parameter_list|,
name|int
name|logicalLast
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
name|d
operator|->
name|root
condition|)
return|return;
comment|// we only handle changes in the root level
name|int
name|oldCount
init|=
name|d
operator|->
name|sectionCount
argument_list|()
decl_stmt|;
name|d
operator|->
name|invalidateCachedSizeHint
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|QHeaderViewPrivate
operator|::
name|ResizeSection
condition|)
name|d
operator|->
name|preventCursorChangeInSetOffset
operator|=
literal|true
expr_stmt|;
comment|// add the new sections
name|int
name|insertAt
init|=
name|logicalFirst
decl_stmt|;
name|int
name|insertCount
init|=
name|logicalLast
operator|-
name|logicalFirst
operator|+
literal|1
decl_stmt|;
name|QHeaderViewPrivate
operator|::
name|SectionItem
name|section
argument_list|(
name|d
operator|->
name|defaultSectionSize
argument_list|,
name|d
operator|->
name|globalResizeMode
argument_list|)
decl_stmt|;
name|d
operator|->
name|sectionStartposRecalc
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sectionItems
operator|.
name|isEmpty
argument_list|()
operator|||
name|insertAt
operator|>=
name|d
operator|->
name|sectionItems
operator|.
name|count
argument_list|()
condition|)
block|{
name|int
name|insertLength
init|=
name|d
operator|->
name|defaultSectionSize
operator|*
name|insertCount
decl_stmt|;
name|d
operator|->
name|length
operator|+=
name|insertLength
expr_stmt|;
name|d
operator|->
name|sectionItems
operator|.
name|insert
argument_list|(
name|d
operator|->
name|sectionItems
operator|.
name|count
argument_list|()
argument_list|,
name|insertCount
argument_list|,
name|section
argument_list|)
expr_stmt|;
comment|// append
block|}
else|else
block|{
comment|// separate them out into their own sections
name|int
name|insertLength
init|=
name|d
operator|->
name|defaultSectionSize
operator|*
name|insertCount
decl_stmt|;
name|d
operator|->
name|length
operator|+=
name|insertLength
expr_stmt|;
name|d
operator|->
name|sectionItems
operator|.
name|insert
argument_list|(
name|insertAt
argument_list|,
name|insertCount
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
comment|// update sorting column
if|if
condition|(
name|d
operator|->
name|sortIndicatorSection
operator|>=
name|logicalFirst
condition|)
name|d
operator|->
name|sortIndicatorSection
operator|+=
name|insertCount
expr_stmt|;
comment|// update resize mode section counts
if|if
condition|(
name|d
operator|->
name|globalResizeMode
operator|==
name|Stretch
condition|)
name|d
operator|->
name|stretchSections
operator|=
name|d
operator|->
name|sectionCount
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|globalResizeMode
operator|==
name|ResizeToContents
condition|)
name|d
operator|->
name|contentsSections
operator|=
name|d
operator|->
name|sectionCount
argument_list|()
expr_stmt|;
comment|// clear selection cache
name|d
operator|->
name|sectionSelected
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// update mapping
if|if
condition|(
operator|!
name|d
operator|->
name|visualIndices
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|logicalIndices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|visualIndices
operator|.
name|count
argument_list|()
operator|==
name|d
operator|->
name|logicalIndices
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|mappingCount
init|=
name|d
operator|->
name|visualIndices
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mappingCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|visualIndices
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|>=
name|logicalFirst
condition|)
name|d
operator|->
name|visualIndices
index|[
name|i
index|]
operator|+=
name|insertCount
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|logicalIndices
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|>=
name|logicalFirst
condition|)
name|d
operator|->
name|logicalIndices
index|[
name|i
index|]
operator|+=
name|insertCount
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
name|logicalFirst
init|;
name|j
operator|<=
name|logicalLast
condition|;
operator|++
name|j
control|)
block|{
name|d
operator|->
name|visualIndices
operator|.
name|insert
argument_list|(
name|j
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|d
operator|->
name|logicalIndices
operator|.
name|insert
argument_list|(
name|j
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
block|}
comment|// insert sections into hiddenSectionSize
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|newHiddenSectionSize
decl_stmt|;
comment|// from logical index to section size
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|logicalFirst
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|isSectionHidden
argument_list|(
name|i
argument_list|)
condition|)
name|newHiddenSectionSize
index|[
name|i
index|]
operator|=
name|d
operator|->
name|hiddenSectionSize
index|[
name|i
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|logicalLast
operator|+
literal|1
init|;
name|j
operator|<
name|d
operator|->
name|sectionCount
argument_list|()
condition|;
operator|++
name|j
control|)
if|if
condition|(
name|isSectionHidden
argument_list|(
name|j
argument_list|)
condition|)
name|newHiddenSectionSize
index|[
name|j
index|]
operator|=
name|d
operator|->
name|hiddenSectionSize
index|[
name|j
operator|-
name|insertCount
index|]
expr_stmt|;
name|d
operator|->
name|hiddenSectionSize
operator|=
name|newHiddenSectionSize
expr_stmt|;
name|d
operator|->
name|doDelayedResizeSections
argument_list|()
expr_stmt|;
emit|emit
name|sectionCountChanged
argument_list|(
name|oldCount
argument_list|,
name|count
argument_list|()
argument_list|)
emit|;
comment|// if the new sections were not updated by resizing, we need to update now
if|if
condition|(
operator|!
name|d
operator|->
name|hasAutoResizeSections
argument_list|()
condition|)
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This slot is called when sections are removed from the \a parent.     \a logicalFirst and \a logicalLast signify where the sections were removed.      If only one section is removed, \a logicalFirst and \a logicalLast will     be the same. */
end_comment
begin_function
DECL|function|sectionsAboutToBeRemoved
name|void
name|QHeaderView
operator|::
name|sectionsAboutToBeRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|logicalFirst
parameter_list|,
name|int
name|logicalLast
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|logicalFirst
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|logicalLast
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateHiddenSections
name|void
name|QHeaderViewPrivate
operator|::
name|updateHiddenSections
parameter_list|(
name|int
name|logicalFirst
parameter_list|,
name|int
name|logicalLast
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
specifier|const
name|int
name|changeCount
init|=
name|logicalLast
operator|-
name|logicalFirst
operator|+
literal|1
decl_stmt|;
comment|// remove sections from hiddenSectionSize
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|newHiddenSectionSize
decl_stmt|;
comment|// from logical index to section size
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|logicalFirst
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|q
operator|->
name|isSectionHidden
argument_list|(
name|i
argument_list|)
condition|)
name|newHiddenSectionSize
index|[
name|i
index|]
operator|=
name|hiddenSectionSize
index|[
name|i
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|logicalLast
operator|+
literal|1
init|;
name|j
operator|<
name|sectionCount
argument_list|()
condition|;
operator|++
name|j
control|)
if|if
condition|(
name|q
operator|->
name|isSectionHidden
argument_list|(
name|j
argument_list|)
condition|)
name|newHiddenSectionSize
index|[
name|j
operator|-
name|changeCount
index|]
operator|=
name|hiddenSectionSize
index|[
name|j
index|]
expr_stmt|;
name|hiddenSectionSize
operator|=
name|newHiddenSectionSize
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_sectionsRemoved
name|void
name|QHeaderViewPrivate
operator|::
name|_q_sectionsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|logicalFirst
parameter_list|,
name|int
name|logicalLast
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
name|root
condition|)
return|return;
comment|// we only handle changes in the root level
if|if
condition|(
name|qMin
argument_list|(
name|logicalFirst
argument_list|,
name|logicalLast
argument_list|)
operator|<
literal|0
operator|||
name|qMax
argument_list|(
name|logicalLast
argument_list|,
name|logicalFirst
argument_list|)
operator|>=
name|sectionCount
argument_list|()
condition|)
return|return;
name|int
name|oldCount
init|=
name|q
operator|->
name|count
argument_list|()
decl_stmt|;
name|int
name|changeCount
init|=
name|logicalLast
operator|-
name|logicalFirst
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|QHeaderViewPrivate
operator|::
name|ResizeSection
condition|)
name|preventCursorChangeInSetOffset
operator|=
literal|true
expr_stmt|;
name|updateHiddenSections
argument_list|(
name|logicalFirst
argument_list|,
name|logicalLast
argument_list|)
expr_stmt|;
if|if
condition|(
name|visualIndices
operator|.
name|isEmpty
argument_list|()
operator|&&
name|logicalIndices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Q_ASSERT(headerSectionCount() == sectionCount);
name|removeSectionsFromSectionItems
argument_list|(
name|logicalFirst
argument_list|,
name|logicalLast
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|logicalFirst
operator|==
name|logicalLast
condition|)
block|{
comment|// Remove just one index.
name|int
name|l
init|=
name|logicalFirst
decl_stmt|;
name|int
name|visual
init|=
name|visualIndices
operator|.
name|at
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|sectionCount
argument_list|()
operator|==
name|logicalIndices
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|sectionCount
argument_list|()
condition|;
operator|++
name|v
control|)
block|{
if|if
condition|(
name|v
operator|>
name|visual
condition|)
block|{
name|int
name|logical
init|=
name|logicalIndices
operator|.
name|at
argument_list|(
name|v
argument_list|)
decl_stmt|;
operator|--
operator|(
name|visualIndices
index|[
name|logical
index|]
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|logicalIndex
argument_list|(
name|v
argument_list|)
operator|>
name|l
condition|)
comment|// no need to move the positions before l
operator|--
operator|(
name|logicalIndices
index|[
name|v
index|]
operator|)
expr_stmt|;
block|}
name|logicalIndices
operator|.
name|remove
argument_list|(
name|visual
argument_list|)
expr_stmt|;
name|visualIndices
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
comment|//Q_ASSERT(headerSectionCount() == sectionCount);
name|removeSectionsFromSectionItems
argument_list|(
name|visual
argument_list|,
name|visual
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sectionStartposRecalc
operator|=
literal|true
expr_stmt|;
comment|// We will need to recalc positions after removing items
for|for
control|(
name|int
name|u
init|=
literal|0
init|;
name|u
operator|<
name|sectionItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|u
control|)
comment|// Store section info
name|sectionItems
operator|.
name|at
argument_list|(
name|u
argument_list|)
operator|.
name|tmpLogIdx
operator|=
name|logicalIndices
operator|.
name|at
argument_list|(
name|u
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|v
init|=
name|sectionItems
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|v
operator|>=
literal|0
condition|;
operator|--
name|v
control|)
block|{
comment|// Remove the sections
if|if
condition|(
name|logicalFirst
operator|<=
name|sectionItems
operator|.
name|at
argument_list|(
name|v
argument_list|)
operator|.
name|tmpLogIdx
operator|&&
name|sectionItems
operator|.
name|at
argument_list|(
name|v
argument_list|)
operator|.
name|tmpLogIdx
operator|<=
name|logicalLast
condition|)
name|removeSectionsFromSectionItems
argument_list|(
name|v
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|visualIndices
operator|.
name|resize
argument_list|(
name|sectionItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|logicalIndices
operator|.
name|resize
argument_list|(
name|sectionItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|int
modifier|*
name|visual_data
init|=
name|visualIndices
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
modifier|*
name|logical_data
init|=
name|logicalIndices
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|w
init|=
literal|0
init|;
name|w
operator|<
name|sectionItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|w
control|)
block|{
comment|// Restore visual and logical indexes
name|int
name|logindex
init|=
name|sectionItems
operator|.
name|at
argument_list|(
name|w
argument_list|)
operator|.
name|tmpLogIdx
decl_stmt|;
if|if
condition|(
name|logindex
operator|>
name|logicalFirst
condition|)
name|logindex
operator|-=
name|changeCount
expr_stmt|;
name|visual_data
index|[
name|logindex
index|]
operator|=
name|w
expr_stmt|;
name|logical_data
index|[
name|w
index|]
operator|=
name|logindex
expr_stmt|;
block|}
block|}
comment|// ### handle sectionSelection (sectionHidden is handled by updateHiddenSections)
block|}
comment|// update sorting column
if|if
condition|(
name|sortIndicatorSection
operator|>=
name|logicalFirst
condition|)
block|{
if|if
condition|(
name|sortIndicatorSection
operator|<=
name|logicalLast
condition|)
name|sortIndicatorSection
operator|=
operator|-
literal|1
expr_stmt|;
else|else
name|sortIndicatorSection
operator|-=
name|changeCount
expr_stmt|;
block|}
comment|// if we only have the last section (the "end" position) left, the header is empty
if|if
condition|(
name|sectionCount
argument_list|()
operator|<=
literal|0
condition|)
name|clear
argument_list|()
expr_stmt|;
name|invalidateCachedSizeHint
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|sectionCountChanged
argument_list|(
name|oldCount
argument_list|,
name|q
operator|->
name|count
argument_list|()
argument_list|)
emit|;
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_layoutAboutToBeChanged
name|void
name|QHeaderViewPrivate
operator|::
name|_q_layoutAboutToBeChanged
parameter_list|()
block|{
comment|//if there is no row/column we can't have mapping for columns
comment|//because no QModelIndex in the model would be valid
comment|// ### this is far from being bullet-proof and we would need a real system to
comment|// ### map columns or rows persistently
if|if
condition|(
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|&&
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
operator|==
literal|0
operator|)
operator|||
name|model
operator|->
name|columnCount
argument_list|(
name|root
argument_list|)
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|hiddenSectionSize
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sectionItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|isVisualIndexHidden
argument_list|(
name|i
argument_list|)
condition|)
comment|// ### note that we are using column or row 0
name|persistentHiddenSections
operator|.
name|append
argument_list|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|logicalIndex
argument_list|(
name|i
argument_list|)
argument_list|,
name|root
argument_list|)
else|:
name|model
operator|->
name|index
argument_list|(
name|logicalIndex
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_layoutChanged
name|void
name|QHeaderViewPrivate
operator|::
name|_q_layoutChanged
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
if|if
condition|(
name|persistentHiddenSections
operator|.
name|isEmpty
argument_list|()
operator|||
name|modelIsEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|modelSectionCount
argument_list|()
operator|!=
name|sectionCount
argument_list|()
condition|)
name|q
operator|->
name|initializeSections
argument_list|()
expr_stmt|;
name|persistentHiddenSections
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
name|QBitArray
name|oldSectionHidden
init|=
name|sectionsHiddenToBitVector
argument_list|()
decl_stmt|;
name|oldSectionHidden
operator|.
name|resize
argument_list|(
name|sectionItems
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|sectionCountChanged
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|persistentHiddenSections
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|persistentHiddenSections
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|int
name|logical
init|=
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|index
operator|.
name|column
argument_list|()
else|:
name|index
operator|.
name|row
argument_list|()
operator|)
decl_stmt|;
name|q
operator|->
name|setSectionHidden
argument_list|(
name|logical
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|oldSectionHidden
operator|.
name|setBit
argument_list|(
name|logical
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|sectionCountChanged
operator|&&
operator|(
name|modelSectionCount
argument_list|()
operator|!=
name|sectionCount
argument_list|()
operator|)
condition|)
block|{
name|sectionCountChanged
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|persistentHiddenSections
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldSectionHidden
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|oldSectionHidden
operator|.
name|testBit
argument_list|(
name|i
argument_list|)
condition|)
name|q
operator|->
name|setSectionHidden
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// the number of sections changed; we need to reread the state of the model
if|if
condition|(
name|sectionCountChanged
condition|)
name|q
operator|->
name|initializeSections
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|initializeSections
name|void
name|QHeaderView
operator|::
name|initializeSections
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
specifier|const
name|int
name|oldCount
init|=
name|d
operator|->
name|sectionCount
argument_list|()
decl_stmt|;
specifier|const
name|int
name|newCount
init|=
name|d
operator|->
name|modelSectionCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|newCount
operator|<=
literal|0
condition|)
block|{
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
emit|emit
name|sectionCountChanged
argument_list|(
name|oldCount
argument_list|,
literal|0
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|newCount
operator|!=
name|oldCount
condition|)
block|{
specifier|const
name|int
name|min
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|oldCount
argument_list|,
name|newCount
operator|-
literal|1
argument_list|)
decl_stmt|;
name|initializeSections
argument_list|(
name|min
argument_list|,
name|newCount
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|stretchLastSection
argument_list|()
condition|)
comment|// we've already gotten the size hint
name|d
operator|->
name|lastSectionSize
operator|=
name|sectionSize
argument_list|(
name|logicalIndex
argument_list|(
name|d
operator|->
name|sectionCount
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//make sure we update the hidden sections
if|if
condition|(
name|newCount
operator|<
name|oldCount
condition|)
name|d
operator|->
name|updateHiddenSections
argument_list|(
literal|0
argument_list|,
name|newCount
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|initializeSections
name|void
name|QHeaderView
operator|::
name|initializeSections
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|start
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|end
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|invalidateCachedSizeHint
argument_list|()
expr_stmt|;
name|int
name|oldCount
init|=
name|d
operator|->
name|sectionCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|end
operator|+
literal|1
operator|<
name|d
operator|->
name|sectionCount
argument_list|()
condition|)
block|{
name|int
name|newCount
init|=
name|end
operator|+
literal|1
decl_stmt|;
name|d
operator|->
name|removeSectionsFromSectionItems
argument_list|(
name|newCount
argument_list|,
name|d
operator|->
name|sectionCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|hiddenSectionSize
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|oldCount
operator|-
name|newCount
operator|>
name|d
operator|->
name|hiddenSectionSize
operator|.
name|count
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|end
operator|+
literal|1
init|;
name|i
operator|<
name|d
operator|->
name|sectionCount
argument_list|()
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|hiddenSectionSize
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|it
init|=
name|d
operator|->
name|hiddenSectionSize
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|hiddenSectionSize
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|it
operator|.
name|key
argument_list|()
operator|>
name|end
condition|)
name|it
operator|=
name|d
operator|->
name|hiddenSectionSize
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
else|else
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
block|}
name|int
name|newSectionCount
init|=
name|end
operator|+
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|logicalIndices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|oldCount
operator|<=
name|newSectionCount
condition|)
block|{
name|d
operator|->
name|logicalIndices
operator|.
name|resize
argument_list|(
name|newSectionCount
argument_list|)
expr_stmt|;
name|d
operator|->
name|visualIndices
operator|.
name|resize
argument_list|(
name|newSectionCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|oldCount
init|;
name|i
operator|<
name|newSectionCount
condition|;
operator|++
name|i
control|)
block|{
name|d
operator|->
name|logicalIndices
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
name|d
operator|->
name|visualIndices
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|v
init|=
name|d
operator|->
name|logicalIndices
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|<
name|newSectionCount
condition|)
block|{
name|d
operator|->
name|logicalIndices
index|[
name|j
index|]
operator|=
name|v
expr_stmt|;
name|d
operator|->
name|visualIndices
index|[
name|v
index|]
operator|=
name|j
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
block|}
name|d
operator|->
name|logicalIndices
operator|.
name|resize
argument_list|(
name|newSectionCount
argument_list|)
expr_stmt|;
name|d
operator|->
name|visualIndices
operator|.
name|resize
argument_list|(
name|newSectionCount
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|globalResizeMode
operator|==
name|Stretch
condition|)
name|d
operator|->
name|stretchSections
operator|=
name|newSectionCount
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|globalResizeMode
operator|==
name|ResizeToContents
condition|)
name|d
operator|->
name|contentsSections
operator|=
name|newSectionCount
expr_stmt|;
if|if
condition|(
name|newSectionCount
operator|>
name|oldCount
condition|)
name|d
operator|->
name|createSectionItems
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
operator|(
name|end
operator|-
name|start
operator|+
literal|1
operator|)
operator|*
name|d
operator|->
name|defaultSectionSize
argument_list|,
name|d
operator|->
name|globalResizeMode
argument_list|)
expr_stmt|;
comment|//Q_ASSERT(d->headerLength() == d->length);
if|if
condition|(
name|d
operator|->
name|sectionCount
argument_list|()
operator|!=
name|oldCount
condition|)
emit|emit
name|sectionCountChanged
argument_list|(
name|oldCount
argument_list|,
name|d
operator|->
name|sectionCount
argument_list|()
argument_list|)
emit|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|currentChanged
name|void
name|QHeaderView
operator|::
name|currentChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|current
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|old
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|&&
name|current
operator|.
name|column
argument_list|()
operator|!=
name|old
operator|.
name|column
argument_list|()
condition|)
block|{
if|if
condition|(
name|old
operator|.
name|isValid
argument_list|()
operator|&&
name|old
operator|.
name|parent
argument_list|()
operator|==
name|d
operator|->
name|root
condition|)
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|(
name|QRect
argument_list|(
name|sectionViewportPosition
argument_list|(
name|old
operator|.
name|column
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|sectionSize
argument_list|(
name|old
operator|.
name|column
argument_list|()
argument_list|)
argument_list|,
name|d
operator|->
name|viewport
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|isValid
argument_list|()
operator|&&
name|current
operator|.
name|parent
argument_list|()
operator|==
name|d
operator|->
name|root
condition|)
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|(
name|QRect
argument_list|(
name|sectionViewportPosition
argument_list|(
name|current
operator|.
name|column
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|sectionSize
argument_list|(
name|current
operator|.
name|column
argument_list|()
argument_list|)
argument_list|,
name|d
operator|->
name|viewport
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|&&
name|current
operator|.
name|row
argument_list|()
operator|!=
name|old
operator|.
name|row
argument_list|()
condition|)
block|{
if|if
condition|(
name|old
operator|.
name|isValid
argument_list|()
operator|&&
name|old
operator|.
name|parent
argument_list|()
operator|==
name|d
operator|->
name|root
condition|)
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
name|sectionViewportPosition
argument_list|(
name|old
operator|.
name|row
argument_list|()
argument_list|)
argument_list|,
name|d
operator|->
name|viewport
operator|->
name|width
argument_list|()
argument_list|,
name|sectionSize
argument_list|(
name|old
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|isValid
argument_list|()
operator|&&
name|current
operator|.
name|parent
argument_list|()
operator|==
name|d
operator|->
name|root
condition|)
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
name|sectionViewportPosition
argument_list|(
name|current
operator|.
name|row
argument_list|()
argument_list|)
argument_list|,
name|d
operator|->
name|viewport
operator|->
name|width
argument_list|()
argument_list|,
name|sectionSize
argument_list|(
name|current
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QHeaderView
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|HoverEnter
case|:
block|{
name|QHoverEvent
modifier|*
name|he
init|=
cast|static_cast
argument_list|<
name|QHoverEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|d
operator|->
name|hover
operator|=
name|logicalIndexAt
argument_list|(
name|he
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hover
operator|!=
operator|-
literal|1
condition|)
name|updateSection
argument_list|(
name|d
operator|->
name|hover
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|Leave
case|:
case|case
name|QEvent
operator|::
name|HoverLeave
case|:
block|{
if|if
condition|(
name|d
operator|->
name|hover
operator|!=
operator|-
literal|1
condition|)
name|updateSection
argument_list|(
name|d
operator|->
name|hover
argument_list|)
expr_stmt|;
name|d
operator|->
name|hover
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|HoverMove
case|:
block|{
name|QHoverEvent
modifier|*
name|he
init|=
cast|static_cast
argument_list|<
name|QHoverEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|int
name|oldHover
init|=
name|d
operator|->
name|hover
decl_stmt|;
name|d
operator|->
name|hover
operator|=
name|logicalIndexAt
argument_list|(
name|he
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hover
operator|!=
name|oldHover
condition|)
block|{
if|if
condition|(
name|oldHover
operator|!=
operator|-
literal|1
condition|)
name|updateSection
argument_list|(
name|oldHover
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hover
operator|!=
operator|-
literal|1
condition|)
name|updateSection
argument_list|(
name|d
operator|->
name|hover
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QEvent
operator|::
name|Timer
case|:
block|{
name|QTimerEvent
modifier|*
name|te
init|=
cast|static_cast
argument_list|<
name|QTimerEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|te
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|delayedResize
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|d
operator|->
name|delayedResize
operator|.
name|stop
argument_list|()
expr_stmt|;
name|resizeSections
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|QAbstractItemView
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QHeaderView
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|QPainter
name|painter
argument_list|(
name|d
operator|->
name|viewport
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|offset
init|=
name|d
operator|->
name|scrollDelayOffset
decl_stmt|;
name|QRect
name|translatedEventRect
init|=
name|e
operator|->
name|rect
argument_list|()
decl_stmt|;
name|translatedEventRect
operator|.
name|translate
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|int
name|start
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|end
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|start
operator|=
name|visualIndexAt
argument_list|(
name|translatedEventRect
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|end
operator|=
name|visualIndexAt
argument_list|(
name|translatedEventRect
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
name|visualIndexAt
argument_list|(
name|translatedEventRect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|end
operator|=
name|visualIndexAt
argument_list|(
name|translatedEventRect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|reverse
argument_list|()
condition|)
block|{
name|start
operator|=
operator|(
name|start
operator|==
operator|-
literal|1
condition|?
name|count
argument_list|()
operator|-
literal|1
else|:
name|start
operator|)
expr_stmt|;
name|end
operator|=
operator|(
name|end
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|end
operator|)
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
operator|(
name|start
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|start
operator|)
expr_stmt|;
name|end
operator|=
operator|(
name|end
operator|==
operator|-
literal|1
condition|?
name|count
argument_list|()
operator|-
literal|1
else|:
name|end
operator|)
expr_stmt|;
block|}
name|int
name|tmp
init|=
name|start
decl_stmt|;
name|start
operator|=
name|qMin
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|end
operator|=
name|qMax
argument_list|(
name|tmp
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|d
operator|->
name|prepareSectionSelected
argument_list|()
expr_stmt|;
comment|// clear and resize the bit array
name|QRect
name|currentSectionRect
decl_stmt|;
name|int
name|logical
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|d
operator|->
name|viewport
operator|->
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|d
operator|->
name|viewport
operator|->
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|isVisualIndexHidden
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
name|painter
operator|.
name|save
argument_list|()
expr_stmt|;
name|logical
operator|=
name|logicalIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|currentSectionRect
operator|.
name|setRect
argument_list|(
name|sectionViewportPosition
argument_list|(
name|logical
argument_list|)
argument_list|,
literal|0
argument_list|,
name|sectionSize
argument_list|(
name|logical
argument_list|)
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentSectionRect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
name|sectionViewportPosition
argument_list|(
name|logical
argument_list|)
argument_list|,
name|width
argument_list|,
name|sectionSize
argument_list|(
name|logical
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currentSectionRect
operator|.
name|translate
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|QVariant
name|variant
init|=
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logical
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|FontRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|variant
operator|.
name|isValid
argument_list|()
operator|&&
name|variant
operator|.
name|canConvert
argument_list|<
name|QFont
argument_list|>
argument_list|()
condition|)
block|{
name|QFont
name|sectionFont
init|=
name|qvariant_cast
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setFont
argument_list|(
name|sectionFont
argument_list|)
expr_stmt|;
block|}
name|paintSection
argument_list|(
operator|&
name|painter
argument_list|,
name|currentSectionRect
argument_list|,
name|logical
argument_list|)
expr_stmt|;
name|painter
operator|.
name|restore
argument_list|()
expr_stmt|;
block|}
name|QStyleOption
name|opt
decl_stmt|;
name|opt
operator|.
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Paint the area beyond where there are indexes
if|if
condition|(
name|d
operator|->
name|reverse
argument_list|()
condition|)
block|{
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Horizontal
expr_stmt|;
if|if
condition|(
name|currentSectionRect
operator|.
name|left
argument_list|()
operator|>
name|translatedEventRect
operator|.
name|left
argument_list|()
condition|)
block|{
name|opt
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|translatedEventRect
operator|.
name|left
argument_list|()
argument_list|,
literal|0
argument_list|,
name|currentSectionRect
operator|.
name|left
argument_list|()
operator|-
name|translatedEventRect
operator|.
name|left
argument_list|()
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_HeaderEmptyArea
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|painter
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentSectionRect
operator|.
name|right
argument_list|()
operator|<
name|translatedEventRect
operator|.
name|right
argument_list|()
condition|)
block|{
comment|// paint to the right
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Horizontal
expr_stmt|;
name|opt
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|currentSectionRect
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
name|translatedEventRect
operator|.
name|right
argument_list|()
operator|-
name|currentSectionRect
operator|.
name|right
argument_list|()
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_HeaderEmptyArea
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|painter
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentSectionRect
operator|.
name|bottom
argument_list|()
operator|<
name|translatedEventRect
operator|.
name|bottom
argument_list|()
condition|)
block|{
comment|// paint the bottom section
name|opt
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Horizontal
expr_stmt|;
name|opt
operator|.
name|rect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
name|currentSectionRect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
argument_list|,
name|width
argument_list|,
name|height
operator|-
name|currentSectionRect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_HeaderEmptyArea
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|painter
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
literal|0
comment|// ### visualize sections
block|for (int a = 0, i = 0; i< d->sectionItems.count(); ++i) {         QColor color((i& 4 ? 255 : 0), (i& 2 ? 255 : 0), (i& 1 ? 255 : 0));         if (d->orientation == Qt::Horizontal)             painter.fillRect(a - d->offset, 0, d->sectionItems.at(i).size, 4, color);         else             painter.fillRect(0, a - d->offset, 4, d->sectionItems.at(i).size, color);         a += d->sectionItems.at(i).size;     }
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|QHeaderView
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|state
operator|!=
name|QHeaderViewPrivate
operator|::
name|NoState
operator|||
name|e
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
return|return;
name|int
name|pos
init|=
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|e
operator|->
name|x
argument_list|()
else|:
name|e
operator|->
name|y
argument_list|()
decl_stmt|;
name|int
name|handle
init|=
name|d
operator|->
name|sectionHandleAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|d
operator|->
name|originalSize
operator|=
operator|-
literal|1
expr_stmt|;
comment|// clear the stored original size
if|if
condition|(
name|handle
operator|==
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|pressed
operator|=
name|logicalIndexAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|clickableSections
condition|)
emit|emit
name|sectionPressed
argument_list|(
name|d
operator|->
name|pressed
argument_list|)
emit|;
name|bool
name|acceptMoveSection
init|=
name|d
operator|->
name|movableSections
decl_stmt|;
if|if
condition|(
name|acceptMoveSection
operator|&&
name|d
operator|->
name|pressed
operator|==
literal|0
operator|&&
operator|!
name|d
operator|->
name|allowUserMoveOfSection0
condition|)
name|acceptMoveSection
operator|=
literal|false
expr_stmt|;
comment|// Do not allow moving the tree nod
if|if
condition|(
name|acceptMoveSection
condition|)
block|{
name|d
operator|->
name|section
operator|=
name|d
operator|->
name|target
operator|=
name|d
operator|->
name|pressed
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|section
operator|==
operator|-
literal|1
condition|)
return|return;
name|d
operator|->
name|state
operator|=
name|QHeaderViewPrivate
operator|::
name|MoveSection
expr_stmt|;
name|d
operator|->
name|setupSectionIndicator
argument_list|(
name|d
operator|->
name|section
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|clickableSections
operator|&&
name|d
operator|->
name|pressed
operator|!=
operator|-
literal|1
condition|)
block|{
name|updateSection
argument_list|(
name|d
operator|->
name|pressed
argument_list|)
expr_stmt|;
name|d
operator|->
name|state
operator|=
name|QHeaderViewPrivate
operator|::
name|SelectSections
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sectionResizeMode
argument_list|(
name|handle
argument_list|)
operator|==
name|Interactive
condition|)
block|{
name|d
operator|->
name|originalSize
operator|=
name|sectionSize
argument_list|(
name|handle
argument_list|)
expr_stmt|;
name|d
operator|->
name|state
operator|=
name|QHeaderViewPrivate
operator|::
name|ResizeSection
expr_stmt|;
name|d
operator|->
name|section
operator|=
name|handle
expr_stmt|;
name|d
operator|->
name|preventCursorChangeInSetOffset
operator|=
literal|false
expr_stmt|;
block|}
name|d
operator|->
name|firstPos
operator|=
name|pos
expr_stmt|;
name|d
operator|->
name|lastPos
operator|=
name|pos
expr_stmt|;
name|d
operator|->
name|clearCascadingSections
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mouseMoveEvent
name|void
name|QHeaderView
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|e
operator|->
name|x
argument_list|()
else|:
name|e
operator|->
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
return|return;
if|if
condition|(
name|e
operator|->
name|buttons
argument_list|()
operator|==
name|Qt
operator|::
name|NoButton
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
comment|// Under Cocoa, when the mouse button is released, may include an extra
comment|// simulated mouse moved event. The state of the buttons when this event
comment|// is generated is already "no button" and the code below gets executed
comment|// just before the mouseReleaseEvent and resets the state. This prevents
comment|// column dragging from working. So this code is disabled under Cocoa.
name|d
operator|->
name|state
operator|=
name|QHeaderViewPrivate
operator|::
name|NoState
expr_stmt|;
name|d
operator|->
name|pressed
operator|=
operator|-
literal|1
expr_stmt|;
endif|#
directive|endif
block|}
switch|switch
condition|(
name|d
operator|->
name|state
condition|)
block|{
case|case
name|QHeaderViewPrivate
operator|::
name|ResizeSection
case|:
block|{
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|originalSize
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cascadingResizing
condition|)
block|{
name|int
name|delta
init|=
name|d
operator|->
name|reverse
argument_list|()
condition|?
name|d
operator|->
name|lastPos
operator|-
name|pos
else|:
name|pos
operator|-
name|d
operator|->
name|lastPos
decl_stmt|;
name|int
name|visual
init|=
name|visualIndex
argument_list|(
name|d
operator|->
name|section
argument_list|)
decl_stmt|;
name|d
operator|->
name|cascadingResize
argument_list|(
name|visual
argument_list|,
name|d
operator|->
name|headerSectionSize
argument_list|(
name|visual
argument_list|)
operator|+
name|delta
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|delta
init|=
name|d
operator|->
name|reverse
argument_list|()
condition|?
name|d
operator|->
name|firstPos
operator|-
name|pos
else|:
name|pos
operator|-
name|d
operator|->
name|firstPos
decl_stmt|;
name|int
name|newsize
init|=
name|qBound
argument_list|(
name|minimumSectionSize
argument_list|()
argument_list|,
name|d
operator|->
name|originalSize
operator|+
name|delta
argument_list|,
name|maximumSectionSize
argument_list|()
argument_list|)
decl_stmt|;
name|resizeSection
argument_list|(
name|d
operator|->
name|section
argument_list|,
name|newsize
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|lastPos
operator|=
name|pos
expr_stmt|;
return|return;
block|}
case|case
name|QHeaderViewPrivate
operator|::
name|MoveSection
case|:
block|{
if|if
condition|(
name|d
operator|->
name|shouldAutoScroll
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
name|d
operator|->
name|startAutoScroll
argument_list|()
expr_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|pos
operator|-
name|d
operator|->
name|firstPos
argument_list|)
operator|>=
name|QApplication
operator|::
name|startDragDistance
argument_list|()
operator|||
operator|!
name|d
operator|->
name|sectionIndicator
operator|->
name|isHidden
argument_list|()
condition|)
block|{
name|int
name|visual
init|=
name|visualIndexAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|visual
operator|==
operator|-
literal|1
condition|)
return|return;
if|if
condition|(
name|visual
operator|==
literal|0
operator|&&
name|logicalIndex
argument_list|(
literal|0
argument_list|)
operator|==
literal|0
operator|&&
operator|!
name|d
operator|->
name|allowUserMoveOfSection0
condition|)
return|return;
name|int
name|posThreshold
init|=
name|d
operator|->
name|headerSectionPosition
argument_list|(
name|visual
argument_list|)
operator|-
name|d
operator|->
name|offset
operator|+
name|d
operator|->
name|headerSectionSize
argument_list|(
name|visual
argument_list|)
operator|/
literal|2
decl_stmt|;
name|int
name|moving
init|=
name|visualIndex
argument_list|(
name|d
operator|->
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|visual
operator|<
name|moving
condition|)
block|{
if|if
condition|(
name|pos
operator|<
name|posThreshold
condition|)
name|d
operator|->
name|target
operator|=
name|d
operator|->
name|logicalIndex
argument_list|(
name|visual
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|target
operator|=
name|d
operator|->
name|logicalIndex
argument_list|(
name|visual
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|visual
operator|>
name|moving
condition|)
block|{
if|if
condition|(
name|pos
operator|>
name|posThreshold
condition|)
name|d
operator|->
name|target
operator|=
name|d
operator|->
name|logicalIndex
argument_list|(
name|visual
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|target
operator|=
name|d
operator|->
name|logicalIndex
argument_list|(
name|visual
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|target
operator|=
name|d
operator|->
name|section
expr_stmt|;
block|}
name|d
operator|->
name|updateSectionIndicator
argument_list|(
name|d
operator|->
name|section
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
name|QHeaderViewPrivate
operator|::
name|SelectSections
case|:
block|{
name|int
name|logical
init|=
name|logicalIndexAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|logical
operator|==
name|d
operator|->
name|pressed
condition|)
return|return;
comment|// nothing to do
elseif|else
if|if
condition|(
name|d
operator|->
name|pressed
operator|!=
operator|-
literal|1
condition|)
name|updateSection
argument_list|(
name|d
operator|->
name|pressed
argument_list|)
expr_stmt|;
name|d
operator|->
name|pressed
operator|=
name|logical
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|clickableSections
operator|&&
name|logical
operator|!=
operator|-
literal|1
condition|)
block|{
emit|emit
name|sectionEntered
argument_list|(
name|d
operator|->
name|pressed
argument_list|)
emit|;
name|updateSection
argument_list|(
name|d
operator|->
name|pressed
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
name|QHeaderViewPrivate
operator|::
name|NoState
case|:
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|int
name|handle
init|=
name|d
operator|->
name|sectionHandleAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|bool
name|hasCursor
init|=
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetCursor
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
operator|!=
operator|-
literal|1
operator|&&
operator|(
name|sectionResizeMode
argument_list|(
name|handle
argument_list|)
operator|==
name|Interactive
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|hasCursor
condition|)
name|setCursor
argument_list|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|Qt
operator|::
name|SplitHCursor
else|:
name|Qt
operator|::
name|SplitVCursor
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasCursor
condition|)
block|{
name|unsetCursor
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
return|return;
block|}
default|default:
break|break;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QHeaderView
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|e
operator|->
name|x
argument_list|()
else|:
name|e
operator|->
name|y
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|state
condition|)
block|{
case|case
name|QHeaderViewPrivate
operator|::
name|MoveSection
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|sectionIndicator
operator|->
name|isHidden
argument_list|()
condition|)
block|{
comment|// moving
name|int
name|from
init|=
name|visualIndex
argument_list|(
name|d
operator|->
name|section
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|from
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|to
init|=
name|visualIndex
argument_list|(
name|d
operator|->
name|target
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|to
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|moveSection
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|d
operator|->
name|section
operator|=
name|d
operator|->
name|target
operator|=
operator|-
literal|1
expr_stmt|;
name|d
operator|->
name|updateSectionIndicator
argument_list|(
name|d
operator|->
name|section
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// not moving
case|case
name|QHeaderViewPrivate
operator|::
name|SelectSections
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|clickableSections
condition|)
block|{
name|int
name|section
init|=
name|logicalIndexAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|updateSection
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
comment|// fall through
case|case
name|QHeaderViewPrivate
operator|::
name|NoState
case|:
if|if
condition|(
name|d
operator|->
name|clickableSections
condition|)
block|{
name|int
name|section
init|=
name|logicalIndexAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
operator|-
literal|1
operator|&&
name|section
operator|==
name|d
operator|->
name|pressed
condition|)
block|{
name|d
operator|->
name|flipSortIndicator
argument_list|(
name|section
argument_list|)
expr_stmt|;
emit|emit
name|sectionClicked
argument_list|(
name|section
argument_list|)
emit|;
block|}
if|if
condition|(
name|d
operator|->
name|pressed
operator|!=
operator|-
literal|1
condition|)
name|updateSection
argument_list|(
name|d
operator|->
name|pressed
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QHeaderViewPrivate
operator|::
name|ResizeSection
case|:
name|d
operator|->
name|originalSize
operator|=
operator|-
literal|1
expr_stmt|;
name|d
operator|->
name|clearCascadingSections
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|d
operator|->
name|state
operator|=
name|QHeaderViewPrivate
operator|::
name|NoState
expr_stmt|;
name|d
operator|->
name|pressed
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mouseDoubleClickEvent
name|void
name|QHeaderView
operator|::
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|e
operator|->
name|x
argument_list|()
else|:
name|e
operator|->
name|y
argument_list|()
decl_stmt|;
name|int
name|handle
init|=
name|d
operator|->
name|sectionHandleAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
operator|>
operator|-
literal|1
operator|&&
name|sectionResizeMode
argument_list|(
name|handle
argument_list|)
operator|==
name|Interactive
condition|)
block|{
emit|emit
name|sectionHandleDoubleClicked
argument_list|(
name|handle
argument_list|)
emit|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|Qt
operator|::
name|CursorShape
name|splitCursor
init|=
operator|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|Qt
operator|::
name|SplitHCursor
else|:
name|Qt
operator|::
name|SplitVCursor
decl_stmt|;
if|if
condition|(
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
operator|==
name|splitCursor
condition|)
block|{
comment|// signal handlers may have changed the section size
name|handle
operator|=
name|d
operator|->
name|sectionHandleAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|handle
operator|>
operator|-
literal|1
operator|&&
name|sectionResizeMode
argument_list|(
name|handle
argument_list|)
operator|==
name|Interactive
operator|)
condition|)
name|setCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
else|else
block|{
emit|emit
name|sectionDoubleClicked
argument_list|(
name|logicalIndexAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|)
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|viewportEvent
name|bool
name|QHeaderView
operator|::
name|viewportEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
case|case
name|QEvent
operator|::
name|ToolTip
case|:
block|{
name|QHelpEvent
modifier|*
name|he
init|=
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|int
name|logical
init|=
name|logicalIndexAt
argument_list|(
name|he
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|logical
operator|!=
operator|-
literal|1
condition|)
block|{
name|QVariant
name|variant
init|=
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logical
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|ToolTipRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|variant
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QToolTip
operator|::
name|showText
argument_list|(
name|he
operator|->
name|globalPos
argument_list|()
argument_list|,
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
case|case
name|QEvent
operator|::
name|QueryWhatsThis
case|:
block|{
name|QHelpEvent
modifier|*
name|he
init|=
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|int
name|logical
init|=
name|logicalIndexAt
argument_list|(
name|he
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|logical
operator|!=
operator|-
literal|1
operator|&&
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logical
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|WhatsThisRole
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|true
return|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|WhatsThis
case|:
block|{
name|QHelpEvent
modifier|*
name|he
init|=
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|int
name|logical
init|=
name|logicalIndexAt
argument_list|(
name|he
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|logical
operator|!=
operator|-
literal|1
condition|)
block|{
name|QVariant
name|whatsthis
init|=
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logical
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|WhatsThisRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|whatsthis
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QWhatsThis
operator|::
name|showText
argument_list|(
name|he
operator|->
name|globalPos
argument_list|()
argument_list|,
name|whatsthis
operator|.
name|toString
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_WHATSTHIS
ifndef|#
directive|ifndef
name|QT_NO_STATUSTIP
case|case
name|QEvent
operator|::
name|StatusTip
case|:
block|{
name|QHelpEvent
modifier|*
name|he
init|=
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|int
name|logical
init|=
name|logicalIndexAt
argument_list|(
name|he
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|logical
operator|!=
operator|-
literal|1
condition|)
block|{
name|QString
name|statustip
init|=
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logical
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|StatusTipRole
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|statustip
operator|.
name|isEmpty
argument_list|()
condition|)
name|setStatusTip
argument_list|(
name|statustip
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_STATUSTIP
case|case
name|QEvent
operator|::
name|Hide
case|:
case|case
name|QEvent
operator|::
name|Show
case|:
case|case
name|QEvent
operator|::
name|FontChange
case|:
case|case
name|QEvent
operator|::
name|StyleChange
case|:
block|{
name|QAbstractScrollArea
modifier|*
name|parent
init|=
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|&&
name|parent
operator|->
name|isVisible
argument_list|()
condition|)
comment|// Only resize if we have a visible parent
name|resizeSections
argument_list|()
expr_stmt|;
emit|emit
name|geometriesChanged
argument_list|()
emit|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|ContextMenu
case|:
block|{
name|d
operator|->
name|state
operator|=
name|QHeaderViewPrivate
operator|::
name|NoState
expr_stmt|;
name|d
operator|->
name|pressed
operator|=
name|d
operator|->
name|section
operator|=
name|d
operator|->
name|target
operator|=
operator|-
literal|1
expr_stmt|;
name|d
operator|->
name|updateSectionIndicator
argument_list|(
name|d
operator|->
name|section
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|Wheel
case|:
block|{
name|QAbstractScrollArea
modifier|*
name|asa
init|=
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|asa
condition|)
return|return
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|asa
operator|->
name|viewport
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|QAbstractItemView
operator|::
name|viewportEvent
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Paints the section specified by the given \a logicalIndex, using the given     \a painter and \a rect.      Normally, you do not have to call this function. */
end_comment
begin_function
DECL|function|paintSection
name|void
name|QHeaderView
operator|::
name|paintSection
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|logicalIndex
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return;
comment|// get the state of the section
name|QStyleOptionHeader
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QStyle
operator|::
name|State
name|state
init|=
name|QStyle
operator|::
name|State_None
decl_stmt|;
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
name|state
operator||=
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|isActiveWindow
argument_list|()
condition|)
name|state
operator||=
name|QStyle
operator|::
name|State_Active
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|clickableSections
condition|)
block|{
if|if
condition|(
name|logicalIndex
operator|==
name|d
operator|->
name|hover
condition|)
name|state
operator||=
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
if|if
condition|(
name|logicalIndex
operator|==
name|d
operator|->
name|pressed
condition|)
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|highlightSelected
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|sectionIntersectsSelection
argument_list|(
name|logicalIndex
argument_list|)
condition|)
name|state
operator||=
name|QStyle
operator|::
name|State_On
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isSectionSelected
argument_list|(
name|logicalIndex
argument_list|)
condition|)
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isSortIndicatorShown
argument_list|()
operator|&&
name|sortIndicatorSection
argument_list|()
operator|==
name|logicalIndex
condition|)
name|opt
operator|.
name|sortIndicator
operator|=
operator|(
name|sortIndicatorOrder
argument_list|()
operator|==
name|Qt
operator|::
name|AscendingOrder
operator|)
condition|?
name|QStyleOptionHeader
operator|::
name|SortDown
else|:
name|QStyleOptionHeader
operator|::
name|SortUp
expr_stmt|;
comment|// setup the style options structure
name|QVariant
name|textAlignment
init|=
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logicalIndex
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|TextAlignmentRole
argument_list|)
decl_stmt|;
name|opt
operator|.
name|rect
operator|=
name|rect
expr_stmt|;
name|opt
operator|.
name|section
operator|=
name|logicalIndex
expr_stmt|;
name|opt
operator|.
name|state
operator||=
name|state
expr_stmt|;
name|opt
operator|.
name|textAlignment
operator|=
name|Qt
operator|::
name|Alignment
argument_list|(
name|textAlignment
operator|.
name|isValid
argument_list|()
condition|?
name|Qt
operator|::
name|Alignment
argument_list|(
name|textAlignment
operator|.
name|toInt
argument_list|()
argument_list|)
else|:
name|d
operator|->
name|defaultAlignment
argument_list|)
expr_stmt|;
name|opt
operator|.
name|iconAlignment
operator|=
name|Qt
operator|::
name|AlignVCenter
expr_stmt|;
name|opt
operator|.
name|text
operator|=
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logicalIndex
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|textElideMode
operator|!=
name|Qt
operator|::
name|ElideNone
condition|)
name|opt
operator|.
name|text
operator|=
name|opt
operator|.
name|fontMetrics
operator|.
name|elidedText
argument_list|(
name|opt
operator|.
name|text
argument_list|,
name|d
operator|->
name|textElideMode
argument_list|,
name|rect
operator|.
name|width
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
name|QVariant
name|variant
init|=
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logicalIndex
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
decl_stmt|;
name|opt
operator|.
name|icon
operator|=
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|variant
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|.
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|opt
operator|.
name|icon
operator|=
name|qvariant_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|variant
argument_list|)
expr_stmt|;
name|QVariant
name|foregroundBrush
init|=
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logicalIndex
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|ForegroundRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|foregroundBrush
operator|.
name|canConvert
argument_list|<
name|QBrush
argument_list|>
argument_list|()
condition|)
name|opt
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|foregroundBrush
argument_list|)
argument_list|)
expr_stmt|;
name|QPointF
name|oldBO
init|=
name|painter
operator|->
name|brushOrigin
argument_list|()
decl_stmt|;
name|QVariant
name|backgroundBrush
init|=
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logicalIndex
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|BackgroundRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|backgroundBrush
operator|.
name|canConvert
argument_list|<
name|QBrush
argument_list|>
argument_list|()
condition|)
block|{
name|opt
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|backgroundBrush
argument_list|)
argument_list|)
expr_stmt|;
name|opt
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|backgroundBrush
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|opt
operator|.
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// the section position
name|int
name|visual
init|=
name|visualIndex
argument_list|(
name|logicalIndex
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|visual
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|bool
name|first
init|=
name|d
operator|->
name|isFirstVisibleSection
argument_list|(
name|visual
argument_list|)
decl_stmt|;
name|bool
name|last
init|=
name|d
operator|->
name|isLastVisibleSection
argument_list|(
name|visual
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|&&
name|last
condition|)
name|opt
operator|.
name|position
operator|=
name|QStyleOptionHeader
operator|::
name|OnlyOneSection
expr_stmt|;
elseif|else
if|if
condition|(
name|first
condition|)
name|opt
operator|.
name|position
operator|=
name|QStyleOptionHeader
operator|::
name|Beginning
expr_stmt|;
elseif|else
if|if
condition|(
name|last
condition|)
name|opt
operator|.
name|position
operator|=
name|QStyleOptionHeader
operator|::
name|End
expr_stmt|;
else|else
name|opt
operator|.
name|position
operator|=
name|QStyleOptionHeader
operator|::
name|Middle
expr_stmt|;
name|opt
operator|.
name|orientation
operator|=
name|d
operator|->
name|orientation
expr_stmt|;
comment|// the selected position
name|bool
name|previousSelected
init|=
name|d
operator|->
name|isSectionSelected
argument_list|(
name|this
operator|->
name|logicalIndex
argument_list|(
name|visual
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|nextSelected
init|=
name|d
operator|->
name|isSectionSelected
argument_list|(
name|this
operator|->
name|logicalIndex
argument_list|(
name|visual
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousSelected
operator|&&
name|nextSelected
condition|)
name|opt
operator|.
name|selectedPosition
operator|=
name|QStyleOptionHeader
operator|::
name|NextAndPreviousAreSelected
expr_stmt|;
elseif|else
if|if
condition|(
name|previousSelected
condition|)
name|opt
operator|.
name|selectedPosition
operator|=
name|QStyleOptionHeader
operator|::
name|PreviousIsSelected
expr_stmt|;
elseif|else
if|if
condition|(
name|nextSelected
condition|)
name|opt
operator|.
name|selectedPosition
operator|=
name|QStyleOptionHeader
operator|::
name|NextIsSelected
expr_stmt|;
else|else
name|opt
operator|.
name|selectedPosition
operator|=
name|QStyleOptionHeader
operator|::
name|NotAdjacent
expr_stmt|;
comment|// draw the section
name|style
argument_list|()
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_Header
argument_list|,
operator|&
name|opt
argument_list|,
name|painter
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|oldBO
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the size of the contents of the section specified by the given     \a logicalIndex.      \sa defaultSectionSize() */
end_comment
begin_function
DECL|function|sectionSizeFromContents
name|QSize
name|QHeaderView
operator|::
name|sectionSizeFromContents
parameter_list|(
name|int
name|logicalIndex
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|logicalIndex
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|ensurePolished
argument_list|()
expr_stmt|;
comment|// use SizeHintRole
name|QVariant
name|variant
init|=
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logicalIndex
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|SizeHintRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|variant
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|qvariant_cast
argument_list|<
name|QSize
argument_list|>
argument_list|(
name|variant
argument_list|)
return|;
comment|// otherwise use the contents
name|QStyleOptionHeader
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|section
operator|=
name|logicalIndex
expr_stmt|;
name|QVariant
name|var
init|=
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logicalIndex
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|FontRole
argument_list|)
decl_stmt|;
name|QFont
name|fnt
decl_stmt|;
if|if
condition|(
name|var
operator|.
name|isValid
argument_list|()
operator|&&
name|var
operator|.
name|canConvert
argument_list|<
name|QFont
argument_list|>
argument_list|()
condition|)
name|fnt
operator|=
name|qvariant_cast
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|var
argument_list|)
expr_stmt|;
else|else
name|fnt
operator|=
name|font
argument_list|()
expr_stmt|;
name|fnt
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|opt
operator|.
name|fontMetrics
operator|=
name|QFontMetrics
argument_list|(
name|fnt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|text
operator|=
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logicalIndex
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|variant
operator|=
name|d
operator|->
name|model
operator|->
name|headerData
argument_list|(
name|logicalIndex
argument_list|,
name|d
operator|->
name|orientation
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
expr_stmt|;
name|opt
operator|.
name|icon
operator|=
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|variant
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|.
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|opt
operator|.
name|icon
operator|=
name|qvariant_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|variant
argument_list|)
expr_stmt|;
name|QSize
name|size
init|=
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_HeaderSection
argument_list|,
operator|&
name|opt
argument_list|,
name|QSize
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSortIndicatorShown
argument_list|()
condition|)
block|{
name|int
name|margin
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_HeaderMargin
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|size
operator|.
name|rwidth
argument_list|()
operator|+=
name|size
operator|.
name|height
argument_list|()
operator|+
name|margin
expr_stmt|;
else|else
name|size
operator|.
name|rheight
argument_list|()
operator|+=
name|size
operator|.
name|width
argument_list|()
operator|+
name|margin
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the horizontal offset of the header. This is 0 for vertical     headers.      \sa offset() */
end_comment
begin_function
DECL|function|horizontalOffset
name|int
name|QHeaderView
operator|::
name|horizontalOffset
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
return|return
name|d
operator|->
name|offset
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the vertical offset of the header. This is 0 for horizontal     headers.      \sa offset() */
end_comment
begin_function
DECL|function|verticalOffset
name|int
name|QHeaderView
operator|::
name|verticalOffset
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
condition|)
return|return
name|d
operator|->
name|offset
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp     \internal */
end_comment
begin_function
DECL|function|updateGeometries
name|void
name|QHeaderView
operator|::
name|updateGeometries
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|layoutChildren
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasAutoResizeSections
argument_list|()
condition|)
name|d
operator|->
name|doDelayedResizeSections
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp     \internal */
end_comment
begin_function
DECL|function|scrollContentsBy
name|void
name|QHeaderView
operator|::
name|scrollContentsBy
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|scrollDirtyRegion
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp     \internal */
end_comment
begin_function
DECL|function|dataChanged
name|void
name|QHeaderView
operator|::
name|dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|d
operator|->
name|invalidateCachedSizeHint
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasAutoResizeSections
argument_list|()
condition|)
block|{
name|bool
name|resizeRequired
init|=
name|d
operator|->
name|globalResizeMode
operator|==
name|ResizeToContents
decl_stmt|;
name|int
name|first
init|=
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|topLeft
operator|.
name|column
argument_list|()
else|:
name|topLeft
operator|.
name|row
argument_list|()
decl_stmt|;
name|int
name|last
init|=
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|bottomRight
operator|.
name|column
argument_list|()
else|:
name|bottomRight
operator|.
name|row
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|first
init|;
name|i
operator|<=
name|last
operator|&&
operator|!
name|resizeRequired
condition|;
operator|++
name|i
control|)
name|resizeRequired
operator|=
operator|(
name|sectionResizeMode
argument_list|(
name|i
argument_list|)
operator|==
name|ResizeToContents
operator|)
expr_stmt|;
if|if
condition|(
name|resizeRequired
condition|)
name|d
operator|->
name|doDelayedResizeSections
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp     \internal      Empty implementation because the header doesn't show QModelIndex items. */
end_comment
begin_function
DECL|function|rowsInserted
name|void
name|QHeaderView
operator|::
name|rowsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{
comment|// do nothing
block|}
end_function
begin_comment
comment|/*!     \reimp     \internal      Empty implementation because the header doesn't show QModelIndex items. */
end_comment
begin_function
DECL|function|visualRect
name|QRect
name|QHeaderView
operator|::
name|visualRect
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp     \internal      Empty implementation because the header doesn't show QModelIndex items. */
end_comment
begin_function
DECL|function|scrollTo
name|void
name|QHeaderView
operator|::
name|scrollTo
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|ScrollHint
parameter_list|)
block|{
comment|// do nothing - the header only displays sections
block|}
end_function
begin_comment
comment|/*!     \reimp     \internal      Empty implementation because the header doesn't show QModelIndex items. */
end_comment
begin_function
DECL|function|indexAt
name|QModelIndex
name|QHeaderView
operator|::
name|indexAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp     \internal      Empty implementation because the header doesn't show QModelIndex items. */
end_comment
begin_function
DECL|function|isIndexHidden
name|bool
name|QHeaderView
operator|::
name|isIndexHidden
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|true
return|;
comment|// the header view has no items, just sections
block|}
end_function
begin_comment
comment|/*!     \reimp     \internal      Empty implementation because the header doesn't show QModelIndex items. */
end_comment
begin_function
DECL|function|moveCursor
name|QModelIndex
name|QHeaderView
operator|::
name|moveCursor
parameter_list|(
name|CursorAction
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
parameter_list|)
block|{
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp      Selects the items in the given \a rect according to the specified     \a flags.      The base class implementation does nothing. */
end_comment
begin_function
DECL|function|setSelection
name|void
name|QHeaderView
operator|::
name|setSelection
parameter_list|(
specifier|const
name|QRect
modifier|&
parameter_list|,
name|QItemSelectionModel
operator|::
name|SelectionFlags
parameter_list|)
block|{
comment|// do nothing
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|visualRegionForSelection
name|QRegion
name|QHeaderView
operator|::
name|visualRegionForSelection
parameter_list|(
specifier|const
name|QItemSelection
modifier|&
name|selection
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
specifier|const
name|int
name|max
init|=
name|d
operator|->
name|modelSectionCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|int
name|left
init|=
name|max
decl_stmt|;
name|int
name|right
init|=
literal|0
decl_stmt|;
name|int
name|rangeLeft
decl_stmt|,
name|rangeRight
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selection
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QItemSelectionRange
name|r
init|=
name|selection
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|parent
argument_list|()
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|r
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
comment|// we only know about toplevel items and we don't want invalid ranges
comment|// FIXME an item inside the range may be the leftmost or rightmost
name|rangeLeft
operator|=
name|visualIndex
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rangeLeft
operator|==
operator|-
literal|1
condition|)
comment|// in some cases users may change the selections
continue|continue;
comment|// before we have a chance to do the layout
name|rangeRight
operator|=
name|visualIndex
argument_list|(
name|r
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rangeRight
operator|==
operator|-
literal|1
condition|)
comment|// in some cases users may change the selections
continue|continue;
comment|// before we have a chance to do the layout
if|if
condition|(
name|rangeLeft
operator|<
name|left
condition|)
name|left
operator|=
name|rangeLeft
expr_stmt|;
if|if
condition|(
name|rangeRight
operator|>
name|right
condition|)
name|right
operator|=
name|rangeRight
expr_stmt|;
block|}
name|int
name|logicalLeft
init|=
name|logicalIndex
argument_list|(
name|left
argument_list|)
decl_stmt|;
name|int
name|logicalRight
init|=
name|logicalIndex
argument_list|(
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|logicalLeft
operator|<
literal|0
operator|||
name|logicalLeft
operator|>=
name|count
argument_list|()
operator|||
name|logicalRight
operator|<
literal|0
operator|||
name|logicalRight
operator|>=
name|count
argument_list|()
condition|)
return|return
name|QRegion
argument_list|()
return|;
name|int
name|leftPos
init|=
name|sectionViewportPosition
argument_list|(
name|logicalLeft
argument_list|)
decl_stmt|;
name|int
name|rightPos
init|=
name|sectionViewportPosition
argument_list|(
name|logicalRight
argument_list|)
decl_stmt|;
name|rightPos
operator|+=
name|sectionSize
argument_list|(
name|logicalRight
argument_list|)
expr_stmt|;
return|return
name|QRect
argument_list|(
name|leftPos
argument_list|,
literal|0
argument_list|,
name|rightPos
operator|-
name|leftPos
argument_list|,
name|height
argument_list|()
argument_list|)
return|;
block|}
comment|// orientation() == Qt::Vertical
name|int
name|top
init|=
name|max
decl_stmt|;
name|int
name|bottom
init|=
literal|0
decl_stmt|;
name|int
name|rangeTop
decl_stmt|,
name|rangeBottom
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selection
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QItemSelectionRange
name|r
init|=
name|selection
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|parent
argument_list|()
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|r
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
comment|// we only know about toplevel items
comment|// FIXME an item inside the range may be the leftmost or rightmost
name|rangeTop
operator|=
name|visualIndex
argument_list|(
name|r
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rangeTop
operator|==
operator|-
literal|1
condition|)
comment|// in some cases users may change the selections
continue|continue;
comment|// before we have a chance to do the layout
name|rangeBottom
operator|=
name|visualIndex
argument_list|(
name|r
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rangeBottom
operator|==
operator|-
literal|1
condition|)
comment|// in some cases users may change the selections
continue|continue;
comment|// before we have a chance to do the layout
if|if
condition|(
name|rangeTop
operator|<
name|top
condition|)
name|top
operator|=
name|rangeTop
expr_stmt|;
if|if
condition|(
name|rangeBottom
operator|>
name|bottom
condition|)
name|bottom
operator|=
name|rangeBottom
expr_stmt|;
block|}
name|int
name|logicalTop
init|=
name|logicalIndex
argument_list|(
name|top
argument_list|)
decl_stmt|;
name|int
name|logicalBottom
init|=
name|logicalIndex
argument_list|(
name|bottom
argument_list|)
decl_stmt|;
if|if
condition|(
name|logicalTop
operator|==
operator|-
literal|1
operator|||
name|logicalBottom
operator|==
operator|-
literal|1
condition|)
return|return
name|QRect
argument_list|()
return|;
name|int
name|topPos
init|=
name|sectionViewportPosition
argument_list|(
name|logicalTop
argument_list|)
decl_stmt|;
name|int
name|bottomPos
init|=
name|sectionViewportPosition
argument_list|(
name|logicalBottom
argument_list|)
operator|+
name|sectionSize
argument_list|(
name|logicalBottom
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
literal|0
argument_list|,
name|topPos
argument_list|,
name|width
argument_list|()
argument_list|,
name|bottomPos
operator|-
name|topPos
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// private implementation
end_comment
begin_function
DECL|function|sectionHandleAt
name|int
name|QHeaderViewPrivate
operator|::
name|sectionHandleAt
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|int
name|visual
init|=
name|q
operator|->
name|visualIndexAt
argument_list|(
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|visual
operator|==
operator|-
literal|1
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|log
init|=
name|logicalIndex
argument_list|(
name|visual
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|q
operator|->
name|sectionViewportPosition
argument_list|(
name|log
argument_list|)
decl_stmt|;
name|int
name|grip
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_HeaderGripMargin
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|bool
name|atLeft
init|=
name|position
operator|<
name|pos
operator|+
name|grip
decl_stmt|;
name|bool
name|atRight
init|=
operator|(
name|position
operator|>
name|pos
operator|+
name|q
operator|->
name|sectionSize
argument_list|(
name|log
argument_list|)
operator|-
name|grip
operator|)
decl_stmt|;
if|if
condition|(
name|reverse
argument_list|()
condition|)
name|qSwap
argument_list|(
name|atLeft
argument_list|,
name|atRight
argument_list|)
expr_stmt|;
if|if
condition|(
name|atLeft
condition|)
block|{
comment|//grip at the beginning of the section
while|while
condition|(
name|visual
operator|>
operator|-
literal|1
condition|)
block|{
name|int
name|logical
init|=
name|q
operator|->
name|logicalIndex
argument_list|(
operator|--
name|visual
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isSectionHidden
argument_list|(
name|logical
argument_list|)
condition|)
return|return
name|logical
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|atRight
condition|)
block|{
comment|//grip at the end of the section
return|return
name|log
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|setupSectionIndicator
name|void
name|QHeaderViewPrivate
operator|::
name|setupSectionIndicator
parameter_list|(
name|int
name|section
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sectionIndicator
condition|)
block|{
name|sectionIndicator
operator|=
operator|new
name|QLabel
argument_list|(
name|viewport
argument_list|)
expr_stmt|;
block|}
name|int
name|w
decl_stmt|,
name|h
decl_stmt|;
name|int
name|p
init|=
name|q
operator|->
name|sectionViewportPosition
argument_list|(
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|w
operator|=
name|q
operator|->
name|sectionSize
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|h
operator|=
name|viewport
operator|->
name|height
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|w
operator|=
name|viewport
operator|->
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|q
operator|->
name|sectionSize
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
name|sectionIndicator
operator|->
name|resize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|QPixmap
name|pm
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|45
argument_list|)
argument_list|)
expr_stmt|;
name|QRect
name|rect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|pm
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setOpacity
argument_list|(
literal|0.75
argument_list|)
expr_stmt|;
name|q
operator|->
name|paintSection
argument_list|(
operator|&
name|painter
argument_list|,
name|rect
argument_list|,
name|section
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
name|sectionIndicator
operator|->
name|setPixmap
argument_list|(
name|pm
argument_list|)
expr_stmt|;
name|sectionIndicatorOffset
operator|=
name|position
operator|-
name|qMax
argument_list|(
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateSectionIndicator
name|void
name|QHeaderViewPrivate
operator|::
name|updateSectionIndicator
parameter_list|(
name|int
name|section
parameter_list|,
name|int
name|position
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sectionIndicator
condition|)
return|return;
if|if
condition|(
name|section
operator|==
operator|-
literal|1
operator|||
name|target
operator|==
operator|-
literal|1
condition|)
block|{
name|sectionIndicator
operator|->
name|hide
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|sectionIndicator
operator|->
name|move
argument_list|(
name|position
operator|-
name|sectionIndicatorOffset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|sectionIndicator
operator|->
name|move
argument_list|(
literal|0
argument_list|,
name|position
operator|-
name|sectionIndicatorOffset
argument_list|)
expr_stmt|;
name|sectionIndicator
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Initialize \a option with the values from this QHeaderView. This method is     useful for subclasses when they need a QStyleOptionHeader, but do not want     to fill in all the information themselves.      \sa QStyleOption::initFrom() */
end_comment
begin_function
DECL|function|initStyleOption
name|void
name|QHeaderView
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionHeader
modifier|*
name|option
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|option
operator|->
name|state
operator|=
name|QStyle
operator|::
name|State_None
operator||
name|QStyle
operator|::
name|State_Raised
expr_stmt|;
name|option
operator|->
name|orientation
operator|=
name|d
operator|->
name|orientation
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Horizontal
expr_stmt|;
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
name|option
operator|->
name|section
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isSectionSelected
name|bool
name|QHeaderViewPrivate
operator|::
name|isSectionSelected
parameter_list|(
name|int
name|section
parameter_list|)
specifier|const
block|{
name|int
name|i
init|=
name|section
operator|*
literal|2
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
operator|||
name|i
operator|>=
name|sectionSelected
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|sectionSelected
operator|.
name|testBit
argument_list|(
name|i
argument_list|)
condition|)
comment|// if the value was cached
return|return
name|sectionSelected
operator|.
name|testBit
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
name|bool
name|s
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|s
operator|=
name|isColumnSelected
argument_list|(
name|section
argument_list|)
expr_stmt|;
else|else
name|s
operator|=
name|isRowSelected
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|sectionSelected
operator|.
name|setBit
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// selection state
name|sectionSelected
operator|.
name|setBit
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// cache state
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|isFirstVisibleSection
name|bool
name|QHeaderViewPrivate
operator|::
name|isFirstVisibleSection
parameter_list|(
name|int
name|section
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|sectionStartposRecalc
condition|)
name|recalcSectionStartPos
argument_list|()
expr_stmt|;
specifier|const
name|SectionItem
modifier|&
name|item
init|=
name|sectionItems
operator|.
name|at
argument_list|(
name|section
argument_list|)
decl_stmt|;
return|return
name|item
operator|.
name|size
operator|>
literal|0
operator|&&
name|item
operator|.
name|calculated_startpos
operator|==
literal|0
return|;
block|}
end_function
begin_function
DECL|function|isLastVisibleSection
name|bool
name|QHeaderViewPrivate
operator|::
name|isLastVisibleSection
parameter_list|(
name|int
name|section
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|sectionStartposRecalc
condition|)
name|recalcSectionStartPos
argument_list|()
expr_stmt|;
specifier|const
name|SectionItem
modifier|&
name|item
init|=
name|sectionItems
operator|.
name|at
argument_list|(
name|section
argument_list|)
decl_stmt|;
return|return
name|item
operator|.
name|size
operator|>
literal|0
operator|&&
name|item
operator|.
name|calculatedEndPos
argument_list|()
operator|==
name|length
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Returns the last visible (ie. not hidden) visual index */
end_comment
begin_function
DECL|function|lastVisibleVisualIndex
name|int
name|QHeaderViewPrivate
operator|::
name|lastVisibleVisualIndex
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QHeaderView
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|visual
init|=
name|q
operator|->
name|count
argument_list|()
operator|-
literal|1
init|;
name|visual
operator|>=
literal|0
condition|;
operator|--
name|visual
control|)
block|{
if|if
condition|(
operator|!
name|q
operator|->
name|isSectionHidden
argument_list|(
name|q
operator|->
name|logicalIndex
argument_list|(
name|visual
argument_list|)
argument_list|)
condition|)
return|return
name|visual
return|;
block|}
comment|//default value if no section is actually visible
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Go through and resize all of the sections applying stretchLastSection,     manual stretches, sizes, and useGlobalMode.      The different resize modes are:     Interactive - the user decides the size     Stretch - take up whatever space is left     Fixed - the size is set programmatically outside the header     ResizeToContentes - the size is set based on the contents of the row or column in the parent view      The resize mode will not affect the last section if stretchLastSection is true. */
end_comment
begin_function
DECL|function|resizeSections
name|void
name|QHeaderViewPrivate
operator|::
name|resizeSections
parameter_list|(
name|QHeaderView
operator|::
name|ResizeMode
name|globalMode
parameter_list|,
name|bool
name|useGlobalMode
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
comment|//stop the timer in case it is delayed
name|delayedResize
operator|.
name|stop
argument_list|()
expr_stmt|;
name|executePostedLayout
argument_list|()
expr_stmt|;
if|if
condition|(
name|sectionCount
argument_list|()
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|resizeRecursionBlock
condition|)
return|return;
name|resizeRecursionBlock
operator|=
literal|true
expr_stmt|;
name|invalidateCachedSizeHint
argument_list|()
expr_stmt|;
specifier|const
name|int
name|lastVisibleSection
init|=
name|lastVisibleVisualIndex
argument_list|()
decl_stmt|;
comment|// find stretchLastSection if we have it
name|int
name|stretchSection
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|stretchLastSection
operator|&&
operator|!
name|useGlobalMode
condition|)
name|stretchSection
operator|=
name|lastVisibleVisualIndex
argument_list|()
expr_stmt|;
comment|// count up the number of stretched sections and how much space left for them
name|int
name|lengthToStretch
init|=
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|viewport
operator|->
name|width
argument_list|()
else|:
name|viewport
operator|->
name|height
argument_list|()
operator|)
decl_stmt|;
name|int
name|numberOfStretchedSections
init|=
literal|0
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|section_sizes
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sectionCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|isVisualIndexHidden
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
name|QHeaderView
operator|::
name|ResizeMode
name|resizeMode
decl_stmt|;
if|if
condition|(
name|useGlobalMode
operator|&&
operator|(
name|i
operator|!=
name|stretchSection
operator|)
condition|)
name|resizeMode
operator|=
name|globalMode
expr_stmt|;
else|else
name|resizeMode
operator|=
operator|(
name|i
operator|==
name|stretchSection
condition|?
name|QHeaderView
operator|::
name|Stretch
else|:
name|headerSectionResizeMode
argument_list|(
name|i
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|resizeMode
operator|==
name|QHeaderView
operator|::
name|Stretch
condition|)
block|{
operator|++
name|numberOfStretchedSections
expr_stmt|;
name|section_sizes
operator|.
name|append
argument_list|(
name|headerSectionSize
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// because it isn't stretch, determine its width and remove that from lengthToStretch
name|int
name|sectionSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|resizeMode
operator|==
name|QHeaderView
operator|::
name|Interactive
operator|||
name|resizeMode
operator|==
name|QHeaderView
operator|::
name|Fixed
condition|)
block|{
name|sectionSize
operator|=
name|headerSectionSize
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// resizeMode == QHeaderView::ResizeToContents
name|int
name|logicalIndex
init|=
name|q
operator|->
name|logicalIndex
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sectionSize
operator|=
name|qMax
argument_list|(
name|viewSectionSizeHint
argument_list|(
name|logicalIndex
argument_list|)
argument_list|,
name|q
operator|->
name|sectionSizeHint
argument_list|(
name|logicalIndex
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sectionSize
operator|>
name|q
operator|->
name|maximumSectionSize
argument_list|()
condition|)
name|sectionSize
operator|=
name|q
operator|->
name|maximumSectionSize
argument_list|()
expr_stmt|;
block|}
name|section_sizes
operator|.
name|append
argument_list|(
name|sectionSize
argument_list|)
expr_stmt|;
name|lengthToStretch
operator|-=
name|sectionSize
expr_stmt|;
block|}
comment|// calculate the new length for all of the stretched sections
name|int
name|stretchSectionLength
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|pixelReminder
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|numberOfStretchedSections
operator|>
literal|0
operator|&&
name|lengthToStretch
operator|>
literal|0
condition|)
block|{
comment|// we have room to stretch in
name|int
name|hintLengthForEveryStretchedSection
init|=
name|lengthToStretch
operator|/
name|numberOfStretchedSections
decl_stmt|;
name|stretchSectionLength
operator|=
name|qMax
argument_list|(
name|hintLengthForEveryStretchedSection
argument_list|,
name|q
operator|->
name|minimumSectionSize
argument_list|()
argument_list|)
expr_stmt|;
name|pixelReminder
operator|=
name|lengthToStretch
operator|%
name|numberOfStretchedSections
expr_stmt|;
block|}
comment|// ### The code below would be nicer if it was cleaned up a bit (since spans has been replaced with items)
name|int
name|spanStartSection
init|=
literal|0
decl_stmt|;
name|int
name|previousSectionLength
init|=
literal|0
decl_stmt|;
name|QHeaderView
operator|::
name|ResizeMode
name|previousSectionResizeMode
init|=
name|QHeaderView
operator|::
name|Interactive
decl_stmt|;
comment|// resize each section along the total length
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sectionCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|oldSectionLength
init|=
name|headerSectionSize
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|newSectionLength
init|=
operator|-
literal|1
decl_stmt|;
name|QHeaderView
operator|::
name|ResizeMode
name|newSectionResizeMode
init|=
name|headerSectionResizeMode
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|isVisualIndexHidden
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|newSectionLength
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|QHeaderView
operator|::
name|ResizeMode
name|resizeMode
decl_stmt|;
if|if
condition|(
name|useGlobalMode
condition|)
name|resizeMode
operator|=
name|globalMode
expr_stmt|;
else|else
name|resizeMode
operator|=
operator|(
name|i
operator|==
name|stretchSection
condition|?
name|QHeaderView
operator|::
name|Stretch
else|:
name|newSectionResizeMode
operator|)
expr_stmt|;
if|if
condition|(
name|resizeMode
operator|==
name|QHeaderView
operator|::
name|Stretch
operator|&&
name|stretchSectionLength
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|lastVisibleSection
condition|)
name|newSectionLength
operator|=
name|qMax
argument_list|(
name|stretchSectionLength
argument_list|,
name|lastSectionSize
argument_list|)
expr_stmt|;
else|else
name|newSectionLength
operator|=
name|stretchSectionLength
expr_stmt|;
if|if
condition|(
name|pixelReminder
operator|>
literal|0
condition|)
block|{
name|newSectionLength
operator|+=
literal|1
expr_stmt|;
operator|--
name|pixelReminder
expr_stmt|;
block|}
name|section_sizes
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|newSectionLength
operator|=
name|section_sizes
operator|.
name|front
argument_list|()
expr_stmt|;
name|section_sizes
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
block|}
block|}
comment|//Q_ASSERT(newSectionLength> 0);
if|if
condition|(
operator|(
name|previousSectionResizeMode
operator|!=
name|newSectionResizeMode
operator|||
name|previousSectionLength
operator|!=
name|newSectionLength
operator|)
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
name|int
name|spanLength
init|=
operator|(
name|i
operator|-
name|spanStartSection
operator|)
operator|*
name|previousSectionLength
decl_stmt|;
name|createSectionItems
argument_list|(
name|spanStartSection
argument_list|,
name|i
operator|-
literal|1
argument_list|,
name|spanLength
argument_list|,
name|previousSectionResizeMode
argument_list|)
expr_stmt|;
comment|//Q_ASSERT(headerLength() == length);
name|spanStartSection
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
name|newSectionLength
operator|!=
name|oldSectionLength
condition|)
emit|emit
name|q
operator|->
name|sectionResized
argument_list|(
name|logicalIndex
argument_list|(
name|i
argument_list|)
argument_list|,
name|oldSectionLength
argument_list|,
name|newSectionLength
argument_list|)
emit|;
name|previousSectionLength
operator|=
name|newSectionLength
expr_stmt|;
name|previousSectionResizeMode
operator|=
name|newSectionResizeMode
expr_stmt|;
block|}
name|createSectionItems
argument_list|(
name|spanStartSection
argument_list|,
name|sectionCount
argument_list|()
operator|-
literal|1
argument_list|,
operator|(
name|sectionCount
argument_list|()
operator|-
name|spanStartSection
operator|)
operator|*
name|previousSectionLength
argument_list|,
name|previousSectionResizeMode
argument_list|)
expr_stmt|;
comment|//Q_ASSERT(headerLength() == length);
name|resizeRecursionBlock
operator|=
literal|false
expr_stmt|;
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createSectionItems
name|void
name|QHeaderViewPrivate
operator|::
name|createSectionItems
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|size
parameter_list|,
name|QHeaderView
operator|::
name|ResizeMode
name|mode
parameter_list|)
block|{
name|int
name|sizePerSection
init|=
name|size
operator|/
operator|(
name|end
operator|-
name|start
operator|+
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|end
operator|>=
name|sectionItems
operator|.
name|count
argument_list|()
condition|)
block|{
name|sectionItems
operator|.
name|resize
argument_list|(
name|end
operator|+
literal|1
argument_list|)
expr_stmt|;
name|sectionStartposRecalc
operator|=
literal|true
expr_stmt|;
block|}
name|SectionItem
modifier|*
name|sectiondata
init|=
name|sectionItems
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
operator|++
name|i
control|)
block|{
name|length
operator|+=
operator|(
name|sizePerSection
operator|-
name|sectiondata
index|[
name|i
index|]
operator|.
name|size
operator|)
expr_stmt|;
name|sectionStartposRecalc
operator||=
operator|(
name|sectiondata
index|[
name|i
index|]
operator|.
name|size
operator|!=
name|sizePerSection
operator|)
expr_stmt|;
name|sectiondata
index|[
name|i
index|]
operator|.
name|size
operator|=
name|sizePerSection
expr_stmt|;
name|sectiondata
index|[
name|i
index|]
operator|.
name|resizeMode
operator|=
name|mode
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|removeSectionsFromSectionItems
name|void
name|QHeaderViewPrivate
operator|::
name|removeSectionsFromSectionItems
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
comment|// remove sections
name|sectionStartposRecalc
operator||=
operator|(
name|end
operator|!=
name|sectionItems
operator|.
name|count
argument_list|()
operator|-
literal|1
operator|)
expr_stmt|;
name|int
name|removedlength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|u
init|=
name|start
init|;
name|u
operator|<=
name|end
condition|;
operator|++
name|u
control|)
name|removedlength
operator|+=
name|sectionItems
operator|.
name|at
argument_list|(
name|u
argument_list|)
operator|.
name|size
expr_stmt|;
name|length
operator|-=
name|removedlength
expr_stmt|;
name|sectionItems
operator|.
name|remove
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QHeaderViewPrivate
operator|::
name|clear
parameter_list|()
block|{
if|if
condition|(
name|state
operator|!=
name|NoClear
condition|)
block|{
name|length
operator|=
literal|0
expr_stmt|;
name|visualIndices
operator|.
name|clear
argument_list|()
expr_stmt|;
name|logicalIndices
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sectionSelected
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hiddenSectionSize
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sectionItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|invalidateCachedSizeHint
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|flipSortIndicator
name|void
name|QHeaderViewPrivate
operator|::
name|flipSortIndicator
parameter_list|(
name|int
name|section
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|SortOrder
name|sortOrder
decl_stmt|;
if|if
condition|(
name|sortIndicatorSection
operator|==
name|section
condition|)
block|{
name|sortOrder
operator|=
operator|(
name|sortIndicatorOrder
operator|==
name|Qt
operator|::
name|DescendingOrder
operator|)
condition|?
name|Qt
operator|::
name|AscendingOrder
else|:
name|Qt
operator|::
name|DescendingOrder
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QVariant
name|value
init|=
name|model
operator|->
name|headerData
argument_list|(
name|section
argument_list|,
name|orientation
argument_list|,
name|Qt
operator|::
name|InitialSortOrderRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
condition|)
name|sortOrder
operator|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|SortOrder
argument_list|>
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|sortOrder
operator|=
name|Qt
operator|::
name|AscendingOrder
expr_stmt|;
block|}
name|q
operator|->
name|setSortIndicator
argument_list|(
name|section
argument_list|,
name|sortOrder
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cascadingResize
name|void
name|QHeaderViewPrivate
operator|::
name|cascadingResize
parameter_list|(
name|int
name|visual
parameter_list|,
name|int
name|newSize
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
specifier|const
name|int
name|minimumSize
init|=
name|q
operator|->
name|minimumSectionSize
argument_list|()
decl_stmt|;
specifier|const
name|int
name|oldSize
init|=
name|headerSectionSize
argument_list|(
name|visual
argument_list|)
decl_stmt|;
name|int
name|delta
init|=
name|newSize
operator|-
name|oldSize
decl_stmt|;
if|if
condition|(
name|delta
operator|>
literal|0
condition|)
block|{
comment|// larger
name|bool
name|sectionResized
init|=
literal|false
decl_stmt|;
comment|// restore old section sizes
for|for
control|(
name|int
name|i
init|=
name|firstCascadingSection
init|;
name|i
operator|<
name|visual
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|cascadingSectionSize
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|int
name|currentSectionSize
init|=
name|headerSectionSize
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|originalSectionSize
init|=
name|cascadingSectionSize
operator|.
name|value
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentSectionSize
operator|<
name|originalSectionSize
condition|)
block|{
name|int
name|newSectionSize
init|=
name|currentSectionSize
operator|+
name|delta
decl_stmt|;
name|resizeSectionItem
argument_list|(
name|i
argument_list|,
name|currentSectionSize
argument_list|,
name|newSectionSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|newSectionSize
operator|>=
name|originalSectionSize
operator|&&
literal|false
condition|)
name|cascadingSectionSize
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// the section is now restored
name|sectionResized
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// resize the section
if|if
condition|(
operator|!
name|sectionResized
condition|)
block|{
name|newSize
operator|=
name|qMax
argument_list|(
name|newSize
argument_list|,
name|minimumSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldSize
operator|!=
name|newSize
condition|)
name|resizeSectionItem
argument_list|(
name|visual
argument_list|,
name|oldSize
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
block|}
comment|// cascade the section size change
for|for
control|(
name|int
name|i
init|=
name|visual
operator|+
literal|1
init|;
name|i
operator|<
name|sectionCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|sectionIsCascadable
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
name|int
name|currentSectionSize
init|=
name|headerSectionSize
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentSectionSize
operator|<=
name|minimumSize
condition|)
continue|continue;
name|int
name|newSectionSize
init|=
name|qMax
argument_list|(
name|currentSectionSize
operator|-
name|delta
argument_list|,
name|minimumSize
argument_list|)
decl_stmt|;
comment|//qDebug()<< "### cascading to"<< i<< newSectionSize - currentSectionSize<< delta;
name|resizeSectionItem
argument_list|(
name|i
argument_list|,
name|currentSectionSize
argument_list|,
name|newSectionSize
argument_list|)
expr_stmt|;
name|saveCascadingSectionSize
argument_list|(
name|i
argument_list|,
name|currentSectionSize
argument_list|)
expr_stmt|;
name|delta
operator|=
name|delta
operator|-
operator|(
name|currentSectionSize
operator|-
name|newSectionSize
operator|)
expr_stmt|;
comment|//qDebug()<< "new delta"<< delta;
comment|//if (newSectionSize != minimumSize)
if|if
condition|(
name|delta
operator|<=
literal|0
condition|)
break|break;
block|}
block|}
else|else
block|{
comment|// smaller
name|bool
name|sectionResized
init|=
literal|false
decl_stmt|;
comment|// restore old section sizes
for|for
control|(
name|int
name|i
init|=
name|lastCascadingSection
init|;
name|i
operator|>
name|visual
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
operator|!
name|cascadingSectionSize
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
name|int
name|currentSectionSize
init|=
name|headerSectionSize
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|originalSectionSize
init|=
name|cascadingSectionSize
operator|.
name|value
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentSectionSize
operator|>=
name|originalSectionSize
condition|)
continue|continue;
name|int
name|newSectionSize
init|=
name|currentSectionSize
operator|-
name|delta
decl_stmt|;
name|resizeSectionItem
argument_list|(
name|i
argument_list|,
name|currentSectionSize
argument_list|,
name|newSectionSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|newSectionSize
operator|>=
name|originalSectionSize
operator|&&
literal|false
condition|)
block|{
comment|//qDebug()<< "section"<< i<< "restored to"<< originalSectionSize;
name|cascadingSectionSize
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// the section is now restored
block|}
name|sectionResized
operator|=
literal|true
expr_stmt|;
break|break;
block|}
comment|// resize the section
name|resizeSectionItem
argument_list|(
name|visual
argument_list|,
name|oldSize
argument_list|,
name|qMax
argument_list|(
name|newSize
argument_list|,
name|minimumSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// cascade the section size change
if|if
condition|(
name|delta
operator|<
literal|0
operator|&&
name|newSize
operator|<
name|minimumSize
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|visual
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
operator|!
name|sectionIsCascadable
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
name|int
name|sectionSize
init|=
name|headerSectionSize
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|sectionSize
operator|<=
name|minimumSize
condition|)
continue|continue;
name|resizeSectionItem
argument_list|(
name|i
argument_list|,
name|sectionSize
argument_list|,
name|qMax
argument_list|(
name|sectionSize
operator|+
name|delta
argument_list|,
name|minimumSize
argument_list|)
argument_list|)
expr_stmt|;
name|saveCascadingSectionSize
argument_list|(
name|i
argument_list|,
name|sectionSize
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// let the next section get the space from the resized section
if|if
condition|(
operator|!
name|sectionResized
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|visual
operator|+
literal|1
init|;
name|i
operator|<
name|sectionCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|sectionIsCascadable
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
name|int
name|currentSectionSize
init|=
name|headerSectionSize
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|newSectionSize
init|=
name|qMax
argument_list|(
name|currentSectionSize
operator|-
name|delta
argument_list|,
name|minimumSize
argument_list|)
decl_stmt|;
name|resizeSectionItem
argument_list|(
name|i
argument_list|,
name|currentSectionSize
argument_list|,
name|newSectionSize
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|hasAutoResizeSections
argument_list|()
condition|)
name|doDelayedResizeSections
argument_list|()
expr_stmt|;
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDefaultSectionSize
name|void
name|QHeaderViewPrivate
operator|::
name|setDefaultSectionSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|executePostedLayout
argument_list|()
expr_stmt|;
name|invalidateCachedSizeHint
argument_list|()
expr_stmt|;
name|defaultSectionSize
operator|=
name|size
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|QHeaderViewPrivate
operator|::
name|ResizeSection
condition|)
name|preventCursorChangeInSetOffset
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sectionItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QHeaderViewPrivate
operator|::
name|SectionItem
modifier|&
name|section
init|=
name|sectionItems
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|hiddenSectionSize
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|isVisualIndexHidden
argument_list|(
name|i
argument_list|)
condition|)
block|{
comment|// resize on not hidden.
specifier|const
name|int
name|newSize
init|=
name|size
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|section
operator|.
name|size
condition|)
block|{
name|length
operator|+=
name|newSize
operator|-
name|section
operator|.
name|size
expr_stmt|;
comment|//the whole length is changed
specifier|const
name|int
name|oldSectionSize
init|=
name|section
operator|.
name|sectionSize
argument_list|()
decl_stmt|;
name|section
operator|.
name|size
operator|=
name|size
expr_stmt|;
emit|emit
name|q
operator|->
name|sectionResized
argument_list|(
name|logicalIndex
argument_list|(
name|i
argument_list|)
argument_list|,
name|oldSectionSize
argument_list|,
name|size
argument_list|)
emit|;
block|}
block|}
block|}
name|sectionStartposRecalc
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|hasAutoResizeSections
argument_list|()
condition|)
name|doDelayedResizeSections
argument_list|()
expr_stmt|;
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recalcSectionStartPos
name|void
name|QHeaderViewPrivate
operator|::
name|recalcSectionStartPos
parameter_list|()
specifier|const
comment|// linear (but fast)
block|{
name|int
name|pixelpos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QVector
argument_list|<
name|SectionItem
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|sectionItems
operator|.
name|constBegin
argument_list|()
init|;
name|i
operator|!=
name|sectionItems
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|i
operator|->
name|calculated_startpos
operator|=
name|pixelpos
expr_stmt|;
comment|// write into const mutable
name|pixelpos
operator|+=
name|i
operator|->
name|size
expr_stmt|;
block|}
name|sectionStartposRecalc
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeSectionItem
name|void
name|QHeaderViewPrivate
operator|::
name|resizeSectionItem
parameter_list|(
name|int
name|visualIndex
parameter_list|,
name|int
name|oldSize
parameter_list|,
name|int
name|newSize
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
name|QHeaderView
operator|::
name|ResizeMode
name|mode
init|=
name|headerSectionResizeMode
argument_list|(
name|visualIndex
argument_list|)
decl_stmt|;
name|createSectionItems
argument_list|(
name|visualIndex
argument_list|,
name|visualIndex
argument_list|,
name|newSize
argument_list|,
name|mode
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|sectionResized
argument_list|(
name|logicalIndex
argument_list|(
name|visualIndex
argument_list|)
argument_list|,
name|oldSize
argument_list|,
name|newSize
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|headerSectionSize
name|int
name|QHeaderViewPrivate
operator|::
name|headerSectionSize
parameter_list|(
name|int
name|visual
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|visual
operator|<
name|sectionCount
argument_list|()
operator|&&
name|visual
operator|>=
literal|0
condition|)
return|return
name|sectionItems
operator|.
name|at
argument_list|(
name|visual
argument_list|)
operator|.
name|sectionSize
argument_list|()
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|headerSectionPosition
name|int
name|QHeaderViewPrivate
operator|::
name|headerSectionPosition
parameter_list|(
name|int
name|visual
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|visual
operator|<
name|sectionCount
argument_list|()
operator|&&
name|visual
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|sectionStartposRecalc
condition|)
name|recalcSectionStartPos
argument_list|()
expr_stmt|;
return|return
name|sectionItems
operator|.
name|at
argument_list|(
name|visual
argument_list|)
operator|.
name|calculated_startpos
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|headerVisualIndexAt
name|int
name|QHeaderViewPrivate
operator|::
name|headerVisualIndexAt
parameter_list|(
name|int
name|position
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|sectionStartposRecalc
condition|)
name|recalcSectionStartPos
argument_list|()
expr_stmt|;
name|int
name|startidx
init|=
literal|0
decl_stmt|;
name|int
name|endidx
init|=
name|sectionItems
operator|.
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|startidx
operator|<=
name|endidx
condition|)
block|{
name|int
name|middle
init|=
operator|(
name|endidx
operator|+
name|startidx
operator|)
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|sectionItems
operator|.
name|at
argument_list|(
name|middle
argument_list|)
operator|.
name|calculated_startpos
operator|>
name|position
condition|)
block|{
name|endidx
operator|=
name|middle
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sectionItems
operator|.
name|at
argument_list|(
name|middle
argument_list|)
operator|.
name|calculatedEndPos
argument_list|()
operator|<=
name|position
condition|)
name|startidx
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
else|else
comment|// we found it.
return|return
name|middle
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|setHeaderSectionResizeMode
name|void
name|QHeaderViewPrivate
operator|::
name|setHeaderSectionResizeMode
parameter_list|(
name|int
name|visual
parameter_list|,
name|QHeaderView
operator|::
name|ResizeMode
name|mode
parameter_list|)
block|{
name|int
name|size
init|=
name|headerSectionSize
argument_list|(
name|visual
argument_list|)
decl_stmt|;
name|createSectionItems
argument_list|(
name|visual
argument_list|,
name|visual
argument_list|,
name|size
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|headerSectionResizeMode
name|QHeaderView
operator|::
name|ResizeMode
name|QHeaderViewPrivate
operator|::
name|headerSectionResizeMode
parameter_list|(
name|int
name|visual
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|visual
operator|<
literal|0
operator|||
name|visual
operator|>=
name|sectionItems
operator|.
name|count
argument_list|()
condition|)
return|return
name|globalResizeMode
return|;
return|return
cast|static_cast
argument_list|<
name|QHeaderView
operator|::
name|ResizeMode
argument_list|>
argument_list|(
name|sectionItems
operator|.
name|at
argument_list|(
name|visual
argument_list|)
operator|.
name|resizeMode
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setGlobalHeaderResizeMode
name|void
name|QHeaderViewPrivate
operator|::
name|setGlobalHeaderResizeMode
parameter_list|(
name|QHeaderView
operator|::
name|ResizeMode
name|mode
parameter_list|)
block|{
name|globalResizeMode
operator|=
name|mode
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sectionItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|sectionItems
index|[
name|i
index|]
operator|.
name|resizeMode
operator|=
name|mode
expr_stmt|;
block|}
end_function
begin_function
DECL|function|viewSectionSizeHint
name|int
name|QHeaderViewPrivate
operator|::
name|viewSectionSizeHint
parameter_list|(
name|int
name|logical
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|QAbstractItemView
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
condition|)
block|{
return|return
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|view
operator|->
name|sizeHintForColumn
argument_list|(
name|logical
argument_list|)
else|:
name|view
operator|->
name|sizeHintForRow
argument_list|(
name|logical
argument_list|)
operator|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|adjustedVisualIndex
name|int
name|QHeaderViewPrivate
operator|::
name|adjustedVisualIndex
parameter_list|(
name|int
name|visualIndex
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|hiddenSectionSize
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|adjustedVisualIndex
init|=
name|visualIndex
decl_stmt|;
name|int
name|currentVisualIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sectionItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|isVisualIndexHidden
argument_list|(
name|i
argument_list|)
condition|)
operator|++
name|adjustedVisualIndex
expr_stmt|;
else|else
operator|++
name|currentVisualIndex
expr_stmt|;
if|if
condition|(
name|currentVisualIndex
operator|>=
name|visualIndex
condition|)
break|break;
block|}
name|visualIndex
operator|=
name|adjustedVisualIndex
expr_stmt|;
block|}
return|return
name|visualIndex
return|;
block|}
end_function
begin_function
DECL|function|setScrollOffset
name|void
name|QHeaderViewPrivate
operator|::
name|setScrollOffset
parameter_list|(
specifier|const
name|QScrollBar
modifier|*
name|scrollBar
parameter_list|,
name|QAbstractItemView
operator|::
name|ScrollMode
name|scrollMode
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QHeaderView
argument_list|)
expr_stmt|;
if|if
condition|(
name|scrollMode
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
condition|)
block|{
if|if
condition|(
name|scrollBar
operator|->
name|maximum
argument_list|()
operator|>
literal|0
operator|&&
name|scrollBar
operator|->
name|value
argument_list|()
operator|==
name|scrollBar
operator|->
name|maximum
argument_list|()
condition|)
name|q
operator|->
name|setOffsetToLastSection
argument_list|()
expr_stmt|;
else|else
name|q
operator|->
name|setOffsetToSectionPosition
argument_list|(
name|scrollBar
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|->
name|setOffset
argument_list|(
name|scrollBar
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_function
DECL|function|write
name|void
name|QHeaderViewPrivate
operator|::
name|write
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|)
specifier|const
block|{
name|out
operator|<<
name|int
argument_list|(
name|orientation
argument_list|)
expr_stmt|;
name|out
operator|<<
name|int
argument_list|(
name|sortIndicatorOrder
argument_list|)
expr_stmt|;
name|out
operator|<<
name|sortIndicatorSection
expr_stmt|;
name|out
operator|<<
name|sortIndicatorShown
expr_stmt|;
name|out
operator|<<
name|visualIndices
expr_stmt|;
name|out
operator|<<
name|logicalIndices
expr_stmt|;
name|out
operator|<<
name|sectionsHiddenToBitVector
argument_list|()
expr_stmt|;
name|out
operator|<<
name|hiddenSectionSize
expr_stmt|;
name|out
operator|<<
name|length
expr_stmt|;
name|out
operator|<<
name|sectionCount
argument_list|()
expr_stmt|;
name|out
operator|<<
name|movableSections
expr_stmt|;
name|out
operator|<<
name|clickableSections
expr_stmt|;
name|out
operator|<<
name|highlightSelected
expr_stmt|;
name|out
operator|<<
name|stretchLastSection
expr_stmt|;
name|out
operator|<<
name|cascadingResizing
expr_stmt|;
name|out
operator|<<
name|stretchSections
expr_stmt|;
name|out
operator|<<
name|contentsSections
expr_stmt|;
name|out
operator|<<
name|defaultSectionSize
expr_stmt|;
name|out
operator|<<
name|minimumSectionSize
expr_stmt|;
name|out
operator|<<
name|int
argument_list|(
name|defaultAlignment
argument_list|)
expr_stmt|;
name|out
operator|<<
name|int
argument_list|(
name|globalResizeMode
argument_list|)
expr_stmt|;
name|out
operator|<<
name|sectionItems
expr_stmt|;
name|out
operator|<<
name|resizeContentsPrecision
expr_stmt|;
block|}
end_function
begin_function
DECL|function|read
name|bool
name|QHeaderViewPrivate
operator|::
name|read
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|)
block|{
name|int
name|orient
decl_stmt|,
name|order
decl_stmt|,
name|align
decl_stmt|,
name|global
decl_stmt|;
name|in
operator|>>
name|orient
expr_stmt|;
name|orientation
operator|=
operator|(
name|Qt
operator|::
name|Orientation
operator|)
name|orient
expr_stmt|;
name|in
operator|>>
name|order
expr_stmt|;
name|sortIndicatorOrder
operator|=
operator|(
name|Qt
operator|::
name|SortOrder
operator|)
name|order
expr_stmt|;
name|in
operator|>>
name|sortIndicatorSection
expr_stmt|;
name|in
operator|>>
name|sortIndicatorShown
expr_stmt|;
name|in
operator|>>
name|visualIndices
expr_stmt|;
name|in
operator|>>
name|logicalIndices
expr_stmt|;
name|QBitArray
name|sectionHidden
decl_stmt|;
name|in
operator|>>
name|sectionHidden
expr_stmt|;
name|in
operator|>>
name|hiddenSectionSize
expr_stmt|;
name|in
operator|>>
name|length
expr_stmt|;
name|int
name|unusedSectionCount
decl_stmt|;
comment|// For compatibility
name|in
operator|>>
name|unusedSectionCount
expr_stmt|;
name|in
operator|>>
name|movableSections
expr_stmt|;
name|in
operator|>>
name|clickableSections
expr_stmt|;
name|in
operator|>>
name|highlightSelected
expr_stmt|;
name|in
operator|>>
name|stretchLastSection
expr_stmt|;
name|in
operator|>>
name|cascadingResizing
expr_stmt|;
name|in
operator|>>
name|stretchSections
expr_stmt|;
name|in
operator|>>
name|contentsSections
expr_stmt|;
name|in
operator|>>
name|defaultSectionSize
expr_stmt|;
name|in
operator|>>
name|minimumSectionSize
expr_stmt|;
name|in
operator|>>
name|align
expr_stmt|;
name|defaultAlignment
operator|=
name|Qt
operator|::
name|Alignment
argument_list|(
name|align
argument_list|)
expr_stmt|;
name|in
operator|>>
name|global
expr_stmt|;
name|globalResizeMode
operator|=
operator|(
name|QHeaderView
operator|::
name|ResizeMode
operator|)
name|global
expr_stmt|;
name|in
operator|>>
name|sectionItems
expr_stmt|;
comment|// In Qt4 we had a vector of spans where one span could hold information on more sections.
comment|// Now we have an itemvector where one items contains information about one section
comment|// For backward compatibility with Qt4 we do the following
name|QVector
argument_list|<
name|SectionItem
argument_list|>
name|newSectionItems
decl_stmt|;
for|for
control|(
name|int
name|u
init|=
literal|0
init|;
name|u
operator|<
name|sectionItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|u
control|)
block|{
name|int
name|count
init|=
name|sectionItems
operator|.
name|at
argument_list|(
name|u
argument_list|)
operator|.
name|tmpDataStreamSectionCount
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|count
condition|;
operator|++
name|n
control|)
name|newSectionItems
operator|.
name|append
argument_list|(
name|sectionItems
index|[
name|u
index|]
argument_list|)
expr_stmt|;
block|}
name|sectionItems
operator|=
name|newSectionItems
expr_stmt|;
name|setHiddenSectionsFromBitVector
argument_list|(
name|sectionHidden
argument_list|)
expr_stmt|;
name|recalcSectionStartPos
argument_list|()
expr_stmt|;
name|int
name|tmpint
decl_stmt|;
name|in
operator|>>
name|tmpint
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|status
argument_list|()
operator|==
name|QDataStream
operator|::
name|Ok
condition|)
comment|// we haven't read past end
name|resizeContentsPrecision
operator|=
name|tmpint
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ITEMVIEWS
end_comment
begin_include
include|#
directive|include
file|"moc_qheaderview.cpp"
end_include
end_unit
