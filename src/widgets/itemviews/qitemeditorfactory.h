begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QITEMEDITORFACTORY_H
end_ifndef
begin_define
DECL|macro|QITEMEDITORFACTORY_H
define|#
directive|define
name|QITEMEDITORFACTORY_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qmetaobject.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qhash.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
DECL|variable|QWidget
name|class
name|QWidget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QItemEditorCreatorBase
block|{
name|public
label|:
name|virtual
operator|~
name|QItemEditorCreatorBase
argument_list|()
expr_stmt|;
name|virtual
name|QWidget
modifier|*
name|createWidget
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|QByteArray
name|valuePropertyName
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QItemEditorCreator
operator|:
name|public
name|QItemEditorCreatorBase
block|{
name|public
operator|:
specifier|inline
name|explicit
name|QItemEditorCreator
argument_list|(
specifier|const
name|QByteArray
operator|&
name|valuePropertyName
argument_list|)
block|;
specifier|inline
name|QWidget
operator|*
name|createWidget
argument_list|(
argument|QWidget *parent
argument_list|)
specifier|const
block|{
return|return
name|new
name|T
argument_list|(
name|parent
argument_list|)
return|;
block|}
specifier|inline
name|QByteArray
name|valuePropertyName
argument_list|()
specifier|const
block|{
return|return
name|propertyName
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|QByteArray
name|propertyName
decl_stmt|;
end_decl_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QStandardItemEditorCreator
operator|:
name|public
name|QItemEditorCreatorBase
block|{
name|public
operator|:
specifier|inline
name|QStandardItemEditorCreator
argument_list|()
operator|:
name|propertyName
argument_list|(
argument|T::staticMetaObject.userProperty().name()
argument_list|)
block|{}
specifier|inline
name|QWidget
operator|*
name|createWidget
argument_list|(
argument|QWidget *parent
argument_list|)
specifier|const
block|{
return|return
name|new
name|T
argument_list|(
name|parent
argument_list|)
return|;
block|}
specifier|inline
name|QByteArray
name|valuePropertyName
argument_list|()
specifier|const
block|{
return|return
name|propertyName
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|QByteArray
name|propertyName
decl_stmt|;
end_decl_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
DECL|function|QItemEditorCreator
name|Q_INLINE_TEMPLATE
name|QItemEditorCreator
operator|<
name|T
operator|>
operator|::
name|QItemEditorCreator
argument_list|(
specifier|const
name|QByteArray
operator|&
name|avaluePropertyName
argument_list|)
operator|:
name|propertyName
argument_list|(
argument|avaluePropertyName
argument_list|)
block|{}
name|class
name|Q_WIDGETS_EXPORT
name|QItemEditorFactory
block|{
name|public
operator|:
specifier|inline
name|QItemEditorFactory
argument_list|()
block|{}
name|virtual
operator|~
name|QItemEditorFactory
argument_list|()
block|;
name|virtual
name|QWidget
operator|*
name|createEditor
argument_list|(
argument|int userType
argument_list|,
argument|QWidget *parent
argument_list|)
specifier|const
block|;
name|virtual
name|QByteArray
name|valuePropertyName
argument_list|(
argument|int userType
argument_list|)
specifier|const
block|;
name|void
name|registerEditor
argument_list|(
argument|int userType
argument_list|,
argument|QItemEditorCreatorBase *creator
argument_list|)
block|;
specifier|static
specifier|const
name|QItemEditorFactory
operator|*
name|defaultFactory
argument_list|()
block|;
specifier|static
name|void
name|setDefaultFactory
argument_list|(
name|QItemEditorFactory
operator|*
name|factory
argument_list|)
block|;
name|private
operator|:
name|QHash
operator|<
name|int
block|,
name|QItemEditorCreatorBase
operator|*
operator|>
name|creatorMap
block|; }
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ITEMVIEWS
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QITEMEDITORFACTORY_H
end_comment
end_unit
