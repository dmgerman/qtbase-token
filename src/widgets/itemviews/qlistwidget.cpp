begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qlistwidget.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LISTWIDGET
end_ifndef
begin_include
include|#
directive|include
file|<qitemdelegate.h>
end_include
begin_include
include|#
directive|include
file|<private/qlistview_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidgetitemdata_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qlistwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// workaround for VC++ 6.0 linker bug (?)
end_comment
begin_typedef
DECL|typedef|LessThan
typedef|typedef
name|bool
function_decl|(
modifier|*
name|LessThan
function_decl|)
parameter_list|(
specifier|const
name|QPair
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
parameter_list|,
specifier|const
name|QPair
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
parameter_list|)
function_decl|;
end_typedef
begin_class
DECL|class|QListWidgetMimeData
class|class
name|QListWidgetMimeData
super|:
specifier|public
name|QMimeData
block|{
name|Q_OBJECT
public|public:
DECL|member|items
name|QList
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|>
name|items
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|QT_BEGIN_INCLUDE_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qlistwidget.moc"
end_include
begin_macro
name|QT_END_INCLUDE_NAMESPACE
end_macro
begin_constructor
DECL|function|QListModel
name|QListModel
operator|::
name|QListModel
parameter_list|(
name|QListWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractListModel
argument_list|(
name|parent
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QListModel
name|QListModel
operator|::
name|~
name|QListModel
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|clear
name|void
name|QListModel
operator|::
name|clear
parameter_list|()
block|{
name|beginResetModel
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|d
operator|->
name|theid
operator|=
operator|-
literal|1
expr_stmt|;
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|items
operator|.
name|clear
argument_list|()
expr_stmt|;
name|endResetModel
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|at
name|QListWidgetItem
modifier|*
name|QListModel
operator|::
name|at
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
return|return
name|items
operator|.
name|value
argument_list|(
name|row
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|remove
name|void
name|QListModel
operator|::
name|remove
parameter_list|(
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
operator|!
name|item
condition|)
return|return;
name|int
name|row
init|=
name|items
operator|.
name|indexOf
argument_list|(
name|item
argument_list|)
decl_stmt|;
comment|// ### use index(item) - it's faster
name|Q_ASSERT
argument_list|(
name|row
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|beginRemoveRows
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|items
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|->
name|d
operator|->
name|theid
operator|=
operator|-
literal|1
expr_stmt|;
name|items
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|->
name|view
operator|=
literal|0
expr_stmt|;
name|items
operator|.
name|removeAt
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|endRemoveRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert
name|void
name|QListModel
operator|::
name|insert
parameter_list|(
name|int
name|row
parameter_list|,
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
operator|!
name|item
condition|)
return|return;
name|item
operator|->
name|view
operator|=
name|qobject_cast
argument_list|<
name|QListWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|view
operator|&&
name|item
operator|->
name|view
operator|->
name|isSortingEnabled
argument_list|()
condition|)
block|{
comment|// sorted insertion
name|QList
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
name|it
decl_stmt|;
name|it
operator|=
name|sortedInsertionIterator
argument_list|(
name|items
operator|.
name|begin
argument_list|()
argument_list|,
name|items
operator|.
name|end
argument_list|()
argument_list|,
name|item
operator|->
name|view
operator|->
name|sortOrder
argument_list|()
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|row
operator|=
name|qMax
argument_list|(
name|it
operator|-
name|items
operator|.
name|begin
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|row
operator|<
literal|0
condition|)
name|row
operator|=
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
name|row
operator|>
name|items
operator|.
name|count
argument_list|()
condition|)
name|row
operator|=
name|items
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
name|beginInsertRows
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|items
operator|.
name|insert
argument_list|(
name|row
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|item
operator|->
name|d
operator|->
name|theid
operator|=
name|row
expr_stmt|;
name|endInsertRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert
name|void
name|QListModel
operator|::
name|insert
parameter_list|(
name|int
name|row
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|labels
parameter_list|)
block|{
specifier|const
name|int
name|count
init|=
name|labels
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|<=
literal|0
condition|)
return|return;
name|QListWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
name|QListWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|view
operator|&&
name|view
operator|->
name|isSortingEnabled
argument_list|()
condition|)
block|{
comment|// sorted insertion
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QListWidgetItem
modifier|*
name|item
init|=
operator|new
name|QListWidgetItem
argument_list|(
name|labels
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|row
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|row
operator|<
literal|0
condition|)
name|row
operator|=
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
name|row
operator|>
name|items
operator|.
name|count
argument_list|()
condition|)
name|row
operator|=
name|items
operator|.
name|count
argument_list|()
expr_stmt|;
name|beginInsertRows
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QListWidgetItem
modifier|*
name|item
init|=
operator|new
name|QListWidgetItem
argument_list|(
name|labels
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|item
operator|->
name|d
operator|->
name|theid
operator|=
name|row
expr_stmt|;
name|item
operator|->
name|view
operator|=
name|qobject_cast
argument_list|<
name|QListWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|items
operator|.
name|insert
argument_list|(
name|row
operator|++
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
name|endInsertRows
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|take
name|QListWidgetItem
modifier|*
name|QListModel
operator|::
name|take
parameter_list|(
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|row
operator|>=
name|items
operator|.
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
name|beginRemoveRows
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|items
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|->
name|d
operator|->
name|theid
operator|=
operator|-
literal|1
expr_stmt|;
name|items
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|->
name|view
operator|=
literal|0
expr_stmt|;
name|QListWidgetItem
modifier|*
name|item
init|=
name|items
operator|.
name|takeAt
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|endRemoveRows
argument_list|()
expr_stmt|;
return|return
name|item
return|;
block|}
end_function
begin_function
DECL|function|move
name|void
name|QListModel
operator|::
name|move
parameter_list|(
name|int
name|srcRow
parameter_list|,
name|int
name|dstRow
parameter_list|)
block|{
if|if
condition|(
name|srcRow
operator|==
name|dstRow
operator|||
name|srcRow
operator|<
literal|0
operator|||
name|srcRow
operator|>=
name|items
operator|.
name|count
argument_list|()
operator|||
name|dstRow
argument_list|<
literal|0
operator|||
name|dstRow
argument_list|>
name|items
operator|.
name|count
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|beginMoveRows
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|srcRow
argument_list|,
name|srcRow
argument_list|,
name|QModelIndex
argument_list|()
argument_list|,
name|dstRow
argument_list|)
condition|)
return|return;
if|if
condition|(
name|srcRow
operator|<
name|dstRow
condition|)
operator|--
name|dstRow
expr_stmt|;
name|items
operator|.
name|move
argument_list|(
name|srcRow
argument_list|,
name|dstRow
argument_list|)
expr_stmt|;
name|endMoveRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowCount
name|int
name|QListModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
return|return
name|parent
operator|.
name|isValid
argument_list|()
condition|?
literal|0
else|:
name|items
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|index
name|QModelIndex
name|QListModel
operator|::
name|index
parameter_list|(
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|item
operator|||
operator|!
name|item
operator|->
name|view
operator|||
cast|static_cast
argument_list|<
specifier|const
name|QListModel
operator|*
argument_list|>
argument_list|(
name|item
operator|->
name|view
operator|->
name|model
argument_list|()
argument_list|)
operator|!=
name|this
operator|||
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|int
name|row
decl_stmt|;
specifier|const
name|int
name|theid
init|=
name|item
operator|->
name|d
operator|->
name|theid
decl_stmt|;
if|if
condition|(
name|theid
operator|>=
literal|0
operator|&&
name|theid
operator|<
name|items
operator|.
name|count
argument_list|()
operator|&&
name|items
operator|.
name|at
argument_list|(
name|theid
argument_list|)
operator|==
name|item
condition|)
block|{
name|row
operator|=
name|theid
expr_stmt|;
block|}
else|else
block|{
comment|// we need to search for the item
name|row
operator|=
name|items
operator|.
name|lastIndexOf
argument_list|(
name|item
argument_list|)
expr_stmt|;
comment|// lastIndexOf is an optimization in favor of indexOf
if|if
condition|(
name|row
operator|==
operator|-
literal|1
condition|)
comment|// not found
return|return
name|QModelIndex
argument_list|()
return|;
name|item
operator|->
name|d
operator|->
name|theid
operator|=
name|row
expr_stmt|;
block|}
return|return
name|createIndex
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|item
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|index
name|QModelIndex
name|QListModel
operator|::
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hasIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|parent
argument_list|)
condition|)
return|return
name|createIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|items
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
return|;
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|data
name|QVariant
name|QListModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
name|index
operator|.
name|row
argument_list|()
operator|>=
name|items
operator|.
name|count
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
return|return
name|items
operator|.
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
operator|->
name|data
argument_list|(
name|role
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setData
name|bool
name|QListModel
operator|::
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
name|index
operator|.
name|row
argument_list|()
operator|>=
name|items
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|items
operator|.
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
operator|->
name|setData
argument_list|(
name|role
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|itemData
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|QListModel
operator|::
name|itemData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|roles
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
name|index
operator|.
name|row
argument_list|()
operator|>=
name|items
operator|.
name|count
argument_list|()
condition|)
return|return
name|roles
return|;
name|QListWidgetItem
modifier|*
name|itm
init|=
name|items
operator|.
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itm
operator|->
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|roles
operator|.
name|insert
argument_list|(
name|itm
operator|->
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|role
argument_list|,
name|itm
operator|->
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|roles
return|;
block|}
end_function
begin_function
DECL|function|insertRows
name|bool
name|QListModel
operator|::
name|insertRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|1
operator|||
name|row
argument_list|<
literal|0
operator|||
name|row
argument_list|>
name|rowCount
argument_list|()
operator|||
name|parent
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|beginInsertRows
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QListWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
name|QListWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
name|QListWidgetItem
modifier|*
name|itm
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
name|row
init|;
name|r
operator|<
name|row
operator|+
name|count
condition|;
operator|++
name|r
control|)
block|{
name|itm
operator|=
operator|new
name|QListWidgetItem
expr_stmt|;
name|itm
operator|->
name|view
operator|=
name|view
expr_stmt|;
name|itm
operator|->
name|d
operator|->
name|theid
operator|=
name|r
expr_stmt|;
name|items
operator|.
name|insert
argument_list|(
name|r
argument_list|,
name|itm
argument_list|)
expr_stmt|;
block|}
name|endInsertRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|removeRows
name|bool
name|QListModel
operator|::
name|removeRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|1
operator|||
name|row
argument_list|<
literal|0
operator|||
operator|(
name|row
operator|+
name|count
operator|)
argument_list|>
name|rowCount
argument_list|()
operator|||
name|parent
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|beginRemoveRows
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QListWidgetItem
modifier|*
name|itm
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
name|row
init|;
name|r
operator|<
name|row
operator|+
name|count
condition|;
operator|++
name|r
control|)
block|{
name|itm
operator|=
name|items
operator|.
name|takeAt
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|itm
operator|->
name|view
operator|=
literal|0
expr_stmt|;
name|itm
operator|->
name|d
operator|->
name|theid
operator|=
operator|-
literal|1
expr_stmt|;
operator|delete
name|itm
expr_stmt|;
block|}
name|endRemoveRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|QListModel
operator|::
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
name|index
operator|.
name|row
argument_list|()
operator|>=
name|items
operator|.
name|count
argument_list|()
operator|||
name|index
operator|.
name|model
argument_list|()
operator|!=
name|this
condition|)
return|return
name|Qt
operator|::
name|ItemIsDropEnabled
return|;
comment|// we allow drops outside the items
return|return
name|items
operator|.
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
operator|->
name|flags
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|sort
name|void
name|QListModel
operator|::
name|sort
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
if|if
condition|(
name|column
operator|!=
literal|0
condition|)
return|return;
emit|emit
name|layoutAboutToBeChanged
argument_list|()
emit|;
name|QVector
argument_list|<
name|QPair
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
argument_list|>
name|sorting
argument_list|(
name|items
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QListWidgetItem
modifier|*
name|item
init|=
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sorting
index|[
name|i
index|]
operator|.
name|first
operator|=
name|item
expr_stmt|;
name|sorting
index|[
name|i
index|]
operator|.
name|second
operator|=
name|i
expr_stmt|;
block|}
name|LessThan
name|compare
init|=
operator|(
name|order
operator|==
name|Qt
operator|::
name|AscendingOrder
condition|?
operator|&
name|itemLessThan
else|:
operator|&
name|itemGreaterThan
operator|)
decl_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|sorting
operator|.
name|begin
argument_list|()
argument_list|,
name|sorting
operator|.
name|end
argument_list|()
argument_list|,
name|compare
argument_list|)
expr_stmt|;
name|QModelIndexList
name|fromIndexes
decl_stmt|;
name|QModelIndexList
name|toIndexes
decl_stmt|;
specifier|const
name|int
name|sortingCount
init|=
name|sorting
operator|.
name|count
argument_list|()
decl_stmt|;
name|fromIndexes
operator|.
name|reserve
argument_list|(
name|sortingCount
argument_list|)
expr_stmt|;
name|toIndexes
operator|.
name|reserve
argument_list|(
name|sortingCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|sortingCount
condition|;
operator|++
name|r
control|)
block|{
name|QListWidgetItem
modifier|*
name|item
init|=
name|sorting
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|.
name|first
decl_stmt|;
name|toIndexes
operator|.
name|append
argument_list|(
name|createIndex
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
name|item
argument_list|)
argument_list|)
expr_stmt|;
name|fromIndexes
operator|.
name|append
argument_list|(
name|createIndex
argument_list|(
name|sorting
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|.
name|second
argument_list|,
literal|0
argument_list|,
name|sorting
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|.
name|first
argument_list|)
argument_list|)
expr_stmt|;
name|items
index|[
name|r
index|]
operator|=
name|sorting
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|.
name|first
expr_stmt|;
block|}
name|changePersistentIndexList
argument_list|(
name|fromIndexes
argument_list|,
name|toIndexes
argument_list|)
expr_stmt|;
emit|emit
name|layoutChanged
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|/**  * This function assumes that all items in the model except the items that are between  * (inclusive) start and end are sorted.  * With these assumptions, this function can ensure that the model is sorted in a  * much more efficient way than doing a naive 'sort everything'.  * (provided that the range is relatively small compared to the total number of items)  */
end_comment
begin_function
DECL|function|ensureSorted
name|void
name|QListModel
operator|::
name|ensureSorted
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
if|if
condition|(
name|column
operator|!=
literal|0
condition|)
return|return;
name|int
name|count
init|=
name|end
operator|-
name|start
operator|+
literal|1
decl_stmt|;
name|QVector
argument_list|<
name|QPair
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
argument_list|>
name|sorting
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|sorting
index|[
name|i
index|]
operator|.
name|first
operator|=
name|items
operator|.
name|at
argument_list|(
name|start
operator|+
name|i
argument_list|)
expr_stmt|;
name|sorting
index|[
name|i
index|]
operator|.
name|second
operator|=
name|start
operator|+
name|i
expr_stmt|;
block|}
name|LessThan
name|compare
init|=
operator|(
name|order
operator|==
name|Qt
operator|::
name|AscendingOrder
condition|?
operator|&
name|itemLessThan
else|:
operator|&
name|itemGreaterThan
operator|)
decl_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|sorting
operator|.
name|begin
argument_list|()
argument_list|,
name|sorting
operator|.
name|end
argument_list|()
argument_list|,
name|compare
argument_list|)
expr_stmt|;
name|QModelIndexList
name|oldPersistentIndexes
init|=
name|persistentIndexList
argument_list|()
decl_stmt|;
name|QModelIndexList
name|newPersistentIndexes
init|=
name|oldPersistentIndexes
decl_stmt|;
name|QList
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|>
name|tmp
init|=
name|items
decl_stmt|;
name|QList
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
name|lit
init|=
name|tmp
operator|.
name|begin
argument_list|()
decl_stmt|;
name|bool
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|int
name|oldRow
init|=
name|sorting
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
decl_stmt|;
name|int
name|tmpitepos
init|=
name|lit
operator|-
name|tmp
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QListWidgetItem
modifier|*
name|item
init|=
name|tmp
operator|.
name|takeAt
argument_list|(
name|oldRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpitepos
operator|>
name|tmp
operator|.
name|size
argument_list|()
condition|)
operator|--
name|tmpitepos
expr_stmt|;
name|lit
operator|=
name|tmp
operator|.
name|begin
argument_list|()
operator|+
name|tmpitepos
expr_stmt|;
name|lit
operator|=
name|sortedInsertionIterator
argument_list|(
name|lit
argument_list|,
name|tmp
operator|.
name|end
argument_list|()
argument_list|,
name|order
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|int
name|newRow
init|=
name|qMax
argument_list|(
name|lit
operator|-
name|tmp
operator|.
name|begin
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|lit
operator|=
name|tmp
operator|.
name|insert
argument_list|(
name|lit
argument_list|,
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|newRow
operator|!=
name|oldRow
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|count
condition|;
operator|++
name|j
control|)
block|{
name|int
name|otherRow
init|=
name|sorting
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|.
name|second
decl_stmt|;
if|if
condition|(
name|oldRow
operator|<
name|otherRow
operator|&&
name|newRow
operator|>=
name|otherRow
condition|)
operator|--
name|sorting
index|[
name|j
index|]
operator|.
name|second
expr_stmt|;
elseif|else
if|if
condition|(
name|oldRow
operator|>
name|otherRow
operator|&&
name|newRow
operator|<=
name|otherRow
condition|)
operator|++
name|sorting
index|[
name|j
index|]
operator|.
name|second
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|newPersistentIndexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|k
control|)
block|{
name|QModelIndex
name|pi
init|=
name|newPersistentIndexes
operator|.
name|at
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|int
name|oldPersistentRow
init|=
name|pi
operator|.
name|row
argument_list|()
decl_stmt|;
name|int
name|newPersistentRow
init|=
name|oldPersistentRow
decl_stmt|;
if|if
condition|(
name|oldPersistentRow
operator|==
name|oldRow
condition|)
name|newPersistentRow
operator|=
name|newRow
expr_stmt|;
elseif|else
if|if
condition|(
name|oldRow
operator|<
name|oldPersistentRow
operator|&&
name|newRow
operator|>=
name|oldPersistentRow
condition|)
name|newPersistentRow
operator|=
name|oldPersistentRow
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|oldRow
operator|>
name|oldPersistentRow
operator|&&
name|newRow
operator|<=
name|oldPersistentRow
condition|)
name|newPersistentRow
operator|=
name|oldPersistentRow
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|newPersistentRow
operator|!=
name|oldPersistentRow
condition|)
name|newPersistentIndexes
index|[
name|k
index|]
operator|=
name|createIndex
argument_list|(
name|newPersistentRow
argument_list|,
name|pi
operator|.
name|column
argument_list|()
argument_list|,
name|pi
operator|.
name|internalPointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
emit|emit
name|layoutAboutToBeChanged
argument_list|()
emit|;
name|items
operator|=
name|tmp
expr_stmt|;
name|changePersistentIndexList
argument_list|(
name|oldPersistentIndexes
argument_list|,
name|newPersistentIndexes
argument_list|)
expr_stmt|;
emit|emit
name|layoutChanged
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|itemLessThan
name|bool
name|QListModel
operator|::
name|itemLessThan
parameter_list|(
specifier|const
name|QPair
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|left
parameter_list|,
specifier|const
name|QPair
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|right
parameter_list|)
block|{
return|return
operator|(
operator|*
name|left
operator|.
name|first
operator|)
operator|<
operator|(
operator|*
name|right
operator|.
name|first
operator|)
return|;
block|}
end_function
begin_function
DECL|function|itemGreaterThan
name|bool
name|QListModel
operator|::
name|itemGreaterThan
parameter_list|(
specifier|const
name|QPair
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|left
parameter_list|,
specifier|const
name|QPair
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|right
parameter_list|)
block|{
return|return
operator|(
operator|*
name|right
operator|.
name|first
operator|)
operator|<
operator|(
operator|*
name|left
operator|.
name|first
operator|)
return|;
block|}
end_function
begin_function
DECL|function|sortedInsertionIterator
name|QList
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
name|QListModel
operator|::
name|sortedInsertionIterator
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
modifier|&
name|begin
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
modifier|&
name|end
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|,
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
name|order
operator|==
name|Qt
operator|::
name|AscendingOrder
condition|)
return|return
name|std
operator|::
name|lower_bound
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|item
argument_list|,
name|QListModelLessThan
argument_list|()
argument_list|)
return|;
return|return
name|std
operator|::
name|lower_bound
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|item
argument_list|,
name|QListModelGreaterThan
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|itemChanged
name|void
name|QListModel
operator|::
name|itemChanged
parameter_list|(
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|QModelIndex
name|idx
init|=
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
emit|emit
name|dataChanged
argument_list|(
name|idx
argument_list|,
name|idx
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|mimeTypes
name|QStringList
name|QListModel
operator|::
name|mimeTypes
parameter_list|()
specifier|const
block|{
specifier|const
name|QListWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QListWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|view
operator|->
name|mimeTypes
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|internalMimeData
name|QMimeData
modifier|*
name|QListModel
operator|::
name|internalMimeData
parameter_list|()
specifier|const
block|{
return|return
name|QAbstractItemModel
operator|::
name|mimeData
argument_list|(
name|cachedIndexes
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mimeData
name|QMimeData
modifier|*
name|QListModel
operator|::
name|mimeData
parameter_list|(
specifier|const
name|QModelIndexList
modifier|&
name|indexes
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|>
name|itemlist
decl_stmt|;
specifier|const
name|int
name|indexesCount
init|=
name|indexes
operator|.
name|count
argument_list|()
decl_stmt|;
name|itemlist
operator|.
name|reserve
argument_list|(
name|indexesCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexesCount
condition|;
operator|++
name|i
control|)
name|itemlist
operator|<<
name|at
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QListWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QListWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
name|cachedIndexes
operator|=
name|indexes
expr_stmt|;
name|QMimeData
modifier|*
name|mimeData
init|=
name|view
operator|->
name|mimeData
argument_list|(
name|itemlist
argument_list|)
decl_stmt|;
name|cachedIndexes
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|mimeData
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function
DECL|function|dropMimeData
name|bool
name|QListModel
operator|::
name|dropMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|DropAction
name|action
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|QListWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
name|QListWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
condition|)
name|row
operator|=
name|index
operator|.
name|row
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|row
operator|==
operator|-
literal|1
condition|)
name|row
operator|=
name|items
operator|.
name|count
argument_list|()
expr_stmt|;
return|return
name|view
operator|->
name|dropMimeData
argument_list|(
name|row
argument_list|,
name|data
argument_list|,
name|action
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|supportedDropActions
name|Qt
operator|::
name|DropActions
name|QListModel
operator|::
name|supportedDropActions
parameter_list|()
specifier|const
block|{
specifier|const
name|QListWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QListWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|view
operator|->
name|supportedDropActions
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_comment
comment|/*!     \class QListWidgetItem     \brief The QListWidgetItem class provides an item for use with the     QListWidget item view class.      \ingroup model-view     \inmodule QtWidgets      A QListWidgetItem represents a single item in a QListWidget. Each item can     hold several pieces of information, and will display them appropriately.      The item view convenience classes use a classic item-based interface rather     than a pure model/view approach. For a more flexible list view widget,     consider using the QListView class with a standard model.      List items can be inserted automatically into a list, when they are     constructed, by specifying the list widget:      \snippet qlistwidget-using/mainwindow.cpp 2      Alternatively, list items can also be created without a parent widget, and     later inserted into a list using QListWidget::insertItem().      List items are typically used to display text() and an icon(). These are     set with the setText() and setIcon() functions. The appearance of the text     can be customized with setFont(), setForeground(), and setBackground().     Text in list items can be aligned using the setTextAlignment() function.     Tooltips, status tips and "What's This?" help can be added to list items     with setToolTip(), setStatusTip(), and setWhatsThis().      By default, items are enabled, selectable, checkable, and can be the source     of drag and drop operations.      Each item's flags can be changed by calling setFlags() with the appropriate     value (see Qt::ItemFlags). Checkable items can be checked, unchecked and     partially checked with the setCheckState() function. The corresponding     checkState() function indicates the item's current check state.      The isHidden() function can be used to determine whether the item is     hidden. To hide an item, use setHidden().       \section1 Subclassing      When subclassing QListWidgetItem to provide custom items, it is possible to     define new types for them enabling them to be distinguished from standard     items. For subclasses that require this feature, ensure that you call the     base class constructor with a new type value equal to or greater than     \l UserType, within \e your constructor.      \sa QListWidget, {Model/View Programming}, QTreeWidgetItem, QTableWidgetItem */
end_comment
begin_comment
comment|/*!     \enum QListWidgetItem::ItemType      This enum describes the types that are used to describe list widget items.      \value Type     The default type for list widget items.     \value UserType The minimum value for custom types. Values below UserType are                     reserved by Qt.      You can define new user types in QListWidgetItem subclasses to ensure that     custom items are treated specially.      \sa type() */
end_comment
begin_comment
comment|/*!     \fn int QListWidgetItem::type() const      Returns the type passed to the QListWidgetItem constructor. */
end_comment
begin_comment
comment|/*!     \fn QListWidget *QListWidgetItem::listWidget() const      Returns the list widget containing the item. */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setSelected(bool select)     \since 4.2      Sets the selected state of the item to \a select.      \sa isSelected() */
end_comment
begin_comment
comment|/*!     \fn bool QListWidgetItem::isSelected() const     \since 4.2      Returns \c true if the item is selected; otherwise returns \c false.      \sa setSelected() */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setHidden(bool hide)     \since 4.2      Hides the item if \a hide is true; otherwise shows the item.      \sa isHidden() */
end_comment
begin_comment
comment|/*!     \fn bool QListWidgetItem::isHidden() const     \since 4.2      Returns \c true if the item is hidden; otherwise returns \c false.      \sa setHidden() */
end_comment
begin_comment
comment|/*!     \fn QListWidgetItem::QListWidgetItem(QListWidget *parent, int type)      Constructs an empty list widget item of the specified \a type with the     given \a parent. If \a parent is not specified, the item will need to be     inserted into a list widget with QListWidget::insertItem().      This constructor inserts the item into the model of the parent that is     passed to the constructor. If the model is sorted then the behavior of the     insert is undetermined since the model will call the \c '<' operator method     on the item which, at this point, is not yet constructed. To avoid the     undetermined behavior, we recommend not to specify the parent and use     QListWidget::insertItem() instead.      \sa type() */
end_comment
begin_constructor
DECL|function|QListWidgetItem
name|QListWidgetItem
operator|::
name|QListWidgetItem
parameter_list|(
name|QListWidget
modifier|*
name|view
parameter_list|,
name|int
name|type
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|type
argument_list|)
member_init_list|,
name|view
argument_list|(
name|view
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QListWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
argument_list|)
block|{
if|if
condition|(
name|QListModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QListModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
condition|)
name|model
operator|->
name|insert
argument_list|(
name|model
operator|->
name|rowCount
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \fn QListWidgetItem::QListWidgetItem(const QString&text, QListWidget *parent, int type)      Constructs an empty list widget item of the specified \a type with the     given \a text and \a parent. If the parent is not specified, the item will     need to be inserted into a list widget with QListWidget::insertItem().      This constructor inserts the item into the model of the parent that is     passed to the constructor. If the model is sorted then the behavior of the     insert is undetermined since the model will call the \c '<' operator method     on the item which, at this point, is not yet constructed. To avoid the     undetermined behavior, we recommend not to specify the parent and use     QListWidget::insertItem() instead.      \sa type() */
end_comment
begin_constructor
DECL|function|QListWidgetItem
name|QListWidgetItem
operator|::
name|QListWidgetItem
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QListWidget
modifier|*
name|view
parameter_list|,
name|int
name|type
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|type
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QListWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
argument_list|)
block|{
name|setData
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|this
operator|->
name|view
operator|=
name|view
expr_stmt|;
if|if
condition|(
name|QListModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QListModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
condition|)
name|model
operator|->
name|insert
argument_list|(
name|model
operator|->
name|rowCount
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \fn QListWidgetItem::QListWidgetItem(const QIcon&icon, const QString&text, QListWidget *parent, int type)      Constructs an empty list widget item of the specified \a type with the     given \a icon, \a text and \a parent. If the parent is not specified, the     item will need to be inserted into a list widget with     QListWidget::insertItem().      This constructor inserts the item into the model of the parent that is     passed to the constructor. If the model is sorted then the behavior of the     insert is undetermined since the model will call the \c '<' operator method     on the item which, at this point, is not yet constructed. To avoid the     undetermined behavior, we recommend not to specify the parent and use     QListWidget::insertItem() instead.      \sa type() */
end_comment
begin_constructor
DECL|function|QListWidgetItem
name|QListWidgetItem
operator|::
name|QListWidgetItem
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QListWidget
modifier|*
name|view
parameter_list|,
name|int
name|type
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|type
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QListWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
argument_list|)
block|{
name|setData
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|setData
argument_list|(
name|Qt
operator|::
name|DecorationRole
argument_list|,
name|icon
argument_list|)
expr_stmt|;
name|this
operator|->
name|view
operator|=
name|view
expr_stmt|;
if|if
condition|(
name|QListModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QListModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
condition|)
name|model
operator|->
name|insert
argument_list|(
name|model
operator|->
name|rowCount
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the list item. */
end_comment
begin_destructor
DECL|function|~QListWidgetItem
name|QListWidgetItem
operator|::
name|~
name|QListWidgetItem
parameter_list|()
block|{
if|if
condition|(
name|QListModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QListModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
condition|)
name|model
operator|->
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Creates an exact copy of the item. */
end_comment
begin_function
DECL|function|clone
name|QListWidgetItem
modifier|*
name|QListWidgetItem
operator|::
name|clone
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QListWidgetItem
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the data for a given \a role to the given \a value. Reimplement this     function if you need extra roles or special behavior for certain roles.      \sa Qt::ItemDataRole, data() */
end_comment
begin_function
DECL|function|setData
name|void
name|QListWidgetItem
operator|::
name|setData
parameter_list|(
name|int
name|role
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|bool
name|found
init|=
literal|false
decl_stmt|;
name|role
operator|=
operator|(
name|role
operator|==
name|Qt
operator|::
name|EditRole
condition|?
name|Qt
operator|::
name|DisplayRole
else|:
name|role
operator|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|role
operator|==
name|role
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|==
name|value
condition|)
return|return;
name|d
operator|->
name|values
index|[
name|i
index|]
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
name|d
operator|->
name|values
operator|.
name|append
argument_list|(
name|QWidgetItemData
argument_list|(
name|role
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QListModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QListModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
condition|)
name|model
operator|->
name|itemChanged
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the item's data for a given \a role. Reimplement this function if     you need extra roles or special behavior for certain roles.      \sa Qt::ItemDataRole, setData() */
end_comment
begin_function
DECL|function|data
name|QVariant
name|QListWidgetItem
operator|::
name|data
parameter_list|(
name|int
name|role
parameter_list|)
specifier|const
block|{
name|role
operator|=
operator|(
name|role
operator|==
name|Qt
operator|::
name|EditRole
condition|?
name|Qt
operator|::
name|DisplayRole
else|:
name|role
operator|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|role
operator|==
name|role
condition|)
return|return
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
return|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if this item's text is less then \a other item's text;     otherwise returns \c false. */
end_comment
begin_function
DECL|function|operator <
name|bool
name|QListWidgetItem
operator|::
name|operator
name|<
parameter_list|(
specifier|const
name|QListWidgetItem
modifier|&
name|other
parameter_list|)
specifier|const
block|{
specifier|const
name|QVariant
name|v1
init|=
name|data
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
decl_stmt|,
name|v2
init|=
name|other
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
decl_stmt|;
return|return
name|QAbstractItemModelPrivate
operator|::
name|variantLessThan
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     Reads the item from stream \a in.      \sa write() */
end_comment
begin_function
DECL|function|read
name|void
name|QListWidgetItem
operator|::
name|read
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|)
block|{
name|in
operator|>>
name|d
operator|->
name|values
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Writes the item to stream \a out.      \sa read() */
end_comment
begin_function
DECL|function|write
name|void
name|QListWidgetItem
operator|::
name|write
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|)
specifier|const
block|{
name|out
operator|<<
name|d
operator|->
name|values
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_comment
comment|/*!     \since 4.1      Constructs a copy of \a other. Note that type() and listWidget() are not     copied.      This function is useful when reimplementing clone().      \sa data(), flags() */
end_comment
begin_constructor
DECL|function|QListWidgetItem
name|QListWidgetItem
operator|::
name|QListWidgetItem
parameter_list|(
specifier|const
name|QListWidgetItem
modifier|&
name|other
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|Type
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QListWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|other
operator|.
name|itemFlags
argument_list|)
block|{
name|d
operator|->
name|values
operator|=
name|other
operator|.
name|d
operator|->
name|values
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Assigns \a other's data and flags to this item. Note that type() and     listWidget() are not copied.      This function is useful when reimplementing clone().      \sa data(), flags() */
end_comment
begin_function
DECL|function|operator =
name|QListWidgetItem
modifier|&
name|QListWidgetItem
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QListWidgetItem
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|->
name|values
operator|=
name|other
operator|.
name|d
operator|->
name|values
expr_stmt|;
name|itemFlags
operator|=
name|other
operator|.
name|itemFlags
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     \relates QListWidgetItem      Writes the list widget item \a item to stream \a out.      This operator uses QListWidgetItem::write().      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QListWidgetItem
modifier|&
name|item
parameter_list|)
block|{
name|item
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_comment
comment|/*!     \relates QListWidgetItem      Reads a list widget item from stream \a in into \a item.      This operator uses QListWidgetItem::read().      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|,
name|QListWidgetItem
modifier|&
name|item
parameter_list|)
block|{
name|item
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|in
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_comment
comment|/*!     \fn Qt::ItemFlags QListWidgetItem::flags() const      Returns the item flags for this item (see \l{Qt::ItemFlags}). */
end_comment
begin_comment
comment|/*!     \fn QString QListWidgetItem::text() const      Returns the list item's text.      \sa setText() */
end_comment
begin_comment
comment|/*!     \fn QIcon QListWidgetItem::icon() const      Returns the list item's icon.      \sa setIcon(), {QAbstractItemView::iconSize}{iconSize} */
end_comment
begin_comment
comment|/*!     \fn QString QListWidgetItem::statusTip() const      Returns the list item's status tip.      \sa setStatusTip() */
end_comment
begin_comment
comment|/*!     \fn QString QListWidgetItem::toolTip() const      Returns the list item's tooltip.      \sa setToolTip(), statusTip(), whatsThis() */
end_comment
begin_comment
comment|/*!     \fn QString QListWidgetItem::whatsThis() const      Returns the list item's "What's This?" help text.      \sa setWhatsThis(), statusTip(), toolTip() */
end_comment
begin_comment
comment|/*!     \fn QFont QListWidgetItem::font() const      Returns the font used to display this list item's text. */
end_comment
begin_comment
comment|/*!     \fn int QListWidgetItem::textAlignment() const      Returns the text alignment for the list item.      \sa Qt::AlignmentFlag */
end_comment
begin_comment
comment|/*!     \fn QColor QListWidgetItem::backgroundColor() const     \obsolete      This function is deprecated. Use background() instead. */
end_comment
begin_comment
comment|/*!     \fn QBrush QListWidgetItem::background() const     \since 4.2      Returns the brush used to display the list item's background.      \sa setBackground(), foreground() */
end_comment
begin_comment
comment|/*!     \fn QColor QListWidgetItem::textColor() const     \obsolete      Returns the color used to display the list item's text.      This function is deprecated. Use foreground() instead. */
end_comment
begin_comment
comment|/*!     \fn QBrush QListWidgetItem::foreground() const     \since 4.2      Returns the brush used to display the list item's foreground (e.g. text).      \sa setForeground(), background() */
end_comment
begin_comment
comment|/*!     \fn Qt::CheckState QListWidgetItem::checkState() const      Returns the checked state of the list item (see \l{Qt::CheckState}).      \sa flags() */
end_comment
begin_comment
comment|/*!     \fn QSize QListWidgetItem::sizeHint() const     \since 4.1      Returns the size hint set for the list item. */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setSizeHint(const QSize&size)     \since 4.1      Sets the size hint for the list item to be \a size. If no size hint is set,     the item delegate will compute the size hint based on the item data. */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setFlags(Qt::ItemFlags flags)      Sets the item flags for the list item to \a flags.      \sa Qt::ItemFlags */
end_comment
begin_function
DECL|function|setFlags
name|void
name|QListWidgetItem
operator|::
name|setFlags
parameter_list|(
name|Qt
operator|::
name|ItemFlags
name|aflags
parameter_list|)
block|{
name|itemFlags
operator|=
name|aflags
expr_stmt|;
if|if
condition|(
name|QListModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QListModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
condition|)
name|model
operator|->
name|itemChanged
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QListWidgetItem::setText(const QString&text)      Sets the text for the list widget item's to the given \a text.      \sa text() */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setIcon(const QIcon&icon)      Sets the icon for the list item to the given \a icon.      \sa icon(), text(), {QAbstractItemView::iconSize}{iconSize} */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setStatusTip(const QString&statusTip)      Sets the status tip for the list item to the text specified by     \a statusTip. QListWidget mouseTracking needs to be enabled for this     feature to work.      \sa statusTip(), setToolTip(), setWhatsThis(), QWidget::setMouseTracking() */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setToolTip(const QString&toolTip)      Sets the tooltip for the list item to the text specified by \a toolTip.      \sa toolTip(), setStatusTip(), setWhatsThis() */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setWhatsThis(const QString&whatsThis)      Sets the "What's This?" help for the list item to the text specified by     \a whatsThis.      \sa whatsThis(), setStatusTip(), setToolTip() */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setFont(const QFont&font)      Sets the font used when painting the item to the given \a font. */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setTextAlignment(int alignment)      Sets the list item's text alignment to \a alignment.      \sa Qt::AlignmentFlag */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setBackgroundColor(const QColor&color)     \obsolete      This function is deprecated. Use setBackground() instead. */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setBackground(const QBrush&brush)     \since 4.2      Sets the background brush of the list item to the given \a brush.      \sa background(), setForeground() */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setTextColor(const QColor&color)     \obsolete      This function is deprecated. Use setForeground() instead. */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setForeground(const QBrush&brush)     \since 4.2      Sets the foreground brush of the list item to the given \a brush.      \sa foreground(), setBackground() */
end_comment
begin_comment
comment|/*!     \fn void QListWidgetItem::setCheckState(Qt::CheckState state)      Sets the check state of the list item to \a state.      \sa checkState() */
end_comment
begin_function
DECL|function|setup
name|void
name|QListWidgetPrivate
operator|::
name|setup
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|q
operator|->
name|QListView
operator|::
name|setModel
argument_list|(
operator|new
name|QListModel
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
comment|// view signals
name|QObject
operator|::
name|connect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|pressed
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemPressed
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemClicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|doubleClicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemDoubleClicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemActivated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|entered
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemEntered
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemChanged
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|q
operator|->
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitCurrentItemChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|q
operator|->
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|selectionChanged
argument_list|(
name|QItemSelection
argument_list|,
name|QItemSelection
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|itemSelectionChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_sort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_emitItemPressed
name|void
name|QListWidgetPrivate
operator|::
name|_q_emitItemPressed
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|itemPressed
argument_list|(
name|listModel
argument_list|()
operator|->
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemClicked
name|void
name|QListWidgetPrivate
operator|::
name|_q_emitItemClicked
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|itemClicked
argument_list|(
name|listModel
argument_list|()
operator|->
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemDoubleClicked
name|void
name|QListWidgetPrivate
operator|::
name|_q_emitItemDoubleClicked
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|itemDoubleClicked
argument_list|(
name|listModel
argument_list|()
operator|->
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemActivated
name|void
name|QListWidgetPrivate
operator|::
name|_q_emitItemActivated
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|itemActivated
argument_list|(
name|listModel
argument_list|()
operator|->
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemEntered
name|void
name|QListWidgetPrivate
operator|::
name|_q_emitItemEntered
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|itemEntered
argument_list|(
name|listModel
argument_list|()
operator|->
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemChanged
name|void
name|QListWidgetPrivate
operator|::
name|_q_emitItemChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|itemChanged
argument_list|(
name|listModel
argument_list|()
operator|->
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitCurrentItemChanged
name|void
name|QListWidgetPrivate
operator|::
name|_q_emitCurrentItemChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|current
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|previous
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|QPersistentModelIndex
name|persistentCurrent
init|=
name|current
decl_stmt|;
name|QListWidgetItem
modifier|*
name|currentItem
init|=
name|listModel
argument_list|()
operator|->
name|at
argument_list|(
name|persistentCurrent
operator|.
name|row
argument_list|()
argument_list|)
decl_stmt|;
emit|emit
name|q
operator|->
name|currentItemChanged
argument_list|(
name|currentItem
argument_list|,
name|listModel
argument_list|()
operator|->
name|at
argument_list|(
name|previous
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
emit|;
comment|//persistentCurrent is invalid if something changed the model in response
comment|//to the currentItemChanged signal emission and the item was removed
if|if
condition|(
operator|!
name|persistentCurrent
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|currentItem
operator|=
literal|0
expr_stmt|;
block|}
emit|emit
name|q
operator|->
name|currentTextChanged
argument_list|(
name|currentItem
condition|?
name|currentItem
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|currentRowChanged
argument_list|(
name|persistentCurrent
operator|.
name|row
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_sort
name|void
name|QListWidgetPrivate
operator|::
name|_q_sort
parameter_list|()
block|{
if|if
condition|(
name|sortingEnabled
condition|)
name|model
operator|->
name|sort
argument_list|(
literal|0
argument_list|,
name|sortOrder
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_dataChanged
name|void
name|QListWidgetPrivate
operator|::
name|_q_dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|)
block|{
if|if
condition|(
name|sortingEnabled
operator|&&
name|topLeft
operator|.
name|isValid
argument_list|()
operator|&&
name|bottomRight
operator|.
name|isValid
argument_list|()
condition|)
name|listModel
argument_list|()
operator|->
name|ensureSorted
argument_list|(
name|topLeft
operator|.
name|column
argument_list|()
argument_list|,
name|sortOrder
argument_list|,
name|topLeft
operator|.
name|row
argument_list|()
argument_list|,
name|bottomRight
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QListWidget     \brief The QListWidget class provides an item-based list widget.      \ingroup model-view     \inmodule QtWidgets      QListWidget is a convenience class that provides a list view similar to the     one supplied by QListView, but with a classic item-based interface for     adding and removing items. QListWidget uses an internal model to manage     each QListWidgetItem in the list.      For a more flexible list view widget, use the QListView class with a     standard model.      List widgets are constructed in the same way as other widgets:      \snippet qlistwidget-using/mainwindow.cpp 0      The selectionMode() of a list widget determines how many of the items in     the list can be selected at the same time, and whether complex selections     of items can be created. This can be set with the setSelectionMode()     function.      There are two ways to add items to the list: they can be constructed with     the list widget as their parent widget, or they can be constructed with no     parent widget and added to the list later. If a list widget already exists     when the items are constructed, the first method is easier to use:      \snippet qlistwidget-using/mainwindow.cpp 1      If you need to insert a new item into the list at a particular position,     then it should be constructed without a parent widget. The insertItem()     function should then be used to place it within the list. The list widget     will take ownership of the item.      \snippet qlistwidget-using/mainwindow.cpp 6     \snippet qlistwidget-using/mainwindow.cpp 7      For multiple items, insertItems() can be used instead. The number of items     in the list is found with the count() function. To remove items from the     list, use takeItem().      The current item in the list can be found with currentItem(), and changed     with setCurrentItem(). The user can also change the current item by     navigating with the keyboard or clicking on a different item. When the     current item changes, the currentItemChanged() signal is emitted with the     new current item and the item that was previously current.      \table 100%     \row \li \inlineimage windowsvista-listview.png Screenshot of a Windows Vista style list widget          \li \inlineimage macintosh-listview.png Screenshot of a Macintosh style table widget          \li \inlineimage fusion-listview.png Screenshot of a Fusion style table widget     \row \li A \l{Windows Vista Style Widget Gallery}{Windows Vista style} list widget.          \li A \l{Macintosh Style Widget Gallery}{Macintosh style} list widget.          \li A \l{Fusion Style Widget Gallery}{Fusion style} list widget.     \endtable      \sa QListWidgetItem, QListView, QTreeView, {Model/View Programming},         {Config Dialog Example} */
end_comment
begin_comment
comment|/*!     \fn void QListWidget::addItem(QListWidgetItem *item)      Inserts the \a item at the end of the list widget.      \warning A QListWidgetItem can only be added to a QListWidget once. Adding     the same QListWidgetItem multiple times to a QListWidget will result in     undefined behavior.      \sa insertItem() */
end_comment
begin_comment
comment|/*!     \fn void QListWidget::addItem(const QString&label)      Inserts an item with the text \a label at the end of the list widget. */
end_comment
begin_comment
comment|/*!     \fn void QListWidget::addItems(const QStringList&labels)      Inserts items with the text \a labels at the end of the list widget.      \sa insertItems() */
end_comment
begin_comment
comment|/*!     \fn void QListWidget::itemPressed(QListWidgetItem *item)      This signal is emitted with the specified \a item when a mouse button is     pressed on an item in the widget.      \sa itemClicked(), itemDoubleClicked() */
end_comment
begin_comment
comment|/*!     \fn void QListWidget::itemClicked(QListWidgetItem *item)      This signal is emitted with the specified \a item when a mouse button is     clicked on an item in the widget.      \sa itemPressed(), itemDoubleClicked() */
end_comment
begin_comment
comment|/*!     \fn void QListWidget::itemDoubleClicked(QListWidgetItem *item)      This signal is emitted with the specified \a item when a mouse button is     double clicked on an item in the widget.      \sa itemClicked(), itemPressed() */
end_comment
begin_comment
comment|/*!     \fn void QListWidget::itemActivated(QListWidgetItem *item)      This signal is emitted when the \a item is activated. The \a item is     activated when the user clicks or double clicks on it, depending on the     system configuration. It is also activated when the user presses the     activation key (on Windows and X11 this is the \uicontrol Return key, on Mac OS     X it is \uicontrol{Command+O}). */
end_comment
begin_comment
comment|/*!     \fn void QListWidget::itemEntered(QListWidgetItem *item)      This signal is emitted when the mouse cursor enters an item. The \a item is     the item entered. This signal is only emitted when mouseTracking is turned     on, or when a mouse button is pressed while moving into an item.      \sa QWidget::setMouseTracking() */
end_comment
begin_comment
comment|/*!     \fn void QListWidget::itemChanged(QListWidgetItem *item)      This signal is emitted whenever the data of \a item has changed. */
end_comment
begin_comment
comment|/*!     \fn void QListWidget::currentItemChanged(QListWidgetItem *current, QListWidgetItem *previous)      This signal is emitted whenever the current item changes.      \a previous is the item that previously had the focus; \a current is the     new current item. */
end_comment
begin_comment
comment|/*!     \fn void QListWidget::currentTextChanged(const QString&currentText)      This signal is emitted whenever the current item changes.      \a currentText is the text data in the current item. If there is no current     item, the \a currentText is invalid. */
end_comment
begin_comment
comment|/*!     \fn void QListWidget::currentRowChanged(int currentRow)      This signal is emitted whenever the current item changes.      \a currentRow is the row of the current item. If there is no current item,     the \a currentRow is -1. */
end_comment
begin_comment
comment|/*!     \fn void QListWidget::itemSelectionChanged()      This signal is emitted whenever the selection changes.      \sa selectedItems(), QListWidgetItem::isSelected(), currentItemChanged() */
end_comment
begin_comment
comment|/*!     \since 4.3      \fn void QListWidget::removeItemWidget(QListWidgetItem *item)      Removes the widget set on the given \a item.      To remove an item (row) from the list entirely, either delete the item or     use takeItem().      \sa itemWidget(), setItemWidget() */
end_comment
begin_comment
comment|/*!     Constructs an empty QListWidget with the given \a parent. */
end_comment
begin_constructor
DECL|function|QListWidget
name|QListWidget
operator|::
name|QListWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QListView
argument_list|(
operator|*
operator|new
name|QListWidgetPrivate
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|setup
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the list widget and all its items. */
end_comment
begin_destructor
DECL|function|~QListWidget
name|QListWidget
operator|::
name|~
name|QListWidget
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the item that occupies the given \a row in the list if one has been     set; otherwise returns 0.      \sa row() */
end_comment
begin_function
DECL|function|item
name|QListWidgetItem
modifier|*
name|QListWidget
operator|::
name|item
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|row
operator|>=
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|at
argument_list|(
name|row
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the row containing the given \a item.      \sa item() */
end_comment
begin_function
DECL|function|row
name|int
name|QListWidget
operator|::
name|row
parameter_list|(
specifier|const
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|index
argument_list|(
cast|const_cast
argument_list|<
name|QListWidgetItem
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
argument_list|)
operator|.
name|row
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Inserts the \a item at the position in the list given by \a row.      \sa addItem() */
end_comment
begin_function
DECL|function|insertItem
name|void
name|QListWidget
operator|::
name|insertItem
parameter_list|(
name|int
name|row
parameter_list|,
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|&&
operator|!
name|item
operator|->
name|view
condition|)
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|insert
argument_list|(
name|row
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts an item with the text \a label in the list widget at the position     given by \a row.      \sa addItem() */
end_comment
begin_function
DECL|function|insertItem
name|void
name|QListWidget
operator|::
name|insertItem
parameter_list|(
name|int
name|row
parameter_list|,
specifier|const
name|QString
modifier|&
name|label
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|insert
argument_list|(
name|row
argument_list|,
operator|new
name|QListWidgetItem
argument_list|(
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts items from the list of \a labels into the list, starting at the     given \a row.      \sa insertItem(), addItem() */
end_comment
begin_function
DECL|function|insertItems
name|void
name|QListWidget
operator|::
name|insertItems
parameter_list|(
name|int
name|row
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|labels
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|insert
argument_list|(
name|row
argument_list|,
name|labels
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes and returns the item from the given \a row in the list widget;     otherwise returns 0.      Items removed from a list widget will not be managed by Qt, and will need     to be deleted manually.      \sa insertItem(), addItem() */
end_comment
begin_function
DECL|function|takeItem
name|QListWidgetItem
modifier|*
name|QListWidget
operator|::
name|takeItem
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|row
operator|>=
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|take
argument_list|(
name|row
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QListWidget::count     \brief the number of items in the list including any hidden items. */
end_comment
begin_function
DECL|function|count
name|int
name|QListWidget
operator|::
name|count
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the current item. */
end_comment
begin_function
DECL|function|currentItem
name|QListWidgetItem
modifier|*
name|QListWidget
operator|::
name|currentItem
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|at
argument_list|(
name|currentIndex
argument_list|()
operator|.
name|row
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the current item to \a item.      Unless the selection mode is \l{QAbstractItemView::}{NoSelection},     the item is also selected. */
end_comment
begin_function
DECL|function|setCurrentItem
name|void
name|QListWidget
operator|::
name|setCurrentItem
parameter_list|(
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|setCurrentRow
argument_list|(
name|row
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4     Set the current item to \a item, using the given \a command. */
end_comment
begin_function
DECL|function|setCurrentItem
name|void
name|QListWidget
operator|::
name|setCurrentItem
parameter_list|(
name|QListWidgetItem
modifier|*
name|item
parameter_list|,
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|command
parameter_list|)
block|{
name|setCurrentRow
argument_list|(
name|row
argument_list|(
name|item
argument_list|)
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QListWidget::currentRow     \brief the row of the current item.      Depending on the current selection mode, the row may also be selected. */
end_comment
begin_function
DECL|function|currentRow
name|int
name|QListWidget
operator|::
name|currentRow
parameter_list|()
specifier|const
block|{
return|return
name|currentIndex
argument_list|()
operator|.
name|row
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setCurrentRow
name|void
name|QListWidget
operator|::
name|setCurrentRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|selectionMode
operator|==
name|SingleSelection
condition|)
name|selectionModel
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|,
name|QItemSelectionModel
operator|::
name|ClearAndSelect
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|selectionMode
operator|==
name|NoSelection
condition|)
name|selectionModel
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|,
name|QItemSelectionModel
operator|::
name|NoUpdate
argument_list|)
expr_stmt|;
else|else
name|selectionModel
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|,
name|QItemSelectionModel
operator|::
name|SelectCurrent
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Sets the current row to be the given \a row, using the given \a command, */
end_comment
begin_function
DECL|function|setCurrentRow
name|void
name|QListWidget
operator|::
name|setCurrentRow
parameter_list|(
name|int
name|row
parameter_list|,
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|command
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|selectionModel
operator|->
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|)
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the item at the coordinates \a p. The coordinates     are relative to the list widget's \l{QAbstractScrollArea::}{viewport()}.  */
end_comment
begin_function
DECL|function|itemAt
name|QListWidgetItem
modifier|*
name|QListWidget
operator|::
name|itemAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|at
argument_list|(
name|indexAt
argument_list|(
name|p
argument_list|)
operator|.
name|row
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QListWidgetItem *QListWidget::itemAt(int x, int y) const     \overload      Returns a pointer to the item at the coordinates (\a x, \a y).     The coordinates are relative to the list widget's     \l{QAbstractScrollArea::}{viewport()}.  */
end_comment
begin_comment
comment|/*!     Returns the rectangle on the viewport occupied by the item at \a item. */
end_comment
begin_function
DECL|function|visualItemRect
name|QRect
name|QListWidget
operator|::
name|visualItemRect
parameter_list|(
specifier|const
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|index
argument_list|(
cast|const_cast
argument_list|<
name|QListWidgetItem
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|visualRect
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sorts all the items in the list widget according to the specified \a order. */
end_comment
begin_function
DECL|function|sortItems
name|void
name|QListWidget
operator|::
name|sortItems
parameter_list|(
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|sortOrder
operator|=
name|order
expr_stmt|;
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|sort
argument_list|(
literal|0
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     \property QListWidget::sortingEnabled     \brief whether sorting is enabled      If this property is \c true, sorting is enabled for the list; if the property     is false, sorting is not enabled.      The default value is false. */
end_comment
begin_function
DECL|function|setSortingEnabled
name|void
name|QListWidget
operator|::
name|setSortingEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|sortingEnabled
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isSortingEnabled
name|bool
name|QListWidget
operator|::
name|isSortingEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sortingEnabled
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|sortOrder
name|Qt
operator|::
name|SortOrder
name|QListWidget
operator|::
name|sortOrder
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sortOrder
return|;
block|}
end_function
begin_comment
comment|/*!     Starts editing the \a item if it is editable. */
end_comment
begin_function
DECL|function|editItem
name|void
name|QListWidget
operator|::
name|editItem
parameter_list|(
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|edit
argument_list|(
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Opens an editor for the given \a item. The editor remains open after     editing.      \sa closePersistentEditor() */
end_comment
begin_function
DECL|function|openPersistentEditor
name|void
name|QListWidget
operator|::
name|openPersistentEditor
parameter_list|(
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|QAbstractItemView
operator|::
name|openPersistentEditor
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Closes the persistent editor for the given \a item.      \sa openPersistentEditor() */
end_comment
begin_function
DECL|function|closePersistentEditor
name|void
name|QListWidget
operator|::
name|closePersistentEditor
parameter_list|(
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|QAbstractItemView
operator|::
name|closePersistentEditor
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the widget displayed in the given \a item.      \sa setItemWidget(), removeItemWidget() */
end_comment
begin_function
DECL|function|itemWidget
name|QWidget
modifier|*
name|QListWidget
operator|::
name|itemWidget
parameter_list|(
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
return|return
name|QAbstractItemView
operator|::
name|indexWidget
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Sets the \a widget to be displayed in the given \a item.      This function should only be used to display static content in the place of     a list widget item. If you want to display custom dynamic content or     implement a custom editor widget, use QListView and subclass QItemDelegate     instead.      \sa itemWidget(), removeItemWidget(), {Delegate Classes} */
end_comment
begin_function
DECL|function|setItemWidget
name|void
name|QListWidget
operator|::
name|setItemWidget
parameter_list|(
name|QListWidgetItem
modifier|*
name|item
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|QAbstractItemView
operator|::
name|setIndexWidget
argument_list|(
name|index
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if \a item is selected; otherwise returns \c false.      \obsolete      This function is deprecated. Use QListWidgetItem::isSelected() instead. */
end_comment
begin_function
DECL|function|isItemSelected
name|bool
name|QListWidget
operator|::
name|isItemSelected
parameter_list|(
specifier|const
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|index
argument_list|(
cast|const_cast
argument_list|<
name|QListWidgetItem
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|selectionModel
argument_list|()
operator|->
name|isSelected
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Selects or deselects the given \a item depending on whether \a select is     true of false.      \obsolete      This function is deprecated. Use QListWidgetItem::setSelected() instead. */
end_comment
begin_function
DECL|function|setItemSelected
name|void
name|QListWidget
operator|::
name|setItemSelected
parameter_list|(
specifier|const
name|QListWidgetItem
modifier|*
name|item
parameter_list|,
name|bool
name|select
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|index
argument_list|(
cast|const_cast
argument_list|<
name|QListWidgetItem
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|selectionMode
operator|==
name|SingleSelection
condition|)
block|{
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|index
argument_list|,
name|select
condition|?
name|QItemSelectionModel
operator|::
name|ClearAndSelect
else|:
name|QItemSelectionModel
operator|::
name|Deselect
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|selectionMode
operator|!=
name|NoSelection
condition|)
block|{
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|index
argument_list|,
name|select
condition|?
name|QItemSelectionModel
operator|::
name|Select
else|:
name|QItemSelectionModel
operator|::
name|Deselect
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns a list of all selected items in the list widget. */
end_comment
begin_function
DECL|function|selectedItems
name|QList
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|>
name|QListWidget
operator|::
name|selectedItems
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
name|QModelIndexList
name|indexes
init|=
name|selectionModel
argument_list|()
operator|->
name|selectedIndexes
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|>
name|items
decl_stmt|;
specifier|const
name|int
name|numIndexes
init|=
name|indexes
operator|.
name|count
argument_list|()
decl_stmt|;
name|items
operator|.
name|reserve
argument_list|(
name|numIndexes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndexes
condition|;
operator|++
name|i
control|)
name|items
operator|.
name|append
argument_list|(
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|at
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|items
return|;
block|}
end_function
begin_comment
comment|/*!     Finds items with the text that matches the string \a text using the given     \a flags. */
end_comment
begin_function
DECL|function|findItems
name|QList
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|>
name|QListWidget
operator|::
name|findItems
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|Qt
operator|::
name|MatchFlags
name|flags
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
name|QModelIndexList
name|indexes
init|=
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|match
argument_list|(
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|text
argument_list|,
operator|-
literal|1
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|>
name|items
decl_stmt|;
specifier|const
name|int
name|indexesSize
init|=
name|indexes
operator|.
name|size
argument_list|()
decl_stmt|;
name|items
operator|.
name|reserve
argument_list|(
name|indexesSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexesSize
condition|;
operator|++
name|i
control|)
name|items
operator|.
name|append
argument_list|(
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|at
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|items
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the \a item is explicitly hidden; otherwise returns \c false.      \obsolete      This function is deprecated. Use QListWidgetItem::isHidden() instead. */
end_comment
begin_function
DECL|function|isItemHidden
name|bool
name|QListWidget
operator|::
name|isItemHidden
parameter_list|(
specifier|const
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
return|return
name|isRowHidden
argument_list|(
name|row
argument_list|(
name|item
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     If \a hide is true, the \a item will be hidden; otherwise it will be shown.      \obsolete      This function is deprecated. Use QListWidgetItem::setHidden() instead. */
end_comment
begin_function
DECL|function|setItemHidden
name|void
name|QListWidget
operator|::
name|setItemHidden
parameter_list|(
specifier|const
name|QListWidgetItem
modifier|*
name|item
parameter_list|,
name|bool
name|hide
parameter_list|)
block|{
name|setRowHidden
argument_list|(
name|row
argument_list|(
name|item
argument_list|)
argument_list|,
name|hide
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Scrolls the view if necessary to ensure that the \a item is visible.      \a hint specifies where the \a item should be located after the operation. */
end_comment
begin_function
DECL|function|scrollToItem
name|void
name|QListWidget
operator|::
name|scrollToItem
parameter_list|(
specifier|const
name|QListWidgetItem
modifier|*
name|item
parameter_list|,
name|QAbstractItemView
operator|::
name|ScrollHint
name|hint
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|index
argument_list|(
cast|const_cast
argument_list|<
name|QListWidgetItem
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
argument_list|)
decl_stmt|;
name|QListView
operator|::
name|scrollTo
argument_list|(
name|index
argument_list|,
name|hint
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes all items and selections in the view.      \warning All items will be permanently deleted. */
end_comment
begin_function
DECL|function|clear
name|void
name|QListWidget
operator|::
name|clear
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|selectionModel
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of MIME types that can be used to describe a list of     listwidget items.      \sa mimeData() */
end_comment
begin_function
DECL|function|mimeTypes
name|QStringList
name|QListWidget
operator|::
name|mimeTypes
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|listModel
argument_list|()
operator|->
name|QAbstractListModel
operator|::
name|mimeTypes
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns an object that contains a serialized description of the specified     \a items. The format used to describe the items is obtained from the     mimeTypes() function.      If the list of items is empty, 0 is returned instead of a serialized empty     list. */
end_comment
begin_if
if|#
directive|if
name|QT_VERSION
operator|>=
name|QT_VERSION_CHECK
argument_list|(
literal|6
operator|,
literal|0
operator|,
literal|0
argument_list|)
end_if
begin_decl_stmt
DECL|function|mimeData
name|QMimeData
modifier|*
name|QListWidget
operator|::
name|mimeData
argument_list|(
specifier|const
name|QList
argument_list|<
name|QListWidgetItem
operator|*
argument_list|>
operator|&
name|items
argument_list|)
decl|const
else|#
directive|else
name|QMimeData
modifier|*
name|QListWidget
operator|::
name|mimeData
argument_list|(
specifier|const
name|QList
argument_list|<
name|QListWidgetItem
operator|*
argument_list|>
name|items
argument_list|)
decl|const
endif|#
directive|endif
argument_list|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
argument_list|;
name|QModelIndexList
operator|&
name|cachedIndexes
operator|=
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|cachedIndexes
argument_list|;
comment|// if non empty, it's called from the model's own mimeData
argument_list|if
operator|(
name|cachedIndexes
operator|.
name|isEmpty
argument_list|()
operator|)
block|{
name|cachedIndexes
operator|.
name|reserve
argument_list|(
name|items
operator|.
name|count
argument_list|()
argument_list|)
block|;
foreach|foreach
control|(
name|QListWidgetItem
modifier|*
name|item
decl|,
name|items
control|)
name|cachedIndexes
operator|<<
name|indexFromItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|QMimeData
operator|*
name|result
operator|=
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|internalMimeData
argument_list|()
argument_list|;
name|cachedIndexes
operator|.
name|clear
argument_list|()
argument_list|;         return
name|result
argument_list|;     }
decl|return
name|d
operator|->
name|listModel
argument_list|()
decl|->
name|internalMimeData
argument_list|()
decl_stmt|;
end_decl_stmt
begin_ifndef
unit|}
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_comment
comment|/*!     Handles \a data supplied by an external drag and drop operation that ended     with the given \a action in the given \a index. Returns \c true if \a data and     \a action can be handled by the model; otherwise returns \c false.      \sa supportedDropActions() */
end_comment
begin_macro
unit|bool
DECL|function|dropMimeData
name|QListWidget
end_macro
begin_expr_stmt
DECL|function|dropMimeData
operator|::
name|dropMimeData
operator|(
name|int
name|index
operator|,
specifier|const
name|QMimeData
operator|*
name|data
operator|,
name|Qt
operator|::
name|DropAction
name|action
operator|)
block|{
name|QModelIndex
name|idx
block|;
name|int
name|row
operator|=
name|index
block|;
name|int
name|column
operator|=
literal|0
block|;
if|if
condition|(
name|dropIndicatorPosition
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|OnItem
condition|)
block|{
comment|// QAbstractListModel::dropMimeData will overwrite on the index if row == -1 and column == -1
name|idx
operator|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|row
operator|=
operator|-
literal|1
expr_stmt|;
name|column
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|d_func
argument_list|()
operator|->
name|listModel
argument_list|()
operator|->
name|QAbstractListModel
operator|::
name|dropMimeData
argument_list|(
name|data
argument_list|,
name|action
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|idx
argument_list|)
return|;
end_return
begin_comment
unit|}
comment|/*! \reimp */
end_comment
begin_macro
unit|void
DECL|function|dropEvent
name|QListWidget
end_macro
begin_expr_stmt
DECL|function|dropEvent
operator|::
name|dropEvent
operator|(
name|QDropEvent
operator|*
name|event
operator|)
block|{
name|Q_D
argument_list|(
name|QListWidget
argument_list|)
block|;
if|if
condition|(
name|event
operator|->
name|source
argument_list|()
operator|==
name|this
operator|&&
name|d
operator|->
name|movement
operator|!=
name|Static
condition|)
block|{
name|QListView
operator|::
name|dropEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
end_expr_stmt
begin_if
if|if
condition|(
name|event
operator|->
name|source
argument_list|()
operator|==
name|this
operator|&&
operator|(
name|event
operator|->
name|dropAction
argument_list|()
operator|==
name|Qt
operator|::
name|MoveAction
operator|||
name|dragDropMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|InternalMove
operator|)
condition|)
block|{
name|QModelIndex
name|topIndex
decl_stmt|;
name|int
name|col
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|row
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|dropOn
argument_list|(
name|event
argument_list|,
operator|&
name|row
argument_list|,
operator|&
name|col
argument_list|,
operator|&
name|topIndex
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|QModelIndex
argument_list|>
name|selIndexes
init|=
name|selectedIndexes
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|persIndexes
decl_stmt|;
specifier|const
name|int
name|selIndexesCount
init|=
name|selIndexes
operator|.
name|count
argument_list|()
decl_stmt|;
name|persIndexes
operator|.
name|reserve
argument_list|(
name|selIndexesCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selIndexesCount
condition|;
name|i
operator|++
control|)
name|persIndexes
operator|.
name|append
argument_list|(
name|selIndexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|persIndexes
operator|.
name|contains
argument_list|(
name|topIndex
argument_list|)
condition|)
return|return;
name|std
operator|::
name|sort
argument_list|(
name|persIndexes
operator|.
name|begin
argument_list|()
argument_list|,
name|persIndexes
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
comment|// The dropped items will remain in the same visual order.
name|QPersistentModelIndex
name|dropRow
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|topIndex
argument_list|)
decl_stmt|;
name|int
name|r
init|=
name|row
operator|==
operator|-
literal|1
condition|?
name|count
argument_list|()
else|:
operator|(
name|dropRow
operator|.
name|row
argument_list|()
operator|>=
literal|0
condition|?
name|dropRow
operator|.
name|row
argument_list|()
else|:
name|row
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|persIndexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPersistentModelIndex
modifier|&
name|pIndex
init|=
name|persIndexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|move
argument_list|(
name|pIndex
operator|.
name|row
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|pIndex
operator|.
name|row
argument_list|()
operator|+
literal|1
expr_stmt|;
comment|// Dropped items are inserted contiguously and in the right order.
block|}
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
comment|// Don't want QAbstractItemView to delete it because it was "moved" we already did it
name|event
operator|->
name|setDropAction
argument_list|(
name|Qt
operator|::
name|CopyAction
argument_list|)
expr_stmt|;
block|}
block|}
end_if
begin_expr_stmt
name|QListView
operator|::
name|dropEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/*!     Returns the drop actions supported by this view.      \sa Qt::DropActions */
end_comment
begin_function
unit|Qt
DECL|function|supportedDropActions
operator|::
name|DropActions
name|QListWidget
operator|::
name|supportedDropActions
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|QAbstractListModel
operator|::
name|supportedDropActions
argument_list|()
operator||
name|Qt
operator|::
name|MoveAction
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_comment
comment|/*!     Returns a list of pointers to the items contained in the \a data object. If     the object was not created by a QListWidget in the same process, the list     is empty. */
end_comment
begin_function
DECL|function|items
name|QList
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|>
name|QListWidget
operator|::
name|items
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|)
specifier|const
block|{
specifier|const
name|QListWidgetMimeData
modifier|*
name|lwd
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QListWidgetMimeData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|lwd
condition|)
return|return
name|lwd
operator|->
name|items
return|;
return|return
name|QList
argument_list|<
name|QListWidgetItem
operator|*
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the QModelIndex assocated with the given \a item. */
end_comment
begin_function
DECL|function|indexFromItem
name|QModelIndex
name|QListWidget
operator|::
name|indexFromItem
parameter_list|(
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the QListWidgetItem assocated with the given \a index. */
end_comment
begin_function
DECL|function|itemFromIndex
name|QListWidgetItem
modifier|*
name|QListWidget
operator|::
name|itemFromIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isIndexValid
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|d
operator|->
name|listModel
argument_list|()
operator|->
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setModel
name|void
name|QListWidget
operator|::
name|setModel
parameter_list|(
name|QAbstractItemModel
modifier|*
comment|/*model*/
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
literal|"QListWidget::setModel() - Changing the model of the QListWidget is not allowed."
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QListWidget
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
return|return
name|QListView
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qlistwidget.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_LISTWIDGET
end_comment
end_unit
