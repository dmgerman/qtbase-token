begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtablewidget.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABLEWIDGET
end_ifndef
begin_include
include|#
directive|include
file|<qitemdelegate.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<private/qtablewidget_p.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QTableModel
name|QTableModel
operator|::
name|QTableModel
parameter_list|(
name|int
name|rows
parameter_list|,
name|int
name|columns
parameter_list|,
name|QTableWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractTableModel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|prototype
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|tableItems
argument_list|(
name|rows
operator|*
name|columns
argument_list|,
literal|0
argument_list|)
member_init_list|,
name|verticalHeaderItems
argument_list|(
name|rows
argument_list|,
literal|0
argument_list|)
member_init_list|,
name|horizontalHeaderItems
argument_list|(
name|columns
argument_list|,
literal|0
argument_list|)
block|{}
end_constructor
begin_destructor
DECL|function|~QTableModel
name|QTableModel
operator|::
name|~
name|QTableModel
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|prototype
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|insertRows
name|bool
name|QTableModel
operator|::
name|insertRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|1
operator|||
name|row
argument_list|<
literal|0
operator|||
name|row
argument_list|>
name|verticalHeaderItems
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|beginInsertRows
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|verticalHeaderItems
operator|.
name|count
argument_list|()
decl_stmt|;
name|int
name|cc
init|=
name|horizontalHeaderItems
operator|.
name|count
argument_list|()
decl_stmt|;
name|verticalHeaderItems
operator|.
name|insert
argument_list|(
name|row
argument_list|,
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|==
literal|0
condition|)
name|tableItems
operator|.
name|resize
argument_list|(
name|cc
operator|*
name|count
argument_list|)
expr_stmt|;
else|else
name|tableItems
operator|.
name|insert
argument_list|(
name|tableIndex
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
argument_list|,
name|cc
operator|*
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endInsertRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|insertColumns
name|bool
name|QTableModel
operator|::
name|insertColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|1
operator|||
name|column
argument_list|<
literal|0
operator|||
name|column
argument_list|>
name|horizontalHeaderItems
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|beginInsertColumns
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|column
argument_list|,
name|column
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|verticalHeaderItems
operator|.
name|count
argument_list|()
decl_stmt|;
name|int
name|cc
init|=
name|horizontalHeaderItems
operator|.
name|count
argument_list|()
decl_stmt|;
name|horizontalHeaderItems
operator|.
name|insert
argument_list|(
name|column
argument_list|,
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|cc
operator|==
literal|0
condition|)
name|tableItems
operator|.
name|resize
argument_list|(
name|rc
operator|*
name|count
argument_list|)
expr_stmt|;
else|else
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rc
condition|;
operator|++
name|row
control|)
name|tableItems
operator|.
name|insert
argument_list|(
name|tableIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|,
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endInsertColumns
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|removeRows
name|bool
name|QTableModel
operator|::
name|removeRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|1
operator|||
name|row
argument_list|<
literal|0
operator|||
name|row
operator|+
name|count
argument_list|>
name|verticalHeaderItems
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|beginRemoveRows
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|tableIndex
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|count
operator|*
name|columnCount
argument_list|()
decl_stmt|;
name|QTableWidgetItem
modifier|*
name|oldItem
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|n
operator|+
name|i
condition|;
operator|++
name|j
control|)
block|{
name|oldItem
operator|=
name|tableItems
operator|.
name|at
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldItem
condition|)
name|oldItem
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|oldItem
expr_stmt|;
block|}
name|tableItems
operator|.
name|remove
argument_list|(
name|qMax
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|v
init|=
name|row
init|;
name|v
operator|<
name|row
operator|+
name|count
condition|;
operator|++
name|v
control|)
block|{
name|oldItem
operator|=
name|verticalHeaderItems
operator|.
name|at
argument_list|(
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldItem
condition|)
name|oldItem
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|oldItem
expr_stmt|;
block|}
name|verticalHeaderItems
operator|.
name|remove
argument_list|(
name|row
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|endRemoveRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|removeColumns
name|bool
name|QTableModel
operator|::
name|removeColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|1
operator|||
name|column
argument_list|<
literal|0
operator|||
name|column
operator|+
name|count
argument_list|>
name|horizontalHeaderItems
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|beginRemoveColumns
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|column
argument_list|,
name|column
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QTableWidgetItem
modifier|*
name|oldItem
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|rowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
operator|--
name|row
control|)
block|{
name|int
name|i
init|=
name|tableIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|i
operator|+
name|count
condition|;
operator|++
name|j
control|)
block|{
name|oldItem
operator|=
name|tableItems
operator|.
name|at
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldItem
condition|)
name|oldItem
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|oldItem
expr_stmt|;
block|}
name|tableItems
operator|.
name|remove
argument_list|(
name|i
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|h
init|=
name|column
init|;
name|h
operator|<
name|column
operator|+
name|count
condition|;
operator|++
name|h
control|)
block|{
name|oldItem
operator|=
name|horizontalHeaderItems
operator|.
name|at
argument_list|(
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldItem
condition|)
name|oldItem
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|oldItem
expr_stmt|;
block|}
name|horizontalHeaderItems
operator|.
name|remove
argument_list|(
name|column
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|endRemoveColumns
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setItem
name|void
name|QTableModel
operator|::
name|setItem
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|int
name|i
init|=
name|tableIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
operator|||
name|i
operator|>=
name|tableItems
operator|.
name|count
argument_list|()
condition|)
return|return;
name|QTableWidgetItem
modifier|*
name|oldItem
init|=
name|tableItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
name|oldItem
condition|)
return|return;
comment|// remove old
if|if
condition|(
name|oldItem
condition|)
name|oldItem
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|tableItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QTableWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
name|QTableWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
comment|// set new
if|if
condition|(
name|item
condition|)
name|item
operator|->
name|d
operator|->
name|id
operator|=
name|i
expr_stmt|;
name|tableItems
index|[
name|i
index|]
operator|=
name|item
expr_stmt|;
if|if
condition|(
name|view
operator|&&
name|view
operator|->
name|isSortingEnabled
argument_list|()
operator|&&
name|view
operator|->
name|horizontalHeader
argument_list|()
operator|->
name|sortIndicatorSection
argument_list|()
operator|==
name|column
condition|)
block|{
comment|// sorted insertion
name|Qt
operator|::
name|SortOrder
name|order
init|=
name|view
operator|->
name|horizontalHeader
argument_list|()
operator|->
name|sortIndicatorOrder
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|colItems
init|=
name|columnItems
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|<
name|colItems
operator|.
name|count
argument_list|()
condition|)
name|colItems
operator|.
name|remove
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|int
name|sortedRow
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|0
condition|)
block|{
comment|// move to after all non-0 (sortable) items
name|sortedRow
operator|=
name|colItems
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QVector
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
name|it
decl_stmt|;
name|it
operator|=
name|sortedInsertionIterator
argument_list|(
name|colItems
operator|.
name|begin
argument_list|()
argument_list|,
name|colItems
operator|.
name|end
argument_list|()
argument_list|,
name|order
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|sortedRow
operator|=
name|qMax
argument_list|(
call|(
name|int
call|)
argument_list|(
name|it
operator|-
name|colItems
operator|.
name|begin
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sortedRow
operator|!=
name|row
condition|)
block|{
emit|emit
name|layoutAboutToBeChanged
argument_list|()
emit|;
comment|// move the items @ row to sortedRow
name|int
name|cc
init|=
name|columnCount
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|rowItems
argument_list|(
name|cc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cc
condition|;
operator|++
name|j
control|)
name|rowItems
index|[
name|j
index|]
operator|=
name|tableItems
operator|.
name|at
argument_list|(
name|tableIndex
argument_list|(
name|row
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|tableItems
operator|.
name|remove
argument_list|(
name|tableIndex
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
argument_list|,
name|cc
argument_list|)
expr_stmt|;
name|tableItems
operator|.
name|insert
argument_list|(
name|tableIndex
argument_list|(
name|sortedRow
argument_list|,
literal|0
argument_list|)
argument_list|,
name|cc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cc
condition|;
operator|++
name|j
control|)
name|tableItems
index|[
name|tableIndex
argument_list|(
name|sortedRow
argument_list|,
name|j
argument_list|)
index|]
operator|=
name|rowItems
operator|.
name|at
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|QTableWidgetItem
modifier|*
name|header
init|=
name|verticalHeaderItems
operator|.
name|at
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|verticalHeaderItems
operator|.
name|remove
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|verticalHeaderItems
operator|.
name|insert
argument_list|(
name|sortedRow
argument_list|,
name|header
argument_list|)
expr_stmt|;
comment|// update persistent indexes
name|QModelIndexList
name|oldPersistentIndexes
init|=
name|persistentIndexList
argument_list|()
decl_stmt|;
name|QModelIndexList
name|newPersistentIndexes
init|=
name|oldPersistentIndexes
decl_stmt|;
name|updateRowIndexes
argument_list|(
name|newPersistentIndexes
argument_list|,
name|row
argument_list|,
name|sortedRow
argument_list|)
expr_stmt|;
name|changePersistentIndexList
argument_list|(
name|oldPersistentIndexes
argument_list|,
name|newPersistentIndexes
argument_list|)
expr_stmt|;
emit|emit
name|layoutChanged
argument_list|()
emit|;
return|return;
block|}
block|}
name|QModelIndex
name|idx
init|=
name|QAbstractTableModel
operator|::
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
emit|emit
name|dataChanged
argument_list|(
name|idx
argument_list|,
name|idx
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|takeItem
name|QTableWidgetItem
modifier|*
name|QTableModel
operator|::
name|takeItem
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|long
name|i
init|=
name|tableIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|QTableWidgetItem
modifier|*
name|itm
init|=
name|tableItems
operator|.
name|value
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
condition|)
block|{
name|itm
operator|->
name|view
operator|=
literal|0
expr_stmt|;
name|itm
operator|->
name|d
operator|->
name|id
operator|=
operator|-
literal|1
expr_stmt|;
name|tableItems
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|QModelIndex
name|ind
init|=
name|index
argument_list|(
name|itm
argument_list|)
decl_stmt|;
emit|emit
name|dataChanged
argument_list|(
name|ind
argument_list|,
name|ind
argument_list|)
emit|;
block|}
return|return
name|itm
return|;
block|}
end_function
begin_function
DECL|function|item
name|QTableWidgetItem
modifier|*
name|QTableModel
operator|::
name|item
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
return|return
name|item
argument_list|(
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|item
name|QTableWidgetItem
modifier|*
name|QTableModel
operator|::
name|item
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|(
name|index
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
name|tableItems
operator|.
name|at
argument_list|(
name|tableIndex
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|removeItem
name|void
name|QTableModel
operator|::
name|removeItem
parameter_list|(
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|int
name|i
init|=
name|tableItems
operator|.
name|indexOf
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
name|tableItems
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|QModelIndex
name|idx
init|=
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
emit|emit
name|dataChanged
argument_list|(
name|idx
argument_list|,
name|idx
argument_list|)
emit|;
return|return;
block|}
name|i
operator|=
name|verticalHeaderItems
operator|.
name|indexOf
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
name|verticalHeaderItems
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
emit|emit
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
emit|;
return|return;
block|}
name|i
operator|=
name|horizontalHeaderItems
operator|.
name|indexOf
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
name|horizontalHeaderItems
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
emit|emit
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
emit|;
return|return;
block|}
block|}
end_function
begin_function
DECL|function|setHorizontalHeaderItem
name|void
name|QTableModel
operator|::
name|setHorizontalHeaderItem
parameter_list|(
name|int
name|section
parameter_list|,
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
name|section
operator|<
literal|0
operator|||
name|section
operator|>=
name|horizontalHeaderItems
operator|.
name|count
argument_list|()
condition|)
return|return;
name|QTableWidgetItem
modifier|*
name|oldItem
init|=
name|horizontalHeaderItems
operator|.
name|at
argument_list|(
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
name|oldItem
condition|)
return|return;
if|if
condition|(
name|oldItem
condition|)
name|oldItem
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|oldItem
expr_stmt|;
name|QTableWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
name|QTableWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
block|{
name|item
operator|->
name|view
operator|=
name|view
expr_stmt|;
name|item
operator|->
name|itemFlags
operator|=
name|Qt
operator|::
name|ItemFlags
argument_list|(
name|int
argument_list|(
name|item
operator|->
name|itemFlags
argument_list|)
operator||
name|ItemIsHeaderItem
argument_list|)
expr_stmt|;
block|}
name|horizontalHeaderItems
index|[
name|section
index|]
operator|=
name|item
expr_stmt|;
emit|emit
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|section
argument_list|,
name|section
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|setVerticalHeaderItem
name|void
name|QTableModel
operator|::
name|setVerticalHeaderItem
parameter_list|(
name|int
name|section
parameter_list|,
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
name|section
operator|<
literal|0
operator|||
name|section
operator|>=
name|verticalHeaderItems
operator|.
name|count
argument_list|()
condition|)
return|return;
name|QTableWidgetItem
modifier|*
name|oldItem
init|=
name|verticalHeaderItems
operator|.
name|at
argument_list|(
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
name|oldItem
condition|)
return|return;
if|if
condition|(
name|oldItem
condition|)
name|oldItem
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|oldItem
expr_stmt|;
name|QTableWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
name|QTableWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
block|{
name|item
operator|->
name|view
operator|=
name|view
expr_stmt|;
name|item
operator|->
name|itemFlags
operator|=
name|Qt
operator|::
name|ItemFlags
argument_list|(
name|int
argument_list|(
name|item
operator|->
name|itemFlags
argument_list|)
operator||
name|ItemIsHeaderItem
argument_list|)
expr_stmt|;
block|}
name|verticalHeaderItems
index|[
name|section
index|]
operator|=
name|item
expr_stmt|;
emit|emit
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|,
name|section
argument_list|,
name|section
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|takeHorizontalHeaderItem
name|QTableWidgetItem
modifier|*
name|QTableModel
operator|::
name|takeHorizontalHeaderItem
parameter_list|(
name|int
name|section
parameter_list|)
block|{
if|if
condition|(
name|section
operator|<
literal|0
operator|||
name|section
operator|>=
name|horizontalHeaderItems
operator|.
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
name|QTableWidgetItem
modifier|*
name|itm
init|=
name|horizontalHeaderItems
operator|.
name|at
argument_list|(
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
condition|)
block|{
name|itm
operator|->
name|view
operator|=
literal|0
expr_stmt|;
name|itm
operator|->
name|itemFlags
operator|&=
operator|~
name|ItemIsHeaderItem
expr_stmt|;
name|horizontalHeaderItems
index|[
name|section
index|]
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|itm
return|;
block|}
end_function
begin_function
DECL|function|takeVerticalHeaderItem
name|QTableWidgetItem
modifier|*
name|QTableModel
operator|::
name|takeVerticalHeaderItem
parameter_list|(
name|int
name|section
parameter_list|)
block|{
if|if
condition|(
name|section
operator|<
literal|0
operator|||
name|section
operator|>=
name|verticalHeaderItems
operator|.
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
name|QTableWidgetItem
modifier|*
name|itm
init|=
name|verticalHeaderItems
operator|.
name|at
argument_list|(
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
condition|)
block|{
name|itm
operator|->
name|view
operator|=
literal|0
expr_stmt|;
name|itm
operator|->
name|itemFlags
operator|&=
operator|~
name|ItemIsHeaderItem
expr_stmt|;
name|verticalHeaderItems
index|[
name|section
index|]
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|itm
return|;
block|}
end_function
begin_function
DECL|function|horizontalHeaderItem
name|QTableWidgetItem
modifier|*
name|QTableModel
operator|::
name|horizontalHeaderItem
parameter_list|(
name|int
name|section
parameter_list|)
block|{
return|return
name|horizontalHeaderItems
operator|.
name|value
argument_list|(
name|section
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|verticalHeaderItem
name|QTableWidgetItem
modifier|*
name|QTableModel
operator|::
name|verticalHeaderItem
parameter_list|(
name|int
name|section
parameter_list|)
block|{
return|return
name|verticalHeaderItems
operator|.
name|value
argument_list|(
name|section
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|index
name|QModelIndex
name|QTableModel
operator|::
name|index
parameter_list|(
specifier|const
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|item
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|id
init|=
name|item
operator|->
name|d
operator|->
name|id
decl_stmt|;
if|if
condition|(
name|id
operator|>=
literal|0
operator|&&
name|id
operator|<
name|tableItems
operator|.
name|count
argument_list|()
operator|&&
name|tableItems
operator|.
name|at
argument_list|(
name|id
argument_list|)
operator|==
name|item
condition|)
block|{
name|i
operator|=
name|id
expr_stmt|;
block|}
else|else
block|{
comment|// we need to search for the item
name|i
operator|=
name|tableItems
operator|.
name|indexOf
argument_list|(
cast|const_cast
argument_list|<
name|QTableWidgetItem
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
comment|// not found
return|return
name|QModelIndex
argument_list|()
return|;
block|}
name|int
name|row
init|=
name|i
operator|/
name|columnCount
argument_list|()
decl_stmt|;
name|int
name|col
init|=
name|i
operator|%
name|columnCount
argument_list|()
decl_stmt|;
return|return
name|QAbstractTableModel
operator|::
name|index
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setRowCount
name|void
name|QTableModel
operator|::
name|setRowCount
parameter_list|(
name|int
name|rows
parameter_list|)
block|{
name|int
name|rc
init|=
name|verticalHeaderItems
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|rows
operator|<
literal|0
operator|||
name|rc
operator|==
name|rows
condition|)
return|return;
if|if
condition|(
name|rc
operator|<
name|rows
condition|)
name|insertRows
argument_list|(
name|qMax
argument_list|(
name|rc
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rows
operator|-
name|rc
argument_list|)
expr_stmt|;
else|else
name|removeRows
argument_list|(
name|qMax
argument_list|(
name|rows
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rc
operator|-
name|rows
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setColumnCount
name|void
name|QTableModel
operator|::
name|setColumnCount
parameter_list|(
name|int
name|columns
parameter_list|)
block|{
name|int
name|cc
init|=
name|horizontalHeaderItems
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|columns
operator|<
literal|0
operator|||
name|cc
operator|==
name|columns
condition|)
return|return;
if|if
condition|(
name|cc
operator|<
name|columns
condition|)
name|insertColumns
argument_list|(
name|qMax
argument_list|(
name|cc
argument_list|,
literal|0
argument_list|)
argument_list|,
name|columns
operator|-
name|cc
argument_list|)
expr_stmt|;
else|else
name|removeColumns
argument_list|(
name|qMax
argument_list|(
name|columns
argument_list|,
literal|0
argument_list|)
argument_list|,
name|cc
operator|-
name|columns
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowCount
name|int
name|QTableModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
return|return
name|parent
operator|.
name|isValid
argument_list|()
condition|?
literal|0
else|:
name|verticalHeaderItems
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|columnCount
name|int
name|QTableModel
operator|::
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
return|return
name|parent
operator|.
name|isValid
argument_list|()
condition|?
literal|0
else|:
name|horizontalHeaderItems
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|data
name|QVariant
name|QTableModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
name|QTableWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
condition|)
return|return
name|itm
operator|->
name|data
argument_list|(
name|role
argument_list|)
return|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setData
name|bool
name|QTableModel
operator|::
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QTableWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
condition|)
block|{
name|itm
operator|->
name|setData
argument_list|(
name|role
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// don't create dummy table items for empty values
if|if
condition|(
operator|!
name|value
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QTableWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
name|QTableWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|view
condition|)
return|return
literal|false
return|;
name|itm
operator|=
name|createItem
argument_list|()
expr_stmt|;
name|itm
operator|->
name|setData
argument_list|(
name|role
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|view
operator|->
name|setItem
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|,
name|itm
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|itemData
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|QTableModel
operator|::
name|itemData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|roles
decl_stmt|;
name|QTableWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itm
operator|->
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|roles
operator|.
name|insert
argument_list|(
name|itm
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|role
argument_list|,
name|itm
operator|->
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|roles
return|;
block|}
end_function
begin_comment
comment|// reimplemented to ensure that only one dataChanged() signal is emitted
end_comment
begin_function
DECL|function|setItemData
name|bool
name|QTableModel
operator|::
name|setItemData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
modifier|&
name|roles
parameter_list|)
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QTableWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
name|QTableWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
name|QTableWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
condition|)
block|{
name|itm
operator|->
name|view
operator|=
literal|0
expr_stmt|;
comment|// prohibits item from calling itemChanged()
name|bool
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|roles
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|roles
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|itm
operator|->
name|data
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
operator|!=
name|it
operator|.
name|value
argument_list|()
condition|)
block|{
name|itm
operator|->
name|setData
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|itm
operator|->
name|view
operator|=
name|view
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|itemChanged
argument_list|(
name|itm
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|view
condition|)
return|return
literal|false
return|;
name|itm
operator|=
name|createItem
argument_list|()
expr_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|roles
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|roles
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|itm
operator|->
name|setData
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|->
name|setItem
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|,
name|itm
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|QTableModel
operator|::
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|Qt
operator|::
name|ItemIsDropEnabled
return|;
if|if
condition|(
name|QTableWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|itm
operator|->
name|flags
argument_list|()
return|;
return|return
operator|(
name|Qt
operator|::
name|ItemIsEditable
operator||
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
operator|)
return|;
block|}
end_function
begin_function
DECL|function|sort
name|void
name|QTableModel
operator|::
name|sort
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
name|QVector
argument_list|<
name|QPair
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
argument_list|>
name|sortable
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|unsortable
decl_stmt|;
name|sortable
operator|.
name|reserve
argument_list|(
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
name|unsortable
operator|.
name|reserve
argument_list|(
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rowCount
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
if|if
condition|(
name|QTableWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
condition|)
name|sortable
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QTableWidgetItem
operator|*
argument_list|,
name|int
argument_list|>
argument_list|(
name|itm
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|unsortable
operator|.
name|append
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|LessThan
name|compare
init|=
operator|(
name|order
operator|==
name|Qt
operator|::
name|AscendingOrder
condition|?
operator|&
name|itemLessThan
else|:
operator|&
name|itemGreaterThan
operator|)
decl_stmt|;
name|std
operator|::
name|stable_sort
argument_list|(
name|sortable
operator|.
name|begin
argument_list|()
argument_list|,
name|sortable
operator|.
name|end
argument_list|()
argument_list|,
name|compare
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|sorted_table
argument_list|(
name|tableItems
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
name|QModelIndexList
name|from
decl_stmt|;
name|QModelIndexList
name|to
decl_stmt|;
specifier|const
name|int
name|numRows
init|=
name|rowCount
argument_list|()
decl_stmt|;
specifier|const
name|int
name|numColumns
init|=
name|columnCount
argument_list|()
decl_stmt|;
name|from
operator|.
name|reserve
argument_list|(
name|numRows
operator|*
name|numColumns
argument_list|)
expr_stmt|;
name|to
operator|.
name|reserve
argument_list|(
name|numRows
operator|*
name|numColumns
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
operator|++
name|i
control|)
block|{
name|int
name|r
init|=
operator|(
name|i
operator|<
name|sortable
operator|.
name|count
argument_list|()
condition|?
name|sortable
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
else|:
name|unsortable
operator|.
name|at
argument_list|(
name|i
operator|-
name|sortable
operator|.
name|count
argument_list|()
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numColumns
condition|;
operator|++
name|c
control|)
block|{
name|sorted_table
index|[
name|tableIndex
argument_list|(
name|i
argument_list|,
name|c
argument_list|)
index|]
operator|=
name|item
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|from
operator|.
name|append
argument_list|(
name|createIndex
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|to
operator|.
name|append
argument_list|(
name|createIndex
argument_list|(
name|i
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
emit|emit
name|layoutAboutToBeChanged
argument_list|()
emit|;
name|tableItems
operator|=
name|sorted_table
expr_stmt|;
name|changePersistentIndexList
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
comment|// ### slow
emit|emit
name|layoutChanged
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|/*   \internal    Ensures that rows in the interval [start, end] are   sorted according to the contents of column \a column   and the given sort \a order. */
end_comment
begin_function
DECL|function|ensureSorted
name|void
name|QTableModel
operator|::
name|ensureSorted
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|int
name|count
init|=
name|end
operator|-
name|start
operator|+
literal|1
decl_stmt|;
name|QVector
argument_list|<
name|QPair
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
argument_list|>
name|sorting
decl_stmt|;
name|sorting
operator|.
name|reserve
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
name|start
init|;
name|row
operator|<=
name|end
condition|;
operator|++
name|row
control|)
block|{
name|QTableWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
operator|==
literal|0
condition|)
block|{
comment|// no more sortable items (all 0-items are
comment|// at the end of the table when it is sorted)
break|break;
block|}
name|sorting
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QTableWidgetItem
operator|*
argument_list|,
name|int
argument_list|>
argument_list|(
name|itm
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LessThan
name|compare
init|=
operator|(
name|order
operator|==
name|Qt
operator|::
name|AscendingOrder
condition|?
operator|&
name|itemLessThan
else|:
operator|&
name|itemGreaterThan
operator|)
decl_stmt|;
name|std
operator|::
name|stable_sort
argument_list|(
name|sorting
operator|.
name|begin
argument_list|()
argument_list|,
name|sorting
operator|.
name|end
argument_list|()
argument_list|,
name|compare
argument_list|)
expr_stmt|;
name|QModelIndexList
name|oldPersistentIndexes
decl_stmt|,
name|newPersistentIndexes
decl_stmt|;
name|QVector
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|newTable
init|=
name|tableItems
decl_stmt|;
name|QVector
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|newVertical
init|=
name|verticalHeaderItems
decl_stmt|;
name|QVector
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|colItems
init|=
name|columnItems
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
name|vit
init|=
name|colItems
operator|.
name|begin
argument_list|()
decl_stmt|;
name|bool
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sorting
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|oldRow
init|=
name|sorting
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
decl_stmt|;
name|QTableWidgetItem
modifier|*
name|item
init|=
name|colItems
operator|.
name|at
argument_list|(
name|oldRow
argument_list|)
decl_stmt|;
name|colItems
operator|.
name|remove
argument_list|(
name|oldRow
argument_list|)
expr_stmt|;
name|vit
operator|=
name|sortedInsertionIterator
argument_list|(
name|vit
argument_list|,
name|colItems
operator|.
name|end
argument_list|()
argument_list|,
name|order
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|int
name|newRow
init|=
name|qMax
argument_list|(
call|(
name|int
call|)
argument_list|(
name|vit
operator|-
name|colItems
operator|.
name|begin
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|newRow
operator|<
name|oldRow
operator|)
operator|&&
operator|!
operator|(
operator|*
name|item
operator|<
operator|*
name|colItems
operator|.
name|at
argument_list|(
name|oldRow
operator|-
literal|1
argument_list|)
operator|)
operator|&&
operator|!
operator|(
operator|*
name|colItems
operator|.
name|at
argument_list|(
name|oldRow
operator|-
literal|1
argument_list|)
operator|<
operator|*
name|item
operator|)
condition|)
name|newRow
operator|=
name|oldRow
expr_stmt|;
name|vit
operator|=
name|colItems
operator|.
name|insert
argument_list|(
name|vit
argument_list|,
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|newRow
operator|!=
name|oldRow
condition|)
block|{
if|if
condition|(
operator|!
name|changed
condition|)
block|{
emit|emit
name|layoutAboutToBeChanged
argument_list|()
emit|;
name|oldPersistentIndexes
operator|=
name|persistentIndexList
argument_list|()
expr_stmt|;
name|newPersistentIndexes
operator|=
name|oldPersistentIndexes
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
comment|// move the items @ oldRow to newRow
name|int
name|cc
init|=
name|columnCount
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|rowItems
argument_list|(
name|cc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cc
condition|;
operator|++
name|j
control|)
name|rowItems
index|[
name|j
index|]
operator|=
name|newTable
operator|.
name|at
argument_list|(
name|tableIndex
argument_list|(
name|oldRow
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|remove
argument_list|(
name|tableIndex
argument_list|(
name|oldRow
argument_list|,
literal|0
argument_list|)
argument_list|,
name|cc
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|insert
argument_list|(
name|tableIndex
argument_list|(
name|newRow
argument_list|,
literal|0
argument_list|)
argument_list|,
name|cc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cc
condition|;
operator|++
name|j
control|)
name|newTable
index|[
name|tableIndex
argument_list|(
name|newRow
argument_list|,
name|j
argument_list|)
index|]
operator|=
name|rowItems
operator|.
name|at
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|QTableWidgetItem
modifier|*
name|header
init|=
name|newVertical
operator|.
name|at
argument_list|(
name|oldRow
argument_list|)
decl_stmt|;
name|newVertical
operator|.
name|remove
argument_list|(
name|oldRow
argument_list|)
expr_stmt|;
name|newVertical
operator|.
name|insert
argument_list|(
name|newRow
argument_list|,
name|header
argument_list|)
expr_stmt|;
comment|// update persistent indexes
name|updateRowIndexes
argument_list|(
name|newPersistentIndexes
argument_list|,
name|oldRow
argument_list|,
name|newRow
argument_list|)
expr_stmt|;
comment|// the index of the remaining rows may have changed
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|sorting
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|int
name|otherRow
init|=
name|sorting
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|.
name|second
decl_stmt|;
if|if
condition|(
name|oldRow
operator|<
name|otherRow
operator|&&
name|newRow
operator|>=
name|otherRow
condition|)
operator|--
name|sorting
index|[
name|j
index|]
operator|.
name|second
expr_stmt|;
elseif|else
if|if
condition|(
name|oldRow
operator|>
name|otherRow
operator|&&
name|newRow
operator|<=
name|otherRow
condition|)
operator|++
name|sorting
index|[
name|j
index|]
operator|.
name|second
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|tableItems
operator|=
name|newTable
expr_stmt|;
name|verticalHeaderItems
operator|=
name|newVertical
expr_stmt|;
name|changePersistentIndexList
argument_list|(
name|oldPersistentIndexes
argument_list|,
name|newPersistentIndexes
argument_list|)
expr_stmt|;
emit|emit
name|layoutChanged
argument_list|()
emit|;
block|}
block|}
end_function
begin_comment
comment|/*   \internal    Returns the non-0 items in column \a column. */
end_comment
begin_function
DECL|function|columnItems
name|QVector
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|QTableModel
operator|::
name|columnItems
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|QVector
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|items
decl_stmt|;
name|int
name|rc
init|=
name|rowCount
argument_list|()
decl_stmt|;
name|items
operator|.
name|reserve
argument_list|(
name|rc
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rc
condition|;
operator|++
name|row
control|)
block|{
name|QTableWidgetItem
modifier|*
name|itm
init|=
name|item
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
operator|==
literal|0
condition|)
block|{
comment|// no more sortable items (all 0-items are
comment|// at the end of the table when it is sorted)
break|break;
block|}
name|items
operator|.
name|append
argument_list|(
name|itm
argument_list|)
expr_stmt|;
block|}
return|return
name|items
return|;
block|}
end_function
begin_comment
comment|/*   \internal    Adjusts the row of each index in \a indexes if necessary, given   that a row of items has been moved from row \a movedFrom to row   \a movedTo. */
end_comment
begin_function
DECL|function|updateRowIndexes
name|void
name|QTableModel
operator|::
name|updateRowIndexes
parameter_list|(
name|QModelIndexList
modifier|&
name|indexes
parameter_list|,
name|int
name|movedFromRow
parameter_list|,
name|int
name|movedToRow
parameter_list|)
block|{
name|QModelIndexList
operator|::
name|iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|indexes
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|indexes
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|int
name|oldRow
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|row
argument_list|()
decl_stmt|;
name|int
name|newRow
init|=
name|oldRow
decl_stmt|;
if|if
condition|(
name|oldRow
operator|==
name|movedFromRow
condition|)
name|newRow
operator|=
name|movedToRow
expr_stmt|;
elseif|else
if|if
condition|(
name|movedFromRow
operator|<
name|oldRow
operator|&&
name|movedToRow
operator|>=
name|oldRow
condition|)
name|newRow
operator|=
name|oldRow
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|movedFromRow
operator|>
name|oldRow
operator|&&
name|movedToRow
operator|<=
name|oldRow
condition|)
name|newRow
operator|=
name|oldRow
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|newRow
operator|!=
name|oldRow
condition|)
operator|*
name|it
operator|=
name|index
argument_list|(
name|newRow
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|.
name|column
argument_list|()
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*   \internal    Returns an iterator to the item where \a item should be   inserted in the interval (\a begin, \a end) according to   the given sort \a order. */
end_comment
begin_function
DECL|function|sortedInsertionIterator
name|QVector
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
name|QTableModel
operator|::
name|sortedInsertionIterator
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
modifier|&
name|begin
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
operator|::
name|iterator
modifier|&
name|end
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|,
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
name|order
operator|==
name|Qt
operator|::
name|AscendingOrder
condition|)
return|return
name|std
operator|::
name|lower_bound
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|item
argument_list|,
name|QTableModelLessThan
argument_list|()
argument_list|)
return|;
return|return
name|std
operator|::
name|lower_bound
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|item
argument_list|,
name|QTableModelGreaterThan
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|itemLessThan
name|bool
name|QTableModel
operator|::
name|itemLessThan
parameter_list|(
specifier|const
name|QPair
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|left
parameter_list|,
specifier|const
name|QPair
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|right
parameter_list|)
block|{
return|return
operator|*
operator|(
name|left
operator|.
name|first
operator|)
operator|<
operator|*
operator|(
name|right
operator|.
name|first
operator|)
return|;
block|}
end_function
begin_function
DECL|function|itemGreaterThan
name|bool
name|QTableModel
operator|::
name|itemGreaterThan
parameter_list|(
specifier|const
name|QPair
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|left
parameter_list|,
specifier|const
name|QPair
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|,
name|int
argument_list|>
modifier|&
name|right
parameter_list|)
block|{
return|return
operator|(
operator|*
operator|(
name|right
operator|.
name|first
operator|)
operator|<
operator|*
operator|(
name|left
operator|.
name|first
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|headerData
name|QVariant
name|QTableModel
operator|::
name|headerData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|section
operator|<
literal|0
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|QTableWidgetItem
modifier|*
name|itm
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|&&
name|section
operator|<
name|horizontalHeaderItems
operator|.
name|count
argument_list|()
condition|)
name|itm
operator|=
name|horizontalHeaderItems
operator|.
name|at
argument_list|(
name|section
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|&&
name|section
operator|<
name|verticalHeaderItems
operator|.
name|count
argument_list|()
condition|)
name|itm
operator|=
name|verticalHeaderItems
operator|.
name|at
argument_list|(
name|section
argument_list|)
expr_stmt|;
else|else
return|return
name|QVariant
argument_list|()
return|;
comment|// section is out of bounds
if|if
condition|(
name|itm
condition|)
return|return
name|itm
operator|->
name|data
argument_list|(
name|role
argument_list|)
return|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|DisplayRole
condition|)
return|return
name|section
operator|+
literal|1
return|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setHeaderData
name|bool
name|QTableModel
operator|::
name|setHeaderData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
if|if
condition|(
name|section
operator|<
literal|0
operator|||
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|&&
name|horizontalHeaderItems
operator|.
name|size
argument_list|()
operator|<=
name|section
operator|)
operator|||
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|&&
name|verticalHeaderItems
operator|.
name|size
argument_list|()
operator|<=
name|section
operator|)
condition|)
return|return
literal|false
return|;
name|QTableWidgetItem
modifier|*
name|itm
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|itm
operator|=
name|horizontalHeaderItems
operator|.
name|at
argument_list|(
name|section
argument_list|)
expr_stmt|;
else|else
name|itm
operator|=
name|verticalHeaderItems
operator|.
name|at
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|itm
condition|)
block|{
name|itm
operator|->
name|setData
argument_list|(
name|role
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QTableModel
operator|::
name|isValid
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|index
operator|.
name|isValid
argument_list|()
operator|&&
name|index
operator|.
name|row
argument_list|()
operator|<
name|verticalHeaderItems
operator|.
name|count
argument_list|()
operator|&&
name|index
operator|.
name|column
argument_list|()
operator|<
name|horizontalHeaderItems
operator|.
name|count
argument_list|()
operator|)
return|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QTableModel
operator|::
name|clear
parameter_list|()
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|verticalHeaderItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|verticalHeaderItems
operator|.
name|at
argument_list|(
name|j
argument_list|)
condition|)
block|{
name|verticalHeaderItems
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|verticalHeaderItems
operator|.
name|at
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|verticalHeaderItems
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|horizontalHeaderItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|k
control|)
block|{
if|if
condition|(
name|horizontalHeaderItems
operator|.
name|at
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|horizontalHeaderItems
operator|.
name|at
argument_list|(
name|k
argument_list|)
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|horizontalHeaderItems
operator|.
name|at
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|horizontalHeaderItems
index|[
name|k
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|clearContents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearContents
name|void
name|QTableModel
operator|::
name|clearContents
parameter_list|()
block|{
name|beginResetModel
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|tableItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|tableItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|tableItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|tableItems
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|endResetModel
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|itemChanged
name|void
name|QTableModel
operator|::
name|itemChanged
parameter_list|(
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
operator|!
name|item
condition|)
return|return;
if|if
condition|(
name|item
operator|->
name|flags
argument_list|()
operator|&
name|ItemIsHeaderItem
condition|)
block|{
name|int
name|row
init|=
name|verticalHeaderItems
operator|.
name|indexOf
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
block|{
emit|emit
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
emit|;
block|}
else|else
block|{
name|int
name|column
init|=
name|horizontalHeaderItems
operator|.
name|indexOf
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|>=
literal|0
condition|)
emit|emit
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|column
argument_list|,
name|column
argument_list|)
emit|;
block|}
block|}
else|else
block|{
name|QModelIndex
name|idx
init|=
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|.
name|isValid
argument_list|()
condition|)
emit|emit
name|dataChanged
argument_list|(
name|idx
argument_list|,
name|idx
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|createItem
name|QTableWidgetItem
modifier|*
name|QTableModel
operator|::
name|createItem
parameter_list|()
specifier|const
block|{
return|return
name|prototype
condition|?
name|prototype
operator|->
name|clone
argument_list|()
else|:
operator|new
name|QTableWidgetItem
return|;
block|}
end_function
begin_function
DECL|function|itemPrototype
specifier|const
name|QTableWidgetItem
modifier|*
name|QTableModel
operator|::
name|itemPrototype
parameter_list|()
specifier|const
block|{
return|return
name|prototype
return|;
block|}
end_function
begin_function
DECL|function|setItemPrototype
name|void
name|QTableModel
operator|::
name|setItemPrototype
parameter_list|(
specifier|const
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
name|prototype
operator|!=
name|item
condition|)
block|{
operator|delete
name|prototype
expr_stmt|;
name|prototype
operator|=
name|item
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mimeTypes
name|QStringList
name|QTableModel
operator|::
name|mimeTypes
parameter_list|()
specifier|const
block|{
specifier|const
name|QTableWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|view
condition|?
name|view
operator|->
name|mimeTypes
argument_list|()
else|:
name|QStringList
argument_list|()
operator|)
return|;
block|}
end_function
begin_function
DECL|function|internalMimeData
name|QMimeData
modifier|*
name|QTableModel
operator|::
name|internalMimeData
parameter_list|()
specifier|const
block|{
return|return
name|QAbstractTableModel
operator|::
name|mimeData
argument_list|(
name|cachedIndexes
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mimeData
name|QMimeData
modifier|*
name|QTableModel
operator|::
name|mimeData
parameter_list|(
specifier|const
name|QModelIndexList
modifier|&
name|indexes
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|items
decl_stmt|;
specifier|const
name|int
name|indexesCount
init|=
name|indexes
operator|.
name|count
argument_list|()
decl_stmt|;
name|items
operator|.
name|reserve
argument_list|(
name|indexesCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexesCount
condition|;
operator|++
name|i
control|)
name|items
operator|<<
name|item
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QTableWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
comment|// cachedIndexes is a little hack to avoid copying from QModelIndexList to
comment|// QList<QTreeWidgetItem*> and back again in the view
name|cachedIndexes
operator|=
name|indexes
expr_stmt|;
name|QMimeData
modifier|*
name|mimeData
init|=
operator|(
name|view
condition|?
name|view
operator|->
name|mimeData
argument_list|(
name|items
argument_list|)
else|:
literal|0
operator|)
decl_stmt|;
name|cachedIndexes
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|mimeData
return|;
block|}
end_function
begin_function
DECL|function|dropMimeData
name|bool
name|QTableModel
operator|::
name|dropMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|DropAction
name|action
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|row
operator|=
name|index
operator|.
name|row
argument_list|()
expr_stmt|;
name|column
operator|=
name|index
operator|.
name|column
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|row
operator|==
operator|-
literal|1
operator|||
name|column
operator|==
operator|-
literal|1
condition|)
block|{
comment|// The user dropped outside the table.
name|row
operator|=
name|rowCount
argument_list|()
expr_stmt|;
name|column
operator|=
literal|0
expr_stmt|;
block|}
name|QTableWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
name|QTableWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|view
condition|?
name|view
operator|->
name|dropMimeData
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|data
argument_list|,
name|action
argument_list|)
else|:
literal|false
operator|)
return|;
block|}
end_function
begin_function
DECL|function|supportedDropActions
name|Qt
operator|::
name|DropActions
name|QTableModel
operator|::
name|supportedDropActions
parameter_list|()
specifier|const
block|{
specifier|const
name|QTableWidget
modifier|*
name|view
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableWidget
operator|*
argument_list|>
argument_list|(
name|QObject
operator|::
name|parent
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|view
condition|?
name|view
operator|->
name|supportedDropActions
argument_list|()
else|:
name|Qt
operator|::
name|DropActions
argument_list|(
name|Qt
operator|::
name|IgnoreAction
argument_list|)
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QTableWidgetSelectionRange      \brief The QTableWidgetSelectionRange class provides a way to interact with     selection in a model without using model indexes and a selection model.      \ingroup model-view     \inmodule QtWidgets      The QTableWidgetSelectionRange class stores the top left and bottom     right rows and columns of a selection range in a table. The     selections in the table may consist of several selection ranges.      \note If the item within the selection range is marked as not selectable,     e.g., \c{itemFlags()& Qt::ItemIsSelectable == 0} then it will not appear     in the selection range.      \sa QTableWidget */
end_comment
begin_comment
comment|/*!     Constructs an table selection range, i.e. a range     whose rowCount() and columnCount() are 0. */
end_comment
begin_constructor
DECL|function|QTableWidgetSelectionRange
name|QTableWidgetSelectionRange
operator|::
name|QTableWidgetSelectionRange
parameter_list|()
member_init_list|:
name|top
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|left
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|bottom
argument_list|(
operator|-
literal|2
argument_list|)
member_init_list|,
name|right
argument_list|(
operator|-
literal|2
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs the table selection range from the given \a top, \a     left, \a bottom and \a right table rows and columns.      \sa topRow(), leftColumn(), bottomRow(), rightColumn() */
end_comment
begin_constructor
DECL|function|QTableWidgetSelectionRange
name|QTableWidgetSelectionRange
operator|::
name|QTableWidgetSelectionRange
parameter_list|(
name|int
name|top
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|bottom
parameter_list|,
name|int
name|right
parameter_list|)
member_init_list|:
name|top
argument_list|(
name|top
argument_list|)
member_init_list|,
name|left
argument_list|(
name|left
argument_list|)
member_init_list|,
name|bottom
argument_list|(
name|bottom
argument_list|)
member_init_list|,
name|right
argument_list|(
name|right
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a the table selection range by copying the given \a     other table selection range. */
end_comment
begin_constructor
DECL|function|QTableWidgetSelectionRange
name|QTableWidgetSelectionRange
operator|::
name|QTableWidgetSelectionRange
parameter_list|(
specifier|const
name|QTableWidgetSelectionRange
modifier|&
name|other
parameter_list|)
member_init_list|:
name|top
argument_list|(
name|other
operator|.
name|top
argument_list|)
member_init_list|,
name|left
argument_list|(
name|other
operator|.
name|left
argument_list|)
member_init_list|,
name|bottom
argument_list|(
name|other
operator|.
name|bottom
argument_list|)
member_init_list|,
name|right
argument_list|(
name|other
operator|.
name|right
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the table selection range. */
end_comment
begin_destructor
DECL|function|~QTableWidgetSelectionRange
name|QTableWidgetSelectionRange
operator|::
name|~
name|QTableWidgetSelectionRange
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn int QTableWidgetSelectionRange::topRow() const      Returns the top row of the range.      \sa bottomRow(), leftColumn(), rowCount() */
end_comment
begin_comment
comment|/*!     \fn int QTableWidgetSelectionRange::bottomRow() const      Returns the bottom row of the range.      \sa topRow(), rightColumn(), rowCount() */
end_comment
begin_comment
comment|/*!     \fn int QTableWidgetSelectionRange::leftColumn() const      Returns the left column of the range.      \sa rightColumn(), topRow(), columnCount() */
end_comment
begin_comment
comment|/*!     \fn int QTableWidgetSelectionRange::rightColumn() const      Returns the right column of the range.      \sa leftColumn(), bottomRow(), columnCount() */
end_comment
begin_comment
comment|/*!     \since 4.1     \fn int QTableWidgetSelectionRange::rowCount() const      Returns the number of rows in the range.      This is equivalent to bottomRow() - topRow() + 1.      \sa columnCount(), topRow(), bottomRow() */
end_comment
begin_comment
comment|/*!     \since 4.1     \fn int QTableWidgetSelectionRange::columnCount() const      Returns the number of columns in the range.      This is equivalent to rightColumn() - leftColumn() + 1.      \sa rowCount(), leftColumn(), rightColumn() */
end_comment
begin_comment
comment|/*!     \class QTableWidgetItem     \brief The QTableWidgetItem class provides an item for use with the     QTableWidget class.      \ingroup model-view     \inmodule QtWidgets      Table items are used to hold pieces of information for table widgets.     Items usually contain text, icons, or checkboxes      The QTableWidgetItem class is a convenience class that replaces the     \c QTableItem class in Qt 3. It provides an item for use with     the QTableWidget class.      Top-level items are constructed without a parent then inserted at the     position specified by a pair of row and column numbers:      \snippet qtablewidget-using/mainwindow.cpp 3      Each item can have its own background brush which is set with     the setBackground() function. The current background brush can be     found with background().     The text label for each item can be rendered with its own font and brush.     These are specified with the setFont() and setForeground() functions,     and read with font() and foreground().      By default, items are enabled, editable, selectable, checkable, and can be     used both as the source of a drag and drop operation and as a drop target.     Each item's flags can be changed by calling setFlags() with the appropriate     value (see \l{Qt::ItemFlags}). Checkable items can be checked and unchecked     with the setCheckState() function. The corresponding checkState() function     indicates whether the item is currently checked.      \section1 Subclassing      When subclassing QTableWidgetItem to provide custom items, it is possible to     define new types for them so that they can be distinguished from standard     items. The constructors for subclasses that require this feature need to     call the base class constructor with a new type value equal to or greater     than \l UserType.      \sa QTableWidget, {Model/View Programming}, QListWidgetItem, QTreeWidgetItem */
end_comment
begin_comment
comment|/*!   \fn int QTableWidgetItem::row() const   \since 4.2    Returns the row of the item in the table.   If the item is not in a table, this function will return -1.    \sa column() */
end_comment
begin_comment
comment|/*!   \fn int QTableWidgetItem::column() const   \since 4.2    Returns the column of the item in the table.   If the item is not in a table, this function will return -1.    \sa row() */
end_comment
begin_comment
comment|/*!   \fn void QTableWidgetItem::setSelected(bool select)   \since 4.2    Sets the selected state of the item to \a select.    \sa isSelected() */
end_comment
begin_comment
comment|/*!   \fn bool QTableWidgetItem::isSelected() const   \since 4.2    Returns \c true if the item is selected, otherwise returns \c false.    \sa setSelected() */
end_comment
begin_comment
comment|/*!   \fn QSize QTableWidgetItem::sizeHint() const   \since 4.1    Returns the size hint set for the table item. */
end_comment
begin_comment
comment|/*!   \fn void QTableWidgetItem::setSizeHint(const QSize&size)   \since 4.1    Sets the size hint for the table item to be \a size.   If no size hint is set, the item delegate will compute the   size hint based on the item data. */
end_comment
begin_comment
comment|/*!     \fn Qt::CheckState QTableWidgetItem::checkState() const      Returns the checked state of the table item.      \sa flags() */
end_comment
begin_comment
comment|/*!     \fn void QTableWidgetItem::setCheckState(Qt::CheckState state)      Sets the check state of the table item to be \a state. */
end_comment
begin_comment
comment|/*!     \fn QTableWidget *QTableWidgetItem::tableWidget() const      Returns the table widget that contains the item. */
end_comment
begin_comment
comment|/*!     \fn Qt::ItemFlags QTableWidgetItem::flags() const      Returns the flags used to describe the item. These determine whether     the item can be checked, edited, and selected.      \sa setFlags() */
end_comment
begin_comment
comment|/*!     \fn void QTableWidgetItem::setFlags(Qt::ItemFlags flags)      Sets the flags for the item to the given \a flags. These determine whether     the item can be selected or modified.      \sa flags() */
end_comment
begin_function
DECL|function|setFlags
name|void
name|QTableWidgetItem
operator|::
name|setFlags
parameter_list|(
name|Qt
operator|::
name|ItemFlags
name|aflags
parameter_list|)
block|{
name|itemFlags
operator|=
name|aflags
expr_stmt|;
if|if
condition|(
name|QTableModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QTableModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
condition|)
name|model
operator|->
name|itemChanged
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QString QTableWidgetItem::text() const      Returns the item's text.      \sa setText() */
end_comment
begin_comment
comment|/*!     \fn void QTableWidgetItem::setText(const QString&text)      Sets the item's text to the \a text specified.      \sa text(), setFont(), setForeground() */
end_comment
begin_comment
comment|/*!     \fn QIcon QTableWidgetItem::icon() const      Returns the item's icon.      \sa setIcon(), {QAbstractItemView::iconSize}{iconSize} */
end_comment
begin_comment
comment|/*!     \fn void QTableWidgetItem::setIcon(const QIcon&icon)      Sets the item's icon to the \a icon specified.      \sa icon(), setText(), {QAbstractItemView::iconSize}{iconSize} */
end_comment
begin_comment
comment|/*!     \fn QString QTableWidgetItem::statusTip() const      Returns the item's status tip.      \sa setStatusTip() */
end_comment
begin_comment
comment|/*!     \fn void QTableWidgetItem::setStatusTip(const QString&statusTip)      Sets the status tip for the table item to the text specified by     \a statusTip. QTableWidget mouse tracking needs to be enabled for this     feature to work.      \sa statusTip(), setToolTip(), setWhatsThis() */
end_comment
begin_comment
comment|/*!     \fn QString QTableWidgetItem::toolTip() const      Returns the item's tooltip.      \sa setToolTip() */
end_comment
begin_comment
comment|/*!     \fn void QTableWidgetItem::setToolTip(const QString&toolTip)      Sets the item's tooltip to the string specified by \a toolTip.      \sa toolTip(), setStatusTip(), setWhatsThis() */
end_comment
begin_comment
comment|/*!     \fn QString QTableWidgetItem::whatsThis() const      Returns the item's "What's This?" help.      \sa setWhatsThis() */
end_comment
begin_comment
comment|/*!     \fn void QTableWidgetItem::setWhatsThis(const QString&whatsThis)      Sets the item's "What's This?" help to the string specified by \a whatsThis.      \sa whatsThis(), setStatusTip(), setToolTip() */
end_comment
begin_comment
comment|/*!     \fn QFont QTableWidgetItem::font() const      Returns the font used to render the item's text.      \sa setFont() */
end_comment
begin_comment
comment|/*!     \fn void QTableWidgetItem::setFont(const QFont&font)      Sets the font used to display the item's text to the given \a font.      \sa font(), setText(), setForeground() */
end_comment
begin_comment
comment|/*!     \fn QColor QTableWidgetItem::backgroundColor() const     \obsolete      This function is deprecated. Use background() instead. */
end_comment
begin_comment
comment|/*!     \fn void QTableWidgetItem::setBackgroundColor(const QColor&color)     \obsolete      This function is deprecated. Use setBackground() instead. */
end_comment
begin_comment
comment|/*!     \fn QBrush QTableWidgetItem::background() const     \since 4.2      Returns the brush used to render the item's background.      \sa foreground() */
end_comment
begin_comment
comment|/*!     \fn void QTableWidgetItem::setBackground(const QBrush&brush)     \since 4.2      Sets the item's background brush to the specified \a brush.      \sa setForeground() */
end_comment
begin_comment
comment|/*!     \fn QColor QTableWidgetItem::textColor() const     \obsolete      This function is deprecated. Use foreground() instead. */
end_comment
begin_comment
comment|/*!     \fn void QTableWidgetItem::setTextColor(const QColor&color)     \obsolete      This function is deprecated. Use setForeground() instead. */
end_comment
begin_comment
comment|/*!     \fn QBrush QTableWidgetItem::foreground() const     \since 4.2      Returns the brush used to render the item's foreground (e.g. text).      \sa background() */
end_comment
begin_comment
comment|/*!     \fn void QTableWidgetItem::setForeground(const QBrush&brush)     \since 4.2      Sets the item's foreground brush to the specified \a brush.      \sa setBackground() */
end_comment
begin_comment
comment|/*!     \fn int QTableWidgetItem::textAlignment() const      Returns the text alignment for the item's text.      \sa Qt::Alignment */
end_comment
begin_comment
comment|/*!     \fn void QTableWidgetItem::setTextAlignment(int alignment)      Sets the text alignment for the item's text to the \a alignment     specified.      \sa Qt::Alignment */
end_comment
begin_comment
comment|/*!     Constructs a table item of the specified \a type that does not belong     to any table.      \sa type() */
end_comment
begin_constructor
DECL|function|QTableWidgetItem
name|QTableWidgetItem
operator|::
name|QTableWidgetItem
parameter_list|(
name|int
name|type
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|type
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QTableWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|Qt
operator|::
name|ItemIsEditable
operator||
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a table item with the given \a text.      \sa type() */
end_comment
begin_constructor
DECL|function|QTableWidgetItem
name|QTableWidgetItem
operator|::
name|QTableWidgetItem
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|int
name|type
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|type
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QTableWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|Qt
operator|::
name|ItemIsEditable
operator||
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
block|{
name|setData
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a table item with the given \a icon and \a text.      \sa type() */
end_comment
begin_constructor
DECL|function|QTableWidgetItem
name|QTableWidgetItem
operator|::
name|QTableWidgetItem
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|int
name|type
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|type
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QTableWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|Qt
operator|::
name|ItemIsEditable
operator||
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
block|{
name|setData
argument_list|(
name|Qt
operator|::
name|DecorationRole
argument_list|,
name|icon
argument_list|)
expr_stmt|;
name|setData
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the table item. */
end_comment
begin_destructor
DECL|function|~QTableWidgetItem
name|QTableWidgetItem
operator|::
name|~
name|QTableWidgetItem
parameter_list|()
block|{
if|if
condition|(
name|QTableModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QTableModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
condition|)
name|model
operator|->
name|removeItem
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|view
operator|=
literal|0
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Creates a copy of the item. */
end_comment
begin_function
DECL|function|clone
name|QTableWidgetItem
modifier|*
name|QTableWidgetItem
operator|::
name|clone
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QTableWidgetItem
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the item's data for the given \a role to the specified \a value.      \sa Qt::ItemDataRole, data() */
end_comment
begin_function
DECL|function|setData
name|void
name|QTableWidgetItem
operator|::
name|setData
parameter_list|(
name|int
name|role
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|bool
name|found
init|=
literal|false
decl_stmt|;
name|role
operator|=
operator|(
name|role
operator|==
name|Qt
operator|::
name|EditRole
condition|?
name|Qt
operator|::
name|DisplayRole
else|:
name|role
operator|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|role
operator|==
name|role
condition|)
block|{
if|if
condition|(
name|values
index|[
name|i
index|]
operator|.
name|value
operator|==
name|value
condition|)
return|return;
name|values
index|[
name|i
index|]
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
name|values
operator|.
name|append
argument_list|(
name|QWidgetItemData
argument_list|(
name|role
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTableModel
modifier|*
name|model
init|=
operator|(
name|view
condition|?
name|qobject_cast
argument_list|<
name|QTableModel
operator|*
argument_list|>
argument_list|(
name|view
operator|->
name|model
argument_list|()
argument_list|)
else|:
literal|0
operator|)
condition|)
name|model
operator|->
name|itemChanged
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the item's data for the given \a role. */
end_comment
begin_function
DECL|function|data
name|QVariant
name|QTableWidgetItem
operator|::
name|data
parameter_list|(
name|int
name|role
parameter_list|)
specifier|const
block|{
name|role
operator|=
operator|(
name|role
operator|==
name|Qt
operator|::
name|EditRole
condition|?
name|Qt
operator|::
name|DisplayRole
else|:
name|role
operator|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|role
operator|==
name|role
condition|)
return|return
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
return|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the item is less than the \a other item; otherwise returns     false. */
end_comment
begin_function
DECL|function|operator <
name|bool
name|QTableWidgetItem
operator|::
name|operator
name|<
parameter_list|(
specifier|const
name|QTableWidgetItem
modifier|&
name|other
parameter_list|)
specifier|const
block|{
specifier|const
name|QVariant
name|v1
init|=
name|data
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
decl_stmt|,
name|v2
init|=
name|other
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
decl_stmt|;
return|return
name|QAbstractItemModelPrivate
operator|::
name|variantLessThan
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     Reads the item from stream \a in.      \sa write() */
end_comment
begin_function
DECL|function|read
name|void
name|QTableWidgetItem
operator|::
name|read
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|)
block|{
name|in
operator|>>
name|values
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Writes the item to stream \a out.      \sa read() */
end_comment
begin_function
DECL|function|write
name|void
name|QTableWidgetItem
operator|::
name|write
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|)
specifier|const
block|{
name|out
operator|<<
name|values
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \relates QTableWidgetItem      Reads a table widget item from stream \a in into \a item.      This operator uses QTableWidgetItem::read().      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|,
name|QTableWidgetItem
modifier|&
name|item
parameter_list|)
block|{
name|item
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|in
return|;
block|}
end_function
begin_comment
comment|/*!     \relates QTableWidgetItem      Writes the table widget item \a item to stream \a out.      This operator uses QTableWidgetItem::write().      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QTableWidgetItem
modifier|&
name|item
parameter_list|)
block|{
name|item
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_comment
comment|/*!     \since 4.1      Constructs a copy of \a other. Note that type() and tableWidget()     are not copied.      This function is useful when reimplementing clone().      \sa data(), flags() */
end_comment
begin_constructor
DECL|function|QTableWidgetItem
name|QTableWidgetItem
operator|::
name|QTableWidgetItem
parameter_list|(
specifier|const
name|QTableWidgetItem
modifier|&
name|other
parameter_list|)
member_init_list|:
name|rtti
argument_list|(
name|Type
argument_list|)
member_init_list|,
name|values
argument_list|(
name|other
operator|.
name|values
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QTableWidgetItemPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|itemFlags
argument_list|(
name|other
operator|.
name|itemFlags
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Assigns \a other's data and flags to this item. Note that type()     and tableWidget() are not copied.      This function is useful when reimplementing clone().      \sa data(), flags() */
end_comment
begin_function
DECL|function|operator =
name|QTableWidgetItem
modifier|&
name|QTableWidgetItem
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QTableWidgetItem
modifier|&
name|other
parameter_list|)
block|{
name|values
operator|=
name|other
operator|.
name|values
expr_stmt|;
name|itemFlags
operator|=
name|other
operator|.
name|itemFlags
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \class QTableWidget     \brief The QTableWidget class provides an item-based table view with a default model.      \ingroup model-view     \inmodule QtWidgets      Table widgets provide standard table display facilities for applications.     The items in a QTableWidget are provided by QTableWidgetItem.      If you want a table that uses your own data model you should     use QTableView rather than this class.      Table widgets can be constructed with the required numbers of rows and     columns:      \snippet qtablewidget-using/mainwindow.cpp 0      Alternatively, tables can be constructed without a given size and resized     later:      \snippet qtablewidget-resizing/mainwindow.cpp 0     \snippet qtablewidget-resizing/mainwindow.cpp 1      Items are created ouside the table (with no parent widget) and inserted     into the table with setItem():      \snippet qtablewidget-resizing/mainwindow.cpp 2      If you want to enable sorting in your table widget, do so after you     have populated it with items, otherwise sorting may interfere with     the insertion order (see setItem() for details).      Tables can be given both horizontal and vertical headers. The simplest way     to create the headers is to supply a list of strings to the     setHorizontalHeaderLabels() and setVerticalHeaderLabels() functions. These     will provide simple textual headers for the table's columns and rows.     More sophisticated headers can be created from existing table items     that are usually constructed outside the table. For example, we can     construct a table item with an icon and aligned text, and use it as the     header for a particular column:      \snippet qtablewidget-using/mainwindow.cpp 2      The number of rows in the table can be found with rowCount(), and the     number of columns with columnCount(). The table can be cleared with the     clear() function.      \table 100%     \row \li \inlineimage windowsvista-tableview.png Screenshot of a Windows Vista style table widget          \li \inlineimage macintosh-tableview.png Screenshot of a Macintosh style table widget          \li \inlineimage fusion-tableview.png Screenshot of a Fusion style table widget     \row \li A \l{Windows Vista Style Widget Gallery}{Windows Vista style} table widget.          \li A \l{Macintosh Style Widget Gallery}{Macintosh style} table widget.          \li A \l{Fusion Style Widget Gallery}{Fusion style} table widget.     \endtable      \sa QTableWidgetItem, QTableView, {Model/View Programming} */
end_comment
begin_comment
comment|/*!     \property QTableWidget::rowCount     \brief the number of rows in the table      By default, for a table constructed without row and column counts,     this property contains a value of 0. */
end_comment
begin_comment
comment|/*!     \property QTableWidget::columnCount     \brief the number of columns in the table      By default, for a table constructed without row and column counts,     this property contains a value of 0. */
end_comment
begin_function
DECL|function|setup
name|void
name|QTableWidgetPrivate
operator|::
name|setup
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
comment|// view signals
name|QObject
operator|::
name|connect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|pressed
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemPressed
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemClicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|doubleClicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemDoubleClicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemActivated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|entered
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemEntered
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// model signals
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitItemChanged
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// selection signals
name|QObject
operator|::
name|connect
argument_list|(
name|q
operator|->
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitCurrentItemChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|q
operator|->
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|selectionChanged
argument_list|(
name|QItemSelection
argument_list|,
name|QItemSelection
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|itemSelectionChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// sorting
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_sort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_emitItemPressed
name|void
name|QTableWidgetPrivate
operator|::
name|_q_emitItemPressed
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTableWidgetItem
modifier|*
name|item
init|=
name|tableModel
argument_list|()
operator|->
name|item
argument_list|(
name|index
argument_list|)
condition|)
emit|emit
name|q
operator|->
name|itemPressed
argument_list|(
name|item
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|cellPressed
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemClicked
name|void
name|QTableWidgetPrivate
operator|::
name|_q_emitItemClicked
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTableWidgetItem
modifier|*
name|item
init|=
name|tableModel
argument_list|()
operator|->
name|item
argument_list|(
name|index
argument_list|)
condition|)
emit|emit
name|q
operator|->
name|itemClicked
argument_list|(
name|item
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|cellClicked
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemDoubleClicked
name|void
name|QTableWidgetPrivate
operator|::
name|_q_emitItemDoubleClicked
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTableWidgetItem
modifier|*
name|item
init|=
name|tableModel
argument_list|()
operator|->
name|item
argument_list|(
name|index
argument_list|)
condition|)
emit|emit
name|q
operator|->
name|itemDoubleClicked
argument_list|(
name|item
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|cellDoubleClicked
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemActivated
name|void
name|QTableWidgetPrivate
operator|::
name|_q_emitItemActivated
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTableWidgetItem
modifier|*
name|item
init|=
name|tableModel
argument_list|()
operator|->
name|item
argument_list|(
name|index
argument_list|)
condition|)
emit|emit
name|q
operator|->
name|itemActivated
argument_list|(
name|item
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|cellActivated
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemEntered
name|void
name|QTableWidgetPrivate
operator|::
name|_q_emitItemEntered
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTableWidgetItem
modifier|*
name|item
init|=
name|tableModel
argument_list|()
operator|->
name|item
argument_list|(
name|index
argument_list|)
condition|)
emit|emit
name|q
operator|->
name|itemEntered
argument_list|(
name|item
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|cellEntered
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitItemChanged
name|void
name|QTableWidgetPrivate
operator|::
name|_q_emitItemChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTableWidgetItem
modifier|*
name|item
init|=
name|tableModel
argument_list|()
operator|->
name|item
argument_list|(
name|index
argument_list|)
condition|)
emit|emit
name|q
operator|->
name|itemChanged
argument_list|(
name|item
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|cellChanged
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitCurrentItemChanged
name|void
name|QTableWidgetPrivate
operator|::
name|_q_emitCurrentItemChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|current
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|previous
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|QTableWidgetItem
modifier|*
name|currentItem
init|=
name|tableModel
argument_list|()
operator|->
name|item
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|QTableWidgetItem
modifier|*
name|previousItem
init|=
name|tableModel
argument_list|()
operator|->
name|item
argument_list|(
name|previous
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentItem
operator|||
name|previousItem
condition|)
emit|emit
name|q
operator|->
name|currentItemChanged
argument_list|(
name|currentItem
argument_list|,
name|previousItem
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|currentCellChanged
argument_list|(
name|current
operator|.
name|row
argument_list|()
argument_list|,
name|current
operator|.
name|column
argument_list|()
argument_list|,
name|previous
operator|.
name|row
argument_list|()
argument_list|,
name|previous
operator|.
name|column
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_sort
name|void
name|QTableWidgetPrivate
operator|::
name|_q_sort
parameter_list|()
block|{
if|if
condition|(
name|sortingEnabled
condition|)
block|{
name|int
name|column
init|=
name|horizontalHeader
operator|->
name|sortIndicatorSection
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|SortOrder
name|order
init|=
name|horizontalHeader
operator|->
name|sortIndicatorOrder
argument_list|()
decl_stmt|;
name|model
operator|->
name|sort
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_dataChanged
name|void
name|QTableWidgetPrivate
operator|::
name|_q_dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|)
block|{
if|if
condition|(
name|sortingEnabled
operator|&&
name|topLeft
operator|.
name|isValid
argument_list|()
operator|&&
name|bottomRight
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|column
init|=
name|horizontalHeader
operator|->
name|sortIndicatorSection
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|>=
name|topLeft
operator|.
name|column
argument_list|()
operator|&&
name|column
operator|<=
name|bottomRight
operator|.
name|column
argument_list|()
condition|)
block|{
name|Qt
operator|::
name|SortOrder
name|order
init|=
name|horizontalHeader
operator|->
name|sortIndicatorOrder
argument_list|()
decl_stmt|;
name|tableModel
argument_list|()
operator|->
name|ensureSorted
argument_list|(
name|column
argument_list|,
name|order
argument_list|,
name|topLeft
operator|.
name|row
argument_list|()
argument_list|,
name|bottomRight
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \fn void QTableWidget::itemPressed(QTableWidgetItem *item)      This signal is emitted whenever an item in the table is pressed.     The \a item specified is the item that was pressed. */
end_comment
begin_comment
comment|/*!     \fn void QTableWidget::itemClicked(QTableWidgetItem *item)      This signal is emitted whenever an item in the table is clicked.     The \a item specified is the item that was clicked. */
end_comment
begin_comment
comment|/*!     \fn void QTableWidget::itemDoubleClicked(QTableWidgetItem *item)      This signal is emitted whenever an item in the table is double     clicked. The \a item specified is the item that was double clicked. */
end_comment
begin_comment
comment|/*!     \fn void QTableWidget::itemActivated(QTableWidgetItem *item)      This signal is emitted when the specified \a item has been activated */
end_comment
begin_comment
comment|/*!     \fn void QTableWidget::itemEntered(QTableWidgetItem *item)      This signal is emitted when the mouse cursor enters an item. The     \a item is the item entered.      This signal is only emitted when mouseTracking is turned on, or when a     mouse button is pressed while moving into an item. */
end_comment
begin_comment
comment|/*!     \fn void QTableWidget::itemChanged(QTableWidgetItem *item)      This signal is emitted whenever the data of \a item has changed. */
end_comment
begin_comment
comment|/*!     \fn void QTableWidget::currentItemChanged(QTableWidgetItem *current, QTableWidgetItem *previous)      This signal is emitted whenever the current item changes. The \a     previous item is the item that previously had the focus, \a     current is the new current item. */
end_comment
begin_comment
comment|/*!     \fn void QTableWidget::itemSelectionChanged()      This signal is emitted whenever the selection changes.      \sa selectedItems(), QTableWidgetItem::isSelected() */
end_comment
begin_comment
comment|/*!   \since 4.1   \fn void QTableWidget::cellPressed(int row, int column)    This signal is emitted whenever a cell in the table is pressed.   The \a row and \a column specified is the cell that was pressed. */
end_comment
begin_comment
comment|/*!   \since 4.1   \fn void QTableWidget::cellClicked(int row, int column)    This signal is emitted whenever a cell in the table is clicked.   The \a row and \a column specified is the cell that was clicked. */
end_comment
begin_comment
comment|/*!   \since 4.1   \fn void QTableWidget::cellDoubleClicked(int row, int column)    This signal is emitted whenever a cell in the table is double   clicked. The \a row and \a column specified is the cell that was   double clicked. */
end_comment
begin_comment
comment|/*!   \since 4.1   \fn void QTableWidget::cellActivated(int row, int column)    This signal is emitted when the cell specified  by \a row and \a column   has been activated */
end_comment
begin_comment
comment|/*!   \since 4.1   \fn void QTableWidget::cellEntered(int row, int column)    This signal is emitted when the mouse cursor enters a cell. The   cell is specified by \a row and \a column.    This signal is only emitted when mouseTracking is turned on, or when a   mouse button is pressed while moving into an item. */
end_comment
begin_comment
comment|/*!   \since 4.1   \fn void QTableWidget::cellChanged(int row, int column)    This signal is emitted whenever the data of the item in the cell   specified by \a row and \a column has changed. */
end_comment
begin_comment
comment|/*!   \since 4.1   \fn void QTableWidget::currentCellChanged(int currentRow, int currentColumn, int previousRow, int previousColumn)    This signal is emitted whenever the current cell changes. The cell   specified by \a previousRow and \a previousColumn is the cell that   previously had the focus, the cell specified by \a currentRow and \a   currentColumn is the new current cell. */
end_comment
begin_comment
comment|/*!   \since 4.3   \fn void QTableWidget::removeCellWidget(int row, int column)    Removes the widget set on the cell indicated by \a row and \a column. */
end_comment
begin_comment
comment|/*!     \fn QTableWidgetItem *QTableWidget::itemAt(int ax, int ay) const      Returns the item at the position equivalent to QPoint(\a{ax}, \a{ay}) in     the table widget's coordinate system, or returns 0 if the specified point     is not covered by an item in the table widget.      \sa item() */
end_comment
begin_comment
comment|/*!     \enum QTableWidgetItem::ItemType      This enum describes the types that are used to describe table widget items.      \value Type     The default type for table widget items.     \value UserType The minimum value for custom types. Values below UserType are                     reserved by Qt.      You can define new user types in QTableWidgetItem subclasses to ensure that     custom items are treated specially.      \sa type() */
end_comment
begin_comment
comment|/*!     \fn int QTableWidgetItem::type() const      Returns the type passed to the QTableWidgetItem constructor. */
end_comment
begin_comment
comment|/*!     Creates a new table view with the given \a parent. */
end_comment
begin_constructor
DECL|function|QTableWidget
name|QTableWidget
operator|::
name|QTableWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QTableView
argument_list|(
operator|*
operator|new
name|QTableWidgetPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|QTableView
operator|::
name|setModel
argument_list|(
operator|new
name|QTableModel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|setup
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Creates a new table view with the given \a rows and \a columns, and with the given \a parent. */
end_comment
begin_constructor
DECL|function|QTableWidget
name|QTableWidget
operator|::
name|QTableWidget
parameter_list|(
name|int
name|rows
parameter_list|,
name|int
name|columns
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QTableView
argument_list|(
operator|*
operator|new
name|QTableWidgetPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|QTableView
operator|::
name|setModel
argument_list|(
operator|new
name|QTableModel
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|setup
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys this QTableWidget. */
end_comment
begin_destructor
DECL|function|~QTableWidget
name|QTableWidget
operator|::
name|~
name|QTableWidget
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Sets the number of rows in this table's model to \a rows. If     this is less than rowCount(), the data in the unwanted rows     is discarded.      \sa setColumnCount() */
end_comment
begin_function
DECL|function|setRowCount
name|void
name|QTableWidget
operator|::
name|setRowCount
parameter_list|(
name|int
name|rows
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|setRowCount
argument_list|(
name|rows
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the number of rows. */
end_comment
begin_function
DECL|function|rowCount
name|int
name|QTableWidget
operator|::
name|rowCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the number of columns in this table's model to \a columns. If     this is less than columnCount(), the data in the unwanted columns     is discarded.      \sa setRowCount() */
end_comment
begin_function
DECL|function|setColumnCount
name|void
name|QTableWidget
operator|::
name|setColumnCount
parameter_list|(
name|int
name|columns
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|setColumnCount
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the number of columns. */
end_comment
begin_function
DECL|function|columnCount
name|int
name|QTableWidget
operator|::
name|columnCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|columnCount
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the row for the \a item. */
end_comment
begin_function
DECL|function|row
name|int
name|QTableWidget
operator|::
name|row
parameter_list|(
specifier|const
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
operator|.
name|row
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the column for the \a item. */
end_comment
begin_function
DECL|function|column
name|int
name|QTableWidget
operator|::
name|column
parameter_list|(
specifier|const
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
operator|.
name|column
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the item for the given \a row and \a column if one has been set; otherwise     returns 0.      \sa setItem() */
end_comment
begin_function
DECL|function|item
name|QTableWidgetItem
modifier|*
name|QTableWidget
operator|::
name|item
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|item
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the item for the given \a row and \a column to \a item.      The table takes ownership of the item.      Note that if sorting is enabled (see     \l{QTableView::sortingEnabled} {sortingEnabled}) and \a column is     the current sort column, the \a row will be moved to the sorted     position determined by \a item.      If you want to set several items of a particular row (say, by     calling setItem() in a loop), you may want to turn off sorting     before doing so, and turn it back on afterwards; this will allow     you to use the same \a row argument for all items in the same row     (i.e. setItem() will not move the row).      \sa item(), takeItem() */
end_comment
begin_function
DECL|function|setItem
name|void
name|QTableWidget
operator|::
name|setItem
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
condition|)
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|item
operator|->
name|view
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QTableWidget: cannot insert an item that is already owned by another QTableWidget"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|item
operator|->
name|view
operator|=
name|this
expr_stmt|;
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|setItem
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
operator|delete
name|takeItem
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Removes the item at \a row and \a column from the table without deleting it. */
end_comment
begin_function
DECL|function|takeItem
name|QTableWidgetItem
modifier|*
name|QTableWidget
operator|::
name|takeItem
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|QTableWidgetItem
modifier|*
name|item
init|=
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|takeItem
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
name|item
operator|->
name|view
operator|=
literal|0
expr_stmt|;
return|return
name|item
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the vertical header item for row \a row. */
end_comment
begin_function
DECL|function|verticalHeaderItem
name|QTableWidgetItem
modifier|*
name|QTableWidget
operator|::
name|verticalHeaderItem
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|verticalHeaderItem
argument_list|(
name|row
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the vertical header item for row \a row to \a item. */
end_comment
begin_function
DECL|function|setVerticalHeaderItem
name|void
name|QTableWidget
operator|::
name|setVerticalHeaderItem
parameter_list|(
name|int
name|row
parameter_list|,
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
condition|)
block|{
name|item
operator|->
name|view
operator|=
name|this
expr_stmt|;
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|setVerticalHeaderItem
argument_list|(
name|row
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|delete
name|takeVerticalHeaderItem
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \since 4.1     Removes the vertical header item at \a row from the header without deleting it. */
end_comment
begin_function
DECL|function|takeVerticalHeaderItem
name|QTableWidgetItem
modifier|*
name|QTableWidget
operator|::
name|takeVerticalHeaderItem
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|QTableWidgetItem
modifier|*
name|itm
init|=
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|takeVerticalHeaderItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
condition|)
name|itm
operator|->
name|view
operator|=
literal|0
expr_stmt|;
return|return
name|itm
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the horizontal header item for column, \a column, if one has been     set; otherwise returns 0. */
end_comment
begin_function
DECL|function|horizontalHeaderItem
name|QTableWidgetItem
modifier|*
name|QTableWidget
operator|::
name|horizontalHeaderItem
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|horizontalHeaderItem
argument_list|(
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the horizontal header item for column \a column to \a item.   If necessary, the column count is increased to fit the item.   The previous header item (if there was one) is deleted. */
end_comment
begin_function
DECL|function|setHorizontalHeaderItem
name|void
name|QTableWidget
operator|::
name|setHorizontalHeaderItem
parameter_list|(
name|int
name|column
parameter_list|,
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
condition|)
block|{
name|item
operator|->
name|view
operator|=
name|this
expr_stmt|;
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|setHorizontalHeaderItem
argument_list|(
name|column
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|delete
name|takeHorizontalHeaderItem
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \since 4.1     Removes the horizontal header item at \a column from the header without deleting it. */
end_comment
begin_function
DECL|function|takeHorizontalHeaderItem
name|QTableWidgetItem
modifier|*
name|QTableWidget
operator|::
name|takeHorizontalHeaderItem
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|QTableWidgetItem
modifier|*
name|itm
init|=
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|takeHorizontalHeaderItem
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|itm
condition|)
name|itm
operator|->
name|view
operator|=
literal|0
expr_stmt|;
return|return
name|itm
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the vertical header labels using \a labels. */
end_comment
begin_function
DECL|function|setVerticalHeaderLabels
name|void
name|QTableWidget
operator|::
name|setVerticalHeaderLabels
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|labels
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|QTableModel
modifier|*
name|model
init|=
name|d
operator|->
name|tableModel
argument_list|()
decl_stmt|;
name|QTableWidgetItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|model
operator|->
name|rowCount
argument_list|()
operator|&&
name|i
operator|<
name|labels
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|item
operator|=
name|model
operator|->
name|verticalHeaderItem
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
block|{
name|item
operator|=
name|model
operator|->
name|createItem
argument_list|()
expr_stmt|;
name|setVerticalHeaderItem
argument_list|(
name|i
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
name|item
operator|->
name|setText
argument_list|(
name|labels
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   Sets the horizontal header labels using \a labels. */
end_comment
begin_function
DECL|function|setHorizontalHeaderLabels
name|void
name|QTableWidget
operator|::
name|setHorizontalHeaderLabels
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|labels
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|QTableModel
modifier|*
name|model
init|=
name|d
operator|->
name|tableModel
argument_list|()
decl_stmt|;
name|QTableWidgetItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|model
operator|->
name|columnCount
argument_list|()
operator|&&
name|i
operator|<
name|labels
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|item
operator|=
name|model
operator|->
name|horizontalHeaderItem
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
block|{
name|item
operator|=
name|model
operator|->
name|createItem
argument_list|()
expr_stmt|;
name|setHorizontalHeaderItem
argument_list|(
name|i
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
name|item
operator|->
name|setText
argument_list|(
name|labels
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the row of the current item.      \sa currentColumn(), setCurrentCell() */
end_comment
begin_function
DECL|function|currentRow
name|int
name|QTableWidget
operator|::
name|currentRow
parameter_list|()
specifier|const
block|{
return|return
name|currentIndex
argument_list|()
operator|.
name|row
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the column of the current item.      \sa currentRow(), setCurrentCell() */
end_comment
begin_function
DECL|function|currentColumn
name|int
name|QTableWidget
operator|::
name|currentColumn
parameter_list|()
specifier|const
block|{
return|return
name|currentIndex
argument_list|()
operator|.
name|column
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the current item.      \sa setCurrentItem() */
end_comment
begin_function
DECL|function|currentItem
name|QTableWidgetItem
modifier|*
name|QTableWidget
operator|::
name|currentItem
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|item
argument_list|(
name|currentIndex
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the current item to \a item.      Unless the selection mode is \l{QAbstractItemView::}{NoSelection},     the item is also selected.      \sa currentItem(), setCurrentCell() */
end_comment
begin_function
DECL|function|setCurrentItem
name|void
name|QTableWidget
operator|::
name|setCurrentItem
parameter_list|(
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.4    Sets the current item to be \a item, using the given \a command.    \sa currentItem(), setCurrentCell() */
end_comment
begin_function
DECL|function|setCurrentItem
name|void
name|QTableWidget
operator|::
name|setCurrentItem
parameter_list|(
name|QTableWidgetItem
modifier|*
name|item
parameter_list|,
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|command
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|selectionModel
operator|->
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Sets the current cell to be the cell at position (\a row, \a     column).      Depending on the current \l{QAbstractItemView::SelectionMode}{selection mode},     the cell may also be selected.      \sa setCurrentItem(), currentRow(), currentColumn() */
end_comment
begin_function
DECL|function|setCurrentCell
name|void
name|QTableWidget
operator|::
name|setCurrentCell
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|setCurrentIndex
argument_list|(
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.4    Sets the current cell to be the cell at position (\a row, \a   column), using the given \a command.    \sa setCurrentItem(), currentRow(), currentColumn() */
end_comment
begin_function
DECL|function|setCurrentCell
name|void
name|QTableWidget
operator|::
name|setCurrentCell
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|command
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|selectionModel
operator|->
name|setCurrentIndex
argument_list|(
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Sorts all the rows in the table widget based on \a column and \a order. */
end_comment
begin_function
DECL|function|sortItems
name|void
name|QTableWidget
operator|::
name|sortItems
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|model
operator|->
name|sort
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
name|horizontalHeader
argument_list|()
operator|->
name|setSortIndicator
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setSortingEnabled
name|void
name|QTableWidget
operator|::
name|setSortingEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|QTableView
operator|::
name|setSortingEnabled
argument_list|(
name|enable
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|isSortingEnabled
name|bool
name|QTableWidget
operator|::
name|isSortingEnabled
parameter_list|()
specifier|const
block|{
return|return
name|QTableView
operator|::
name|isSortingEnabled
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Starts editing the \a item if it is editable. */
end_comment
begin_function
DECL|function|editItem
name|void
name|QTableWidget
operator|::
name|editItem
parameter_list|(
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
return|return;
name|edit
argument_list|(
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Opens an editor for the give \a item. The editor remains open after editing.    \sa closePersistentEditor() */
end_comment
begin_function
DECL|function|openPersistentEditor
name|void
name|QTableWidget
operator|::
name|openPersistentEditor
parameter_list|(
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
return|return;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|QAbstractItemView
operator|::
name|openPersistentEditor
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Closes the persistent editor for \a item.    \sa openPersistentEditor() */
end_comment
begin_function
DECL|function|closePersistentEditor
name|void
name|QTableWidget
operator|::
name|closePersistentEditor
parameter_list|(
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
return|return;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|QAbstractItemView
operator|::
name|closePersistentEditor
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the widget displayed in the cell in the given \a row and \a column.      \note The table takes ownership of the widget.      \sa setCellWidget() */
end_comment
begin_function
DECL|function|cellWidget
name|QWidget
modifier|*
name|QTableWidget
operator|::
name|cellWidget
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|QModelIndex
name|index
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|QAbstractItemView
operator|::
name|indexWidget
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Sets the given \a widget to be displayed in the cell in the given \a row     and \a column, passing the ownership of the widget to the table.      If cell widget A is replaced with cell widget B, cell widget A will be     deleted. For example, in the code snippet below, the QLineEdit object will     be deleted.      \snippet code/src_gui_itemviews_qtablewidget.cpp 0      \sa cellWidget() */
end_comment
begin_function
DECL|function|setCellWidget
name|void
name|QTableWidget
operator|::
name|setCellWidget
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QModelIndex
name|index
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QAbstractItemView
operator|::
name|setIndexWidget
argument_list|(
name|index
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns \c true if the \a item is selected, otherwise returns \c false.    \obsolete    This function is deprecated. Use \l{QTableWidgetItem::isSelected()} instead. */
end_comment
begin_function
DECL|function|isItemSelected
name|bool
name|QTableWidget
operator|::
name|isItemSelected
parameter_list|(
specifier|const
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
return|return
name|selectionModel
argument_list|()
operator|->
name|isSelected
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Selects or deselects \a item depending on \a select.    \obsolete    This function is deprecated. Use \l{QTableWidgetItem::setSelected()} instead. */
end_comment
begin_function
DECL|function|setItemSelected
name|void
name|QTableWidget
operator|::
name|setItemSelected
parameter_list|(
specifier|const
name|QTableWidgetItem
modifier|*
name|item
parameter_list|,
name|bool
name|select
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|index
argument_list|,
name|select
condition|?
name|QItemSelectionModel
operator|::
name|Select
else|:
name|QItemSelectionModel
operator|::
name|Deselect
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Selects or deselects the \a range depending on \a select. */
end_comment
begin_function
DECL|function|setRangeSelected
name|void
name|QTableWidget
operator|::
name|setRangeSelected
parameter_list|(
specifier|const
name|QTableWidgetSelectionRange
modifier|&
name|range
parameter_list|,
name|bool
name|select
parameter_list|)
block|{
if|if
condition|(
operator|!
name|model
argument_list|()
operator|->
name|hasIndex
argument_list|(
name|range
operator|.
name|topRow
argument_list|()
argument_list|,
name|range
operator|.
name|leftColumn
argument_list|()
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
operator|||
operator|!
name|model
argument_list|()
operator|->
name|hasIndex
argument_list|(
name|range
operator|.
name|bottomRow
argument_list|()
argument_list|,
name|range
operator|.
name|rightColumn
argument_list|()
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
condition|)
return|return;
name|QModelIndex
name|topLeft
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|range
operator|.
name|topRow
argument_list|()
argument_list|,
name|range
operator|.
name|leftColumn
argument_list|()
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QModelIndex
name|bottomRight
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|range
operator|.
name|bottomRow
argument_list|()
argument_list|,
name|range
operator|.
name|rightColumn
argument_list|()
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|QItemSelection
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|)
argument_list|,
name|select
condition|?
name|QItemSelectionModel
operator|::
name|Select
else|:
name|QItemSelectionModel
operator|::
name|Deselect
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns a list of all selected ranges.    \sa QTableWidgetSelectionRange */
end_comment
begin_function
DECL|function|selectedRanges
name|QList
argument_list|<
name|QTableWidgetSelectionRange
argument_list|>
name|QTableWidget
operator|::
name|selectedRanges
parameter_list|()
specifier|const
block|{
specifier|const
name|QList
argument_list|<
name|QItemSelectionRange
argument_list|>
name|ranges
init|=
name|selectionModel
argument_list|()
operator|->
name|selection
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QTableWidgetSelectionRange
argument_list|>
name|result
decl_stmt|;
specifier|const
name|int
name|rangesCount
init|=
name|ranges
operator|.
name|count
argument_list|()
decl_stmt|;
name|result
operator|.
name|reserve
argument_list|(
name|rangesCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rangesCount
condition|;
operator|++
name|i
control|)
name|result
operator|.
name|append
argument_list|(
name|QTableWidgetSelectionRange
argument_list|(
name|ranges
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|top
argument_list|()
argument_list|,
name|ranges
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|left
argument_list|()
argument_list|,
name|ranges
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|bottom
argument_list|()
argument_list|,
name|ranges
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|right
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!   Returns a list of all selected items.    This function returns a list of pointers to the contents of the   selected cells. Use the selectedIndexes() function to retrieve the   complete selection \e including empty cells.    \sa selectedIndexes() */
end_comment
begin_function
DECL|function|selectedItems
name|QList
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|QTableWidget
operator|::
name|selectedItems
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
name|QModelIndexList
name|indexes
init|=
name|selectionModel
argument_list|()
operator|->
name|selectedIndexes
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|items
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|isIndexHidden
argument_list|(
name|index
argument_list|)
condition|)
continue|continue;
name|QTableWidgetItem
modifier|*
name|item
init|=
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|item
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
name|items
operator|.
name|append
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|items
return|;
block|}
end_function
begin_comment
comment|/*!   Finds items that matches the \a text using the given \a flags. */
end_comment
begin_function
DECL|function|findItems
name|QList
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|QTableWidget
operator|::
name|findItems
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|Qt
operator|::
name|MatchFlags
name|flags
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
name|QModelIndexList
name|indexes
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|columnCount
argument_list|()
condition|;
operator|++
name|column
control|)
name|indexes
operator|+=
name|d
operator|->
name|model
operator|->
name|match
argument_list|(
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|column
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|text
argument_list|,
operator|-
literal|1
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|items
decl_stmt|;
specifier|const
name|int
name|indexCount
init|=
name|indexes
operator|.
name|size
argument_list|()
decl_stmt|;
name|items
operator|.
name|reserve
argument_list|(
name|indexCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexCount
condition|;
operator|++
name|i
control|)
name|items
operator|.
name|append
argument_list|(
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|item
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|items
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the visual row of the given \a logicalRow. */
end_comment
begin_function
DECL|function|visualRow
name|int
name|QTableWidget
operator|::
name|visualRow
parameter_list|(
name|int
name|logicalRow
parameter_list|)
specifier|const
block|{
return|return
name|verticalHeader
argument_list|()
operator|->
name|visualIndex
argument_list|(
name|logicalRow
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the visual column of the given \a logicalColumn. */
end_comment
begin_function
DECL|function|visualColumn
name|int
name|QTableWidget
operator|::
name|visualColumn
parameter_list|(
name|int
name|logicalColumn
parameter_list|)
specifier|const
block|{
return|return
name|horizontalHeader
argument_list|()
operator|->
name|visualIndex
argument_list|(
name|logicalColumn
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \fn QTableWidgetItem *QTableWidget::itemAt(const QPoint&point) const    Returns a pointer to the item at the given \a point, or returns 0 if   \a point is not covered by an item in the table widget.    \sa item() */
end_comment
begin_function
DECL|function|itemAt
name|QTableWidgetItem
modifier|*
name|QTableWidget
operator|::
name|itemAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|item
argument_list|(
name|indexAt
argument_list|(
name|p
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the rectangle on the viewport occupied by the item at \a item. */
end_comment
begin_function
DECL|function|visualItemRect
name|QRect
name|QTableWidget
operator|::
name|visualItemRect
parameter_list|(
specifier|const
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|index
argument_list|(
cast|const_cast
argument_list|<
name|QTableWidgetItem
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|visualRect
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Scrolls the view if necessary to ensure that the \a item is visible.     The \a hint parameter specifies more precisely where the     \a item should be located after the operation. */
end_comment
begin_function
DECL|function|scrollToItem
name|void
name|QTableWidget
operator|::
name|scrollToItem
parameter_list|(
specifier|const
name|QTableWidgetItem
modifier|*
name|item
parameter_list|,
name|QAbstractItemView
operator|::
name|ScrollHint
name|hint
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
return|return;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|index
argument_list|(
cast|const_cast
argument_list|<
name|QTableWidgetItem
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QTableView
operator|::
name|scrollTo
argument_list|(
name|index
argument_list|,
name|hint
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the item prototype used by the table.      \sa setItemPrototype() */
end_comment
begin_function
DECL|function|itemPrototype
specifier|const
name|QTableWidgetItem
modifier|*
name|QTableWidget
operator|::
name|itemPrototype
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|itemPrototype
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the item prototype for the table to the specified \a item.      The table widget will use the item prototype clone function when it needs     to create a new table item.  For example when the user is editing     in an empty cell.  This is useful when you have a QTableWidgetItem     subclass and want to make sure that QTableWidget creates instances of     your subclass.      The table takes ownership of the prototype.      \sa itemPrototype() */
end_comment
begin_function
DECL|function|setItemPrototype
name|void
name|QTableWidget
operator|::
name|setItemPrototype
parameter_list|(
specifier|const
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|setItemPrototype
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Inserts an empty row into the table at \a row. */
end_comment
begin_function
DECL|function|insertRow
name|void
name|QTableWidget
operator|::
name|insertRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|insertRows
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Inserts an empty column into the table at \a column. */
end_comment
begin_function
DECL|function|insertColumn
name|void
name|QTableWidget
operator|::
name|insertColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|insertColumns
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Removes the row \a row and all its items from the table. */
end_comment
begin_function
DECL|function|removeRow
name|void
name|QTableWidget
operator|::
name|removeRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|removeRows
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Removes the column \a column and all its items from the table. */
end_comment
begin_function
DECL|function|removeColumn
name|void
name|QTableWidget
operator|::
name|removeColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|removeColumns
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!    Removes all items in the view.    This will also remove all selections and headers.    If you don't want to remove the headers, use    QTableWidget::clearContents().    The table dimensions stay the same. */
end_comment
begin_function
DECL|function|clear
name|void
name|QTableWidget
operator|::
name|clear
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|selectionModel
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Removes all items not in the headers from the view.     This will also remove all selections.     The table dimensions stay the same. */
end_comment
begin_function
DECL|function|clearContents
name|void
name|QTableWidget
operator|::
name|clearContents
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|selectionModel
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|clearContents
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of MIME types that can be used to describe a list of     tablewidget items.      \sa mimeData() */
end_comment
begin_function
DECL|function|mimeTypes
name|QStringList
name|QTableWidget
operator|::
name|mimeTypes
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|tableModel
argument_list|()
operator|->
name|QAbstractTableModel
operator|::
name|mimeTypes
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns an object that contains a serialized description of the specified     \a items. The format used to describe the items is obtained from the     mimeTypes() function.      If the list of items is empty, 0 is returned rather than a serialized     empty list. */
end_comment
begin_if
if|#
directive|if
name|QT_VERSION
operator|>=
name|QT_VERSION_CHECK
argument_list|(
literal|6
operator|,
literal|0
operator|,
literal|0
argument_list|)
end_if
begin_decl_stmt
DECL|function|mimeData
name|QMimeData
modifier|*
name|QTableWidget
operator|::
name|mimeData
argument_list|(
specifier|const
name|QList
argument_list|<
name|QTableWidgetItem
operator|*
argument_list|>
operator|&
name|items
argument_list|)
decl|const
else|#
directive|else
name|QMimeData
modifier|*
name|QTableWidget
operator|::
name|mimeData
argument_list|(
specifier|const
name|QList
argument_list|<
name|QTableWidgetItem
operator|*
argument_list|>
name|items
argument_list|)
decl|const
endif|#
directive|endif
argument_list|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
argument_list|;
name|QModelIndexList
operator|&
name|cachedIndexes
operator|=
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|cachedIndexes
argument_list|;
comment|// if non empty, it's called from the model's own mimeData
argument_list|if
operator|(
name|cachedIndexes
operator|.
name|isEmpty
argument_list|()
operator|)
block|{
name|cachedIndexes
operator|.
name|reserve
argument_list|(
name|items
operator|.
name|count
argument_list|()
argument_list|)
block|;
foreach|foreach
control|(
name|QTableWidgetItem
modifier|*
name|item
decl|,
name|items
control|)
name|cachedIndexes
operator|<<
name|indexFromItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|QMimeData
operator|*
name|result
operator|=
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|internalMimeData
argument_list|()
argument_list|;
name|cachedIndexes
operator|.
name|clear
argument_list|()
argument_list|;         return
name|result
argument_list|;     }
decl|return
name|d
operator|->
name|tableModel
argument_list|()
decl|->
name|internalMimeData
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
unit|}
comment|/*!     Handles the \a data supplied by a drag and drop operation that ended with     the given \a action in the given \a row and \a column.     Returns \c true if the data and action can be handled by the model;     otherwise returns \c false.      \sa supportedDropActions() */
end_comment
begin_macro
unit|bool
DECL|function|dropMimeData
name|QTableWidget
end_macro
begin_expr_stmt
DECL|function|dropMimeData
operator|::
name|dropMimeData
operator|(
name|int
name|row
operator|,
name|int
name|column
operator|,
specifier|const
name|QMimeData
operator|*
name|data
operator|,
name|Qt
operator|::
name|DropAction
name|action
operator|)
block|{
name|QModelIndex
name|idx
block|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
if|if
condition|(
name|dropIndicatorPosition
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|OnItem
condition|)
block|{
comment|// QAbstractTableModel::dropMimeData will overwrite on the index if row == -1 and column == -1
name|idx
operator|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|row
operator|=
operator|-
literal|1
expr_stmt|;
name|column
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_return
return|return
name|d_func
argument_list|()
operator|->
name|tableModel
argument_list|()
operator|->
name|QAbstractTableModel
operator|::
name|dropMimeData
argument_list|(
name|data
argument_list|,
name|action
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|idx
argument_list|)
return|;
end_return
begin_comment
unit|}
comment|/*!   Returns the drop actions supported by this view.    \sa Qt::DropActions */
end_comment
begin_function
unit|Qt
DECL|function|supportedDropActions
operator|::
name|DropActions
name|QTableWidget
operator|::
name|supportedDropActions
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|tableModel
argument_list|()
operator|->
name|QAbstractTableModel
operator|::
name|supportedDropActions
argument_list|()
operator||
name|Qt
operator|::
name|MoveAction
return|;
block|}
end_function
begin_comment
comment|/*!   Returns a list of pointers to the items contained in the \a data object.   If the object was not created by a QTreeWidget in the same process, the list   is empty.  */
end_comment
begin_function
DECL|function|items
name|QList
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|QTableWidget
operator|::
name|items
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|)
specifier|const
block|{
specifier|const
name|QTableWidgetMimeData
modifier|*
name|twd
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableWidgetMimeData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|twd
condition|)
return|return
name|twd
operator|->
name|items
return|;
return|return
name|QList
argument_list|<
name|QTableWidgetItem
operator|*
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the QModelIndex assocated with the given \a item. */
end_comment
begin_function
DECL|function|indexFromItem
name|QModelIndex
name|QTableWidget
operator|::
name|indexFromItem
parameter_list|(
name|QTableWidgetItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|index
argument_list|(
name|item
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns a pointer to the QTableWidgetItem assocated with the given \a index. */
end_comment
begin_function
DECL|function|itemFromIndex
name|QTableWidgetItem
modifier|*
name|QTableWidget
operator|::
name|itemFromIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTableWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tableModel
argument_list|()
operator|->
name|item
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setModel
name|void
name|QTableWidget
operator|::
name|setModel
parameter_list|(
name|QAbstractItemModel
modifier|*
comment|/*model*/
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
literal|"QTableWidget::setModel() - Changing the model of the QTableWidget is not allowed."
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QTableWidget
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
return|return
name|QTableView
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|dropEvent
name|void
name|QTableWidget
operator|::
name|dropEvent
parameter_list|(
name|QDropEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|source
argument_list|()
operator|==
name|this
operator|&&
operator|(
name|event
operator|->
name|dropAction
argument_list|()
operator|==
name|Qt
operator|::
name|MoveAction
operator|||
name|dragDropMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|InternalMove
operator|)
condition|)
block|{
name|QModelIndex
name|topIndex
decl_stmt|;
name|int
name|col
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|row
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|dropOn
argument_list|(
name|event
argument_list|,
operator|&
name|row
argument_list|,
operator|&
name|col
argument_list|,
operator|&
name|topIndex
argument_list|)
condition|)
block|{
name|QModelIndexList
name|indexes
init|=
name|selectedIndexes
argument_list|()
decl_stmt|;
name|int
name|top
init|=
name|INT_MAX
decl_stmt|;
name|int
name|left
init|=
name|INT_MAX
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|top
operator|=
name|qMin
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
name|top
argument_list|)
expr_stmt|;
name|left
operator|=
name|qMin
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
name|left
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|QTableWidgetItem
modifier|*
argument_list|>
name|taken
decl_stmt|;
specifier|const
name|int
name|indexesCount
init|=
name|indexes
operator|.
name|count
argument_list|()
decl_stmt|;
name|taken
operator|.
name|reserve
argument_list|(
name|indexesCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexesCount
condition|;
operator|++
name|i
control|)
name|taken
operator|.
name|append
argument_list|(
name|takeItem
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|column
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|r
init|=
name|index
operator|.
name|row
argument_list|()
operator|-
name|top
operator|+
name|topIndex
operator|.
name|row
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|index
operator|.
name|column
argument_list|()
operator|-
name|left
operator|+
name|topIndex
operator|.
name|column
argument_list|()
decl_stmt|;
name|setItem
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|taken
operator|.
name|takeFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
comment|// Don't want QAbstractItemView to delete it because it was "moved" we already did it
name|event
operator|->
name|setDropAction
argument_list|(
name|Qt
operator|::
name|CopyAction
argument_list|)
expr_stmt|;
block|}
block|}
name|QTableView
operator|::
name|dropEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qtablewidget.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABLEWIDGET
end_comment
end_unit
