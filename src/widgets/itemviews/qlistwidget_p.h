begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QLISTWIDGET_P_H
end_ifndef
begin_define
DECL|macro|QLISTWIDGET_P_H
define|#
directive|define
name|QLISTWIDGET_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API. This header file may change
end_comment
begin_comment
comment|// from version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtCore/qabstractitemmodel.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qabstractitemview.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qlistwidget.h>
end_include
begin_include
include|#
directive|include
file|<qitemdelegate.h>
end_include
begin_include
include|#
directive|include
file|<private/qlistview_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidgetitemdata_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LISTWIDGET
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QListModelLessThan
block|{
name|public
label|:
specifier|inline
name|bool
name|operator
argument_list|()
operator|(
name|QListWidgetItem
operator|*
name|i1
operator|,
name|QListWidgetItem
operator|*
name|i2
operator|)
specifier|const
block|{
return|return
operator|*
name|i1
operator|<
operator|*
name|i2
return|;
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QListModelGreaterThan
block|{
name|public
label|:
specifier|inline
name|bool
name|operator
argument_list|()
operator|(
name|QListWidgetItem
operator|*
name|i1
operator|,
name|QListWidgetItem
operator|*
name|i2
operator|)
specifier|const
block|{
return|return
operator|*
name|i2
operator|<
operator|*
name|i1
return|;
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_AUTOTEST_EXPORT
name|QListModel
range|:
name|public
name|QAbstractListModel
block|{
name|Q_OBJECT
name|public
operator|:
name|QListModel
argument_list|(
name|QListWidget
operator|*
name|parent
argument_list|)
block|;
operator|~
name|QListModel
argument_list|()
block|;
name|void
name|clear
argument_list|()
block|;
name|QListWidgetItem
operator|*
name|at
argument_list|(
argument|int row
argument_list|)
specifier|const
block|;
name|void
name|insert
argument_list|(
argument|int row
argument_list|,
argument|QListWidgetItem *item
argument_list|)
block|;
name|void
name|insert
argument_list|(
argument|int row
argument_list|,
argument|const QStringList&items
argument_list|)
block|;
name|void
name|remove
argument_list|(
name|QListWidgetItem
operator|*
name|item
argument_list|)
block|;
name|QListWidgetItem
operator|*
name|take
argument_list|(
argument|int row
argument_list|)
block|;
name|void
name|move
argument_list|(
argument|int srcRow
argument_list|,
argument|int dstRow
argument_list|)
block|;
name|int
name|rowCount
argument_list|(
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
specifier|const
block|;
name|QModelIndex
name|index
argument_list|(
argument|QListWidgetItem *item
argument_list|)
specifier|const
block|;
name|QModelIndex
name|index
argument_list|(
argument|int row
argument_list|,
argument|int column =
literal|0
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
specifier|const
block|;
name|QVariant
name|data
argument_list|(
argument|const QModelIndex&index
argument_list|,
argument|int role = Qt::DisplayRole
argument_list|)
specifier|const
block|;
name|bool
name|setData
argument_list|(
argument|const QModelIndex&index
argument_list|,
argument|const QVariant&value
argument_list|,
argument|int role
argument_list|)
block|;
name|QMap
operator|<
name|int
block|,
name|QVariant
operator|>
name|itemData
argument_list|(
argument|const QModelIndex&index
argument_list|)
specifier|const
block|;
name|bool
name|insertRows
argument_list|(
argument|int row
argument_list|,
argument|int count =
literal|1
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
block|;
name|bool
name|removeRows
argument_list|(
argument|int row
argument_list|,
argument|int count =
literal|1
argument_list|,
argument|const QModelIndex&parent = QModelIndex()
argument_list|)
block|;
name|Qt
operator|::
name|ItemFlags
name|flags
argument_list|(
argument|const QModelIndex&index
argument_list|)
specifier|const
block|;
name|void
name|sort
argument_list|(
argument|int column
argument_list|,
argument|Qt::SortOrder order
argument_list|)
block|;
name|void
name|ensureSorted
argument_list|(
argument|int column
argument_list|,
argument|Qt::SortOrder order
argument_list|,
argument|int start
argument_list|,
argument|int end
argument_list|)
block|;
specifier|static
name|bool
name|itemLessThan
argument_list|(
specifier|const
name|QPair
operator|<
name|QListWidgetItem
operator|*
argument_list|,
name|int
operator|>
operator|&
name|left
argument_list|,
specifier|const
name|QPair
operator|<
name|QListWidgetItem
operator|*
argument_list|,
name|int
operator|>
operator|&
name|right
argument_list|)
block|;
specifier|static
name|bool
name|itemGreaterThan
argument_list|(
specifier|const
name|QPair
operator|<
name|QListWidgetItem
operator|*
argument_list|,
name|int
operator|>
operator|&
name|left
argument_list|,
specifier|const
name|QPair
operator|<
name|QListWidgetItem
operator|*
argument_list|,
name|int
operator|>
operator|&
name|right
argument_list|)
block|;
specifier|static
name|QList
operator|<
name|QListWidgetItem
operator|*
operator|>
operator|::
name|iterator
name|sortedInsertionIterator
argument_list|(
argument|const QList<QListWidgetItem*>::iterator&begin
argument_list|,
argument|const QList<QListWidgetItem*>::iterator&end
argument_list|,
argument|Qt::SortOrder order
argument_list|,
argument|QListWidgetItem *item
argument_list|)
block|;
name|void
name|itemChanged
argument_list|(
name|QListWidgetItem
operator|*
name|item
argument_list|)
block|;
comment|// dnd
name|QStringList
name|mimeTypes
argument_list|()
specifier|const
block|;
name|QMimeData
operator|*
name|mimeData
argument_list|(
argument|const QModelIndexList&indexes
argument_list|)
specifier|const
block|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|bool
name|dropMimeData
argument_list|(
argument|const QMimeData *data
argument_list|,
argument|Qt::DropAction action
argument_list|,
argument|int row
argument_list|,
argument|int column
argument_list|,
argument|const QModelIndex&parent
argument_list|)
block|;
name|Qt
operator|::
name|DropActions
name|supportedDropActions
argument_list|()
specifier|const
block|;
endif|#
directive|endif
name|QMimeData
operator|*
name|internalMimeData
argument_list|()
specifier|const
block|;
name|private
operator|:
name|QList
operator|<
name|QListWidgetItem
operator|*
operator|>
name|items
block|;
comment|// A cache must be mutable if get-functions should have const modifiers
name|mutable
name|QModelIndexList
name|cachedIndexes
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QListWidgetPrivate
range|:
name|public
name|QListViewPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QListWidget
argument_list|)
name|public
operator|:
name|QListWidgetPrivate
argument_list|()
operator|:
name|QListViewPrivate
argument_list|()
block|,
name|sortOrder
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
block|,
name|sortingEnabled
argument_list|(
argument|false
argument_list|)
block|{}
specifier|inline
name|QListModel
operator|*
name|listModel
argument_list|()
specifier|const
block|{
return|return
name|qobject_cast
operator|<
name|QListModel
operator|*
operator|>
operator|(
name|model
operator|)
return|;
block|}
name|void
name|setup
argument_list|()
block|;
name|void
name|_q_emitItemPressed
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
block|;
name|void
name|_q_emitItemClicked
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
block|;
name|void
name|_q_emitItemDoubleClicked
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
block|;
name|void
name|_q_emitItemActivated
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
block|;
name|void
name|_q_emitItemEntered
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
block|;
name|void
name|_q_emitItemChanged
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
block|;
name|void
name|_q_emitCurrentItemChanged
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|current
argument_list|,
specifier|const
name|QModelIndex
operator|&
name|previous
argument_list|)
block|;
name|void
name|_q_sort
argument_list|()
block|;
name|void
name|_q_dataChanged
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|topLeft
argument_list|,
specifier|const
name|QModelIndex
operator|&
name|bottomRight
argument_list|)
block|;
name|Qt
operator|::
name|SortOrder
name|sortOrder
block|;
name|bool
name|sortingEnabled
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QListWidgetItemPrivate
block|{
name|public
label|:
name|QListWidgetItemPrivate
argument_list|(
name|QListWidgetItem
operator|*
name|item
argument_list|)
operator|:
name|q
argument_list|(
name|item
argument_list|)
operator|,
name|theid
argument_list|(
argument|-
literal|1
argument_list|)
block|{}
name|QListWidgetItem
operator|*
name|q
expr_stmt|;
name|QVector
operator|<
name|QWidgetItemData
operator|>
name|values
expr_stmt|;
name|int
name|theid
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_LISTWIDGET
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QLISTWIDGET_P_H
end_comment
end_unit
