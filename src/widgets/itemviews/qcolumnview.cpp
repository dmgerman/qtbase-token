begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COLUMNVIEW
end_ifndef
begin_include
include|#
directive|include
file|"qcolumnview.h"
end_include
begin_include
include|#
directive|include
file|"qcolumnview_p.h"
end_include
begin_include
include|#
directive|include
file|"qcolumnviewgrip_p.h"
end_include
begin_include
include|#
directive|include
file|<qlistview.h>
end_include
begin_include
include|#
directive|include
file|<qabstractitemdelegate.h>
end_include
begin_include
include|#
directive|include
file|<qscrollbar.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_define
DECL|macro|ANIMATION_DURATION_MSEC
define|#
directive|define
name|ANIMATION_DURATION_MSEC
value|150
end_define
begin_comment
comment|/*!     \since 4.3     \class QColumnView     \brief The QColumnView class provides a model/view implementation of a column view.     \ingroup model-view     \ingroup advanced     \inmodule QtWidgets      QColumnView displays a model in a number of QListViews, one for each     hierarchy in the tree.  This is sometimes referred to as a cascading list.      The QColumnView class is one of the \l{Model/View Classes}     and is part of Qt's \l{Model/View Programming}{model/view framework}.      QColumnView implements the interfaces defined by the     QAbstractItemView class to allow it to display data provided by     models derived from the QAbstractItemModel class.      \image qcolumnview.png      \sa {Model/View Programming} */
end_comment
begin_comment
comment|/*!     Constructs a column view with a \a parent to represent a model's     data. Use setModel() to set the model.      \sa QAbstractItemModel */
end_comment
begin_constructor
DECL|function|QColumnView
name|QColumnView
operator|::
name|QColumnView
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemView
argument_list|(
operator|*
operator|new
name|QColumnViewPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
name|d
operator|->
name|initialize
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QColumnView
name|QColumnView
operator|::
name|QColumnView
parameter_list|(
name|QColumnViewPrivate
modifier|&
name|dd
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemView
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
name|d
operator|->
name|initialize
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|initialize
name|void
name|QColumnViewPrivate
operator|::
name|initialize
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
name|q
operator|->
name|setTextElideMode
argument_list|(
name|Qt
operator|::
name|ElideMiddle
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|currentAnimation
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_changeCurrentColumn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|currentAnimation
operator|.
name|setDuration
argument_list|(
name|ANIMATION_DURATION_MSEC
argument_list|)
expr_stmt|;
name|currentAnimation
operator|.
name|setTargetObject
argument_list|(
name|hbar
argument_list|)
expr_stmt|;
name|currentAnimation
operator|.
name|setPropertyName
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|currentAnimation
operator|.
name|setEasingCurve
argument_list|(
name|QEasingCurve
operator|::
name|InOutQuad
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_ANIMATION
operator|delete
name|itemDelegate
expr_stmt|;
name|q
operator|->
name|setItemDelegate
argument_list|(
operator|new
name|QColumnViewDelegate
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Destroys the column view. */
end_comment
begin_destructor
DECL|function|~QColumnView
name|QColumnView
operator|::
name|~
name|QColumnView
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \property QColumnView::resizeGripsVisible     \brief the way to specify if the list views gets resize grips or not      By default, \c visible is set to true      \sa setRootIndex() */
end_comment
begin_function
DECL|function|setResizeGripsVisible
name|void
name|QColumnView
operator|::
name|setResizeGripsVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|showResizeGrips
operator|==
name|visible
condition|)
return|return;
name|d
operator|->
name|showResizeGrips
operator|=
name|visible
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|columns
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QAbstractItemView
modifier|*
name|view
init|=
name|d
operator|->
name|columns
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|visible
condition|)
block|{
name|QColumnViewGrip
modifier|*
name|grip
init|=
operator|new
name|QColumnViewGrip
argument_list|(
name|view
argument_list|)
decl_stmt|;
name|view
operator|->
name|setCornerWidget
argument_list|(
name|grip
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|grip
argument_list|,
name|SIGNAL
argument_list|(
name|gripMoved
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_gripMoved
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWidget
modifier|*
name|widget
init|=
name|view
operator|->
name|cornerWidget
argument_list|()
decl_stmt|;
name|view
operator|->
name|setCornerWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|widget
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|resizeGripsVisible
name|bool
name|QColumnView
operator|::
name|resizeGripsVisible
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QColumnView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|showResizeGrips
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setModel
name|void
name|QColumnView
operator|::
name|setModel
parameter_list|(
name|QAbstractItemModel
modifier|*
name|model
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|==
name|d
operator|->
name|model
condition|)
return|return;
name|d
operator|->
name|closeColumns
argument_list|()
expr_stmt|;
name|QAbstractItemView
operator|::
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setRootIndex
name|void
name|QColumnView
operator|::
name|setRootIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|model
argument_list|()
condition|)
return|return;
name|d
operator|->
name|closeColumns
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|columns
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QAbstractItemView
modifier|*
name|view
init|=
name|d
operator|->
name|createColumn
argument_list|(
name|index
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|view
operator|->
name|selectionModel
argument_list|()
condition|)
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|model
argument_list|()
condition|)
name|view
operator|->
name|setSelectionModel
argument_list|(
name|selectionModel
argument_list|()
argument_list|)
expr_stmt|;
name|QAbstractItemView
operator|::
name|setRootIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateScrollbars
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|isIndexHidden
name|bool
name|QColumnView
operator|::
name|isIndexHidden
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|indexAt
name|QModelIndex
name|QColumnView
operator|::
name|indexAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QColumnView
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPoint
name|topLeft
init|=
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|frameGeometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|QPoint
name|adjustedPoint
argument_list|(
name|point
operator|.
name|x
argument_list|()
operator|-
name|topLeft
operator|.
name|x
argument_list|()
argument_list|,
name|point
operator|.
name|y
argument_list|()
operator|-
name|topLeft
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|indexAt
argument_list|(
name|adjustedPoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|index
return|;
block|}
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|visualRect
name|QRect
name|QColumnView
operator|::
name|visualRect
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
name|Q_D
argument_list|(
specifier|const
name|QColumnView
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QRect
name|rect
init|=
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|visualRect
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rect
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|rect
operator|.
name|translate
argument_list|(
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|frameGeometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
block|}
block|}
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|scrollContentsBy
name|void
name|QColumnView
operator|::
name|scrollContentsBy
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|columns
operator|.
name|isEmpty
argument_list|()
operator|||
name|dx
operator|==
literal|0
condition|)
return|return;
name|dx
operator|=
name|isRightToLeft
argument_list|()
condition|?
operator|-
name|dx
else|:
name|dx
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|columns
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|move
argument_list|(
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|x
argument_list|()
operator|+
name|dx
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|offset
operator|+=
name|dx
expr_stmt|;
name|QAbstractItemView
operator|::
name|scrollContentsBy
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|scrollTo
name|void
name|QColumnView
operator|::
name|scrollTo
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|ScrollHint
name|hint
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|hint
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
name|d
operator|->
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
if|if
condition|(
name|d
operator|->
name|currentAnimation
operator|.
name|state
argument_list|()
operator|==
name|QPropertyAnimation
operator|::
name|Running
condition|)
return|return;
name|d
operator|->
name|currentAnimation
operator|.
name|stop
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_ANIMATION
comment|// Fill up what is needed to get to index
name|d
operator|->
name|closeColumns
argument_list|(
name|index
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QModelIndex
name|indexParent
init|=
name|index
operator|.
name|parent
argument_list|()
decl_stmt|;
comment|// Find the left edge of the column that contains index
name|int
name|currentColumn
init|=
literal|0
decl_stmt|;
name|int
name|leftEdge
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|currentColumn
operator|<
name|d
operator|->
name|columns
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|indexParent
operator|==
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|currentColumn
argument_list|)
operator|->
name|rootIndex
argument_list|()
condition|)
break|break;
name|leftEdge
operator|+=
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|currentColumn
argument_list|)
operator|->
name|width
argument_list|()
expr_stmt|;
operator|++
name|currentColumn
expr_stmt|;
block|}
comment|// Don't let us scroll above the root index
if|if
condition|(
name|currentColumn
operator|==
name|d
operator|->
name|columns
operator|.
name|size
argument_list|()
condition|)
return|return;
name|int
name|indexColumn
init|=
name|currentColumn
decl_stmt|;
comment|// Find the width of what we want to show (i.e. the right edge)
name|int
name|visibleWidth
init|=
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|currentColumn
argument_list|)
operator|->
name|width
argument_list|()
decl_stmt|;
comment|// We want to always try to show two columns
if|if
condition|(
name|currentColumn
operator|+
literal|1
operator|<
name|d
operator|->
name|columns
operator|.
name|size
argument_list|()
condition|)
block|{
operator|++
name|currentColumn
expr_stmt|;
name|visibleWidth
operator|+=
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|currentColumn
argument_list|)
operator|->
name|width
argument_list|()
expr_stmt|;
block|}
name|int
name|rightEdge
init|=
name|leftEdge
operator|+
name|visibleWidth
decl_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
name|leftEdge
operator|=
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
operator|-
name|leftEdge
expr_stmt|;
name|rightEdge
operator|=
name|leftEdge
operator|-
name|visibleWidth
expr_stmt|;
name|qSwap
argument_list|(
name|rightEdge
argument_list|,
name|leftEdge
argument_list|)
expr_stmt|;
block|}
comment|// If it is already visible don't animate
if|if
condition|(
name|leftEdge
operator|>
operator|-
name|horizontalOffset
argument_list|()
operator|&&
name|rightEdge
operator|<=
operator|(
operator|-
name|horizontalOffset
argument_list|()
operator|+
name|viewport
argument_list|()
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|)
condition|)
block|{
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|indexColumn
argument_list|)
operator|->
name|scrollTo
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|d
operator|->
name|_q_changeCurrentColumn
argument_list|()
expr_stmt|;
return|return;
block|}
name|int
name|newScrollbarValue
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
if|if
condition|(
name|leftEdge
operator|<
literal|0
condition|)
block|{
comment|// scroll to the right
name|newScrollbarValue
operator|=
name|viewport
argument_list|()
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|-
name|leftEdge
expr_stmt|;
block|}
else|else
block|{
comment|// scroll to the left
name|newScrollbarValue
operator|=
name|rightEdge
operator|+
name|horizontalOffset
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|leftEdge
operator|>
operator|-
name|horizontalOffset
argument_list|()
condition|)
block|{
comment|// scroll to the right
name|newScrollbarValue
operator|=
name|rightEdge
operator|-
name|viewport
argument_list|()
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// scroll to the left
name|newScrollbarValue
operator|=
name|leftEdge
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
name|d
operator|->
name|currentAnimation
operator|.
name|setEndValue
argument_list|(
name|newScrollbarValue
argument_list|)
expr_stmt|;
name|d
operator|->
name|currentAnimation
operator|.
name|start
argument_list|()
expr_stmt|;
else|#
directive|else
name|horizontalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|newScrollbarValue
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_ANIMATION
block|}
end_function
begin_comment
comment|/*!     \reimp     Move left should go to the parent index     Move right should go to the child index or down if there is no child */
end_comment
begin_function
DECL|function|moveCursor
name|QModelIndex
name|QColumnView
operator|::
name|moveCursor
parameter_list|(
name|CursorAction
name|cursorAction
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
comment|// the child views which have focus get to deal with this first and if
comment|// they don't accept it then it comes up this view and we only grip left/right
name|Q_UNUSED
argument_list|(
name|modifiers
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|model
argument_list|()
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|QModelIndex
name|current
init|=
name|currentIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
if|if
condition|(
name|cursorAction
operator|==
name|MoveLeft
condition|)
name|cursorAction
operator|=
name|MoveRight
expr_stmt|;
elseif|else
if|if
condition|(
name|cursorAction
operator|==
name|MoveRight
condition|)
name|cursorAction
operator|=
name|MoveLeft
expr_stmt|;
block|}
switch|switch
condition|(
name|cursorAction
condition|)
block|{
case|case
name|MoveLeft
case|:
if|if
condition|(
name|current
operator|.
name|parent
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
name|current
operator|.
name|parent
argument_list|()
operator|!=
name|rootIndex
argument_list|()
condition|)
return|return
operator|(
name|current
operator|.
name|parent
argument_list|()
operator|)
return|;
else|else
return|return
name|current
return|;
case|case
name|MoveRight
case|:
if|if
condition|(
name|model
argument_list|()
operator|->
name|hasChildren
argument_list|(
name|current
argument_list|)
condition|)
return|return
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|current
argument_list|)
return|;
else|else
return|return
name|current
operator|.
name|sibling
argument_list|(
name|current
operator|.
name|row
argument_list|()
operator|+
literal|1
argument_list|,
name|current
operator|.
name|column
argument_list|()
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QColumnView
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
name|d
operator|->
name|doLayout
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateScrollbars
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isRightToLeft
argument_list|()
condition|)
block|{
name|int
name|diff
init|=
name|event
operator|->
name|oldSize
argument_list|()
operator|.
name|width
argument_list|()
operator|-
name|event
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|<
literal|0
operator|&&
name|horizontalScrollBar
argument_list|()
operator|->
name|isVisible
argument_list|()
operator|&&
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|==
name|horizontalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
condition|)
block|{
name|horizontalScrollBar
argument_list|()
operator|->
name|setMaximum
argument_list|(
name|horizontalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
operator|+
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
name|QAbstractItemView
operator|::
name|resizeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|updateScrollbars
name|void
name|QColumnViewPrivate
operator|::
name|updateScrollbars
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
if|if
condition|(
name|currentAnimation
operator|.
name|state
argument_list|()
operator|==
name|QPropertyAnimation
operator|::
name|Running
condition|)
return|return;
endif|#
directive|endif
comment|//QT_NO_ANIMATION
comment|// find the total horizontal length of the laid out columns
name|int
name|horizontalLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|horizontalLength
operator|=
operator|(
name|columns
operator|.
name|last
argument_list|()
operator|->
name|x
argument_list|()
operator|+
name|columns
operator|.
name|last
argument_list|()
operator|->
name|width
argument_list|()
operator|)
operator|-
name|columns
operator|.
name|first
argument_list|()
operator|->
name|x
argument_list|()
expr_stmt|;
if|if
condition|(
name|horizontalLength
operator|<=
literal|0
condition|)
comment|// reverse mode
name|horizontalLength
operator|=
operator|(
name|columns
operator|.
name|first
argument_list|()
operator|->
name|x
argument_list|()
operator|+
name|columns
operator|.
name|first
argument_list|()
operator|->
name|width
argument_list|()
operator|)
operator|-
name|columns
operator|.
name|last
argument_list|()
operator|->
name|x
argument_list|()
expr_stmt|;
block|}
name|QSize
name|viewportSize
init|=
name|viewport
operator|->
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|horizontalLength
operator|<
name|viewportSize
operator|.
name|width
argument_list|()
operator|&&
name|hbar
operator|->
name|value
argument_list|()
operator|==
literal|0
condition|)
block|{
name|hbar
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|visibleLength
init|=
name|qMin
argument_list|(
name|horizontalLength
operator|+
name|q
operator|->
name|horizontalOffset
argument_list|()
argument_list|,
name|viewportSize
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|hiddenLength
init|=
name|horizontalLength
operator|-
name|visibleLength
decl_stmt|;
if|if
condition|(
name|hiddenLength
operator|!=
name|hbar
operator|->
name|maximum
argument_list|()
condition|)
name|hbar
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
name|hiddenLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|pageStepSize
init|=
name|columns
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|pageStepSize
operator|!=
name|hbar
operator|->
name|pageStep
argument_list|()
condition|)
name|hbar
operator|->
name|setPageStep
argument_list|(
name|pageStepSize
argument_list|)
expr_stmt|;
block|}
name|bool
name|visible
init|=
operator|(
name|hbar
operator|->
name|maximum
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|visible
operator|!=
name|hbar
operator|->
name|isVisible
argument_list|()
condition|)
name|hbar
operator|->
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|horizontalOffset
name|int
name|QColumnView
operator|::
name|horizontalOffset
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QColumnView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|offset
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|verticalOffset
name|int
name|QColumnView
operator|::
name|verticalOffset
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|visualRegionForSelection
name|QRegion
name|QColumnView
operator|::
name|visualRegionForSelection
parameter_list|(
specifier|const
name|QItemSelection
modifier|&
name|selection
parameter_list|)
specifier|const
block|{
name|int
name|ranges
init|=
name|selection
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|ranges
operator|==
literal|0
condition|)
return|return
name|QRect
argument_list|()
return|;
comment|// Note that we use the top and bottom functions of the selection range
comment|// since the data is stored in rows.
name|int
name|firstRow
init|=
name|selection
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|top
argument_list|()
decl_stmt|;
name|int
name|lastRow
init|=
name|selection
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|top
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
condition|;
operator|++
name|i
control|)
block|{
name|firstRow
operator|=
name|qMin
argument_list|(
name|firstRow
argument_list|,
name|selection
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|lastRow
operator|=
name|qMax
argument_list|(
name|lastRow
argument_list|,
name|selection
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QModelIndex
name|firstIdx
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|qMin
argument_list|(
name|firstRow
argument_list|,
name|lastRow
argument_list|)
argument_list|,
literal|0
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QModelIndex
name|lastIdx
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|qMax
argument_list|(
name|firstRow
argument_list|,
name|lastRow
argument_list|)
argument_list|,
literal|0
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstIdx
operator|==
name|lastIdx
condition|)
return|return
name|visualRect
argument_list|(
name|firstIdx
argument_list|)
return|;
name|QRegion
name|firstRegion
init|=
name|visualRect
argument_list|(
name|firstIdx
argument_list|)
decl_stmt|;
name|QRegion
name|lastRegion
init|=
name|visualRect
argument_list|(
name|lastIdx
argument_list|)
decl_stmt|;
return|return
name|firstRegion
operator|.
name|united
argument_list|(
name|lastRegion
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setSelection
name|void
name|QColumnView
operator|::
name|setSelection
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|command
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setSelectionModel
name|void
name|QColumnView
operator|::
name|setSelectionModel
parameter_list|(
name|QItemSelectionModel
modifier|*
name|newSelectionModel
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QColumnView
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|selectionModel
argument_list|()
operator|==
name|selectionModel
argument_list|()
condition|)
block|{
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|setSelectionModel
argument_list|(
name|newSelectionModel
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|QAbstractItemView
operator|::
name|setSelectionModel
argument_list|(
name|newSelectionModel
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QColumnView
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QColumnView
argument_list|)
expr_stmt|;
name|QSize
name|sizeHint
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|sizeHint
operator|+=
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
block|}
return|return
name|sizeHint
operator|.
name|expandedTo
argument_list|(
name|QAbstractItemView
operator|::
name|sizeHint
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Move all widgets from the corner grip and to the right   */
end_comment
begin_function
DECL|function|_q_gripMoved
name|void
name|QColumnViewPrivate
operator|::
name|_q_gripMoved
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|grip
init|=
name|q
operator|->
name|sender
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|grip
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|)
name|offset
operator|=
operator|-
literal|1
operator|*
name|offset
expr_stmt|;
name|bool
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|found
operator|&&
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|cornerWidget
argument_list|()
operator|==
name|grip
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|columnSizes
index|[
name|i
index|]
operator|=
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|)
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|move
argument_list|(
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|x
argument_list|()
operator|+
name|offset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|found
condition|)
continue|continue;
name|int
name|currentX
init|=
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|x
argument_list|()
decl_stmt|;
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|move
argument_list|(
name|currentX
operator|+
name|offset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|updateScrollbars
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Find where the current columns intersect parent's columns      Delete any extra columns and insert any needed columns.   */
end_comment
begin_function
DECL|function|closeColumns
name|void
name|QColumnViewPrivate
operator|::
name|closeColumns
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|bool
name|build
parameter_list|)
block|{
if|if
condition|(
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|bool
name|clearAll
init|=
operator|!
name|parent
operator|.
name|isValid
argument_list|()
decl_stmt|;
name|bool
name|passThroughRoot
init|=
literal|false
decl_stmt|;
name|QList
argument_list|<
name|QModelIndex
argument_list|>
name|dirsToAppend
decl_stmt|;
comment|// Find the last column that matches the parent's tree
name|int
name|currentColumn
init|=
operator|-
literal|1
decl_stmt|;
name|QModelIndex
name|parentIndex
init|=
name|parent
decl_stmt|;
while|while
condition|(
name|currentColumn
operator|==
operator|-
literal|1
operator|&&
name|parentIndex
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|parentIndex
operator|=
name|parentIndex
operator|.
name|parent
argument_list|()
expr_stmt|;
if|if
condition|(
name|root
operator|==
name|parentIndex
condition|)
name|passThroughRoot
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|parentIndex
operator|.
name|isValid
argument_list|()
condition|)
break|break;
for|for
control|(
name|int
name|i
init|=
name|columns
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|rootIndex
argument_list|()
operator|==
name|parentIndex
condition|)
block|{
name|currentColumn
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|currentColumn
operator|==
operator|-
literal|1
condition|)
name|dirsToAppend
operator|.
name|append
argument_list|(
name|parentIndex
argument_list|)
expr_stmt|;
block|}
comment|// Someone wants to go to an index that can be reached without changing
comment|// the root index, don't allow them
if|if
condition|(
operator|!
name|clearAll
operator|&&
operator|!
name|passThroughRoot
operator|&&
name|currentColumn
operator|==
operator|-
literal|1
condition|)
return|return;
if|if
condition|(
name|currentColumn
operator|==
operator|-
literal|1
operator|&&
name|parent
operator|.
name|isValid
argument_list|()
condition|)
name|currentColumn
operator|=
literal|0
expr_stmt|;
comment|// Optimization so we don't go deleting and then creating the same thing
name|bool
name|alreadyExists
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|build
operator|&&
name|columns
operator|.
name|size
argument_list|()
operator|>
name|currentColumn
operator|+
literal|1
condition|)
block|{
name|bool
name|viewingParent
init|=
operator|(
name|columns
operator|.
name|at
argument_list|(
name|currentColumn
operator|+
literal|1
argument_list|)
operator|->
name|rootIndex
argument_list|()
operator|==
name|parent
operator|)
decl_stmt|;
name|bool
name|viewingChild
init|=
operator|(
operator|!
name|model
operator|->
name|hasChildren
argument_list|(
name|parent
argument_list|)
operator|&&
operator|!
name|columns
operator|.
name|at
argument_list|(
name|currentColumn
operator|+
literal|1
argument_list|)
operator|->
name|rootIndex
argument_list|()
operator|.
name|isValid
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|viewingParent
operator|||
name|viewingChild
condition|)
block|{
name|currentColumn
operator|++
expr_stmt|;
name|alreadyExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Delete columns that don't match our path
for|for
control|(
name|int
name|i
init|=
name|columns
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
name|currentColumn
condition|;
operator|--
name|i
control|)
block|{
name|QAbstractItemView
modifier|*
name|notShownAnymore
init|=
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|columns
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|notShownAnymore
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|notShownAnymore
operator|!=
name|previewColumn
condition|)
name|notShownAnymore
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|offset
operator|=
literal|0
expr_stmt|;
name|updateScrollbars
argument_list|()
expr_stmt|;
block|}
comment|// Now fill in missing columns
while|while
condition|(
operator|!
name|dirsToAppend
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QAbstractItemView
modifier|*
name|newView
init|=
name|createColumn
argument_list|(
name|dirsToAppend
operator|.
name|takeLast
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dirsToAppend
operator|.
name|isEmpty
argument_list|()
condition|)
name|newView
operator|->
name|setCurrentIndex
argument_list|(
name|dirsToAppend
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|build
operator|&&
operator|!
name|alreadyExists
condition|)
name|createColumn
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_clicked
name|void
name|QColumnViewPrivate
operator|::
name|_q_clicked
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
name|QModelIndex
name|parent
init|=
name|index
operator|.
name|parent
argument_list|()
decl_stmt|;
name|QAbstractItemView
modifier|*
name|columnClicked
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|columns
operator|.
name|count
argument_list|()
condition|;
operator|++
name|column
control|)
block|{
if|if
condition|(
name|columns
operator|.
name|at
argument_list|(
name|column
argument_list|)
operator|->
name|rootIndex
argument_list|()
operator|==
name|parent
condition|)
block|{
name|columnClicked
operator|=
name|columns
index|[
name|column
index|]
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|q
operator|->
name|selectionModel
argument_list|()
operator|&&
name|columnClicked
condition|)
block|{
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|flags
init|=
name|QItemSelectionModel
operator|::
name|Current
decl_stmt|;
if|if
condition|(
name|columnClicked
operator|->
name|selectionModel
argument_list|()
operator|->
name|isSelected
argument_list|(
name|index
argument_list|)
condition|)
name|flags
operator||=
name|QItemSelectionModel
operator|::
name|Select
expr_stmt|;
name|q
operator|->
name|selectionModel
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal     Create a new column for \a index.  A grip is attached if requested and it is shown     if requested.      Return the new view      \sa createColumn(), setPreviewWidget()     \sa doLayout() */
end_comment
begin_function
DECL|function|createColumn
name|QAbstractItemView
modifier|*
name|QColumnViewPrivate
operator|::
name|createColumn
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|bool
name|show
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
name|QAbstractItemView
modifier|*
name|view
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|model
operator|->
name|hasChildren
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|view
operator|=
name|q
operator|->
name|createColumn
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
name|view
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_clicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|previewColumn
condition|)
name|setPreviewWidget
argument_list|(
operator|new
name|QWidget
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|=
name|previewColumn
expr_stmt|;
name|view
operator|->
name|setMinimumWidth
argument_list|(
name|qMax
argument_list|(
name|view
operator|->
name|minimumWidth
argument_list|()
argument_list|,
name|previewWidget
operator|->
name|minimumWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|connect
argument_list|(
name|view
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
name|view
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
name|view
argument_list|,
name|SIGNAL
argument_list|(
name|doubleClicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|doubleClicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
name|view
argument_list|,
name|SIGNAL
argument_list|(
name|entered
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|entered
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
name|view
argument_list|,
name|SIGNAL
argument_list|(
name|pressed
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|pressed
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|view
operator|->
name|setParent
argument_list|(
name|viewport
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|view
argument_list|)
expr_stmt|;
comment|// Setup corner grip
if|if
condition|(
name|showResizeGrips
condition|)
block|{
name|QColumnViewGrip
modifier|*
name|grip
init|=
operator|new
name|QColumnViewGrip
argument_list|(
name|view
argument_list|)
decl_stmt|;
name|view
operator|->
name|setCornerWidget
argument_list|(
name|grip
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
name|grip
argument_list|,
name|SIGNAL
argument_list|(
name|gripMoved
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_gripMoved
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columnSizes
operator|.
name|count
argument_list|()
operator|>
name|columns
operator|.
name|count
argument_list|()
condition|)
block|{
name|view
operator|->
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|columnSizes
operator|.
name|at
argument_list|(
name|columns
operator|.
name|count
argument_list|()
argument_list|)
argument_list|,
name|viewport
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|initialWidth
init|=
name|view
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|)
name|view
operator|->
name|setGeometry
argument_list|(
name|viewport
operator|->
name|width
argument_list|()
operator|-
name|initialWidth
argument_list|,
literal|0
argument_list|,
name|initialWidth
argument_list|,
name|viewport
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|view
operator|->
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|initialWidth
argument_list|,
name|viewport
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|columnSizes
operator|.
name|resize
argument_list|(
name|qMax
argument_list|(
name|columnSizes
operator|.
name|count
argument_list|()
argument_list|,
name|columns
operator|.
name|count
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|columnSizes
index|[
name|columns
operator|.
name|count
argument_list|()
index|]
operator|=
name|initialWidth
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|columns
operator|.
name|isEmpty
argument_list|()
operator|&&
name|columns
operator|.
name|last
argument_list|()
operator|->
name|isHidden
argument_list|()
condition|)
name|columns
operator|.
name|last
argument_list|()
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|columns
operator|.
name|append
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|doLayout
argument_list|()
expr_stmt|;
name|updateScrollbars
argument_list|()
expr_stmt|;
if|if
condition|(
name|show
operator|&&
name|view
operator|->
name|isHidden
argument_list|()
condition|)
name|view
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|view
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QColumnView::updatePreviewWidget(const QModelIndex&index)      This signal is emitted when the preview widget should be updated to     provide rich information about \a index      \sa previewWidget()  */
end_comment
begin_comment
comment|/*!     To use a custom widget for the final column when you select     an item overload this function and return a widget.     \a index is the root index that will be assigned to the view.      Return the new view.  QColumnView will automatically take ownership of the widget.      \sa setPreviewWidget()  */
end_comment
begin_function
DECL|function|createColumn
name|QAbstractItemView
modifier|*
name|QColumnView
operator|::
name|createColumn
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|QListView
modifier|*
name|view
init|=
operator|new
name|QListView
argument_list|(
name|viewport
argument_list|()
argument_list|)
decl_stmt|;
name|initializeColumn
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|view
operator|->
name|setRootIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
argument_list|()
operator|->
name|canFetchMore
argument_list|(
name|index
argument_list|)
condition|)
name|model
argument_list|()
operator|->
name|fetchMore
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|view
return|;
block|}
end_function
begin_comment
comment|/*!     Copies the behavior and options of the column view and applies them to     the \a column such as the iconSize(), textElideMode() and     alternatingRowColors(). This can be useful when reimplementing     createColumn().      \since 4.4     \sa createColumn()  */
end_comment
begin_function
DECL|function|initializeColumn
name|void
name|QColumnView
operator|::
name|initializeColumn
parameter_list|(
name|QAbstractItemView
modifier|*
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QColumnView
argument_list|)
expr_stmt|;
name|column
operator|->
name|setFrameShape
argument_list|(
name|QFrame
operator|::
name|NoFrame
argument_list|)
expr_stmt|;
name|column
operator|->
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
name|column
operator|->
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOn
argument_list|)
expr_stmt|;
name|column
operator|->
name|setMinimumWidth
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|column
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_MacShowFocusRect
argument_list|,
literal|false
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|column
operator|->
name|setDragDropMode
argument_list|(
name|dragDropMode
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|->
name|setDragDropOverwriteMode
argument_list|(
name|dragDropOverwriteMode
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|->
name|setDropIndicatorShown
argument_list|(
name|showDropIndicator
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|column
operator|->
name|setAlternatingRowColors
argument_list|(
name|alternatingRowColors
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|->
name|setAutoScroll
argument_list|(
name|hasAutoScroll
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|->
name|setEditTriggers
argument_list|(
name|editTriggers
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|->
name|setHorizontalScrollMode
argument_list|(
name|horizontalScrollMode
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|->
name|setIconSize
argument_list|(
name|iconSize
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|->
name|setSelectionBehavior
argument_list|(
name|selectionBehavior
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|->
name|setSelectionMode
argument_list|(
name|selectionMode
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|->
name|setTabKeyNavigation
argument_list|(
name|tabKeyNavigation
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|->
name|setTextElideMode
argument_list|(
name|textElideMode
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|->
name|setVerticalScrollMode
argument_list|(
name|verticalScrollMode
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|->
name|setModel
argument_list|(
name|model
argument_list|()
argument_list|)
expr_stmt|;
comment|// Copy the custom delegate per row
name|QMapIterator
argument_list|<
name|int
argument_list|,
name|QPointer
argument_list|<
name|QAbstractItemDelegate
argument_list|>
argument_list|>
name|i
argument_list|(
name|d
operator|->
name|rowDelegates
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|column
operator|->
name|setItemDelegateForRow
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|,
name|i
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// set the delegate to be the columnview delegate
name|QAbstractItemDelegate
modifier|*
name|delegate
init|=
name|column
operator|->
name|itemDelegate
argument_list|()
decl_stmt|;
name|column
operator|->
name|setItemDelegate
argument_list|(
name|d
operator|->
name|itemDelegate
argument_list|)
expr_stmt|;
operator|delete
name|delegate
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the preview widget, or 0 if there is none.      \sa setPreviewWidget(), updatePreviewWidget() */
end_comment
begin_function
DECL|function|previewWidget
name|QWidget
modifier|*
name|QColumnView
operator|::
name|previewWidget
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QColumnView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|previewWidget
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the preview \a widget.      The \a widget becomes a child of the column view, and will be     destroyed when the column area is deleted or when a new widget is     set.      \sa previewWidget(), updatePreviewWidget() */
end_comment
begin_function
DECL|function|setPreviewWidget
name|void
name|QColumnView
operator|::
name|setPreviewWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPreviewWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setPreviewWidget
name|void
name|QColumnViewPrivate
operator|::
name|setPreviewWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
if|if
condition|(
name|previewColumn
condition|)
block|{
if|if
condition|(
operator|!
name|columns
operator|.
name|isEmpty
argument_list|()
operator|&&
name|columns
operator|.
name|last
argument_list|()
operator|==
name|previewColumn
condition|)
name|columns
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|previewColumn
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
block|}
name|QColumnViewPreviewColumn
modifier|*
name|column
init|=
operator|new
name|QColumnViewPreviewColumn
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|column
operator|->
name|setPreviewWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|previewColumn
operator|=
name|column
expr_stmt|;
name|previewColumn
operator|->
name|hide
argument_list|()
expr_stmt|;
name|previewColumn
operator|->
name|setFrameShape
argument_list|(
name|QFrame
operator|::
name|NoFrame
argument_list|)
expr_stmt|;
name|previewColumn
operator|->
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOn
argument_list|)
expr_stmt|;
name|previewColumn
operator|->
name|setSelectionMode
argument_list|(
name|QAbstractItemView
operator|::
name|NoSelection
argument_list|)
expr_stmt|;
name|previewColumn
operator|->
name|setMinimumWidth
argument_list|(
name|qMax
argument_list|(
name|previewColumn
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|previewColumn
operator|->
name|minimumWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|previewWidget
operator|=
name|widget
expr_stmt|;
name|previewWidget
operator|->
name|setParent
argument_list|(
name|previewColumn
operator|->
name|viewport
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the column widths to the values given in the \a list.  Extra values in the list are     kept and used when the columns are created.      If list contains too few values, only width of the rest of the columns will not be modified.      \sa columnWidths(), createColumn() */
end_comment
begin_function
DECL|function|setColumnWidths
name|void
name|QColumnView
operator|::
name|setColumnWidths
parameter_list|(
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|list
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
operator|(
name|i
operator|<
name|list
operator|.
name|count
argument_list|()
operator|&&
name|i
operator|<
name|d
operator|->
name|columns
operator|.
name|count
argument_list|()
operator|)
condition|;
operator|++
name|i
control|)
block|{
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|resize
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|columnSizes
index|[
name|i
index|]
operator|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|columnSizes
operator|.
name|append
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of the width of all the columns in this view.      \sa setColumnWidths() */
end_comment
begin_function
DECL|function|columnWidths
name|QList
argument_list|<
name|int
argument_list|>
name|QColumnView
operator|::
name|columnWidths
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QColumnView
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|columns
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|list
operator|.
name|append
argument_list|(
name|d
operator|->
name|columnSizes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|rowsInserted
name|void
name|QColumnView
operator|::
name|rowsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|QAbstractItemView
operator|::
name|rowsInserted
argument_list|(
name|parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|checkColumnCreation
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|currentChanged
name|void
name|QColumnView
operator|::
name|currentChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|current
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|previous
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|current
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QAbstractItemView
operator|::
name|currentChanged
argument_list|(
name|current
argument_list|,
name|previous
argument_list|)
expr_stmt|;
return|return;
block|}
name|QModelIndex
name|currentParent
init|=
name|current
operator|.
name|parent
argument_list|()
decl_stmt|;
comment|// optimize for just moving up/down in a list where the child view doesn't change
if|if
condition|(
name|currentParent
operator|==
name|previous
operator|.
name|parent
argument_list|()
operator|&&
name|model
argument_list|()
operator|->
name|hasChildren
argument_list|(
name|current
argument_list|)
operator|&&
name|model
argument_list|()
operator|->
name|hasChildren
argument_list|(
name|previous
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|currentParent
operator|==
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|rootIndex
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|columns
operator|.
name|size
argument_list|()
operator|>
name|i
operator|+
literal|1
condition|)
block|{
name|QAbstractItemView
operator|::
name|currentChanged
argument_list|(
name|current
argument_list|,
name|previous
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
block|}
block|}
block|}
comment|// Scrolling to the right we need to have an empty spot
name|bool
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|currentParent
operator|==
name|previous
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|currentParent
operator|==
name|d
operator|->
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|rootIndex
argument_list|()
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|columns
operator|.
name|size
argument_list|()
operator|<
name|i
operator|+
literal|2
condition|)
block|{
name|d
operator|->
name|createColumn
argument_list|(
name|current
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
name|d
operator|->
name|closeColumns
argument_list|(
name|current
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|model
argument_list|()
operator|->
name|hasChildren
argument_list|(
name|current
argument_list|)
condition|)
emit|emit
name|updatePreviewWidget
argument_list|(
name|current
argument_list|)
emit|;
name|QAbstractItemView
operator|::
name|currentChanged
argument_list|(
name|current
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     We have change the current column and need to update focus and selection models     on the new current column. */
end_comment
begin_function
DECL|function|_q_changeCurrentColumn
name|void
name|QColumnViewPrivate
operator|::
name|_q_changeCurrentColumn
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QModelIndex
name|current
init|=
name|q
operator|->
name|currentIndex
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|current
operator|.
name|isValid
argument_list|()
condition|)
return|return;
comment|// We might have scrolled far to the left so we need to close all of the children
name|closeColumns
argument_list|(
name|current
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Set up the "current" column with focus
name|int
name|currentColumn
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|columns
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
decl_stmt|;
name|QAbstractItemView
modifier|*
name|parentColumn
init|=
name|columns
operator|.
name|at
argument_list|(
name|currentColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|hasFocus
argument_list|()
condition|)
name|parentColumn
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|OtherFocusReason
argument_list|)
expr_stmt|;
name|q
operator|->
name|setFocusProxy
argument_list|(
name|parentColumn
argument_list|)
expr_stmt|;
comment|// find the column that is our current selection model and give it a new one.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|selectionModel
argument_list|()
operator|==
name|q
operator|->
name|selectionModel
argument_list|()
condition|)
block|{
name|QItemSelectionModel
modifier|*
name|replacementSelectionModel
init|=
operator|new
name|QItemSelectionModel
argument_list|(
name|parentColumn
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
name|replacementSelectionModel
operator|->
name|setCurrentIndex
argument_list|(
name|q
operator|->
name|selectionModel
argument_list|()
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|QItemSelectionModel
operator|::
name|Current
argument_list|)
expr_stmt|;
name|replacementSelectionModel
operator|->
name|select
argument_list|(
name|q
operator|->
name|selectionModel
argument_list|()
operator|->
name|selection
argument_list|()
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
argument_list|)
expr_stmt|;
name|QAbstractItemView
modifier|*
name|view
init|=
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|view
operator|->
name|setSelectionModel
argument_list|(
name|replacementSelectionModel
argument_list|)
expr_stmt|;
name|view
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|.
name|size
argument_list|()
operator|>
name|i
operator|+
literal|1
condition|)
name|view
operator|->
name|setCurrentIndex
argument_list|(
name|columns
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|->
name|rootIndex
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|parentColumn
operator|->
name|selectionModel
argument_list|()
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|parentColumn
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
name|parentColumn
operator|->
name|setSelectionModel
argument_list|(
name|q
operator|->
name|selectionModel
argument_list|()
argument_list|)
expr_stmt|;
comment|// We want the parent selection to stay highlighted (but dimmed depending upon the color theme)
if|if
condition|(
name|currentColumn
operator|>
literal|0
condition|)
block|{
name|parentColumn
operator|=
name|columns
operator|.
name|at
argument_list|(
name|currentColumn
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentColumn
operator|->
name|currentIndex
argument_list|()
operator|!=
name|current
operator|.
name|parent
argument_list|()
condition|)
name|parentColumn
operator|->
name|setCurrentIndex
argument_list|(
name|current
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columns
operator|.
name|last
argument_list|()
operator|->
name|isHidden
argument_list|()
condition|)
block|{
name|columns
operator|.
name|last
argument_list|()
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columns
operator|.
name|last
argument_list|()
operator|->
name|selectionModel
argument_list|()
condition|)
name|columns
operator|.
name|last
argument_list|()
operator|->
name|selectionModel
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|updateScrollbars
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|selectAll
name|void
name|QColumnView
operator|::
name|selectAll
parameter_list|()
block|{
if|if
condition|(
operator|!
name|model
argument_list|()
operator|||
operator|!
name|selectionModel
argument_list|()
condition|)
return|return;
name|QModelIndexList
name|indexList
init|=
name|selectionModel
argument_list|()
operator|->
name|selectedIndexes
argument_list|()
decl_stmt|;
name|QModelIndex
name|parent
init|=
name|rootIndex
argument_list|()
decl_stmt|;
name|QItemSelection
name|selection
decl_stmt|;
if|if
condition|(
name|indexList
operator|.
name|count
argument_list|()
operator|>=
literal|1
condition|)
name|parent
operator|=
name|indexList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|parent
argument_list|()
expr_stmt|;
if|if
condition|(
name|indexList
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
name|parent
operator|=
name|indexList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|model
argument_list|()
operator|->
name|hasChildren
argument_list|(
name|parent
argument_list|)
condition|)
name|parent
operator|=
name|parent
operator|.
name|parent
argument_list|()
expr_stmt|;
else|else
name|selection
operator|.
name|append
argument_list|(
name|QItemSelectionRange
argument_list|(
name|parent
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QModelIndex
name|tl
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QModelIndex
name|br
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|model
argument_list|()
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
operator|-
literal|1
argument_list|,
name|model
argument_list|()
operator|->
name|columnCount
argument_list|(
name|parent
argument_list|)
operator|-
literal|1
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|selection
operator|.
name|append
argument_list|(
name|QItemSelectionRange
argument_list|(
name|tl
argument_list|,
name|br
argument_list|)
argument_list|)
expr_stmt|;
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|selection
argument_list|,
name|QItemSelectionModel
operator|::
name|ClearAndSelect
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * private object implementation  */
end_comment
begin_constructor
DECL|function|QColumnViewPrivate
name|QColumnViewPrivate
operator|::
name|QColumnViewPrivate
parameter_list|()
member_init_list|:
name|QAbstractItemViewPrivate
argument_list|()
member_init_list|,
name|showResizeGrips
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|offset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|previewWidget
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|previewColumn
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QColumnViewPrivate
name|QColumnViewPrivate
operator|::
name|~
name|QColumnViewPrivate
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \internal    */
end_comment
begin_function
DECL|function|_q_columnsInserted
name|void
name|QColumnViewPrivate
operator|::
name|_q_columnsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|QAbstractItemViewPrivate
operator|::
name|_q_columnsInserted
argument_list|(
name|parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|checkColumnCreation
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Makes sure we create a corresponding column as a result of changing the model.    */
end_comment
begin_function
DECL|function|checkColumnCreation
name|void
name|QColumnViewPrivate
operator|::
name|checkColumnCreation
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
name|q_func
argument_list|()
operator|->
name|currentIndex
argument_list|()
operator|&&
name|model
operator|->
name|hasChildren
argument_list|(
name|parent
argument_list|)
condition|)
block|{
comment|//the parent has children and is the current
comment|//let's try to find out if there is already a mapping that is good
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QAbstractItemView
modifier|*
name|view
init|=
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|view
operator|->
name|rootIndex
argument_list|()
operator|==
name|parent
condition|)
block|{
if|if
condition|(
name|view
operator|==
name|previewColumn
condition|)
block|{
comment|//let's recreate the parent
name|closeColumns
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|createColumn
argument_list|(
name|parent
argument_list|,
literal|true
comment|/*show*/
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \internal     Place all of the columns where they belong inside of the viewport, resize as necessary. */
end_comment
begin_function
DECL|function|doLayout
name|void
name|QColumnViewPrivate
operator|::
name|doLayout
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|model
operator|||
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|int
name|viewportHeight
init|=
name|viewport
operator|->
name|height
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|columns
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|x
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|)
block|{
name|x
operator|=
name|viewport
operator|->
name|width
argument_list|()
operator|+
name|q
operator|->
name|horizontalOffset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QAbstractItemView
modifier|*
name|view
init|=
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|x
operator|-=
name|view
operator|->
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
name|x
operator|!=
name|view
operator|->
name|x
argument_list|()
operator|||
name|viewportHeight
operator|!=
name|view
operator|->
name|height
argument_list|()
condition|)
name|view
operator|->
name|setGeometry
argument_list|(
name|x
argument_list|,
literal|0
argument_list|,
name|view
operator|->
name|width
argument_list|()
argument_list|,
name|viewportHeight
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QAbstractItemView
modifier|*
name|view
init|=
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|currentColumnWidth
init|=
name|view
operator|->
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|!=
name|view
operator|->
name|x
argument_list|()
operator|||
name|viewportHeight
operator|!=
name|view
operator|->
name|height
argument_list|()
condition|)
name|view
operator|->
name|setGeometry
argument_list|(
name|x
argument_list|,
literal|0
argument_list|,
name|currentColumnWidth
argument_list|,
name|viewportHeight
argument_list|)
expr_stmt|;
name|x
operator|+=
name|currentColumnWidth
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      Draws a delegate with a> if an object has children.      \sa {Model/View Programming}, QItemDelegate */
end_comment
begin_function
DECL|function|paint
name|void
name|QColumnViewDelegate
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|drawBackground
argument_list|(
name|painter
argument_list|,
name|option
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|bool
name|reverse
init|=
operator|(
name|option
operator|.
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
decl_stmt|;
name|int
name|width
init|=
operator|(
operator|(
name|option
operator|.
name|rect
operator|.
name|height
argument_list|()
operator|*
literal|2
operator|)
operator|/
literal|3
operator|)
decl_stmt|;
comment|// Modify the options to give us room to add an arrow
name|QStyleOptionViewItem
name|opt
init|=
name|option
decl_stmt|;
if|if
condition|(
name|reverse
condition|)
name|opt
operator|.
name|rect
operator|.
name|adjust
argument_list|(
name|width
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|opt
operator|.
name|rect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|width
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|index
operator|.
name|model
argument_list|()
operator|->
name|flags
argument_list|(
name|index
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsEnabled
operator|)
condition|)
block|{
name|opt
operator|.
name|showDecorationSelected
operator|=
literal|true
expr_stmt|;
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
block|}
name|QItemDelegate
operator|::
name|paint
argument_list|(
name|painter
argument_list|,
name|opt
argument_list|,
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|reverse
condition|)
name|opt
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|option
operator|.
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|option
operator|.
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|width
argument_list|,
name|option
operator|.
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|opt
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|option
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
name|option
operator|.
name|rect
operator|.
name|width
argument_list|()
operator|-
name|width
argument_list|,
name|option
operator|.
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|width
argument_list|,
name|option
operator|.
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|// Draw>
if|if
condition|(
name|index
operator|.
name|model
argument_list|()
operator|->
name|hasChildren
argument_list|(
name|index
argument_list|)
condition|)
block|{
specifier|const
name|QWidget
modifier|*
name|view
init|=
name|opt
operator|.
name|widget
decl_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|view
condition|?
name|view
operator|->
name|style
argument_list|()
else|:
name|QApplication
operator|::
name|style
argument_list|()
decl_stmt|;
name|style
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_IndicatorColumnViewArrow
argument_list|,
operator|&
name|opt
argument_list|,
name|painter
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qcolumnview.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_COLUMNVIEW
end_comment
end_unit
