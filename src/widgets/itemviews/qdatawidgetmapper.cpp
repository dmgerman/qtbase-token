begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdatawidgetmapper.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATAWIDGETMAPPER
end_ifndef
begin_include
include|#
directive|include
file|"qabstractitemmodel.h"
end_include
begin_include
include|#
directive|include
file|"qitemdelegate.h"
end_include
begin_include
include|#
directive|include
file|"qmetaobject.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"private/qobject_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qabstractitemmodel_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QDataWidgetMapperPrivate
class|class
name|QDataWidgetMapperPrivate
super|:
specifier|public
name|QObjectPrivate
block|{
public|public:
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QDataWidgetMapper
argument_list|)
DECL|function|QDataWidgetMapperPrivate
name|QDataWidgetMapperPrivate
parameter_list|()
member_init_list|:
name|model
argument_list|(
name|QAbstractItemModelPrivate
operator|::
name|staticEmptyModel
argument_list|()
argument_list|)
member_init_list|,
name|delegate
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|orientation
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
member_init_list|,
name|submitPolicy
argument_list|(
name|QDataWidgetMapper
operator|::
name|AutoSubmit
argument_list|)
block|{     }
DECL|member|model
name|QAbstractItemModel
modifier|*
name|model
decl_stmt|;
DECL|member|delegate
name|QAbstractItemDelegate
modifier|*
name|delegate
decl_stmt|;
DECL|member|orientation
name|Qt
operator|::
name|Orientation
name|orientation
decl_stmt|;
DECL|member|submitPolicy
name|QDataWidgetMapper
operator|::
name|SubmitPolicy
name|submitPolicy
decl_stmt|;
DECL|member|rootIndex
name|QPersistentModelIndex
name|rootIndex
decl_stmt|;
DECL|member|currentTopLeft
name|QPersistentModelIndex
name|currentTopLeft
decl_stmt|;
DECL|function|itemCount
specifier|inline
name|int
name|itemCount
parameter_list|()
block|{
return|return
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|model
operator|->
name|rowCount
argument_list|(
name|rootIndex
argument_list|)
else|:
name|model
operator|->
name|columnCount
argument_list|(
name|rootIndex
argument_list|)
return|;
block|}
DECL|function|currentIdx
specifier|inline
name|int
name|currentIdx
parameter_list|()
specifier|const
block|{
return|return
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|currentTopLeft
operator|.
name|row
argument_list|()
else|:
name|currentTopLeft
operator|.
name|column
argument_list|()
return|;
block|}
DECL|function|indexAt
specifier|inline
name|QModelIndex
name|indexAt
parameter_list|(
name|int
name|itemPos
parameter_list|)
block|{
return|return
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|model
operator|->
name|index
argument_list|(
name|currentIdx
argument_list|()
argument_list|,
name|itemPos
argument_list|,
name|rootIndex
argument_list|)
else|:
name|model
operator|->
name|index
argument_list|(
name|itemPos
argument_list|,
name|currentIdx
argument_list|()
argument_list|,
name|rootIndex
argument_list|)
return|;
block|}
DECL|function|flipEventFilters
specifier|inline
name|void
name|flipEventFilters
parameter_list|(
name|QAbstractItemDelegate
modifier|*
name|oldDelegate
parameter_list|,
name|QAbstractItemDelegate
modifier|*
name|newDelegate
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|widgetMap
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|widgetMap
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|widget
decl_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
continue|continue;
name|w
operator|->
name|removeEventFilter
argument_list|(
name|oldDelegate
argument_list|)
expr_stmt|;
name|w
operator|->
name|installEventFilter
argument_list|(
name|newDelegate
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|populate
parameter_list|()
function_decl|;
comment|// private slots
name|void
name|_q_dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|)
function_decl|;
name|void
name|_q_commitData
parameter_list|(
name|QWidget
modifier|*
parameter_list|)
function_decl|;
name|void
name|_q_closeEditor
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|QAbstractItemDelegate
operator|::
name|EndEditHint
parameter_list|)
function_decl|;
name|void
name|_q_modelDestroyed
parameter_list|()
function_decl|;
DECL|struct|WidgetMapper
struct|struct
name|WidgetMapper
block|{
DECL|function|WidgetMapper
specifier|inline
name|WidgetMapper
parameter_list|(
name|QWidget
modifier|*
name|w
init|=
literal|0
parameter_list|,
name|int
name|c
init|=
literal|0
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|i
init|=
name|QModelIndex
argument_list|()
parameter_list|)
member_init_list|:
name|widget
argument_list|(
name|w
argument_list|)
member_init_list|,
name|section
argument_list|(
name|c
argument_list|)
member_init_list|,
name|currentIndex
argument_list|(
name|i
argument_list|)
block|{}
DECL|function|WidgetMapper
specifier|inline
name|WidgetMapper
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|int
name|c
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|i
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|p
parameter_list|)
member_init_list|:
name|widget
argument_list|(
name|w
argument_list|)
member_init_list|,
name|section
argument_list|(
name|c
argument_list|)
member_init_list|,
name|currentIndex
argument_list|(
name|i
argument_list|)
member_init_list|,
name|property
argument_list|(
name|p
argument_list|)
block|{}
DECL|member|widget
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|widget
decl_stmt|;
DECL|member|section
name|int
name|section
decl_stmt|;
DECL|member|currentIndex
name|QPersistentModelIndex
name|currentIndex
decl_stmt|;
DECL|member|property
name|QByteArray
name|property
decl_stmt|;
block|}
struct|;
name|void
name|populate
parameter_list|(
name|WidgetMapper
modifier|&
name|m
parameter_list|)
function_decl|;
name|int
name|findWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
function_decl|;
name|bool
name|commit
parameter_list|(
specifier|const
name|WidgetMapper
modifier|&
name|m
parameter_list|)
function_decl|;
DECL|member|widgetMap
name|QList
argument_list|<
name|WidgetMapper
argument_list|>
name|widgetMap
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|findWidget
name|int
name|QDataWidgetMapperPrivate
operator|::
name|findWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|widgetMap
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|widgetMap
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|widget
operator|==
name|w
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|commit
name|bool
name|QDataWidgetMapperPrivate
operator|::
name|commit
parameter_list|(
specifier|const
name|WidgetMapper
modifier|&
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|.
name|widget
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// just ignore
if|if
condition|(
operator|!
name|m
operator|.
name|currentIndex
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Create copy to avoid passing the widget mappers data
name|QModelIndex
name|idx
init|=
name|m
operator|.
name|currentIndex
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|property
operator|.
name|isEmpty
argument_list|()
condition|)
name|delegate
operator|->
name|setModelData
argument_list|(
name|m
operator|.
name|widget
argument_list|,
name|model
argument_list|,
name|idx
argument_list|)
expr_stmt|;
else|else
name|model
operator|->
name|setData
argument_list|(
name|idx
argument_list|,
name|m
operator|.
name|widget
operator|->
name|property
argument_list|(
name|m
operator|.
name|property
argument_list|)
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|populate
name|void
name|QDataWidgetMapperPrivate
operator|::
name|populate
parameter_list|(
name|WidgetMapper
modifier|&
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|.
name|widget
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|m
operator|.
name|currentIndex
operator|=
name|indexAt
argument_list|(
name|m
operator|.
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|property
operator|.
name|isEmpty
argument_list|()
condition|)
name|delegate
operator|->
name|setEditorData
argument_list|(
name|m
operator|.
name|widget
argument_list|,
name|m
operator|.
name|currentIndex
argument_list|)
expr_stmt|;
else|else
name|m
operator|.
name|widget
operator|->
name|setProperty
argument_list|(
name|m
operator|.
name|property
argument_list|,
name|m
operator|.
name|currentIndex
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|EditRole
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|populate
name|void
name|QDataWidgetMapperPrivate
operator|::
name|populate
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|widgetMap
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|populate
argument_list|(
name|widgetMap
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qContainsIndex
specifier|static
name|bool
name|qContainsIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|)
block|{
return|return
name|idx
operator|.
name|row
argument_list|()
operator|>=
name|topLeft
operator|.
name|row
argument_list|()
operator|&&
name|idx
operator|.
name|row
argument_list|()
operator|<=
name|bottomRight
operator|.
name|row
argument_list|()
operator|&&
name|idx
operator|.
name|column
argument_list|()
operator|>=
name|topLeft
operator|.
name|column
argument_list|()
operator|&&
name|idx
operator|.
name|column
argument_list|()
operator|<=
name|bottomRight
operator|.
name|column
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|_q_dataChanged
name|void
name|QDataWidgetMapperPrivate
operator|::
name|_q_dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|)
block|{
if|if
condition|(
name|topLeft
operator|.
name|parent
argument_list|()
operator|!=
name|rootIndex
condition|)
return|return;
comment|// not in our hierarchy
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|widgetMap
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|WidgetMapper
modifier|&
name|m
init|=
name|widgetMap
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|qContainsIndex
argument_list|(
name|m
operator|.
name|currentIndex
argument_list|,
name|topLeft
argument_list|,
name|bottomRight
argument_list|)
condition|)
name|populate
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_commitData
name|void
name|QDataWidgetMapperPrivate
operator|::
name|_q_commitData
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
name|submitPolicy
operator|==
name|QDataWidgetMapper
operator|::
name|ManualSubmit
condition|)
return|return;
name|int
name|idx
init|=
name|findWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
return|return;
comment|// not our widget
name|commit
argument_list|(
name|widgetMap
operator|.
name|at
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QFocusHelper
class|class
name|QFocusHelper
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|focusNextPrevChild
name|bool
name|focusNextPrevChild
parameter_list|(
name|bool
name|next
parameter_list|)
block|{
return|return
name|QWidget
operator|::
name|focusNextPrevChild
argument_list|(
name|next
argument_list|)
return|;
block|}
DECL|function|focusNextPrevChild
specifier|static
specifier|inline
name|void
name|focusNextPrevChild
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|next
parameter_list|)
block|{
cast|static_cast
argument_list|<
name|QFocusHelper
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|->
name|focusNextPrevChild
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|_q_closeEditor
name|void
name|QDataWidgetMapperPrivate
operator|::
name|_q_closeEditor
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|QAbstractItemDelegate
operator|::
name|EndEditHint
name|hint
parameter_list|)
block|{
name|int
name|idx
init|=
name|findWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
return|return;
comment|// not our widget
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|QAbstractItemDelegate
operator|::
name|RevertModelCache
case|:
block|{
name|populate
argument_list|(
name|widgetMap
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QAbstractItemDelegate
operator|::
name|EditNextItem
case|:
name|QFocusHelper
operator|::
name|focusNextPrevChild
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAbstractItemDelegate
operator|::
name|EditPreviousItem
case|:
name|QFocusHelper
operator|::
name|focusNextPrevChild
argument_list|(
name|w
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAbstractItemDelegate
operator|::
name|SubmitModelCache
case|:
case|case
name|QAbstractItemDelegate
operator|::
name|NoHint
case|:
comment|// nothing
break|break;
block|}
block|}
end_function
begin_function
DECL|function|_q_modelDestroyed
name|void
name|QDataWidgetMapperPrivate
operator|::
name|_q_modelDestroyed
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
name|model
operator|=
literal|0
expr_stmt|;
name|q
operator|->
name|setModel
argument_list|(
name|QAbstractItemModelPrivate
operator|::
name|staticEmptyModel
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QDataWidgetMapper     \brief The QDataWidgetMapper class provides mapping between a section     of a data model to widgets.     \since 4.2     \ingroup model-view     \ingroup advanced     \inmodule QtWidgets      QDataWidgetMapper can be used to create data-aware widgets by mapping     them to sections of an item model. A section is a column of a model     if the orientation is horizontal (the default), otherwise a row.      Every time the current index changes, each widget is updated with data     from the model via the property specified when its mapping was made.     If the user edits the contents of a widget, the changes are read using     the same property and written back to the model.     By default, each widget's \l{Q_PROPERTY()}{user property} is used to     transfer data between the model and the widget. Since Qt 4.3, an     additional addMapping() function enables a named property to be used     instead of the default user property.      It is possible to set an item delegate to support custom widgets. By default,     a QItemDelegate is used to synchronize the model with the widgets.      Let us assume that we have an item model named \c{model} with the following contents:      \table     \row \o 1 \o Qt Norway       \o Oslo     \row \o 2 \o Qt Australia    \o Brisbane     \row \o 3 \o Qt USA          \o Palo Alto     \row \o 4 \o Qt China        \o Beijing     \row \o 5 \o Qt Germany      \o Berlin     \endtable      The following code will map the columns of the model to widgets called \c mySpinBox,     \c myLineEdit and \c{myCountryChooser}:      \snippet doc/src/snippets/code/src_gui_itemviews_qdatawidgetmapper.cpp 0      After the call to toFirst(), \c mySpinBox displays the value \c{1}, \c myLineEdit     displays \c{Qt Norway} and \c myCountryChooser displays \c{Oslo}. The     navigational functions toFirst(), toNext(), toPrevious(), toLast() and setCurrentIndex()     can be used to navigate in the model and update the widgets with contents from     the model.      The setRootIndex() function enables a particular item in a model to be     specified as the root index - children of this item will be mapped to     the relevant widgets in the user interface.      QDataWidgetMapper supports two submit policies, \c AutoSubmit and \c{ManualSubmit}.     \c AutoSubmit will update the model as soon as the current widget loses focus,     \c ManualSubmit will not update the model unless submit() is called. \c ManualSubmit     is useful when displaying a dialog that lets the user cancel all modifications.     Also, other views that display the model won't update until the user finishes     all their modifications and submits.      Note that QDataWidgetMapper keeps track of external modifications. If the contents     of the model are updated in another module of the application, the widgets are     updated as well.      \sa QAbstractItemModel, QAbstractItemDelegate  */
end_comment
begin_comment
comment|/*! \enum QDataWidgetMapper::SubmitPolicy      This enum describes the possible submit policies a QDataWidgetMapper     supports.      \value AutoSubmit    Whenever a widget loses focus, the widget's current                          value is set to the item model.     \value ManualSubmit  The model is not updated until submit() is called.  */
end_comment
begin_comment
comment|/*!     \fn void QDataWidgetMapper::currentIndexChanged(int index)      This signal is emitted after the current index has changed and     all widgets were populated with new data. \a index is the new     current index.      \sa currentIndex(), setCurrentIndex()  */
end_comment
begin_comment
comment|/*!     Constructs a new QDataWidgetMapper with parent object \a parent.     By default, the orientation is horizontal and the submit policy     is \c{AutoSubmit}.      \sa setOrientation(), setSubmitPolicy()  */
end_comment
begin_constructor
DECL|function|QDataWidgetMapper
name|QDataWidgetMapper
operator|::
name|QDataWidgetMapper
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QDataWidgetMapperPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|setItemDelegate
argument_list|(
operator|new
name|QItemDelegate
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the object.  */
end_comment
begin_destructor
DECL|function|~QDataWidgetMapper
name|QDataWidgetMapper
operator|::
name|~
name|QDataWidgetMapper
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!      Sets the current model to \a model. If another model was set,      all mappings to that old model are cleared.       \sa model()  */
end_comment
begin_function
DECL|function|setModel
name|void
name|QDataWidgetMapper
operator|::
name|setModel
parameter_list|(
name|QAbstractItemModel
modifier|*
name|model
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
operator|==
name|model
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|model
condition|)
block|{
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_modelDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|clearMapping
argument_list|()
expr_stmt|;
name|d
operator|->
name|rootIndex
operator|=
name|QModelIndex
argument_list|()
expr_stmt|;
name|d
operator|->
name|currentTopLeft
operator|=
name|QModelIndex
argument_list|()
expr_stmt|;
name|d
operator|->
name|model
operator|=
name|model
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_modelDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the current model.      \sa setModel()  */
end_comment
begin_function
DECL|function|model
name|QAbstractItemModel
modifier|*
name|QDataWidgetMapper
operator|::
name|model
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|==
name|QAbstractItemModelPrivate
operator|::
name|staticEmptyModel
argument_list|()
condition|?
cast|static_cast
argument_list|<
name|QAbstractItemModel
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
else|:
name|d
operator|->
name|model
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the item delegate to \a delegate. The delegate will be used to write     data from the model into the widget and from the widget to the model,     using QAbstractItemDelegate::setEditorData() and QAbstractItemDelegate::setModelData().      The delegate also decides when to apply data and when to change the editor,     using QAbstractItemDelegate::commitData() and QAbstractItemDelegate::closeEditor().      \warning You should not share the same instance of a delegate between widget mappers     or views. Doing so can cause incorrect or unintuitive editing behavior since each     view connected to a given delegate may receive the \l{QAbstractItemDelegate::}{closeEditor()}     signal, and attempt to access, modify or close an editor that has already been closed.  */
end_comment
begin_function
DECL|function|setItemDelegate
name|void
name|QDataWidgetMapper
operator|::
name|setItemDelegate
parameter_list|(
name|QAbstractItemDelegate
modifier|*
name|delegate
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
name|QAbstractItemDelegate
modifier|*
name|oldDelegate
init|=
name|d
operator|->
name|delegate
decl_stmt|;
if|if
condition|(
name|oldDelegate
condition|)
block|{
name|disconnect
argument_list|(
name|oldDelegate
argument_list|,
name|SIGNAL
argument_list|(
name|commitData
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_commitData
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|oldDelegate
argument_list|,
name|SIGNAL
argument_list|(
name|closeEditor
argument_list|(
name|QWidget
operator|*
argument_list|,
name|QAbstractItemDelegate
operator|::
name|EndEditHint
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_closeEditor
argument_list|(
name|QWidget
operator|*
argument_list|,
name|QAbstractItemDelegate
operator|::
name|EndEditHint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|delegate
operator|=
name|delegate
expr_stmt|;
if|if
condition|(
name|delegate
condition|)
block|{
name|connect
argument_list|(
name|delegate
argument_list|,
name|SIGNAL
argument_list|(
name|commitData
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_commitData
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|delegate
argument_list|,
name|SIGNAL
argument_list|(
name|closeEditor
argument_list|(
name|QWidget
operator|*
argument_list|,
name|QAbstractItemDelegate
operator|::
name|EndEditHint
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_closeEditor
argument_list|(
name|QWidget
operator|*
argument_list|,
name|QAbstractItemDelegate
operator|::
name|EndEditHint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|flipEventFilters
argument_list|(
name|oldDelegate
argument_list|,
name|delegate
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the current item delegate.  */
end_comment
begin_function
DECL|function|itemDelegate
name|QAbstractItemDelegate
modifier|*
name|QDataWidgetMapper
operator|::
name|itemDelegate
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|delegate
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the root item to \a index. This can be used to display     a branch of a tree. Pass an invalid model index to display     the top-most branch.      \sa rootIndex()  */
end_comment
begin_function
DECL|function|setRootIndex
name|void
name|QDataWidgetMapper
operator|::
name|setRootIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
name|d
operator|->
name|rootIndex
operator|=
name|index
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the current root index.      \sa setRootIndex() */
end_comment
begin_function
DECL|function|rootIndex
name|QModelIndex
name|QDataWidgetMapper
operator|::
name|rootIndex
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
return|return
name|QModelIndex
argument_list|(
name|d
operator|->
name|rootIndex
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a mapping between a \a widget and a \a section from the model.     The \a section is a column in the model if the orientation is     horizontal (the default), otherwise a row.      For the following example, we assume a model \c myModel that     has two columns: the first one contains the names of people in a     group, and the second column contains their ages. The first column     is mapped to the QLineEdit \c nameLineEdit, and the second is     mapped to the QSpinBox \c{ageSpinBox}:      \snippet doc/src/snippets/code/src_gui_itemviews_qdatawidgetmapper.cpp 1      \bold{Notes:}     \list     \o If the \a widget is already mapped to a section, the     old mapping will be replaced by the new one.     \o Only one-to-one mappings between sections and widgets are allowed.     It is not possible to map a single section to multiple widgets, or to     map a single widget to multiple sections.     \endlist      \sa removeMapping(), mappedSection(), clearMapping()  */
end_comment
begin_function
DECL|function|addMapping
name|void
name|QDataWidgetMapper
operator|::
name|addMapping
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|section
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
name|removeMapping
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|d
operator|->
name|widgetMap
operator|.
name|append
argument_list|(
name|QDataWidgetMapperPrivate
operator|::
name|WidgetMapper
argument_list|(
name|widget
argument_list|,
name|section
argument_list|,
name|d
operator|->
name|indexAt
argument_list|(
name|section
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|->
name|installEventFilter
argument_list|(
name|d
operator|->
name|delegate
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.3    Essentially the same as addMapping(), but adds the possibility to specify   the property to use specifying \a propertyName.    \sa addMapping() */
end_comment
begin_function
DECL|function|addMapping
name|void
name|QDataWidgetMapper
operator|::
name|addMapping
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|section
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|propertyName
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
name|removeMapping
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|d
operator|->
name|widgetMap
operator|.
name|append
argument_list|(
name|QDataWidgetMapperPrivate
operator|::
name|WidgetMapper
argument_list|(
name|widget
argument_list|,
name|section
argument_list|,
name|d
operator|->
name|indexAt
argument_list|(
name|section
argument_list|)
argument_list|,
name|propertyName
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|->
name|installEventFilter
argument_list|(
name|d
operator|->
name|delegate
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes the mapping for the given \a widget.      \sa addMapping(), clearMapping()  */
end_comment
begin_function
DECL|function|removeMapping
name|void
name|QDataWidgetMapper
operator|::
name|removeMapping
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|d
operator|->
name|findWidget
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
return|return;
name|d
operator|->
name|widgetMap
operator|.
name|removeAt
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|widget
operator|->
name|removeEventFilter
argument_list|(
name|d
operator|->
name|delegate
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the section the \a widget is mapped to or -1     if the widget is not mapped.      \sa addMapping(), removeMapping()  */
end_comment
begin_function
DECL|function|mappedSection
name|int
name|QDataWidgetMapper
operator|::
name|mappedSection
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|d
operator|->
name|findWidget
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|d
operator|->
name|widgetMap
operator|.
name|at
argument_list|(
name|idx
argument_list|)
operator|.
name|section
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.3   Returns the name of the property that is used when mapping   data to the given \a widget.    \sa mappedSection(), addMapping(), removeMapping() */
end_comment
begin_function
DECL|function|mappedPropertyName
name|QByteArray
name|QDataWidgetMapper
operator|::
name|mappedPropertyName
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|d
operator|->
name|findWidget
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
return|return
name|QByteArray
argument_list|()
return|;
specifier|const
name|QDataWidgetMapperPrivate
operator|::
name|WidgetMapper
modifier|&
name|m
init|=
name|d
operator|->
name|widgetMap
operator|.
name|at
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|property
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|m
operator|.
name|widget
operator|->
name|metaObject
argument_list|()
operator|->
name|userProperty
argument_list|()
operator|.
name|name
argument_list|()
return|;
else|else
return|return
name|m
operator|.
name|property
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the widget that is mapped at \a section, or     0 if no widget is mapped at that section.      \sa addMapping(), removeMapping()  */
end_comment
begin_function
DECL|function|mappedWidgetAt
name|QWidget
modifier|*
name|QDataWidgetMapper
operator|::
name|mappedWidgetAt
parameter_list|(
name|int
name|section
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|widgetMap
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|widgetMap
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
operator|==
name|section
condition|)
return|return
name|d
operator|->
name|widgetMap
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|widget
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Repopulates all widgets with the current data of the model.     All unsubmitted changes will be lost.      \sa submit(), setSubmitPolicy()  */
end_comment
begin_function
DECL|function|revert
name|void
name|QDataWidgetMapper
operator|::
name|revert
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
name|d
operator|->
name|populate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Submits all changes from the mapped widgets to the model.      For every mapped section, the item delegate reads the current     value from the widget and sets it in the model. Finally, the     model's \l {QAbstractItemModel::}{submit()} method is invoked.      Returns true if all the values were submitted, otherwise false.      Note: For database models, QSqlQueryModel::lastError() can be     used to retrieve the last error.      \sa revert(), setSubmitPolicy()  */
end_comment
begin_function
DECL|function|submit
name|bool
name|QDataWidgetMapper
operator|::
name|submit
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|widgetMap
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QDataWidgetMapperPrivate
operator|::
name|WidgetMapper
modifier|&
name|m
init|=
name|d
operator|->
name|widgetMap
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|commit
argument_list|(
name|m
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
name|d
operator|->
name|model
operator|->
name|submit
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Populates the widgets with data from the first row of the model     if the orientation is horizontal (the default), otherwise     with data from the first column.      This is equivalent to calling \c setCurrentIndex(0).      \sa toLast(), setCurrentIndex()  */
end_comment
begin_function
DECL|function|toFirst
name|void
name|QDataWidgetMapper
operator|::
name|toFirst
parameter_list|()
block|{
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Populates the widgets with data from the last row of the model     if the orientation is horizontal (the default), otherwise     with data from the last column.      Calls setCurrentIndex() internally.      \sa toFirst(), setCurrentIndex()  */
end_comment
begin_function
DECL|function|toLast
name|void
name|QDataWidgetMapper
operator|::
name|toLast
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|itemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Populates the widgets with data from the next row of the model     if the orientation is horizontal (the default), otherwise     with data from the next column.      Calls setCurrentIndex() internally. Does nothing if there is     no next row in the model.      \sa toPrevious(), setCurrentIndex()  */
end_comment
begin_function
DECL|function|toNext
name|void
name|QDataWidgetMapper
operator|::
name|toNext
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|currentIdx
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Populates the widgets with data from the previous row of the model     if the orientation is horizontal (the default), otherwise     with data from the previous column.      Calls setCurrentIndex() internally. Does nothing if there is     no previous row in the model.      \sa toNext(), setCurrentIndex()  */
end_comment
begin_function
DECL|function|toPrevious
name|void
name|QDataWidgetMapper
operator|::
name|toPrevious
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|currentIdx
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QDataWidgetMapper::currentIndex     \brief the current row or column      The widgets are populated with with data from the row at \a index     if the orientation is horizontal (the default), otherwise with     data from the column at \a index.      \sa setCurrentModelIndex(), toFirst(), toNext(), toPrevious(), toLast() */
end_comment
begin_function
DECL|function|setCurrentIndex
name|void
name|QDataWidgetMapper
operator|::
name|setCurrentIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|d
operator|->
name|itemCount
argument_list|()
condition|)
return|return;
name|d
operator|->
name|currentTopLeft
operator|=
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|rootIndex
argument_list|)
else|:
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|index
argument_list|,
name|d
operator|->
name|rootIndex
argument_list|)
expr_stmt|;
name|d
operator|->
name|populate
argument_list|()
expr_stmt|;
emit|emit
name|currentIndexChanged
argument_list|(
name|index
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|currentIndex
name|int
name|QDataWidgetMapper
operator|::
name|currentIndex
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|currentIdx
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the current index to the row of the \a index if the     orientation is horizontal (the default), otherwise to the     column of the \a index.      Calls setCurrentIndex() internally. This convenience slot can be     connected to the signal \l     {QItemSelectionModel::}{currentRowChanged()} or \l     {QItemSelectionModel::}{currentColumnChanged()} of another view's     \l {QItemSelectionModel}{selection model}.      The following example illustrates how to update all widgets     with new data whenever the selection of a QTableView named     \c myTableView changes:      \snippet doc/src/snippets/code/src_gui_itemviews_qdatawidgetmapper.cpp 2      \sa currentIndex() */
end_comment
begin_function
DECL|function|setCurrentModelIndex
name|void
name|QDataWidgetMapper
operator|::
name|setCurrentModelIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
name|index
operator|.
name|model
argument_list|()
operator|!=
name|d
operator|->
name|model
operator|||
name|index
operator|.
name|parent
argument_list|()
operator|!=
name|d
operator|->
name|rootIndex
condition|)
return|return;
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|index
operator|.
name|row
argument_list|()
else|:
name|index
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Clears all mappings.      \sa addMapping(), removeMapping()  */
end_comment
begin_function
DECL|function|clearMapping
name|void
name|QDataWidgetMapper
operator|::
name|clearMapping
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|d
operator|->
name|widgetMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|d
operator|->
name|widgetMap
operator|.
name|takeLast
argument_list|()
operator|.
name|widget
decl_stmt|;
if|if
condition|(
name|w
condition|)
name|w
operator|->
name|removeEventFilter
argument_list|(
name|d
operator|->
name|delegate
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QDataWidgetMapper::orientation     \brief the orientation of the model      If the orientation is Qt::Horizontal (the default), a widget is     mapped to a column of a data model. The widget will be populated     with the model's data from its mapped column and the row that     currentIndex() points at.      Use Qt::Horizontal for tabular data that looks like this:      \table     \row \o 1 \o Qt Norway       \o Oslo     \row \o 2 \o Qt Australia    \o Brisbane     \row \o 3 \o Qt USA          \o Silicon Valley     \row \o 4 \o Qt China        \o Beijing     \row \o 5 \o Qt Germany      \o Berlin     \endtable      If the orientation is set to Qt::Vertical, a widget is mapped to     a row. Calling setCurrentIndex() will change the current column.     The widget will be populates with the model's data from its     mapped row and the column that currentIndex() points at.      Use Qt::Vertical for tabular data that looks like this:      \table     \row \o 1 \o 2 \o 3 \o 4 \o 5     \row \o Qt Norway \o Qt Australia \o Qt USA \o Qt China \o Qt Germany     \row \o Oslo \o Brisbane \o Silicon Valley \o Beijing \i Berlin     \endtable      Changing the orientation clears all existing mappings. */
end_comment
begin_function
DECL|function|setOrientation
name|void
name|QDataWidgetMapper
operator|::
name|setOrientation
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|orientation
operator|==
name|orientation
condition|)
return|return;
name|clearMapping
argument_list|()
expr_stmt|;
name|d
operator|->
name|orientation
operator|=
name|orientation
expr_stmt|;
block|}
end_function
begin_function
DECL|function|orientation
name|Qt
operator|::
name|Orientation
name|QDataWidgetMapper
operator|::
name|orientation
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|orientation
return|;
block|}
end_function
begin_comment
comment|/*!     \property QDataWidgetMapper::submitPolicy     \brief the current submit policy      Changing the current submit policy will revert all widgets     to the current data from the model. */
end_comment
begin_function
DECL|function|setSubmitPolicy
name|void
name|QDataWidgetMapper
operator|::
name|setSubmitPolicy
parameter_list|(
name|SubmitPolicy
name|policy
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|policy
operator|==
name|d
operator|->
name|submitPolicy
condition|)
return|return;
name|revert
argument_list|()
expr_stmt|;
name|d
operator|->
name|submitPolicy
operator|=
name|policy
expr_stmt|;
block|}
end_function
begin_function
DECL|function|submitPolicy
name|QDataWidgetMapper
operator|::
name|SubmitPolicy
name|QDataWidgetMapper
operator|::
name|submitPolicy
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDataWidgetMapper
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|submitPolicy
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qdatawidgetmapper.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATAWIDGETMAPPER
end_comment
end_unit
