begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qlistview.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LISTVIEW
end_ifndef
begin_include
include|#
directive|include
file|<qabstractitemdelegate.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qbitmap.h>
end_include
begin_include
include|#
directive|include
file|<qdrag.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qscrollbar.h>
end_include
begin_include
include|#
directive|include
file|<qrubberband.h>
end_include
begin_include
include|#
directive|include
file|<private/qlistview_p.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|<qaccessible.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QListView      \brief The QListView class provides a list or icon view onto a model.      \ingroup model-view     \ingroup advanced     \inmodule QtWidgets      A QListView presents items stored in a model, either as a simple     non-hierarchical list, or as a collection of icons. This class is used     to provide lists and icon views that were previously provided by the     \c QListBox and \c QIconView classes, but using the more flexible     approach provided by Qt's model/view architecture.      The QListView class is one of the \l{Model/View Classes}     and is part of Qt's \l{Model/View Programming}{model/view framework}.      This view does not display horizontal or vertical headers; to display     a list of items with a horizontal header, use QTreeView instead.      QListView implements the interfaces defined by the     QAbstractItemView class to allow it to display data provided by     models derived from the QAbstractItemModel class.      Items in a list view can be displayed using one of two view modes:     In \l ListMode, the items are displayed in the form of a simple list;     in \l IconMode, the list view takes the form of an \e{icon view} in     which the items are displayed with icons like files in a file manager.     By default, the list view is in \l ListMode. To change the view mode,     use the setViewMode() function, and to determine the current view mode,     use viewMode().      Items in these views are laid out in the direction specified by the     flow() of the list view. The items may be fixed in place, or allowed     to move, depending on the view's movement() state.      If the items in the model cannot be completely laid out in the     direction of flow, they can be wrapped at the boundary of the view     widget; this depends on isWrapping(). This property is useful when the     items are being represented by an icon view.      The resizeMode() and layoutMode() govern how and when the items are     laid out. Items are spaced according to their spacing(), and can exist     within a notional grid of size specified by gridSize(). The items can     be rendered as large or small icons depending on their iconSize().      \table 100%     \row \li \inlineimage windowsxp-listview.png Screenshot of a Windows XP style list view          \li \inlineimage macintosh-listview.png Screenshot of a Macintosh style table view          \li \inlineimage plastique-listview.png Screenshot of a Plastique style table view     \row \li A \l{Windows XP Style Widget Gallery}{Windows XP style} list view.          \li A \l{Macintosh Style Widget Gallery}{Macintosh style} list view.          \li A \l{Plastique Style Widget Gallery}{Plastique style} list view.     \endtable      \section1 Improving Performance      It is possible to give the view hints about the data it is handling in order     to improve its performance when displaying large numbers of items. One approach     that can be taken for views that are intended to display items with equal sizes     is to set the \l uniformItemSizes property to true.      \sa {View Classes}, QTreeView, QTableView, QListWidget */
end_comment
begin_comment
comment|/*!     \enum QListView::ViewMode      \value ListMode The items are laid out using TopToBottom flow, with Small size and Static movement     \value IconMode The items are laid out using LeftToRight flow, with Large size and Free movement */
end_comment
begin_comment
comment|/*!   \enum QListView::Movement    \value Static The items cannot be moved by the user.   \value Free The items can be moved freely by the user.   \value Snap The items snap to the specified grid when moved; see   setGridSize(). */
end_comment
begin_comment
comment|/*!   \enum QListView::Flow    \value LeftToRight The items are laid out in the view from the left   to the right.   \value TopToBottom The items are laid out in the view from the top   to the bottom. */
end_comment
begin_comment
comment|/*!   \enum QListView::ResizeMode    \value Fixed The items will only be laid out the first time the view is shown.   \value Adjust The items will be laid out every time the view is resized. */
end_comment
begin_comment
comment|/*!   \enum QListView::LayoutMode    \value SinglePass The items are laid out all at once.   \value Batched The items are laid out in batches of \l batchSize items.   \sa batchSize */
end_comment
begin_comment
comment|/*!   \since 4.2   \fn void QListView::indexesMoved(const QModelIndexList&indexes)    This signal is emitted when the specified \a indexes are moved in the view. */
end_comment
begin_comment
comment|/*!     Creates a new QListView with the given \a parent to view a model.     Use setModel() to set the model. */
end_comment
begin_constructor
DECL|function|QListView
name|QListView
operator|::
name|QListView
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemView
argument_list|(
operator|*
operator|new
name|QListViewPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|setViewMode
argument_list|(
name|ListMode
argument_list|)
expr_stmt|;
name|setSelectionMode
argument_list|(
name|SingleSelection
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_MacShowFocusRect
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
comment|// We rely on a qobject_cast for PM_DefaultFrameWidth to change
name|d
operator|->
name|updateStyledFrameWidths
argument_list|()
expr_stmt|;
comment|// hence we have to force an update now that the object has been constructed
block|}
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_constructor
DECL|function|QListView
name|QListView
operator|::
name|QListView
parameter_list|(
name|QListViewPrivate
modifier|&
name|dd
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemView
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{
name|setViewMode
argument_list|(
name|ListMode
argument_list|)
expr_stmt|;
name|setSelectionMode
argument_list|(
name|SingleSelection
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_MacShowFocusRect
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
comment|// We rely on a qobject_cast for PM_DefaultFrameWidth to change
name|d
operator|->
name|updateStyledFrameWidths
argument_list|()
expr_stmt|;
comment|// hence we have to force an update now that the object has been constructed
block|}
end_constructor
begin_comment
comment|/*!   Destroys the view. */
end_comment
begin_destructor
DECL|function|~QListView
name|QListView
operator|::
name|~
name|QListView
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \property QListView::movement     \brief whether the items can be moved freely, are snapped to a     grid, or cannot be moved at all.      This property determines how the user can move the items in the     view. \l Static means that the items can't be moved the user. \l     Free means that the user can drag and drop the items to any     position in the view. \l Snap means that the user can drag and     drop the items, but only to the positions in a notional grid     signified by the gridSize property.      Setting this property when the view is visible will cause the     items to be laid out again.      By default, this property is set to \l Static.      \sa gridSize, resizeMode, viewMode */
end_comment
begin_function
DECL|function|setMovement
name|void
name|QListView
operator|::
name|setMovement
parameter_list|(
name|Movement
name|movement
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|modeProperties
operator||=
name|uint
argument_list|(
name|QListViewPrivate
operator|::
name|Movement
argument_list|)
expr_stmt|;
name|d
operator|->
name|movement
operator|=
name|movement
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|bool
name|movable
init|=
operator|(
name|movement
operator|!=
name|Static
operator|)
decl_stmt|;
name|setDragEnabled
argument_list|(
name|movable
argument_list|)
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|setAcceptDrops
argument_list|(
name|movable
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|movement
name|QListView
operator|::
name|Movement
name|QListView
operator|::
name|movement
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|movement
return|;
block|}
end_function
begin_comment
comment|/*!     \property QListView::flow     \brief which direction the items layout should flow.      If this property is \l LeftToRight, the items will be laid out left     to right. If the \l isWrapping property is true, the layout will wrap     when it reaches the right side of the visible area. If this     property is \l TopToBottom, the items will be laid out from the top     of the visible area, wrapping when it reaches the bottom.      Setting this property when the view is visible will cause the     items to be laid out again.      By default, this property is set to \l TopToBottom.      \sa viewMode */
end_comment
begin_function
DECL|function|setFlow
name|void
name|QListView
operator|::
name|setFlow
parameter_list|(
name|Flow
name|flow
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|modeProperties
operator||=
name|uint
argument_list|(
name|QListViewPrivate
operator|::
name|Flow
argument_list|)
expr_stmt|;
name|d
operator|->
name|flow
operator|=
name|flow
expr_stmt|;
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flow
name|QListView
operator|::
name|Flow
name|QListView
operator|::
name|flow
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|flow
return|;
block|}
end_function
begin_comment
comment|/*!     \property QListView::isWrapping     \brief whether the items layout should wrap.      This property holds whether the layout should wrap when there is     no more space in the visible area. The point at which the layout wraps     depends on the \l flow property.      Setting this property when the view is visible will cause the     items to be laid out again.      By default, this property is false.      \sa viewMode */
end_comment
begin_function
DECL|function|setWrapping
name|void
name|QListView
operator|::
name|setWrapping
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|modeProperties
operator||=
name|uint
argument_list|(
name|QListViewPrivate
operator|::
name|Wrap
argument_list|)
expr_stmt|;
name|d
operator|->
name|setWrapping
argument_list|(
name|enable
argument_list|)
expr_stmt|;
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isWrapping
name|bool
name|QListView
operator|::
name|isWrapping
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|isWrapping
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QListView::resizeMode     \brief whether the items are laid out again when the view is resized.      If this property is \l Adjust, the items will be laid out again     when the view is resized. If the value is \l Fixed, the items will     not be laid out when the view is resized.      By default, this property is set to \l Fixed.      \sa movement, gridSize, viewMode */
end_comment
begin_function
DECL|function|setResizeMode
name|void
name|QListView
operator|::
name|setResizeMode
parameter_list|(
name|ResizeMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|modeProperties
operator||=
name|uint
argument_list|(
name|QListViewPrivate
operator|::
name|ResizeMode
argument_list|)
expr_stmt|;
name|d
operator|->
name|resizeMode
operator|=
name|mode
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeMode
name|QListView
operator|::
name|ResizeMode
name|QListView
operator|::
name|resizeMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|resizeMode
return|;
block|}
end_function
begin_comment
comment|/*!     \property QListView::layoutMode     \brief determines whether the layout of items should happen immediately or be delayed.      This property holds the layout mode for the items. When the mode     is \l SinglePass (the default), the items are laid out all in one go.     When the mode is \l Batched, the items are laid out in batches of \l batchSize     items, while processing events. This makes it possible to     instantly view and interact with the visible items while the rest     are being laid out.      \sa viewMode */
end_comment
begin_function
DECL|function|setLayoutMode
name|void
name|QListView
operator|::
name|setLayoutMode
parameter_list|(
name|LayoutMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|layoutMode
operator|=
name|mode
expr_stmt|;
block|}
end_function
begin_function
DECL|function|layoutMode
name|QListView
operator|::
name|LayoutMode
name|QListView
operator|::
name|layoutMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|layoutMode
return|;
block|}
end_function
begin_comment
comment|/*!     \property QListView::spacing     \brief the space around the items in the layout      This property is the size of the empty space that is padded around     an item in the layout.      Setting this property when the view is visible will cause the     items to be laid out again.      By default, this property contains a value of 0.      \sa viewMode */
end_comment
begin_function
DECL|function|setSpacing
name|void
name|QListView
operator|::
name|setSpacing
parameter_list|(
name|int
name|space
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|modeProperties
operator||=
name|uint
argument_list|(
name|QListViewPrivate
operator|::
name|Spacing
argument_list|)
expr_stmt|;
name|d
operator|->
name|setSpacing
argument_list|(
name|space
argument_list|)
expr_stmt|;
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|spacing
name|int
name|QListView
operator|::
name|spacing
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|spacing
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QListView::batchSize     \brief the number of items laid out in each batch if \l layoutMode is     set to \l Batched      The default value is 100.      \since 4.2 */
end_comment
begin_function
DECL|function|setBatchSize
name|void
name|QListView
operator|::
name|setBatchSize
parameter_list|(
name|int
name|batchSize
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchSize
operator|<=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"Invalid batchSize (%d)"
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|batchSize
operator|=
name|batchSize
expr_stmt|;
block|}
end_function
begin_function
DECL|function|batchSize
name|int
name|QListView
operator|::
name|batchSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|batchSize
return|;
block|}
end_function
begin_comment
comment|/*!     \property QListView::gridSize     \brief the size of the layout grid      This property is the size of the grid in which the items are laid     out. The default is an empty size which means that there is no     grid and the layout is not done in a grid. Setting this property     to a non-empty size switches on the grid layout. (When a grid     layout is in force the \l spacing property is ignored.)      Setting this property when the view is visible will cause the     items to be laid out again.      \sa viewMode */
end_comment
begin_function
DECL|function|setGridSize
name|void
name|QListView
operator|::
name|setGridSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|modeProperties
operator||=
name|uint
argument_list|(
name|QListViewPrivate
operator|::
name|GridSize
argument_list|)
expr_stmt|;
name|d
operator|->
name|setGridSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|gridSize
name|QSize
name|QListView
operator|::
name|gridSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|gridSize
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QListView::viewMode     \brief the view mode of the QListView.      This property will change the other unset properties to conform     with the set view mode. QListView-specific properties that have already been set     will not be changed, unless clearPropertyFlags() has been called.      Setting the view mode will enable or disable drag and drop based on the     selected movement. For ListMode, the default movement is \l Static     (drag and drop disabled); for IconMode, the default movement is     \l Free (drag and drop enabled).      \sa isWrapping, spacing, gridSize, flow, movement, resizeMode */
end_comment
begin_function
DECL|function|setViewMode
name|void
name|QListView
operator|::
name|setViewMode
parameter_list|(
name|ViewMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|commonListView
operator|&&
name|d
operator|->
name|viewMode
operator|==
name|mode
condition|)
return|return;
name|d
operator|->
name|viewMode
operator|=
name|mode
expr_stmt|;
operator|delete
name|d
operator|->
name|commonListView
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|ListMode
condition|)
block|{
name|d
operator|->
name|commonListView
operator|=
operator|new
name|QListModeViewBase
argument_list|(
name|this
argument_list|,
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|modeProperties
operator|&
name|QListViewPrivate
operator|::
name|Wrap
operator|)
condition|)
name|d
operator|->
name|setWrapping
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|modeProperties
operator|&
name|QListViewPrivate
operator|::
name|Spacing
operator|)
condition|)
name|d
operator|->
name|setSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|modeProperties
operator|&
name|QListViewPrivate
operator|::
name|GridSize
operator|)
condition|)
name|d
operator|->
name|setGridSize
argument_list|(
name|QSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|modeProperties
operator|&
name|QListViewPrivate
operator|::
name|Flow
operator|)
condition|)
name|d
operator|->
name|flow
operator|=
name|TopToBottom
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|modeProperties
operator|&
name|QListViewPrivate
operator|::
name|Movement
operator|)
condition|)
name|d
operator|->
name|movement
operator|=
name|Static
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|modeProperties
operator|&
name|QListViewPrivate
operator|::
name|ResizeMode
operator|)
condition|)
name|d
operator|->
name|resizeMode
operator|=
name|Fixed
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|modeProperties
operator|&
name|QListViewPrivate
operator|::
name|SelectionRectVisible
operator|)
condition|)
name|d
operator|->
name|showElasticBand
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|commonListView
operator|=
operator|new
name|QIconModeViewBase
argument_list|(
name|this
argument_list|,
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|modeProperties
operator|&
name|QListViewPrivate
operator|::
name|Wrap
operator|)
condition|)
name|d
operator|->
name|setWrapping
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|modeProperties
operator|&
name|QListViewPrivate
operator|::
name|Spacing
operator|)
condition|)
name|d
operator|->
name|setSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|modeProperties
operator|&
name|QListViewPrivate
operator|::
name|GridSize
operator|)
condition|)
name|d
operator|->
name|setGridSize
argument_list|(
name|QSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|modeProperties
operator|&
name|QListViewPrivate
operator|::
name|Flow
operator|)
condition|)
name|d
operator|->
name|flow
operator|=
name|LeftToRight
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|modeProperties
operator|&
name|QListViewPrivate
operator|::
name|Movement
operator|)
condition|)
name|d
operator|->
name|movement
operator|=
name|Free
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|modeProperties
operator|&
name|QListViewPrivate
operator|::
name|ResizeMode
operator|)
condition|)
name|d
operator|->
name|resizeMode
operator|=
name|Fixed
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|modeProperties
operator|&
name|QListViewPrivate
operator|::
name|SelectionRectVisible
operator|)
condition|)
name|d
operator|->
name|showElasticBand
operator|=
literal|true
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|bool
name|movable
init|=
operator|(
name|d
operator|->
name|movement
operator|!=
name|Static
operator|)
decl_stmt|;
name|setDragEnabled
argument_list|(
name|movable
argument_list|)
expr_stmt|;
name|setAcceptDrops
argument_list|(
name|movable
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|viewMode
name|QListView
operator|::
name|ViewMode
name|QListView
operator|::
name|viewMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|viewMode
return|;
block|}
end_function
begin_comment
comment|/*!     Clears the QListView-specific property flags. See \l{viewMode}.      Properties inherited from QAbstractItemView are not covered by the     property flags. Specifically, \l{QAbstractItemView::dragEnabled}     {dragEnabled} and \l{QAbstractItemView::acceptDrops}     {acceptsDrops} are computed by QListView when calling     setMovement() or setViewMode(). */
end_comment
begin_function
DECL|function|clearPropertyFlags
name|void
name|QListView
operator|::
name|clearPropertyFlags
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|modeProperties
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the \a row is hidden; otherwise returns false. */
end_comment
begin_function
DECL|function|isRowHidden
name|bool
name|QListView
operator|::
name|isRowHidden
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|isHidden
argument_list|(
name|row
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     If \a hide is true, the given \a row will be hidden; otherwise     the \a row will be shown. */
end_comment
begin_function
DECL|function|setRowHidden
name|void
name|QListView
operator|::
name|setRowHidden
parameter_list|(
name|int
name|row
parameter_list|,
name|bool
name|hide
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|hidden
init|=
name|d
operator|->
name|isHidden
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|hide
operator|&&
operator|!
name|hidden
condition|)
name|d
operator|->
name|commonListView
operator|->
name|appendHiddenRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|hide
operator|&&
name|hidden
condition|)
name|d
operator|->
name|commonListView
operator|->
name|removeHiddenRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|visualRect
name|QRect
name|QListView
operator|::
name|visualRect
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|mapToViewport
argument_list|(
name|rectForIndex
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|scrollTo
name|void
name|QListView
operator|::
name|scrollTo
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|ScrollHint
name|hint
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|parent
argument_list|()
operator|!=
name|d
operator|->
name|root
operator|||
name|index
operator|.
name|column
argument_list|()
operator|!=
name|d
operator|->
name|column
condition|)
return|return;
specifier|const
name|QRect
name|rect
init|=
name|visualRect
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|hint
operator|==
name|EnsureVisible
operator|&&
name|d
operator|->
name|viewport
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|rect
argument_list|)
condition|)
block|{
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|(
name|rect
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|flow
operator|==
name|QListView
operator|::
name|TopToBottom
operator|||
name|d
operator|->
name|isWrapping
argument_list|()
condition|)
comment|// vertical
name|verticalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|d
operator|->
name|verticalScrollToValue
argument_list|(
name|index
argument_list|,
name|rect
argument_list|,
name|hint
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
operator|||
name|d
operator|->
name|isWrapping
argument_list|()
condition|)
comment|// horizontal
name|horizontalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|d
operator|->
name|horizontalScrollToValue
argument_list|(
name|index
argument_list|,
name|rect
argument_list|,
name|hint
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|horizontalScrollToValue
name|int
name|QListViewPrivate
operator|::
name|horizontalScrollToValue
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|QListView
operator|::
name|ScrollHint
name|hint
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|area
init|=
name|viewport
operator|->
name|rect
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|leftOf
init|=
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|?
operator|(
name|rect
operator|.
name|left
argument_list|()
operator|<
name|area
operator|.
name|left
argument_list|()
operator|)
operator|&&
operator|(
name|rect
operator|.
name|right
argument_list|()
operator|<
name|area
operator|.
name|right
argument_list|()
operator|)
else|:
name|rect
operator|.
name|left
argument_list|()
operator|<
name|area
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|rightOf
init|=
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|?
name|rect
operator|.
name|right
argument_list|()
operator|>
name|area
operator|.
name|right
argument_list|()
else|:
operator|(
name|rect
operator|.
name|right
argument_list|()
operator|>
name|area
operator|.
name|right
argument_list|()
operator|)
operator|&&
operator|(
name|rect
operator|.
name|left
argument_list|()
operator|>
name|area
operator|.
name|left
argument_list|()
operator|)
decl_stmt|;
return|return
name|commonListView
operator|->
name|horizontalScrollToValue
argument_list|(
name|q
operator|->
name|visualIndex
argument_list|(
name|index
argument_list|)
argument_list|,
name|hint
argument_list|,
name|leftOf
argument_list|,
name|rightOf
argument_list|,
name|area
argument_list|,
name|rect
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|verticalScrollToValue
name|int
name|QListViewPrivate
operator|::
name|verticalScrollToValue
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|QListView
operator|::
name|ScrollHint
name|hint
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|area
init|=
name|viewport
operator|->
name|rect
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|above
init|=
operator|(
name|hint
operator|==
name|QListView
operator|::
name|EnsureVisible
operator|&&
name|rect
operator|.
name|top
argument_list|()
operator|<
name|area
operator|.
name|top
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|bool
name|below
init|=
operator|(
name|hint
operator|==
name|QListView
operator|::
name|EnsureVisible
operator|&&
name|rect
operator|.
name|bottom
argument_list|()
operator|>
name|area
operator|.
name|bottom
argument_list|()
operator|)
decl_stmt|;
return|return
name|commonListView
operator|->
name|verticalScrollToValue
argument_list|(
name|q
operator|->
name|visualIndex
argument_list|(
name|index
argument_list|)
argument_list|,
name|hint
argument_list|,
name|above
argument_list|,
name|below
argument_list|,
name|area
argument_list|,
name|rect
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|selectAll
name|void
name|QListViewPrivate
operator|::
name|selectAll
parameter_list|(
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|command
parameter_list|)
block|{
if|if
condition|(
operator|!
name|selectionModel
condition|)
return|return;
name|QItemSelection
name|selection
decl_stmt|;
name|QModelIndex
name|topLeft
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|colCount
init|=
name|model
operator|->
name|columnCount
argument_list|(
name|root
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|row
operator|<
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
if|if
condition|(
name|isHidden
argument_list|(
name|row
argument_list|)
condition|)
block|{
comment|//it might be the end of a selection range
if|if
condition|(
name|topLeft
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QModelIndex
name|bottomRight
init|=
name|model
operator|->
name|index
argument_list|(
name|row
operator|-
literal|1
argument_list|,
name|colCount
operator|-
literal|1
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|selection
operator|.
name|append
argument_list|(
name|QItemSelectionRange
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|)
argument_list|)
expr_stmt|;
name|topLeft
operator|=
name|QModelIndex
argument_list|()
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
operator|!
name|topLeft
operator|.
name|isValid
argument_list|()
condition|)
comment|//start of a new selection range
name|topLeft
operator|=
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|topLeft
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|//last selected range
name|QModelIndex
name|bottomRight
init|=
name|model
operator|->
name|index
argument_list|(
name|row
operator|-
literal|1
argument_list|,
name|colCount
operator|-
literal|1
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|selection
operator|.
name|append
argument_list|(
name|QItemSelectionRange
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|selection
operator|.
name|isEmpty
argument_list|()
condition|)
name|selectionModel
operator|->
name|select
argument_list|(
name|selection
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp    We have a QListView way of knowing what elements are on the viewport   through the intersectingSet function */
end_comment
begin_function
DECL|function|draggablePaintPairs
name|QItemViewPaintPairs
name|QListViewPrivate
operator|::
name|draggablePaintPairs
parameter_list|(
specifier|const
name|QModelIndexList
modifier|&
name|indexes
parameter_list|,
name|QRect
modifier|*
name|r
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|Q_Q
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
name|QRect
modifier|&
name|rect
init|=
operator|*
name|r
decl_stmt|;
specifier|const
name|QRect
name|viewportRect
init|=
name|viewport
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QItemViewPaintPairs
name|ret
decl_stmt|;
specifier|const
name|QSet
argument_list|<
name|QModelIndex
argument_list|>
name|visibleIndexes
init|=
name|intersectingSet
argument_list|(
name|viewportRect
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QModelIndex
modifier|&
name|index
init|=
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|visibleIndexes
operator|.
name|contains
argument_list|(
name|index
argument_list|)
condition|)
block|{
specifier|const
name|QRect
name|current
init|=
name|q
operator|->
name|visualRect
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|ret
operator|+=
name|qMakePair
argument_list|(
name|current
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|rect
operator||=
name|current
expr_stmt|;
block|}
block|}
name|rect
operator|&=
name|viewportRect
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|reset
name|void
name|QListView
operator|::
name|reset
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|hiddenRows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QAbstractItemView
operator|::
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|setRootIndex
name|void
name|QListView
operator|::
name|setRootIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|column
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|column
argument_list|,
name|d
operator|->
name|model
operator|->
name|columnCount
argument_list|(
name|index
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QAbstractItemView
operator|::
name|setRootIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// sometimes we get an update before reset() is called
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|hiddenRows
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Scroll the view contents by \a dx and \a dy. */
end_comment
begin_function
DECL|function|scrollContentsBy
name|void
name|QListView
operator|::
name|scrollContentsBy
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|delayedAutoScroll
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// auto scroll was canceled by the user scrolling
name|d
operator|->
name|commonListView
operator|->
name|scrollContentsBy
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|,
name|d
operator|->
name|state
operator|==
name|QListView
operator|::
name|DragSelectingState
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Resize the internal contents to \a width and \a height and set the     scroll bar ranges accordingly. */
end_comment
begin_function
DECL|function|resizeContents
name|void
name|QListView
operator|::
name|resizeContents
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|setContentsSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|contentsSize
name|QSize
name|QListView
operator|::
name|contentsSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|contentsSize
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|dataChanged
name|void
name|QListView
operator|::
name|dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|roles
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|commonListView
operator|->
name|dataChanged
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|)
expr_stmt|;
name|QAbstractItemView
operator|::
name|dataChanged
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|,
name|roles
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|rowsInserted
name|void
name|QListView
operator|::
name|rowsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
comment|// ### be smarter about inserted items
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
name|QAbstractItemView
operator|::
name|rowsInserted
argument_list|(
name|parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|rowsAboutToBeRemoved
name|void
name|QListView
operator|::
name|rowsAboutToBeRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
comment|// if the parent is above d->root in the tree, nothing will happen
name|QAbstractItemView
operator|::
name|rowsAboutToBeRemoved
argument_list|(
name|parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|==
name|d
operator|->
name|root
condition|)
block|{
name|QSet
argument_list|<
name|QPersistentModelIndex
argument_list|>
operator|::
name|iterator
name|it
init|=
name|d
operator|->
name|hiddenRows
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|hiddenRows
operator|.
name|end
argument_list|()
condition|)
block|{
name|int
name|hiddenRow
init|=
name|it
operator|->
name|row
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiddenRow
operator|>=
name|start
operator|&&
name|hiddenRow
operator|<=
name|end
condition|)
block|{
name|it
operator|=
name|d
operator|->
name|hiddenRows
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mouseMoveEvent
name|void
name|QListView
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isVisible
argument_list|()
condition|)
return|return;
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|QAbstractItemView
operator|::
name|mouseMoveEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|==
name|DragSelectingState
operator|&&
name|d
operator|->
name|showElasticBand
operator|&&
name|d
operator|->
name|selectionMode
operator|!=
name|SingleSelection
operator|&&
name|d
operator|->
name|selectionMode
operator|!=
name|NoSelection
condition|)
block|{
name|QRect
name|rect
argument_list|(
name|d
operator|->
name|pressedPosition
argument_list|,
name|e
operator|->
name|pos
argument_list|()
operator|+
name|QPoint
argument_list|(
name|horizontalOffset
argument_list|()
argument_list|,
name|verticalOffset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|rect
operator|=
name|rect
operator|.
name|normalized
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|(
name|d
operator|->
name|mapToViewport
argument_list|(
name|rect
operator|.
name|united
argument_list|(
name|d
operator|->
name|elasticBand
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|elasticBand
operator|=
name|rect
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QListView
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|QAbstractItemView
operator|::
name|mouseReleaseEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// #### move this implementation into a dynamic class
if|if
condition|(
name|d
operator|->
name|showElasticBand
operator|&&
name|d
operator|->
name|elasticBand
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|(
name|d
operator|->
name|mapToViewport
argument_list|(
name|d
operator|->
name|elasticBand
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|elasticBand
operator|=
name|QRect
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|timerEvent
name|void
name|QListView
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|batchLayoutTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|doItemsLayout
argument_list|(
name|d
operator|->
name|batchSize
argument_list|)
condition|)
block|{
comment|// layout is done
name|d
operator|->
name|batchLayoutTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|updateGeometries
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
name|QAbstractItemView
operator|::
name|timerEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QListView
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|delayedPendingLayout
condition|)
return|return;
name|QSize
name|delta
init|=
name|e
operator|->
name|size
argument_list|()
operator|-
name|e
operator|->
name|oldSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|delta
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|bool
name|listWrap
init|=
operator|(
name|d
operator|->
name|viewMode
operator|==
name|ListMode
operator|)
operator|&&
name|d
operator|->
name|wrapItemText
decl_stmt|;
name|bool
name|flowDimensionChanged
init|=
operator|(
name|d
operator|->
name|flow
operator|==
name|LeftToRight
operator|&&
name|delta
operator|.
name|width
argument_list|()
operator|!=
literal|0
operator|)
operator|||
operator|(
name|d
operator|->
name|flow
operator|==
name|TopToBottom
operator|&&
name|delta
operator|.
name|height
argument_list|()
operator|!=
literal|0
operator|)
decl_stmt|;
comment|// We post a delayed relayout in the following cases :
comment|// - we're wrapping
comment|// - the state is NoState, we're adjusting and the size has changed in the flowing direction
if|if
condition|(
name|listWrap
operator|||
operator|(
name|state
argument_list|()
operator|==
name|NoState
operator|&&
name|d
operator|->
name|resizeMode
operator|==
name|Adjust
operator|&&
name|flowDimensionChanged
operator|)
condition|)
block|{
name|d
operator|->
name|doDelayedItemsLayout
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// wait 1/10 sec before starting the layout
block|}
else|else
block|{
name|QAbstractItemView
operator|::
name|resizeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|dragMoveEvent
name|void
name|QListView
operator|::
name|dragMoveEvent
parameter_list|(
name|QDragMoveEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|commonListView
operator|->
name|filterDragMoveEvent
argument_list|(
name|e
argument_list|)
condition|)
block|{
if|if
condition|(
name|viewMode
argument_list|()
operator|==
name|QListView
operator|::
name|ListMode
operator|&&
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
cast|static_cast
argument_list|<
name|QListModeViewBase
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|commonListView
argument_list|)
operator|->
name|dragMoveEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
else|else
name|QAbstractItemView
operator|::
name|dragMoveEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|dragLeaveEvent
name|void
name|QListView
operator|::
name|dragLeaveEvent
parameter_list|(
name|QDragLeaveEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d_func
argument_list|()
operator|->
name|commonListView
operator|->
name|filterDragLeaveEvent
argument_list|(
name|e
argument_list|)
condition|)
name|QAbstractItemView
operator|::
name|dragLeaveEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|dropEvent
name|void
name|QListView
operator|::
name|dropEvent
parameter_list|(
name|QDropEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d_func
argument_list|()
operator|->
name|commonListView
operator|->
name|filterDropEvent
argument_list|(
name|e
argument_list|)
condition|)
name|QAbstractItemView
operator|::
name|dropEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|startDrag
name|void
name|QListView
operator|::
name|startDrag
parameter_list|(
name|Qt
operator|::
name|DropActions
name|supportedActions
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d_func
argument_list|()
operator|->
name|commonListView
operator|->
name|filterStartDrag
argument_list|(
name|supportedActions
argument_list|)
condition|)
name|QAbstractItemView
operator|::
name|startDrag
argument_list|(
name|supportedActions
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|viewOptions
name|QStyleOptionViewItem
name|QListView
operator|::
name|viewOptions
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
name|QStyleOptionViewItem
name|option
init|=
name|QAbstractItemView
operator|::
name|viewOptions
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|iconSize
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// otherwise it was already set in abstractitemview
name|int
name|pm
init|=
operator|(
name|d
operator|->
name|viewMode
operator|==
name|ListMode
condition|?
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ListViewIconSize
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
else|:
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_IconViewIconSize
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
operator|)
decl_stmt|;
name|option
operator|.
name|decorationSize
operator|=
name|QSize
argument_list|(
name|pm
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|viewMode
operator|==
name|IconMode
condition|)
block|{
name|option
operator|.
name|showDecorationSelected
operator|=
literal|false
expr_stmt|;
name|option
operator|.
name|decorationPosition
operator|=
name|QStyleOptionViewItem
operator|::
name|Top
expr_stmt|;
name|option
operator|.
name|displayAlignment
operator|=
name|Qt
operator|::
name|AlignCenter
expr_stmt|;
block|}
else|else
block|{
name|option
operator|.
name|decorationPosition
operator|=
name|QStyleOptionViewItem
operator|::
name|Left
expr_stmt|;
block|}
return|return
name|option
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QListView
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|itemDelegate
condition|)
return|return;
name|QStyleOptionViewItemV4
name|option
init|=
name|d
operator|->
name|viewOptionsV4
argument_list|()
decl_stmt|;
name|QPainter
name|painter
argument_list|(
name|d
operator|->
name|viewport
argument_list|)
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|toBeRendered
init|=
name|d
operator|->
name|intersectingSet
argument_list|(
name|e
operator|->
name|rect
argument_list|()
operator|.
name|translated
argument_list|(
name|horizontalOffset
argument_list|()
argument_list|,
name|verticalOffset
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|const
name|QModelIndex
name|current
init|=
name|currentIndex
argument_list|()
decl_stmt|;
specifier|const
name|QModelIndex
name|hover
init|=
name|d
operator|->
name|hover
decl_stmt|;
specifier|const
name|QAbstractItemModel
modifier|*
name|itemModel
init|=
name|d
operator|->
name|model
decl_stmt|;
specifier|const
name|QItemSelectionModel
modifier|*
name|selections
init|=
name|d
operator|->
name|selectionModel
decl_stmt|;
specifier|const
name|bool
name|focus
init|=
operator|(
name|hasFocus
argument_list|()
operator|||
name|d
operator|->
name|viewport
operator|->
name|hasFocus
argument_list|()
operator|)
operator|&&
name|current
operator|.
name|isValid
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|alternate
init|=
name|d
operator|->
name|alternatingColors
decl_stmt|;
specifier|const
name|QStyle
operator|::
name|State
name|state
init|=
name|option
operator|.
name|state
decl_stmt|;
specifier|const
name|QAbstractItemView
operator|::
name|State
name|viewState
init|=
name|this
operator|->
name|state
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|enabled
init|=
operator|(
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
operator|!=
literal|0
decl_stmt|;
name|bool
name|alternateBase
init|=
literal|false
decl_stmt|;
name|int
name|previousRow
init|=
operator|-
literal|2
decl_stmt|;
comment|// trigger the alternateBase adjustment on first pass
name|int
name|maxSize
init|=
operator|(
name|flow
argument_list|()
operator|==
name|TopToBottom
operator|)
condition|?
name|qMax
argument_list|(
name|viewport
argument_list|()
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|contentsSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
operator|-
literal|2
operator|*
name|d
operator|->
name|spacing
argument_list|()
else|:
name|qMax
argument_list|(
name|viewport
argument_list|()
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|d
operator|->
name|contentsSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
operator|-
literal|2
operator|*
name|d
operator|->
name|spacing
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
operator|::
name|const_iterator
name|end
init|=
name|toBeRendered
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|toBeRendered
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|Q_ASSERT
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|option
operator|.
name|rect
operator|=
name|visualRect
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
if|if
condition|(
name|flow
argument_list|()
operator|==
name|TopToBottom
condition|)
name|option
operator|.
name|rect
operator|.
name|setWidth
argument_list|(
name|qMin
argument_list|(
name|maxSize
argument_list|,
name|option
operator|.
name|rect
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|option
operator|.
name|rect
operator|.
name|setHeight
argument_list|(
name|qMin
argument_list|(
name|maxSize
argument_list|,
name|option
operator|.
name|rect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|state
operator|=
name|state
expr_stmt|;
if|if
condition|(
name|selections
operator|&&
name|selections
operator|->
name|isSelected
argument_list|(
operator|*
name|it
argument_list|)
condition|)
name|option
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
name|QPalette
operator|::
name|ColorGroup
name|cg
decl_stmt|;
if|if
condition|(
operator|(
name|itemModel
operator|->
name|flags
argument_list|(
operator|*
name|it
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsEnabled
operator|)
operator|==
literal|0
condition|)
block|{
name|option
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
name|cg
operator|=
name|QPalette
operator|::
name|Disabled
expr_stmt|;
block|}
else|else
block|{
name|cg
operator|=
name|QPalette
operator|::
name|Normal
expr_stmt|;
block|}
name|option
operator|.
name|palette
operator|.
name|setCurrentColorGroup
argument_list|(
name|cg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|focus
operator|&&
name|current
operator|==
operator|*
name|it
condition|)
block|{
name|option
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_HasFocus
expr_stmt|;
if|if
condition|(
name|viewState
operator|==
name|EditingState
condition|)
name|option
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Editing
expr_stmt|;
block|}
if|if
condition|(
operator|*
name|it
operator|==
name|hover
condition|)
name|option
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
else|else
name|option
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
if|if
condition|(
name|alternate
condition|)
block|{
name|int
name|row
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|row
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|!=
name|previousRow
operator|+
literal|1
condition|)
block|{
comment|// adjust alternateBase according to rows in the "gap"
if|if
condition|(
operator|!
name|d
operator|->
name|hiddenRows
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
name|qMax
argument_list|(
name|previousRow
operator|+
literal|1
argument_list|,
literal|0
argument_list|)
init|;
name|r
operator|<
name|row
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|isHidden
argument_list|(
name|r
argument_list|)
condition|)
name|alternateBase
operator|=
operator|!
name|alternateBase
expr_stmt|;
block|}
block|}
else|else
block|{
name|alternateBase
operator|=
operator|(
name|row
operator|&
literal|1
operator|)
operator|!=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|alternateBase
condition|)
block|{
name|option
operator|.
name|features
operator||=
name|QStyleOptionViewItemV2
operator|::
name|Alternate
expr_stmt|;
block|}
else|else
block|{
name|option
operator|.
name|features
operator|&=
operator|~
name|QStyleOptionViewItemV2
operator|::
name|Alternate
expr_stmt|;
block|}
comment|// draw background of the item (only alternate row). rest of the background
comment|// is provided by the delegate
name|QStyle
operator|::
name|State
name|oldState
init|=
name|option
operator|.
name|state
decl_stmt|;
name|option
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_PanelItemViewRow
argument_list|,
operator|&
name|option
argument_list|,
operator|&
name|painter
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|option
operator|.
name|state
operator|=
name|oldState
expr_stmt|;
name|alternateBase
operator|=
operator|!
name|alternateBase
expr_stmt|;
name|previousRow
operator|=
name|row
expr_stmt|;
block|}
name|d
operator|->
name|delegateForIndex
argument_list|(
operator|*
name|it
argument_list|)
operator|->
name|paint
argument_list|(
operator|&
name|painter
argument_list|,
name|option
argument_list|,
operator|*
name|it
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|d
operator|->
name|commonListView
operator|->
name|paintDragDrop
argument_list|(
operator|&
name|painter
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
comment|// #### move this implementation into a dynamic class
if|if
condition|(
name|d
operator|->
name|showElasticBand
operator|&&
name|d
operator|->
name|elasticBand
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QStyleOptionRubberBand
name|opt
decl_stmt|;
name|opt
operator|.
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|opt
operator|.
name|shape
operator|=
name|QRubberBand
operator|::
name|Rectangle
expr_stmt|;
name|opt
operator|.
name|opaque
operator|=
literal|false
expr_stmt|;
name|opt
operator|.
name|rect
operator|=
name|d
operator|->
name|mapToViewport
argument_list|(
name|d
operator|->
name|elasticBand
argument_list|,
literal|false
argument_list|)
operator|.
name|intersected
argument_list|(
name|d
operator|->
name|viewport
operator|->
name|rect
argument_list|()
operator|.
name|adjusted
argument_list|(
operator|-
literal|16
argument_list|,
operator|-
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|save
argument_list|()
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_RubberBand
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|painter
argument_list|)
expr_stmt|;
name|painter
operator|.
name|restore
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|indexAt
name|QModelIndex
name|QListView
operator|::
name|indexAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
name|QRect
name|rect
argument_list|(
name|p
operator|.
name|x
argument_list|()
operator|+
name|horizontalOffset
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
operator|+
name|verticalOffset
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|intersectVector
init|=
name|d
operator|->
name|intersectingSet
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|QModelIndex
name|index
init|=
name|intersectVector
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|?
name|intersectVector
operator|.
name|last
argument_list|()
else|:
name|QModelIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
operator|&&
name|visualRect
argument_list|(
name|index
argument_list|)
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
return|return
name|index
return|;
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|horizontalOffset
name|int
name|QListView
operator|::
name|horizontalOffset
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|commonListView
operator|->
name|horizontalOffset
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|verticalOffset
name|int
name|QListView
operator|::
name|verticalOffset
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|commonListView
operator|->
name|verticalOffset
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|moveCursor
name|QModelIndex
name|QListView
operator|::
name|moveCursor
parameter_list|(
name|CursorAction
name|cursorAction
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|modifiers
argument_list|)
expr_stmt|;
name|QModelIndex
name|current
init|=
name|currentIndex
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|current
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|rowCount
init|=
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|(
name|d
operator|->
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rowCount
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|int
name|row
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|row
operator|<
name|rowCount
operator|&&
name|d
operator|->
name|isHiddenOrDisabled
argument_list|(
name|row
argument_list|)
condition|)
operator|++
name|row
expr_stmt|;
if|if
condition|(
name|row
operator|>=
name|rowCount
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
return|return
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|d
operator|->
name|column
argument_list|,
name|d
operator|->
name|root
argument_list|)
return|;
block|}
specifier|const
name|QRect
name|initialRect
init|=
name|rectForIndex
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|initialRect
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|column
argument_list|,
name|d
operator|->
name|root
argument_list|)
return|;
block|}
if|if
condition|(
name|d
operator|->
name|gridSize
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
name|rect
operator|.
name|setSize
argument_list|(
name|d
operator|->
name|gridSize
argument_list|()
argument_list|)
expr_stmt|;
name|QSize
name|contents
init|=
name|d
operator|->
name|contentsSize
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|intersectVector
decl_stmt|;
switch|switch
condition|(
name|cursorAction
condition|)
block|{
case|case
name|MoveLeft
case|:
while|while
condition|(
name|intersectVector
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rect
operator|.
name|translate
argument_list|(
operator|-
name|rect
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|rect
operator|.
name|right
argument_list|()
operator|<=
literal|0
condition|)
return|return
name|current
return|;
if|if
condition|(
name|rect
operator|.
name|left
argument_list|()
operator|<
literal|0
condition|)
name|rect
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|intersectVector
operator|=
name|d
operator|->
name|intersectingSet
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|d
operator|->
name|removeCurrentAndDisabled
argument_list|(
operator|&
name|intersectVector
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
return|return
name|d
operator|->
name|closestIndex
argument_list|(
name|initialRect
argument_list|,
name|intersectVector
argument_list|)
return|;
case|case
name|MoveRight
case|:
while|while
condition|(
name|intersectVector
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rect
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|rect
operator|.
name|left
argument_list|()
operator|>=
name|contents
operator|.
name|width
argument_list|()
condition|)
return|return
name|current
return|;
if|if
condition|(
name|rect
operator|.
name|right
argument_list|()
operator|>
name|contents
operator|.
name|width
argument_list|()
condition|)
name|rect
operator|.
name|setRight
argument_list|(
name|contents
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|intersectVector
operator|=
name|d
operator|->
name|intersectingSet
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|d
operator|->
name|removeCurrentAndDisabled
argument_list|(
operator|&
name|intersectVector
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
return|return
name|d
operator|->
name|closestIndex
argument_list|(
name|initialRect
argument_list|,
name|intersectVector
argument_list|)
return|;
case|case
name|MovePageUp
case|:
comment|// move current by (visibileRowCount - 1) items.
comment|// rect.translate(0, -rect.height()); will happen in the switch fallthrough for MoveUp.
name|rect
operator|.
name|moveTop
argument_list|(
name|rect
operator|.
name|top
argument_list|()
operator|-
name|d
operator|->
name|viewport
operator|->
name|height
argument_list|()
operator|+
literal|2
operator|*
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rect
operator|.
name|top
argument_list|()
operator|<
name|rect
operator|.
name|height
argument_list|()
condition|)
name|rect
operator|.
name|moveTop
argument_list|(
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
case|case
name|MovePrevious
case|:
case|case
name|MoveUp
case|:
while|while
condition|(
name|intersectVector
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rect
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|-
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rect
operator|.
name|bottom
argument_list|()
operator|<=
literal|0
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
name|int
name|row
init|=
name|d
operator|->
name|batchStartRow
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|row
operator|>=
literal|0
operator|&&
name|d
operator|->
name|isHiddenOrDisabled
argument_list|(
name|row
argument_list|)
condition|)
operator|--
name|row
expr_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
return|return
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|d
operator|->
name|column
argument_list|,
name|d
operator|->
name|root
argument_list|)
return|;
block|}
endif|#
directive|endif
return|return
name|current
return|;
block|}
if|if
condition|(
name|rect
operator|.
name|top
argument_list|()
operator|<
literal|0
condition|)
name|rect
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|intersectVector
operator|=
name|d
operator|->
name|intersectingSet
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|d
operator|->
name|removeCurrentAndDisabled
argument_list|(
operator|&
name|intersectVector
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
return|return
name|d
operator|->
name|closestIndex
argument_list|(
name|initialRect
argument_list|,
name|intersectVector
argument_list|)
return|;
case|case
name|MovePageDown
case|:
comment|// move current by (visibileRowCount - 1) items.
comment|// rect.translate(0, rect.height()); will happen in the switch fallthrough for MoveDown.
name|rect
operator|.
name|moveTop
argument_list|(
name|rect
operator|.
name|top
argument_list|()
operator|+
name|d
operator|->
name|viewport
operator|->
name|height
argument_list|()
operator|-
literal|2
operator|*
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rect
operator|.
name|bottom
argument_list|()
operator|>
name|contents
operator|.
name|height
argument_list|()
operator|-
name|rect
operator|.
name|height
argument_list|()
condition|)
name|rect
operator|.
name|moveBottom
argument_list|(
name|contents
operator|.
name|height
argument_list|()
operator|-
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
case|case
name|MoveNext
case|:
case|case
name|MoveDown
case|:
while|while
condition|(
name|intersectVector
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rect
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rect
operator|.
name|top
argument_list|()
operator|>=
name|contents
operator|.
name|height
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
name|int
name|rowCount
init|=
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|(
name|d
operator|->
name|root
argument_list|)
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|row
operator|<
name|rowCount
operator|&&
name|d
operator|->
name|isHiddenOrDisabled
argument_list|(
name|row
argument_list|)
condition|)
operator|++
name|row
expr_stmt|;
if|if
condition|(
name|row
operator|<
name|rowCount
condition|)
return|return
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|d
operator|->
name|column
argument_list|,
name|d
operator|->
name|root
argument_list|)
return|;
block|}
endif|#
directive|endif
return|return
name|current
return|;
block|}
if|if
condition|(
name|rect
operator|.
name|bottom
argument_list|()
operator|>
name|contents
operator|.
name|height
argument_list|()
condition|)
name|rect
operator|.
name|setBottom
argument_list|(
name|contents
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|intersectVector
operator|=
name|d
operator|->
name|intersectingSet
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|d
operator|->
name|removeCurrentAndDisabled
argument_list|(
operator|&
name|intersectVector
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
return|return
name|d
operator|->
name|closestIndex
argument_list|(
name|initialRect
argument_list|,
name|intersectVector
argument_list|)
return|;
case|case
name|MoveHome
case|:
return|return
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|column
argument_list|,
name|d
operator|->
name|root
argument_list|)
return|;
case|case
name|MoveEnd
case|:
return|return
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|d
operator|->
name|batchStartRow
argument_list|()
operator|-
literal|1
argument_list|,
name|d
operator|->
name|column
argument_list|,
name|d
operator|->
name|root
argument_list|)
return|;
block|}
return|return
name|current
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the rectangle of the item at position \a index in the     model. The rectangle is in contents coordinates.      \sa visualRect() */
end_comment
begin_function
DECL|function|rectForIndex
name|QRect
name|QListView
operator|::
name|rectForIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|rectForIndex
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Sets the contents position of the item at \a index in the model to the given     \a position.     If the list view's movement mode is Static or its view mode is ListView,     this function will have no effect. */
end_comment
begin_function
DECL|function|setPositionForIndex
name|void
name|QListView
operator|::
name|setPositionForIndex
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|position
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|movement
operator|==
name|Static
operator|||
operator|!
name|d
operator|->
name|isIndexValid
argument_list|(
name|index
argument_list|)
operator|||
name|index
operator|.
name|parent
argument_list|()
operator|!=
name|d
operator|->
name|root
operator|||
name|index
operator|.
name|column
argument_list|()
operator|!=
name|d
operator|->
name|column
condition|)
return|return;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|d
operator|->
name|commonListView
operator|->
name|setPositionForIndex
argument_list|(
name|position
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|setSelection
name|void
name|QListView
operator|::
name|setSelection
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|command
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|selectionModel
condition|)
return|return;
comment|// if we are wrapping, we can only selecte inside the contents rectangle
name|int
name|w
init|=
name|qMax
argument_list|(
name|d
operator|->
name|contentsSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|viewport
operator|->
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|qMax
argument_list|(
name|d
operator|->
name|contentsSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|d
operator|->
name|viewport
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|wrap
operator|&&
operator|!
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
operator|.
name|intersects
argument_list|(
name|rect
argument_list|)
condition|)
return|return;
name|QItemSelection
name|selection
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|width
argument_list|()
operator|==
literal|1
operator|&&
name|rect
operator|.
name|height
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|const
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|intersectVector
init|=
name|d
operator|->
name|intersectingSet
argument_list|(
name|rect
operator|.
name|translated
argument_list|(
name|horizontalOffset
argument_list|()
argument_list|,
name|verticalOffset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QModelIndex
name|tl
decl_stmt|;
if|if
condition|(
operator|!
name|intersectVector
operator|.
name|isEmpty
argument_list|()
condition|)
name|tl
operator|=
name|intersectVector
operator|.
name|last
argument_list|()
expr_stmt|;
comment|// special case for mouse press; only select the top item
if|if
condition|(
name|tl
operator|.
name|isValid
argument_list|()
operator|&&
name|d
operator|->
name|isIndexEnabled
argument_list|(
name|tl
argument_list|)
condition|)
name|selection
operator|.
name|select
argument_list|(
name|tl
argument_list|,
name|tl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|state
argument_list|()
operator|==
name|DragSelectingState
condition|)
block|{
comment|// visual selection mode (rubberband selection)
name|selection
operator|=
name|d
operator|->
name|selection
argument_list|(
name|rect
operator|.
name|translated
argument_list|(
name|horizontalOffset
argument_list|()
argument_list|,
name|verticalOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// logical selection mode (key and mouse click selection)
name|QModelIndex
name|tl
decl_stmt|,
name|br
decl_stmt|;
comment|// get the first item
specifier|const
name|QRect
name|topLeft
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
name|horizontalOffset
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|+
name|verticalOffset
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|intersectVector
init|=
name|d
operator|->
name|intersectingSet
argument_list|(
name|topLeft
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|intersectVector
operator|.
name|isEmpty
argument_list|()
condition|)
name|tl
operator|=
name|intersectVector
operator|.
name|last
argument_list|()
expr_stmt|;
comment|// get the last item
specifier|const
name|QRect
name|bottomRight
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|+
name|horizontalOffset
argument_list|()
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|+
name|verticalOffset
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|intersectVector
operator|=
name|d
operator|->
name|intersectingSet
argument_list|(
name|bottomRight
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|intersectVector
operator|.
name|isEmpty
argument_list|()
condition|)
name|br
operator|=
name|intersectVector
operator|.
name|last
argument_list|()
expr_stmt|;
comment|// get the ranges
if|if
condition|(
name|tl
operator|.
name|isValid
argument_list|()
operator|&&
name|br
operator|.
name|isValid
argument_list|()
operator|&&
name|d
operator|->
name|isIndexEnabled
argument_list|(
name|tl
argument_list|)
operator|&&
name|d
operator|->
name|isIndexEnabled
argument_list|(
name|br
argument_list|)
condition|)
block|{
name|QRect
name|first
init|=
name|rectForIndex
argument_list|(
name|tl
argument_list|)
decl_stmt|;
name|QRect
name|last
init|=
name|rectForIndex
argument_list|(
name|br
argument_list|)
decl_stmt|;
name|QRect
name|middle
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|flow
operator|==
name|LeftToRight
condition|)
block|{
name|QRect
modifier|&
name|top
init|=
name|first
decl_stmt|;
name|QRect
modifier|&
name|bottom
init|=
name|last
decl_stmt|;
comment|// if bottom is above top, swap them
if|if
condition|(
name|top
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|>
name|bottom
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
condition|)
block|{
name|QRect
name|tmp
init|=
name|top
decl_stmt|;
name|top
operator|=
name|bottom
expr_stmt|;
name|bottom
operator|=
name|tmp
expr_stmt|;
block|}
comment|// if the rect are on differnet lines, expand
if|if
condition|(
name|top
operator|.
name|top
argument_list|()
operator|!=
name|bottom
operator|.
name|top
argument_list|()
condition|)
block|{
comment|// top rectangle
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
name|top
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|else
name|top
operator|.
name|setRight
argument_list|(
name|contentsSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
comment|// bottom rectangle
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
name|bottom
operator|.
name|setRight
argument_list|(
name|contentsSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|bottom
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|top
operator|.
name|left
argument_list|()
operator|>
name|bottom
operator|.
name|right
argument_list|()
condition|)
block|{
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
name|bottom
operator|.
name|setLeft
argument_list|(
name|top
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|bottom
operator|.
name|setRight
argument_list|(
name|top
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
name|top
operator|.
name|setLeft
argument_list|(
name|bottom
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|top
operator|.
name|setRight
argument_list|(
name|bottom
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// middle rectangle
if|if
condition|(
name|top
operator|.
name|bottom
argument_list|()
operator|<
name|bottom
operator|.
name|top
argument_list|()
condition|)
block|{
if|if
condition|(
name|gridSize
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|gridSize
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
name|middle
operator|.
name|setTop
argument_list|(
name|top
operator|.
name|top
argument_list|()
operator|+
name|gridSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|middle
operator|.
name|setTop
argument_list|(
name|top
operator|.
name|bottom
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|middle
operator|.
name|setLeft
argument_list|(
name|qMin
argument_list|(
name|top
operator|.
name|left
argument_list|()
argument_list|,
name|bottom
operator|.
name|left
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|middle
operator|.
name|setBottom
argument_list|(
name|bottom
operator|.
name|top
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|middle
operator|.
name|setRight
argument_list|(
name|qMax
argument_list|(
name|top
operator|.
name|right
argument_list|()
argument_list|,
name|bottom
operator|.
name|right
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// TopToBottom
name|QRect
modifier|&
name|left
init|=
name|first
decl_stmt|;
name|QRect
modifier|&
name|right
init|=
name|last
decl_stmt|;
if|if
condition|(
name|left
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|>
name|right
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
condition|)
name|qSwap
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|int
name|ch
init|=
name|contentsSize
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|left
operator|.
name|left
argument_list|()
operator|!=
name|right
operator|.
name|left
argument_list|()
condition|)
block|{
comment|// left rectangle
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
name|left
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|else
name|left
operator|.
name|setBottom
argument_list|(
name|ch
argument_list|)
expr_stmt|;
comment|// top rectangle
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
name|right
operator|.
name|setBottom
argument_list|(
name|ch
argument_list|)
expr_stmt|;
else|else
name|right
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// only set middle if the
name|middle
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|middle
operator|.
name|setBottom
argument_list|(
name|ch
argument_list|)
expr_stmt|;
if|if
condition|(
name|gridSize
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|gridSize
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
name|middle
operator|.
name|setLeft
argument_list|(
name|left
operator|.
name|left
argument_list|()
operator|+
name|gridSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|middle
operator|.
name|setLeft
argument_list|(
name|left
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|middle
operator|.
name|setRight
argument_list|(
name|right
operator|.
name|left
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|left
operator|.
name|bottom
argument_list|()
operator|<
name|right
operator|.
name|top
argument_list|()
condition|)
block|{
name|left
operator|.
name|setBottom
argument_list|(
name|right
operator|.
name|top
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|right
operator|.
name|setBottom
argument_list|(
name|left
operator|.
name|top
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// do the selections
name|QItemSelection
name|topSelection
init|=
name|d
operator|->
name|selection
argument_list|(
name|first
argument_list|)
decl_stmt|;
name|QItemSelection
name|middleSelection
init|=
name|d
operator|->
name|selection
argument_list|(
name|middle
argument_list|)
decl_stmt|;
name|QItemSelection
name|bottomSelection
init|=
name|d
operator|->
name|selection
argument_list|(
name|last
argument_list|)
decl_stmt|;
comment|// merge
name|selection
operator|.
name|merge
argument_list|(
name|topSelection
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
argument_list|)
expr_stmt|;
name|selection
operator|.
name|merge
argument_list|(
name|middleSelection
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
argument_list|)
expr_stmt|;
name|selection
operator|.
name|merge
argument_list|(
name|bottomSelection
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|d
operator|->
name|selectionModel
operator|->
name|select
argument_list|(
name|selection
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp    Since 4.7, the returned region only contains rectangles intersecting   (or included in) the viewport. */
end_comment
begin_function
DECL|function|visualRegionForSelection
name|QRegion
name|QListView
operator|::
name|visualRegionForSelection
parameter_list|(
specifier|const
name|QItemSelection
modifier|&
name|selection
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
comment|// ### NOTE: this is a potential bottleneck in non-static mode
name|int
name|c
init|=
name|d
operator|->
name|column
decl_stmt|;
name|QRegion
name|selectionRegion
decl_stmt|;
specifier|const
name|QRect
modifier|&
name|viewportRect
init|=
name|d
operator|->
name|viewport
operator|->
name|rect
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selection
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|selection
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
name|QModelIndex
name|parent
init|=
name|selection
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|topLeft
argument_list|()
operator|.
name|parent
argument_list|()
decl_stmt|;
comment|//we only display the children of the root in a listview
comment|//we're not interested in the other model indexes
if|if
condition|(
name|parent
operator|!=
name|d
operator|->
name|root
condition|)
continue|continue;
name|int
name|t
init|=
name|selection
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|topLeft
argument_list|()
operator|.
name|row
argument_list|()
decl_stmt|;
name|int
name|b
init|=
name|selection
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|bottomRight
argument_list|()
operator|.
name|row
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|viewMode
operator|==
name|IconMode
operator|||
name|d
operator|->
name|isWrapping
argument_list|()
condition|)
block|{
comment|// in non-static mode, we have to go through all selected items
for|for
control|(
name|int
name|r
init|=
name|t
init|;
name|r
operator|<=
name|b
condition|;
operator|++
name|r
control|)
block|{
specifier|const
name|QRect
modifier|&
name|rect
init|=
name|visualRect
argument_list|(
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|parent
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|viewportRect
operator|.
name|intersects
argument_list|(
name|rect
argument_list|)
condition|)
name|selectionRegion
operator|+=
name|rect
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// in static mode, we can optimize a bit
while|while
condition|(
name|t
operator|<=
name|b
operator|&&
name|d
operator|->
name|isHidden
argument_list|(
name|t
argument_list|)
condition|)
operator|++
name|t
expr_stmt|;
while|while
condition|(
name|b
operator|>=
name|t
operator|&&
name|d
operator|->
name|isHidden
argument_list|(
name|b
argument_list|)
condition|)
operator|--
name|b
expr_stmt|;
specifier|const
name|QModelIndex
name|top
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|t
argument_list|,
name|c
argument_list|,
name|parent
argument_list|)
decl_stmt|;
specifier|const
name|QModelIndex
name|bottom
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QRect
name|rect
argument_list|(
name|visualRect
argument_list|(
name|top
argument_list|)
operator|.
name|topLeft
argument_list|()
argument_list|,
name|visualRect
argument_list|(
name|bottom
argument_list|)
operator|.
name|bottomRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|viewportRect
operator|.
name|intersects
argument_list|(
name|rect
argument_list|)
condition|)
name|selectionRegion
operator|+=
name|rect
expr_stmt|;
block|}
block|}
return|return
name|selectionRegion
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|selectedIndexes
name|QModelIndexList
name|QListView
operator|::
name|selectedIndexes
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|selectionModel
condition|)
return|return
name|QModelIndexList
argument_list|()
return|;
name|QModelIndexList
name|viewSelected
init|=
name|d
operator|->
name|selectionModel
operator|->
name|selectedIndexes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|viewSelected
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QModelIndex
modifier|&
name|index
init|=
name|viewSelected
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isIndexHidden
argument_list|(
name|index
argument_list|)
operator|&&
name|index
operator|.
name|parent
argument_list|()
operator|==
name|d
operator|->
name|root
operator|&&
name|index
operator|.
name|column
argument_list|()
operator|==
name|d
operator|->
name|column
condition|)
operator|++
name|i
expr_stmt|;
else|else
name|viewSelected
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|viewSelected
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Layout the items according to the flow and wrapping properties. */
end_comment
begin_function
DECL|function|doItemsLayout
name|void
name|QListView
operator|::
name|doItemsLayout
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
comment|// showing the scroll bars will trigger a resize event,
comment|// so we set the state to expanding to avoid
comment|// triggering another layout
name|QAbstractItemView
operator|::
name|State
name|oldState
init|=
name|state
argument_list|()
decl_stmt|;
name|setState
argument_list|(
name|ExpandingState
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
operator|->
name|columnCount
argument_list|(
name|d
operator|->
name|root
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// no columns means no contents
name|d
operator|->
name|resetBatchStartRow
argument_list|()
expr_stmt|;
if|if
condition|(
name|layoutMode
argument_list|()
operator|==
name|SinglePass
condition|)
name|d
operator|->
name|doItemsLayout
argument_list|(
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|(
name|d
operator|->
name|root
argument_list|)
argument_list|)
expr_stmt|;
comment|// layout everything
elseif|else
if|if
condition|(
operator|!
name|d
operator|->
name|batchLayoutTimer
operator|.
name|isActive
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|doItemsLayout
argument_list|(
name|d
operator|->
name|batchSize
argument_list|)
condition|)
comment|// layout is done
name|d
operator|->
name|batchLayoutTimer
operator|.
name|start
argument_list|(
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// do a new batch as fast as possible
block|}
block|}
name|QAbstractItemView
operator|::
name|doItemsLayout
argument_list|()
expr_stmt|;
name|setState
argument_list|(
name|oldState
argument_list|)
expr_stmt|;
comment|// restoring the oldState
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|updateGeometries
name|void
name|QListView
operator|::
name|updateGeometries
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|(
name|d
operator|->
name|root
argument_list|)
operator|<=
literal|0
operator|||
name|d
operator|->
name|model
operator|->
name|columnCount
argument_list|(
name|d
operator|->
name|root
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|horizontalScrollBar
argument_list|()
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verticalScrollBar
argument_list|()
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QModelIndex
name|index
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|column
argument_list|,
name|d
operator|->
name|root
argument_list|)
decl_stmt|;
name|QStyleOptionViewItemV4
name|option
init|=
name|d
operator|->
name|viewOptionsV4
argument_list|()
decl_stmt|;
name|QSize
name|step
init|=
name|d
operator|->
name|itemSize
argument_list|(
name|option
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|d
operator|->
name|commonListView
operator|->
name|updateHorizontalScrollBar
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|d
operator|->
name|commonListView
operator|->
name|updateVerticalScrollBar
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
name|QAbstractItemView
operator|::
name|updateGeometries
argument_list|()
expr_stmt|;
comment|// if the scroll bars are turned off, we resize the contents to the viewport
if|if
condition|(
name|d
operator|->
name|movement
operator|==
name|Static
operator|&&
operator|!
name|d
operator|->
name|isWrapping
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|maxSize
init|=
name|maximumViewportSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|flow
operator|==
name|TopToBottom
condition|)
block|{
if|if
condition|(
name|horizontalScrollBarPolicy
argument_list|()
operator|==
name|Qt
operator|::
name|ScrollBarAlwaysOff
condition|)
block|{
name|d
operator|->
name|setContentsSize
argument_list|(
name|maxSize
operator|.
name|width
argument_list|()
argument_list|,
name|contentsSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|horizontalScrollBar
argument_list|()
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// we see all the contents anyway
block|}
block|}
else|else
block|{
comment|// LeftToRight
if|if
condition|(
name|verticalScrollBarPolicy
argument_list|()
operator|==
name|Qt
operator|::
name|ScrollBarAlwaysOff
condition|)
block|{
name|d
operator|->
name|setContentsSize
argument_list|(
name|contentsSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|maxSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|verticalScrollBar
argument_list|()
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// we see all the contents anyway
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|isIndexHidden
name|bool
name|QListView
operator|::
name|isIndexHidden
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|isHidden
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
operator|&&
operator|(
name|index
operator|.
name|parent
argument_list|()
operator|==
name|d
operator|->
name|root
operator|)
operator|&&
name|index
operator|.
name|column
argument_list|()
operator|==
name|d
operator|->
name|column
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QListView::modelColumn     \brief the column in the model that is visible      By default, this property contains 0, indicating that the first     column in the model will be shown. */
end_comment
begin_function
DECL|function|setModelColumn
name|void
name|QListView
operator|::
name|setModelColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
if|if
condition|(
name|column
operator|<
literal|0
operator|||
name|column
operator|>=
name|d
operator|->
name|model
operator|->
name|columnCount
argument_list|(
name|d
operator|->
name|root
argument_list|)
condition|)
return|return;
name|d
operator|->
name|column
operator|=
name|column
expr_stmt|;
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|modelColumn
name|int
name|QListView
operator|::
name|modelColumn
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|column
return|;
block|}
end_function
begin_comment
comment|/*!     \property QListView::uniformItemSizes     \brief whether all items in the listview have the same size     \since 4.1      This property should only be set to true if it is guaranteed that all items     in the view have the same size. This enables the view to do some     optimizations for performance purposes.      By default, this property is false. */
end_comment
begin_function
DECL|function|setUniformItemSizes
name|void
name|QListView
operator|::
name|setUniformItemSizes
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|uniformItemSizes
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_function
DECL|function|uniformItemSizes
name|bool
name|QListView
operator|::
name|uniformItemSizes
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|uniformItemSizes
return|;
block|}
end_function
begin_comment
comment|/*!     \property QListView::wordWrap     \brief the item text word-wrapping policy     \since 4.2      If this property is true then the item text is wrapped where     necessary at word-breaks; otherwise it is not wrapped at all.     This property is false by default.      Please note that even if wrapping is enabled, the cell will not be     expanded to make room for the text. It will print ellipsis for     text that cannot be shown, according to the view's     \l{QAbstractItemView::}{textElideMode}. */
end_comment
begin_function
DECL|function|setWordWrap
name|void
name|QListView
operator|::
name|setWordWrap
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|wrapItemText
operator|==
name|on
condition|)
return|return;
name|d
operator|->
name|wrapItemText
operator|=
name|on
expr_stmt|;
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wordWrap
name|bool
name|QListView
operator|::
name|wordWrap
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|wrapItemText
return|;
block|}
end_function
begin_comment
comment|/*!     \property QListView::selectionRectVisible     \brief if the selection rectangle should be visible     \since 4.3      If this property is true then the selection rectangle is visible;     otherwise it will be hidden.      \note The selection rectangle will only be visible if the selection mode     is in a mode where more than one item can be selected; i.e., it will not     draw a selection rectangle if the selection mode is     QAbstractItemView::SingleSelection.      By default, this property is false. */
end_comment
begin_function
DECL|function|setSelectionRectVisible
name|void
name|QListView
operator|::
name|setSelectionRectVisible
parameter_list|(
name|bool
name|show
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|modeProperties
operator||=
name|uint
argument_list|(
name|QListViewPrivate
operator|::
name|SelectionRectVisible
argument_list|)
expr_stmt|;
name|d
operator|->
name|setSelectionRectVisible
argument_list|(
name|show
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isSelectionRectVisible
name|bool
name|QListView
operator|::
name|isSelectionRectVisible
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|isSelectionRectVisible
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QListView
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
return|return
name|QAbstractItemView
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*  * private object implementation  */
end_comment
begin_constructor
DECL|function|QListViewPrivate
name|QListViewPrivate
operator|::
name|QListViewPrivate
parameter_list|()
member_init_list|:
name|QAbstractItemViewPrivate
argument_list|()
member_init_list|,
name|commonListView
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|wrap
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|space
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|flow
argument_list|(
name|QListView
operator|::
name|TopToBottom
argument_list|)
member_init_list|,
name|movement
argument_list|(
name|QListView
operator|::
name|Static
argument_list|)
member_init_list|,
name|resizeMode
argument_list|(
name|QListView
operator|::
name|Fixed
argument_list|)
member_init_list|,
name|layoutMode
argument_list|(
name|QListView
operator|::
name|SinglePass
argument_list|)
member_init_list|,
name|viewMode
argument_list|(
name|QListView
operator|::
name|ListMode
argument_list|)
member_init_list|,
name|modeProperties
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|column
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|uniformItemSizes
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|batchSize
argument_list|(
literal|100
argument_list|)
member_init_list|,
name|showElasticBand
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QListViewPrivate
name|QListViewPrivate
operator|::
name|~
name|QListViewPrivate
parameter_list|()
block|{
operator|delete
name|commonListView
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|clear
name|void
name|QListViewPrivate
operator|::
name|clear
parameter_list|()
block|{
comment|// initialization of data structs
name|cachedItemSize
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|commonListView
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prepareItemsLayout
name|void
name|QListViewPrivate
operator|::
name|prepareItemsLayout
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
comment|//take the size as if there were scrollbar in order to prevent scrollbar to blink
name|layoutBounds
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|q
operator|->
name|maximumViewportSize
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|frameAroundContents
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollView_FrameOnlyAroundContents
argument_list|)
condition|)
name|frameAroundContents
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultFrameWidth
argument_list|)
operator|*
literal|2
expr_stmt|;
comment|// maximumViewportSize() already takes scrollbar into account if policy is
comment|// Qt::ScrollBarAlwaysOn but scrollbar extent must be deduced if policy
comment|// is Qt::ScrollBarAsNeeded
name|int
name|verticalMargin
init|=
name|vbarpolicy
operator|==
name|Qt
operator|::
name|ScrollBarAsNeeded
condition|?
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ScrollBarExtent
argument_list|,
literal|0
argument_list|,
name|vbar
argument_list|)
operator|+
name|frameAroundContents
else|:
literal|0
decl_stmt|;
name|int
name|horizontalMargin
init|=
name|hbarpolicy
operator|==
name|Qt
operator|::
name|ScrollBarAsNeeded
condition|?
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ScrollBarExtent
argument_list|,
literal|0
argument_list|,
name|hbar
argument_list|)
operator|+
name|frameAroundContents
else|:
literal|0
decl_stmt|;
name|layoutBounds
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|verticalMargin
argument_list|,
operator|-
name|horizontalMargin
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
name|model
operator|->
name|columnCount
argument_list|(
name|root
argument_list|)
operator|<=
literal|0
condition|?
literal|0
else|:
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|commonListView
operator|->
name|setRowCount
argument_list|(
name|rowCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|doItemsLayout
name|bool
name|QListViewPrivate
operator|::
name|doItemsLayout
parameter_list|(
name|int
name|delta
parameter_list|)
block|{
name|int
name|max
init|=
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
operator|-
literal|1
decl_stmt|;
name|int
name|first
init|=
name|batchStartRow
argument_list|()
decl_stmt|;
name|int
name|last
init|=
name|qMin
argument_list|(
name|first
operator|+
name|delta
operator|-
literal|1
argument_list|,
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|0
condition|)
block|{
name|layoutChildren
argument_list|()
expr_stmt|;
comment|// make sure the viewport has the right size
name|prepareItemsLayout
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|max
operator|<
literal|0
operator|||
name|last
operator|<
name|first
condition|)
block|{
return|return
literal|true
return|;
comment|// nothing to do
block|}
name|QListViewLayoutInfo
name|info
decl_stmt|;
name|info
operator|.
name|bounds
operator|=
name|layoutBounds
expr_stmt|;
name|info
operator|.
name|grid
operator|=
name|gridSize
argument_list|()
expr_stmt|;
name|info
operator|.
name|spacing
operator|=
operator|(
name|info
operator|.
name|grid
operator|.
name|isValid
argument_list|()
condition|?
literal|0
else|:
name|spacing
argument_list|()
operator|)
expr_stmt|;
name|info
operator|.
name|first
operator|=
name|first
expr_stmt|;
name|info
operator|.
name|last
operator|=
name|last
expr_stmt|;
name|info
operator|.
name|wrap
operator|=
name|isWrapping
argument_list|()
expr_stmt|;
name|info
operator|.
name|flow
operator|=
name|flow
expr_stmt|;
name|info
operator|.
name|max
operator|=
name|max
expr_stmt|;
return|return
name|commonListView
operator|->
name|doBatchedItemLayout
argument_list|(
name|info
argument_list|,
name|max
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|indexToListViewItem
name|QListViewItem
name|QListViewPrivate
operator|::
name|indexToListViewItem
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
name|isHidden
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
condition|)
return|return
name|QListViewItem
argument_list|()
return|;
return|return
name|commonListView
operator|->
name|indexToListViewItem
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mapToViewport
name|QRect
name|QListViewPrivate
operator|::
name|mapToViewport
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|bool
name|extend
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|rect
return|;
name|QRect
name|result
init|=
name|extend
condition|?
name|commonListView
operator|->
name|mapToViewport
argument_list|(
name|rect
argument_list|)
else|:
name|rect
decl_stmt|;
name|int
name|dx
init|=
operator|-
name|q
operator|->
name|horizontalOffset
argument_list|()
decl_stmt|;
name|int
name|dy
init|=
operator|-
name|q
operator|->
name|verticalOffset
argument_list|()
decl_stmt|;
return|return
name|result
operator|.
name|adjusted
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|closestIndex
name|QModelIndex
name|QListViewPrivate
operator|::
name|closestIndex
parameter_list|(
specifier|const
name|QRect
modifier|&
name|target
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
modifier|&
name|candidates
parameter_list|)
specifier|const
block|{
name|int
name|distance
init|=
literal|0
decl_stmt|;
name|int
name|shortest
init|=
name|INT_MAX
decl_stmt|;
name|QModelIndex
name|closest
decl_stmt|;
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|candidates
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|candidates
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|*
name|it
operator|)
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
specifier|const
name|QRect
name|indexRect
init|=
name|indexToListViewItem
argument_list|(
operator|*
name|it
argument_list|)
operator|.
name|rect
argument_list|()
decl_stmt|;
comment|//if the center x (or y) position of an item is included in the rect of the other item,
comment|//we define the distance between them as the difference in x (or y) of their respective center.
comment|// Otherwise, we use the nahattan  length between the 2 items
if|if
condition|(
operator|(
name|target
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|>=
name|indexRect
operator|.
name|x
argument_list|()
operator|&&
name|target
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|<
name|indexRect
operator|.
name|right
argument_list|()
operator|)
operator|||
operator|(
name|indexRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|>=
name|target
operator|.
name|x
argument_list|()
operator|&&
name|indexRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|<
name|target
operator|.
name|right
argument_list|()
operator|)
condition|)
block|{
comment|//one item's center is at the vertical of the other
name|distance
operator|=
name|qAbs
argument_list|(
name|indexRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|target
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|target
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|>=
name|indexRect
operator|.
name|y
argument_list|()
operator|&&
name|target
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|<
name|indexRect
operator|.
name|bottom
argument_list|()
operator|)
operator|||
operator|(
name|indexRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|>=
name|target
operator|.
name|y
argument_list|()
operator|&&
name|indexRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|<
name|target
operator|.
name|bottom
argument_list|()
operator|)
condition|)
block|{
comment|//one item's center is at the vertical of the other
name|distance
operator|=
name|qAbs
argument_list|(
name|indexRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|target
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|distance
operator|=
operator|(
name|indexRect
operator|.
name|center
argument_list|()
operator|-
name|target
operator|.
name|center
argument_list|()
operator|)
operator|.
name|manhattanLength
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|distance
operator|<
name|shortest
condition|)
block|{
name|shortest
operator|=
name|distance
expr_stmt|;
name|closest
operator|=
operator|*
name|it
expr_stmt|;
block|}
block|}
return|return
name|closest
return|;
block|}
end_function
begin_function
DECL|function|itemSize
name|QSize
name|QListViewPrivate
operator|::
name|itemSize
parameter_list|(
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|uniformItemSizes
condition|)
block|{
specifier|const
name|QAbstractItemDelegate
modifier|*
name|delegate
init|=
name|delegateForIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|delegate
condition|?
name|delegate
operator|->
name|sizeHint
argument_list|(
name|option
argument_list|,
name|index
argument_list|)
else|:
name|QSize
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|cachedItemSize
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// the last item is probaly the largest, so we use its size
name|int
name|row
init|=
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
operator|-
literal|1
decl_stmt|;
name|QModelIndex
name|sample
init|=
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|root
argument_list|)
decl_stmt|;
specifier|const
name|QAbstractItemDelegate
modifier|*
name|delegate
init|=
name|delegateForIndex
argument_list|(
name|sample
argument_list|)
decl_stmt|;
name|cachedItemSize
operator|=
name|delegate
condition|?
name|delegate
operator|->
name|sizeHint
argument_list|(
name|option
argument_list|,
name|sample
argument_list|)
else|:
name|QSize
argument_list|()
expr_stmt|;
block|}
return|return
name|cachedItemSize
return|;
block|}
end_function
begin_function
DECL|function|selection
name|QItemSelection
name|QListViewPrivate
operator|::
name|selection
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
name|QItemSelection
name|selection
decl_stmt|;
name|QModelIndex
name|tl
decl_stmt|,
name|br
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|intersectVector
init|=
name|intersectingSet
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|intersectVector
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|intersectVector
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
name|tl
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|br
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|tl
operator|=
name|br
operator|=
operator|*
name|it
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|row
argument_list|()
operator|==
operator|(
name|tl
operator|.
name|row
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|tl
operator|=
operator|*
name|it
expr_stmt|;
comment|// expand current range
block|}
elseif|else
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|row
argument_list|()
operator|==
operator|(
name|br
operator|.
name|row
argument_list|()
operator|+
literal|1
operator|)
condition|)
block|{
name|br
operator|=
operator|(
operator|*
name|it
operator|)
expr_stmt|;
comment|// expand current range
block|}
else|else
block|{
name|selection
operator|.
name|select
argument_list|(
name|tl
argument_list|,
name|br
argument_list|)
expr_stmt|;
comment|// select current range
name|tl
operator|=
name|br
operator|=
operator|*
name|it
expr_stmt|;
comment|// start new range
block|}
block|}
if|if
condition|(
name|tl
operator|.
name|isValid
argument_list|()
operator|&&
name|br
operator|.
name|isValid
argument_list|()
condition|)
name|selection
operator|.
name|select
argument_list|(
name|tl
argument_list|,
name|br
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|tl
operator|.
name|isValid
argument_list|()
condition|)
name|selection
operator|.
name|select
argument_list|(
name|tl
argument_list|,
name|tl
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|br
operator|.
name|isValid
argument_list|()
condition|)
name|selection
operator|.
name|select
argument_list|(
name|br
argument_list|,
name|br
argument_list|)
expr_stmt|;
return|return
name|selection
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function
DECL|function|position
name|QAbstractItemView
operator|::
name|DropIndicatorPosition
name|QListViewPrivate
operator|::
name|position
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|viewMode
operator|==
name|QListView
operator|::
name|ListMode
operator|&&
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
return|return
cast|static_cast
argument_list|<
name|QListModeViewBase
operator|*
argument_list|>
argument_list|(
name|commonListView
argument_list|)
operator|->
name|position
argument_list|(
name|pos
argument_list|,
name|rect
argument_list|,
name|idx
argument_list|)
return|;
else|else
return|return
name|QAbstractItemViewPrivate
operator|::
name|position
argument_list|(
name|pos
argument_list|,
name|rect
argument_list|,
name|idx
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|dropOn
name|bool
name|QListViewPrivate
operator|::
name|dropOn
parameter_list|(
name|QDropEvent
modifier|*
name|event
parameter_list|,
name|int
modifier|*
name|dropRow
parameter_list|,
name|int
modifier|*
name|dropCol
parameter_list|,
name|QModelIndex
modifier|*
name|dropIndex
parameter_list|)
block|{
if|if
condition|(
name|viewMode
operator|==
name|QListView
operator|::
name|ListMode
operator|&&
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
return|return
cast|static_cast
argument_list|<
name|QListModeViewBase
operator|*
argument_list|>
argument_list|(
name|commonListView
argument_list|)
operator|->
name|dropOn
argument_list|(
name|event
argument_list|,
name|dropRow
argument_list|,
name|dropCol
argument_list|,
name|dropIndex
argument_list|)
return|;
else|else
return|return
name|QAbstractItemViewPrivate
operator|::
name|dropOn
argument_list|(
name|event
argument_list|,
name|dropRow
argument_list|,
name|dropCol
argument_list|,
name|dropIndex
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*  * Common ListView Implementation */
end_comment
begin_function
DECL|function|appendHiddenRow
name|void
name|QCommonListViewBase
operator|::
name|appendHiddenRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|dd
operator|->
name|hiddenRows
operator|.
name|insert
argument_list|(
name|dd
operator|->
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|qq
operator|->
name|rootIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeHiddenRow
name|void
name|QCommonListViewBase
operator|::
name|removeHiddenRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|dd
operator|->
name|hiddenRows
operator|.
name|remove
argument_list|(
name|dd
operator|->
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|qq
operator|->
name|rootIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateHorizontalScrollBar
name|void
name|QCommonListViewBase
operator|::
name|updateHorizontalScrollBar
parameter_list|(
specifier|const
name|QSize
modifier|&
name|step
parameter_list|)
block|{
name|horizontalScrollBar
argument_list|()
operator|->
name|setSingleStep
argument_list|(
name|step
operator|.
name|width
argument_list|()
operator|+
name|spacing
argument_list|()
argument_list|)
expr_stmt|;
name|horizontalScrollBar
argument_list|()
operator|->
name|setPageStep
argument_list|(
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|horizontalScrollBar
argument_list|()
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
name|contentsSize
operator|.
name|width
argument_list|()
operator|-
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateVerticalScrollBar
name|void
name|QCommonListViewBase
operator|::
name|updateVerticalScrollBar
parameter_list|(
specifier|const
name|QSize
modifier|&
name|step
parameter_list|)
block|{
name|verticalScrollBar
argument_list|()
operator|->
name|setSingleStep
argument_list|(
name|step
operator|.
name|height
argument_list|()
operator|+
name|spacing
argument_list|()
argument_list|)
expr_stmt|;
name|verticalScrollBar
argument_list|()
operator|->
name|setPageStep
argument_list|(
name|viewport
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|verticalScrollBar
argument_list|()
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
name|contentsSize
operator|.
name|height
argument_list|()
operator|-
name|viewport
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scrollContentsBy
name|void
name|QCommonListViewBase
operator|::
name|scrollContentsBy
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
name|bool
comment|/*scrollElasticBand*/
parameter_list|)
block|{
name|dd
operator|->
name|scrollContentsBy
argument_list|(
name|isRightToLeft
argument_list|()
condition|?
operator|-
name|dx
else|:
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|verticalScrollToValue
name|int
name|QCommonListViewBase
operator|::
name|verticalScrollToValue
parameter_list|(
name|int
comment|/*index*/
parameter_list|,
name|QListView
operator|::
name|ScrollHint
name|hint
parameter_list|,
name|bool
name|above
parameter_list|,
name|bool
name|below
parameter_list|,
specifier|const
name|QRect
modifier|&
name|area
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
name|int
name|verticalValue
init|=
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
decl_stmt|;
name|QRect
name|adjusted
init|=
name|rect
operator|.
name|adjusted
argument_list|(
operator|-
name|spacing
argument_list|()
argument_list|,
operator|-
name|spacing
argument_list|()
argument_list|,
name|spacing
argument_list|()
argument_list|,
name|spacing
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hint
operator|==
name|QListView
operator|::
name|PositionAtTop
operator|||
name|above
condition|)
name|verticalValue
operator|+=
name|adjusted
operator|.
name|top
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|hint
operator|==
name|QListView
operator|::
name|PositionAtBottom
operator|||
name|below
condition|)
name|verticalValue
operator|+=
name|qMin
argument_list|(
name|adjusted
operator|.
name|top
argument_list|()
argument_list|,
name|adjusted
operator|.
name|bottom
argument_list|()
operator|-
name|area
operator|.
name|height
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|hint
operator|==
name|QListView
operator|::
name|PositionAtCenter
condition|)
name|verticalValue
operator|+=
name|adjusted
operator|.
name|top
argument_list|()
operator|-
operator|(
operator|(
name|area
operator|.
name|height
argument_list|()
operator|-
name|adjusted
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
operator|)
expr_stmt|;
return|return
name|verticalValue
return|;
block|}
end_function
begin_function
DECL|function|horizontalOffset
name|int
name|QCommonListViewBase
operator|::
name|horizontalOffset
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|isRightToLeft
argument_list|()
condition|?
name|horizontalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
operator|-
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
else|:
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|)
return|;
block|}
end_function
begin_function
DECL|function|horizontalScrollToValue
name|int
name|QCommonListViewBase
operator|::
name|horizontalScrollToValue
parameter_list|(
specifier|const
name|int
comment|/*index*/
parameter_list|,
name|QListView
operator|::
name|ScrollHint
name|hint
parameter_list|,
name|bool
name|leftOf
parameter_list|,
name|bool
name|rightOf
parameter_list|,
specifier|const
name|QRect
modifier|&
name|area
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
name|int
name|horizontalValue
init|=
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
if|if
condition|(
name|hint
operator|==
name|QListView
operator|::
name|PositionAtCenter
condition|)
block|{
name|horizontalValue
operator|+=
operator|(
operator|(
name|area
operator|.
name|width
argument_list|()
operator|-
name|rect
operator|.
name|width
argument_list|()
operator|)
operator|/
literal|2
operator|)
operator|-
name|rect
operator|.
name|left
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|leftOf
condition|)
name|horizontalValue
operator|-=
name|rect
operator|.
name|left
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|rightOf
condition|)
name|horizontalValue
operator|+=
name|qMin
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|area
operator|.
name|width
argument_list|()
operator|-
name|rect
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|hint
operator|==
name|QListView
operator|::
name|PositionAtCenter
condition|)
block|{
name|horizontalValue
operator|+=
name|rect
operator|.
name|left
argument_list|()
operator|-
operator|(
operator|(
name|area
operator|.
name|width
argument_list|()
operator|-
name|rect
operator|.
name|width
argument_list|()
operator|)
operator|/
literal|2
operator|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|leftOf
condition|)
name|horizontalValue
operator|+=
name|rect
operator|.
name|left
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|rightOf
condition|)
name|horizontalValue
operator|+=
name|qMin
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|right
argument_list|()
operator|-
name|area
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|horizontalValue
return|;
block|}
end_function
begin_comment
comment|/*  * ListMode ListView Implementation */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function
DECL|function|paintDragDrop
name|void
name|QListModeViewBase
operator|::
name|paintDragDrop
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
comment|// FIXME: Until the we can provide a proper drop indicator
comment|// in IconMode, it makes no sense to show it
name|dd
operator|->
name|paintDropIndicator
argument_list|(
name|painter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|position
name|QAbstractItemView
operator|::
name|DropIndicatorPosition
name|QListModeViewBase
operator|::
name|position
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QAbstractItemView
operator|::
name|DropIndicatorPosition
name|r
init|=
name|QAbstractItemView
operator|::
name|OnViewport
decl_stmt|;
if|if
condition|(
operator|!
name|dd
operator|->
name|overwrite
condition|)
block|{
specifier|const
name|int
name|margin
init|=
literal|2
decl_stmt|;
if|if
condition|(
name|pos
operator|.
name|x
argument_list|()
operator|-
name|rect
operator|.
name|left
argument_list|()
operator|<
name|margin
condition|)
block|{
name|r
operator|=
name|QAbstractItemView
operator|::
name|AboveItem
expr_stmt|;
comment|// Visually, on the left
block|}
elseif|else
if|if
condition|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|pos
operator|.
name|x
argument_list|()
operator|<
name|margin
condition|)
block|{
name|r
operator|=
name|QAbstractItemView
operator|::
name|BelowItem
expr_stmt|;
comment|// Visually, on the right
block|}
elseif|else
if|if
condition|(
name|rect
operator|.
name|contains
argument_list|(
name|pos
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|r
operator|=
name|QAbstractItemView
operator|::
name|OnItem
expr_stmt|;
block|}
block|}
else|else
block|{
name|QRect
name|touchingRect
init|=
name|rect
decl_stmt|;
name|touchingRect
operator|.
name|adjust
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|touchingRect
operator|.
name|contains
argument_list|(
name|pos
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|r
operator|=
name|QAbstractItemView
operator|::
name|OnItem
expr_stmt|;
block|}
block|}
if|if
condition|(
name|r
operator|==
name|QAbstractItemView
operator|::
name|OnItem
operator|&&
operator|(
operator|!
operator|(
name|dd
operator|->
name|model
operator|->
name|flags
argument_list|(
name|index
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsDropEnabled
operator|)
operator|)
condition|)
name|r
operator|=
name|pos
operator|.
name|x
argument_list|()
operator|<
name|rect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
condition|?
name|QAbstractItemView
operator|::
name|AboveItem
else|:
name|QAbstractItemView
operator|::
name|BelowItem
expr_stmt|;
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|dragMoveEvent
name|void
name|QListModeViewBase
operator|::
name|dragMoveEvent
parameter_list|(
name|QDragMoveEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|qq
operator|->
name|dragDropMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|InternalMove
operator|&&
operator|(
name|event
operator|->
name|source
argument_list|()
operator|!=
name|qq
operator|||
operator|!
operator|(
name|event
operator|->
name|possibleActions
argument_list|()
operator|&
name|Qt
operator|::
name|MoveAction
operator|)
operator|)
condition|)
return|return;
comment|// ignore by default
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
comment|// can't use indexAt, doesn't account for spacing.
name|QPoint
name|p
init|=
name|event
operator|->
name|pos
argument_list|()
decl_stmt|;
name|QRect
name|rect
argument_list|(
name|p
operator|.
name|x
argument_list|()
operator|+
name|horizontalOffset
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
operator|+
name|verticalOffset
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
operator|-
name|dd
operator|->
name|spacing
argument_list|()
argument_list|,
operator|-
name|dd
operator|->
name|spacing
argument_list|()
argument_list|,
name|dd
operator|->
name|spacing
argument_list|()
argument_list|,
name|dd
operator|->
name|spacing
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|intersectVector
init|=
name|dd
operator|->
name|intersectingSet
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|QModelIndex
name|index
init|=
name|intersectVector
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|?
name|intersectVector
operator|.
name|last
argument_list|()
else|:
name|QModelIndex
argument_list|()
decl_stmt|;
name|dd
operator|->
name|hover
operator|=
name|index
expr_stmt|;
if|if
condition|(
operator|!
name|dd
operator|->
name|droppingOnItself
argument_list|(
name|event
argument_list|,
name|index
argument_list|)
operator|&&
name|dd
operator|->
name|canDecode
argument_list|(
name|event
argument_list|)
condition|)
block|{
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
operator|&&
name|dd
operator|->
name|showDropIndicator
condition|)
block|{
name|QRect
name|rect
init|=
name|qq
operator|->
name|visualRect
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|dd
operator|->
name|dropIndicatorPosition
operator|=
name|position
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|,
name|rect
argument_list|,
name|index
argument_list|)
expr_stmt|;
comment|// if spacing, should try to draw between items, not just next to item.
switch|switch
condition|(
name|dd
operator|->
name|dropIndicatorPosition
condition|)
block|{
case|case
name|QAbstractItemView
operator|::
name|AboveItem
case|:
if|if
condition|(
name|dd
operator|->
name|isIndexDropEnabled
argument_list|(
name|index
operator|.
name|parent
argument_list|()
argument_list|)
condition|)
block|{
name|dd
operator|->
name|dropIndicatorRect
operator|=
name|QRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|-
name|dd
operator|->
name|spacing
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dd
operator|->
name|dropIndicatorRect
operator|=
name|QRect
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|QAbstractItemView
operator|::
name|BelowItem
case|:
if|if
condition|(
name|dd
operator|->
name|isIndexDropEnabled
argument_list|(
name|index
operator|.
name|parent
argument_list|()
argument_list|)
condition|)
block|{
name|dd
operator|->
name|dropIndicatorRect
operator|=
name|QRect
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|+
name|dd
operator|->
name|spacing
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dd
operator|->
name|dropIndicatorRect
operator|=
name|QRect
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|QAbstractItemView
operator|::
name|OnItem
case|:
if|if
condition|(
name|dd
operator|->
name|isIndexDropEnabled
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|dd
operator|->
name|dropIndicatorRect
operator|=
name|rect
expr_stmt|;
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dd
operator|->
name|dropIndicatorRect
operator|=
name|QRect
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|QAbstractItemView
operator|::
name|OnViewport
case|:
name|dd
operator|->
name|dropIndicatorRect
operator|=
name|QRect
argument_list|()
expr_stmt|;
if|if
condition|(
name|dd
operator|->
name|isIndexDropEnabled
argument_list|(
name|qq
operator|->
name|rootIndex
argument_list|()
argument_list|)
condition|)
block|{
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
comment|// allow dropping in empty areas
block|}
break|break;
block|}
block|}
else|else
block|{
name|dd
operator|->
name|dropIndicatorRect
operator|=
name|QRect
argument_list|()
expr_stmt|;
name|dd
operator|->
name|dropIndicatorPosition
operator|=
name|QAbstractItemView
operator|::
name|OnViewport
expr_stmt|;
if|if
condition|(
name|dd
operator|->
name|isIndexDropEnabled
argument_list|(
name|qq
operator|->
name|rootIndex
argument_list|()
argument_list|)
condition|)
block|{
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
comment|// allow dropping in empty areas
block|}
block|}
name|dd
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
comment|// can decode
if|if
condition|(
name|dd
operator|->
name|shouldAutoScroll
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
name|qq
operator|->
name|startAutoScroll
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     If the event hasn't already been accepted, determines the index to drop on.      if (row == -1&& col == -1)         // append to this drop index     else         // place at row, col in drop index      If it returns true a drop can be done, and dropRow, dropCol and dropIndex reflects the position of the drop.     \internal   */
end_comment
begin_function
DECL|function|dropOn
name|bool
name|QListModeViewBase
operator|::
name|dropOn
parameter_list|(
name|QDropEvent
modifier|*
name|event
parameter_list|,
name|int
modifier|*
name|dropRow
parameter_list|,
name|int
modifier|*
name|dropCol
parameter_list|,
name|QModelIndex
modifier|*
name|dropIndex
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|isAccepted
argument_list|()
condition|)
return|return
literal|false
return|;
name|QModelIndex
name|index
decl_stmt|;
if|if
condition|(
name|dd
operator|->
name|viewport
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
comment|// can't use indexAt, doesn't account for spacing.
name|QPoint
name|p
init|=
name|event
operator|->
name|pos
argument_list|()
decl_stmt|;
name|QRect
name|rect
argument_list|(
name|p
operator|.
name|x
argument_list|()
operator|+
name|horizontalOffset
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
operator|+
name|verticalOffset
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|rect
operator|.
name|adjust
argument_list|(
operator|-
name|dd
operator|->
name|spacing
argument_list|()
argument_list|,
operator|-
name|dd
operator|->
name|spacing
argument_list|()
argument_list|,
name|dd
operator|->
name|spacing
argument_list|()
argument_list|,
name|dd
operator|->
name|spacing
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|intersectVector
init|=
name|dd
operator|->
name|intersectingSet
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|index
operator|=
name|intersectVector
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|?
name|intersectVector
operator|.
name|last
argument_list|()
else|:
name|QModelIndex
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
name|index
operator|=
name|dd
operator|->
name|root
expr_stmt|;
block|}
comment|// If we are allowed to do the drop
if|if
condition|(
name|dd
operator|->
name|model
operator|->
name|supportedDropActions
argument_list|()
operator|&
name|event
operator|->
name|dropAction
argument_list|()
condition|)
block|{
name|int
name|row
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|col
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|index
operator|!=
name|dd
operator|->
name|root
condition|)
block|{
name|dd
operator|->
name|dropIndicatorPosition
operator|=
name|position
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|,
name|qq
operator|->
name|visualRect
argument_list|(
name|index
argument_list|)
argument_list|,
name|index
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|dd
operator|->
name|dropIndicatorPosition
condition|)
block|{
case|case
name|QAbstractItemView
operator|::
name|AboveItem
case|:
name|row
operator|=
name|index
operator|.
name|row
argument_list|()
expr_stmt|;
name|col
operator|=
name|index
operator|.
name|column
argument_list|()
expr_stmt|;
name|index
operator|=
name|index
operator|.
name|parent
argument_list|()
expr_stmt|;
break|break;
case|case
name|QAbstractItemView
operator|::
name|BelowItem
case|:
name|row
operator|=
name|index
operator|.
name|row
argument_list|()
operator|+
literal|1
expr_stmt|;
name|col
operator|=
name|index
operator|.
name|column
argument_list|()
expr_stmt|;
name|index
operator|=
name|index
operator|.
name|parent
argument_list|()
expr_stmt|;
break|break;
case|case
name|QAbstractItemView
operator|::
name|OnItem
case|:
case|case
name|QAbstractItemView
operator|::
name|OnViewport
case|:
break|break;
block|}
block|}
else|else
block|{
name|dd
operator|->
name|dropIndicatorPosition
operator|=
name|QAbstractItemView
operator|::
name|OnViewport
expr_stmt|;
block|}
operator|*
name|dropIndex
operator|=
name|index
expr_stmt|;
operator|*
name|dropRow
operator|=
name|row
expr_stmt|;
operator|*
name|dropCol
operator|=
name|col
expr_stmt|;
if|if
condition|(
operator|!
name|dd
operator|->
name|droppingOnItself
argument_list|(
name|event
argument_list|,
name|index
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_DRAGANDDROP
end_comment
begin_function
DECL|function|updateVerticalScrollBar
name|void
name|QListModeViewBase
operator|::
name|updateVerticalScrollBar
parameter_list|(
specifier|const
name|QSize
modifier|&
name|step
parameter_list|)
block|{
if|if
condition|(
name|verticalScrollMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
operator|&&
operator|(
operator|(
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|TopToBottom
operator|&&
operator|!
name|isWrapping
argument_list|()
operator|)
operator|||
operator|(
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|LeftToRight
operator|&&
name|isWrapping
argument_list|()
operator|)
operator|)
condition|)
block|{
specifier|const
name|int
name|steps
init|=
operator|(
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|TopToBottom
condition|?
name|scrollValueMap
else|:
name|segmentPositions
operator|)
operator|.
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|steps
operator|>
literal|0
condition|)
block|{
specifier|const
name|int
name|pageSteps
init|=
name|perItemScrollingPageSteps
argument_list|(
name|viewport
argument_list|()
operator|->
name|height
argument_list|()
argument_list|,
name|contentsSize
operator|.
name|height
argument_list|()
argument_list|,
name|isWrapping
argument_list|()
argument_list|)
decl_stmt|;
name|verticalScrollBar
argument_list|()
operator|->
name|setSingleStep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verticalScrollBar
argument_list|()
operator|->
name|setPageStep
argument_list|(
name|pageSteps
argument_list|)
expr_stmt|;
name|verticalScrollBar
argument_list|()
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
name|steps
operator|-
name|pageSteps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verticalScrollBar
argument_list|()
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// } else if (vertical&& d->isWrapping()&& d->movement == Static) {
comment|// ### wrapped scrolling in flow direction
block|}
else|else
block|{
name|QCommonListViewBase
operator|::
name|updateVerticalScrollBar
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateHorizontalScrollBar
name|void
name|QListModeViewBase
operator|::
name|updateHorizontalScrollBar
parameter_list|(
specifier|const
name|QSize
modifier|&
name|step
parameter_list|)
block|{
if|if
condition|(
name|horizontalScrollMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
operator|&&
operator|(
operator|(
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|TopToBottom
operator|&&
name|isWrapping
argument_list|()
operator|)
operator|||
operator|(
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|LeftToRight
operator|&&
operator|!
name|isWrapping
argument_list|()
operator|)
operator|)
condition|)
block|{
name|int
name|steps
init|=
operator|(
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|TopToBottom
condition|?
name|segmentPositions
else|:
name|scrollValueMap
operator|)
operator|.
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|steps
operator|>
literal|0
condition|)
block|{
specifier|const
name|int
name|pageSteps
init|=
name|perItemScrollingPageSteps
argument_list|(
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|contentsSize
operator|.
name|width
argument_list|()
argument_list|,
name|isWrapping
argument_list|()
argument_list|)
decl_stmt|;
name|horizontalScrollBar
argument_list|()
operator|->
name|setSingleStep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|horizontalScrollBar
argument_list|()
operator|->
name|setPageStep
argument_list|(
name|pageSteps
argument_list|)
expr_stmt|;
name|horizontalScrollBar
argument_list|()
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
name|steps
operator|-
name|pageSteps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|horizontalScrollBar
argument_list|()
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QCommonListViewBase
operator|::
name|updateHorizontalScrollBar
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|verticalScrollToValue
name|int
name|QListModeViewBase
operator|::
name|verticalScrollToValue
parameter_list|(
name|int
name|index
parameter_list|,
name|QListView
operator|::
name|ScrollHint
name|hint
parameter_list|,
name|bool
name|above
parameter_list|,
name|bool
name|below
parameter_list|,
specifier|const
name|QRect
modifier|&
name|area
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|verticalScrollMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
condition|)
block|{
name|int
name|value
decl_stmt|;
if|if
condition|(
name|scrollValueMap
operator|.
name|isEmpty
argument_list|()
condition|)
name|value
operator|=
literal|0
expr_stmt|;
else|else
name|value
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|scrollValueMap
operator|.
name|at
argument_list|(
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
argument_list|,
name|flowPositions
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|above
condition|)
name|hint
operator|=
name|QListView
operator|::
name|PositionAtTop
expr_stmt|;
elseif|else
if|if
condition|(
name|below
condition|)
name|hint
operator|=
name|QListView
operator|::
name|PositionAtBottom
expr_stmt|;
if|if
condition|(
name|hint
operator|==
name|QListView
operator|::
name|EnsureVisible
condition|)
return|return
name|value
return|;
return|return
name|perItemScrollToValue
argument_list|(
name|index
argument_list|,
name|value
argument_list|,
name|area
operator|.
name|height
argument_list|()
argument_list|,
name|hint
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|isWrapping
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
return|return
name|QCommonListViewBase
operator|::
name|verticalScrollToValue
argument_list|(
name|index
argument_list|,
name|hint
argument_list|,
name|above
argument_list|,
name|below
argument_list|,
name|area
argument_list|,
name|rect
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|horizontalOffset
name|int
name|QListModeViewBase
operator|::
name|horizontalOffset
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|horizontalScrollMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
condition|)
block|{
if|if
condition|(
name|isWrapping
argument_list|()
condition|)
block|{
if|if
condition|(
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|TopToBottom
operator|&&
operator|!
name|segmentPositions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|int
name|max
init|=
name|segmentPositions
operator|.
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|currentValue
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|int
name|position
init|=
name|segmentPositions
operator|.
name|at
argument_list|(
name|currentValue
argument_list|)
decl_stmt|;
name|int
name|maximumValue
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|horizontalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|int
name|maximum
init|=
name|segmentPositions
operator|.
name|at
argument_list|(
name|maximumValue
argument_list|)
decl_stmt|;
return|return
operator|(
name|isRightToLeft
argument_list|()
condition|?
name|maximum
operator|-
name|position
else|:
name|position
operator|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|LeftToRight
operator|&&
operator|!
name|flowPositions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|position
init|=
name|flowPositions
operator|.
name|at
argument_list|(
name|scrollValueMap
operator|.
name|at
argument_list|(
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maximum
init|=
name|flowPositions
operator|.
name|at
argument_list|(
name|scrollValueMap
operator|.
name|at
argument_list|(
name|horizontalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|isRightToLeft
argument_list|()
condition|?
name|maximum
operator|-
name|position
else|:
name|position
operator|)
return|;
block|}
block|}
return|return
name|QCommonListViewBase
operator|::
name|horizontalOffset
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|verticalOffset
name|int
name|QListModeViewBase
operator|::
name|verticalOffset
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|verticalScrollMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
condition|)
block|{
if|if
condition|(
name|isWrapping
argument_list|()
condition|)
block|{
if|if
condition|(
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|LeftToRight
operator|&&
operator|!
name|segmentPositions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|value
init|=
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>=
name|segmentPositions
operator|.
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|segmentPositions
operator|.
name|at
argument_list|(
name|value
argument_list|)
operator|-
name|spacing
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|TopToBottom
operator|&&
operator|!
name|flowPositions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|value
init|=
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
name|scrollValueMap
operator|.
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|flowPositions
operator|.
name|at
argument_list|(
name|scrollValueMap
operator|.
name|at
argument_list|(
name|value
argument_list|)
argument_list|)
operator|-
name|spacing
argument_list|()
return|;
block|}
block|}
return|return
name|QCommonListViewBase
operator|::
name|verticalOffset
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|horizontalScrollToValue
name|int
name|QListModeViewBase
operator|::
name|horizontalScrollToValue
parameter_list|(
name|int
name|index
parameter_list|,
name|QListView
operator|::
name|ScrollHint
name|hint
parameter_list|,
name|bool
name|leftOf
parameter_list|,
name|bool
name|rightOf
parameter_list|,
specifier|const
name|QRect
modifier|&
name|area
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|horizontalScrollMode
argument_list|()
operator|!=
name|QAbstractItemView
operator|::
name|ScrollPerItem
condition|)
return|return
name|QCommonListViewBase
operator|::
name|horizontalScrollToValue
argument_list|(
name|index
argument_list|,
name|hint
argument_list|,
name|leftOf
argument_list|,
name|rightOf
argument_list|,
name|area
argument_list|,
name|rect
argument_list|)
return|;
name|int
name|value
decl_stmt|;
if|if
condition|(
name|scrollValueMap
operator|.
name|isEmpty
argument_list|()
condition|)
name|value
operator|=
literal|0
expr_stmt|;
else|else
name|value
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|scrollValueMap
operator|.
name|at
argument_list|(
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
argument_list|,
name|flowPositions
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftOf
condition|)
name|hint
operator|=
name|QListView
operator|::
name|PositionAtTop
expr_stmt|;
elseif|else
if|if
condition|(
name|rightOf
condition|)
name|hint
operator|=
name|QListView
operator|::
name|PositionAtBottom
expr_stmt|;
if|if
condition|(
name|hint
operator|==
name|QListView
operator|::
name|EnsureVisible
condition|)
return|return
name|value
return|;
return|return
name|perItemScrollToValue
argument_list|(
name|index
argument_list|,
name|value
argument_list|,
name|area
operator|.
name|width
argument_list|()
argument_list|,
name|hint
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|isWrapping
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|scrollContentsBy
name|void
name|QListModeViewBase
operator|::
name|scrollContentsBy
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
name|bool
name|scrollElasticBand
parameter_list|)
block|{
comment|// ### reorder this logic
specifier|const
name|int
name|verticalValue
init|=
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
decl_stmt|;
specifier|const
name|int
name|horizontalValue
init|=
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|vertical
init|=
operator|(
name|verticalScrollMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
operator|)
decl_stmt|;
specifier|const
name|bool
name|horizontal
init|=
operator|(
name|horizontalScrollMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
operator|)
decl_stmt|;
if|if
condition|(
name|isWrapping
argument_list|()
condition|)
block|{
if|if
condition|(
name|segmentPositions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
specifier|const
name|int
name|max
init|=
name|segmentPositions
operator|.
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|horizontal
operator|&&
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|TopToBottom
operator|&&
name|dx
operator|!=
literal|0
condition|)
block|{
name|int
name|currentValue
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|horizontalValue
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|int
name|previousValue
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|currentValue
operator|+
name|dx
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|int
name|currentCoordinate
init|=
name|segmentPositions
operator|.
name|at
argument_list|(
name|currentValue
argument_list|)
operator|-
name|spacing
argument_list|()
decl_stmt|;
name|int
name|previousCoordinate
init|=
name|segmentPositions
operator|.
name|at
argument_list|(
name|previousValue
argument_list|)
operator|-
name|spacing
argument_list|()
decl_stmt|;
name|dx
operator|=
name|previousCoordinate
operator|-
name|currentCoordinate
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|vertical
operator|&&
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|LeftToRight
operator|&&
name|dy
operator|!=
literal|0
condition|)
block|{
name|int
name|currentValue
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|verticalValue
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|int
name|previousValue
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|currentValue
operator|+
name|dy
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|int
name|currentCoordinate
init|=
name|segmentPositions
operator|.
name|at
argument_list|(
name|currentValue
argument_list|)
operator|-
name|spacing
argument_list|()
decl_stmt|;
name|int
name|previousCoordinate
init|=
name|segmentPositions
operator|.
name|at
argument_list|(
name|previousValue
argument_list|)
operator|-
name|spacing
argument_list|()
decl_stmt|;
name|dy
operator|=
name|previousCoordinate
operator|-
name|currentCoordinate
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|flowPositions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
specifier|const
name|int
name|max
init|=
name|scrollValueMap
operator|.
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|vertical
operator|&&
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|TopToBottom
operator|&&
name|dy
operator|!=
literal|0
condition|)
block|{
name|int
name|currentValue
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|verticalValue
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|int
name|previousValue
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|currentValue
operator|+
name|dy
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|int
name|currentCoordinate
init|=
name|flowPositions
operator|.
name|at
argument_list|(
name|scrollValueMap
operator|.
name|at
argument_list|(
name|currentValue
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|previousCoordinate
init|=
name|flowPositions
operator|.
name|at
argument_list|(
name|scrollValueMap
operator|.
name|at
argument_list|(
name|previousValue
argument_list|)
argument_list|)
decl_stmt|;
name|dy
operator|=
name|previousCoordinate
operator|-
name|currentCoordinate
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|horizontal
operator|&&
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|LeftToRight
operator|&&
name|dx
operator|!=
literal|0
condition|)
block|{
name|int
name|currentValue
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|horizontalValue
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|int
name|previousValue
init|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|currentValue
operator|+
name|dx
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|int
name|currentCoordinate
init|=
name|flowPositions
operator|.
name|at
argument_list|(
name|scrollValueMap
operator|.
name|at
argument_list|(
name|currentValue
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|previousCoordinate
init|=
name|flowPositions
operator|.
name|at
argument_list|(
name|scrollValueMap
operator|.
name|at
argument_list|(
name|previousValue
argument_list|)
argument_list|)
decl_stmt|;
name|dx
operator|=
name|previousCoordinate
operator|-
name|currentCoordinate
expr_stmt|;
block|}
block|}
name|QCommonListViewBase
operator|::
name|scrollContentsBy
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|,
name|scrollElasticBand
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doBatchedItemLayout
name|bool
name|QListModeViewBase
operator|::
name|doBatchedItemLayout
parameter_list|(
specifier|const
name|QListViewLayoutInfo
modifier|&
name|info
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|doStaticLayout
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchStartRow
operator|>
name|max
condition|)
block|{
comment|// stop items layout
name|flowPositions
operator|.
name|resize
argument_list|(
name|flowPositions
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|segmentPositions
operator|.
name|resize
argument_list|(
name|segmentPositions
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|segmentStartRows
operator|.
name|resize
argument_list|(
name|segmentStartRows
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|// done
block|}
return|return
literal|false
return|;
comment|// not done
block|}
end_function
begin_function
DECL|function|indexToListViewItem
name|QListViewItem
name|QListModeViewBase
operator|::
name|indexToListViewItem
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|flowPositions
operator|.
name|isEmpty
argument_list|()
operator|||
name|segmentPositions
operator|.
name|isEmpty
argument_list|()
operator|||
name|index
operator|.
name|row
argument_list|()
operator|>=
name|flowPositions
operator|.
name|count
argument_list|()
condition|)
return|return
name|QListViewItem
argument_list|()
return|;
specifier|const
name|int
name|segment
init|=
name|qBinarySearch
argument_list|<
name|int
argument_list|>
argument_list|(
name|segmentStartRows
argument_list|,
name|index
operator|.
name|row
argument_list|()
argument_list|,
literal|0
argument_list|,
name|segmentStartRows
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QStyleOptionViewItemV4
name|options
init|=
name|viewOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|rect
operator|.
name|setSize
argument_list|(
name|contentsSize
argument_list|)
expr_stmt|;
name|QSize
name|size
init|=
operator|(
name|uniformItemSizes
argument_list|()
operator|&&
name|cachedItemSize
argument_list|()
operator|.
name|isValid
argument_list|()
operator|)
condition|?
name|cachedItemSize
argument_list|()
else|:
name|itemSize
argument_list|(
name|options
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|QPoint
name|pos
decl_stmt|;
if|if
condition|(
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
block|{
name|pos
operator|.
name|setX
argument_list|(
name|flowPositions
operator|.
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|.
name|setY
argument_list|(
name|segmentPositions
operator|.
name|at
argument_list|(
name|segment
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TopToBottom
name|pos
operator|.
name|setY
argument_list|(
name|flowPositions
operator|.
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|.
name|setX
argument_list|(
name|segmentPositions
operator|.
name|at
argument_list|(
name|segment
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isWrapping
argument_list|()
condition|)
block|{
comment|// make the items as wide as the segment
name|int
name|right
init|=
operator|(
name|segment
operator|+
literal|1
operator|>=
name|segmentPositions
operator|.
name|count
argument_list|()
condition|?
name|contentsSize
operator|.
name|width
argument_list|()
else|:
name|segmentPositions
operator|.
name|at
argument_list|(
name|segment
operator|+
literal|1
argument_list|)
operator|)
decl_stmt|;
name|size
operator|.
name|setWidth
argument_list|(
name|right
operator|-
name|pos
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// make the items as wide as the viewport
name|size
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|QListViewItem
argument_list|(
name|QRect
argument_list|(
name|pos
argument_list|,
name|size
argument_list|)
argument_list|,
name|index
operator|.
name|row
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|initStaticLayout
name|QPoint
name|QListModeViewBase
operator|::
name|initStaticLayout
parameter_list|(
specifier|const
name|QListViewLayoutInfo
modifier|&
name|info
parameter_list|)
block|{
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|first
operator|==
literal|0
condition|)
block|{
name|flowPositions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|segmentPositions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|segmentStartRows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|segmentExtents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scrollValueMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|x
operator|=
name|info
operator|.
name|bounds
operator|.
name|left
argument_list|()
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
name|y
operator|=
name|info
operator|.
name|bounds
operator|.
name|top
argument_list|()
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
name|segmentPositions
operator|.
name|append
argument_list|(
name|info
operator|.
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|?
name|y
else|:
name|x
argument_list|)
expr_stmt|;
name|segmentStartRows
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|wrap
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
block|{
name|x
operator|=
name|batchSavedPosition
expr_stmt|;
name|y
operator|=
name|segmentPositions
operator|.
name|last
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// flow == QListView::TopToBottom
name|x
operator|=
name|segmentPositions
operator|.
name|last
argument_list|()
expr_stmt|;
name|y
operator|=
name|batchSavedPosition
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// not first and not wrap
if|if
condition|(
name|info
operator|.
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
block|{
name|x
operator|=
name|batchSavedPosition
expr_stmt|;
name|y
operator|=
name|info
operator|.
name|bounds
operator|.
name|top
argument_list|()
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
block|}
else|else
block|{
comment|// flow == QListView::TopToBottom
name|x
operator|=
name|info
operator|.
name|bounds
operator|.
name|left
argument_list|()
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
name|y
operator|=
name|batchSavedPosition
expr_stmt|;
block|}
block|}
return|return
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|doStaticLayout
name|void
name|QListModeViewBase
operator|::
name|doStaticLayout
parameter_list|(
specifier|const
name|QListViewLayoutInfo
modifier|&
name|info
parameter_list|)
block|{
specifier|const
name|bool
name|useItemSize
init|=
operator|!
name|info
operator|.
name|grid
operator|.
name|isValid
argument_list|()
decl_stmt|;
specifier|const
name|QPoint
name|topLeft
init|=
name|initStaticLayout
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|QStyleOptionViewItemV4
name|option
init|=
name|viewOptions
argument_list|()
decl_stmt|;
name|option
operator|.
name|rect
operator|=
name|info
operator|.
name|bounds
expr_stmt|;
name|option
operator|.
name|rect
operator|.
name|adjust
argument_list|(
name|info
operator|.
name|spacing
argument_list|,
name|info
operator|.
name|spacing
argument_list|,
operator|-
name|info
operator|.
name|spacing
argument_list|,
operator|-
name|info
operator|.
name|spacing
argument_list|)
expr_stmt|;
comment|// The static layout data structures are as follows:
comment|// One vector contains the coordinate in the direction of layout flow.
comment|// Another vector contains the coordinates of the segments.
comment|// A third vector contains the index (model row) of the first item
comment|// of each segment.
name|int
name|segStartPosition
decl_stmt|;
name|int
name|segEndPosition
decl_stmt|;
name|int
name|deltaFlowPosition
decl_stmt|;
name|int
name|deltaSegPosition
decl_stmt|;
name|int
name|deltaSegHint
decl_stmt|;
name|int
name|flowPosition
decl_stmt|;
name|int
name|segPosition
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
block|{
name|segStartPosition
operator|=
name|info
operator|.
name|bounds
operator|.
name|left
argument_list|()
expr_stmt|;
name|segEndPosition
operator|=
name|info
operator|.
name|bounds
operator|.
name|width
argument_list|()
expr_stmt|;
name|flowPosition
operator|=
name|topLeft
operator|.
name|x
argument_list|()
expr_stmt|;
name|segPosition
operator|=
name|topLeft
operator|.
name|y
argument_list|()
expr_stmt|;
name|deltaFlowPosition
operator|=
name|info
operator|.
name|grid
operator|.
name|width
argument_list|()
expr_stmt|;
comment|// dx
name|deltaSegPosition
operator|=
name|useItemSize
condition|?
name|batchSavedDeltaSeg
else|:
name|info
operator|.
name|grid
operator|.
name|height
argument_list|()
expr_stmt|;
comment|// dy
name|deltaSegHint
operator|=
name|info
operator|.
name|grid
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// flow == QListView::TopToBottom
name|segStartPosition
operator|=
name|info
operator|.
name|bounds
operator|.
name|top
argument_list|()
expr_stmt|;
name|segEndPosition
operator|=
name|info
operator|.
name|bounds
operator|.
name|height
argument_list|()
expr_stmt|;
name|flowPosition
operator|=
name|topLeft
operator|.
name|y
argument_list|()
expr_stmt|;
name|segPosition
operator|=
name|topLeft
operator|.
name|x
argument_list|()
expr_stmt|;
name|deltaFlowPosition
operator|=
name|info
operator|.
name|grid
operator|.
name|height
argument_list|()
expr_stmt|;
comment|// dy
name|deltaSegPosition
operator|=
name|useItemSize
condition|?
name|batchSavedDeltaSeg
else|:
name|info
operator|.
name|grid
operator|.
name|width
argument_list|()
expr_stmt|;
comment|// dx
name|deltaSegHint
operator|=
name|info
operator|.
name|grid
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|row
init|=
name|info
operator|.
name|first
init|;
name|row
operator|<=
name|info
operator|.
name|last
condition|;
operator|++
name|row
control|)
block|{
if|if
condition|(
name|isHidden
argument_list|(
name|row
argument_list|)
condition|)
block|{
comment|// ###
name|flowPositions
operator|.
name|append
argument_list|(
name|flowPosition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if we are not using a grid, we need to find the deltas
if|if
condition|(
name|useItemSize
condition|)
block|{
name|QSize
name|hint
init|=
name|itemSize
argument_list|(
name|option
argument_list|,
name|modelIndex
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
block|{
name|deltaFlowPosition
operator|=
name|hint
operator|.
name|width
argument_list|()
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
name|deltaSegHint
operator|=
name|hint
operator|.
name|height
argument_list|()
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
block|}
else|else
block|{
comment|// TopToBottom
name|deltaFlowPosition
operator|=
name|hint
operator|.
name|height
argument_list|()
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
name|deltaSegHint
operator|=
name|hint
operator|.
name|width
argument_list|()
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
block|}
block|}
comment|// create new segment
if|if
condition|(
name|info
operator|.
name|wrap
operator|&&
operator|(
name|flowPosition
operator|+
name|deltaFlowPosition
operator|>=
name|segEndPosition
operator|)
condition|)
block|{
name|segmentExtents
operator|.
name|append
argument_list|(
name|flowPosition
argument_list|)
expr_stmt|;
name|flowPosition
operator|=
name|info
operator|.
name|spacing
operator|+
name|segStartPosition
expr_stmt|;
name|segPosition
operator|+=
name|deltaSegPosition
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|wrap
condition|)
name|segPosition
operator|+=
name|info
operator|.
name|spacing
expr_stmt|;
name|segmentPositions
operator|.
name|append
argument_list|(
name|segPosition
argument_list|)
expr_stmt|;
name|segmentStartRows
operator|.
name|append
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|deltaSegPosition
operator|=
literal|0
expr_stmt|;
block|}
comment|// save the flow position of this item
name|scrollValueMap
operator|.
name|append
argument_list|(
name|flowPositions
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|flowPositions
operator|.
name|append
argument_list|(
name|flowPosition
argument_list|)
expr_stmt|;
comment|// prepare for the next item
name|deltaSegPosition
operator|=
name|qMax
argument_list|(
name|deltaSegHint
argument_list|,
name|deltaSegPosition
argument_list|)
expr_stmt|;
name|flowPosition
operator|+=
name|info
operator|.
name|spacing
operator|+
name|deltaFlowPosition
expr_stmt|;
block|}
block|}
comment|// used when laying out next batch
name|batchSavedPosition
operator|=
name|flowPosition
expr_stmt|;
name|batchSavedDeltaSeg
operator|=
name|deltaSegPosition
expr_stmt|;
name|batchStartRow
operator|=
name|info
operator|.
name|last
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|last
operator|==
name|info
operator|.
name|max
condition|)
name|flowPosition
operator|-=
name|info
operator|.
name|spacing
expr_stmt|;
comment|// remove extra spacing
comment|// set the contents size
name|QRect
name|rect
init|=
name|info
operator|.
name|bounds
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
block|{
name|rect
operator|.
name|setRight
argument_list|(
name|segmentPositions
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|?
name|flowPosition
else|:
name|info
operator|.
name|bounds
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setBottom
argument_list|(
name|segPosition
operator|+
name|deltaSegPosition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TopToBottom
name|rect
operator|.
name|setRight
argument_list|(
name|segPosition
operator|+
name|deltaSegPosition
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setBottom
argument_list|(
name|segmentPositions
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|?
name|flowPosition
else|:
name|info
operator|.
name|bounds
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|contentsSize
operator|=
name|QSize
argument_list|(
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
comment|// if it is the last batch, save the end of the segments
if|if
condition|(
name|info
operator|.
name|last
operator|==
name|info
operator|.
name|max
condition|)
block|{
name|segmentExtents
operator|.
name|append
argument_list|(
name|flowPosition
argument_list|)
expr_stmt|;
name|scrollValueMap
operator|.
name|append
argument_list|(
name|flowPositions
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|flowPositions
operator|.
name|append
argument_list|(
name|flowPosition
argument_list|)
expr_stmt|;
name|segmentPositions
operator|.
name|append
argument_list|(
name|info
operator|.
name|wrap
condition|?
name|segPosition
operator|+
name|deltaSegPosition
else|:
name|INT_MAX
argument_list|)
expr_stmt|;
block|}
comment|// if the new items are visble, update the viewport
name|QRect
name|changedRect
argument_list|(
name|topLeft
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clipRect
argument_list|()
operator|.
name|intersects
argument_list|(
name|changedRect
argument_list|)
condition|)
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal   Finds the set of items intersecting with \a area.   In this function, itemsize is counted from topleft to the start of the next item. */
end_comment
begin_function
DECL|function|intersectingSet
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|QListModeViewBase
operator|::
name|intersectingSet
parameter_list|(
specifier|const
name|QRect
modifier|&
name|area
parameter_list|)
specifier|const
block|{
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|ret
decl_stmt|;
name|int
name|segStartPosition
decl_stmt|;
name|int
name|segEndPosition
decl_stmt|;
name|int
name|flowStartPosition
decl_stmt|;
name|int
name|flowEndPosition
decl_stmt|;
if|if
condition|(
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
block|{
name|segStartPosition
operator|=
name|area
operator|.
name|top
argument_list|()
expr_stmt|;
name|segEndPosition
operator|=
name|area
operator|.
name|bottom
argument_list|()
expr_stmt|;
name|flowStartPosition
operator|=
name|area
operator|.
name|left
argument_list|()
expr_stmt|;
name|flowEndPosition
operator|=
name|area
operator|.
name|right
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|segStartPosition
operator|=
name|area
operator|.
name|left
argument_list|()
expr_stmt|;
name|segEndPosition
operator|=
name|area
operator|.
name|right
argument_list|()
expr_stmt|;
name|flowStartPosition
operator|=
name|area
operator|.
name|top
argument_list|()
expr_stmt|;
name|flowEndPosition
operator|=
name|area
operator|.
name|bottom
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|segmentPositions
operator|.
name|count
argument_list|()
operator|<
literal|2
operator|||
name|flowPositions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
comment|// the last segment position is actually the edge of the last segment
specifier|const
name|int
name|segLast
init|=
name|segmentPositions
operator|.
name|count
argument_list|()
operator|-
literal|2
decl_stmt|;
name|int
name|seg
init|=
name|qBinarySearch
argument_list|<
name|int
argument_list|>
argument_list|(
name|segmentPositions
argument_list|,
name|segStartPosition
argument_list|,
literal|0
argument_list|,
name|segLast
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|seg
operator|<=
name|segLast
operator|&&
name|segmentPositions
operator|.
name|at
argument_list|(
name|seg
argument_list|)
operator|<=
name|segEndPosition
condition|;
operator|++
name|seg
control|)
block|{
name|int
name|first
init|=
name|segmentStartRows
operator|.
name|at
argument_list|(
name|seg
argument_list|)
decl_stmt|;
name|int
name|last
init|=
operator|(
name|seg
operator|<
name|segLast
condition|?
name|segmentStartRows
operator|.
name|at
argument_list|(
name|seg
operator|+
literal|1
argument_list|)
else|:
name|batchStartRow
operator|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|segmentExtents
operator|.
name|at
argument_list|(
name|seg
argument_list|)
operator|<
name|flowStartPosition
condition|)
continue|continue;
name|int
name|row
init|=
name|qBinarySearch
argument_list|<
name|int
argument_list|>
argument_list|(
name|flowPositions
argument_list|,
name|flowStartPosition
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|row
operator|<=
name|last
operator|&&
name|flowPositions
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|<=
name|flowEndPosition
condition|;
operator|++
name|row
control|)
block|{
if|if
condition|(
name|isHidden
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|QModelIndex
name|index
init|=
name|modelIndex
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
condition|)
name|ret
operator|+=
name|index
expr_stmt|;
if|#
directive|if
literal|0
comment|// for debugging
block|else                 qWarning("intersectingSet: row %d was invalid", row);
endif|#
directive|endif
block|}
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|dataChanged
name|void
name|QListModeViewBase
operator|::
name|dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
block|{
name|dd
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapToViewport
name|QRect
name|QListModeViewBase
operator|::
name|mapToViewport
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isWrapping
argument_list|()
condition|)
return|return
name|rect
return|;
comment|// If the listview is in "listbox-mode", the items are as wide as the view.
comment|// But we don't shrink the items.
name|QRect
name|result
init|=
name|rect
decl_stmt|;
if|if
condition|(
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|TopToBottom
condition|)
block|{
name|result
operator|.
name|setLeft
argument_list|(
name|spacing
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|contentsSize
operator|.
name|width
argument_list|()
argument_list|,
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
argument_list|)
operator|-
literal|2
operator|*
name|spacing
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// LeftToRight
name|result
operator|.
name|setTop
argument_list|(
name|spacing
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|contentsSize
operator|.
name|height
argument_list|()
argument_list|,
name|viewport
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
operator|-
literal|2
operator|*
name|spacing
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|perItemScrollingPageSteps
name|int
name|QListModeViewBase
operator|::
name|perItemScrollingPageSteps
parameter_list|(
name|int
name|length
parameter_list|,
name|int
name|bounds
parameter_list|,
name|bool
name|wrap
parameter_list|)
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|positions
decl_stmt|;
if|if
condition|(
name|wrap
condition|)
name|positions
operator|=
name|segmentPositions
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|flowPositions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|positions
operator|.
name|reserve
argument_list|(
name|scrollValueMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|int
name|itemShown
decl|,
name|scrollValueMap
control|)
name|positions
operator|.
name|append
argument_list|(
name|flowPositions
operator|.
name|at
argument_list|(
name|itemShown
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|positions
operator|.
name|isEmpty
argument_list|()
operator|||
name|bounds
operator|<=
name|length
condition|)
return|return
name|positions
operator|.
name|count
argument_list|()
return|;
if|if
condition|(
name|uniformItemSizes
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|positions
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|positions
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|>
literal|0
condition|)
return|return
name|length
operator|/
name|positions
operator|.
name|at
argument_list|(
name|i
argument_list|)
return|;
return|return
literal|0
return|;
comment|// all items had height 0
block|}
name|int
name|pageSteps
init|=
literal|0
decl_stmt|;
name|int
name|steps
init|=
name|positions
operator|.
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|max
init|=
name|qMax
argument_list|(
name|length
argument_list|,
name|bounds
argument_list|)
decl_stmt|;
name|int
name|min
init|=
name|qMin
argument_list|(
name|length
argument_list|,
name|bounds
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|min
operator|-
operator|(
name|max
operator|-
name|positions
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
while|while
condition|(
name|pos
operator|>=
literal|0
operator|&&
name|steps
operator|>
literal|0
condition|)
block|{
name|pos
operator|-=
operator|(
name|positions
operator|.
name|at
argument_list|(
name|steps
argument_list|)
operator|-
name|positions
operator|.
name|at
argument_list|(
name|steps
operator|-
literal|1
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
comment|//this item should be visible
operator|++
name|pageSteps
expr_stmt|;
operator|--
name|steps
expr_stmt|;
block|}
comment|// at this point we know that positions has at least one entry
return|return
name|qMax
argument_list|(
name|pageSteps
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|perItemScrollToValue
name|int
name|QListModeViewBase
operator|::
name|perItemScrollToValue
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|scrollValue
parameter_list|,
name|int
name|viewportSize
parameter_list|,
name|QAbstractItemView
operator|::
name|ScrollHint
name|hint
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|bool
name|wrap
parameter_list|,
name|int
name|itemExtent
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|<
literal|0
condition|)
return|return
name|scrollValue
return|;
if|if
condition|(
operator|!
name|wrap
condition|)
block|{
name|int
name|topIndex
init|=
name|index
decl_stmt|;
specifier|const
name|int
name|bottomIndex
init|=
name|topIndex
decl_stmt|;
specifier|const
name|int
name|bottomCoordinate
init|=
name|flowPositions
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
while|while
condition|(
name|topIndex
operator|>
literal|0
operator|&&
operator|(
name|bottomCoordinate
operator|-
name|flowPositions
operator|.
name|at
argument_list|(
name|topIndex
operator|-
literal|1
argument_list|)
operator|+
name|itemExtent
operator|)
operator|<=
operator|(
name|viewportSize
operator|)
condition|)
block|{
name|topIndex
operator|--
expr_stmt|;
block|}
specifier|const
name|int
name|itemCount
init|=
name|bottomIndex
operator|-
name|topIndex
operator|+
literal|1
decl_stmt|;
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|QAbstractItemView
operator|::
name|PositionAtTop
case|:
return|return
name|index
return|;
case|case
name|QAbstractItemView
operator|::
name|PositionAtBottom
case|:
return|return
name|index
operator|-
name|itemCount
operator|+
literal|1
return|;
case|case
name|QAbstractItemView
operator|::
name|PositionAtCenter
case|:
return|return
name|index
operator|-
operator|(
name|itemCount
operator|/
literal|2
operator|)
return|;
default|default:
break|break;
block|}
block|}
else|else
block|{
comment|// wrapping
name|Qt
operator|::
name|Orientation
name|flowOrientation
init|=
operator|(
name|flow
argument_list|()
operator|==
name|QListView
operator|::
name|LeftToRight
condition|?
name|Qt
operator|::
name|Horizontal
else|:
name|Qt
operator|::
name|Vertical
operator|)
decl_stmt|;
if|if
condition|(
name|flowOrientation
operator|==
name|orientation
condition|)
block|{
comment|// scrolling in the "flow" direction
comment|// ### wrapped scrolling in the flow direction
return|return
name|flowPositions
operator|.
name|at
argument_list|(
name|index
argument_list|)
return|;
comment|// ### always pixel based for now
block|}
elseif|else
if|if
condition|(
operator|!
name|segmentStartRows
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// we are scrolling in the "segment" direction
name|int
name|segment
init|=
name|qBinarySearch
argument_list|<
name|int
argument_list|>
argument_list|(
name|segmentStartRows
argument_list|,
name|index
argument_list|,
literal|0
argument_list|,
name|segmentStartRows
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|leftSegment
init|=
name|segment
decl_stmt|;
specifier|const
name|int
name|rightSegment
init|=
name|leftSegment
decl_stmt|;
specifier|const
name|int
name|bottomCoordinate
init|=
name|segmentPositions
operator|.
name|at
argument_list|(
name|segment
argument_list|)
decl_stmt|;
while|while
condition|(
name|leftSegment
operator|>
name|scrollValue
operator|&&
operator|(
name|bottomCoordinate
operator|-
name|segmentPositions
operator|.
name|at
argument_list|(
name|leftSegment
operator|-
literal|1
argument_list|)
operator|+
name|itemExtent
operator|)
operator|<=
operator|(
name|viewportSize
operator|)
condition|)
block|{
name|leftSegment
operator|--
expr_stmt|;
block|}
specifier|const
name|int
name|segmentCount
init|=
name|rightSegment
operator|-
name|leftSegment
operator|+
literal|1
decl_stmt|;
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|QAbstractItemView
operator|::
name|PositionAtTop
case|:
return|return
name|segment
return|;
case|case
name|QAbstractItemView
operator|::
name|PositionAtBottom
case|:
return|return
name|segment
operator|-
name|segmentCount
operator|+
literal|1
return|;
case|case
name|QAbstractItemView
operator|::
name|PositionAtCenter
case|:
return|return
name|segment
operator|-
operator|(
name|segmentCount
operator|/
literal|2
operator|)
return|;
default|default:
break|break;
block|}
block|}
block|}
return|return
name|scrollValue
return|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QListModeViewBase
operator|::
name|clear
parameter_list|()
block|{
name|flowPositions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|segmentPositions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|segmentStartRows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|segmentExtents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|batchSavedPosition
operator|=
literal|0
expr_stmt|;
name|batchStartRow
operator|=
literal|0
expr_stmt|;
name|batchSavedDeltaSeg
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * IconMode ListView Implementation */
end_comment
begin_function
DECL|function|setPositionForIndex
name|void
name|QIconModeViewBase
operator|::
name|setPositionForIndex
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|position
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|.
name|row
argument_list|()
operator|>=
name|items
operator|.
name|count
argument_list|()
condition|)
return|return;
specifier|const
name|QSize
name|oldContents
init|=
name|contentsSize
decl_stmt|;
name|qq
operator|->
name|update
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// update old position
name|moveItem
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|qq
operator|->
name|update
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// update new position
if|if
condition|(
name|contentsSize
operator|!=
name|oldContents
condition|)
name|dd
operator|->
name|viewUpdateGeometries
argument_list|()
expr_stmt|;
comment|// update the scroll bars
block|}
end_function
begin_function
DECL|function|appendHiddenRow
name|void
name|QIconModeViewBase
operator|::
name|appendHiddenRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|row
operator|>=
literal|0
operator|&&
name|row
operator|<
name|items
operator|.
name|count
argument_list|()
condition|)
comment|//remove item
name|tree
operator|.
name|removeLeaf
argument_list|(
name|items
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|rect
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|QCommonListViewBase
operator|::
name|appendHiddenRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeHiddenRow
name|void
name|QIconModeViewBase
operator|::
name|removeHiddenRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|QCommonListViewBase
operator|::
name|removeHiddenRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
operator|&&
name|row
operator|<
name|items
operator|.
name|count
argument_list|()
condition|)
comment|//insert item
name|tree
operator|.
name|insertLeaf
argument_list|(
name|items
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|rect
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function
DECL|function|paintDragDrop
name|void
name|QIconModeViewBase
operator|::
name|paintDragDrop
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
if|if
condition|(
operator|!
name|draggedItems
operator|.
name|isEmpty
argument_list|()
operator|&&
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|draggedItemsPos
argument_list|)
condition|)
block|{
comment|//we need to draw the items that arre dragged
name|painter
operator|->
name|translate
argument_list|(
name|draggedItemsDelta
argument_list|()
argument_list|)
expr_stmt|;
name|QStyleOptionViewItemV4
name|option
init|=
name|viewOptions
argument_list|()
decl_stmt|;
name|option
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|draggedItems
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QListViewItem
name|item
init|=
name|indexToListViewItem
argument_list|(
operator|*
name|it
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|draggedItems
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|item
operator|=
name|indexToListViewItem
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
name|option
operator|.
name|rect
operator|=
name|viewItemRect
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|delegate
argument_list|(
operator|*
name|it
argument_list|)
operator|->
name|paint
argument_list|(
name|painter
argument_list|,
name|option
argument_list|,
operator|*
name|it
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|filterStartDrag
name|bool
name|QIconModeViewBase
operator|::
name|filterStartDrag
parameter_list|(
name|Qt
operator|::
name|DropActions
name|supportedActions
parameter_list|)
block|{
comment|// This function does the same thing as in QAbstractItemView::startDrag(),
comment|// plus adding viewitems to the draggedItems list.
comment|// We need these items to draw the drag items
name|QModelIndexList
name|indexes
init|=
name|dd
operator|->
name|selectionModel
operator|->
name|selectedIndexes
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexes
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|viewport
argument_list|()
operator|->
name|acceptDrops
argument_list|()
condition|)
block|{
name|QModelIndexList
operator|::
name|ConstIterator
name|it
init|=
name|indexes
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|indexes
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
if|if
condition|(
name|dd
operator|->
name|model
operator|->
name|flags
argument_list|(
operator|*
name|it
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsDragEnabled
operator|&&
operator|(
operator|*
name|it
operator|)
operator|.
name|column
argument_list|()
operator|==
name|dd
operator|->
name|column
condition|)
name|draggedItems
operator|.
name|push_back
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
block|}
name|QDrag
modifier|*
name|drag
init|=
operator|new
name|QDrag
argument_list|(
name|qq
argument_list|)
decl_stmt|;
name|drag
operator|->
name|setMimeData
argument_list|(
name|dd
operator|->
name|model
operator|->
name|mimeData
argument_list|(
name|indexes
argument_list|)
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|DropAction
name|action
init|=
name|drag
operator|->
name|exec
argument_list|(
name|supportedActions
argument_list|,
name|Qt
operator|::
name|CopyAction
argument_list|)
decl_stmt|;
name|draggedItems
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|action
operator|==
name|Qt
operator|::
name|MoveAction
condition|)
name|dd
operator|->
name|clearOrRemove
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|filterDropEvent
name|bool
name|QIconModeViewBase
operator|::
name|filterDropEvent
parameter_list|(
name|QDropEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|source
argument_list|()
operator|!=
name|qq
condition|)
return|return
literal|false
return|;
specifier|const
name|QSize
name|contents
init|=
name|contentsSize
decl_stmt|;
name|QPoint
name|offset
argument_list|(
name|horizontalOffset
argument_list|()
argument_list|,
name|verticalOffset
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|end
init|=
name|e
operator|->
name|pos
argument_list|()
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|qq
operator|->
name|acceptDrops
argument_list|()
condition|)
block|{
specifier|const
name|Qt
operator|::
name|ItemFlags
name|dropableFlags
init|=
name|Qt
operator|::
name|ItemIsDropEnabled
operator||
name|Qt
operator|::
name|ItemIsEnabled
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
modifier|&
name|dropIndices
init|=
name|intersectingSet
argument_list|(
name|QRect
argument_list|(
name|end
argument_list|,
name|QSize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QModelIndex
modifier|&
name|index
decl|,
name|dropIndices
control|)
if|if
condition|(
operator|(
name|index
operator|.
name|flags
argument_list|()
operator|&
name|dropableFlags
operator|)
operator|==
name|dropableFlags
condition|)
return|return
literal|false
return|;
block|}
name|QPoint
name|start
init|=
name|dd
operator|->
name|pressedPosition
decl_stmt|;
name|QPoint
name|delta
init|=
operator|(
name|dd
operator|->
name|movement
operator|==
name|QListView
operator|::
name|Snap
condition|?
name|snapToGrid
argument_list|(
name|end
argument_list|)
operator|-
name|snapToGrid
argument_list|(
name|start
argument_list|)
else|:
name|end
operator|-
name|start
operator|)
decl_stmt|;
name|QList
argument_list|<
name|QModelIndex
argument_list|>
name|indexes
init|=
name|dd
operator|->
name|selectionModel
operator|->
name|selectedIndexes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|dd
operator|->
name|rectForIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|viewport
argument_list|()
operator|->
name|update
argument_list|(
name|dd
operator|->
name|mapToViewport
argument_list|(
name|rect
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|QPoint
name|dest
init|=
name|rect
operator|.
name|topLeft
argument_list|()
operator|+
name|delta
decl_stmt|;
if|if
condition|(
name|qq
operator|->
name|isRightToLeft
argument_list|()
condition|)
name|dest
operator|.
name|setX
argument_list|(
name|dd
operator|->
name|flipX
argument_list|(
name|dest
operator|.
name|x
argument_list|()
argument_list|)
operator|-
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|moveItem
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|qq
operator|->
name|update
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|dd
operator|->
name|stopAutoScroll
argument_list|()
expr_stmt|;
name|draggedItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dd
operator|->
name|emitIndexesMoved
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
comment|// we have handled the event
comment|// if the size has not grown, we need to check if it has shrinked
if|if
condition|(
name|contentsSize
operator|!=
name|contents
condition|)
block|{
if|if
condition|(
operator|(
name|contentsSize
operator|.
name|width
argument_list|()
operator|<=
name|contents
operator|.
name|width
argument_list|()
operator|||
name|contentsSize
operator|.
name|height
argument_list|()
operator|<=
name|contents
operator|.
name|height
argument_list|()
operator|)
condition|)
block|{
name|updateContentsSize
argument_list|()
expr_stmt|;
block|}
name|dd
operator|->
name|viewUpdateGeometries
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|filterDragLeaveEvent
name|bool
name|QIconModeViewBase
operator|::
name|filterDragLeaveEvent
parameter_list|(
name|QDragLeaveEvent
modifier|*
name|e
parameter_list|)
block|{
name|viewport
argument_list|()
operator|->
name|update
argument_list|(
name|draggedItemsRect
argument_list|()
argument_list|)
expr_stmt|;
comment|// erase the area
name|draggedItemsPos
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// don't draw the dragged items
return|return
name|QCommonListViewBase
operator|::
name|filterDragLeaveEvent
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|filterDragMoveEvent
name|bool
name|QIconModeViewBase
operator|::
name|filterDragMoveEvent
parameter_list|(
name|QDragMoveEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|source
argument_list|()
operator|!=
name|qq
operator|||
operator|!
name|dd
operator|->
name|canDecode
argument_list|(
name|e
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// ignore by default
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
comment|// get old dragged items rect
name|QRect
name|itemsRect
init|=
name|this
operator|->
name|itemsRect
argument_list|(
name|draggedItems
argument_list|)
decl_stmt|;
name|viewport
argument_list|()
operator|->
name|update
argument_list|(
name|itemsRect
operator|.
name|translated
argument_list|(
name|draggedItemsDelta
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// update position
name|draggedItemsPos
operator|=
name|e
operator|->
name|pos
argument_list|()
expr_stmt|;
comment|// get new items rect
name|viewport
argument_list|()
operator|->
name|update
argument_list|(
name|itemsRect
operator|.
name|translated
argument_list|(
name|draggedItemsDelta
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the item under the cursor to current
name|QModelIndex
name|index
decl_stmt|;
if|if
condition|(
name|movement
argument_list|()
operator|==
name|QListView
operator|::
name|Snap
condition|)
block|{
name|QRect
name|rect
argument_list|(
name|snapToGrid
argument_list|(
name|e
operator|->
name|pos
argument_list|()
operator|+
name|offset
argument_list|()
argument_list|)
argument_list|,
name|gridSize
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|intersectVector
init|=
name|intersectingSet
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|index
operator|=
name|intersectVector
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|?
name|intersectVector
operator|.
name|last
argument_list|()
else|:
name|QModelIndex
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|index
operator|=
name|qq
operator|->
name|indexAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check if we allow drops here
if|if
condition|(
name|draggedItems
operator|.
name|contains
argument_list|(
name|index
argument_list|)
condition|)
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
comment|// allow changing item position
elseif|else
if|if
condition|(
name|dd
operator|->
name|model
operator|->
name|flags
argument_list|(
name|index
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsDropEnabled
condition|)
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
comment|// allow dropping on dropenabled items
elseif|else
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
comment|// allow dropping in empty areas
comment|// the event was treated. do autoscrolling
if|if
condition|(
name|dd
operator|->
name|shouldAutoScroll
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
name|dd
operator|->
name|startAutoScroll
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_function
DECL|function|setRowCount
name|void
name|QIconModeViewBase
operator|::
name|setRowCount
parameter_list|(
name|int
name|rowCount
parameter_list|)
block|{
name|tree
operator|.
name|create
argument_list|(
name|qMax
argument_list|(
name|rowCount
operator|-
name|hiddenCount
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scrollContentsBy
name|void
name|QIconModeViewBase
operator|::
name|scrollContentsBy
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
name|bool
name|scrollElasticBand
parameter_list|)
block|{
if|if
condition|(
name|scrollElasticBand
condition|)
name|dd
operator|->
name|scrollElasticBandBy
argument_list|(
name|isRightToLeft
argument_list|()
condition|?
operator|-
name|dx
else|:
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
name|QCommonListViewBase
operator|::
name|scrollContentsBy
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|,
name|scrollElasticBand
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|draggedItems
operator|.
name|isEmpty
argument_list|()
condition|)
name|viewport
argument_list|()
operator|->
name|update
argument_list|(
name|draggedItemsRect
argument_list|()
operator|.
name|translated
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dataChanged
name|void
name|QIconModeViewBase
operator|::
name|dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|)
block|{
if|if
condition|(
name|column
argument_list|()
operator|>=
name|topLeft
operator|.
name|column
argument_list|()
operator|&&
name|column
argument_list|()
operator|<=
name|bottomRight
operator|.
name|column
argument_list|()
condition|)
block|{
name|QStyleOptionViewItemV4
name|option
init|=
name|viewOptions
argument_list|()
decl_stmt|;
name|int
name|bottom
init|=
name|qMin
argument_list|(
name|items
operator|.
name|count
argument_list|()
argument_list|,
name|bottomRight
operator|.
name|row
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|topLeft
operator|.
name|row
argument_list|()
init|;
name|row
operator|<
name|bottom
condition|;
operator|++
name|row
control|)
name|items
index|[
name|row
index|]
operator|.
name|resize
argument_list|(
name|itemSize
argument_list|(
name|option
argument_list|,
name|modelIndex
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|doBatchedItemLayout
name|bool
name|QIconModeViewBase
operator|::
name|doBatchedItemLayout
parameter_list|(
specifier|const
name|QListViewLayoutInfo
modifier|&
name|info
parameter_list|,
name|int
name|max
parameter_list|)
block|{
if|if
condition|(
name|info
operator|.
name|last
operator|>=
name|items
operator|.
name|count
argument_list|()
condition|)
block|{
comment|//first we create the items
name|QStyleOptionViewItemV4
name|option
init|=
name|viewOptions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|items
operator|.
name|count
argument_list|()
init|;
name|row
operator|<=
name|info
operator|.
name|last
condition|;
operator|++
name|row
control|)
block|{
name|QSize
name|size
init|=
name|itemSize
argument_list|(
name|option
argument_list|,
name|modelIndex
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|QListViewItem
name|item
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
argument_list|,
name|row
argument_list|)
decl_stmt|;
comment|// default pos
name|items
operator|.
name|append
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|doDynamicLayout
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|batchStartRow
operator|>
name|max
operator|)
return|;
comment|// done
block|}
end_function
begin_function
DECL|function|indexToListViewItem
name|QListViewItem
name|QIconModeViewBase
operator|::
name|indexToListViewItem
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
operator|&&
name|index
operator|.
name|row
argument_list|()
operator|<
name|items
operator|.
name|count
argument_list|()
condition|)
return|return
name|items
operator|.
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
return|;
return|return
name|QListViewItem
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|initBspTree
name|void
name|QIconModeViewBase
operator|::
name|initBspTree
parameter_list|(
specifier|const
name|QSize
modifier|&
name|contents
parameter_list|)
block|{
comment|// remove all items from the tree
name|int
name|leafCount
init|=
name|tree
operator|.
name|leafCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|l
init|=
literal|0
init|;
name|l
operator|<
name|leafCount
condition|;
operator|++
name|l
control|)
name|tree
operator|.
name|leaf
argument_list|(
name|l
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// we have to get the bounding rect of the items before we can initialize the tree
name|QBspTree
operator|::
name|Node
operator|::
name|Type
name|type
init|=
name|QBspTree
operator|::
name|Node
operator|::
name|Both
decl_stmt|;
comment|// 2D
comment|// simple heuristics to get better bsp
if|if
condition|(
name|contents
operator|.
name|height
argument_list|()
operator|/
name|contents
operator|.
name|width
argument_list|()
operator|>=
literal|3
condition|)
name|type
operator|=
name|QBspTree
operator|::
name|Node
operator|::
name|HorizontalPlane
expr_stmt|;
elseif|else
if|if
condition|(
name|contents
operator|.
name|width
argument_list|()
operator|/
name|contents
operator|.
name|height
argument_list|()
operator|>=
literal|3
condition|)
name|type
operator|=
name|QBspTree
operator|::
name|Node
operator|::
name|VerticalPlane
expr_stmt|;
comment|// build tree for the bounding rect (not just the contents rect)
name|tree
operator|.
name|init
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|contents
operator|.
name|width
argument_list|()
argument_list|,
name|contents
operator|.
name|height
argument_list|()
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initDynamicLayout
name|QPoint
name|QIconModeViewBase
operator|::
name|initDynamicLayout
parameter_list|(
specifier|const
name|QListViewLayoutInfo
modifier|&
name|info
parameter_list|)
block|{
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|first
operator|==
literal|0
condition|)
block|{
name|x
operator|=
name|info
operator|.
name|bounds
operator|.
name|x
argument_list|()
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
name|y
operator|=
name|info
operator|.
name|bounds
operator|.
name|y
argument_list|()
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
name|items
operator|.
name|reserve
argument_list|(
name|rowCount
argument_list|()
operator|-
name|hiddenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|idx
init|=
name|info
operator|.
name|first
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|idx
operator|>
literal|0
operator|&&
operator|!
name|items
operator|.
name|at
argument_list|(
name|idx
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
operator|--
name|idx
expr_stmt|;
specifier|const
name|QListViewItem
modifier|&
name|item
init|=
name|items
operator|.
name|at
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|x
operator|=
name|item
operator|.
name|x
expr_stmt|;
name|y
operator|=
name|item
operator|.
name|y
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
name|x
operator|+=
operator|(
name|info
operator|.
name|grid
operator|.
name|isValid
argument_list|()
condition|?
name|info
operator|.
name|grid
operator|.
name|width
argument_list|()
else|:
name|item
operator|.
name|w
operator|)
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
else|else
name|y
operator|+=
operator|(
name|info
operator|.
name|grid
operator|.
name|isValid
argument_list|()
condition|?
name|info
operator|.
name|grid
operator|.
name|height
argument_list|()
else|:
name|item
operator|.
name|h
operator|)
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
block|}
return|return
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|doDynamicLayout
name|void
name|QIconModeViewBase
operator|::
name|doDynamicLayout
parameter_list|(
specifier|const
name|QListViewLayoutInfo
modifier|&
name|info
parameter_list|)
block|{
specifier|const
name|bool
name|useItemSize
init|=
operator|!
name|info
operator|.
name|grid
operator|.
name|isValid
argument_list|()
decl_stmt|;
specifier|const
name|QPoint
name|topLeft
init|=
name|initDynamicLayout
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|int
name|segStartPosition
decl_stmt|;
name|int
name|segEndPosition
decl_stmt|;
name|int
name|deltaFlowPosition
decl_stmt|;
name|int
name|deltaSegPosition
decl_stmt|;
name|int
name|deltaSegHint
decl_stmt|;
name|int
name|flowPosition
decl_stmt|;
name|int
name|segPosition
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
block|{
name|segStartPosition
operator|=
name|info
operator|.
name|bounds
operator|.
name|left
argument_list|()
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
name|segEndPosition
operator|=
name|info
operator|.
name|bounds
operator|.
name|right
argument_list|()
expr_stmt|;
name|deltaFlowPosition
operator|=
name|info
operator|.
name|grid
operator|.
name|width
argument_list|()
expr_stmt|;
comment|// dx
name|deltaSegPosition
operator|=
operator|(
name|useItemSize
condition|?
name|batchSavedDeltaSeg
else|:
name|info
operator|.
name|grid
operator|.
name|height
argument_list|()
operator|)
expr_stmt|;
comment|// dy
name|deltaSegHint
operator|=
name|info
operator|.
name|grid
operator|.
name|height
argument_list|()
expr_stmt|;
name|flowPosition
operator|=
name|topLeft
operator|.
name|x
argument_list|()
expr_stmt|;
name|segPosition
operator|=
name|topLeft
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// flow == QListView::TopToBottom
name|segStartPosition
operator|=
name|info
operator|.
name|bounds
operator|.
name|top
argument_list|()
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
name|segEndPosition
operator|=
name|info
operator|.
name|bounds
operator|.
name|bottom
argument_list|()
expr_stmt|;
name|deltaFlowPosition
operator|=
name|info
operator|.
name|grid
operator|.
name|height
argument_list|()
expr_stmt|;
comment|// dy
name|deltaSegPosition
operator|=
operator|(
name|useItemSize
condition|?
name|batchSavedDeltaSeg
else|:
name|info
operator|.
name|grid
operator|.
name|width
argument_list|()
operator|)
expr_stmt|;
comment|// dx
name|deltaSegHint
operator|=
name|info
operator|.
name|grid
operator|.
name|width
argument_list|()
expr_stmt|;
name|flowPosition
operator|=
name|topLeft
operator|.
name|y
argument_list|()
expr_stmt|;
name|segPosition
operator|=
name|topLeft
operator|.
name|x
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|moved
operator|.
name|count
argument_list|()
operator|!=
name|items
operator|.
name|count
argument_list|()
condition|)
name|moved
operator|.
name|resize
argument_list|(
name|items
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|rect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|topLeft
argument_list|)
decl_stmt|;
name|QListViewItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|info
operator|.
name|first
init|;
name|row
operator|<=
name|info
operator|.
name|last
condition|;
operator|++
name|row
control|)
block|{
name|item
operator|=
operator|&
name|items
index|[
name|row
index|]
expr_stmt|;
if|if
condition|(
name|isHidden
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|item
operator|->
name|invalidate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// if we are not using a grid, we need to find the deltas
if|if
condition|(
name|useItemSize
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
name|deltaFlowPosition
operator|=
name|item
operator|->
name|w
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
else|else
name|deltaFlowPosition
operator|=
name|item
operator|->
name|h
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
block|}
else|else
block|{
name|item
operator|->
name|w
operator|=
name|qMin
argument_list|<
name|int
argument_list|>
argument_list|(
name|info
operator|.
name|grid
operator|.
name|width
argument_list|()
argument_list|,
name|item
operator|->
name|w
argument_list|)
expr_stmt|;
name|item
operator|->
name|h
operator|=
name|qMin
argument_list|<
name|int
argument_list|>
argument_list|(
name|info
operator|.
name|grid
operator|.
name|height
argument_list|()
argument_list|,
name|item
operator|->
name|h
argument_list|)
expr_stmt|;
block|}
comment|// create new segment
if|if
condition|(
name|info
operator|.
name|wrap
operator|&&
name|flowPosition
operator|+
name|deltaFlowPosition
operator|>
name|segEndPosition
operator|&&
name|flowPosition
operator|>
name|segStartPosition
condition|)
block|{
name|flowPosition
operator|=
name|segStartPosition
expr_stmt|;
name|segPosition
operator|+=
name|deltaSegPosition
expr_stmt|;
if|if
condition|(
name|useItemSize
condition|)
name|deltaSegPosition
operator|=
literal|0
expr_stmt|;
block|}
comment|// We must delay calculation of the seg adjustment, as this item
comment|// may have caused a wrap to occur
if|if
condition|(
name|useItemSize
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
name|deltaSegHint
operator|=
name|item
operator|->
name|h
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
else|else
name|deltaSegHint
operator|=
name|item
operator|->
name|w
operator|+
name|info
operator|.
name|spacing
expr_stmt|;
name|deltaSegPosition
operator|=
name|qMax
argument_list|(
name|deltaSegPosition
argument_list|,
name|deltaSegHint
argument_list|)
expr_stmt|;
block|}
comment|// set the position of the item
comment|// ### idealy we should have some sort of alignment hint for the item
comment|// ### (normally that would be a point between the icon and the text)
if|if
condition|(
operator|!
name|moved
operator|.
name|testBit
argument_list|(
name|row
argument_list|)
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
block|{
if|if
condition|(
name|useItemSize
condition|)
block|{
name|item
operator|->
name|x
operator|=
name|flowPosition
expr_stmt|;
name|item
operator|->
name|y
operator|=
name|segPosition
expr_stmt|;
block|}
else|else
block|{
comment|// use grid
name|item
operator|->
name|x
operator|=
name|flowPosition
operator|+
operator|(
operator|(
name|deltaFlowPosition
operator|-
name|item
operator|->
name|w
operator|)
operator|/
literal|2
operator|)
expr_stmt|;
name|item
operator|->
name|y
operator|=
name|segPosition
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// TopToBottom
if|if
condition|(
name|useItemSize
condition|)
block|{
name|item
operator|->
name|y
operator|=
name|flowPosition
expr_stmt|;
name|item
operator|->
name|x
operator|=
name|segPosition
expr_stmt|;
block|}
else|else
block|{
comment|// use grid
name|item
operator|->
name|y
operator|=
name|flowPosition
operator|+
operator|(
operator|(
name|deltaFlowPosition
operator|-
name|item
operator|->
name|h
operator|)
operator|/
literal|2
operator|)
expr_stmt|;
name|item
operator|->
name|x
operator|=
name|segPosition
expr_stmt|;
block|}
block|}
block|}
comment|// let the contents contain the new item
if|if
condition|(
name|useItemSize
condition|)
name|rect
operator||=
name|item
operator|->
name|rect
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|info
operator|.
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
name|rect
operator||=
name|QRect
argument_list|(
name|flowPosition
argument_list|,
name|segPosition
argument_list|,
name|deltaFlowPosition
argument_list|,
name|deltaSegPosition
argument_list|)
expr_stmt|;
else|else
comment|// flow == TopToBottom
name|rect
operator||=
name|QRect
argument_list|(
name|segPosition
argument_list|,
name|flowPosition
argument_list|,
name|deltaSegPosition
argument_list|,
name|deltaFlowPosition
argument_list|)
expr_stmt|;
comment|// prepare for next item
name|flowPosition
operator|+=
name|deltaFlowPosition
expr_stmt|;
comment|// current position + item width + gap
block|}
block|}
name|batchSavedDeltaSeg
operator|=
name|deltaSegPosition
expr_stmt|;
name|batchStartRow
operator|=
name|info
operator|.
name|last
operator|+
literal|1
expr_stmt|;
name|bool
name|done
init|=
operator|(
name|info
operator|.
name|last
operator|>=
name|rowCount
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
comment|// resize the content area
if|if
condition|(
name|done
operator|||
operator|!
name|info
operator|.
name|bounds
operator|.
name|contains
argument_list|(
name|item
operator|->
name|rect
argument_list|()
argument_list|)
condition|)
block|{
name|contentsSize
operator|=
name|rect
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|flow
operator|==
name|QListView
operator|::
name|LeftToRight
condition|)
name|contentsSize
operator|.
name|rheight
argument_list|()
operator|+=
name|info
operator|.
name|spacing
expr_stmt|;
else|else
name|contentsSize
operator|.
name|rwidth
argument_list|()
operator|+=
name|info
operator|.
name|spacing
expr_stmt|;
block|}
if|if
condition|(
name|rect
operator|.
name|size
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
comment|// resize tree
name|int
name|insertFrom
init|=
name|info
operator|.
name|first
decl_stmt|;
if|if
condition|(
name|done
operator|||
name|info
operator|.
name|first
operator|==
literal|0
condition|)
block|{
name|initBspTree
argument_list|(
name|rect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|insertFrom
operator|=
literal|0
expr_stmt|;
block|}
comment|// insert items in tree
for|for
control|(
name|int
name|row
init|=
name|insertFrom
init|;
name|row
operator|<=
name|info
operator|.
name|last
condition|;
operator|++
name|row
control|)
name|tree
operator|.
name|insertLeaf
argument_list|(
name|items
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|rect
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
comment|// if the new items are visble, update the viewport
name|QRect
name|changedRect
argument_list|(
name|topLeft
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clipRect
argument_list|()
operator|.
name|intersects
argument_list|(
name|changedRect
argument_list|)
condition|)
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|intersectingSet
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|QIconModeViewBase
operator|::
name|intersectingSet
parameter_list|(
specifier|const
name|QRect
modifier|&
name|area
parameter_list|)
specifier|const
block|{
name|QIconModeViewBase
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QIconModeViewBase
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QBspTree
operator|::
name|Data
name|data
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|that
argument_list|)
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|res
decl_stmt|;
name|that
operator|->
name|interSectingVector
operator|=
operator|&
name|res
expr_stmt|;
name|that
operator|->
name|tree
operator|.
name|climbTree
argument_list|(
name|area
argument_list|,
operator|&
name|QIconModeViewBase
operator|::
name|addLeaf
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|that
operator|->
name|interSectingVector
operator|=
literal|0
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|itemsRect
name|QRect
name|QIconModeViewBase
operator|::
name|itemsRect
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
modifier|&
name|indexes
parameter_list|)
specifier|const
block|{
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|indexes
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QListViewItem
name|item
init|=
name|indexToListViewItem
argument_list|(
operator|*
name|it
argument_list|)
decl_stmt|;
name|QRect
name|rect
argument_list|(
name|item
operator|.
name|x
argument_list|,
name|item
operator|.
name|y
argument_list|,
name|item
operator|.
name|w
argument_list|,
name|item
operator|.
name|h
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|indexes
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|item
operator|=
name|indexToListViewItem
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
name|rect
operator||=
name|viewItemRect
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|rect
return|;
block|}
end_function
begin_function
DECL|function|itemIndex
name|int
name|QIconModeViewBase
operator|::
name|itemIndex
parameter_list|(
specifier|const
name|QListViewItem
modifier|&
name|item
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|i
init|=
name|item
operator|.
name|indexHint
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|items
operator|.
name|count
argument_list|()
condition|)
block|{
if|if
condition|(
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|item
condition|)
return|return
name|i
return|;
block|}
else|else
block|{
name|i
operator|=
name|items
operator|.
name|count
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
name|int
name|j
init|=
name|i
decl_stmt|;
name|int
name|c
init|=
name|items
operator|.
name|count
argument_list|()
decl_stmt|;
name|bool
name|a
init|=
literal|true
decl_stmt|;
name|bool
name|b
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|a
operator|||
name|b
condition|)
block|{
if|if
condition|(
name|a
condition|)
block|{
if|if
condition|(
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|item
condition|)
block|{
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|indexHint
operator|=
name|i
expr_stmt|;
return|return
name|i
return|;
block|}
name|a
operator|=
operator|++
name|i
operator|<
name|c
expr_stmt|;
block|}
if|if
condition|(
name|b
condition|)
block|{
if|if
condition|(
name|items
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|==
name|item
condition|)
block|{
name|items
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|.
name|indexHint
operator|=
name|j
expr_stmt|;
return|return
name|j
return|;
block|}
name|b
operator|=
operator|--
name|j
operator|>
operator|-
literal|1
expr_stmt|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|addLeaf
name|void
name|QIconModeViewBase
operator|::
name|addLeaf
parameter_list|(
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|leaf
parameter_list|,
specifier|const
name|QRect
modifier|&
name|area
parameter_list|,
name|uint
name|visited
parameter_list|,
name|QBspTree
operator|::
name|Data
name|data
parameter_list|)
block|{
name|QListViewItem
modifier|*
name|vi
decl_stmt|;
name|QIconModeViewBase
modifier|*
name|_this
init|=
cast|static_cast
argument_list|<
name|QIconModeViewBase
operator|*
argument_list|>
argument_list|(
name|data
operator|.
name|ptr
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leaf
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|idx
init|=
name|leaf
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
operator|||
name|idx
operator|>=
name|_this
operator|->
name|items
operator|.
name|count
argument_list|()
condition|)
continue|continue;
name|vi
operator|=
operator|&
name|_this
operator|->
name|items
index|[
name|idx
index|]
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|vi
argument_list|)
expr_stmt|;
if|if
condition|(
name|vi
operator|->
name|isValid
argument_list|()
operator|&&
name|vi
operator|->
name|rect
argument_list|()
operator|.
name|intersects
argument_list|(
name|area
argument_list|)
operator|&&
name|vi
operator|->
name|visited
operator|!=
name|visited
condition|)
block|{
name|QModelIndex
name|index
init|=
name|_this
operator|->
name|dd
operator|->
name|listViewItemToIndex
argument_list|(
operator|*
name|vi
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|_this
operator|->
name|interSectingVector
operator|->
name|append
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|vi
operator|->
name|visited
operator|=
name|visited
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|moveItem
name|void
name|QIconModeViewBase
operator|::
name|moveItem
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|dest
parameter_list|)
block|{
comment|// does not impact on the bintree itself or the contents rect
name|QListViewItem
modifier|*
name|item
init|=
operator|&
name|items
index|[
name|index
index|]
decl_stmt|;
name|QRect
name|rect
init|=
name|item
operator|->
name|rect
argument_list|()
decl_stmt|;
comment|// move the item without removing it from the tree
name|tree
operator|.
name|removeLeaf
argument_list|(
name|rect
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|item
operator|->
name|move
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|tree
operator|.
name|insertLeaf
argument_list|(
name|QRect
argument_list|(
name|dest
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|index
argument_list|)
expr_stmt|;
comment|// resize the contents area
name|contentsSize
operator|=
operator|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|contentsSize
argument_list|)
operator||
name|QRect
argument_list|(
name|dest
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
operator|)
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// mark the item as moved
if|if
condition|(
name|moved
operator|.
name|count
argument_list|()
operator|!=
name|items
operator|.
name|count
argument_list|()
condition|)
name|moved
operator|.
name|resize
argument_list|(
name|items
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|moved
operator|.
name|setBit
argument_list|(
name|index
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|snapToGrid
name|QPoint
name|QIconModeViewBase
operator|::
name|snapToGrid
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|int
name|x
init|=
name|pos
operator|.
name|x
argument_list|()
operator|-
operator|(
name|pos
operator|.
name|x
argument_list|()
operator|%
name|gridSize
argument_list|()
operator|.
name|width
argument_list|()
operator|)
decl_stmt|;
name|int
name|y
init|=
name|pos
operator|.
name|y
argument_list|()
operator|-
operator|(
name|pos
operator|.
name|y
argument_list|()
operator|%
name|gridSize
argument_list|()
operator|.
name|height
argument_list|()
operator|)
decl_stmt|;
return|return
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|draggedItemsDelta
name|QPoint
name|QIconModeViewBase
operator|::
name|draggedItemsDelta
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|movement
argument_list|()
operator|==
name|QListView
operator|::
name|Snap
condition|)
block|{
name|QPoint
name|snapdelta
init|=
name|QPoint
argument_list|(
operator|(
name|offset
argument_list|()
operator|.
name|x
argument_list|()
operator|%
name|gridSize
argument_list|()
operator|.
name|width
argument_list|()
operator|)
argument_list|,
operator|(
name|offset
argument_list|()
operator|.
name|y
argument_list|()
operator|%
name|gridSize
argument_list|()
operator|.
name|height
argument_list|()
operator|)
argument_list|)
decl_stmt|;
return|return
name|snapToGrid
argument_list|(
name|draggedItemsPos
operator|+
name|snapdelta
argument_list|)
operator|-
name|snapToGrid
argument_list|(
name|pressedPosition
argument_list|()
argument_list|)
operator|-
name|snapdelta
return|;
block|}
return|return
name|draggedItemsPos
operator|-
name|pressedPosition
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|draggedItemsRect
name|QRect
name|QIconModeViewBase
operator|::
name|draggedItemsRect
parameter_list|()
specifier|const
block|{
name|QRect
name|rect
init|=
name|itemsRect
argument_list|(
name|draggedItems
argument_list|)
decl_stmt|;
name|rect
operator|.
name|translate
argument_list|(
name|draggedItemsDelta
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
block|}
end_function
begin_function
DECL|function|scrollElasticBandBy
name|void
name|QListViewPrivate
operator|::
name|scrollElasticBandBy
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
if|if
condition|(
name|dx
operator|>
literal|0
condition|)
comment|// right
name|elasticBand
operator|.
name|moveRight
argument_list|(
name|elasticBand
operator|.
name|right
argument_list|()
operator|+
name|dx
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|dx
operator|<
literal|0
condition|)
comment|// left
name|elasticBand
operator|.
name|moveLeft
argument_list|(
name|elasticBand
operator|.
name|left
argument_list|()
operator|-
name|dx
argument_list|)
expr_stmt|;
if|if
condition|(
name|dy
operator|>
literal|0
condition|)
comment|// down
name|elasticBand
operator|.
name|moveBottom
argument_list|(
name|elasticBand
operator|.
name|bottom
argument_list|()
operator|+
name|dy
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|dy
operator|<
literal|0
condition|)
comment|// up
name|elasticBand
operator|.
name|moveTop
argument_list|(
name|elasticBand
operator|.
name|top
argument_list|()
operator|-
name|dy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QIconModeViewBase
operator|::
name|clear
parameter_list|()
block|{
name|tree
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|items
operator|.
name|clear
argument_list|()
expr_stmt|;
name|moved
operator|.
name|clear
argument_list|()
expr_stmt|;
name|batchStartRow
operator|=
literal|0
expr_stmt|;
name|batchSavedDeltaSeg
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateContentsSize
name|void
name|QIconModeViewBase
operator|::
name|updateContentsSize
parameter_list|()
block|{
name|QRect
name|bounding
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|bounding
operator||=
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|rect
argument_list|()
expr_stmt|;
name|contentsSize
operator|=
name|bounding
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|currentChanged
name|void
name|QListView
operator|::
name|currentChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|current
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|previous
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
if|if
condition|(
name|QAccessible
operator|::
name|isActive
argument_list|()
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|entry
init|=
name|visualIndex
argument_list|(
name|current
argument_list|)
operator|+
literal|1
decl_stmt|;
name|QAccessibleEvent
name|event
argument_list|(
name|this
argument_list|,
name|QAccessible
operator|::
name|Focus
argument_list|)
decl_stmt|;
name|event
operator|.
name|setChild
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
name|QAbstractItemView
operator|::
name|currentChanged
argument_list|(
name|current
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|selectionChanged
name|void
name|QListView
operator|::
name|selectionChanged
parameter_list|(
specifier|const
name|QItemSelection
modifier|&
name|selected
parameter_list|,
specifier|const
name|QItemSelection
modifier|&
name|deselected
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
if|if
condition|(
name|QAccessible
operator|::
name|isActive
argument_list|()
condition|)
block|{
comment|// ### does not work properly for selection ranges.
name|QModelIndex
name|sel
init|=
name|selected
operator|.
name|indexes
argument_list|()
operator|.
name|value
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sel
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|entry
init|=
name|visualIndex
argument_list|(
name|sel
argument_list|)
operator|+
literal|1
decl_stmt|;
name|QAccessibleEvent
name|event
argument_list|(
name|this
argument_list|,
name|QAccessible
operator|::
name|Selection
argument_list|)
decl_stmt|;
name|event
operator|.
name|setChild
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
name|QModelIndex
name|desel
init|=
name|deselected
operator|.
name|indexes
argument_list|()
operator|.
name|value
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|desel
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|entry
init|=
name|visualIndex
argument_list|(
name|desel
argument_list|)
operator|+
literal|1
decl_stmt|;
name|QAccessibleEvent
name|event
argument_list|(
name|this
argument_list|,
name|QAccessible
operator|::
name|SelectionRemove
argument_list|)
decl_stmt|;
name|event
operator|.
name|setChild
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
name|QAbstractItemView
operator|::
name|selectionChanged
argument_list|(
name|selected
argument_list|,
name|deselected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visualIndex
name|int
name|QListView
operator|::
name|visualIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QListView
argument_list|)
expr_stmt|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|QListViewItem
name|itm
init|=
name|d
operator|->
name|indexToListViewItem
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|int
name|visualIndex
init|=
name|d
operator|->
name|commonListView
operator|->
name|itemIndex
argument_list|(
name|itm
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<=
name|index
operator|.
name|row
argument_list|()
operator|&&
name|visualIndex
operator|>=
literal|0
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|->
name|isHidden
argument_list|(
name|row
argument_list|)
condition|)
name|visualIndex
operator|--
expr_stmt|;
block|}
return|return
name|visualIndex
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_LISTVIEW
end_comment
end_unit
