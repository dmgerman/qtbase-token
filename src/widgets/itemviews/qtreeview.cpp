begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtreeview.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
end_ifndef
begin_include
include|#
directive|include
file|<qheaderview.h>
end_include
begin_include
include|#
directive|include
file|<qitemdelegate.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qscrollbar.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qstack.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qpen.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|<qaccessible.h>
end_include
begin_include
include|#
directive|include
file|<qaccessible2.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<private/qtreeview_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qheaderview_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QTreeView     \brief The QTreeView class provides a default model/view implementation of a tree view.      \ingroup model-view     \ingroup advanced     \inmodule QtWidgets      A QTreeView implements a tree representation of items from a     model. This class is used to provide standard hierarchical lists that     were previously provided by the \c QListView class, but using the more     flexible approach provided by Qt's model/view architecture.      The QTreeView class is one of the \l{Model/View Classes} and is part of     Qt's \l{Model/View Programming}{model/view framework}.      QTreeView implements the interfaces defined by the     QAbstractItemView class to allow it to display data provided by     models derived from the QAbstractItemModel class.      It is simple to construct a tree view displaying data from a     model. In the following example, the contents of a directory are     supplied by a QFileSystemModel and displayed as a tree:      \snippet shareddirmodel/main.cpp 3     \snippet shareddirmodel/main.cpp 6      The model/view architecture ensures that the contents of the tree view     are updated as the model changes.      Items that have children can be in an expanded (children are     visible) or collapsed (children are hidden) state. When this state     changes a collapsed() or expanded() signal is emitted with the     model index of the relevant item.      The amount of indentation used to indicate levels of hierarchy is     controlled by the \l indentation property.      Headers in tree views are constructed using the QHeaderView class and can     be hidden using \c{header()->hide()}. Note that each header is configured     with its \l{QHeaderView::}{stretchLastSection} property set to true,     ensuring that the view does not waste any of the space assigned to it for     its header. If this value is set to true, this property will override the     resize mode set on the last section in the header.       \section1 Key Bindings      QTreeView supports a set of key bindings that enable the user to     navigate in the view and interact with the contents of items:      \table     \header \li Key \li Action     \row \li Up   \li Moves the cursor to the item in the same column on          the previous row. If the parent of the current item has no more rows to          navigate to, the cursor moves to the relevant item in the last row          of the sibling that precedes the parent.     \row \li Down \li Moves the cursor to the item in the same column on          the next row. If the parent of the current item has no more rows to          navigate to, the cursor moves to the relevant item in the first row          of the sibling that follows the parent.     \row \li Left  \li Hides the children of the current item (if present)          by collapsing a branch.     \row \li Minus  \li Same as LeftArrow.     \row \li Right \li Reveals the children of the current item (if present)          by expanding a branch.     \row \li Plus  \li Same as RightArrow.     \row \li Asterisk  \li Expands all children of the current item (if present).     \row \li PageUp   \li Moves the cursor up one page.     \row \li PageDown \li Moves the cursor down one page.     \row \li Home \li Moves the cursor to an item in the same column of the first          row of the first top-level item in the model.     \row \li End  \li Moves the cursor to an item in the same column of the last          row of the last top-level item in the model.     \row \li F2   \li In editable models, this opens the current item for editing.          The Escape key can be used to cancel the editing process and revert          any changes to the data displayed.     \endtable      \omit     Describe the expanding/collapsing concept if not covered elsewhere.     \endomit      \table 100%     \row \li \inlineimage windowsvista-treeview.png Screenshot of a Windows Vista style tree view          \li \inlineimage macintosh-treeview.png Screenshot of a Macintosh style tree view          \li \inlineimage fusion-treeview.png Screenshot of a Fusion style tree view     \row \li A \l{Windows Vista Style Widget Gallery}{Windows Vista style} tree view.          \li A \l{Macintosh Style Widget Gallery}{Macintosh style} tree view.          \li A \l{Fusion Style Widget Gallery}{Fusion style} tree view.     \endtable      \section1 Improving Performance      It is possible to give the view hints about the data it is handling in order     to improve its performance when displaying large numbers of items. One approach     that can be taken for views that are intended to display items with equal heights     is to set the \l uniformRowHeights property to true.      \sa QListView, QTreeWidget, {View Classes}, QAbstractItemModel, QAbstractItemView,         {Dir View Example} */
end_comment
begin_comment
comment|/*!   \fn void QTreeView::expanded(const QModelIndex&index)    This signal is emitted when the item specified by \a index is expanded. */
end_comment
begin_comment
comment|/*!   \fn void QTreeView::collapsed(const QModelIndex&index)    This signal is emitted when the item specified by \a index is collapsed. */
end_comment
begin_comment
comment|/*!     Constructs a tree view with a \a parent to represent a model's     data. Use setModel() to set the model.      \sa QAbstractItemModel */
end_comment
begin_constructor
DECL|function|QTreeView
name|QTreeView
operator|::
name|QTreeView
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemView
argument_list|(
operator|*
operator|new
name|QTreeViewPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|initialize
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_constructor
DECL|function|QTreeView
name|QTreeView
operator|::
name|QTreeView
parameter_list|(
name|QTreeViewPrivate
modifier|&
name|dd
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemView
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|initialize
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Destroys the tree view. */
end_comment
begin_destructor
DECL|function|~QTreeView
name|QTreeView
operator|::
name|~
name|QTreeView
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|setModel
name|void
name|QTreeView
operator|::
name|setModel
parameter_list|(
name|QAbstractItemModel
modifier|*
name|model
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|==
name|d
operator|->
name|model
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|model
operator|&&
name|d
operator|->
name|model
operator|!=
name|QAbstractItemModelPrivate
operator|::
name|staticEmptyModel
argument_list|()
condition|)
block|{
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|selectionModel
condition|)
block|{
comment|// support row editing
name|disconnect
argument_list|(
name|d
operator|->
name|selectionModel
argument_list|,
name|SIGNAL
argument_list|(
name|currentRowChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|d
operator|->
name|model
argument_list|,
name|SLOT
argument_list|(
name|submit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|viewItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|expandedIndexes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|hiddenIndexes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|header
operator|->
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|QAbstractItemView
operator|::
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|// QAbstractItemView connects to a private slot
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// do header layout after the tree
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|,
name|d
operator|->
name|header
argument_list|,
name|SLOT
argument_list|(
name|_q_layoutChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// QTreeView has a public slot for this
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sortingEnabled
condition|)
name|d
operator|->
name|_q_sortIndicatorChanged
argument_list|(
name|header
argument_list|()
operator|->
name|sortIndicatorSection
argument_list|()
argument_list|,
name|header
argument_list|()
operator|->
name|sortIndicatorOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|setRootIndex
name|void
name|QTreeView
operator|::
name|setRootIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|header
operator|->
name|setRootIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|QAbstractItemView
operator|::
name|setRootIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|setSelectionModel
name|void
name|QTreeView
operator|::
name|setSelectionModel
parameter_list|(
name|QItemSelectionModel
modifier|*
name|selectionModel
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|selectionModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|selectionModel
condition|)
block|{
comment|// support row editing
name|disconnect
argument_list|(
name|d
operator|->
name|selectionModel
argument_list|,
name|SIGNAL
argument_list|(
name|currentRowChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|d
operator|->
name|model
argument_list|,
name|SLOT
argument_list|(
name|submit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|header
operator|->
name|setSelectionModel
argument_list|(
name|selectionModel
argument_list|)
expr_stmt|;
name|QAbstractItemView
operator|::
name|setSelectionModel
argument_list|(
name|selectionModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|selectionModel
condition|)
block|{
comment|// support row editing
name|connect
argument_list|(
name|d
operator|->
name|selectionModel
argument_list|,
name|SIGNAL
argument_list|(
name|currentRowChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|d
operator|->
name|model
argument_list|,
name|SLOT
argument_list|(
name|submit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   Returns the header for the tree view.    \sa QAbstractItemModel::headerData() */
end_comment
begin_function
DECL|function|header
name|QHeaderView
modifier|*
name|QTreeView
operator|::
name|header
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|header
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the header for the tree view, to the given \a header.      The view takes ownership over the given \a header and deletes it     when a new header is set.      \sa QAbstractItemModel::headerData() */
end_comment
begin_function
DECL|function|setHeader
name|void
name|QTreeView
operator|::
name|setHeader
parameter_list|(
name|QHeaderView
modifier|*
name|header
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|==
name|d
operator|->
name|header
operator|||
operator|!
name|header
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|header
operator|&&
name|d
operator|->
name|header
operator|->
name|parent
argument_list|()
operator|==
name|this
condition|)
operator|delete
name|d
operator|->
name|header
expr_stmt|;
name|d
operator|->
name|header
operator|=
name|header
expr_stmt|;
name|d
operator|->
name|header
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|header
operator|->
name|d_func
argument_list|()
operator|->
name|setAllowUserMoveOfSection0
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|header
operator|->
name|model
argument_list|()
condition|)
block|{
name|d
operator|->
name|header
operator|->
name|setModel
argument_list|(
name|d
operator|->
name|model
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|selectionModel
condition|)
name|d
operator|->
name|header
operator|->
name|setSelectionModel
argument_list|(
name|d
operator|->
name|selectionModel
argument_list|)
expr_stmt|;
block|}
name|connect
argument_list|(
name|d
operator|->
name|header
argument_list|,
name|SIGNAL
argument_list|(
name|sectionResized
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|columnResized
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|header
argument_list|,
name|SIGNAL
argument_list|(
name|sectionMoved
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|columnMoved
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|header
argument_list|,
name|SIGNAL
argument_list|(
name|sectionCountChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|columnCountChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|header
argument_list|,
name|SIGNAL
argument_list|(
name|sectionHandleDoubleClicked
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|resizeColumnToContents
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|header
argument_list|,
name|SIGNAL
argument_list|(
name|geometriesChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateGeometries
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setSortingEnabled
argument_list|(
name|d
operator|->
name|sortingEnabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QTreeView::autoExpandDelay   \brief The delay time before items in a tree are opened during a drag and drop operation.   \since 4.3    This property holds the amount of time in milliseconds that the user must wait over   a node before that node will automatically open or close.  If the time is   set to less then 0 then it will not be activated.    By default, this property has a value of -1, meaning that auto-expansion is disabled. */
end_comment
begin_function
DECL|function|autoExpandDelay
name|int
name|QTreeView
operator|::
name|autoExpandDelay
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|autoExpandDelay
return|;
block|}
end_function
begin_function
DECL|function|setAutoExpandDelay
name|void
name|QTreeView
operator|::
name|setAutoExpandDelay
parameter_list|(
name|int
name|delay
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|autoExpandDelay
operator|=
name|delay
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QTreeView::indentation   \brief indentation of the items in the tree view.    This property holds the indentation measured in pixels of the items for each   level in the tree view. For top-level items, the indentation specifies the   horizontal distance from the viewport edge to the items in the first column;   for child items, it specifies their indentation from their parent items.    By default, this property has a value of 20. */
end_comment
begin_function
DECL|function|indentation
name|int
name|QTreeView
operator|::
name|indentation
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|indent
return|;
block|}
end_function
begin_function
DECL|function|setIndentation
name|void
name|QTreeView
operator|::
name|setIndentation
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|d
operator|->
name|indent
condition|)
block|{
name|d
operator|->
name|indent
operator|=
name|i
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \property QTreeView::rootIsDecorated   \brief whether to show controls for expanding and collapsing top-level items    Items with children are typically shown with controls to expand and collapse   them, allowing their children to be shown or hidden. If this property is   false, these controls are not shown for top-level items. This can be used to   make a single level tree structure appear like a simple list of items.    By default, this property is true. */
end_comment
begin_function
DECL|function|rootIsDecorated
name|bool
name|QTreeView
operator|::
name|rootIsDecorated
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|rootDecoration
return|;
block|}
end_function
begin_function
DECL|function|setRootIsDecorated
name|void
name|QTreeView
operator|::
name|setRootIsDecorated
parameter_list|(
name|bool
name|show
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|show
operator|!=
name|d
operator|->
name|rootDecoration
condition|)
block|{
name|d
operator|->
name|rootDecoration
operator|=
name|show
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \property QTreeView::uniformRowHeights   \brief whether all items in the treeview have the same height    This property should only be set to true if it is guaranteed that all items   in the view has the same height. This enables the view to do some   optimizations.    The height is obtained from the first item in the view.  It is updated   when the data changes on that item.    By default, this property is false. */
end_comment
begin_function
DECL|function|uniformRowHeights
name|bool
name|QTreeView
operator|::
name|uniformRowHeights
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|uniformRowHeights
return|;
block|}
end_function
begin_function
DECL|function|setUniformRowHeights
name|void
name|QTreeView
operator|::
name|setUniformRowHeights
parameter_list|(
name|bool
name|uniform
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|uniformRowHeights
operator|=
name|uniform
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QTreeView::itemsExpandable   \brief whether the items are expandable by the user.    This property holds whether the user can expand and collapse items   interactively.    By default, this property is true.  */
end_comment
begin_function
DECL|function|itemsExpandable
name|bool
name|QTreeView
operator|::
name|itemsExpandable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|itemsExpandable
return|;
block|}
end_function
begin_function
DECL|function|setItemsExpandable
name|void
name|QTreeView
operator|::
name|setItemsExpandable
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|itemsExpandable
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QTreeView::expandsOnDoubleClick   \since 4.4   \brief whether the items can be expanded by double-clicking.    This property holds whether the user can expand and collapse items   by double-clicking. The default value is true.    \sa itemsExpandable */
end_comment
begin_function
DECL|function|expandsOnDoubleClick
name|bool
name|QTreeView
operator|::
name|expandsOnDoubleClick
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|expandsOnDoubleClick
return|;
block|}
end_function
begin_function
DECL|function|setExpandsOnDoubleClick
name|void
name|QTreeView
operator|::
name|setExpandsOnDoubleClick
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|expandsOnDoubleClick
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the horizontal position of the \a column in the viewport. */
end_comment
begin_function
DECL|function|columnViewportPosition
name|int
name|QTreeView
operator|::
name|columnViewportPosition
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|header
operator|->
name|sectionViewportPosition
argument_list|(
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the width of the \a column.    \sa resizeColumnToContents(), setColumnWidth() */
end_comment
begin_function
DECL|function|columnWidth
name|int
name|QTreeView
operator|::
name|columnWidth
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|header
operator|->
name|sectionSize
argument_list|(
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.2    Sets the width of the given \a column to the \a width specified.    \sa columnWidth(), resizeColumnToContents() */
end_comment
begin_function
DECL|function|setColumnWidth
name|void
name|QTreeView
operator|::
name|setColumnWidth
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|width
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|header
operator|->
name|resizeSection
argument_list|(
name|column
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the column in the tree view whose header covers the \a x   coordinate given. */
end_comment
begin_function
DECL|function|columnAt
name|int
name|QTreeView
operator|::
name|columnAt
parameter_list|(
name|int
name|x
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|header
operator|->
name|logicalIndexAt
argument_list|(
name|x
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the \a column is hidden; otherwise returns false.      \sa hideColumn(), isRowHidden() */
end_comment
begin_function
DECL|function|isColumnHidden
name|bool
name|QTreeView
operator|::
name|isColumnHidden
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|header
operator|->
name|isSectionHidden
argument_list|(
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   If \a hide is true the \a column is hidden, otherwise the \a column is shown.    \sa hideColumn(), setRowHidden() */
end_comment
begin_function
DECL|function|setColumnHidden
name|void
name|QTreeView
operator|::
name|setColumnHidden
parameter_list|(
name|int
name|column
parameter_list|,
name|bool
name|hide
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|column
operator|<
literal|0
operator|||
name|column
operator|>=
name|d
operator|->
name|header
operator|->
name|count
argument_list|()
condition|)
return|return;
name|d
operator|->
name|header
operator|->
name|setSectionHidden
argument_list|(
name|column
argument_list|,
name|hide
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QTreeView::headerHidden   \brief whether the header is shown or not.   \since 4.4    If this property is true, the header is not shown otherwise it is.   The default value is false.    \sa header() */
end_comment
begin_function
DECL|function|isHeaderHidden
name|bool
name|QTreeView
operator|::
name|isHeaderHidden
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|header
operator|->
name|isHidden
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setHeaderHidden
name|void
name|QTreeView
operator|::
name|setHeaderHidden
parameter_list|(
name|bool
name|hide
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|header
operator|->
name|setHidden
argument_list|(
name|hide
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the item in the given \a row of the \a parent is hidden;     otherwise returns false.      \sa setRowHidden(), isColumnHidden() */
end_comment
begin_function
DECL|function|isRowHidden
name|bool
name|QTreeView
operator|::
name|isRowHidden
parameter_list|(
name|int
name|row
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|model
condition|)
return|return
literal|false
return|;
return|return
name|d
operator|->
name|isRowHidden
argument_list|(
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   If \a hide is true the \a row with the given \a parent is hidden, otherwise the \a row is shown.    \sa isRowHidden(), setColumnHidden() */
end_comment
begin_function
DECL|function|setRowHidden
name|void
name|QTreeView
operator|::
name|setRowHidden
parameter_list|(
name|int
name|row
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|bool
name|hide
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|model
condition|)
return|return;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return;
if|if
condition|(
name|hide
condition|)
block|{
name|d
operator|->
name|hiddenIndexes
operator|.
name|insert
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|isPersistent
argument_list|(
name|index
argument_list|)
condition|)
block|{
comment|//if the index is not persistent, it cannot be in the set
name|d
operator|->
name|hiddenIndexes
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.3    Returns true if the item in first column in the given \a row   of the \a parent is spanning all the columns; otherwise returns false.    \sa setFirstColumnSpanned() */
end_comment
begin_function
DECL|function|isFirstColumnSpanned
name|bool
name|QTreeView
operator|::
name|isFirstColumnSpanned
parameter_list|(
name|int
name|row
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|spanningIndexes
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|d
operator|->
name|model
condition|)
return|return
literal|false
return|;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|spanningIndexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|d
operator|->
name|spanningIndexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|index
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.3    If \a span is true the item in the first column in the \a row   with the given \a parent is set to span all columns, otherwise all items   on the \a row are shown.    \sa isFirstColumnSpanned() */
end_comment
begin_function
DECL|function|setFirstColumnSpanned
name|void
name|QTreeView
operator|::
name|setFirstColumnSpanned
parameter_list|(
name|int
name|row
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|bool
name|span
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|model
condition|)
return|return;
name|QModelIndex
name|index
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return;
if|if
condition|(
name|span
condition|)
block|{
name|QPersistentModelIndex
name|persistent
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|spanningIndexes
operator|.
name|contains
argument_list|(
name|persistent
argument_list|)
condition|)
name|d
operator|->
name|spanningIndexes
operator|.
name|append
argument_list|(
name|persistent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPersistentModelIndex
name|persistent
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|d
operator|->
name|spanningIndexes
operator|.
name|indexOf
argument_list|(
name|persistent
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
name|d
operator|->
name|spanningIndexes
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|int
name|i
init|=
name|d
operator|->
name|viewIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
name|d
operator|->
name|viewItems
index|[
name|i
index|]
operator|.
name|spanning
operator|=
name|span
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|dataChanged
name|void
name|QTreeView
operator|::
name|dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|roles
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
comment|// if we are going to do a complete relayout anyway, there is no need to update
if|if
condition|(
name|d
operator|->
name|delayedPendingLayout
condition|)
return|return;
comment|// refresh the height cache here; we don't really lose anything by getting the size hint,
comment|// since QAbstractItemView::dataChanged() will get the visualRect for the items anyway
name|bool
name|sizeChanged
init|=
literal|false
decl_stmt|;
name|int
name|topViewIndex
init|=
name|d
operator|->
name|viewIndex
argument_list|(
name|topLeft
argument_list|)
decl_stmt|;
if|if
condition|(
name|topViewIndex
operator|==
literal|0
condition|)
block|{
name|int
name|newDefaultItemHeight
init|=
name|indexRowSizeHint
argument_list|(
name|topLeft
argument_list|)
decl_stmt|;
name|sizeChanged
operator|=
name|d
operator|->
name|defaultItemHeight
operator|!=
name|newDefaultItemHeight
expr_stmt|;
name|d
operator|->
name|defaultItemHeight
operator|=
name|newDefaultItemHeight
expr_stmt|;
block|}
if|if
condition|(
name|topViewIndex
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|topLeft
operator|.
name|row
argument_list|()
operator|==
name|bottomRight
operator|.
name|row
argument_list|()
condition|)
block|{
name|int
name|oldHeight
init|=
name|d
operator|->
name|itemHeight
argument_list|(
name|topViewIndex
argument_list|)
decl_stmt|;
name|d
operator|->
name|invalidateHeightCache
argument_list|(
name|topViewIndex
argument_list|)
expr_stmt|;
name|sizeChanged
operator||=
operator|(
name|oldHeight
operator|!=
name|d
operator|->
name|itemHeight
argument_list|(
name|topViewIndex
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|topLeft
operator|.
name|column
argument_list|()
operator|==
literal|0
condition|)
name|d
operator|->
name|viewItems
index|[
name|topViewIndex
index|]
operator|.
name|hasChildren
operator|=
name|d
operator|->
name|hasVisibleChildren
argument_list|(
name|topLeft
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|bottomViewIndex
init|=
name|d
operator|->
name|viewIndex
argument_list|(
name|bottomRight
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|topViewIndex
init|;
name|i
operator|<=
name|bottomViewIndex
condition|;
operator|++
name|i
control|)
block|{
name|int
name|oldHeight
init|=
name|d
operator|->
name|itemHeight
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|d
operator|->
name|invalidateHeightCache
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|sizeChanged
operator||=
operator|(
name|oldHeight
operator|!=
name|d
operator|->
name|itemHeight
argument_list|(
name|i
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|topLeft
operator|.
name|column
argument_list|()
operator|==
literal|0
condition|)
name|d
operator|->
name|viewItems
index|[
name|i
index|]
operator|.
name|hasChildren
operator|=
name|d
operator|->
name|hasVisibleChildren
argument_list|(
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sizeChanged
condition|)
block|{
name|d
operator|->
name|updateScrollBars
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
name|QAbstractItemView
operator|::
name|dataChanged
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|,
name|roles
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Hides the \a column given.    \note This function should only be called after the model has been   initialized, as the view needs to know the number of columns in order to   hide \a column.    \sa showColumn(), setColumnHidden() */
end_comment
begin_function
DECL|function|hideColumn
name|void
name|QTreeView
operator|::
name|hideColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|header
operator|->
name|hideSection
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Shows the given \a column in the tree view.    \sa hideColumn(), setColumnHidden() */
end_comment
begin_function
DECL|function|showColumn
name|void
name|QTreeView
operator|::
name|showColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|header
operator|->
name|showSection
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \fn void QTreeView::expand(const QModelIndex&index)    Expands the model item specified by the \a index.    \sa expanded() */
end_comment
begin_function
DECL|function|expand
name|void
name|QTreeView
operator|::
name|expand
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isIndexValid
argument_list|(
name|index
argument_list|)
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|delayedPendingLayout
condition|)
block|{
comment|//A complete relayout is going to be performed, just store the expanded index, no need to layout.
if|if
condition|(
name|d
operator|->
name|storeExpanded
argument_list|(
name|index
argument_list|)
condition|)
emit|emit
name|expanded
argument_list|(
name|index
argument_list|)
emit|;
return|return;
block|}
name|int
name|i
init|=
name|d
operator|->
name|viewIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// is visible
name|d
operator|->
name|expand
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isAnimating
argument_list|()
condition|)
block|{
name|updateGeometries
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|storeExpanded
argument_list|(
name|index
argument_list|)
condition|)
block|{
emit|emit
name|expanded
argument_list|(
name|index
argument_list|)
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!   \fn void QTreeView::collapse(const QModelIndex&index)    Collapses the model item specified by the \a index.    \sa collapsed() */
end_comment
begin_function
DECL|function|collapse
name|void
name|QTreeView
operator|::
name|collapse
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isIndexValid
argument_list|(
name|index
argument_list|)
condition|)
return|return;
comment|//if the current item is now invisible, the autoscroll will expand the tree to see it, so disable the autoscroll
name|d
operator|->
name|delayedAutoScroll
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|delayedPendingLayout
condition|)
block|{
comment|//A complete relayout is going to be performed, just un-store the expanded index, no need to layout.
if|if
condition|(
name|d
operator|->
name|isPersistent
argument_list|(
name|index
argument_list|)
operator|&&
name|d
operator|->
name|expandedIndexes
operator|.
name|remove
argument_list|(
name|index
argument_list|)
condition|)
emit|emit
name|collapsed
argument_list|(
name|index
argument_list|)
emit|;
return|return;
block|}
name|int
name|i
init|=
name|d
operator|->
name|viewIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// is visible
name|d
operator|->
name|collapse
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isAnimating
argument_list|()
condition|)
block|{
name|updateGeometries
argument_list|()
expr_stmt|;
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|d
operator|->
name|isPersistent
argument_list|(
name|index
argument_list|)
operator|&&
name|d
operator|->
name|expandedIndexes
operator|.
name|remove
argument_list|(
name|index
argument_list|)
condition|)
emit|emit
name|collapsed
argument_list|(
name|index
argument_list|)
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!   \fn bool QTreeView::isExpanded(const QModelIndex&index) const    Returns true if the model item \a index is expanded; otherwise returns   false.    \sa expand(), expanded(), setExpanded() */
end_comment
begin_function
DECL|function|isExpanded
name|bool
name|QTreeView
operator|::
name|isExpanded
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|isIndexExpanded
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the item referred to by \a index to either collapse or expanded,   depending on the value of \a expanded.    \sa expanded(), expand(), isExpanded() */
end_comment
begin_function
DECL|function|setExpanded
name|void
name|QTreeView
operator|::
name|setExpanded
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|bool
name|expanded
parameter_list|)
block|{
if|if
condition|(
name|expanded
condition|)
name|this
operator|->
name|expand
argument_list|(
name|index
argument_list|)
expr_stmt|;
else|else
name|this
operator|->
name|collapse
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     \property QTreeView::sortingEnabled     \brief whether sorting is enabled      If this property is true, sorting is enabled for the tree; if the property     is false, sorting is not enabled. The default value is false.      \note In order to avoid performance issues, it is recommended that     sorting is enabled \e after inserting the items into the tree.     Alternatively, you could also insert the items into a list before inserting     the items into the tree.      \sa sortByColumn() */
end_comment
begin_function
DECL|function|setSortingEnabled
name|void
name|QTreeView
operator|::
name|setSortingEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|header
argument_list|()
operator|->
name|setSortIndicatorShown
argument_list|(
name|enable
argument_list|)
expr_stmt|;
name|header
argument_list|()
operator|->
name|setSectionsClickable
argument_list|(
name|enable
argument_list|)
expr_stmt|;
if|if
condition|(
name|enable
condition|)
block|{
comment|//sortByColumn has to be called before we connect or set the sortingEnabled flag
comment|// because otherwise it will not call sort on the model.
name|sortByColumn
argument_list|(
name|header
argument_list|()
operator|->
name|sortIndicatorSection
argument_list|()
argument_list|,
name|header
argument_list|()
operator|->
name|sortIndicatorOrder
argument_list|()
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|header
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|sortIndicatorChanged
argument_list|(
name|int
argument_list|,
name|Qt
operator|::
name|SortOrder
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sortIndicatorChanged
argument_list|(
name|int
argument_list|,
name|Qt
operator|::
name|SortOrder
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|UniqueConnection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|disconnect
argument_list|(
name|header
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|sortIndicatorChanged
argument_list|(
name|int
argument_list|,
name|Qt
operator|::
name|SortOrder
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_sortIndicatorChanged
argument_list|(
name|int
argument_list|,
name|Qt
operator|::
name|SortOrder
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|sortingEnabled
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isSortingEnabled
name|bool
name|QTreeView
operator|::
name|isSortingEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sortingEnabled
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     \property QTreeView::animated     \brief whether animations are enabled      If this property is true the treeview will animate expandsion     and collapsing of branches. If this property is false, the treeview     will expand or collapse branches immediately without showing     the animation.      By default, this property is false. */
end_comment
begin_function
DECL|function|setAnimated
name|void
name|QTreeView
operator|::
name|setAnimated
parameter_list|(
name|bool
name|animate
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|animationsEnabled
operator|=
name|animate
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isAnimated
name|bool
name|QTreeView
operator|::
name|isAnimated
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|animationsEnabled
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2     \property QTreeView::allColumnsShowFocus     \brief whether items should show keyboard focus using all columns      If this property is true all columns will show focus, otherwise only     one column will show focus.      The default is false. */
end_comment
begin_function
DECL|function|setAllColumnsShowFocus
name|void
name|QTreeView
operator|::
name|setAllColumnsShowFocus
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|allColumnsShowFocus
operator|==
name|enable
condition|)
return|return;
name|d
operator|->
name|allColumnsShowFocus
operator|=
name|enable
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|allColumnsShowFocus
name|bool
name|QTreeView
operator|::
name|allColumnsShowFocus
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|allColumnsShowFocus
return|;
block|}
end_function
begin_comment
comment|/*!     \property QTreeView::wordWrap     \brief the item text word-wrapping policy     \since 4.3      If this property is true then the item text is wrapped where     necessary at word-breaks; otherwise it is not wrapped at all.     This property is false by default.      Note that even if wrapping is enabled, the cell will not be     expanded to fit all text. Ellipsis will be inserted according to     the current \l{QAbstractItemView::}{textElideMode}. */
end_comment
begin_function
DECL|function|setWordWrap
name|void
name|QTreeView
operator|::
name|setWordWrap
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|wrapItemText
operator|==
name|on
condition|)
return|return;
name|d
operator|->
name|wrapItemText
operator|=
name|on
expr_stmt|;
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wordWrap
name|bool
name|QTreeView
operator|::
name|wordWrap
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|wrapItemText
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp  */
end_comment
begin_function
DECL|function|keyboardSearch
name|void
name|QTreeView
operator|::
name|keyboardSearch
parameter_list|(
specifier|const
name|QString
modifier|&
name|search
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|(
name|d
operator|->
name|root
argument_list|)
operator|||
operator|!
name|d
operator|->
name|model
operator|->
name|columnCount
argument_list|(
name|d
operator|->
name|root
argument_list|)
condition|)
return|return;
name|QModelIndex
name|start
decl_stmt|;
if|if
condition|(
name|currentIndex
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
name|start
operator|=
name|currentIndex
argument_list|()
expr_stmt|;
else|else
name|start
operator|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|root
argument_list|)
expr_stmt|;
name|bool
name|skipRow
init|=
literal|false
decl_stmt|;
name|bool
name|keyboardTimeWasValid
init|=
name|d
operator|->
name|keyboardInputTime
operator|.
name|isValid
argument_list|()
decl_stmt|;
name|qint64
name|keyboardInputTimeElapsed
init|=
name|d
operator|->
name|keyboardInputTime
operator|.
name|restart
argument_list|()
decl_stmt|;
if|if
condition|(
name|search
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|keyboardTimeWasValid
operator|||
name|keyboardInputTimeElapsed
operator|>
name|QApplication
operator|::
name|keyboardInputInterval
argument_list|()
condition|)
block|{
name|d
operator|->
name|keyboardInput
operator|=
name|search
expr_stmt|;
name|skipRow
operator|=
name|currentIndex
argument_list|()
operator|.
name|isValid
argument_list|()
expr_stmt|;
comment|//if it is not valid we should really start at QModelIndex(0,0)
block|}
else|else
block|{
name|d
operator|->
name|keyboardInput
operator|+=
name|search
expr_stmt|;
block|}
comment|// special case for searches with same key like 'aaaaa'
name|bool
name|sameKey
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|keyboardInput
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|int
name|c
init|=
name|d
operator|->
name|keyboardInput
operator|.
name|count
argument_list|(
name|d
operator|->
name|keyboardInput
operator|.
name|at
argument_list|(
name|d
operator|->
name|keyboardInput
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|sameKey
operator|=
operator|(
name|c
operator|==
name|d
operator|->
name|keyboardInput
operator|.
name|length
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|sameKey
condition|)
name|skipRow
operator|=
literal|true
expr_stmt|;
block|}
comment|// skip if we are searching for the same key or a new search started
if|if
condition|(
name|skipRow
condition|)
block|{
if|if
condition|(
name|indexBelow
argument_list|(
name|start
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
name|start
operator|=
name|indexBelow
argument_list|(
name|start
argument_list|)
expr_stmt|;
else|else
name|start
operator|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|start
operator|.
name|column
argument_list|()
argument_list|,
name|d
operator|->
name|root
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|int
name|startIndex
init|=
name|d
operator|->
name|viewIndex
argument_list|(
name|start
argument_list|)
decl_stmt|;
if|if
condition|(
name|startIndex
operator|<=
operator|-
literal|1
condition|)
return|return;
name|int
name|previousLevel
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|bestAbove
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|bestBelow
init|=
operator|-
literal|1
decl_stmt|;
name|QString
name|searchString
init|=
name|sameKey
condition|?
name|QString
argument_list|(
name|d
operator|->
name|keyboardInput
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
else|:
name|d
operator|->
name|keyboardInput
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|int
operator|)
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|level
operator|>
name|previousLevel
condition|)
block|{
name|QModelIndex
name|searchFrom
init|=
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|index
decl_stmt|;
if|if
condition|(
name|start
operator|.
name|column
argument_list|()
operator|>
literal|0
condition|)
name|searchFrom
operator|=
name|searchFrom
operator|.
name|sibling
argument_list|(
name|searchFrom
operator|.
name|row
argument_list|()
argument_list|,
name|start
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|searchFrom
operator|.
name|parent
argument_list|()
operator|==
name|start
operator|.
name|parent
argument_list|()
condition|)
name|searchFrom
operator|=
name|start
expr_stmt|;
name|QModelIndexList
name|match
init|=
name|d
operator|->
name|model
operator|->
name|match
argument_list|(
name|searchFrom
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|searchString
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|.
name|count
argument_list|()
condition|)
block|{
name|int
name|hitIndex
init|=
name|d
operator|->
name|viewIndex
argument_list|(
name|match
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|hitIndex
operator|>=
literal|0
operator|&&
name|hitIndex
operator|<
name|startIndex
condition|)
name|bestAbove
operator|=
name|bestAbove
operator|==
operator|-
literal|1
condition|?
name|hitIndex
else|:
name|qMin
argument_list|(
name|hitIndex
argument_list|,
name|bestAbove
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|hitIndex
operator|>=
name|startIndex
condition|)
name|bestBelow
operator|=
name|bestBelow
operator|==
operator|-
literal|1
condition|?
name|hitIndex
else|:
name|qMin
argument_list|(
name|hitIndex
argument_list|,
name|bestBelow
argument_list|)
expr_stmt|;
block|}
block|}
name|previousLevel
operator|=
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|level
expr_stmt|;
block|}
name|QModelIndex
name|index
decl_stmt|;
if|if
condition|(
name|bestBelow
operator|>
operator|-
literal|1
condition|)
name|index
operator|=
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|bestBelow
argument_list|)
operator|.
name|index
expr_stmt|;
elseif|else
if|if
condition|(
name|bestAbove
operator|>
operator|-
literal|1
condition|)
name|index
operator|=
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|bestAbove
argument_list|)
operator|.
name|index
expr_stmt|;
if|if
condition|(
name|start
operator|.
name|column
argument_list|()
operator|>
literal|0
condition|)
name|index
operator|=
name|index
operator|.
name|sibling
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|start
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|flags
init|=
operator|(
name|d
operator|->
name|selectionMode
operator|==
name|SingleSelection
condition|?
name|QItemSelectionModel
operator|::
name|SelectionFlags
argument_list|(
name|QItemSelectionModel
operator|::
name|ClearAndSelect
operator||
name|d
operator|->
name|selectionBehaviorFlags
argument_list|()
argument_list|)
else|:
name|QItemSelectionModel
operator|::
name|SelectionFlags
argument_list|(
name|QItemSelectionModel
operator|::
name|NoUpdate
argument_list|)
operator|)
decl_stmt|;
name|selectionModel
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   Returns the rectangle on the viewport occupied by the item at \a index.   If the index is not visible or explicitly hidden, the returned rectangle is invalid. */
end_comment
begin_function
DECL|function|visualRect
name|QRect
name|QTreeView
operator|::
name|visualRect
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isIndexValid
argument_list|(
name|index
argument_list|)
operator|||
name|isIndexHidden
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|QRect
argument_list|()
return|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|int
name|vi
init|=
name|d
operator|->
name|viewIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|vi
operator|<
literal|0
condition|)
return|return
name|QRect
argument_list|()
return|;
name|bool
name|spanning
init|=
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|vi
argument_list|)
operator|.
name|spanning
decl_stmt|;
comment|// if we have a spanning item, make the selection stretch from left to right
name|int
name|x
init|=
operator|(
name|spanning
condition|?
literal|0
else|:
name|columnViewportPosition
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|int
name|w
init|=
operator|(
name|spanning
condition|?
name|d
operator|->
name|header
operator|->
name|length
argument_list|()
else|:
name|columnWidth
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
operator|)
decl_stmt|;
comment|// handle indentation
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|==
literal|0
condition|)
block|{
name|int
name|i
init|=
name|d
operator|->
name|indentationForItem
argument_list|(
name|vi
argument_list|)
decl_stmt|;
name|w
operator|-=
name|i
expr_stmt|;
if|if
condition|(
operator|!
name|isRightToLeft
argument_list|()
condition|)
name|x
operator|+=
name|i
expr_stmt|;
block|}
name|int
name|y
init|=
name|d
operator|->
name|coordinateForItem
argument_list|(
name|vi
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|d
operator|->
name|itemHeight
argument_list|(
name|vi
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Scroll the contents of the tree view until the given model item     \a index is visible. The \a hint parameter specifies more     precisely where the item should be located after the     operation.     If any of the parents of the model item are collapsed, they will     be expanded to ensure that the model item is visible. */
end_comment
begin_function
DECL|function|scrollTo
name|void
name|QTreeView
operator|::
name|scrollTo
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|ScrollHint
name|hint
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isIndexValid
argument_list|(
name|index
argument_list|)
condition|)
return|return;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateScrollBars
argument_list|()
expr_stmt|;
comment|// Expand all parents if the parent(s) of the node are not expanded.
name|QModelIndex
name|parent
init|=
name|index
operator|.
name|parent
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|.
name|isValid
argument_list|()
operator|&&
name|state
argument_list|()
operator|==
name|NoState
operator|&&
name|d
operator|->
name|itemsExpandable
condition|)
block|{
if|if
condition|(
operator|!
name|isExpanded
argument_list|(
name|parent
argument_list|)
condition|)
name|expand
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|parent
operator|=
name|d
operator|->
name|model
operator|->
name|parent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|int
name|item
init|=
name|d
operator|->
name|viewIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|<
literal|0
condition|)
return|return;
name|QRect
name|area
init|=
name|d
operator|->
name|viewport
operator|->
name|rect
argument_list|()
decl_stmt|;
comment|// vertical
if|if
condition|(
name|verticalScrollMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
condition|)
block|{
name|int
name|top
init|=
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
decl_stmt|;
name|int
name|bottom
init|=
name|top
operator|+
name|verticalScrollBar
argument_list|()
operator|->
name|pageStep
argument_list|()
decl_stmt|;
if|if
condition|(
name|hint
operator|==
name|EnsureVisible
operator|&&
name|item
operator|>=
name|top
operator|&&
name|item
operator|<
name|bottom
condition|)
block|{
comment|// nothing to do
block|}
elseif|else
if|if
condition|(
name|hint
operator|==
name|PositionAtTop
operator|||
operator|(
name|hint
operator|==
name|EnsureVisible
operator|&&
name|item
operator|<
name|top
operator|)
condition|)
block|{
name|verticalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// PositionAtBottom or PositionAtCenter
specifier|const
name|int
name|currentItemHeight
init|=
name|d
operator|->
name|itemHeight
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|int
name|y
init|=
operator|(
name|hint
operator|==
name|PositionAtCenter
comment|//we center on the current item with a preference to the top item (ie. -1)
condition|?
name|area
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|+
name|currentItemHeight
operator|-
literal|1
comment|//otherwise we simply take the whole space
else|:
name|area
operator|.
name|height
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|y
operator|>
name|currentItemHeight
condition|)
block|{
while|while
condition|(
name|item
operator|>=
literal|0
condition|)
block|{
name|y
operator|-=
name|d
operator|->
name|itemHeight
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|y
operator|<
literal|0
condition|)
block|{
comment|//there is no more space left
name|item
operator|++
expr_stmt|;
break|break;
block|}
name|item
operator|--
expr_stmt|;
block|}
block|}
name|verticalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// ScrollPerPixel
name|QRect
name|rect
argument_list|(
name|columnViewportPosition
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
argument_list|,
name|d
operator|->
name|coordinateForItem
argument_list|(
name|item
argument_list|)
argument_list|,
comment|// ### slow for items outside the view
name|columnWidth
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
argument_list|,
name|d
operator|->
name|itemHeight
argument_list|(
name|item
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// nothing to do
block|}
elseif|else
if|if
condition|(
name|hint
operator|==
name|EnsureVisible
operator|&&
name|area
operator|.
name|contains
argument_list|(
name|rect
argument_list|)
condition|)
block|{
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|(
name|rect
argument_list|)
expr_stmt|;
comment|// nothing to do
block|}
else|else
block|{
name|bool
name|above
init|=
operator|(
name|hint
operator|==
name|EnsureVisible
operator|&&
operator|(
name|rect
operator|.
name|top
argument_list|()
operator|<
name|area
operator|.
name|top
argument_list|()
operator|||
name|area
operator|.
name|height
argument_list|()
operator|<
name|rect
operator|.
name|height
argument_list|()
operator|)
operator|)
decl_stmt|;
name|bool
name|below
init|=
operator|(
name|hint
operator|==
name|EnsureVisible
operator|&&
name|rect
operator|.
name|bottom
argument_list|()
operator|>
name|area
operator|.
name|bottom
argument_list|()
operator|&&
name|rect
operator|.
name|height
argument_list|()
operator|<
name|area
operator|.
name|height
argument_list|()
operator|)
decl_stmt|;
name|int
name|verticalValue
init|=
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|hint
operator|==
name|PositionAtTop
operator|||
name|above
condition|)
name|verticalValue
operator|+=
name|rect
operator|.
name|top
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|hint
operator|==
name|PositionAtBottom
operator|||
name|below
condition|)
name|verticalValue
operator|+=
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|area
operator|.
name|height
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|hint
operator|==
name|PositionAtCenter
condition|)
name|verticalValue
operator|+=
name|rect
operator|.
name|top
argument_list|()
operator|-
operator|(
operator|(
name|area
operator|.
name|height
argument_list|()
operator|-
name|rect
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
operator|)
expr_stmt|;
name|verticalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|verticalValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|// horizontal
name|int
name|viewportWidth
init|=
name|d
operator|->
name|viewport
operator|->
name|width
argument_list|()
decl_stmt|;
name|int
name|horizontalOffset
init|=
name|d
operator|->
name|header
operator|->
name|offset
argument_list|()
decl_stmt|;
name|int
name|horizontalPosition
init|=
name|d
operator|->
name|header
operator|->
name|sectionPosition
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|cellWidth
init|=
name|d
operator|->
name|header
operator|->
name|sectionSize
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hint
operator|==
name|PositionAtCenter
condition|)
block|{
name|horizontalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|horizontalPosition
operator|-
operator|(
operator|(
name|viewportWidth
operator|-
name|cellWidth
operator|)
operator|/
literal|2
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|horizontalPosition
operator|-
name|horizontalOffset
argument_list|<
literal|0
operator|||
name|cellWidth
argument_list|>
name|viewportWidth
condition|)
name|horizontalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|horizontalPosition
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|horizontalPosition
operator|-
name|horizontalOffset
operator|+
name|cellWidth
operator|>
name|viewportWidth
condition|)
name|horizontalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|horizontalPosition
operator|-
name|viewportWidth
operator|+
name|cellWidth
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|timerEvent
name|void
name|QTreeView
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|columnResizeTimerID
condition|)
block|{
name|updateGeometries
argument_list|()
expr_stmt|;
name|killTimer
argument_list|(
name|d
operator|->
name|columnResizeTimerID
argument_list|)
expr_stmt|;
name|d
operator|->
name|columnResizeTimerID
operator|=
literal|0
expr_stmt|;
name|QRect
name|rect
decl_stmt|;
name|int
name|viewportHeight
init|=
name|d
operator|->
name|viewport
operator|->
name|height
argument_list|()
decl_stmt|;
name|int
name|viewportWidth
init|=
name|d
operator|->
name|viewport
operator|->
name|width
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|d
operator|->
name|columnsToUpdate
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|int
name|column
init|=
name|d
operator|->
name|columnsToUpdate
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|columnViewportPosition
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
name|rect
operator||=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|x
operator|+
name|columnWidth
argument_list|(
name|column
argument_list|)
argument_list|,
name|viewportHeight
argument_list|)
expr_stmt|;
else|else
name|rect
operator||=
name|QRect
argument_list|(
name|x
argument_list|,
literal|0
argument_list|,
name|viewportWidth
operator|-
name|x
argument_list|,
name|viewportHeight
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|(
name|rect
operator|.
name|normalized
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|columnsToUpdate
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|openTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|QPoint
name|pos
init|=
name|d
operator|->
name|viewport
operator|->
name|mapFromGlobal
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|DraggingState
operator|&&
name|d
operator|->
name|viewport
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
block|{
name|QModelIndex
name|index
init|=
name|indexAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|setExpanded
argument_list|(
name|index
argument_list|,
operator|!
name|isExpanded
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|openTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|QAbstractItemView
operator|::
name|timerEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function
DECL|function|dragMoveEvent
name|void
name|QTreeView
operator|::
name|dragMoveEvent
parameter_list|(
name|QDragMoveEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|autoExpandDelay
operator|>=
literal|0
condition|)
name|d
operator|->
name|openTimer
operator|.
name|start
argument_list|(
name|d
operator|->
name|autoExpandDelay
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|QAbstractItemView
operator|::
name|dragMoveEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|viewportEvent
name|bool
name|QTreeView
operator|::
name|viewportEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|HoverEnter
case|:
case|case
name|QEvent
operator|::
name|HoverLeave
case|:
case|case
name|QEvent
operator|::
name|HoverMove
case|:
block|{
name|QHoverEvent
modifier|*
name|he
init|=
cast|static_cast
argument_list|<
name|QHoverEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|int
name|oldBranch
init|=
name|d
operator|->
name|hoverBranch
decl_stmt|;
name|d
operator|->
name|hoverBranch
operator|=
name|d
operator|->
name|itemDecorationAt
argument_list|(
name|he
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|QModelIndex
name|newIndex
init|=
name|indexAt
argument_list|(
name|he
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|hover
operator|!=
name|newIndex
operator|||
name|d
operator|->
name|hoverBranch
operator|!=
name|oldBranch
condition|)
block|{
comment|// Update the whole hovered over row. No need to update the old hovered
comment|// row, that is taken care in superclass hover handling.
name|QRect
name|rect
init|=
name|visualRect
argument_list|(
name|newIndex
argument_list|)
decl_stmt|;
name|rect
operator|.
name|setX
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setWidth
argument_list|(
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|viewport
argument_list|()
operator|->
name|update
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|QAbstractItemView
operator|::
name|viewportEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QTreeView
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|QPainter
name|painter
argument_list|(
name|viewport
argument_list|()
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
if|if
condition|(
name|d
operator|->
name|isAnimating
argument_list|()
condition|)
block|{
name|drawTree
argument_list|(
operator|&
name|painter
argument_list|,
name|event
operator|->
name|region
argument_list|()
operator|-
name|d
operator|->
name|animatedOperation
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|drawAnimatedOperation
argument_list|(
operator|&
name|painter
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
comment|//QT_NO_ANIMATION
block|{
name|drawTree
argument_list|(
operator|&
name|painter
argument_list|,
name|event
operator|->
name|region
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|d
operator|->
name|paintDropIndicator
argument_list|(
operator|&
name|painter
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|paintAlternatingRowColors
name|void
name|QTreeViewPrivate
operator|::
name|paintAlternatingRowColors
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
name|QStyleOptionViewItem
modifier|*
name|option
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|bottom
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|alternatingColors
operator|||
operator|!
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ItemView_PaintAlternatingRowColorsForEmptyArea
argument_list|,
name|option
argument_list|,
name|q
argument_list|)
condition|)
return|return;
name|int
name|rowHeight
init|=
name|defaultItemHeight
decl_stmt|;
if|if
condition|(
name|rowHeight
operator|<=
literal|0
condition|)
block|{
name|rowHeight
operator|=
name|itemDelegate
operator|->
name|sizeHint
argument_list|(
operator|*
name|option
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|rowHeight
operator|<=
literal|0
condition|)
return|return;
block|}
while|while
condition|(
name|y
operator|<=
name|bottom
condition|)
block|{
name|option
operator|->
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
name|y
argument_list|,
name|viewport
operator|->
name|width
argument_list|()
argument_list|,
name|rowHeight
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|&
literal|1
condition|)
block|{
name|option
operator|->
name|features
operator||=
name|QStyleOptionViewItem
operator|::
name|Alternate
expr_stmt|;
block|}
else|else
block|{
name|option
operator|->
name|features
operator|&=
operator|~
name|QStyleOptionViewItem
operator|::
name|Alternate
expr_stmt|;
block|}
operator|++
name|current
expr_stmt|;
name|q
operator|->
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_PanelItemViewRow
argument_list|,
name|option
argument_list|,
name|painter
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|y
operator|+=
name|rowHeight
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|expandOrCollapseItemAtPos
name|bool
name|QTreeViewPrivate
operator|::
name|expandOrCollapseItemAtPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
comment|// we want to handle mousePress in EditingState (persistent editors)
if|if
condition|(
operator|(
name|state
operator|!=
name|QAbstractItemView
operator|::
name|NoState
operator|&&
name|state
operator|!=
name|QAbstractItemView
operator|::
name|EditingState
operator|)
operator|||
operator|!
name|viewport
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
return|return
literal|true
return|;
name|int
name|i
init|=
name|itemDecorationAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|i
operator|!=
operator|-
literal|1
operator|)
operator|&&
name|itemsExpandable
operator|&&
name|hasVisibleChildren
argument_list|(
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|index
argument_list|)
condition|)
block|{
if|if
condition|(
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|expanded
condition|)
name|collapse
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|expand
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAnimating
argument_list|()
condition|)
block|{
name|q
operator|->
name|updateGeometries
argument_list|()
expr_stmt|;
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|_q_modelDestroyed
name|void
name|QTreeViewPrivate
operator|::
name|_q_modelDestroyed
parameter_list|()
block|{
comment|//we need to clear the viewItems because it contains QModelIndexes to
comment|//the model currently being destroyed
name|viewItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QAbstractItemViewPrivate
operator|::
name|_q_modelDestroyed
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp    We have a QTreeView way of knowing what elements are on the viewport */
end_comment
begin_function
DECL|function|draggablePaintPairs
name|QItemViewPaintPairs
name|QTreeViewPrivate
operator|::
name|draggablePaintPairs
parameter_list|(
specifier|const
name|QModelIndexList
modifier|&
name|indexes
parameter_list|,
name|QRect
modifier|*
name|r
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|Q_Q
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|spanningIndexes
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QAbstractItemViewPrivate
operator|::
name|draggablePaintPairs
argument_list|(
name|indexes
argument_list|,
name|r
argument_list|)
return|;
name|QModelIndexList
name|list
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QModelIndex
modifier|&
name|idx
decl|,
name|indexes
control|)
block|{
if|if
condition|(
name|idx
operator|.
name|column
argument_list|()
operator|>
literal|0
operator|&&
name|q
operator|->
name|isFirstColumnSpanned
argument_list|(
name|idx
operator|.
name|row
argument_list|()
argument_list|,
name|idx
operator|.
name|parent
argument_list|()
argument_list|)
condition|)
continue|continue;
name|list
operator|<<
name|idx
expr_stmt|;
block|}
return|return
name|QAbstractItemViewPrivate
operator|::
name|draggablePaintPairs
argument_list|(
name|list
argument_list|,
name|r
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|adjustViewOptionsForIndex
name|void
name|QTreeViewPrivate
operator|::
name|adjustViewOptionsForIndex
parameter_list|(
name|QStyleOptionViewItem
modifier|*
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|current
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|row
init|=
name|viewIndex
argument_list|(
name|current
argument_list|)
decl_stmt|;
comment|// get the index in viewItems[]
name|option
operator|->
name|state
operator|=
name|option
operator|->
name|state
operator||
operator|(
name|viewItems
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|expanded
condition|?
name|QStyle
operator|::
name|State_Open
else|:
name|QStyle
operator|::
name|State_None
operator|)
operator||
operator|(
name|viewItems
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|hasChildren
condition|?
name|QStyle
operator|::
name|State_Children
else|:
name|QStyle
operator|::
name|State_None
operator|)
operator||
operator|(
name|viewItems
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|hasMoreSiblings
condition|?
name|QStyle
operator|::
name|State_Sibling
else|:
name|QStyle
operator|::
name|State_None
operator|)
expr_stmt|;
name|option
operator|->
name|showDecorationSelected
operator|=
operator|(
name|selectionBehavior
operator|&
name|QTreeView
operator|::
name|SelectRows
operator|)
operator|||
name|option
operator|->
name|showDecorationSelected
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|logicalIndices
decl_stmt|;
comment|// index = visual index of visible columns only. data = logical index.
name|QVector
argument_list|<
name|QStyleOptionViewItem
operator|::
name|ViewItemPosition
argument_list|>
name|viewItemPosList
decl_stmt|;
comment|// vector of left/middle/end for each logicalIndex, visible columns only.
specifier|const
name|bool
name|spanning
init|=
name|viewItems
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|spanning
decl_stmt|;
specifier|const
name|int
name|left
init|=
operator|(
name|spanning
condition|?
name|header
operator|->
name|visualIndex
argument_list|(
literal|0
argument_list|)
else|:
literal|0
operator|)
decl_stmt|;
specifier|const
name|int
name|right
init|=
operator|(
name|spanning
condition|?
name|header
operator|->
name|visualIndex
argument_list|(
literal|0
argument_list|)
else|:
name|header
operator|->
name|count
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|calcLogicalIndices
argument_list|(
operator|&
name|logicalIndices
argument_list|,
operator|&
name|viewItemPosList
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|int
name|columnIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|visualIndex
init|=
literal|0
init|;
name|visualIndex
operator|<
name|current
operator|.
name|column
argument_list|()
condition|;
operator|++
name|visualIndex
control|)
block|{
name|int
name|logicalIndex
init|=
name|header
operator|->
name|logicalIndex
argument_list|(
name|visualIndex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|header
operator|->
name|isSectionHidden
argument_list|(
name|logicalIndex
argument_list|)
condition|)
block|{
operator|++
name|columnIndex
expr_stmt|;
block|}
block|}
name|option
operator|->
name|viewItemPosition
operator|=
name|viewItemPosList
operator|.
name|at
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.2   Draws the part of the tree intersecting the given \a region using the specified   \a painter.    \sa paintEvent() */
end_comment
begin_function
DECL|function|drawTree
name|void
name|QTreeView
operator|::
name|drawTree
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
specifier|const
name|QVector
argument_list|<
name|QTreeViewItem
argument_list|>
name|viewItems
init|=
name|d
operator|->
name|viewItems
decl_stmt|;
name|QStyleOptionViewItem
name|option
init|=
name|d
operator|->
name|viewOptions
argument_list|()
decl_stmt|;
specifier|const
name|QStyle
operator|::
name|State
name|state
init|=
name|option
operator|.
name|state
decl_stmt|;
name|d
operator|->
name|current
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|viewItems
operator|.
name|count
argument_list|()
operator|==
literal|0
operator|||
name|d
operator|->
name|header
operator|->
name|count
argument_list|()
operator|==
literal|0
operator|||
operator|!
name|d
operator|->
name|itemDelegate
condition|)
block|{
name|d
operator|->
name|paintAlternatingRowColors
argument_list|(
name|painter
argument_list|,
operator|&
name|option
argument_list|,
literal|0
argument_list|,
name|region
operator|.
name|boundingRect
argument_list|()
operator|.
name|bottom
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|firstVisibleItemOffset
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|firstVisibleItem
init|=
name|d
operator|->
name|firstVisibleItem
argument_list|(
operator|&
name|firstVisibleItemOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstVisibleItem
operator|<
literal|0
condition|)
block|{
name|d
operator|->
name|paintAlternatingRowColors
argument_list|(
name|painter
argument_list|,
operator|&
name|option
argument_list|,
literal|0
argument_list|,
name|region
operator|.
name|boundingRect
argument_list|()
operator|.
name|bottom
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|int
name|viewportWidth
init|=
name|d
operator|->
name|viewport
operator|->
name|width
argument_list|()
decl_stmt|;
name|QPoint
name|hoverPos
init|=
name|d
operator|->
name|viewport
operator|->
name|mapFromGlobal
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|hoverBranch
operator|=
name|d
operator|->
name|itemDecorationAt
argument_list|(
name|hoverPos
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|region
operator|.
name|rects
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|drawn
decl_stmt|;
name|bool
name|multipleRects
init|=
operator|(
name|rects
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|a
control|)
block|{
specifier|const
name|QRect
name|area
init|=
operator|(
name|multipleRects
condition|?
name|QRect
argument_list|(
literal|0
argument_list|,
name|rects
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|y
argument_list|()
argument_list|,
name|viewportWidth
argument_list|,
name|rects
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|height
argument_list|()
argument_list|)
else|:
name|rects
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|)
decl_stmt|;
name|d
operator|->
name|leftAndRight
operator|=
name|d
operator|->
name|startAndEndColumns
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|firstVisibleItem
decl_stmt|;
comment|// the first item at the top of the viewport
name|int
name|y
init|=
name|firstVisibleItemOffset
decl_stmt|;
comment|// we may only see part of the first item
comment|// start at the top of the viewport  and iterate down to the update area
for|for
control|(
init|;
name|i
operator|<
name|viewItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|itemHeight
init|=
name|d
operator|->
name|itemHeight
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|y
operator|+
name|itemHeight
operator|>
name|area
operator|.
name|top
argument_list|()
condition|)
break|break;
name|y
operator|+=
name|itemHeight
expr_stmt|;
block|}
comment|// paint the visible rows
for|for
control|(
init|;
name|i
operator|<
name|viewItems
operator|.
name|count
argument_list|()
operator|&&
name|y
operator|<=
name|area
operator|.
name|bottom
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|itemHeight
init|=
name|d
operator|->
name|itemHeight
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|option
operator|.
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
name|y
argument_list|,
name|viewportWidth
argument_list|,
name|itemHeight
argument_list|)
expr_stmt|;
name|option
operator|.
name|state
operator|=
name|state
operator||
operator|(
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|expanded
condition|?
name|QStyle
operator|::
name|State_Open
else|:
name|QStyle
operator|::
name|State_None
operator|)
operator||
operator|(
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|hasChildren
condition|?
name|QStyle
operator|::
name|State_Children
else|:
name|QStyle
operator|::
name|State_None
operator|)
operator||
operator|(
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|hasMoreSiblings
condition|?
name|QStyle
operator|::
name|State_Sibling
else|:
name|QStyle
operator|::
name|State_None
operator|)
expr_stmt|;
name|d
operator|->
name|current
operator|=
name|i
expr_stmt|;
name|d
operator|->
name|spanning
operator|=
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|spanning
expr_stmt|;
if|if
condition|(
operator|!
name|multipleRects
operator|||
operator|!
name|drawn
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|drawRow
argument_list|(
name|painter
argument_list|,
name|option
argument_list|,
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|multipleRects
condition|)
comment|// even if the rect only intersects the item,
name|drawn
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// the entire item will be painted
block|}
name|y
operator|+=
name|itemHeight
expr_stmt|;
block|}
if|if
condition|(
name|y
operator|<=
name|area
operator|.
name|bottom
argument_list|()
condition|)
block|{
name|d
operator|->
name|current
operator|=
name|i
expr_stmt|;
name|d
operator|->
name|paintAlternatingRowColors
argument_list|(
name|painter
argument_list|,
operator|&
name|option
argument_list|,
name|y
argument_list|,
name|area
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/// ### move to QObject :)
end_comment
begin_function
DECL|function|ancestorOf
specifier|static
specifier|inline
name|bool
name|ancestorOf
parameter_list|(
name|QObject
modifier|*
name|widget
parameter_list|,
name|QObject
modifier|*
name|other
parameter_list|)
block|{
for|for
control|(
name|QObject
modifier|*
name|parent
init|=
name|other
init|;
name|parent
operator|!=
literal|0
condition|;
name|parent
operator|=
name|parent
operator|->
name|parent
argument_list|()
control|)
block|{
if|if
condition|(
name|parent
operator|==
name|widget
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|calcLogicalIndices
name|void
name|QTreeViewPrivate
operator|::
name|calcLogicalIndices
parameter_list|(
name|QVector
argument_list|<
name|int
argument_list|>
modifier|*
name|logicalIndices
parameter_list|,
name|QVector
argument_list|<
name|QStyleOptionViewItem
operator|::
name|ViewItemPosition
argument_list|>
modifier|*
name|itemPositions
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|columnCount
init|=
name|header
operator|->
name|count
argument_list|()
decl_stmt|;
comment|/* 'left' and 'right' are the left-most and right-most visible visual indices.        Compute the first visible logical indices before and after the left and right.        We will use these values to determine the QStyleOptionViewItem::viewItemPosition. */
name|int
name|logicalIndexBeforeLeft
init|=
operator|-
literal|1
decl_stmt|,
name|logicalIndexAfterRight
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|visualIndex
init|=
name|left
operator|-
literal|1
init|;
name|visualIndex
operator|>=
literal|0
condition|;
operator|--
name|visualIndex
control|)
block|{
name|int
name|logicalIndex
init|=
name|header
operator|->
name|logicalIndex
argument_list|(
name|visualIndex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|header
operator|->
name|isSectionHidden
argument_list|(
name|logicalIndex
argument_list|)
condition|)
block|{
name|logicalIndexBeforeLeft
operator|=
name|logicalIndex
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|int
name|visualIndex
init|=
name|left
init|;
name|visualIndex
operator|<
name|columnCount
condition|;
operator|++
name|visualIndex
control|)
block|{
name|int
name|logicalIndex
init|=
name|header
operator|->
name|logicalIndex
argument_list|(
name|visualIndex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|header
operator|->
name|isSectionHidden
argument_list|(
name|logicalIndex
argument_list|)
condition|)
block|{
if|if
condition|(
name|visualIndex
operator|>
name|right
condition|)
block|{
name|logicalIndexAfterRight
operator|=
name|logicalIndex
expr_stmt|;
break|break;
block|}
name|logicalIndices
operator|->
name|append
argument_list|(
name|logicalIndex
argument_list|)
expr_stmt|;
block|}
block|}
name|itemPositions
operator|->
name|resize
argument_list|(
name|logicalIndices
operator|->
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|currentLogicalSection
init|=
literal|0
init|;
name|currentLogicalSection
operator|<
name|logicalIndices
operator|->
name|count
argument_list|()
condition|;
operator|++
name|currentLogicalSection
control|)
block|{
specifier|const
name|int
name|headerSection
init|=
name|logicalIndices
operator|->
name|at
argument_list|(
name|currentLogicalSection
argument_list|)
decl_stmt|;
comment|// determine the viewItemPosition depending on the position of column 0
name|int
name|nextLogicalSection
init|=
name|currentLogicalSection
operator|+
literal|1
operator|>=
name|logicalIndices
operator|->
name|count
argument_list|()
condition|?
name|logicalIndexAfterRight
else|:
name|logicalIndices
operator|->
name|at
argument_list|(
name|currentLogicalSection
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|prevLogicalSection
init|=
name|currentLogicalSection
operator|-
literal|1
operator|<
literal|0
condition|?
name|logicalIndexBeforeLeft
else|:
name|logicalIndices
operator|->
name|at
argument_list|(
name|currentLogicalSection
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QStyleOptionViewItem
operator|::
name|ViewItemPosition
name|pos
decl_stmt|;
if|if
condition|(
name|columnCount
operator|==
literal|1
operator|||
operator|(
name|nextLogicalSection
operator|==
literal|0
operator|&&
name|prevLogicalSection
operator|==
operator|-
literal|1
operator|)
operator|||
operator|(
name|headerSection
operator|==
literal|0
operator|&&
name|nextLogicalSection
operator|==
operator|-
literal|1
operator|)
operator|||
name|spanning
condition|)
name|pos
operator|=
name|QStyleOptionViewItem
operator|::
name|OnlyOne
expr_stmt|;
elseif|else
if|if
condition|(
name|headerSection
operator|==
literal|0
operator|||
operator|(
name|nextLogicalSection
operator|!=
literal|0
operator|&&
name|prevLogicalSection
operator|==
operator|-
literal|1
operator|)
condition|)
name|pos
operator|=
name|QStyleOptionViewItem
operator|::
name|Beginning
expr_stmt|;
elseif|else
if|if
condition|(
name|nextLogicalSection
operator|==
literal|0
operator|||
name|nextLogicalSection
operator|==
operator|-
literal|1
condition|)
name|pos
operator|=
name|QStyleOptionViewItem
operator|::
name|End
expr_stmt|;
else|else
name|pos
operator|=
name|QStyleOptionViewItem
operator|::
name|Middle
expr_stmt|;
operator|(
operator|*
name|itemPositions
operator|)
index|[
name|currentLogicalSection
index|]
operator|=
name|pos
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Draws the row in the tree view that contains the model item \a index,     using the \a painter given. The \a option control how the item is     displayed.      \sa setAlternatingRowColors() */
end_comment
begin_function
DECL|function|drawRow
name|void
name|QTreeView
operator|::
name|drawRow
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
name|QStyleOptionViewItem
name|opt
init|=
name|option
decl_stmt|;
specifier|const
name|QPoint
name|offset
init|=
name|d
operator|->
name|scrollDelayOffset
decl_stmt|;
specifier|const
name|int
name|y
init|=
name|option
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|offset
operator|.
name|y
argument_list|()
decl_stmt|;
specifier|const
name|QModelIndex
name|parent
init|=
name|index
operator|.
name|parent
argument_list|()
decl_stmt|;
specifier|const
name|QHeaderView
modifier|*
name|header
init|=
name|d
operator|->
name|header
decl_stmt|;
specifier|const
name|QModelIndex
name|current
init|=
name|currentIndex
argument_list|()
decl_stmt|;
specifier|const
name|QModelIndex
name|hover
init|=
name|d
operator|->
name|hover
decl_stmt|;
specifier|const
name|bool
name|reverse
init|=
name|isRightToLeft
argument_list|()
decl_stmt|;
specifier|const
name|QStyle
operator|::
name|State
name|state
init|=
name|opt
operator|.
name|state
decl_stmt|;
specifier|const
name|bool
name|spanning
init|=
name|d
operator|->
name|spanning
decl_stmt|;
specifier|const
name|int
name|left
init|=
operator|(
name|spanning
condition|?
name|header
operator|->
name|visualIndex
argument_list|(
literal|0
argument_list|)
else|:
name|d
operator|->
name|leftAndRight
operator|.
name|first
operator|)
decl_stmt|;
specifier|const
name|int
name|right
init|=
operator|(
name|spanning
condition|?
name|header
operator|->
name|visualIndex
argument_list|(
literal|0
argument_list|)
else|:
name|d
operator|->
name|leftAndRight
operator|.
name|second
operator|)
decl_stmt|;
specifier|const
name|bool
name|alternate
init|=
name|d
operator|->
name|alternatingColors
decl_stmt|;
specifier|const
name|bool
name|enabled
init|=
operator|(
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
operator|!=
literal|0
decl_stmt|;
specifier|const
name|bool
name|allColumnsShowFocus
init|=
name|d
operator|->
name|allColumnsShowFocus
decl_stmt|;
comment|// when the row contains an index widget which has focus,
comment|// we want to paint the entire row as active
name|bool
name|indexWidgetHasFocus
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|current
operator|.
name|row
argument_list|()
operator|==
name|index
operator|.
name|row
argument_list|()
operator|)
operator|&&
operator|!
name|d
operator|->
name|editorIndexHash
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|int
name|r
init|=
name|index
operator|.
name|row
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|fw
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|header
operator|->
name|count
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
name|QModelIndex
name|idx
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|editor
init|=
name|indexWidget
argument_list|(
name|idx
argument_list|)
condition|)
block|{
if|if
condition|(
name|ancestorOf
argument_list|(
name|editor
argument_list|,
name|fw
argument_list|)
condition|)
block|{
name|indexWidgetHasFocus
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
specifier|const
name|bool
name|widgetHasFocus
init|=
name|hasFocus
argument_list|()
decl_stmt|;
name|bool
name|currentRowHasFocus
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|allColumnsShowFocus
operator|&&
name|widgetHasFocus
operator|&&
name|current
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// check if the focus index is before or after the visible columns
specifier|const
name|int
name|r
init|=
name|index
operator|.
name|row
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|left
operator|&&
operator|!
name|currentRowHasFocus
condition|;
operator|++
name|c
control|)
block|{
name|QModelIndex
name|idx
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|currentRowHasFocus
operator|=
operator|(
name|idx
operator|==
name|current
operator|)
expr_stmt|;
block|}
name|QModelIndex
name|parent
init|=
name|d
operator|->
name|model
operator|->
name|parent
argument_list|(
name|index
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
name|right
init|;
name|c
operator|<
name|header
operator|->
name|count
argument_list|()
operator|&&
operator|!
name|currentRowHasFocus
condition|;
operator|++
name|c
control|)
block|{
name|currentRowHasFocus
operator|=
operator|(
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|parent
argument_list|)
operator|==
name|current
operator|)
expr_stmt|;
block|}
block|}
comment|// ### special case: treeviews with multiple columns draw
comment|// the selections differently than with only one column
name|opt
operator|.
name|showDecorationSelected
operator|=
operator|(
name|d
operator|->
name|selectionBehavior
operator|&
name|SelectRows
operator|)
operator|||
name|option
operator|.
name|showDecorationSelected
expr_stmt|;
name|int
name|width
decl_stmt|,
name|height
init|=
name|option
operator|.
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|position
decl_stmt|;
name|QModelIndex
name|modelIndex
decl_stmt|;
specifier|const
name|bool
name|hoverRow
init|=
name|selectionBehavior
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|SelectRows
operator|&&
name|index
operator|.
name|parent
argument_list|()
operator|==
name|hover
operator|.
name|parent
argument_list|()
operator|&&
name|index
operator|.
name|row
argument_list|()
operator|==
name|hover
operator|.
name|row
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|logicalIndices
decl_stmt|;
name|QVector
argument_list|<
name|QStyleOptionViewItem
operator|::
name|ViewItemPosition
argument_list|>
name|viewItemPosList
decl_stmt|;
comment|// vector of left/middle/end for each logicalIndex
name|d
operator|->
name|calcLogicalIndices
argument_list|(
operator|&
name|logicalIndices
argument_list|,
operator|&
name|viewItemPosList
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|currentLogicalSection
init|=
literal|0
init|;
name|currentLogicalSection
operator|<
name|logicalIndices
operator|.
name|count
argument_list|()
condition|;
operator|++
name|currentLogicalSection
control|)
block|{
name|int
name|headerSection
init|=
name|logicalIndices
operator|.
name|at
argument_list|(
name|currentLogicalSection
argument_list|)
decl_stmt|;
name|position
operator|=
name|columnViewportPosition
argument_list|(
name|headerSection
argument_list|)
operator|+
name|offset
operator|.
name|x
argument_list|()
expr_stmt|;
name|width
operator|=
name|header
operator|->
name|sectionSize
argument_list|(
name|headerSection
argument_list|)
expr_stmt|;
if|if
condition|(
name|spanning
condition|)
block|{
name|int
name|lastSection
init|=
name|header
operator|->
name|logicalIndex
argument_list|(
name|header
operator|->
name|count
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reverse
condition|)
block|{
name|width
operator|=
name|columnViewportPosition
argument_list|(
name|lastSection
argument_list|)
operator|+
name|header
operator|->
name|sectionSize
argument_list|(
name|lastSection
argument_list|)
operator|-
name|position
expr_stmt|;
block|}
else|else
block|{
name|width
operator|+=
name|position
operator|-
name|columnViewportPosition
argument_list|(
name|lastSection
argument_list|)
expr_stmt|;
name|position
operator|=
name|columnViewportPosition
argument_list|(
name|lastSection
argument_list|)
expr_stmt|;
block|}
block|}
name|modelIndex
operator|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|headerSection
argument_list|,
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|modelIndex
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
name|opt
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|opt
operator|.
name|viewItemPosition
operator|=
name|viewItemPosList
operator|.
name|at
argument_list|(
name|currentLogicalSection
argument_list|)
expr_stmt|;
comment|// fake activeness when row editor has focus
if|if
condition|(
name|indexWidgetHasFocus
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Active
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|selectionModel
operator|->
name|isSelected
argument_list|(
name|modelIndex
argument_list|)
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
if|if
condition|(
name|widgetHasFocus
operator|&&
operator|(
name|current
operator|==
name|modelIndex
operator|)
condition|)
block|{
if|if
condition|(
name|allColumnsShowFocus
condition|)
name|currentRowHasFocus
operator|=
literal|true
expr_stmt|;
else|else
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_HasFocus
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|hoverRow
operator|||
name|modelIndex
operator|==
name|hover
operator|)
operator|&&
operator|(
name|option
operator|.
name|showDecorationSelected
operator|||
operator|(
name|d
operator|->
name|hoverBranch
operator|==
operator|-
literal|1
operator|)
operator|)
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
else|else
name|opt
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
name|QPalette
operator|::
name|ColorGroup
name|cg
decl_stmt|;
if|if
condition|(
operator|(
name|d
operator|->
name|model
operator|->
name|flags
argument_list|(
name|modelIndex
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsEnabled
operator|)
operator|==
literal|0
condition|)
block|{
name|opt
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
name|cg
operator|=
name|QPalette
operator|::
name|Disabled
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Active
condition|)
block|{
name|cg
operator|=
name|QPalette
operator|::
name|Active
expr_stmt|;
block|}
else|else
block|{
name|cg
operator|=
name|QPalette
operator|::
name|Inactive
expr_stmt|;
block|}
name|opt
operator|.
name|palette
operator|.
name|setCurrentColorGroup
argument_list|(
name|cg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|alternate
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|current
operator|&
literal|1
condition|)
block|{
name|opt
operator|.
name|features
operator||=
name|QStyleOptionViewItem
operator|::
name|Alternate
expr_stmt|;
block|}
else|else
block|{
name|opt
operator|.
name|features
operator|&=
operator|~
name|QStyleOptionViewItem
operator|::
name|Alternate
expr_stmt|;
block|}
block|}
comment|/* Prior to Qt 4.3, the background of the branch (in selected state and            alternate row color was provided by the view. For backward compatibility,            this is now delegated to the style using PE_PanelViewItemRow which            does the appropriate fill */
if|if
condition|(
name|headerSection
operator|==
literal|0
condition|)
block|{
specifier|const
name|int
name|i
init|=
name|d
operator|->
name|indentationForItem
argument_list|(
name|d
operator|->
name|current
argument_list|)
decl_stmt|;
name|QRect
name|branches
argument_list|(
name|reverse
condition|?
name|position
operator|+
name|width
operator|-
name|i
else|:
name|position
argument_list|,
name|y
argument_list|,
name|i
argument_list|,
name|height
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|setClipRect
init|=
name|branches
operator|.
name|width
argument_list|()
operator|>
name|width
decl_stmt|;
if|if
condition|(
name|setClipRect
condition|)
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
name|QRect
argument_list|(
name|position
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// draw background for the branch (selection + alternate row)
name|opt
operator|.
name|rect
operator|=
name|branches
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_PanelItemViewRow
argument_list|,
operator|&
name|opt
argument_list|,
name|painter
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// draw background of the item (only alternate row). rest of the background
comment|// is provided by the delegate
name|QStyle
operator|::
name|State
name|oldState
init|=
name|opt
operator|.
name|state
decl_stmt|;
name|opt
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
name|opt
operator|.
name|rect
operator|.
name|setRect
argument_list|(
name|reverse
condition|?
name|position
else|:
name|i
operator|+
name|position
argument_list|,
name|y
argument_list|,
name|width
operator|-
name|i
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_PanelItemViewRow
argument_list|,
operator|&
name|opt
argument_list|,
name|painter
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|oldState
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|indent
operator|!=
literal|0
condition|)
name|drawBranches
argument_list|(
name|painter
argument_list|,
name|branches
argument_list|,
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|setClipRect
condition|)
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QStyle
operator|::
name|State
name|oldState
init|=
name|opt
operator|.
name|state
decl_stmt|;
name|opt
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
name|opt
operator|.
name|rect
operator|.
name|setRect
argument_list|(
name|position
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_PanelItemViewRow
argument_list|,
operator|&
name|opt
argument_list|,
name|painter
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|oldState
expr_stmt|;
block|}
name|d
operator|->
name|delegateForIndex
argument_list|(
name|modelIndex
argument_list|)
operator|->
name|paint
argument_list|(
name|painter
argument_list|,
name|opt
argument_list|,
name|modelIndex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentRowHasFocus
condition|)
block|{
name|QStyleOptionFocusRect
name|o
decl_stmt|;
name|o
operator|.
name|QStyleOption
operator|::
name|operator
name|=
parameter_list|(
name|option
parameter_list|)
function_decl|;
name|o
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_KeyboardFocusChange
expr_stmt|;
name|QPalette
operator|::
name|ColorGroup
name|cg
init|=
operator|(
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
condition|?
name|QPalette
operator|::
name|Normal
else|:
name|QPalette
operator|::
name|Disabled
decl_stmt|;
name|o
operator|.
name|backgroundColor
operator|=
name|option
operator|.
name|palette
operator|.
name|color
argument_list|(
name|cg
argument_list|,
name|d
operator|->
name|selectionModel
operator|->
name|isSelected
argument_list|(
name|index
argument_list|)
condition|?
name|QPalette
operator|::
name|Highlight
else|:
name|QPalette
operator|::
name|Background
argument_list|)
expr_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|option
operator|.
name|showDecorationSelected
condition|)
name|x
operator|=
name|header
operator|->
name|sectionPosition
argument_list|(
literal|0
argument_list|)
operator|+
name|d
operator|->
name|indentationForItem
argument_list|(
name|d
operator|->
name|current
argument_list|)
expr_stmt|;
name|QRect
name|focusRect
argument_list|(
name|x
operator|-
name|header
operator|->
name|offset
argument_list|()
argument_list|,
name|y
argument_list|,
name|header
operator|->
name|length
argument_list|()
operator|-
name|x
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|o
operator|.
name|rect
operator|=
name|style
argument_list|()
operator|->
name|visualRect
argument_list|(
name|layoutDirection
argument_list|()
argument_list|,
name|d
operator|->
name|viewport
operator|->
name|rect
argument_list|()
argument_list|,
name|focusRect
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameFocusRect
argument_list|,
operator|&
name|o
argument_list|,
name|painter
argument_list|)
expr_stmt|;
comment|// if we show focus on all columns and the first section is moved,
comment|// we have to split the focus rect into two rects
if|if
condition|(
name|allColumnsShowFocus
operator|&&
operator|!
name|option
operator|.
name|showDecorationSelected
operator|&&
name|header
operator|->
name|sectionsMoved
argument_list|()
operator|&&
operator|(
name|header
operator|->
name|visualIndex
argument_list|(
literal|0
argument_list|)
operator|!=
literal|0
operator|)
condition|)
block|{
name|QRect
name|sectionRect
argument_list|(
literal|0
argument_list|,
name|y
argument_list|,
name|header
operator|->
name|sectionPosition
argument_list|(
literal|0
argument_list|)
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|o
operator|.
name|rect
operator|=
name|style
argument_list|()
operator|->
name|visualRect
argument_list|(
name|layoutDirection
argument_list|()
argument_list|,
name|d
operator|->
name|viewport
operator|->
name|rect
argument_list|()
argument_list|,
name|sectionRect
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameFocusRect
argument_list|,
operator|&
name|o
argument_list|,
name|painter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!   Draws the branches in the tree view on the same row as the model item   \a index, using the \a painter given. The branches are drawn in the   rectangle specified by \a rect. */
end_comment
begin_function
DECL|function|drawBranches
name|void
name|QTreeView
operator|::
name|drawBranches
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|reverse
init|=
name|isRightToLeft
argument_list|()
decl_stmt|;
specifier|const
name|int
name|indent
init|=
name|d
operator|->
name|indent
decl_stmt|;
specifier|const
name|int
name|outer
init|=
name|d
operator|->
name|rootDecoration
condition|?
literal|0
else|:
literal|1
decl_stmt|;
specifier|const
name|int
name|item
init|=
name|d
operator|->
name|current
decl_stmt|;
specifier|const
name|QTreeViewItem
modifier|&
name|viewItem
init|=
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|int
name|level
init|=
name|viewItem
operator|.
name|level
decl_stmt|;
name|QRect
name|primitive
argument_list|(
name|reverse
condition|?
name|rect
operator|.
name|left
argument_list|()
else|:
name|rect
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|indent
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QModelIndex
name|parent
init|=
name|index
operator|.
name|parent
argument_list|()
decl_stmt|;
name|QModelIndex
name|current
init|=
name|parent
decl_stmt|;
name|QModelIndex
name|ancestor
init|=
name|current
operator|.
name|parent
argument_list|()
decl_stmt|;
name|QStyleOptionViewItem
name|opt
init|=
name|viewOptions
argument_list|()
decl_stmt|;
name|QStyle
operator|::
name|State
name|extraFlags
init|=
name|QStyle
operator|::
name|State_None
decl_stmt|;
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
name|extraFlags
operator||=
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|isActiveWindow
argument_list|()
condition|)
name|extraFlags
operator||=
name|QStyle
operator|::
name|State_Active
expr_stmt|;
name|QPoint
name|oldBO
init|=
name|painter
operator|->
name|brushOrigin
argument_list|()
decl_stmt|;
if|if
condition|(
name|verticalScrollMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerPixel
condition|)
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
name|verticalOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|alternatingColors
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|current
operator|&
literal|1
condition|)
block|{
name|opt
operator|.
name|features
operator||=
name|QStyleOptionViewItem
operator|::
name|Alternate
expr_stmt|;
block|}
else|else
block|{
name|opt
operator|.
name|features
operator|&=
operator|~
name|QStyleOptionViewItem
operator|::
name|Alternate
expr_stmt|;
block|}
block|}
comment|// When hovering over a row, pass State_Hover for painting the branch
comment|// indicators if it has the decoration (aka branch) selected.
name|bool
name|hoverRow
init|=
name|selectionBehavior
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|SelectRows
operator|&&
name|opt
operator|.
name|showDecorationSelected
operator|&&
name|index
operator|.
name|parent
argument_list|()
operator|==
name|d
operator|->
name|hover
operator|.
name|parent
argument_list|()
operator|&&
name|index
operator|.
name|row
argument_list|()
operator|==
name|d
operator|->
name|hover
operator|.
name|row
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|selectionModel
operator|->
name|isSelected
argument_list|(
name|index
argument_list|)
condition|)
name|extraFlags
operator||=
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
if|if
condition|(
name|level
operator|>=
name|outer
condition|)
block|{
comment|// start with the innermost branch
name|primitive
operator|.
name|moveLeft
argument_list|(
name|reverse
condition|?
name|primitive
operator|.
name|left
argument_list|()
else|:
name|primitive
operator|.
name|left
argument_list|()
operator|-
name|indent
argument_list|)
expr_stmt|;
name|opt
operator|.
name|rect
operator|=
name|primitive
expr_stmt|;
specifier|const
name|bool
name|expanded
init|=
name|viewItem
operator|.
name|expanded
decl_stmt|;
specifier|const
name|bool
name|children
init|=
name|viewItem
operator|.
name|hasChildren
decl_stmt|;
name|bool
name|moreSiblings
init|=
name|viewItem
operator|.
name|hasMoreSiblings
decl_stmt|;
name|opt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_Item
operator||
name|extraFlags
operator||
operator|(
name|moreSiblings
condition|?
name|QStyle
operator|::
name|State_Sibling
else|:
name|QStyle
operator|::
name|State_None
operator|)
operator||
operator|(
name|children
condition|?
name|QStyle
operator|::
name|State_Children
else|:
name|QStyle
operator|::
name|State_None
operator|)
operator||
operator|(
name|expanded
condition|?
name|QStyle
operator|::
name|State_Open
else|:
name|QStyle
operator|::
name|State_None
operator|)
expr_stmt|;
if|if
condition|(
name|hoverRow
operator|||
name|item
operator|==
name|d
operator|->
name|hoverBranch
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
else|else
name|opt
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_IndicatorBranch
argument_list|,
operator|&
name|opt
argument_list|,
name|painter
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|// then go out level by level
for|for
control|(
operator|--
name|level
init|;
name|level
operator|>=
name|outer
condition|;
operator|--
name|level
control|)
block|{
comment|// we have already drawn the innermost branch
name|primitive
operator|.
name|moveLeft
argument_list|(
name|reverse
condition|?
name|primitive
operator|.
name|left
argument_list|()
operator|+
name|indent
else|:
name|primitive
operator|.
name|left
argument_list|()
operator|-
name|indent
argument_list|)
expr_stmt|;
name|opt
operator|.
name|rect
operator|=
name|primitive
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|extraFlags
expr_stmt|;
name|bool
name|moreSiblings
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|hiddenIndexes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|moreSiblings
operator|=
operator|(
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|(
name|ancestor
argument_list|)
operator|-
literal|1
operator|>
name|current
operator|.
name|row
argument_list|()
operator|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|successor
init|=
name|item
operator|+
name|viewItem
operator|.
name|total
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|successor
operator|<
name|d
operator|->
name|viewItems
operator|.
name|size
argument_list|()
operator|&&
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|successor
argument_list|)
operator|.
name|level
operator|>=
name|uint
argument_list|(
name|level
argument_list|)
condition|)
block|{
specifier|const
name|QTreeViewItem
modifier|&
name|successorItem
init|=
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|successor
argument_list|)
decl_stmt|;
if|if
condition|(
name|successorItem
operator|.
name|level
operator|==
name|uint
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|moreSiblings
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|successor
operator|+=
name|successorItem
operator|.
name|total
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|moreSiblings
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Sibling
expr_stmt|;
if|if
condition|(
name|hoverRow
operator|||
name|item
operator|==
name|d
operator|->
name|hoverBranch
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
else|else
name|opt
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_IndicatorBranch
argument_list|,
operator|&
name|opt
argument_list|,
name|painter
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|current
operator|=
name|ancestor
expr_stmt|;
name|ancestor
operator|=
name|current
operator|.
name|parent
argument_list|()
expr_stmt|;
block|}
name|painter
operator|->
name|setBrushOrigin
argument_list|(
name|oldBO
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|QTreeView
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|bool
name|handled
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ListViewExpand_SelectMouseType
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
operator|==
name|QEvent
operator|::
name|MouseButtonPress
condition|)
name|handled
operator|=
name|d
operator|->
name|expandOrCollapseItemAtPos
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|handled
operator|&&
name|d
operator|->
name|itemDecorationAt
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|QAbstractItemView
operator|::
name|mousePressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QTreeView
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|itemDecorationAt
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|QAbstractItemView
operator|::
name|mouseReleaseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|state
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|DragSelectingState
condition|)
name|setState
argument_list|(
name|QAbstractItemView
operator|::
name|NoState
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ListViewExpand_SelectMouseType
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
condition|)
name|d
operator|->
name|expandOrCollapseItemAtPos
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mouseDoubleClickEvent
name|void
name|QTreeView
operator|::
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|!=
name|NoState
operator|||
operator|!
name|d
operator|->
name|viewport
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
return|return;
name|int
name|i
init|=
name|d
operator|->
name|itemDecorationAt
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
block|{
name|i
operator|=
name|d
operator|->
name|itemAtCoordinate
argument_list|(
name|event
operator|->
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
return|return;
comment|// user clicked outside the items
specifier|const
name|QPersistentModelIndex
name|firstColumnIndex
init|=
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|index
decl_stmt|;
specifier|const
name|QPersistentModelIndex
name|persistent
init|=
name|indexAt
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|pressedIndex
operator|!=
name|persistent
condition|)
block|{
name|mousePressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// signal handlers may change the model
emit|emit
name|doubleClicked
argument_list|(
name|persistent
argument_list|)
emit|;
if|if
condition|(
operator|!
name|persistent
operator|.
name|isValid
argument_list|()
condition|)
return|return;
if|if
condition|(
name|edit
argument_list|(
name|persistent
argument_list|,
name|DoubleClicked
argument_list|,
name|event
argument_list|)
operator|||
name|state
argument_list|()
operator|!=
name|NoState
condition|)
return|return;
comment|// the double click triggered editing
if|if
condition|(
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ItemView_ActivateItemOnSingleClick
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
emit|emit
name|activated
argument_list|(
name|persistent
argument_list|)
emit|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
comment|// we need to make sure viewItems is updated
if|if
condition|(
name|d
operator|->
name|itemsExpandable
operator|&&
name|d
operator|->
name|expandsOnDoubleClick
operator|&&
name|d
operator|->
name|hasVisibleChildren
argument_list|(
name|persistent
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|i
operator|<
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
operator|)
operator|&&
operator|(
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|index
operator|==
name|firstColumnIndex
operator|)
operator|)
condition|)
block|{
comment|// find the new index of the item
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|index
operator|==
name|firstColumnIndex
condition|)
break|break;
block|}
if|if
condition|(
name|i
operator|==
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
condition|)
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|expanded
condition|)
name|d
operator|->
name|collapse
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|expand
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateGeometries
argument_list|()
expr_stmt|;
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mouseMoveEvent
name|void
name|QTreeView
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|itemDecorationAt
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
condition|)
comment|// ### what about expanding/collapsing state ?
name|QAbstractItemView
operator|::
name|mouseMoveEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QTreeView
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|QModelIndex
name|current
init|=
name|currentIndex
argument_list|()
decl_stmt|;
comment|//this is the management of the expansion
if|if
condition|(
name|d
operator|->
name|isIndexValid
argument_list|(
name|current
argument_list|)
operator|&&
name|d
operator|->
name|model
operator|&&
name|d
operator|->
name|itemsExpandable
condition|)
block|{
switch|switch
condition|(
name|event
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Asterisk
case|:
block|{
name|QStack
argument_list|<
name|QModelIndex
argument_list|>
name|parents
decl_stmt|;
name|parents
operator|.
name|push
argument_list|(
name|current
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|parents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QModelIndex
name|parent
init|=
name|parents
operator|.
name|pop
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|child
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isIndexValid
argument_list|(
name|child
argument_list|)
condition|)
break|break;
name|parents
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|expand
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
name|expand
argument_list|(
name|current
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Qt
operator|::
name|Key_Plus
case|:
name|expand
argument_list|(
name|current
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_Minus
case|:
name|collapse
argument_list|(
name|current
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|QAbstractItemView
operator|::
name|keyPressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|indexAt
name|QModelIndex
name|QTreeView
operator|::
name|indexAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|int
name|visualIndex
init|=
name|d
operator|->
name|itemAtCoordinate
argument_list|(
name|point
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|d
operator|->
name|modelIndex
argument_list|(
name|visualIndex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
if|if
condition|(
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|visualIndex
argument_list|)
operator|.
name|spanning
condition|)
return|return
name|idx
return|;
name|int
name|column
init|=
name|d
operator|->
name|columnAt
argument_list|(
name|point
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|==
name|idx
operator|.
name|column
argument_list|()
condition|)
return|return
name|idx
return|;
if|if
condition|(
name|column
operator|<
literal|0
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
return|return
name|idx
operator|.
name|sibling
argument_list|(
name|idx
operator|.
name|row
argument_list|()
argument_list|,
name|column
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the model index of the item above \a index. */
end_comment
begin_function
DECL|function|indexAbove
name|QModelIndex
name|QTreeView
operator|::
name|indexAbove
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isIndexValid
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|int
name|i
init|=
name|d
operator|->
name|viewIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|--
name|i
operator|<
literal|0
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
specifier|const
name|QModelIndex
name|firstColumnIndex
init|=
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|index
decl_stmt|;
return|return
name|firstColumnIndex
operator|.
name|sibling
argument_list|(
name|firstColumnIndex
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the model index of the item below \a index. */
end_comment
begin_function
DECL|function|indexBelow
name|QModelIndex
name|QTreeView
operator|::
name|indexBelow
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isIndexValid
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|int
name|i
init|=
name|d
operator|->
name|viewIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|++
name|i
operator|>=
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
specifier|const
name|QModelIndex
name|firstColumnIndex
init|=
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|index
decl_stmt|;
return|return
name|firstColumnIndex
operator|.
name|sibling
argument_list|(
name|firstColumnIndex
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Lays out the items in the tree view. */
end_comment
begin_function
DECL|function|doItemsLayout
name|void
name|QTreeView
operator|::
name|doItemsLayout
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasRemovedItems
condition|)
block|{
comment|//clean the QSet that may contains old (and this invalid) indexes
name|d
operator|->
name|hasRemovedItems
operator|=
literal|false
expr_stmt|;
name|QSet
argument_list|<
name|QPersistentModelIndex
argument_list|>
operator|::
name|iterator
name|it
init|=
name|d
operator|->
name|expandedIndexes
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|expandedIndexes
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|it
operator|->
name|isValid
argument_list|()
condition|)
name|it
operator|=
name|d
operator|->
name|expandedIndexes
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
else|else
operator|++
name|it
expr_stmt|;
block|}
name|it
operator|=
name|d
operator|->
name|hiddenIndexes
operator|.
name|begin
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|hiddenIndexes
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|it
operator|->
name|isValid
argument_list|()
condition|)
name|it
operator|=
name|d
operator|->
name|hiddenIndexes
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
else|else
operator|++
name|it
expr_stmt|;
block|}
block|}
name|d
operator|->
name|viewItems
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// prepare for new layout
name|QModelIndex
name|parent
init|=
name|d
operator|->
name|root
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|model
operator|->
name|hasChildren
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|d
operator|->
name|layout
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|QAbstractItemView
operator|::
name|doItemsLayout
argument_list|()
expr_stmt|;
name|d
operator|->
name|header
operator|->
name|doItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|reset
name|void
name|QTreeView
operator|::
name|reset
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|expandedIndexes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|hiddenIndexes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|spanningIndexes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QAbstractItemView
operator|::
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the horizontal offset of the items in the treeview.    Note that the tree view uses the horizontal header section   positions to determine the positions of columns in the view.    \sa verticalOffset() */
end_comment
begin_function
DECL|function|horizontalOffset
name|int
name|QTreeView
operator|::
name|horizontalOffset
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|header
operator|->
name|offset
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the vertical offset of the items in the tree view.    \sa horizontalOffset() */
end_comment
begin_function
DECL|function|verticalOffset
name|int
name|QTreeView
operator|::
name|verticalOffset
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|verticalScrollMode
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|uniformRowHeights
condition|)
return|return
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|*
name|d
operator|->
name|defaultItemHeight
return|;
comment|// If we are scrolling per item and have non-uniform row heights,
comment|// finding the vertical offset in pixels is going to be relatively slow.
comment|// ### find a faster way to do this
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
condition|)
return|return
name|offset
return|;
name|offset
operator|+=
name|d
operator|->
name|itemHeight
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|// scroll per pixel
return|return
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Move the cursor in the way described by \a cursorAction, using the     information provided by the button \a modifiers. */
end_comment
begin_function
DECL|function|moveCursor
name|QModelIndex
name|QTreeView
operator|::
name|moveCursor
parameter_list|(
name|CursorAction
name|cursorAction
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|modifiers
argument_list|)
expr_stmt|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|QModelIndex
name|current
init|=
name|currentIndex
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|current
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|i
init|=
name|d
operator|->
name|below
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|c
operator|<
name|d
operator|->
name|header
operator|->
name|count
argument_list|()
operator|&&
name|d
operator|->
name|header
operator|->
name|isSectionHidden
argument_list|(
name|c
argument_list|)
condition|)
operator|++
name|c
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
operator|&&
name|c
operator|<
name|d
operator|->
name|header
operator|->
name|count
argument_list|()
condition|)
block|{
return|return
name|d
operator|->
name|modelIndex
argument_list|(
name|i
argument_list|,
name|c
argument_list|)
return|;
block|}
return|return
name|QModelIndex
argument_list|()
return|;
block|}
name|int
name|vi
init|=
operator|-
literal|1
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
comment|// Selection behavior is slightly different on the Mac.
if|if
condition|(
name|d
operator|->
name|selectionMode
operator|==
name|QAbstractItemView
operator|::
name|ExtendedSelection
operator|&&
name|d
operator|->
name|selectionModel
operator|&&
name|d
operator|->
name|selectionModel
operator|->
name|hasSelection
argument_list|()
condition|)
block|{
specifier|const
name|bool
name|moveUpDown
init|=
operator|(
name|cursorAction
operator|==
name|MoveUp
operator|||
name|cursorAction
operator|==
name|MoveDown
operator|)
decl_stmt|;
specifier|const
name|bool
name|moveNextPrev
init|=
operator|(
name|cursorAction
operator|==
name|MoveNext
operator|||
name|cursorAction
operator|==
name|MovePrevious
operator|)
decl_stmt|;
specifier|const
name|bool
name|contiguousSelection
init|=
name|moveUpDown
operator|&&
operator|(
name|modifiers
operator|&
name|Qt
operator|::
name|ShiftModifier
operator|)
decl_stmt|;
comment|// Use the outermost index in the selection as the current index
if|if
condition|(
operator|!
name|contiguousSelection
operator|&&
operator|(
name|moveUpDown
operator|||
name|moveNextPrev
operator|)
condition|)
block|{
comment|// Find outermost index.
specifier|const
name|bool
name|useTopIndex
init|=
operator|(
name|cursorAction
operator|==
name|MoveUp
operator|||
name|cursorAction
operator|==
name|MovePrevious
operator|)
decl_stmt|;
name|int
name|index
init|=
name|useTopIndex
condition|?
name|INT_MAX
else|:
name|INT_MIN
decl_stmt|;
specifier|const
name|QItemSelection
name|selection
init|=
name|d
operator|->
name|selectionModel
operator|->
name|selection
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selection
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QItemSelectionRange
modifier|&
name|range
init|=
name|selection
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|candidate
init|=
name|d
operator|->
name|viewIndex
argument_list|(
name|useTopIndex
condition|?
name|range
operator|.
name|topLeft
argument_list|()
else|:
name|range
operator|.
name|bottomRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidate
operator|>=
literal|0
condition|)
name|index
operator|=
name|useTopIndex
condition|?
name|qMin
argument_list|(
name|index
argument_list|,
name|candidate
argument_list|)
else|:
name|qMax
argument_list|(
name|index
argument_list|,
name|candidate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|INT_MAX
condition|)
name|vi
operator|=
name|index
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|vi
operator|<
literal|0
condition|)
name|vi
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|viewIndex
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
if|if
condition|(
name|cursorAction
operator|==
name|MoveRight
condition|)
name|cursorAction
operator|=
name|MoveLeft
expr_stmt|;
elseif|else
if|if
condition|(
name|cursorAction
operator|==
name|MoveLeft
condition|)
name|cursorAction
operator|=
name|MoveRight
expr_stmt|;
block|}
switch|switch
condition|(
name|cursorAction
condition|)
block|{
case|case
name|MoveNext
case|:
case|case
name|MoveDown
case|:
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|vi
operator|==
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
operator|-
literal|1
operator|&&
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
return|return
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|current
operator|.
name|column
argument_list|()
argument_list|,
name|d
operator|->
name|root
argument_list|)
return|;
endif|#
directive|endif
return|return
name|d
operator|->
name|modelIndex
argument_list|(
name|d
operator|->
name|below
argument_list|(
name|vi
argument_list|)
argument_list|,
name|current
operator|.
name|column
argument_list|()
argument_list|)
return|;
case|case
name|MovePrevious
case|:
case|case
name|MoveUp
case|:
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|vi
operator|==
literal|0
operator|&&
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
return|return
name|d
operator|->
name|modelIndex
argument_list|(
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|,
name|current
operator|.
name|column
argument_list|()
argument_list|)
return|;
endif|#
directive|endif
return|return
name|d
operator|->
name|modelIndex
argument_list|(
name|d
operator|->
name|above
argument_list|(
name|vi
argument_list|)
argument_list|,
name|current
operator|.
name|column
argument_list|()
argument_list|)
return|;
case|case
name|MoveLeft
case|:
block|{
name|QScrollBar
modifier|*
name|sb
init|=
name|horizontalScrollBar
argument_list|()
decl_stmt|;
if|if
condition|(
name|vi
operator|<
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
operator|&&
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|vi
argument_list|)
operator|.
name|expanded
operator|&&
name|d
operator|->
name|itemsExpandable
operator|&&
name|sb
operator|->
name|value
argument_list|()
operator|==
name|sb
operator|->
name|minimum
argument_list|()
condition|)
block|{
name|d
operator|->
name|collapse
argument_list|(
name|vi
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|moveCursorUpdatedView
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|bool
name|descend
init|=
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ItemView_ArrowKeysNavigateIntoChildren
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|descend
condition|)
block|{
name|QModelIndex
name|par
init|=
name|current
operator|.
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
name|par
operator|.
name|isValid
argument_list|()
operator|&&
name|par
operator|!=
name|rootIndex
argument_list|()
condition|)
return|return
name|par
return|;
else|else
name|descend
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|descend
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|selectionBehavior
operator|==
name|SelectItems
operator|||
name|d
operator|->
name|selectionBehavior
operator|==
name|SelectColumns
condition|)
block|{
name|int
name|visualColumn
init|=
name|d
operator|->
name|header
operator|->
name|visualIndex
argument_list|(
name|current
operator|.
name|column
argument_list|()
argument_list|)
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|visualColumn
operator|>=
literal|0
operator|&&
name|isColumnHidden
argument_list|(
name|d
operator|->
name|header
operator|->
name|logicalIndex
argument_list|(
name|visualColumn
argument_list|)
argument_list|)
condition|)
name|visualColumn
operator|--
expr_stmt|;
name|int
name|newColumn
init|=
name|d
operator|->
name|header
operator|->
name|logicalIndex
argument_list|(
name|visualColumn
argument_list|)
decl_stmt|;
name|QModelIndex
name|next
init|=
name|current
operator|.
name|sibling
argument_list|(
name|current
operator|.
name|row
argument_list|()
argument_list|,
name|newColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|next
return|;
block|}
name|int
name|oldValue
init|=
name|sb
operator|->
name|value
argument_list|()
decl_stmt|;
name|sb
operator|->
name|setValue
argument_list|(
name|sb
operator|->
name|value
argument_list|()
operator|-
name|sb
operator|->
name|singleStep
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldValue
operator|!=
name|sb
operator|->
name|value
argument_list|()
condition|)
name|d
operator|->
name|moveCursorUpdatedView
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|updateGeometries
argument_list|()
expr_stmt|;
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|MoveRight
case|:
if|if
condition|(
name|vi
operator|<
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|vi
argument_list|)
operator|.
name|expanded
operator|&&
name|d
operator|->
name|itemsExpandable
operator|&&
name|d
operator|->
name|hasVisibleChildren
argument_list|(
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|vi
argument_list|)
operator|.
name|index
argument_list|)
condition|)
block|{
name|d
operator|->
name|expand
argument_list|(
name|vi
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|moveCursorUpdatedView
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|bool
name|descend
init|=
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ItemView_ArrowKeysNavigateIntoChildren
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|descend
condition|)
block|{
name|QModelIndex
name|idx
init|=
name|d
operator|->
name|modelIndex
argument_list|(
name|d
operator|->
name|below
argument_list|(
name|vi
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|.
name|parent
argument_list|()
operator|==
name|current
condition|)
return|return
name|idx
return|;
else|else
name|descend
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|descend
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|selectionBehavior
operator|==
name|SelectItems
operator|||
name|d
operator|->
name|selectionBehavior
operator|==
name|SelectColumns
condition|)
block|{
name|int
name|visualColumn
init|=
name|d
operator|->
name|header
operator|->
name|visualIndex
argument_list|(
name|current
operator|.
name|column
argument_list|()
argument_list|)
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|visualColumn
operator|<
name|d
operator|->
name|model
operator|->
name|columnCount
argument_list|(
name|current
operator|.
name|parent
argument_list|()
argument_list|)
operator|&&
name|isColumnHidden
argument_list|(
name|d
operator|->
name|header
operator|->
name|logicalIndex
argument_list|(
name|visualColumn
argument_list|)
argument_list|)
condition|)
name|visualColumn
operator|++
expr_stmt|;
name|QModelIndex
name|next
init|=
name|current
operator|.
name|sibling
argument_list|(
name|current
operator|.
name|row
argument_list|()
argument_list|,
name|visualColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|next
return|;
block|}
comment|//last restort: we change the scrollbar value
name|QScrollBar
modifier|*
name|sb
init|=
name|horizontalScrollBar
argument_list|()
decl_stmt|;
name|int
name|oldValue
init|=
name|sb
operator|->
name|value
argument_list|()
decl_stmt|;
name|sb
operator|->
name|setValue
argument_list|(
name|sb
operator|->
name|value
argument_list|()
operator|+
name|sb
operator|->
name|singleStep
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldValue
operator|!=
name|sb
operator|->
name|value
argument_list|()
condition|)
name|d
operator|->
name|moveCursorUpdatedView
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|updateGeometries
argument_list|()
expr_stmt|;
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
break|break;
case|case
name|MovePageUp
case|:
return|return
name|d
operator|->
name|modelIndex
argument_list|(
name|d
operator|->
name|pageUp
argument_list|(
name|vi
argument_list|)
argument_list|,
name|current
operator|.
name|column
argument_list|()
argument_list|)
return|;
case|case
name|MovePageDown
case|:
return|return
name|d
operator|->
name|modelIndex
argument_list|(
name|d
operator|->
name|pageDown
argument_list|(
name|vi
argument_list|)
argument_list|,
name|current
operator|.
name|column
argument_list|()
argument_list|)
return|;
case|case
name|MoveHome
case|:
return|return
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|current
operator|.
name|column
argument_list|()
argument_list|,
name|d
operator|->
name|root
argument_list|)
return|;
case|case
name|MoveEnd
case|:
return|return
name|d
operator|->
name|modelIndex
argument_list|(
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|,
name|current
operator|.
name|column
argument_list|()
argument_list|)
return|;
block|}
return|return
name|current
return|;
block|}
end_function
begin_comment
comment|/*!   Applies the selection \a command to the items in or touched by the   rectangle, \a rect.    \sa selectionCommand() */
end_comment
begin_function
DECL|function|setSelection
name|void
name|QTreeView
operator|::
name|setSelection
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|command
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|selectionModel
argument_list|()
operator|||
name|rect
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|QPoint
name|tl
argument_list|(
name|isRightToLeft
argument_list|()
condition|?
name|qMax
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|right
argument_list|()
argument_list|)
else|:
name|qMin
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|right
argument_list|()
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QPoint
name|br
argument_list|(
name|isRightToLeft
argument_list|()
condition|?
name|qMin
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|right
argument_list|()
argument_list|)
else|:
name|qMax
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|right
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QModelIndex
name|topLeft
init|=
name|indexAt
argument_list|(
name|tl
argument_list|)
decl_stmt|;
name|QModelIndex
name|bottomRight
init|=
name|indexAt
argument_list|(
name|br
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|topLeft
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|bottomRight
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|command
operator|&
name|QItemSelectionModel
operator|::
name|Clear
condition|)
name|selectionModel
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|topLeft
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|viewItems
operator|.
name|isEmpty
argument_list|()
condition|)
name|topLeft
operator|=
name|d
operator|->
name|viewItems
operator|.
name|first
argument_list|()
operator|.
name|index
expr_stmt|;
if|if
condition|(
operator|!
name|bottomRight
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|viewItems
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|int
name|column
init|=
name|d
operator|->
name|header
operator|->
name|logicalIndex
argument_list|(
name|d
operator|->
name|header
operator|->
name|count
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QModelIndex
name|index
init|=
name|d
operator|->
name|viewItems
operator|.
name|last
argument_list|()
operator|.
name|index
decl_stmt|;
name|bottomRight
operator|=
name|index
operator|.
name|sibling
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|isIndexEnabled
argument_list|(
name|topLeft
argument_list|)
operator|||
operator|!
name|d
operator|->
name|isIndexEnabled
argument_list|(
name|bottomRight
argument_list|)
condition|)
return|return;
name|d
operator|->
name|select
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the rectangle from the viewport of the items in the given   \a selection.    Since 4.7, the returned region only contains rectangles intersecting   (or included in) the viewport. */
end_comment
begin_function
DECL|function|visualRegionForSelection
name|QRegion
name|QTreeView
operator|::
name|visualRegionForSelection
parameter_list|(
specifier|const
name|QItemSelection
modifier|&
name|selection
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|selection
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QRegion
argument_list|()
return|;
name|QRegion
name|selectionRegion
decl_stmt|;
specifier|const
name|QRect
modifier|&
name|viewportRect
init|=
name|d
operator|->
name|viewport
operator|->
name|rect
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selection
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QItemSelectionRange
name|range
init|=
name|selection
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|range
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
name|QModelIndex
name|parent
init|=
name|range
operator|.
name|parent
argument_list|()
decl_stmt|;
name|QModelIndex
name|leftIndex
init|=
name|range
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|int
name|columnCount
init|=
name|d
operator|->
name|model
operator|->
name|columnCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
while|while
condition|(
name|leftIndex
operator|.
name|isValid
argument_list|()
operator|&&
name|isIndexHidden
argument_list|(
name|leftIndex
argument_list|)
condition|)
block|{
if|if
condition|(
name|leftIndex
operator|.
name|column
argument_list|()
operator|+
literal|1
operator|<
name|columnCount
condition|)
name|leftIndex
operator|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|leftIndex
operator|.
name|row
argument_list|()
argument_list|,
name|leftIndex
operator|.
name|column
argument_list|()
operator|+
literal|1
argument_list|,
name|parent
argument_list|)
expr_stmt|;
else|else
name|leftIndex
operator|=
name|QModelIndex
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|leftIndex
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
specifier|const
name|QRect
name|leftRect
init|=
name|visualRect
argument_list|(
name|leftIndex
argument_list|)
decl_stmt|;
name|int
name|top
init|=
name|leftRect
operator|.
name|top
argument_list|()
decl_stmt|;
name|QModelIndex
name|rightIndex
init|=
name|range
operator|.
name|bottomRight
argument_list|()
decl_stmt|;
while|while
condition|(
name|rightIndex
operator|.
name|isValid
argument_list|()
operator|&&
name|isIndexHidden
argument_list|(
name|rightIndex
argument_list|)
condition|)
block|{
if|if
condition|(
name|rightIndex
operator|.
name|column
argument_list|()
operator|-
literal|1
operator|>=
literal|0
condition|)
name|rightIndex
operator|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|rightIndex
operator|.
name|row
argument_list|()
argument_list|,
name|rightIndex
operator|.
name|column
argument_list|()
operator|-
literal|1
argument_list|,
name|parent
argument_list|)
expr_stmt|;
else|else
name|rightIndex
operator|=
name|QModelIndex
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rightIndex
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
specifier|const
name|QRect
name|rightRect
init|=
name|visualRect
argument_list|(
name|rightIndex
argument_list|)
decl_stmt|;
name|int
name|bottom
init|=
name|rightRect
operator|.
name|bottom
argument_list|()
decl_stmt|;
if|if
condition|(
name|top
operator|>
name|bottom
condition|)
name|qSwap
argument_list|<
name|int
argument_list|>
argument_list|(
name|top
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
name|int
name|height
init|=
name|bottom
operator|-
name|top
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|header
operator|->
name|sectionsMoved
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
name|range
operator|.
name|left
argument_list|()
init|;
name|c
operator|<=
name|range
operator|.
name|right
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
specifier|const
name|QRect
name|rangeRect
argument_list|(
name|columnViewportPosition
argument_list|(
name|c
argument_list|)
argument_list|,
name|top
argument_list|,
name|columnWidth
argument_list|(
name|c
argument_list|)
argument_list|,
name|height
argument_list|)
decl_stmt|;
if|if
condition|(
name|viewportRect
operator|.
name|intersects
argument_list|(
name|rangeRect
argument_list|)
condition|)
name|selectionRegion
operator|+=
name|rangeRect
expr_stmt|;
block|}
block|}
else|else
block|{
name|QRect
name|combined
init|=
name|leftRect
operator||
name|rightRect
decl_stmt|;
name|combined
operator|.
name|setX
argument_list|(
name|columnViewportPosition
argument_list|(
name|isRightToLeft
argument_list|()
condition|?
name|range
operator|.
name|right
argument_list|()
else|:
name|range
operator|.
name|left
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|viewportRect
operator|.
name|intersects
argument_list|(
name|combined
argument_list|)
condition|)
name|selectionRegion
operator|+=
name|combined
expr_stmt|;
block|}
block|}
return|return
name|selectionRegion
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|selectedIndexes
name|QModelIndexList
name|QTreeView
operator|::
name|selectedIndexes
parameter_list|()
specifier|const
block|{
name|QModelIndexList
name|viewSelected
decl_stmt|;
name|QModelIndexList
name|modelSelected
decl_stmt|;
if|if
condition|(
name|selectionModel
argument_list|()
condition|)
name|modelSelected
operator|=
name|selectionModel
argument_list|()
operator|->
name|selectedIndexes
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modelSelected
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// check that neither the parents nor the index is hidden before we add
name|QModelIndex
name|index
init|=
name|modelSelected
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
while|while
condition|(
name|index
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|isIndexHidden
argument_list|(
name|index
argument_list|)
condition|)
name|index
operator|=
name|index
operator|.
name|parent
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
name|viewSelected
operator|.
name|append
argument_list|(
name|modelSelected
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|viewSelected
return|;
block|}
end_function
begin_comment
comment|/*!   Scrolls the contents of the tree view by (\a dx, \a dy). */
end_comment
begin_function
DECL|function|scrollContentsBy
name|void
name|QTreeView
operator|::
name|scrollContentsBy
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|delayedAutoScroll
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// auto scroll was canceled by the user scrolling
name|dx
operator|=
name|isRightToLeft
argument_list|()
condition|?
operator|-
name|dx
else|:
name|dx
expr_stmt|;
if|if
condition|(
name|dx
condition|)
block|{
if|if
condition|(
name|horizontalScrollMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
condition|)
block|{
name|int
name|oldOffset
init|=
name|d
operator|->
name|header
operator|->
name|offset
argument_list|()
decl_stmt|;
if|if
condition|(
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|==
name|horizontalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
condition|)
name|d
operator|->
name|header
operator|->
name|setOffsetToLastSection
argument_list|()
expr_stmt|;
else|else
name|d
operator|->
name|header
operator|->
name|setOffsetToSectionPosition
argument_list|(
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|newOffset
init|=
name|d
operator|->
name|header
operator|->
name|offset
argument_list|()
decl_stmt|;
name|dx
operator|=
name|isRightToLeft
argument_list|()
condition|?
name|newOffset
operator|-
name|oldOffset
else|:
name|oldOffset
operator|-
name|newOffset
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|header
operator|->
name|setOffset
argument_list|(
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|const
name|int
name|itemHeight
init|=
name|d
operator|->
name|defaultItemHeight
operator|<=
literal|0
condition|?
name|sizeHintForRow
argument_list|(
literal|0
argument_list|)
else|:
name|d
operator|->
name|defaultItemHeight
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|viewItems
operator|.
name|isEmpty
argument_list|()
operator|||
name|itemHeight
operator|==
literal|0
condition|)
return|return;
comment|// guestimate the number of items in the viewport
name|int
name|viewCount
init|=
name|d
operator|->
name|viewport
operator|->
name|height
argument_list|()
operator|/
name|itemHeight
decl_stmt|;
name|int
name|maxDeltaY
init|=
name|qMin
argument_list|(
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
argument_list|,
name|viewCount
argument_list|)
decl_stmt|;
comment|// no need to do a lot of work if we are going to redraw the whole thing anyway
if|if
condition|(
name|qAbs
argument_list|(
name|dy
argument_list|)
operator|>
name|qAbs
argument_list|(
name|maxDeltaY
argument_list|)
operator|&&
name|d
operator|->
name|editorIndexHash
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|verticalScrollBar
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|dy
operator|&&
name|verticalScrollMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
condition|)
block|{
name|int
name|currentScrollbarValue
init|=
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
decl_stmt|;
name|int
name|previousScrollbarValue
init|=
name|currentScrollbarValue
operator|+
name|dy
decl_stmt|;
comment|// -(-dy)
name|int
name|currentViewIndex
init|=
name|currentScrollbarValue
decl_stmt|;
comment|// the first visible item
name|int
name|previousViewIndex
init|=
name|previousScrollbarValue
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QTreeViewItem
argument_list|>
name|viewItems
init|=
name|d
operator|->
name|viewItems
decl_stmt|;
name|dy
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|previousViewIndex
operator|<
name|currentViewIndex
condition|)
block|{
comment|// scrolling down
for|for
control|(
name|int
name|i
init|=
name|previousViewIndex
init|;
name|i
operator|<
name|currentViewIndex
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|<
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
condition|)
name|dy
operator|-=
name|d
operator|->
name|itemHeight
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|previousViewIndex
operator|>
name|currentViewIndex
condition|)
block|{
comment|// scrolling up
for|for
control|(
name|int
name|i
init|=
name|previousViewIndex
operator|-
literal|1
init|;
name|i
operator|>=
name|currentViewIndex
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|i
operator|<
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
condition|)
name|dy
operator|+=
name|d
operator|->
name|itemHeight
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|d
operator|->
name|scrollContentsBy
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   This slot is called whenever a column has been moved. */
end_comment
begin_function
DECL|function|columnMoved
name|void
name|QTreeView
operator|::
name|columnMoved
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|updateEditorGeometries
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|reexpand
name|void
name|QTreeView
operator|::
name|reexpand
parameter_list|()
block|{
comment|// do nothing
block|}
end_function
begin_comment
comment|/*!   Informs the view that the rows from the \a start row to the \a end row   inclusive have been inserted into the \a parent model item. */
end_comment
begin_function
DECL|function|rowsInserted
name|void
name|QTreeView
operator|::
name|rowsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
comment|// if we are going to do a complete relayout anyway, there is no need to update
if|if
condition|(
name|d
operator|->
name|delayedPendingLayout
condition|)
block|{
name|QAbstractItemView
operator|::
name|rowsInserted
argument_list|(
name|parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//don't add a hierarchy on a column != 0
if|if
condition|(
name|parent
operator|.
name|column
argument_list|()
operator|!=
literal|0
operator|&&
name|parent
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QAbstractItemView
operator|::
name|rowsInserted
argument_list|(
name|parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|int
name|parentRowCount
init|=
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
specifier|const
name|int
name|delta
init|=
name|end
operator|-
name|start
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
name|d
operator|->
name|root
operator|&&
operator|!
name|d
operator|->
name|isIndexExpanded
argument_list|(
name|parent
argument_list|)
operator|&&
name|parentRowCount
operator|>
name|delta
condition|)
block|{
name|QAbstractItemView
operator|::
name|rowsInserted
argument_list|(
name|parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|int
name|parentItem
init|=
name|d
operator|->
name|viewIndex
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|parentItem
operator|!=
operator|-
literal|1
operator|)
operator|&&
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|parentItem
argument_list|)
operator|.
name|expanded
operator|)
operator|||
operator|(
name|parent
operator|==
name|d
operator|->
name|root
operator|)
condition|)
block|{
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parentItem
operator|!=
operator|-
literal|1
operator|&&
operator|(
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
operator|==
name|end
operator|-
name|start
operator|+
literal|1
operator|)
condition|)
block|{
comment|// the parent just went from 0 children to more. update to re-paint the decoration
name|d
operator|->
name|viewItems
index|[
name|parentItem
index|]
operator|.
name|hasChildren
operator|=
literal|true
expr_stmt|;
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
name|QAbstractItemView
operator|::
name|rowsInserted
argument_list|(
name|parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Informs the view that the rows from the \a start row to the \a end row   inclusive are about to removed from the given \a parent model item. */
end_comment
begin_function
DECL|function|rowsAboutToBeRemoved
name|void
name|QTreeView
operator|::
name|rowsAboutToBeRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|QAbstractItemView
operator|::
name|rowsAboutToBeRemoved
argument_list|(
name|parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|d
operator|->
name|viewItems
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Informs the view that the rows from the \a start row to the \a end row     inclusive have been removed from the given \a parent model item. */
end_comment
begin_function
DECL|function|rowsRemoved
name|void
name|QTreeView
operator|::
name|rowsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|viewItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
name|d
operator|->
name|hasRemovedItems
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|_q_rowsRemoved
argument_list|(
name|parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Informs the tree view that the number of columns in the tree view has   changed from \a oldCount to \a newCount. */
end_comment
begin_function
DECL|function|columnCountChanged
name|void
name|QTreeView
operator|::
name|columnCountChanged
parameter_list|(
name|int
name|oldCount
parameter_list|,
name|int
name|newCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldCount
operator|==
literal|0
operator|&&
name|newCount
operator|>
literal|0
condition|)
block|{
comment|//if the first column has just been added we need to relayout.
name|d
operator|->
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|updateGeometries
argument_list|()
expr_stmt|;
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Resizes the \a column given to the size of its contents.    \sa columnWidth(), setColumnWidth() */
end_comment
begin_function
DECL|function|resizeColumnToContents
name|void
name|QTreeView
operator|::
name|resizeColumnToContents
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
if|if
condition|(
name|column
operator|<
literal|0
operator|||
name|column
operator|>=
name|d
operator|->
name|header
operator|->
name|count
argument_list|()
condition|)
return|return;
name|int
name|contents
init|=
name|sizeHintForColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|int
name|header
init|=
name|d
operator|->
name|header
operator|->
name|isHidden
argument_list|()
condition|?
literal|0
else|:
name|d
operator|->
name|header
operator|->
name|sectionSizeHint
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|d
operator|->
name|header
operator|->
name|resizeSection
argument_list|(
name|column
argument_list|,
name|qMax
argument_list|(
name|contents
argument_list|,
name|header
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \obsolete   \overload    Sorts the model by the values in the given \a column. */
end_comment
begin_function
DECL|function|sortByColumn
name|void
name|QTreeView
operator|::
name|sortByColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|sortByColumn
argument_list|(
name|column
argument_list|,
name|d
operator|->
name|header
operator|->
name|sortIndicatorOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.2    Sets the model up for sorting by the values in the given \a column and \a order.    \a column may be -1, in which case no sort indicator will be shown   and the model will return to its natural, unsorted order. Note that not   all models support this and may even crash in this case.    \sa sortingEnabled */
end_comment
begin_function
DECL|function|sortByColumn
name|void
name|QTreeView
operator|::
name|sortByColumn
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
comment|//If sorting is enabled  will emit a signal connected to _q_sortIndicatorChanged, which then actually sorts
name|d
operator|->
name|header
operator|->
name|setSortIndicator
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
comment|//If sorting is not enabled, force to sort now.
if|if
condition|(
operator|!
name|d
operator|->
name|sortingEnabled
condition|)
name|d
operator|->
name|model
operator|->
name|sort
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|selectAll
name|void
name|QTreeView
operator|::
name|selectAll
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|selectionModel
argument_list|()
condition|)
return|return;
name|SelectionMode
name|mode
init|=
name|d
operator|->
name|selectionMode
decl_stmt|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
comment|//make sure we lay out the items
if|if
condition|(
name|mode
operator|!=
name|SingleSelection
operator|&&
name|mode
operator|!=
name|NoSelection
operator|&&
operator|!
name|d
operator|->
name|viewItems
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QModelIndex
modifier|&
name|idx
init|=
name|d
operator|->
name|viewItems
operator|.
name|last
argument_list|()
operator|.
name|index
decl_stmt|;
name|QModelIndex
name|lastItemIndex
init|=
name|idx
operator|.
name|sibling
argument_list|(
name|idx
operator|.
name|row
argument_list|()
argument_list|,
name|d
operator|->
name|model
operator|->
name|columnCount
argument_list|(
name|idx
operator|.
name|parent
argument_list|()
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|d
operator|->
name|select
argument_list|(
name|d
operator|->
name|viewItems
operator|.
name|first
argument_list|()
operator|.
name|index
argument_list|,
name|lastItemIndex
argument_list|,
name|QItemSelectionModel
operator|::
name|ClearAndSelect
operator||
name|QItemSelectionModel
operator|::
name|Rows
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \since 4.2   Expands all expandable items.    Warning: if the model contains a large number of items,   this function will take some time to execute.    \sa collapseAll(), expand(), collapse(), setExpanded() */
end_comment
begin_function
DECL|function|expandAll
name|void
name|QTreeView
operator|::
name|expandAll
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|viewItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|interruptDelayedItemsLayout
argument_list|()
expr_stmt|;
name|d
operator|->
name|layout
argument_list|(
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateGeometries
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.2    Collapses all expanded items.    \sa expandAll(), expand(), collapse(), setExpanded() */
end_comment
begin_function
DECL|function|collapseAll
name|void
name|QTreeView
operator|::
name|collapseAll
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|expandedIndexes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doItemsLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.3   Expands all expandable items to the given \a depth.    \sa expandAll(), collapseAll(), expand(), collapse(), setExpanded() */
end_comment
begin_function
DECL|function|expandToDepth
name|void
name|QTreeView
operator|::
name|expandToDepth
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|viewItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|expandedIndexes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|interruptDelayedItemsLayout
argument_list|()
expr_stmt|;
name|d
operator|->
name|layout
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|viewItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|level
operator|<=
operator|(
name|uint
operator|)
name|depth
condition|)
block|{
name|d
operator|->
name|viewItems
index|[
name|i
index|]
operator|.
name|expanded
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|layout
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|d
operator|->
name|storeExpanded
argument_list|(
name|d
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|index
argument_list|)
expr_stmt|;
block|}
block|}
name|updateGeometries
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This function is called whenever \a{column}'s size is changed in     the header. \a oldSize and \a newSize give the previous size and     the new size in pixels.      \sa setColumnWidth() */
end_comment
begin_function
DECL|function|columnResized
name|void
name|QTreeView
operator|::
name|columnResized
parameter_list|(
name|int
name|column
parameter_list|,
name|int
comment|/* oldSize */
parameter_list|,
name|int
comment|/* newSize */
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|columnsToUpdate
operator|.
name|append
argument_list|(
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|columnResizeTimerID
operator|==
literal|0
condition|)
name|d
operator|->
name|columnResizeTimerID
operator|=
name|startTimer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|updateGeometries
name|void
name|QTreeView
operator|::
name|updateGeometries
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|header
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|geometryRecursionBlock
condition|)
return|return;
name|d
operator|->
name|geometryRecursionBlock
operator|=
literal|true
expr_stmt|;
name|QSize
name|hint
init|=
name|d
operator|->
name|header
operator|->
name|isHidden
argument_list|()
condition|?
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|d
operator|->
name|header
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|setViewportMargins
argument_list|(
literal|0
argument_list|,
name|hint
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QRect
name|vg
init|=
name|d
operator|->
name|viewport
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QRect
name|geometryRect
argument_list|(
name|vg
operator|.
name|left
argument_list|()
argument_list|,
name|vg
operator|.
name|top
argument_list|()
operator|-
name|hint
operator|.
name|height
argument_list|()
argument_list|,
name|vg
operator|.
name|width
argument_list|()
argument_list|,
name|hint
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|header
operator|->
name|setGeometry
argument_list|(
name|geometryRect
argument_list|)
expr_stmt|;
comment|//d->header->setOffset(horizontalScrollBar()->value()); // ### bug ???
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|d
operator|->
name|header
argument_list|,
literal|"updateGeometries"
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateScrollBars
argument_list|()
expr_stmt|;
name|d
operator|->
name|geometryRecursionBlock
operator|=
literal|false
expr_stmt|;
block|}
name|QAbstractItemView
operator|::
name|updateGeometries
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the size hint for the \a column's width or -1 if there is no   model.    If you need to set the width of a given column to a fixed value, call   QHeaderView::resizeSection() on the view's header.    If you reimplement this function in a subclass, note that the value you   return is only used when resizeColumnToContents() is called. In that case,   if a larger column width is required by either the view's header or   the item delegate, that width will be used instead.    \sa QWidget::sizeHint, header() */
end_comment
begin_function
DECL|function|sizeHintForColumn
name|int
name|QTreeView
operator|::
name|sizeHintForColumn
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|viewItems
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|ensurePolished
argument_list|()
expr_stmt|;
name|int
name|w
init|=
literal|0
decl_stmt|;
name|QStyleOptionViewItem
name|option
init|=
name|d
operator|->
name|viewOptions
argument_list|()
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QTreeViewItem
argument_list|>
name|viewItems
init|=
name|d
operator|->
name|viewItems
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
name|viewItems
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|end
operator|>
literal|1000
condition|)
block|{
comment|//if we have too many item this function would be too slow.
comment|//we get a good approximation by only iterate over 1000 items.
name|start
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|firstVisibleItem
argument_list|()
operator|-
literal|100
argument_list|)
expr_stmt|;
name|end
operator|=
name|qMin
argument_list|(
name|end
argument_list|,
name|start
operator|+
literal|900
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|spanning
condition|)
continue|continue;
comment|// we have no good size hint
name|QModelIndex
name|index
init|=
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|index
decl_stmt|;
name|index
operator|=
name|index
operator|.
name|sibling
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|editor
init|=
name|d
operator|->
name|editorForIndex
argument_list|(
name|index
argument_list|)
operator|.
name|widget
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|editor
operator|&&
name|d
operator|->
name|persistent
operator|.
name|contains
argument_list|(
name|editor
argument_list|)
condition|)
block|{
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|editor
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|min
init|=
name|editor
operator|->
name|minimumSize
argument_list|()
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|max
init|=
name|editor
operator|->
name|maximumSize
argument_list|()
operator|.
name|width
argument_list|()
decl_stmt|;
name|w
operator|=
name|qBound
argument_list|(
name|min
argument_list|,
name|w
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
name|int
name|hint
init|=
name|d
operator|->
name|delegateForIndex
argument_list|(
name|index
argument_list|)
operator|->
name|sizeHint
argument_list|(
name|option
argument_list|,
name|index
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|hint
operator|+
operator|(
name|column
operator|==
literal|0
condition|?
name|d
operator|->
name|indentationForItem
argument_list|(
name|i
argument_list|)
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|w
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the size hint for the row indicated by \a index.    \sa sizeHintForColumn(), uniformRowHeights() */
end_comment
begin_function
DECL|function|indexRowSizeHint
name|int
name|QTreeView
operator|::
name|indexRowSizeHint
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isIndexValid
argument_list|(
name|index
argument_list|)
operator|||
operator|!
name|d
operator|->
name|itemDelegate
condition|)
return|return
literal|0
return|;
name|int
name|start
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|end
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|indexRow
init|=
name|index
operator|.
name|row
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|d
operator|->
name|header
operator|->
name|count
argument_list|()
decl_stmt|;
name|bool
name|emptyHeader
init|=
operator|(
name|count
operator|==
literal|0
operator|)
decl_stmt|;
name|QModelIndex
name|parent
init|=
name|index
operator|.
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|&&
name|isVisible
argument_list|()
condition|)
block|{
comment|// If the sections have moved, we end up checking too many or too few
name|start
operator|=
name|d
operator|->
name|header
operator|->
name|visualIndexAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the header has not been laid out yet, we use the model directly
name|count
operator|=
name|d
operator|->
name|model
operator|->
name|columnCount
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
name|start
operator|=
operator|(
name|start
operator|==
operator|-
literal|1
condition|?
name|count
operator|-
literal|1
else|:
name|start
operator|)
expr_stmt|;
name|end
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
operator|(
name|start
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|start
operator|)
expr_stmt|;
name|end
operator|=
name|count
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|<
name|start
condition|)
name|qSwap
argument_list|(
name|end
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|int
name|height
init|=
operator|-
literal|1
decl_stmt|;
name|QStyleOptionViewItem
name|option
init|=
name|d
operator|->
name|viewOptions
argument_list|()
decl_stmt|;
comment|// ### If we want word wrapping in the items,
comment|// ### we need to go through all the columns
comment|// ### and set the width of the column
comment|// Hack to speed up the function
name|option
operator|.
name|rect
operator|.
name|setWidth
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|column
init|=
name|start
init|;
name|column
operator|<=
name|end
condition|;
operator|++
name|column
control|)
block|{
name|int
name|logicalColumn
init|=
name|emptyHeader
condition|?
name|column
else|:
name|d
operator|->
name|header
operator|->
name|logicalIndex
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|header
operator|->
name|isSectionHidden
argument_list|(
name|logicalColumn
argument_list|)
condition|)
continue|continue;
name|QModelIndex
name|idx
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|indexRow
argument_list|,
name|logicalColumn
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|editor
init|=
name|d
operator|->
name|editorForIndex
argument_list|(
name|idx
argument_list|)
operator|.
name|widget
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|editor
operator|&&
name|d
operator|->
name|persistent
operator|.
name|contains
argument_list|(
name|editor
argument_list|)
condition|)
block|{
name|height
operator|=
name|qMax
argument_list|(
name|height
argument_list|,
name|editor
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|min
init|=
name|editor
operator|->
name|minimumSize
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|max
init|=
name|editor
operator|->
name|maximumSize
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|height
operator|=
name|qBound
argument_list|(
name|min
argument_list|,
name|height
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
name|int
name|hint
init|=
name|d
operator|->
name|delegateForIndex
argument_list|(
name|idx
argument_list|)
operator|->
name|sizeHint
argument_list|(
name|option
argument_list|,
name|idx
argument_list|)
operator|.
name|height
argument_list|()
decl_stmt|;
name|height
operator|=
name|qMax
argument_list|(
name|height
argument_list|,
name|hint
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|height
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.3     Returns the height of the row indicated by the given \a index.     \sa indexRowSizeHint() */
end_comment
begin_function
DECL|function|rowHeight
name|int
name|QTreeView
operator|::
name|rowHeight
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
name|int
name|i
init|=
name|d
operator|->
name|viewIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
return|return
literal|0
return|;
return|return
name|d
operator|->
name|itemHeight
argument_list|(
name|i
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|horizontalScrollbarAction
name|void
name|QTreeView
operator|::
name|horizontalScrollbarAction
parameter_list|(
name|int
name|action
parameter_list|)
block|{
name|QAbstractItemView
operator|::
name|horizontalScrollbarAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|isIndexHidden
name|bool
name|QTreeView
operator|::
name|isIndexHidden
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|isColumnHidden
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
operator|||
name|isRowHidden
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|parent
argument_list|()
argument_list|)
operator|)
return|;
block|}
end_function
begin_comment
comment|/*   private implementation */
end_comment
begin_function
DECL|function|initialize
name|void
name|QTreeViewPrivate
operator|::
name|initialize
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|updateStyledFrameWidths
argument_list|()
expr_stmt|;
name|q
operator|->
name|setSelectionBehavior
argument_list|(
name|QAbstractItemView
operator|::
name|SelectRows
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSelectionMode
argument_list|(
name|QAbstractItemView
operator|::
name|SingleSelection
argument_list|)
expr_stmt|;
name|q
operator|->
name|setHorizontalScrollMode
argument_list|(
name|QAbstractItemView
operator|::
name|ScrollPerPixel
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_MacShowFocusRect
argument_list|)
expr_stmt|;
name|QHeaderView
modifier|*
name|header
init|=
operator|new
name|QHeaderView
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|header
operator|->
name|setSectionsMovable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|header
operator|->
name|setStretchLastSection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|header
operator|->
name|setDefaultAlignment
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
name|q
operator|->
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|animatedOperation
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_endAnimatedOperation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_ANIMATION
block|}
end_function
begin_function
DECL|function|expand
name|void
name|QTreeViewPrivate
operator|::
name|expand
parameter_list|(
name|int
name|item
parameter_list|,
name|bool
name|emitSignal
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|==
operator|-
literal|1
operator|||
name|viewItems
operator|.
name|at
argument_list|(
name|item
argument_list|)
operator|.
name|expanded
condition|)
return|return;
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
if|if
condition|(
name|emitSignal
operator|&&
name|animationsEnabled
condition|)
name|prepareAnimatedOperation
argument_list|(
name|item
argument_list|,
name|QVariantAnimation
operator|::
name|Forward
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_ANIMATION
comment|//if already animating, stateBeforeAnimation is set to the correct value
if|if
condition|(
name|state
operator|!=
name|QAbstractItemView
operator|::
name|AnimatingState
condition|)
name|stateBeforeAnimation
operator|=
name|state
expr_stmt|;
name|q
operator|->
name|setState
argument_list|(
name|QAbstractItemView
operator|::
name|ExpandingState
argument_list|)
expr_stmt|;
specifier|const
name|QModelIndex
name|index
init|=
name|viewItems
operator|.
name|at
argument_list|(
name|item
argument_list|)
operator|.
name|index
decl_stmt|;
name|storeExpanded
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|viewItems
index|[
name|item
index|]
operator|.
name|expanded
operator|=
literal|true
expr_stmt|;
name|layout
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|q
operator|->
name|setState
argument_list|(
name|stateBeforeAnimation
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|->
name|canFetchMore
argument_list|(
name|index
argument_list|)
condition|)
name|model
operator|->
name|fetchMore
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|emitSignal
condition|)
block|{
emit|emit
name|q
operator|->
name|expanded
argument_list|(
name|index
argument_list|)
emit|;
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
if|if
condition|(
name|animationsEnabled
condition|)
name|beginAnimatedOperation
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_ANIMATION
block|}
block|}
end_function
begin_function
DECL|function|insertViewItems
name|void
name|QTreeViewPrivate
operator|::
name|insertViewItems
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QTreeViewItem
modifier|&
name|viewItem
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|q
argument_list|)
name|viewItems
operator|.
name|insert
argument_list|(
name|pos
argument_list|,
name|count
argument_list|,
name|viewItem
argument_list|)
expr_stmt|;
name|QTreeViewItem
modifier|*
name|items
init|=
name|viewItems
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|pos
operator|+
name|count
init|;
name|i
operator|<
name|viewItems
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|items
index|[
name|i
index|]
operator|.
name|parentItem
operator|>=
name|pos
condition|)
name|items
index|[
name|i
index|]
operator|.
name|parentItem
operator|+=
name|count
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeViewItems
name|void
name|QTreeViewPrivate
operator|::
name|removeViewItems
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|q
argument_list|)
name|viewItems
operator|.
name|remove
argument_list|(
name|pos
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QTreeViewItem
modifier|*
name|items
init|=
name|viewItems
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|pos
init|;
name|i
operator|<
name|viewItems
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|items
index|[
name|i
index|]
operator|.
name|parentItem
operator|>=
name|pos
condition|)
name|items
index|[
name|i
index|]
operator|.
name|parentItem
operator|-=
name|count
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_endif
unit|bool QTreeViewPrivate::checkViewItems() const {     for (int i = 0; i< viewItems.count(); ++i) {         const QTreeViewItem&vi = viewItems.at(i);         if (vi.parentItem == -1) {             Q_ASSERT(!vi.index.parent().isValid() || vi.index.parent() == root);         } else {             Q_ASSERT(vi.index.parent() == viewItems.at(vi.parentItem).index);         }     }     return true; }
endif|#
directive|endif
end_endif
begin_function
DECL|function|collapse
name|void
name|QTreeViewPrivate
operator|::
name|collapse
parameter_list|(
name|int
name|item
parameter_list|,
name|bool
name|emitSignal
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|==
operator|-
literal|1
operator|||
name|expandedIndexes
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
comment|//if the current item is now invisible, the autoscroll will expand the tree to see it, so disable the autoscroll
name|delayedAutoScroll
operator|.
name|stop
argument_list|()
expr_stmt|;
name|int
name|total
init|=
name|viewItems
operator|.
name|at
argument_list|(
name|item
argument_list|)
operator|.
name|total
decl_stmt|;
specifier|const
name|QModelIndex
modifier|&
name|modelIndex
init|=
name|viewItems
operator|.
name|at
argument_list|(
name|item
argument_list|)
operator|.
name|index
decl_stmt|;
if|if
condition|(
operator|!
name|isPersistent
argument_list|(
name|modelIndex
argument_list|)
condition|)
return|return;
comment|// if the index is not persistent, no chances it is expanded
name|QSet
argument_list|<
name|QPersistentModelIndex
argument_list|>
operator|::
name|iterator
name|it
init|=
name|expandedIndexes
operator|.
name|find
argument_list|(
name|modelIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|expandedIndexes
operator|.
name|end
argument_list|()
operator|||
name|viewItems
operator|.
name|at
argument_list|(
name|item
argument_list|)
operator|.
name|expanded
operator|==
literal|false
condition|)
return|return;
comment|// nothing to do
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
if|if
condition|(
name|emitSignal
operator|&&
name|animationsEnabled
condition|)
name|prepareAnimatedOperation
argument_list|(
name|item
argument_list|,
name|QVariantAnimation
operator|::
name|Backward
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_ANIMATION
comment|//if already animating, stateBeforeAnimation is set to the correct value
if|if
condition|(
name|state
operator|!=
name|QAbstractItemView
operator|::
name|AnimatingState
condition|)
name|stateBeforeAnimation
operator|=
name|state
expr_stmt|;
name|q
operator|->
name|setState
argument_list|(
name|QAbstractItemView
operator|::
name|CollapsingState
argument_list|)
expr_stmt|;
name|expandedIndexes
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
name|viewItems
index|[
name|item
index|]
operator|.
name|expanded
operator|=
literal|false
expr_stmt|;
name|int
name|index
init|=
name|item
decl_stmt|;
while|while
condition|(
name|index
operator|>
operator|-
literal|1
condition|)
block|{
name|viewItems
index|[
name|index
index|]
operator|.
name|total
operator|-=
name|total
expr_stmt|;
name|index
operator|=
name|viewItems
index|[
name|index
index|]
operator|.
name|parentItem
expr_stmt|;
block|}
name|removeViewItems
argument_list|(
name|item
operator|+
literal|1
argument_list|,
name|total
argument_list|)
expr_stmt|;
comment|// collapse
name|q
operator|->
name|setState
argument_list|(
name|stateBeforeAnimation
argument_list|)
expr_stmt|;
if|if
condition|(
name|emitSignal
condition|)
block|{
emit|emit
name|q
operator|->
name|collapsed
argument_list|(
name|modelIndex
argument_list|)
emit|;
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
if|if
condition|(
name|animationsEnabled
condition|)
name|beginAnimatedOperation
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_ANIMATION
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
end_ifndef
begin_function
DECL|function|prepareAnimatedOperation
name|void
name|QTreeViewPrivate
operator|::
name|prepareAnimatedOperation
parameter_list|(
name|int
name|item
parameter_list|,
name|QVariantAnimation
operator|::
name|Direction
name|direction
parameter_list|)
block|{
name|animatedOperation
operator|.
name|item
operator|=
name|item
expr_stmt|;
name|animatedOperation
operator|.
name|viewport
operator|=
name|viewport
expr_stmt|;
name|animatedOperation
operator|.
name|setDirection
argument_list|(
name|direction
argument_list|)
expr_stmt|;
name|int
name|top
init|=
name|coordinateForItem
argument_list|(
name|item
argument_list|)
operator|+
name|itemHeight
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|viewport
operator|->
name|rect
argument_list|()
decl_stmt|;
name|rect
operator|.
name|setTop
argument_list|(
name|top
argument_list|)
expr_stmt|;
if|if
condition|(
name|direction
operator|==
name|QVariantAnimation
operator|::
name|Backward
condition|)
block|{
specifier|const
name|int
name|limit
init|=
name|rect
operator|.
name|height
argument_list|()
operator|*
literal|2
decl_stmt|;
name|int
name|h
init|=
literal|0
decl_stmt|;
name|int
name|c
init|=
name|item
operator|+
name|viewItems
operator|.
name|at
argument_list|(
name|item
argument_list|)
operator|.
name|total
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|item
operator|+
literal|1
init|;
name|i
operator|<
name|c
operator|&&
name|h
operator|<
name|limit
condition|;
operator|++
name|i
control|)
name|h
operator|+=
name|itemHeight
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setHeight
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|animatedOperation
operator|.
name|setEndValue
argument_list|(
name|top
operator|+
name|h
argument_list|)
expr_stmt|;
block|}
name|animatedOperation
operator|.
name|setStartValue
argument_list|(
name|top
argument_list|)
expr_stmt|;
name|animatedOperation
operator|.
name|before
operator|=
name|renderTreeToPixmapForAnimation
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|beginAnimatedOperation
name|void
name|QTreeViewPrivate
operator|::
name|beginAnimatedOperation
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|viewport
operator|->
name|rect
argument_list|()
decl_stmt|;
name|rect
operator|.
name|setTop
argument_list|(
name|animatedOperation
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|animatedOperation
operator|.
name|direction
argument_list|()
operator|==
name|QVariantAnimation
operator|::
name|Forward
condition|)
block|{
specifier|const
name|int
name|limit
init|=
name|rect
operator|.
name|height
argument_list|()
operator|*
literal|2
decl_stmt|;
name|int
name|h
init|=
literal|0
decl_stmt|;
name|int
name|c
init|=
name|animatedOperation
operator|.
name|item
operator|+
name|viewItems
operator|.
name|at
argument_list|(
name|animatedOperation
operator|.
name|item
argument_list|)
operator|.
name|total
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|animatedOperation
operator|.
name|item
operator|+
literal|1
init|;
name|i
operator|<
name|c
operator|&&
name|h
operator|<
name|limit
condition|;
operator|++
name|i
control|)
name|h
operator|+=
name|itemHeight
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setHeight
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|animatedOperation
operator|.
name|setEndValue
argument_list|(
name|animatedOperation
operator|.
name|top
argument_list|()
operator|+
name|h
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|animatedOperation
operator|.
name|after
operator|=
name|renderTreeToPixmapForAnimation
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|q
operator|->
name|setState
argument_list|(
name|QAbstractItemView
operator|::
name|AnimatingState
argument_list|)
expr_stmt|;
name|animatedOperation
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//let's start the animation
block|}
block|}
end_function
begin_function
DECL|function|drawAnimatedOperation
name|void
name|QTreeViewPrivate
operator|::
name|drawAnimatedOperation
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|start
init|=
name|animatedOperation
operator|.
name|startValue
argument_list|()
operator|.
name|toInt
argument_list|()
decl_stmt|,
name|end
init|=
name|animatedOperation
operator|.
name|endValue
argument_list|()
operator|.
name|toInt
argument_list|()
decl_stmt|,
name|current
init|=
name|animatedOperation
operator|.
name|currentValue
argument_list|()
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|bool
name|collapsing
init|=
name|animatedOperation
operator|.
name|direction
argument_list|()
operator|==
name|QVariantAnimation
operator|::
name|Backward
decl_stmt|;
specifier|const
name|QPixmap
name|top
init|=
name|collapsing
condition|?
name|animatedOperation
operator|.
name|before
else|:
name|animatedOperation
operator|.
name|after
decl_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
literal|0
argument_list|,
name|start
argument_list|,
name|top
argument_list|,
literal|0
argument_list|,
name|end
operator|-
name|current
operator|-
literal|1
argument_list|,
name|top
operator|.
name|width
argument_list|()
argument_list|,
name|top
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QPixmap
name|bottom
init|=
name|collapsing
condition|?
name|animatedOperation
operator|.
name|after
else|:
name|animatedOperation
operator|.
name|before
decl_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
literal|0
argument_list|,
name|current
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renderTreeToPixmapForAnimation
name|QPixmap
name|QTreeViewPrivate
operator|::
name|renderTreeToPixmapForAnimation
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
name|QPixmap
name|pixmap
argument_list|(
name|rect
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|size
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|pixmap
return|;
name|pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
comment|//the base might not be opaque, and we don't want uninitialized pixels.
name|QPainter
name|painter
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|q
operator|->
name|palette
argument_list|()
operator|.
name|base
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|-
name|rect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|drawTree
argument_list|(
operator|&
name|painter
argument_list|,
name|QRegion
argument_list|(
name|rect
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
comment|//and now let's render the editors the editors
name|QStyleOptionViewItem
name|option
init|=
name|viewOptions
argument_list|()
decl_stmt|;
for|for
control|(
name|QEditorIndexHash
operator|::
name|const_iterator
name|it
init|=
name|editorIndexHash
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|editorIndexHash
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QWidget
modifier|*
name|editor
init|=
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
specifier|const
name|QModelIndex
modifier|&
name|index
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|option
operator|.
name|rect
operator|=
name|q
operator|->
name|visualRect
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|rect
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|QAbstractItemDelegate
modifier|*
name|delegate
init|=
name|delegateForIndex
argument_list|(
name|index
argument_list|)
condition|)
name|delegate
operator|->
name|updateEditorGeometry
argument_list|(
name|editor
argument_list|,
name|option
argument_list|,
name|index
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|pos
init|=
name|editor
operator|->
name|pos
argument_list|()
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
block|{
name|editor
operator|->
name|render
argument_list|(
operator|&
name|pixmap
argument_list|,
name|pos
operator|-
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
comment|//the animation uses pixmap to display the treeview's content
comment|//the editor is rendered on this pixmap and thus can (should) be hidden
name|editor
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|pixmap
return|;
block|}
end_function
begin_function
DECL|function|_q_endAnimatedOperation
name|void
name|QTreeViewPrivate
operator|::
name|_q_endAnimatedOperation
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|q
operator|->
name|setState
argument_list|(
name|stateBeforeAnimation
argument_list|)
expr_stmt|;
name|q
operator|->
name|updateGeometries
argument_list|()
expr_stmt|;
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_ANIMATION
end_comment
begin_function
DECL|function|_q_modelAboutToBeReset
name|void
name|QTreeViewPrivate
operator|::
name|_q_modelAboutToBeReset
parameter_list|()
block|{
name|viewItems
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_columnsAboutToBeRemoved
name|void
name|QTreeViewPrivate
operator|::
name|_q_columnsAboutToBeRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
if|if
condition|(
name|start
operator|<=
literal|0
operator|&&
literal|0
operator|<=
name|end
condition|)
name|viewItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QAbstractItemViewPrivate
operator|::
name|_q_columnsAboutToBeRemoved
argument_list|(
name|parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_columnsRemoved
name|void
name|QTreeViewPrivate
operator|::
name|_q_columnsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
if|if
condition|(
name|start
operator|<=
literal|0
operator|&&
literal|0
operator|<=
name|end
condition|)
name|doDelayedItemsLayout
argument_list|()
expr_stmt|;
name|QAbstractItemViewPrivate
operator|::
name|_q_columnsRemoved
argument_list|(
name|parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/** \internal     creates and initialize the viewItem structure of the children of the element \li      set \a recursiveExpanding if the function has to expand all the children (called from expandAll)     \a afterIsUninitialized is when we recurse from layout(-1), it means all the items after 'i' are     not yet initialized and need not to be moved  */
end_comment
begin_function
DECL|function|layout
name|void
name|QTreeViewPrivate
operator|::
name|layout
parameter_list|(
name|int
name|i
parameter_list|,
name|bool
name|recursiveExpanding
parameter_list|,
name|bool
name|afterIsUninitialized
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|QModelIndex
name|current
decl_stmt|;
name|QModelIndex
name|parent
init|=
operator|(
name|i
operator|<
literal|0
operator|)
condition|?
operator|(
name|QModelIndex
operator|)
name|root
else|:
name|modelIndex
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
operator|&&
operator|!
name|parent
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|//modelIndex() should never return something invalid for the real items.
comment|//This can happen if columncount has been set to 0.
comment|//To avoid infinite loop we stop here.
return|return;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|model
operator|->
name|hasChildren
argument_list|(
name|parent
argument_list|)
condition|)
block|{
if|if
condition|(
name|model
operator|->
name|canFetchMore
argument_list|(
name|parent
argument_list|)
condition|)
name|model
operator|->
name|fetchMore
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|count
operator|=
name|model
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|bool
name|expanding
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|uniformRowHeights
condition|)
block|{
name|QModelIndex
name|index
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|defaultItemHeight
operator|=
name|q
operator|->
name|indexRowSizeHint
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|viewItems
operator|.
name|resize
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|afterIsUninitialized
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|viewItems
index|[
name|i
index|]
operator|.
name|total
operator|!=
operator|(
name|uint
operator|)
name|count
condition|)
block|{
if|if
condition|(
operator|!
name|afterIsUninitialized
condition|)
name|insertViewItems
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|count
argument_list|,
name|QTreeViewItem
argument_list|()
argument_list|)
expr_stmt|;
comment|// expand
elseif|else
if|if
condition|(
name|count
operator|>
literal|0
condition|)
name|viewItems
operator|.
name|resize
argument_list|(
name|viewItems
operator|.
name|count
argument_list|()
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expanding
operator|=
literal|false
expr_stmt|;
block|}
name|int
name|first
init|=
name|i
operator|+
literal|1
decl_stmt|;
name|int
name|level
init|=
operator|(
name|i
operator|>=
literal|0
condition|?
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|level
operator|+
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|int
name|hidden
init|=
literal|0
decl_stmt|;
name|int
name|last
init|=
literal|0
decl_stmt|;
name|int
name|children
init|=
literal|0
decl_stmt|;
name|QTreeViewItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|first
init|;
name|j
operator|<
name|first
operator|+
name|count
condition|;
operator|++
name|j
control|)
block|{
name|current
operator|=
name|model
operator|->
name|index
argument_list|(
name|j
operator|-
name|first
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRowHidden
argument_list|(
name|current
argument_list|)
condition|)
block|{
operator|++
name|hidden
expr_stmt|;
name|last
operator|=
name|j
operator|-
name|hidden
operator|+
name|children
expr_stmt|;
block|}
else|else
block|{
name|last
operator|=
name|j
operator|-
name|hidden
operator|+
name|children
expr_stmt|;
if|if
condition|(
name|item
condition|)
name|item
operator|->
name|hasMoreSiblings
operator|=
literal|true
expr_stmt|;
name|item
operator|=
operator|&
name|viewItems
index|[
name|last
index|]
expr_stmt|;
name|item
operator|->
name|index
operator|=
name|current
expr_stmt|;
name|item
operator|->
name|parentItem
operator|=
name|i
expr_stmt|;
name|item
operator|->
name|level
operator|=
name|level
expr_stmt|;
name|item
operator|->
name|height
operator|=
literal|0
expr_stmt|;
name|item
operator|->
name|spanning
operator|=
name|q
operator|->
name|isFirstColumnSpanned
argument_list|(
name|current
operator|.
name|row
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|item
operator|->
name|expanded
operator|=
literal|false
expr_stmt|;
name|item
operator|->
name|total
operator|=
literal|0
expr_stmt|;
name|item
operator|->
name|hasMoreSiblings
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|recursiveExpanding
operator|||
name|isIndexExpanded
argument_list|(
name|current
argument_list|)
condition|)
block|{
if|if
condition|(
name|recursiveExpanding
condition|)
name|expandedIndexes
operator|.
name|insert
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|item
operator|->
name|expanded
operator|=
literal|true
expr_stmt|;
name|layout
argument_list|(
name|last
argument_list|,
name|recursiveExpanding
argument_list|,
name|afterIsUninitialized
argument_list|)
expr_stmt|;
name|item
operator|=
operator|&
name|viewItems
index|[
name|last
index|]
expr_stmt|;
name|children
operator|+=
name|item
operator|->
name|total
expr_stmt|;
name|item
operator|->
name|hasChildren
operator|=
name|item
operator|->
name|total
operator|>
literal|0
expr_stmt|;
name|last
operator|=
name|j
operator|-
name|hidden
operator|+
name|children
expr_stmt|;
block|}
else|else
block|{
name|item
operator|->
name|hasChildren
operator|=
name|hasVisibleChildren
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// remove hidden items
if|if
condition|(
name|hidden
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|afterIsUninitialized
condition|)
name|removeViewItems
argument_list|(
name|last
operator|+
literal|1
argument_list|,
name|hidden
argument_list|)
expr_stmt|;
else|else
name|viewItems
operator|.
name|resize
argument_list|(
name|viewItems
operator|.
name|size
argument_list|()
operator|-
name|hidden
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|expanding
condition|)
return|return;
comment|// nothing changed
while|while
condition|(
name|i
operator|>
operator|-
literal|1
condition|)
block|{
name|viewItems
index|[
name|i
index|]
operator|.
name|total
operator|+=
name|count
operator|-
name|hidden
expr_stmt|;
name|i
operator|=
name|viewItems
index|[
name|i
index|]
operator|.
name|parentItem
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|pageUp
name|int
name|QTreeViewPrivate
operator|::
name|pageUp
parameter_list|(
name|int
name|i
parameter_list|)
specifier|const
block|{
name|int
name|index
init|=
name|itemAtCoordinate
argument_list|(
name|coordinateForItem
argument_list|(
name|i
argument_list|)
operator|-
name|viewport
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|isItemHiddenOrDisabled
argument_list|(
name|index
argument_list|)
condition|)
name|index
operator|--
expr_stmt|;
return|return
name|index
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|index
return|;
block|}
end_function
begin_function
DECL|function|pageDown
name|int
name|QTreeViewPrivate
operator|::
name|pageDown
parameter_list|(
name|int
name|i
parameter_list|)
specifier|const
block|{
name|int
name|index
init|=
name|itemAtCoordinate
argument_list|(
name|coordinateForItem
argument_list|(
name|i
argument_list|)
operator|+
name|viewport
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|isItemHiddenOrDisabled
argument_list|(
name|index
argument_list|)
condition|)
name|index
operator|++
expr_stmt|;
return|return
name|index
operator|==
operator|-
literal|1
condition|?
name|viewItems
operator|.
name|count
argument_list|()
operator|-
literal|1
else|:
name|index
return|;
block|}
end_function
begin_function
DECL|function|indentationForItem
name|int
name|QTreeViewPrivate
operator|::
name|indentationForItem
parameter_list|(
name|int
name|item
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|item
operator|<
literal|0
operator|||
name|item
operator|>=
name|viewItems
operator|.
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
name|int
name|level
init|=
name|viewItems
operator|.
name|at
argument_list|(
name|item
argument_list|)
operator|.
name|level
decl_stmt|;
if|if
condition|(
name|rootDecoration
condition|)
operator|++
name|level
expr_stmt|;
return|return
name|level
operator|*
name|indent
return|;
block|}
end_function
begin_function
DECL|function|itemHeight
name|int
name|QTreeViewPrivate
operator|::
name|itemHeight
parameter_list|(
name|int
name|item
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|uniformRowHeights
condition|)
return|return
name|defaultItemHeight
return|;
if|if
condition|(
name|viewItems
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
specifier|const
name|QModelIndex
modifier|&
name|index
init|=
name|viewItems
operator|.
name|at
argument_list|(
name|item
argument_list|)
operator|.
name|index
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
name|int
name|height
init|=
name|viewItems
operator|.
name|at
argument_list|(
name|item
argument_list|)
operator|.
name|height
decl_stmt|;
if|if
condition|(
name|height
operator|<=
literal|0
condition|)
block|{
name|height
operator|=
name|q_func
argument_list|()
operator|->
name|indexRowSizeHint
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|viewItems
index|[
name|item
index|]
operator|.
name|height
operator|=
name|height
expr_stmt|;
block|}
return|return
name|qMax
argument_list|(
name|height
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   Returns the viewport y coordinate for \a item. */
end_comment
begin_function
DECL|function|coordinateForItem
name|int
name|QTreeViewPrivate
operator|::
name|coordinateForItem
parameter_list|(
name|int
name|item
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|verticalScrollMode
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerPixel
condition|)
block|{
if|if
condition|(
name|uniformRowHeights
condition|)
return|return
operator|(
name|item
operator|*
name|defaultItemHeight
operator|)
operator|-
name|vbar
operator|->
name|value
argument_list|()
return|;
comment|// ### optimize (spans or caching)
name|int
name|y
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|viewItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
name|item
condition|)
return|return
name|y
operator|-
name|vbar
operator|->
name|value
argument_list|()
return|;
name|y
operator|+=
name|itemHeight
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// ScrollPerItem
name|int
name|topViewItemIndex
init|=
name|vbar
operator|->
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|uniformRowHeights
condition|)
return|return
name|defaultItemHeight
operator|*
operator|(
name|item
operator|-
name|topViewItemIndex
operator|)
return|;
if|if
condition|(
name|item
operator|>=
name|topViewItemIndex
condition|)
block|{
comment|// search in the visible area first and continue down
comment|// ### slow if the item is not visible
name|int
name|viewItemCoordinate
init|=
literal|0
decl_stmt|;
name|int
name|viewItemIndex
init|=
name|topViewItemIndex
decl_stmt|;
while|while
condition|(
name|viewItemIndex
operator|<
name|viewItems
operator|.
name|count
argument_list|()
condition|)
block|{
if|if
condition|(
name|viewItemIndex
operator|==
name|item
condition|)
return|return
name|viewItemCoordinate
return|;
name|viewItemCoordinate
operator|+=
name|itemHeight
argument_list|(
name|viewItemIndex
argument_list|)
expr_stmt|;
operator|++
name|viewItemIndex
expr_stmt|;
block|}
comment|// below the last item in the view
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|viewItemCoordinate
return|;
block|}
else|else
block|{
comment|// search the area above the viewport (used for editor widgets)
name|int
name|viewItemCoordinate
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|viewItemIndex
init|=
name|topViewItemIndex
init|;
name|viewItemIndex
operator|>
literal|0
condition|;
operator|--
name|viewItemIndex
control|)
block|{
if|if
condition|(
name|viewItemIndex
operator|==
name|item
condition|)
return|return
name|viewItemCoordinate
return|;
name|viewItemCoordinate
operator|-=
name|itemHeight
argument_list|(
name|viewItemIndex
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|viewItemCoordinate
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   Returns the index of the view item at the   given viewport \a coordinate.    \sa modelIndex() */
end_comment
begin_function
DECL|function|itemAtCoordinate
name|int
name|QTreeViewPrivate
operator|::
name|itemAtCoordinate
parameter_list|(
name|int
name|coordinate
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|itemCount
init|=
name|viewItems
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|itemCount
operator|==
literal|0
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|uniformRowHeights
operator|&&
name|defaultItemHeight
operator|<=
literal|0
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|verticalScrollMode
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerPixel
condition|)
block|{
if|if
condition|(
name|uniformRowHeights
condition|)
block|{
specifier|const
name|int
name|viewItemIndex
init|=
operator|(
name|coordinate
operator|+
name|vbar
operator|->
name|value
argument_list|()
operator|)
operator|/
name|defaultItemHeight
decl_stmt|;
return|return
operator|(
operator|(
name|viewItemIndex
operator|>=
name|itemCount
operator|||
name|viewItemIndex
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
name|viewItemIndex
operator|)
return|;
block|}
comment|// ### optimize
name|int
name|viewItemCoordinate
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|contentsCoordinate
init|=
name|coordinate
operator|+
name|vbar
operator|->
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|viewItemIndex
init|=
literal|0
init|;
name|viewItemIndex
operator|<
name|viewItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|viewItemIndex
control|)
block|{
name|viewItemCoordinate
operator|+=
name|itemHeight
argument_list|(
name|viewItemIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|viewItemCoordinate
operator|>=
name|contentsCoordinate
condition|)
return|return
operator|(
name|viewItemIndex
operator|>=
name|itemCount
condition|?
operator|-
literal|1
else|:
name|viewItemIndex
operator|)
return|;
block|}
block|}
else|else
block|{
comment|// ScrollPerItem
name|int
name|topViewItemIndex
init|=
name|vbar
operator|->
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|uniformRowHeights
condition|)
block|{
if|if
condition|(
name|coordinate
operator|<
literal|0
condition|)
name|coordinate
operator|-=
name|defaultItemHeight
operator|-
literal|1
expr_stmt|;
specifier|const
name|int
name|viewItemIndex
init|=
name|topViewItemIndex
operator|+
operator|(
name|coordinate
operator|/
name|defaultItemHeight
operator|)
decl_stmt|;
return|return
operator|(
operator|(
name|viewItemIndex
operator|>=
name|itemCount
operator|||
name|viewItemIndex
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
name|viewItemIndex
operator|)
return|;
block|}
if|if
condition|(
name|coordinate
operator|>=
literal|0
condition|)
block|{
comment|// the coordinate is in or below the viewport
name|int
name|viewItemCoordinate
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|viewItemIndex
init|=
name|topViewItemIndex
init|;
name|viewItemIndex
operator|<
name|viewItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|viewItemIndex
control|)
block|{
name|viewItemCoordinate
operator|+=
name|itemHeight
argument_list|(
name|viewItemIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|viewItemCoordinate
operator|>
name|coordinate
condition|)
return|return
operator|(
name|viewItemIndex
operator|>=
name|itemCount
condition|?
operator|-
literal|1
else|:
name|viewItemIndex
operator|)
return|;
block|}
block|}
else|else
block|{
comment|// the coordinate is above the viewport
name|int
name|viewItemCoordinate
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|viewItemIndex
init|=
name|topViewItemIndex
init|;
name|viewItemIndex
operator|>=
literal|0
condition|;
operator|--
name|viewItemIndex
control|)
block|{
if|if
condition|(
name|viewItemCoordinate
operator|<=
name|coordinate
condition|)
return|return
operator|(
name|viewItemIndex
operator|>=
name|itemCount
condition|?
operator|-
literal|1
else|:
name|viewItemIndex
operator|)
return|;
name|viewItemCoordinate
operator|-=
name|itemHeight
argument_list|(
name|viewItemIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|viewIndex
name|int
name|QTreeViewPrivate
operator|::
name|viewIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|_index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|_index
operator|.
name|isValid
argument_list|()
operator|||
name|viewItems
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
specifier|const
name|int
name|totalCount
init|=
name|viewItems
operator|.
name|count
argument_list|()
decl_stmt|;
specifier|const
name|QModelIndex
name|index
init|=
name|_index
operator|.
name|sibling
argument_list|(
name|_index
operator|.
name|row
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|int
name|row
init|=
name|index
operator|.
name|row
argument_list|()
decl_stmt|;
specifier|const
name|quintptr
name|internalId
init|=
name|index
operator|.
name|internalId
argument_list|()
decl_stmt|;
comment|// We start nearest to the lastViewedItem
name|int
name|localCount
init|=
name|qMin
argument_list|(
name|lastViewedItem
operator|-
literal|1
argument_list|,
name|totalCount
operator|-
name|lastViewedItem
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|localCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QModelIndex
modifier|&
name|idx1
init|=
name|viewItems
operator|.
name|at
argument_list|(
name|lastViewedItem
operator|+
name|i
argument_list|)
operator|.
name|index
decl_stmt|;
if|if
condition|(
name|idx1
operator|.
name|row
argument_list|()
operator|==
name|row
operator|&&
name|idx1
operator|.
name|internalId
argument_list|()
operator|==
name|internalId
condition|)
block|{
name|lastViewedItem
operator|=
name|lastViewedItem
operator|+
name|i
expr_stmt|;
return|return
name|lastViewedItem
return|;
block|}
specifier|const
name|QModelIndex
modifier|&
name|idx2
init|=
name|viewItems
operator|.
name|at
argument_list|(
name|lastViewedItem
operator|-
name|i
operator|-
literal|1
argument_list|)
operator|.
name|index
decl_stmt|;
if|if
condition|(
name|idx2
operator|.
name|row
argument_list|()
operator|==
name|row
operator|&&
name|idx2
operator|.
name|internalId
argument_list|()
operator|==
name|internalId
condition|)
block|{
name|lastViewedItem
operator|=
name|lastViewedItem
operator|-
name|i
operator|-
literal|1
expr_stmt|;
return|return
name|lastViewedItem
return|;
block|}
block|}
for|for
control|(
name|int
name|j
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|lastViewedItem
operator|+
name|localCount
argument_list|)
init|;
name|j
operator|<
name|totalCount
condition|;
operator|++
name|j
control|)
block|{
specifier|const
name|QModelIndex
modifier|&
name|idx
init|=
name|viewItems
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|.
name|index
decl_stmt|;
if|if
condition|(
name|idx
operator|.
name|row
argument_list|()
operator|==
name|row
operator|&&
name|idx
operator|.
name|internalId
argument_list|()
operator|==
name|internalId
condition|)
block|{
name|lastViewedItem
operator|=
name|j
expr_stmt|;
return|return
name|j
return|;
block|}
block|}
for|for
control|(
name|int
name|j
init|=
name|qMin
argument_list|(
name|totalCount
argument_list|,
name|lastViewedItem
operator|-
name|localCount
argument_list|)
operator|-
literal|1
init|;
name|j
operator|>=
literal|0
condition|;
operator|--
name|j
control|)
block|{
specifier|const
name|QModelIndex
modifier|&
name|idx
init|=
name|viewItems
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|.
name|index
decl_stmt|;
if|if
condition|(
name|idx
operator|.
name|row
argument_list|()
operator|==
name|row
operator|&&
name|idx
operator|.
name|internalId
argument_list|()
operator|==
name|internalId
condition|)
block|{
name|lastViewedItem
operator|=
name|j
expr_stmt|;
return|return
name|j
return|;
block|}
block|}
comment|// nothing found
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|modelIndex
name|QModelIndex
name|QTreeViewPrivate
operator|::
name|modelIndex
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|i
operator|<
literal|0
operator|||
name|i
operator|>=
name|viewItems
operator|.
name|count
argument_list|()
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|QModelIndex
name|ret
init|=
name|viewItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|index
decl_stmt|;
if|if
condition|(
name|column
condition|)
name|ret
operator|=
name|ret
operator|.
name|sibling
argument_list|(
name|ret
operator|.
name|row
argument_list|()
argument_list|,
name|column
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|firstVisibleItem
name|int
name|QTreeViewPrivate
operator|::
name|firstVisibleItem
parameter_list|(
name|int
modifier|*
name|offset
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|value
init|=
name|vbar
operator|->
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|verticalScrollMode
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
condition|)
block|{
if|if
condition|(
name|offset
condition|)
operator|*
name|offset
operator|=
literal|0
expr_stmt|;
return|return
operator|(
name|value
operator|<
literal|0
operator|||
name|value
operator|>=
name|viewItems
operator|.
name|count
argument_list|()
operator|)
condition|?
operator|-
literal|1
else|:
name|value
return|;
block|}
comment|// ScrollMode == ScrollPerPixel
if|if
condition|(
name|uniformRowHeights
condition|)
block|{
if|if
condition|(
operator|!
name|defaultItemHeight
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|offset
condition|)
operator|*
name|offset
operator|=
operator|-
operator|(
name|value
operator|%
name|defaultItemHeight
operator|)
expr_stmt|;
return|return
name|value
operator|/
name|defaultItemHeight
return|;
block|}
name|int
name|y
init|=
literal|0
decl_stmt|;
comment|// ### optimize (use spans ?)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|viewItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|y
operator|+=
name|itemHeight
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// the height value is cached
if|if
condition|(
name|y
operator|>
name|value
condition|)
block|{
if|if
condition|(
name|offset
condition|)
operator|*
name|offset
operator|=
name|y
operator|-
name|value
operator|-
name|itemHeight
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|columnAt
name|int
name|QTreeViewPrivate
operator|::
name|columnAt
parameter_list|(
name|int
name|x
parameter_list|)
specifier|const
block|{
return|return
name|header
operator|->
name|logicalIndexAt
argument_list|(
name|x
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|updateScrollBars
name|void
name|QTreeViewPrivate
operator|::
name|updateScrollBars
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|QSize
name|viewportSize
init|=
name|viewport
operator|->
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|viewportSize
operator|.
name|isValid
argument_list|()
condition|)
name|viewportSize
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|viewItems
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|q
operator|->
name|doItemsLayout
argument_list|()
expr_stmt|;
block|}
name|int
name|itemsInViewport
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|uniformRowHeights
condition|)
block|{
if|if
condition|(
name|defaultItemHeight
operator|<=
literal|0
condition|)
name|itemsInViewport
operator|=
name|viewItems
operator|.
name|count
argument_list|()
expr_stmt|;
else|else
name|itemsInViewport
operator|=
name|viewportSize
operator|.
name|height
argument_list|()
operator|/
name|defaultItemHeight
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|int
name|itemsCount
init|=
name|viewItems
operator|.
name|count
argument_list|()
decl_stmt|;
specifier|const
name|int
name|viewportHeight
init|=
name|viewportSize
operator|.
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|height
init|=
literal|0
init|,
name|item
init|=
name|itemsCount
operator|-
literal|1
init|;
name|item
operator|>=
literal|0
condition|;
operator|--
name|item
control|)
block|{
name|height
operator|+=
name|itemHeight
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|height
operator|>
name|viewportHeight
condition|)
break|break;
operator|++
name|itemsInViewport
expr_stmt|;
block|}
block|}
if|if
condition|(
name|verticalScrollMode
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
condition|)
block|{
if|if
condition|(
operator|!
name|viewItems
operator|.
name|isEmpty
argument_list|()
condition|)
name|itemsInViewport
operator|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|itemsInViewport
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
name|viewItems
operator|.
name|count
argument_list|()
operator|-
name|itemsInViewport
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|setPageStep
argument_list|(
name|itemsInViewport
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|setSingleStep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// scroll per pixel
name|int
name|contentsHeight
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|uniformRowHeights
condition|)
block|{
name|contentsHeight
operator|=
name|defaultItemHeight
operator|*
name|viewItems
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// ### optimize (spans or caching)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|viewItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|contentsHeight
operator|+=
name|itemHeight
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|vbar
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
name|contentsHeight
operator|-
name|viewportSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|setPageStep
argument_list|(
name|viewportSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|setSingleStep
argument_list|(
name|qMax
argument_list|(
name|viewportSize
operator|.
name|height
argument_list|()
operator|/
operator|(
name|itemsInViewport
operator|+
literal|1
operator|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|int
name|columnCount
init|=
name|header
operator|->
name|count
argument_list|()
decl_stmt|;
specifier|const
name|int
name|viewportWidth
init|=
name|viewportSize
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|columnsInViewport
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|width
init|=
literal|0
init|,
name|column
init|=
name|columnCount
operator|-
literal|1
init|;
name|column
operator|>=
literal|0
condition|;
operator|--
name|column
control|)
block|{
name|int
name|logical
init|=
name|header
operator|->
name|logicalIndex
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|width
operator|+=
name|header
operator|->
name|sectionSize
argument_list|(
name|logical
argument_list|)
expr_stmt|;
if|if
condition|(
name|width
operator|>
name|viewportWidth
condition|)
break|break;
operator|++
name|columnsInViewport
expr_stmt|;
block|}
if|if
condition|(
name|columnCount
operator|>
literal|0
condition|)
name|columnsInViewport
operator|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|columnsInViewport
argument_list|)
expr_stmt|;
if|if
condition|(
name|horizontalScrollMode
operator|==
name|QAbstractItemView
operator|::
name|ScrollPerItem
condition|)
block|{
name|hbar
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
name|columnCount
operator|-
name|columnsInViewport
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|setPageStep
argument_list|(
name|columnsInViewport
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|setSingleStep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// scroll per pixel
specifier|const
name|int
name|horizontalLength
init|=
name|header
operator|->
name|length
argument_list|()
decl_stmt|;
specifier|const
name|QSize
name|maxSize
init|=
name|q
operator|->
name|maximumViewportSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxSize
operator|.
name|width
argument_list|()
operator|>=
name|horizontalLength
operator|&&
name|vbar
operator|->
name|maximum
argument_list|()
operator|<=
literal|0
condition|)
name|viewportSize
operator|=
name|maxSize
expr_stmt|;
name|hbar
operator|->
name|setPageStep
argument_list|(
name|viewportSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
name|qMax
argument_list|(
name|horizontalLength
operator|-
name|viewportSize
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|setSingleStep
argument_list|(
name|qMax
argument_list|(
name|viewportSize
operator|.
name|width
argument_list|()
operator|/
operator|(
name|columnsInViewport
operator|+
literal|1
operator|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|itemDecorationAt
name|int
name|QTreeViewPrivate
operator|::
name|itemDecorationAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|executePostedLayout
argument_list|()
expr_stmt|;
name|int
name|x
init|=
name|pos
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|column
init|=
name|header
operator|->
name|logicalIndexAt
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|!=
literal|0
condition|)
return|return
operator|-
literal|1
return|;
comment|// no logical index at x
name|int
name|viewItemIndex
init|=
name|itemAtCoordinate
argument_list|(
name|pos
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|returning
init|=
name|itemDecorationRect
argument_list|(
name|modelIndex
argument_list|(
name|viewItemIndex
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|returning
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|viewItemIndex
return|;
block|}
end_function
begin_function
DECL|function|itemDecorationRect
name|QRect
name|QTreeViewPrivate
operator|::
name|itemDecorationRect
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rootDecoration
operator|&&
name|index
operator|.
name|parent
argument_list|()
operator|==
name|root
condition|)
return|return
name|QRect
argument_list|()
return|;
comment|// no decoration at root
name|int
name|viewItemIndex
init|=
name|viewIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|viewItemIndex
operator|<
literal|0
operator|||
operator|!
name|hasVisibleChildren
argument_list|(
name|viewItems
operator|.
name|at
argument_list|(
name|viewItemIndex
argument_list|)
operator|.
name|index
argument_list|)
condition|)
return|return
name|QRect
argument_list|()
return|;
name|int
name|itemIndentation
init|=
name|indentationForItem
argument_list|(
name|viewItemIndex
argument_list|)
decl_stmt|;
name|int
name|position
init|=
name|header
operator|->
name|sectionViewportPosition
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|header
operator|->
name|sectionSize
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QRect
name|rect
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|)
name|rect
operator|=
name|QRect
argument_list|(
name|position
operator|+
name|size
operator|-
name|itemIndentation
argument_list|,
name|coordinateForItem
argument_list|(
name|viewItemIndex
argument_list|)
argument_list|,
name|indent
argument_list|,
name|itemHeight
argument_list|(
name|viewItemIndex
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|rect
operator|=
name|QRect
argument_list|(
name|position
operator|+
name|itemIndentation
operator|-
name|indent
argument_list|,
name|coordinateForItem
argument_list|(
name|viewItemIndex
argument_list|)
argument_list|,
name|indent
argument_list|,
name|itemHeight
argument_list|(
name|viewItemIndex
argument_list|)
argument_list|)
expr_stmt|;
name|QStyleOption
name|opt
decl_stmt|;
name|opt
operator|.
name|initFrom
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|opt
operator|.
name|rect
operator|=
name|rect
expr_stmt|;
return|return
name|q
operator|->
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TreeViewDisclosureItem
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|columnRanges
name|QList
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
name|QTreeViewPrivate
operator|::
name|columnRanges
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topIndex
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomIndex
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|topVisual
init|=
name|header
operator|->
name|visualIndex
argument_list|(
name|topIndex
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|,
name|bottomVisual
init|=
name|header
operator|->
name|visualIndex
argument_list|(
name|bottomIndex
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|start
init|=
name|qMin
argument_list|(
name|topVisual
argument_list|,
name|bottomVisual
argument_list|)
decl_stmt|;
specifier|const
name|int
name|end
init|=
name|qMax
argument_list|(
name|topVisual
argument_list|,
name|bottomVisual
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|logicalIndexes
decl_stmt|;
comment|//we iterate over the visual indexes to get the logical indexes
for|for
control|(
name|int
name|c
init|=
name|start
init|;
name|c
operator|<=
name|end
condition|;
name|c
operator|++
control|)
block|{
specifier|const
name|int
name|logical
init|=
name|header
operator|->
name|logicalIndex
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|header
operator|->
name|isSectionHidden
argument_list|(
name|logical
argument_list|)
condition|)
block|{
name|logicalIndexes
operator|<<
name|logical
expr_stmt|;
block|}
block|}
comment|//let's sort the list
name|qSort
argument_list|(
name|logicalIndexes
operator|.
name|begin
argument_list|()
argument_list|,
name|logicalIndexes
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
name|ret
decl_stmt|;
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|current
decl_stmt|;
name|current
operator|.
name|first
operator|=
operator|-
literal|2
expr_stmt|;
comment|// -1 is not enough because -1+1 = 0
name|current
operator|.
name|second
operator|=
operator|-
literal|2
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|logicalIndexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|logicalColumn
init|=
name|logicalIndexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|second
operator|+
literal|1
operator|!=
name|logicalColumn
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|first
operator|!=
operator|-
literal|2
condition|)
block|{
comment|//let's save the current one
name|ret
operator|+=
name|current
expr_stmt|;
block|}
comment|//let's start a new one
name|current
operator|.
name|first
operator|=
name|current
operator|.
name|second
operator|=
name|logicalColumn
expr_stmt|;
block|}
else|else
block|{
name|current
operator|.
name|second
operator|++
expr_stmt|;
block|}
block|}
comment|//let's get the last range
if|if
condition|(
name|current
operator|.
name|first
operator|!=
operator|-
literal|2
condition|)
block|{
name|ret
operator|+=
name|current
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|select
name|void
name|QTreeViewPrivate
operator|::
name|select
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topIndex
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomIndex
parameter_list|,
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|command
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|QItemSelection
name|selection
decl_stmt|;
specifier|const
name|int
name|top
init|=
name|viewIndex
argument_list|(
name|topIndex
argument_list|)
decl_stmt|,
name|bottom
init|=
name|viewIndex
argument_list|(
name|bottomIndex
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
name|colRanges
init|=
name|columnRanges
argument_list|(
name|topIndex
argument_list|,
name|bottomIndex
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
operator|::
name|const_iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|colRanges
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|colRanges
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|int
name|left
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|first
decl_stmt|,
name|right
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|second
decl_stmt|;
name|QModelIndex
name|previous
decl_stmt|;
name|QItemSelectionRange
name|currentRange
decl_stmt|;
name|QStack
argument_list|<
name|QItemSelectionRange
argument_list|>
name|rangeStack
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|top
init|;
name|i
operator|<=
name|bottom
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|modelIndex
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QModelIndex
name|parent
init|=
name|index
operator|.
name|parent
argument_list|()
decl_stmt|;
name|QModelIndex
name|previousParent
init|=
name|previous
operator|.
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|.
name|isValid
argument_list|()
operator|&&
name|parent
operator|==
name|previousParent
condition|)
block|{
comment|// same parent
if|if
condition|(
name|qAbs
argument_list|(
name|previous
operator|.
name|row
argument_list|()
operator|-
name|index
operator|.
name|row
argument_list|()
argument_list|)
operator|>
literal|1
condition|)
block|{
comment|//a hole (hidden index inside a range) has been detected
if|if
condition|(
name|currentRange
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|selection
operator|.
name|append
argument_list|(
name|currentRange
argument_list|)
expr_stmt|;
block|}
comment|//let's start a new range
name|currentRange
operator|=
name|QItemSelectionRange
argument_list|(
name|index
operator|.
name|sibling
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|left
argument_list|)
argument_list|,
name|index
operator|.
name|sibling
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QModelIndex
name|tl
init|=
name|model
operator|->
name|index
argument_list|(
name|currentRange
operator|.
name|top
argument_list|()
argument_list|,
name|currentRange
operator|.
name|left
argument_list|()
argument_list|,
name|currentRange
operator|.
name|parent
argument_list|()
argument_list|)
decl_stmt|;
name|currentRange
operator|=
name|QItemSelectionRange
argument_list|(
name|tl
argument_list|,
name|index
operator|.
name|sibling
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|previous
operator|.
name|isValid
argument_list|()
operator|&&
name|parent
operator|==
name|model
operator|->
name|index
argument_list|(
name|previous
operator|.
name|row
argument_list|()
argument_list|,
literal|0
argument_list|,
name|previousParent
argument_list|)
condition|)
block|{
comment|// item is child of previous
name|rangeStack
operator|.
name|push
argument_list|(
name|currentRange
argument_list|)
expr_stmt|;
name|currentRange
operator|=
name|QItemSelectionRange
argument_list|(
name|index
operator|.
name|sibling
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|left
argument_list|)
argument_list|,
name|index
operator|.
name|sibling
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|currentRange
operator|.
name|isValid
argument_list|()
condition|)
name|selection
operator|.
name|append
argument_list|(
name|currentRange
argument_list|)
expr_stmt|;
if|if
condition|(
name|rangeStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|currentRange
operator|=
name|QItemSelectionRange
argument_list|(
name|index
operator|.
name|sibling
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|left
argument_list|)
argument_list|,
name|index
operator|.
name|sibling
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentRange
operator|=
name|rangeStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|index
operator|=
name|currentRange
operator|.
name|bottomRight
argument_list|()
expr_stmt|;
comment|//let's resume the range
operator|--
name|i
expr_stmt|;
comment|//we process again the current item
block|}
block|}
name|previous
operator|=
name|index
expr_stmt|;
block|}
if|if
condition|(
name|currentRange
operator|.
name|isValid
argument_list|()
condition|)
name|selection
operator|.
name|append
argument_list|(
name|currentRange
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rangeStack
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|selection
operator|.
name|append
argument_list|(
name|rangeStack
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|selection
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startAndEndColumns
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|QTreeViewPrivate
operator|::
name|startAndEndColumns
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|header
operator|->
name|visualIndexAt
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|header
operator|->
name|visualIndexAt
argument_list|(
name|rect
operator|.
name|right
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|)
block|{
name|start
operator|=
operator|(
name|start
operator|==
operator|-
literal|1
condition|?
name|header
operator|->
name|count
argument_list|()
operator|-
literal|1
else|:
name|start
operator|)
expr_stmt|;
name|end
operator|=
operator|(
name|end
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|end
operator|)
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
operator|(
name|start
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|start
operator|)
expr_stmt|;
name|end
operator|=
operator|(
name|end
operator|==
operator|-
literal|1
condition|?
name|header
operator|->
name|count
argument_list|()
operator|-
literal|1
else|:
name|end
operator|)
expr_stmt|;
block|}
return|return
name|qMakePair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|(
name|qMin
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|,
name|qMax
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hasVisibleChildren
name|bool
name|QTreeViewPrivate
operator|::
name|hasVisibleChildren
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|->
name|hasChildren
argument_list|(
name|parent
argument_list|)
condition|)
block|{
if|if
condition|(
name|hiddenIndexes
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|q
operator|->
name|isIndexHidden
argument_list|(
name|parent
argument_list|)
condition|)
return|return
literal|false
return|;
name|int
name|rowCount
init|=
name|model
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|q
operator|->
name|isRowHidden
argument_list|(
name|i
argument_list|,
name|parent
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|rowCount
operator|==
literal|0
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|_q_sortIndicatorChanged
name|void
name|QTreeViewPrivate
operator|::
name|_q_sortIndicatorChanged
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
parameter_list|)
block|{
name|model
operator|->
name|sort
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp  */
end_comment
begin_function
DECL|function|currentChanged
name|void
name|QTreeView
operator|::
name|currentChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|current
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|previous
parameter_list|)
block|{
name|QAbstractItemView
operator|::
name|currentChanged
argument_list|(
name|current
argument_list|,
name|previous
argument_list|)
expr_stmt|;
if|if
condition|(
name|allColumnsShowFocus
argument_list|()
condition|)
block|{
if|if
condition|(
name|previous
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QRect
name|previousRect
init|=
name|visualRect
argument_list|(
name|previous
argument_list|)
decl_stmt|;
name|previousRect
operator|.
name|setX
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|previousRect
operator|.
name|setWidth
argument_list|(
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|viewport
argument_list|()
operator|->
name|update
argument_list|(
name|previousRect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QRect
name|currentRect
init|=
name|visualRect
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|currentRect
operator|.
name|setX
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|currentRect
operator|.
name|setWidth
argument_list|(
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|viewport
argument_list|()
operator|->
name|update
argument_list|(
name|currentRect
argument_list|)
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
if|if
condition|(
name|QAccessible
operator|::
name|isActive
argument_list|()
operator|&&
name|current
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|entry
init|=
operator|(
name|visualIndex
argument_list|(
name|current
argument_list|)
operator|+
operator|(
name|header
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
operator|)
operator|*
name|current
operator|.
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
operator|+
name|current
operator|.
name|column
argument_list|()
decl_stmt|;
name|QAccessibleEvent
name|event
argument_list|(
name|this
argument_list|,
name|QAccessible
operator|::
name|Focus
argument_list|)
decl_stmt|;
name|event
operator|.
name|setChild
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!   \reimp  */
end_comment
begin_function
DECL|function|selectionChanged
name|void
name|QTreeView
operator|::
name|selectionChanged
parameter_list|(
specifier|const
name|QItemSelection
modifier|&
name|selected
parameter_list|,
specifier|const
name|QItemSelection
modifier|&
name|deselected
parameter_list|)
block|{
name|QAbstractItemView
operator|::
name|selectionChanged
argument_list|(
name|selected
argument_list|,
name|deselected
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
if|if
condition|(
name|QAccessible
operator|::
name|isActive
argument_list|()
condition|)
block|{
comment|// ### does not work properly for selection ranges.
name|QModelIndex
name|sel
init|=
name|selected
operator|.
name|indexes
argument_list|()
operator|.
name|value
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sel
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|entry
init|=
operator|(
name|visualIndex
argument_list|(
name|sel
argument_list|)
operator|+
operator|(
name|header
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
operator|)
operator|*
name|sel
operator|.
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
operator|+
name|sel
operator|.
name|column
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|entry
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|event
argument_list|(
name|this
argument_list|,
name|QAccessible
operator|::
name|Selection
argument_list|)
decl_stmt|;
name|event
operator|.
name|setChild
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
name|QModelIndex
name|desel
init|=
name|deselected
operator|.
name|indexes
argument_list|()
operator|.
name|value
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|desel
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|entry
init|=
operator|(
name|visualIndex
argument_list|(
name|desel
argument_list|)
operator|+
operator|(
name|header
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
operator|)
operator|*
name|desel
operator|.
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
operator|+
name|desel
operator|.
name|column
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|entry
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|event
argument_list|(
name|this
argument_list|,
name|QAccessible
operator|::
name|SelectionRemove
argument_list|)
decl_stmt|;
name|event
operator|.
name|setChild
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|visualIndex
name|int
name|QTreeView
operator|::
name|visualIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTreeView
argument_list|)
expr_stmt|;
name|d
operator|->
name|executePostedLayout
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|viewIndex
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qtreeview.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TREEVIEW
end_comment
end_unit
