begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDND_P_H
end_ifndef
begin_define
DECL|macro|QDND_P_H
define|#
directive|define
name|QDND_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of other Qt classes.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qobject.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qmap.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qmime.h"
end_include
begin_include
include|#
directive|include
file|"QtWidgets/qdrag.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qcursor.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qpoint.h"
end_include
begin_include
include|#
directive|include
file|"private/qobject_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC
end_ifdef
begin_include
include|#
directive|include
file|"private/qt_mac_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_include
include|#
directive|include
file|<objidl.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QEventLoop
name|class
name|QEventLoop
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|QT_NO_DRAGANDDROP
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_NO_CLIPBOARD
argument_list|)
operator|)
end_if
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QInternalMimeData
range|:
name|public
name|QMimeData
block|{
name|Q_OBJECT
name|public
operator|:
name|QInternalMimeData
argument_list|()
block|;
operator|~
name|QInternalMimeData
argument_list|()
block|;
name|bool
name|hasFormat
argument_list|(
argument|const QString&mimeType
argument_list|)
specifier|const
block|;
name|QStringList
name|formats
argument_list|()
specifier|const
block|;
specifier|static
name|bool
name|canReadData
argument_list|(
specifier|const
name|QString
operator|&
name|mimeType
argument_list|)
block|;
specifier|static
name|QStringList
name|formatsHelper
argument_list|(
specifier|const
name|QMimeData
operator|*
name|data
argument_list|)
block|;
specifier|static
name|bool
name|hasFormatHelper
argument_list|(
specifier|const
name|QString
operator|&
name|mimeType
argument_list|,
specifier|const
name|QMimeData
operator|*
name|data
argument_list|)
block|;
specifier|static
name|QByteArray
name|renderDataHelper
argument_list|(
specifier|const
name|QString
operator|&
name|mimeType
argument_list|,
specifier|const
name|QMimeData
operator|*
name|data
argument_list|)
block|;
name|protected
operator|:
name|QVariant
name|retrieveData
argument_list|(
argument|const QString&mimeType
argument_list|,
argument|QVariant::Type type
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|hasFormat_sys
argument_list|(
argument|const QString&mimeType
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|QStringList
name|formats_sys
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|QVariant
name|retrieveData_sys
argument_list|(
argument|const QString&mimeType
argument_list|,
argument|QVariant::Type type
argument_list|)
specifier|const
operator|=
literal|0
block|; }
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WIN
end_ifdef
begin_decl_stmt
name|class
name|QOleDataObject
range|:
name|public
name|IDataObject
block|{
name|public
operator|:
name|explicit
name|QOleDataObject
argument_list|(
name|QMimeData
operator|*
name|mimeData
argument_list|)
block|;
name|virtual
operator|~
name|QOleDataObject
argument_list|()
block|;
name|void
name|releaseQt
argument_list|()
block|;
specifier|const
name|QMimeData
operator|*
name|mimeData
argument_list|()
specifier|const
block|;
name|DWORD
name|reportedPerformedEffect
argument_list|()
specifier|const
block|;
comment|// IUnknown methods
name|STDMETHOD
argument_list|(
argument|QueryInterface
argument_list|)
operator|(
name|REFIID
name|riid
expr|,
name|void
name|FAR
operator|*
name|FAR
operator|*
name|ppvObj
operator|)
block|;
name|STDMETHOD_
argument_list|(
name|ULONG
argument_list|,
name|AddRef
argument_list|)
argument_list|(
name|void
argument_list|)
block|;
name|STDMETHOD_
argument_list|(
name|ULONG
argument_list|,
name|Release
argument_list|)
argument_list|(
name|void
argument_list|)
block|;
comment|// IDataObject methods
name|STDMETHOD
argument_list|(
argument|GetData
argument_list|)
operator|(
name|LPFORMATETC
name|pformatetcIn
expr|,
name|LPSTGMEDIUM
name|pmedium
operator|)
block|;
name|STDMETHOD
argument_list|(
argument|GetDataHere
argument_list|)
operator|(
name|LPFORMATETC
name|pformatetc
expr|,
name|LPSTGMEDIUM
name|pmedium
operator|)
block|;
name|STDMETHOD
argument_list|(
argument|QueryGetData
argument_list|)
operator|(
name|LPFORMATETC
name|pformatetc
operator|)
block|;
name|STDMETHOD
argument_list|(
argument|GetCanonicalFormatEtc
argument_list|)
operator|(
name|LPFORMATETC
name|pformatetc
expr|,
name|LPFORMATETC
name|pformatetcOut
operator|)
block|;
name|STDMETHOD
argument_list|(
argument|SetData
argument_list|)
operator|(
name|LPFORMATETC
name|pformatetc
expr|,
name|STGMEDIUM
name|FAR
operator|*
name|pmedium
expr|,
name|BOOL
name|fRelease
operator|)
block|;
name|STDMETHOD
argument_list|(
argument|EnumFormatEtc
argument_list|)
operator|(
name|DWORD
name|dwDirection
expr|,
name|LPENUMFORMATETC
name|FAR
operator|*
name|ppenumFormatEtc
operator|)
block|;
name|STDMETHOD
argument_list|(
argument|DAdvise
argument_list|)
operator|(
name|FORMATETC
name|FAR
operator|*
name|pFormatetc
expr|,
name|DWORD
name|advf
expr|,
name|LPADVISESINK
name|pAdvSink
expr|,
name|DWORD
name|FAR
operator|*
name|pdwConnection
operator|)
block|;
name|STDMETHOD
argument_list|(
argument|DUnadvise
argument_list|)
operator|(
name|DWORD
name|dwConnection
operator|)
block|;
name|STDMETHOD
argument_list|(
argument|EnumDAdvise
argument_list|)
operator|(
name|LPENUMSTATDATA
name|FAR
operator|*
name|ppenumAdvise
operator|)
block|;
name|private
operator|:
name|ULONG
name|m_refs
block|;
name|QPointer
operator|<
name|QMimeData
operator|>
name|data
block|;
name|int
name|CF_PERFORMEDDROPEFFECT
block|;
name|DWORD
name|performedEffect
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QOleEnumFmtEtc
range|:
name|public
name|IEnumFORMATETC
block|{
name|public
operator|:
name|explicit
name|QOleEnumFmtEtc
argument_list|(
specifier|const
name|QVector
operator|<
name|FORMATETC
operator|>
operator|&
name|fmtetcs
argument_list|)
block|;
name|explicit
name|QOleEnumFmtEtc
argument_list|(
specifier|const
name|QVector
operator|<
name|LPFORMATETC
operator|>
operator|&
name|lpfmtetcs
argument_list|)
block|;
name|virtual
operator|~
name|QOleEnumFmtEtc
argument_list|()
block|;
name|bool
name|isNull
argument_list|()
specifier|const
block|;
comment|// IUnknown methods
name|STDMETHOD
argument_list|(
argument|QueryInterface
argument_list|)
operator|(
name|REFIID
name|riid
expr|,
name|void
name|FAR
operator|*
name|FAR
operator|*
name|ppvObj
operator|)
block|;
name|STDMETHOD_
argument_list|(
name|ULONG
argument_list|,
name|AddRef
argument_list|)
argument_list|(
name|void
argument_list|)
block|;
name|STDMETHOD_
argument_list|(
name|ULONG
argument_list|,
name|Release
argument_list|)
argument_list|(
name|void
argument_list|)
block|;
comment|// IEnumFORMATETC methods
name|STDMETHOD
argument_list|(
argument|Next
argument_list|)
operator|(
name|ULONG
name|celt
expr|,
name|LPFORMATETC
name|rgelt
expr|,
name|ULONG
name|FAR
operator|*
name|pceltFetched
operator|)
block|;
name|STDMETHOD
argument_list|(
argument|Skip
argument_list|)
operator|(
name|ULONG
name|celt
operator|)
block|;
name|STDMETHOD
argument_list|(
name|Reset
argument_list|)
argument_list|(
name|void
argument_list|)
block|;
name|STDMETHOD
argument_list|(
argument|Clone
argument_list|)
operator|(
name|LPENUMFORMATETC
name|FAR
operator|*
name|newEnum
operator|)
block|;
name|private
operator|:
name|bool
name|copyFormatEtc
argument_list|(
argument|LPFORMATETC dest
argument_list|,
argument|LPFORMATETC src
argument_list|)
specifier|const
block|;
name|ULONG
name|m_dwRefs
block|;
name|ULONG
name|m_nIndex
block|;
name|QVector
operator|<
name|LPFORMATETC
operator|>
name|m_lpfmtetcs
block|;
name|bool
name|m_isNull
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_DRAGANDDROP&& QT_NO_CLIPBOARD
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_decl_stmt
name|class
name|QDragPrivate
range|:
name|public
name|QObjectPrivate
block|{
name|public
operator|:
name|QWidget
operator|*
name|source
block|;
name|QWidget
operator|*
name|target
block|;
name|QMimeData
operator|*
name|data
block|;
name|QPixmap
name|pixmap
block|;
name|QPoint
name|hotspot
block|;
name|Qt
operator|::
name|DropActions
name|possible_actions
block|;
name|Qt
operator|::
name|DropAction
name|executed_action
block|;
name|QMap
operator|<
name|Qt
operator|::
name|DropAction
block|,
name|QPixmap
operator|>
name|customCursors
block|;
name|Qt
operator|::
name|DropAction
name|defaultDropAction
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QDropData
range|:
name|public
name|QInternalMimeData
block|{
name|Q_OBJECT
name|public
operator|:
name|QDropData
argument_list|()
block|;
operator|~
name|QDropData
argument_list|()
block|;
name|protected
operator|:
name|bool
name|hasFormat_sys
argument_list|(
argument|const QString&mimeType
argument_list|)
specifier|const
block|;
name|QStringList
name|formats_sys
argument_list|()
specifier|const
block|;
name|QVariant
name|retrieveData_sys
argument_list|(
argument|const QString&mimeType
argument_list|,
argument|QVariant::Type type
argument_list|)
specifier|const
block|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
name|public
operator|:
name|LPDATAOBJECT
name|currentDataObject
block|;
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QDragManager
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|QDragManager
argument_list|()
block|;
operator|~
name|QDragManager
argument_list|()
block|;
comment|// only friend classes can use QDragManager.
name|friend
name|class
name|QDrag
block|;
name|friend
name|class
name|QDragMoveEvent
block|;
name|friend
name|class
name|QDropEvent
block|;
name|friend
name|class
name|QApplication
block|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|friend
name|class
name|QWidgetPrivate
block|;
comment|//dnd is implemented here
endif|#
directive|endif
name|bool
name|eventFilter
argument_list|(
name|QObject
operator|*
argument_list|,
name|QEvent
operator|*
argument_list|)
block|;
name|void
name|timerEvent
argument_list|(
name|QTimerEvent
operator|*
argument_list|)
block|;
name|public
operator|:
name|Qt
operator|::
name|DropAction
name|drag
argument_list|(
name|QDrag
operator|*
argument_list|)
block|;
name|void
name|cancel
argument_list|(
argument|bool deleteSource = true
argument_list|)
block|;
name|void
name|move
argument_list|(
specifier|const
name|QPoint
operator|&
argument_list|)
block|;
name|void
name|drop
argument_list|()
block|;
name|void
name|updatePixmap
argument_list|()
block|;
name|QWidget
operator|*
name|source
argument_list|()
specifier|const
block|{
return|return
name|object
operator|?
name|object
operator|->
name|d_func
argument_list|()
operator|->
name|source
operator|:
literal|0
return|;
block|}
name|QDragPrivate
operator|*
name|dragPrivate
argument_list|()
specifier|const
block|{
return|return
name|object
condition|?
name|object
operator|->
name|d_func
argument_list|()
else|:
literal|0
return|;
block|}
specifier|static
name|QDragPrivate
operator|*
name|dragPrivate
argument_list|(
argument|QDrag *drag
argument_list|)
block|{
return|return
name|drag
condition|?
name|drag
operator|->
name|d_func
argument_list|()
else|:
literal|0
return|;
block|}
specifier|static
name|QDragManager
operator|*
name|self
argument_list|()
block|;
name|Qt
operator|::
name|DropAction
name|defaultAction
argument_list|(
argument|Qt::DropActions possibleActions
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|)
specifier|const
block|;
name|QDrag
operator|*
name|object
block|;
name|void
name|updateCursor
argument_list|()
block|;
name|bool
name|beingCancelled
block|;
name|bool
name|restoreCursor
block|;
name|bool
name|willDrop
block|;
name|QEventLoop
operator|*
name|eventLoop
block|;
name|QPixmap
name|dragCursor
argument_list|(
argument|Qt::DropAction action
argument_list|)
specifier|const
block|;
name|bool
name|hasCustomDragCursors
argument_list|()
specifier|const
block|;
name|QDropData
operator|*
name|dropData
block|;
name|void
name|emitActionChanged
argument_list|(
argument|Qt::DropAction newAction
argument_list|)
block|{
if|if
condition|(
name|object
condition|)
name|emit
name|object
operator|->
name|actionChanged
parameter_list|(
name|newAction
parameter_list|)
function_decl|;
block|}
name|void
name|setCurrentTarget
argument_list|(
argument|QWidget *target
argument_list|,
argument|bool dropped = false
argument_list|)
block|;
name|QWidget
operator|*
name|currentTarget
argument_list|()
block|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|QPixmap
name|xdndMimeTransferedPixmap
index|[
literal|2
index|]
block|;
name|int
name|xdndMimeTransferedPixmapIndex
block|;
endif|#
directive|endif
name|private
operator|:
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_QPA
argument_list|)
name|Qt
operator|::
name|DropAction
name|currentActionForOverrideCursor
block|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursor
name|overrideCursor
block|;
endif|#
directive|endif
endif|#
directive|endif
name|QWidget
operator|*
name|currentDropTarget
block|;
specifier|static
name|QDragManager
operator|*
name|instance
block|;
name|Q_DISABLE_COPY
argument_list|(
argument|QDragManager
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
end_if
begin_decl_stmt
name|class
name|QOleDropTarget
range|:
name|public
name|IDropTarget
block|{
name|public
operator|:
name|QOleDropTarget
argument_list|(
name|QWidget
operator|*
name|w
argument_list|)
block|;
name|virtual
operator|~
name|QOleDropTarget
argument_list|()
block|{}
name|void
name|releaseQt
argument_list|()
block|;
comment|// IUnknown methods
name|STDMETHOD
argument_list|(
argument|QueryInterface
argument_list|)
operator|(
name|REFIID
name|riid
expr|,
name|void
name|FAR
operator|*
name|FAR
operator|*
name|ppvObj
operator|)
block|;
name|STDMETHOD_
argument_list|(
name|ULONG
argument_list|,
name|AddRef
argument_list|)
argument_list|(
name|void
argument_list|)
block|;
name|STDMETHOD_
argument_list|(
name|ULONG
argument_list|,
name|Release
argument_list|)
argument_list|(
name|void
argument_list|)
block|;
comment|// IDropTarget methods
name|STDMETHOD
argument_list|(
argument|DragEnter
argument_list|)
operator|(
name|LPDATAOBJECT
name|pDataObj
expr|,
name|DWORD
name|grfKeyState
expr|,
name|POINTL
name|pt
expr|,
name|LPDWORD
name|pdwEffect
operator|)
block|;
name|STDMETHOD
argument_list|(
argument|DragOver
argument_list|)
operator|(
name|DWORD
name|grfKeyState
expr|,
name|POINTL
name|pt
expr|,
name|LPDWORD
name|pdwEffect
operator|)
block|;
name|STDMETHOD
argument_list|(
name|DragLeave
argument_list|)
argument_list|()
block|;
name|STDMETHOD
argument_list|(
argument|Drop
argument_list|)
operator|(
name|LPDATAOBJECT
name|pDataObj
expr|,
name|DWORD
name|grfKeyState
expr|,
name|POINTL
name|pt
expr|,
name|LPDWORD
name|pdwEffect
operator|)
block|;
name|private
operator|:
name|ULONG
name|m_refs
block|;
name|QWidget
operator|*
name|widget
block|;
name|QPointer
operator|<
name|QWidget
operator|>
name|currentWidget
block|;
name|QRect
name|answerRect
block|;
name|QPoint
name|lastPoint
block|;
name|DWORD
name|chosenEffect
block|;
name|DWORD
name|lastKeyState
block|;
name|void
name|sendDragEnterEvent
argument_list|(
argument|QWidget *to
argument_list|,
argument|DWORD grfKeyState
argument_list|,
argument|POINTL pt
argument_list|,
argument|LPDWORD pdwEffect
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
end_if
begin_decl_stmt
name|class
name|QCocoaDropData
range|:
name|public
name|QInternalMimeData
block|{
name|Q_OBJECT
name|public
operator|:
name|QCocoaDropData
argument_list|(
argument|CFStringRef pasteboard
argument_list|)
block|;
operator|~
name|QCocoaDropData
argument_list|()
block|;
name|protected
operator|:
name|bool
name|hasFormat_sys
argument_list|(
argument|const QString&mimeType
argument_list|)
specifier|const
block|;
name|QStringList
name|formats_sys
argument_list|()
specifier|const
block|;
name|QVariant
name|retrieveData_sys
argument_list|(
argument|const QString&mimeType
argument_list|,
argument|QVariant::Type type
argument_list|)
specifier|const
block|;
name|public
operator|:
name|CFStringRef
name|dropPasteboard
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_DRAGANDDROP
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QDND_P_H
end_comment
end_unit
